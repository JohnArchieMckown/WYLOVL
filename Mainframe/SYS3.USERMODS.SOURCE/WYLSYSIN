WYLSYSIN TITLE 'Input Exit for High-Level Assembler'                    00001000
WYLSYSIN CSECT                                                          00002000
*********************************************************************   00003000
*                                                                   *   00004000
*  SYSIN exit for HLASM to read EDIT format source files            *   00005000
*                                                                   *   00006000
*  Mark C. Lawrence 09/28/93                                        *   00007000
*                                                                   *   00008000
*  Last revision 1997/01/31                                         *   00009000
*                                                                   *   00010000
*********************************************************************   00011000
         SPACE                                                          00012000
*********************************************************************   00013000
*                                                                   *   00014000
*  Requires IOPROGM.MACLIB for assembly and should have             *   00015000
*  SYS4.MACLIB ahead of any "WYLBUR/ORVYL" maclibs                  *   00016000
*  Also requires appropriate HLASM maclib.                          *   00017000
*                                                                   *   00018000
*********************************************************************   00019000
         SPACE                                                          00020000
R0       EQU   0                                                        00021000
R1       EQU   1                                                        00022000
RT       EQU   2                   Temp register pair (even-odd)        00023000
RT1      EQU   3                     RT+1                               00024000
RA       EQU   4                   Utility, even                        00025000
RB       EQU   5                   Utility, odd, paired with RA         00026000
RC       EQU   6                   Utility, even                        00027000
RD       EQU   7                   Utility, odd, paired with RC         00028000
R8       EQU   8                   Base register one                    00029000
R9       EQU   9                   Base register two                    00030000
R10      EQU   10                  Base register three                  00031000
PBASE    EQU   11                  Base for caller parm area            00032000
RBASE    EQU   12                  base for request info area           00033000
R13      EQU   13                                                       00034000
LINK     EQU   14                  Linkage                              00035000
RX       EQU   14                  Temporary                            00036000
R14      EQU   14                                                       00037000
RY       EQU   15                  Temporary                            00038000
R15      EQU   15                                                       00039000
         ENTER BASE=8,SAVE=SAVEX1                                       00040000
         ST    R1,PARMPTR          Save caller's parm ptr               00041000
         LM    RA,RD,0(R1)                                              00042000
         STM   RA,RD,PARMREQI      Save caller parms here               00043000
         L     RA,16(R1)           5th parm: DCB                        00044000
         ST    RA,PARMDCBA         ...                                  00045000
         L     RBASE,PARMREQI      Address Request List                 00046000
         USING AXPRIL,RBASE                                             00047000
         CLI   RTYPEFLG,AXPROPN    OPEN                                 00048000
         BE    OPEN                                                     00049000
         CLI   RTYPEFLG,AXPRCLS    CLOSE                                00050000
         BE    CLOSE                                                    00051000
         CLI   RTYPEFLG,AXPRPRO    PROCESS                              00052000
         BE    PROCESS                                                  00053000
         B     IGNORE              none of the above, just get out      00054000
         TITLE 'Open/Close'                                             00055000
OPEN     SR    R15,R15                                                  00056000
         ST    R15,AXPRETC         RC=0                                 00057000
         B     OUT                                                      00058000
         SPACE 2                                                        00059000
CLOSE    SR    R15,R15                                                  00060000
         ST    R15,AXPRETC                                              00061000
         B     OUT                                                      00062000
         TITLE 'Process Records'                                        00063000
PROCESS  SR    R15,R15             RC                                   00064000
         ST    R15,AXPRETC                                              00065000
         L     R0,AXPOPTS          Options                              00066000
         C     R0,=A(AXPONEW)      New info?                            00067000
         BNE   PROCOLD             If not                               00068000
*  got new info, just opened or passed concatenation                    00069000
         L     R1,PARMDCBA         ->DCB                                00070000
         TM    DCBRECFM(R1),RECFMU RECFM=U for Edit?                    00071000
         BNO   NOTEDIT                                     ML970130     00072000
         MVI   IFLAG,1             Show "process"                       00073000
         SR    R0,R0               Zero                                 00074000
         ST    R0,IPOINTER         ...buffer                            00075000
         ST    R0,IBLOCKL             ...stuff                          00076000
         B     NEWBLOCK            ...and do this block                 00077000
         SPACE                                                          00078000
NOTEDIT  MVI   IFLAG,0             Show "don't process"                 00079000
         SR    R15,R15             RC                                   00080000
         ST    R15,AXPRETC                                              00081000
         B     OUT                                                      00082000
         SPACE 2                                                        00083000
PROCOLD  TM    IFLAG,1             Are we doing anything                00084000
         BZ    IGNORE              If not                               00085000
         SPACE                                                          00086000
*********************************************************************   00087000
*                                                                   *   00088000
*  OK, at this point we have a dataset with RECFM=U and we have set *   00089000
*  flags to show we process it.  A "record" from assembler is really*   00090000
*  a block to be unpressed.  First call:  save and set pointers, and*   00091000
*  return one line.  Subsequent:  return one line by "inserting".   *   00092000
*                                                                   *   00093000
*********************************************************************   00094000
         SPACE                                                          00095000
         L     RA,IPOINTER         ->buffer if any                      00096000
         L     RB,IBLOCKL          Block length remaining               00097000
         LTR   RB,RB                                                    00098000
         BP    GETLINE             go unpack from prev. buffer          00099000
*  We have a new block                                                  00100000
NEWBLOCK L     R1,PARMDCBA         ->DCB                                00101000
         L     RA,DCBRECAD(R1)     ->block                              00102000
         ST    RA,IPOINTER         Save block pointer                   00103000
         LH    R0,DCBBLKSI(R1)     Block Length                         00104000
         ST    R0,IBLOCKL          Save                                 00105000
         OI    IFLAG,2             Show doing first line                00106000
         LH    RB,0(RA)            Block descriptor word (really half)  00107000
         N     RB,LO15BITS         In case it's superWYLBUR, hi bit on  00108000
         CR    R0,RB               Block length:BDW                     00109000
         BNL   GETBOK              If ok                                00110000
* Error, length in BDW>blksize                                          00111000
         EDIT  MSEBBBDW,(RB),P#    BDW                                  00112000
         LR    RB,R0               save actual length                   00113000
         EDIT  MSEBBLEN,(R0),P#    actual                               00114000
         EDIT  MSEBBKNT,BLKSINP,P# block count                          00115000
         SYSPRINT MSGEBBAD,MODE=L  Error msg                            00116000
         B     ERROR                                                    00117000
         SPACE                                                          00118000
GETBOK   S     RB,=F'2'            Less BDW                             00119000
         ST    RB,IBLOCKL          Save block length                    00120000
         LA    RA,2(RA)            Block address (skip BDW)             00121000
         ST    RA,IPOINTER         Save block address                   00122000
         SPACE                                                          00123000
*  Now RA->block, RB=length remaining                                   00124000
         SPACE                                                          00125000
GETLINE  EQU   *                                                        00126000
         MVC   WYLFLAGI,0(RA)      High byte for flags                  00127000
         NI    WYLFLAGI,$WYLMASK   Keep only the flags                  00128000
*  (else we'd get couple of hi bits of line number)                     00129000
         MVC   FW,0(RA)            Line number                          00130000
         OFF   FW,$WYLMASK         Clear flag, proof bits               00131000
         L     RT1,=F'99999999'    Biggest possible (non-ext)           00132000
*  Lineno check                                                         00133000
         L     RT,FW               Line number                          00134000
         TBR   RT,M,GETEBAD        Neg is invalid                       00135000
         CR    RT,RT1              Biggest possible                     00136000
         BH    GETEBAD             If illegal                           00137000
         SPACE                                                          00138000
         SR    RT1,RT1             Clear                                00139000
         IC    RT1,4(RA)           Pressed length byte                  00140000
NOEXT1   ST    RT,LINENO           Save line number                     00141000
NOXINT   LA    RT,5(RA)            ->pressed text                       00142000
         TM    WYLFLAGI,$WYLNPRS   This bit on means not pressed        00143000
         BZ    UNPNS               If pressed...                        00144000
*  This line is not pressed.                                            00145000
         LA    RA,5(RA)            Point to text                        00146000
         LA    RX,0(RA,RT1)        Point past this line                 00147000
         ST    RX,IPOINTER         Save for next time                   00148000
         SR    RB,RT1              Length-remaining                     00149000
         S     RB,=F'5'            Less lineno, length byte             00150000
         ST    RB,IBLOCKL          Length left in block                 00151000
         LR    RB,RT1              Data length                          00152000
         B     GETDONE             All through...                       00153000
         SPACE                                                          00154000
*  This line is pressed.                                                00155000
         SPACE                                                          00156000
UNPNS    EQU   *                                                        00157000
         SR    RB,RT1              Amount remaining in block            00158000
         LA    RA,5(RA,RT1)        Point to next line                   00159000
         S     RB,=F'5'            Allow for lineno, length code too    00160000
UNPLC    ST    RA,IPOINTER         Save pointer for next pass           00161000
         ST    RB,IBLOCKL          Save for next pass                   00162000
         SPACE                                                          00163000
*  Now to unpress the text itself.  RT->text, RT1=L'text                00164000
         SPACE                                                          00165000
         MVC   EDBUF,BLANKS        Clear buffer                         00166000
         LA    RC,EDBUF            Buffer for unpressed text            00167000
         SR    RD,RD               Output counter                       00168000
         LA    R0,0(RT,RT1)        End of pressed text+1 for compares   00169000
         LR    RA,RT               @pressed text                        00170000
         LTR   RB,RT1              L'pressed text                       00171000
         BZ    GETEDONE            If no text                           00172000
         SR    RT,RT               Clear                                00173000
         MVC   MSEBRSN,=CL28'invalid control byte'  in case err below   00174000
         SPACE 2                                                        00175000
EDLOOP   IC    RT,0(RA)            Get control byte                     00176000
*  CB has # blanks, #non-blanks 1 digit each...                         00177000
         TBR   RT,Z,GETEBAD0       Both zeros is illegal                00178000
         SRDL  RT,4                Now #blanks in RT                    00179000
         SRL   RT1,28              Now #nonblanks in RT1                00180000
         LA    RC,0(RC,RT)         Bump output pointer to skip blanks   00181000
         LA    RD,0(RD,RT)         Bump output counter...               00182000
         LA    RA,1(RA)            Skip control byte                    00183000
         TBR   RT1,Z,EDNOTX        If no text--don't move it.           00184000
         BCTR  RT1,0               Less 1 for MVC                       00185000
         EX    RT1,EDMVC           Move text                            00186000
         LA    RC,1(RC,RT1)        Bump output pointer                  00187000
         LA    RD,1(RD,RT1)        Bump output counter                  00188000
         LA    RA,1(RA,RT1)        Skip text                            00189000
EDNOTX   C     RD,MAXWYL           Output buffer full?                  00190000
         BNH   EDNF                No, continue                         00191000
*  Buffer full.  Just truncate at MAXWYL bytes, no error raised         00192000
         L     RD,MAXWYL                                                00193000
         B     GETEDONE                                                 00194000
         SPACE                                                          00195000
EDNF     CR    RA,R0               Input pointer : end+1 of text        00196000
         BL    EDLOOP              More to do; go do it                 00197000
         BE    GETEDONE            Came out even---thru.                00198000
*  Length error:  end of line not at the right place.                   00199000
         MVC   MSEBRSN,=CL28'length error'  reason in msg               00200000
*  Here if error.                                                       00201000
GETEBAD0 LA    R15,8               Error level -- tentative             00202000
         EDIT  BCFLD,BLKSINP,P#    Block count                          00203000
         EDIT  LNFLD,LINENO,P#,DECIMAL=3  Edit line number              00204000
         SYSPRINT MSGEDBAD,MODE=L  Write error msg                      00205000
         B     ERROR                                                    00206000
*  Error:  bad line number                                              00207000
GETEBAD  MVC   MSEBRSN,=CL28'invalid line no. X'''                      00208000
         UNPK  MSEBRSN+19(9),FW(5) Hex dump                             00209000
         MVI   MSEBRSN+27,C''''      of bad line-number                 00210000
         TR    MSEBRSN+19(8),$HEX                                       00211000
         B     GETEBAD0                                                 00212000
         SPACE                                                          00213000
EDMVC    MVC   0(0,RC),0(RA)       To move non-blanks                   00214000
         SPACE                                                          00215000
GETEDONE LA    RA,EDBUF            Record address                       00216000
         LR    RB,RD               Record length                        00217000
GETDONE  EQU   *                                                        00218000
         SPACE                                                          00219000
*  Now, we have:                                                        00220000
*  RA->record                                                           00221000
*  RB=l'record                                                          00222000
*  LINENO=WYLBUR line-number                                            00223000
         MVC   LINOBUF,LINOPTRN    EDIT pattern                         00224000
         L     R0,LINENO           Line-number                          00225000
         CVD   R0,P#               ...in decimal                        00226000
         ED    LINOBUF,P#+3        ...in characters                     00227000
         L     R1,PARMBUFR         ->record buffer                      00228000
         MVC   0(256,R1),BLANKS    Clear buffer                         00229000
         MVC   72(8,R1),LINOFLD    Sequence field (line-no)             00230000
         S     RB,=F'1'            -1 for ex-mvc                        00231000
         BM    NULLREC             If no data                           00232000
         EX    RB,MVLINE           Copy data                            00233000
NULLREC  EQU   *                                                        00234000
         SPACE                                                          00235000
*  Now, the record is in the buffer.  If anything left in input         00236000
*  block, "insert" this record.  Otherwise just return                  00237000
         LA    R15,4               RC for insert                        00238000
         L     R0,IBLOCKL          length-remaining                     00239000
         LTR   R0,R0                                                    00240000
         BP    SETRS               If any left                          00241000
         SR    R15,R15             if not, get more                     00242000
SETRS    ST    R15,AXPREAC         Reason code                          00243000
         B     OUT                                                      00244000
         SPACE                                                          00245000
MVLINE   MVC   0(0,R1),0(RA)       (executed) copy data                 00246000
         TITLE 'Termination'                                            00247000
IGNORE   SR    R0,R0                                                    00248000
         ST    R0,AXPRETC          Return Code                          00249000
         SPACE                                                          00250000
OUT      L     R15,AXPRETC                                              00251000
         EXIT  RC=(15)                                                  00252000
         SPACE 2                                                        00253000
ERROR    LA    R15,20              error severity in exit               00254000
         ST    R15,AXPRETC                                              00255000
         ST    R0,AXPERRL          error msg length                     00256000
         L     R15,PARMEBUF        ->Error buffer                       00257000
         LR    R14,R0              L'msg                                00258000
         BCTR  R14,0               -1 for ex-mvc                        00259000
         EX    R14,MVCERR          Copy error msg                       00260000
         LA    R15,12              Error severity in asmblr             00261000
         ST    R15,AXPSEVC                                              00262000
         EXIT  RC=(15)                                                  00263000
         SPACE                                                          00264000
MVCERR   MVC   0(0,R15),0(R1)      to copy msg into buffer              00265000
         TITLE 'Data Area'                                              00266000
P#       DC    D'0'                Work area for EDIT                   00267000
SAVEX1   DC    18F'0'              Save Area                            00268000
PARMPTR  DC    A(0)                Caller's Parm Pointer                00269000
PARMREQI DC    A(0)                -> Request Info                      00270000
PARMBUFR DC    A(0)                -> Buffer                            00271000
PARMEBUF DC    A(0)                -> Error Buffer                      00272000
PARMSRCI DC    A(0)                -> Source Info                       00273000
PARMDCBA DC    A(0)                -> DCB                               00274000
RCODE    DC    F'0'                                                     00275000
IFLAG    DC    X'00'                                                    00276000
BUFUSED  DC    F'0'                                                     00277000
IPOINTER DC    A(0)                ->current input                      00278000
IBLOCKL  DC    F'0'                Length remaining in block            00279000
BLKSINP  DC    F'0'                Block count                          00280000
LINENO   DC    F'0'                Line number, 1/1000s                 00281000
MAXWYL   DC    F'235'              Max. line length                     00282000
FW       DC    F'0'                Work area                            00283000
LO15BITS DC    X'00007FFF'         For masking                          00284000
         SPACE                                                          00285000
*  Flags for edit format records                                        00286000
         SPACE                                                          00287000
WYLFLAGI DS    X                   Copy of flags in hi byte of lineno   00288000
         SPACE                                                          00289000
$WYLNPRS EQU   B'10000000'         This line not pressed                00290000
$WYLPROF EQU   B'01000000'         Proofmark (superWYLBUR)              00291000
$WYLEXTF EQU   B'00100000'         Extended edit format                 00292000
$WYLHWLN EQU   B'00010000'         Halfword length                      00293000
$WYL0000 EQU   B'00001000'         Reserved                             00294000
$WYLMASK EQU   $WYLNPRS+$WYLPROF+$WYLEXTF+$WYLHWLN+$WYL0000 all bits    00295000
         SPACE                                                          00296000
         TITLE 'Error Messages and Buffers'                             00297000
MSGEBBAD MSG   '-***EDIT format error (invalid block length) in block'  00298000
MSEBBKNT DC    CL5' ',C', BDW value is'                                 00299000
MSEBBBDW DC    CL6' ',C', block length is'                              00300000
MSEBBLEN DC    CL6' '                                                   00301000
         MSGEND                                                         00302000
         SPACE                                                          00303000
MSGEDBAD MSG   '-***EDIT format error:  '                               00304000
MSEBRSN  DC    CL28' ',C' in block'                                     00305000
BCFLD    DC    CL5' ',C' near line number'                              00306000
LNFLD    DC    CL11' '                                                  00307000
         MSGEND                                                         00308000
MSGLNSQB MSG   '0*'                                                     00309000
MSLNBW   DC    C'*WARNING:',C'  Line number sequence error.  Old was'   00310000
MSLNBO   DC    CL11' ',C' new is'                                       00311000
MSLNBN   DC    CL11' ',C' at record count'                              00312000
MSLNBC   DC    CL11' '                                                  00313000
         MSGEND                                                         00314000
         SPACE                                                          00315000
MSGLNBIG MSGX  '-***ERROR:  Line number too big'                        00316000
         SPACE                                                          00317000
         DC    0D'0'               Following must be doubleword aligned 00318000
OEDBUF   DS    CL256               Buffer for pressing output lines     00319000
EDBUF    EQU   OEDBUF,255          This part also used when unpressing  00320000
EDBUFO   DS    CL256               Overflow area                        00321000
BLANKS   DC    CL256' '                                                 00322000
         SPACE 2                                                        00323000
$HEX     EQU   *-240,256,C'X'      For hex dump                         00324000
         DC    C'0123456789ABCDEF' ... only use last 16                 00325000
         SPACE                                                          00326000
LINOBUF  DC    CL10' '             for editing line-number              00327000
LINOFLD  EQU   LINOBUF+2,8,C'C'    this part goes into the record       00328000
LINOPTRN DC    X'40212020202020202020'   EDIT pattern                   00329000
         TITLE 'DSECTS'                                                 00330000
         ASMAXITP PRINT=GEN                                             00331000
RTYPEFLG EQU   AXPRTYP+3,1         Lo byte of Request Type word         00332000
DCBRECFM EQU   36,1,C'X'           Record Format:                       00333000
RECFMF   EQU   B'10000000'         Fixed                                00334000
RECFMV   EQU   B'01000000'         Variable                             00335000
RECFMU   EQU   B'11000000'         Undefined                            00336000
RECFMB   EQU   B'00010000'         Blocked                              00337000
RECFMS   EQU   B'00001000'         Spanned or standard                  00338000
RECFMA   EQU   B'00000100'         ANSI carriage control                00339000
RECFMD   EQU   B'00100000'         ASCII V format                       00340000
RECFMT   EQU   B'00100000'         Track overflow                       00341000
RECFMM   EQU   B'00000010'         Machine carriage control             00342000
DCBBLKSI EQU   62,2,C'H'           Block Size                           00343000
DCBRECAD EQU   76,4,C'A'           Current Record Address               00344000
         END                                                            00345000
