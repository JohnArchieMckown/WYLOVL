; ABEND
;
;
; 2001/10/10  mcl  update IBM doc refs; add web info
;
; JACK HAMILTON 06/18/80
;
; This EXEC file provides explanations for common ABENDs.
;
; The error code may be passed as a PARM to the EXEC file.
; If none is passed, then the EXEC file will prompt for
; one.  A useful DEFINE is
;
;  DEFINE ABEND AS 'EXEC FROM LIB#ABEND PUB PARM "' APPEND '"' REPLACE
;
;  Variable usage --
;
;  N0    misc. index
;  N2    Internal pointer
;  N8    Flag: 0=normal, 1=last code was not found in msg file
;  N3    Flag: 0=no RC help, 1=RC help, no value restrictions, 2=RC
;        help, and RC must be multiple of 4
;
;  S0    misc. work variable
;  S1    Completion code
;  S2    Return code
;  S4    Message code of message that gives return code
;  S8    Previous completion code--used by HELP if unknown code
;  S9    user's escape character
;
;  W1    internal pointers
;  W9    END line-number for MAIL messages
;
;
CLEAR VARIABLES
S9 = ESC   ; Save user's ESCAPE character
W9 = END
SET ESC &
WRITE ' Provides ABEND explanations (report errors to Consulting).' ATTN=*
W1 = LAST
IF (PARM NE '') S1 = UPPER(PARM)
   THEN EXEC 103 ; If PARM passed, skip prompt
;
; General Info
;
REA STR S0 UPP PRO 'Do you want instructions (RETURN=NO)? ' ATTN=900
IF (S0 EQ '') EXE 100 ; NO
IF (SUB(S0,1,1) EQ 'N') EXE 100 ; NO
LIST 1001/1099 EXE UNN ATTN=100 ; HELP
COMM
REA STR S1 UPP PRO 'What is your ABEND code (RETURN=quit)? ' ATTN=900
COMM

; check supplied code
IF (SUBSTR(S1, 1, 1) EQ 'S') S1 = SUBSTR(S1, 2)
IF (S1 EQ '') EXE 900 ; CR=QUIT
IF (IND(S1,'?') EQ 0) EXE 150 ; No help wanted

; help
IF (N8 EQ 0) EXE 120 ; straight help--cc

; help--last msg to user was "ccc unknown code"
N8 = 0 ; Clear flag
WRI 'Completion code &S8 is unknown to this EXEC, but appears to be'
LIST 1351/1370 EXE UNN ATTN=100 ; more explanation
IF (IND('004.008.012.016',S8) NE 0) LIST 1381/1399 EXE UNN ATTN=100
EXE 100

; Help--general--completion code
LIST 1001/1099 EXE UNN ATTN=100
EXEC 100
;  See if RC specified.
N8 = 0 ; clear flag
S2 = ''
N2 = IND(S1,'-')  ; Look for RC like 013-70 etc.
IF (N2 GT 0) S2 = SUB(S1,N2+1)  ; Get RC
   THEN S1 = SUB(S1,1,N2-1)
IF (S1 NE 'U240') IF (S1 NE 'U0240') EXE 200
; ABEND U0240
LIST 1201/1249 EXE UNN ATTN=100 ; EXPLAIN U0240
EXE 100

; Check for User ABEND
IF (SUB(S1,1,1) NE 'U') EXE 400 ; Not User code
IF (SIZE(S1) NE 5) Not the right size for User code
; Unnnn user ABEND code
COMM &S1 is a "user" ABEND code, not a system ABEND code.  Refer to the
COMM documentation for the program you were using for an explanation of
COMM this code.  If you were using a programming language such as
COMM FORTRAN, PL/I, etc., refer to the Programmer's Guide for that
COMM language.
EXE 100

; Completion code validity checking
IF (SIZE(S1) EQ 4) IF (SUB(S1,1,1) EQ '0') S1 = SUB(S1,2,3) ; FORTRAN'S "00C1" type code...
IF ( SIZE(S1) NE 3)
   THEN COMM ABEND code must be 3 hex digits , or 4 with "S" prefix.
   THEN LIST 1101/1120 EXE UNN ATTN=100
   THEN EXEC 100
N0 = VER(S1,'0123456789ABCDEF')  ; Find non-hex digit
IF (N0 NE 0) S0 = SUB(S1,N0,1) ; get the non-hex digit, if any
   THEN WRI S1||':  Invalid.  ABEND code must be 3 hex digits; "&S0" is not a hex digit.' ATTN=100
   THEN LIST 1101/1120 EXE UNN ATTN=100
   THEN EXE 100

; Apparently valid code (3 hex digits)
S8 = S1 ; save for later help if needed
IF (S1 NE '000') EXE 430  ; non-zero code...look for it
LIST 1301/1320 EXE UNN ATTN=100 ; explain 000
EXE 100 ; try again

; valid non-zero code...check for "condition code" ringers
IF (IND('004.008.012.016',S8) NE 0) LIST 1381/1399 EXE UNN ATTN=100
; Valid code-- that is, 3 hex digits.
COMM
COPY '&S1'1 FROM LIBDATA#ABENDMSG  PUBLIC
IF (LAST GT W1) EXE 480 ; got something
; code not found
COMM '&S1' is an unknown ABEND code.
N8 = 1 ; show unknown code
IF (IND('004.008.012.016.999',S1) NE 0) EXE 100 ; don't tell me about 004
W9 = END
END ABEND EXEC
END ABEND EXEC: &S1 unknown code
MAIL &W9/LAST TO m.lawrence@forsythe TITLE 'ABEND EXEC:  &S1 unknown code' QUI SIL
DEL &W9/LAST
EXEC 100 ; Reprompt

; got something from msg file--
LIST '  ' 4 IN &W1+.001/LAST COL 7 UNN ATTN=NEXT
;  See if explanation includes return code
N3 = 0   ; clear flag
POI '*' 4(1) IN &W1+.001/LAST NOLIST
IF (* LT 0) DELETE &W1+.001/LAST   ; NOPE...NO RC, ALL DONE
   THEN COMM
   THEN EXEC 100 ; Go back and prompt for more
; line with * has msg code of msg with return code.
N3 = 1  ; show RC help avail.
IF (SUB(LINE(*),5,1) EQ '*') N3 = 2 ; show RC multiple of 4
REA STR S4 UPP USI * COL 7

IF (S2 NE '') EXE 520 ; Already have RC

;PROMPT FOR RC
WRI 'You can get more information by giving the 2-digit return code'
WRI 'given in message &S4.'
WRI ' '
REA STR S2 UPP PRO 'What is the return code? ' ATTN=100
IF (S2 EQ '') EXEC 100
WRI ' '

; Check RC for validity
IF (S2 EQ '?') LIST 1151/1170 EXE UNN ATTN=503
   THEN EXE 500

IF (SIZE(S2) EQ 2) IF (VER(S2,'01234567890ABCDEF') EQ 0) EXE 530 ; Valid RC
WRI S2||':  Invalid.  Return code must be two hexadecimal digits.'
LIST 1151/1170 EXE UNN ATTN=503
EXE 503

IF (N3 NE 2) EXE 550
; RC must be multiple of 4
N0 = NHEX('&S2') ; RC as number
IF (N0/4*4 EQ N0) EXE 550 ; OK, is multiple of 4
WRI ' '
WRI S2||':  Invalid.  Return code must be a multiple of 4 (04, 08, '
WRI '0C, 10, 14, etc.)'
EXE 580

; Got apparently valid RC--2 hex digits
POI '&S2' 4 (1) IN &W1/LAST NOLIST  ; FIND RC IN MSG FILE
IF (* GE 0) EXE 558 ; found the code
WRI '&S2 is an unknown return code'
IF (S2 NE '00') W9=END
   THEN PUTEND ABEND EXEC
   THEN PUTEND ABEND EXEC:  &S1-&S2 unknown return code
   THEN MAIL &W9/LAST TO m.lawrence@forsythe TITLE 'ABEND EXEC:  &S1-&S2 unknown rcode' QUI SIL
   THEN DEL &W9/LAST
   THEN EXE 580

; Found info on this RC.
WRI ' '
WRI S1||'-'||S2||':'
LIST '&S2' 4 in */L COL 7 UNN ATTN=NEXT
DELETE &W1+.001/LAST
EXEC 100
;
; BAD RC
WRI ' '
WRI 'The RETURN CODE appears in message &S4.  For example, '
WRI '   &S4 &S1-rr,...        '
WRI 'The return code is "rr".'
WRI ' '
EXE 504
;EXIT from EXEC file
IF (LAST GT W1) DELETE &W1+.001/LAST
SET ESC &S9
CLEAR EXEC
--intro--
This EXEC file explains the error codes (COMPLETION CODES) associated
with abnormal termination of a job step (ABEND).  When the system
abnormally terminates a job step, it issues a message like

   IEF450I jobname.stepname ABEND Sccc

Where "ccc" is the COMPLETION CODE (ABEND code).  The COMPLETION CODE
is a 3-digit hexadecimal number.  Note that a job step can "fail"
without an ABEND.  A step that terminates "normally" (that is, does
not ABEND) returns a CONDITION CODE (also called a RETURN CODE), a
number from 0 to 4095.  Usually, 0 indicates no errors, 4 a warning,
and 8, 12, or 16 an error.  Condition codes are program dependent;
consult the program documentation for information on the return
codes.

In many cases the ABEND message IEF450I is accompanied by another
message that gives additional information.  For example, ABEND 213
(data set not found on specified volume) is accompanied by message
IEC143I, which gives the data set name and volume.  Such messages
often include a "return code" that more precisely identifies the
nature of the failure.  Where such codes exist and are known to this
EXEC, you will be given the message code for the supplementary
message and prompted for the return code.

System completion codes are documented in "MVS System Codes"
(GC28-1780).  System messages, including those that usually accompany
ABEND conditions, are in "MVS System Messages" (five volumes,
GC28-1785 thru GC28-1789).  This information is also available on the
web at

 http://www-1.ibm.com/servers/s390/os390/bkserv/lookat/lookat.html

You can obtain the most detailed information about the problem by
entering the message code that accompanies the ABEND code.  In the
above example, you would enter IEC143I rather than S213.

--help completion code--
A system completion code (ABEND code) is 3 hexadecimal digits (a
hexadecimal digit is one of 0123456789ABCDEF).  A "user" ABEND code
is 4 decimal digits.  In message IEF450I, the completion code will
appear as the letter S followed by the 3-digit system completion
code, or the letter U followed by the user completion code.  Message
IEF450I will appear in your JES2 JOB LOG if your job ABENDs.

--help rc--

In many cases the COMPLETION CODE is accompanied by a RETURN CODE
(don't confuse this with the "condition code" or "return code" from a
step that terminated normally).  The RETURN CODE is given with the
completion code in the supplementary message.  For example, in the
message

   IEC143I 213-04,MYJOB,GO,FT03F001,4CF,PUB025,WYL.GG.UUU.DATA

the COMPLETION CODE is 213, and the RETURN CODE is 04.

--help U0240--
U0240 (user ABEND code 0240) is issued by a FORTRAN program.  FORTRAN
has intercepted the original ABEND and issued its own (U0240) ABEND.
Look at the error messages from FORTRAN (usually, message IHO240I)
to see what the "original" system ABEND code is.  Supply this code
when prompted for your ABEND CODE.

--help code=000--
000 is not a completion code (ABEND code); an ABEND will result in a
code that is not zero.  If the job did ABEND and had a system
completion code of 000, then there must be a "user" ABEND code such
as "U0240".  User ABEND codes are dependent on the program being
used.

If 000 is a CONDITION CODE (rather than a COMPLETION CODE), the step
terminated normally.

--help unknown code-- this text preceded by 1 line from a WRITE
< valid code.  Check a current copy of "MVS System Codes" (GC28-1780)
for the most current message information.  This information is also
available on the web at

 http://www-1.ibm.com/servers/s390/os390/bkserv/lookat/lookat.html

To look up an ABEND code, enter the message ID as "ABEND" followed
immediately by the code, e.g. "ABEND213".

--help code=4,8,12,16--
If the code is 004, 008, 012, or 016, then the code is probably a
RETURN CODE from a step that ended normally, and not a COMPLETION
CODE from an ABEND.  If there was an ABEND, message IEF450I will
appear in your JES2 JOB LOG, and this message will contain the
completion code.

If the code is a RETURN CODE, then the step terminated "normally" in
the sense that it returned control to the system in a normal way; it
may still have had errors.  The meaning of return codes is
program-dependent, but most commonly 4 represents a "warning"
condition, 8 an "error", and 12 or 16 a "severe error".  Refer to the
documentation of the program you are using for the exact meaning of
such codes.

