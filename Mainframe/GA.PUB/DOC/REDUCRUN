This document is meant to be printed on the Xerox 9700 printer in
Forsythe Hall rather than read online.  However, if you are looking
for specific information, reading a few lines on the screen may be
satisfactory.  Printing on other than the Xerox 9700 printer may
require adjustments to the PRINT command.  You may need to delete
the OPTIONS: line and add options suitable for your printer.  To
print from the Xerox 9700, type the PRINT 1/LAST command.
Options: cc unn forms=3hol chars=tn12 indent=12 duplex
1

                                                                         #664












                                 RUNNING REDUCE

                      ON IBM 360 AND DERIVATIVE COMPUTERS

                                  Version 3.0

                                       by

                                Larry R. Seward

                              The Rand Corporation
                           Santa Monica, CA 90406 USA

                                   April 1983












                                    ABSTRACT


 This document describes operating procedures for running  REDUCE  specific  to
 IBM 360 and derivative computers.



        Reprinted with changes for local modifications with permission
                            by Stanford University



                          Rand Publication CP83(4/83)

                    Copyright (c) 1983 The Rand Corporation

1



                               TABLE OF CONTENTS
+                              _________________







 1.  PRELIMINARY .........................................................    1

 2.  REDUCE DOCUMENTATION ................................................    1

 3.  AN INTRODUCTION TO REDUCE ...........................................    2

 4.  MEMORY REQUIREMENTS .................................................    2

 5.  FILE HANDLING .......................................................    2
          5.1  Partitioned Datasets ......................................    2

 6.  INTERNAL PARAMETERS .................................................    3
          6.1  Object sizes ..............................................    3
          6.2  Batch and Interactive Modes ...............................    3
          6.3  Input, Output and Interrupts ..............................    3
          6.4  ED and EDITDEF Control Characters .........................    4
          6.5  Saving the REDUCE Environment: Checkpoint .................    4
          6.6  Miscellaneous .............................................    4

 7.  BPS MANAGEMENT ......................................................    5
          7.1  Resetting BPS .............................................    5
          7.2  Loading Functions .........................................    5

 8.  IMPLEMENTATION DEPENDENT ERROR MESSAGES .............................    6
          8.1  Known Problems ............................................    7

 9.  RUNNING STANDARD LISP AND RLISP PROGRAMS ............................    7

 10. SUPPORT STATUS .....................................................     8

1
 Running REDUCE on IBM Computers                                         Page 1


     PRELIMINARY
+1.  ___________

 This document describes operating procedures for running REDUCE  on  the  IBM
 3081  at  ITS.  It supplements the REDUCE User's Manual, describing features,
 extension and limitations specific to this implementation of REDUCE.

 At ITS, REDUCE may be run in batch only. It is based  on Standard  LISP  and
 uses  a  checkpoint  image  file  to establish the basic REDUCE system within
 Standard LISP. Additional REDUCE functions are dynamically loaded as needed.

 This document is oriented toward the batch environment and assumes the availa-
 bility of the following cataloged procedure.

     //****************************************************************
     //*
     //* PROC:     REDUCE3
     //* PURPOSE:  EXECUTE REDUCE RELEASE 3.0
     //*
     //****************************************************************
     //REDUCE3   PROC  RESTORE='REDUCE',
     //            REG=512K,                 ** DEFAULT REGION
     //            RELEASE=3,                ** REDUCE RELEASE NUMBER
     //            VERSION=V83               ** VERSION NUMBER
     //*
     //REDUCE   EXEC  PGM=LISP,REGION=&REG
     //FAPLIB   DD DSN=SYS4.REDUCE&RELEASE..&VERSION..FAPLIB,
     //   DISP=SHR                           ** LOADABLE FNS
     //IMAGE    DD DSN=SYS4.REDUCE&RELEASE..&VERSION..IMAGE.&RESTORE,
     //   DISP=SHR                           ** AUTO RESTORE
     //LISPIN   DD DDNAME=SYSIN              ** INPUT FILE
     //LISPOUT  DD SYSOUT=*                  ** OUTPUT FILE
     //STEPLIB  DD DSN=SYS4.REDUCE&RELEASE..&VERSION..LOADLIB,DISP=SHR
     //XMPLIB   DD DSN=SYS4.REDUCE&RELEASE..&VERSION..XMPLIB,
     //   DISP=SHR                           ** XMPL LIB
     //****************************************************************

 The  REDUCE  system  is  automatically  restored  from   the   file    IMAGE.
 Additional  REDUCE  functions are dynamically autoloaded from FAPLIB.  To run
 REDUCE submit the following job.

     //<jobname> JOB
     //Stepname  EXEC REDUCE3
     <REDUCE commands>
      .
      .
     BYE;
     /*

     REDUCE DOCUMENTATION
+2.  ____________________

 The following documentation is distributed with  the  REDUCE  system.   REDUCE
 users  should  be  familiar  with the first two.  The others describe specific

1
 Running REDUCE on IBM Computers                                         Page 2


 implementation details, and the Standard LISP system on which REDUCE is based.

         REDUCE User's Manual (#662)
         Running REDUCE on IBM 360 and Derivative Computers (#664)(this guide)
         Standard LISP Report (#665)
         Manual for Standard Lisp on the IBM 360 and 370 (#663)


     AN INTRODUCTION TO REDUCE
+3.  _________________________

 A series of tutorials on using  REDUCE  is  available  in  a  library  called
 REDUCE3  PUBLIC.  The members LESS1 through LESS7 should be read in sequence.
 To read them online enter the commands USE REDUCE3#LESSn PUBLIC,  then  LIST.
 To  print  a copy, type PRINT FROM REDUCE3#LESSn PUBLIC. These tutorials were
 originally designed to be interactive. Because we do not support  interactive
 REDUCE  we  have  run  them  in  batch and stored the output in the indicated
 library.



     MEMORY REQUIREMENTS
+4.  ___________________

 The workspace is automatically expanded to fill available memory  during  the
 REDUCE  initialization.  For  reasonable  performance a minimum of 500K bytes
 memory is recommended (default is 512K). Memory can be  as  little  as  375K,
 although  at this size very little workspace is provided. Memory in excess of
 375K is  added  to  the  the  workspace.  With  a  larger  workspace,  larger
 calculations   can  be  run.  In  addition,  the  execution  times  of  given
 calculations decrease because less garbage collection is necessary.

 In addition to the workspace, some space is also reserved  during  initializa-
 tion  for  the Binary Program Space (BPS).  The BPS is used for (self) loading
 compiled REDUCE functions or adding new  compiled  procedures.   The  function
 BEGIN initiates REDUCE and retains 15000 words of BPS, or as much as is avail-
 able.  It is executed automatically when REDUCE begins.  For further  informa-
 tion see the section BPS Management.


     FILE HANDLING
+5.  _____________

 The filenames which appear in the IN, OUT and SHUT reference  DDNAMEs.  These
 filenames  must  be allocated to the job through additional JCL. REDUCE takes
 its DCB parameters from the JCL supplied by the user. If the  DCB  parameters
 are  omitted,  a  logical  record  length  of  80 and a block size of 1600 is
 assumed. However, users can change the block size parameter by  changing  the
 value  of the identifier BLKSIZE!*. This change must of course be made before
 referencing the file. For example, to output a file whose block size  is 6320
 without supplying the DCB parameters in the JCL, say, in REDUCE,

  BLKSIZE!* := 6320; IN MYFILE;

 where MYFILE is the DDNAME given to the dataset in the JCL.


1
 Running REDUCE on IBM Computers                                         Page 3


      Partitioned Datasets
+5.1  ____________________

 The IN and LOAD commands have been extended to use partitioned datasets.  Par-
 titioned datasets must have LRECL=80 and BLKSIZE=1600 and can only be used for
 input.  The format of the IN command for a partitioned dataset member is:

         IN LLL(MMM);

 where LLL is the DDNAME of the DD statements referencing the library, e.g.

         //LLL   DD DSN=WYL.gg.uuu.name,DISP=SHR

 and MMM is the membername.

 To allocate such a file in WYLBUR, issue the command:

        ALLOCATE name LRECL=80(20)

     INTERNAL PARAMETERS
+6.  ___________________

      Object sizes
+6.1  ____________

 The maximum string and identifier lengths are established  by  the  underlying
 Standard LISP system.  The current maximum length for either is 80 characters.
 However, we recommend that such names be limited to twenty-four characters  or
 less for compatibility with other versions of REDUCE.

 All floating point numbers are printed in scientific notation with seven digit
 precision and a two digit exponent.

 Arbitrary precision integer and real arithmetic is supported.

      Batch and Interactive Modes
+6.2  ___________________________

 REDUCE may be run in batch mode only at ITS.

      Input, Output and Interrupts
+6.3  ____________________________

 Lower case input is uniformly converted to uppercase, including strings.  The
 default  input  line length is 72.  Characters beyond 72 are ignored.

 The default output line length is 115 although the LRECL is 133  .  The  line
 length  is  controled  by  the  LINELENGTH  function,  and  includes the ANSI
 carriage control. Generally REDUCE output is formatted to fit within the line
 length.  Formatting of user directed output (e.g.  WRITE  statement)  remains
 the user's responsibility.

 The % comment convention does not operate in the IBM version as  described  in
 the  REDUCE  User's  Manual. Since an end-of-line cannot be sensed by the LISP
 interpreter, you must terminate such comments with a semi-colon  instead.  All
 comments  initialized with a % in the REDUCE source conform to both the manual
 convention and the convention described here.

1
 Running REDUCE on IBM Computers                                         Page 4


      ED and EDITDEF Control Characters
+6.4  _________________________________

 Space (blank) is not available in ED and EDITDEF, for spacing forward  in  the
 edited string.  Use 'X' instead.  The '|' (or-bar) is used as the escape char-
 acter for delimiting search and replacement strings.

      Saving the REDUCE Environment: Checkpoint
+6.5  _________________________________________

 It is often useful to save the  complete  REDUCE  environment  at  some  point
 within a session, and then restart at that point later.  This may be important
 for restarting error free jobs at an appropriate breakpoint, or also for  res-
 tarting  error prone long jobs without repeating all the calculation up to the
 point where the error occurs.  When computing resources are scarce, this tech-
 nique  can  also  sometimes be used to divide a large calculation into smaller
 steps.  To save the REDUCE environment do:

     //<stepname>  EXEC  REDUCE
     //ffff        DD    DSN=WYL.gg.uuu.name,UNIT=DISK,DISP=(,CATLG),
     //  SPACE=(1600,(100,50),RLSE)
       <REDUCE commands>...
       <SHUT outfiles..>
       CLOSE 'FAPLIB;
       CHKPOINT 'ffff;
       <more REDUCE commands...>

 To restart the session use:

      END;
      (RESTORE 'ffff)
      (BEGIN)

 If the restart is being done in a subsequent job, the  ffff DD  should be  of
 the form (where ffff is the DDNAME of the check point dataset):

     //ffff   DD   DSN=WYL.gg.uu.name, DISP=OLD

 The CHKPOINT facility requires that all  non-system  files  be  closed  first.
 CHKPOINT  cannot  be  used  within an IN file, OUT files must be SHUT, and the
 FAPLIB, used for auxiliary functions, must be closed.  Around 100,  1600  byte
 blocks  are  required for the checkpoint dataset, depending on the size of the
 application.  The CLOSE and CHKPOINT statements are symbolic  mode  statements
 and  are  recognized  as such by the presence of the quote mark.  RESTORE must
 currently be executed from the Standard LISP top level.  See  the  Manual  for
 Standard LISP for further details on the checkpoint facility.

      Miscellaneous
+6.6  _____________

 There is no link currently to an external editor.

 The "ON TRFAC;" declaration is not implemented for tracing the internal opera-
 tion of the factorizer.

 To exit REDUCE use  "BYE;" or "QUIT;".

 Times (as reported by ON TIME or SHOWTIME)  are  given  in  milliseconds,  and
 measure  execution  time,  excluding  garbage  collection  time.   They do not

1
 Running REDUCE on IBM Computers                                         Page 5


 include operating system overhead (e.g., swapping time).


     BPS MANAGEMENT
+7.  ______________

 The binary program space (BPS) is used  for  (self)  loading  compiled  REDUCE
 functions and adding new compiled procedures.  Normally 15000 words or as much
 as is available are reserved for BPS.

      Resetting BPS
+7.1  _____________

 If no compiled procedures are going to be added or loaded the unneeded  binary
 program space can be released and returned to the workspace.  This can however
 defeat the auto loading mechanism, and should not be done unless the  user  is
 familiar with the operation of REDUCE.

 The following commands can be used to release BPS.

         END;
         (BPSMOVE nnnn) (BEGIN)

 where nnnn is the number of available BPS words to retain.

 The amount of BPS initially reserved is not sufficient for loading  all  func-
 tions  concurrently.  In particular the factorizer cannot be loaded without an
 explicit adjustment of the BPS allocation by the user.  If there  is  insuffi-
 cient space, the following message occurs:

         *** (BPSMOVE nnnn) AFTER CONDENSE

 If this happens, it is best to restart the REDUCE run and add  following  com-
 mands at the beginning:

         LISP CONDENSE (ssss, 16000);
         (BPSMOVE nnnn) (BEGIN)

 The CONDENSE statement will maximize BPS.  The pushdown stack size is  set  to
 'ssss', usually 2000.  BPSMOVE retains 'nnnn' words of BPS for loading or com-
 piling functions, and returns the remainder to the workspace.   If  new  func-
 tions are being compiled and the message:

         *** BPS FULL

 occurs, the sequence above can be used to reset the BPS.  For more information
 on space management consult the Manual for Standard LISP.

      Loading Functions
+7.2  _________________

 All REDUCE functions are automatically loaded and require no  intervention  by
 the user.  Some messages, such as:

         *** LOGAND REDEFINED

 occur normally during the autoloading of some functions, and can be ignored.

1
 Running REDUCE on IBM Computers                                         Page 6


 The autoloading mechanism works only on the first reference of  the  function.
 If  after  the  function  has been initially loaded, the definition is removed
 (e.g.  with a Standard LISP command by the user), the function will not  auto-
 load when it is next referenced.

 Functions can be explicitly loaded with the command:

         LOAD LLL;
            or
         LOAD LLL1, LLL2, ...;

 LOAD checks first for the DDNAME LLL referencing a  sequential  FASL  dataset.
 If  this  is  not  found, it then checks for the member LLL in the partitioned
 dataset referenced by the DDNAME FAPLIB.  If the member is not found an  error
 results.

 To insure that a newly created FASL file, that also  exists  as  a  member  of
 FAPLIB  is  loaded,  either  an  additional  DD statement with the name of the
 module should be used, or the member of FAPLIB should be replaced.


     IMPLEMENTATION DEPENDENT ERROR MESSAGES
+8.  _______________________________________

 If  an  error  occurs  in  a  REDUCE  calculation,  the  program  prints  some
 diagnostic  information  and  then continues parsing but  not  evaluating  the
 input.  We  have  chosen this default because parsing is cheap  and  may  give
 useful  diagnostics,   whereas   an  error  may  make  all  later  evaluations
 irrelevant and expensive.

 This error handling protocol can also be used for checking that a  program  is
 syntactically  correct before submitting it for evaluation. To do this, induce
 a syntax  error  at  the  beginning  of  the  program  by  a  statement   such
 as  ");"  .  Thereafter, the program will be syntax checked but not evaluated.
 As this usually  takes  less  memory   than   execution,   such  checking  can
 often  be  done  in  minimum  core (e.g. 350K bytes), which may also result in
 better turn around.

 In addition to the REDUCE error messages listed in Appendix A  of  the  REDUCE
 User's   Manual   it   is possible for users to get error messages direct from
 LISP. The following LISP messages can be expected from time to time:

 *** GC-STORAGE EXHAUSTED
         This means that your problem is too large as stated for your
         current core partition.  The only possible solutions are to run the
         job in a larger core partition or restate your problem so that less
         intermediate storage is required.

 *** PUSHDOWN STACK OVERFLOW
         This means either that you have defined a recursive substitution
         (see REDUCE User's Manual) or that your problem is so complicated
         that it exceeds the stack capacity of your system.  If you are sure
         that you haven't done anything wrong, you can increase the size of
         the stack (currently 2000) with statements:

             SYMBOLIC SETSIZE (nnnn, 19000);

1
 Running REDUCE on IBM Computers                                         Page 7


             (BEGIN)

         where nnnn is the required stack size.

 The  following  messages should NOT occur under normal circumstances. If  they
 or  any  other strange errors occur, PLEASE SEND US A COPY OF THE OUTPUT AND A
 LISTING OF THE INPUT PROGRAM.

 PSW TRAP

 OVER OR UNDERFLOW

 FUNCTION NOT DEFINED

 NON-ATOM SLOWLINK

      Known Problems
+8.1  ______________

 Some of the Standard LISP space management commands cannot be used from within
 REDUCE.   The  RESTORE  and  BPSMOVE commands result in an endless loop of PSW
 TRAPs.  These commands should be issued from the top level of  Standard  LISP,
 e.g.:

         END;
         (BPSMOVE nnnn)
         (BEGIN)


     RUNNING STANDARD LISP AND RLISP PROGRAMS
+9.  ________________________________________

 The  Standard  LISP  system and the REDUCE symbolic mode  system  (RLISP)  may
 also  be  used  independent  of  REDUCE.  The following  step will execute the
 Standard LISP interpreter:

     //<stepname> EXEC REDUCE3,RESTORE='SLISP'
     //SYSIN DD *
     <Standard LISP commands..>
         :
         :
     /*

 BEGIN is an RLISP function and is not defined for Standard LISP.
 Consequently, an explicit

         (BPSMOVE nnnn)

 must be to issued to reset the BPS.  See the section BPS Management for
 further information.

 Autoloading is also an RLISP function that is not implemented under
 Standard LISP.  The LOAD and FASL commands have however been included as an
 extension.  The compiler and FASL functions must be explicitly loaded.  To
 load the compiler from Standard LISP use:

         (LOAD COMPLR CMACRO LAP)

1
 Running REDUCE on IBM Computers                                         Page 8


 See the User's Manual for more information on creating and loading FASL
 files.

 To execute RLISP use:

     //<stepname> EXEC REDUCE3,REDUCE='RLISP'
     <RLISP commands..>
         :
         :


 For  further  details on Standard LISP see the Standard LISP  Report  and  the
 Manual for Standard LISP on the IBM System 360 and 370.

 REDUCE is an RLISP application, i.e. it runs within RLISP, which  runs  within
 Standard  LISP,  which runs under the IBM operating system.  To put it graphi-
 cally:

         IBM OS (Standard LISP (RLISP (REDUCE)))

 The table below gives the commands to move between the various systems.

         From                         To System
         System    ----------------------------------------------
         ______    REDUCE          RLISP           SLISP   OS

         REDUCE                    SYMBOLIC;       END;    BYE;
                                   LISP;                   QUIT;

         RLISP     BEGIN();                        END;    BYE;
                   ALGEBRAIC;                              QUIT;

         SLISP     (BEGIN)         (BEGIN)                 (BYE)
           *
         OS        REDUCE          RLISP           SLISP

 The table entries for the OS commands, are the restore parameter  to  be  used
 with:

     //<stepname>  EXEC  REDUCE3,RESTORE=<parameter>

 To execute REDUCE, the ',RESTORE=REDUCE'  can  be  omitted,  as  this  is  the
 default.


      SUPPORT STATUS
+10.  ______________

 At ITS, REDUCE is made available on an unsupported basis. See the ITS software
 policy as defined in User's Guide to Computer Services (#242).
+                     ______ _____ __ ________ ________
