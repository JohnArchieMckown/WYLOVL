DOC#BATWYL PUBLIC                          Document number:      409
Information Technology Services            Latest update:  Nov. 1984
Stanford University                        Creation date:  Aug. 1982
                                           Length:         469 lines

                          Using BATWYL

                          Introduction

BATWYL is a program enabling you to do interactive processing  by
running  a  batch job.  Although its name suggests the concept of
batch WYLBUR, its application is  more  general,  allowing  batch
access to all online systems, e.g., APL and SPIRES.

BATWYL provides an easy way to record an interactive session  for
instructional and documentation purposes.  It also permits you to
predefine  an interactive session and specify that the job be run
in a less  expensive  time  block.   (However,  BATWYL  jobs  are
charged  at  the  full  interactive  NIGHT  or WEEKEND rate.  The
special flat rate per hour of connect time does  not  apply.)  If
you  have  routine  interactive  maintenance  tasks  performed at
regular intervals, you can have the SUBMIT facility automatically
submit BATWYL jobs according to your  specified  schedule.   (For
more  information  about  the  SUBMIT facility, see Using SUBMIT,
available in Document Sales, Forsythe Hall.)

                        How to Use BATWYL

To use BATWYL, collect a file  containing  everything  you  would
enter  at  a  terminal  to  complete  your side of an interactive
dialogue -- that is,  the  sequence  of  commands  and  also  the
anticipated  responses  to any prompts that would be asked by the
interactive processor used.  Precede this with a few lines of Job
Control Language (JCL), described below, and run  the  job.   The
BATWYL  program  initiates  an  interactive  session and, using a
mechanism called a virtual terminal, passes the prepared commands
and prompt responses one at a time to an  interactive  processor.
A  log of each supplied command and corresponding system response
is written to the SYSPRINT  output  file,  providing  a  hardcopy
record of the virtual session.

Since one of the reasons for running a BATWYL job is  to  produce
formatted  sample  sessions  for  inclusion  in  documentation, a
number of special options not available  in  online  WYLBUR  have
been included in BATWYL.

The structure of a typical BATWYL job is:

 //  JOB  ,TIME=(,1)
 /*JOBPARM  TIME=elapsed-time
 //  EXEC  BATWYL,PARM='option-list'
 command-file

You should replace option-list  with  any  of  the  PARM  options
described  in  section 3 and command-file by your list of command
statements.   Command  statements  may  include  BATWYL   control
statements, described in section 4.

                      Program Parm Options

The following four options may be included in a PARM string in the
EXEC statement of the JCL:

NUM

If included, this option must be  the  first  item  in  the  PARM
string.   It  will cause the session output log to be shifted ten
columns to the  right,  with  the  lines  in  your  command  file
numbered sequentially.

ESC=x

Include this option in the PARM string  if  you  need  to  supply
BATWYL  control  statements  in the command file.  Replace x by a
non-blank  character  of  your  choosing.   If  the  first  three
characters of a line  in  your  command  file  match  the  escape
character  (i.e., xxx), then BATWYL will attempt to interpret the
line as a BATWYL  control  statement  rather  than  as  a  WYLBUR
command.

ATTN=x

If you need the ability to simulate a  BREAK/ATTN,  include  this
option in the PARM string, replacing x with a non-blank character
of  your  choosing.   The  file  will  be processed as though the
characters were replaced  by  a  BREAK/ATTN  if  the  last  three
characters  of  a  line  in  the command file match the specified
character.  (To simulate a CARRIAGE RETURN, you need only collect
a blank line in the command file.)

command

A command may be included as the last item  in  the  PARM  string
and,  if  present,  will be executed before the command file.  (A
BATWYL job may simply consist of a PARM string  command  with  no
command file.)

If you include more than one PARM option,  specify  them  in  the
order    above    and    separate    them    by   commas,   e.g.,
PARM='NUM,ESC=&,ATTN=*,SHOW TIME'.
If no options are desired, the PARM may be omitted.

                    BATWYL Control Statements

The syntax of a BATWYL control statement is:

xxxcontrol-option

where xxx is the character you specified via  ESC=  in  the  PARM
field  of your EXEC card and where control-option is one of those
specified below:

EJECT

The EJECT control statement is used to force a page eject in  the
BATWYL  output.   It  is  useful  when  preparing sample terminal
sessions where it is desirable  to  keep  certain  sections  from
being broken across a page boundary.

SPACE=nn

Causes nn blank lines to be inserted into the BATWYL  output  for
improved readability or emphasis.

PAUSE=nn

Suspends execution for nn seconds.

PAUSE provides a mechanism for prolonging the elapsed time  of  a
BATWYL  job,  thereby  allowing  a user at a terminal to interact
with the BATWYL session.  It might be used, for instance, to test
concurrent access by two users to a single ORVYL or SPIRES file.

COND=nnn

The last COND=nnn executed will set the condition  code  for  the
step.   This  is  useful  if  a  subsequent  step's  execution is
dependent on successful completion of certain tasks in the BATWYL
step.  For example, consider the following job:

//  JOB
//  EXEC  BATWYL,PARM='ESC=%'
%%%COND=4
 .
 .
IF (LAST LE 0) LOGOFF
%%%COND=0
 .
 .
LOGOFF
//  EXEC  NEXTSTEP,COND=(0,LT)
 .
 .

The BATWYL step will terminate with a condition code of 4 if  the
active file is empty at the point where LAST is tested, otherwise
the  condition  code  will be restored to 0 before normal logoff.
The second step of this  job  --  which  invokes  a  hypothetical
catalogued  procedure called NEXTSTEP -- will only be executed if
the condition code  from  the  BATWYL  step  is  0.   (See  Batch
Processing  for more information on the use of condition codes to
control step execution.)

CNTRL=0 or 1

The purpose of the CNTRL control option is to  produce  formatted
sample  terminal  sessions by using multiple 3800 character sets.
A value of 1 turns  on  dual  font  control.   A  value  of  zero
restores  the  default  of  single  font control.  When dual font
control is in effect, an extra column is inserted into the BATWYL
output to indicate which of two fonts should be used for printing
each line.  Lines representing prompts from the  system  will  be
assigned   to  font  0.   Lines  from  the  command  file  (i.e.,
user-specified input) will be assigned to  font  1.   Except  for
prompts,  all  informational  lines typed by the system will have
blanks in the font control  field.   Under  normal  processing  a
blank  is  equivalent to 0.  Because in most cases a prompt and a
user response are desired to appear on the same line, BATWYL will
actually generate two lines, with differing font  controls,  that
are  overlayed  by  the + carriage control character.  Therefore,
BATWYL jobs using CNTRL=1 often generate twice as many  lines  of
output as CNTRL=0 jobs.  Proper allowance for this should be made
in  the LINES parameter of the /*JOBPARM statement for long jobs;
the default is 5000 lines of output.

The use of CNTRL is best illustrated by example.
Consider the following input:

//  JOB  ,TIME=(,5)
//  EXEC  BATWYL,PARM='ESC=%,ATTN=*'
//SYSIN  DD  *
%%%CNTRL=1
CALL SPIRES
SEL RESTAURANT
SHOW IND
FIND CITY SUNNYVALE
TYPE PAUSE
***
LOGOFF CLR NOWARN

If you were to run  the  above  job,  fetch  the  output  to  our
terminal  with  carriage control characters (FETCH xxx CC NOMSG),
and list the results, you would see the following:

 0COMMAND>
+1         CALL SPIRES
  -WELCOME TO SPIRES-3 ... IF IN TROUBLE, TRY 'HELP'
 0->
+1   SEL RESTAURANT
 0->
+1   SHOW IND
  Goal Records: RESTAURANT
  Combined Index Terms:
       DATE-ADDED
       DATE-UPDATED
       PRICE-RANGE
       PRICE-AVERAGE
       FOOD-QUALITY
       SERVICE-QUALITY
       CREDIT
       BAR
  Simple Index:  N, NAM, NAME
  Simple Index:  C, CUIS, CUISINE, T, TYPE, TYPE-OF-FOOD (SYN)
  Simple Index:  A, ADD, ADDRESS, ST, STREET
  Simple Index:  RES, RESERVATIONS
  Simple Index:  H, HOURS, HRS
  Simple Index:  E, ENTER, ENTERTAIN, ENTERTAINMENT
  Simple Index:  CITY
  Simple Index:  STATE
 0->
+1   FIND CITY SUNNYVALE
  -RESULT: 4 RESTAURANT(S)
 0->
+1   TYPE PAUSE

  --------------------------------------------------------------
  Victoria Station                      Cuisine(s): American, Beef
  Sunnyvale, CA                         Quality of Food: Excellent
                                        Quality of Service: Excellent

  THE SPECIALTY OF PRIME RIB IS DELICIOUS......FOR A REAL TREAT, TRY THE
  BAR-B-QUED RIBS!
  --Reviewed by M.J. Harris.  Reviewed on OCT. 17, 1979 and on May 23,
  1981--

  Hours: Dinner                                      Average Price: $10.00
  Entertainment: None                                Payment: Cash, Credit
  Bar: Full Bar                                                    Cards
  Reservations are RECOMMENDED.
 0-
+1  ***
 0->
+1   LOGOFF CLR NOWARN
  ORVYL: 0.106 CPU SECONDS, 28 FILE I/O'S
  WYLBUR: 0.02 CPU SECONDS, 0 DISK I/O'S
  ELAPSED TIME = 00:00:03 TERMINAL I/O'S = 43
  TOTAL SESSION CHARGES: $0.23
  END OF SESSION

The result of a print command such as
PRINT UNN CC CHARS=(TN12,BD12) IND=15 FORMS=9511 is shown below:

COMMAND>
CALL SPIRES
-WELCOME TO SPIRES-3 ... IF IN TROUBLE, TRY 'HELP'
->
SEL RESTAURANT
->
SHOW IND
Goal Records: RESTAURANT
Combined Index Terms:
      DATE-ADDED
      DATE-UPDATED
      PRICE-RANGE
      PRICE-AVERAGE
      FOOD-QUALITY
      SERVICE-QUALITY
      CREDIT
      BAR
Simple Index:  N, NAM, NAME
Simple Index:  C, CUIS, CUISINE, T, TYPE, TYPE-OF-FOOD (SYN)
Simple Index:  A, ADD, ADDRESS, ST, STREET
Simple Index:  RES, RESERVATIONS
Simple Index:  H, HOURS, HRS
Simple Index:  E, ENTER, ENTERTAIN, ENTERTAINMENT
Simple Index:  CITY
Simple Index:  STATE
->
FIND CITY SUNNYVALE
-RESULT: 4 RESTAURANT(S)
->
TYPE PAUSE

--------------------------------------------------------------
Victoria Station                      Cuisine(s): American, Beef
Sunnyvale, CA                         Quality of Food: Excellent
                                      Quality of Service: Excellent

THE SPECIALTY OF PRIME RIB IS DELICIOUS......FOR A REAL TREAT, TRY THE
BAR-B-QUED RIBS!
--Reviewed by M.J. Harris.  Reviewed on OCT. 17, 1979 and on May 23,
1981--

Hours: Dinner                                      Average Price: $10.00
Entertainment: None                                Payment: Cash, Credit
Bar: Full Bar                                                    Cards
Reservations are RECOMMENDED.
-
***
->
LOGOFF CLR NOWARN
ORVYL: 0.106 CPU SECONDS, 28 FILE I/O'S
WYLBUR: 0.02 CPU SECONDS, 0 DISK I/O'S
ELAPSED TIME = 00:00:03 TERMINAL I/O'S = 43
TOTAL SESSION CHARGES: $0.23
END OF SESSION

BATWYL does not recognize a line as a  BATWYL  control  statement
unless  there  are at least seven characters on the line, even if
the line  starts  with  the  required  three  escape  characters.
Although  normal  WYLBUR  abbreviation rules apply to the rest of
your command file, do NOT abbreviate BATWYL control options.

                   Input and Output Data Sets

BATWYL writes a record of the virtual  terminal  session  to  the
SYSPRINT data set defined by the //SYSPRINT DD SYSOUT=A statement
in the BATWYL cataloged procedure.  You may override this default
and  write the session log directly to a data set by including an
appropriate SYSPRINT DD statement after the EXEC  statement.   If
you do include your own SYSPRINT DD statement, you must provide a
DCB  specification  as  part  of  that statement.  Typically, you
would include a DCB=PRINT specification  to  request  a  standard
print  line  length of 133 characters (LRECL=133).  For a shorter
line  length,  you  can   include   a   specification   such   as
DCB=LRECL=80,  in which case only the first 80 characters of each
output line will appear in the SYSPRINT file.   A  line  with  an
imbedded  carriage  return (CR) is split into two separate output
lines.

In the example at the beginning,  the  SYSIN  DD  card  has  been
omitted  since  the  command  file  is  being read from the input
stream and the  system  therefore  generates  the  //SYSIN  DD  *
statement.   The  SYSIN  DD  statement  identifies  the  file  of
commands  that  will  be  used  to  generate the virtual terminal
session.  You also may read the file of commands directly from  a
saved  data set by including appropriate information in the SYSIN
DD or COMMANDS DD statement.  The data set to be read may  be  in
EDIT  format,  CARD  format, or any fixed format up to LRECL=150.
If the data set is in CARD NUMBERED format, then columns 73 to 80
are not passed to BATWYL as part of the commands.

The following sample job will read commands from one data set and
write the resulting session log to another data set:

//  JOB  ,TIME=(,5)
//  EXEC  BATWYL
//SYSPRINT DD UNIT=DISK,DISP=(,CATLG),DCB=PRINT,
//  DSN=WYL.GA.JSM.BATLOG,SPACE=(TRK,(5,5),RLSE)
//SYSIN DD DSN=WYL.GA.JSM.BTFILE,DISP=SHR

The SYSPRINT DD statement must come before  the  SYSIN  DD  since
SYSPRINT  is  in  the BATWYL catalogued procedures while SYSIN is
not.  (See Batch Processing for more  information  on  coding  DD
statements.)

                       Hints and Warnings

Resource Use:  The CPU limit on the JOB statement only applies to
certain overhead activities performed by the BATWYL program.  All
interactive resources used in the virtual  terminal  session  are
accounted  for  separately  from  the  batch  job,  and  there is
currently no way to  set  a  CPU  limit  on  a  virtual  session.
Therefore,  it  is  extremely important that you protect yourself
against the possibility of infinite looping which could result in
high charges.  To guard against this situation, include a JOBPARM
statement with a TIME parameter after the JOB card  in  the  JCL.
For example, the statement

  /*JOBPARM  TIME=10

establishes an elapsed time limit of ten  minutes  for  the  job.
This  elapsed  time limit does not guarantee that the job will be
terminated after the specified period but it does cause a  series
of  messages  to  be  sent  to the operator at regular intervals,
requesting cancellation of the job.

If there is no outpout to your terminal or no I/Os  of  any  type
for two hours, JES cancels your job.  You must either divide your
batch  processing  into segments that individually take less than
two yours or arrange your program so that some  sort  of  I/O  is
done every two hours.

Although BATWYL jobs may run in any time block, using BATWYL  for
long tasks during DAY block is discouraged because it monopolizes
a batch initiator.  It is also important to note that BATWYL jobs
are charged at regular batch and interactive rates appropriate to
that  time  block.   Even  when  submitted in non-prime time, the
special fixed rate/elapsed time does NOT apply to BATWYL jobs.

Command  Specification:   BATWYL  is  unforgiving  of  errors  or
omissions in the command file.  Your file  must  be  arranged  so
that  each request made by the interactive system can be properly
satisfied by the next line in the  command  file.   For  example,
including  the  command  USE  MYFILE  causes the system to prompt
VOLUME? if no default volume has been set.  Failure to anticipate
such a situation causes your next command to  be  "swallowed"  by
such  a  secondary  prompt.   If  BATWYL  reaches the end of your
command  file  without  finding  a  LOGOFF  CLEAR   command,   it
automatically supplies one and terminates the virtual session.

The following condition codes, reported in the JES log portion of
your output, indicate errors in processing:

COND CODE  4  --  No SYSIN file, COMMANDS file, or PARM command
                  provided
COND CODE  8  --  Supplied logoff failed (logoff forced)
COND CODE 12  --  Hung trying to logoff (abnormal end)
COND CODE 16  --  WYLBUR not active

Limitations:  Certain features of normal terminal  sessions  such
as  automatic  logon  EXEC  file execution, active file recovery,
NEWS, and mail are not available for virtual  terminal  sessions.
If  you  want  your logon EXEC file to establish session settings
and to define commands, enter EXECUTE FROM #LOGON ON  CATALOG  as
your  first  command; remember to provide additional responses if
your EXEC file does any prompting.  You can write EXEC files that
test if they are being invoked by a BATWYL job; for example:

  IF (FETYPE EQ 'VIRTUAL') CLEAR EXEC

SET HEIGHT should not be done in  BATWYL.   If  you  have  a  SET
HEIGHT and you do something that causes unexpected multiple lines
of   output  (such  as  CALL  commands  generating  ORVYL  QUEUED
messages), then it is possible for one of those  messages  to  be
treated  as  a  prompt because the height limit has been reached,
and your  next  response  gets  eaten...and  the  next...and  the
next...etc.

An Example

An  example  of  a  BATWYL  job  that  does  some  simple  WYLBUR
processing:

//JSMWYL  JOB  ,TIME=(,5)
//  EXEC  BATWYL,PARM='NUM,ESC=#,ATTN=*,SHOW ACCOUNT'
//SYSIN  DD  *
SHOW OUTPUT
COLLECT CLEAR
This is a sample line.
***
###SPACE=2
LIST

The following output is produced by submitting the above job.

PARM:     COMMAND? SHOW ACCOUNT
          JSM$GA - ACCOUNT
    1.    COMMAND? SHOW OUTPUT
          DEST=LOCAL FORMS=1181 BIN=907 - OUTPUT OPTIONS
    2.    COMMAND? COLLECT CLEAR
    3.        1.   ? This is a sample line.
    4.        2.   ? ***
    5.    COMMAND? LIST
              1.     This is a sample line.
SUPPLIED: COMMAND? LOGOFF CLEAR
          WYLBUR: 0.02 CPU SECONDS, 0 DISK I/O'S, 0 LINES FETCHED
          ELAPSED TIME = 00:00:00  TERMINAL I/O'S = 0
          TOTAL SESSION CHARGES: $0.02
