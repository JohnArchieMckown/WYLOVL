DOC#NXP1 PUBLIC                            Latest update:  08/01/67
Information Technology Services            Creation date:  00/00/00
Stanford University                        Length:         87 lines


Title:  Next-Prime-Number Routine

Library Program Number:  C002

Subprogram name(s):  NXP1

Summary:  NXP1 finds the next prime number larger than the integer
argument supplied by the calling program.

Field of application:  Mathematics

Search key:  Prime Numbers

Languages from which this routine may be called:  FORTRAN IV;
                                                  Assembler

Principal source language:  OS/360 Assembler Language

Type of routine:  Closed, reentrant, integer-type function
subprogram, standard OS/360 calling sequence

Machine on which routine will execute:  IBM System/360

Monitor or operating system required:  Operating System/360

Special machine requirements:  None

Call:  I = NXP1(J)

Parameters:

     Parameter     Type                   Description

         J       full word integer   the next prime number greater
                                     than J is to be found

      NXP1       full word integer   function value

Declarations:  NXP1 must be of type INTEGER in FORTRAN calling
programs.

Special system control cards needed:  None

Use:  If the value of the argument J is negative, J is returned as
the result and no further action is taken.  If J is not negative, the
next prime number greater than J is found.  Note that 1 is considered
to be a prime, so that the FORTRAN statement I = NXP1(0) would assign
the value 1 to I.  Similarly, K = NXP1(-2) would assign the value -2
to K.

Other input:  None

Other output:  None

Error conditions and messages:

Accuracy:  No loss of accuracy so long as the magnitude of the
                            31
argument J does not exceed 2  -1.

Time:  Depends strongly on the number of tests that must be made to
determine primality.  Estimate one millisecond.

Non-library routines or subroutines required:  None

Library routines or subroutines required:  None

Library routines required:  None

Storage requirements:  EC   = 236   bytes
                         16      10

Registers used:  The result is returned in general register 0; all
other registers are preserved.

References:  None

Programmer:  John Ehrman (SLAC)

Certified by:  Lanse Leach

Date:  August 1, 1967
