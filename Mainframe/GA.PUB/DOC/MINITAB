OPTIONS:  forms=3hol unn cc ind=9 duplex=yes
1





                         MINITAB II

                      Reference Manual

                             by

                    Thomas A. Ryan, Jr.
                      Brian L. Joiner
                      Barbara F. Ryan


                          03/20/78




         Minitab is a very  easy to use,  flexible,
         and powerful statistical computing system,
         designed to  handle small  to  medium data
         sets.  It is machine compatible,  and runs
         in batch or interactively. For information
         on availability, questions, or corrections,
         please contact:


                 Prof. Thomas A. Ryan, Jr.
                 Statistics Department
                 215 Pond Laboratory
                 The Pennsylvania State Univ.
                 University Park, Pa. 16802

                 (814) 865-1595



         This  Reference  Manual  is a companion to
         the Minitab Student Handbook, published by
         Duxbury Press, North Scituate Mass 02060.





           Copyright  C  Thomas A. Ryan, Jr. 1978

         This manual may be  reproduced in whole or
         in part by Minitab users for  teaching  or
         research use if appropriate credit is giv-
         en.  The authors would appreciate an esti-
         mate of  the number of  copies reproduced,
         and also a copy of any supporting documen-
         tation developed by users.
1
 MINITAB II
 Page 2



      Table of Contents


  I.  GENERAL INFORMATION ABOUT MINITAB II  3

     1.  Introduction  3
     2.  Basic Rules  5
     3.  Stored Constants  8
     4.  Matrices  10
     5.  Missing value code  12
     6.  Error messages  13
     7.  How Minitab works internally  14
     8.  Column lengths  15
     9.  Internal storage  15
    10.  Interactive and batch Minitab   16
    11.  Versions of Minitab  17
    12.  Execution speed  19
    13.  Examples  20
    14.  Limitations  21
    15.  Availability  21
    16.  History and acknowledgements  22

 II.  DETAILED EXPLANATION OF COMMANDS  24

     1.  Entering numbers  24
     2.  Printing and punching  29
     3.  FORTRAN formatted input and output  31
     4.  Plots and histograms   35
     5.  Random data generation  38
     6.  Arithmetic  41
     7.  Functions  44
     8.  Column operations  49
     9.  Editing  51
    10.  Manipulations  55
    11.  Sorting  58
    12.  Statistics on one column of data  60
    13.  Regression   64
    14.  More statistics  78
    15.  Time Series  94
    16.  Miscellaneous  103
    17.  Control  106

 III. INDEX  110

 IV.  ANNOTATED LIST OF COMMANDS   119
1
                                           I.1   Introduction
                                                       Page 3

           I.  GENERAL INFORMATION ABOUT MINITAB II

 1.  INTRODUCTION
+    ____________

     This Reference Manual is intended to be a complete de-
 scription of how Minitab operates.  Most users can ignore
 many of the details given in this Manual.  The commands are
 designed to operate the way you would naturally expect.

      For a more elementary introduction, see the Minitab
 Student Handbook.  The Handbook also contains descriptions
 of how to use Minitab effectively to carry out a variety of
 statistical analyses.  It is designed as a supplementary
 text for introductory statistics courses (but is useful for
 other users as well), is 341 pages, is published by Duxbury
 Press, North Scituate, Mass. 02060, and costs $5.95.

     Minitab is a general purpose statistical computing sys-
 tem, designed especially for students and researchers who
 have no previous experience with computers.  It is easy to
 use, very flexible, and fairly powerful.  It is designed
 primarily for small to moderate size data sets which can be
 stored in main memory.

     Minitab has been found especially useful for exploring
 data in the early phases of analysis, for plotting, and for
 regression analysis.

     Minitab consists of a worksheet, usually 200 rows by 50
 columns, in which data are stored; and a collection of about
 150 commands, which operate on the data stored in the work-
 sheet.  The following is an example of a Minitab program.
 Each line is punched on one card, or entered on one line on
 a typewriter-like terminal.


 Example:   READ THE FOLLOWING DATA INTO COLUMNS C1 AND C2
            84            80
            88            80
             91            95
            88            80
            90         93
             93          88
            86             92
            ADD COLUMN C1 TO COLUMN C2, PUT SUMS INTO C3
            DIVIDE C3 BY 2, PUT QUOTIENTS INTO C4
            AVERAGE OF C4
            PRINT C4
            STOP
1
 I.1   Introduction
 Page 4

 The first instruction tells the computer to take the data
 from the lines that follow the READ command line, and put
 these data into column 1 and column 2 of the worksheet.  The
 word READ is one of Minitab's commands.  The C1 and C2 are
 called arguments.  The next 5 lines are data lines.  The
 next command line says to ADD columns 1 and 2, row by row,
 and then store the 5 sums in column 3.  The rest of the pro-
 gram should be relatively clear.  The output from this pro-
 gram is given below.

 -- READ THE FOLLOWING DATA INTO COLUMNS C1 AND C2

    COLUMN  C1          C2
    COUNT    7           7
 ROW
   1         84.         80.
   2         88.         80.
   3         91.         95.
   4         88.         80.
   .  .  .

 -- ADD COLUMN C1 TO COLUMN C2, PUT SUMS INTO C3
 -- DIVIDE C3 BY 2, PUT QUOTIENTS INTO C4
 -- AVERAGE OF C4
    AVERAGE =      87.714

 -- PRINT C4

    COLUMN  C4
    COUNT    7

      82.0000     84.0000     93.0000     84.0000     91.5000
      90.5000     89.0000

 -- STOP

     Commands and data for Minitab can be entered either on
 punched cards or on typewriter-like terminals.  We use the
 words "card" or "line" to denote either one punched card or
 one line on a typewriter-like terminal.
1
                                            I.2   Basic rules
                                                       Page 5

  2.  BASIC RULES.
+     ___________

      a) Minitab reads (and prints) a command line, looks up
         the command in its dictionary (of about 150 names),
         checks for errors, carries out the command, and then
         goes on to the next command.

      b) We use the word  "argument"  to mean either a number
         (e.g. 5.31 or 23), a stored constant (K1,K2,...,K50),
         a column (C1,C2,...,C50), or a matrix (M1,...,M10).

         Minitab has a dictionary of command names it recog-
         nizes.  Only the (first 4 characters of the) command
         name and the arguments (in the proper order) are
         used by the computer.  All other text is solely for
         the reader's benefit.  All command and data lines
         are free format (i.e., all values may be punched
         anywhere on the line just so long as they're in the
         right order).  Thus the first instruction in our
         example could have been written

                  READ DATA IN COLUMNS C1 AND C2

         or simply

                  READ C1  C2

      c) A column may be given a name by the command NAME.
         The name may then be used in place of the column
         number.  Any time a name is used it must be enclosed
         in single quotes (apostrophes).  For example,
         suppose C1 has been given the name EXAM1.  Then the
         commands

                  READ  C1  C2

 and

                  READ 'EXAM1'  C2

         are equivalent.

      d) Each command must be on a separate line.

      e) The worksheet has 50 columns, each of which normally
         can store up to 200 numbers.  This can be changed by
         the DIMENSION command.

      f) In some commands, you can use either numbers, stored
         constants, columns, or matrices as arguments.

         Example:  ADD  1 TO C2, PUT INTO C3
                   ADD K1 TO C2, PUT INTO C3
                   ADD C1 TO C2, PUT INTO C3
                   ADD  1 TO M1, PUT INTO M2
1
 I.2   Basic rules
 Page 6

      g) Data are put on separate lines which follow a READ
         (or SET) command.

      h) Commas cannot appear within a number, e.g., write
         1241, not 1,241 for the number one thousand two hun-
         dred and forty-one.

      i) Some commands store their answers, some print out
         answers, and some do both.  If a command results in
         a one-number answer (e.g.  AVERAGE C1, or  MAXIMUM
         OF C1, PUT IN C2), that number is printed out wheth-
         er or not it is stored.

      j) A list of consecutive column numbers (or stored con-
         stants or matrices) may be indicated by using a
         dash.  Thus

              READ C2-C5

         is equivalent to

              READ C2,C3,C4,C5

         The dash (a single minus sign) can be used in any
         command where it makes sense.  There can be one or
         more blanks on either side of the dash.

      k) Commands may be continued onto a second line by
         putting an * at the end of the first line.  There
         can be no characters (except blanks) after the *.
         Note:  the continuation symbol will be changed in a
+        ____
         future version of Minitab to avoid possible
         confusion with the missing value code (which is
         denoted by *).

      l) Some commands always produce a one number answer.
         If that answer is stored in a column, it is put into
         all (200) spaces of the column.  The column is then
         called artificially long.  See Sections I.8 and I.9
         for more information.  The commands which can create
         an artificially long column are:  DEFINE, described
         in Section II.1; all arithmetic operations described
         in Section II.7 if both of the first two arguments
         are constants or artificially long; all functions
         listed in Section II.8 if the first argument is a
         constant or an artificially long column; and all
         column operations listed in section II.9.
1
                                            I.2   Basic rules
                                                       Page 7

      m) All commands can be used any number of times in a
         program.  They can be used in any order (as long as
         this order makes sense).

      n) Columns, stored constants, and matrices can be
         reused any number of times.  When they are reused,
         all previous contents are automatically erased
         before the new results are stored.

      o) It is a good practice to leave a blank following the
         command name.

      p) At most 50 arguments can be used in one command.
         (This includes implied arguments.  Thus, for
         example, C11-C20 counts as 10 arguments.)

1
 I.3   Stored constants
 Page 8

  3.  STORED CONSTANTS.
+     ________________

     In addition to the worksheet, Minitab has 50 stored con-
 stants, each of which can store one number.  The stored
 constants are denoted by K1, K2, ..., K50.  One way a number
 can be put into a stored constant is by the DEFINE command.
 Then the stored constant can be used, just like a number, in
 any succeeding command.

     Example:  SET THE FOLLOWING NUMBERS INTO C1
               1, 2, 3, 4, 5
               DEFINE 2 INTO K4
               DEFINE 5 INTO K5
               ADD K4 TO C1, PUT IN C2
               DIVIDE K5 BY C1, PUT IN C3
               PRINT C2 C3

     Numbers can also be put into a stored constant by any
 command which has a one-number answer; these include the
 commands DEFINE, COUNT, SUM, AVERAGE, STANDARD DEVIATION,
 MEDIAN, MAXIMUM, MINIMUM, as well as commands such as ADD 5
 TO 3, PUT IN K1 and SQRT OF 5, PUT IN K2.  See Part II for a
 complete description of these commands and for notation.

     A command can also result in a one-number answer if it
 deals with artificially long columns or columns which con-
 tain just one number.  The one-number answer can be put into
 a stored constant.

     Example:  SET C1
               1     2     3
               AVERAGE C1, PUT AVERAGE INTO C2
               SUM C1, PUT SUM INTO C3
               MULT C2 BY C3 PUT INTO K43

     The DEFINE command can be used in either of the follow-
 ing forms:

     DEFIne the number K into SK
+                      _      __

 where K is any constant (stated or stored), and SK is any
+      _                                         __
 stored constant.

     Example:  DEFINE 5.1 INTO K7
1
                                       I.3   Stored constants
                                                       Page 9

 Another form is

     DEFIne the number in row K of C into SK
+                             _    _      __

 where K is any constant (stated or stored), C is any column,
+      _                                     _
 and SK is any stored constant.
+    __

     Example: SET INTO C4
              21 22 23 24
              DEFINE ROW 3 OF C4 INTO K2

 After these commands, K2 contains the value 23.

     At the beginning of any run, the constant K49 contains
 the value of e = 2.718..., and K50 contains the value of pi
 = 3.14..., until you store a different number in them.

     You can output a constant by using the command PRINT.

1
 I.4   Matrices
 Page 10

  4.  MATRICES.
+     ________

     Minitab has 10 matrices, denoted by M1, M2,..., M10, In
 addition, the columns of the worksheet can be used as column
 vectors.

     Numbers can be put into a matrix by the following com-
 mand.  Notice that you are required to specify the dimension
 of the matrix in the  READ command.  Dimensions are
 specified in the order (number of rows) by (number of
 columns).

 READ the following data into a K by K matrix M
+                               _    _        _

     This is followed by data lines.  Each data line contains
 one row of the matrix.


     Example:   READ 3 BY 4 MATRIX M2
                   1    2    3    4
                   5    6    7    8
                   9   10   11   12



     Matrices can be output by the following command:

 PRINt M, ..., M
+      _       _


 The following command transfers numbers from the worksheet
 to a matrix and vice versa.

 COPY columns of the worksheet C,..., C into matrix M
+                              _      _             _

     Forms a matrix out of the specified columns of the work-
     sheet.  The columns must have the same length, or be
     artificially long, but at least one of the columns must
     be not artificially long.


 COPY M into C,..., C
+     _      _      _
 COPY M into M
+     _      _
1
                                               I.4   Matrices
                                                      Page 11

 The following commands do arithmetic involving matrices.  A
 column with n entries can be used as an n x 1 matrix.  Also,
 if an answer is a 1 x 1 matrix, it can be put in a stored
 constant.

 INVErt matrix M, put inverse into M
+              _                   _

 TRANspose matrix M, put transpose into M
+                 _                     _

 ADD  (K OR M) TO (K OR M), PUT INTO M
+      _    _      _    _            _

     Element-by-element addition or scalar addition.

 SUBtract  (K or M) from (K or M), put into M
+           _    _        _    _            _

 MULTiply  (K or M) by (K or M), put into M
+           _    _      _    _            _

     Matrix multiplication or scalar multiplication.
1
 I.4   Matrices
 Page 12


 5.  MISSING VALUE CODE
+    _______ _____ ____

      Minitab (Release 78.1 and later) has an internal
 missing value code, called *.  Numbers can be coded into the
 missing value code by the RECODE command, using * enclosed
 in single quotes.

 Example:  RECODE values from 1 to 2 IN C1 INTO '*', STORE IN C3

 The * can also be used in the command lines for OMIT,
 CHOOSE, and SUBSTITUTE.  The time series commands LAG and
 DIFFerence produce output columns with *'s at the top.

      If any command listed under Arithmetic or Functions has
 a * in a row of the input column(s), then the corresponding
 row of the output column is set equal to a *.

 Example:  ADD C1 TO C2, PUT INTO C3
      C1    C2            C3
      1     4             5
      2     *             *
      *     *    -->      *
      3     5             8
      *     1             *

      Most commands exclude from analysis all cases with a
 missing value on any input variable.  For example, the PLOT
 command plots only pairs x,y with both coordinates present.
 A count is given of the excluded points.  The REGRESS
 command uses only those cases which have the dependent and
 all the independent variables present.  If residuals are
 stored, the residual for any cases with one or more missing
 value is set equal to *.  A few commands may not yet work
 with the missing data *.  In those cases, a diagnostic is
 given.

1
                                         I.6   Error messages
                                                      Page 13

 6.  ERROR MESSAGES.
+    ______________

     Minitab has 3 types of error messages.  These are de-
 scribed below, in increasing order of severity.

      a) Informative diagnostic.  If you do something that
         Minitab thinks might be an error, an informative
         diagnostic is printed, a reasonable course of action
         is taken, and the rest of the program is executed.
         Examples include:  adding 2 columns of unequal
         length, the letter "I" next to a number (the letter
         "I" could have been intended as a numeral "1").

         An arithmetic fault also results in an informative
         diagnostic.  Examples include:  division by zero,
         square root of a negative number, exponent overflow
         or underflow.  In all cases, Minitab sets the result
         equal to zero and gives an informative diagnostic.

      b) Command skipped.  If an error is too serious for a
         reasonable corrective action to be taken, Minitab
         skips the command in error.  If that command does
         not involve any storage of data, (e.g., PLOT, SUM
         C1, BINOMIAL N=50, p=.5) then the remaining commands
         are executed.  A "command skipped" error message is
         printed out.

      c) Fatal error.  If an error is too serious for a
         reasonable correction to be taken, and the command
         involves the storage of results, and you are using
         Minitab in "batch mode", then a "fatal error"
         message is printed out and execution stops.  The
         remaining lines in the program are error checked and
         "echo printed" only.

         No errors are fatal if Minitab is used interact-
         ively.
1
 I.7  How Minitab works internally
 Page 14

 7.  HOW MINITAB WORKS INTERNALLY.
+    ____________________________

     The following is an outline of how Minitab works:

     1:  Read a line, character by character.

         Assemble letters at beginning of line into a "word"
         and check against Minitab's dictionary.  Assemble
         numerical characters on the line into numbers.

         If the initial word is not found in the dictionary,
         then go to step 10.

         If command is READ or SET, go to step 20.

     2:  Call appropriate subroutine.

         Do error checking appropriate for the command.  If
         there is an error, go to step 30.  If there is a
         possible error, or an error which is not too
         serious, go to step 40.

     3:  Do operation requested by command.

         If command is STOP, program ends.

         Go to step 1.

    10:  Print the error message - command skipped.

         Go to step 1.

    20:  Call SETRD subroutine.

    21:  Read next line.  If it is a valid command name, go
         to step 2.

         Store data, and keep track of how much data has been
         read.

         Go to step 21.

    30:  If the command in error does not store results, or
         Minitab is being used interactively, go to step 10.

         Print fatal error message.

         Continue reading and error checking the remaining
         lines.  Print any appropriate error messages, but do
         not carry out any operations.  Then stop.

    40:  Print an informative diagnostic message.

         Go to step 3.

1
                                                  I.8  -  I.9
                                                      Page 15

 8.  COLUMN LENGTHS.
+    ______________

     Minitab automatically keeps track of how much data has
 been put in each column and in virtually all cases it uses
 this information in exactly the way you want.  Most users
 will thus never need to think about this bookeeping.

     For commands such as READ, SET, BRANdom, etc. where a
 definite amount of data is put in a column, Minitab records
 and keeps track of that amount.  Using this information,
 commands operate in a natural way.  For example, when two
 columns are added (row by row) and stored in a third column,
 the resulting column has the same length as the two original
 columns.  However, a problem arises if the original columns
 are of unequal lengths.  In this case Minitab sets the
 length of the the third column equal to the length of the
 shorter of the two original columns.  And, since addition of
 unequal length columns is unusual and may be an error, an
 informative diagnostic is printed.

     For some other types of commands such as AVERAGE OF C3
 PUT IN C5, it is not always clear how much of the storage
 column should be filled with the answer.  In such cases,
 where there is no natural length to the column, Minitab
 fills the entire column, and sets a "flag" to indicate that
 the column is artificially long.  No diagnostic message is
 generated if an artificially long column is used with a col-
 umn of a different length (e.g., added to another column).



 9.  INTERNAL STORAGE.
+    ________________

     Minitab stores the worksheet in a one-dimensional array.
 Columns are stored in the order in which they are first
 used.  For example, the array which stores the worksheet
 might look like this:

 ************************************************************
 *   C1    ****  C4  *    C2    *  C8  ***     C3     *******
 ************************************************************

 Minitab keeps "pointers" to tell where each column begins.
 Artificially long columns (in which all values are the same)
 are actually stored in only one space.

     The array which stores the worksheet is also used for
 "scratch work", and for storing matrices.  (Stored constants
 have their own array).  It is normally about 5000 words long
 but varies from institution to institution.  If the total
 amount of storage exceeds this array space, Minitab prints a
 message.  You then could try using the ERASE command to free
 space you are no longer using.
1
 I.10   Interactive and Batch Minitab
 Page 16

 10.  INTERACTIVE AND BATCH MINITAB
+     _____________________________.

      Minitab can be run in two modes, "batch" and "inter-
 active".  At some installations, only one mode is available;
 at others there is a choice.

     We say Minitab is running in "batch" mode if you write a
 program, punch it onto cards (or type it on a typewriter
 terminal), then submit the entire program to the computer,
 wait a short while, and then get all your answers back at
 once.

     We say Minitab is running in "interactive" mode if Mini-
 tab carries out a command right after you type in the com-
 mand - before you type the next command.  For example, sup-
 pose C1 contains the numbers 4, 2, 2, 5.  If you type
 AVERAGE C1 and push the carriage return key, the terminal
 will respond immediately with the output AVERAGE = 3.25.
 (Of course, if you type a command which does not produce any
 output, such as ADD C1 TO C2, PUT INTO C3, then Minitab
 carries out the operation but does not produce any output.)
 In interactive use, your input (the lines you type) and
 Minitab's response (the lines the terminal types) are mixed
 together.  The terminal prints a "promting" symbol, usually
 a double dash (--), to tell you when it is ready for you to
 enter another line.

     Minitab is used in a very similar way in batch and in-
 teractive modes.  There are a few minor differences:

     (1)  When entering data on an interactive computer, it
     is a good practice to follow the data with an END OF
     DATA command.  This insures that any diagnostic messages
     concerning mistakes in typing the data will be printed
     before you go on to further calculations.  The END OF
     DATA command is not needed on batch computer systems
     (but it can be used).

     (2)  Less output may be normally produced by some com-
     mands on interactive systems than on batch systems.
     That is, the BRIEF command is in effect on some interac-
     tive systems (unless the user changes this by entering
     the NOBRIEF command).

     On some systems, it may be necessary to begin with the
 command BATCH if Minitab is to be used in batch mode, or
 TSHARE if Minitab is to be used in interactive (time-shared)
 mode.

      In interactive mode, if output is directed to another
 unit (such as a line printer or disk file) by using the
 OUTUNIT command, all error messages and diagnostics are
 printed at the terminal as well as on the output.

1
                                   I.11   Versions of Minitab
                                                      Page 17

 11. VERSIONS OF MINITAB.
+    ___________________

     A number of versions of Minitab are maintained by the
 developers.  Major differences are:

     (1)  The type of computer for which the version is in-
     tended.  One version is essentially written in standard
     (ANSI) FORTRAN IV, which is suitable for almost any med-
     ium or large computer.  Another version uses some
     special features of IBM 360/370 models to speed execu-
     tion somewhat.  Other versions are available for other
     brands.  Differences between these versions are not
     apparent to the user.

     (2)  Size of the system.  This manual describes the
     large version.  A smaller version is also available.
     The small version has only some of the commands avail-
     able in the large version, and some of these are more
     limited.  Selected features of the large version can be
     added easily to the small version.

     (3)  Size of the worksheet. Any computer center can
     adjust the number of words available to store the work-
     sheet and scratch area (and some centers can even have
     the size of the worksheet adjust automatically according
     to the type of job request).  Typically the size is
     5,000, but versions from 1,000 to over 50,000 have been
     implemented.

      (4)  Number of columns.  Some versions save space by
      having fewer than 50 columns; others have more than 50.
      (Typical values say from 25 to 200 columns.)  The
      number of stored constants in the same as the number of
      columns.  Some commands do not work on more than 50
      columns; if you try to use too many columns a
      diagnostic message is printed.

     (5)  Matrix capability.  Some versions lack matrices.

     Some users may be interested in the technical details of
 how we maintain all of these versions (including all the
 possible combinations).  We do this using a method invented
 by Roald Buhler, the developer of P-Stat (see, for example,
 his paper in Computer Science and Statistics:8-th Annual
 Symposium on the Interface).
1
 I.11   Versions of Minitab
 Page 18

     Most of the FORTRAN statements in Minitab are used in
 all versions; these are stored as normal FORTRAN cards.
 Those statements which belong to only one version are iden-
 tified by a code letter in the first card column.  For
 example

          I     DIMENSION KARD(20)
          G     DIMENSION KARD(80)

 says that for the IBM 360/370 version, the array KARD has
 dimension 20, while for the general version, KARD has
 dimension 80.

     Thus all versions are kept (and updated and corrected)
 together.  To get a specific version, a short FORTRAN prog-
 ram, called the pre-processor, is used which selects all the
 appropriate cards (replaces the code letter with a blank)
 and converts other cards to comment cards.

1
                                       I.12   Execution speed
                                                      Page 19

 12.  EXECUTION SPEED.
+     _______________

     Minitab was designed to run very fast on a variety of
 computers.  This was done because it is used by large num-
 bers of students, so cost is a major consideration.  A few
 compromises were necessary to achieve this speed - the most
 important one being the restriction on the maximum size of
 the data set which can be accomodated.  (This allows the
 data to be stored in main memory rather than on auxiliary
 storage devices.)

     If, in spite of the design of Minitab, execution speed
 is a problem, here is one suggestion which may help on some
 computers:  Keep similar commands together.  That is, use

          GENERATE 10 INTEGERS IN C1
          GENERATE 4  INTEGERS IN C4
          ADD C1 TO C2, PUT INTO C3
          SUBTRACT C4 FROM C8, PUT IN C10

 rather than

          GENERATE 10 INTEGERS IN C10
          ADD C1 TO C2, PUT INTO C3
          GENERATE 4 INTEGERS IN C4
          SUBTRACT C4 FROM C8, PUT INTO C10

     The reason speed may be improved by keeping similar com-
 mands together is that, on may computers, there is not
 enough room to keep the entire Minitab system in the
 computer at once, so various parts of Minitab are brought in
 as necessary.  In the first example, the GENERATE portion
 will be brought in once and the arithmetic portion once,
 while in the second example both portions would be brought
 in twice.  On some systems, including Penn State's main
 computer, as much as 3/4 of the time used by Minitab is
 consummed in swapping portions of the program.  On other
 systems, particularly interactive systems, very little time
 is spent in swapping (or rather, some interactive systems do
 so much swapping of users, etc., that the swapping of parts
 of Minitab is relatively negligible).

     The only other way to increase speed of execution is to
 have a computer center programmer make changes to the Mini-
 tab system.  In particular, for non-IBM computers, changes
 paralleling those we have made for the IBM 360/370 systems
 can improve speed somewhat.  These changes are being added
 to versions for some other brands; more detailed advice is
 available from the authors upon request.
1
 I.13   Examples
 Page 20

 13.  EXAMPLES.
+     ________

     The meaning of the commands in these examples should be
 clear; they are fully explained in section II.

 a)  To do a paired t-test:

         READ PAIRS INTO COLS C1 AND C2
               (data pairs, one pair per line)
         SUBTRACT C2 FROM C1, PUT DIFF. IN C3
         TTEST MU = 0 ON DIFF. IN C3

 b)  To fit a quadratic equation to data (using least squares
     regression):

         READ X INTO COL C1, Y INTO C2
               (data lines - one case per line)
         MULTIPLY C1 BY C1, PUT IN C3
         NOTE X-SQUARED NOW IN C3
         REGRESS Y IN C2, USING 2 PREDICTORS IN C1, C3

     In a similar way, you can do transformations (using the
     LOGE, SQRT, etc. functions), create cross product
     (interaction) terms in multiple regression, and so on.

 c)  To do a Mann-Whitney-Wilcoxon rank test "by hand":

         SET GROUP A IN C1
         86 92 89 53 95
         SET GROUP B IN C2
         65 72 20 85 65 65 80 91
         JOIN C2 TO BOTTOM OF C1, PUT IN C3
         RANK C3, PUT RANKS IN C4
         PICK ROWS 1 TO 5 OF C4, PUT IN C5
         SUM C5 (SUM OF RANKS OF GROUP A)
         PRINT C1 - C5

     Note:  This test can also be done using the MANN-WHITNEY
     command.

 d)  To simulate a normal sample, and do a normal probability
     plot of the sample:

         NRANDOM 20 OBS. MEAN = 2 AND SIGMA = 4, PUT IN C5
         NSCORES FOR C5, PUT IN C6
         PLOT C5 VS. C6  (PROB. PLOT)
1
                                                I.14  -  I.15
                                                      Page 21

 14.  LIMITATIONS.
+     ___________

     Two problems can occur when using any computer program.
 The first is "round-off error".  This is caused by the fact
 that the computer does not store the numbers exactly, but
 rounds them off.  These errors can add up in certain calcu-
 lations, even though good methods have been used in
 Minitab's subroutines.

     Another type of problem is caused by undetected errors
 ("bugs") in the program.  Minitab has been extensively
 checked by the authors and has been used by students for
 some time.  However, in programs as complex as this, and
 during revisions of Minitab, undetected programming errors
 can be made.

     Output from this program, and any other program, should
 be checked to see if it is reasonable.  The authors cannot
 take responsibility for any errors.  They would very much
 appreciate having any apparent errors called to their atten-
 tion, preferably together with the input and output in
 question.




 15.  AVAILABILITY.
+     ____________

     Minitab II is written in standard Fortran IV.  It has
 been checked on a wide variety of computers.  It can be used
 on almost any computer which has sufficient memory to store
 the program and the worksheet.  The large version of Minitab
 uses about 85,000 words of storage without overlaying on
 machines such as IBM 370/168, CDC 3800, Univac 1108, PDP-10.
 It can be easily overlayed into about 20,000 words on most
 computers, and has been overlayed into less than 12,000
 words.  The system can run in either interactive or batch
 mode.

     The program and supporting documentation are available
 on tape or cards.  For further information, contact

                 Prof. Thomas A. Ryan, Jr.
                 Department of Statistics
                 215 Pond Laboratory
                 The Pennsylvania State University
                 University Park, Pa. 16802

                 (814) 865-1595
1
 I.16   History and Acknowledgements
 Page 22

 16.  HISTORY AND ACKNOWLEDGEMENTS
+     ____________________________.

      The original Minitab was begun in late 1970 by T. A.
 Ryan, Jr. and B. L. Joiner.  TR had experimented with using
 very simple programs in teaching elementary statistics.  BLJ
 experimented with using Omnitab II, developed by the Nation-
 al Bureau of Standards, in an elementary course.  Neither
 approach was completely satisfactory, so TR and BLJ devel-
 oped the original Minitab, which was similar to Omnitab in
 concept, but was more suitable for students and other very
 naive users, and was more statistically oriented, faster,
 and smaller.  We benefitted greatly by being able to use the
 basic concept of Omnitab developed by Hilsenrath et al, and
 the later developments and documentation of Omnitab II
 developed by Hogben et al, and the name of Minitab was
 chosen to indicate this debt.  In writing the original
 Minitab, TR and BLJ were assisted by Alfred Rademaker and
 Del Scott.  Collegues in the Penn State Statistics
 Department made helpful suggestions.

     As we gained experience with the original Minitab, it
 became clear that improvements could be made in the basic
 structure.  Under the direction of TR, Minitab was developed
 by TR, BLJ and BFR, with the assistance of Paul Say, Cynthia
 Mable, and Del Scott.  Users made suggestions too numerous
 to mention (and some of the suggestions were so natural in
 retrospect that we now think of them as our own).

      Special thanks go to Robert F. Kohm at Alcoa Labor-
 atories, who was one of the first to use Minitab inter-
 actively, and who made many detailed suggestions, especially
 concerning interactive use on the DECsystem-10; to Janet
 Donaldson at the National Bureau of Standards Boulder
 Laboratories, who struggled with a very preliminary version
 of Minitab II on a CDC computer; to Larry Klimko, now at the
 University of Wisconsin, who gave us very detailed
 information on its use on the Bucknell University Xerox
 Sigma 7, to Pat Moore of Bucknell University, to Kurt
 Ruthmansdorfer of University of Wisconsin-Madison, and to
 Ronald Thisted of the University of Chicago.  Members of the
 Penn State Computation Center staff, especially H. D.
 Knoble, Thomas Minsker,  and William Verity, have provided
 useful assistance.  Members of the Penn State Statistics
 Department and students made many useful suggestions.  The
 Pennsylvania State University partially supported writing
 the Minitab Student Handbook, and some programming related
 to that book.

1
                          I.16   History and Acknowledgements
                                                      Page 23

 References:

 Hilsenrath,J., Zeigler, G. G., Messina, C. G., Walsh, P. J.
     and Herbold, R. J. (1966)  Omnitab: A Computer Program
     for Statistical and Numerical Analysis, National Bureau
     of Standards Handbook 101.

 Hogben, David, Peavy, Sally T., and Varner, Ruth N. (1971)
     Omnitab II User's Manual, National Bureau of Standards
     Technical Note 552.

 Ryan, T. A., Jr.,  and Joiner, B. L., (1973) Minitab: A
     Statistical Computing System for Students and
     Researchers, The  American Statistician, 27, 222-225

 Ryan, T. A., Jr., Joiner, B. L., Ryan, B. F., (1975)
     Teaching Statistics with Minitab II, in Proceedings of
     the 6-th Annual Conference on Computers in the
     Undergraduate Curricula.
1
 II.1   Entering numbers
 Page 24

             II. DETAILED EXPLANATION OF COMMANDS.

 Notation:

 K   denotes a constant which can be either a stated
+_
     constant, such as 8.3 or 21, or a stored constant, such
     as K15.

 C   denotes a column, which must be punched with a C direct-
+_
     ly in front (such as C12).

 E   denotes either a constant or a column.  (Minitab looks
+_
     for a C and acts accordingly.)

 [ ] denotes an optional argument

 Stored constants and matrices are fully discussed in sec-
 tions I.3 and I.4.  Many of their uses are described in the
 command descriptions given below.

 About 150 commands are described below.  Only the first 4
 characters of the command name and the arguments, in the
 proper order, are used by Minitab.  All other text is solely
 for the reader's benefit.  All command and data lines are
 free format, i.e. all values may be punched anywhere on the
 line just so long as they're in the right order.  For other
 general rules, see Section I.2.


 1. ENTERING NUMBERS ---------------------------------------


 READ  the following data into C,...,C
+                              _     _

     Data follows - one line per row.

     Example:  READ THE FOLLOWING INTO C2, C3
                 2  4
                 3.5  27.0   9
                 1 2

     This example puts 2, 3.5 and 1 in C2, and 4, 27 and 2 in
     C3.  The 9 is ignored, since only two numbers per line
     are to be stored.

     Notes:
     (1) Data must be separated by blank(s), comma(s) or
     other separators (any character will do except the
     letter E, and the symbols minus, plus, period, or a
     digit).

     (2) Data lines may contain letters or words.  These
     letters or words are ignored (they are not read as
     data).  The main restriction is that the line cannot
     start with (the first four letters of) a valid command
     name.
1
                                      II.1   Entering numbers
                                                      Page 25

     (3) Data can be punched with or without a decimal point.
     They can also be punched in "exponential notation"
     (scientific notation).  Thus the following are all
     allowable and equivalent:

     123.4,   1.234E+2,   1.234E2, 1.234E 2, 1.234+2, 1234-1

     If exponential notation is used, a count of the number
     of times it is used is given.

     (4) Incomplete data lines - ones which have fewer num-
     bers than columns specified in the READ command - are in
     error.  The error is fatal in batch mode; in interactive
     mode the computer will request that the row be
     re-entered.

     (5) Data lines may be continued with a * in the last
     non-blank space, exactly as command lines are continued.
     See I.2.

     (6) READ cannot accept more rows than the current dimen-
     sion of the worksheet.  Thus the DIMENSION command must
     be used before a long data set is read.  (READ and SET
     are the only commands which do not automatically
     redimension the worksheet when necessary.)

     (7) The first 4 rows of the data are automatically
     printed for checking.  To suppress this printing, use
     the command NOPRINT.  To restore this automatic printing
     use the command PRINT with no arguments.

     (8) The SCAN command applies to data lines as well as
     command lines.  Thus, for example, if SCAN 72 has been
     used, any data in spaces 73-80 of data lines will be
     ignored.

     (9) The command READ K BY K MATRIX M is discussed in
+                         _    _        _
     section I.4 on matrix operations.

     (10) The use of NOTE commands is not allowed in the
     midst of data.  NOTE lines must either preceed the READ
     or SET command or follow the data.


 READ from file F into C, ..., C
+               _      _       _
     (Not available at all installations.)

1
 II.1   Entering numbers
 Page 26

 SET  the following data into column C
+                                    _

     Data follows, starting on the next line.  All numbers go
     into the same column of the worksheet.

     Example:  SET THE FOLLOWING DATA INTO C7
                 2  7  9
                 3.8  22

     At the end of this command, C7 contains the numbers 2,
     7, 9, 3.8 and 22, in that order.

     All notes above concerning READ (except 4) apply to SET.

    *A list of numbers following a SET command may be
     abbreviated as shown in the following example:

            SET into C1
            1.3  3(1,2,-4.1)  6  7  5(0)

     After this command, C1 contains

     1.3,1,2,-4.1,1,2,-4.1,1,2,-4.1,6,7,0,0,0,0,0

     In general, a list of numbers, such as 1,2,-4.1 which is
     repeated a number of times, in this example 4 times, is
     abbreviated by putting the list in parentheses with the
     number of times in front
    *(Not yet implemented)

 SET from file F into C
+              _      _
     (Not available at all installations.)

 NAME for C is 'NAME', for C is 'NAME',...,for C is 'NAME'
+         _     ____       _     ____          _     ____

      Assigns names to columns.  A name may be up to 8
      characters long; the characters may be letters,
      numbers, and periods (some other symbols may work at a
      given installation).  A name should start with a letter
      and contain no blanks.  Either the column number or its
      name may be used in any succeeding command.  Anytime a
      column name is used, it must be enclosed in single
      quotes (apostrophes).  Once a column has been assigned
      a name, that name will be used on all outputs involving
      that column.  The name of a column can be changed by
      using another name command.


 END of data (optional)

     On interactive systems it is advisable to put this com-
     mand following the last data line entered by READ or
     SET.  This insures that any diagnostic messages
     concerning data lines will be printed before the next
     operation is carried out.  This command is not needed on
     batch systems.
1
                                      II.1   Entering numbers
                                                      Page 27


 DEFIne  the constant K into column C
+                     _             _

 DEFIne  the number in row K of C into column C
+                          _    _             _

     These commands create an artificially long constant col-
     umn from the number indicated.

     Example:  After the command   DEFINE 3.2 INTO C4
     the worksheet contains:

                         C4
                         3.2
                         3.2
                          .
                          .
                          .

     Example:      DEFINE ROW 3 OF C2 INTO C8

                     C2           C8
                     1.1          3.4
                    -3.2          3.4
                     3.4   -->    3.4
                     4.8          3.4
                                   .
                                   .
                                   .

     Other forms of the DEFINE command are described in the
     sections on stored constants (I.3) and matrices (I.4).


 SUBStitute the constant K into row K of C
+                        _          _    _
 Note, you may also use the necessary data code * for the
 first K.  See Section I.5.
+      _

 SUBStitute the number in row K of C into row K of C
+                             _    _          _    _

     Both forms of the SUBSTITUTE command replace a number in
     a column with the indicated number.  This is especially
     useful in correcting numbers which have been entered
     incorrectly when Minitab is used interactively.

     Example: SUBSTITUTE 4.2 INTO ROW 3 OF C4

                  before       after
                  C4           C4
                  1.0          1.0
                  2.0   -->    2.0
                  3.0          4.2
                  4.0          4.0
1
 II.1   Entering numbers
 Page 28

 GENErate the first K integers into column C
+                   _                      _

     Puts 1, 2, 3, ..., K into the column.  K must be an
+                       _                   _
     integer greater than 1.

 GENErate the integers from K to K into column C
+                           _    _             _

     Example:  GENERATE -5 TO 7 INTO C2
     Puts the integers -5, -4, -3,..., 5, 6, 7 into column
     C2.

     Both K's must be integers.  The first must be less than
     or equal to the second.

 GENErate values from K, in steps of K, to K, put into C
+                     _              _     _           _

     Here you can use any values for the 3 constants, provid-
     ed they make sense.

     Example:
     GENERATE FROM 0, IN STEPS OF .2, TO 1.8, PUT IN C1
     Puts the values 0, .2, .4, ..., 1.6, 1.8 into C1

     Example:
     GENERATE FROM 5, IN STEPS OF -1, TO -3, PUT IN C2
     Puts the values 5, 4, 3, ..., -2, -3 into C2.

     Example:
     GENERATE FROM 1, IN STEPS OF .3 TO 2, INTO C14
     Puts the values 1, 1.3, 1.6, 1.9 into C14.  Note that
     the values up to and (if possible) including the second
     limit are used, but no values beyond the second limit
     are generated.
1
                                  II.2  Printing and punching
                                                      Page 29

 2. PRINTING AND PUNCHING ----------------------------------


 PRINt  the values in columns C, ..., C
+                             _       _

     Notes:
     (1) One or more columns may be printed.

     (2) The number of columns printed across the page can be
     adjusted by using the OUTPUT width command.  (See
     Section II.17. Control.)

     (3) If only one column is printed, it is printed across
     the page.  If more than one column is printed at a time,
     the columns are printed vertically next to each other
     (unless there are too many to fit across the page,in
     which case the columns are printed in several groups).

     (4) The number of decimal places printed for each column
     is determined as follows:  If all numbers in the column
     are integers, no digits to the right of the decimal
     point are printed.  Otherwise the number of places to
     the right of the decimal point is adjusted, between 0
     and 9, so that the largest number (in magnitude) is
     printed to 6 significant digits if possible.

     (5) If any number is too large to fit in the 12 printing
     spaces allowed (> 10**12 or < -10**11), allowed, most
+                    _           _
     computers will print *'s in the spaces to indicate an
     overflow.

     (6) If an artifically long column is printed along with
     other columns, it is printed to the same length as the
     longest non-artificially long column.  If it is printed
     out alone, or only with other artificially long columns,
     only one row is printed.

     (7) PRINT with no arguments is used to restore automatic
     printing of data.  See Section II.17 on Control
     Commands.

     (8)  If more than one column is printed, the row number
     is printed at the left-hand side of the page.  (If the
     row number is over 1000, it is printed modulo 1000.)

     (9)  To print one column vertically (with the row num-
     bers) print the desired column and an empty column.
1
 II.2  Printing and punching
 Page 30

 PRINt (C or K or M), ..., (C or K or M)
+       _    _    _         _    _    _

     The PRINT command can contain a mixture of stored
     constants, columns, and matrices.  If it does, all of
     the stored constants and matrices are printed out first,
     in the order they are given in the print command, then
     all the columns are printed.

     Example:   PRINT C1 C4 M1 K2 C3 K1 M2

     First M1, K2, K1, and M2 are printed, then C1, C4, and
     C3 are printed.


 PUNCh  the values in columns C, ..., C
+                             _       _

     From 1 to 4 columns may be punched.  These columns
     should all be of equal length (or artificially long).
     If just one column is punched, 4 numbers are punched per
     card.  Otherwise, there is 1 row per card.

     Notes:
     (1) The values are punched in "exponential notation"
     (scientific notation) to preserve accuracy.  (Specifi-
     cally, the punch format is (4E15.7).  Cards punched by
     this command can be read by the READ and SET commands.

      (2) PUNCH will soon be changed to vary the format with
      the data.  The number of columns punched per card will
      vary from 4 to 26.

 WRITE  to file 'FILENAME' the columns C,...,C
+                ________              _     _

      Similar to PRINT and PUNCH, except output goes to a
      file.  The file created is a card image file, that is
      80 characters per line.  If just one column is output,
      several numbers are put on each line.  If more than one
      column is output, one row is output on each line.  The
      format of the output is adjusted to make the data as
      compact as possible.  Thus, the number of columns which
      can be output varies with the data from 4 to 26.

1
                     II.3  FORTRAN formatted input and output
                                                      Page 31

 3. FORTRAN FORMATTED INPUT AND OUTPUT ---------------------

     Each of these commands must be followed by a line with a
     FORTRAN format specification, enclosed in parentheses.
     Data, if any, follow the format line.  See a FORTRAN
     manual or the Minitab Student Handbook for details
     concerning format specifications.

 FREAd  K rows into C, ..., C
+       _           _       _

     Similar to READ.  Note that the number of rows of data
     must be specified.

     Example:  FREAD 3 ROWS INTO C1  C2
               FORMAT (2F4.0)
               12.032.4
                 103000
               1.1  2.2

     Following this, the worksheet will contain
               C1              C2
             12.0            32.4
             10.0          3000.0
              1.1             2.2

     Example:  FREAD 2 C1-C6
               FORMAT (3F2.0/6X,2F2.0,4X,F2.0)
               123456789123456789
               987654321987654321
               000000000000000000
               111111111111111111

     Following this, the worksheet will contain

            C1      C2      C3       C4        C5         C6

            12      34      56       32        19         43
             0       0       0       11        11         11

     Notice that the 2 in the FREAD command refers to 2 rows
     of data in the worksheet and not to the number of data
     lines.

     Notes:
     (1) FREAD does not protect the user against errors as
     fully as most Minitab commands.  This allows us to
     provide maximum flexibility for advanced users.
1
 II.3  FORTRAN formatted input and output
 Page 32

     (2) F format is usually used to read numbers.  I format
     cannot be used.  (To read integers use, for example,
     F2.0 instead of I2).  Numbers can be read in E or F
     formats.  Characters can be read under A format (but
     characters cannot be used by most commands, unless they
     are first converted to numerical codes by the command
     CONVERT).  X's, T's, and slashes can also be used.

     (3) The word "FORMAT" is optional.

     (4) The format can be continued on one additional line
     by putting a * in the last non-blank space on the first
     format line.

     (5) If more data lines are present than indicated by the
     FREAD command, the first "extra" data line will be
     printed out, along with an error message "NAME NOT FOUND
     IN LIBRARY...".  If too few data lines are present,
     usually the computer system will give an error message.
     Otherwise one or more command lines will be used as
     data.

     (6) Rows of data can be on more than one data line, if
     appropriate slashes are put in the format.  (See the
     second example above.)

     (7) The first four rows of the data are printed as in
     READ and SET (unless NOPRINT is in effect).

     (8) The following is a simplified version of the FORTRAN
     code in Minitab which performs the FREAD command:

                     READ (5,10) KFMT
                  10 FORMAT (80A1)
                     DO 20 I=1,K
                       READ (5,KFMT) (X(J),J=1,NCOLS)

                       (load row into worksheet)

                  20 CONTINUE

     (5 is the unit number of the card reader or terminal,
     which may differ on some computers.)  The data are read
     into K rows and NCOLS columns of the worksheet.

1
                     II.3  FORTRAN formatted input and output
                                                      Page 33

 FSET  K values into C
+      _             _

     FORTRAN-formatted version of the SET command.  All data
     go into one column.  Notes 1-7 above for FREAD apply
     also to FSET.

     Example:  FSET 4 VALUES INTO C4
               FORMAT (2F2.1)
               1234
               5678

     Following this, C4 will contain 1.2, 3.4, 5.6, 7.8

     Notes:
     (1) The following is a simplifed version of the FORTRAN
     code in Minitab which performs the FSET command.

                      READ (5,10) KFMT
                   10 FORMAT (80A1)
                      READ (5,KFMT) (X(I,J), I=1,K)

     (5 is the unit number of the card reader or terminal,
     which may differ on some computers.  The data are read
     into the first K rows of column J.)


 FPRINt  C, ..., C
+        _       _

     Similar to PRINT, except a format must be supplied to
     control the printing.  The columns must be of equal
     length (or artificially long).  Notes 1-4 concerning
     FREAD apply to FPRINT.

     Notes:
     (1) If one column is printed, the Fortran code in
     Minitab which performs the FPRINT command is essentially

                      READ (5,10) KFMT
                   10 FORMAT (80A1)
                      WRITE (6,KFMT) (X(I,J),I=1,K)

     If more than one column is printed, the code is essen-
     tially

                      READ (5,10) KFMT
                   10 FORMAT (80A1)
                      DO 20 I=1,N

                        (get row to be printed)

                        WRITE (6,KFMT) (X(J), J=1,M)
                   20 CONTINUE
1
 II.3  FORTRAN formatted input and output
 Page 34

     where 6 is the unit number for the printer (which may
     differ on some computers), N is the number of rows of
     the worksheet which are printed, and M is the number of
     worksheet columns listed in the FPRINT command.


 FPUNCh  C, ..., C
+        _       _

     Similar to punch, except a format must be supplied to
     control output.  As many columns may be punched as
     desired.  The columns must be of equal length (or arti-
     ficially long).

     This command writes on Unit 7 (this may be changed at
     some installations) and can be used to write data on
     other units, such as disk or tape if appropriate job
     control language is used.

     Notes 1-4 concerning FREAD apply to FPUNCH.

     Except for the unit number for output, this command is
     exactly the same as FPRINT.


 TAPEread into K rows of C, ..., C
+              _         _       _

     Reads from unit 8 (the unit number may be different at
     your installation).  Similar to FREAD (or FSET if one
     column is specified).  By using proper job control
     language, reading can be done from tape, disk file, or
     other unit.  On most computers, K can be larger than the
     number of rows present in a file.  The appropriate
     adjustments are made by Minitab when it finds the end of
     the file.

     To output data onto a tape, use the command FPUNCH, with
     the appropriate job control language.

     A format line must follow the TAPEREAD command.

 DISKread into K rows of C, ..., C
+              _         _       _

     Similar to TAPEREAD.  Reads from unit 8 (this number may
     be different at your installation and may or may not be
     the same as the unit number for TAPEREAD).

     A format line must follow the DISKREAD command.

 REWInd unit K
+            _

     Used with TAPEREAD and DISKREAD.  Lets you read the file
     starting at the beginning of the file, a second time.

1
                                  II.4   Plots and Histograms
                                                      Page 35

 4. PLOTS AND HISTOGRAMS -----------------------------------

 HISTogram of column C
+                    _

     Prints a histogram of the data in the column.  Minitab
     automatically chooses classes with nicely rounded mid-
     points.  Observations falling on a class boundary are
     put into the upper interval.  Minitab prints the
     midpoint for each interval, the number of observations
     in the interval, and an * to represent each observation.
     (If there are more than 50 observations in a class, each
     * represents 2 or 5 or...  observations, and a message
     to that effect is printed.)

     Example:
            SET IN C1
            1 2 4 3 0 -.5 1.2 -1 -1
            2 4 2  0 3 0 4 0 .5 0 -.25  1.25
            HISTOGRAM C1

     Output from the HISTOGRAM command:

     -- HISTOGRAM C1

        MIDDLE OF   NUMBER OF
        INTERVAL    OBSERVATIONS
           -1.0       2    **
           -0.5       1    *
            0.0       5    *****
            0.5       1    *
            1.0       2    **
            1.5       0
            2.0       3    ***
            2.5       0
            3.0       2    **
            3.5       0
            4.0       3    ***

 HISTogram of column C, first midpoint K, interval width K
+                    _                 _                 _

     Similar to the HISTOGRAM command above, except scales
     are specified.  Up to 100 invervals can be used.  If
     points fall out of the indicated range, an appropriate
     message is printed.
1
 II.4   Plots and Histograms
 Page 36

 PLOT  y in C vs x in C
+           _         _

     Gives a 2-dimensional scatter plot.  Minitab automat-
     ically picks "nice" scales.

     The pairs (x,y) are plotted with the symbol * unless two
     or more points fall on the same spot.  In this case, a
     count of points falling on the same spot is given.  A +
     is given if the count is over 9.  The width and height
     of the plot can be controlled by the WIDTH command.

     Example:
            READ TEMPERATURE INTO C1, PRESSURE INTO C2
             2.1  4.1
             1.5  2.2
             1.7  2.7
             2.5  6.0
             3.0 8.5
             2.1  4.1
             3.2  9
            WIDTH 40
            PLOT TEMPERATURE IN C1 VS. PRESSURE IN C2

     Output from PLOT command:

     -- PLOT TEMPERATURE IN C1 VS. PRESSURE IN C2
             C1
          3.50+
              -
              -
              -                                    *
              -
          3.00+                                 *
              -
              -
              -
              -
          2.50+                     *
              -
              -
              -
              -           2
          2.00+
              -
              -
              -     *
              -
          1.50+  *
                +---------+---------+---------+---------+ C2
              2.0                 6.0                10.0
                        4.0                 8.0

1
                                  II.4   Plots and Histograms
                                                      Page 37

 PLOT  y in C from K to K vs x in C from K to K
+           _      _    _         _      _    _

     Plot with scales specified..

     Example:  PLOT C1 FROM 2 TO 8.5 VS C2 FROM -1 TO 2.

     The first plotting position on the y-axis is 2, the last
     plotting position is 8.5.  Any value in C1 outside the
     limits is not plotted.  The x-axis is handled similarly.
     A count of any values excluded is given.

 TPLOt  y in C vs x in C vs z in C
+            _         _         _

     Pseudo three-dimensional plot with symbols indicating
     the value of z.

     Let zbar be the mean of the numbers in the z column, and
     s the standard deviation of the z values.  Then the
     following symbols are used:

     If z is:                      the plotted symbol is:
     less than zbar-s                                  0
     between zbar-s and zbar                           .
     between zbar and zbar+s                           /
     greater than zbar+s                               X

     If several points fall on the same spot, a count is
     given as in PLOT.

 TPLOt  C from K to K vs C from K to K vs C
+       _      _    _    _      _    _    _

     Three-dimensional plot with y and x scales specified.

 MPLOt  C vs C and C vs C and ...
+       _    _     _    _

     Multiple plots on the same axes.  The first pair of
     columns are plotted with the symbol A, the second pair
     with B, and so on.  If several points fall on the same
     spot, a count is given as in PLOT.

 LPLOt  C vs C using tags in C
+       _    _               _

     Letter plot.  The symbols printed are letters which
     correspond to the numerical "tag" values in C as
+                                                _
     follows:

     ... -2  -1   0   1   2   3  ...  24  25  26  27  28 ...
     ...  X   Y   Z   A   B   C  ...   X   Y   Z   A   B ...

     If several points fall on the same spot, a count is
     given as in PLOT.


 LPLOt  C from K to K vs C from K to K, tags in C
+       _      _    _    _      _    _          _

     Letter plot as above, except scales are specified.
1
 II.5   Random Data Generation
 Page 38

 5. RANDOM DATA GENERATION ---------------------------------

     In most installations of Minitab the following data
     generators print the data automatically, unless the
     command NOPRINT has been used.  Automatic printing can
     be restored by using the command PRINT with no argu-
     ments.

     The following commands are intended for class use and
     for very small scale Monte-Carlo studies.  The basic
     structure of Minitab is not ideal for larger scale
     Monte-Carlo studies, so no attempt has been made to get
     the "best possible" data generators (especially since
     the definition of "best possible" depends on the appli-
     cation).

     All of these data generators are based on the computer
     system's uniform data generator.

     Many other types of random data can be generated by
     applying simple transformations to the basic distribu-
     tions.

 URANdom K observations, put into C
+        _                        _

     Uniformly distributed observations between 0 and 1.

 NRANdom K obs. with mu = K, sigma = K, put into C
+        _                _          _           _

     Normally distributed observations.

     Method:  12 uniform observations are added and appro-
     riate constants multiplied and added to obtain an
     "observation".  This method will soon be replaced by the
     polar method (Box-Muller method).  See D. E. Knuth, The
     Art of Computer Programming, Vol. 2, p.104.

 BTRIals K Bernoulli trials with p = K, put into C
+        _                           _           _

     Random sequence of 0's and 1's, with probability of a 1
     equal to p.

     Method:  If the uniform observation is between 0 and p,
     the outcome of the trial is a 1, otherwise it is a 0.

 BRANdom K binomial experiments with n = K, p = K, put into C
+        _                               _      _           _

     Each observation is the number of successes in n Ber-
     noulli trials with probability of success = p.  A
     summary of the results is also printed automatically.

     Method:  Trials are generated as in BTRIALS.
1
                                II.5   Random Data Generation
                                                      Page 39

     Notes:
     (1) n cannot be larger than 100.

     (2) The command NOPRINT does not affect the printing of
     the summary.

 IRANdom K random integers between K1 and K2, put into C
+        _                         __     __           _

     Method:  If U is the uniform random number, the
     observation is the integer part of K1+(K2-K1+1)U.

 PRANdom K Poisson obs. with pop. mean = K, put into C
+        _                               _           _

     Method:  Let U1, U2,... be uniform observations, and let
     i be the smallest integer such that (U1)(U2)...(Ui) <
     exp(-mean).  Then the observation is (i-1).

 DRANdom  K obs., values in C, prob. in C, put into C
+         _                 _           _           _

     Generates random observations from a discrete distri-
     bution specified by the first two columns.

     Method:  Let X1, X2, ..., Xn be the values in the first
     column, and p1, p2, ... pn be the probabilities in the
     second.  Let U be a uniform observation.  Then the
     observation is Xj if j is the smallest integer such that
     (p1+ ...+pj) is greater than U.

 SAMPle  K rows from C, put into C (without replacement)
+        _           _           _

 SAMPle  K rows from C,..., C, put into C,..., C
+        _           _      _           _      _

     Note that this command differs from the generators above
     in that it randomly selects without replacement from a
     finite population.  The rows are sampled in random
     order.  If rows are sampled from several columns at
     once, the same rows are selected from each.

     Notes:
     (1) If several columns are sampled, only the rows
     selected from the first column named are printed out.

     Method:  One uniform observation is generated for each
     row of the first column.  The row with the smallest
     uniform observation is selected first, the second
     smallest next, and so on.
1
 II.5   Random Data Generation
 Page 40

 BASE  for random data generator = K
+                                  _

     Minitab has a long string of "random" numbers available.
     If Minitab always started at the beginning of the list,
     you would always get the same data.  To avoid this, most
     installations use the time of day (in seconds or
     fractions of a second) to choose a "random" starting
     point in the string.

     Sometimes, however, you may wish to control where Mini-
     tab starts its string.  For example, you may wish to
     repeat a sequence.  In this case, the BASE command tells
     the random number generator where to start.  It will
     continue reading its list from there, for the rest of
     the job, or until a new BASE command is encountered.
1
                                            II.6   Arithmetic
                                                      Page 41

 6. ARITHMETIC ---------------------------------------------

     The following commands do the usual arithmetic oper-
     ations on columns (and/or constants) row by row.  Addi-
     tional notes are at the end of this section.


 ADD  E to E, put into C
+     _    _           _

     Example:  ADD C1 TO C2, PUT INTO C3

             C1         C2        C3
             1.1        2.0       3.1
             2.3   +    1.0   =   3.3
            -5.0        2.0      -3.0

     Example:  ADD 5 TO C2 PUT INTO C3

                        C2        C3
                        1.1       6.1
              5    +    2.3   =   7.3
                       -5.0       0.0

     One could also use commands like:
            ADD C1 TO 5 PUT INTO C2
            ADD  3 TO 5 PUT INTO C3

 SUBTract  E from E, put into C
+          _      _           _

     Similar to ADD.

 MULTiply  E by E, put into C
+          _    _           _

     Similar to ADD

     Example:  MULTIPLY C1 BY C1, PUT BACK INTO C1

         Before:  C1                After:  C1
                  2                          4
                  3           -->            9
                  4                         16

 DIVIde  E by E, put into C
+        _    _           _

     Similar to ADD.  If you divide by zero, the result is
     set equal to 0, and Minitab prints out an informative
     diagnostic.

 RAISe  E to E, put into C
+       _    _           _

     Similar to ADD.  If a calculation does not make sense,
     such as 0 to the power 0, or -5 to the power 1/2, the
     result is set equal to zero, and the message, "VALUE OUT
     OF BOUNDS", is printed.
1
 II.6   Arithmetic
 Page 42

 RMAXimum  of E and E, put into C
+             _     _           _

     Puts the row by row maximum into C.
+                                     _

     Example:  RMAX OF C1 AND C2, PUT INTO C3

           C1           C2           C3
           2            3            3
          -2           -3    -->    -2
           2            2            2

 RMINimum  of E and E, put into C
+             _     _           _

     Puts the row by row minimum into C.
+                                     _

     The following commands allow operation on more than two
     items at a time:

 ADD      E  to E ...  to E, put into C
+         _     _         _           _
 MULTiply E  by E ...  by E, put into C
+         _     _         _           _
 RMAX of  E and E ... and E, put into C
+         _     _         _           _
 RMIN of  E and E ... and E, put into C
+         _     _         _           _

     Example:  ADD C1 TO C2 TO 5, PUT INTO C3

           C1      C2                 C3
           1.1     2.0                8.1
           2.0  +  1.8    + 5    -->  8.8
          -3.0     6.0                8.0

     Notes:
     (1) If columns are not equal in length, and are, say,
     added together, Minitab suspects that you may have made
     an error, and prints an informative diagnostic message.
     Then Minitab carries out the operation.  The length of
     the "answer" column is the length of the shortest column
     used in the arithmetic operation.

     (2) If an operation is impossible, such as division by
     0, Minitab sets the result equal to * (missing) and
     counts the number of such errors.  An informative
     diagnostic describes the error, and gives a count of the
     number of times it has occured.

     (3) If all the arguments (except the storage column) are
     constants and/or artificially long constant columns, the
     result is an artificially long constant column.  (See
     Section I.2.)

     (4) If the result of the arithmetic operation is one
     number (a one-row column or an artificially long
     constant column) the result may be stored in a stored
     constant instead of a column (see Section I.3)
1
                                            II.6   Arithmetic
                                                      Page 43

     (5) The commands SUBTRACT, DIVIDE, and RAISE do not have
     forms which allow operations on more arguments because
     they would be ambiguous.  For example  A - (B - C) is
     different from (A - B) - C.

     (6)  If any row of an input column contains an *
     (Minitab's missing data code), then the corresponding
     row of the output column is set equal to *.

1
 II.7   Functions
 Page 44

 7. FUNCTIONS ----------------------------------------------

     The following functions operate on either a constant or
     a column.  Columns are operated on row by row.  Addi-
     tional notes are at the end of this section.


 ABSOlute value of E, put into C
+                  _           _

     Example:  ABSOLUTE VALUE OF C1 PUT INTO C2

           C1                     C2
           0                      0
          -2         -->          2
           4                      4

     Example:  ABSOLUTE VALUE OF -1.5, PUT INTO C4

                              C4
                              1.5
          -1.5      -->       1.5
                              1.5
                                .
                                .
                                .

 SIGNs of E [put into C]
+         _           _

     Gives -1 for negative numbers, +1 for positive value,
     and 0 for 0.  A summary is also automatically printed.

     Example:  SIGNS OF C1 PUT INTO C2

           C1              C2
           14              1
           -2     -->     -1
          -33             -1
            0              0

     Notes:
     (1) The check for approximate equality to zero is based
     on the size of the data in the column.  Specifically, a
     data value is counted as equal to zero if it is smaller
     than the relative machine accuracy times the largest
     magnitude of numbers in the column.  For example if 7 is
     the largest number in the column, and the computer is an
     IBM 370, a number smaller in magnitude than
     (0.000001)(7) is counted as equal to zero.

 SQRT  of E put into C
+         _          _

     Calculates square roots.  If you take the square root of
     a negative number, the result is set equal to *
     (missing), and the message "value out of bounds", is
     printed.
1
                                             II.7   Functions
                                                      Page 45

 ROUNd  E to the nearest integer, put into C
+       _                                  _

     Example:  ROUND C1 PUT INTO C2
           C1                    C2
           2.1                   2.0
          -2.1      -->         -2.0
           2.6                   3.0
          -8.9                  -9.0


     Numbers halfway between integers (such as 2.5 or -13.5)
     are rounded up in magnitude (2.5 to 3.0, -13.5 to -14).


 LOGE  of E, put into C
+         _           _

     Calculates logarithms to the base e (natural
     logarithms).  If you take the log of zero, or a negative
     number, the result is set equal to * (missing), and the
     message, "VALUE OUT OF BOUNDS", is printed.

 LOGTen  of E, put into C
+           _           _

     Logarithms to the base 10.  See LOGE for error message.

 EXPOnential of E, put into C
+               _           _

     Calculates e to the power E.
+                              _

 ANTIlog of E, put into C
+           _           _

     Calculates 10 to the power E.
+                               _

 NSCOres of C, put into C
+           _           _

     Calculates the normal scores for the data in the first
     named column.

     Example:  NSCORES OF C1 PUT INTO C2

           C1             C2
           1.1            0.0
           0.1           -1.18
           2.3    -->     1.18
           1.8            0.50
            .9           -0.50

     This command is used mainly to produce normal
     probability plots, and do various tests.
1
 II.7   Functions
 Page 46

     Loosely speaking -1.18 is the smallest value you would
     expect to get if you took a sample of size 5 from a
     standard normal, (i.e., the expected value of the first
     order statistic), and -0.50 is the second smallest value
     you would expect to get (i.e., the expected value of the
     second order statistic), and so on.  Minitab does not
     calculate the expected values of the order statistics
     exactly, but uses percentage points as an approximation.
     Thus if there are n data values, Minitab puts
     Phi-inverse((i-(3/8))/(n+(1/4))) next to the i-th
     smallest data value, where Phi(x) is the distribution
     function of the standard normal.  The following
     approximation is used:

     Phi-inverse(p)= 4.91((p to the power .14)-((1-p) to the
     power .14))

     (See, e.g., Joiner and Rosenblatt.)



     If several observations are equal, they are all given
     the same normal score.  This is calculated using the
     average of their ranks.

     Notes:
     (1) This command differs slightly from other functions,
     in that the first argument cannot be a constant, and the
     operation is not strictly row by row--the relationship
     of the value in one row to other rows affects the
     answer.

     (2)  To do a normal probability plot of the data in
     column, say, C5, use the following instructuons:

         NSCORES OF C5, PUT IN C6
         PLOT C5 VS C6

     If the sample is from a normal population, the points in
     the plot will probably fall roughly in a straight line.
     If the sample is from a non-normal population, the plot
     will probably show curvature.

     (3)  The "straightness" of the probability plot can be
     measured by the correlation coefficient of the points in
     the plot.  That is, in the example above, the command
     CORRELATION OF C5 AND C6 measures straightness.  A very
     powerful test for normality, which is essentially
     equivalent to the Shapiro-Wilk test can be based on this
     correlation.  A very high correlation is consistent with
     normality, so we reject the hypothesis of normality if
     the correlation falls below the appropriate value in the
     table below:
1
                                             II.7   Functions
                                                      Page 47

                              alpha
          N          0.01      0.05      0.10

          4         .8951     .8734     .8318
          5         .9033     .8804     .8320
         10         .9347     .9180     .8804
         15         .9506     .9383     .9110
         20         .9600     .9503     .9290
         25         .9662     .9582     .9408
         30         .9707     .9639     .9490
         40         .9767     .9715     .9597
         50         .9807     .9764     .9664
         60         .9835     .9799     .9710
         75         .9865     .9835     .9757

     For further details, see T. A. Ryan, Jr. and B. L.
     Joiner.

     References
+    __________

     Filliben, J. J., The Probability Plot Correlation
     Coefficient Test for Normality, Technometrics, Vol 17,
     1975, p. 111.

     Joiner, B. L., and Rosenblatt, J. R., Some properties of
     the range in samples from Tukey's symmetric Lambda
     distributions.  JASA Vol 66, 1971, p. 394.

     Ryan, T. A., Jr. and Joiner, B. L., Normal probability
     plots and tests for normality,  Technical Report,
     Statistics Department, Pennsylvania State Univ.

     Shapiro, S. S. and Francia, R. S.  An approximate
     analysis of variance test for normality, JASA, Vol 67,
     1972, p. 215.

     Shapiro, S. S. and Wilk, M. B.,  An analysis of variance
     test for normality (complete samples), Biometrika, Vol
     52, p. 591.

1
 II.7   Functions
 Page 48

 SIN  of E, put into C
+        _           _

 COS  of E, put into C
+        _           _

 TAN  of E, put into C
+        _           _

     The above three commands calculate the usual
     trignometric functions.  The argument must be in
     radians.  To convert from degrees to radians, multiply
     by .017453.

     The SIN, COS or TAN of numbers very large in magnitude
     cannot be calculated accurately.  In this case, the
     result is set to 0, and the message "VALUE OUT OF
     BOUNDS", is printed.  (The exact magnitude depends on
     the computer.)

 ASIN  of E, put into C
+         _           _

 ACOS  of E, put into C
+         _           _

 ATAN  of E, put into C
+         _           _

     The above three commands calculate the usual inverse
     trig functions, arcsine, arccosine, and arctangent.  The
     result is given in radians.  To convert from radians to
     degrees, multiply by 57.297

     If an operation does not make sense, such as ASIN of
     1.8, the result is set equal to * (missing), and the
     message, "VALUE OUT OF BOUNDS" is printed.

     General notes:
     (1) If an operation is impossible, such as the square
     root of -1, Minitab sets the result equal to *
     (missing), and prints an informative diagnostic which
     gives a count of the number of times such an error has
     been made.

     (2) If the first argument is a constant or an artifi-
     cially long column the result is an artificially long
     column.

     (3) If the result is one number or an artificially long
     column, the result may be stored in a stored constant
     instead of a column.

     (4) If any row of the input column contains a *
     (Minitab's missing data code), then the corresponding
     row of the output column is set equal to *.

1
                                     II.8   Column operations
                                                      Page 49

 8. COLUMN OPERATIONS --------------------------------------

     In these commands the results are printed automatically
     and the storage is optional.  If used, the storage col-
     umn is an artificially long constant column.
     Alternatively, the result can be put in a stored
     constant (see Section I.3).

 COUNt  the number of values in C [put count into C]
+                               _                 _

     Example:  COUNT C1 PUT INTO C2

           C1                  C2
           2.5                 3
           2.0                 3
           3.0                 3
                               .
                               .
                               .

     Since C1 contained 3 values, the count, 3, is put in
     (all the rows of) C2.

     Example:  COUNT C1, PUT IN K8.

 SUM  the values in C [put sum into C]
+                   _               _


 AVERage  the values in C [put average into C]
+                       _                   _

     Calculates the arithmetic mean.  That is, if the first
     named column contains X1, X2,...Xn, then AVERAGE calcu-
     lates (X1 + X2 + ... + Xn)/n.

 STANdard deviation of C [put s. d. into C]
+                      _                 _

     Calculates the usual sample standard deviation.  If the
     first named column contains X1, X2,...,Xn with mean
     Xbar, then STANARD calculates

            st. dev.  = sqrt(sum((X - Xbar)-squared)/(n-1))


 MEDIan  of the values in C [put median into C]
+                         _                  _

     Computes the median.  Suppose the first named column
     contains n values.  If n is odd, the median is the value
     in the middle--that is, half the values are larger than
     the median and half are smaller.  If n is even, the me-
     dian is the average of the two middle values.
1
 II.8   Column operations
 Page 50

 MAXImum of the values in C [put maximum into C]
+                         _                   _

     Example:  MAXIMUM OF C1 PUT INTO C2

           C1             C2
           -5             2
            2             2
            1             2
            2             .
                          .
                          .

 MINImum of the values in C [put minimum into C]
+                         _                   _

     Similar to MAXIMUM

1
                                              II.9    Editing
                                                      Page 51

 9.   EDITING -----------------------------------------------


     Other editing commands are in Section II.11, Manip-
     ulations.  OMIT, CHOOSE, and RECODE can use Minitab's
     interval missing data code, *.  See Section I.5 for more
     about *.  Recall * must be enclosed in quotes when used
     in a command.

 OMIT  rows with K in C [corresponding rows of C,...,C]
+                _    _                        _     _
     put into C [corresp. rows into C,...,C]
+             _                     _     _

     Example:
     OMIT ROWS WITH 2 IN C1 PUT REST INTO C11

                C1            C11
                1              1
                2     -->      3
                2              4
                3
                4
                2

     Example:
     OMIT  2 IN C1, CORR. ROWS OF C2, PUT INTO C11, C12

       C1         C2                   C11           C12
       1          1                     1             1
       2          2        -->          3             1
       2          3                     4             2
       3          1
       4          2
       2          3


     Example:
     OMIT CASES WITH '*' IN C1, CORR. ROWS C2-C8, INTO C11-C18

 OMIT  rows with values from K up thru K in C [corresp. rows
+                            _         _
     of C,...,C] put into C [corresp. rows into C,...,C]
+       _     _           _                     _     _

     Example:
     OMIT 2  5  IN  C1, CORR. ROWS IN C2, PUT INTO C11, C12

        C1            C2                    C11          C12
        2             1                      6            2
        6             2        -->           1            1
        2             1
        5             2
        4             1
        1             1

     Removes rows with values between 2 and 5 inclusive.

1
 II.9    Editing
 Page 52

 CHOOse  rows with K in C [corresp. rows of C,...,C] put
+                  _    _                   _     _
     into C [corresp. rows into C,...,C]
+         _                     _     _

     Example:
     CHOOSE .5 IN C1, CORR. ROWS OF C2, C3, INTO C11-C13

           C1      C2      C3            C11     C12     C13
           0.0     1       10             .5      2       11
           1.0     2       11    -->      .5      4       14
           0.5     2       11
           1.0     4       13
           0.5     4       14

 CHOOse rows with values from K up thru K in C [corresp. rows
+                             _         _    _
     of C,...,C] put into C [corresp rows into C,...,C]
+       _     _           _                    _     _

     CHOOSE is the opposite of OMIT.  These commands are used
     when analyzing subsets of a set of data.  For example,
     when analyzing only males, or those under 25, and so on.

     Note:
     (1) The check for (approximate) equality is done so that
     the rows selected by CHOOse are precisely those not
     selected by OMIT.  (See the General Note at the end of
     this section.)

 RECOde K in C to K, put into C
+       _    _    _           _

     Copies the column, changing the indicated values.

 RECOde the values from K up thru K in C to K, put into C
+                       _         _    _    _           _

     Example:  RECODE  0  1  IN C1 INTO  0  in C2

           C1            C2
           0.4           0.0
           3.0           3.0
           1.1   -->     1.1
           0.5           0.0
           0.0           0.0
           0.1           0.0

     Example:  RECODE -99 in C1 into '*', put into C2.

     Notes:
     (1) Values (approximately) equal to the end values (0
     and 1 in the example) are recoded.

1
                                              II.9    Editing
                                                      Page 53

 CONVert using conversion table in C, C, convert C to C
+                                  _  _          _    _

     This command is designed primarily to convert character
     data (read by FORTRAN formatted input, under A format)
     into numerical codes, so the data can be used by most of
     Minitab's commands.  (Of course, it may not make sense
     to use some of these commands.  For example, if a column
     contains a letter code for political party, it does not
     make sense to average the data, even after the data is
     converted to numbers.)

     The conversion table is used as follows.  An entry in
     the column to be converted is compared against entries
     in the first column of the conversion table.  When a
     match is found, the value in the corresponding row of
     the second column of the conversion table is put in the
     answer column.  If no match is found, the answer is
     computed as follows:  Let M be the minimum of the values
     in the second column of the conversion table.  Then if
     the character to be converted is blank, the answer is
     M-1, and otherwise the answer is M-2.

     Example:

     Data in column 1 is political party.  The party is to be
     converted to a numerical code.

     FREAD 6 ROWS OF DATA INTO C1
     FORMAT (A3)
     DEM
     REP
     DEM
     IND
           (blank line)
     XXX
     FREAD 3 ROWS OF CONVERSION TABLE INTO C2,C3
     FORMAT (A3,1X,F1.0)
     DEM 1
     REP 2
     IND 3
     CONVERT, USING C2 C3, CONVERT C1 PUT INTO C4
     PRINT C4

     Following this example, column C4 will contain 1.0, 2.0,
     1.0, 3.0, 0.0, -1.0.
1
 II.9    Editing
 Page 54

     Notes:
     (1)  This command should not normally be used to convert
     numbers, since the check for equality is exact, not a
     check to machine accuracy.  Thus, for example, .2 may be
     stored in several ways in the machine depending on how
     it was read or calculated, and thus may not be converted
     correctly.  (See the General Note below.)


     General Note:
+    ____________

     The commands in this section, except for convert, check
     for approximate equality rather than exact equality,
     since computers must round off most numbers to store
     them.
1
                                         II.10   Manipulation
                                                      Page 55

 10. MANIPULATION ------------------------------------------

     Other manipulations are in Sections II.12 Sorting and
     II.10 Editing.


 COPY C,...,C into C,...,C
+     _     _      _     _

     Makes a second way of the block of columns.

 JOIN  E to the bottom of E [to the bottom of E,..., to E]
+      _                  _                   _         _
     put into C
+             _

     Example:  JOIN C1 C2  153  C3, PUT INTO C4

             C1     C2          C3         C4
              2     10   153    65         65
              3     40                    153
                    60              -->    10
                                           40
                                           60
                                            2
                                            3

     Notes:
     (1)  Artificially long columns (such as C2 after the
     command AVERAGE C1, PUT IN C2) contain as many elements
     as the current dimension and are treated in the same way
     as regular columns of that length.

 PICK  rows K thru K of C, put into C
+           _      _    _           _

     Example:  PICK ROWS 3 to 5 OF C1, PUT INTO C2

                      C1            C2
                       2             6
                       3     -->     5
                       6             1
                       5
                       1
                       7

     Notes:
     (1) The second argument of this command may be larger
     than the length of the column.  In this case, the rows
     from the first row named to the end of the column are
     picked.  That is, if C1 contains 18 numbers, then PICK 8
     18 C1 C2 and PICK 8 200 C1 C2 are equivalent.

     (2) PICK selects rows by row number, unlike CHOOSE and
     OMIT which select rows according to the contents of the
     rows.

1
 II.10   Manipulation
 Page 56

 PARSum  of C, put into C
+           _           _

     Calculates partial sums.  The sum of the first i rows of
     the first named column is put in the i-th row of the
     second named column.

     Example:  PARSUM C1, PUT INTO C2

           C1            C2
            0             0
            1             1
            2     -->     3
            4             7
            6            13

 PARProduct of C, put into C
+              _           _

     Calculates partial products.  Similar to PARSUM, except
     multiplies instead of adding.

 INDIcator  variables for values in C, put into C,...,C
+                                   _           _     _

     The command is usually used to create indicator or dummy
     variables useful when doing analysis of variance, or
     analysis of covariance, by regression techniques.  For
     example, suppose C1 contains exam scores for 3 groups,
     and C2 contains a code telling which group the person is
     in.  In order to use the command INDICATOR, these codes
     should consist of consecutive integers.  For example, 1
     for group 1, 2 for group 2, 3 for group 3; or -1 for
     group 1, 0 for group 2 and +1 for group 3.  Since there
     are 3 groups, there will be 3 dummy variables created
     and there must be 3 storage columns specified in the
     command.  Thus suppose the exam scores are in C1 and the
     codes are in C2.

             INDICATOR FOR C2, PUT INTO C11 - C13

                 C2          C11     C12     C13
                  1            1       0       0
                  1            1       0       0
                  2            0       1       0
                  1    -->     1       0       0
                  3            0       0       1
                  3            0       0       1
                  3            0       0       1
                  1            1       0       0
1
                                         II.10   Manipulation
                                                      Page 57

     Thus C11 (the first named storage column) contains a 1
     in every row for which there is a code of 1 (the small-
     est code) in C2.  All other rows of C11 contain zeros.
     And C12 (the second named storage column) contains a 1
     in every row for which there is a code of 2 (the second
     smallest code) in C2.  All other rows of C12 contain
     zeros.  And C13, (the third named storage column)
     contains a 1 in every row for which there is a code of 3
     (the third smallest code) in C2.

1
 II.11   Sorting
 Page 58

 11. SORTING------------------------------------------------


     All of the following sorting algorithms are based on the
     use of the ACM QUICKSORT - Algorithm #402 (Collected
     Algorithms of ACM), as implemented in FORTRAN (and a bug
     corrected) by W. Verity of the Penn State Computation
     Center.


 ORDEr  C [and C,..., C] put into C [and into C,..., C]
+       _      _      _           _           _      _

     Each column is ordered separately.  The smallest number
     is put at the top.

     Example:  ORDER C1 AND C3, PUT INTO C5, C6

           C1          C3            C5         C6
           2          10.0           1          3.6
           3          10.0    -->    2          4.0
           1           8.1           3          8.1
           4           3.6           4         10.0
                       4.0                     10.0

 SORT  the values in C [carry along corresp. rows of C,...,C]
+                    _                               _     _
     put into C [corresp. rows into C,...,C]
+             _                     _     _

     The columns are sorted all together, according to first
     column.

     Example:  SORT C1 CARRY ALONG C2, PUT INTO C5 AND C6

           C1      C2               C5          C6
           2       10               1           12
           3       11               2           10
           1       12     -->       3           11
           4       13               4           13
           5       14               5           14

     Note:
     (1) The sorting algorithm currently used is "unstable" -
     that is, rows with equal values may or may not be
     switched in order.  This unfortunately prohibits the use
     of multiple passes as done on a card sorter.
1
                                              II.11   Sorting
                                                      Page 59

 RANK   the values in C, put ranks into C
+                     _                 _

     Puts the number 1 next to the smallest value, the number
     2 next to the next smallest value, etc.  Ties are
     assigned the average rank.

     Example:  RANK C1 PUT RANKS INTO C2
           C1               C2
          0.5              2.0
          1.0              3.5
          1.5     -->      5.0
          1.0              3.5
          2.0              6.0
          0.0              1.0

     This command is used in non-parametric statistics.
1
 II.12   Statistics on one column of data
 Page 60

 12. STATISTICS ON ONE COLUMN OF DATA ----------------------

     See also the commands:  HISTOGRAM (II.4); SIGN, NSCORES
     (II.8); AVERAGE, STANDARD DEVIATION, etc.(II.9); and
     WALSH AVERAGES (II.11).


 TINTerval with K percent confidence for data in column C
+               _                                       _

     Calculates a t-confidence interval.  This interval goes
     from (Xbar)-t(s/sqrt(n)) to (Xbar)+t(s/sqrt(n)) where
     Xbar is the mean of the data, s is the sample standard
     deviation calculated as for the command STANDARD DEV-
     IATION, and t is the value from the t-table
     corresponding to (K) percent confidence and (n-1)
     degrees of freedom.

     Example:

        SET C1
         4.4 4.2 4.6 5.0 4.3 4.7 4.4 4.7 4.6
        TINTERVAL WITH 90 PERCENT CONFIDENCE FOR DATA IN C1

     Output:

 -- SET C1
    COLUMN  C1
    COUNT    9

     4.40000     4.20000     4.60000     5.00000  .  .  .

 -- TINTERVAL WITH 90 PERCENT CONFIDENCE FOR DATA IN C1
    C1     N =  9     MEAN =    4.5444     ST.DEV. =   0.246

    A 90.00  PERCENT C.I. FOR MU IS: (    4.3922,    4.6967)


     If the value of K is less than 1, it is assumed to be a
+                    _
     confidence coefficient and not a percentage, and is
     multiplied by 100.  For example, if you use the command
     TINTERVAL .50 ON C1 then a 50 percent confidence
     interval is calculated.

 TTESt  of mu = K [alternate K] on data in column C
+               _            _                    _

     Performs a t-test on the data.  The form of the
     alternative hypothesis may be given by the codes -1 for
     less than, 0 for not equal, and +1 for greater than.  If
     the alternate hypothesis is not specified, it is assumed
     to be not equal (code 0).
1
                     II.12   Statistics on one column of data
                                                      Page 61

     Example:

         SET C2
         4.9 5.1 4.6 5.0 5.1 4.7 4.4 4.7 4.6
         TTEST OF MU=5, ALT.=-1 ON C2

     Output:

 -- SET C2
    COLUMN  C2
    COUNT    9

     4.90000     5.10000     4.60000     5.00000  .  .  .

 -- TTEST OF MU=5, ALT.=-1 ON C2
    C2     N =  9     MEAN =    4.7889     ST.DEV. =   0.247

    TEST OF MU =     5.0000 VS. MU L.T.     5.0000
    T = -2.562
    THE TEST IS SIGNIFICANT AT  0.0168


     The test statistic

         T = (Xbar-mu)/(s/sqrt(n))


     is calculated, where Xbar is the mean of the data, and s
     is the sample standard deviation calculated as in the
     command STANDARD DEVIATION.  In the example, C2 contain-
     ed 9 numbers, and the test statistic T = -2.562.
     Minitab calculated the probability of getting a value as
     small as -2.562, or smaller, from a t-distribution with
     (9-1)=8 degrees of freedom.  This is called the attained
     significance level or p-level or attained alpha of the
     test.  It can also be used to do the test for any
     pre-specified alpha-level you choose.  Minitab printed
     out this attained significance level by saying THE TEST
     IS SIGNIFICANT AT  0.0168.  If a test is not significant
     at alpha = .05, a message is printed.

     Suppose the alternate in the example were +1, for
     greater than.  T would still be -2.562, but the
     significance level would be the probability of getting a
     value of -2.562 or larger (about 0.98).  If the
     alternate were 0, for not equal, then the significance
     level would be the probability of getting a value as
     extreme (as large in magnitude) as -2.562 or more
     extreme.
1
 II.12   Statistics on one column of data
 Page 62

 *WILCoxon one-sample rank test for median K and confidence
+                                          _
     interval for data in C
+                         _
 * (not yet implemented)

     This command computes the Wilcoxon one-sample rank test
     (signed-rank test), and calculates the corresponding
     point and confidence interval for the population median.
     The method assumes a symmetric population.  It is thus
     appropriate for paired data, where the column specified
     is the difference scores, and the null hypothesis median
     is usually 0.


 RUNS  above and below K for data in column C
+                      _                    _

     Performs a (two-sided) runs test on the data.  A runs
     test is usually used to test data to see if the order is
     "random".  A run is one or more observations in a row >
     K or one or more observations in a row < or = K.  For
     example, suppose an interviewer was to select 30 people
     at random and ask them each a question.  Their responses
     are coded 0, 1, 2, 3.  The interviewer turned in the
     following responses:

     0, 0, 1, 0, 1, 1, 1, 1, 2, 3, 3, 2, 0, 0, 0,
     2, 1, 1, 1, 1, 2, 3, 3, 0, 0, 1, 0, 2, 2, 3

     You could test these data for randomness of order with
     the command RUNS ABOVE AND BELOW 1 FOR DATA IN C1.
     There are 8 runs as follows:

     (0, 0, 1, 0, 1, 1, 1, 1), (2, 3, 3, 2), (0, 0, 0),
     (2), (1, 1, 1, 1), (2, 3, 3), (0, 0, 1, 0), (2, 2, 3)

     Notice that 1 is put with the collection of values below
     1.  Now Minitab calculates the expected number of runs,
     conditioned on having 11 values > 1 and 19 values < or =
     1, and the conditional standard deviation.  The
     probability of getting as extreme a number of runs or
     more extreme is found, using a normal approximation.
     This approximation is quite good if at least 10
     observations are > K and at least 10 are < or = K.  This
     probability is called the attained significance level,
     attained alpha, or p-value.  Minitab prints the number
     of runs, the conditional mean and standard deviation,
     and the attained alpha.  If the attained alpha is
     greater than 0.05 or there are two few observations > K
     or too few < or = K for the normal approximation to be
     valid, an appropriate message is printed out.  Exact
     tables are widely available if the normal approximation
     is not valid.
1
                     II.12   Statistics on one column of data
                                                      Page 63

     You must choose the value of K.  Ordinarily, it should
     be near the middle of the observations.


 ZINTerval K percent confidence, assuming sigma = K, on C
+          _                                      _     _

     Similar to TINTERVAL except assumes the standard
     deviation is known.  Used primarily in teaching.

 ZTESt of mu = K [alt. K] assuming sigma = K, on C
+              _       _                   _     _

     Similar to TTEST, except assumes the standard deviation
     is known.  Used primarily in teaching.
1
 II.13   Regression
 Page 64

 13. REGRESSION --------------------------------------------


     The regression command was written with extensive help
     from Prof. Webb C. Miller of the University of Califor-
     nia, Santa Barbara.

     The regression command has a number of optional argu-
     ments.  The basic regression command is:

 REGRess y in C using K predictors in C, ..., C
+             _       _               _       _

     Note that the number of columns of predictor variables
     must be specified.

     Most careful regression analyses require further analy-
     sis of residuals and residual plots.  These are made
     possible by the optional storage columns.  If one
     storage column is specified, the (standardized)
     residuals are stored; if two storage columns are
     specified, the predicted values are stored as well.  A
     third storage column can be specified for storage of the
     regression coefficients.

 REGRess y in C using K predictors in C, ..., C, [store st.
+             _       _               _       _
     residuals in C [pred. y in C [coef. in C]]]
+                 _             _           _

     Weighted fits may be done by specifying a column of
     weights following the column of y values:

 REGRess y in C, weights in C, using K predictors in C,...,C,
+             _             _        _               _     _
     [store st. resid. in C [pred. y in C [coef. in C]]]
+                         _             _           _

     In all cases, the command finds the least squares linear
     equation for predicting Y from k predictors X1, X2, ...
     Xk.  This equation (also called the regression equation)
     is of the form

         Y = b0 + (b1)X1 + (b2)X2 + ... + (bk)Xk.

     The values b0, b1, ... bk are found by Minitab, and are
     called regression coefficients.


     Example:  READ X INTO C1 AND Y INTO C2
               2  3
               2  2
               1  2
               3  3
               REGRESS Y'S IN C2 ON 1 PRED. IN C1
1
                                           II.13   Regression
                                                      Page 65


     If the command NOCONSTANT is in effect, the b0 term is
     not fitted in the equation.  Therefore Minitab fits

     Y = (b1)X1 + (b2)X2 + ... + (bk)Xk


 Use of the regression command
+_____________________________

     By multiplying a column of X's by itself to create a
     column of X-squares, curves such as

         Y = b0 + (b1)X + (b2)X-squared

     can be fitted.  By using Minitab functions such as SQRT
     and LOGE, equations such as

         Y = b0 + (b1)ln(X)

     can be fitted.  Analysis of variance and analysis of
     covariance can be done by creating the appropriate dummy
     variables.  The INDICATOR command may be useful.

     Further analysis usually follows the REGRESS command.
     The most important part of this analysis is usually the
     plotting of residuals.  If the residuals and predicted
     values have been stored, the usual plots of the
     residuals versus the predicted values and the residuals
     versus each X variable are easily done by the PLOT
     command.  If the order in which the observations were
     taken is known, the residuals should be plotted against
     time order.  A histogram or normal probability plot of
     residuals is also recommended.


 Output
+______

     The output of a simple regression is below.  The data
     are in the example given above.  This is the "full"
     output, given when the command NOBRIEF is in effect.
     (See BRIEF and NOBRIEF below for other forms of the
     output.  Additional output is possible using the BRIEF 6
     command.) The use of the optional storage columns does
     not affect the output.
1
 II.13   Regression
 Page 66

 -- REGRESS Y IN C2 ON 1 PRED. IN C1

 THE REGRESSION EQUATION IS
 Y =    1.50 + 0.500 X1
                                      ST. DEV.    T-RATIO =
        COLUMN     COEFFICIENT        OF COEF.    COEF/S.D.
        --              1.500           0.750         2.00
 X1     C1              0.500           0.354         1.41

 THE ST. DEV. OF Y ABOUT REGRESSION LINE IS
 S =      0.500
 WITH (   4- 2) =   2 DEGREES OF FREEDOM

 R-SQUARED = 50.0 PERCENT
 R-SQUARED = 25.0 PERCENT, ADJUSTED FOR D.F.

 ANALYSIS OF VARIANCE

  DUE TO     DF          SS       MS=SS/DF
 REGRESSION   1        0.500        0.500
 RESIDUAL     2        0.500        0.250
 TOTAL        3        1.000

            X1         Y   PRED. Y   ST.DEV.
 ROW        C1        C2     VALUE   PRED. Y  RESIDUAL    ST.RES.
   1      2.00      3.00      2.50      0.25      0.50      1.15
   2      2.00      2.00      2.50      0.25     -0.50     -1.15
   3      1.00      2.00      2.00      0.43      0.00      0.00
   4      3.00      3.00      3.00      0.43      0.00      0.00

 (X-PRIME X)INVERSE
                1           2
    1     2.25000
    2    -1.00000     0.50000


 Multiple regression
+___________________

     Example:  READ INTO C1   C2   C3   C4
                         20    1    1    2
                         25    4    2    3
                         10    3    4    1
                         12    6    8    2
                          4    4    8    1
               REGRESS Y IN C1 ON 3 PRED. IN C2, C3, C4

     The output is given below.  This the "full" output,
     given when NOBRIEF is in effect.  Optional storage
     columns do not affect the output.
1
                                           II.13   Regression
                                                      Page 67

 -- REGRESS Y IN C1 ON 3 PRED. IN C2, C3, C4

 THE REGRESSION EQUATION IS
 Y =    8.43 + 0.375 X1 -  1.44 X2
     +  6.14 X3

                                      ST. DEV.    T-RATIO =
        COLUMN     COEFFICIENT        OF COEF.    COEF/S.D.
        --               8.43            2.16         3.91
 X1     C2              0.375           0.767         0.49
 X2     C3             -1.442           0.484        -2.98
 X3     C4               6.14            1.24         4.96

 THE ST. DEV. OF Y ABOUT REGRESSION LINE IS
 S =      0.983
 WITH (   5- 4) =   1 DEGREES OF FREEDOM

 R-SQUARED = 99.7 PERCENT
 R-SQUARED = 98.6 PERCENT, ADJUSTED FOR D.F.

 ANALYSIS OF VARIANCE

  DUE TO     DF          SS       MS=SS/DF
 REGRESSION   3      275.832       91.944
 RESIDUAL     1        0.967        0.967
 TOTAL        4      276.799

 FURTHER ANALYSIS OF VARIANCE
 SS EXPLAINED BY EACH VARIABLE WHEN ENTERED IN THE ORDER GIVEN

  DUE TO     DF          SS
 REGRESSION   3      275.832
 C2           1       23.467
 C3           1      228.585
 C4           1       23.781

            X1         Y   PRED. Y   ST.DEV.
 ROW        C2        C1     VALUE   PRED. Y  RESIDUAL    ST.RES.
   1      1.00     20.00     19.64      0.92      0.36      1.00
   2      4.00     25.00     25.47      0.87     -0.47     -1.00
   3      3.00     10.00      9.93      0.98      0.07      1.00
   4      6.00     12.00     11.43      0.80      0.57      1.00
   5      4.00      4.00      4.54      0.82     -0.54     -1.00

 (X-PRIME X)INVERSE
                1           2           3           4
    1     4.80904
    2     0.94430     0.60875
    3    -0.80372    -0.35942     0.24271
    4    -2.39524    -0.82361     0.54509     1.58488
1
 II.13   Regression
 Page 68

 Glossary of regression terms
+____________________________

     The terms used on the output and in this Reference
     Manual are as follows:

     adjusted for d. f.  See R-squared adjusted for d. f..

     analysis of variance.  The analysis of variance table
         gives the following sums of squares (SS).  Let n =
         number of observations.  The TOTAL SS =
         SUM((Y-Ybar)-squared), and has n-1 degrees of
         freedom.  The SS DUE TO REGRESSION is
         SUM((Yhat-Ybar)-squared) where Yhat is the predicted
         value of Y.  The SS RESIDUAL is
         SUM((Y-Yhat)-squared).  The last column gives the
         mean squares which are useful for various F-tests.

     BRIEF.  Command which controls the amount of output of
         the regression command.  See the description of
         BRIEF below.

     coefficients.  These are the constants b0, b1, ... found
         by Minitab, and are the coefficients in the
         regression equation.

     CONSTANT.  Command which cancels out the NOCONSTANT
         command.

     covariance of the coefficients.  Since the coefficients
         are determined by the data, they are random
         variables.  The estimated covariance matrix of these
         random variables is printed out if the command BRIEF
         6 is in effect.

     confidence intervals.  To use the information on the
         output to form confidence intervals for the coeffi-
         cients, regression line, etc., see any standard
         regression text or the Minitab Student Handbook.

     D.F.  Degrees of freedom.

     degrees of freedom.  The number of degrees of freedom
         for the sum of squared residuals is the number of
         observations minus the number of coefficients in the
         regression equation.  This degrees of freedom is
         used in t-tests and confidence intervals and in
         F-tests.  Each regression coefficient has 1 degree
         of freedom associated with it.

     Dependent variable.  The dependent variable, or y
         variable, is the variable which is predicted by the
         independent, or x, variable(s).
1
                                           II.13   Regression
                                                      Page 69

     F-tests.  F-tests for the significance of regression,
         etc, are easily carried out using the MS values in
         the analysis of variance and further analysis of
         variance tables.

     further analysis of variance.  The first line in the
         FURTHER ANALYSIS OF VARIANCE table is exactly the
         same as in the ANALYSIS OF VARIANCE table.  The next
         line gives SS(b1/b0), i.e. the further reduction in
         the sum of squares due to fitting the b1 term (or
         equivalently using X1 as a predictor), assuming that
         you've already fit the b0 or constant term.  The
         next line gives SS(b2/b0,b1), i.e. the further
         reduction in the sum of squares due to fitting the
         b2 term, assuming that you've already fit the terms
         b0 and b1.  The next line (if any) is
         SS(b3/b0,b1,b2), and so on.  If you want something
         like SS(b2/b0,b3), then you have to use the REGRESS
         command again, entering the variables in an
         appropriate order, such as REGRESS C1, 3 PRED. C4,
         C3, C2.

     least squares.  The criterion for fitting equations used
         by the REGRESS command is to find the equation which
         minimizes the sum of squared (vertical) distances
         from the equation to the observation.  This minimum
         is SS(residual).

     mean square.  Sum of squares divided by its degrees of
         freedom.

     MS.  Mean square.

     NOCONSTANT.  Command which tells REGRESS commands which
         follow to fit an equation without a constant
         (intercept, b0) term.  This command applies to all
         REGRESS commands which follow, until a CONSTANT
         command is encountered.

     predicted y-value.  The value produced by substituting
         the x-value(s) into the fitted regression equation.

     prediction interval.  A prediction interval for a future
         observation is easily found using information on the
         output.  See any standard regression text or the
         Minitab Student Handbook.

     predictor.  An x-variable (independent variable).

     R.  If an observation has a standardized residual
         greater than 2 in absolute value, the letter R is
         printed next to it.

     regression equation.  The equation found by the REGRESS
         command which fits the data best, according to the
         least squares criterion.
1
 II.13   Regression
 Page 70

     residual.  The difference between the observed and
         predicted y value, i.e.,  y - (b0 + b1 X1 + ...).
         This difference is also called the error or
         deviation.

     R-squared.  A measure of how well the regression
         equation fits the data, with 100% indicating a
         perfect fit.  Defined by 100(SS due to
         regression)/(SS total).  It is also equal to the
         correlation between the observed and predicted y
         values.

     R-squared adjusted for degrees of freedom.  If more
         variables are used to form an equation, R-SQUARED
         will get larger, even if the added variable is of no
         real value.  To compensate for this, Minitab also
         prints R-SQUARED ADJUSTED FOR DEGREES OF FREEDOM.
         This is an approximately unbiased estimate of the
         population R-SQUARED, and is calculated by the
         formula

         R-squared (adj) =
           1 - (SS(residual)/(n-p))/(SS(total)/(n-1))

         and then is converted to percent, where p is the
         number of coefficents fit in the regrssion equation.
         In the same notation, the usual R-squared is

         R-squared =
           1 - ((SS(residual)/(n-1))/(SS(total)/(n-1))

         References for R-squared adjusted include Ezekial
         and Fox: Methods of Correlation and Regression
         Analysis (1959) and Neter and Wasserman:  Applied
         Linear Models.

     s.  Standard deviation of y about the regression line.

     SS.  Sum of squares.

     standard deviation of coefficent.  Since the coeffi-
         cients are determined by the data, they are random
         variables.  The estimate of their standard deviation
         is printed in the table of coefficients.  This
         estimate is useful for confidence intervals and
         tests concerning the coefficients.

     standard deviation of predicted y values.  Since the
         fitted regression equation is determined by the
         data, the predicted values are random variables.
         The estimated standard deviation of these is printed
         out as an indication of uncertainty and for use in
         forming prediction and confidence intervals.
1
                                           II.13   Regression
                                                      Page 71

     standard deviation of y about regression line.  This is
         an estimate of sigma (see Assumptions, below).  It
         is defined by s = sqrt(MS(error)).  The degrees of
         freedom associated with s is the same as for
         SS(error), that is, n-p, where p is the number of
         coefficients in the equation.

     st.dev.  Standard deviation.

     st. res.  Standardized residual.

     standardized residual.  The residual divided by the
         estimated standard deviation of that residual.  The
+                                        ____
         covariance matrix of the residuals =
         (s-squared)(I-H) where H = X((X'X)-inverse)X'.  The
         variances of the residuals appears on the diagonal
         of the covariance matrix.  For further information,
         see Hoaglin and Welsch (1978).  Note:  some books
         and some regression programs use the term
         standardized residuals for the residual divided by
         s; this gives less information about the influence
         of residuals at extreme x-values.

     total.  The total sum of squares on the output is
         adjusted for the mean.  That is, SS(total) =
         SUM((Y-Ybar)-squared).

     tests.  Tests of significance of the coefficients are
         based on the t-ratio in the table of coefficients.
         F-tests for the significance of regression, etc.,
         can be done easily by using the MS values in the
         analysis of variance and further analysis of
         variance tables.

     t-ratio.  The ratio  coefficient/(est. st. dev. of
         coef.) is used as a test statistic for testing the
         hypothesis that the true (population) coefficient is
         0.  The degrees of freedom for the test is the same
         as the degrees of freedom for s or SS(residual).

     X.  Observations with unusual x-values.  That is,
         observations for which the i-th diagonal element of
         X((X'X)-inverse)X' is larger than 2p/n.  These are
         indicated by printing the letter X next to their
         standardized residuals.  Here p = number of
         predictors + 1 and n = number of observations.
         These points have unusual values of their
         predictors, values which are "far" from the majority
         of the predictor values.  These points therefore
         have a great influence in determining the regression
1
 II.13   Regression
 Page 72

         coefficients.  If these points are correct, they are
         very useful in getting a good estimate of the
         coefficients; if they are incorrect, they may cause
         serious errors in the estimates of the coefficients.
         If the predictors have a multivariate normal
         distribution, then about 5% of the observations, on
         the average, will have unusual values, and will be
         given an X.  For further information, see Hoaglin
         and Welsch (1978).

     X-matrix.  Matrix formed with the first column a column
         of 1's (unless NOCONSTANT is in effect), and the
         other columns the columns of x-variable(s) used in
         the regression.

     x-variable.  One of the independent variables
         (predictors) used in the regression.

     X1, X2, ...  The names of the x variables used in the
         regression.  X1 corresponds to the first column of x
         variables, X2 to the second, etc.

     X'X matrix.  Matrix product of the transpose of the X
         matrix with the X matrix.

     y.  The dependent variable in the regression.


 Missing data.
+____________

     All observations which contain one or more missing
     values (either on the dependent or one or more of the
     independent variables) are not used in calculating the
     regression equation.


 Assumptions.
+___________

     The basic assumptions of regression are that the data
     are of the form Y= B0 + (B1)X1 + (B2)X2 +...+ E, where
     the B0, B1, ... are unknown "true" coefficients (to be
     estimated by b0, b1, ...), the E's are independent
     normal errors with mean 0 and standard deviation sigma
     (estimated by s).  You can use residual plots, etc., to
     check whether some of these assumptions are reasonable.
     (See the Minitab Student Handbook for further details.)

1
                                           II.13   Regression
                                                      Page 73

 Ill-Conditioned Data.
+____________________

     Predictor variables can have two types of problems.
     Each of these can cause both statistical and computa-
     tional difficulties.

     The first problem is "multicollinearity".  That is, some
     predictors are highly correlated with other predictors.
     If this correlation is moderately high, the message

     WARNING - PREDICTOR VARIABLES ARE NEARLY MULTICOLLINEAR
     THE FOLLOWING VARIABLES ARE HIGHLY CORRELATED
     WITH OTHER PREDICTOR VARIABLES.

     is printed (with a list of columns), and computation
     continues.  The predicted values and residuals will be
     computed with high statistical and numerical accuracy.
     The coefficients, however, will be affected
     statistically (their standard deviations will be very
     large) and may be affected somewhat in numerical
     accuracy.

     If the correlation of a predictor with other predictors
     is very high, it is eliminated from the equation, and a
     message such as the following is printed (where C5 is
     the correlated predictor):

     C5    IS HIGHLY CORRELATED WITH OTHER PREDICTOR VARIABLES.
     C5    HAS BEEN OMITTED FROM THE EQUATION.

     The correlation structure of the predictor variables can
     be examined by using the CORRELATION command and by
     regressing each suspicious predictor on the other
     predictor variables.

     Some possible solutions to the problem of
     multicollinearity of predictor variables are:  (1)
     Eliminate predictor variables from the equation,
     especially if deleting them has little effect on
     R-squared; (2) Change predictor variables by taking
     linear combinations of predictor variables (e.g.
     principal components); (3) If polynomials are being fit,
     subtract a value near the mean of a predictor before
     squaring it.
1
 II.13   Regression
 Page 74

     The second problem occurs when a predictor variable has
     a small coefficient of variation.  These predictors are
     "nearly constant", such as the variable YEAR which has
     values from 1970 to 1975.  This can cause numerical
     problems, since all the information is contained in the
     fourth digit.  The problem is compounded if the variable
     is squared.  The solution is to subtract a constant from
     the data (e.g replace YEAR by YEARS SINCE 1970, which
     has the values from 0 to 5).

     If the coefficient of variation is moderately small, the
     answers from Minitab should be reasonably accurate
     numerically, but some loss of statistical accuracy will
     occur.  In this case, the message

     WARNING - THE FOLLOWING PREDICTOR VARIABLES ARE NEARLY
     CONSTANT.  (ST. DEV./MEAN  IS NEAR ZERO.)

     will be printed.  If the coefficient of variation is
     very small, the variable is eliminated from the
     equation, a message such as the following is printed
     (where C5 has a small coefficient of variation):

     C5    IS (ESSENTIALLY) CONSTANT.
           THAT IS, ST. DEV./MEAN IS (ESSENTIALLY) ZERO.
     C5    HAS BEEN OMITTED FROM THE EQUATION.

     If the command NOCONSTANT is in effect, the
     "correlations" are calculated without correcting for the
     mean (e.g., for two variables, "R-squared" =
     (SUM(X1*X2))/(SUM(X1-squared)*SUM(X2-squared)).

     The checks for ill-conditioned data have been heavily
     influenced by Velleman et al (1977).

 Method
+______

     The computational method used is Givens transformations
     without square roots (fast Givens method) as described
     by Gentleman (1973).  This method has very high accuracy
     (which allows Minitab to do the computations in single
     precision, yet obtain accuracy comparable to, or better
     than, using double precision in methods which solve the
     normal equations).  The method is quite fast, and gives
     good diagnostics for ill-conditioned problems.

     The method for determining points with high influence
     due to their position in X-space is from Hoaglin and
     Welsch (1977).

     Other useful references concerning the computational
     methods used are Gentleman (1974), Golub (1969), and
     Stewart (1973).
1
                                           II.13   Regression
                                                      Page 75

     The answers produced are essentially always the correct
     answer for data which differs from the original data by
     no more than the imprecision of single precision
     storage.  The biggest limitation on accuracy for most
     data sets is arithmetic and transformations carried out
     in Minitab before the regression is called; thus some
+               ______
     care should be exercised by the user.  For example, if a
     quadratic equation is to be fit using the year
     (1960-1970) and year-squared, it is highly desirable to
     subtract 1960 from the year before doing the squaring.
+                                ______

     The number of places printed out is determined as
     follows: Most quantities are printed to 2 or 3
     significant digits in their standard deviation, but to
     at most 6 or 7 digits.  This means that digits which are
     statistically and numerically meaningful are printed,
     but as few "garbage" digits as possible are printed.
     The analysis of variance table is printed so that
     SS(residual) is printed to 3 significant digits (unless
     other SS are very large).  This means that any F-ratios
     can be calculated to 3 significant digits, unless the
     F-ratio is very large or less than 1.


 Notes:
     (1) Large or small numbers may be printed out in
     scientific notation.  That is, a number may be printed
     as 0.23D-09 or 0.23E-09.  This is equal to 0.23 times 10
     to the power -9, or 0.00000000023.

     (2) If a number does not fit in the space that the
     program allows, the space for that number will be filled
     with *'s on most computers.  Also if a t-ratio doesn't
     make sense, the space for that t-ratio will be filled
     with *'s on most computers.

     (3)  Cases which contain missing y or a missing x are
     not used in calculating the regression equation.  The
     residual and predicted values for these cases is stored
     as missing (and are printed as *'s on most computers).


 References.
+__________

     N. R. Draper and H. Smith:  Applied Regression Analysis;
         John Wiley and Sons, Inc., 1966.

     W. M. Gentleman:  Least Squares Computations Without
         Square Roots, J. Inst. Maths. Applic. 12 (1973), pp
         329-336.

     W. M. Gentleman:  Regression Problems and the QR
         Decompostition, Bull. Inst. Maths. Applic. 10
         (1974), pp 195-197.
1
 II.13   Regression
 Page 76

     G. H. Golub:  Matrix Decompositions and Statistical
         Computation.  In the book Statistical Computation
         (R. C. Milton and J. A. Nelder, eds.) Academic
         Press, 1969.

     D. C. Hoaglin and R. E. Welsch:  The Hat Matrix in
         Regression and ANOVA, American Statistician 32
         (1978) pp 17-22.

     J. Neter and W. Wasserman:  Applied Linear Models;
         Richard D. Irwin, Inc., 1974.

     T. A. Ryan, Jr., B. L. Joiner, and B. F. Ryan:  Minitab
         Student Handbook; Duxbury Press, 1976.

     G. W. Stewart:  Introduction to Matrix Computations,
         Academic Press, 1973.

     P. F. Velleman, J. Seaman, I. E. Allen;  Evaluating
         Package Regression Routines.  ASA 1977 Proc. of the
         Stat. Comp.  Section.


 Further Regression Commands.
+___________________________

 NOCOnstant

     Tells Minitab to fit equations with no constant term
     (intercept), that is, an equation of the form:

                 y = (b1)X1 + ... + (bk)Xk

     This command applies to all REGRESS commands which
     follow, or until the command CONSTANT is used.

     Notes:
     (1)  The value of R-squared is not printed if NOCONSTANT
     is in effect, since the interpretation of it is
     difficult.


 CONStant

     Tells Minitab to resume fitting equations (as usual)
     with a constant term. This command applies to all
     REGRESS commands which follow, or until the command
     NOCONSTANT is used.

1
                                           II.13   Regression
                                                      Page 77

 BRIEf

     Causes brief output from REGRESS commands which follow
     it.  It remains in effect until another BRIEF or NOBRIEF
     command is used.  BRIEF is equivalent to BRIEF 2,
     described below.


 NOBRief

     Causes "full" output from REGRESS commands which follow.
     Cancels out BRIEF.  This is equivalent to BRIEF 5,
     described below.  This command remains in effect until
     another NOBRIEF or BRIEF command is used.


 BRIEf  output code K
+                   _

     This command controls the amount of output from REGRESS
     commands which follow.  K is an integer from 1 to 7.
+                            _
     The larger the value of K, the more output.
+                            _
     Specifically:

         BRIEF 1 - very brief output.  Only the table of
                   coefficients, s, and R-squared are
                   printed.

         BRIEF 2 - same as BRIEF with no arguments.  Above
                   output plus the regression equation, and
                   analysis of variance table.

         BRIEF 3 - above output plus further analysis of
                   variance.

         BRIEF 4 - in addition to the above output, those
                   rows of the table of residuals which have
                   large standardized residuals and those
                   which have unusual predictor values (see
                   definition of R and X) are printed.

         BRIEF 5 - "full" output, equivalent to NOBRIEF,
                   gives above output plus the rest of the
                   table of residuals, and (X'X)-inverse.

         BRIEF 6 - "full" output, as above, plus the R-matrix
                   of the Q-R decomposition.

         BRIEF 7 - prints 'debugging' information useful for
                   the system designer.

1
 II.14   More statistics
 Page 78

 14. MORE STATISTICS ---------------------------------------


 BINOmial probabilities for n = K, p = K
+                               _      _

     Prints out a table of binomial probabilities and cumula-
     tive distribution function.  It always starts printing
     (and calculations) with P(X = 0) and P(X < or = 0).
     Printing continues up to P(X = n) and P(X < or = n), or
     until P(X < or = i) is essentially 1.

     Notes:
     (1) If n and p are both large, there will be a large
     number of lines printed.  Questions involving p near 1
     should be re-phrased to reverse "success" and "failure",
     so that the roles of p and q=(1-p) are interchanged.
     (See also note 3 below.)

     (2) In order to compute P(X=0), the computer must
     calculate q to the n-th power.  If n is large, the
     computer may not be able to calculate this, due to
     "exponent underflow".  This is particularly true if q is
     small.  The exact limits depend on the computer.  A
     typical limit is n=250 for p=1/2.

     (3)  A revised version of this command is planned, which
     will calculate and print fewer rows where P(X=k) is
     essentially 0, and which will reduce the restrictions on
     n and p.

     Method:  Arithmetic is done in double precision on most
     computers.  P(X = 0) is (1-p) to the n-th power.  P(X =
     k) is found by the recursion relationship

         P(X=k) = ((n-k+1)p/(kq)) P(X = k-1)

 BINOmial probabilites for n = K, p = K, store prob. into C
+                              _      _                   _

     Prints a table as above, and in addition, stores P(X=0)
     in the first row of the column, P(X=1) in the second
     row, and so on.  The length of the resulting column is
     always n+1.  The probabilities which are printed out are
     computed as indicated above and stored.  If n is large,
     then some probabilites may be essentially zero.  These
     probabilities are not computed, they are not printed
     out, and zero is stored instead of the exact
     probability.
1
                                      II.14   More statistics
                                                      Page 79

 POISson probabilities for mean K
+                               _

     Prints out a table of Poisson probabilities and cumula-
     tive distribution function.  The mean K must be less
     than or equal to 100.

     Method:  Arithmetic is done in double precision on most
     computers.  P(X=0) = exp(-K).  P(X=j) is found by the
     recursion relationship P(X=j) = KP(X=j-1)/j.  The com-
     putation is stopped when P(X<or=j) is esentially 1.

 TWOSample t [alternate K], [percent confidence K] for data
+                       _                       _
     in C and C
+       _     _

     Let mu1, X1bar, s1, n1 be the population mean, sample
     mean, the sample standard deviation, and sample size for
     the sample in the first column.  Let mu2, X2bar, s2, n2
     be the same for the sample in the second column.  The
     two samples are assumed independent.  The command calcu-
     lates a K percent confidence interval for mu1-mu2; and
     tests the null hypothesis:  mu1=mu2 against the
     alternate specified as follows:

                 K=-1                 mu1 < mu2
                 K= 0                 mu1 not equal to mu2
                 K=+1                 mu1 > mu2


     If the percent confidence is not specified, a 95 percent
     confidence interval is calculated.  If the alternate is
     not specified, Minitab assumes the alternate is "not
     equal".

     This command does not assume the two populations have
     equal variances.  The standard deviation of X1bar-X2bar
     is estimated by

            s = SQRT(((s1-squared)/n1)+((s2-squared)/n2))

     The test is based on the statistic T=(X1bar-X2bar)/s.

     This statistic has approximately a t-distribution with
     degrees of freedom given by


            df=(SQ(VAR1+VAR2))/((SQ(VAR1)/(n1-1))+(SQ(VAR2)/(n2-1)))

     where VAR1=SQ(s1)/n1 and VAR2=SQ(s2)/n2, and SQ(A)
     denotes the square of A.

     The confidence interval goes from

            (X1bar-X2bar) - ts  to  (X1bar-X2bar) + ts
1
 II.14   More statistics
 Page 80

     where t is the value from a t table corresponding to K
     percent confidence and the same degrees of freedom used
     in the test.

     Example:
         SET MALES INTO C1
          90  72  61  66  81  69  59  70
         SET FEMALES INTO C2
         62  85  78  66  80  91  69  77  84
         TWOSAMPLE T C1 C2

     Output:

 -- SET MALES INTO C1
 COLUMN  C1
 COUNT    8

         90.         72.         61.         66.  .  .  .

 -- SET FEMALES INTO C2
 COLUMN  C2
 COUNT    9

         62.         85.         78.         66.  .  .  .

 -- TWOSAMPLE T C1 C2
    C1     N =  8     MEAN =    71.000     ST.DEV. =    10.3
    C2     N =  9     MEAN =    76.889     ST.DEV. =    9.55

    TEST OF MU1 = MU2 VS. MU1 N.E. MU2
    APPROX. DEGREES OF FREEDOM =  15
    T = -1.221
    THE TEST IS SIGNIFICANT AT  0.2410
    CANNOT REJECT AT ALPHA = 0.05

    A 95.00 PERCENT C.I. FOR MU1-MU2 IS: (-16.1725,  4.3947)


     Notes:
     (1) The message THE TEST IS SIGNIFICANT AT  0.2410 says
     that the probability of getting a value of T as extreme
     or more extreme than -1.221 is 0.2410.  This probability
     is also called the attained significance level or
     p-level of the test.

     (2) If the populations have equal variances and the
     sample sizes are small, this test is just slightly
     conservative.

     (3) If the confidence is expressed as a fraction such as
     .95 instead of a percent, it is automatically converted
     to a percent.
1
                                      II.14   More statistics
                                                      Page 81

     (4) The percent confidence should be at least 5% and no
     more than 99.99%.

     (5) Both the alternate and the percent confidence are
     optional arguments.  You can specify neither of them,
     one, or both (in either order).  (Minitab uses the value
     to distinguish the arguments.  For example, 95 cannot be
     an alternate, and 0 cannot be a percent confidence.)

 POOLed t [alternate K], [percent confidence K] for data
+                    _                       _
     in C and C
+       _     _

     Let mu1, X1bar, s1, n1 be the popluation mean, sample
     mean, sample standard deviation and sample size for the
     sample in the first column.  Let X2bar, s2, n2 be the
     same for the sample in the second column.  The two
     samples are assumed independent, and, unlike the
     TWOSAMPLE command, the two populations are assumed to
     have equal variances.  The command calculates a K
     percent confidence interval for mu1-mu2; and tests the
     null hypothesis: mu1=mu2 against the alternative
     specified as in the TWOSAMPLE command.  If the percent
     confidence is not specified, a 95 percent confidence
     interval is calculated.  If the alternate is not
     specified, the alternate is assumed to be "not equal".

     This command assumes the two populations have equal
     variances.  This common variance is estimated by the
     pooled variance

     sp-squared = ((n1-1)(s1-squared) + (n2-1)(s2-squared))/(n1+n2-2)

     The standard deviation of (X1bar - X2bar) is estimated
     by

     s = (sp)(SQRT(1/n1 + 1/n2))

     The test is based on the statistic T = (X1bar - X2bar)/s
     which has a t-distribution with n1+n2-2 degrees of
     freedom.

     The confidence interval goes from

     (X1bar - X2bar) - ts   to   (X1bar - X2bar) + ts

     where t is the value from a t table corresponding to K
     percent confidence and n1+n2-2 degrees of freedom.  The
     output is similar to the output from the TWOSAMPLE
     command.

     The pooled t-test and confidence interval are very
     slightly more powerful than the methods used by the
     TWOSAMPLE command if the variances are equal, and can be
     seriously in error if the variances are not equal.  Thus
     the TWOSAMPLE command should be used in most cases.

1
 II.14   More statistics
 Page 82

 MANN-Whitney [alternate K], [percent confidence K] for data
+                        _                       _
     in C and C.
+       _     _

     Performs a two-sample rank test (often called the
     Mann-Whitney test, also often called the two-sample
     Wilcoxon rank test) for the difference between two
     population medians, and calculates the corresponding
     point and confidence interval estimates.  (The command
     is called MANN-WHITNEY to avoid confusion with the
     one-sample WILCOXON command.)

     The optional arguments are the same as for the TWOSAMPLE
     command.

     The assumtions for the two-sample rank test are that the
     the data are two independent random samples with the
     same shape and variance, from a scale which is at least
     ordinal.  Thus the assumtions are weaker than the pooled
     t-test, which assumes interval data from approximately
     normal populations with the same variance.  The 2-sample
     rank test is slightly less powerful than the POOLED
     t-test if the population is normal; it is considerably
+           __
     more powerful for many other populations, including most
+    ____
     encountered in real situations.  If the populations have
     different shapes or different standard deviations, the
     (unpooled) TWOSAMPLE T command may be more appropriate.

     The assumptions for the two-sample rank confidence
     interval are similar to those for the above test, except
     the measurement scale must be interval (just as it must
     for t intervals).

     The test is carried out as follows.  First, the two
     samples are ranked together, with the smallest
     observation given rank 1, etc.  Then the sum of the
     ranks of the first sample is calculated.  If this is
     small, it indicates the observations from the first
     sample are smaller than those from the second sample,
     etc.  The attained significance level of the test is
     calculated using a normal approximation (with a
     continuity correction factor).  The confidence interval
     is the set of values d for which the test of the null
     hypothesis that eta1-eta2=d is not rejected, at the
     appropriate alpha, where eta is any measure of location
     (such as mean or median).  The method used to calculate
     the confidence interval is very fast, and is described
     in the paper by McKean and Ryan.
1
                                      II.14   More statistics
                                                      Page 83

     Example:  Consider the data used in the example above for the
     TWOSAMPLE command.

     Output:

 -- MANN-WHITNEY ON DATA IN C1 AND C2
    C1     N =   8     MEDIAN =      69.500
    C2     N =   9     MEDIAN =      78.000

    A POINT ESTIMATE FOR ETA1-ETA2 IS     -7.50
    A 95.1 PERCENT C.I. FOR ETA1-ETA2 IS (     -18.1,       4.0)

    W =     60.0
    TEST OF ETA1 = ETA2 VS. ETA1 N.E. ETA2
    THE TEST IS SIGNIFICANT AT 0.2685

    CANNOT REJECT AT ALPHA = 0.05


     References:
     J. W. McKean and T. A. Ryan, Jr.:  An Algorithm for
     Obtaining Confidence Intervals and Point Estimates Based
     on Ranks in the Two Sample Location Problem.
     Transactions on Mathematical Software, June 1977.  pp.
     183-185.

     T. A. Ryan, Jr., B. L. Joiner, B. F. Ryan, Minitab
     Student Handbook, Duxbury Press, 1976.

     M. Hollander and D. A. Wolfe:  Nonparamentric
     Statistical Methods, Wiley, 1973.


 DESCribe  columns C, ..., C
+                  _       _

     Provides descriptive statistics for each of one or more
     columns.  Currently, prints sample mean, sample standard
     deviation, and n for each column.  (Expansion of the
     output from this command is planned.)


 AOVOneway  on data in C, ..., C
+                      _       _

     Does a one-way analysis of variance (AOV), assuming the
     observations for each cell (level) are in different
     columns.  There must be two or more cells.  (If there
     are two cells, AOVONEWAY is equivalent to a two sample
     t-test with a pooled estimate of the variance.) It does
     not require an equal number of observatins in each cell.
     For interpretation of output, see the Minitab Student
     Handbook.
1
 II.14   More statistics
 Page 84

     Example:

         SET MILEAGE FOR BRAND A INTO C1
          15.1  13.0  11.9  14.9  13.2
         SET MILEAGE FOR BRAND B INTO C2
         12.8  13.1  13.0  12.9
         SET MILEAGE FOR BRAND C INTO C3
          16.2  17.0  13.8  14.7
         AOVONEWAY ON C1-C3

     Output from AOVONEWAY command:

 -- AOVONEWAY ON C1-C3

                            LEVEL
                 ALL
                 DATA    C1    C2    C3

              -     1                 1
              -
              -     1                 1
              -
         15.5 +
              -     2     2
              -     1                 1
              -
              -     1                 1
         13.5 +
              -     5     2     3
              -     1           1
              -
              -     1     1

 ANALYSIS OF VARIANCE

 DUE TO        DF         SS     MS=SS/DF     F-RATIO
 FACTOR         2       13.24        6.62        4.85
 ERROR         10       13.65        1.36
 TOTAL         12       26.89


 LEVEL       N          MEAN       ST. DEV.
 C1          5         13.62          1.36
 C2          4         12.95          0.13
 C3          4         15.42          1.44

 POOLED ST. DEV. =        1.17

 INDIVIDUAL 95 PERCENT C. I. FOR LEVEL MEANS
 (BASED ON POOLED STANDARD DEVIATION)
      +---------+---------+---------+---------+---------+---------+
 C1                  I**********I***********I
 C2         I*************I************I
 C3                                  I************I************I
      +---------+---------+---------+---------+---------+---------+
    11.0      12.0      13.0      14.0      15.0      16.0      17.0
1
                                      II.14   More statistics
                                                      Page 85

     Notes:
     (1) Most other statistical computer packages (and the
     Minitab commands ONEWAY and TWOWAY below) require the
     data in a format different from the format used in this
     command.  All obervations are put in one column, and the
     cell identification in another column.  The latter
     format is less natural, perhaps, for novice users, but
     it generalizes to several-way analysis of variance, and
     it works easily for common data set organization.
     (Conversion from one format to another can be done with
     manipulation commands if desired.)

     (2)  The output above is the "full" output, which is
     produced if NOBRIEF (BRIEF CODE 5) is in effect.  The
     actions of the BRIEF command are as follows:

     BRIEF 1 - Analysis of variance table only.
     BRIEF 2 - As above, plus table of level means and stan-
               dard deviations, and pooled standard deviation.
     BRIEF 3 - Same as BRIEF 2.
     BRIEF 4 - As above, plus display of confidence intervals
               for level means.
     BRIEF 5 - As above, plus display of data frequencies.
               Same as NOBRIEF.


 ONEWay analysis of variance, data in C, subscripts in C
+                                     _                _

     Similar to AOVONEWAY, except all data are in one column,
     and a second column gives the subscript (cell identi-
     fication).

      Example:  The data for the example for AOVONEWAY above
      could be analyzed as follows:

         READ MILEAGE INTO C1, CODE FOR BRAND INTO C2
         15.1  1
         13.0  1
         11.9  1
         14.9  1
         13.2  1
         12.8  2
         13.1  2
         13.0  2
         12.9  2
         16.2  3
         17.0  3
         13.8  3
         14.7  3
         ONEWAY AOV ON DATA IN C1, SUBSCRIPTS IN C2

     The output from this analysis would be essentially the
     same as that for the AOVONEWAY command.
1
 II.14   More statistics
 Page 86

     Notes:
     (1)  The subscripts (levels) must be integers between
     -999 and 999 (not necessarily consecutive).

     (2)  At most 60 levels of the factor (distinct values of
     the subscript) are allowed.

     (3)  The data can appear in any order (i.e. the
     subscripts need not be in order).

     (4)  The effect of the BRIEF command is the same as it
     is for the AOVONEWAY command.


 TWOWay analysis of variance, data in C, subscripts in
+                                     _
     C and C
+    _     _

     Two way analysis of variance for balanced data (equal
     number of observations (one or more) in each cell).

      Example:  The data in the following program are from
      page 570 of Neter and Wasserman, Applied Linear Models:

         READ DATA IN C1, LEVEL OF A IN C2, LEVEL OF B IN C3
         47 2 1
         43 2 1
         46 2 2
         40 2 2
         62 3 1
         68 3 1
         67 3 2
         71 3 2
         41 4 1
         39 4 1
         42 4 2
         46 4 2
         TWOWAY AOV DATA IN C1, SUBSCRIPTS IN C2 C3
1
                                      II.14   More statistics
                                                      Page 87

     Output from TWOWAY command:

 -- TWOWAY AOV DATA IN C1, SUBSCRIPTS IN C2 C3

 ANALYSIS OF VARIANCE

 DUE TO          DF         SS     MS=SS/DF
 C2              2      1544.0       772.0
 C3              1        12.0        12.0
 C2   * C3       2        24.0        12.0
 ERROR           6        62.0        10.3
 TOTAL          11      1642.0

 CELL MEANS
 ROWS ARE LEVELS OF C2     COLS ARE LEVELS OF C3
                                    ROW
                1          2      MEANS
     2      45.00      43.00      44.00
     3      65.00      69.00      67.00
     4      40.00      44.00      42.00
 COL.
 MEANS      50.00      52.00      51.00

 CELL STANDARD DEVIATIONS

                1          2
     2       2.83       4.24
     3       4.24       2.83
     4       1.41       2.83

 POOLED ST. DEV. =        3.21

 INDIVIDUAL 95 PERCENT C. I. FOR LEVEL MEANS OF C2
 (BASED ON POOLED STANDARD DEVIATION)
      +---------+---------+---------+---------+---------+---------+
  2          I*****I****I
  3                                           I*****I****I
  4       I*****I*****I
      +---------+---------+---------+---------+---------+---------+
    35.0      42.0      49.0      56.0      63.0      70.0      77.0


 INDIVIDUAL 95 PERCENT C. I. FOR LEVEL MEANS OF C3
 (BASED ON POOLED STANDARD DEVIATION)
      +---------+---------+---------+---------+---------+---------+
  1       I***************I***************I
  2                 I***************I***************I
      +---------+---------+---------+---------+---------+---------+
    46.0      48.0      50.0      52.0      54.0      56.0      58.0
1
 II.14   More statistics
 Page 88

     Notes:
     (1)  Notes (1), (2), and (3) concerning ONEWAY, above,
     apply also for TWOWAY.

     (2)  The output above is the "full" output.  The action
     of the BRIEF command is as follows:

     BRIEF 1 - Analysis of variance table only.
     BRIEF 2 - Same as BRIEF 1 above.  (BRIEF with no argu-
               ments is the same as BRIEF 2.)
     BRIEF 3 - As above, plus cell means (or observations) and
               pooled estimate of standard deviation.
     BRIEF 4 - As above, plus display of confidence intervals
               for level means.
     BRIEF 5 - As above, plus cell standard deviations.

     (3)  If there is only one observation per cell, the
     observations are printed instead of cell means, and the
     cell standard deviations are not printed.

     (4)  See the Minitab Student Handbook for interpretation
     of the output.


 CORRelation coefficient between data in columns C and C
+                                                _     _

     Calculates the usual (Pearson product moment) correla-
     tion between the two columns, using the formula

         SUM((X-Xbar)(Y-Ybar))/((N-1)(s1)(s2))

     where Xbar, s1 are the sample mean and standard devia-
     tion for the first sample, and Ybar and s2 are for the
     second sample.

     Example:    READ INTO C1, C2
                 1 2
                 2 3
                 1 3
                 2 4
                 CORRELATION BETWEEN C1 and C2

     Output from CORRELATION command:

     -- CORRELATION BETWEEN C1 AND C2
        CORRELATION OF C1    AND C2   =   0.707

     Notes:
     (1)  Spearman's rho (rank correlation coefficient) may
     be calculated by ranking both columns of data (both var-
     iables) and then using the CORRELATION command on the
     columns of ranks.
1
                                      II.14   More statistics
                                                      Page 89

 CORRelation coefficient between data in columns C,...,C
+                                                _     _

    If more than two columns are specified in the CORRELATION
    command, then the correlation is calculated between every
    pair of columns.  The lower triangle of the resulting
    correlation matrix is printed (in blocks if there is
    insufficient room to fit across a page).

    Notes:
    (1)  If some data are missing, the correlations between
    each pair of columns is calculated using all rows which
    do not have either value missing.  That is, the
    correlation matrix is calculated using "pairwise
    deletion" of missing values.  This method is the best for
    each individual correlation, but the correlation matrix
    as a whole may not be well behaved (for example, it may
    not be positive definite).

     Output from CORRELATION command:

     -- CORRELATION COEF BETWEEN C1-C3

                C1      C2
        C2      0.408
        C3      0.448   0.008

 CORRelation coef. between C,...,C, store into M
+                          _     _             _


     Prints and stores the correlation coefficients.


 CHISquare test on table stored in columns C,...,C
+                                          _     _

     Performs a chi-square test for association (non-indepen-
     dence) on a table which has been stored in the
     worksheet.

     Example:  Suppose we have the following 2 by 3 table:

                      * Democrat * Republican * Other *
               ---------------------------------------
                male  *    28    *     18     *   4   *
               ---------------------------------------
               female *    22    *     27     *   1   *
               ---------------------------------------

     and we want to see if there is a relationship between
     sex and political preference.  Use the following
     instructions:

                READ THE TABLE INTO C1, C2, C3
                       28    18    4
                       22    27    1
                CHISQUARE ANALYSIS ON TABLE IN C1, C2, C3
1
 II.14   More statistics
 Page 90

     Output from the CHISQUARE command;

 -- CHISQUARE ANALYSIS ON TABLE IN C1, C2, C3

 EXPECTED FREQUENCIES ARE PRINTED BELOW OBSERVED FREQUENCIES

        I  C1   I  C2   I  C3   I  TOTALS
 -------I-------I-------I-------I-------
     1  I    28 I    18 I     4 I     50
        I   25.0I   22.5I    2.5I
 -------I-------I-------I-------I-------
     2  I    22 I    27 I     1 I     50
        I   25.0I   22.5I    2.5I
 -------I-------I-------I-------I-------
 TOTALS I    50 I    45 I     5 I    100

 TOTAL CHI SQUARE =

          0.36 +  0.90 +  0.90 +
          0.36 +  0.90 +  0.90 +
                  =   4.32

 DEGREES OF FREEDOM = ( 2-1) X ( 3-1) =   2

 NOTE:  2 CELLS WITH EXPECTED FREQUENCIES LESS THAN 5


     The expected frequencies, printed below the observed
     frequencies, are calculated as follows.  The expected
     frequency for cell 1, 2 is ((total of row 1)(total of
     column 2))/(total number of observations)= (50)(45)/100=
     22.5.  The total chi square is calculated by:

          SUM(SQ(Oij-Eij)/Eij)

     where Oij= observed frequency in cell i,j, Eij= expected
     frequency for cell i,j, and the SUM is over all cells.
     In the above output, the six numbers below the table
     match up to the six cells in the table.  Thus, for
     example, the first number, .36= (SQ(O11-E11))/E11.  This
     allows you to see which cells contribute most to the
     total chi square.
1
                                      II.14   More statistics
                                                      Page 91

     Notes:
     (1) A count is given of the number of cells which have
     expected frequencies less than 5.  In this example,
     there were 2 such cells.  Some statisticians hesitate to
     use the chi-square test if more than 20% of the cells
     have expected frequencies below 5, especially if these
     cells give a large contribution to the total chi-square
     value.  If, in addition, some cells have expected fre-
     quencies less than 1, the total chi-square is not
     printed, since most statisticians would not use the chi
     square test in this case.  Usually if some cells have
     small expected frequencies, combining or omitting row
     and/or column categories is suggested.

     (2) The table may have at most 13 columns, due to the
     width of the printed line (120 characters).  Some
     printers may allow even fewer columns.  The number of
     rows is limited by space available for storage.

     (3) If the table is to be formed from the raw data, see
     the command CONTINGENCY.


 CONTingency table analysis, row classification in C, column
+                                                  _
     classification in C
+                      _

     Constructs a contingency table from the data and does a
     chi-square test.

     Example:
         READ ROW CLASS INTO C1, COLUMN CLASS INTO C2
            10  2
            15  1
            15  3
            15  3
            10  2
            10  2
            15  3
            15  3
            15  1
            10  3
            15  2
         CONTINGENCY TABLE ANALYSIS FOR C1 AND C2

     The following contingency table is formed

                *     1  *     2  *     3  *
            --------------------------------
             10 *     0  *     3  *     1  *
            --------------------------------
             15 *     2  *     1  *     4  *
            --------------------------------
1
 II.14   More statistics
 Page 92

     The chi-square test and the output are exactly the same
     as in the CHISQUARE command.

     Classifications (codes) are normally integers.  (If they
     are not they are rounded to the nearest integer.)  The
     codes do not need to be consecutive.  However, the
     difference between the smallest and largest row
     classification code is limited by storage space
     available in the computer.

     In addition to this limitation for calculating, there is
     a limit to how many columns can be printed, as in the
     CHISQUARE command.


 TABLe  row classification in C, column classification in C
+                             _                           _

     Forms a table from the row and column classification
     exactly the same as in the command CONTINGENCY, but does
     not calculate expected frequencies or do a chi-square
     analysis.

 WALSh averages of values in C, put into C
+                            _           _

     This command is useful for non-parametric tests and
     confidence intervals.  It calculates the averages for
     all possible paris of data values including each value
     with itself.  That is, it calculates (Xi+Xj)/2 for i <
     or = j

     Example:  WALSH AVERAGES OF C1, PUT INTO C2

              C1         C2
               1          1        = (1+1)/2
               2  -->     1.5      = (1+2)/2
               3          2        = (2+2)/2
                          2        = (3+2)/2
                          2.5      = (3+2)/2
                          3        = (3+3)/2

     If you have n data values, then there will be n(n+1)/2
     Walsh averages.

     References: M. Hollander and D. A. Wolfe:  Nonparametric
     Statistical Methods.  pp. 31-8 (Wiley 1973)

     G. Noether:  Statistics - A Non-Parametric Approach;
     Houghton-Mifflin 1971.
1
                                      II.14   More statistics
                                                      Page 93

 WALSh averages of C, put into C, indices into C and C
+                  _           _               _     _

     Calculates (xi+Xj)/2, and stores this average in the
     first storage column, i in the second, and j in the
     third.  Useful for certain modifications of the Wilcoxon
     signed-rank test and the corresponding confidence
     interval.

 DIFFerences (all possible) between values in C and C, put
+                                             _     _
     into C
+         _

     This command is useful for non-parametric tests and
     confidence intervals.  It calculates all differences
     X-Y, for each value X from the first named column, and
     each value Y from the second named column.

     Example:  DIFFERENCES BETWEEN C1, C2, PUT INTO C3
          C1     C2         C3
           1      4         -3  = 1-4
           2      5   -->   -4  = 1-5
           3                -2  = 2-4
                            -3  = 2-5
                            -1  = 3-4
                            -2  = 3-5

     If there are n values in the first named column, and m
     in the second, then there will be nm differences.

     Reference: M. Hollander and D. A. Wolfe:  Nonparametric
     Statistical Methods.  pp. 78-82 (Wiley 1973).

 DIFFerences (all possible) between C and C, put into C,
+                                   _     _           _
     indices into C and C
+                 _     _

     Puts Xi-Yj in the first storage column, i in the second,
     and j in the third.  Useful for modifications of the
     Mann-Whitney-Wilcoxon test and confidence interval.
1
 II.15   Time Series
 Page 94

 15. TIME SERIES --------------------------------------------


     The time series commands were added to Minitab in
     Release 78.1.  They are not described in the Handbook.
     They are still experimental, and may be changed slightly
     in the future.  For a discussion of the statistical
     methods, see Time Series Analysis by Box and Jenkins
     (Holden Day, 1976).


 ACF  [with up to K lags] for series in C [put in C]
+                 _                     _         _

      Computes autocorrelations of the time series stored in
      the column and prints a graph.  If the number of lags
      is not specified, sqrt(n) + 10 are computed, where n =
      length of the series.

      Example:  The following is an ACF of the sunspot data
+     _______
      from Box and Jenkins (1976).  The data are the number
      of sunspots observed in 100 consecutive years.

 -- ACF C1

    ACF OF C1
           -1.0 -0.8 -0.6 -0.4 -0.2  0.0  0.2  0.4  0.6  0.8  1.0
             +----+----+----+----+----+----+----+----+----+----+

   1   0.806                          XXXXXXXXXXXXXXXXXXXXX
   2   0.428                          XXXXXXXXXXXX
   3   0.070                          XXX
   4  -0.169                      XXXXX
   5  -0.266                   XXXXXXXX
   6  -0.212                     XXXXXX
   7  -0.044                         XX
   8   0.164                          XXXXX
   9   0.330                          XXXXXXXXX
  10   0.410                          XXXXXXXXXXX
  11   0.394                          XXXXXXXXXXX
  12   0.288                          XXXXXXXX
  13   0.143                          XXXXX
  14   0.020                          X
  15  -0.055                         XX
  16  -0.102                       XXXX
  17  -0.145                      XXXXX
  18  -0.177                      XXXXX
  19  -0.168                      XXXXX
  20  -0.104                       XXXX

1
                                          II.15   Time Series
                                                      Page 95

 PACF [up to K lags] for series in C [put in C]
+            _                     _         _

     Computes partial autocorrelations and prints a graph.
     The output is similar to that for ACF, above.


 CCF  [with up to K lags] between series in C and C
+                 _                         _     _

     Computes and graphs cross correlations between the two
     time series.  Presently, CCF does not store cross
     correlations.  Default lags from -(sqrt(n)+10) to
     (sqrt(n)+10).


 DIFFerences [of lag K] for data in C, put in C
+                    _              _         _

     Example  DIFFERENCE 2 FOR C1, STORE IN C2

          C1                  C2
           1                   *
           3                   *
           8       -->         7
          12                   9
           7                  -1

     Note that row 3 of C2 contains 8-1, row 4 contains 12-3,
     row 5 contains 7-8.

     In general, if C1 contains Z(1), Z(2),...,Z(n), then
     DIFF K C1, C2 puts * into rows 1 thru K of C2, and puts
+         _                                _
     Z(i)-Z(i-k) into row i, K+1<i<n.  If K is omitted, K=1
+                            _  _ _       _             _
     is used.  K>1 is often a seasonal difference.
+              _


 LAG  [K] data in C, put in C
+      _          _         _

     Puts Z(i-K) into row i, K+1<i<n, and puts * in rows
+                               _ _
     1,...,K.  If K is omitted, K=1 is used.
+                 _             _

     Note that Z(0) is not defined.  Thus in row K, a * is
+                                                _
     stored in place of Z(K-K) = Z(0).  Similarly a * is
     stored in every row up to the K-th.  The total length of
     the outut column is the same as the length of the input
     column.

     Example:
+    _______

     LAG 3 IN C1, PUT IN C2

         C1                C2
+        __                __
          5                 *
          3                 *
         18                 *
          7                 5
         10                 3
          2                18
1
 II.15   Time Series
 Page 96

 ARIMA
+_____

     The ARIMA command fits non-seasonal and seasonal models
     to a time series.  The input to the command consists of
     a time series stored in a column, and information about
     the model to be fitted.  In addition to the printed
     output, results may be stored in the worksheet for
     further analysis.

     The concepts and notation used in this command follow
     Box and Jenkins (1976).  For a more elementary
     introduction to the Box-Jenkins methodology, see the
     texts by Miller and Wichern (1977) and by Nelson (1973).

     This command is based on the fitting routine in the
     TSERIES package written by Prof. William Q. Meeker, Jr.
     of Iowa State University.  Prof. Meeker also helped with
     the adaptation of his routine to Minitab.

     The simplest form of the ARIMA command is

 ARIMa p=K, d=K, q=K for data in C
+        _    _    _             _

     where p is the order of the AR (autoregressive) part, d
     is the number of differences to be applied, and q is the
     order of the MA (moving average) part.

     That is, the following ARIMA (p,d,q) model is fit to the
     series Z(1), Z(2), ..., Z(n)

      W(t) = o(1)W(t-1)+...+o(p)W(t-p)
+            /              /
             +O(0)+a(t)-O(1)a(t-1)-...-O(q)a(t-q)
+             -         -              -

     where W(t) is Z(t) differenced d times and a(t) is white
     noise.  If d=0, the constant term, O(0), is
+                                       -
     automatically included in the model, unless the
     subcommand NOCONSTANT is used.  If d>0, the constant is
     not fit, unless you use the subcommand CONSTANT.

     Example.  To fit a moving average model of order 1 to
+    _______
     data in C5, use the command

     ARIMA  0  0  1, DATA IN C5

1
                                          II.15   Time Series
                                                      Page 97

     Seasonal Models.
+    _______________
     To fit a seasonal model with period S, use the command:

 ARIMa p=K d=K q=K, P=K D=K Q=K, S=K, data in C
+        _   _   _    _   _   _    _          _

     This fits the multiplicative seasonal model
     (p,d,q)x(P,D,Q)S.  S is the seasonality (period), P is
     the order of the seasonal AR part, D is the number of
     seasonal differences, and Q is the order of the seasonal
     MA part.



     Storage.
+    _______

     Optional storage is as follows;  If one column is
     specified, the residuals are stored; if two storage
     columns are specified, the predicted values are stored
     as well.  A third column can be specified for storage of
     estimated parameters.

 ARIMa p=K d=K q=K, data in C [put res in C [put pred in C
+        _   _   _          _             _              _
                                    [put est param in C]]]
+                                                     _


 ARIMa p=K d=K q=K, P=K D=K Q=K, S=K, data in C
+        _   _   _    _   _   _    _          _
     [put res in C [put pred in C [put est parm in C]]]
+                _              _                  _

     Optional Subcommands.
+    ____________________

     The action of the ARIMA command can be changed by the
     subcommands below.  To use a subcommand, put a semicolon
     at the end of the ARIMA command line (to tell Minitab
     that subcommands follow).  Then end each subcommand in a
     semicolon except the last.  End the last subcommand with
     a period.

     CONStant

     Tells Minitab to include the constant term O(0) in the
+                                               -
     model.  If d=0 (and D=0) this is the default.

     NOCOnstant

     Tells Minitab not to include the constant term O(0) in
+                                                   -
     the model.  If d>0 (or D>0) this is the default.

1
 II.15   Time Series
 Page 98

     STARting values in C
+                       _

     Starting values (initial values) for the parameters must
     be entered into the column prior to using ARIMA; they
     are entered in the same order as they appear in the
     model, except for the constant term.  If a constant term
     O(0) is included in the model, the starting value for
+    -
     O(0) is optional; if it is used, put it as the last
+    -
     value in the start column.

     If you do not use START, Minitab uses 0.1 for all o's
+                                                      /
     and O's (except O(0)); this usually works well.
+        -           -

     FOREcast [forecast origin = K] up to K leads ahead
+                                _        _
          [store forecasts in C [confidence limits in C, C]
+                             _                       _  _

     If the forecast origin is not specified, the origin is
     the end of the series (i.e., the forecasts are for the
     future).  The storage of forecasts and confidence limits
     allows a variety of plots.


 Examples of Commands
+____________________

     Example 1:  To fit a first order autoregressive model to
+    _________
     a series stored in column c1, use the command:

     ARIMA 1 0 0 C1


     Example 2:  To fit an IMA(1,2) with a trend constant,
+    _________
     use:

     ARIMA 0 1 2 C1;
     CONSTANT.

     Fits the model W(t) = O(0)+a(t)-O(1)a(t-1)-O(2)a(t-2),
+                          -         -          -
     where W(t)=Z(t)-Z(t-1), and the Z(t) are in C1.


     Example 3:  The commands:
+    _________

     SET INTO C10
      .1 .2  .15 25
     ARIMA 2 0 1 C1;
     START C10.

     fit the model
     Z(t) = o(1)Z(t-1)+o(2)Z(t-2)+O(0)+a(t)-O(1)a(t-1) using
+           /          /          -         -
     starting values o(1)=0.1, o(2)=0.2, O(1)=0.15, O(0)=25.
+                    /         /         -          -

1
                                          II.15   Time Series
                                                      Page 99

     Example 4:  The commands:
+    _________

     ARIMA (1 0 0)  (1 1 0) 12 C1;
         CONSTANT;
         FORECAST 10 PERIODS, PUT IN C2.
     JOIN C2 TO THE BOTTOM OF C1, PUT IN C10

     fit a seasonal AR model with period 12 to the data in
     C1.  A trend constant is included in the model.  This
     model is used to predict the next 10 observations in the
     future.  The ARIMA command is followed by a JOIN command
     which appends the forecasts to the data, so the
     resulting column can be used for plots.  (The
     subcommands are indented for clarity, to distinguish
     them from main commands; they can start anywhere on the
     line.  When several subcommands are used, they can be
     put in any order.


 Examples of Output.
+__________________

     Example 1:  Fit of a regular AR(1) model.  (This is the
+    _________
     "full" output, which is given if the NOBRIEF command is
     in effect.) The table of estimates at each iteration
     includes the backforecasts in the value of SSE.

 -- ARIMA 1 0 0 C1

 ESTIMATES AT EACH ITERATION
 ITERATION        SSE     PARAMETERS
     0       32936248.    0.100 4226.449
     1       25948757.    0.250 3520.515
     2       20664917.    0.400 2817.121
     3       17085500.    0.550 2114.244
     4       15211916.    0.700 1410.323
     5       14908307.    0.780 1034.970
     6       14903698.    0.789  998.646
     7       14903519.    0.790  993.787
     8       14903460.    0.790  992.944
 RELATIVE CHANGE IN EACH ESTIMATE LESS THAN  0.0010

 FINAL ESTIMATES OF PARAMETERS
 NUMBER     TYPE    ESTIMATE     ST. DEV.  T-RATIO
      1    AR  1      0.7899      0.0568     13.92
      2   CONSTANT    992.94       32.33     30.71
          MEAN        4725.0       153.9

 RESIDUALS.    SS =    14774480.  (BACKFORECASTS EXCLUDED)
               DF =  118  MS =     125207.
 NO. OF OBS.   120

 CORRELATION MATRIX OF THE ESTIMATED PARAMETERS
          1
  2   0.045
1
 II.15   Time Series
 Page 100

     Example 2:  Seasonal Moving Average.  (The output shown
+    _________
     here is the 'full' output, which is given if the NOBRIEF
     command is in effect.)

 -- ARIMA (0 0 1) (0 1 1) 12 C1

 ESTIMATES AT EACH ITERATION
 ITERATION        SSE     PARAMETERS
     0         552.638    0.100    0.100
     1         448.333   -0.050    0.137
     2         376.421   -0.200    0.171
     3         327.357   -0.350    0.204
     4         297.629   -0.500    0.241
     5         289.615   -0.650    0.301
     6         288.236   -0.609    0.333
     7         288.062   -0.624    0.350
     8         288.018   -0.619    0.357
     9         288.007   -0.622    0.362
    10         288.004   -0.621    0.364
    11         288.004   -0.622    0.365
    12         288.003   -0.621    0.366
    13         288.003   -0.622    0.366
 RELATIVE CHANGE IN EACH ESTIMATE LESS THAN  0.0010

 FINAL ESTIMATES OF PARAMETERS
 NUMBER     TYPE    ESTIMATE     ST. DEV.  T-RATIO
      1    MA  1     -0.6215      0.0624     -9.97
      2   SMA 12      0.3661      0.0818      4.48

 DIFFERENCING. 0 REGULAR    1 SEASONAL DIFFERENCES OF ORDER 12
 RESIDUALS.    SS =      283.708  (BACKFORECASTS EXCLUDED)
               DF =  164  MS =       1.730
 NO. OF OBS.   ORIGINAL SERIES  178    AFTER DIFFERENCING  166

 CORRELATION MATRIX OF THE ESTIMATED PARAMETERS
          1
  2  -0.176

1
                                          II.15   Time Series
                                                     Page 101

 Effect of the BRIEF command.
+___________________________

     The BRIEF command controls the amount of output produced
     by the ARIMA command as follows:

     BRIEF 1 - The output contains the table of final
               estimates, differencing information, residual
               sum of squares, and number of observations.

     BRIEF 2 - Same as BRIEF 1.

     BRIEF 3 - Above plus table of estimates at each
               iteration.  In addition, if the backforecasts
               are not dying out rapidly, the backforecasts
               are printed.

     BRIEF 4 - Same as BRIEF 3.

     BRIEF 5 - Above plus correlation matrix of the estimated
               parameters.

     BRIEF 6 - Above plus the backforecasts are always
               printed out.

     BRIEF with no arguments is equivalent to BRIEF 2.
     NOBRIEF is equivalent to BRIEF 5.


 Method.
+______

     The computations follow, for the most part, the outline
     given by Box and Jenkins (1976).  The nonlinear least
     squares algorithm follows Marquart (1963).  The
     algorithm has been modified to limit the maximum step
     size that can be taken at each iteration; this helps
     insure stability.

     Most calculations are done in single precision.  For
     crutial computations, double precision is used on most
     computers.  Checks with reasonably behaved data shown
     roundoff error to be smaller than the error due to the
     approximate nature of the iterative least squares
     algorithm.

     Back forecasts are computed at each function evaluation.
     A maximum of 100-M back forecasts are calculated, where
     M is the largest model lag.  If the back forecasts do
     not die out in 100-M steps on the last iteration, a
     warning message is printed.
1
 II.15   Time Series
 Page 102


 References.
+__________

     G. E. P. Box and G. M. Jenkins:  Time Series Analysis,
         Revised Edition, Holden Day, 1976.

     D. W. Marquardt:  An algorithm for least squares
         estimation of nonlinear parameters.  Jour. Soc. Ind.
         Appl. Math. 11, pp431-441, 1963.

     W. Q. Meeker, Jr.:  TSERIES - A user-oriented computer
         program for identifying, fitting, and forecasting
         ARIMA time series models.  ASA 1977 Proceedings of
         the Statistical Computing Section.

     W. Q. Meeker, Jr.:  TSERIES User's Manual.  Statistical
         Laboratory, Iowa State U., 1977.

     R. B. Miller and D. W. Wichern:  Intermediate Business
         Statistics.  Holt, Rinehart and Winston, 1977.

     C. R. Nelson:  Applied Time Series Analysis.
         Holden-Day, Inc., 1973.

1
                                        II.16   Miscellaneous
                                                     Page 103

 16. MISCELLANEOUS -----------------------------------------

 STOP

     Tells Minitab that you are finished with it.

 NOTE (comments may be put here)

     This command does not cause the computer to do anything.
     The line is just printed out.  It is useful for
     annotating your program.  You may use as many NOTE lines
     as you wish.

 ERASe  columns C, C, ..., C
+               _  _       _

     If you try to store too many numbers in the worksheet,
     Minitab prints the error message:

     * INSUFFICIENT STORAGE SPACE FOR WORKSHEET OR SCRATCH AREA
     * ERASE UNNECESSARY COLUMNS

     Note that even though the usual size of the worksheet
     (on most computers) is 200 rows by 50 columns, it may
     not be possible to fill all of the (200)(50)=10,000
     spaces simultaneously.  You can often avoid the problem
     of storing too many values by erasing columns you no
     longer need.

 ERASe E, ..., E
+      _       _

     Any combination of columns, stored constants, and
     matrices may be erased.

 RESTart

     Allows you to start over again.  It erases the work-
     sheet, sets all "error counters" to 0, and cancels any
     controls in effect, such as BRIEF, SCAN, and NOCONSTANT.
     This command is useful if you want to run 2 (or more)
     separate programs in one batch run.  If you put a
     RESTART command in between the programs, then, e.g., a
     fatal error in the first program will not affect the
     second program.  This command is also useful in
     interactive use if you want to "start fresh" on a new
     problem.

 NEWPage

     If the output of Minitab is being printed on a "line
     printer" this command starts the output of the next
     command on a new page.  Unlike all other Minitab
     commands, the NEWPAGE command is not "echo printed" on
     the output.  This command is useful in preparing output
     in a form that can be used directly in reports, etc.
1
 II.16   Miscellaneous
 Page 104

 REWind unit K
+            _

     See Section II.3

 SAVE  a copy of the worksheet

     Not available on all computers.

     This command allows you to save a copy of the worksheet
     (and all "bookkeeping" information that Minitab needs to
     operate).  This command writes on unit 16 (the unit
     number may vary at some installations).  The copy is
     produced as card images, and can be stored on tape, disk
     files (such as the Penn State BAT files) or cards by use
     of the appropriate job control language (JCL) state-
     ments.  The exact use of this command varies on
     different computers.  It is most useful on an
     interactive system.  (The status of flags, such as
     BRIEF, NOCONSTANT, etc., is not saved.)

     The contents of the worksheet are not affected by this
     command.


 *SAVE copy of the worksheet in file F
+                                    _
 * (not yet implemented)


 RETRieve stored copy of the worksheet

     Following execution of this command, the worksheet
     contains exactly the same numbers as it did when the
     command SAVE was used to store the worksheet.  This
     command reads from unit 15 (at Penn State).  As in SAVE,
     the exact use of this command varies from computer to
     computer.


 *RETRieve stored copy of the worksheet F
+                                       _
 * (not yet implemented)



 DUMP  system information

 DUMP first K elements of worksheet array and system info.
+           _

     This command is designed to be used by the system
     designers for checking and "debugging" the Minitab
     system.
1
                                        II.16   Miscellaneous
                                                     Page 105

     The following 3 commands provide a simple looping
     capability.  They are useful for simulations and for
     making several copies of an output.  Below, we give a
     slightly more advanced example of their use.


 STORe  the following instructions

 END  of storing instructions

 EXEcute  stored instructions [K times]
+                              _

     If the K is omitted, it is assumed to be 1.
+           _

     Example:  Suppose you have data for 12 eastern states in
     C1-C4.  C1 contains integer codes for each state (e.g.,
     1=N.Y., 2=N.J., 3=Conn., etc.).  The following commands
     would do a separate regression and residual plot for the
     data from each state.

     STORE
     CHOOSE  K1 IN C1 C2-C4, PUT IN C11-C14
     PRINT K1
     REGRESS C12 ON 2 PRED. C13-C14, PUT IN C20 C21
     PLOT RES IN C20 VS PRED IN C21
     ADD 1 TO K1, PUT IN K1
     END
     DEFINE 1 INTO K1
     EXEC STORED INSTRUCTIONS 12 TIMES

1
 II.17   Control
 Page 106

 17. CONTROL -----------------------------------------------

     The following control commands tell Minitab how to do
     its work.  That is, they set 'flags' which control the
     effect of commands which follow.  They remain in effect
     for all following commands until they are over-ridden.
     The "default" flags--the ones in effect if no control
     commands are used--may differ at various installations.
     The default values described here are those in effect at
     Penn State.

 NOPRint

     Suppresses printing of data.  Minitab automatically
     prints the first 4 rows of data which have been read by
     the READ, SET, FREAD, FSET, and TAPEREAD commands.  It
     also automatically prints data generated by the random
     data generators.  This printing of data can be
     suppressed by using the NOPRint command.  It remains in
     effect until cancelled by the command PRINT with no
     arguments.

 PRINt

     The PRINT command with no arguments restores automatic
     printing of the first 4 lines of data read by READ, SET,
     FREAD, FSET, TAPEREAD, and the data produced by the
     random data generators.

 WIDTh  of plots = K spaces
+                  _

     The width of plots is normally 50 spaces.  This command
     allows the width to be changed to a width between 30 and
     100 spaces.  The width, K, should be a multiple of 10.
+                            _
     If the width is changed, the height is also changed
     automatically, to approximately half the number of lines
     of the width.  If you want to specify the height as well
     as the width, use the version of the WIDTH  command
     below.

     Notes:
     (1) The plot is actually one space wider than specified.
     Most printers print 10 spaces to the inch (some are 12).
     In addition to the width of the plot, allow 2 spaces for
     the vertical axis and 5 or more spaces for the labels.

     (2) If, due to rounding of the scales, the top 5 lines
     of the plot have no data points, they are not printed
     out.  This results in a plot which is shorter than
     indicated in the description.
1
                                              II.17   Control
                                                     Page 107

     (3) A width of 50 fits nicely on a standard sheet of
     paper.  Smaller plots are useful for smaller illustra-
     tions, especially on small data sets.  They are faster,
     and are cheaper.  Large plots, such as WIDTH 100, have
     considerably better resolution, especially on large data
     sets.

 WIDTh  of plots K spaces, height K lines
+                _                _

     Similar to the above, except the height can be separate-
     ly controlled.  The height should be a multiple of 5,
     from 15 to 400 lines.  (A line is almost twice as tall
     as a space is wide.) The actual height may be less than
     specified, as indicated in note (2) for WIDTH, above.

 OUTPUT width is K
+                _

     K is the maximum number of spaces for your output.  It
+    _
     can be any number between 70 and 132.


 DIMEnsion the worksheet to K rows
+                           _

     Normally Minitab has 200 rows.  The number of rows can
     be changed to any value from 1 to the Maximum Storage
     (This is system dependent, and is printed at the bottom
     of your output).

     Notes:
     (1) The number of columns is fixed at 50 at most
     instalations, and cannot be changed (except by changing
     the Minitab system itself).
1
 II.17   Control
 Page 108

     (2) The worksheet is actually stored in a compact way in
     the computer.  It may not be possible to fill up all the
     columns at the same time.  The number of spaces avail-
     able to store the worksheet and scratch area is called
     the Maximum Storage and appears at the bottom of the
     output.  Typically, there are 5,000 spaces available.
     Thus we could put 500 numbers in 10 columns or 200
     numbers in 25 columns, etc.  (Also see Sections I.8 and
     I.9.)

     (3) The DIMENSION command must be used before a READ or
     SET command if more rows are to be read than the current
     dimension.  (Most other commands will automatically re-
     dimension the worksheet if necessary.  The new dimension
     will be a multiple of 100.)

     (4) The number of rows can be set to a much larger di-
     mension than necessary.  The only disadvantage is a
     slight increase in computing time.


 SCAN  the first K spaces on input lines
+                _

     This is useful if you want to read only part of the
     input lines.  The most common case is punched cards
     which have Mintiab commands or data in the first 72
     spaces and sequence numbers (identification numbers) in
     spaces 73-80.  In such a case you want Minitab to use
     only the first 72 spaces, so use the command SCAN 72.
     The SCAN command applies to commands and data lines
     which follow (except data lines for FREAD and FSET).

     Note:
     (1) SCAN does apply to the format line(s) following the
     formatted input and output commands.  (However, if the
     format specification is continued onto a second line,
     and if K is not divisible by 4, then the last 3 spaces
     scanned on the second format line should be left blank).
1
                                              II.17   Control
                                                     Page 109

 BRIEf  [print code K]
+                   _
+                   _
 NOBRief

     The BRIEF and NOBRIEF commands are discussed fully in
     Section II.14 Regression, and in Section II.15 in the
     discussion of the commands AOVONEWAY, ONEWAY AOV, and
     TWOWAY AOV.


 TSHAre
 BATCh

     TSHARE makes Minitab suitable for interactive (time-
     shared) use, BATCH makes it suitable for batch use.
     TSHARE makes errors which are "fatal" in batch mode be-
     come "command skipped" errors in interactive mode,
     controls the "echo printing" of commands, etc.  (These
     commands do not cause the program to be interactive or
     batch; rather they make the program's actions suitable
     for the mode it is operating in.)  (This selection may
     be done automatically by some computers.)


 INUNit  K
+        _

     Tells Minitab to do all reading from unit K.  It remains
+                                              _
     in effect until another INUNIT command is read, or an
     "end of file" is encountered (if reading from a disk
     file or tape).


 OUTUnit K
+        _

     Directs all printing to unit K (until another OUTUNIT
+                                 _
     command is encountered).
1
 III    Index
 Page 110

 A format, II.3, see CONVERT (II.9)
 ABSOLUTE, II.7
 ACF, II.15
 ACOS, II.7
 ADD, II.6, I.4
 adjusted for degrees of freedom, II.13
 alternative hypotheses, II.12
 analysis of covariance, see INDICATOR (II.10)
 analysis of variance, see AOVONE (II.14)
    ONEWAY (II.14), TWOWAY (II.14), INDICATOR (II.10)
 ANTILOG, II.7
 AOVONEWAY, II.14
 approximate equality, II.7, II.9
 arccos, see ACOS (II.7)
 arcsin, see ASIN (II.7)
 arctan, see ATAN (II.7)
 argument, I.1, I.2
 ARIMA, II.15
 arithmetic, II.6, II.7, I.2, I.3, I.8, I.9
 artificially long column, I.2, I.3, I.8, I.9, II.1,
    II.2, II.6, II.7, II.8, II.10, see DEFINE (II.1),
    PRINT (II.1), PUNCH (II.1), JOIN (II.10)
 ASIN, II.7
 association, II.14
 asterisk, used as continuation code, II.1, II.2, II.3, II.13, II.16
    used on output, see PRINT (II.2), REGRESS (II.13)
    used as missing data code, I.5, I.6, I.7, I.9
 ATAN, II.7
 attained significance, see TTEST (II.12), TWOSAMPLE (II.14)
 autocorrelation function, see ACF (II.15)
 autoregressive models, see ARIMA (II.15)
 availability, I.15
 AVERAGE, II.8, I.3



 BASE, II.5
 BATCH, II.17
 Bernoulli random data, see BTRIALS (II.5),
    BRANDOM (II.5)
 binomial probability, table of, see BINOMIAL (II.14)
 BINOMIAL, II.14
 binomial random data, see BTRIALS (II.5), BRANDOM (II.5)
 BRANDOM, II.5
 BRIEF, II.13, II.14, II.17
 BTRIALS, II.5
 bugs, I.14


1
                                                 III    Index
                                                     Page 111

 C, I.2, II.1
 CCF, II.15
 character data, see CONVERT (II.9)
 CHISQUARE, II.14
 CHOOSE, II.9
 column, I.1, I.2, I.3, I.4, I.9, II.2, II.17
 column lengths, I.8
 column operations, II.8
 column vector, I.4
 comma, I.2
 command, I.1, I.2
 command skipped, I.6
 comments, see READ (II.1), NOTE (II.16)
 confidence interval, see TINTERVAL (II.12), ZINTERVAL (II.12),
    TWOSAMPLE (II.14), POOLED (II.14), MANN-WHITNEY (II.14)
 constant, I.2, II.13, DEFINE (II.1)
 CONSTANT, see REGRESS (II.13), ARIMA (II.15)
 CONTINGENCY table, II.14, also see CHISQUARE (II.14)
 continuation card, see asterisk
 control, II.17
 CONVERT, II.9
 COPY, I.4, II.10
 CORRELATION, II.14
 correlation coefficient, see
    CORRELATION (II.14), REGRESS (II.13)
 COS, II.7
 COUNT, I.3, II.8
 cross correlation function, see CCF (II.15)



 dash, I.2
 data, I.1, I.2, I.8, II.1, II.3
 data lines, II.1, II.3, see READ (II.1), SET (II.1),
    PUNCH (II.2)
 decimal places, II.2
 DEFINE, I.2, I.3, II.1
 degrees, II.7
 DESCRIBE, II.14
 DIFFERENCES, II.14, II.15
 DIMENSION, I.2, II.1, II.17, see READ (II.1),
    SET (II.1)
 discrete, II.5
 DISKREAD, II.3
 DIVIDE, II.6
 DRANDOM, II.5
 dummy variable, see INDICATOR (II.10)
 DUMP, II.16


1
 III    Index
 Page 112

 e, I.3
 E, II.1
 Editing, II.9
 E format, II.3
 END, II.1, II.16
 Entering numbers, II.1
 ERASE, I.9, II.16
 errors, I.6
 EXECUTE store instructions, II.16
 EXPONENTIAL, II.7
 exponential notation, see READ (II.1),
    SET (II.1), PUNCH (II.2)



 fatal error, I.6
 F format, II.3
 flags, II.17
 FORECAST, see ARIMA (II.15)
 FORTRAN format, II.3
 FPRINT, II.3
 FPUNCH, II.3
 FREAD, II.3
 free format, I.2
 FSET, II.3
 Functions, II.7



 GENERATE, II.1



 Handbook, I.1
 height of plots, see WIDTH (II.17)
 HISTOGRAM, II.4
 Hodges-Lehmann estimate, see MANN-WHITNEY (II.14)
 hyphen, see dash, (I.2)



 I format, II.3
 Incomplete data cards II.1
 independence, II.14
 independent samples, t-test, confidence interval II.14.
 INDICATOR, II.10
 informative diagnostic, I.6, I.8
 input, II.1, II.3, see RETRIEVE (II.16)
 interactive, I.10, see TSHARE (II.17)
 INUNIT, II.17
 INVERT, I.4
 IRANDOM, II.5


1
                                                 III    Index
                                                     Page 113

 JOIN, II.10



 K, I.2, I.3, II.1



 labels for variables, see NAME (II.1)
 LAG, II.15
 least squares, see REGRESS (II.13)
 Letter, see LPLOT (II.4)
 logarithms, II.7
 logarithms to the base 10, see LOGTEN (II.7)
 LOGE, II.7
 LOGTEN, II.7
 looping, II.16
 LPLOT, II.4



 M, I.2, I.4
 Manipulation, II.10
 Mann-Whitney, see MANN-WHITNEY (II.14),
    DIFFERENCES (II.14)
 MANN-WHITNEY II.14
 matrices, I.2, I.4, I.8
 MAXIMUM, II.8, I.3, see also RMAXIMUM (II.6)
 mean, see AVERAGE (II.8), DESCRIBE (II.14)
 MEDIAN, II.8, I.3
 MINIMUM, II.8, I.3
    see also RMINIMUM (II.6)
 missing data, I.5, II.6, II.7, II.9
 Monte Carlo, II.5
 moving average models, ARIMA (II.15)
 MPLOT, II.4
 MULTIPLY, II.6, for matrices I.4
 Multiple regression, II.13


1
 III    Index
 Page 114

 NAME, I.2, II.1
 NEWPAGE, II.l6
 NOBRIEF, II.13, II.17
 NOCONSTANT, see REGRESS (II.13),
     ARIMA (II.15)
 non-parmetric methods see SIGN (II.7), RANK (II.11), MANN-WHITNEY
    (II.14), DIFFERENCES (II.14), WALSH (II.14)
 NOPRINT, II.16, II.3, II.5, see READ (II.1),
    SET (II.1)
 normal data, random observation from, see
    NRANDOM (II.5)
 normal probability plot, see NSCORES (II.7)
 normal scores, see NSCORES (II.7)
 NOTE, II.16, II.1
 NRANDOM, II.5
 NSCORES, II.7



 OMIT, II.9
 ONEWAY AOV, II.14
 ORDER, II.11
 output, II.2, II.3, see SAVE (II.16)
 OUTPUT WIDTH, II.17
 OUTUNIT, II.17



 PACF, II.15
 PARPRODUCT, II.10
 PARSUM, II.10
 paired test and confidence interval, I.13
 partial autocorrelation function, see PACF (II.15)
 partial products, see PARDUCT (II.10)
 partial sums, see PARSUM (II.10)
 Pearson product moment, see CORRELATION (II.14)
 pi, I.3
 PICK, II.10
 p-level, see TTEST (II.12), TWOSAMPLE (II.14)
 PLOT, II.4
 plots, II.4
 Poisson probabilities, II.14
 Poisson data,
    random observation from, see PRANDOM (II.5),
    table of probabilities, II.14, see POISSON (II.14)
 POOLED, II.14
 PRANDOM, II.5
 PRINT, I.3, I.4, II.2, II.5, II.7
 Printing data, II.2, II.3
 program, I.1
 PUNCH, II.2
 punching data, see PUNCH (II.2), FPUNCH (II.3)





1
                                                 III    Index
                                                     Page 115

 radians, II.7
 RAISE, II.6
 random data II.5,
    test for randomness see RUNS (II.12)
 RANK, II.11
 rank correlation, see CORRELATION (II.14)
 rank tests and estimates, see MANN-WHITNEY
    (II.14), WILCOXON (II.12), WALSH (II.14),
    DIFFERENCES (II.14)
 READ, II.1, I.1, I.2, I.4
 reading data, II.1, II.3, see RETRIEVE (II.16)
 RECODE, II.9
 REGRESS, II.13
 regression, see REGRESS (II.13), simple (II.13),
    polynomial (II.13), multiple (II.13),
    weights (II.13)
 repeated execution, see STORE (II.16)
 residual plots, see REGRESS (II.13)
 RESTART, II.16
 RETRIEVE, II.16
 reuse a column, I.2
 REWIND, II.3
 RMAXIMUM, II.6
 RMINIMUM, II.6
 ROUND, II.7
 round-off error, I.14
 RUNS, II.12



 SAMPLE, II.5
 SAVE, II.16
 SCAN, II.17, I.2, see READ (II.1), SET (II.1)
 scientific notation, see READ (II.1), PUNCH (II.2), II.3
 scratch area, I.9
 SET, II.1, I.1
 significance level, see TTEST (II.12), TWOSAMPLE (II.14)
 SIGNS, II.7
 simulation, II.5
 SIN, II.7
 SORT, II.11
 Spearman's rho, see CORRELATION (II.14)
 SQRT, II.7
 square root, see SQRT (II.7)
 standardized residuals, II.13
 STANDARD DEVIATION, II.8, I.3 see also
    DESCRIBE (II.14)
 STARTING VALUES, see ARIMA (II.15)
 STOP, II.16
 STORE instructions, II.16
1
 III    Index
 Page 116

 storage, I.9
 stored constant I.2, I.3
 standardized residuals, II.13
 subsets of data, II.9
 SUBSTITUTE, II.1
 SUBTRACT, II.6, I.4
 SUM, II.8, I.3



 TABLE, II.14
 TAN, II.7
 TAPE, II.3
 t-confidence interval, see TINT (II.12), see also
    TWOSAMPLE (II.14), POOLED (II.14)
 time series II.15
 TINTERVAL, II.12
 TPLOT, II.4
 TTEST, II.12
 t-test, see TTEST (II.12), see also
    ZTEST (II.12), TWOSAMPLE (II.14), POOLED (II.14)
 transformations, II.6, II.7, LAG (II.15), DIFFERENCES (II.15)
 TRANSPOSE, I.4
 trig functions, II.7
 TSHARE, II.17
 TWOWAY AOV, II.14
 TWOSAMPLE, II.14



 uniform data, random observation from, see
    URANDOM (II.5), IRANDOM (II.5)
 URANDOM, II.5



 variance, see STANDARD DEVIATION (II.8)

1
                                                 III    Index
                                                     Page 117


 WALSH, II.14
 weighted fits, II.13
 WIDTH of plots, II.17
 Wilcoxon rank sum test, see MANN-WHITNEY (II.14),
    DIFFERENCE (II.14)
 Wilcoxon signed rank test, see WILCOXON (II.12),
    WALSH (II.14)
 WILCOXON II.12
 worksheet, I.1, II.2, I.9
 WRITE, II.2



 ZINTERVAL, II.12
 ZTEST, II.12

1
                              IV.  Annotated list of commands
                                                     Page 119

 Notation

 K    denotes a constant (such as 8.3 or 21).
+_

 C    denotes a column number, which must be punched with a C
+_
      directly in front (such as C12).

 E    denotes either a constant or a column number (Minitab
+_
      looks for a C and acts accordingly).

 [ ]  denotes an optional argument.


 -- Entering Numbers ---------------------------------------

 READ   the following data cards into C, ..., C
+                                     _       _
      Data cards follow - one card per row.
      Example:  READ THE FOLLOWING INTO C2, C3
                 2  4
                 3.5  27.0   9
                 1 2
      This example puts 2, 3.5 and 1 in C2, and 4, 27 and 2
      in C3.  The 9 is ignored, since only two numbers per
      card are to be stored.

 READ   from file 'F', put into C, ..., C
+                  _            _       _

 SET    the following data into column C
+                                      _
      Data cards follow - all numbers go into the same
      column.
      Example:  SET THE FOLLOWING DATA INTO C7
                 2  7  9
                 3.8  22
      All 5 numbers are entered in column C7.

 SET    from file 'F', put into C
+                  _            _

 END    of data  (optional)
      Follows data.

 DEFIne the constant K into column C
+                    _             _
      Puts the number into all rows of the column.

 DEFIne the number in row K of C into column C
+                         _    _             _
      Puts the indicated number into all rows of the column.

 SUBStitute the number K into row K of column C
+                      _          _           _
      The previous number in row K of column C is replaced.
+                                _           _

 SUBStitute the number in row K of C into row K of C
+                             _    _          _    _
      The previous number in the specified location is
      replaced.
1
 IV.  Annotated list of commands
 Page 120

 GENErate the first K integers into column C
+                   _                      _
      Puts 1, 2, 3, ..., K into the column.
+                        _

 GENErate the integers from K to K, put into C
+                           _    _           _

 GENErate values from K, in steps of K, to K, put in C
+                     _              _     _         _
      Example:
      GENERATE FROM 1, STEPS OF -.5, TO -3.5, PUT IN C5

 -- Printing and Punching ----------------------------------

 PRINt  the values in columns C, ..., C
+                             _       _
      One or more columns may be printed.

 PUNCh  the values in columns C, ..., C
+                             _       _
      These columns should be equal length (or artificially
      long).  If one column is punched, there are 4 or more
      numbers per card.  Otherwise, there is 1 row per card.
      This command currently is limited to 4 columns; in the
      near future, the limit will depend on the data.

 WRITe  to file 'F' C, ..., C
+                _  _       _
      Similar to PUNCH, except that output is to a file.  The
      number of columns allowed depends on the data.

 -- FORTRAN Formatted Input and Output ---------------------

      Each of these commands must be followed by a card with
      a FORTRAN format specification, enclosed in paren-
      theses.  Data cards, if any, follow the format card.  I
      format cannot be used (use F4.0 in place of I4, etc.)

 FREAd    K rows into C, ..., C
+         _           _       _
 FREAd    file 'F' K rows into C,...,C
+               _  _           _     _
      Similar to READ.  Note that the number of rows of the
      worksheet to be filled must be specified.

 FSET     K values into C
+         _             _
 FSET     file 'F' K values into C
+               _  _             _
      Similar to SET.

 FPRInt   C, ..., C
+         _       _
 FPUNch   C, ..., C
+         _       _
 *FWRIte   to file 'F'  C, ..., C
+                   _   _       _
 * (not yet available)

 TAPEread K rows into C, ..., C
+         _           _       _
      Reads from unit 8 (the unit may differ at some
      installations).  Similar to FREAD (or FSET if one
      column is specified).

 DISKread K rows into C, ..., C
+         _           _       _
      Similar to TAPEREAD.

 REWInd   unit K
+              _
1
                              IV.  Annotated list of commands
                                                     Page 121

 -- Plots and Histograms -----------------------------------

 HISTogram  of column C
+                     _

 HISTogram  of column C, first midpoint K, interval width K
+                     _                 _                 _

 PLOT   y in C vs x in C
+            _         _
      Gives a 2-dimensional scatter plot.  Minitab automat-
      ically picks "nice" scales.  The pairs (x,y) are
      plotted with the symbol * unless two or more points
      fall on the same space.  In this case, a count of
      points falling on the same spot is given.  A + is given
      if the count is over 9.

 PLOT   y in C from K to K vs x in C from K to K
+            _      _    _         _      _    _
      Plot with scales specified.

 TPLOt  y in C vs x in C vs z in C
+            _         _         _
      Pseudo three-dimensional plot with symbol indicating
      the value of the third (z) dimension.

 TPLOt  C from K to K vs C from K to K vs C
+       _      _    _    _      _    _    _
      Pseudo three-dimensional plot with scales specified.

 MPLOt  C vs C and C vs C and ...
+       _    _     _    _
      Multiple plots on the same axis.

 LPLOt  C vs C using tags in C
+       _    _               _
      Tags are letters which correspond to the values in C as
+                                                        _
      follows:

       ... -2  -1   0   1   2   3  ...  25  26  27  28 ...
       ...  X   Y   Z   A   B   C  ...   Y   Z   A   B ...

 LPLOt  C from K to K vs C from K to K, tags in C
+       _      _    _    _      _    _          _


 -- Random Data Generation ---------------------------------

      The following commands allow you to simulate an exper-
      iment by putting "random" data into columns.

 URANdom K observations, put into C
+        _                        _
      Uniformly distributed observations between 0 and 1.

 NRANdom K observations with mu = K, sigma = K, put into C
+        _                        _          _           _
      Normally distributed observations.

 BTRIals K Bernoulli trials with p = K, put into C
+        _                           _           _
      Random sequence of 0 and 1, with probability of 1 equal
      to p.
1
 IV.  Annotated list of commands
 Page 122

 BRANdom K binomial experiments, n = K, p = K, put into C
+        _                           _      _           _

 IRANdom K random integers between K and K, put into C
+        _                         _     _           _

 PRANdom K Poisson obs. with pop. mean = K, put into C
+        _                               _           _

 DRANdom K obs. using values in C, prob. in C, put into C
+        _                      _           _           _
      Generates random observations from a discrete distri-
      bution specified by the first two columns.

 SAMPle  K rows from C, put into C  (without replacement)
+        _           _           _
      Note that this differs from the generators above in
      that it randomly selects without replacement from a
      finite population.

 SAMPle  K rows from C, ..., C, put into C, ..., C
+        _           _       _           _       _
      Samples (the same rows) from several columns without
      replacement.

 BASE    for random number generator = K
+                                      _
      (Usually needed only if you want to be able to generate
      the same set of "random" data again.)


 -- Arithmetic ---------------------------------------------

 ADD      E to    E, put into C
+         _       _           _
 SUBTract E from  E, put into C
+         _       _           _
 MULTiply E by    E, put into C
+         _       _           _
 DIVIde   E by    E, put into C
+         _       _           _
 RAISe    E to    E, put into C
+         _       _           _
 RMAX  of E and   E, put into C     (maximum row by row)
+         _       _           _
 RMIN  of E and   E, put into C     (minimum row by row)
+         _       _           _

      The following commands allow operation on more than 2
      items:

 ADD      E to E, ..., to E, put into C
+         _    _          _           _
 MULTiply E by E, ..., by E, put into C
+         _    _          _           _
 RMAX  of E    E,..., and E, put into C
+         _    _          _           _
 RMIN  of E,   E,..., and E, put into C
+         _    _          _           _

1
                              IV.  Annotated list of commands
                                                     Page 123

 -- Functions ----------------------------------------------

 ABSOlute value of E, put into C
+                  _           _
 SIGN           of E [put into C]
+                  _           _
      Gives -1 for negative, +1 for positive, and 0 for 0.  A
      summary is automatically printed.
 SQRT        of E, put into C      (square root)
+               _           _
 ROUNd          E to nearest integer, put into C
+               _                              _
 LOGE        of E, put into C      (log to base e)
+               _           _
 LOGTen      of E, put into C      (log to base 10)
+               _           _
 EXPOnential of E, put into C      (e to the E power)
+               _           _                _
 ANTIlog     of E, put into C      (10 to the E power)
+               _           _                 _
 NSCOres     of E, put into C      (normal scores)
+               _           _
 SIN    of E, put into C     (argument in radians)
+          _           _
 COS    of E, put into C         "       "    "
+          _           _
 TAN    of E, put into C         "       "    "
+          _           _
 ASIN   of E, put into C  (inverse trig - result in radians)
+          _           _
 ACOS   of E, put into C       "      "      "     "    "
+          _           _
 ATAN   of E, put into C       "      "      "     "    "
+          _           _
      (To convert from radians to degrees, multiply by
      57.297.  To convert from degrees to radians, multiply
      by 0.017453.)


 -- Column Operations --------------------------------------

 COUNt    the number of values in C [put count   into C]
+                                 _                   _
 SUM      the values           in C [put sum     into C]
+                                 _                   _
 AVERage  the values           in C [put average into C]
+                                 _                   _
 STANdard deviation            of C [put s. d.   into C]
+                                 _                   _
 MEDIan   of the values        in C [put median  into C]
+                                 _                   _
 MAXImum  of the values        in C [put maximum into C]
+                                 _                   _
 MINImum  of the values        in C [put minimum into C]
+                                 _                   _

      In these commands the results are printed automatically
      and the storage is optional.  (e.g., the instruction
      AVERAGE OF C1 prints the result but does not store it.)
      Storage may be in a stored constant or a column.


 -- Editing ------------------------------------------------

 OMIT     rows with K in C [corresp. rows of C,...,C] put
+                   _    _                   _     _
          into C [corresp. rows into C,...,C]
+              _                     _     _

 OMIT     rows with values between K and K in C [corresp.
+                                  _     _    _
          rows of C,...,C], put into C [corresp. rows into
+                 _     _            _
          C,...,C]
+         _     _
1
 IV.  Annotated list of commands
 Page 124

 CHOOse   rows with K in C [corresp. rows of C,...,C] put
+                   _    _                   _     _
          into C [corresp. rows into C,...,C]
+              _                     _     _

 CHOOse   rows with values between K and K in C [corresp.
+                                  _     _    _
          rows of C,...,C] put into C [corresp. rows into
+                 _     _           _
          C,...,C]
+         _     _

      CHOOSE is the opposite of OMIT.  These are used when
      analyzing subsets of a set of data, e.g., when
      analyzing only males, or those under 25 years old, etc.

 RECOde   the value K in C into K, put into C
+                   _    _      _           _

 RECOde   values from K to K in C to K, put into C
+                     _    _    _    _           _
      Copies the column, making the indicated changes.

 CONVert  using conversion table in C, C, convert C into C
+                                   _  _          _      _
      Used primarily to convert character data to numbers.


 -- Manipulations ------------------------------------------

 COPY        C,...,C into C,...,C
+            _     _      _     _
 JOIN        E to bottom of E [to E,..., to E] put into C
+            _              _     _         _           _
      Puts columns and/or constants together to form a new
      column.
 PICK        rows K to K of C, put into C
+                 _    _    _           _
 PARSum      of C, put into C
+               _           _
      The sum of the first i rows of the first column is put
      in the ith row of the second column.

 PARProduct  of C, put into C
+               _           _
      The product of the first i rows of the first column is
      put in the ith row of the second column.
 INDIcator   variables for values in C, put into C, ..., C
+                                    _           _       _
 WALSh       averages of C, put into C  [indices into C, C]
+                        _           _                _  _
 DIFFerences (all possible) between C and C, put into C [put
+                                   _     _           _
             indices into C and C]
+                         _     _
      (Another form of the DIFFERENCE command appears in the
      section on time series commands.)
1
                              IV.  Annotated list of commands
                                                     Page 125

 -- Sorting ------------------------------------------------

 ORDEr    col C [and C,...] put into C [and put into C,...]
+             _      _               _               _
      Each column ordered separately, with the smallest num-
      ber at the top.
 SORT     the values in C [carry along corresp. rows of
+                       _
          C,...,C] put into C [and into C,...,C]
+         _     _           _           _     _
      Sorted all together, according to first column.
 RANK     the values in C, put ranks into C
+                       _                 _


 -- Statistics On One Column of Data -----------------------

 TINTerval  with K percent confidence for data in column C
+                _                                       _
 TTESt      of mu = K [alt. K] on data in column C
+                   _       _                    _
      Alternative -1, 0, +1 for alternatives of less than,
      not equal, greater than.  Alternative of not equal is
      assumed if nothing is specified.
 RUNS       above and below K for data in column C
+                           _                    _
 ZTESt      of mu = K [alt. K] assuming sigma = K, on C
+                   _       _                   _     _
 ZINTerval  K percent confidence, assuming sigma = K, on C
+           _                                      _     _
 *WILCoxon one-sample rank test for median K and c.i.
+                                          _
            for data in C
+                       _
 * (not yet available)


 -- Regression ---------------------------------------------

 REGRess    predict Y in C using K predictors in C,...,C
+                        _       _               _     _

 REGRess    Y in C, K predictors in C,...,C [store std. res.
+                _  _               _     _
            into C [pred. values into C [coef. into C]]]
+                _                    _             _

 REGRess    Y in C [weights in C] K pred. in C,...,C [store
+                _             _  _          _     _
            st. res. into C [pred. into C [coef. into C]]]
+                         _             _             _

 NOCOnstant (fits equation with no intercept.  Applies to
            all REGRESS commands which follow.)
 CONStant   (cancels out NOCONSTANT)
 BRIEf      (brief output from all REGRESS commands which
            follow.)
 NOBRief    (restores full output from regression)
 BRIEf      output code K
+                       _
      K can be from 1 to 6.  The higher the number, the more
+     _
      output.  K = 2 corresponds to BRIEF with no arguments,
+              _
      K = 5 corresponds to NOBRIEF.
+     _
1
 IV.  Annotated list of commands
 Page 126

 -- Analysis of variance -----------------------------------

 AOVOneway  on data in columns C, ..., C
+                              _       _
      Does a one-way analysis of variance with each cell in a
      separate column.

 ONEWay aov, data in C, subscript in C
+                    _               _
      One-factor analysis of variance, where the cell number
      (factor level) is given by a code in the second column
      named.

 TWOWay aov, data in C, subscripts in C and C
+                    _                _     _
      Two-factor analysis of variance, for equal number of
      observations per cell (one or more).

 -- More Statistics ----------------------------------------

 BINOmial  probabilities for n = K, p = K (prints out table)
+                                _      _

 BINOmial  probabilities for n = K, p = K, put into C
+                                _      _           _
      Prints and stores the probabilities.

 POISson   probabilities for mean K   (prints out table)
+                                 _

 TWOSample t [alternative K] [percent conficence K] for
+                         _                      _
           data in cols C and C
+                       _     _
      Alternatives -1, 0, 1 for first less than, not equal,
      greater than second.  Two sample t test and confidence
      interval.

 POOLed    t [alternative K] [percent confidence K] for
+                         _                      _
           data in cols C and C
+                       _     _
      Alternatives as in TWOSAMPLE.  Pooled t-test and
      confidence interval.  Assumes the two populations have
      equal variances.

 MANN-whitney [alternate K] [percent confidence K] for data
+                        _                      _
           C and C
+          _     _

 DESCribe  the data in C, ..., C
+                      _       _
      Gives various descriptive statistics on each column.

 CORRelation coefficient between data in columns C and C
+                                                _     _

 CORRelation between data in C, ..., C [store corr. into M]
+                            _       _

 CHISquare   test on table stored in columns C, ..., C
+                                            _       _
      Performs a chi-square test for association or inde-
      pendence on a table which has been stored in the work-
      sheet.
1
                              IV.  Annotated list of commands
                                                      Page 127

 CONTingency table analysis for data in col C vs. col C
+                                           _         _
      First forms a table from the raw data in the two
      columns, then performs the analysis as in the CHISQUARE
      command.

 TABLe       for data in C vs. C
+                        _     _
      Forms the table from the raw data and prints it, but
      does not do a chi-square test.


 -- Time Series ---------------------------------------------

      The following commands were added to Minitab in Release
      78.1.  They are not described in the Handbook.  They
      are still experimental, and may be changed slightly in
      the future.  For a discussion of the statistics, see
      Time Series Analysis by Box and Jenkins.

 ACF  [with up to K lags] for series in C [put in C]
+                 _                     _         _

      Computes autocorrelations of the time series stored in
      the column and prints a graph.  If the number of lags
      is not specified, sqrt(n) + 10 are computed, where n =
      length of the series.

 PACF [up to K lags] for series in C [put in C]
+            _                     _         _

      Computes partial autocorrelations and prints a graph.

 CCF  [with up to K lags] between series in C and C
+                 _                         _     _

      Computes and graphs cross correlations between the two
      time series.  Presently, CCF does not store cross
      correlations.  Default lags from -(sqrt(n)+10) to
      (sqrt(n)+10).

 DIFFerences [of lag K] for data in C, put in C
+                    _              _         _

      Example  DIFFERENCE 2 FOR C1, STORE IN C2

          C1                  C2
           1                   *
           3                   *
           8       -->         7
          12                   9
           7                  -1

      Note that row 3 of C2 contains 8-1, row 4 contains
      12-3, row 5 contains 7-8.

      In general, if C1 contains Z(1), Z(2),...,Z(n), then
      DIFF K C1, C2 puts * into rows 1 thru K of C2, and puts
+          _                                _
      Z(i)-Z(i-k) into row i, K+1<i<n.  If K is omitted, K=1
+                             _  _ _       _             _
      is used.  K>1 is often a seasonal difference.
+               _
1
 IV.  Annotated list of commands
 Page 128

 LAG  [K] data in C, put in C
+      _          _         _

      Puts Z(i-K) into row i, K+1<i<n, and puts * in rows
+                                _ _
      1,...,K.  If K is omitted, K=1 is used.
+                  _             _

 ARIMA p=K, d=K, q=K for data in C
+        _    _    _             _

      Fits the following ARIMA (p,d,q) model to the data
      Z(1),...,Z(n);

      W(t) = o(1)W(t-1)+...+o(p)W(t-p)
+            /              /
             +O(0)+a(t)-O(1)a(t-1)-...-O(q)a(t-q)
+             -         -              -

      where W(t) = is Z(t) differenced d times.  If d=0, the
      constant term, O(0), is automatically included in the
+                    -
      model, unless the subcommand NOCONSTANT is used.  If
      d>0, the constant is not fit, unless you use the
      subcommand CONSTANT.  For example

      ARIMA 0 1 2 C1;
      CONSTANT.

      Fits the model W(t) = O(0)+a(t)-O(1)a(t-1)-O(2)a(t-2),
+                           -         -          -
      W(t)=Z(t)-Z(t-1).  CONSTANT is one of Minitab's first
      subcommands.  Note the syntax:  put a semicolon at the
      end of the main command line, go to a new line, type
      the subcommand, then a period.  (If more than one
      subcommand is used, put a semicolon at the end of the
      main command line and at the end of every subcommand
      line except the last.  Put a period at the end of the
      last subcommand line.)

      To specify starting values (initial parameter esti-
      mates), use the subcommand

      STARting values in C
+                        _

      Starting values must be entered into the column prior
      to using ARIMA; they are entered in the same order as
      they appear in the model, except for the constant term.
      If a constant term O(0) is included in the model, the
+                        -
      starting value for O(0) is optional; if it is used, put
+                        -
      it as the last value in the start column.

      Example:  SET INTO C10
                .1 .2  .15 25
                ARIMA 2 0 1 C1;
                START C10.

      fits the model
      Z(t) = o(1)Z(t-1)+o(2)Z(t-2)+O(0)+a(t)-O(1)a(t-1) using
+            /          /          -         -
      starting values o(1)=0.1, o=0.2, O(1)=0.15, O(0)=25.
+                     /         /      -          -
      If you do not use START, Minitab uses 0.1 for all o's
+                                                       /
      and O's (except O(0)); this usually works well.
+         -           -

1
                              IV.  Annotated list of commands
                                                     Page 129

 ARIMa K K K data in C [put residuals in C
+      _ _ _         _                   _
                       [fitted values in C
+                                        _
                       [parameters in C]]]
+                                     _


 ARIMa p=K d=K q=K P=K D=K Q=K S=K data in C
+        _   _   _   _   _   _   _         _
      [put res. in C [fitted values in C [parameters in C]]]
+                  _                   _                _

      Fits the multiplicative seasonal model
      (p,d,q)x(P,D,Q)S.

      Forecasting.  To print and optionally store forecasts,
+     ___________
      use the subcommand:

      FOREcast [forecast origin = K] up to K leads ahead
+                                 _        _
          [store forecasts in C [confidence limits in C, C]
+                             _                       _  _

      If the forecast origin is not specified, the origin is
      the end of the series (i.e., the forecasts are for the
      future).  The storage of forecasts and confidence
      limits allows a variety of plots.


 -- Matrices -----------------------------------------------

      Minitab has 10 matrices, denoted by M1, M2, ..., M10.
      Putting numbers into a matrix, printing a matrix, and
      transfering numbers between the worksheet and a matrix
      are done by the following commands:

 READ the following data into K row by K column matrix M
+                             _        _               _

     Example:  READ INTO A 2 X 3 MATRIX M3
               1  4  26
               2   3  -1

 PRINt M, ..., M
+      _       _

 COPY columns of the worksheet C,...,C into matrix M
+                              _     _             _
 COPY matrix M into columns of the worksheet C,...,C
+            _                               _     _
 COPY matrix M into matrix M
+            _             _

      In the following arithmetic commands, a column of the
      worksheet with n rows can be used as an nx1 matrix, and
      a constant can be used as a 1x1 matrix.

 INVErt matrix M,put inverse into M
+              _                  _
 TRANspose M, put transpose into M
+          _                     _
 ADD E to E, put into M
+    _    _           _

      E can be a matrix, constant, or a stored constant.
+     _
      Thus, this command does both matrix addition (e.g. M1 +
      M2) and scalar addition (e.g. M1 + 6 and K1 + M2).

 SUBTract E from E, put into M
+         _      _           _
 MULTiply E by E, put into M
+         _    _           _

1
 IV.  Annotated list of commands
 Page 130

 -- Miscellaneous ------------------------------------------

 STOP     (last card of program)
 NOTE     (comments may be put here)
 ERASe    columns C, ..., C
+                 _       _
 RESTart  (erases worksheet, sets error counters to 0, etc.)
 NEWPage  (starts output from next command on the next page)
 SAVE     the worksheet
 RETRieve stored copy of the worksheet
 DUMP     system information (for debugging system)
 DUMP     first K elements of worksheet array
+               _
       For debugging system.


 -- Control ------------------------------------------------

      The following control commands tell Minitab how to do
      its work.  They apply to commands which follow, until
      they are over-ridden.

 NOPRint   (suppresses automatic printing of data for READ,
           SET, and random data generators)
 PRINt     (with no arguments restores automatic printing)
 WIDTh     of plots = K spaces
+                     _
      Width between 20 and 100 spaces - normally 50.
 WIDTh     of plots = K spaces, height K lines
+                     _                _
      Height between 10 and 400 lines, normally about 25.
 OUTPut width = K
+               _
      K is the number of spaces in your output.  K=72 or K=80
+     _                                          _       _
      is useful to fit the output on narrow terminals or a
      regular sheet of paper.  K=120 or K=132 is suitable for
+                              _        _
      wide terminals and line printers.
 DIMEnsion the worksheet to K rows   (normally 200 rows)
+                           _
 SCAN      only the first K spaces on the cards
+                         _
 BRIEf     output
 NOBRief   restores full printing
 BRIEF     K
+          _
      BRIEF and NOBRIEF control the amount of output from the
      regression, analysis of variance, and time series
      commands.  The brief code, K (1<K<6) gives more output
+                                _   ___
      for higher values of K.  K=2 corresponds to BRIEF with
+                          _   _
      no arguments, K=5 corresponds to NOBRIEF.
+                   _
 CONStant  see regression, ARIMA.
 NOCOnstant "    "           "
 INUNit    = K    (redirects all reading to another unit.)
+            _
 OUTUnit   = K    (redirects all printing to another unit.)
+            _
 REWInd    unit K  (rewind input unit so it can be read
+               _
           again.)
 BATCh     (Makes Minitab suitable for batch operation.)
 TSHAre    (Makes Minitab suitable for interactive (time-
           shared) operation.)

1
                              IV.  Annotated list of commands
                                                     Page 131

 -- Looping ------------------------------------------------

 STORe    instructions for repeated execution
 END      storing instructions for repeated execution
 EXECute  stored instructions [K times]
+                              _


 -- General forms of commands ------------------------------

 PRINt   E, ..., E
+        _       _
      where E's can be any mixture of stored constants,
      columns, and matrices.


         (K                )         (stored K       )
+         _                                  _
 DEFIne  (row K of C       )  into   (C              )
+             _    _                  _
         (row K, col K of M)         (K by K matrix M)
+             _      _                _    _


           (K               )          (row K of C       )
+           _                               _    _
 SUBStitute(row K of C      )   into   (row K, col K of M)
+               _    _                      _      _
           (row K,col K of M)
+               _     _


 -- Names --------------------------------------------------

      Columns can be given names which are like 'nicknames'.
      They appear on output of various commands, and if
      enclosed in single quotes (apostrophes), can be used in
      commands.  Names can contain up to 8 characters, but no
      blanks.

 NAME C = 'name', [C = 'name', ... ]
+     _            _

 Example
      NAME    C2='SEX', C4='HEIGHT'
      READ    C1 'SEX', 'HEIGHT'
      TABLE   C1, C2
      HISTOGRAM 'HEIGHT'

      Note currently, names longer than 5 characters will not
+     ____
      be printed on the output in some commands.  (In the
      example above, C4 would be printed instead of HEIGHT.)
