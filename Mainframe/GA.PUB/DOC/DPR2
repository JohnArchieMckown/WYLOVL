DOC#DPR2 PUBLIC                            Latest update:  08/01/67
Information Technology Services            Creation date:  00/00/00
Stanford University                        Length:        114 lines


Title:  Product Accumulation for Short and Long Floating-Point
        Operands

Library Program Number:  C005

Subprogram name(s):  DPR2

Summary:  This routine computes the long precision product of a
short and a long precision floating-point number; the product
replaces the long precision operand, and a simple indication is
given of exponent underflow and overflow.

Field of application:  Mathematics

Primary classification code:  A1

Secondary classification code(s):  None

Search key:  Product-Accumulation

Languages from which this routine may be called:  FORTRAN IV (E),
                                                  (H), and (G);
                                                  Assembler

Principal source language:  Assembler

Type of routine:  Closed, reentrant subroutine type subprogram
                  Standard System/360 calling sequence
subprogram

Machine on which routine will execute:  IBM System/360

Monitor or operating system required:  OS/360

Special machine requirements:  None

Call:  CALL DPR2 (X, P, I)

Parameters:

     Parameter     Type                   Description

       X        short floating-      first operand
                point number
                (REAL * 4)

       P        long-floating        second operand, the product P
                point number         x S replaces P
                (REAL * 8)

       I        full word integer    increased by 1 on exponent
                (INTEGER * 4)        overflow, decreased by 1 on
                                     exponent underflow

Declarations:  P must be declared either DOUBLE PRECISION READ*8

Special system control cards needed:  None

Use:  This routine computes the full (20 hex digit) product of the
arguments P and X, and truncates the result to long floating-point
form (14 hex digits).  The fraction part of the result is always
correct.  The characteristic of the result is the correct
characteristic modulo 128, so that an arithmetically useful result is
obtained even if an exponent spill occurs.  Thus, if it is necessary
to evaluate the produce of a large number of operands (as in the
evaluation of a determinant), this routine will provide the correct
result and the programmer need not worry about the properties of the
machine's method for handling under- and overflows.

I may have any value during the evaluation of the product P, but
still be 0 at the end.  Thus there is no need to reorder the
multiplications so as to obtain intermediate products which are in
range.

Other output:  None

Error conditions and messages:  None

Accuracy:  Full long precision accuracy for normalized operands;
unnormalized operands produce an unnormalized result.  If either X
or P is zero, both P and I will be set to zero.

Time:  286 microseconds (360 model 50)

Non-library routines or subroutines required:  None

Library routines or subroutines required:  None

Library routines required:  None

Storage requirements:   CC   =  204   bytes
                           16      10

Registers used:  All registers are preserved

Program description:  This program uses only the general purpose
registers; the floating-point registers are not disturbed in any
way.  The full 20 hex digit product is truncated to 14 hex digits
following post normalization.

References:  None

Programmer:  John R. Ehrman
             SLAC Computation Group

Certified by:  Jim Wells
               Stanford Computation Center Campus Facility

Date:  August 1, 1967
