DOC#DPPA PUBLIC                            Latest update:  08/01/67
Information Technology Services            Creation date:  00/00/00
Stanford University                        Length:        123 lines


Title:  Double Precision Product Accumulation with Optional Rounding

Library Program Number:  C004

Subprogram name(s):  DPR1R, DPR1U

Summary:  This routine computes the long precision product of two
long precision floating-point arguments with optional rounding and
provides a simple indication of exponent overflows and underflows.

Field of application:  Mathematics

Search key:  Product Accumulation, Determinant

Languages from which this routine may be called:  FORTRAN IV;
                                                  Assembler


Principal source language:  OS/360 Assembler Language

Type of routine:  closed, reentrant subroutine-type subprogram,
                  Standard OS/360 calling sequence

Machine on which routine will execute:  IBM System/360

Monitor or operating system required:  None

Special machine requirements:  None

Call:  CALL DPR1R(X,P,I)  (rounded product)     or
       CALL DPR1U(X,P,I)  (unrounded product)

Parameters:

     Parameter     Type                   Description

       X        long floating-           product of P and X will
                point number         replace P

      P         long floating-
                point number

       I        fullword integer     "I" will be increased by 1 if
                                     the exponent of P*X has
                                     overflowed, and will be
                                     decreased by 1 if the exponent
                                     of P*X has underflowed.


Declarations:  X and P must be declared Double Precision or REAL*8,
               and should be normalized.

Special system control cards needed:  None

Use:  This routine computes the double-long (28 hex digits) product
of two long arguments, and then provides a rounded or truncated
result to long precision (14 hex digits).  For normalized arguments,
the fraction part of the result is always correct.  The
characteristic of the result is the correct characteristic modulo
128, so that an arithmetically useful result is obtained even if an
exponent spill occurs.  Thus, if it is necessary to evaluate the
product of a large number of operands (as in the evaluation of a
determinant), this routine will provide the correct result and the
programmer need not worry about the properties of the machine's
method for handling under- and overflows.

For example, to compute the product of the N elements in the array A,
the following FORTRAN program could be used:

     DOUBLE PRECISION P,A(50)
     ---
     I = 0
     P = 1.0D0
     DO 1 K = 1,N
  1  CALL DPR1R(A,(K),P,I)
     ---

I may have had any value during the evaluation of the product P, but
still be at 0 at the end.  Thus there is no need to reorder the
multiplications so as to obtain intermediate products which are in
range.


Other input:  None

Other output:  None

Error conditions and messages:  None

Accuracy:  14 hex digits long-precision if operands are normalized
(at most one post-normalization left shift is performed on the
product fraction, so that unnormalized arguments produce an
unnormalized result).

Time:  445 microseconds (model 50)


Non-library routines or subroutines required:  None

Library routines or subroutines required:  None

Library routines required:  None

Storage requirements:  14C   = 332    bytes
                           16      10

Registers used:  All registers are preserved

References:  None
                  McGraw-Hill, 1965, p.54.

Programmer:  John R. Ehrman
             SLAC Computation Group

Certified by:  Jim Wells
               Stanford Computation Center Campus Facility

Date:  August 1, 1967
