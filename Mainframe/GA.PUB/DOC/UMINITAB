 OPTIONS:  UNN CC NOBACK FORMS=BOND CHARS=TN10
1
-                                                                                      #247
                                                                             September 1978
-                                        Using MINITAB at CIT
-
0                                          1.  INTRODUCTION
+                                          1.  INTRODUCTION
0          MINITAB is a very easy to use, flexible, and powerful statistical computing sys-
           tem, designed to handle small to medium data sets.  This document is intended to
           describe how  to use MINITAB  at the Center  for Information Technology  (on the
           3081 system).   Release 78.1 of MINITAB is  being used currently.   Refer to the
           MINITAB II Reference Manual, May 1978,  available at Document Sales,  Pine Hall,
+          _______ __ _________ ______
           for details about MINITAB control language and features.   (Reference copies are
           available at Consulting,  the Pine Hall Study  Area and the Computer Science Li-
           brary in Polya Hall.)   (Also see the MINITAB Student Handbook by Ryan,  Joiner,
+                                                _______ _______ ________
           and Ryan,   Duxbury Press,   which is  frequently available  at the  bookstore.)
           MINITAB is  fully supported  by CIT Technical  Support Services;   consulting is
           available on all aspects of the package.
0          The job control language  (JCL)  for running MINITAB under a  variety of circum-
           stances is described in the following sections.  JCL provides information neces-
           sary for the control of  a job or "run" while it is being  processed by the com-
           puter.   Note that JCL is distinct from the MINITAB control statements.   Errors
           discovered in Minitab will be published separately as needed.
-
0                           2.  JCL NECESSARY FOR A SIMPLE MINITAB PROGRAM
+                           2.  JCL NECESSARY FOR A SIMPLE MINITAB PROGRAM
0          If your job does not read or write a disk file, then you have a "simple" MINITAB
           program.  The JCL for running a simple MINITAB program follows:
0               //  JOB Statement
                //  EXEC  MINITAB
                //SYSIN  DD  *
0          Each of the statements begins in column one.   Instructions on the JOB statement
           may be found in  the HASP Statement Reference Card available  at Document Sales.
+                               ____ _________ _________ ____
           At least one  blank is required before and  after "EXEC" and "DD"  in the second
           and third statements  respectively.   Blanks should not appear  anywhere else in
           these statements.  MINITAB control statements follow immediately after.
-
-
-
                                                - 1 -
1
-                                   3.  RUNNING MINITAB IN CLASS Q
+                                   3.  RUNNING MINITAB IN CLASS Q
0          If your program  meets the criteria given  in the preceding section,   and if it
           will run in one-tenth  of a minute (six seconds)  or less,   you should run your
           MINITAB program in Class Q.  Class Q is recommended because the time between the
           submission of your  MINITAB program to the  computer and the return  of your re-
           sults is significantly less than in other  batch classes such as E.   Also,  the
           cost (except for printing) is less:  $.20  during the DAY block, and $.10 during
           other time blocks.
0          To run  your MINITAB program in  Class Q,  simply  add a comma and  the notation
           "CLASS=Q" to the end of your JOB statement.  Thus, the JCL is simply:
0               //  JOB  Statement-parameters,CLASS=Q
                //  EXEC  MINITAB
                //SYSIN  DD  *
0          An alternative is to specify "CLASS=Q" on a JOBPARM statement:
0               //  JOB  Statement
                /*JOBPARM  CLASS=Q
                //  EXEC  MINITAB
                //SYSIN  DD  *
0          Note that on the  JOBPARM statement the only blanks are  between "/*JOBPARM" and
           "CLASS=Q".
-
0                                         4.  WORKSHEET SIZE
+                                         4.  WORKSHEET SIZE
0          The worksheet size  for the Campus Facility implementation of  MINITAB is 20,000
           elements.   Fifty columns (variables) of data are allowed,  and the worksheet is
           dimensioned to 200 rows (observations).   The number of rows may be increased by
           use of the DIMENSION command,  provided that the total number of elements in the
           worksheet does not exceed 20,000.
-
0                                     5.  GENERALIZED JOB SETUP
+                                     5.  GENERALIZED JOB SETUP
0          The remainder of this guide discusses the setup of MINITAB programs which do not
           meet the criteria for a simple job.  If you do not plan to read from or write to
           disk, then what follows does not apply to you.   Note, also,  that punching data
           to cards  via either  the PUNCH or  FPUNCH commands in  MINITAB is  available in
           Class Q.
0          The generalized job setup for running MINITAB is the following:
0               //  JOB  Statement
                //  EXEC  MINITAB
                <---FTxx DD statement(s) to reference input or output to disk
0                                               - 2 -
1
-               //SYSIN  DD  *
                <---MINITAB control statements
0          The EXEC statement invokes the MINITAB cataloged procedure providing appropriate
           "canned" JCL for your MINITAB program.   Thus, the amount of JCL you must supply
           is minimized and the chances for error considerably reduced.
0          The FTxx DD statement(s) (DD stands for Data Definition)  are JCL statements re-
           quired when  "canned" JCL in the  MINITAB cataloged procedure is  not sufficient
           because your MINITAB program either reads from  or writes to disk.   The FTxx DD
           statement(s)   provide the  information  for referencing  either  input to  your
           MINITAB program (data from disk)  and/or  output from your MINITAB program (data
           to disk).  The use of the statement and its format is explained in the next sec-
           tion.   A helpful reference  for disk use is the document  "All About Disk Stor-
           age."
0          MINITAB can also read and write to tape;  however, since the data sets which are
           used with MINITAB are  limited in size,  it is preferable to  read the data from
           disk.  If you wish to use tape, please come to Consulting if you do not know the
           appropriate JCL to provide your MINITAB program.   ("Using Standard Tapes at the
           Campus Facility" would also be a good reference to be familiar with.)
-
0                                     6.  FTXX DD STATEMENT USE
+                                     6.  FTXX DD STATEMENT USE
0          An FTxx  DD statement is   JCL that is needed  when MINITAB references  input or
           output of data during a run.   The MINITAB commands below when used for input or
           output.
0               Input               Output
+               _____               ______
0               READ                WRITE
                SET                 FPUNCH - If used to punch data to cards,
                DISKREAD            PUNCH  - appropriate JCL is already provided
                TAPEREAD            OUTUNIT  in the catalogued procedure.
                INUNIT
0          For further details on these commands refer  to the MINITAB II Reference Manual.
+                                                              _______ __ _________ ______
           Currently the READ, SET, DISKREAD, TAPEREAD, and WRITE commands refer to unit 8,
           i.e., an FT08F001 DD statement is necessary.   Because of this situation you may
           not   read  from   and  write   to  disk   during   a  single   run  using   the
           READ/SET/DISKREAD/TAPEREAD and WRITE commands;  since you  may not read from and
           write to the same unit during a single  run.   This will be corrected soon,  and
           appropriate instructions  added to this  guide.   If you  wish to read  from and
           write to disk during the same run,  refer to the section below for tricks to get
           around this problem.   The READ,  SET,  and WRITE commands require that the file
           name on the control statement be enclosed in single quotes (').  Although a file
           name must be present,  MINITAB ignores it.   The SAVE and RETRIEVE commands cur-
           rently do not work.
-
0                                               - 3 -
1
-          6.1   READING FROM AND WRITING TO DISK IN THE SAME RUN
+          6.1   READING FROM AND WRITING TO DISK IN THE SAME RUN
+                _______ ____ ___ _______ __ ____ __ ___ ____ ___
0          (One or more of these options may be used.)
0          1.  Read your data in  using the INUNIT command.   If you  include the INUNIT xx
               command in your MINITAB program (where xx  is a valid unit number between 20
               and 99), MINITAB will next read commands from unit xx.  A FTxxF001 DD state-
               ment will be necessary if you choose this approach.   Any valid MINITAB com-
               mands may be stored in this disk file.  For example, if the file looked like
               this:
0                   READ C1-C9
                    data
0              MINITAB would read the  data into columns 1 to 9.   The  file must contain a
               complete MINITAB segment, i.e., the file may not just be data--a READ,  SET,
               FREAD or FSET card must precede the data.
0          2.  Reroute your "punch" output to disk.   Output from a PUNCH or FPUNCH command
               is directed to unit 7.   Normally this means the card punch (the appropriate
               JCL is included  in the cataloged procedure).   However,   you may overwrite
               this option by supplying  a FT07F001 DD statement directing the  output to a
               disk file.
0          3.  Send all  output to  disk using the  OUTUNIT command.    If you  include the
               OUTUNIT xx command in your MINITAB program  (where xx is a valid unit number
               between 20 and 99),  MINITAB will direct all further output to this unit in-
               stead of to the printer.   If you wish output to be redirected to the print-
               er, include an OUTUNIT 6 command later in your program (unit 6 is the print-
               er).  If you choose this option, a FTxxF001 DD statement will be necessary.
0          FTxx DD Statement Format
+          ____ __ _________ ______
           In the FTxx DD statement formats below, lowercase indicates that You are to sup-
           ply an appropriate value for that particular  parameter as explained in the fol-
           lowing:
0          WYL.gg.uuu.dsname
+          ___ __ ___ ______
           Your account number and the name of a file on disk (e.g. WYL.C2.N81.STUDY1).
0          t
+          _
           Primary allocation of disk storage space in tracks.
0          tt
+          __
           Secondary allocation of disk storage space in tracks.   (The quantities t and tt
           vary depending on the nature and quantity  of your data;  see the following,  or
           see Consulting if you need help in determining them.)
-
-
-
                                                - 4 -
1
-          6.2   READING DATA (OR PROGRAMS) FROM DISK
+          6.2   READING DATA (OR PROGRAMS) FROM DISK
+                _______ ____  __ ________  ____ ____
0          To read data from disk, use this form of the FTxx statement:
0               //FTxxF001  DD  DSN=WYL.gg.uuu.dsname,DISP=SHR
0          Note that blanks occur only before and after  the "DD" and that only zeros occur
           in "FTxxF001" (xx is the appropriate unit number).  This form of the FTxx state-
           ment assumes that the file (or data set) named is cataloged.  (For a data set to
           be cataloged means that  the system maintains information as to  the location of
           that data set;  thus, additional JCL parameters on the FTxx DD statement are not
           necessary.)   If  the file  is not  cataloged,  catalog  it before  running your
           MINITAB program.   (The WYLBUR command "CATALOG dsname" will do it.)   Note that
           MINITAB cannot read EDIT format data sets.
0          Examples:
+          ________
0          Suppose your account number  is E4.A15 and your data is  cataloged on disk under
           the name DATA:
0               //FTxxF001 DD DSN=WYL.E4.A15.DATA,DISP=SHR
0          If you have a data set that  isn't cataloged,  several additional parameters are
           necessary:
0               //FTxxF001  DD  DSN=WYL.E9.C32.START,UNIT=DISK,VOL=SER=PUB004,DISP=OLD
-
0          6.3   WRITING DATA TO DISK
+          6.3   WRITING DATA TO DISK
+                _______ ____ __ ____
0          To write data to disk, use this form of the FTxx DD statement:
0               //FTxxF001  DD  DSN=WYL.gg.uuu.dsname,DCB=CARD,
0               //  SPACE=(TRK,(t,tt),RLSE),DISP=(NEW,CATLG),UNIT=DISK
0          Note that  blanks occur  before and after  "DD" and  before "SPACE"  but nowhere
           else.   Only zeros occur in "FTxx001".   (Again, xx is the appropriate unit num-
           ber.)   This form of  the FTxx DD statement will catalog your  data set on disk.
           Note that only one data set with a particular name can be cataloged.
-          NOTE:   If you use the OUTUNIT command,   DCB=CARD will not work.   In this case
           substitute:
0               DCB=PRINT
0          Example:
+          _______
0          Suppose your account number is E4.A15, you want your data set to be named TEST2,
           and two tracks with one track of secondary allocation will suffice:
-                                               - 5 -
1
-               //FTxxF001  DD  DSN=WYL.E4.A15.TEST2,DCB=CARD,
0               //  SPACE=(TRK,(2,1),RLSE),DISP=(NEW,CATLG),UNIT=DISK
0          This statement will reserve  space on disk for the file TEST2  and this data set
           will be cataloged.
0          Because MINITAB can  handle only a limited  amount of data (20,000  numbers at a
           maximum),  the size  of a disk data set  written by MINITAB has  an upper limit.
           Depending on  the nature  of the  data,  this upper  limit varies  from 4  to 11
           tracks.   The consequence of this limit is  that coding t=6 and tt=6 will handle
           any data set that  MINITAB can write.   Any unused tracks  of disk storage space
           will automatically be released back to the system so you will not be charged for
           them.   If you prefer, you may determine t and tt as follows.   First,  estimate
           the number of "card images" you expect MINITAB to write to disk.  Calculate t by
           dividing this  estimate number by  230 and rounding  up to the  nearest integer.
           Calculate tt by taking one-third of t and rounding up to the nearest integer.
-
0          6.4   A WARNING ABOUT WRITING TO DISK
+          6.4   A WARNING ABOUT WRITING TO DISK
+                _ _______ _____ _______ __ ____
0          Using the WRITE control statement and its accompanying DD statement  to write to
           disk automatically  reserves disk space you  have requested at the  beginning of
           your MINITAB run.   Thus,  in the event the  run fails for any reason,  you will
           probably not have successfully saved your data;  however, the disk file reserved
           for MINITAB will be kept, either empty or partially filled, depending on the na-
           ture of the error.   To avoid disk storage charges for such disk files when your
           MINITAB program has failed,  insure that your data has been successfully written
           to completion.    A successful data  write will be  indicated by the  absence of
           MINITAB errors  before and  with the  WRITE/FPUNCH/PUNCH/OUTUNIT control  state-
           ment(s).   If your MINITAB run has failed to  save your data on disk,  delete or
           "scratch" the disk file that was reserved for your file.   If you have any prob-
           lems determining whether  your data has been successfully  saved,  or scratching
           disk files on runs that have failed, see the Consulting Office.
-
0          6.5   A WARNING ABOUT CATALOGING DATA SETS
+          6.5   A WARNING ABOUT CATALOGING DATA SETS
+                _ _______ _____ __________ ____ ____
0          When you delete or "scratch" a disk file,  it is also important to uncatalog it.
           If you use the WYLBUR SCRATCH command to delete it, specify ON CAT; e.g.,
0               SCRATCH STUDY2 ON CAT
0          You may use the  WYLBUR command UNCAT if you have already  deleted the disk file
           but not yet uncataloged it; e.g.,
0               UNCAT STUDY2
-
0                                               - 6 -
1
-          More information on cataloging  and the use of disks may be  found in "All About
           Disk Storage," available at Document Sales.
-
0                       7.  A NOTE ON STORING COMMANDS FOR REPEATED EXECUTION
+                       7.  A NOTE ON STORING COMMANDS FOR REPEATED EXECUTION
0          The STORE,   END,  and EXECUTE commands  are implemented in the  Campus Facility
           MINITAB II.  Additional JCL is not needed to use these commands, and they may be
           used in Class Q.
-
0                                          8.  KNOWN ERRORS
+                                          8.  KNOWN ERRORS
0          The sum of squares reported in regression  (from the REGRESS command)  is incor-
           rect if NOCONSTANT is in effect and there is only one predictor variable.
+               __                         ___
-
0                           Copyright 1978 by the Board of Trustees of the
                                  Leland Stanford Junior University
                                         All rights reserved
                               Printed in the United States of America
-                                 Center for Information Technology
                                         Stanford University
                                      Stanford, California 94305
-
-
-
-
-
-
-
-                                               - 7 -
