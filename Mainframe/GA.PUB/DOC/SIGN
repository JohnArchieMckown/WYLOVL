DOC#SIGN PUBLIC                            Latest update:  02/01/76
Information Technology Services            Creation date:  00/00/74
Stanford University                        Length:        203 lines


DESCRIPTION:

The SIGN program produces signs in large letters running down the
printer paper. Capital letters are 9.2 inches high; underhang for
small letters such as "g", "y", and "j" is 3.0 inches. The character
set includes 82 characters (capital and small letters, digits, and
20 punctuation marks) plus the blank. Underlining is also available.

FIELD OF APPLICATION:  Demonstration

MAIN PROGRAM SOURCE LANGUAGE:  Assembler

Assembler

PROGRAM STATISTICS:

   Program size: 15K
   Number of source statements: 869
   Names of all subprograms included in source code: None
   Names of all subprogram references to be resolved from existing
      libraries:  None

HARDWARE/SOFTWARE RESTRICTIONS:

Uses standard instruction set only. Standard OS input/ouput linkage
conventions (must be modified to run under DOS). Printer must have
line width of 132 or 144.

JCL REQUIREMENTS:


   //  JOB Statement
   /*KEY Statement (omit for WYLBUR job entry)
   //  EXEC SIGN
   //SYSIN DD *

   <-----input data

USE:

This program will print a sign in large letters on the printer. The
message printed may contain capital and small letters, digits, and
punctuation marks.  Escape characters are used to specify shifting
from upper case to lower case when inputting the message from cards,
since lower-case letters are not available on keypunches. When using
WYLBUR, the user may SET UPLOW and type in the message using upper-
and lower-case letters in a regular fashion without regard for shift
characters.  Several signs may be printed in the same job; the user
may specify a page skip at the beginning of each card (or in the
middle of a card via an escape character). A long message may be
continued across more than one card.

The character used to make up any given letter, digit, or
punctuation mark is obtained from a table in the program. The
letters and digits are made up of themselves: a letter "S" (capital
or small) is made up of many S's, and so on.  The punctuation marks
are in general made up of the letters with which their names begin;
thus, a period is made up of P's, and so on.

The input consists of a series of one or more cards. The program
uses the end-of-file indication to stop reading data; no special
end-of-data card is used.  The first character of each card (column
1) is a carriage control character. It should be "1" if the program
is to skip to a new page before printing the data on the card;
otherwise, it should be blank. Any other carriage control character
will be treated as a blank. The balance of the card (columns 2-80)
is used for the message. The following characters are supported:

      Space (blank)
      Capital A-Z; small a-z
      Digits 0-9
      . (period)         , (comma)       / (slash )         ) (right paren)
      ( (left paren)     + (plus sign)   - (minus sign)    = (equals sign)
      @ (at sign)        * (asterisk)    $ (dollar sign)   ' (apostrophe)
      ' (opening quote)  : (colon)       ; (semicolon)     ? (question mark)
      % (percent sign)   & (cent sign)   # (number sign)   ! (exclamation point)

NOTE: The opening single quote is represented in the input by the
double quote mark ("). Thus, an opening double quote mark is
represented as the two characters  ''. The apostrophe should be used
for the closing single quote mark.

The following escape characters do not themselves appear in the
output, but perform special functions:

~ (logical not) means the rest of the card is ignored, and the
program goes on to the next card. Trailing blanks (beyond the first)
are ignored unless followed by a . Thus, the ~ is only required when
extra blanks are specifically desired at the end of a message.

\ (reverse slash, 0-2-8 punch) means that the next character is to be
printed starting at the top of a new page. (The same effect may be
achieved by starting a new card with a "1" in column 1 -- see above.)

_ (underscore) means that the following characters are to be
underlined.  This underlining continues until turned off by a
vertical slash (see below) or until the end of the card is reached.
If underlining is already on, the underscore character is ignored.

| (vertical slash) turns off the underlining feature set by a
preceding underscore character on the same card. If underlining was
not on, then this character is ignored.

> (greater-than sign) means that any following capital letters are
to be treated as lower-case letters. (Use this feature to input
lower-case letters from card input.) This action continues until a
less-than sign occurs or until the end of the card is reached. If
the lower-case conversion is already in effect when a > is
encountered, the escape character is ignored. (Digits and
punctuation are not affected by lower-case conversion.)

< (less-than sign) turns off the effect of a preceding >. If
lower-case conversion was not already set when the < sign occurs,
the < is ignored.

When running from WYLBUR, the user should give the command SET UPLOW
just before typing in the input data, type upper- and lower-case
letters as usual, then give the command SET UPPER when finished
typing the data.  This way, the > and < escape characters need not
be used.

The default conditions, established anew for each new input card,
are "no conversion to lower-case" and "no underlining."

ERROR CONDITIONS:

No error conditions are detected by the program. The following input
errors would have the following effects:

If a character is encountered in the input which is not included in
the program's character set, it is ignored, it is not treated as a
blank.

If the last character printed before a top-of-form skip in the
middle of the message happens to end in the first two lines of a new
page (counting from the perforation), then the top-of-form skip will
not work. To prevent this, end the part of the message before the
skip with a blank.

PROGRAMMING METHOD:

The program uses a table-drawn generator to create the various
characters. For each character, the appropriate place in the tables
(the address of the first code for that character) is placed in
Register 8, and the codes are used by the generator to construct
each line and then print it the appropriate number of times.

The letter format table contains a series of halfwords. The first
byte of each code indicates the leftmost (or bottom-most, depending
on perspective) position in the line where a series of characters
are to be placed. The first position of the line (not counting a
carriage control character) is numbered zero. The second byte of the
code is the number of characters to be placed in the output area,
minus one. The print position is put in Register 6 and the character
count in Register 7; the starting position of the print line is
added to R6 via a Load Address instruction; and the characters are
transferred into the print line with an executed MVC instruction.

If the first byte of a format code (which usually indicates the
print position) is X'FF' or X'FE', then the line in the output area
is printed. The number of times to print it is given by the second
byte (not minus-one in this case).  Thus, X'FF01' means, "Print the
line just created one time." A loop using a BCT instruction is used
to control this printing. The idea of allowing a line to be printed
several times is that many characters use several identical lines in
succession (for example, the thick vertical bar of B, P, I, and L).
After printing the line the indicated number of times, the output
buffer is cleared to blanks in preparation for the next line. If the
first byte of a code is X'FE', then the line is printed as for
X'FF', but the interpretation of codes stops for that character, and
the program goes on to the next character. Thus, every line which
goes up to make a character is printed out via a code starting with
X'FF', except the last, which is printed out by a code starting with
X'FE'. Since the output buffer is cleared before constructing each
new line, a blank line is printed by using an X'FF' or X'FE' code as
the first (and only) code for that line. The blank space, for
example, is represented by 36 consecutive blank lines and is
accordingly produced by the single format code X'FE24'.

The great bulk of the program is to be found in the format tables,
which are almost 12,000 bytes long in total. The program itself is
addressable from a single base register.

SUBMITTAL INFORMATION:

   Programmer:  Richard B. Wales
   Affiliation:  I.T.S., Technical Support Services
   Date of last revision:  September 1974
   Date submitted:  December 1974

DISCLAIMER:

This program has been tested and has been found to operate as
described in this document. However, no warranty is expressed or
implied by this program for the individual application. The user is
responsible for the choice of the program and charges or problems
incurred. ITS will investigate errors that are reported in
sufficient detail but cannot guarantee their correction.
