DOC#MPS PUBLIC                             Latest update:  06/00/76
Information Technology Services            Creation date:  06/00/76
Stanford University                        Length:        503 lines


This is a guide to running a variety of Mathematical Programming
System (MPS) jobs on the IBM Data Center mainframe at Stanford.  For
some kinds of jobs, simple job setups are shown.  For others (i.e.,
MPSFORT) more detailed information and examples are presented.
Reference the documentation cited below for details on MPS.

DOCUMENTATION:

MPS and related programs are described in the following documents:

MPS/360 Version 2, Linear & Separable Programming User's Manual,
IBM GH20-0476

MPS/360 Version 2, Control Language User's Manual, IBM GH20-0290

MPS/360 Version 2, Read Communications Format (READCOMM) Program
Reference Manual, IBM GH20-0372

EASYMPS, I.T.S. Document


JOB SETUPS:

When required on a DD statement, replace "WYL.gg.uuu.dsname" with
your account and data set name and "PUB00x" with a valid user volume
(currently PUB001 through PUB005).  Note that the statements within
each job must appear in the order shown.  That order may differ from
examples shown in the MPS manuals.  Note also that no SPACE
parameter is required in these examples because the cataloged
procedures allocate space for you.  If you submit your job from a
card reader rather than a terminal, you must include a /*KEY
statement after the JOB statement.  Refer to "Batch Processing" for
details on Job Control Language statements.

1.  TO COMPILE AND EXECUTE AN MPS PROGRAM

    //  JOB Statement
    //  EXEC  LPSYS
    //COMP.SYSIN  DD  *

    <-----MPS control program

    /*
    //GO.SYSIN  DD  *

    <-----MPS input matrix


2a. TO COMPILE AND SAVE AN MPS PROGRAM

    //  JOB Statement
    //  EXEC  LPSYSC
    //COMP.SYSMLCP  DD  UNIT=DISK,DISP=(NEW,KEEP),DSNAME=WYL.gg.uuu.dsname,
    //  VOL=SER=PUB00x
    //COMP.SYSIN  DD  *

    <-----MPS control program


2b. TO RETRIEVE A SAVED MPS PROGRAM

    //  JOB Statement
    //  EXEC  LPSYSGO
    //GO.SYSMLCP  DD  UNIT=DISK,DISP=SHR,DSNAME=WYL.gg.uuu.dsname,
    //  VOL=SER=PUB00x
    //GO.SYSIN  DD  *

    <-----MPS input matrix

3a. TO SAVE AN MPS BASIS ON DISK

    //  JOB Statement
    //  EXEC  LPSYS
    //COMP.SYSIN  DD  *

    <-----MPS control program

    /*
    //GO.PROBFILE  DD  UNIT=DISK,DISP=(NEW,KEEP),DSNAME=WYL.gg.uuu.dsname,
    //  VOL=SER=PUB00x
    //GO.SYSIN  DD  *

    <-----MPS input matrix


3b. TO RETRIEVE A SAVED MPS BASIS FROM DISK

    //  JOB Statement
    //  EXEC  LPSYS
    //COMP.SYSIN  DD  *

    <-----MPS control program

    /*
    //GO.PROBFILE  DD  UNIT=DISK,DISP=SHR,DSNAME=WYL.gg.uuu.dsname,
    //  VOL=SER=PUB00x
    //GO.SYSIN  DD  *

    <-----MPS input matrix


4a. TO SAVE AN MPS PROGRAM AND AN MPS BASIS ON DISK

    //  JOB Statement
    //  EXEC  LPSYS
    //COMP.SYSMLCP  DD  UNIT=DISK,DSNAME=WYL.gg.uuu.dsname,
    //  VOL=SER=PUB00x
    //COMP.SYSIN  DD  *

    <-----MPS control program

    /*
    //GO.PROBFILE  DD  UNIT=DISK,DISP=(NEW,KEEP),DSNAME=WYL.gg.uuu.dsname,
    //  VOL=SER=PUB00x
    //GO.SYSIN  DD  *

    <-----MPS input matrix


Note that no DISP parameter is required for COMP.SYSMLCP.  If you
wish to  code  one anyhow, then DISP=(NEW,PASS) must be used.


4b. TO RETRIEVE A SAVED MPS PROGRAM AND A SAVED MPS BASIS FROM DISK

    //  JOB Statement
    //  EXEC  LPSYSGO
    //GO.PROBFILE  DD  UNIT=DISK,DISP=SHR,DSNAME=WYL.gg.uuu.dsname,
    //  VOL=SER=PUB00x
    //GO.SYSMLCP  DD  UNIT=DISK,DISP=SHR,DSNAME=WYL.gg.uuu.dsname,
    //  VOL=SER=PUB00x
    //GO.SYSIN  DD  *

    <-----MPS input matrix

These statements must appear in the order shown above, even though
SYSMLCP holds the compiled program and PROBFILE the basis.  The
cataloged  procedure,  LPSYSGO,  looks for those statements in
alphabetical order.

5.  LINKING MPS AND FORTRAN VIA READCOMM

One of the additional facilities now available to MPS users at
Stanford is a program called READCOMM.  READCOMM (Read
Communications Format) allows you to write FORTRAN procedures to
augment the functions of MPS/360.  These FORTRAN subroutines can
access the internal MPS files for the purpose of making changes to
the data or, more typically, for preparing output reports with
increased clarity and simplicity of presentation.


5a.  FORTRAN Job Setup with READCOMM Interface

On pages 20-22 in the READCOMM manual is a discussion on link
editing FORTRAN procedures under MPS/360.  I.T.S. has placed all
the required READCOMM subroutines into libraries so that they are
available to you via the normal FORTRAN cataloged procedures.  Thus,
using JCL statements such as the following will accomplish the same
result as the examples in the manual.

The FORTRAN job should be compiled and link edited in the following
way:

    //  JOB Statement
    //  EXEC FORTHCL
    //FORT.SYSIN DD *

    <-----FORTRAN program

    /*
    //LKED.SYSLMOD  DD  UNIT=DISK,DISP=(NEW,KEEP),SPACE=(TRK,(5,1,1),RLSE),
    //  DSNAME=WYL.gg.uuu.dsname,VOL=SER=PUB00x
    //LKED.SYSIN DD *
       ENTRY MAIN
       NAME  progname (R)
    /*

Supply the appropriate group and user codes and a valid dsname in
place of "WYL.gg.uuu.dsname." Replace the x in "PUB00x" with a
number from 1 to 5.  Replace "progname" with a 1-8 character name,
e.g., MYPROG.

Note that the control statement indicated in the READCOMM manual on
page 20, i.e., INSERT READCOMM, is incorrect and unnecessary.  Mark
the manual accordingly.

5b.  MPS Job Setup with READCOMM Interface

To use a previously compiled FORTRAN procedure in conjunction with
MPS, you may use a cataloged procedure which simplifies the process
outlined in the READCOMM manual (pps.  25, 27).  All you need to do
is execute the procedure MPSFORT (rather than the usual LPSYS) and
supply the location of the compiled FORTRAN program.  The MPS job
should be set up in the following way:

    //  JOB Statement
    //  EXEC MPSFORT,LIB='WYL.gg.uuu.dsname',VOL=PUB00x
    //COMP.SYSIN DD *

             <-----body of the MPS program, finishing with

             FREECORE
             progname
             EXIT
             PEND
    /*
    //GO.SYSIN DD *

    <-----MPS input matrix

Replace "WYL.gg.uuu.dsname," "PUB00x" and "progname" with the
respective names  used in the FORTRAN job in section 5a.

5c.  Example

Later in this document is a full-blown example of how a FORTRAN
procedure can be used to augment MPS/360 to enhance the clarity of
MPS output for report writing, etc.  The FORTRAN output procedure is
taken from the READCOMM manual, p. 23; the MPS example is the
Sherman Motors problem discussed in the EASYMPS manual,
appropriately modified for MPSFORT.  Note the differences in JCL
between the READCOMM manual example and the proper setup to run at
Stanford.

Later in this document is a listing of a FORTRAN program that
retrieves and prints the filed LP solution using MPSFORT.  The
program prints the three arrays filed by the SOLUTION procedure of
MPS.  The first array is an identification array (SOLUTION) that
specifies the status of the LP solution contained in the following
two arrays (RSECTION and CSECTION).  For a complete understanding of
the FORTRAN program and the arrays it is accessing, see the
discussion of the SOLUTION procedure in the Linear and Separable
Programming User's Manual, pps. 62-69.

Later in this document is a listing of the MPS control program.
Note that the FORTRAN-written procedure MYPROG is not known to MPS
at compile time.  The compiler, therefore, produces an appropriate
diagnostic message (see 5e.1.).  One must code the ND (no
diagnostics) parameter in the PROGRAM statement in order to reduce
the diagnostic from an error to a warning.


    //FORTRAN  JOB  (MPS$SI,915,.25),'YOUR NAME'
    //  EXEC FORTHCL
    //FORT.SYSIN DD *
          INTEGER    FILE,INDIC,N,TYPE(30)
          DOUBLE PRECISION NAME,COLUMN(30),VALUES(30)
    C
    C     ESTABLISH FT04F001 AS THE INPUT FILE FROM MPS
          FILE = 4
          CALL POSITN ( FILE,INDIC )
    C
    C     GET THE IDENTIFICATION ARRAY
          CALL ARRAY  ( FILE,INDIC,NAME )
          CALL COLNAM ( FILE,TYPE,COLUMN,NUMBER )
          CALL VECTOR ( FILE,INDIC,VALUES )
    C
    C     PRINT THE IDENTIFICATION ARRAY, ONE VALUE PER LINE
          WRITE (3,11) NAME
      11  FORMAT(1H1,35X,'PRINTOUT OF THE FILED ',A8)
    C
          DO 16 N=1,NUMBER
             IF (TYPE(N)-3) 12,12,14
    C
    C     NUMERIC VALUE
      12  WRITE (3,13) COLUMN(N),VALUES(N)
      13  FORMAT(1H0,35X,A8,' = ',D18.8)
          GO TO 16
    C
    C     ALPHAMERIC VALUE
      14  WRITE (3,15) COLUMN(N),VALUES(N)
      15  FORMAT(1H0,35X,A8,' = ',A8)
    C
      16  CONTINUE
    C
    C     GET THE ROW AND COLUMNS SECTIONS
      21  CALL ARRAY ( FILE,INDIC,NAME )
          IF (INDIC-1) 31,31,22
      22  WRITE (3,11) NAME
    C
          CALL COLNAM ( FILE,TYPE,COLUMN,NUMBER )
          WRITE (3,23) ( COLUMN(N),N=1,NUMBER )
      23  FORMAT(1H0/1H ,A8,1X,A8,4X,A8,12X,A8,12X,A8,8X,A8,8X,A8,11X,A8/)
    C
      24  CALL VECTOR ( FILE,INDIC,VALUES )
          IF (INDIC-1) 21,21,25
    C
      25  WRITE (3,26) ( VALUES(N),N=1,NUMBER )
      26  FORMAT(A9,A12,D15.8,D20.8,D16.4,D16.4,D20.8,F11.0)
          GO TO 24
    C
      31  RETURN
          END
    /*
    //LKED.SYSLMOD  DD  UNIT=DISK,VOL=SER=PUB004,DISP=(NEW,KEEP),
    //   DSN=WYL.SI.MPS.MYLIB,SPACE=(TRK,(5,1,1),RLSE)
    //LKED.SYSIN DD *
       ENTRY MAIN
       NAME  MYPROG (R)
    /*
    //MPS  JOB  (MPS$SI,915,.25),'YOUR NAME'
    //  EXEC MPSFORT,LIB='WYL.SI.MPS.MYLIB',VOL=PUB004
    //COMP.SYSIN DD *
             PROGRAM ('ND')
             TITLE ('EXAMPLE OF USER PROCEDURE USING READCOMM')
             INITIALZ
             MOVE(XDATA,'MATRIX')
             MOVE(XPBNAME,'PROBLEM')
             CONVERT
             SETUP('MAX')
             MOVE(XOBJ,'PROFIT')
             MOVE(XRHS,'CONSTR')
             PRIMAL
             SOLUTION
             RANGE
    *
             ASSIGN ('SOLN','FT04F001','COMM')
             PREPOUT ('SOLN')
             SOLUTION ('FILE','SOLN')
             FREECORE
             MYPROG
    *
             EXIT
             PEND
    /*
    //GO.SYSIN DD *
    NAME          MATRIX
    ROWS
     L  STAMP
     L  ENGASS
     L  M101A
     L  M102A
     G  CONTRACT
     N  PROFIT
    COLUMNS
        M101      STAMP     1
        M101      ENGASS    1
        M101      M101A     1
        M101      CONTRACT  1
        M101      PROFIT    300
        M102      STAMP     .714
        M102      ENGASS    2
        M102      M102A     1
        M102      PROFIT    350
    RHS
        CONSTR    STAMP     2500
        CONSTR    ENGASS    3333
        CONSTR    M101A     2250
        CONSTR    M102A     1500
        CONSTR    CONTRACT  240
    ENDATA
    /*

5d.  Sample Output

Below is a listing of the contents of the SOLUTION array and the
contents of the RSECTION and CSECTION arrays as printed by the
FORTRAN-written MYPROG.



                                  PRINTOUT OF THE FILED SOLUTION
                                  *        = IDENT
                                  METHOD   = LP
                                  TARGET   = MAX
                                  STATUS   = OPTM
                                  ITERNO   =     0.30000000D 01
                                  FUNCTION =     0.83796375D 06
                                  DATANAME = MATRIX
                                  PROBNAME = PROBLEM
                                  ROWS     =     0.60000000D 01
                                  COLUMNS  =     0.20000000D 01
                                  OBJ      = PROFIT
                                  RHS      = CONSTR
                                  PARAMVAL =     0.0
                                  PARAMROW =
                                  CHROW    =
                                  PARAMCOL =
                                  CHCOL    =
                                  BOUNDS   =
                                  RANGES   =
                                  FLAGS    = NONE
                                  PERTURBN =     0.0
                                  TITLE    = EXAMPLE




                                  PRINTOUT OF THE FILED RSECTION

*        STATUS      ACTIVITY            SLACK               LLIMIT          ULIMIT          DUALACT            NUMBER

STAMP       UL       0.25000000D 04      0.0                -0.4523D 75      0.2500D 04     -0.19440123D 03         1.
ENGASS      UL       0.33330000D 04      0.0                -0.4523D 75      0.3333D 04     -0.10559875D 03         2.
M101A       BS       0.20375100D 04      0.21248988D 03     -0.4523D 75      0.2250D 04      0.0                    3.
M102A       BS       0.64774487D 03      0.85225488D 03     -0.4523D 75      0.1500D 04      0.0                    4.
CONTRACT    BS       0.20375100D 04     -0.17975100D 04      0.2400D 03      0.4523D 75      0.0                    5.
PROFIT      BS       0.83796375D 06     -0.83796375D 06     -0.4523D 75      0.4523D 75      0.10000000D 01         6.




                                  PRINTOUT OF THE FILED CSECTION

*        STATUS      ACTIVITY            ICOST               LLIMIT          ULIMIT          RCOST              NUMBER

M101        BS       0.20375100D 04      0.30000000D 03      0.0             0.4523D 75      0.0                    7.
M102        BS       0.64774487D 03      0.35000000D 03      0.0             0.4523D 75      0.0                    8.

5e.  Interpreting READCOMM-related Error Messages

MPS is noted for its somewhat cryptic and often obscure error
messages.  For that reason, I.T.S.  has included below a list of
common problems that may arise when mixing FORTRAN and MPS via
READCOMM, and the appropriate corrective action to be taken.


l.  What would appear at first glance to be an error message,

    0081        INVALID FUNCTION NAME.

is always produced at the end of the compile step of MPSFORT (see
READCOMM manual, p.  26).  This message alone provides no clue as to
whether there is indeed an error in the compile step.  The key to
knowing if the step was successfully executed is to look for the
message:

    IEF142I - STEP WAS EXECUTED - COND CODE 0000

in the job log under the compile step.  If instead you find

    IEF142I - STEP WAS EXECUTED - COND CODE 0004

then the job was unsuccessful, even though a level 4 error is, in
most languages, only a warning.  Check to make sure that the
parameter 'ND' was coded on the MPS procedure statement PROGRAM, the
first MPS language statement in the job.  A correct formulation is:

    //COMP.SYSIN DD *
             PROGRAM ('ND')

             <-----body of the MPS program

             PEND
    /*


2.  A C13 abend which appears in the job log as:

$14.34.41 JOB 1017 -- EXAMPLE -- BEGINNING EXEC - INIT 11- CLASS E
 14.35.23 JOB 1017 IEC153I C13-04,EXAMPLE,GO,STEPLIB-002,165,PUB004,WYL.SI.MPS.MYLIB
 14.35.16 JOB 1017 IEC153I C13-04,EXAMPLE,GO,STEPLIB-002,165,PUB004,WYL.SI.MPS.MYLIB
 14.35.19 JOB 1017 IEF450I EXAMPLE .GO      .         ABEND SC13       TIME=14.35.19
$14.35.37 JOB 1017 END EXECUTION.


means that the library name, "WYL.gg.uuu.dsname," specified in the
LIB parameter on the // EXEC MPSFORT statement cannot be found.

3.  TERMINAL ERROR MESSAGE FROM SUBROUTINE READCOMM, ENTRYPOINT POSITN
    DATA SET NUMBER 04 NOT DEFINED OR NOT ASSIGNED TO COMMUNICATIONS FORMAT

This message means the ASSIGN and PREPOUT MPS subroutines have not
established a link between MPS and the FORTRAN procedure because of
an improper or nonexistent FT04 device reference in the MPS program.
Using the example in 5c above, the output from valid ASSIGN and
PREPOUT subroutine calls will resemble:

        ASSIGN        TIME   0.00 MINS

           ASSIGN - "SOLN    " TO "FT04F001" , "COMM    "

        PREPOUT

           FILENAME "SOLN    " READY FOR OUTPUT

4.  Note that invocation of the MPS subroutine FREECORE (as one must
do just prior to calling the FORTRAN subroutine in the MPS program)
will clear the problem setup from memory, thus aborting any
subsequent MPS subroutine calls that depend on the problem
information.  For example, this order of MPS statements:

         PRIMAL
         SOLUTION
         FREECORE
         progname
         RANGE

will cause the following error message when MPS tries to execute the
RANGE subroutine:

       RANGE

       TIME =     0.24 MINS.   ITERATION NUMBER =      21

        PROBLEM NOT SETUP.  RANGE ABANDONED

See the example in 5c for correct statement order.
