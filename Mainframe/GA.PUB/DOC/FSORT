DOC#FSORT PUBLIC                           Latest update:  07/01/77
Information Technology Services            Creation date:  00/00/77
Stanford University                        Length:         81 lines


             FSORT -- Linkage to SYNCSORT from FORTRAN

This subroutine provides the linkage required for invoking the
SYNCSORT package from an executing FORTRAN program.  Note that FSORT
is NOT compatible with WATFIV.

USE:    CALL FSORT(SORT,RECORD,IRET,ISIZE)

where   SORT    is an array containing the SORT statement
        RECORD  is an array containing the RECORD statement
        IRET    is an integer variable to contain the return code --
                   0 = normal end
                  16 = abnormal end
        ISIZE   (optional) is the size option for SYNCSORT.
                If present, this is either an integer variable
                containing the SIZE (in bytes) to be used, or a
                variable or literal containing the string "MAX".
                If this parameter is omitted, the default size
                will be used.

The SORT and RECORD statements may be up to 200 bytes in length.
The first character must be a blank; their syntax is identical to
that required if invoking SYNCSORT directly as a closed program.
That is, the words SORT and RECORD must be surrounded by blanks.
Refer to "Using the Batch Sorting Utility at Stanford" or the
current SYNCSORT Programmer's Guide for detailed information on
these control cards and on requirements of the SORTWKxx data sets.

The following example illustrates several features of the interface
which might apply in a typical application. (The example is a simple
one of illustration; the same function could be performed simply by
using one of the SORT procedures.)  The program reads the file of
card images on unit 5 (SYSIN) and writes them to a temporary file on
unit 1, calls for a sort on columns 12-15, then reads and prints the
resulting sorted file. Note, in particular:

  (1) SORTFILE is allocated and cataloged in the FORT step,  making
      it available for multiple DD references in the GO step;

  (2) A RECORD statement is required when SYNCSORT is invoked via
      FSORT;

  (3) The necessity of referring to SORTFILE by both a FORTRAN  and
      a SORT ddname was accommodated here by cataloging the data set
      in a preceding  step  (note that a data set cannot be PASSed to
      multiple ddnames in the same step).

EXAMPLE:

  //  JOB
  //  EXEC  FORTCG
  //FORT.ALLO  DD  DSN=WYL.SZ.A99.SORTFILE,UNIT=DISK,DCB=CARD,
  //             DISP=(NEW,CATLG),SPACE=(TRK,(5,1),RLSE)
  //FORT.SYSIN  DD  *
        REAL*4 SORT(7)/' SORT FIELDS=(12,4,CH,A) '/,DATA(20),
       *     RECORD(7)/' RECORD TYPE=F,LENGTH=(80) '/
   1    READ(5,9001,END=2)DATA
   9001 FORMAT(20A4)
        WRITE(1,9001)DATA
        GOTO 1
   2    REWIND 1
        CALL FSORT(SORT,RECORD,IRET,'MAX')
   3    READ(1,9001,END=4)DATA
        WRITE(6,9002)DATA
   9002 FORMAT(1X,20A4)
        GOTO 3
   4    STOP
        END
  //GO.FT01F001 DD DSN=WYL.SZ.A99.SORTFILE,DISP=OLD
  //GO.SORTIN   DD DSN=WYL.SZ.A99.SORTFILE,DISP=OLD
  //GO.SORTOUT  DD DSN=WYL.SZ.A99.SORTFILE,DISP=OLD
  //GO.SORTWK01 DD UNIT=SYSDA,SPACE=(TRK,(5,20))
  //GO.SORTWK02 DD UNIT=SYSDA,SPACE=(TRK,(5,20))
  //GO.SORTWK03 DD UNIT=SYSDA,SPACE=(TRK,(5,20))
  //GO.SYSIN    DD  *
  <-----  Input data
