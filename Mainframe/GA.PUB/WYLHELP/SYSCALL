.cs 2 on
.item 'SYSCALL Statement' 'Added 12/21/87 by AHJ'
.boxon
SYSCALL system-procedure(argument[,argument...])
.boxoff

.* DESCRIPTION
(** Extended EXECs Only **)
There is a special class of procedures called system procedures that are
invoked with the SYSCALL command.  These are procedures that can be done more
efficiently through WYLBUR's internal functions than through individual
coding.

The system procedures are documented in the Extended Exec Files document,
available from PUBLISH; type the command PUBLISH and choose the category
"languages".

One commonly-used SYSCALL procedure is the SCAN procedure, which scans a
string for tokens.  Its syntax is:

   SYSCALL SCAN (token,string[,type,skip,stop])

token  passed    string variable in which to put the token
       returned  token scanned from the start of the string

string passed    string to scan
       returned  string with the token removed

type   passed    string variable in which to put the token's type
       returned  the type of the token scanned:
                    NULL, ALPHA, NUMBER, or others

skip   passed    characters to skip before the start of the scan
                 not modified

stop   passed    character on which to stop scan not modified

Other system procedures manipulate lines in active files.  Some of these may
be done as easily with the LINE functions (type HELP FUNCTION LINE.) The cc in
the syntax below indicates an optional variable that receives a condition code
(a string.)

LINE_GET (line-no, contents [,cc] [,active-no])
returns the contents of the specified line number (line-no) in the string
variable passed to receive its contents (contents).

LINE_PUT (line-no, string [,cc] [,active-no])
puts the specified text string into the line specified with line-no.  If there
is already text in the line, it is replaced.  If the line does not exist, it
is inserted.

LINE_APPEND (string [,cc] [,active-no])
appends the specified text as the last line of the active file.

LINE_FIRST (line-no, contents [,cc] [,active-no])
finds the first line with a line number equal to or higher than line-no.  If
line-no exists in the file, LINE_FIRST returns its contents into the string
variable passed for the line contents.  If line-no does not exist, LINE_FIRST
finds the first line with a line number greater than line-no.  It returns the
number of the line found in line-no.

LINE_LAST (line-no, contents [,cc] [,active-no])
finds the line with a line number equal to or less than line-no.  If line-no
exists in the file, LINE_LAST returns its contents into the string variable
passed for the line contents.  If line-no does not exist, LINE_LAST finds the
line with the next smallest line number.

LINE_PREV (line-no, contents [,cc] [,active-no])
finds the line immediately before line-no, returns the text of the line in the
string variable passed to receive the contents, and returns the line number of
the previous line in line-no.

LINE_NEXT (line-no, contents [,cc] [,active-no])
finds the next line after line-no, returns the text of the line in the string
variable passed to receive the contents, and returns the line number of the
next line in line-no.
.cs 2 off
