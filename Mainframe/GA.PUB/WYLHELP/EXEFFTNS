.cs 3 on
.cs 2 on
.item 'EXEC File Functions' 'Updated 1999/12/01 by MCL'
EXEC File Functions

.* DESCRIPTION
When writing EXEC files, there are many EXEC file functions that help you
manipulate strings, evaluate numbers, examine data sets, or issue prompts.
These functions all take an input expression and return either a string, a
number, or TRUE/FALSE.  You must provide a variable for the function
to return, even if you do not care about the return code.  For
example, x = LINE_PUT(10,'testing').

String functions:       INDEX, FIND, VERIFY, SIZE, SUBSTR, UPPER, LOWER, LINE,
                        LINE_PUT, LINE_DELETE, LINE_APPEND,  COPIES,
                        LEFT, RIGHT, CENTER, REVERSE, STRIP, ABBREV, SQUASH,
                        MATCH, RMATCH, TRANSLATE.
Number functions:       ABS, INT, FORMAT, LNO, LNO_FIELD, MIN, MAX.
Variable functions:     VARTYPE.
Conversion functions:   SHEX, NHEX, SCONVERT, NCONVERT, DISPLAY, ASCII,
                        EBCDIC, PARITY, NOPARITY, XRANGE.
Disk file functions:    DSNINFO, DSNFORMAT, DSNVERIFY.
Input/Output functions: INCHAR, INPUT, YESNO.
Bit string functions:   BITTEST, BITAND, BITOR, BITXOR.
Line number functions:  LNO, LNO_END, LNO_FIELD, LNO_FIRST, LNO_LAST, LNO_NEXT,
                        LNO_PREV.
Misc. functions:        ACCOUNT_INFO


.* SELECT 'EXEC File Functions'
.us 'Function Descriptions'

.* OPTION INDEX
.ix 'INDEX Function'
INDEX(string,substring)
returns the starting position (column) of a substring within a string.  If the
substring is not contained in the string, WYLBUR returns the value of 0.  For
example, INDEX('OK YES','YES') returns the value of 4.

.* OPTION FIND
.ix 'FIND Function'
FIND(string,string)
returns the column position of the first character in the first string that is
also contained in the second string.  If none of the characters in the first
string are in the second, WYLBUR returns the value of 0.  The characters in
the two strings need not be in the same order.  For example,
FIND('Argentina','ne') returns the value of 4.

.* OPTION VERIFY
.ix 'VERIFY Function'
VERIFY(string,string)
verifies that each character in the first string is represented in the second
string.  If this is the case, WYLBUR returns the value 0.  Otherwise, WYLBUR
returns a value that is the column position of the first character in the
first string that is not represented in the second string.  The characters in
the two strings need not be in the same order.  For example,
VERIFY('1285','0123456789') returns the value of 0.

.* OPTION MATCH
.ix 'MATCH Function'
MATCH(string,substring[,options])
returns TRUE if the string starts with the substring specified.
"options" is string with characters indicating the options:
         c - do case independent match
         b - skip over leading blanks
For example, MATCH('Tiny tim','TINY','C') would return TRUE.

.* OPTION RMATCH
.ix 'RMATCH Function'
RMATCH(string,substring[,options])
returns TRUE if the string ends with the substring specified.
"options" is string with characters indicating the options:
         c - do case independent match
         b - skip over trailing blanks
For example, RMATCH('Tiny tim','TIM','C') would return TRUE.

.* OPTION SIZE
.ix 'SIZE Function'
SIZE(string)
determines the number of characters in a string, including trailing blanks.
For example, SIZE('Glenda ') returns the value of 7.

.* OPTION SUBSTR,SUBSTRING
.ix 'SUBSTR Function'
SUBSTR(string,integer[,integer])
produces a substring of a string.  The first integer specifies the starting
column of the substring, and the second integer specifies the length.  For
example, SUBSTR('WYL.XA.WLN.SONG',5,6) returns the value of 'XA.WLN'.

If the second integer in the SUBSTR function is omitted (i.e., the length of
the substring), the remainder of the string after the starting column is
returned.  WYLBUR returns a null string (''), if the length integer is omitted
and the starting column is beyond the string, or if the length integer is
zero.  If the specified substring extends beyond the end of the string
expression, the resulting string is padded with blanks on the right.

.* OPTION UPPER
.ix 'UPPER Function'
UPPER(string)
changes all lowercase characters in a string to uppercase.  For example,
UPPER('chars=tn10') returns the value of 'CHARS=TN10'.

.* OPTION LOWER
.ix 'LOWER Function'
LOWER(string)
changes all uppercase characters in a string to lowercase.  For example,
LOWER('ALPHA') returns the value of 'alpha'.

.* OPTION LINE
.ix 'LINE Function'
LINE(line-number[,active-number])
returns the string consisting of the contents of the specified line in the
active file.  If the line number does not exist, WYLBUR returns a null string
('').  If the line does exist but is blank, WYLBUR returns a string consisting
of one blank (' ').  For example, LINE(1) returns the value of the contents of
line 1 in the active file.  LINE(1,2) returns the value of the contents of
line 1 in the active file number 2.

.* OPTION LINE_PUT
.ix 'LINE_PUT Function'
LINE_PUT(line-number,string[,active-number])
Puts the specified string in the specified line number.  The optional active
number specifies which active file to use.  This defaults to the current
active file.  If the specified line already exists, its contents are
replaced by the string.  If it does not exist, it is inserted.  LINE_PUT
returns the string 'OK' if the operation completes successfully.

.* OPTION LINE_DELETE
.ix 'LINE_DELETE Function'
LINE_DELETE(first-line,last-line[,active-number])
Deletes a specified range of lines in the active file.  The optional active
number parameter specifies a particular active file.  The default is the
current active file.  LINE_DELETE returns 'OK' if the delete completes
successfully.

.* OPTION LINE_APPEND
.ix 'LINE_APPEND Function'
LINE_APPEND(string[,active-number])
Adds a line containing the specified string to the end of the active
file.  The optional active number specifies which active file to
use.  The default is the current active file.  LINE_APPEND returns
the string 'OK' if the operation completes successfully.

.* OPTION COPIES
.ix 'COPIES Function'
COPIES(string,n)
returns "n" concatenated copies of "string".  "n" must be positive or 0.

.* OPTION STRIP
.ix 'STRIP Function'
STRIP(string[,[option][,char]])
removes leading, trailing, or both leading and trailing characters, depending
on whether L, T, or B is specified as an option.  The default is B (both).
"char" is the character to be stripped, which defaults to a blank.  For
example, STRIP(' ab c ','L') returns 'ab c '.

.* OPTION RIGHT
.ix 'RIGHT Function'
RIGHT(string,length[,pad])
returns a string of length "length" with the specified string aligned right in
it.  The returned string is either truncated or padded on the left as needed
to reach the specified length.  Unless specified, the pad character is a
blank.

   SV RIGHT('12',5,'0')     ----> '00012'

.* OPTION LEFT
.ix 'LEFT Function'
LEFT(string,length[,pad])
works like the RIGHT function only aligns the string left instead.

.* OPTION CENTER
.ix 'CENTER Function'
CENTER(string,length[,pad])
returns a string of length "length" with the specified string centered in it.
The string is either padded or truncated to meet the desired length.  If not
specified, the "pad" character defaults to a blank.  If there is an odd number
of characters to truncate or add, the right end of the string loses or gains
one more character than the left end.

   SV CENTER('The blue sky',8) ----> 'e blue s'

.* OPTION REVERSE
.ix 'REVERSE Function'
REVERSE(string)
returns the string, swapped end for end.

   SV REVERSE('12345')  ----> '54321'

.* OPTION SQUASH
.ix 'SQUASH Function'
SQUASH(string)
compresses multiple blanks to a single blank in the specified string.

.* OPTION ABBREV
.ix 'ABBREV Function'
ABBREV(information,info[,length])
returns TRUE if info is equal to the leading characters of information and
info is not less than the minimum length.  Returns FALSE if either of these
conditions is not met.  The minimum length defaults to the length of info.

.* OPTION ABS
.ix 'ABS Function'
ABS(number)
returns the absolute value of the specified number.

.* OPTION INT
.ix 'INT Function'
INT(number)
returns the integer value of the specified number, truncating any characters
after the decimal.

  SV INT(-199.84)  ---->  -199

.* OPTION FORMAT
.ix 'FORMAT Function'
FORMAT(number,before,after)
formats the given number.  "before" and "after" describe how many characters
to use for the integer part and decimal parts.  A value of -1 for either of
these values uses the number of characters needed for each part.

  SV FORMAT (128.1,2,3)   ----> '28.100'

.* OPTION MIN
.ix 'MIN Function'
MIN(number[,number]...)
returns the smallest number of the specified list.

.* OPTION MAX
.ix 'MAX Function'
MAX(number[,number]...)
returns the largest number of the specified list.

.* OPTION VARTYPE
.ix 'VARTYPE Function'
VARTYPE('variable-name')
returns the variable type of the specified variable: NUMBER, STRING,
BOOLEAN, ARRAY, or UNDEFINED.  Note that the variable name is itself
a string and must be specified in quotation marks or apostrophes.

.* OPTION NCONVERT
.ix 'NCONVERT Function'
NCONVERT(expression)
converts the value of the specified string expression to a number.
For example, NCONVERT('12') returns the value of 12.

.* OPTION SCONVERT
.ix 'SCONVERT Function'
SCONVERT(expression)
converts the value of the specified numeric expression to a string.
For example, SCONVERT(12) returns the value of '12'.

.* OPTION DISPLAY
.ix 'DISPLAY Function'
DISPLAY(expression)
converts the specified expression into its internal hexadecimal
representation.  If the expression is a string, the result is a string twice
its length, since each character of the string is represented by two
hexadecimal characters.  For example, DISPLAY('$R') returns the value of
'5BD9'.

If the expression is a whole number, the result of a DISPLAY function is
always 8 characters long, even if leading zeros must be added.  For example,
DISPLAY(15) returns the value of '0000000F'.

DISPLAY converts decimal numbers by multiplying the number by 1000 and then
converting it to hex.  For example, DISPLAY(1.) returns the value of
'000003E8'.

SHEX and NHEX are the inverse of the DISPLAY function.  They are used to
convert a hexadecimal string to an expression.

.* OPTION SHEX
.ix 'SHEX Function'
SHEX(expression) or S'hexadecimal string'
converts a hexadecimal string to its EBCDIC equivalent.  This function can be
used to create any of the possible 256 character codes.  For example, SHEX
('5F') returns ~.  As most of these 256 characters are not printable on the
terminal, a # is printed instead.  Decimal integer expressions are allowed.
Since the decimal representation of 5F is 95, SHEX(95) would also yield the
value ~.

.* OPTION NHEX
.ix 'NHEX Function'
NHEX(expression) also, N'hexadecimal string'
converts a hexadecimal string to an integer.  For example, NHEX('FF') returns
the value of 255.

.* OPTION EBCDIC
.ix 'EBCDIC Function'
EBCDIC(string)
converts an ASCII string to EBCDIC.

.* OPTION ASCII
.ix 'ASCII Function'
ASCII(string)
converts an EBCDIC string to ASCII.

.* OPTION PARITY
.ix 'PARITY Function'
PARITY(string)
converts the string to even-parity.

.* OPTION NOPARITY
.ix 'NOPARITY Function'
NOPARITY(string)
converts the string to no (zero) parity.

.* OPTION TRANSLATE
.ix 'TRANSLATE Function'
TRANSLATE (string[,tableo][,[tablei][,pad]])
translates characters in the given string to other characters specified.
"tablei" is the input translate table, or the characters to be translated, and
"tableo" is the output translate table, or what the characters are to be
translated to.  The pad character, if specified, replaces any characters in
the input translate table that are not replaced by the output translate table.
Without translate tables, the TRANSLATE function translates the string to
uppercase.

   SV TRANSLATE('abcdef','12','ec')       ----> 'ab2d1f'
   SV TRANSLATE('abcdef','12','abcd','.') ----> '12..ef'

.* OPTION XRANGE
.ix 'XRANGE Function'
XRANGE([start][,end])
returns all one byte EBCDIC codes between and including the values "start" and
"end".  If "start" is greater than "end", the returned values wrap from X'FF'
to X'00'.  "start" and "end" must be single characters.  This is usually used
in conjunction with the TRANSLATE function.

   SV XRANGE('0','4') ----> '01234'

.* OPTION DSNINFO
.ix 'DSNINFO Function'
DSNINFO('dsname options')
returns information on the location, size, format, etc. for any online OS
dataset on the system.  This is the same information as returned by SHOW
DSNAMES INTERNAL.

The information returned is positioned as follows:

    COLUMN RANGE   INFORMATION
    1-6            Volume containing the dataset
    8-51           Fully qualified dataset name
    53-57          Number of tracks used
    59-63          Number of tracks allocated
    65-67          Number of Extents
    69-70          DSORG ("PO", "PS", etc.)
    73-77          RECFM ("U   ", "FBA ", etc.)
    79-83          LRECL
    85-89          BLKSIZE
    89193          KEYLEN ("000" if not keyed)
    95-102         Creation date (mm/dd/yy)
    104-111        Last access (mm/dd/yy)
    113/113        Data set modified flag: Y=modified since last backup
    115/122        Device type code (8 hex digits)
    124/131        Device model name (e.g. "3390")
    135/142        Space used, Kbytes
    144/151        Space allocated, Kbytes
    153/160        Storage Class, blank if not system-managed dataset
    162/169        Management Class or blank
    171/178        Data Class or blank
    179/235        Reserved for future changes

It returns a null string if the information is not available (the data set
does not exist, is offline, is in use, etc.)

Fields described as "reserved" and any columns not described above may change
without advance notice.  This includes blank columns otherwise used as
separators between items.  In EXEC files that processe this information, you
should not rely on any such columns being blank -- use the SUBSTR function to
extract the field(s) you want.

.* OPTION DSNVERIFY
.ix 'DSNVERIFY Function'
DSNVERIFY('dsname options'[,'access options']) verifies the existence and
status of a dataset in the OS file system.  The first parameter is a string
holding the standard WYLBUR options describing a dataset ('LIB',
'WYL.GG.UUU.MINE', etc.).  The second parameter (optional) is a string
describing the requested level of access (READ or WRITE); if omitted, READ
access is checked.

DSNVERIFY returns one of the following strings:

 "NOT THERE"-- Dataset not cataloged or not on the volume
 "OK"       -- Dataset is present and could be USEd (unless it is an
                entire library, in which case you must USE a member)
 "IN USE"   -- Dataset is "in use" (enqueued by another process) in a way
               that precludes the requested access.  For a READ request,
               the other process has an exclusive enqueue; for a WRITE
               request, the other process has either a shared or exclusive
               enqueue.
 "NO ACCESS"-- You do not have the requested level of access to the dataset
               (default is READ, see below)
 "OFFLINE"  -- Volume holding the dataset is offline
 "UNUSABLE" -- Dataset is unusable (bad RECFM for WYLBUR, I/O errors,
                or other "system" reasons).
 "BAD MEMBER"- Library member does not exist
 "BAD DSN"  -- Dataset name isn't a valid one

Note:  If a library is allocated without a format option to set RECFM, and no
members have ever been saved it it, it will show as "UNUSABLE" (because RECFM
will not be set).

.* OPTION DSNFORMAT
.ix 'DSNFORMAT Function'
DSNFORMAT('dsname options')
Returns a string containing the fully qualified dataset name for the specified
OS data set.  The dataset may be specified in any valid WYLBUR forms
(including ACCOUNT, USER, GROUP, &user.name, or library member names).  Note
that this does not verify that the dataset actually exists.

This function returns the string "BAD DSN" if the given data set
name isn't valid to begin with (e.g., it begins with a number).
.* OPTION INPUT
.ix 'INPUT Function'
INPUT(prompt-string [, options-string])
Reads information from the terminal user (this can be used
instead of the READ STRING command).  The return code for the INPUT
function is stored in the variable IORESULT.  The prompt-string is
text to be written before the input is read.  The options-string is
an optional string in quotation marks containing one or more of the
following words, separated by blanks or commas:

UPPER       return the text in upper case only, instead of upper and
            lower.  Text is returned in the variable IORESULT.

ATTN        allow ATTN (instead of causing a EXEC break.)  The
            variable IORESULT will be set to ATTN.  If the user
            types ? followed by an ATTN, it will still cause an EXEC
            break, with IORESULT being set to ATTN. The break can be
            prevented by prefixing the command with the TRY prefix.

CLEAN       Don't allow TO messages to interrupt.

NOECHO      Don't echo what is being typed.

NOSTARS     Don't display "***" and a new line if ATTN is pressed.

MAX=n       Maximum number of characters allowed.

TRANSPARENT Advanced option; don't do any translation of the
            input text; text will be returned in ASCII.

INTERRUPT   Advanced option; allows user path posts to halt the
            read.  IORESULT will have the value "INTERRUPT".

RUNDOWN=n   Advanced option; specifies the exact number of
            characters to read.

SLOWLIST    Advanced options; flags sent to the front-end computers
NOMODEL     about how to treat the text.
UNFORMATTED

.* OPTION INCHAR
.ix 'INCHAR Function'
INCHAR(prompt[,option-string])
Reads a single character from the terminal user.  The return code
for the INCHAR function is stored in the variable IORESULT (OK, ATTN
or TIMEOUT.)  This is similar to the INPUT function except it
returns a single character.  It can only work on the ALF and ELF
front end controllers; it will not work on 3279-type terminals.

The option-string is an optional string containing one or more of
the following words:

ECHO            Echo the character typed.

NOECHO          Don't echo the character (default is ECHO).

TRANSPARENT     Return the input character in ASCII.

NOTYPEAHEAD     Forces characters typed in by the user
                before the prompt was written to be thrown away.

CLEAN           Don't allow TO messages to interrupt.

FORCE           Advanced options.  See description of these
INTERRUPT       options for the INPUT function.

TIMEOUT=n       Number of seconds before the read aborts
                with IORESULT set to "TIMEOUT".

.* OPTION YESNO
.ix 'YESNO Function'
YESNO('prompt string'[,'options'])
Appends the string " (Yes/No)?" to the specified string as a prompt.
The function returns a string based on the response to the prompt:

      "ATTN"  -- Attention key was pressed
      "YES"   -- "Yes" (or "Y") or "OK"
      "NULL"  -- carriage return alone
      "NO"    -- "No"

The options string specifies which responses you will accept, such
as yes, no, null, and attn.  If you do not specify any, it will
accept only yes or no, reprompt with just a return, and break with
an attn.  If you specify ATTN and/or NULL, you must also specify YES
and NO.

.* OPTION BITTEST
.ix 'BITTEST Function'
BITTEST, BITAND, BITOR, BITXOR are bitwise logical functions.  All arguments
are expressed as decimal integers but are processed as bit strings.  The
argument "15" represents the hex string "0F" which is binary "00001111".
Operations are performed on these bits and the result is again expressed an an
integer.  The integers are stored in fullwords, so 31 bits are available.

.* OPTION BITTEST
.ix 'BITTEST Function'
BITTEST(var,mask)
yields a boolean (true/false) result.  The bits in "var" are tested using the
bits in "mask".  The result is true (1) if all bits in "var" that correspond
to "mask" are 1, and false (0) otherwise.

.* OPTION BITAND
.ix 'BITAND Function'
BITAND(var1,var2)
is the bitwise AND of the two variables; that is, each bit in the result is 1
if (and only if) the corresponding bit in both arguments is 1.

.* OPTION BITOR
.ix 'BITOR Function'
BITOR(var1,var2) is the bitwise OR:  result bit is 1 if either of the argument
bits is 1, or if both are 1; zero if both argument bits are zero.

.* OPTION BITXOR
.ix 'BITXOR Function'
BITXOR(var1,var2)
is the bitwise exclusive OR:  result bit is 1 if one argument bit is 1 and the
other is zero, and is zero if both arguments are zero or both are 1.

.* OPTION LNO
.ix 'LNO Function'
LNO(number)
returns the number in the general form of a WYLBUR line number, from 0 to
2147483.647.  The number will be truncated (but not rounded) to 3 decimal
places.  The result can be an invalid line number, since line numbers cannot
exceed 99999.999.  A negative number, or a number larger than the upper limit,
will cause an error.

.* OPTION LNO_END
.ix 'LNO_END Function'
LNO_END(active-file-number)
returns the line number of the last line in the specified WYLBUR active file.
The current active file can be specified by the variable "actno", like this:
LNO_END(ACTNO)

.* OPTION LNO_FIELD
.ix 'LNO_FIELD Function'
LNO_FIELD(number)
returns the number as a 9-character string in the fixed form of a WYLBUR line
number, from 0 to 99999.999.  The number will be truncated (but not rounded)
to 3 decimal places.  A negative number or a number larger than the limit
will cause an error.

.* OPTION LNO_FIRST
.ix 'LNO_FIRST Function'
LNO_FIRST(line-number[,active-file-number])
returns the number of the first line in the active file that is greater than
or equal to the "line-number" given as the first parameter.  If there is no
active file, or if the specified line-number is higher than any in the active
file, the function returns -1.  The optional second parameter can be used to
specify an active file other than the current one.

.* OPTION LNO_LAST
.ix 'LNO_LAST Function'
LNO_LAST(line-number[,active-file-number])
returns the number of the first line in the active file that is less than
or equal to the "line-number" given as the first parameter.  If there is no
active file, or if the specified line-number is less than any in the active
file, the function returns -1.  The optional second parameter can be used to
specify an active file other than the current one.

.* OPTION LNO_NEXT
.ix 'LNO_NEXT Function'
LNO_NEXT(line-number[,active-file-number])
returns the number of the first line in the active file that is greater than
the "line-number" given as the first parameter.  If there is no active file, or
if the specified line-number is higher than any in the active file, the
function returns -1.  The optional second parameter can be used to specify an
active file other than the current one.

.* OPTION LNO_PREV
.ix 'LNO_PREV Function'
LNO_PREV(line-number[,active-file-number])
returns the number of the first line in the active file that is less than
the "line-number" given as the first parameter.  If there is no active file, or
if the specified line-number is less than any in the active file, the function
returns -1.  The optional second parameter can be used to specify an active
file other than the current one.

.* OPTION ACCOUNT_INFO
.ix 'ACCOUNT_INFO Function'
ACCOUNT_INFO(account,type)
returns the desired "type" of information for the given account, which must be
specified in GG.UUU form (the XACCOUNT variable returns the current account in
that form).  The available types, which should be enclosed in quotes, are:

    user_name      - the string set by the user with the SET NAME command
    mail_message   - the message set for the account with the SET MAIL command
.cs 2 off
.cs 3 off
