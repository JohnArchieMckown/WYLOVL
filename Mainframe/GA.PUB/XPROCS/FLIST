;
;
;  flist - list from library members or catalog data sets
;
;  command usage:
;   flist <assoc range> from [<lib-specs>|<cat specs>] <col-opts>
;
;  <lib specs>:
;        any thing that you would put after a "SHOW DIR FOR" ..
;  <cat specs>:
;        anything that would follow a "SHOW CAT" the word
;        cat must be included.
;
;  examples:
;        flist c'read' and ~'*'1 from lib
;        flist 'TEST' from cat lik font collect clear
;        flist 'LTORG'10 from &usr.source
;        flist c'bobby' or c'xx.bob' from lib like memo
;
;  rev ml  1996/04/10:  recover from membername syntax error
;  rev ml  1995/06/27:  error handling
;  wrt ch  1993/03/00
;
xproc () begin

  ; ignore attns during initialization
  on attn cmd ' pcall ignore_attn '
  ; set error exit
  on error cmd ' pcall error '
  set exec llimit 10000

  ; declare variables
  dcl string range               ; range to list
  dcl string lib_specs           ; lib (cat) specifications
  dcl string col_opts            ; collect options
  ;dcl string x.file_names[...]  ; list of file names
  x.orig_prefix = prefix         ; save true prefix

  ; open temp active file
  x.act = actno
  open flist title 'flist temporary active' temp
  x.temp = actno
  pick &(x.act)

  ; allow attentions
  on attn cmd ' pcall attn '  interrupt

  ; scan command
  pcall scan_command (parm_count,parm_string, \
    range,lib_specs,col_opts);

  ; check for valid range
  pcall check_range(range)

  ; get member or  data set list
  pcall init_filelist(lib_specs)

  ; process collect options if any
  pcall process_col_opts(col_opts)

  ; list from files
  pcall filelist(range,x.file_names[])

  ; all done, cleanup and return
  pcall cleanup
  xreturn
end


;  scan_command
;
;  scan range, options
;
proc scan_command (pc,ps,range,lib_specs,col_opts) begin

  dcl string token,remain,type
  remain = ps
  if (strip(ps) eq '') pcall error_msg( \
    'Command Usage: flist <range> from <lib-name or cat> <collect-opts>')
  if (pc ne -1) pcall error_msg(ps||': invalid options')
  ;  scan: <range> from <lib-specs> <col-opts>
  syscall scan_parm(token,remain,type,' ,',' ,;=''"')
  while (( not abbrev('FROM',upper(token),3)) and \
      (token ne '')) begin
    syscall scan_parm(token,remain,type,' ,',' ,;=''"')
  end
  if (not abbrev('FROM',upper(token),3)) begin
    pcall error_msg('Missing "from" <data set specification>. ')
  end
  range = strip(substr(ps,1,size(ps)-size(remain)-size(token)))
  ps = substr(ps,size(ps)-size(remain)+1)
  syscall scan_parm(token,remain,type,' ,',' ,;=''"')
  while (( not abbrev('COLLECT',upper(token),3)) and \
      (token ne '')) begin
    syscall scan_parm(token,remain,type,' ,',' ,;=''"')
  end
  lib_specs = strip(substr(ps,1,size(ps)-size(remain)-size(token)))
  col_opts = strip(token||remain)
  return(range,lib_specs,col_opts)
end


;
;  check range
;
;  this is just a small test meant to catch any crummy
;  range specification early.
;
proc check_range(range) begin
  pick &(x.temp)
  putline 0 &(range)
  putline 99999.999 &(range)
  try quiet list &(range)
  if (tryerr) begin
    try list &(range)
    pcall error_msg('Invalid range specification.')
  end
  delete f/l
  pick &(x.act)

  ; check for first,f,last,l ... these are invalid
  range = strip(upper(range))
  if (range eq 'FIRST' or range eq 'F') begin
    pcall error_msg('first: invalid for external files')
  end
  if (range eq 'LAST' or range eq 'L') begin
    pcall error_msg('last: invalid for external files')
  end
end


;  init_filelist
;
;  initialize file list either with library member names or
;  with cataloged data set names
;
;  lib_specs - library member (catalog) specifications
;  x.file names - array of lib member names (returned)
;
;  x.file_names is declared and set up by this procedure, we
;  hold off until here to set up the data set name array so
;  that we can declare the array the right size.
;
proc init_filelist (lib_specs) begin

  ; make sure we are using temp active
  pick &(x.temp)

  ; local variables
  dcl string token  ; scan token work string
  dcl string text  ; active file text work string
  dcl string lib_name  ; lib data set name if lib
  dcl number lno  ; working line number
  lno = end

  temp = upper(lib_specs)   ; convert lib (cat) specs to upper
  syscall scan (token,temp)

  cases begin
    case (token ne 'CAT') begin      ; if lib, get member names

      ; if '*' lib, resolve to prefix
      if (token eq '*'  and  x.orig_prefix ne '') begin
         syscall scan(token,lib_specs)
         lib_specs = x.orig_prefix || ' ' || lib_specs
      end

      ; dump directory for lib
      try dump dir for &(lib_specs)
      if (tryattn) pcall attn
      if (tryerr) pcall error_msg ('Error ('||tryid||') reading directory of '||lib_specs)

      ; declare names array
      count first/last quiet
      dcl string x.file_names[count]

      syscall line_get(lno,text)   ; get lib name
      syscall scan(token,text)
      syscall scan(token,text)
      syscall scan(lib_name,text)

      ; read in member names
      ch 9/120 to '' in first/last nolist  ; get member names
      syscall line_next(lno,text)
      syscall line_next(lno,text)
      syscall line_next(lno,text)
      i = 1
      while (lno ne -1.000) begin
        x.file_names[i] = lib_name||'#'||text
        syscall line_next(lno,text)
        i = i+1
      end
    end
    case (token eq 'CAT') begin   ; if CAT, get member names

      ; dump cat of data set names
      try dump &(lib_specs)
      if (tryattn) pcall attn
      if (tryerr) pcall error_msg (lib_specs||': invalid')

      ; declare names array
      count first/last quiet
      dcl string x.file_names[count+2]

      ; read in catalog data set names
      syscall line_get(lno,text)
      if ( not (abbrev(text,'No data sets found',10))) begin
        i = 1
        while (lno ne -1.000) begin
          x.file_names[i] = text
          syscall line_next(lno,text)
          i = i+1
        end
      end
    end
  end
  try delete first/last  ; clear end of dump active file
  pick &(x.act)
end


;
;  process collect options
;
proc process_col_opts(col_opts) begin
  pick &(x.act)
  try syscall collect_scan(col_opts)
  if (tryerr or tryattn) begin
    comm Command stopped.
    pcall cleanup
    xreturn
  end
  if (strip(col_opts) ne '') begin
    pcall invalid(col_opts)
  end
end


;  filelist - list from specified files
;
;  file_name[] - array of file names, terminated by '' element
;  range - range to list (eg. c'big' and ~'*'1 )
;
proc filelist (range,file_name[]) begin

  i = 1
  while (file_name[i] ne '') begin
    ; see if this file contains any lines in range
    try quiet count &(range) (1) from &(file_name[i])
    if (tryerr and (substr(trymsg,1,3) eq '(1)')) \
      try quiet count &(range) from &(file_name[i])
    if (tryattn) pcall attn
    if (tryerr) begin
      ; if library we call flist recursively
      if (tryid eq 'NOMEMBER') begin
        ; xc xprocs#flist / &(range) from &(file_name[i])
        comment &(file_name[i])
        comment    *** library ***
      end
      ; if list failed, we don't know why so let it fail and report problem,
      ; then continue                                      ml960410
      else begin
        comment
        comment &(file_name[i])
        try list &(range) from &(file_name[i])
        if (tryerr) begin
          wri 'Error ('||TRYID||') reading '||file_name[i]
          end
      end
    end
    ; if all ok, and lines were found, list them
    else begin
      if (count gt 0) begin
        comment
        comment &(file_name[i])
        list &(range) from &(file_name[i])
      end
    end
    i=i+1
  end
end


;
;   ignore attn routine
;
proc ignore_attn () begin
  clear attn
  on attn reset
end

;
;  attn routine - clean up actives and exit
;
proc  attn () begin
  dumpflag = false
  if (attnid ne 'MSGGIVEN') begin
    if (xdump) dumpflag = true
    clear xdump
    comm Command stopped.
    if (dumpflag) set xdump
  end
  pcall cleanup
  xreturn attn attnid=MSGGIVEN
end


;
;  error routine - clean up actives and exit
;
;  this routine processes unanticipated errors. for
;  unanticipated errors we print exec error line info.
;  otherwise we do not, we hide that command is an exec.
;  a few errors are anticipated and processed separately
;  below.  they are:
;
;  if dump error, do not print errid
;
proc  error () begin
  ; if dump error, do not print exec error info
  if (errid eq 'BADXDUMP') begin
    pcall cleanup
    xreturn err errid=BADXDUMP errmsg=''
  end
  ; unanticipated error, print it all
  comm &(errinfo)
  pcall cleanup
  xreturn err errid=&(ERRID) errmsg='Flist failed.'
end

;
;
;  give error message, clean up and exit
;
;
proc error_msg (msg) begin
  clear xdump
  pcall cleanup
  xreturn errid=BADFLIST errmsg='&(msg)'
end


;  cleanup
;
;  close temp active file, give last line msg if dumping
;
proc cleanup () begin
  ; ignore attentions during cleanup, we are going to exit anyway
  on attn cmd = 'pcall ignore_attn '
  on error cmd = \
    'xreturn errid=BADFLIST errmsg="Flist failed.  (during cleanup)"'
  ; close temp active file
  pick &(x.temp)
  close
  if (xdump) begin
    dcl num dumpline,dumpnext,dumpdelta,dumpact
    syscall collect_get_info(dumpline,dumpnext,dumpdelta,dumpact)
    pick &(dumpact)
  end
end
