;
;   WHEEL OF FORTUNE
;
;   In honor of Vanna.
;
;
; To use:
;  XCALL <this program>
;  Type 'HELP' at the prompt.
;
; Technical details:
;
;  The sayings are retrieved from a file that consists of the
;  following:
;     1.  the text of the saying / a hint
;     2.  Haste makes waste / Proverb
;  If you don't want a hint leave off the '/', no punctuation
;  may be in the text, because it is impossible to guess a 'comma'
;  or a 'period', etc.
;
;  The saying is masked using the translate function, we start by
;  masking all chars,,, ie trans(saying,'***...','ABCD...')
;  This translates all chars to stars   ie.  ABCD -> ****
;  To unmask a character (for example A), we simply do not mask it
;  ie.  *BCD -> ****, in this case 'A' is not explicitly changed to
;  a '*' and so it is not masked.  in function form:
;  translate(saying,'*** ...','*BCD ..') would not translate 'A' to
;  a star.  The translate list is found in x.letter_list.  To
;  update the x.letter_list we translate A -> * this is done with:
;  translate(x.letter_list,'*','A').  This is the basic idea...
;
;  The program is simple and consists of one main loop that asks
;  for, input.  A routine is called to handle each request.  If
;  the request does not make sense, some "HELP" comments are given.
;  the rest is explained below.
;
;
xproc () begin
   pcall initialize
   pcall main_loop
end

;
; initialize global variables
;
proc initialize () begin
   x.letter_list = \
      'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
   x.saying = ''
   x.wof_data_set = 'wyl.gg.pub.wheel.of.fortune'
   count from &(x.wof_data_set) quiet
   x.wof_count = count
end

;
;  main program loop,
;
proc main_loop () begin
   ; loop forever
   while (true) begin
      ; read input
      cmd = input('<.f+><.b+>Wheel of Fortune <.f-> ?<.b-> ','attn')
      if (ioresult eq 'ATTN') xreturn
      ; process input request
      cmd = strip(upper(cmd))
      cases begin
         case (cmd eq '') begin
         end
         case (abbrev('START',cmd,2)) begin
            pcall start
            pcall display
         end
         case (abbrev('SPIN',cmd,2)) begin
            pcall spin
         end
         case (abbrev('GUESS',cmd,1)) begin
            pcall guess
         end
         case (abbrev('BUY',cmd,3)) begin
            pcall buy
         end
         case (abbrev('BUZZ',cmd,3)) begin
            pcall guess_title
         end
         case (abbrev('QUIT',cmd,1)) begin
            xreturn
         end
         ; if none of the above give help
         case (true) begin
            pcall help
         end
      end
   end
end

;
;  start game
;
;  create random number between 1 and size of sayings file
;  read line to end of active, use line as saying, and then delete
;
proc start () begin
   ; reinitialize everything
   pcall initialize
   ; get random number, appropriately scaled
   n = 0
   while (n le 0 or n gt x.wof_count) begin
      n = random
      n = int(n*x.wof_count+1)
   end
   ; read line to end of active file from sayings file
   ; put line in x.saying and then delete
   mark = end
   copy &(n) to end from &(x.wof_data_set)
   x.saying = strip(line(&(mark)))
   delete &(mark) nolist
   ; if a hint is given, give it
   if (verify('/',x.saying) eq 0) begin
      comment
      comment Hint: &(strip(substr(x.saying,index(x.saying,'/')+1)))
      comment
      x.saying = strip(substr(x.saying,1,index(x.saying,'/')-1))
   end
end

;
;  spin,  give a dollar amount in $100's, weight lower values
;
proc spin () begin
   n = random                ; get random from .999 to .0
   if (n gt .5) n = random   ; double low numbers frequency
   if (n lt .1) n = .1       ; minimum of 100 (.1)
   if (n gt .97) n = 1       ; make some 1000's
   n = (int(n*10))*100       ; get in range of 1000-100 by 100s
   if (n gt 950) comment ** $1000 **
   else comment $ &(n)
end

;
;  guess
;
;  ask for input letter (may not be vowel), fix up the list
;  of which characters are masked.
;
proc guess () begin
   ; ask user to input letter, repeat until valid input
   valid_letters = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'
   repeat begin
      letter = input('input letter? ','max=1,attn')
      if (ioresult eq 'ATTN') return
      if (letter eq '') return
      if (verify(letter,'aeiouAEIOU') eq 0) begin
         comment Vowels cannot be guessed only bought.
         return
      end
   end
   until (verify(letter,valid_letters) eq 0)
   ; fix list of characters to mask
   x.letter_list = translate(x.letter_list,'**', \
      upper(letter)||lower(letter))
   ; if letter not in saying too bad for person guessing
   if (verify(upper(letter),x.saying) ne 0 and \
      verify(lower(letter),x.saying) ne 0 ) \
      comm sorry, you missed
   pcall display
end

;
;  buy
;
;  ask for input vowel. fix up the list of which characters
;  are masked.
;
proc buy () begin
   ; ask user to input vowel, repeat until valid input
   repeat begin
      letter = input('input vowel ? ','max=1,attn')
      if (ioresult eq 'ATTN') return
      if (letter eq '') return
   end
   until (verify(letter,'aeiouAEIOU') eq 0)
   ; fix list of characters to mask
   x.letter_list = translate(x.letter_list,'**', \
      upper(letter)||lower(letter))
   x.letter_list = translate(x.letter_list,'*',letter)
   ; if letter not in saying too bad for person guessing
   if (verify(upper(letter),x.saying) ne 0 and \
      verify(lower(letter),x.saying) ne 0 ) \
      comm sorry, you missed
   pcall display
end

;
;  guess saying
;
proc guess_title () begin
   title = input('title ? ','attn')
   if (title eq '' or ioresult eq 'ATTN') return
   if (strip(upper(title)) ne upper(x.saying)) begin
      comm You are WRONG @!        &(shex('2f402f402f402f'))
      comm <.u+>You LOOSE.<.u->    &(shex('2f402f402f402f'))
      pcall display
   end
   else begin
      comm <.u+>You WIN !!<.u->    &(shex('2f402f402f402f'))
      comm                         &(shex('2f402f402f402f'))
      comm >>>  &(x.saying)  <<<
      comm                         &(shex('2f402f402f402f'))
   end
end

;
;  Help - simple help for a simple game
proc help () begin
   comm
   comm START - start a game, start a new game
   comm SPIN - spin wheel for $$$$
   comm GUESS - guess a new letter
   comm BUY - buy a vowel
   comm BUZZ - guess the whole enchilada  (saying/title/etc.)
   comm QUIT - quit game
   comm
end

;
;  display saying, masked appropriately with stars
;  (see comments at start of file)
;
proc display () begin
   stars = '****************************************************'
   display = translate(x.saying,stars,x.letter_list)
   comm
   comm  >>>>  &(display)  <<<<
   comm
end
