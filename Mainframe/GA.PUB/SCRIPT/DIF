
                                                        +-------+
                                                        |  .IF  |
                                                        +-------+

IF causes conditional processing of an object "line" depending on
the relationship of two numeric or character-string quantities.

     +-------+---------------------------------------------+
     |       |                                             |
     |       |    s1  relation  s2  <line>                 |
     |  .IF  |                                             |
     |       |    n1  relation  n2  <line>                 |
     |       |                                             |
     +-------+---------------------------------------------+

<.B+>s1 and s2:  <.B->undelimited character strings, or delimited character<.NORMAL>
   strings that may contain any characters (including blank).
<.B+>n1 and n2:  <.B->integers or integer expressions containing no blanks.<.NORMAL>
<.B+>relation:  <.B->one of the following "relational operators",  preceded<.NORMAL>
   and followed by at least one blank:
     =    or   EQ   -   equal
     ~=   or   NE   -   not equal
     <    or   LT   -   less than
     >    or   GT   -   greater than
     <=   or   LE   -   less than or equal
     >=   or   GE   -   greater than or equal

   The  two character  or numeric  operands  and the  "relational
   operator" form a "condition" that is either "true" or "false".
   Multiple conditions may  occur in one .IF by using  one of the
   following "logical operators" between conditions:
     AND or &, OR or |
   such as:
     .if condition1 and condition2 <line>
   Evaluation of multiple conditions is done left to right.
<.B+><line>:  <.B->a  control-word or text  input line,  starting  with the<.NORMAL>
   first non-blank  character following the second  operand.   If
   omitted,  the  next logical  input line  will be  used as  the
   <line> operand.¡¡ If the condition is true, the <line> operand
   is processed;  otherwise,  the <line> operand will be excluded
   from processing.   The THEN (.TH) and ELSE (.EL) control words
   may be  used instead  of <line>  to provide  one <line>  to be
   processed if the  condition is true and a  different <line> to
   be processed if the condition is false.   A series of .IFs may
   be nested up  to ten levels by  making an .IF the  object of a
   .TH or an .EL.  See the .TH and .EL descriptions for details.

This control word does not cause a break; the <line> operand may.
_____________________

¡¡ The "next logical input line" consists of everything up to the
   first following control-word separator (see .CW) or the end of
   the physical input record, whichever occurs first.

If both operands  are valid numerics or  numeric expressions then
the comparison will  be between two signed integers.    If one of
the operands is  not a valid numeric expression  then the compar-
ison will  be between  two character  strings using  the standard
EBCDIC collating sequence.    If the two character  strings to be
compared have unequal lengths,  then  the comparison will be done
from the  start of both  strings with  the minimum length  of the
two.  If those characters are the same then the shorter string is
considered to be the smaller.

<.U+>EXAMPLES<.NORMAL>
(1) .if 'A' eq A .ty this is always true
(2) .if 9 eq +11-4 .ty this is never true
(3) .if &SYSPAGE/2*2 eq &SYSPAGE .cp
    If the current output page number is even,  the ".cp" will be
    executed.   This  may make an  interesting example,   but the
    result  can   be  achieved  by   ".PA ODD"  with   much  less
    complexity.
(4) .if &number = 'roman' or &number = 'ROMAN'
    .   .th .do
    .       .pn roman
    .   .do end
    .   .el .do
    .       .pn arabic
    .   .do end
    This will set subsequent page  numbering to roman numerals or
    arabic numerals depending on the value of "&number".

