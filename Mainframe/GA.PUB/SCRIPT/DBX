
                                                        +-------+
                                                        |  .BX  |
                                                        +-------+

BOX generates  the horizontal  lines and  initiates the  vertical
lines of a box.

     +-------+---------------------------------------------+
     |       |                                             |
     |       |    <h1 </> ... hn>                          |
     |  .BX  |    <NEW|ON|OFF|SET> <h1 </> ... hn>         |
     |       |    <CANCEL>                                 |
     |       |    <CHAR name>                              |
     |       |                                             |
     +-------+---------------------------------------------+

SCRIPT  generates a  box by  constructing  line segments  through
character positions or "cells".

<.B+><.U+>Line Segments<.NORMAL>

There are only  four possible line segments in  a character cell,
each of  which can  be described  in terms  of movement  from the
center of the cell to one of its four sides:
(1) horizontal right  (from the center of  the cell to  the right
    side of the cell)
(2) horizontal left (from the center of the cell to the left side
    of the cell)
(3) vertical ascender (from the center of  the cell to the top of
    the cell)
(4) vertical descender (from the center of the cell to the bottom
    of the cell)

In the operand descriptions below,  the following two generaliza-
tions are made:
(1) horizontal  rule (all  of the  horizontal  segments from  the
    center of one cell  to the center of a cell  somewhere to the
    right on the same output line)
(2) vertical rule  (a vertical line from  the top of one  cell to
    the bottom of that same cell;   that is,  a vertical ascender
    plus a vertical descender)

<.B+><.U+>Operands<.NORMAL>

<.B+><h1 </>  ...  hn>:  <.B->When  used with numeric  operands "h1 ... hn"<.NORMAL>
   only,  .BX begins a single box by generating a horizontal rule
   with  vertical descenders  in  the  specified columns;   if  a
   previous box is still in effect,   then the horizontal rule is
   generated from the leftmost vertical position of the two boxes
   to the  rightmost vertical  position of  the two  boxes,  with
   vertical ascenders in  the vertical positions of  the previous
   box,  and the previous box  definition is terminated.   On all
   subsequent output  lines until  the next  .BX control  word is
   encountered, vertical rules will be generated in the specified

   columns.

      The numeric  operands are  relative to  the current  ADJUST
   (.ad) value, and must be specified in increasing column order.
   A signed numeric operand is relative to the preceding operand.

      When a Box definition is in effect  and a .BX with no oper-
   ands is encountered,  a horizontal  rule is generated from the
   leftmost vertical position to the rightmost vertical position,
   with vertical ascenders and descenders  in all of the vertical
   positions.

      A  single  numeric operand  defines  a  box with  only  one
   vertical descender.

      The character '/' between numeric operands defines multiple
   side-by-side boxes between  which no horizontal rules  will be
   generated.
<.B+>ON <h1  </> ...   hn>:  <.B->When a  box definition  is in  effect and<.NORMAL>
   SCRIPT encounters a new box definition that is specified using
   only numeric  operands,  the horizontal  rule that  closes the
   first box  and starts  the second  box is  generated from  the
   leftmost to the rightmost of the vertical positions of the two
   boxes.  "ON" as the first operand of the second box definition
   will suppress those parts of the  horizontal rule that are not
   part of  either box,   in cases  where the  two boxes  are not
   vertically aligned.
<.B+>NEW <h1 </> ... hn>:  <.B->superimposes the definition for this box on<.NORMAL>
   top of the previous box definition.    If the new box overlaps
   the previous box,  none of the line segments "beneath" the new
   box will be generated.   This allows  boxes to be drawn within
   or on top of boxes.  The superimposed segments of the previous
   box will become  visible again once the new  box definition is
   terminated.

      If no column operands are present  or if no previous box is
   still in effect, then the "NEW" operand is ignored.
<.B+>SET <h1 </> ...  hn>:  <.B->is treated in all respects like "NEW" with<.NORMAL>
   the exception that the definition for  the new box is put into
   effect without generating the horizontal  rule or the vertical
   ascenders and descenders.
<.B+>OFF <h1 </>  ...  hn>:  <.B->terminates the definition  of the current<.NORMAL>
   box by generating the "bottom"  horizontal rule and the appro-
   priate vertical ascenders.

      Any numeric column operands used  with "OFF" will cause the
   horizontal  rule to  be  generated from  the  leftmost to  the
   rightmost  of the  combination of  the  defined and  specified
   vertical positions,  with  vertical ascenders in all  of those
   positions.   If  no box is in  effect when the OFF  is encoun-
   tered, only the numeric operands specified with the OFF deter-
   mine the positions of the  horizontal rule and vertical ascen-
   ders.

      If current box  was started with NEW or  SET,  the vertical
   descenders of the previous box will also be generated.
<.B+>CANcel  (alias  "DELETE"):   <.B->terminates  the  definition  of  the<.NORMAL>
   current box without generating its closing horizontal rule and
   vertical ascenders.
<.B+>CHAR <TRM|32T|TNC|38C|GPC|APL>:  <.B->specifies the character set that<.NORMAL>
   is to be used by SCRIPT in constructing the four line segments
   needed for boxes.  By default, when SCRIPT is producing output
   for a terminal,  the CHAR TRM set of "-",  "|" and "+" is used
   to give a  gross approximation of horizontal  rules,  vertical
   rules, and intersections.  In other cases, such as output to a
   line printer,  SCRIPT  uses the CHAR TNC  set of  special box-
   drawing characters for the TN print  train;  this results in a
   better approximation, although still not exact.  With the CHAR
   operand,  the  named set  of characters  will always  be used,
   independent of the output device.

      The IBM 3270  "text terminal" is specified  by "32T".   The
   IBM 3800 character set with the  long "or" bar is specified by
   "38C".   The IBM  3800 GP12 font without the long  "or" bar is
   specified by  "GPC".   The APL  character set is  specified by
   "APL".

<.B+><.U+>Debugging Aid<.NORMAL>

<.B+>CHAR HEX:   <.B->The HEX  operand is  provided as  a "debugging  aid".<.NORMAL>
   Each character  cell in  which one  or more  of the  four line
   segments occurs will  be printed using one  of the hexadecimal
   characters  in the  sequence  0123456789ABCDEF,  to  represent
   combinations of a  4-bit pattern "xxxx" where each "x"  is a 0
   or a 1.

      This pattern can best be discussed in terms of "8421".  The
   "8" position represents "vertical ascender".  The "4" position
   represents "vertical descender".   The "2" position represents
   "horizontal left".    The "1" position  represents "horizontal
   right".  Therefore, a character cell printed as "E" represents
   "1110",  which  indicates that  the cell  contains a  vertical
   ascender,  a vertical descender,  and  a horizontal left.   If
   CHAR TRM were in effect instead, SCRIPT would approximate that
   cell with a  "+",  which is clearly incorrect but  is the best
   that can be  done for that kind of output  device.   If SCRIPT
   must approximate,  it  does so by displaying  more than really
   exists, since displaying less could result in a blank cell.

This control word creates a break.

<.U+>EXAMPLES<.NORMAL>
(1) .in 4 0-4
    .bx 1 65
    .sk;.la ONE;.ce TWO;.ra THREE
    .sk;.bx
    This is a continued box showing
    formatted text in a box.

    .bx off
    produces:

+---------------------------------------------------------------+
|                                                               |
|   ONE                                                         |
|                              TWO                              |
|                                                       THREE   |
|                                                               |
+---------------------------------------------------------------+
|   This is a continued box showing formatted text in a box.    |
+---------------------------------------------------------------+

(2) .bx 20 +10;.sk;.bx;.sk;.bx 10 +30;.sk
    .bx 20 +10;.sk;.bx off
    produces:

                   +---------+
                   |         |
                   +---------+
                   |         |
         +---------+---------+---------+
         |                             |
         +---------+---------+---------+
                   |         |
                   +---------+

(3) .bx 10 +10 +10;.sk
    .bx new 15 +10;.sk;.bx off
    .sk;.bx off
    produces:

         +---------+---------+
         |         |         |
         |    +----+----+    |
         |    |         |    |
         |    +----+----+    |
         |         |         |
         +---------+---------+

(4) .bx 10 +20;.sk
    .bx set 15 +10;.sk
    .bx 20;.sk
    .bx can;.sk
    .bx off
    produces:

         +-------------------+
         |                   |
         |    |         |    |
         |    +----+----+    |
         |         |         |
         |                   |
         +-------------------+

(5) .bx 10 20 / 25 35;.sk
    .bx 15;.sk
    .bx 10 20 / 25 35;.sk
    .bx off
    produces:

         +---------+    +---------+
         |         |    |         |
         +----+----+    +---------+
              |
         +----+----+    +---------+
         |         |    |         |
         +---------+    +---------+

(6) .bx 22 28;.sk
    .bx 25;.sk
    .bx 7 19 31 43
    .bx can
    .bx set 7 / 19 / 31 / 43;.sk
    .bx on 4 10 / 16 22 / 28 34 / 40 46 / 52 58
    .bx new 46 52;.bx can
    .bx on 43;.sk
    .bx 34 52;.bx can
    .bx set 34 / 52;.sk
    .bx on 31 37 / 49 55;.sk;.bx off
    produces:

                     +-----+
                     |     |
                     +--+--+
                        |
      +-----------+-----+-----+-----------+
      |           |           |           |
   +--+--+     +--+--+     +--+--+     +--+--+     +-----+
   |     |     |     |     |     |     |     +-----+     |
   +-----+     +-----+     +-----+     +--+--+     +-----+
                                          |
                                 +--------+--------+
                                 |                 |
                              +--+--+           +--+--+
                              |     |           |     |
                              +-----+           +-----+

