
                                                        +-------+
                                                        |  .TR  |
                                                        +-------+

TRANSLATE allows the user to specify a translate table to be used
for output.

     +-------+---------------------------------------------+
     |       |                                             |
     |  .TR  |    <<s1 t1> <s2 t2> ...>                    |
     |       |    <s <<.U+>s<.U->|t>>                                |<.NORMAL>
     |       |                                             |
     +-------+---------------------------------------------+

This control word does not cause  a break.   Unless the TRANSLATE
option was specified when SCRIPT was invoked,  no output transla-
tion will take place until a .TR table has been defined.   Speci-
fying  .TR with  no  operands  eliminates all  previously-defined
output translations  and reinstates  that defined  if SCRIPT  was
invoked with the TRANSLATE option.

<.B+><s1  t1> <s2  t2>  ...:   <.B->adds the  specified  "source-to-target"<.NORMAL>
   translations to the translate table.   The  "s" and "t" can be
   single characters or two-digit hexadecimal values using upper-
   case or lowercase letters.   All  subsequent output lines will
   be printed with all occurrences of "s1" replaced by "t1", etc.
<.B+>s <<.U+>s<.U->|t>:   <.B->this form specifies  that "s"  is to be  translated to<.NORMAL>
   itself if a "t" is not specified.

Many of the common uses of .TR  can also be achieved by using the
&x' functtion.   No translation,   except uppercase conversion if
the TRANSLATE option was specified,  will  be in effect until .TR
is encountered with operands.

<.U+>NOTES<.NORMAL>
(1) The text of footnotes and other storage blocks are translated
    as they are input.
(2) The text of running titles  is translated using the translate
    table current when the title is output.
(3) SCRIPT control lines are never translated.
(4) Translate pairs remain active until explicitly re-specified.
(5) Hexadecimal numbers  are recognized  by the  presence of  two
    characters (instead of one)  and  may use uppercase or lower-
    case letters A-F.
(6) The last pair  in a .TR line  may consist of only  a "source"
    character, which indicates that the character is to be trans-
    lated into itself.

<.U+>EXAMPLES<.NORMAL>
(1) .TR 8D ( 9D ) B0 0 ... B9 9
    Causes  the superscript  parentheses and  numbers  of the  TN
    character set to display as ordinary parentheses and numbers.
(2) .TR % 7C
    Causes occurrences of the character "%" to be replaced by the

    character X'7C', the "@" character,  which may not be easy to
    enter into a  file by virtue of being  the "character delete"
    character in some systems.
(3) .TR 40 ?
    Causes all blanks to be appear as "?" on output.
(4) .TR 05 40
    This is an unsuccessful attempt  to remove all TAB characters
    from the input  and replace them with blanks.    It will fail
    because TAB characters are  expanded during input processing,
    not on output.

