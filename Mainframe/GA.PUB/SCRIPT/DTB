
                                                        +-------+
                                                        |  .TB  |
                                                        +-------+

TAB defines tab-stop positions for subsequent output lines,  or a
user-specified character to be recognized as  a TAB (hex code 05)
in addition to the TAB key on the terminal.

     +-------+---------------------------------------------+
     |       |                                             |
     |       |    <n1 n2 n3 ...>                           |
     |  .TB  |    <<'string'|char/>n<<.U+>L<.U->|R|C|'char'> ...>    |<.NORMAL>
     |       |    <SET <char>>                             |
     |       |                                             |
     +-------+---------------------------------------------+

This control word causes a break.

<.B+>SET <char>:   <.B->defines the user-specified single  character "char"<.NORMAL>
   that SCRIPT is to recognize as  a TAB character in addition to
   hex-code 05.   The ".TB" control word itself and ".  ", ".DO",
   ".EL",  ".SU",  ".TH"  and ".UR" will not  have their operands
   altered.

      If used without a "char",  it terminates the recognition of
   any previous user-defined TAB character.   (These capabilities
   are also provided by the ".DC TB" control word.)
<.B+>n1 n2 n3 ...:  <.B->defines the output-line tab-stop positions,  rela-<.NORMAL>
   tive to the current left page margin.   The tab-stop positions
   "n" must be specified in ascending order.   The "n" values may
   be specified  as absolute  positions,  or  as "+n"  meaning "n
   positions to the  right of the previous  tab-stop".   The fill
   strings for each  tab-stop position will be  the "blank",  and
   each tab-stop position will be  left-aligning (in the standard
   typewriter fashion).   At the start of SCRIPT processing, tab-
   stop positions are initially defined as 6, 11,  16,  ...,  and
   81.  If .TB is specified with no operands,  these initial tab-
   stop positions are re-instated.
<.B+>n<<.U+>L<.U->|R|C|'char'>:  <.B->specifies the type of alignment desired for the<.NORMAL>
   tab-stop position.  Each tab-stop position "n" may be followed
   by an L (left-aligning,  the default  if the alignment type is
   not specified), or an R (right-aligning),  or a C (centering),
   or a single delimited character  (meaning "align on that char-
   acter").
<.B+><'string'|char/>n:  <.B->specifies the fill string  or character to be<.NORMAL>
   used.   If no  fill string or character  is specified,  blanks
   will be used in filling to  that tab-stop position.   A single
   fill character may be specified as a delimited string,  in the
   form
     'char'n
   or in the form
     char/n
   but a multi-character fill string  must always be specified in
   the form

     'string'n
   The characters " and / may also be used to delimit the string.
<.B+><'string'|char/>n<<.U+>L<.U->|R|C|'char'>:  <.B->the complete specification of a<.NORMAL>
   tab-stop position, including both the fill string or character
   and the alignment type.  Each of the tab-stop positions on the
   .TB control line may be specified in this fashion.

Tabs in Multiple Column mode are relative to the beginning of the
column in which they occur.    Under CONCATENATE (.CO)  or FORMAT
(.FO),  tabbing beyond the end of  the output line still produces
the desired result.

<.B+><.U+>Fill-String Processing<.NORMAL>

Tab Characters present in text input lines are expanded by SCRIPT
into one or more "fill" characters (blanks, if not specified)  to
the next defined tab-stop position on the output line.  The hori-
zontal space between  the end of the previous text  and the start
of the next text (the tabulation  gap)  is "filled" with the fill
string.   If this is a single character,  the character is propa-
gated  throughout the  tabulation gap.    A multi-character  fill
string is handled as follows.

   The fill string is propagated in an internal workarea, and the
particular column bounds  of the tabulation gap are  then used to
extract the  portion required to  fill the tabulation  gap.   For
example, a fill string of "abc" in a tabulation gap from column 5
to  9  inclusive will  result  in  the character  string  "bcabc"
filling the  tabulation gap.   If  the tabulation gap  is smaller
than  the fill  string,   only a  subset of  the  fill string  is
extracted.   The tabulation gap for a character-aligning tab-stop
is handled by logically tabbing to  column "n" and then searching
for the alignment  character,  another TAB,  or end  of the input
line;  the length of the  tabulation gap is subsequently adjusted
so this character will be aligned in column n.

<.U+>NOTES<.NORMAL>
(1) Upon encountering a phrase which  cannot be centered or right
    justified on a particular column,   then the next tab setting
    is  obtained which  allows the  desired  result.   Thus  each
    phrase  under  an  alignment constraint  is  bounded  by  the
    previous and next tab-stop positions specified.

<.U+>EXAMPLES<.NORMAL>
The "rules"  in the  examples were generated  by the  .BX control
word to show column positions.   In each example, assume that the
">" is the user-defined TAB character.

(1) .tb 5 +/15 -/25 */35
    >a>b>c>d
    The above sequence produces the following result:

    5        15        25        35
+---+---------+---------+---------+
    a+++++++++b---------c*********d
+---+---------+---------+---------+

(2) An equivalent result is produced by:
    .tb 5 +/+10 -/+10 */+10

(3) .tb 20 'xyza'30
    12345>123>123
    The above sequence produces:

                  20        30
+------------------+---------+
12345              123zaxyzax123
+------------------+---------+

(4) .tb 1/10 '234'25 "5678"40 /1234567890/50
    this>is a>tab>fill>test.
    The above sequence produces:

        10             25             40        50
+--------+--------------+--------------+---------+
this11111is a34234234234tab856785678567fill456789test.
+--------+--------------+--------------+---------+

(5) .tb 5c 10c
    >2345678
    >234 67890
    The above sequence produces:

    5   10
+---+----+
 2345678
     234 67890
+---+----+

(6) .tb 15c 25c 33l
    .uc command>break>default>meaning
    .sk
    .tb 15r 25c 33l
     cw c>no>c=;>control word separator is c
     in n>yes>n=0>indent left margin n spaces
     br>yes>>break
    The above sequence produces:

             15        25       33
+-------------+---------+-------+
<.U+>COMMAND     BREAK    DEFAULT    MEANING<.NORMAL>

 cw c        no        c=;      control word separator is c
 in n       yes        n=0      indent left margin n spaces
 br         yes                 break
+-------------+---------+-------+

(7) .tb 10r 12l '.'65r
    >sin x =>x - x**3/3! + x**5/5! - > (9)
    >sinh x =>x + x**3/3! - x**5/5! + > (10)
    The above sequence produces:

        10 12                                                   65
+--------+-+----------------------------------------------------+
   sin x = x - x**3/3! + x**5/5! - .......................... (9)
  sinh x = x + x**3/3! - x**5/5! + ......................... (10)
+--------+-+----------------------------------------------------+

(8) .tb 25'.'
    .fo no
    CPU charges>$123.45
    I/O costs>$1.26
    The above sequence produces:

                       25
+-----------------------+
CPU charges         $123.45
I/O costs             $1.26
+-----------------------+

