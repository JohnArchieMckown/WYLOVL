
                                                        +-------+
                                                        |  .TP  |
                                                        +-------+

TAB  POSITION defines  and modifies  tab  stops to  be used  when
replacing  input tab  characters with  an  appropriate number  of
horizontal spaces or a fill string.

     +-------+---------------------------------------------+
     |       |                                             |
     |  .TP  |    <.U+>SET<.U-> <.U-><'string'>h <<.U+>Left<.U->> ...               |<.NORMAL>
     |       |    ADD       <f/>h <Right> ...              |
     |       |    CLR           h <Centre> ...             |
     |       |    DEL           h <CHAR <c|'c'> ...        |
     |       |                                             |
     +-------+---------------------------------------------+

This control word causes a break.

<.B+>SET:  <.B->All  Tab stops specified in  the control word  will replace<.NORMAL>
   whatever tabs are currently in effect.
<.B+>ADD:  <.B->The Tab stops specified will be  added to the tabs that are<.NORMAL>
   currently in  effect.   If the  "h" value matches  an existing
   tab, that tab definition is replaced.
<.B+>CLR or  DEL:  <.B->The Tab  stops specified  will be deleted  from the<.NORMAL>
   tabs that are currently in effect.   If this leaves no tabs at
   all defined, the default tab values are restored.
<.B+>h ...:  <.B->defines the output-line  tab-stop positions,  relative to<.NORMAL>
   the current left page margin.  The tab-stop positions "h" must
   be specified in ascending order.  The "h" values may be speci-
   fied as absolute positions, or as "+h" meaning "h positions to
   the right  of the previous  tab-stop".   The fill  strings for
   each tab-stop position will be the "blank",  and each tab-stop
   position  will be  left-aligning (in  the standard  typewriter
   fashion).   At the start of SCRIPT processing,  tab-stop posi-
   tions are initially defined as 6, 11, 16, ..., and 81.  If .TP
   is specified with  no operands,  these initial  tab-stop posi-
   tions are re-instated.
<.B+>h <<.U+>Left<.U->|Centre|Right|CHAR 'c'> ...:  <.B->specifies the type of align-<.NORMAL>
   ment desired for the tab-stop  position.   Each tab-stop posi-
   tion "h" may be followed by "Left" (left-aligning, the default
   if the alignment type  is not specified),  or  "Right" (right-
   aligning),   "Centre" (centering),   or "CHAR"  followed by  a
   single character "c" or delimited character 'c' (meaning align
   the tab on the specified character).
<.B+><'string'|c/>h ...:  <.B->specifies the string  or single character to<.NORMAL>
   be used for tab fill.  If no fill string or character is spec-
   ified,  blanks will be used in  filling to that tab-stop posi-
   tion.  A single fill character may be specified as a delimited
   string, in the form
     'c'h
   or in the form
     c/h
   but a multi-character fill string  must always be specified in

   the form
     'string'h
   The characters " and / may also be used to delimit the string.
<.B+><'string'|c/>h  <Left|Centre|Right|CHAR 'c'>  ...:  <.B->the  complete<.NORMAL>
   specification of a tab-stop position,  including both the fill
   string or character and the alignment type.   Each of the tab-
   stop positions  on the  .TP control line  may be  specified in
   this fashion.

Tabs in Multiple Column mode are relative to the beginning of the
column in which they occur.    Under CONCATENATE (.CO)  or FORMAT
(.FO),  tabbing beyond the end of  the output line still produces
the desired result.

<.B+><.U+>Fill-String Processing<.NORMAL>

Tab Characters present in text input lines are expanded by SCRIPT
into one or more "fill" characters (blanks, if not specified)  to
the next defined tab-stop position on the output line.  The hori-
zontal space between  the end of the previous text  and the start
of the next text (the tabulation  gap)  is "filled" with the fill
string.   If this is a single character,  the character is propa-
gated  throughout the  tabulation gap.    A multi-character  fill
string is handled as follows.

   The fill string is propagated in an internal workarea, and the
particular column bounds  of the tabulation gap are  then used to
extract the  portion required to  fill the tabulation  gap.   For
example, a fill string of "abc" in a tabulation gap from column 5
to  9  inclusive will  result  in  the character  string  "bcabc"
filling the  tabulation gap.   If  the tabulation gap  is smaller
than  the fill  string,   only a  subset of  the  fill string  is
extracted.   The tabulation gap for a character-aligning tab-stop
is handled by logically tabbing to  column "h" and then searching
for the alignment character, another Tab Character, or end of the
input line;   the length  of the  tabulation gap  is subsequently
adjusted so this character will be aligned in column n.

<.U+>NOTES<.NORMAL>
(1) Upon encountering a phrase which  cannot be centered or right
    justified on a particular column,   then the next tab setting
    is  obtained which  allows the  desired  result.   Thus  each
    phrase  under  an  alignment constraint  is  bounded  by  the
    previous and next tab-stop positions specified.
(2) In addition to  the Tab Character (X'05'),  a  user Tab Char-
    acter may be defined with the ".DC TB" control word.

<.U+>EXAMPLES<.NORMAL>
The "rules"  in the  examples were generated  by the  .BX control
word to show column positions.   In each example, assume that the
">" is the user-defined Tab Character.

(1) .tp SET .5i 1.5i (/2.0i )/2.5i
    >a>b>c>d

    The above sequence produces the following result:

   .5       1.5  2.0  2.5
+---+---------+----+----+
    a         b((((c))))d
+---+---------+----+----+

(2) An equivalent result is produced by:
    .tp .5i +1.0i (/+.5i )/+.5i

(3) .tp 20 'xyza'30
    12345>123>123
    .tp add 10
    12345>*>123>123
    The above sequence produces:

        10        20        30
+--------+---------+---------+
12345              123zaxyzax123
12345    *         123zaxyzax123
+------------------+---------+

(4) .tp 1/10 '234'25 "5678"40 /1234567890/50
    this>is a>tab>fill>test.
    The above sequence produces:

        10             25             40        50
+--------+--------------+--------------+---------+
this11111is a34234234234tab856785678567fill456789test.
+--------+--------------+--------------+---------+

(5) .tp 5 Centre 10 Centre
    >2345678
    >234 67890
    The above sequence produces:

    5   10
+---+----+
 2345678
     234 67890
+---+----+

(6) .tp 15 Centre 25 Centre 33 Left
    .uc command>break>default>meaning
    .sk
    .tp 15 Right 25 Centre 33 Left
     cw c>no>c=;>control word separator is c
     in n>yes>n=0>indent left margin n spaces
     br>yes>>break
    The above sequence produces:

             15        25       33
+-------------+---------+-------+
<.U+>COMMAND     BREAK    DEFAULT    MEANING<.NORMAL>

 cw c        no        c=;      control word separator is c
 in n       yes        n=0      indent left margin n spaces
 br         yes                 break
+-------------+---------+-------+

(7) .tp 10 Right 12 Left '.'65 Right
    >sin x =>x - x**3/3! + x**5/5! - > (9)
    >sinh x =>x + x**3/3! - x**5/5! + > (10)
    The above sequence produces:

        10 12                                                   65
+--------+-+----------------------------------------------------+
   sin x = x - x**3/3! + x**5/5! - .......................... (9)
  sinh x = x + x**3/3! - x**5/5! + ......................... (10)
+--------+-+----------------------------------------------------+

(8) .tp 2.5i CHAR '.'
    .fo no
    CPU charges>$123.45
    I/O costs>$1.26
    The above sequence produces:

                     2.5i
+-----------------------+
CPU charges         $123.45
I/O costs             $1.26
+-----------------------+

