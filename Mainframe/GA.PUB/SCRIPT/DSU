
                                                        +-------+
                                                        |  .SU  |
                                                        +-------+

SUBSTITUTE causes  Set Symbols  in subsequent  input lines  to be
replaced by their  values before the lines are  processed as text
or control-word lines.

     +-------+---------------------------------------------+
     |       |                                             |
     |  .SU  |    <<.U+>1<.U->|n|ON|OFF|line>                        |<.NORMAL>
     |       |    <<.U+>UPPER<.U->|NOUPPER>                          |<.NORMAL>
     |       |                                             |
     +-------+---------------------------------------------+

This control word does not cause a break.

<.B+>ON:  <.B->At the start of SCRIPT processing, .SU is ON.   Each logical<.NORMAL>
   input line is  scanned from left to right for  the presence of
   Set Symbols.    A Set  Symbol is replaced  by its  value,  and
   SCRIPT then  resumes the  scanning process  starting with  the
   leftmost character  of the substituted result.    This enables
   the substitution of Symbols resulting from the substitution of
   Symbols, until all Symbols have been substituted.  SCRIPT then
   examines the "substituted"  line to determine whether  it is a
   text  or control-word  line.    This "automatic  substitution"
   process continues until a .SU with  an "OFF" or "n" operand is
   encountered.
<.B+>OFF:    <.B->suppresses  the   substitution   scanning-and-replacement<.NORMAL>
   process.   This is  necessary,  for example,  to  define a Set
   Symbol as a string  of one or more other Set  Symbols that are
   not  to be  "substituted"  until .SU  is  turned  ON again  or
   invoked with a "line" operand.
<.B+><<.U+>1<.U->|n>:  <.B->This is useful when .SU  is currently OFF;  it causes the<.NORMAL>
   "line" operand  or the  next "n"  input lines  to be  "substi-
   tuted".   If  .SU is currently  on,  it  also causes it  to be
   turned OFF.
<.B+>line:  <.B->This form of the control  word is particularly useful when<.NORMAL>
   you do  not know whether  .SU is currently  ON or OFF  and you
   don't want to change it.   It applies the substitution process
   to the  "line" operand without altering  the ON or  OFF state,
   and SCRIPT  then processes  the result  as a  text or  control
   line.
<.B+><<.U+>UPPER<.U->|NOUPPER>:   <.B->UPPER is  in  effect at  the  start of  SCRIPT<.NORMAL>
   processing;  all  Symbol names are automatically  converted to
   uppercase before replacement by their  values,  so that &X and
   &x would refer to the same Symbol.  NOUPPER causes Symbol name
   to  be "case-sensitive",   so  that &X  and  &x  would be  two
   different Symbols.   The initial condition  may also be estab-
   lished  by  specifying  the  UPPER  or  NOUPPER  options  when
   invoking SCRIPT (UPPER is the default).

<.B+><.U+>The Substitution Process<.NORMAL>

Substitution of  a Symbol  is requested  by preceding  the Symbol
name with an ampersand (&)  and  following the Symbol name with a
blank, a period,  or a special character.   See the ".SR" control
word for  a list  of characters that  are valid  in a  Set Symbol
name.

<.B+><.U+>Global and Local Symbols<.NORMAL>

A Set Symbol name starting with  an asterisk following the amper-
sand (&*)  implies that the Symbol  is local to the current file,
macro,  or remote;   otherwise,  it is a "global"  Symbol.   If a
global Symbol has never been assigned  a value,  the "&symbol" is
left unchanged  in the input  line (that  is,  it is  regarded as
text).    Otherwise,  the  current  value of  the  Set Symbol  is
converted (if necessary)  to a  character string and replaces the
"&symbol." (if  a period is used  for delimiting)  or  the string
"&symbol" (if a  blank or special character is  used).   Within a
macro or remote,   a Local Symbol that has never  been assigned a
value is replaced with the null string; in a file, it is replaced
with itself.

<.B+><.U+>Subscripted Symbols<.NORMAL>

Certain implied  subscripts for Set  Symbols are  also supported.
An implied subscript  of "&A(*)" concatenates all  the entries of
that Set  Symbol together,   from "A(-1000000)"  to "A(+1000000)"
except "A(0)",  each separated by a comma and blank ", ".   Simi-
larly "&A(*-)"  refers  to  the concatenation  of  all  negative-
subscript elements  of A  and "&A(*+)"  refers  to all  positive-
subscript  elements.    Both  Local and  Global  Symbols  may  be
subscripted.

<.B+><.U+>Substring Operations<.NORMAL>

Substring facilities on Set Symbols are supported by specifying a
start column and an end column separated by a colon (:) following
or instead of a subscript.   Thus "&C(j:k)" refers to columns "j"
to "k" of set symbol "C",   and "&V(i,j:k)" refers to columns "j"
to  "k" of  set symbol  "V(i)".   The  value  of "j"  may not  be
omitted,  but "k" may be omitted as it defaults to the end of the
Symbol.   Substring operations  outside the length of  the Symbol
return the null string.

   Substring facilities on  Symbols are also supported  by speci-
fying a start column and a length separated by an "or bar".  Thus
"&C(j|k)" refers to column "j" for length "k" of Symbol "C",  and
"&V(i,j|k)" refers to column "j" for length "k" of Symbol "V(i)".
The value "j" may  not be omitted,  but "k" may  be omitted as it
defaults to the end of the Symbol.

<.B+><.U+>Values Beginning with the Control Word Separator<.NORMAL>

When the value of a Symbol begins with the control word separator
character  (normally  ";"),   then  the  substitution/replacement
process causes the parts of the  input line before and after this
character are treated as two separate input lines.

<.B+><.U+>Physical Versus Logical Input Lines<.NORMAL>

If the  line being substituted begins  with a control  word indi-
cator (normally ".")  then substitution of Symbols will terminate
at any  control word separator  (normally ";")  found  within the
line and the remainder will be  substituted as part of the normal
processing as a "next logical input  line".   This will not be so
if the  control word or macro  name is preceded with  the control
word modifier "'".

<.B+><.U+>Attributes and Functions<.NORMAL>

See the Appendices for the list  of Attributes and Functions that
may be applied to Set Symbols and character strings.

