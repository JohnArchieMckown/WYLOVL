
                                                        +-------+
                                                        |  .GT  |
                                                        +-------+

GML TAG defines a GML tag.

     +-------+---------------------------------------------+
     |       |                                             |
     |  .GT  |    tagname ADD macro <tagopts>              |
     |       |    tagname CHAnge macro                     |
     |       |    tagname OFF|ON                           |
     |       |    tagname|* DELete|PRint                   |
     |       |                                             |
     +-------+---------------------------------------------+

The first  form of this  control word defines  the name of  a GML
tag,  identifies the macro that is to  be invoked when the tag is
encountered in input,   and specifies "tag options"  that control
tag  processing.   The  other forms  permit  modifications to  an
already-defined tag, or the display of information about already-
defined tags.

<.B+><.U+>Overview<.NORMAL>

Waterloo SCRIPT  provides abilities  for the  text programmer  to
create a set of "Generalized Markup Language" (GML)  tags and the
related application-processing functions (APFs).   The collection
of APF macros is called a "layout".  For details on the syntax of
GML tags and an example of  a large tagset with multiple layouts,
see the <.U+>Waterloo SCRIPT/GML User's Guide<.U->.<.NORMAL>

   The tags and their attributes and  values are defined by using
the GML Tag (GT)  and GML Attribute (GA)  control words.   SCRIPT
builds three internal data structures from the information speci-
fied by the GT and GA control words:   a tagname structure,  with
an attribute-name structure  for each tagname,  and  a value-list
structure for  each attribute  of the  tag.   The  information in
these data structures is used in  the processing of GML tags that
occur in user input.  The application-processing functions (APFs)
are defined  as macros  by using  the Define  Macro control  word
(DM).    The character  with  which the  user  must precede  each
tagname,  in order for SCRIPT to recognize it,  is defined by the
text programmer  by using the  "GML" operand of  Define Character
(DC).

<.B+><.U+>The<.U-> <.U->"<.U+>ADD<.U->" <.U+>Operand<.NORMAL>

This form of the  control word is used to define  a GML tag.   It
specifies the name  of the GML tag,   the name of the  macro that
provides the application-processing function for that tag,  and a
number of  related "tag  option" operands,   as appropriate.    A
tagname may not consist of  more than 15 alphanumeric characters.
The "tag options"  and their meanings are as  follows;  note that
some of these operands are mutually exclusive.

<.B+>ATTributes:  <.B->This tag has one or more attributes.   If not speci-<.NORMAL>
   fied, then any subsequent GML Attribute (GA)  control word for
   this tagname will result in an error message.
<.B+>CONTinue:  <.B->A "continue" character (see the CONT operand of Define<.NORMAL>
   Character) is to be generated internally by SCRIPT if this tag
   occurs after column one of an  input line.   If not specified,
   each in-line occurrence of the tag will be processed as though
   it had occurred at the start of an input line of its own.
<.B+>CSOFF:  <.B->This  tag will  cause the  termination of  an outstanding<.NORMAL>
   Conditional Section 99 (see CS).
<.B+>NOCONTinue:  <.B->This tag  cannot be continued by another  tag on the<.NORMAL>
   same input line; the second tag will be processed as though it
   had occurred at the start of an input line of its own.
<.B+>TAGnext:  <.B->Another tag must follow  this tag.   Whether the second<.NORMAL>
   tag may  occur on the same  input line is not  relevant;  what
   matters is  that a text  input line  may not follow  this tag.
   (The necessary processing  code to enforce this  during subse-
   quent SCRIPT processing has not yet been implemented.)
<.B+>TEXTDef  'default  tagtext':   <.B->The  specified  "default  tagtext"<.NORMAL>
   string is to be  used as the tagtext for this  tag if the user
   specified the tag without tagtext.
<.B+>TEXTError:   <.B->If tagtext  is specified  with this  tag,  an  error<.NORMAL>
   message will result.
<.B+>TEXTLine:  <.B->Everything  from the tagname to  the end of  the input<.NORMAL>
   line is to be treated as tagtext.
<.B+>TEXTReqd:  <.B->If tagtext  is not specified with this  tag,  an error<.NORMAL>
   message will result.

<.B+><.U+>Other Forms of the Control Word<.NORMAL>

The other forms of the control word modify or display information
contained in the data structures.

<.B+>tagname CHAnge  macro:  <.B->The  specified "macro"  name becomes  the<.NORMAL>
   macro that  will be  invoked when this  tag is  encountered in
   subsequent input.
<.B+>tagname DELete:  <.B->This  tag and its related  attributes and values<.NORMAL>
   are deleted from the data structures.
<.B+>* DELete:  <.B->All  tags and their related attributes  and values are<.NORMAL>
   deleted from the data structures.
<.B+>tagname OFF|ON:  <.B->OFF causes subsequent occurrences of this tag to<.NORMAL>
   be ignored;  any  attribute list or tagtext will  not be vali-
   dated, and the APF macro will not be invoked.  ON terminates a
   previous OFF condition;  no error results if the OFF condition
   was not in effect.
<.B+>tagname PRint:   <.B->The current data-structure information  for this<.NORMAL>
   tag and  its attributes  and values will  be displayed  on the
   output device to which the results of a TYpe control word (TY)
   are directed.    (This will be of  occasional use to  the text
   programmer as  a debugging  aid during  the tagset-development
   process.)
<.B+>* PRint:  <.B->As above, but displays the information for all tags and<.NORMAL>
   their related attributes and values.

<.B+><.U+>GML Tag Scanning<.NORMAL>

Once a Define Character "GML" character has been defined,  SCRIPT
examines  every subsequent  input line  for  occurrences of  that
character.   When an occurrence of the character is found, SCRIPT
begins  collecting subsequent  characters until  it encounters  a
blank, a period, another "GML" character, or the end of the input
line.   SCRIPT then  searches the tagname data  structure looking
for a  tagname equal  to the uppercase  version of  the collected
characters.   If no match is found, SCRIPT treats the "GML" char-
acter and collected  characters as text,  and  continues scanning
for the next  occurrence of a "GML" character in  the input line.
If a match  is found,  however,  then SCRIPT  splits the original
input line  into two "logical" input  lines,  the first  of which
contains all characters to the left  of the "GML" character,  and
the  second of  which  begins with  the  first  character of  the
tagname.  SCRIPT then resumes the process of scanning this second
"logical" input line,  starting after  the tagname and its delim-
iter, looking for another "GML" character.

   In this manner,   an input line containing (text  and)  one or
more tags is parsed into one  or more "logical" input lines.   If
the original input line started with text,  then the first of the
resulting "logical" input lines will be a text line,  and will be
processed as any other text input line,  with the possible excep-
tion that the  tag that followed it may have  caused a "continue"
character to be appended to it.

   Any remaining  "logical" input  lines (those  representing the
tags and what is assumed to be their attribute lists and tagtext)
are then re-inserted back into the input stream,  prefixed with a
special  "Generated  by  GML   processing"  (GG)   control  word.
(Because  the GG  control word  is not  intended for  use by  the
SCRIPT user, no committment is made to its continued existence as
"GG";  it might  be replaced in a  future version of SCRIPT  by a
control word of some other name, or deleted.)

   The exception to the above is a tag that has been defined with
the TEXTLine option.   Everything from the  tagname to the end of
the input line will be treated as tagtext.

<.B+><.U+>Attribute-List and Tagtext Processing<.NORMAL>

The parsing and validation of the  attribute list and tagtext are
handled by the GG control word, as follows:
(1) The existence of  this tagname in the  tagname data structure
    is verified,  or an error message  is produced and no further
    processing occurs.  This re-verification is necessary because
    the tagname may have been deleted  from the data structure by
    the APF macro for a previous tag on the same (original) input
    line.
(2) If the OFF condition is in effect for the tagname, no further
    processing occurs.   (Note  that a tag that  has been defined
    with the TEXTLine option and is in the OFF condition provides

    the text programmer with the ability  to define tags that are
    treated as comments).
(3) The existence of the APF macro  for this tagname is verified,
    or an  error message  is produced  and no  further processing
    occurs.
(4) A local symbol dictionary is pre-generated for the APF macro,
    and all AUTO  and DEFAULT attribute names and  values (see GA
    for details)   are added to it  as local symbols of  the form
    "*attname".
(5) Any user-specified attribute  list is scanned,  from  left to
    right.
      (a)  For an attribute of  the form "attname=value",  if the
    name does not  exist in the tag's  attribute-list data struc-
    ture or the attribute name has been defined as AUTO, an error
    message is produced and no further processing occurs.  Other-
    wise,  the attribute value is verified in the value-list data
    structure for this attribute of the tag.  If it is not valid,
    an  error  message  is produced  and  no  further  processing
    occurs.  Otherwise, the attribute name and value are added to
    the  local symbol  dictionary  being  generated for  the  APF
    macro.
      (b)   For  an  attribute  of the  form  "attname"  with  no
    "=value",  processing is handled as  in (a)  if the attribute
    has a default value;  However,  if the attname does not exist
    in  the attribute-list  data structure,   then  a WARNING  is
    generated and  the string is assumed  to be the start  of the
    tagtext.
(6) If tagtext was specified but not permitted,  or if tagtext is
    required but was not specified,  an error message is produced
    and no further processing occurs.  Otherwise, any tagtext (or
    default  tagtext,  if  any)   is added  to  the local  symbol
    dictionary as the local symbol  "*",  with a "continue" char-
    acter appended to its value if required and permitted (if not
    permitted, it is not appended).
(7) The tag-usage counter for this tagname is incremented by one,
    and  the  resulting  value  is  added  to  the  local  symbol
    dictionary  as the  value of  the local  symbol "*_N".    The
    tagname is added to the local  symbol dictionary as the value
    of the local symbol "*_TAG".
(8) If the "GML" operand of Input  Trace (IT)  is in effect,  the
    "logical" input  line and  the contents  of the  local symbol
    dictionary are displayed in the trace output.
(9) The APF macro is invoked.

<.B+><.U+>The Local Symbol Dictionary for the APF Macro<.NORMAL>

The  pre-generation of  the  local  symbol dictionary  completely
by-passes   the   normal  operand-scanning   and   initialization
processes of macro invocation.  As a result, symbols such as "*0"
and "*1" will have no values within a macro that has been invoked
as the APF macro for a GML tag, nor will the values of the global
symbols "0", "1",... be altered.

<.U+>EXAMPLES<.NORMAL>
See the GML Attribute (.GA) control word.

