*        %GOTO RRPAPLS1; /*                                             00050000
         MACRO                                                          00100000
         IRARRPA   &DSECT=YES                                           00150000
         IEZBITS                                                     */ 00200000
*%RRPAPLS1:  ;                                                          00250000
*/* START OF SPECIFICATIONS ******************************************/ 00300000
*/**** PROPRIETARY_STATEMENT *****************************************/ 00350000
*/*01* PROPRIETARY STATEMENT=                                        */ 00400000
*/*                                                                  */ 00450000
*/*   COPYRIGHT=                                                     */ 00500000
*/*       LICENSED MATERIALS - PROPERTY OF IBM                       */ 00550000
*/*       "RESTRICTED MATERIALS OF IBM"                              */ 00600000
*/*       5647-A01                                                   */ 00650000
*/*       (C) COPYRIGHT IBM CORP. 1977, 2000                         */ 00700000
*/*                                                                  */ 00750000
*/*                                                                  */ 00800000
*/**** END_OF_PROPRIETARY_STATEMENT **********************************/ 00850000
*/*                                                                  */ 00900000
*/*01* STATUS: JBB6609                                               */ 00950000
*/*                                                                  */ 01000000
*/*01* EXTERNAL CLASSIFICATION: DMTI                                 */ 01050000
*/*01* END OF EXTERNAL CLASSIFICATION:                               */ 01100000
*/*                                                                  */ 01150000
*/*01* DESCRIPTIVE NAME:  SYSTEM RESOURCES MANAGER RECOVERY ROUTINE  */ 01200000
*/*                       PARAMETER AREA                             */ 01250000
*/*02*  ACRONYM:  RRPA                                               */ 01300000
*/*                                                                  */ 01350000
*/*01* MACRO NAME: IRARRPA                                           */ 01400000
*/*                                                                  */ 01450000
*/*01* DSECT NAME: RRPA                                              */ 01500000
*/*                                                                  */ 01550000
*/*01* COMPONENT:  System Resources Manager (SC1CX)                  */ 01600000
*/*                                                                  */ 01650000
*/*01* EYE-CATCHER:  RRPA                                            */ 01700000
*/*02*  OFFSET:  0                                                   */ 01750000
*/*02*  LENGTH:  4                                                   */ 01800000
*/*                                                                  */ 01850000
*/*01* STORAGE ATTRIBUTES:                                           */ 01900000
*/*02*  SUBPOOL:    Nucleus or subpool 245                           */ 01950000
*/*02*  KEY:  0                                                      */ 02000000
*/*                                                                  */ 02050000
*/*02*  RESIDENCY:  Above 16M line                                   */ 02100000
*/*02*  MAIN STORAGE:  YES                                           */ 02150000
*/*02*  AUXILIARY STORAGE:  No                                       */ 02200000
*/*02*  VIRTUAL STORAGE:  Common                                     */ 02250000
*/*02*  DATA SPACE: No                                               */ 02300000
*/*                                                                  */ 02350000
*/*01* SIZE:  48                                                     */ 02400000
*/*                                                                  */ 02450000
*/*01* CREATED BY:   Recovery Termination Manager                    */ 02500000
*/*                                                                  */ 02550000
*/*01* POINTED TO BY:  Register 3 in SRM                             */ 02600000
*/*                                                                  */ 02650000
*/*01* SERIALIZATION: Disablement (CPU or SRM locks obtained by SRM) */ 02700000
*/*                                                                  */ 02750000
*/*01* FUNCTION:- THE RRPA IDENTIFIES THE INVOCATION THAT RESULTED   */ 02800000
*/*         IN SYSTEM RESOURCES MANAGER PROCESSING, AND SPECIFIES    */ 02850000
*/*         THE INTERNAL ROUTINE CURRENTLY IN CONTROL.  THE RRPA     */ 02900000
*/*         PRESERVES STATUS FOR EXIT FROM THE SYSTEM RESOURCES      */ 02950000
*/*         MANAGER.                                                 */ 03000000
*/*                                                                  */ 03050000
*/*                                                                  */ 03100000
*/*01* METHOD OF ACCESS:- BY CONVENTION WITHIN SYSTEM RESOURCES      */ 03150000
*/*          MANAGER ROUTINES, REGISTER 3 IS RESERVED TO CONTAIN     */ 03200000
*/*          THE ADDRESS OF THE APPLICABLE RRPA.                     */ 03250000
*/*                                                                  */ 03300000
*/*01* DELETED BY: List of modules/macros that remove the data area  */ 03350000
*/*                from storage. (Could be user code)                */ 03400000
*/*                                                                  */ 03450000
*/*01* DEPENDENCIES:                                                 */ 03500000
*/*                                                                  */ 03550000
*/*01* DISTRIBUTION LIBRARY: AMODGEN                                 */ 03600000
*/*                                                                  */ 03650000
*/*01* CHANGE ACTIVITY: List of changes for this data area           */ 03700000
*/*                                                                  */ 03750000
*/* END OF SPECIFICATIONS ********************************************/ 03800000
* /*                                                                 */ 03850000
* /*                                                                 */ 03900000
* /*                                                                 */ 03950000
* /*                                                                 */ 04000000
* /* *************************************************************** */ 04050000
*        %GOTO RRPAPLS2; /*                                             04100000
         AGO   .RRPAAL1                                              */ 04150000
* /* *************************************************************** */ 04200000
* /*                                                                 */ 04250000
* /*   INVOCATION PARAMETERS AND/OR KEYWORDS =                       */ 04300000
* /*                                                                 */ 04350000
* /*     BAL - DSECT=NO IF DSECT IS NOT TO BE PRODUCED.              */ 04400000
* /*                                                                 */ 04450000
* /*         USING ON RRPA GIVES ADDRESSABILITY TO ALL SYMBOLS.      */ 04500000
* /*                                                                 */ 04550000
* /*     PLS - %RRPALEVL='USERLEVL' IF THE RRPA MAPPING IS TO BE     */ 04600000
* /*         CONCATENATED WITH A PREVIOUS DECLARATION, WITH THE      */ 04650000
* /*         RRPA BEING ASSIGNED THE INDICATED STRUCTURE LEVEL.      */ 04700000
* /*         - %RRPA9999=',' IF THE STRUCTURE SHOULD NOT BE CLOSED.  */ 04750000
* /*                                                                 */ 04800000
* /*           NOTE - INASMUCH AS THE RRPA AREA IS POINTED TO        */ 04850000
* /*           DIRECTLY BY A REGISTER, ONLY A STRUCTURE LEVEL OF     */ 04900000
* /*           '1' (ONE) SHOULD BE USED FOR THE RRPA.                */ 04950000
* /*                                                                 */ 05000000
* /*         TO ACCESS AS A STANDALONE STRUCTURE, DCL RRPAPTR PTR.   */ 05050000
* /*                                                                 */ 05100000
* /*   DEPENDENCY = BIT RRPASRV IS SET BY MACRO IRACTLEP USING A     */ 05150000
* /*                HAND-MAPPING.  IF RRPASRV MOVES, THEN IRACTLEP   */ 05200000
* /*                MUST BE MODIFIED.                            @P1A*/ 05250000
* /*                                                                 */ 05300000
* /*   CHANGE ACTIVITY = ZA29015,ZM49916,G81LPJC,G860P26             */ 05350000
* /*                                                                 */ 05400000
* /*      OZ74449 -- ABEND0C4 IRARMIOM IRARMIL0 TCTTIOT      @ZA74449*/ 05450000
* /*      OZ74850 -- SQA FILLS UP WITH SRB'S IF ASCB IS CLOBBERED    */ 05500000
* /*                 AND OUCB IS ON THE INQUEUE              @ZA74850*/ 05550000
* /*      OY29595 -- SRM/RSM RECOVERY RETRY LOOP, CHANGED RRPARSW TO */ 05600000
* /*                 RRPARSM.                                @YA29595*/ 05650000
* /* $LS=SRMSTKS  JBB2220 840627 PDF6 : SRM STACKS                   */ 05700000
* /* $P1=PA20450  JBB2220 850809 PD16M6: ADD COMMENTS ON RRPASRV     */ 05750000
* /*                                     DEPENDENCY                  */ 05800000
* /* $D1=DCG0064  JBB3311 880803 PD88AK: MODIFY STGTEST SYSEVENT     */ 05850000
* /*                                     INTERFACE                   */ 05900000
* /* $L1=WLMI     HBB5510 921231 PD004U: Workload Manager I          */ 05950000
* /*                                                                 */ 06000000
* /* $L2=WLMI     HBB5510 930519 PD88IX: Workload Manager I          */ 06050000
* /*                                     expand RRPA             @L2A*/ 06100000
* /*                                                                 */ 06150000
* /* $L3=WLMI     HBB5510 930828 PD88IX: Workload Manager I          */ 06200000
* /*                                     obtain SRM lock on need @L3A*/ 06250000
* /*                                                                 */ 06300000
* /* $L4=ENCLV    HBB5520 940412 PD88IX: Enclaves Support        @L4A*/ 06350000
* /*                                                                 */ 06400000
* /* $P2=PN70536  HBB5520 940515 PD88BB: Add RrpaTouchingSsrb    @P2A*/ 06450000
* /*                                                                 */ 06500000
* /* $P2=PQC0909  HBB6603 960530 PDBZ:   Peter Yocom: ESMB Tree      */ 06550000
* /*                                     recovery                    */ 06600000
* /*                                                                 */ 06650000
* /* $PSY0298     JBB6604 970222 B9HABB: John Arwe                   */ 06700000
* /*                                     Add new flag                */ 06750000
* /* $PWA0185     JBB6607 980601 PD88KN: PLANFORM 1130 UPDATES       */ 06800000
* /*                                                                 */ 06812500
* /* $FIXDIST     JBB6609 990827 PD88KN: Move back to correct        */ 06825000
* /*                                     distlib                     */ 06837500
* /*                                                                 */ 06850000
* /* *************************************************************** */ 06900000
* /*                                                                    06950000
.RRPAAL1 ANOP                                                           07000000
         SPACE 1                                                        07050000
         AIF   ('&DSECT' EQ 'NO').RRPAAL2                               07100000
RRPA     DSECT                                                          07150000
         AGO   .RRPAAL3                                                 07200000
.RRPAAL2 ANOP                                                           07250000
         DS    0D                                                       07300000
RRPA     EQU   *                                                        07350000
.RRPAAL3 ANOP                                                           07400000
         SPACE 1                                                        07450000
RRPANAME DC    C'RRPA' -           BLOCK IDENTIFICATION            @L2A 07500000
RRPA_STACKEND DS F -               USED FOR STACK OVERFLOW CHECKS  @L2A 07550000
*                                  (SET TO 7FFFFFFF TO NO-OP CHECKING)  07600000
RRPAINC  DS    0F -                EQUIVALENT OF REG 0 AT ENTRY         07650000
RRPAASD  DS    0BL2 -              ASID FOR ORIGINAL ENTRY         @L4C 07700000
         DS    B -                                                 @L4A 07750000
RRPAEnclaveIdentifier EQU BIT0 -   High order bit being on in the       07800000
*                                  identifier indicates an enclave ID   07850000
*                                                                  @L4A 07900000
RRPAFLG0 DS    B -                 FLAG BYTE FOR SYSEVENTS     @ZA29015 07950000
RRPANSWI EQU   BIT0 -              FOR MEMDEL TYPE=NOSWIN      @ZA29015 08000000
RRPAINTV EQU   BIT0 -              FOR REQPGDAT TYPE=INTERVAL  @ZM49916 08050000
RRPABYTE EQU   BIT0 -              FOR STGTEST TYPE=BYTE           @D1A 08100000
RRPACOD  DS    C -                 ORIGINAL ENTRY SYSEVENT CODE         08150000
RRPAINP  DS    0A -                INPUT PARAMETER ADDRESS              08200000
RRPAVLU  DS    F -                 EQUIVALENT OF REG 1 AT EXIT          08250000
RRPAFLG  DS    0BL2 -              ROUTINE STATUS FLAGS                 08300000
         DS    B -                 ENTRY STATUS                         08350000
RRPADSB  EQU   BIT0 -              DISABLED BRANCH ENTRY                08400000
RRPAENB  EQU   BIT1 -              ENABLED BRANCH ENTRY                 08450000
RRPASVC  EQU   BIT2 -              SVC CALL ENTRY                       08500000
RRPADSP  EQU   BIT3 -              DISPATCHING REQUIRED                 08550000
RRPACHM  EQU   BIT4 -              CHAN MEAS UPDATE IN CONTROL @G860P26 08600000
RRPACpuLock_on_SrmLockStack EQU BIT5 - CPU lock held - using SRM   @L3A 08650000
*                                  locked stack - may not call anyone   08700000
*                                  who would reenter SRM unless SRM     08750000
*                                  lock obtained first                  08800000
RRPAOPT  EQU   BIT6 -              SRM LOCK CURRENTLY HELD              08850000
RRPASRV  EQU   BIT7 -              SERVICE ROUTINE CURRENT (SEE    @LSA 08900000
*                                  DEPENDENCY SECTION IN PROLOG)        08950000
         DS    B -                 CURRENT STATUS                       09000000
RRPARSM  EQU   BIT0 -              SET WHEN SRM CALLS RSM SO THAT       09050000
*                                  DURING RECOVERY SRM WILL NOT RETRY   09100000
*                                                              @YA29595 09150000
RRPAWAR  EQU   BIT1 -              WORKLOAD ACTIVITY RTNE CURR          09200000
RRPAIPS  EQU   BIT2 -              SET RTNE CURR               @G741PGM 09250000
RRPACHP  EQU   BIT3 -              CHAP INVOKED BY FIP OR SET  @G50IPEB 09300000
RRPACTL  EQU   BIT4 -              IRARMCTL WILL PROCESS 2ND FAILURE    09350000
RRPARTI  EQU   BIT5 -              RECOVERY TERMINATION INDICATOR       09400000
RRPARFI  EQU   BIT6 -              RECOVERY FAILURE INDICATOR           09450000
RRPARCI  EQU   BIT7 -              RECURSION INDICATOR                  09500000
RRPAKEY  DS    C -                 ORIGINAL ENTRY PROTECT KEY           09550000
RRPARTC  DS    C -                 RETURN CODE FOR FINAL EXIT           09600000
RRPATOD  DS    F -                 TIME OF DAY AT ENTRY                 09650000
RRPAFPT  DS    A -                 STACK FRAME POINTER             @LSC 09700000
RRPAEPA  DS    A -                 RMEP ADDRESS OF RTNE IN CONTROL      09750000
RRPA_UICTOKEN DS F -               UIC UPDATE TOKEN                @L2A 09800000
         DS    B -                 MORE CURRENT STATUS             @L3A 09850000
RRPAWLM  EQU   BIT0 -              SRM has called WLM              @L2A 09900000
RRPATOUCHINGSSRB EQU BIT1          SRM is touching an SSRB         @P2A 09950000
RRPAREFESMB      EQU BIT2          SRM running ESMB Tree       @PQC0909 10000000
RRPACALLGR       EQU BIT3          Call GR if abend occurs     @PSY0298 10050000
RRPARSVC DS    C -                 RESERVED                        @L3A 10100000
RRPARSVH DS    H -                 RESERVED                        @L3A 10150000
RRPARSV  DS    2F -                RESERVED                        @L3A 10200000
RRPAEND  DS    0D -                END OF RRPA                          10250000
RRPALEN  EQU   RRPAEND-RRPA -      LENGTH OF RRPA                       10300000
         MEND                                                           10350000
*                                                                    */ 10400000
*%RRPAPLS2:  ;                                                          10450000
*                                                             /*2@L1D*/ 10500000
*        %IF RRPALEVL ~= ''         /* IS STRUCTURE CONCATENATED     */ 10550000
*            %THEN %GOTO RRPAPLS3;  /* YES, OMIT DECLARE STATEMENT   */ 10600000
*   DCL                                                                 10650000
*     1 RRPA BASED(RRPAPTR) BDY(DWORD),                                 10700000
*            %GOTO RRPAPLS4;        /* SKIP USER-GIVEN LEVEL         */ 10750000
*%RRPAPLS3:  RRPADUM = RRPALEVL||' RRPA';  /* PICK UP GIVEN LEVEL    */ 10800000
*     RRPADUM BDY(DWORD),                                               10850000
*%RRPAPLS4:  ;                                                          10900000
*       10 RRPANAME CHAR(4) BDY(WORD), /* BLOCK INDENTIFICATION -       10950000
*                                         'RRPA'                 @L2A*/ 11000000
*       10 RRPA_StackEnd Ptr(31),   /* Used for stack overflow checks.  11050000
*                                      7FFFFFFF no-ops checking. @L2A*/ 11100000
*       10 RRPAINC  CHAR(4),        /* REGISTER 0 AT ENTRY           */ 11150000
*         12 RRPAASD  BIT(16),      /* ASID FOR ORIGINAL ENTRY       */ 11200000
*            14 RRPAEnclaveIdentifier BIT(1), /* High order bit being   11250000
*                                                on in the identifier   11300000
*                                                indicates an enclave   11350000
*                                                ID              @L4A*/ 11400000
*            14 * BIT(15),          /* Identifier                @L4A*/ 11450000
*         12 RRPAFLG0 BIT(8),       /* FLAG BYTE             @ZA29015*/ 11500000
*             14 RRPANSWI BIT(1),   /* =1 FOR MEMDEL TYPE=NOSWIN        11550000
*                                                            @ZA29015*/ 11600000
*               16 RRPAINTV BIT(1), /* =1 FOR REQPGDAT TYPE=INTERVAL    11650000
*                                                            @ZM49916*/ 11700000
*                 18 RRPABYTE BIT(1), /* =1 FOR STGTEST TYPE=BYTE       11750000
*                                                                @D1A*/ 11800000
*             14 * BIT(6),          /* UNUSED BY MEMDEL      @G860P26*/ 11850000
*         12 RRPACOD  PTR(08),      /* ORIGINAL ENTRY SYSEVENT CODE  */ 11900000
*       10 RRPAINP  PTR(31),        /* INPUT PARAMETER ADDRS         */ 11950000
*         12 RRPAVLU  CHAR(4) BDY(WORD), /* INPUT PARAMETER VALUE    */ 12000000
*       10 RRPAFLG  BIT(16) BDY(WORD), /* ROUTINE STATUS FLAGS       */ 12050000
*         12 RRPADSB  BIT(1),       /* ORIGINAL ENTRY DISABLED BR    */ 12100000
*         12 RRPAENB  BIT(1),       /* ORIGINAL ENTRY ENABLED BR     */ 12150000
*         12 RRPASVC  BIT(1),       /* ORIGINAL ENTRY VIA SVC        */ 12200000
*         12 RRPADSP  BIT(1),       /* DISPATCHING REQUIRED          */ 12250000
*         12 RRPACHM  BIT(1),       /* CHAN MEAS UPDATE IN CONTROL      12300000
*                                                            @G860P26*/ 12350000
*         12 RRPACpuLock_on_SrmLockStack BIT(1), /*                     12400000
*                                      CPU lock held - using SRM        12450000
*                                      locked stack - may not call      12500000
*                                      anyone who would reenter srm     12550000
*                                      unless srm lock obtained         12600000
*                                      first                     @L3A*/ 12650000
*         12 RRPAOPT  BIT(1),       /* SRM LOCK CURRENTLY HELD       */ 12700000
*         12 RRPASRV  BIT(1),       /* SERVICE ROUTINE (SEE DEPENDENCY  12750000
*                                      SECTION IN PROLOG)        @LSC*/ 12800000
*         12 RRPARSM  BIT(1),       /* SET WHEN SRM CALLS RSM SO THAT   12850000
*                                      DURING RECOVERY SRM WILL NOT     12900000
*                                      RETRY                 @YA29595*/ 12950000
*         12 RRPAWAR  BIT(1),       /* WORKLOD ACTIVITY RTNE CURRENT */ 13000000
*         12 RRPAIPS  BIT(1),       /* SET RTNE CURR         @G741PGM*/ 13050000
*         12 RRPACHP  BIT(1),       /* FIP OR SET CHAP CALL  @G50IPEB*/ 13100000
*         12 RRPACTL  BIT(1),       /* INVOKE IRARMCTL FOR 2ND FAIL  */ 13150000
*         12 RRPARTI  BIT(1),       /* RECOVERY TERMINATE INDICATOR  */ 13200000
*         12 RRPARFI  BIT(1),       /* RECOVERY FAILURE INDICATOR    */ 13250000
*         12 RRPARCI  BIT(1),       /* RECURSION INDICATOR           */ 13300000
*       10 RRPAKEY  CHAR(1),        /* ORIGINAL ENTRY PROTECT KEY    */ 13350000
*       10 RRPARTC  PTR(08),        /* RETURN CODE FOR FINAL EXIT    */ 13400000
*       10 RRPATOD  FIXED(32) UNSIGNED, /* TIME OF DAY AT ENTRY      */ 13450000
*       10 RRPAFPT  PTR(31),        /* STACK FRAME POINTER       @LSC*/ 13500000
*       10 RRPAEPA  PTR(31),        /* RMEP ADDR OF RTNE IN CONTROL  */ 13550000
*       10 RRPA_UicToken Ptr(31),   /* If non-zero, UIC update is       13600000
*                                      currently running         @L2A*/ 13650000
*       10 RRPAFLG1 BIT(8) BDY(WORD), /* MORE CURRENT STATUS     @L3A*/ 13700000
*         12 RRPAWlm  BIT(1),       /* SRM has called WLM        @L2C*/ 13750000
*         12 RRPATouchingSsrb BIT(1), /* Referencing an SSRB while      13800000
*                                      unserialized.  0C4 is possible,  13850000
*                                      no dump should be taken.  @P2A*/ 13900000
*         12 RRPARefEsmb BIT(1),    /* Running ESMB tree, rebuild       13950000
*                                      trees if recovery entered        14000000
*                                                            @PQC0909*/ 14050000
*         12 RRPACallGR BIT(1),     /* Global recovery should be called 14100000
*                                      if an abend occurs               14150000
*                                                            @PSY0298*/ 14200000
*         12 *        BIT(1),       /* reserved              @PSY0298*/ 14250000
*         12 *        BIT(1),       /* reserved              @PSY0298*/ 14300000
*         12 *        BIT(1),       /* reserved              @PSY0298*/ 14350000
*         12 *        BIT(1),       /* reserved              @PSY0298*/ 14400000
*       10 RRPARSVC CHAR(1),        /* reserved                  @L3A*/ 14450000
*       10 RRPARSVH FIXED(15),      /* reserved                  @L3A*/ 14500000
*       10 RRPARSV  CHAR(8),        /* RESERVED                  @L3A*/ 14550000
*       10 RRPAEND  CHAR(0) BDY(DWORD)   /* END OF RRPA              */ 14600000
*                                                                       14650000
*/*                                                             1@L1D*/ 14700000
*                                                              /*@L1A*/ 14750000
* %IF RRPA9999 =',' %THEN %GOTO RRPA999C; /* Continue structure  @L1A*/ 14800000
*                ;                  /* End of this block         @L1A*/ 14850000
*     %GOTO RRPA999E ;                                         /*@L1A*/ 14900000
* %RRPA999C:;                                                 /* @L1A*/ 14950000
*                ,                  /* Continue structure        @L1A*/ 15000000
* %RRPA999E:;                       /* Endif                     @L1A*/ 15050000
*                                                              /*@L1A*/ 15100000
*   %RRPALEN = 'LENGTH(RRPA)';      /* SYMBOLIC FOR LENGTH OF RRRPA  */ 15150000
