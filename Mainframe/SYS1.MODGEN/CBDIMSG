* % /*                                                                  00050001
         MACRO  --  INVOKE MESSAGE ROUTINE                              00100001
&LABEL   CBDIMSG  &MID=,&VAR1=,&VAR2=,&VAR3=,&VAR4=,&VAR5=,&VAR6=,     *00150001
               &VAR7=,&VAR8=,&VAR9=,                                   *00200001
               &SEV=,&STMT=,&CURSOR=,&POSITION=,&ROUTE=,&REQ=,         *00250001
               &CONTROL=,&DUMMY=DUMMY       End of prototype statement  00300001
         AGO   .SKIP                                                 */ 00350001
*/********************************************************************/ 00400001
*/*                                                                  */ 00450001
*/*  MODULE NAME -  CBDIMSG                                          */ 00500001
*/*                                                                  */ 00550001
*/*  DESCRIPTIVE NAME - Invoke Message Routine                       */ 00600001
*/*                                                                  */ 00650001
*/*  PROPRIETARY STATEMENT =                                         */ 00700001
*/*                                                                  */ 00750001
*/*     LICENSED MATERIALS - PROPERTY OF IBM                         */ 00800001
*/*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                  */ 00850001
*/*     5695-047 (C) COPYRIGHT IBM CORP. 1990                        */ 00900001
*/*     SEE COPYRIGHT INSTRUCTIONS.                                  */ 00950001
*/*                                                                  */ 01000001
*/*  STATUS = HCSH101                                                */ 01050001
*/*                                                                  */ 01100001
*/*  DEPENDENCIES = MSG parameter list                               */ 01150001
*/*                 must be included by mapping macro CBDZMSG.       */ 01200001
*/*                 The routine must have addressability to the CPVT */ 01250001
*/*                 which is mapped by macro CBDZCPVT if caller      */ 01300001
*/*                 is an internal HCD routine.                      */ 01350001
*/*                 The routine must have addressability to the UCA  */ 01400001
*/*                 which is mapped by macro CBDZUCA if caller       */ 01450001
*/*                 is a UIM.                                        */ 01500001
*/*                                                                  */ 01550001
*/*   FUNCTION - CBDIMSG is an executable macro which generates      */ 01600001
*/*               code to invoke the message processing routine      */ 01650001
*/*               to display or queue a message                      */ 01700001
*/*                                                                  */ 01750001
*/*   MACRO TYPE  -  Bilingual MACRO                                 */ 01800001
*/*                                                                  */ 01850001
*/*   MACRO CALL -                                                   */ 01900001
*/*   For ASSEMBLER:                                                 */ 01950001
*/*   label CBDIMSG  MID=xmid | 'literal'                            */ 02000001
*/*                  SEV=xsev                                        */ 02050001
*/*                  VARn=(xvar,C|B|H)                               */ 02100001
*/*                  ROUTE=LOG|TEMPLOG                               */ 02150001
*/*                  STMT=YES|NO|FILE                                */ 02200001
*/*                  REQ=UIM                                         */ 02250001
*/*                  CURSOR=xcur                                     */ 02300001
*/*                  POSITION=xpos                                   */ 02350001
*/*                  CONTROL=YES|NO                                  */ 02400001
*/*                                                                  */ 02450001
*/*   For PL/AS:                                                     */ 02500001
*/*   ?label: CBDIMSG  (GEN | CALL)                                  */ 02550001
*/*                  MID(xmid) | ('literal')                         */ 02600001
*/*                  SEV(xsev)                                       */ 02650001
*/*                  VARn(xvar,C|B|H)                                */ 02700001
*/*                  ROUTE(LOG|TEMPLOG)                              */ 02750001
*/*                  STMT(YES|NO|FILE)                               */ 02800001
*/*                  REQ(UIM)                                        */ 02850001
*/*                  CURSOR(xcur)                                    */ 02900001
*/*                  POSITION(xpos)                                  */ 02950001
*/*                  CONTROL                                         */ 03000001
*/*                  STORADDR(xaddr)                                 */ 03050001
*/*                  STORLEN(xlen)                                   */ 03100001
*/*                  STORHELP(xpan)                                  */ 03133301
*/*                  SEVC ;                                          */ 03166601
*/*                                                                  */ 03200001
*/*    Syntax diagram:                                               */ 03250001
*/*                                                                  */ 03300001
*/*    >>-?-+--------+--CBDIMSG---+----------MID(xmid)---+-------->  */ 03350001
*/*         |        |            |                      |           */ 03400001
*/*         +-label:-+            +-(GEN)----MID(xmid)---+           */ 03450001
*/*                               |                      |           */ 03500001
*/*                               +-(CALL)-+-----------+-+           */ 03550001
*/*                                        +-MID(xmid)-+             */ 03600001
*/*                                                                  */ 03650001
*/*    >----+-----------+---------+--------------------+---------->  */ 03700001
*/*         +-SEV(xsev)-+         +-VARn(xvar,-+-C-+-)-+             */ 03750001
*/*                                            +-B-+                 */ 03800001
*/*                                            +-H-+                 */ 03850001
*/*                                                                  */ 03900001
*/*    >----+---------------------+---+-----------------+--------->  */ 03950001
*/*         +-ROUTE-+-(LOG)-----+-+   +-STMT-+-(YES)--+-+            */ 04000001
*/*                 +-(TEMPLOG)-+            +-(NO)---+              */ 04050001
*/*                                          +-(FILE)-+              */ 04100001
*/*                                                                  */ 04150001
*/*    >----+---------------+---+---------+---+----------+-------->  */ 04200001
*/*         +-CURSOR(xcur)--+   +-CONTROL-+   +-REQ(UIM)-+           */ 04250001
*/*         +-POSITION(xpos-+                                        */ 04300001
*/*                                                                  */ 04350001
*/*    >----+--------------------------------------------------+-->  */ 04400001
*/*         +-STORADDR(xaddr)-STORLEN(xlen)-+----------------+-+     */ 04450001
*/*                                         +-STORHELP(xpan)-+       */ 04500001
*/*                                                                  */ 04512501
*/*    >----+-------------+-----><                                   */ 04525001
*/*         +-SEVC(xsevc)-+                                          */ 04537501
*/*                                                                  */ 04550001
*/*                                                                  */ 04600001
*/*                                                                  */ 04650001
*/*    PROCESSOR   -  ASSEMBLER-H and PL/AS Compiler                 */ 04700001
*/*                                                                  */ 04750001
*/*    ATTRIBUTES - A Bilingual executable macro.                    */ 04800001
*/*                                                                  */ 04850001
*/*    REGISTER CONVENTIONS = See Restrictions.                      */ 04900001
*/*                                                                  */ 04950001
*/*    RESTRICTIONS = For HCD and UIM use only                       */ 05000001
*/*                 = For PL/AS programs:                            */ 05050001
*/*                      - The MID variable must be CHAR(8).         */ 05100001
*/*                      - The SEV variable must be CHAR(1).         */ 05150001
*/*                                                                  */ 05200001
*/*                 = For BAL programs:                              */ 05250001
*/*                      - Registers 1, 14, and 15 will be destroyed */ 05300001
*/*                        all other registers will be maintained    */ 05350001
*/*                        across the interface.                     */ 05400001
*/*                      - Requires addressability to the CPVT or UCA*/ 05450001
*/*                        if caller is UIM                          */ 05500001
*/*                                                                  */ 05550001
*/*  INPUT -                                                         */ 05600001
*/*                                                                  */ 05650001
*/*          label    Optional.                                      */ 05700001
*/*                                                                  */ 05750001
*/*          (GEN)    Resets and initializes the MSGR parameter      */ 05800001
*/*                   list according to the specified parameters,    */ 05850001
*/*                   but does not branch to the message             */ 05900001
*/*                   processing routine.                            */ 05950001
*/*          (CALL)   Does not reset the MSGR parameter list,        */ 06000001
*/*                   but initializes it according to the specified  */ 06050001
*/*                   parameters and calls the message processing    */ 06100001
*/*                   routine.                                       */ 06150001
*/*                   Note: For both initialization of the MSGR      */ 06200001
*/*                         parameter list and subsequent call of    */ 06250001
*/*                         the message routine neither specify      */ 06300001
*/*                         (GEN) nor (CALL).                        */ 06350001
*/*                                                                  */ 06400001
*/*          MID      Message identifier. Variable name or quoted    */ 06450001
*/*                   character string.                              */ 06500001
*/*                                                                  */ 06550001
*/*          SEV      Severity level. Constants defined by CBDZMSG   */ 06600001
*/*                   containing the severity.                       */ 06650001
*/*                   (Variable name allowed for PL/AS only)         */ 06700001
*/*                   Default: error severity.                       */ 06750001
*/*                                                                  */ 06800001
*/*          VARn     Variable information                           */ 06850001
*/*                   Specifies the variable and its type which is   */ 06900001
*/*                   to be put into the unformatted message text.   */ 06950001
*/*                   n can be 1 - 9.                                */ 07000001
*/*                   'C' indicates a variable of type character,    */ 07050001
*/*                   'B' indicates a variable of type binary,       */ 07100001
*/*                   'H' indicates a variable of type hex.          */ 07150001
*/*                                                                  */ 07200001
*/*          ROUTE    Routing code (LOG | TEMPLOG)                   */ 07250001
*/*                   Message routing depends on the processing      */ 07300001
*/*                   mode HCD is running in. In dialog processing   */ 07350001
*/*                   mode the routing to screen may be overridden   */ 07400001
*/*                   by providing a routing code via ROUTE.         */ 07450001
*/*                   'LOG' routes the message to the HCD message    */ 07500001
*/*                         log file.                                */ 07550001
*/*                   'TEMPLOG' routes the message to the temporary  */ 07600001
*/*                         message log. The temporay message log    */ 07650001
*/*                         will be displayed as message fullist     */ 07700001
*/*                         and deleted before the next panel is     */ 07750001
*/*                         displayed.                               */ 07800001
*/*                                                                  */ 07850001
*/*          STMT     information about the statement number in a    */ 07900001
*/*                   certain file the message is related to.        */ 07950001
*/*                   It specifies whether or not to associate       */ 08000001
*/*                   a statement number and/or file ID to the       */ 08050001
*/*                   messge. The statement number and file ID       */ 08100001
*/*                   must be available via the CPVT.                */ 08150001
*/*                   'YES' indicates to associate both the          */ 08200001
*/*                         number and origin file ID.               */ 08250001
*/*                   'NO'  indicates to associate neither the       */ 08300001
*/*                         statement number nor the file ID.        */ 08350001
*/*                   'FILE' indicates to associate the file ID      */ 08400001
*/*                         only.                                    */ 08450001
*/*                   Default: NO                                    */ 08500001
*/*                                                                  */ 08550001
*/*          REQ      Specifies the requestor.                       */ 08600001
*/*                   Must be specified for UIMs.                    */ 08650001
*/*                                                                  */ 08700001
*/*          CURSOR   Specifies the dialog variable name the cursor  */ 08750001
*/*                   is to be positioned to when running in dialog  */ 08800001
*/*                   mode.                                          */ 08850001
*/*                                                                  */ 08900001
*/*          POSITION Specifies either                               */ 08950001
*/*                   - a HOM Interface Record field name, or        */ 09000000
*/*                   - a dialog variable name                       */ 09050001
*/*                   to which a cursor is to be positioned.         */ 09100001
*/*                   When running in dialog mode and a HOM Interface*/ 09150000
*/*                   record field name is contained, the dialog     */ 09200000
*/*                   routine that displays the next panel has to    */ 09250000
*/*                   convert the name into a dialog variable name   */ 09300000
*/*                   supported by the panel definition.             */ 09350000
*/*                                                                  */ 09400001
*/*          CONTROL  Option which is relevant only for messages     */ 09450001
*/*                   routed to the message log file.                */ 09500001
*/*                   It specifies that the message is a control     */ 09550001
*/*                   message to be queue on top of the message      */ 09600001
*/*                   queue.                                         */ 09650001
*/*                                                                  */ 09700001
*/*          STORADDR allows to process non-HCD messages.            */ 09750001
*/*                   The address (xaddr) specifies the location     */ 09800001
*/*                   of a message string in storage. STORLEN is     */ 09850001
*/*                   required for STORADDR.                         */ 09900001
*/*                                                                  */ 09950001
*/*          STORLEN  The length (xaddr) specifies the length of     */ 10000001
*/*                   a non-HCD message. STORADDR is required        */ 10050001
*/*                   for STORLEN.                                   */ 10100001
*/*                                                                  */ 10150001
*/*          STORHELP allows to specify a help panel ID for a        */ 10200001
*/*                   non-HCD message to provide message help.       */ 10250001
*/*                   It is optional for the STORADDR / STORLEN      */ 10300001
*/*                   key words.                                     */ 10350001
*/*                                                                  */ 10360001
*/*          SEVC     specifies a control severity, which determines */ 10370001
*/*                   into which severity queue the message is to    */ 10380001
*/*                   be logged, deviating from SEV.                 */ 10390001
*/*                                                                  */ 10400001
*/*  OUTPUT -                                                        */ 10450001
*/*          The setup instructions and invocation statement         */ 10500001
*/*          will be generated.                                      */ 10550001
*/*                                                                  */ 10600001
*/*  NOTES -                                                         */ 10650001
*/*        The CBDIMSG macro does not actually issue a message.      */ 10700001
*/*        It initializes the parameter list and invokes CBDMSMSG    */ 10750001
*/*        to display or queue the message according to the          */ 10800001
*/*        information provided.                                     */ 10850001
*/*                                                                  */ 10900001
*/*                                                                  */ 10950001
*/*  CHANGE ACTIVITY -                                               */ 11000001
*/*    $L0= HCD HCSH101 900420 BOEB: Hardware Configuration Dialog   */ 11050001
*/*    $L1= DYN HCSH101 900530 BOEB: Dynamic Configuration           */ 11075001
*/*    $L8= HCD HCSH301 910618 BOEB: HCD Object Management Support   */ 11100001
*/*    $M3= HCD HCSH501 940524 BOEB: Quality improvement             */ 11125001
*/*                                  use STC for length of msg vars  */ 11150001
*/*                                  instead of STH                  */ 11175001
*/*                                                                  */ 11200001
*/********************************************************************/ 11250001
*/*                                                                     11300001
.*                                                                      11350001
.SKIP    ANOP                                                           11400001
         LCLA  &L                     Length of a string value          11450001
         LCLA  &SDX                   &SYSNDX value                     11500001
         LCLB  &ERROR                 Error flag                        11550001
         LCLC  &SMID                  Message Identifier                11600001
         LCLC  &MTYP                  Message variable type             11650001
         LCLC  &CPVT                  CPVT address field                11700001
         LCLC  &MSGRTN                Message Routine field             11750001
         LCLC  &OP                    Instruction code to get CPVT addr 11800001
.*                                                                      11850001
&SDX     SETA  &SYSNDX                Set value for labels              11900001
&CPVT    SETC  'CPVT'                 Initialize CPVT address field     11950001
&MSGRTN  SETC  'CPVTSMSG'             Initialize Message Routine addr   12000001
&OP      SETC  'LA'                   Initialize instruction code       12050001
.*                                                                      12100001
.********************************************************************** 12150001
.*                                                                    * 12200001
.*             Clear MSGR Parameter List                              * 12250001
.*                                                                    * 12300001
.********************************************************************** 12350001
.*                                                                      12400001
&LABEL   XC    MSGR,MSGR               Zero out MSGR parameter list     12450001
         MVC   MSGSD,MSGIDNM           Set up parameter list identifier 12500001
.*                                                                      12550001
.********************************************************************** 12600001
.*                                                                    * 12650001
.*       No positional parameters allowed                             * 12700001
.*                                                                    * 12750001
.********************************************************************** 12800001
.*                                                                      12850001
         AIF   (N'&SYSLIST EQ 0).CKREQ  Check for positional operand    12900001
         MNOTE 8,'*** &SYSLIST(1) IS A POSITIONAL - NONE ALLOWED'       12950001
&ERROR   SETB  1                      Indicate error                    13000001
.*                                                                      13050001
.********************************************************************** 13100001
.*                                                                    * 13150001
.*       Validate REQ                                                 * 13200001
.*                                                                    * 13250001
.********************************************************************** 13300001
.*                                                                      13350001
.CKREQ   ANOP                                                           13400001
         AIF   ('&REQ' EQ '').EREQ     REQ parameter not specified      13450001
         AIF   ('&REQ' NE 'UIM').REQER1   REQ=UIM not specified         13500001
         OI    MSGFLGS,MSGFUIM         Indicate that caller is UIM      13550001
&CPVT    SETC  'UCACPVTP'              Set UIM CPVT address field       13600001
&MSGRTN  SETC  'UCAMMSG'               Set UIM Message Routine address  13650001
&OP      SETC  'L'                     Set instr code to get CPVT addr  13700001
         AGO   .EREQ                   and continue                     13750001
.*                                                                      13800001
.REQER1  ANOP                                                           13850001
         MNOTE 8,'*** INVALID REQ PARAMETER'                            13900001
&ERROR   SETB  1                       Indicate error                   13950001
.EREQ    ANOP                                                           14000001
.*                                                                      14050001
.********************************************************************** 14100001
.*                                                                    * 14150001
.*       Validate ROUTE                                               * 14200001
.*                                                                    * 14250001
.********************************************************************** 14300001
.*                                                                      14350001
.CKROUTE ANOP                                                           14400001
         AIF   ('&ROUTE' EQ '').ROUT10   ROUTE parameter not specified  14450001
         AIF   ('&ROUTE' EQ 'LOG').ROUT20   ROUTE=LOG specified         14500001
         AIF   ('&ROUTE' EQ 'TEMPLOG').ROUT30  ROUTE=TEMPLOG specified  14550001
.*                                                                 @L8A 14600001
         AGO   .ROUTER1                branch to report error           14650001
.*                                                                      14700001
.ROUT10  ANOP                                                           14750001
         MVI   MSGROUTE,MSGRSCRN       Set default message destination  14800001
         AGO   .EROUTE                 and continue                     14850001
.*                                                                      14900001
.ROUT20  ANOP                                                           14950001
         MVI   MSGROUTE,MSGRSLOG       Message is destined for HCD log  15000001
         AGO   .EROUTE                 and continue                     15050001
.*                                                                      15100001
.ROUT30  ANOP                                                           15150001
         MVI   MSGROUTE,MSGRTLOG       Message is destined for          15200001
.*                                     temporary log               @L8A 15250001
         AGO   .EROUTE                 and continue                     15300001
.*                                                                      15350001
.ROUTER1 ANOP                                                           15400001
         MNOTE 8,'*** INVALID ROUTE PARAMETER'                          15450001
&ERROR   SETB  1                       Indicate error                   15500001
.EROUTE  ANOP                                                           15550001
.*                                                                      15600001
.********************************************************************** 15650001
.*                                                                    * 15700001
.*       Validate MID                                                 * 15750001
.*                                                                    * 15800001
.********************************************************************** 15850001
.*                                                                      15900001
.CKMID   ANOP                                                           15950001
&L       SETA  8                       Required MID length              16000001
         AIF   (T'&MID EQ 'O').NOMID   MID not specified                16050001
         AIF   ('&MID'(1,1) EQ '(').NOMREG   Register format            16100001
         AIF   ('&MID'(1,1) EQ '''').MID10   Check if quoted string     16150001
&SMID    SETC  '&MID'                   Set message id                  16200001
         AGO   .MID20                   and continue                    16250001
.*                                                                      16300001
.MID10   AIF   (K'&MID-2 NE &L ).MIDLEN  Number of characters           16350001
&SMID    SETC  '=C&MID'                 Set message id                  16400001
.*                                                                      16450001
.MID20   ANOP                                                           16500001
         MVC   MSGMID,&SMID            Message identifier               16550001
         AGO   .EMID                    Check next keyword              16600001
.*                                                                      16650001
.MIDLEN  MNOTE 8,'*** MID PARAMETER MUST BE &L CHARACTERS'              16700001
&ERROR   SETB  1                       Indicate error                   16750001
         AGO   .EMID                   Check next keyword               16800001
.*                                                                      16850001
.NOMREG  MNOTE 8,'*** REGISTER NOT ALLOWED FOR MID'                     16900001
&ERROR   SETB  1                        Indicate error                  16950001
         AGO   .EMID                    Check next keyword              17000001
.*                                                                      17050001
.NOMID   MNOTE 8,'*** MID PARAMETER IS REQUIRED'                        17100001
&ERROR   SETB  1                       Indicate error                   17150001
.EMID    ANOP                                                           17200001
.*                                                                      17250001
.********************************************************************** 17300001
.*                                                                    * 17350001
.*       Validate SEV                                                 * 17400001
.*                                                                    * 17450001
.********************************************************************** 17500001
.*                                                                      17550001
.CKSEV   ANOP                                                           17600001
         AIF   (T'&SEV EQ 'O').ESEV       SEV not specified             17650001
         AIF   ('&SEV'(1,1) EQ '(').SEVER1  Register format             17700001
         MVI   MSGSEV,&SEV             Severity level                   17750001
         AGO   .ESEV                   Check next keyword               17800001
.*                                                                      17850001
.SEVER1  ANOP                                                           17900001
         MNOTE 8,'*** REGISTER NOT ALLOWED FOR SEV'                     17950001
&ERROR   SETB  1                          Indicate error                18000001
.ESEV    ANOP                                                           18050001
.*                                                                      18100001
.********************************************************************** 18150001
.*                                                                    * 18200001
.*       Validate STMT                                                * 18250001
.*                                                                    * 18300001
.********************************************************************** 18350001
.*                                                                      18400001
.CKSTMT  ANOP                                                           18450001
         AIF   ('&STMT' EQ '').ESTMT       STMT not specified           18500001
         AIF   ('&STMT' EQ 'YES').STMT10   STMT=YES specified           18550001
         AIF   ('&STMT' EQ 'FILE').STMT20  STMT=FILE specified          18600001
         AIF   ('&STMT' NE 'NO').STMTER1   STMT=NO not specified        18650001
         AGO   .ESTMT                  Check next keyword               18700001
.*                                                                      18750001
.STMT10  ANOP                                                           18800001
         OI    MSGFLGS,MSGFSTMT        Indicate to supply statement no  18850001
         AGO   .ESTMT                  Check next keyword               18900001
.*                                                                      18950001
.STMT20  ANOP                                                           19000001
         OI    MSGFLGS,MSGFFILE        Indicate to supply file id       19050001
         AGO   .ESTMT                  Check next keyword               19100001
.*                                                                      19150001
.STMTER1 MNOTE 8,'*** INVALID STMT PARAMETER'                           19200001
&ERROR   SETB  1                       Indicate error                   19250001
.ESTMT   ANOP                                                           19300001
.*                                                                      19350001
.********************************************************************** 19400001
.*                                                                    * 19450001
.*       Validate CURSOR                                              * 19500001
.*                                                                    * 19550001
.********************************************************************** 19600001
.*                                                                      19650001
.CKCUR   ANOP                                                           19700001
         AIF   (T'&CURSOR EQ 'O').ECUR      CURSOR not specified        19750001
         AIF   ('&CURSOR'(1,1) EQ '(').CURER1  Register format          19800001
         MVC   MSGCURS,&CURSOR         cursor position                  19850001
         AGO   .ECUR                   Check next keyword               19900001
.*                                                                      19950001
.CURER1  ANOP                                                           20000001
         MNOTE 8,'*** REGISTER NOT ALLOWED FOR CURSOR'                  20050001
&ERROR   SETB  1                          Indicate error                20100001
.ECUR    ANOP                                                           20150001
.*                                                                      20200001
.********************************************************************** 20250001
.*                                                                    * 20300001
.*       Validate POSITION                                            * 20350001
.*                                                                    * 20400001
.********************************************************************** 20450001
.*                                                                      20500001
.CKPOS   ANOP                                                      @L8A 20550001
         AIF   (T'&POSITION EQ 'O').EPOS  POSITION not specified   @L8A 20600001
         AIF   ('&POSITION'(1,1) EQ '(').POSER1  Register format   @L8A 20650001
         AIF   ('&CURSOR' NE '').POSER2  CURSOR specified          @L8A 20700001
         MVC   MSGFPOS,&POSITION       Position field name         @L8A 20750001
         AGO   .EPOS                   Check next keyword          @L8A 20800001
.*                                                                      20850001
.POSER1  ANOP                                                      @L8A 20900001
         MNOTE 8,'*** REGISTER NOT ALLOWED FOR POSITION'           @L8A 20950001
&ERROR   SETB  1                       Indicate error              @L8A 21000001
         AGO   .EPOS                   Check next keyword               21050001
.POSER2  ANOP                                                      @L8A 21100001
         MNOTE 8,'*** POSITION AND CURSOR ARE MUTUALLY EXCLUSIVE'  @L8A 21150001
&ERROR   SETB  1                       Indicate error              @L8A 21200001
.EPOS    ANOP                                                      @L8A 21250001
.*                                                                      21300001
.********************************************************************** 21350001
.*                                                                    * 21400001
.*       Validate CONTROL                                             * 21450001
.*                                                                    * 21500001
.********************************************************************** 21550001
.*                                                                      21600001
.CKCNTL  ANOP                                                      @L1A 21650001
         AIF   ('&CONTROL' EQ '').ECNTL       no CONTROL specified @L1A 21700001
         AIF   ('&CONTROL' EQ 'YES').CNTL10   CONTROL=YES          @L1A 21750001
         AIF   ('&CONTROL' NE 'NO').CNTLER1   CONTROL=NO           @L1A 21800001
         AGO   .ECNTL                         Check next keyword   @L1A 21850001
.*                                                                 @L1A 21900001
.CNTL10  ANOP                                                      @L1A 21950001
         OI    MSGFLGS,MSGFCNTL        Indicate control message    @L1A 22000001
         AGO   .ECNTL                  Check next keyword          @L1A 22050001
.*                                                                 @L1A 22100001
.CNTLER1 MNOTE 8,'*** INVALID CONTROL PARAMETER'                   @L1A 22150001
&ERROR   SETB  1                       Indicate error              @L1A 22200001
.ECNTL   ANOP                                                      @L1A 22250001
.*                                                                      22300001
.********************************************************************** 22350001
.*                                                                    * 22400001
.*       Validate VAR1                                                * 22450001
.*                                                                    * 22500001
.********************************************************************** 22550001
.*                                                                      22600001
.CKVAR1  ANOP                                                           22650001
         AIF   ('&VAR1' EQ '').EVAR1   VAR1 not specified               22700001
         AIF   ('&VAR1'(1,1) EQ '''').VAR1ER2 Check if quoted string    22750001
         LA    15,&VAR1(1)             Get address of message variable  22800001
         ST    15,MSGPTR1              And save address in parm list    22850001
         LA    15,L'&VAR1(1)           Get length of message variable   22900001
         STC   15,MSGLEN1              Save length in parm list    @M3C 22950001
.*                                                                      23000001
&MTYP    SETC  'MSGTCHAR'               set default variable type       23050001
         AIF   (N'&VAR1 GT 2).VAR1ER3   Too many subparameters specifed 23100001
         AIF   (('&VAR1(2)' EQ '') OR ('&VAR1(2)' EQ 'C')).VAR120       23150001
&MTYP    SETC  'MSGTBIN'                set binary variable type        23200001
         AIF   ('&VAR1(2)' EQ 'B').VAR120                               23250001
&MTYP    SETC  'MSGTHEX'                set hex variable type           23300001
         AIF   ('&VAR1(2)' EQ 'H').VAR120                               23350001
         AGO   .VAR1ER4                 invalid 2nd subparameter        23400001
.*                                                                      23450001
.VAR120  ANOP                                                           23500001
         MVI   MSGTYP1,&MTYP           Set message variable type        23550001
         AGO   .EVAR1                   Check next keyword              23600001
.*                                                                      23650001
.VAR1ER1 MNOTE 8,'*** REGISTER NOTATION NOT ALLOWED FOR VAR1 PARAMETER' 23700001
&ERROR   SETB  1                        Indicate error                  23750001
         AGO   .EVAR1                   Check next keyword              23800001
.*                                                                      23850001
.VAR1ER2 MNOTE 8,'*** VAR1 PARAMETER MUST BE A VARIABLE'                23900001
&ERROR   SETB  1                       Indicate error                   23950001
         AGO   .EVAR1                   Check next keyword              24000001
.*                                                                      24050001
.VAR1ER3 MNOTE 8,'*** TOO MANY SUBPARAMETERS FOR VAR1 PARAMETER'        24100001
&ERROR   SETB  1                        Indicate error                  24150001
         AGO   .EVAR1                   Check next keyword              24200001
.*                                                                      24250001
.VAR1ER4 MNOTE 8,'*** INVALID SECOND SUBPARAMETER FOR VAR1 PARAMETER'   24300001
&ERROR   SETB  1                        Indicate error                  24350001
.*                                                                      24400001
.EVAR1   ANOP                                                           24450001
.*                                                                      24500001
.********************************************************************** 24550001
.*                                                                    * 24600001
.*       Validate VAR2                                                * 24650001
.*                                                                    * 24700001
.********************************************************************** 24750001
.*                                                                      24800001
.CKVAR2  ANOP                                                           24850001
         AIF   ('&VAR2' EQ '').EVAR2   VAR2 not specified               24900001
         AIF   ('&VAR2'(1,1) EQ '''').VAR2ER2 Check if quoted string    24950001
         LA    15,&VAR2(1)             Get address of message variable  25000001
         ST    15,MSGPTR2              And save address in parm list    25050001
         LA    15,L'&VAR2(1)           Get length of message variable   25100001
         STC   15,MSGLEN2              Save length in parm list    @M3C 25150001
.*                                                                      25200001
&MTYP    SETC  'MSGTCHAR'               set default variable type       25250001
         AIF   (N'&VAR2 GT 2).VAR2ER3   Too many subparameters specif'd 25300001
         AIF   ('&VAR2(2)' EQ '' OR '&VAR2(2)' EQ 'C').VAR220           25350001
&MTYP    SETC  'MSGTBIN'                set binary variable type        25400001
         AIF   ('&VAR2(2)' EQ 'B').VAR220                               25450001
&MTYP    SETC  'MSGTHEX'                set hex variable type           25500001
         AIF   ('&VAR2(2)' EQ 'H').VAR220                               25550001
         AGO   .VAR2ER4                 invalid 2nd subparameter        25600001
.*                                                                      25650001
.VAR220  ANOP                                                           25700001
         MVI   MSGTYP2,&MTYP           Set message variable type        25750001
         AGO   .EVAR2                   Check next keyword              25800001
.*                                                                      25850001
.VAR2ER2 MNOTE 8,'*** VAR2 PARAMETER MUST BE A VARIABLE'                25900001
&ERROR   SETB  1                       Indicate error                   25950001
         AGO   .EVAR2                   Check next keyword              26000001
.*                                                                      26050001
.VAR2ER3 MNOTE 8,'*** TOO MANY SUBPARAMETERS FOR VAR2 PARAMETER'        26100001
&ERROR   SETB  1                        Indicate error                  26150001
         AGO   .EVAR2                   Check next keyword              26200001
.*                                                                      26250001
.VAR2ER4 MNOTE 8,'*** INVALID SECOND SUBPARAMETER FOR VAR2 PARAMETER'   26300001
&ERROR   SETB  1                        Indicate error                  26350001
.*                                                                      26400001
.EVAR2   ANOP                                                           26450001
.*                                                                      26500001
.********************************************************************** 26550001
.*                                                                    * 26600001
.*       Validate VAR3                                                * 26650001
.*                                                                    * 26700001
.********************************************************************** 26750001
.*                                                                      26800001
.CKVAR3  ANOP                                                           26850001
         AIF   ('&VAR3' EQ '').EVAR3   VAR3 not specified               26900001
         AIF   ('&VAR3'(1,1) EQ '''').VAR3ER2 Check if quoted string    26950001
         LA    15,&VAR3(1)             Get address of message variable  27000001
         ST    15,MSGPTR3              And save address in parm list    27050001
         LA    15,L'&VAR3(1)           Get length of message variable   27100001
         STC   15,MSGLEN3              Save length in parm list    @M3C 27150001
.*                                                                      27200001
&MTYP    SETC  'MSGTCHAR'               set default variable type       27250001
         AIF   (N'&VAR3 GT 2).VAR3ER3   Too many subparameters specif'd 27300001
         AIF   ('&VAR3(2)' EQ '' OR '&VAR3(2)' EQ 'C').VAR320           27350001
&MTYP    SETC  'MSGTBIN'                set binary variable type        27400001
         AIF   ('&VAR3(2)' EQ 'B').VAR320                               27450001
&MTYP    SETC  'MSGTHEX'                set hex variable type           27500001
         AIF   ('&VAR3(2)' EQ 'H').VAR320                               27550001
         AGO   .VAR3ER4                 invalid 2nd subparameter        27600001
.*                                                                      27650001
.VAR320  ANOP                                                           27700001
         MVI   MSGTYP3,&MTYP           Set message variable type        27750001
         AGO   .EVAR3                   Check next keyword              27800001
.*                                                                      27850001
.VAR3ER2 MNOTE 8,'*** VAR3 PARAMETER MUST BE A VARIABLE'                27900001
&ERROR   SETB  1                       Indicate error                   27950001
         AGO   .EVAR3                   Check next keyword              28000001
.*                                                                      28050001
.VAR3ER3 MNOTE 8,'*** TOO MANY SUBPARAMETERS FOR VAR3 PARAMETER'        28100001
&ERROR   SETB  1                        Indicate error                  28150001
         AGO   .EVAR3                   Check next keyword              28200001
.*                                                                      28250001
.VAR3ER4 MNOTE 8,'*** INVALID SECOND SUBPARAMETER FOR VAR3 PARAMETER'   28300001
&ERROR   SETB  1                        Indicate error                  28350001
.*                                                                      28400001
.EVAR3   ANOP                                                           28450001
.*                                                                      28500001
.********************************************************************** 28550001
.*                                                                    * 28600001
.*       Validate VAR4                                                * 28650001
.*                                                                    * 28700001
.********************************************************************** 28750001
.*                                                                      28800001
.CKVAR4  ANOP                                                           28850001
         AIF   ('&VAR4' EQ '').EVAR4   VAR4 not specified               28900001
         AIF   ('&VAR4'(1,1) EQ '''').VAR4ER2 Check if quoted string    28950001
         LA    15,&VAR4(1)             Get address of message variable  29000001
         ST    15,MSGPTR4              And save address in parm list    29050001
         LA    15,L'&VAR4(1)           Get length of message variable   29100001
         STC   15,MSGLEN4              Save length in parm list    @M3C 29150001
.*                                                                      29200001
&MTYP    SETC  'MSGTCHAR'              set default variable type        29250001
         AIF   (N'&VAR4 GT 2).VAR4ER3  Too many subparameters specified 29300001
         AIF   ('&VAR4(2)' EQ '' OR '&VAR4(2)' EQ 'C').VAR420           29350001
&MTYP    SETC  'MSGTBIN'               set binary variable type         29400001
         AIF   ('&VAR4(2)' EQ 'B').VAR420                               29450001
&MTYP    SETC  'MSGTHEX'               set hex variable type            29500001
         AIF   ('&VAR4(2)' EQ 'H').VAR420                               29550001
         AGO   .VAR4ER4                invalid 2nd subparameter         29600001
.*                                                                      29650001
.VAR420  ANOP                                                           29700001
         MVI   MSGTYP4,&MTYP           Set message variable type        29750001
         AGO   .EVAR4                   Check next keyword              29800001
.*                                                                      29850001
.VAR4ER2 MNOTE 8,'*** VAR4 PARAMETER MUST BE A VARIABLE'                29900001
&ERROR   SETB  1                       Indicate error                   29950001
         AGO   .EVAR4                   Check next keyword              30000001
.*                                                                      30050001
.VAR4ER3 MNOTE 8,'*** TOO MANY SUBPARAMETERS FOR VAR4 PARAMETER'        30100001
&ERROR   SETB  1                        Indicate error                  30150001
         AGO   .EVAR4                   Check next keyword              30200001
.*                                                                      30250001
.VAR4ER4 MNOTE 8,'*** INVALID SECOND SUBPARAMETER FOR VAR4 PARAMETER'   30300001
&ERROR   SETB  1                        Indicate error                  30350001
.*                                                                      30400001
.EVAR4   ANOP                                                           30450001
.*                                                                      30500001
.********************************************************************** 30550001
.*                                                                    * 30600001
.*       Validate VAR5                                                * 30650001
.*                                                                    * 30700001
.********************************************************************** 30750001
.*                                                                      30800001
.CKVAR5  ANOP                                                           30850001
         AIF   ('&VAR5' EQ '').EVAR5   VAR5 not specified               30900001
         AIF   ('&VAR5'(1,1) EQ '''').VAR5ER2 Check if quoted string    30950001
         LA    15,&VAR5(1)             Get address of message variable  31000001
         ST    15,MSGPTR5              And save address in parm list    31050001
         LA    15,L'&VAR5(1)           Get length of message variable   31100001
         STC   15,MSGLEN5              Save length in parm list    @M3C 31150001
.*                                                                      31200001
&MTYP    SETC  'MSGTCHAR'               set default variable type       31250001
         AIF   (N'&VAR5 GT 2).VAR5ER3  Too many subparameters specified 31300001
         AIF   ('&VAR5(2)' EQ '' OR '&VAR5(2)' EQ 'C').VAR520           31350001
&MTYP    SETC  'MSGTBIN'                set binary variable type        31400001
         AIF   ('&VAR5(2)' EQ 'B').VAR520                               31450001
&MTYP    SETC  'MSGTHEX'                set hex variable type           31500001
         AIF   ('&VAR5(2)' EQ 'H').VAR520                               31550001
         AGO   .VAR5ER4                 invalid 2nd subparameter        31600001
.*                                                                      31650001
.VAR520  ANOP                                                           31700001
         MVI   MSGTYP5,&MTYP           Set message variable type        31750001
         AGO   .EVAR5                   Check next keyword              31800001
.*                                                                      31850001
.VAR5ER2 MNOTE 8,'*** VAR5 PARAMETER MUST BE A VARIABLE'                31900001
&ERROR   SETB  1                       Indicate error                   31950001
         AGO   .EVAR5                   Check next keyword              32000001
.*                                                                      32050001
.VAR5ER3 MNOTE 8,'*** TOO MANY SUBPARAMETERS FOR VAR5 PARAMETER'        32100001
&ERROR   SETB  1                        Indicate error                  32150001
         AGO   .EVAR5                   Check next keyword              32200001
.*                                                                      32250001
.VAR5ER4 MNOTE 8,'*** INVALID SECOND SUBPARAMETER FOR VAR5 PARAMETER'   32300001
&ERROR   SETB  1                        Indicate error                  32350001
.*                                                                      32400001
.EVAR5   ANOP                                                           32450001
.*                                                                      32500001
.********************************************************************** 32550001
.*                                                                    * 32600001
.*       Validate VAR6                                                * 32650001
.*                                                                    * 32700001
.********************************************************************** 32750001
.*                                                                      32800001
.CKVAR6  ANOP                                                           32850001
         AIF   ('&VAR6' EQ '').EVAR6   VAR6 not specified               32900001
         AIF   ('&VAR6'(1,1) EQ '''').VAR6ER2 Check if quoted string    32950001
         LA    15,&VAR6(1)             Get address of message variable  33000001
         ST    15,MSGPTR6              And save address in parm list    33050001
         LA    15,L'&VAR6(1)           Get length of message variable   33100001
         STC   15,MSGLEN6              Save length in parm list    @M3C 33150001
.*                                                                      33200001
&MTYP    SETC  'MSGTCHAR'               set default variable type       33250001
         AIF   (N'&VAR6 GT 2).VAR6ER3  Too many subparameters specified 33300001
         AIF   ('&VAR6(2)' EQ '' OR '&VAR6(2)' EQ 'C').VAR620           33350001
&MTYP    SETC  'MSGTBIN'                set binary variable type        33400001
         AIF   ('&VAR6(2)' EQ 'B').VAR620                               33450001
&MTYP    SETC  'MSGTHEX'                set hex variable type           33500001
         AIF   ('&VAR6(2)' EQ 'H').VAR620                               33550001
         AGO   .VAR6ER4                 invalid 2nd subparameter        33600001
.*                                                                      33650001
.VAR620  ANOP                                                           33700001
         MVI   MSGTYP6,&MTYP           Set message variable type        33750001
         AGO   .EVAR6                   Check next keyword              33800001
.*                                                                      33850001
.VAR6ER2 MNOTE 8,'*** VAR6 PARAMETER MUST BE A VARIABLE'                33900001
&ERROR   SETB  1                       Indicate error                   33950001
         AGO   .EVAR6                   Check next keyword              34000001
.*                                                                      34050001
.VAR6ER3 MNOTE 8,'*** TOO MANY SUBPARAMETERS FOR VAR6 PARAMETER'        34100001
&ERROR   SETB  1                        Indicate error                  34150001
         AGO   .EVAR6                   Check next keyword              34200001
.*                                                                      34250001
.VAR6ER4 MNOTE 8,'*** INVALID SECOND SUBPARAMETER FOR VAR6 PARAMETER'   34300001
&ERROR   SETB  1                        Indicate error                  34350001
.*                                                                      34400001
.EVAR6   ANOP                                                           34450001
.*                                                                      34500001
.********************************************************************** 34550001
.*                                                                    * 34600001
.*       Validate VAR7                                                * 34650001
.*                                                                    * 34700001
.********************************************************************** 34750001
.*                                                                      34800001
.CKVAR7  ANOP                                                           34850001
         AIF   ('&VAR7' EQ '').EVAR7   VAR7 not specified               34900001
         AIF   ('&VAR7'(1,1) EQ '''').VAR7ER2 Check if quoted string    34950001
         LA    15,&VAR7(1)             Get address of message variable  35000001
         ST    15,MSGPTR7              And save address in parm list    35050001
         LA    15,L'&VAR7(1)           Get length of message variable   35100001
         STC   15,MSGLEN7              Save length in parm list    @M3C 35150001
.*                                                                      35200001
&MTYP    SETC  'MSGTCHAR'               set default variable type       35250001
         AIF   (N'&VAR7 GT 2).VAR7ER3  Too many subparameters specified 35300001
         AIF   ('&VAR7(2)' EQ '' OR '&VAR7(2)' EQ 'C').VAR720           35350001
&MTYP    SETC  'MSGTBIN'                set binary variable type        35400001
         AIF   ('&VAR7(2)' EQ 'B').VAR720                               35450001
&MTYP    SETC  'MSGTHEX'                set hex variable type           35500001
         AIF   ('&VAR7(2)' EQ 'H').VAR720                               35550001
         AGO   .VAR7ER4                 invalid 2nd subparameter        35600001
.*                                                                      35650001
.VAR720  ANOP                                                           35700001
         MVI   MSGTYP7,&MTYP           Set message variable type        35750001
         AGO   .EVAR7                   Check next keyword              35800001
.*                                                                      35850001
.VAR7ER2 MNOTE 8,'*** VAR7 PARAMETER MUST BE A VARIABLE'                35900001
&ERROR   SETB  1                       Indicate error                   35950001
         AGO   .EVAR7                   Check next keyword              36000001
.*                                                                      36050001
.VAR7ER3 MNOTE 8,'*** TOO MANY SUBPARAMETERS FOR VAR7 PARAMETER'        36100001
&ERROR   SETB  1                        Indicate error                  36150001
         AGO   .EVAR7                   Check next keyword              36200001
.*                                                                      36250001
.VAR7ER4 MNOTE 8,'*** INVALID SECOND SUBPARAMETER FOR VAR7 PARAMETER'   36300001
&ERROR   SETB  1                        Indicate error                  36350001
.*                                                                      36400001
.EVAR7   ANOP                                                           36450001
.*                                                                      36500001
.********************************************************************** 36550001
.*                                                                    * 36600001
.*       Validate VAR8                                                * 36650001
.*                                                                    * 36700001
.********************************************************************** 36750001
.*                                                                      36800001
.CKVAR8  ANOP                                                           36850001
         AIF   ('&VAR8' EQ '').EVAR8   VAR8 not specified               36900001
         AIF   ('&VAR8'(1,1) EQ '''').VAR8ER2 Check if quoted string    36950001
         LA    15,&VAR8(1)             Get address of message variable  37000001
         ST    15,MSGPTR8              And save address in parm list    37050001
         LA    15,L'&VAR8(1)           Get length of message variable   37100001
         STC   15,MSGLEN8              Save length in parm list    @M3C 37150001
.*                                                                      37200001
&MTYP    SETC  'MSGTCHAR'               set default variable type       37250001
         AIF   (N'&VAR8 GT 2).VAR8ER3  Too many subparameters specified 37300001
         AIF   (('&VAR8(2)' EQ '') OR ('&VAR8(2)' EQ 'C')).VAR820       37350001
&MTYP    SETC  'MSGTBIN'                set binary variable type        37400001
         AIF   ('&VAR8(2)' EQ 'B').VAR820                               37450001
&MTYP    SETC  'MSGTHEX'                set hex variable type           37500001
         AIF   ('&VAR8(2)' EQ 'H').VAR820                               37550001
         AGO   .VAR8ER4                 invalid 2nd subparameter        37600001
.*                                                                      37650001
.VAR820  ANOP                                                           37700001
         MVI   MSGTYP8,&MTYP           Set message variable type        37750001
         AGO   .EVAR8                   Check next keyword              37800001
.*                                                                      37850001
.VAR8ER2 MNOTE 8,'*** VAR8 PARAMETER MUST BE A VARIABLE'                37900001
&ERROR   SETB  1                       Indicate error                   37950001
         AGO   .EVAR8                   Check next keyword              38000001
.*                                                                      38050001
.VAR8ER3 MNOTE 8,'*** TOO MANY SUBPARAMETERS FOR VAR8 PARAMETER'        38100001
&ERROR   SETB  1                        Indicate error                  38150001
         AGO   .EVAR8                   Check next keyword              38200001
.*                                                                      38250001
.VAR8ER4 MNOTE 8,'*** INVALID SECOND SUBPARAMETER FOR VAR8 PARAMETER'   38300001
&ERROR   SETB  1                        Indicate error                  38350001
.*                                                                      38400001
.EVAR8   ANOP                                                           38450001
.*                                                                      38500001
.********************************************************************** 38550001
.*                                                                    * 38600001
.*       Validate VAR9                                                * 38650001
.*                                                                    * 38700001
.********************************************************************** 38750001
.*                                                                      38800001
.CKVAR9  ANOP                                                           38850001
         AIF   ('&VAR9' EQ '').EVAR9   VAR9 not specified               38900001
         AIF   ('&VAR9'(1,1) EQ '''').VAR9ER2 Check if quoted string    38950001
         LA    15,&VAR9(1)             Get address of message variable  39000001
         ST    15,MSGPTR9              And save address in parm list    39050001
         LA    15,L'&VAR9(1)           Get length of message variable   39100001
         STC   15,MSGLEN9              Save length in parm list    @M3C 39150001
.*                                                                      39200001
&MTYP    SETC  'MSGTCHAR'               set default variable type       39250001
         AIF   (N'&VAR9 GT 2).VAR9ER3  Too many subparameters specified 39300001
         AIF   (('&VAR9(2)' EQ '') OR ('&VAR9(2)' EQ 'C')).VAR920       39350001
&MTYP    SETC  'MSGTBIN'                set binary variable type        39400001
         AIF   ('&VAR9(2)' EQ 'B').VAR920                               39450001
&MTYP    SETC  'MSGTHEX'                set hex variable type           39500001
         AIF   ('&VAR9(2)' EQ 'H').VAR920                               39550001
         AGO   .VAR9ER4                 invalid 2nd subparameter        39600001
.*                                                                      39650001
.VAR920  ANOP                                                           39700001
         MVI   MSGTYP9,&MTYP           Set message variable type        39750001
         AGO   .EVAR9                   Check next keyword              39800001
.*                                                                      39850001
.VAR9ER2 MNOTE 8,'*** VAR9 PARAMETER MUST BE A VARIABLE'                39900001
&ERROR   SETB  1                       Indicate error                   39950001
         AGO   .EVAR9                   Check next keyword              40000001
.*                                                                      40050001
.VAR9ER3 MNOTE 8,'*** TOO MANY SUBPARAMETERS FOR VAR9 PARAMETER'        40100001
&ERROR   SETB  1                        Indicate error                  40150001
         AGO   .EVAR9                   Check next keyword              40200001
.*                                                                      40250001
.VAR9ER4 MNOTE 8,'*** INVALID SECOND SUBPARAMETER FOR VAR9 PARAMETER'   40300001
&ERROR   SETB  1                        Indicate error                  40350001
.*                                                                      40400001
.EVAR9   ANOP                                                           40450001
.*                                                                      40500001
.********************************************************************** 40550001
.*                                                                    * 40600001
.*           GENERATE BAL SOURCE STATEMENTS                           * 40650001
.*                                                                    * 40700001
.********************************************************************** 40750001
.*                                                                      40800001
         AIF   (&ERROR EQ 1).EXIT     Exit if errors found              40850001
.*                                                                      40900001
         &OP   15,&CPVT                Get CPVT address                 40950001
         ST    15,$MSG&SDX             Set CPVT address                 41000001
         B     $MSG&SDX+8              Branch around parm list          41050001
$MSG&SDX DS    A                       Address of CPVT                  41100001
         DC    A(MSGR)                 Address of MSGR                  41150001
         LA    1,$MSG&SDX              Address of parameter area        41200001
         L     15,&MSGRTN              Address of MSGR routine          41250001
         BALR  14,15                   Go and process message           41300001
.*                                                                      41350001
.********************************************************************** 41400001
.*                                                                    * 41450001
.*       Exit                                                         * 41500001
.*                                                                    * 41550001
.********************************************************************** 41600001
.*                                                                      41650001
.EXIT    ANOP                                                           41700001
         MEND                                                           41750001
*                                                                    */ 41800001
* CBDIMSG:                                                              41850001
*  MACRO                                                                41900001
*  KEYS(MID,SEV,STMT,VAR1,VAR2,VAR3,VAR4,VAR5,VAR6,VAR7,VAR8,VAR9,      41950001
*       REQ,ROUTE,CURSOR,POSITION,CONTROL,                              42000001
*       STORADDR,STORLEN,STORHELP,SEVC);                      /* @L8C*/ 42050001
*/********************************************************************/ 42100001
*/*                                                                  */ 42150001
*/*      DECLARE VARIABLES                                           */ 42200001
*/*                                                                  */ 42250001
*/********************************************************************/ 42300001
*                                                                       42350001
*/********************************************************************/ 42400001
* /*  EXTERNAL VARIABLES                                             */ 42450001
*/********************************************************************/ 42500001
*  DCL  EHARC    FIXED EXTERNAL;   /* FOR RETURN CODE FROM MACRO     */ 42550001
*                                                                       42600001
*/********************************************************************/ 42650001
* /*  INTERNAL VARIABLES                                             */ 42700001
*/********************************************************************/ 42750001
*  DCL  CMT      CHAR  INTERNAL;   /* ERROR MESSAGE TO PRINT         */ 42800001
*  DCL  IMACRO   CHAR  INTERNAL;   /* MACRO PARAMETERS               */ 42850001
*  DCL  INDENT   FIXED INTERNAL;   /* INDENT VALUE FOR LISTING       */ 42900001
*  DCL  RCERR    FIXED INTERNAL;   /* ERROR FLAG FOR RETURN CODE     */ 42950001
*  DCL  SNUM     CHAR  INTERNAL;   /* STATEMENT NUMBER               */ 43000001
*  DCL  VART(9)  CHAR  INTERNAL;   /* Message variable type          */ 43050001
*                                                                       43100001
*/********************************************************************/ 43150001
* /*  INITIALIZE VARIABLES                                           */ 43200001
*/********************************************************************/ 43250001
*  IMACRO=' ?'||MACLABEL||' '||MACNAME||MACLIST||' '||MACKEYS||' ';     43300001
*  RCERR = 8;                      /* ERROR SEVERITY                 */ 43350001
*  EHARC=0;                        /* INITIALIZE RETURN CODE         */ 43400001
*  INDENT=MACCOL+2;                /* INDENT TWO COLUMNS FOR FORMAT  */ 43450001
*                                                                       43500001
*/********************************************************************/ 43550001
*/*      Start code & list macro parameters                          */ 43600001
*/********************************************************************/ 43650001
*  IF MACLABEL~='' THEN            /* GENERATE MACLABEL              */ 43700001
*     ANS(MACLABEL)  COL(MACLMAR);                                      43750001
*  ANS('DO; '|| COMMENT(IMACRO)) COL(MACCOL); /* START CODE & LIST      43800001
*                                                MACRO PARAMETERS    */ 43850001
*                                                                       43900001
*/********************************************************************/ 43950001
*/*      Checks positionals                                          */ 44000001
*/********************************************************************/ 44050001
*  IF NUMBER(MACLIST) > 1 THEN DO;   /* CHECK FOR POSITIONALS        */ 44100001
*     CMT = 'TOO MANY POSITIONALS SPECIFIED. ONLY ''GEN'' OR ' ||       44150001
*           '''CALL'' ALLOWED.';                                        44200001
*     ANS MSG(CMT);                /* PRINT ERROR MESSAGE            */ 44250001
*     ANS (COMMENT(CMT)) COL(INDENT);                                   44300001
*     EHARC = RCERR;               /* SET ERROR RETURN CODE          */ 44350001
*     END;                                                              44400001
*                                                                       44450001
*  IF MACLIST(1) ~= '' THEN DO;    /* positional specified           */ 44500001
*     IF MACLIST(1) ~= 'GEN'  &    /* wrong positional specified     */ 44550001
*        MACLIST(1) ~= 'CALL'   THEN DO; /*                         */  44600001
*        CMT = 'WRONG POSITIONAL SPECIFIED. ONLY ''GEN'' OR ' ||        44650001
*              '''CALL'' ALLOWED.';                                     44700001
*        ANS MSG(CMT);             /* PRINT ERROR MESSAGE            */ 44750001
*        ANS (COMMENT(CMT)) COL(INDENT);                                44800001
*        EHARC = RCERR;            /* SET ERROR RETURN CODE          */ 44850001
*        END;                                                           44900001
*     END;                                                              44950001
*                                                                       45000001
*  IF MACLIST(1) ~= 'CALL' &       /* MID is required if not CALL    */ 45050001
*     MID = '' THEN DO;            /* TEST FOR MID                   */ 45100001
*     CMT ='MID PARAMETER IS REQUIRED. ';                               45150001
*     ANS MSG(CMT);                /* PRINT ERROR MESSAGE            */ 45200001
*     ANS(COMMENT(CMT)) COL(INDENT);                                    45250001
*     EHARC=RCERR;                 /* SET ERROR RETURN CODE          */ 45300001
*     END;                                                              45350001
*                                                                       45400001
*/********************************************************************/ 45450001
*/*      Checks REQ key word                                         */ 45500001
*/********************************************************************/ 45550001
*  IF REQ ~= '' THEN DO;           /* Test if REQ parameter exists   */ 45600001
*     IF REQ(1) ~= 'UIM' THEN DO;  /* Must be REQ=UIM                */ 45650001
*        CMT ='INVALID REQ PARAMETER. ';                                45700001
*        ANS MSG(CMT);             /* Print error message            */ 45750001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 45800001
*        EHARC=RCERR;              /* Set error return code          */ 45850001
*        END;                                                           45900001
*     END;                                                              45950001
*                                                                       46000001
*/********************************************************************/ 46050001
*/*      Checks ROUTE key word                                       */ 46100001
*/********************************************************************/ 46150001
*  IF ROUTE ~= '' THEN             /* Check if ROUTE parameter exists*/ 46200001
*     IF ROUTE(1) ~= 'LOG' &       /* Check if ROUTE=LOG or          */ 46250001
*        ROUTE(1) ~= 'TEMPLOG' THEN /* ROUTE=TEMPLOG specified   @L8A*/ 46300001
*     DO;                          /*                            @L8A*/ 46350001
*        CMT ='INVALID ROUTE PARAMETER. ';                              46400001
*        ANS MSG(CMT);             /* Print error message            */ 46450001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 46500001
*        EHARC=RCERR;              /* Set error return code          */ 46550001
*     END;                                                              46600001
*                                                                       46650001
*/********************************************************************/ 46700001
*/*      Checks CURSOR and POSITION key words                        */ 46750001
*/********************************************************************/ 46800001
*  IF POSITION ~= '' &             /* POSISTION specified        @L8A*/ 46850001
*     CURSOR ~= '' THEN DO;        /* CURSOR specified           @L8A*/ 46900001
*        CMT ='POSITION AND CURSOR ARE MUTUALLY EXCLUSIVE'; /*   @L8A*/ 46950001
*        ANS MSG(CMT);             /* Print error message        @L8A*/ 47000001
*        ANS(COMMENT(CMT)) COL(INDENT);                     /*   @L8A*/ 47050001
*        EHARC=RCERR;              /* Set error return code      @L8A*/ 47100001
*     END;                                                              47150001
*                                                                       47200001
*/********************************************************************/ 47250001
*/*      Checks STMT key word                                        */ 47300001
*/********************************************************************/ 47350001
*  IF STMT ~= '' THEN              /* TEST STMT parameter            */ 47400001
*     IF STMT(1) ~= 'YES' &                                             47450001
*        STMT(1) ~= 'NO' &                                              47500001
*        STMT(1) ~= 'FILE' THEN DO;/* Check if STMT=YES|NO|FILE         47550001
*                                     is specified                   */ 47600001
*        CMT ='INVALID STMT PARAMETER. ';                               47650001
*        ANS MSG(CMT);             /* Print error message            */ 47700001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 47750001
*        EHARC=RCERR;              /* Set error return code          */ 47800001
*        END;                                                           47850001
*                                                                       47900001
*/********************************************************************/ 47950001
*/*      Checks STORADDR / STORLEN / STORHELP key words              */ 48000001
*/********************************************************************/ 48050001
*  IF STORADDR ~= '' THEN          /* Test key word              @M1A*/ 48100001
*  DO;                                                        /* @M1A*/ 48150001
*     IF NUMBER(STORADDR) ~= 1 THEN /* Wrong number of arguments @M1A*/ 48200001
*     DO;                                                     /* @M1A*/ 48250001
*        CMT ='Wrong number of arguments of STORADDR key word. ';       48300001
*        ANS MSG(CMT);             /* Print error message        @M1A*/ 48350001
*        ANS(COMMENT(CMT)) COL(INDENT);                       /* @M1A*/ 48400001
*        EHARC=RCERR;              /* Set error return code      @M1A*/ 48450001
*     END;                                                              48500001
*     IF STORLEN = '' THEN         /* required key word          @M1A*/ 48550001
*     DO;                                                     /* @M1A*/ 48600001
*        CMT ='Key word STORLEN required for STORADDR. ';               48650001
*        ANS MSG(CMT);             /* Print error message        @M1A*/ 48700001
*        ANS(COMMENT(CMT)) COL(INDENT);                       /* @M1A*/ 48750001
*        EHARC=RCERR;              /* Set error return code      @M1A*/ 48800001
*     END;                                                              48850001
*  END;                                                       /* @M1A*/ 48900001
*  IF STORLEN ~= '' THEN           /* Test key word              @M1A*/ 48950001
*  DO;                                                        /* @M1A*/ 49000001
*     IF NUMBER(STORLEN) ~= 1 THEN /* Wrong number of arguments  @M1A*/ 49050001
*     DO;                                                     /* @M1A*/ 49100001
*        CMT ='Wrong number of arguments of STORLEN key word. ';        49150001
*        ANS MSG(CMT);             /* Print error message        @M1A*/ 49200001
*        ANS(COMMENT(CMT)) COL(INDENT);                       /* @M1A*/ 49250001
*        EHARC=RCERR;              /* Set error return code      @M1A*/ 49300001
*     END;                                                              49350001
*     IF STORADDR = '' THEN        /* required key word          @M1A*/ 49400001
*     DO;                                                     /* @M1A*/ 49450001
*        CMT ='Key word STORADDR required for STORLEN. ';               49500001
*        ANS MSG(CMT);             /* Print error message        @M1A*/ 49550001
*        ANS(COMMENT(CMT)) COL(INDENT);                       /* @M1A*/ 49600001
*        EHARC=RCERR;              /* Set error return code      @M1A*/ 49650001
*     END;                                                              49700001
*  END;                                                       /* @M1A*/ 49750001
*  IF STORHELP ~= '' THEN          /* Test key word              @M1A*/ 49800001
*  DO;                                                        /* @M1A*/ 49850001
*     IF NUMBER(STORHELP) ~= 1 THEN /* Wrong number of arguments @M1A*/ 49900001
*     DO;                                                     /* @M1A*/ 49950001
*        CMT ='Wrong number of arguments of STORHELP key word. ';       50000001
*        ANS MSG(CMT);             /* Print error message        @M1A*/ 50050001
*        ANS(COMMENT(CMT)) COL(INDENT);                       /* @M1A*/ 50100001
*        EHARC=RCERR;              /* Set error return code      @M1A*/ 50150001
*     END;                                                              50200001
*     IF STORADDR = '' THEN        /* required key word          @M1A*/ 50250001
*     DO;                                                     /* @M1A*/ 50300001
*        CMT ='Key word STORADDR required for STORHELP. ';              50350001
*        ANS MSG(CMT);             /* Print error message        @M1A*/ 50400001
*        ANS(COMMENT(CMT)) COL(INDENT);                       /* @M1A*/ 50450001
*        EHARC=RCERR;              /* Set error return code      @M1A*/ 50500001
*     END;                                                              50550001
*  END;                                                       /* @M1A*/ 50600001
*                                                                       50650001
*/********************************************************************/ 50700001
*/*      Checks VAR1 key word                                        */ 50750001
*/********************************************************************/ 50800001
*  IF VAR1 ~= '' THEN DO;          /* Test if VAR1 parameter exists  */ 50850001
*     IF NUMBER(VAR1) > 2 THEN DO;  /* Check for too many operands   */ 50900001
*        CMT ='TOO MANY ARGUMENTS SPECIFIED FOR VAR1 PARAMETER, ';      50950001
*        ANS MSG(CMT);             /* Print error message            */ 51000001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 51050001
*        EHARC=RCERR;              /* Set error return code          */ 51100001
*        END;                                                           51150001
*     IF NUMBER(VAR1) < 1 THEN DO;  /* Check for too few operands    */ 51200001
*        CMT ='TOO FEW ARGUMENTS SPECIFIED FOR VAR1 PARAMETER, ';       51250001
*        ANS MSG(CMT);             /* Print error message            */ 51300001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 51350001
*        EHARC=RCERR;              /* Set error return code          */ 51400001
*        END;                                                           51450001
*     VART(1) = 'MSGTCHAR' ;        /* Indicate character type       */ 51500001
*     IF VAR1(2) ~= '' &            /* Check type of variable        */ 51550001
*          VAR1(2) ~= 'C' & VAR1(2) ~= 'B' & VAR1(2) ~= 'H'             51600001
*        THEN DO;                                                       51650001
*          CMT ='INVALID TYPE SPECIFIED FOR VAR1 VARIABLE, '; /* @M1C*/ 51700001
*          ANS MSG(CMT);           /* Print error message            */ 51750001
*          ANS(COMMENT(CMT)) COL(INDENT);                               51800001
*          EHARC=RCERR;            /* Set error return code          */ 51850001
*        END;                                                           51900001
*     ELSE                                                              51950001
*       DO;                                                             52000001
*        IF VAR1(2) = 'B' THEN      /* Check type of variable        */ 52050001
*           VART(1) = 'MSGTBIN ' ;  /* indicate binary type          */ 52100001
*        IF VAR1(2) = 'H' THEN      /* Check type of variable        */ 52150001
*           VART(1) = 'MSGTHEX ' ;  /* indicate hexadecimal type     */ 52200001
*       END;                                                            52250001
*     END;                         /* End of VAR1 parameter checking */ 52300001
*                                                                       52350001
*/********************************************************************/ 52400001
*/*      Checks VAR2 key word                                        */ 52450001
*/********************************************************************/ 52500001
*  IF VAR2 ~= '' THEN DO;          /* Test if VAR2 parameter exists  */ 52550001
*     IF NUMBER(VAR2) > 2 THEN DO;  /* Check for too many operands   */ 52600001
*        CMT ='TOO MANY ARGUMENTS SPECIFIED FOR VAR2 PARAMETER, ';      52650001
*        ANS MSG(CMT);             /* Print error message            */ 52700001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 52750001
*        EHARC=RCERR;              /* Set error return code          */ 52800001
*        END;                                                           52850001
*     IF NUMBER(VAR2) < 1 THEN DO;  /* Check for too few operands    */ 52900001
*        CMT ='TOO FEW ARGUMENTS SPECIFIED FOR VAR2 PARAMETER, ';       52950001
*        ANS MSG(CMT);             /* Print error message            */ 53000001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 53050001
*        EHARC=RCERR;              /* Set error return code          */ 53100001
*        END;                                                           53150001
*     VART(2) = 'MSGTCHAR' ;        /* Indicate character type       */ 53200001
*     IF VAR2(2) ~= '' &            /* Check type of variable        */ 53250001
*        VAR2(2) ~= 'C' & VAR2(2) ~= 'B' & VAR2(2) ~= 'H' THEN          53300001
*         DO;                                                           53350001
*          CMT ='INVALID TYPE SPECIFIED FOR VAR2 VARIABLE, '; /* @M1C*/ 53400001
*          ANS MSG(CMT);           /* Print error message            */ 53450001
*          ANS(COMMENT(CMT)) COL(INDENT);                               53500001
*          EHARC=RCERR;            /* Set error return code          */ 53550001
*        END;                                                           53600001
*     ELSE                                                              53650001
*       DO;                                                             53700001
*        IF VAR2(2) = 'B' THEN      /* Check type of variable        */ 53750001
*           VART(2) = 'MSGTBIN ' ;  /* indicate binary type          */ 53800001
*        IF VAR2(2) = 'H' THEN      /* Check type of variable        */ 53850001
*           VART(2) = 'MSGTHEX ' ;  /* indicate hexadecimal type     */ 53900001
*       END;                                                            53950001
*     END;                         /* End of VAR2 parameter checking */ 54000001
*                                                                       54050001
*/********************************************************************/ 54100001
*/*      Checks VAR3 key word                                        */ 54150001
*/********************************************************************/ 54200001
*  IF VAR3 ~= '' THEN DO;          /* Test if VAR3 parameter exists  */ 54250001
*     IF NUMBER(VAR3) > 2 THEN DO;  /* Check for too many operands   */ 54300001
*        CMT ='TOO MANY ARGUMENTS SPECIFIED FOR VAR3 PARAMETER, ';      54350001
*        ANS MSG(CMT);             /* Print error message            */ 54400001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 54450001
*        EHARC=RCERR;              /* Set error return code          */ 54500001
*        END;                                                           54550001
*     IF NUMBER(VAR3) < 1 THEN DO;  /* Check for too few operands    */ 54600001
*        CMT ='TOO FEW ARGUMENTS SPECIFIED FOR VAR3 PARAMETER, ';       54650001
*        ANS MSG(CMT);             /* Print error message            */ 54700001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 54750001
*        EHARC=RCERR;              /* Set error return code          */ 54800001
*        END;                                                           54850001
*     VART(3) = 'MSGTCHAR' ;        /* Indicate character type       */ 54900001
*     IF VAR3(2) ~= '' &            /* Check type of variable        */ 54950001
*        VAR3(2) ~= 'C' & VAR3(2) ~= 'B' & VAR3(2) ~= 'H' THEN          55000001
*         DO;                                                           55050001
*          CMT ='INVALID TYPE SPECIFIED FOR VAR3 VARIABLE, '; /* @M1C*/ 55100001
*          ANS MSG(CMT);           /* Print error message            */ 55150001
*          ANS(COMMENT(CMT)) COL(INDENT);                               55200001
*          EHARC=RCERR;            /* Set error return code          */ 55250001
*        END;                                                           55300001
*     ELSE                                                              55350001
*       DO;                                                             55400001
*        IF VAR3(2) = 'B' THEN      /* Check type of variable        */ 55450001
*           VART(3) = 'MSGTBIN ' ;  /* indicate binary type          */ 55500001
*        IF VAR3(2) = 'H' THEN      /* Check type of variable        */ 55550001
*           VART(3) = 'MSGTHEX ' ;  /* indicate hexadecimal type     */ 55600001
*       END;                                                            55650001
*     END;                         /* End of VAR3 parameter checking */ 55700001
*                                                                       55750001
*/********************************************************************/ 55800001
*/*      Checks VAR4 key word                                        */ 55850001
*/********************************************************************/ 55900001
*  IF VAR4 ~= '' THEN DO;          /* Test if VAR4 parameter exists  */ 55950001
*     IF NUMBER(VAR4) > 2 THEN DO;  /* Check for too many operands   */ 56000001
*        CMT ='TOO MANY ARGUMENTS SPECIFIED FOR VAR4 PARAMETER, ';      56050001
*        ANS MSG(CMT);             /* Print error message            */ 56100001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 56150001
*        EHARC=RCERR;              /* Set error return code          */ 56200001
*        END;                                                           56250001
*     IF NUMBER(VAR4) < 1 THEN DO;  /* Check for too few operands    */ 56300001
*        CMT ='TOO FEW ARGUMENTS SPECIFIED FOR VAR4 PARAMETER, ';       56350001
*        ANS MSG(CMT);             /* Print error message            */ 56400001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 56450001
*        EHARC=RCERR;              /* Set error return code          */ 56500001
*        END;                                                           56550001
*     VART(4) = 'MSGTCHAR' ;        /* Indicate character type       */ 56600001
*     IF VAR4(2) ~= '' &            /* Check type of variable        */ 56650001
*        VAR4(2) ~= 'C' & VAR4(2) ~= 'B' & VAR4(2) ~= 'H' THEN          56700001
*         DO;                                                           56750001
*          CMT ='INVALID TYPE SPECIFIED FOR VAR4 VARIABLE, '; /* @M1C*/ 56800001
*          ANS MSG(CMT);           /* Print error message            */ 56850001
*          ANS(COMMENT(CMT)) COL(INDENT);                               56900001
*          EHARC=RCERR;            /* Set error return code          */ 56950001
*        END;                                                           57000001
*     ELSE                                                              57050001
*       DO;                                                             57100001
*        IF VAR4(2) = 'B' THEN      /* Check type of variable        */ 57150001
*           VART(4) = 'MSGTBIN ' ;  /* indicate binary type          */ 57200001
*        IF VAR4(2) = 'H' THEN      /* Check type of variable        */ 57250001
*           VART(4) = 'MSGTHEX ' ;  /* indicate hexadecimal type     */ 57300001
*       END;                                                            57350001
*     END;                         /* End of VAR4 parameter checking */ 57400001
*                                                                       57450001
*/********************************************************************/ 57500001
*/*      Checks VAR5 key word                                        */ 57550001
*/********************************************************************/ 57600001
*  IF VAR5 ~= '' THEN DO;          /* Test if VAR5 parameter exists  */ 57650001
*     IF NUMBER(VAR5) > 2 THEN DO;  /* Check for too many operands   */ 57700001
*        CMT ='TOO MANY ARGUMENTS SPECIFIED FOR VAR5 PARAMETER, ';      57750001
*        ANS MSG(CMT);             /* Print error message            */ 57800001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 57850001
*        EHARC=RCERR;              /* Set error return code          */ 57900001
*        END;                                                           57950001
*     IF NUMBER(VAR5) < 1 THEN DO;  /* Check for too few operands    */ 58000001
*        CMT ='TOO FEW ARGUMENTS SPECIFIED FOR VAR5 PARAMETER, ';       58050001
*        ANS MSG(CMT);             /* Print error message            */ 58100001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 58150001
*        EHARC=RCERR;              /* Set error return code          */ 58200001
*        END;                                                           58250001
*     VART(5) = 'MSGTCHAR' ;        /* Indicate character type       */ 58300001
*     IF VAR5(2) ~= '' &            /* Check type of variable        */ 58350001
*        VAR5(2) ~= 'C' & VAR5(2) ~= 'B' & VAR5(2) ~= 'H' THEN          58400001
*         DO;                                                           58450001
*          CMT ='INVALID TYPE SPECIFIED FOR VAR5 VARIABLE, '; /* @M1C*/ 58500001
*          ANS MSG(CMT);           /* Print error message            */ 58550001
*          ANS(COMMENT(CMT)) COL(INDENT);                               58600001
*          EHARC=RCERR;            /* Set error return code          */ 58650001
*        END;                                                           58700001
*     ELSE                                                              58750001
*       DO;                                                             58800001
*        IF VAR5(2) = 'B' THEN      /* Check type of variable        */ 58850001
*           VART(5) = 'MSGTBIN ' ;  /* indicate binary type          */ 58900001
*        IF VAR5(2) = 'H' THEN      /* Check type of variable        */ 58950001
*           VART(5) = 'MSGTHEX ' ;  /* indicate hexadecimal type     */ 59000001
*       END;                                                            59050001
*     END;                         /* End of VAR5 parameter checking */ 59100001
*                                                                       59150001
*/********************************************************************/ 59200001
*/*      Checks VAR6 key word                                        */ 59250001
*/********************************************************************/ 59300001
*  IF VAR6 ~= '' THEN DO;          /* Test if VAR6 parameter exists  */ 59350001
*     IF NUMBER(VAR6) > 2 THEN DO;  /* Check for too many operands   */ 59400001
*        CMT ='TOO MANY ARGUMENTS SPECIFIED FOR VAR6 PARAMETER, ';      59450001
*        ANS MSG(CMT);             /* Print error message            */ 59500001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 59550001
*        EHARC=RCERR;              /* Set error return code          */ 59600001
*        END;                                                           59650001
*     IF NUMBER(VAR6) < 1 THEN DO;  /* Check for too few operands    */ 59700001
*        CMT ='TOO FEW ARGUMENTS SPECIFIED FOR VAR6 PARAMETER, ';       59750001
*        ANS MSG(CMT);             /* Print error message            */ 59800001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 59850001
*        EHARC=RCERR;              /* Set error return code          */ 59900001
*        END;                                                           59950001
*     VART(6) = 'MSGTCHAR' ;        /* Indicate character type       */ 60000001
*     IF VAR6(2) ~= '' &            /* Check type of variable        */ 60050001
*        VAR6(2) ~= 'C' & VAR6(2) ~= 'B' & VAR6(2) ~= 'H' THEN          60100001
*         DO;                                                           60150001
*          CMT ='INVALID TYPE SPECIFIED FOR VAR6 VARIABLE, '; /* @M1C*/ 60200001
*          ANS MSG(CMT);           /* Print error message            */ 60250001
*          ANS(COMMENT(CMT)) COL(INDENT);                               60300001
*          EHARC=RCERR;            /* Set error return code          */ 60350001
*        END;                                                           60400001
*     ELSE                                                              60450001
*       DO;                                                             60500001
*        IF VAR6(2) = 'B' THEN      /* Check type of variable        */ 60550001
*           VART(6) = 'MSGTBIN ' ;  /* indicate binary type          */ 60600001
*        IF VAR6(2) = 'H' THEN      /* Check type of variable        */ 60650001
*           VART(6) = 'MSGTHEX ' ;  /* indicate hexadecimal type     */ 60700001
*       END;                                                            60750001
*     END;                         /* End of VAR6 parameter checking */ 60800001
*                                                                       60850001
*/********************************************************************/ 60900001
*/*      Checks VAR7 key word                                        */ 60950001
*/********************************************************************/ 61000001
*  IF VAR7 ~= '' THEN DO;          /* Test if VAR7 parameter exists  */ 61050001
*     IF NUMBER(VAR7) > 2 THEN DO;  /* Check for too many operands   */ 61100001
*        CMT ='TOO MANY ARGUMENTS SPECIFIED FOR VAR7 PARAMETER, ';      61150001
*        ANS MSG(CMT);             /* Print error message            */ 61200001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 61250001
*        EHARC=RCERR;              /* Set error return code          */ 61300001
*        END;                                                           61350001
*     IF NUMBER(VAR7) < 1 THEN DO;  /* Check for too few operands    */ 61400001
*        CMT ='TOO FEW ARGUMENTS SPECIFIED FOR VAR7 PARAMETER, ';       61450001
*        ANS MSG(CMT);             /* Print error message            */ 61500001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 61550001
*        EHARC=RCERR;              /* Set error return code          */ 61600001
*        END;                                                           61650001
*     VART(7) = 'MSGTCHAR' ;        /* Indicate character type       */ 61700001
*     IF VAR7(2) ~= '' &            /* Check type of variable        */ 61750001
*        VAR7(2) ~= 'C' & VAR7(2) ~= 'B' & VAR7(2) ~= 'H' THEN          61800001
*         DO;                                                           61850001
*          CMT ='INVALID TYPE SPECIFIED FOR VAR7 VARIABLE, '; /* @M1C*/ 61900001
*          ANS MSG(CMT);           /* Print error message            */ 61950001
*          ANS(COMMENT(CMT)) COL(INDENT);                               62000001
*          EHARC=RCERR;            /* Set error return code          */ 62050001
*        END;                                                           62100001
*     ELSE                                                              62150001
*       DO;                                                             62200001
*        IF VAR7(2) = 'B' THEN      /* Check type of variable        */ 62250001
*           VART(7) = 'MSGTBIN ' ;  /* indicate binary type          */ 62300001
*        IF VAR7(2) = 'H' THEN      /* Check type of variable        */ 62350001
*           VART(7) = 'MSGTHEX ' ;  /* indicate hexadecimal type     */ 62400001
*       END;                                                            62450001
*     END;                         /* End of VAR7 parameter checking */ 62500001
*                                                                       62550001
*/********************************************************************/ 62600001
*/*      Checks VAR8 key word                                        */ 62650001
*/********************************************************************/ 62700001
*  IF VAR8 ~= '' THEN DO;          /* Test if VAR8 parameter exists  */ 62750001
*     IF NUMBER(VAR8) > 2 THEN DO;  /* Check for too many operands   */ 62800001
*        CMT ='TOO MANY ARGUMENTS SPECIFIED FOR VAR8 PARAMETER, ';      62850001
*        ANS MSG(CMT);             /* Print error message            */ 62900001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 62950001
*        EHARC=RCERR;              /* Set error return code          */ 63000001
*        END;                                                           63050001
*     IF NUMBER(VAR8) < 1 THEN DO;  /* Check for too few operands    */ 63100001
*        CMT ='TOO FEW ARGUMENTS SPECIFIED FOR VAR8 PARAMETER, ';       63150001
*        ANS MSG(CMT);             /* Print error message            */ 63200001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 63250001
*        EHARC=RCERR;              /* Set error return code          */ 63300001
*        END;                                                           63350001
*     VART(8) = 'MSGTCHAR' ;        /* Indicate character type       */ 63400001
*     IF VAR8(2) ~= '' &            /* Check type of variable        */ 63450001
*        VAR8(2) ~= 'C' & VAR8(2) ~= 'B' & VAR8(2) ~= 'H' THEN          63500001
*         DO;                                                           63550001
*          CMT ='INVALID TYPE SPECIFIED FOR VAR8 VARIABLE, '; /* @M1C*/ 63600001
*          ANS MSG(CMT);           /* Print error message            */ 63650001
*          ANS(COMMENT(CMT)) COL(INDENT);                               63700001
*          EHARC=RCERR;            /* Set error return code          */ 63750001
*        END;                                                           63800001
*     ELSE                                                              63850001
*       DO;                                                             63900001
*        IF VAR8(2) = 'B' THEN      /* Check type of variable        */ 63950001
*           VART(8) = 'MSGTBIN ' ;  /* indicate binary type          */ 64000001
*        IF VAR8(2) = 'H' THEN      /* Check type of variable        */ 64050001
*           VART(8) = 'MSGTHEX ' ;  /* indicate hexadecimal type     */ 64100001
*       END;                                                            64150001
*     END;                         /* End of VAR8 parameter checking */ 64200001
*                                                                       64250001
*/********************************************************************/ 64300001
*/*      Checks VAR9 key word                                        */ 64350001
*/********************************************************************/ 64400001
*  IF VAR9 ~= '' THEN DO;          /* Test if VAR9 parameter exists  */ 64450001
*     IF NUMBER(VAR9) > 2 THEN DO;  /* Check for too many operands   */ 64500001
*        CMT ='TOO MANY ARGUMENTS SPECIFIED FOR VAR9 PARAMETER, ';      64550001
*        ANS MSG(CMT);             /* Print error message            */ 64600001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 64650001
*        EHARC=RCERR;              /* Set error return code          */ 64700001
*        END;                                                           64750001
*     IF NUMBER(VAR9) < 1 THEN DO;  /* Check for too few operands    */ 64800001
*        CMT ='TOO FEW ARGUMENTS SPECIFIED FOR VAR9 PARAMETER, ';       64850001
*        ANS MSG(CMT);             /* Print error message            */ 64900001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 64950001
*        EHARC=RCERR;              /* Set error return code          */ 65000001
*        END;                                                           65050001
*     VART(9) = 'MSGTCHAR' ;        /* Indicate character type       */ 65100001
*     IF VAR9(2) ~= '' &            /* Check type of variable        */ 65150001
*        VAR9(2) ~= 'C' & VAR9(2) ~= 'B' & VAR9(2) ~= 'H' THEN          65200001
*         DO;                                                           65250001
*          CMT ='INVALID TYPE SPECIFIED FOR VAR9 VARIABLE, '; /* @M1C*/ 65300001
*          ANS MSG(CMT);           /* Print error message            */ 65350001
*          ANS(COMMENT(CMT)) COL(INDENT);                               65400001
*          EHARC=RCERR;            /* Set error return code          */ 65450001
*        END;                                                           65500001
*     ELSE                                                              65550001
*       DO;                                                             65600001
*        IF VAR9(2) = 'B' THEN      /* Check type of variable        */ 65650001
*           VART(9) = 'MSGTBIN ' ;  /* indicate binary type          */ 65700001
*        IF VAR9(2) = 'H' THEN      /* Check type of variable        */ 65750001
*           VART(9) = 'MSGTHEX ' ;  /* indicate hexadecimal type     */ 65800001
*       END;                                                            65850001
*     END;                         /* End of VAR9 parameter checking */ 65900001
*                                                                       65950001
*/********************************************************************/ 66000001
*/*      Returns on error                                            */ 66050001
*/********************************************************************/ 66100001
* IF EHARC =RCERR THEN             /* ANY PARAMETER ERRORS?          */ 66150001
*   DO;                            /* YES                            */ 66200001
*     ANS(COMMENT('ERROR ENCOUNTERED.  NO CODE GENERATED;'))            66250001
*        COL(INDENT);              /* PRINT ERROR MESSAGE            */ 66300001
*     ANS('END; '||COMMENT(IMACRO)) COL(MACCOL);                        66350001
*     RETURN CODE(EHARC);          /* RETURN WITH NON-ZERO RETURN       66400001
*                                     CODE                           */ 66450001
*   END;                                                                66500001
*/********************************************************************/ 66550001
*/*                                                                  */ 66600001
*/*            GENERATE PL/AS SOURCE STATEMENTS                      */ 66650001
*/*                                                                  */ 66700001
*/********************************************************************/ 66750001
* IF MACLIST(1) ~= 'CALL' THEN                                          66800001
* DO;                                                                   66850001
*    ANS('MSGR=''0''B; '||                                              66900001
*    COMMENT(' Zero out MSGR area' )) COL(INDENT);                      66950001
*    ANS('MSGSD= MSGCBID;'||                                            67000001
*    COMMENT(' set storage descriptor ')) COL(INDENT);                  67050001
* END;                                                                  67100001
*                                                                       67150001
* IF MID ~='' THEN                 /* If MID= parameter specified ?  */ 67200001
*    ANS('MSGMID=' ||MID(1)||'; '||                                     67250001
*    COMMENT(' Message identifier '))  COL(INDENT);                     67300001
*                                                                       67350001
* IF SEV ~= '' THEN                /* SEV parameter specified ?  @M1C*/ 67400001
*    ANS('MSGSEV=' ||SEV(1)||'; '||                                     67450001
*    COMMENT(' Severity level '))  COL(INDENT);               /* @M1C*/ 67500001
* ELSE                             /* SEV not specified          @M1C*/ 67550001
* DO;                              /*                            @M1C*/ 67600001
*    IF MACLIST(1) ~= 'CALL' THEN  /* no CALL specified ?        @M1C*/ 67650001
*       ANS('MSGSEV=MSGERR;'||                                          67700001
*       COMMENT(' Default error severity '))     COL(INDENT); /* @M1C*/ 67750001
* END;                             /*                            @M1C*/ 67800001
*                                                                       67850001
* IF REQ(1) = 'UIM' THEN           /* If REQ=UIM is specified        */ 67900001
*    ANS('MSGFUIM=''1''B; '||                                           67950001
*    COMMENT(' Indicate REQ=UIM specified' ))     COL(INDENT);          68000001
*                                                                       68050001
* IF ROUTE(1) ='LOG' THEN          /* If ROUTE=LOG specified         */ 68100001
*    ANS('MSGROUTE = MSGRSLOG ; ' ||                                    68150001
*    COMMENT(' ROUTE=LOG specified' )) COL(INDENT);                     68200001
* ELSE IF ROUTE(1) = 'TEMPLOG' THEN /* If ROUTE=TEMPLOG          @L8A*/ 68250001
*    ANS('MSGROUTE = MSGRTLOG ; ' ||                                    68300001
*    COMMENT(' ROUTE=TEMPLOG specified')) COL(INDENT);                  68350001
*                                                                       68400001
* IF STMT(1) ='YES' THEN            /* If STMT=YES specified         */ 68450001
*    ANS('MSGFSTMT=''1''B; '||                                          68500001
*    COMMENT(' Indicate STMT=YES specified' ))     COL(INDENT);         68550001
* ELSE IF STMT(1) ='NO' THEN        /* If STMT=NO specified      @M1A*/ 68600001
*    ANS('MSGFFILE=''0''B; '||                                          68650001
*    COMMENT(' Indicate STMT=NO specified' ))      COL(INDENT);         68700001
* ELSE IF STMT(1) ='FILE' THEN      /* If STMT=FILE specified    @M1C*/ 68750001
*    ANS('MSGFFILE=''1''B; '||                                          68800001
*    COMMENT(' Indicate STMT=FILE specified' ))     COL(INDENT);        68850001
*                                                                       68900001
* IF CONTROL ~= '' THEN             /* If CONTROL specified      @L1A*/ 68950001
*    ANS('MSGFCNTL=''1''B; '||                                          69000001
*    COMMENT(' Indicates control message' ))     COL(INDENT);           69050001
*                                                                       69100001
* IF VAR1~='' THEN                  /* If VAR1 specified             */ 69150001
* DO;                                                                   69200001
*    ANS('MSGPTR1=ADDR(' ||VAR1(1)||'); '||                             69250001
*    COMMENT(' Message variable 1 '))     COL(INDENT);                  69300001
*    ANS('MSGLEN1=LENGTH(' ||VAR1(1)||'); '||                           69350001
*    COMMENT(' Length of message variable 1 '))     COL(INDENT);        69400001
*    ANS('MSGTYP1=' ||VART(1)||'; '||                                   69450001
*    COMMENT(' Type of variable 1 '))     COL(INDENT);                  69500001
* END;                                                                  69550001
*                                                                       69600001
* IF VAR2~='' THEN                  /* If VAR2 specified             */ 69650001
* DO;                                                                   69700001
*    ANS('MSGPTR2=ADDR(' ||VAR2(1)||'); '||                             69750001
*    COMMENT(' Message variable 2 '))     COL(INDENT);                  69800001
*    ANS('MSGLEN2=LENGTH(' ||VAR2(1)||'); '||                           69850001
*    COMMENT(' Length of message variable 2 '))     COL(INDENT);        69900001
*    ANS('MSGTYP2=' ||VART(2)||'; '||                                   69950001
*    COMMENT(' Type of variable 2 '))     COL(INDENT);                  70000001
* END;                                                                  70050001
*                                                                       70100001
* IF VAR3~='' THEN                  /* If VAR3 specified             */ 70150001
* DO;                                                                   70200001
*    ANS('MSGPTR3=ADDR(' ||VAR3(1)||'); '||                             70250001
*    COMMENT(' Message variable 3 '))     COL(INDENT);                  70300001
*    ANS('MSGLEN3=LENGTH(' ||VAR3(1)||'); '||                           70350001
*    COMMENT(' Length of message variable 3 '))     COL(INDENT);        70400001
*    ANS('MSGTYP3=' ||VART(3)||'; '||                                   70450001
*    COMMENT(' Type of variable 3 '))     COL(INDENT);                  70500001
* END;                                                                  70550001
*                                                                       70600001
* IF VAR4~='' THEN                  /* If VAR4 specified             */ 70650001
* DO;                                                                   70700001
*    ANS('MSGPTR4=ADDR(' ||VAR4(1)||'); '||                             70750001
*    COMMENT(' Message variable 4 '))     COL(INDENT);                  70800001
*    ANS('MSGLEN4=LENGTH(' ||VAR4(1)||'); '||                           70850001
*    COMMENT(' Length of message variable 4'))     COL(INDENT);         70900001
*    ANS('MSGTYP4=' ||VART(4)||'; '||                                   70950001
*    COMMENT(' Type of variable 4 '))     COL(INDENT);                  71000001
* END;                                                                  71050001
*                                                                       71100001
* IF VAR5~='' THEN                  /* If VAR5 specified             */ 71150001
* DO;                                                                   71200001
*    ANS('MSGPTR5=ADDR(' ||VAR5(1)||'); '||                             71250001
*    COMMENT(' Message variable 5 '))     COL(INDENT);                  71300001
*    ANS('MSGLEN5=LENGTH(' ||VAR5(1)||'); '||                           71350001
*    COMMENT(' Length of message variable 5'))     COL(INDENT);         71400001
*    ANS('MSGTYP5=' ||VART(5)||'; '||                                   71450001
*    COMMENT(' Type of variable 5 '))     COL(INDENT);                  71500001
* END;                                                                  71550001
*                                                                       71600001
* IF VAR6~='' THEN                  /* If VAR6 specified             */ 71650001
* DO;                                                                   71700001
*    ANS('MSGPTR6=ADDR(' ||VAR6(1)||'); '||                             71750001
*    COMMENT(' Message variable 6 '))     COL(INDENT);                  71800001
*    ANS('MSGLEN6=LENGTH(' ||VAR6(1)||'); '||                           71850001
*    COMMENT(' Length of message variable 6'))     COL(INDENT);         71900001
*    ANS('MSGTYP6=' ||VART(6)||'; '||                                   71950001
*    COMMENT(' Type of variable 6 '))     COL(INDENT);                  72000001
* END;                                                                  72050001
*                                                                       72100001
* IF VAR7~='' THEN                  /* If VAR7 specified             */ 72150001
* DO;                                                                   72200001
*    ANS('MSGPTR7=ADDR(' ||VAR7(1)||'); '||                             72250001
*    COMMENT(' Message variable 7 '))     COL(INDENT);                  72300001
*    ANS('MSGLEN7=LENGTH(' ||VAR7(1)||'); '||                           72350001
*    COMMENT(' Length of variable 7 '))     COL(INDENT);                72400001
*    ANS('MSGTYP7=' ||VART(7)||'; '||                                   72450001
*    COMMENT(' Type of variable 7 '))     COL(INDENT);                  72500001
* END;                                                                  72550001
*                                                                       72600001
* IF VAR8~='' THEN                  /* If VAR8 specified             */ 72650001
* DO;                                                                   72700001
*    ANS('MSGPTR8=ADDR(' ||VAR8(1)||'); '||                             72750001
*    COMMENT(' Message variable 8 '))     COL(INDENT);                  72800001
*    ANS('MSGLEN8=LENGTH(' ||VAR8(1)||'); '||                           72850001
*    COMMENT(' Length of variable 8 '))     COL(INDENT);                72900001
*    ANS('MSGTYP8=' ||VART(8)||'; '||                                   72950001
*    COMMENT(' Type of variable 8 '))     COL(INDENT);                  73000001
* END;                                                                  73050001
*                                                                       73100001
* IF VAR9~='' THEN                  /* If VAR9 specified             */ 73150001
* DO;                                                                   73200001
*    ANS('MSGPTR9=ADDR(' ||VAR9(1)||'); '||                             73250001
*    COMMENT(' Message variable 9 '))     COL(INDENT);                  73300001
*    ANS('MSGLEN9=LENGTH(' ||VAR9(1)||'); '||                           73350001
*    COMMENT(' Length of variable 9 '))     COL(INDENT);                73400001
*    ANS('MSGTYP9=' ||VART(9)||'; '||                                   73450001
*    COMMENT(' Type of variable 9 '))     COL(INDENT);                  73500001
* END;                                                                  73550001
*                                                                       73600001
* IF CURSOR(1) ~='' THEN            /* If CURSOR specified           */ 73650001
*    ANS('MSGCURS=' || CURSOR(1) || '; ' ||                             73700001
*    COMMENT(' dialog variable name for positioning' )) COL(INDENT);    73750001
*                                                                       73800001
* IF POSITION(1) ~='' THEN          /* If POSITION specified     @L8A*/ 73850001
*    ANS('MSGFPOS=' || POSITION(1) || '; ' ||                           73900001
*    COMMENT(' field name for positioning' ))  COL(INDENT);   /* @L8A*/ 73950001
*                                                                       74000001
*                                                                       74050001
* IF STORADDR ~='' THEN            /* If STORADDR specified      @L8A*/ 74100001
*    ANS('MSGSADDR=' || STORADDR(1) || '; ' ||                          74150001
*    COMMENT(' Address of message string'))  COL(INDENT);     /* @L8A*/ 74200001
* IF STORLEN ~='' THEN             /* If STORLEN specified       @L8A*/ 74250001
*    ANS('MSGSLEN=' || STORLEN(1) || '; ' ||                            74300001
*    COMMENT(' Length of message string'))  COL(INDENT);      /* @L8A*/ 74350001
* IF STORHELP ~='' THEN             /* If STORHELP specified     @L8A*/ 74400001
*    ANS('MSGSHELP=' || STORHELP(1) || '; ' ||                          74450001
*    COMMENT(' Help panel of message string')) COL(INDENT);   /* @L8A*/ 74500001
* IF SEVC ~= '' THEN               /* SEVC parameter specified ? @L8A*/ 74512501
*    ANS('MSGSEVC=' ||SEVC(1)||'; '||                                   74525001
*    COMMENT(' Control Severity level '))  COL(INDENT);       /* @L8A*/ 74537501
*                                                                       74550001
*                                                                       74600001
* IF MACLIST(1) ~= 'GEN' THEN                                           74650001
* DO;                                                                   74700001
*    IF REQ(1)= 'UIM' THEN         /* REQ=UIM specified ?            */ 74750001
*       ANS('CALL UCAMMSG (UCAMCPVT,MSGR); '||                          74800001
*       COMMENT(' Issue message '))      COL(INDENT);                   74850001
*    ELSE                           /* If macro not invoked by UIM   */ 74900001
*       ANS('CALL CPVMSMSG (CPVT,MSGR); '||                             74950001
*       COMMENT(' Issue message '))      COL(INDENT);                   75000001
* END;                                                                  75050001
* ANS('END; '||COMMENT(IMACRO))  COL(MACCOL); /* END CODE & LIST        75100001
*                                                MACRO PARAMETERS    */ 75150001
* RETURN CODE(EHARC);               /* RETURN SUCCESSFUL             */ 75200001
* %END CBDIMSG;                                                         75250001
