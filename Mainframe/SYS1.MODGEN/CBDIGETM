* % /*                                                                  00050001
         MACRO  --  INVOKE STORAGE MANAGEMENT ROUTINE                   00100001
&LABEL   CBDIGETM &COND,&LENGTH=,&SUBPOOL=,&LOC=,&RELATED=,            *00150001
               &REQ=,&BNDRY=,&ADDRESS=,&MSG=MSG,                       *00200001
               &DUMMY=DUMMY                                             00250001
         AGO   .SKIP                                                  */00300001
*/*********************************************************************/00350001
*/*                                                                   */00400001
*/*  MACRO NAME = CBDIGETM                                            */00450001
*/*                                                                   */00500001
*/*  DESCRIPTIVE NAME = HCD GETMAIN Storage Macro                     */00550001
*/*                                                                   */00600001
*/*  PROPRIETARY STATEMENT =                                          */00650001
*/*                                                                   */00700001
*/*     LICENSED MATERIALS - PROPERTY OF IBM                          */00750001
*/*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                   */00800001
*/*     5645-001 (C) COPYRIGHT IBM CORP. 1990, 1998                   */00850001
*/*     SEE COPYRIGHT INSTRUCTIONS.                                   */00900001
*/*                                                                   */00950001
*/*  STATUS = HCS6051                                                 */01000001
*/*                                                                   */01050001
*/*  MACRO TYPE  -  Bilingual MACRO                                   */01100001
*/*                                                                   */01150001
*/*  DEPENDENCIES = GETM parameter list                               */01200001
*/*                 must be included by mapping macro CBDZGETM.       */01250001
*/*                 The routine must have addressability to the CPVT  */01300001
*/*                 which is mapped by macro CBDZCPVT.                */01350001
*/*                                                                   */01400001
*/*  RESTRICTIONS = For HCD use only                                  */01450001
*/*                                                                   */01500001
*/*  PROCESSOR = PLAS Compiler                                        */01550001
*/*                                                                   */01600001
*/*  INVOCATION =                                                     */01650001
*/*                                                                   */01700001
*/* >>-?-+-------+->CBDIGETM-+---------+-+------+-+--------------+->  */01750001
*/*      |       |           +->(COND)-+ +->MSG-+ +->RELATED(xr)-+    */0000000
*/*      +->lbl:-+                                                    */01850001
*/*                                                                   */01900001
*/*  >----------+--- <primary address space definitions> ---+------>  */01910001
*/*             |                                           |         */01920001
*/*             +--- <data space definitions> --------------+     @LZA*/01930001
*/*                                                                   */01940001
*/*  >-------------+-----------------+----------------------------->< */02150001
*/*                +->ADDRESS(xaddr)-+                                */02200001
*/*                                                                   */02250001
*/*                                                                   */02250001
*/*                                                                   */02250001
*/*  primary address space definitions :                              */01940001
*/*                                                                   */01940001
*/*  >-----LENGTH(xlen)-------+----------------+------------------->  */01950001
*/*                           +->SUBPOOL(xspn)-+                      */02000001
*/*                                                                   */01940001
*/*  >--+---------------+--+-------------+--+-----------+---------->  */01950001
*/*     +->BNDRY(DBLWD)-+  +->LOC(ANY)---+  +->REQ(UIM)-+             */02000001
*/*     +->BNDRY(PAGE)--+  +->LOC(BELOW)-+                            */02050001
*/*                                                                   */02100001
*/*                                                                   */02200001
*/*  data space definitions :                                     @LZA*/01940001
*/*                                                               @LZA*/01940001
*/*  >-----DATASPACE----BLOCKS(xblocks)---------------------->    @LZA*/01950001
*/*                                                               @LZA*/02000001
*/*  >---------+-------------------+--+---------------+------>    @LZA*/01940001
*/*            +--STOKEN(xstoken)--+  +--ALET(xalet)--+           @LZA*/01940001
*/*                                                                   */02200001
*/*                                                                   */02200001
*/*                                                                   */02200001
*/*  Description of key words :                                       */02500001
*/*  --------------------------                                       */02500001
*/*                                                                   */02500001
*/*     COND        specifies that the request is conditional.        */02550001
*/*                 If the storage is not available no abend is       */02600001
*/*                 issued.                                           */02650001
*/*                                                                   */02700001
*/*     MSG         requests that a message is to be issued on        */05000001
*/*                 error.                                            */05050001
*/*                                                                   */05052201
*/*     RELATED     specifies an optional character string to         */04800001
*/*                 identify related macro calls.                     */04850001
*/*                 xr : char(*)                                      */04900001
*/*                                                                   */04950001
*/*                                                                   */05052201
*/*     The following key words define storage to be obtained from    */05052201
*/*     the primary address space :                                   */05052201
*/*     ----------------------------------------------------------    */05052201
*/*                                                                   */05052201
*/*     LENGTH      specifies the length ot the storage area to be    */02750001
*/*                 reserved.                                         */02800001
*/*                 xlen : bin(31)                                    */02850001
*/*                 LENGTH is a mandatory parameter. The length       */02900001
*/*                 is rounded to the next higher multiple of 8.      */02950001
*/*                                                                   */03000001
*/*     SUBPOOL     specifies the subpool number of the storage area  */03050001
*/*                 to be released.                                   */03100001
*/*                 xspn : bin(31)                                    */03150001
*/*                 SUBPOOL is an optional parameter. If no subpool   */03200001
*/*                 is provided, subpool 0 is assumed.                */03250001
*/*                                                                   */03300001
*/*     BNDRY       specifies the boundary the storage is to be       */03350001
*/*                 aligned to. BNDRY is optional, default is DBLWD.  */03400001
*/*                                                                   */03450001
*/*                 DBLWD   specifies that the storage is to be       */03500001
*/*                         aligned to doubleword boundary. DBLWD     */03550001
*/*                         is the default.                           */03600001
*/*                                                                   */03650001
*/*                 PAGE    specifies that the storage is to be       */03700001
*/*                         aligned to page boundary.                 */03750001
*/*                                                                   */03800001
*/*     LOC         specifies the location of the storage to be       */03850001
*/*                 reserved in virtual storage. LOC is optional.     */03900001
*/*                 Default is ANY.                                   */03950001
*/*                                                                   */04000001
*/*                 ANY     specifies that the storage is to be       */04050001
*/*                         located anywhere in the virtual storage   */04100001
*/*                         boundaries.                               */04150001
*/*                                                                   */04200001
*/*                 BELOW   specifies that the storage is to be       */04250001
*/*                         located beneath the 16MB line.            */04300001
*/*                                                                   */04350001
*/*     REQ         specifies that the requestor is a UIM.            */04400001
*/*                 REQ is optional.                                  */04450001
*/*                                                                   */04500001
*/*                                                                   */04500001
*/*     The following key words define storage to be obtained in  @LZA*/05052201
*/*     a separate data space :                                   @LZA*/05052201
*/*     --------------------------------------------------------  @LZA*/05052201
*/*                                                               @LZA*/04500001
*/*     DATASPACE   Indicates to create a new data space          @LZA*/04500001
*/*                                                               @LZA*/04500001
*/*     BLOCKS      Specifies the number of 4K blocks to be       @LZA*/04500001
*/*                 available in the data space.                  @LZA*/04500001
*/*                 Note: The maximum size that can be            @LZA*/04500001
*/*                       specified is 2GB minus one 4K block.    @LZA*/04500001
*/*                       This is due to some processors not      @LZA*/0000000
*/*                       allowing the data space to start at     @LZA*/0000000
*/*                       zero.  These data spaces start at       @LZA*/0000000
*/*                       address 4096.  ADDRESS always returns   @LZA*/0000000
*/*                       4096, even for processors that allow to @LZA*/0000000
*/*                       start at zero.  This is for debugging   @LZA*/0000000
*/*                       purposes only.                          @LZA*/0000000
*/*                 xblocks : bin(31)                             @LZA*/04500001
*/*                                                               @LZA*/04500001
*/*     STOKEN      Returns the data space token                  @LZA*/04500001
*/*                 (the token is required for DIV services)      @LZA*/04500001
*/*                 xstoken : char(8)                             @LZA*/04500001
*/*                                                               @LZA*/04500001
*/*     ALET        Returns the ALET (access list entry table)    @LZA*/04500001
*/*                 index (the ALET is required for               @LZA*/04500001
*/*                 addressability of data in the data space)     @LZA*/04500001
*/*                 xalet : bin(16)                               @LZA*/04500001
*/*                                                                   */04500001
*/*                                                                   */04500001
*/*     The following key words define the general return values :    */04500001
*/*     ----------------------------------------------------------    */04500001
*/*                                                                   */04500001
*/*     ADDRESS     returns the address of the storage being          */04550001
*/*                 reserved.                                         */04600001
*/*                 xaddr : pointer(31)                               */04650001
*/*                                                                   */04750001
*/*                                                                   */05054401
*/* Return   | Reason   | Description       | Message  | Abend /      */05056601
*/* Code     | Code     |                   |          | Reason Code  */05058801
*/* ================================================================= */05061001
*/* GETMOK   | GETMOK   | request completed |    -     |     -        */05063201
*/*          |          | successfully      |          |              */05065401
*/* ----------------------------------------------------------------- */05067601
*/* GETMWARN | GETMSNAV | storage not       | CBDA056I |     -        */05069801
*/*          |          | available         |(if MSG   |              */05072001
*/*          |          |(if COND specified,|specified)|              */05074201
*/*          |          | else system abend)|          |              */05076401
*/*          |          |                   |          |              */05078601
*/* GETMWARN | GETMDSNC | data space could  | CBDA058I |     -        */05080801
*/*          |          | not be created    |(if MSG   |              */05080801
*/*          |          |(if COND specified)|specified)|              */05074201
*/* ----------------------------------------------------------------- */05083001
*/* GETMTERM | GETMINVF | invalid function  | CBDA011I | 00F/00110011 */05085201
*/*          |          | code              |          |              */05087401
*/*          | GETMINVS | invalid subpool   | CBDA011I | 00F/00110012 */05089601
*/*          |          | number            |          |              */05091801
*/*          | GETMLEN0 | zero length       | CBDA011I | 00F/00110015 */05094001
*/*          |          | provided          |          |              */05096201
*/*          | GETMDSNC | data space could  | CBDA011I | 00F/00110002 */05094001
*/*          |          | not be created    |          |              */05096201
*/*          |          |(if COND not       | CBDA011I | 00F/00110002 */05074201
*/*          |          | specified)t       |          |              */05074201
*/*                                                                   */05100001
*/*                                                                   */05150001
*/*  CHANGE ACTIVITY =                                                */05200001
*/*    $L0= HCD,  HCSH101 900420 BOEB: Hardware Configuration Dialog  */05250001
*/*    $L8= HCD,  HCSH103 910613 BOEB: HOM message support            */05300001
*/*    $LZ= HCD,  HCSH531 950913 BWWI: IODF in data space             */05300001
*/*               Note: ====>  please make sure  <====                */05350001
*/*                     The new fields defined to the GETM parameter  */05350001
*/*                     list in order to support data spaces          */05350001
*/*                     have been appended at the end of the          */05350001
*/*                     control block. Since the GETM parameter list  */05350001
*/*                     is an externally used control block (used     */05350001
*/*                     by IPL) it must be ensured, that the new      */05350001
*/*                     field definitions in the control block are    */05350001
*/*                     accessed only, when explicitely the data      */05350001
*/*                     space support is requested, i.e. the GETMFDSP */05350001
*/*                     flag is ON. Otherwise, when this version      */05350001
*/*                     of the control block is used under a down-    */05350001
*/*                     level MVS version - e.g. HCD V53 under        */05350001
*/*                     MVS 4.3 - the storage of the caller pointed   */05350001
*/*                     to by the new fields is undetermined, and     */05350001
*/*                     thus the result would be unpredictable.       */05350001
*/*                                                                   */05350001
*/*********************************************************************/05400001
*/*                                                                   */05450001
*/*                                   that is the begin of a very long  05500001
                                      PLAS comment statement            05550001
.SKIP    ANOP                                                           05600001
         LCLA  &SDX                   &SYSNDX value                     05650001
         LCLB  &ERROR                 Error flag                        05700001
         LCLC  &CPVT                  CPVT address field                05750001
         LCLC  &OP                    Instrcution code                  05800001
.*                                                                      05850001
&SDX     SETA  &SYSNDX                Set value for labels              05900001
&CPVT    SETC  'CPVT'                 Set default CPVT address field    05950001
&OP      SETC  'LA'                   Default instr to load CPVT addr   06000001
.*                                                                      06050001
.********************************************************************** 06100001
.*                                                                    * 06150001
.*             Clear GETM Parameter List                              * 06200001
.*                                                                    * 06250001
.********************************************************************** 06300001
.*                                                                      06350001
.GENASM  ANOP                                                           06400001
&LABEL   XC    GETM(GETMLN),GETM       Zero out GETM parameter list     06450001
         MVC   GETMSD,GETMSDNM         Set up parameter list identifier 06500001
.*                                                                      06550001
.********************************************************************** 06600001
.*                                                                    * 06650001
.*       Validate positional parameter                                * 06700001
.*                                                                    * 06750001
.********************************************************************** 06800001
.*                                                                      06850001
.CKPOS   ANOP                                                           06900001
         AIF   ('&COND' EQ '').EPOS     No positional specified         06950001
         AIF   ('&COND' EQ 'UNCOND').EPOS   No code to be generated     07000001
         AIF   ('&COND' EQ 'COND').GENPOS   Generate code               07050001
         MNOTE 8,'*** &COND IS AN INVALID POSITIONAL, ONLY ''COND'' OR* 07100001
               ''UNCOND'' ALLOWED.'                                     07150001
&ERROR   SETB  1                       Indicate error                   07200001
         AGO   .EPOS                                                    07250001
.GENPOS  ANOP                                                           07300001
         OI    GETMFLG,GETMFCON       set flag for COND request         07350001
.EPOS    ANOP                                                           07400001
.*                                                                      07450001
.********************************************************************** 07500001
.*                                                                    * 07550001
.*       Validate LENGTH                                              * 07600001
.*                                                                    * 07650001
.********************************************************************** 07700001
.*                                                                      07750001
.CKLENG  ANOP                                                           07800001
         AIF   (T'&LENGTH EQ 'O').NOLENG   LENGTH not specified         07850001
         AIF   ('&LENGTH'(1,1) EQ '(').LENGREG  Register format         07900001
.*                                                                      07950001
         LA    15,&LENGTH              Length of storage to be acquired 08000001
         ST    15,GETMLNTH             and store into parameter list    08050001
         AGO   .ELENG                  and continue                     08100001
.*                                                                      08150001
.LENGREG ANOP                                                           08200001
         ST    &LENGTH(1),GETMLNTH     Store length into parameter list 08250001
         AGO   .ELENG                  and continue                     08300001
.*                                                                      08350001
.NOLENG  MNOTE 8,'*** LENGTH PARAMETER IS REQUIRED'                     08400001
&ERROR   SETB  1                       Indicate error                   08450001
.ELENG   ANOP                                                           08500001
.*                                                                      08550001
.********************************************************************** 08600001
.*                                                                    * 08650001
.*       Validate LOC                                                 * 08700001
.*                                                                    * 08750001
.********************************************************************** 08800001
.*                                                                      08850001
.CKLOC   ANOP                                                           08900001
         AIF   (T'&LOC EQ 'O').ELOC    LOC  not specified               08950001
         AIF   ('&LOC' EQ 'BELOW').LOC20   LOC=BELOW specified          09000001
         AIF   ('&LOC' NE 'ANY').LOCE1   invalid LOC= specification     09050001
         AGO   .ELOC                   LOC=ANY specified, continue      09100001
.*                                                                      09150001
.LOC20   ANOP                                                           09200001
         OI    GETMFLG,GETMFBLW        Indicate LOC=BELOW is requested  09250001
         AGO   .ELOC                   and continue                     09300001
.*                                                                      09350001
.LOCE1   MNOTE 8,'*** INVALID LOC PARAMETER'                            09400001
&ERROR   SETB  1                       Indicate error                   09450001
.*                                                                      09500001
.ELOC    ANOP                                                           09550001
.*                                                                      09600001
.********************************************************************** 09650001
.*                                                                    * 09700001
.*       Validate SUBPOOL                                             * 09750001
.*                                                                    * 09800001
.********************************************************************** 09850001
.*                                                                      09900001
.CKSUBP  ANOP                                                           09950001
         AIF   (T'&SUBPOOL EQ 'O').ESUBP   SUBPOOL not specified        10000001
         AIF   ('&SUBPOOL'(1,1) EQ '(').SUBPREG  Register format        10050001
.*                                                                      10100001
         MVI   GETMSPN,&SUBPOOL        Set up subpool number            10150001
         AGO   .ESUBP                  and continue                     10200001
.*                                                                      10250001
.SUBPREG ANOP                                                           10300001
         STC   &SUBPOOL(1),GETMSPN     Store subpool number             10350001
.*                                                                      10400001
.ESUBP   ANOP                                                           10450001
.*                                                                      10500001
.********************************************************************** 10550001
.*                                                                    * 10600001
.*       Validate BNDRY                                               * 10650001
.*                                                                    * 10700001
.********************************************************************** 10750001
.*                                                                      10800001
.CKBNDRY ANOP                                                           10850001
         AIF   ('&BNDRY' EQ '').EBNDRY  BNDRY not specified             10900001
         AIF   ('&BNDRY' EQ 'PAGE').BNDRY10    BNDRY=PAGE requested     10950001
         AIF   ('&BNDRY' EQ 'DBLWD').EBNDRY    BNDRY=DBLWD requested    11000001
         AGO   .BNDRYE1                invalid specification            11050001
.*                                                                      11100001
.BNDRY10 OI    GETMFLG,GETMFPG         Indicate BNDRY=PAGE requested    11150001
         AGO   .EBNDRY                 and continue                     11200001
.*                                                                      11250001
.BNDRYE1 MNOTE 8,'*** INVALID BNDRY PARAMETER'                          11300001
&ERROR   SETB  1                       Indicate error                   11350001
.*                                                                      11400001
.EBNDRY  ANOP                                                           11450001
.*                                                                      11500001
.*                                                                      11550001
.********************************************************************** 11600001
.*                                                                    * 11650001
.*       Validate REQ                                                 * 11700001
.*                                                                    * 11750001
.********************************************************************** 11800001
.*                                                                      11850001
.CKREQ   ANOP                                                           11900001
         AIF   ('&REQ' EQ '').EREQ       REQ  not specified             11950001
         AIF   ('&REQ' NE 'UIM').REQE1  invalid REQ= specification      12000001
&CPVT    SETC  'UCACPVTP'               Set UIM CPVT address field      12050001
&OP      SETC  'L '                     Set instr code to get CPVT addr 12100001
         AGO   .EREQ                    REQ=UIM specified, continue     12150001
.*                                                                      12200001
.REQE1   MNOTE 8,'*** INVALID REQ PARAMETER'                            12250001
&ERROR   SETB  1                       Indicate error                   12300001
.*                                                                      12350001
.EREQ    ANOP                                                           12400001
.*                                                                      12450001
.********************************************************************** 12500001
.*                                                                    * 12550001
.*       Validate MSG                                                 * 12600001
.*                                                                    * 12650001
.********************************************************************** 12700001
.*                                                                      12750001
.CKMSG   ANOP                                                      &L8A 12800001
         AIF   ('&MSG' EQ 'MSG').MSG10   Generate code             &L8A 12850001
         AGO   .EMSG                   otherwise                   &L8A 12900001
.*                                                                      12950001
.MSG10   ANOP                                                      &L8A 13000001
         OI    GETMFLG,GETMFMSG        Indicate MSG is requested   &L8A 13050001
         AGO   .EMSG                   and continue                &L8A 13100001
.EMSG    ANOP                                                      &L8A 13150001
.*                                                                      13200001
.*                                                                      13250001
.********************************************************************** 13300001
.*                                                                    * 13350001
.*             Generate linkage to GETM Service Routine               * 13400001
.*                                                                    * 13450001
.********************************************************************** 13500001
.*                                                                      13550001
.GENASM2 ANOP                                                           13600001
.*                                                                      13650001
         &OP   15,&CPVT                Get CPVT address                 13700001
         ST    15,$LOG&SDX             Set CPVT address                 13750001
         B     $LOG&SDX+8              Branch around parm list          13800001
$LOG&SDX DC    A(0)                    Address of CPVT                  13850001
         DC    A(GETM)                 Address of GETM parameter list   13900001
         LA    1,$LOG&SDX              Address of parameter area        13950001
         AIF   ('&REQ' EQ 'UIM').LAB50     REQ=UIM specified            14000001
         L     15,CPVTSSMR             Address of GETM routine          14050001
         AGO   .LAB60                  and continue                     14100001
.LAB50   ANOP                                                           14150001
         L     15,UCAMGETM             Address of GETM routine          14200001
.LAB60   ANOP                                                           14250001
         BALR  14,15                   Go and acquire storage           14300001
.*                                                                      14350001
         AIF   ('&ADDRESS' EQ '').LAB80   ADDRESS not specified         14400001
         AIF   ('&ADDRESS'(1,1) EQ '(').LAB70  Register format          14450001
         L     1,GETMADDR              Pick up address of storage area  14500001
         ST    1,&ADDRESS              and store into user's area       14550001
         AGO   .LAB80                  and continue                     14600001
.LAB70   ANOP                                                           14650001
         L     &ADDRESS(1),GETMADDR    Pick up address of storage area  14700001
.LAB80   ANOP                                                           14750001
.*                                                                      14800001
.********************************************************************** 14850001
.*                                                                    * 14900001
.*       Exit                                                         * 14950001
.*                                                                    * 15000001
.********************************************************************** 15050001
.*                                                                      15100001
.EXIT    ANOP                                                           15150001
         MEND                                                           15200001
*                                                                    */ 15250001
* CBDIGETM:                                                             15300001
*  MACRO                                                                15350001
*  KEYS(LENGTH,SUBPOOL,LOC,RELATED,REQ,BNDRY,ADDRESS,MSG,               15400001
*       DATASPACE,BLOCKS,STOKEN,ALET) TRACE ;                 /* @LZC*/ 15400001
*/********************************************************************/ 15450001
*/*                                                                  */ 15500001
*/*      DECLARE VARIABLES                                           */ 15550001
*/*                                                                  */ 15600001
*/********************************************************************/ 15650001
* @SPACE(1);                                                            15700001
*/********************************************************************/ 15750001
* /*         EXTERNAL VARIABLES                                      */ 15800001
*/********************************************************************/ 15850001
*  DCL  EHARC    FIXED EXTERNAL;   /* FOR RETURN CODE FROM MACRO     */ 15900001
*  @SPACE;                                                              15950001
*/********************************************************************/ 16000001
* /*         INTERNAL VARIABLES                                      */ 16050001
*/********************************************************************/ 16100001
*  DCL  CMT      CHAR  INTERNAL;   /* ERROR MESSAGE TO PRINT         */ 16150001
*  DCL  ERRKEYS  CHAR  INTERNAL;   /* KEY WORDS IN ERROR         @LZA*/ 16150001
*  DCL  IMACRO   CHAR  INTERNAL;   /* MACRO PARAMETERS               */ 16200001
*  DCL  INDENT   FIXED INTERNAL;   /* INDENT VALUE FOR LISTING       */ 16250001
*  DCL  RCERR    FIXED INTERNAL;   /* ERROR FLAG FOR RETURN CODE     */ 16300001
* @SPACE(1);                                                            16350001
*/********************************************************************/ 16400001
* /*          INITIALIZE VARIABLES                                   */ 16450001
*/********************************************************************/ 16500001
*  IMACRO=' ?'||MACLABEL||' '||MACNAME||MACLIST||' '||MACKEYS||' ';     16550001
*  RCERR = 8;                      /* ERROR SEVERITY                 */ 16600001
*  EHARC=0;                        /* INITIALIZE RETURN CODE         */ 16650001
*  INDENT=MACCOL+2;                /* INDENT TWO COLUMNS FOR FORMAT  */ 16700001
* @SPACE(1);                                                            16750001
*/********************************************************************/ 16800001
*/*                                                                  */ 16850001
*/*      VALIDATE MACRO LIST                                         */ 16900001
*/*                                                                  */ 16950001
*/********************************************************************/ 17000001
*  IF MACLABEL~='' THEN            /* GENERATE MACLABEL              */ 17050001
*     ANS(MACLABEL)  COL(MACLMAR);                                      17100001
*  ANS('DO; '|| COMMENT(IMACRO)) COL(MACCOL); /* START CODE & LIST      17150001
*                                                MACRO PARAMETERS    */ 17200001
*  IF NUMBER(MACLIST) > 1 THEN DO;   /* CHECK FOR POSITIONALS        */ 17250001
*     CMT = 'TOO MANY POSITIONALS SPECIFIED. ONLY ''COND'' OR ' ||      17300001
*           '''UNCOND'' ALLOWED.';                                      17350001
*     ANS MSG(CMT);                /* PRINT ERROR MESSAGE            */ 17400001
*     ANS (COMMENT(CMT)) COL(INDENT);                                   17450001
*     EHARC = RCERR;               /* SET ERROR RETURN CODE          */ 17500001
*     END;                                                              17550001
*                                                                       17600001
*  IF MACLIST(1) ~= '' THEN DO;    /* positional specified           */ 17650001
*     IF MACLIST(1) ~= 'COND' &    /* wrong positional specified     */ 17700001
*        MACLIST(1) ~= 'UNCOND' THEN DO; /*                          */ 17750001
*        CMT = 'WRONG POSITIONAL SPECIFIED. ONLY ''COND'' OR ' ||       17800001
*              '''UNCOND'' ALLOWED.';                                   17850001
*        ANS MSG(CMT);             /* PRINT ERROR MESSAGE            */ 17900001
*        ANS (COMMENT(CMT)) COL(INDENT);                                17950001
*        EHARC = RCERR;            /* SET ERROR RETURN CODE          */ 18000001
*        END;                                                           18050001
*     END;                                                              18100001
*                                                                       18150001
*  IF DATASPACE = '' THEN DO;      /* no DATASPACE specified         */ 18150001
*     /*----test for invalid key words-------------------------------*/ 18150001
*     ERRKEYS = '';                                           /* @LZA*/ 18150001
*     IF BLOCKS ~= '' THEN         /* not allowed                @LZA*/ 18150001
*        ERRKEYS = 'BLOCKS ';                                 /* @LZA*/ 18250001
*     IF STOKEN ~= '' THEN         /* not allowed                @LZA*/ 18150001
*        ERRKEYS = ERRKEYS || 'STOKEN ';                      /* @LZA*/ 18150001
*     IF ALET   ~= '' THEN         /* not allowed                @LZA*/ 18150001
*        ERRKEYS = ERRKEYS || 'ALET ';                        /* @LZA*/ 18150001
*     IF ERRKEYS ~= '' THEN DO;                               /* @LZA*/ 18150001
*        CMT ='ERROR ---> Key word(s) ' || ERRKEYS ||                   18250001
*             'only valid with key word DATASPACE.';          /* @LZA*/ 18250001
*        ANS MSG(CMT);                /* print error message     @LZA*/ 18300001
*        ANS(COMMENT(CMT)) COL(INDENT);                       /* @LZA*/ 18350001
*        EHARC=RCERR;                 /* Set error return code   @LZA*/ 18400001
*     END;                                                    /* @LZA*/ 18450001
*     /*----test for required key words------------------------------*/ 18150001
*     ERRKEYS = '';                                           /* @LCA*/ 18150001
*     IF LENGTH = '' THEN                                     /* @LZA*/ 18150001
*        ERRKEYS = 'LENGTH ';                                 /* @LZA*/ 18250001
*     IF ERRKEYS ~= '' THEN DO;                               /* @LZA*/ 18150001
*        CMT ='ERROR ---> Key word(s) ' || ERRKEYS ||                   18250001
*             'required.';                                    /* @LZC*/ 18300001
*        ANS MSG(CMT);                /* print error message         */ 18300001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 18350001
*        EHARC=RCERR;                 /* Set error return code       */ 18400001
*     END;                                                              18450001
*     /*----test key word values ------------------------------------*/ 18150001
*     ERRKEYS = '';                /*                                */ 18150001
*     IF LOC ~= '' THEN DO;           /* LOC key                     */ 18550001
*        IF LOC(1) ~= 'BELOW' &       /* Must be LOC(BELOW|ANY)      */ 18600001
*           LOC(1) ~= 'ANY' THEN DO;  /*                             */ 18650001
*           CMT ='ERROR ---> Parameter ' || LOC(1) ||                   18700001
*                ' invalid for key word LOC.';                /* @LZC*/ 18750001
*           ANS MSG(CMT);                /* print error message      */ 18300001
*           ANS(COMMENT(CMT)) COL(INDENT);                              18800001
*           EHARC=RCERR;              /* Set error return code       */ 18850001
*        END;                                                           18950001
*     END;                                                              18950001
*     IF REQ ~= '' THEN DO;           /* REQ key                     */ 19050001
*        IF REQ(1) ~= 'UIM' THEN DO;  /* Must be REQ(UIM)            */ 19100001
*           CMT ='ERROR ---> Parameter ' || REQ(1) ||                   18700001
*                ' invalid for key word REQ.';                /* @LZC*/ 18750001
*           ANS MSG(CMT);             /* Print error message         */ 19200001
*           ANS(COMMENT(CMT)) COL(INDENT);                              19250001
*           EHARC=RCERR;              /* Set error return code       */ 19300001
*        END;                                                           19400001
*     END;                                                              18950001
*     IF BNDRY ~= '' THEN DO;         /* BNDRY key                   */ 19500001
*        IF BNDRY(1) ~= 'PAGE' &      /* Must be BNDRY(PAGE|DBLWD)   */ 19550001
*           BNDRY(1) ~= 'DBLWD' THEN DO; /*                          */ 19600001
*           CMT ='ERROR ---> Parameter ' || BNDRY(1) ||                 18700001
*                ' invalid for key word BNDRY.';              /* @LZC*/ 18750001
*           ANS MSG(CMT);             /* Print error message         */ 19700001
*           ANS(COMMENT(CMT)) COL(INDENT);                              19750001
*           EHARC=RCERR;              /* Set error return code       */ 19800001
*        END;                                                           19850001
*     END;                                                              19900001
*  END;                                                       /* @LZA*/ 18450001
*  ELSE DO;                        /* DATASPACE specified        @LZA*/ 18150001
*     /*----test for invalid key words-------------------------------*/ 18150001
*     ERRKEYS = '';                                           /* @LZA*/ 18150001
*     IF LENGTH ~= '' THEN         /* not allowed                @LZA*/ 18150001
*        ERRKEYS = ERRKEYS || 'LENGTH ';                      /* @LZA*/ 18150001
*     IF LOC    ~= '' THEN         /* not allowed                @LZA*/ 18150001
*        ERRKEYS = ERRKEYS || 'LOC ';                         /* @LZA*/ 18150001
*     IF BNDRY  ~= '' THEN         /* not allowed                @LZA*/ 18150001
*        ERRKEYS = ERRKEYS || 'BNDRY ';                       /* @LZA*/ 18150001
*     IF REQ    ~= '' THEN         /* not allowed                @LZA*/ 18150001
*        ERRKEYS = ERRKEYS || 'REQ ';                         /* @LZA*/ 18150001
*     IF SUBPOOL~= '' THEN         /* not allowed                @LZA*/ 18150001
*        ERRKEYS = ERRKEYS || 'SUBPOOL ';                     /* @LZA*/ 18150001
*     IF ERRKEYS ~= '' THEN DO;                               /* @LZA*/ 18150001
*        CMT ='ERROR ---> Key word(s) ' || ERRKEYS ||                   18250001
*             'not allowed for key word DATASPACE.';          /* @LZA*/ 18250001
*        ANS MSG(CMT);                /* print error message     @LZA*/ 18300001
*        ANS(COMMENT(CMT)) COL(INDENT);                       /* @LZA*/ 18350001
*        EHARC=RCERR;                 /* Set error return code   @LZA*/ 18400001
*     END;                                                    /* @LZA*/ 18450001
*     /*----test for required key words------------------------------*/ 18150001
*     ERRKEYS = '';                                           /* @LZA*/ 18150001
*     IF BLOCKS = '' THEN                                     /* @LZA*/ 18150001
*        ERRKEYS = 'BLOCKS ';                                 /* @LZA*/ 18250001
*     IF ERRKEYS ~= '' THEN DO;                               /* @LZA*/ 18150001
*        CMT ='ERROR ---> Key word(s) ' || ERRKEYS ||                   18250001
*             'required for key word DATASPACE.';             /* @LZA*/ 18300001
*        ANS(COMMENT(CMT)) COL(INDENT);                       /* @LZA*/ 18350001
*        EHARC=RCERR;                 /* Set error return code   @LZA*/ 18400001
*     END;                                                    /* @LZA*/ 18450001
*  END;                                                       /* @LZA*/ 18450001
*                                                                       18150001
*                                                                       18150001
* IF EHARC =RCERR THEN             /* Any Parameter errors ?         */ 20000001
*   DO;                            /* ..Yes                          */ 20050001
*     ANS(COMMENT('ERROR ENCOUNTERED.  NO CODE GENERATED'))             20100001
*        COL(INDENT);              /* print error message            */ 20150001
*     ANS('END; '||COMMENT(IMACRO)) COL(MACCOL);                        20200001
*     RETURN CODE(EHARC);          /* Return with non-zero return       20250001
*                                     code                           */ 20300001
*   END;                                                                20350001
*/********************************************************************/ 20400001
*/*                                                                  */ 20450001
*/*            GENERATE PL/AS SOURCE STATEMENTS                      */ 20500001
*/*                                                                  */ 20550001
*/********************************************************************/ 20600001
* ANS('GETM=''0''B; '||                                                 20650001
*    COMMENT(' Zero out GETM parameter list' ))     COL(INDENT);        20700001
* ANS('GETMSD=GETMSDNM ; '||                                            20750001
*    COMMENT(' Set up parm list identifier '))     COL(INDENT);         20800001
* IF MACLIST(1) = 'COND' THEN                                           20850001
*     ANS('GETMFCON=''1''B;'||                                          20900001
*        COMMENT(' Set conditional flag '))   COL(INDENT);              20950001
* IF MSG ~= '' THEN DO;             /* Check if MSG is specified @L8A*/ 22000001
*     ANS('GETMFMSG=''1''B; '||                                         22050001
*        COMMENT(' Request for message on error '))                     22100001
*        COL(INDENT);                                        /*  @L8A*/ 22150001
*     END;                                                   /*  @L8A*/ 22200001
*                                                                       22250001
* IF DATASPACE = '' THEN DO;       /* no DATASPACE specified     @LZA*/ 20950001
*                                                                       21650001
*    ANS('GETMLNTH=' ||LENGTH(1)||'; '||                                21000001
*       COMMENT(' Storage length to be reserved '))   COL(INDENT);      21050001
*                                                                       21100001
*    IF SUBPOOL ~= '' THEN DO;        /* Test if SUBPOOL is specified*/ 21150001
*       ANS('GETMSPN=' ||SUBPOOL(1)||'; '||                             21200001
*          COMMENT(' Subpool number '))   COL(INDENT);                  21250001
*    END;                                                               21300001
*                                                                       21350001
*    IF LOC(1)= 'BELOW' THEN DO;      /* LOC=BELOW specified ?       */ 21400001
*       ANS('GETMFBLW=''1''B; '||                                       21450001
*          COMMENT(' Indicate that storage below the 16MB line was      21500001
*                    requested'))                    COL(INDENT);       21550001
*    END;                                                               21600001
*                                                                       21650001
*    IF BNDRY(1)= 'PAGE' THEN DO;     /* BNDRY=PAGE specified        */ 21700001
*       ANS('GETMFPG=''1''B; '||                                        21750001
*          COMMENT(' Indicate that page boundary was requested'))       21800001
*          COL(INDENT);                                                 21850001
*    END;                                                               21900001
*                                                                       21950001
*    IF REQ(1)= 'UIM'   THEN          /* REQ=UIM specified ?         */ 22300001
*       ANS('CALL UCAMGETM(UCAMCPVT,GETM); '||                          22350001
*          COMMENT(' Go and get storage '))     COL(INDENT);            22400001
*    ELSE                                                               22450001
*       ANS('CALL CPVMSSMR(CPVT,GETM); '||                              22500001
*          COMMENT(' Go and get storage '))     COL(INDENT);            22550001
*                                                                       22600001
*    IF ADDRESS ~= '' THEN DO;        /* If ADDRESS is specified     */ 22650001
*       ANS(ADDRESS(1) || ' = GETMADDR ; '||                            22700001
*          COMMENT(' Get storage address '))   COL(INDENT);             22750001
*    END;                                                               22800001
*                                                                       22850001
* END;                                                        /* @LZA*/ 22600001
* ELSE DO;                         /* DATASPACE specified        @LZA*/ 20950001
*                                                                       22600001
*    ANS('GETMFDSP=''1''B; '||                                          21450001
*       COMMENT(' Indicate that a data space is to be created.'))       21500001
*       COL(INDENT);                                          /* @LZA*/ 21550001
*                                                                       22600001
*    ANS('GETMBLKS=' ||BLOCKS(1)||'; '||                                21000001
*       COMMENT(' Number of 4K blocks for data space '))                21050001
*       COL(INDENT);                                          /* @LZA*/ 21550001
*                                                                       21100001
*    ANS('CALL CPVMSSMR(CPVT,GETM); '||                                 22500001
*       COMMENT(' Go and create data space '))                          22550001
*       COL(INDENT);                                          /* @LZA*/ 21550001
*                                                                       22600001
*    IF ADDRESS ~= '' THEN DO;        /* If ADDRESS is specified @LZA*/ 22650001
*       ANS(ADDRESS(1) || ' = GETMADDR ; '||                            22700001
*          COMMENT(' Get data space origin '))                          22750001
*          COL(INDENT);                                       /* @LZA*/ 21550001
*    END;                                                     /* @LZA*/ 22800001
*                                                                       22850001
*    IF STOKEN ~= '' THEN DO;         /* If STOKEN is specified  @LZA*/ 22650001
*       ANS(STOKEN(1) || ' = GETMSTOK ; '||                             22700001
*          COMMENT(' Get data space token '))                           22750001
*          COL(INDENT);                                       /* @LZA*/ 21550001
*    END;                                                     /* @LZA*/ 22800001
*                                                                       22850001
*    IF ALET ~= '' THEN DO;           /* If ALET is specified    @LZA*/ 22650001
*       ANS(ALET(1) || ' = GETMALET ; '||                               22700001
*          COMMENT(' Get data space ALET '))                            22750001
*          COL(INDENT);                                       /* @LZA*/ 21550001
*    END;                                                     /* @LZA*/ 22800001
*                                                                       22850001
* END;                                                        /* @LZA*/ 22600001
*                                                                       22600001
*                                                                       22600001
* ANS('END; '||COMMENT(IMACRO))  COL(MACCOL); /* END CODE & LIST        22900001
*                                                MACRO PARAMETERS    */ 22950001
* RETURN CODE(EHARC);               /* RETURN SUCCESSFUL             */ 23000001
* %END CBDIGETM;                                                        23050001
