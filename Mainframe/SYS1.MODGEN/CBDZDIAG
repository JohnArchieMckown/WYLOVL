*%GOTO DIAG00;                     /* Bilingual Macro                   00050001
         MACRO                                                          00100001
&NAME    CBDZDIAG &MODNAME=,&CSECT=,&COMP=,&DESC=,&VRADATA=0,          X00150001
               &RELATED=,&MODCAT=                                       00200001
          AGO  .DIAG00                 Skip prolog                   */ 00250001
*%DIAG00: ;                                                             00300001
*/********************************************************************/ 00350001
*/*                                                                  */ 00400001
*/*  ACRONYM:  CBDZDIAG                                              */ 00425000
*/*  EXTERNAL CLASSIFICATION:  PSPI                                  */ 00450000
*/*  END OF EXTERNAL CLASSIFICATION                                  */ 00475000
*/*  MACRO NAME:  CBDZDIAG                                           */ 00500000
*/*  DSECT NAME:  DIAG                                               */ 00525000
*/*  DESCRIPTIVE NAME = Hardware Configuration Dialog Diagnostic     */ 00550001
*/*                     Area Mapping                                 */ 00600001
*/*                                                                  */ 00650001
*/*  PROPRIETARY STATEMENT =                                         */ 00700001
*/*                                                                  */ 00750001
*/*     LICENSED MATERIALS - PROPERTY OF IBM                         */ 00800001
*/*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                  */ 00850001
*/*     5647-A01 (C) COPYRIGHT IBM CORP. 1990, 2000              @L8A*/ 00900004
*/*                                                                  */ 01000001
*/*  STATUS = HCS6091                                            @L8A*/ 01050004
*/*                                                                  */ 01100001
*/*  MODULE TYPE = PLAS MACRO or Assembler H                         */ 01150001
*/*                                                                  */ 01200001
*/*  DEPENDENCIES = None                                             */ 01250001
*/*                                                                  */ 01300001
*/*  RESTRICTIONS = For HCD and UIM use only                         */ 01350001
*/*                                                                  */ 01400001
*/*  PROCESSOR = PLAS Compiler or Assembler H                        */ 01450001
*/*                                                                  */ 01500001
*/*  INVOCATION =                                                    */ 01550001
*/*               To generate an entry for the diagnostic            */ 01600001
*/*                stack:                                            */ 01650001
*/*          PLAS                                                    */ 01700001
*/*               ? structure: CBDZDIAG                              */ 01750001
*/*                            MODNAME (modname)                     */ 01800001
*/*                            MODCAT  (category)                    */ 01850001
*/*                            CSECT   (csect)                       */ 01900001
*/*                            COMP    (comp)                        */ 01950001
*/*                            DESC    (desc)                        */ 02000001
*/*                            VRADATA (vradata)                     */ 02050001
*/*                            REQ     (ASSIGN)                      */ 02100001
*/*                            RELATED ('related value')             */ 02150001
*/*                                                                  */ 02200001
*/*          Assembler                                               */ 02250001
*/*                 label      CBDZDIAG                              */ 02300001
*/*                             MODNAME='modname'                    */ 02350001
*/*                            ,CSECT='csect'                        */ 02400001
*/*                            ,COMP='comp'                          */ 02450001
*/*                            ,DESC='desc'                          */ 02500001
*/*                            ,VRADATA=vradata                      */ 02550001
*/*                            ,RELATED=('related value')            */ 02600001
*/*                                                                  */ 02650001
*/*  structure         Name of structure that is to be generated.    */ 02700001
*/*  modname           Character string containing the load module   */ 02750001
*/*                     name of the issuer, placed in the SDWAMODN   */ 02800001
*/*                     field.                                       */ 02850001
*/*  modcat            Keyword defining the category of module       */ 02900001
*/*                     within HCD. Differentiation of modules       */ 02950001
*/*                     is needed for tracing facility. MODCAT is    */ 03000001
*/*                     optional. The following categories exist:    */ 03050001
*/*                     long       | short                           */ 03100001
*/*                     -----------|------                           */ 03150001
*/*                     REPOSITORY | R    - repository routines      */ 03200001
*/*                     REPSERVICE | RS   - repository service rtns  */ 03250001
*/*                     SERVICE    | S    - service routines         */ 03300001
*/*                     COMMAND    | C    - command routines         */ 03350001
*/*                     VALIDATION | V    - validation routines      */ 03400001
*/*                     UIM        | UIM  - UIM routines             */ 03450001
*/*                     UIMSERVICE | UIMS - UIM service routines     */ 03500001
*/*                     DIALOG     | D    - dialog routines          */ 03550001
*/*                     MIGRATION  | M    - migration routines       */ 03600001
*/*                     BATCH      | B    - batch routines           */ 03650001
*/*                     UTILITY    | U    - utility routines         */ 03700001
*/*                     DYNAMIC    | DYN  - dynamic configuration    */ 03750001
*/*                     HOM        | HOM  - HOM routines             */ 03800001
*/*                     OTHER      | O    - other routines           */ 03850001
*/*                                                                  */ 03900001
*/*  csect             Character string containing the CSECT         */ 03950001
*/*                     name of the issuer, placed in the SDWACSCT   */ 04000001
*/*                     field.  Optional for assembler version.      */ 04050001
*/*  comp              Character string containing the component ID  */ 04100001
*/*                     of the issuer, placed in the SDWACID  field. */ 04150001
*/*  desc              Character string containing the description   */ 04200001
*/*                     of the function, placed in the SDWASC field. */ 04250001
*/*  vradata           Name of table that contains the addresses of  */ 04300001
*/*                     the data that is to be placed in the VRA.    */ 04350001
*/*                     The array contains the key and length        */ 04400001
*/*                     information as well as the address of        */ 04450001
*/*                     the data. (Optional)                         */ 04500001
*/*  REQ(ASSIGN)       Causes to assign the various parameters to the*/ 04550001
*/*                    diagnostic stack structure rather than to     */ 04600001
*/*                    define it                                     */ 04650001
*/*  'related value'   Optional character string.                    */ 04700001
*/*                                                                  */ 04750001
*/*               To generate a PLAS mapping macro:                  */ 04800001
*/*                                                                  */ 04850001
*/*               %DCL DIAGDEF CHAR                                  */ 04900001
*/*               %DIAGDEF='value'                                   */ 04950001
*/*                   value = 'BDY(WORD)', 'BASED' or                */ 05000001
*/*                           'BASED(xxxxxxxx)'                      */ 05050001
*/*               %INCLUDE SYSLIB(CBDZDIAG)                          */ 05100001
*/*                                                                  */ 05150001
*/*               If DIAGDEF is not declared and initialized, then   */ 05200001
*/*               no structure will be generated.                    */ 05250001
*/*                                                                  */ 05300001
*/*  CHANGE ACTIVITY =                                               */ 05350001
*/*    $L0= HCD,  HCSH101 900420 BOEB: Hardware Configuration Dialog */ 05400001
*/*    $L8= HOM,  HCSH301 910604 BOEB: Host API support (HOM)        */ 05450001
*/*                                                                  */ 05500001
*/********************************************************************/ 05550001
*%GOTO DIAG150;                                                      /* 05600001
.DIAG00  ANOP                                                           05650001
         LCLC &LABEL                   First 4 characters of label      05700001
         LCLC &FUNC                    Label for function field         05750001
         LCLC &NEXT                    Label for chain pointer          05800001
         LCLC &END                     Label for end field              05850001
         LCLC &CSCT                    Final CSECT (set to default)     05900001
         LCLC &CAT                     Module category                  05950001
         LCLA &I                       Index for creating label         06000001
.*                                                                      06050001
        LCLA   &ERROR                  Error flag                       06100001
&ERROR  SETA   0                                                        06150001
        AIF    (K'&NAME GT 0).DIAG01   Test for maximum size            06200001
.LABEL   MNOTE 8,'MACRO LABEL NOT SPECIFIED.  IT IS REQUIRED.'          06250001
&ERROR  SETA   1                                                        06300001
.DIAG01 ANOP                                                            06350001
        AIF    (K'&MODNAME GT 0).DIAG02 Check for MODNAME               06400001
        MNOTE  8,'MODNAME PARAMETER NOT SPECIFIED.  IT IS REQUIRED.'    06450001
&ERROR  SETA   1                                                        06500001
.DIAG02 ANOP                                                            06550001
        AIF    (K'&COMP GT 0).DIAG03    Check for COMP                  06600001
        MNOTE  8,'COMP PARAMETER NOT SPECIFIED.  IT IS REQUIRED.'       06650001
&ERROR  SETA   1                                                        06700001
.DIAG03 ANOP                                                            06750001
        AIF    (K'&DESC GT 0).DIAG04    Check for DESC                  06800001
        MNOTE  8,'DESC PARAMETER NOT SPECIFIED.  IT IS REQUIRED.'       06850001
&ERROR  SETA   1                                                        06900001
.DIAG04 ANOP                                                            06950001
        AIF    (K'&CSECT GT 0).DIAG05  Check to see if CSECT specified  07000001
&CSCT   SETC   '&SYSECT'               Set default CSECT                07050001
        AGO    .DIAG06                                                  07100001
.DIAG05 ANOP                                                            07150001
&CSCT   SETC   '&CSECT'                 Set to input CSECT              07200001
.DIAG06 ANOP                                                            07250001
&CAT     SETC  '0'                     set default module category      07300001
         AIF   ('&MODCAT' EQ '').DIAG10    Branch if not specified      07350001
&CAT     SETC  'DIAGREP'               assume MODCAT=REPOSITORY         07400001
         AIF   ('&MODCAT' EQ 'REPOSITORY').DIAG10                       07450001
         AIF   ('&MODCAT' EQ 'R').DIAG10                                07500001
&CAT     SETC  'DIAGSERV'              assume MODCAT=SERVICE            07550001
         AIF   ('&MODCAT' EQ 'SERVICE').DIAG10                          07600001
         AIF   ('&MODCAT' EQ 'S').DIAG10                                07650001
&CAT     SETC  'DIAGCMD'               assume MODCAT=COMMAND            07700001
         AIF   ('&MODCAT' EQ 'COMMAND').DIAG10                          07750001
         AIF   ('&MODCAT' EQ 'C').DIAG10                                07800001
&CAT     SETC  'DIAGVAL'               assume MODCAT=VALIDATION         07850001
         AIF   ('&MODCAT' EQ 'VALIDATION').DIAG10                       07900001
         AIF   ('&MODCAT' EQ 'V').DIAG10                                07950001
&CAT     SETC  'DIAGUIM'               assume MODCAT=UIM                08000001
         AIF   ('&MODCAT' EQ 'UIM').DIAG10                              08050001
&CAT     SETC  'DIAGUIMS'              assume MODCAT=UIMSERVICE         08100001
         AIF   ('&MODCAT' EQ 'UIMSERVICE').DIAG10                       08150001
         AIF   ('&MODCAT' EQ 'UIMS').DIAG10                             08200001
&CAT     SETC  'DIAGDLG'               assume MODCAT=DIALOG             08250001
         AIF   ('&MODCAT' EQ 'DIALOG').DIAG10                           08300001
         AIF   ('&MODCAT' EQ 'D').DIAG10                                08350001
&CAT     SETC  'DIAGMIG'               assume MODCAT=MIGRATION          08400001
         AIF   ('&MODCAT' EQ 'MIGRATION').DIAG10                        08450001
         AIF   ('&MODCAT' EQ 'M').DIAG10                                08500001
&CAT     SETC  'DIAGBAT'               assume MODCAT=BATCH              08550001
         AIF   ('&MODCAT' EQ 'BATCH').DIAG10                            08600001
         AIF   ('&MODCAT' EQ 'B').DIAG10                                08650001
&CAT     SETC  'DIAGUTL'               assume MODCAT=UTILITY            08700001
         AIF   ('&MODCAT' EQ 'UTILITY').DIAG10                          08750001
         AIF   ('&MODCAT' EQ 'U').DIAG10                                08800001
&CAT     SETC  'DIAGREPS'              assume MODCAT=REPSERVICE         08850001
         AIF   ('&MODCAT' EQ 'REPSERVICE').DIAG10                       08900001
         AIF   ('&MODCAT' EQ 'RS').DIAG10                               08950001
&CAT     SETC  'DIAGDYN'               assume MODCAT=DYNAMIC            09000001
         AIF   ('&MODCAT' EQ 'DYNAMIC').DIAG10                          09050001
         AIF   ('&MODCAT' EQ 'DYN').DIAG10                              09100001
&CAT     SETC  'DIAGHOM'               assume MODCAT=HOM           @L8A 09150001
         AIF   ('&MODCAT' EQ 'HOM').DIAG10                         @L8A 09200001
&CAT     SETC  'DIAGOTH'               assume MODCAT=OTHER              09250001
         AIF   ('&MODCAT' EQ 'OTHER').DIAG10                            09300001
         AIF   ('&MODCAT' EQ 'O').DIAG10                                09350001
         MNOTE  8,'INVALID MODCAT PARAMETER SPECIFIED.'                 09400001
.*                                                                      09450001
.DIAG10 ANOP                                                            09500001
        AIF    (&ERROR GT 0).EXIT      If an error was detected, skip   09550001
.*                                      generation of code              09600001
&I      SETA   K'&NAME                 Find length of string            09650001
        AIF    (&I LE 4).DIAG20        Test for maximum size            09700001
&I      SETA   4                       Set maximum size                 09750001
.DIAG20 ANOP                                                            09800001
&LABEL  SETC   '&NAME'(1,&I)           Set label                        09850001
&FUNC   SETC   '&LABEL'.'FUNC'         Set function field name          09900001
&NEXT   SETC   '&LABEL'.'NEXT'         Set chain pointer field name     09950001
&END    SETC   '&LABEL'.'END'          Set end field                    10000001
*                                                                       10050001
*                                                                       10100001
&NAME    DS    0F                      Diagnostic Stack entry           10150001
DIAG     DC    C'DIAG'                 Control block identifier         10200001
&NEXT    DC    A(0)                    Address of next diagnostic entry 10250001
         DC    CL8'&MODNAME'           Module name                      10300001
         DC    CL8'&CSCT'              CSECT name                       10350001
         DC    H'0'                    Token, set by HCD                10400001
         DC    AL1(0)                  Flag byte, for HCD use only      10450001
         DC    AL1(&CAT)               Module category                  10500001
         DC    A(&VRADATA)             Address of array for VRA data    10550001
         DC    CL5'&COMP'              Component identifier             10600001
         DC    CL23&DESC               Component description            10650001
         DC    CL16'&SYSDATE'          Module level                     10700001
&FUNC    DC    CL4'    '               Indicates function to CBPMPPDS   10750001
&END     DS    0C                      End of DIAG                      10800001
         SPACE 2                                                        10850001
DIAGPOP  DC    CL4'POP '               Constant for function.           10900001
DIAGPUSH DC    CL4'PUSH'               Constant for function.           10950001
         SPACE 2                                                        11000001
*        The following Equates are used to define the module category   11050001
         SPACE 1                                                        11100001
DIAGREP  EQU   1                       Repository Routine               11150001
DIAGSERV EQU   2                       Service Routine                  11200001
DIAGCMD  EQU   3                       Command Routine                  11250001
DIAGVAL  EQU   4                       Validation Routine               11300001
DIAGUIM  EQU   5                       UIM Routine                      11350001
DIAGUIMS EQU   6                       UIM Service Routine              11400001
DIAGDLG  EQU   7                       Dialog Routine                   11450001
DIAGMIG  EQU   8                       Migration Routine                11500001
DIAGBAT  EQU   9                       Batch Routine                    11550001
DIAGUTL  EQU   10                      Utility Routine                  11600001
DIAGREPS EQU   11                      Repository Service Routine       11650001
DIAGDYN  EQU   12                      Dynamic Configuration Routine    11700001
DIAGHOM  EQU   13                      HOM Routines                @L8A 11750001
DIAGOTH  EQU   15                      Other Routine not falling into   11800001
*                                      above category                   11850001
.EXIT    ANOP                                                           11900001
         MEXIT                                                          11950001
         MEND                                                        */ 12000001
*@EJECT;                                                                12050001
*%DIAG150: ;                                                            12100001
*%IF DIAGDEF='' %THEN                                                   12150001
*  %GOTO DIAG200;                                                       12200001
*DECLARE                                                                12250001
* 1 DIAG DIAGDEF,                   /* DIAG parameter list           */ 12300001
*  3 DIAGID    CHAR(4),             /* Parameter pist id             */ 12350001
*  3 DIAGNEXT  PTR(31),             /* Address of next entry on the     12400001
*                                      diagnostic stack              */ 12450001
*  3 DIAGMODN  CHAR(8),             /* Load module name              */ 12500001
*  3 DIAGCSCT  CHAR(8),             /* CSECT name                    */ 12550001
*  3 DIAGTOKN  FIXED(15),           /* Token identifier, used to        12600001
*                                      insure stack integrity        */ 12650001
*  3 DIAGFLAG  CHAR(1),             /* Flag byte                     */ 12700001
*    5 DIAGACTV BIT(1),             /* Flag indicating that the entry   12750001
*                                      is on the stack               */ 12800001
*  3 DIAGCAT   FIXED(8),            /* Category of module            */ 12850001
*  3 DIAGVRAP  PTR(31),             /* Address of data to be placed     12900001
*                                      into the VRA                  */ 12950001
*  3 DIAGSTRG,                      /* Odd length character strings  */ 13000001
*      5 DIAGCID   CHAR(5),         /* Component ID                  */ 13050001
*      5 DIAGSC    CHAR(23),        /* Module description            */ 13100001
*      5 DIAGMLVL  CHAR(16),        /* Module level                  */ 13150001
*      5 DIAGFUNC  CHAR(4);         /* Indicates push or pop function   13200001
*                                                                    */ 13250001
*@SPACE (2);                                                            13300001
*/********************************************************************/ 13350001
*/*                                                                  */ 13400001
*/*  Mapping for the VRA data array.                                 */ 13450001
*/*                                                                  */ 13500001
*/********************************************************************/ 13550001
*DCL  1  DIAGVRA(*)  CHAR(8) BDY(WORD) BASED(DIAGVRAP), /* VRADATA.  */ 13600001
*        3 *         CHAR(2),          /* Reserved.                  */ 13650001
*        3 DIAGKEY   CHAR(1),          /* Key field.                 */ 13700001
*        3 DIAGLN    FIXED(8),         /* Length field.              */ 13750001
*        3 DIAGDATA  PTR(31);          /* Address of data.           */ 13800001
*@SPACE (2);                                                            13850001
*/********************************************************************/ 13900001
*/*                                                                  */ 13950001
*/*  The following constants are used in the DIAG structure.         */ 14000001
*/*                                                                  */ 14050001
*/********************************************************************/ 14100001
*@SPACE (1);                                                            14150001
*DECLARE DIAGCBID CHAR(4) CONSTANT('DIAG'), /* Control block ID.     */ 14200001
*        DIAGPUSH CHAR(4) CONSTANT('PUSH'), /* Push function.        */ 14250001
*        DIAGPOP  CHAR(4) CONSTANT('POP '), /* Pop function.         */ 14300001
*        DIAGON   CHAR(4) CONSTANT('ON  '), /* ON stack indicator.   */ 14350001
*        DIAGOFF  CHAR(4) CONSTANT('OFF '), /* OFF stack indicator.  */ 14400001
*        DIAGEND  BIT(64) CONSTANT('FFFFFFFFFFFFFFFF'X);/*              14450001
*                                              End of VRADATA.       */ 14500001
*                                                                       14550001
*%DIAG200: ;                                                            14600001
*%CBDZDIAG:                                                             14650001
*   MACRO  KEYS(MODNAME,CSECT,MODCAT,COMP,DESC,VRADATA,RELATED,REQ);    14700001
*                                                                       14750001
*  DCL  (I,J)    FIXED;            /* Index into strings.            */ 14800001
*  DCL  DIMVRA   CHAR;             /* Number of entries in VRADATA.  */ 14850001
*  DCL  LVL      CHAR;             /* Recursive macro.               */ 14900001
*  DCL  VCAT     CHAR;             /* Category of module.            */ 14950001
*  DCL  IMACRO   CHAR;             /* Macro parameters.              */ 15000001
*  DCL  INDENT   FIXED INTERNAL;   /* Indent value for listing       */ 15050001
*  DCL  IERRMSG  CHAR;             /* Error message.                 */ 15100001
*  DCL  VRADAT   CHAR;             /* VRADATA address.               */ 15150001
*  DCL  STORCLAS CHAR;             /* Storage class.                 */ 15200001
*                                                                       15250001
*/********************************************************************/ 15300001
*/*                                                                  */ 15350001
*/* Validity check macro parameters.                                 */ 15400001
*/*                                                                  */ 15450001
*/********************************************************************/ 15500001
*                                                                       15550001
*  IMACRO=' ?'||MACLABEL||MACNAME||MACLIST||' '||MACKEYS||' ';          15600001
*                                                                       15650001
*  IERRMSG = '';                   /* Initially null error message.  */ 15700001
*  INDENT=MACCOL+2;                /* Indent two columns for format  */ 15750001
*                                                                       15800001
*  IF REQ ~= '' THEN DO;           /* Test if REQ parameter exists   */ 15850001
*     IF REQ(1) ~= 'ASSIGN' THEN DO;  /* Must be REQ=ASSIGN          */ 15900001
*        CMT ='INVALID REQ PARAMETER. ';                                15950001
*        ANS MSG(CMT);             /* Print error message            */ 16000001
*        ANS(COMMENT(CMT)) COL(INDENT);                                 16050001
*        EHARC=RCERR;              /* Set error return code          */ 16100001
*        END;                                                           16150001
*  END;                                                                 16200001
*                                                                       16250001
*  IF MACLABEL='' THEN             /* Verify structure name was         16300001
*                                     specified.                     */ 16350001
*    DO;                                                                16400001
*      IERRMSG = 'MACRO LABEL NOT SPECIFIED.  IT IS REQUIRED';          16450001
*      ANS MSG(IERRMSG);                                                16500001
*      ANS (COMMENT(IERRMSG));                                          16550001
*    END;                                                               16600001
*                                                                       16650001
*  IF NUMBER(MACLIST) > 0 THEN     /* No positional parameters.      */ 16700001
*    DO;                                                                16750001
*      IERRMSG = 'POSITIONAL PARAMETERS ARE NOT ALLOWED.';              16800001
*      ANS MSG(IERRMSG);                                                16850001
*      ANS (COMMENT(IERRMSG));                                          16900001
*    END;                                                               16950001
*                                                                       17000001
*  IF MODNAME = '' THEN          /* Check for required key.        */   17050001
*    DO;                                                                17100001
*      IERRMSG='MODNAME PARAMETER NOT SPECIFIED.  IT IS REQUIRED.';     17150001
*      ANS MSG(IERRMSG);                                                17200001
*      ANS (COMMENT(IERRMSG));                                          17250001
*    END;                                                               17300001
*                                                                       17350001
*  IF CSECT = '' THEN            /* Check for required key.        */   17400001
*    DO;                                                                17450001
*      IERRMSG='CSECT PARAMETER NOT SPECIFIED.  IT IS REQUIRED.';       17500001
*      ANS MSG(IERRMSG);                                                17550001
*      ANS (COMMENT(IERRMSG));                                          17600001
*    END;                                                               17650001
*                                                                       17700001
*  IF COMP  = '' THEN            /* Check for required key.        */   17750001
*    DO;                                                                17800001
*      IERRMSG='COMP PARAMETER NOT SPECIFIED.  IT IS REQUIRED.';        17850001
*      ANS MSG(IERRMSG);                                                17900001
*      ANS (COMMENT(IERRMSG));                                          17950001
*    END;                                                               18000001
*                                                                       18050001
*  VCAT = '0';                     /* Set default MODCAT parameter   */ 18100001
*  IF MODCAT ~= '' THEN DO;        /* Check for key                  */ 18150001
*     IF MODCAT(1) = 'R' | MODCAT(1) = 'REPOSITORY' THEN                18200001
*        VCAT = 'DIAGREP';                                              18250001
*     ELSE IF MODCAT(1) = 'S' | MODCAT(1) = 'SERVICE' THEN              18300001
*        VCAT = 'DIAGSERV';                                             18350001
*     ELSE IF MODCAT(1) = 'C' | MODCAT(1) = 'COMMAND' THEN              18400001
*        VCAT = 'DIAGCMD';                                              18450001
*     ELSE IF MODCAT(1) = 'V' | MODCAT(1) = 'VALIDATION' THEN           18500001
*        VCAT = 'DIAGVAL';                                              18550001
*     ELSE IF MODCAT(1) = 'UIM' THEN                                    18600001
*        VCAT = 'DIAGUIM';                                              18650001
*     ELSE IF MODCAT(1) = 'UIMS' | MODCAT(1) = 'UIMSERVICE' THEN        18700001
*        VCAT = 'DIAGUIMS';                                             18750001
*     ELSE IF MODCAT(1) = 'D' | MODCAT(1) = 'DIALOG' THEN               18800001
*        VCAT = 'DIAGDLG';                                              18850001
*     ELSE IF MODCAT(1) = 'M' | MODCAT(1) = 'MIGRATION' THEN            18900001
*        VCAT = 'DIAGMIG';                                              18950001
*     ELSE IF MODCAT(1) = 'B' | MODCAT(1) = 'BATCH' THEN                19000001
*        VCAT = 'DIAGBAT';                                              19050001
*     ELSE IF MODCAT(1) = 'U' | MODCAT(1) = 'UTILITY' THEN              19100001
*        VCAT = 'DIAGUTL';                                              19150001
*     ELSE IF MODCAT(1) = 'RS' | MODCAT(1) = 'REPSERVICE' THEN          19200001
*        VCAT = 'DIAGREPS';                                             19250001
*     ELSE IF MODCAT(1) = 'DYN' | MODCAT(1) = 'DYNAMIC' THEN            19300001
*        VCAT = 'DIAGDYN';                                              19350001
*     ELSE IF MODCAT(1) = 'HOM' THEN                                    19400001
*        VCAT = 'DIAGHOM';          /*                           @L8A*/ 19450001
*     ELSE IF MODCAT(1) = 'O' | MODCAT(1) = 'OTHER' THEN                19500001
*        VCAT = 'DIAGOTH';                                              19550001
*     ELSE DO;                                                          19600001
*        IERRMSG='MODCAT PARAMETER INVALID.';                           19650001
*        ANS MSG(IERRMSG);                                              19700001
*        ANS (COMMENT(IERRMSG));                                        19750001
*     END;                                                              19800001
*  END;                                                                 19850001
*                                                                       19900001
*  IF DESC  = '' THEN            /* Check for required key.        */   19950001
*    DO;                                                                20000001
*      IERRMSG='DESC PARAMETER NOT SPECIFIED.  IT IS REQUIRED.';        20050001
*      ANS MSG(IERRMSG);                                                20100001
*      ANS (COMMENT(IERRMSG));                                          20150001
*    END;                                                               20200001
*                                                                       20250001
*  IF VRADATA = '' THEN            /* Check for keyword.             */ 20300001
*    DO;                                                                20350001
*      VRADAT='0';                 /* Set default value.             */ 20400001
*    END;                                                               20450001
*   ELSE                                                                20500001
*     DO;                                                               20550001
*      VRADAT='ADDR' || VRADATA;   /* Set specified value.           */ 20600001
*     END;                                                              20650001
*                                                                       20700001
*  IF IERRMSG ~= '' THEN           /* If there were any errors       */ 20750001
*    DO;                                                                20800001
*     ANS(COMMENT(IMACRO));        /* Print out macro invocation.    */ 20850001
*     GOTO EXIT;                   /* Do not generate any code.      */ 20900001
*    END;                                                               20950001
*                                                                       21000001
*  LVL = '?PLSID;';                /* Macro to get compile date.     */ 21050001
*                                                                       21100001
*/********************************************************************/ 21150001
*/*      Define a few constants used to describe the module category */ 21200001
*/********************************************************************/ 21250001
*                                                                       21300001
*     ANS('DECLARE' ||                                                  21350001
*        COMMENT('Module categories ')) COL(MACCOL);                    21400001
*     ANS('  DIAGREP  FIXED(8) CONSTANT(1),' ||                         21450001
*        COMMENT('Repository routine')) COL(INDENT);                    21500001
*     ANS('  DIAGSERV FIXED(8) CONSTANT(2),' ||                         21550001
*        COMMENT('Service routine   ')) COL(INDENT);                    21600001
*     ANS('  DIAGCMD  FIXED(8) CONSTANT(3),' ||                         21650001
*        COMMENT('Command routine   ')) COL(INDENT);                    21700001
*     ANS('  DIAGVAL  FIXED(8) CONSTANT(4),' ||                         21750001
*        COMMENT('Validation routine')) COL(INDENT);                    21800001
*     ANS('  DIAGUIM  FIXED(8) CONSTANT(5),' ||                         21850001
*        COMMENT('UIM routine       ')) COL(INDENT);                    21900001
*     ANS('  DIAGUIMS FIXED(8) CONSTANT(6),' ||                         21950001
*        COMMENT('UIM service routine')) COL(INDENT);                   22000001
*     ANS('  DIAGDLG  FIXED(8) CONSTANT(7),' ||                         22050001
*        COMMENT('Dialog routine    ')) COL(INDENT);                    22100001
*     ANS('  DIAGMIG  FIXED(8) CONSTANT(8),' ||                         22150001
*        COMMENT('Migration routine ')) COL(INDENT);                    22200001
*     ANS('  DIAGBAT  FIXED(8) CONSTANT(9),' ||                         22250001
*        COMMENT('Batch routine     ')) COL(INDENT);                    22300001
*     ANS('  DIAGUTL  FIXED(8) CONSTANT(10),' ||                        22350001
*        COMMENT('Utility routine   ')) COL(INDENT);                    22400001
*     ANS('  DIAGREPS  FIXED(8) CONSTANT(11),' ||                       22450001
*        COMMENT('Repository Service')) COL(INDENT);                    22500001
*     ANS('  DIAGDYN   FIXED(8) CONSTANT(12),' ||                       22550001
*        COMMENT('Dynamic Configuration Routine')) COL(INDENT);         22600001
*     ANS('  DIAGHOM   FIXED(8) CONSTANT(13),' ||                       22650001
*        COMMENT('HOM Routine')) COL(INDENT);        /*          @L8A*/ 22700001
*     ANS('  DIAGOTH  FIXED(8) CONSTANT(15);' ||                        22750001
*        COMMENT('Other routine     ')) COL(INDENT);                    22800001
*                                                                       22850001
*/********************************************************************/ 22900001
*/*      Handle REQ=ASSIGN                                           */ 22950001
*/********************************************************************/ 23000001
*                                                                       23050001
* IF REQ(1)= 'ASSIGN' THEN DO ;    /* REQ=ASSIGN specified ?         */ 23100001
*     ANS('DO; '|| COMMENT(IMACRO)) COL(MACCOL); /* Start code & list   23150001
*                                                macro parameters    */ 23200001
*     ANS('DIAG=''0''B; '||                                             23250001
*        COMMENT(' Clear diagnostic stack structure' )) COL(INDENT);    23300001
*     ANS('DIAGID=DIAGCBID ; '||                                        23350001
*        COMMENT(' Set up parm list identifier ')) COL(INDENT);         23400001
*     ANS('DIAGMODN=' ||MODNAME(1)||'; '||                              23450001
*        COMMENT(' Set up module name')) COL(INDENT);                   23500001
*     ANS('DIAGCSCT=' ||CSECT(1)||'; '||                                23550001
*        COMMENT(' Set up CSECT name')) COL(INDENT);                    23600001
*     ANS('DIAGCAT=' ||VCAT||'; '||                                     23650001
*        COMMENT(' Set up module category')) COL(INDENT);               23700001
*     ANS('DIAGVRAP=' ||VRADAT||'; '||                                  23750001
*        COMMENT(' Set up address of VRA area ')) COL(INDENT);          23800001
*     ANS('DIAGCID=' ||COMP(1)||'; '||                                  23850001
*        COMMENT(' Set up component id')) COL(INDENT);                  23900001
*     ANS('DIAGSC=' ||DESC(1)||'; '||                                   23950001
*        COMMENT(' Set up module description ')) COL(INDENT);           24000001
*     ANS('DIAGMLVL=' ||LVL );                                          24050001
*     ANS ('; ' ||                                                      24100001
*        COMMENT(' Set up compile date ')) COL(INDENT);                 24150001
*                                                                       24200001
*        ANS('END; '||COMMENT(IMACRO)) COL(MACCOL); /* End code & list  24250001
*                                                macro parameters    */ 24300001
*    END;                                                               24350001
*                                                                       24400001
*/********************************************************************/ 24450001
*/*      Define diagnostic stack structure                           */ 24500001
*/********************************************************************/ 24550001
*                                                                       24600001
*  ELSE DO;                                                             24650001
*                                                                       24700001
*     DO I = 1 TO LENGTH(MACLABEL) WHILE (MACLABEL(I:I) ~= ':');        24750001
*     END;                         /* Find the end of the first         24800001
*                                        label.                      */ 24850001
*      I = I - 1;                  /* Do not include the colon.      */ 24900001
*      J = I;                      /* Save the length of the full       24950001
*                                        label.                      */ 25000001
*      IF I > 4 THEN               /* Save length of prefix.         */ 25050001
*         I = 4;                                                        25100001
*                                                                       25150001
*                                                                       25200001
*     ANSWER ('DCL  1 ' || MACLABEL(1:J) || ' BDY(WORD),'               25250001
*             || COMMENT(IMACRO)) SKIP(2); /*Build structure and list   25300001
*                                                              macro */ 25350001
*     ANSWER ('       3 ' || MACLABEL(1:I) || 'ID' ||                   25400001
*             ' CHAR(4)  INIT(''DIAG''),');                             25450001
*     ANSWER ('       3 ' || MACLABEL(1:I) || 'NEXT' ||                 25500001
*             ' PTR(31)  INIT(0),');                                    25550001
*     ANSWER ('       3 ' || MACLABEL(1:I) || 'MODN' ||                 25600001
*             ' CHAR(8)  INIT' || MODNAME || ',');                      25650001
*     ANSWER ('       3 ' || MACLABEL(1:I) || 'CSCT' ||                 25700001
*             ' CHAR(8)  INIT' || CSECT || ',');                        25750001
*     ANSWER ('       3 ' || MACLABEL(1:I) || 'TOKN' ||                 25800001
*             ' FIXED(15) INIT(0),');                                   25850001
*     ANSWER ('       3 ' || MACLABEL(1:I) || 'FLAG' ||                 25900001
*             ' CHAR(1) INIT(''00''X),');                               25950001
*     ANSWER ('       3 ' || MACLABEL(1:I) || 'CAT'  ||                 26000001
*             ' FIXED(8) INIT('||VCAT||'),');                           26050001
*     ANSWER ('       3 ' || MACLABEL(1:I) || 'VRA'  ||                 26100001
*             ' PTR(31)  INIT(' || VRADAT || '),');                     26150001
*     ANSWER ('       3 ' || MACLABEL(1:I) || 'STRG,');                 26200001
*     ANSWER ('       5 ' || MACLABEL(1:I) || 'CID'  ||                 26250001
*             ' CHAR(5) INIT' || COMP || ',');                          26300001
*     ANSWER ('       5 ' || MACLABEL(1:I) || 'SC'   ||                 26350001
*             ' CHAR(23) INIT' || DESC || ',');                         26400001
*     ANSWER ('       5 ' || MACLABEL(1:I) || 'MLVL' ||                 26450001
*             ' CHAR(16) INIT(' || LVL );                               26500001
*     ANSWER ('),');                                                    26550001
*     ANSWER ('       5 ' || MACLABEL(1:I) || 'FUNC' ||                 26600001
*             ' CHAR(4);'                                               26650001
*                    || COMMENT(IMACRO));     /* Build structure and    26700001
*                                                list macro parameters. 26750001
*                                                                    */ 26800001
*  END;                                                                 26850001
*                                                                       26900001
*                                                                       26950001
*EXIT:;                                                                 27000001
*                                                                       27050001
*%END CBDZDIAG;                                                         27100001
*%DEACT DIAGDEF;                                                        27150001
