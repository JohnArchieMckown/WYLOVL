*%GOTO SECTPRO;               /* BEGIN COMMENT UNTIL LABEL SECTPRO
         MACRO
&TAG     RXSECT  &TYPE,                                                X
               &ECTADDR=,                                              X
               &INTOKEN=
.*/ %SECTPRO: ;
*/***PROPRIETARY_STATEMENT***************************************@N1C*/
*/*                                                                  */
*/* Licensed Materials - Property of IBM                             */
*/*                                                                  */
*/* 5645-001                                                         */
*/*                                                                  */
*/* (C) Copyright IBM Corp. 1988, 1997                               */
*/*                                                                  */
*/* US Government Users Restricted Rights - Use, duplication or      */
*/* disclosure restricted by GSA ADP Schedule Contract with          */
*/* IBM Corp.                                                        */
*/*                                                                  */
*/* STATUS = HTE26D2                                                 */
*/*                                                                  */
*/***END_OF_PROPRIETARY_STATEMENT********************************@N1C*/
*%GOTO SECTPLAS;
.*
.*  Verify the function type requested                       @PEI0723
.*
         AIF    ('&TYPE' EQ 'INIT').ECTKEY
         AIF    ('&TYPE' EQ 'SWAP').ECTKEY
         AIF    ('&TYPE' EQ 'QUERY').ECTKEY
.*
.*  No valid function type was coded.                        @PEI0723
.*
         MNOTE  12,'RXSECT ---> No valid function was entered.'
         AGO    .DONE
.*
.*  Perform keyword checking
.*
.ECTKEY  AIF    (K'&ECTADDR NE 0).INTKEY
.*
.*  The ECTADDR keyword was not coded.
.*
.ERROR1  MNOTE  12,'RXSECT ---> The ECTADDR keyword is required.'
         AGO    .DONE
.INTKEY  AIF    (K'&INTOKEN NE 0).CONTINUE
.*
.*  The INTOKEN keyword was not coded.
.*
.ERROR2  MNOTE  12,'RXSECT ---> The INTOKEN keyword is required.'
         AGO    .DONE
.CONTINUE ANOP
.*
.*  Include the section of code corresponding to the function type
.*                                                           @PEI0723
.FUNCTYPE AIF    ('&TYPE' EQ 'INIT').INIT
         AIF    ('&TYPE' EQ 'SWAP').SWAP
         AIF    ('&TYPE' EQ 'QUERY').QUERY
.INIT    ANOP
*
*   Initialize the ECT and ECT extension fields to zeros
*
         L     15,52(,&ECTADDR)  get address of ECT extension  @YA19140
         LTR   15,15             ECT extension addr zero?      @YA19140
         BNZ   ECTXOK&SYSNDX     ECT extension addr non-zero   @YA19140
         LR    1,&ECTADDR        Input to IKJBLD01             @YA19140
         LINK EP=IKJBLD01        LINK to IKJBLD01              @YA19140
ECTXOK&SYSNDX EQU  *                                           @YA19140
         LA    1,&INTOKEN        get address of input token
         L     15,52(,&ECTADDR)  get address of the ECT extension
         L     0,48(,&ECTADDR)   get field from the ECT
         ST    0,0(,1)           return it to the input token
         L     0,36(,15)         get field from the ECT extension
         ST    0,4(,1)           return it to the input token
         L     0,48(,15)         get field from the ECT extension
         ST    0,8(,1)           return it to the input token
         L     0,60(,15)         get field from ECT extension  @PEI0654
         ST    0,12(,1)          return it to the input token  @PEI0654
         L     0,72(,15)         get field from ECT extension  @YA21652
         ST    0,16(,1)          return it to the input token  @YA21652
         L     0,76(,15)         get field from ECT extension  @YA21652
         ST    0,20(,1)          return it to the input token  @YA21652
*                                                              @YA21652
         SR    0,0
         ST    0,36(,15)         initialize ECT extension field
         ST    0,60(,15)         initialize ECT extension field
*                                                              @PEI0654
         ST    0,72(,15)         initialize ECT ext field      @YA21652
         ST    0,76(,15)         initialize ECT ext field      @YA21652
*                                                              @YA21652
         L     0,540(0,0)        get content used to init next field
         ST    0,48(,15)         initialize ECT extension field
*    Load IRXECUSP and branch to it                            @PEI0654
         LOAD  EP=IRXECUSP,ERRET=RXL&SYSNDX Load IRXECUSP      @PEI0654
         LR    1,&ECTADDR        Input to IRXECUSP             @YA42029
         LR    15,0              Obtain the entry address      @PEI0654
         BALR  14,15             Branch to IRXECUSP            @PEI0654
         LTR   15,15             Check the return code         @PEI0654
         BZ    RXDONE&SYSNDX     If zero, return               @PEI0654
         L     15,52(,&ECTADDR)  get address of the ECT extension
*                                                              @PEI0654
         OI    60(15),X'80'      Turn the no load bit on       @PEI0654
         LA    15,20             Indicate severe error         @PEI0654
         B     RXDONE&SYSNDX     Return                        @PEI0654
RXL&SYSNDX   EQU  *              Load error occurred           @PEI0654
         L     15,52(,&ECTADDR)  get address of the ECT extension
*                                                              @PEI0654
         OI    60(15),X'80'      Turn the no load bit on       @PEI0654
         LA    15,8              Indicate a load error         @PEI0654
RXDONE&SYSNDX EQU  *                                           @PEI0654
         AGO    .DONE
.QUERY   ANOP
*
*   Retrieve fields in the ECT and ECT extension
*
         L     15,52(,&ECTADDR)  get address of ECT extension  @YA19140
         LTR   15,15             ECT extension addr zero?      @YA19140
         BNZ   ECTXOK&SYSNDX     ECT extension addr non-zero   @YA19140
         LR    1,&ECTADDR        Input to IKJBLD01             @YA19140
         LINK EP=IKJBLD01        LINK to IKJBLD01              @YA19140
ECTXOK&SYSNDX EQU  *                                           @YA19140
         LA    1,&INTOKEN        get address of the input token
         L     15,52(,&ECTADDR)  get address of the ECT extension
         L     0,48(,&ECTADDR)   get field from the ECT
         ST    0,0(,1)           return it to the input token
         L     0,36(,15)         get field from the ECT extension
         ST    0,4(,1)           return it to the input token
         L     0,48(,15)         get field from the ECT extension
         ST    0,8(,1)           return it to the input token
         L     0,60(,15)         get field from ECT extension  @PEI0654
         ST    0,12(,1)          return it to the input token  @PEI0654
         L     0,72(,15)         get field from ECT extension  @YA21652
         ST    0,16(,1)          return it to the input token  @YA21652
         L     0,76(,15)         get field from ECT extension  @YA21652
         ST    0,20(,1)          return it to the input token  @YA21652
         AGO    .DONE
.SWAP    ANOP
*
*   Swap fields in the ECT and ECT extension with the input token
*
         L     15,52(,&ECTADDR)  get address of ECT extension  @YA19140
         LTR   15,15             ECT extension addr zero?      @YA19140
         BNZ   ECTXOK&SYSNDX     ECT extension addr non-zero   @YA19140
         LR    1,&ECTADDR        Input to IKJBLD01             @YA19140
         LINK EP=IKJBLD01        LINK to IKJBLD01              @YA19140
ECTXOK&SYSNDX EQU  *                                           @YA19140
         STM   2,3,28(13)        save registers
         LA    1,&INTOKEN        get address of the input token
         LR    3,&ECTADDR        get address of the ECT
         L     0,48(,3)          save ECT field
         L     15,0(,1)          get first field from input token
         ST    15,48(,3)         store it in the ECT
         ST    0,0(,1)           store saved field in the token
*                                                              @PEI0723
         L     15,52(,3)         get address of the ECT extension
         L     0,36(,15)         save ECT extension field
         L     2,4(,1)           get second field from input token
         ST    2,36(,15)         store it in the ECT extension
         ST    0,4(,1)           store saved field in the token
*                                                              @PEI0723
         L     0,48(,15)         save ECT extension field
         L     2,8(,1)           get third field from input token
         ST    2,48(,15)         store it in the ECT extension
         ST    0,8(,1)           store saved field in the token
*                                                              @PEI0723
         L     0,60(,15)         save ECT extension field      @PEI0654
         L     2,12(,1)          get fourth field from input token
*                                                              @PEI0654
         ST    2,60(,15)         store it in the ECT extension
*                                                              @PEI0654
         ST    0,12(,1)          store saved field in the token
*                                                              @PEI0654
         L     0,72(,15)         save ECT extension field      @YA21652
         L     2,16(,1)          get 5 th field from token     @YA21652
         ST    2,72(,15)         store it in the ECT extension @YA21652
         ST    0,16(,1)          store saved field in token    @YA21652
*                                                              @YA21652
         L     0,76(,15)         save ECT extension field      @YA21652
         L     2,20(,1)          get 6 th field from token     @YA21652
         ST    2,76(,15)         store it in the ECT extension @YA21652
         ST    0,20(,1)          store saved field in token    @YA21652
*                                                              @YA21652
         LM    2,3,28(13)        restore registers
.DONE    ANOP
         MEND
*/*                                                                  */
*/************************ PL/AS RXSECT MACRO ************************/
*/*                                                                  */
*%SECTPLAS: ;
*/********************************************************************/
*/*                                                                  */
*/* MACRO NAME = RXSECT                                              */
*/*                                                                  */
*/* DESCRIPTIVE NAME                                                 */
*/*        REXX environment control macro                    @PEI0979*/
*/*                                                                  */
*/*                                                                  */
*/* FUNCTION =                                                       */
*/*       This is an executable macro which is used at ISPF          */
*/*       initialization, termination, and at logical screen swap    */
*/*       time to ensure that the correct REXX environment is        */
*/*       active.                                            @PEI0979*/
*/*                                                                  */
*/* INVOCATION REQUIREMENTS =                                        */
*/*       Register 13 must point to a savearea (ASSEMBLER only)      */
*/*       The input token must be 40 bytes of storage.       @YA21652*/
*/*                                                                  */
*/* INVOCATION FORMAT =                                              */
*/*        PL/AS =                                                   */
*/*             ?RXSECT    (TYPE)                                    */
*/*                        ECTADDR(address of the ECT)               */
*/*                        INTOKEN(token name)                       */
*/*                                                                  */
*/*        ASSEMBLER =                                               */
*/*             RXSECT     TYPE,                                     */
*/*                        ECTADDR=                                  */
*/*                        INTOKEN=                                  */
*/*                                                                  */
*/*        Where:                                                    */
*/*                                                                  */
*/*        TYPE (DECL,INIT,SWAP or QUERY in PL/AS)                   */
*/*             (INIT,SWAP or QUERY in ASSEMBLER)                    */
*/*             Specifies the type of request to be performed.       */
*/*             Requests types are mutually exclusive and only       */
*/*             the first type specified will be processed.          */
*/*             (REQUIRED)                                           */
*/*                                                                  */
*/*             DECL (PL/AS only)                                    */
*/*                 Specifies request to create declares for         */
*/*                 variables used in this macro.                    */
*/*                 (This request should only be invoked once.)      */
*/*                                                                  */
*/*             INIT (PL/AS and ASSEMBLER)                           */
*/*                 Specifies request to initialize fields in the    */
*/*                 ECT and ECT extension and return the previous    */
*/*                 contents of those fields in the token provided.  */
*/*                 After invocation, register 15 contains   @PEI0654*/
*/*                 one of the following return codes:       @PEI0654*/
*/*                  0 - REXX environment was established.   @PEI0654*/
*/*                  8 - IRXECUSP could not be loaded, no    @PEI0654*/
*/*                      REXX environment was established.   @PEI0654*/
*/*                 20 - An error occurred while attempting  @PEI0654*/
*/*                      to establish the REXX environment.  @PEI0654*/
*/*                      No environment was established.     @PEI0654*/
*/*                                                          @PEI0654*/
*/*                 If the return code is not zero, the      @PEI0654*/
*/*                 system EXEC ddname will not be searched  @PEI0654*/
*/*                 for EXECs.                               @PEI0654*/
*/*                                                                  */
*/*             SWAP (PL/AS and ASSEMBLER)                           */
*/*                 Specifies request to exchange contents of the    */
*/*                 input token and fields in the ECT and ECT        */
*/*                 extension.                                       */
*/*                                                                  */
*/*             QUERY (PL/AS and ASSEMBLER)                          */
*/*                  Specifies request to retrieve the current       */
*/*                  contents from the ECT and ECT extension to      */
*/*                  the token provided.                             */
*/*                                                                  */
*/*        ECTADDR (PL/AS)                                           */
*/*              Specifies the name of a fullword that contains      */
*/*              the address of the ECT.                             */
*/*              (REQUIRED execept for DECL invocation)              */
*/*                                                                  */
*/*        ECTADDR (ASSEMBLER)                                       */
*/*              Specifies the register containing the address of    */
*/*              the ECT.                                            */
*/*              (REQUIRED)                                          */
*/*                                                                  */
*/*        INTOKEN (PL/AS and ASSEMBLER)                             */
*/*              Specifies the name of a 40 byte token which @YA21652*/
*/*              will contain information to be stored into  @YA21652*/
*/*              or retrieved from the ECT and the ECT       @YA21652*/
*/*              extension.  (REQUIRED)                      @YA21652*/
*/*                                                                  */
*/* LANGUAGE =                                                       */
*/*        PL/AS and ASSEMBLER macro language                        */
*/*                                                                  */
*/* INPUT =                                                          */
*/*        See INVOCATION FORMAT                                     */
*/*                                                                  */
*/* OUTPUT = DECL, INIT, SWAP, QUERY - PL/AS or ASSEMBLER code       */
*/*                                                                  */
*/* RETURN CODES =                                                   */
*/*        0 - Macro processing successful                           */
*/*       12 - Macro processing unsuccessful                         */
*/*                                                                  */
*/* CHANGE ACTIVITY =                                                */
*/*          New macro created for TSO/E Version 2.1.0       @E21D2E4*/
*/*          PEI0309 - Update macro to be bilingual.         @PEI0309*/
*/*          PEI0654 - Swap one more field of ECT extension. @PEI0654*/
*/*          PEI0723 - In the assembler section, verify the function */
*/*                    type first.  Move assembler code to standard  */
*/*                    columns.                              @PEI0723*/
*/*          PEI0938 - Do not initialize ECTENVBK field to   @PEI0938*/
*/*                    zero.                                 @PEI0938*/
*/*          PEI0979 - Updated prolog.                       @PEI0979*/
*/*          OY19140 - If an ECT Extension does not          @YA19140*/
*/*                    exist, invoke IKJBLD01 to build one.  @YA19140*/
*/*          OY21652 - Increase token from 4 fullwords to    @YA21652*/
*/*                    10 fullwords.  2 more fullwords are   @YA21652*/
*/*                    in use:  (5) Entry point address of   @YA21652*/
*/*                    the TSO/E attention exit (6) The      @YA21652*/
*/*                    parameter (USADDR) passed to this     @YA21652*/
*/*                    exit.  The attention exit is given    @YA21652*/
*/*                    control when attention is processed   @YA21652*/
*/*                    under ISPF non-test mode.             @YA21652*/
*/*          OY42029 - Pass the ECT address to IRXECUSP.     @YA42029*/
*/*                                                                  */
*/* FLAG REASON   RELEASE DATE     ORIGIN                        @L1A*/
*/* ---- ------   ------- -------- ------                        @L1A*/
*/* $L1= QUALITY  HTE26D2 19961004 VOHS: Change PL/X to accept names */
*/*                                      of input and output vars.   */
*/*                                      This is not necessary in BAL*/
*/*                                      because no vars are used -- */
*/*                                      only the token.         @L1A*/
*/* $N1= COPYRITE HTE26D2 19970218 VOHS: Insert/Update Copyright @N1A*/
*/*                                                                  */
*/********************************************************************/
*%RXSECT:
*   MACRO
*       KEYS(ECTADDR,
*       RXIN1(*),                    /* List of possible         @L1A*/
*       RXIN2(*),                    /* variables for            @L1A*/
*       RXIN3(*),                    /* input and                @L1A*/
*       RXIN4(*),                    /* output so that           @L1A*/
*       RXIN5(*),                    /* user-specified           @L1A*/
*       RXIN6(*),                    /* variables may            @L1A*/
*       RXIN7(*),                    /* be used for the          @L1A*/
*       RXIN8(*),                    /* input and output         @L1A*/
*       RXIN9(*),                    /* of values                @L1A*/
*       RXIN10(*),                   /*                          @L1A*/
*       RXSAVE1(*),                  /* List of possible         @L1A*/
*       RXSAVE2(*),                  /* variables for            @L1A*/
*       RXSAVE3(*),                  /* input and                @L1A*/
*       RXSAVE4(*),                  /* output so that           @L1A*/
*       RXSAVE5(*),                  /* user-specified           @L1A*/
*       RXSAVE6(*),                  /* variables may            @L1A*/
*       RXSAVE7(*),                  /* be used for the          @L1A*/
*       RXSAVE8(*),                  /* saving of values         @L1A*/
*       RXSAVE9(*),                  /*                          @L1A*/
*       RXSAVE10(*),                 /*                          @L1A*/
*       RXECTXPR(*),                 /* ECT Ext. Ptr. Alt. Name  @L1A*/
*       INTOKEN);
*/*                                                                  */
* DCL RETCODE   FIXED;
* DCL ERRORMSG  CHAR;
* DCL (RXI1,RXI2,RXI3,RXI4,RXI5,RXI6,RXI7,RXI8,RXI9) CHAR;     /*@L1C*/
* DCL (RXS1,RXS2,RXS3,RXS4,RXS5,RXS6,RXS7,RXS8,RXS9) CHAR;     /*@L1C*/
* DCL (RXI10,RXS10,RXE                             ) CHAR;     /*@L1C*/
*/*                                                                  */
* IF RXIN1(1:1) = '('                                          /*@L1A*/
*    THEN RXI1  = RXIN1(1);                                    /*@L1A*/
*    ELSE RXI1  = RXIN1;                                       /*@L1A*/
* IF RXIN2(1:1) = '('                                          /*@L1A*/
*    THEN RXI2  = RXIN2(1);                                    /*@L1A*/
*    ELSE RXI2  = RXIN2;                                       /*@L1A*/
* IF RXIN3(1:1) = '('                                          /*@L1A*/
*    THEN RXI3  = RXIN3(1);                                    /*@L1A*/
*    ELSE RXI3  = RXIN3;                                       /*@L1A*/
* IF RXIN4(1:1) = '('                                          /*@L1A*/
*    THEN RXI4  = RXIN4(1);                                    /*@L1A*/
*    ELSE RXI4  = RXIN4;                                       /*@L1A*/
* IF RXIN5(1:1) = '('                                          /*@L1A*/
*    THEN RXI5  = RXIN5(1);                                    /*@L1A*/
*    ELSE RXI5  = RXIN5;                                       /*@L1A*/
* IF RXIN6(1:1) = '('                                          /*@L1A*/
*    THEN RXI6  = RXIN6(1);                                    /*@L1A*/
*    ELSE RXI6  = RXIN6;                                       /*@L1A*/
* IF RXIN7(1:1) = '('                                          /*@L1A*/
*    THEN RXI7  = RXIN7(1);                                    /*@L1A*/
*    ELSE RXI7  = RXIN7;                                       /*@L1A*/
* IF RXIN8(1:1) = '('                                          /*@L1A*/
*    THEN RXI8  = RXIN8(1);                                    /*@L1A*/
*    ELSE RXI8  = RXIN8;                                       /*@L1A*/
* IF RXIN9(1:1) = '('                                          /*@L1A*/
*    THEN RXI9  = RXIN9(1);                                    /*@L1A*/
*    ELSE RXI9  = RXIN9;                                       /*@L1A*/
* IF RXIN10(1:1) = '('                                         /*@L1A*/
*    THEN RXI10 = RXIN10(1);                                   /*@L1A*/
*    ELSE RXI10 = RXIN10;                                      /*@L1A*/
* IF RXSAVE1(1:1) = '('                                        /*@L1A*/
*    THEN RXS1  = RXSAVE1(1);                                  /*@L1A*/
*    ELSE RXS1  = RXSAVE1;                                     /*@L1A*/
* IF RXSAVE2(1:1) = '('                                        /*@L1A*/
*    THEN RXS2  = RXSAVE2(1);                                  /*@L1A*/
*    ELSE RXS2  = RXSAVE2;                                     /*@L1A*/
* IF RXSAVE3(1:1) = '('                                        /*@L1A*/
*    THEN RXS3  = RXSAVE3(1);                                  /*@L1A*/
*    ELSE RXS3  = RXSAVE3;                                     /*@L1A*/
* IF RXSAVE4(1:1) = '('                                        /*@L1A*/
*    THEN RXS4  = RXSAVE4(1);                                  /*@L1A*/
*    ELSE RXS4  = RXSAVE4;                                     /*@L1A*/
* IF RXSAVE5(1:1) = '('                                        /*@L1A*/
*    THEN RXS5  = RXSAVE5(1);                                  /*@L1A*/
*    ELSE RXS5  = RXSAVE5;                                     /*@L1A*/
* IF RXSAVE6(1:1) = '('                                        /*@L1A*/
*    THEN RXS6  = RXSAVE6(1);                                  /*@L1A*/
*    ELSE RXS6  = RXSAVE6;                                     /*@L1A*/
* IF RXSAVE7(1:1) = '('                                        /*@L1A*/
*    THEN RXS7  = RXSAVE7(1);                                  /*@L1A*/
*    ELSE RXS7  = RXSAVE7;                                     /*@L1A*/
* IF RXSAVE8(1:1) = '('                                        /*@L1A*/
*    THEN RXS8  = RXSAVE8(1);                                  /*@L1A*/
*    ELSE RXS8  = RXSAVE8;                                     /*@L1A*/
* IF RXSAVE9(1:1) = '('                                        /*@L1A*/
*    THEN RXS9  = RXSAVE9(1);                                  /*@L1A*/
*    ELSE RXS9  = RXSAVE9;                                     /*@L1A*/
* IF RXSAVE10(1:1) = '('                                       /*@L1A*/
*    THEN RXS10 = RXSAVE10(1);                                 /*@L1A*/
*    ELSE RXS10 = RXSAVE10;                                    /*@L1A*/
* IF RXECTXPR(1:1) = '('                                       /*@L1A*/
*    THEN RXE   = RXECTXPR(1);                                 /*@L1A*/
*    ELSE RXE   = RXECTXPR;                                    /*@L1A*/
* RETCODE = 0;
* ANS(' @SPACE;') NORESCAN COL(MACCOL);
* ANS(' /* --> ?RXSECT '||MACLIST||' '||MACKEYS||' */')
*    NORESCAN COL(MACCOL);          /* Echo the command              */
* ERRORMSG = '';
* IF  LENGTH(ECTADDR) = 0 & MACLIST(1) ~='DECL' THEN /* ECTADDR
*                                              keyword not specified */
*    ERRORMSG = 'The ECTADDR keyword is required.';
* ELSE
* IF  LENGTH(INTOKEN) = 0  THEN     /* INTOKEN keyword not specified */
*    ERRORMSG = 'The INTOKEN keyword is required.';
* IF LENGTH(ERRORMSG) ~= 0 THEN     /* There is an error             */
* DO;
*   ANS MSG('RXSECT --->  ' || ERRORMSG);
*   RETCODE = 12;
* END;
* ELSE
* DO;
*   IF MACLIST(1) = 'DECL' THEN       /* DECL keyword specified  */
*     DO;
*       ANS(' DCL ('||RXS1||','||RXS2||','||RXS3||','||RXS4||
*          ') CHAR(4);'||
*          COMMENT('Save area used in swapping @PEI0654'))
*          COL(MACCOL);
*                                                              /*@L1C*/
*       ANS(' DCL ('||RXS5||','||RXS6||','||RXS7||','||RXS8||
*          ') CHAR(4);'||
*          COMMENT('4 more save areas for swapping @YA21652'))
*          COL(MACCOL);
*                                                              /*@L1C*/
*       ANS(' DCL ('||RXS9||','||RXS10||') CHAR(4);'||
*          COMMENT('2 more save areas for swapping @YA21652'))
*          COL(MACCOL);
*                                                              /*@L1C*/
*       ANS(' DCL 1 RXINTOKN BASED(ADDR('||INTOKEN(1)||')),'||
*           COMMENT('Structure mapping the input token')) COL(MACCOL);
*       ANS(' 2 '||RXI1||'     CHAR(4),') COL(MACCOL+7);       /*@L1C*/
*       ANS(' 2 '||RXI2||'     CHAR(4),') COL(MACCOL+7);       /*@L1C*/
*       ANS(' 2 '||RXI3||'     CHAR(4),') COL(MACCOL+7);       /*@L1C*/
*       ANS(' 2 '||RXI4||'     CHAR(4),') COL(MACCOL+7);       /*@L1C*/
*       ANS(' 2 '||RXI5||'     CHAR(4),') COL(MACCOL+7);       /*@L1C*/
*       ANS(' 2 '||RXI6||'     CHAR(4),') COL(MACCOL+7);       /*@L1C*/
*       ANS(' 2 '||RXI7||'     CHAR(4),') COL(MACCOL+7);       /*@L1C*/
*       ANS(' 2 '||RXI8||'     CHAR(4),') COL(MACCOL+7);       /*@L1C*/
*       ANS(' 2 '||RXI9||'     CHAR(4),') COL(MACCOL+7);       /*@L1C*/
*       ANS(' 2 '||RXI10||'     CHAR(4);'||
*          COMMENT('@YA21652')) COL(MACCOL+7);                 /*@L1C*/
*       ANS(' DCL RXFIELD    PTR(31) BASED;'||
*            COMMENT('Field to be located')) COL(MACCOL);
*       ANS(' DCL RXBITFLD   BIT(8) BASED;'||
*            COMMENT('Bit field to be located @PEI0654')) COL(MACCOL);
*                                                          /*@PEI0654*/
*       ANS(' DCL '||RXE||'   PTR(31);'||
*            COMMENT('ECT extension address')) COL(MACCOL);    /*@L1C*/
*       ANS(' DCL RXPTR      PTR(31) CONSTANT(540);'||
*            COMMENT('ECT extension address')) COL(MACCOL);
*       ANS(' DCL CUSPNAME CHAR(8) CONSTANT(''IRXECUSP'');'||
*          COMMENT('used to create control blocks for REXX  @PEI0654'))
*                  COL(MACCOL);                            /*@PEI0654*/
*       ANS(' DCL IRXECUSP ENTRY'||
*           ' BASED(CUSPADDR) VALUERANGE(*);'||
*            COMMENT('Used to call IRXECUSP    @PEI0654'))
*                  COL(MACCOL);                            /*@PEI0654*/
*       ANS(' DCL CUSPADDR PTR(31);'||
*            COMMENT('IRXECUSP entry address from the LOAD  @PEI0654'))
*                  COL(MACCOL);                            /*@PEI0654*/
*       ANS(' DCL LOADOK BIT(1);'||
*            COMMENT('Check for load failure                @PEI0654'))
*            COL(MACCOL);                                  /*@PEI0654*/
*       ANS(' DCL RXBLD01I FIXED(31) REG(1);'||
*            COMMENT('IKJBLD01 input register         @YA19140'))
*            COL(MACCOL);                                  /*@YA19140*/
*       ANS(' DCL RXECUSPI FIXED(31) REG(1);'||
*            COMMENT('IRXECUSP input register         @YA42029'))
*            COL(MACCOL);                                  /*@YA42029*/
*       ANS(' DCL RXSECTRC FIXED(31) REG(15);'||
*            COMMENT('Return code register            @PEI0654'))
*            COL(MACCOL);                                  /*@PEI0654*/
*       ANS(' DCL CUSPFAIL  FIXED(31) CONSTANT(20);'||
*            COMMENT('Return code for IRXECUSP failure      @PEI0654'))
*            COL(MACCOL);                                  /*@PEI0654*/
*       ANS(' DCL LOADFAIL FIXED(31) CONSTANT(8);'||
*            COMMENT('Return code for a load failure        @PEI0654'))
*            COL(MACCOL);                                  /*@PEI0654*/
*       ANS(' DCL CUSPOK FIXED(31) CONSTANT(0);'||
*   COMMENT('Return code from IRXECUSP sent back to invoker @PEI0654'))
*            COL(MACCOL);                                  /*@PEI0654*/
*     END;                          /* End DECL processing           */
*   ELSE                            /* Otherwise, process request    */
*   IF MACLIST(1) = 'INIT' THEN     /* INIT specified                */
*     DO;
*        ANS(' DO; /* Initialize ECT fields with zeros and return'||
*               ' the previous contents of those fields in the'||
*               ' token provided */') COL(MACCOL);
*        ANS(' '||RXE||'  = ('||ECTADDR(1)||'+52) -> RXFIELD;'||
*             COMMENT('Get address of the Ect extension'))
*             COL(MACCOL+3);                                   /*@L1C*/
*        ANS(' IF '||RXE||' = 0 THEN DO;'||
*        COMMENT('If ECT Extension address is zero, then    @YA19140'))
*                   COL(MACCOL+3);                             /*@L1C*/
*        ANS(' RFY RXBLD01I RSTD;' ||
*        COMMENT('Restrict the register  @YA19140'))
*                   COL(MACCOL+6);                        /*@YA19140*/
*        ANS(' RXBLD01I = '||ECTADDR(1)||';'||
*            COMMENT('Set the input parm   @YA19140'))
*                   COL(MACCOL+6);                        /*@YA19140*/
*        ANS(' GENERATE (LINK EP=IKJBLD01);' ||
*            COMMENT('Invoke IKJBLD01      @YA19140'))
*                   COL(MACCOL+6);                        /*@YA19140*/
*        ANS(' RFY RXBLD01I UNRSTD;' ||
*        COMMENT('Unrestrict the register  @YA19140'))
*                   COL(MACCOL+6);                        /*@YA19140*/
*        ANS(' '||RXE||'  = ('||ECTADDR(1)||'+52) -> RXFIELD;'||
*             COMMENT('refresh ECT extension address  @YA19140'))
*                   COL(MACCOL+6);                             /*@L1C*/
*        ANS(' END;'||
*          COMMENT('ECT Extension addr is now non-zero      @YA19140'))
*                   COL(MACCOL+3);                        /*@YA19140*/
*        ANS(' '||RXI1||' = ('||ECTADDR(1)||'+48) -> RXFIELD;'||
*             COMMENT('Return current ECT field to input token'))
*             COL(MACCOL+3);                                   /*@L1C*/
*        ANS(' '||RXI2||' = ('||RXE||'+36) -> RXFIELD;'||
*         COMMENT('Return current ECT extension field to input token'))
*             COL(MACCOL+3);                                   /*@L1C*/
*        ANS(' '||RXI3||' = ('||RXE||'+48) -> RXFIELD;'||
*         COMMENT('Return current ECT extension field to input token'))
*             COL(MACCOL+3);                                   /*@L1C*/
*        ANS(' '||RXI4||' = ('||RXE||'+60) ->  RXFIELD;'||
* COMMENT('Return current ECT extension field to input token @PEI0654'))
*             COL(MACCOL+3);
*                                                              /*@L1C*/
*        ANS(' '||RXI5||' = ('||RXE||'+72) ->  RXFIELD;'||
* COMMENT('Return current ECT extension field to input token @YA21652'))
*             COL(MACCOL+3);
*                                                              /*@L1C*/
*        ANS(' '||RXI6||' = ('||RXE||'+76) ->  RXFIELD;'||
* COMMENT('Return current ECT extension field to input token @YA21652'))
*             COL(MACCOL+3);
*                                                              /*@L1C*/
*        ANS(' ('||RXE||'+36) -> RXFIELD = 0;'||
*             COMMENT('Initialize ECT extension field to zero'))
*             COL(MACCOL+3);                                   /*@L1C*/
*        ANS(' ('||RXE||'+48) -> RXFIELD = RXPTR -> RXFIELD;'||
*             COMMENT('Initialize ECT extension field'))
*             COL(MACCOL+3);                                   /*@L1C*/
*        ANS(' ('||RXE||'+60) -> RXFIELD = 0;'||
*           COMMENT('Initialize ECT extension field to zero @PEI0654'))
*             COL(MACCOL+3);                                   /*@L1C*/
*        ANS(' ('||RXE||'+72) -> RXFIELD = 0;'||
*           COMMENT('Initialize ECT extension field to zero @YA21652'))
*             COL(MACCOL+3);                                   /*@L1C*/
*        ANS(' ('||RXE||'+76) -> RXFIELD = 0;'||
*           COMMENT('Initialize ECT extension field to zero @YA21652'))
*             COL(MACCOL+3);                                   /*@L1C*/
*        ANS(' LOADOK = ''0''B;'||
*             COMMENT('Initialize the load indicator  @PEI0654'))
*             COL(MACCOL+3);                              /*@PEI0654*/
*        ANS(' ? LOAD EP(CUSPNAME)' ||
*            ' LOADPT(CUSPADDR)'||
*            ' ERRET(LOADERR);' ||
*            COMMENT('@PEI0654')) COL(MACCOL+3);          /*@PEI0654*/
*        ANS(' LOADOK = ''1''B;'||
*          COMMENT('Indicate that the load was successful  @PEI0654'))
*             COL(MACCOL+3);                              /*@PEI0654*/
*        ANS(' LOADERR:'||
*        COMMENT('If the load failed, control returns here  @PEI0654'))
*                   COL(MACCOL+3);                        /*@PEI0654*/
*        ANS(' RFY RXSECTRC RSTD;' ||
*        COMMENT('Restrict the register  @PEI0654'))
*                   COL(MACCOL+3);                        /*@PEI0654*/
*        ANS(' IF LOADOK = ''0''B THEN DO;'||
*            COMMENT('If the load failed  @PEI0654'))
*                   COL(MACCOL+3);                        /*@PEI0654*/
*        ANS(' ('||RXE||'+60) -> RXBITFLD = ''80''X;'||
*           COMMENT('Turn on the NOLOAD bit     @PEI0654'))
*             COL(MACCOL+6);                                   /*@L1C*/
*        ANS(' RXSECTRC = LOADFAIL;'||
*            COMMENT('Set the return code  @PEI0654'))
*                   COL(MACCOL+6);                        /*@PEI0654*/
*        ANS(' END;'||
*            COMMENT('@PEI0654'))
*                   COL(MACCOL+3);                        /*@PEI0654*/
*        ANS(' ELSE DO;'||
*            COMMENT('Otherwise, the load was successful @PEI0654'))
*                   COL(MACCOL+3);                        /*@PEI0654*/
*        ANS(' RFY RXECUSPI RSTD;' ||
*        COMMENT('Restrict the register  @YA42029'))
*                   COL(MACCOL+6);                        /*@YA42029*/
*        ANS(' RXECUSPI = '||ECTADDR(1)||';'||
*            COMMENT('Set the input parm   @YA42029'))
*                   COL(MACCOL+6);                        /*@YA42029*/
*        ANS(' CALL IRXECUSP;'||
*            COMMENT('Invoke IRXECUSP         @YA42029'))
*                   COL(MACCOL+6);                        /*@YA42029*/
*        ANS(' RFY RXECUSPI UNRSTD;' ||
*        COMMENT('Unrestrict the register  @YA42029'))
*                   COL(MACCOL+6);                        /*@YA42029*/
*        ANS(' IF RXSECTRC = CUSPOK THEN;'||
*        COMMENT('If IRXECUSP was successful, return a zero @PEI0654'))
*                   COL(MACCOL+6);                        /*@PEI0654*/
*        ANS(' ELSE DO;'||
*          COMMENT('Otherwise, IRXECUSP was unsuccessful @PEI0654'))
*                   COL(MACCOL+3);                        /*@PEI0654*/
*        ANS(' ('||RXE||'+60) -> RXBITFLD = ''80''X;'||
*           COMMENT('Turn on the NOLOAD bit     @PEI0654'))
*             COL(MACCOL+6);                                   /*@L1C*/
*        ANS(' RXSECTRC = CUSPFAIL;'||
*     COMMENT('Indicate a severe error occurred  @PEI0654'))
*                   COL(MACCOL+6);                        /*@PEI0654*/
*        ANS(' END;'||
*            COMMENT(' @PEI0654'))
*                   COL(MACCOL+6);                        /*@PEI0654*/
*        ANS(' END;'||
*            COMMENT(' @PEI0654'))
*                   COL(MACCOL+3);                        /*@PEI0654*/
*        ANS(' RFY RXSECTRC UNRSTD;' ||
*        COMMENT('Unrestrict the register  @PEI0654'))
*                   COL(MACCOL+3);                        /*@PEI0654*/
*        ANS(' END; /* --> ?RXSECT '||MACLIST||' '||MACKEYS||' */')
*            NORESCAN COL(MACCOL);     /* Echo the command           */
*      END;                            /* End INIT processing        */
*   ELSE
*   IF MACLIST(1) = 'SWAP' THEN         /* SWAP specified            */
*      DO;
*         ANS(' DO; /* Place the input token into the ECT and ECT'||
*             ' extension fields and return the token that'||
*             ' was replaced  */') COL(MACCOL);
*         ANS(' '||RXE||' = ('||ECTADDR(1)||'+52) -> RXFIELD;'||
*              COMMENT('Get address of the Ect extension'))
*              COL(MACCOL+3);
*         ANS(' IF '||RXE||' = 0 THEN DO;'||
*         COMMENT('If ECT Extension address is zero, then    @YA19140'))
*                   COL(MACCOL+3);                             /*@L1C*/
*         ANS(' RFY RXBLD01I RSTD;' ||
*         COMMENT('Restrict the register  @YA19140'))
*                   COL(MACCOL+6);                        /*@YA19140*/
*         ANS(' RXBLD01I = '||ECTADDR(1)||';'||
*            COMMENT('Set the input parm   @YA19140'))
*                   COL(MACCOL+6);                        /*@YA19140*/
*         ANS(' GENERATE (LINK EP=IKJBLD01);' ||
*            COMMENT('Invoke IKJBLD01      @YA19140'))
*                   COL(MACCOL+6);                        /*@YA19140*/
*         ANS(' RFY RXBLD01I UNRSTD;' ||
*         COMMENT('Unrestrict the register  @YA19140'))
*                   COL(MACCOL+6);                        /*@YA19140*/
*         ANS(' '||RXE||' = ('||ECTADDR(1)||'+52) -> RXFIELD;'||
*             COMMENT('refresh ECT extension address  @YA19140'))
*                   COL(MACCOL+6);                             /*@L1C*/
*         ANS(' END;'||
*          COMMENT('ECT Extension addr is now non-zero      @YA19140'))
*                   COL(MACCOL+3);                        /*@YA19140*/
*         ANS(' '||RXS1||' = ('||ECTADDR(1)||'+48) -> RXFIELD;'||
*              COMMENT('Save the ECT field'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXS2||' = ('||RXE||'+36) -> RXFIELD;'||
*              COMMENT('Save the ECT extension field'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXS3||' = ('||RXE||'+48) -> RXFIELD;'||
*              COMMENT('Save the ECT extension field'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXS4||' = ('||RXE||'+60) -> RXFIELD;'||
*              COMMENT('Save the ECT extension field @PEI0654'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXS5||' = ('||RXE||'+72) -> RXFIELD;'||
*              COMMENT('Save the ECT extension field @YA21652'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXS6||' = ('||RXE||'+76) -> RXFIELD;'||
*              COMMENT('Save the ECT extension field @YA21652'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' ('||ECTADDR(1)||'+48) -> RXFIELD = '||RXI1||';'||
*              COMMENT('Replace ECT field with input token'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' ('||RXE||'+36) -> RXFIELD = '||RXI2||';'||
*              COMMENT('Replace ECT extension field with input token'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' ('||RXE||'+48) -> RXFIELD = '||RXI3||';'||
*              COMMENT('Replace ECT extension field with input token'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' ('||RXE||'+60) -> RXFIELD = '||RXI4||';'||
*     COMMENT('Replace ECT extension field with input token @PEI0654'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' ('||RXE||'+72) -> RXFIELD = '||RXI5||';'||
*     COMMENT('Replace ECT extension field with input token @YA21652'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' ('||RXE||'+76) -> RXFIELD = '||RXI6||';'||
*     COMMENT('Replace ECT extension field with input token @YA21652'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXI1||' = '||RXS1||';'||
*             COMMENT('Return the replaced ECT field to input token'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXI2||'   = '||RXS2||';'||
*              COMMENT('Return the replaced ECT extension field'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXI3||'   = '||RXS3||';'||
*              COMMENT('Return the replaced ECT extension field'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXI4||'   = '||RXS4||';'||
*          COMMENT('Return the replaced ECT extension field @PEI0654'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXI5||'   = '||RXS5||';'||
*          COMMENT('Return the replaced ECT extension field @YA21652'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXI6||'   = '||RXS6||';'||
*          COMMENT('Return the replaced ECT extension field @YA21652'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' END; /* --> ?RXSECT '||MACLIST||' '||MACKEYS||' */')
*            NORESCAN COL(MACCOL);     /* Echo the command           */
*       END;                           /* End SWAP  processing       */
*   ELSE
*   IF MACLIST(1) = 'QUERY' THEN  /* QUERY request specified */
*      DO;
*         ANS(' DO; /* Extract the contents of the current ECT'||
*             ' and ECT extension and return it in the'||
*             ' token provided */') COL(MACCOL);
*         ANS(' '||RXE||' = ('||ECTADDR(1)||'+52) ->'||
*             ' RXFIELD;'||
*             COMMENT('Get address of the ECT extension'))
*             COL(MACCOL+3);                                   /*@L1C*/
*         ANS(' IF '||RXE||' = 0 THEN DO;'||
*         COMMENT('If ECT Extension address is zero, then    @YA19140'))
*                   COL(MACCOL+3);                             /*@L1C*/
*         ANS(' RFY RXBLD01I RSTD;' ||
*         COMMENT('Restrict the register  @YA19140'))
*                   COL(MACCOL+6);                        /*@YA19140*/
*         ANS(' RXBLD01I = '||ECTADDR(1)||';'||
*            COMMENT('Set the input parm   @YA19140'))
*                   COL(MACCOL+6);                        /*@YA19140*/
*         ANS(' GENERATE (LINK EP=IKJBLD01);' ||
*            COMMENT('Invoke IKJBLD01      @YA19140'))
*                   COL(MACCOL+6);                        /*@YA19140*/
*         ANS(' RFY RXBLD01I UNRSTD;' ||
*         COMMENT('Unrestrict the register  @YA19140'))
*                   COL(MACCOL+6);                        /*@YA19140*/
*         ANS(' '||RXE||' = ('||ECTADDR(1)||'+52) ->'||
*             ' RXFIELD;'||
*             COMMENT('refresh ECT extension address  @YA19140'))
*                   COL(MACCOL+6);
*                                                              /*@L1C*/
*         ANS(' END;'||
*          COMMENT('ECT Extension addr is now non-zero      @YA19140'))
*                   COL(MACCOL+3);                        /*@YA19140*/
*         ANS(' '||RXI1||' = ('||ECTADDR(1)||'+48) -> RXFIELD;'||
*              COMMENT('Return the current ECT field'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXI2||' = ('||RXE||'+36) -> RXFIELD;'||
*              COMMENT('Return the current ECT extension field'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXI3||' = ('||RXE||'+48) -> RXFIELD;'||
*              COMMENT('Return the current ECT extension field'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXI4||' = ('||RXE||'+60) -> RXFIELD;'||
*           COMMENT('Return the current ECT extension field @PEI0654'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXI5||' = ('||RXE||'+72) -> RXFIELD;'||
*           COMMENT('Return the current ECT extension field @YA21652'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' '||RXI6||' = ('||RXE||'+76) -> RXFIELD;'||
*           COMMENT('Return the current ECT extension field @YA21652'))
*              COL(MACCOL+3);
*                                                              /*@L1C*/
*         ANS(' END; /* --> ?RXSECT '||MACLIST||' '||MACKEYS||' */')
*            NORESCAN COL(MACCOL);     /* Echo the command           */
*      END;              /* End QUERY keyword processing  */
*    ELSE                /* Otherwise, no valid request   */
*    DO;               /* keyword specified             */
*       ANS MSG('RXSECT ---> No valid operation request'||
*               ' was entered.');
*       RETCODE = 12;
*    END;
* END;                           /* End normal processing         */
* RETURN CODE(RETCODE);
* %END RXSECT;
