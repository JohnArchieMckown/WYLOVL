*%ASAXWC: MACRO KEYS(PLISTVER,PATTERNSTR,PATTERNSTRLEN,STRING,          00000100
*                 STRINGLEN,ZEROORMORE,ONECHAR,DELIMITER,WORKAREA,      00000200
*                 RETCODE,MF);                                          00000300
*/**** START OF SPECIFICATIONS **************************************** 00000400
*                                                                     * 00000500
*                                                                     * 00000600
*01* MACRO NAME:  ASAXWC                                -07/19/94-<0> * 00000700
*                                                                     * 00000800
*                                                                     * 00000900
*01* DESCRIPTIVE NAME:  Wildcard service                              * 00001000
*                                                                     * 00001100
*01* PROPRIETARY STATEMENT:                                           * 00001200
*                                                                     * 00001300
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001400
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00001500
*     5655-068 (C) COPYRIGHT IBM CORP. 1994                           * 00001600
*     SEE COPYRIGHT INSTRUCTIONS                                      * 00001700
*                                                                     * 00001800
* STATUS= HBB5520                                                     * 00001900
*                                                                     * 00002000
*                                                                     * 00002100
*                                                                     * 00002200
*01* FUNCTION:                                                        * 00002300
*                                                                     * 00002400
*      ASAXWC is an executable macro that does wildcard match         * 00002500
*      checking, comparing an input pattern string (which can contain * 00002600
*      wildcard characters) to an input string.                       * 00002700
*                                                                     * 00002800
*01* EXTERNAL CLASSIFICATION:  NONE                                   * 00002900
*                                                                     * 00003000
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00003100
*                                                                     * 00003200
*01* ENVIRONMENT:                                                     * 00003300
*                                                                     * 00003400
*                                                                     * 00003500
*      Minimum authorization: Problem or Supervisor state.  Any PSW   * 00003600
*                        key.                                         * 00003700
*                                                                     * 00003800
*      Dispatchable unit mode: Task mode.                             * 00003900
*                                                                     * 00004000
*      Cross Memory Mode: PASN=HASN=SASN.                             * 00004100
*                                                                     * 00004200
*      AMODE:            31-bit.                                      * 00004300
*                                                                     * 00004400
*      ASC mode:         Primary.                                     * 00004500
*                                                                     * 00004600
*      Interrupt status: Enabled for I/O and external interrupts.     * 00004700
*                                                                     * 00004800
*      Locks:            Any.                                         * 00004900
*                                                                     * 00005000
*      Control parameters: Control parameters must be in the primary  * 00005100
*                        address space.                               * 00005200
*                                                                     * 00005300
*                                                                     * 00005400
*                                                                     * 00005500
*01* PROGRAMMING REQUIREMENTS:                                        * 00005600
*                                                                     * 00005700
*    None                                                             * 00005800
*                                                                     * 00005900
*01* RESTRICTIONS:                                                    * 00006000
*                                                                     * 00006100
*    No EUT FRRs may be in effect.                                    * 00006200
*                                                                     * 00006300
*01* MACRO USAGE NOTES:                                               * 00006400
*                                                                     * 00006500
*                                                                     * 00006600
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00006700
*        global macro variable.  Any value other than 'NO' will       * 00006800
*        result in the macro expansion being printed.  The default is * 00006900
*        'YES'.  The following examples illustrate how the ZPRINT     * 00007000
*        variable should be set.                                      * 00007100
*                                                                     * 00007200
*                    GBLC &ZPRINT                                     * 00007300
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00007400
*                                                                     * 00007500
*                                                                     * 00007600
*    2.  All  keys currently contained in the ASAXWC macro correspond * 00007700
*        to  version 0.  If you specify PLISTVER, use a value of 0 or * 00007800
*        MAX.                                                         * 00007900
*                                                                     * 00008000
*                                                                     * 00008100
*    3.  The  use  of  * to match 0 or more characters and ? to match * 00008200
*        exactly 1 character are SAA standards.                       * 00008300
*                                                                     * 00008400
*                                                                     * 00008500
*                                                                     * 00008600
*01* INPUT REGISTER INFORMATION:                                      * 00008700
*                                                                     * 00008800
*    None                                                             * 00008900
*                                                                     * 00009000
*01* OUTPUT REGISTER INFORMATION:                                     * 00009100
*                                                                     * 00009200
*    None                                                             * 00009300
*                                                                     * 00009400
*01* PERFORMANCE IMPLICATIONS:                                        * 00009500
*                                                                     * 00009600
*    None.                                                            * 00009700
*                                                                     * 00009800
*01* SYNTAX:                                                          * 00009900
*                                                                     * 00010000
*[xlabel]  ASAXWC   [ PLISTVER=¬xplistver|IMPLIED_VERSION­]           * 00010100
*                    ,PATTERNSTR=xpatternstr                          * 00010200
*                    ,PATTERNSTRLEN=xpatternstrlen                    * 00010300
*                    ,STRING=xstring                                  * 00010400
*                    ,STRINGLEN=xstringlen                            * 00010500
*                    ,ZEROORMORE=xzeroormore                          * 00010600
*                    ,ONECHAR=xonechar                                * 00010700
*                   [,DELIMITER=¬xdelimiter|LENGTHS_WERE_SET­]        * 00010800
*                   [,WORKAREA=¬xworkarea|NO_WORKAREA­]               * 00010900
*                   [,RETCODE=xretcode]                               * 00011000
*                  ¿[,MF=S]                                           * 00011100
*                  õ[,MF=(L,xmfctrl¬,xmfattr|0D­)]                    * 00011200
*                  õ[,MF=(M,xmfctrl¬,COMPLETE|NOCHECK­)]              * 00011300
*                  ¾[,MF=(E,xmfctrl¬,COMPLETE|NOCHECK­)]              * 00011400
*                                                                     * 00011500
*                                                                     * 00011600
*      Where:                                                         * 00011700
*                                                                     * 00011800
*                                                                     * 00011900
*      [xlabel]                                                       * 00012000
*          is an optional symbol, starting in column 1, that is the   * 00012100
*          name on the ASAXWC macro invocation.  The name must        * 00012200
*          conform to the rules for an ordinary assembler language    * 00012300
*          symbol.                                                    * 00012400
*          DEFAULT: No name.                                          * 00012500
*                                                                     * 00012600
*                                                                     * 00012700
*                                                                     * 00012800
*                                                                     * 00012900
*      [PLISTVER(¬xplistver|IMPLIED_VERSION­)]                        * 00013000
*          is an optional byte input decimal value in the "0-0" range * 00013100
*          that specifies the macro version.  PLISTVER is the only    * 00013200
*          key allowed on the list form of MF and determines which    * 00013300
*          parameter list is generated (see Macro USAGE NOTE 2).      * 00013400
*          Note that MAX may be specified instead of a number, and    * 00013500
*          the parameter list will be of the largest size currently   * 00013600
*          supported. This size may grow from release to release      * 00013700
*          (thus possibly affecting the amount of storage needed by   * 00013800
*          your program).  If your program can tolerate this, IBM     * 00013900
*          recommends that you always specify MAX when creating the   * 00014000
*          list form parameter list as that will ensure that the list * 00014100
*          form parameter list is always long enough to hold whatever * 00014200
*          parameters might be specified on the execute form.         * 00014300
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00014400
*          default is the lowest version which allows all of the      * 00014500
*          parameters specified on the invocation to be processed.    * 00014600
*                                                                     * 00014700
*                                                                     * 00014800
*                                                                     * 00014900
*                                                                     * 00015000
*      PATTERNSTR(xpatternstr)                                        * 00015100
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00015200
*          only) of a required variable character input field         * 00015300
*          containing the wildcard pattern string.                    * 00015400
*                                                                     * 00015500
*                                                                     * 00015600
*                                                                     * 00015700
*                                                                     * 00015800
*      PATTERNSTRLEN(xpatternstrlen)                                  * 00015900
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00016000
*          only) of a required fullword input field containing the    * 00016100
*          length of the wildcard pattern string.  The length         * 00016200
*          actually used is the length up to the first occurrence of  * 00016300
*          the delimiter character or this length if the delimiter    * 00016400
*          character is not present.                                  * 00016500
*                                                                     * 00016600
*                                                                     * 00016700
*                                                                     * 00016800
*                                                                     * 00016900
*      STRING(xstring)                                                * 00017000
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00017100
*          only) of a required variable character input field         * 00017200
*          containing the string to match against.                    * 00017300
*                                                                     * 00017400
*                                                                     * 00017500
*                                                                     * 00017600
*                                                                     * 00017700
*      STRINGLEN(xstringlen)                                          * 00017800
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00017900
*          only) of a required fullword input field containing the    * 00018000
*          length of the string to match against.  The length         * 00018100
*          actually used is the length up to the first occurrence of  * 00018200
*          the delimiter character or this length if the delimiter    * 00018300
*          character is not present.                                  * 00018400
*                                                                     * 00018500
*                                                                     * 00018600
*                                                                     * 00018700
*                                                                     * 00018800
*      ZEROORMORE(xzeroormore)                                        * 00018900
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00019000
*          only) of a required 1 character input field that specifies * 00019100
*          the wildcard character that represents zero or more        * 00019200
*          characters. The normal character is "*".                   * 00019300
*                                                                     * 00019400
*                                                                     * 00019500
*                                                                     * 00019600
*                                                                     * 00019700
*      ONECHAR(xonechar)                                              * 00019800
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00019900
*          only) of a required 1 character input field that specifies * 00020000
*          the wildcard character that represents exactly one         * 00020100
*          character. The normal character is "?".                    * 00020200
*                                                                     * 00020300
*                                                                     * 00020400
*                                                                     * 00020500
*                                                                     * 00020600
*      [DELIMITER(¬xdelimiter|LENGTHS_WERE_SET­)]                     * 00020700
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00020800
*          only) of an optional 1 character input field that          * 00020900
*          specifies the character that indicates the end of the      * 00021000
*          input (either PatternStr or String).  The normal character * 00021100
*          is a blank.  If the specified lengths are already correct, * 00021200
*          do not specify this keyword.                               * 00021300
*          DEFAULT: LENGTHS_WERE_SET                                  * 00021400
*                                                                     * 00021500
*                                                                     * 00021600
*                                                                     * 00021700
*                                                                     * 00021800
*      [WORKAREA(¬xworkarea|NO_WORKAREA­)]                            * 00021900
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00022000
*          only) of an optional 256 character input field that        * 00022100
*          specifies an area that the wildcard service can use as a   * 00022200
*          dynamic area. This will result in a call to the wildcard   * 00022300
*          service entry that does no getmains or freemains.  While   * 00022400
*          you cannot specify WORKAREA=(0), you can place the address * 00022500
*          of the workarea into register 0 and specify register 0 by  * 00022600
*          a symbolic name (e.g., WORKAREA=(symbol) where symbol is   * 00022700
*          equated to 0).  Using WORKAREA=(R0) will result in the     * 00022800
*          most efficient code being generated.  Do not specify       * 00022900
*          WORKAREA on the modify form.                               * 00023000
*          DEFAULT: NO_WORKAREA                                       * 00023100
*                                                                     * 00023200
*                                                                     * 00023300
*                                                                     * 00023400
*                                                                     * 00023500
*      [RETCODE(xretcode)]                                            * 00023600
*          is the name (RS-type) of an optional fullword output       * 00023700
*          variable (or register (2)-(12) ASM only) into which the    * 00023800
*          return code is to be copied from GPR 15.                   * 00023900
*                                                                     * 00024000
*                                                                     * 00024100
*                                                                     * 00024200
*                                                                     * 00024300
*      [MF(¬S|L|M|E­)]                                                * 00024400
*          is an optional keyword input which specifies the macro     * 00024500
*          form.                                                      * 00024600
*          DEFAULT: S                                                 * 00024700
*                                                                     * 00024800
*                                                                     * 00024900
*          [MF(S)]                                                    * 00025000
*              specifies the standard form of the macro.  The "S"     * 00025100
*              form generates code to put the parameters into the     * 00025200
*              parameter list and invoke the desired service.  Full   * 00025300
*              checking for required macro keys is done along with    * 00025400
*              supplying defaults for omitted optional parameters.    * 00025500
*              The ?EPILOG macro must be invoked at the end of the    * 00025600
*              module.                                                * 00025700
*                                                                     * 00025800
*              For assembly language code modules, the "S" form       * 00025900
*              generates code to put the parameters into an in-line   * 00026000
*              parameter list and invoke the desired service.  Full   * 00026100
*              checking for required macro keys is done along with    * 00026200
*              supplying defaults for omitted optional parameters.    * 00026300
*                                                                     * 00026400
*          [MF(L,xmfctrl¬,xmfattr|BDY(DWORD)­)]                       * 00026500
*              specifies the list form of the macro.  The "L" form    * 00026600
*              defines an area to be used for the parameter list.     * 00026700
*              Only the PLISTVER key may be specified on the          * 00026800
*              invocation.  All other macro parameters are flagged as * 00026900
*              errors.  If PLISTVER is not specified, the original    * 00027000
*              parameter list definition is used.                     * 00027100
*                                                                     * 00027200
*            ,xmfctrl                                                 * 00027300
*              is a required input.  It is the name of a storage area * 00027400
*              for the parameter list.                                * 00027500
*                                                                     * 00027600
*            ¬,xmfattr|BDY(DWORD)­                                    * 00027700
*              is an optional 60 character input string that varies   * 00027800
*              from 1 to 60 characters. It can contain any value that * 00027900
*              is valid on an assembler DS pseudo-op                  * 00028000
*              (assembler-only). You can use this parameter to force  * 00028100
*              boundary alignment of the parameter list.              * 00028200
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/AS, which * 00028300
*              forces the parameter list to a doubleword boundary.    * 00028400
*                                                                     * 00028500
*          [MF(M,xmfctrl¬,COMPLETE|NOCHECK­)]                         * 00028600
*              specifies the modify form of the macro.  The "M" form  * 00028700
*              generates code to put the parameters into the          * 00028800
*              parameter list specified by xmfctrl.                   * 00028900
*                                                                     * 00029000
*            ,xmfctrl                                                 * 00029100
*              is a required input.  It is the name (RS-type) (or     * 00029200
*              address in register (1)-(12) ASM only) of a storage    * 00029300
*              area for the parameter list.                           * 00029400
*                                                                     * 00029500
*            ¬,COMPLETE|NOCHECK­]                                     * 00029600
*              is an optional keyword input which specifies the       * 00029700
*              degree of macro parameter syntax checking.             * 00029800
*              DEFAULT: COMPLETE                                      * 00029900
*                                                                     * 00030000
*                                                                     * 00030100
*              COMPLETE   Checking for required macro keys is done    * 00030200
*                        and defaults are supplied for omitted        * 00030300
*                        optional parameters.  (See Macro Usage Note  * 00030400
*                        2).                                          * 00030500
*                                                                     * 00030600
*              NOCHECK   Checking for required macro keys is not done * 00030700
*                        nor are defaults supplied for omitted        * 00030800
*                        optional parameters.                         * 00030900
*                                                                     * 00031000
*                                                                     * 00031100
*                                                                     * 00031200
*          [MF(E,xmfctrl¬,COMPLETE|NOCHECK­)]                         * 00031300
*              specifies the execute form of the macro.  The "E" form * 00031400
*              generates code to put the parameters into the          * 00031500
*              parameter list specified by xmfctrl and invoke the     * 00031600
*              desired service.                                       * 00031700
*                                                                     * 00031800
*            ,xmfctrl                                                 * 00031900
*              is a required input.  It is the name (RS-type) (or     * 00032000
*              address in register (1)-(12) ASM only) of a storage    * 00032100
*              area for the parameter list.                           * 00032200
*                                                                     * 00032300
*            ¬,COMPLETE|NOCHECK­                                      * 00032400
*              is an optional keyword input which specifies the       * 00032500
*              degree of macro parameter syntax checking.             * 00032600
*              DEFAULT: COMPLETE                                      * 00032700
*                                                                     * 00032800
*                                                                     * 00032900
*              COMPLETE   Checking for required macro keys is done    * 00033000
*                        and defaults are supplied for omitted        * 00033100
*                        optional parameters.  (See Macro Usage Note  * 00033200
*                        2).                                          * 00033300
*                                                                     * 00033400
*              NOCHECK   Checking for required macro keys is not done * 00033500
*                        nor are defaults supplied for omitted        * 00033600
*                        optional parameters.                         * 00033700
*                                                                     * 00033800
*                                                                     * 00033900
*                                                                     * 00034000
*                                                                     * 00034100
*                                                                     * 00034200
*                                                                     * 00034300
*                                                                     * 00034400
*01* RETURN CODES:                                                    * 00034500
*                                                                     * 00034600
*                                                                     * 00034700
*            0    Match.                                              * 00034800
*                                                                     * 00034900
*            8    No match.                                           * 00035000
*                                                                     * 00035100
*                                                                     * 00035200
*                                                                     * 00035300
*01* REASON CODES:  None.                                             * 00035400
*                                                                     * 00035500
*01* MODULE TYPE:  ASSEM-PL/AS MACRO                                  * 00035600
*                                                                     * 00035700
*02*   PROCESSOR:  ASSEM-PL/AS                                        * 00035800
*                                                                     * 00035900
*01* COMPONENT:  SCASA                                                * 00036000
*                                                                     * 00036100
*01* DISTRIBUTION LIBRARY: AMODGEN                                    * 00036200
*                                                                     * 00036300
*01* EXAMPLES:                                                        * 00036400
*                                                                     * 00036500
*           ASAXWC    PATTERNSTR=PS,      *                           * 00036600
*                     PATTERNSTRLEN=PSL,  *                           * 00036700
*                     STRING=S,           *                           * 00036800
*                     STRINGLEN=SL,       *                           * 00036900
*                     ZEROORMORE=Z,       *                           * 00037000
*                     ONECHAR=O,          *                           * 00037100
*                     DELIMITER=D,        *                           * 00037200
*                     RETCODE=R,          *                           * 00037300
*                     MF=(E,MYLIST)                                   * 00037400
*      PS      DC     C'HE?L*'                                        * 00037500
*      PSL     DC     A(L'PS)                                         * 00037600
*      S       DC     C'HELLO'                                        * 00037700
*      SL      DC     A(L'S)                                          * 00037800
*      Z       DC     CL1'*'                                          * 00037900
*      O       DC     CL1'?'                                          * 00038000
*      D       DC     CL1' '                                          * 00038100
*      DYNAREA DSECT                                                  * 00038200
*      R       DS     F                                               * 00038300
*           ASAXWC    MF=(L,MYLIST)                                   * 00038400
*                                                                     * 00038500
*                                                                     * 00038600
*01* CHANGE ACTIVITY:                                                 * 00038700
*                                                                     * 00038800
*   Flag LineItem  FMID    Date   ID    Comment                       * 00038900
*                                                                     * 00039000
*    $L0=PR520AMG HBB5520 931101 PDXB:  Wildcard interface for        * 00039100
*                                         assembler                   * 00039200
*    $L1=PR520    HBB5520 931101 PDXB:  Add MACASM/MACPLS information * 00039300
****** END OF SPECIFICATIONS *****************************************/ 00039400
*/********************************************************************* 00039500
         MACRO                                                          00039600
&XLABEL  ASAXWC &PLISTVER=,&PATTERNSTR=,&PATTERNSTRLEN=,&STRING=,      *00039700
               &STRINGLEN=,&ZEROORMORE=,&ONECHAR=,&DELIMITER=,         *00039800
               &WORKAREA=,&RETCODE=,&MF=                                00039900
.*                                                                      00040000
*                   MACDATE -07/19/94-<0>                               00040100
.*                                                                      00040200
.*******************************************************************    00040300
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00040400
.*******************************************************************    00040500
                   GBLC  &ZPRINT     YES=PRINT NO=NO PRINT              00040600
                   GBLC  &ZTEST      YES=TEST NO=NO TEST                00040700
                   GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX        00040800
.*                                                                      00040900
                   GBLC  &ZASAXWC    YES=MACRO USED AT LEAST ONCE       00041000
.*******************************************************************    00041100
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00041200
.*******************************************************************    00041300
                   LCLC  &ZMS        ERROR MESSAGE WORK AREA            00041400
                   LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS       00041500
                   LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED         00041600
                   LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR        00041700
                   LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE        00041800
                   LCLA  &ZAWRK      USED AS A WORK AREA                00041900
                   LCLA  &ZASIZ      USED FOR SIZE OF VALUE             00042000
                   LCLA  &ZN         NUMERIC WORK VARIABLE              00042100
                   LCLC  &ZC         CHARACTER WORK VARIABLE            00042200
                   LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE        00042300
                   LCLA  &ZTLA       VALUE TOO LONG VARIABLE            00042400
                   LCLA  &ZMACRET    MACRO RETURN CODE                  00042500
&ZMACRET           SETA  0           ASSUME NO ERRORS                   00042600
.*                                                                      00042700
                   LCLC  &ZCSYSLIST(255)        NONXKEY, POS ARRAY      00042800
                   LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()         00042900
                   LCLA  &ZPLLEN     PARAMETER LIST LENGTH              00043000
                   LCLA  &ZPLWORKA   PARAMETER LIST LENGTH              00043100
.*******************************************************************    00043200
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00043300
.*******************************************************************    00043400
                   LCLA  &ZI         INDEX FOR ARRAY                    00043500
                   LCLA  &ZJ         INDEX FOR PARMS                    00043600
                   LCLA  &ZK         INDEX FOR PARSE                    00043700
                   LCLA  &ZLO        LOW RANGE VALUE                    00043800
                   LCLA  &ZHI        HIGH RANGE VALUE                   00043900
                   LCLC  &ZW         WORK AREA FOR PARM                 00044000
.********************************************************************   00044100
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00044200
.********************************************************************   00044300
                   GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL            00044400
                   GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE     00044500
.*                                                                      00044600
                   AIF   (K'&SYSASCE GT 0).ZSYS4  SYS STATE DEFINED     00044700
                   AIF   (K'&SYSSPLV GT 0).ZSYS2  SP LEVEL DEFINED      00044800
                   SPLEVEL  TEST                                        00044900
.ZSYS2             ANOP  ,                                              00045000
                   AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1          00045100
                   AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1          00045200
                   SYSSTATE TEST                                        00045300
                   AGO   .ZSYS4                                         00045400
.ZSYS3             ANOP  ,                                              00045500
&SYSASCE           SETC  'P'         ASSUME SYSSTATE PRIMARY            00045600
.ZSYS4             ANOP  ,                                              00045700
.*******************************************************************    00045800
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00045900
.*******************************************************************    00046000
                   LCLA  &XPLISTVER  ++ VALUE                           00046100
                   LCLC  &XPATTERNSTR           ++ NAME                 00046200
                   LCLC  &XPATTERNSTRLEN        ++ NAME                 00046300
                   LCLC  &XSTRING    ++ NAME                            00046400
                   LCLC  &XSTRINGLEN            ++ NAME                 00046500
                   LCLC  &XZEROORMORE           ++ NAME                 00046600
                   LCLC  &XONECHAR   ++ NAME                            00046700
                   LCLC  &XDELIMITER            ++ NAME                 00046800
                   LCLC  &XWORKAREA  ++ NAME                            00046900
                   LCLC  &XRETCODE   ++ NAME                            00047000
                   LCLC  &XMF        ++ VALUE                           00047100
                   LCLC  &XMFCTRL    ++ NAME                            00047200
                   LCLC  &XMFATTR    ++ VALUE                           00047300
                   LCLC  &XMFSCK     ++ VALUE                           00047400
.*******************************************************************    00047500
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00047600
.*******************************************************************    00047700
                   LCLC  &ZXPLISTVER            ++ INPUT VALUE          00047800
                   LCLC  &ZXPATTERNSTR          ++ INPUT NAME           00047900
                   LCLC  &ZXPATTERNSTRLEN       ++ INPUT NAME           00048000
                   LCLC  &ZXSTRING   ++ INPUT NAME                      00048100
                   LCLC  &ZXSTRINGLEN           ++ INPUT NAME           00048200
                   LCLC  &ZXZEROORMORE          ++ INPUT NAME           00048300
                   LCLC  &ZXONECHAR  ++ INPUT NAME                      00048400
                   LCLC  &ZXDELIMITER           ++ INPUT NAME           00048500
                   LCLC  &ZXWORKAREA            ++ INPUT NAME           00048600
                   LCLC  &ZXRETCODE  ++ OUTPUT NAME                     00048700
                   LCLC  &ZXMF       ++ INPUT VALUE                     00048800
                   LCLC  &ZXMFCTRL   ++ INPUT NAME                      00048900
                   LCLC  &ZXMFATTR   ++ INPUT VALUE                     00049000
                   LCLC  &ZXMFSCK    ++ INPUT VALUE                     00049100
.********************************************************************   00049200
.***AC.PLV01  PROCESS PLISTVER                                      *   00049300
.********************************************************************   00049400
&XPLISTVER      SETA  0                                                 00049500
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00049600
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00049700
&XPLISTVER      SETA  0                                                 00049800
.ZPLV0          ANOP  ,                                                 00049900
.*                                                                      00050000
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00050100
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00050200
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00050300
.*-------------------------------------------------------------------   00050400
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00050500
&ZMS            SETC  '"PLISTVER='         *KPOSA* MNOTE                00050600
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00050700
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00050800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00050900
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00051000
                AGO   .ZPVCK2                                           00051100
.ZPVCK3         ANOP  ,                                                 00051200
.*-------------------------------------------------------------------   00051300
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00051400
&ZMS            SETC  '"PLISTVER='         *KGPRA* MNOTE                00051500
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00051600
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00051700
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00051800
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00051900
                AGO   .ZPVCKE                                           00052000
.ZPVCK2         ANOP  ,                                                 00052100
.*-------------------------------------------------------------------   00052200
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00052300
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00052400
&ZMS            SETC  'PLISTVER='          *KVALA* MNOTE                00052500
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00052600
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00052700
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00052800
                MNOTE 8,' &ZMS IS REQUIRED.'                            00052900
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00053000
                AGO   .ZPVCK5                                           00053100
.ZPVCK4         ANOP  ,                                                 00053200
&XPLISTVER      SETA  &PLISTVER(1)                                      00053300
.ZPVCK5         ANOP  ,                                                 00053400
.*-------------------------------------------------------------------   00053500
&ZCVAL          SETC  '&PLISTVER(1)'                                    00053600
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00053700
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00053800
                AIF   (&XPLISTVER LT 0).ZPVCK6  TOO LOW                 00053900
                AIF   (&XPLISTVER LE 0).ZPVCKE  NOT HIGH                00054000
.ZPVCK6         ANOP   ,                                                00054100
&ZMS            SETC  '"PLISTVER='         *KRNGA* MNOTE                00054200
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00054300
&ZMS            SETC  '&ZMS THE RANGE IS "0-0"'                         00054400
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00054500
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00054600
.ZPVCKE         ANOP   ,                                                00054700
.********************************************************************   00054800
.***AG.MF01 PROCESS MF MACRO FORMS                                      00054900
.********************************************************************   00055000
                   ACTR  10000                                          00055100
.*------------------------------------------------------------------    00055200
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00055300
&XMF               SETC  ''          INITIALIZE XVARIABLE               00055400
.*-------------------------------------------------------------------   00055500
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00055600
.ZG33              ANOP  ,                                              00055700
&ZTLC              SETC 'S'                                             00055800
                   AIF   ('&MF(1)' NE '&ZTLC').ZG34                     00055900
&XMF               SETC  'S'         SET KEYWORD                        00056000
&XMFSCK            SETC  'COMPLETE'  SET XMFSCK                         00056100
                   AIF   (N'&MF LE 1).ZG33A     CK NUM                  00056200
&ZMS               SETC  '"MF='      *KPOSA* MNOTE                      00056300
&ZMS               SETC  '&ZMS.&MF"'                                    00056400
&ZMS               SETC  '&ZMS "MF"'                                    00056500
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00056600
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00056700
.ZG33A             ANOP  ,                                              00056800
.*-------------------------------------------------------------------   00056900
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00057000
.ZG34              ANOP  ,                                              00057100
&ZTLC              SETC 'L'                                             00057200
                   AIF   ('&MF(1)' NE '&ZTLC').ZG41                     00057300
&XMF               SETC  'L'         SET KEYWORD                        00057400
                   AIF   (N'&MF LE 3).ZG34A     CK NUM                  00057500
&ZMS               SETC  '"MF='      *KPOSA* MNOTE                      00057600
&ZMS               SETC  '&ZMS.&MF"'                                    00057700
&ZMS               SETC  '&ZMS "MF"'                                    00057800
                   MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'           00057900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00058000
.ZG34A             ANOP  ,                                              00058100
.*-------------------------------------------------------------------   00058200
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00058300
                   AIF   (N'&SYSLIST NE 0).ZG34B  POSITIONALS?          00058400
                   AIF   ('&PATTERNSTR' NE '').ZG34B  KEYS?             00058500
                   AIF   ('&PATTERNSTRLEN' NE '').ZG34B  KEYS?          00058600
                   AIF   ('&STRING' NE '').ZG34B  KEYS?                 00058700
                   AIF   ('&STRINGLEN' NE '').ZG34B  KEYS?              00058800
                   AIF   ('&ZEROORMORE' NE '').ZG34B  KEYS?             00058900
                   AIF   ('&ONECHAR' NE '').ZG34B  KEYS?                00059000
                   AIF   ('&DELIMITER' NE '').ZG34B  KEYS?              00059100
                   AIF   ('&WORKAREA' NE '').ZG34B  KEYS?               00059200
                   AIF   ('&RETCODE' NE '').ZG34B  KEYS?                00059300
                   AGO    .ZG34C     INVOCATION OKAY                    00059400
.ZG34B             ANOP  ,                                              00059500
&ZMS               SETC  'THE "L" FORM OF "MF"'  *MFLA* MNOTE           00059600
&ZMS               SETC  '&ZMS CAN ONLY HAVE'                           00059700
&ZMS               SETC  '&ZMS THE "PLISTVER" KEY'                      00059800
                   MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'         00059900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00060000
.ZG34C             ANOP  ,                                              00060100
.*-------------------------------------------------------------------   00060200
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00060300
&ZXMFCTRL          SETC  'INPUT'     SET IN/OUTPUT                      00060400
&XMFCTRL           SETC  '&MF(2,1)'  SET XVARIABLE                      00060500
                   AIF   (N'&MF(2) GT 1).ZG36B  MULTI PARMS             00060600
&XMFCTRL           SETC  '&MF(2)'    SET XVARIABLE                      00060700
.ZG36B             AIF   (K'&MF(2) GT 0).ZG36C                          00060800
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT                    00060900
&ZMS               SETC  'WHEN "L" IS SPECIFIED'  *KRQDA*               00061000
&ZMS               SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'            00061100
                   MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                   00061200
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00061300
.ZG36C             ANOP  ,                                              00061400
.*-------------------------------------------------------------------   00061500
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00061600
                   AIF   (K'&ZXMFCTRL LE 0).ZG36P  NOT I/O              00061700
                   AIF   ('&XMFCTRL'(1,1) NE '(').ZG36P                 00061800
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT                    00061900
&ZMS               SETC  '"MF='      *KGPRA* MNOTE                      00062000
&ZMS               SETC  '&ZMS.&MF"'                                    00062100
&ZMS               SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'      00062200
                   MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'              00062300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00062400
.ZG36P             ANOP  ,                                              00062500
.*-------------------------------------------------------------------   00062600
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00062700
&ZXMFATTR          SETC  'INPUT'     SET IN/OUTPUT                      00062800
&XMFATTR           SETC  '0D'                                           00062900
                   AIF   (K'&MF(3) LE 0).ZG39B  PARM                    00063000
&XMFATTR           SETC  '&MF(3,1)'  SET XVARIABLE                      00063100
                   AIF   (N'&MF(3) GT 1).ZG39B  MULTI PARMS             00063200
&XMFATTR           SETC  '&MF(3)'    SET XVARIABLE                      00063300
.ZG39B             ANOP  ,                                              00063400
.*-------------------------------------------------------------------   00063500
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00063600
                   AIF   (K'&ZXMFATTR LE 0).ZG39P  NOT I/O              00063700
                   AIF   ('&XMFATTR'(1,1) NE '(').ZG39P                 00063800
&ZXMFATTR          SETC  ''          RESET IN/OUTPUT                    00063900
&ZMS               SETC  '"MF='      *KGPRA* MNOTE                      00064000
&ZMS               SETC  '&ZMS.&MF"'                                    00064100
&ZMS               SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'      00064200
                   MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'              00064300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00064400
.ZG39P             ANOP  ,                                              00064500
.*-------------------------------------------------------------------   00064600
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00064700
                   AIF   (K'&ZXMFATTR LE 0).ZG39S  NOT I/O              00064800
                   AIF   (K'&XMFATTR LE 60).ZG39S  LNG OK               00064900
&ZXMFATTR          SETC  ''          RESET IN/OUTPUT                    00065000
&ZMS               SETC  '"MF='      *KLNGA* MNOTE                      00065100
&ZMS               SETC  '&ZMS.&MF"'                                    00065200
&ZMS               SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'          00065300
                   MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'             00065400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00065500
.ZG39S             ANOP  ,                                              00065600
.*-------------------------------------------------------------------   00065700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00065800
.ZG41              ANOP  ,                                              00065900
&ZTLC              SETC 'M'                                             00066000
                   AIF   ('&MF(1)' NE '&ZTLC').ZG50                     00066100
&XMF               SETC  'M'         SET KEYWORD                        00066200
                   AIF   (N'&MF LE 3).ZG41A     CK NUM                  00066300
&ZMS               SETC  '"MF='      *KPOSA* MNOTE                      00066400
&ZMS               SETC  '&ZMS.&MF"'                                    00066500
&ZMS               SETC  '&ZMS "MF"'                                    00066600
                   MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'           00066700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00066800
.ZG41A             ANOP  ,                                              00066900
.*-------------------------------------------------------------------   00067000
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00067100
&ZXMFCTRL          SETC  'INPUT'     SET IN/OUTPUT                      00067200
&XMFCTRL           SETC  '&MF(2,1)'  SET XVARIABLE                      00067300
                   AIF   (N'&MF(2) GT 1).ZG43B  MULTI PARMS             00067400
&XMFCTRL           SETC  '&MF(2)'    SET XVARIABLE                      00067500
.ZG43B             AIF   (K'&MF(2) GT 0).ZG43C                          00067600
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT                    00067700
&ZMS               SETC  'WHEN "M" IS SPECIFIED'  *KRQDA*               00067800
&ZMS               SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'            00067900
                   MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                   00068000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00068100
.ZG43C             ANOP  ,                                              00068200
.*-------------------------------------------------------------------   00068300
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00068400
                   AIF   (K'&ZXMFCTRL LE 0).ZG43R  NOT I/O              00068500
                   AIF   ('&XMFCTRL'(1,1) NE '(').ZG43R                 00068600
&ZCGPR             SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                     00068700
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG43P                   00068800
                   AIF   (K'&ZCGPR GT 2).ZG43Q                          00068900
                   AIF   ('&ZCGPR' EQ '0').ZG43Q                        00069000
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00069100
                   AIF   (T'&ZCGPR NE 'N').ZG43Q  INVALID REG NAME      00069200
.ZG43P             ANOP  ,                                              00069300
                   AIF   (T'&ZCGPR NE 'N').ZG43R  NON NUMERIC           00069400
                   AIF   ('&ZCGPR' LT '1').ZG43Q                        00069500
                   AIF   ('&ZCGPR' LE '12').ZG43R                       00069600
.ZG43Q             ANOP  ,                                              00069700
&ZMS               SETC  '"MF='      *KGPRA* MNOTE                      00069800
&ZMS               SETC  '&ZMS.&MF"'                                    00069900
&ZMS               SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'      00070000
                   MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'               00070100
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00070200
.ZG43R             ANOP  ,                                              00070300
.*-------------------------------------------------------------------   00070400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00070500
&XMFSCK            SETC  ''          INITIALIZE XVARIABLE               00070600
.ZG47A   AIF   ('&MF(3)' NE 'COMPLETE').ZG48A                           00070700
&XMFSCK            SETC  'COMPLETE'  SET KEYWORD                        00070800
.*-------------------------------------------------------------------   00070900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00071000
.ZG48A   AIF   ('&MF(3)' NE 'NOCHECK').ZG49A                            00071100
&XMFSCK            SETC  'NOCHECK'   SET KEYWORD                        00071200
.*-------------------------------------------------------------------   00071300
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00071400
.ZG49A             AIF   (K'&XMFSCK GT 0).ZG49C  KEYWORD                00071500
                   AIF   (K'&MF(3) LE 0).ZG49B                          00071600
&ZMS               SETC  '"MF='      *KUKWA* MNOTE                      00071700
&ZMS               SETC  '&ZMS.&MF"'                                    00071800
&ZMS               SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '      00071900
&ZMS               SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'            00072000
&ZMS               SETC  '&ZMS "COMPLETE"'      VALID KEYWORD           00072100
&ZMS               SETC  '&ZMS OR "NOCHECK".'   VALID KEYWORD           00072200
                   MNOTE 8,' &ZMS '                                     00072300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00072400
.ZG49B             ANOP  ,                                              00072500
&XMFSCK            SETC  'COMPLETE'  SET DEFAULT KEYWORD                00072600
.ZG49C             ANOP  ,                                              00072700
&ZXMFSCK           SETC  'INPUT'     SET IN/OUTPUT                      00072800
.*-------------------------------------------------------------------   00072900
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00073000
.ZG50              ANOP  ,                                              00073100
&ZTLC              SETC 'E'                                             00073200
                   AIF   ('&MF(1)' NE '&ZTLC').ZG59                     00073300
&XMF               SETC  'E'         SET KEYWORD                        00073400
                   AIF   (N'&MF LE 3).ZG50A     CK NUM                  00073500
&ZMS               SETC  '"MF='      *KPOSA* MNOTE                      00073600
&ZMS               SETC  '&ZMS.&MF"'                                    00073700
&ZMS               SETC  '&ZMS "MF"'                                    00073800
                   MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'           00073900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00074000
.ZG50A             ANOP  ,                                              00074100
.*-------------------------------------------------------------------   00074200
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00074300
&ZXMFCTRL          SETC  'INPUT'     SET IN/OUTPUT                      00074400
&XMFCTRL           SETC  '&MF(2,1)'  SET XVARIABLE                      00074500
                   AIF   (N'&MF(2) GT 1).ZG52B  MULTI PARMS             00074600
&XMFCTRL           SETC  '&MF(2)'    SET XVARIABLE                      00074700
.ZG52B             AIF   (K'&MF(2) GT 0).ZG52C                          00074800
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT                    00074900
&ZMS               SETC  'WHEN "E" IS SPECIFIED'  *KRQDA*               00075000
&ZMS               SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'            00075100
                   MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                   00075200
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00075300
.ZG52C             ANOP  ,                                              00075400
.*-------------------------------------------------------------------   00075500
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00075600
                   AIF   (K'&ZXMFCTRL LE 0).ZG52R  NOT I/O              00075700
                   AIF   ('&XMFCTRL'(1,1) NE '(').ZG52R                 00075800
&ZCGPR             SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                     00075900
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG52P                   00076000
                   AIF   (K'&ZCGPR GT 2).ZG52Q                          00076100
                   AIF   ('&ZCGPR' EQ '0').ZG52Q                        00076200
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00076300
                   AIF   (T'&ZCGPR NE 'N').ZG52Q  INVALID REG NAME      00076400
.ZG52P             ANOP  ,                                              00076500
                   AIF   (T'&ZCGPR NE 'N').ZG52R  NON NUMERIC           00076600
                   AIF   ('&ZCGPR' LT '1').ZG52Q                        00076700
                   AIF   ('&ZCGPR' LE '12').ZG52R                       00076800
.ZG52Q             ANOP  ,                                              00076900
&ZMS               SETC  '"MF='      *KGPRA* MNOTE                      00077000
&ZMS               SETC  '&ZMS.&MF"'                                    00077100
&ZMS               SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'      00077200
                   MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'               00077300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00077400
.ZG52R             ANOP  ,                                              00077500
.*-------------------------------------------------------------------   00077600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00077700
&XMFSCK            SETC  ''          INITIALIZE XVARIABLE               00077800
.ZG56A   AIF   ('&MF(3)' NE 'COMPLETE').ZG57A                           00077900
&XMFSCK            SETC  'COMPLETE'  SET KEYWORD                        00078000
.*-------------------------------------------------------------------   00078100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00078200
.ZG57A   AIF   ('&MF(3)' NE 'NOCHECK').ZG58A                            00078300
&XMFSCK            SETC  'NOCHECK'   SET KEYWORD                        00078400
.*-------------------------------------------------------------------   00078500
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00078600
.ZG58A             AIF   (K'&XMFSCK GT 0).ZG58C  KEYWORD                00078700
                   AIF   (K'&MF(3) LE 0).ZG58B                          00078800
&ZMS               SETC  '"MF='      *KUKWA* MNOTE                      00078900
&ZMS               SETC  '&ZMS.&MF"'                                    00079000
&ZMS               SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '      00079100
&ZMS               SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'            00079200
&ZMS               SETC  '&ZMS "COMPLETE"'      VALID KEYWORD           00079300
&ZMS               SETC  '&ZMS OR "NOCHECK".'   VALID KEYWORD           00079400
                   MNOTE 8,' &ZMS '                                     00079500
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00079600
.ZG58B             ANOP  ,                                              00079700
&XMFSCK            SETC  'COMPLETE'  SET DEFAULT KEYWORD                00079800
.ZG58C             ANOP  ,                                              00079900
&ZXMFSCK           SETC  'INPUT'     SET IN/OUTPUT                      00080000
.*------------------------------------------------------------------    00080100
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00080200
.ZG59              ANOP  ,                                              00080300
&ZXMF              SETC  'INPUT'     SET IN/OUTPUT                      00080400
                   AIF   (K'&XMF GT 0).ZG59E    VALID ARG               00080500
                   AIF   (T'&MF EQ 'O').ZG59D   OMITTED                 00080600
&ZASYSLNDX         SETA  0                                              00080700
.ZG59A             ANOP  ,           POSITIONAL MACRO KEY               00080800
&ZASYSLNDX         SETA  &ZASYSLNDX+1                                   00080900
                   AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG59C               00081000
&ZTLC              SETC 'MF'                                            00081100
                   AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG59A      00081200
.ZG59B             ANOP  ,                                              00081300
&ZXMF              SETC  ''          RESET IN/OUTPUT                    00081400
&ZMS               SETC  'THE "MF" KEY'         *KOPTA* MNOTE           00081500
&ZMS               SETC  '&ZMS MUST CONTAIN ONE'                        00081600
                   MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'               00081700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00081800
                   AGO   .ZG59E                                         00081900
.ZG59C             ANOP  ,                                              00082000
&ZXMF              SETC  ''          RESET IN/OUTPUT                    00082100
&ZMS               SETC  '"MF='      *KUKWA* MNOTE                      00082200
&ZMS               SETC  '&ZMS.&MF"'                                    00082300
&ZMS               SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '      00082400
&ZMS               SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'            00082500
&ZMS               SETC  '&ZMS "S",'            VALID KEYWORD           00082600
&ZMS               SETC  '&ZMS "L",'            VALID KEYWORD           00082700
&ZMS               SETC  '&ZMS "M",'            VALID KEYWORD           00082800
&ZMS               SETC  '&ZMS OR "E".'         VALID KEYWORD           00082900
                   MNOTE 8,' &ZMS '                                     00083000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00083100
                   AGO   .ZG59E                                         00083200
.ZG59D             ANOP  ,                                              00083300
&XMF               SETC  'S'         SET DEFAULT KEYWORD                00083400
&XMFSCK            SETC  'COMPLETE'  COMPLETE CHECKING                  00083500
.ZG59E             ANOP  ,                                              00083600
.********************************************************************   00083700
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00083800
.********************************************************************   00083900
                   ACTR  10000                                          00084000
.*-------------------------------------------------------------------   00084100
.***AG.MF03 MF=(SLME)                                                   00084200
                   AIF   ('&XMF' EQ 'L').ZGMFX                          00084300
                   AIF   ('&XMFSCK' NE 'COMPLETE').ZGMFX                00084400
.*----------------------------------------------------------------***   00084500
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00084600
                   AIF   (N'&PATTERNSTR LE 1).ZG5A  CK NUM              00084700
&ZMS               SETC  '"PATTERNSTR='         *KPOSA* MNOTE           00084800
&ZMS               SETC  '&ZMS.&PATTERNSTR"'                            00084900
&ZMS               SETC  '&ZMS "PATTERNSTR"'                            00085000
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00085100
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00085200
.ZG5A              ANOP  ,                                              00085300
.*-------------------------------------------------------------------   00085400
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00085500
&ZXPATTERNSTR      SETC  'INPUT'     SET IN/OUTPUT                      00085600
&XPATTERNSTR       SETC  '&PATTERNSTR(1)'       SET XVARIABLE           00085700
                   AIF   (N'&PATTERNSTR GT 1).ZG5B  MULTI PARMS         00085800
&XPATTERNSTR       SETC  '&PATTERNSTR'          SET XVARIABLE           00085900
.ZG5B              AIF   (K'&PATTERNSTR(1) GT 0).ZG5C                   00086000
&ZXPATTERNSTR      SETC  ''          RESET IN/OUTPUT                    00086100
&ZMS               SETC  ' '         *KRQDA*                            00086200
&ZMS               SETC  '&ZMS "PATTERNSTR" KEY AND ITS ARGUMENT'       00086300
                   MNOTE 8,' &ZMS ARE REQUIRED.'                        00086400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00086500
.ZG5C              ANOP  ,                                              00086600
.*-------------------------------------------------------------------   00086700
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00086800
                   AIF   (K'&ZXPATTERNSTR LE 0).ZG5R  NOT I/O           00086900
                   AIF   ('&XPATTERNSTR'(1,1) NE '(').ZG5R              00087000
&ZCGPR             SETC  '&XPATTERNSTR'(2,K'&XPATTERNSTR-2)             00087100
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG5P                    00087200
                   AIF   (K'&ZCGPR GT 2).ZG5Q                           00087300
                   AIF   ('&ZCGPR' EQ '0').ZG5Q                         00087400
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00087500
                   AIF   (T'&ZCGPR NE 'N').ZG5Q  INVALID REG NAME       00087600
.ZG5P              ANOP  ,                                              00087700
                   AIF   (T'&ZCGPR NE 'N').ZG5R  NON NUMERIC            00087800
                   AIF   ('&ZCGPR' LT '2').ZG5Q                         00087900
                   AIF   ('&ZCGPR' LE '12').ZG5R                        00088000
.ZG5Q              ANOP  ,                                              00088100
&ZMS               SETC  '"PATTERNSTR='         *KGPRA* MNOTE           00088200
&ZMS               SETC  '&ZMS.&PATTERNSTR"'                            00088300
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00088400
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00088500
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00088600
.ZG5R              ANOP  ,                                              00088700
.*----------------------------------------------------------------***   00088800
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00088900
                   AIF   (N'&PATTERNSTRLEN LE 1).ZG8A  CK NUM           00089000
&ZMS               SETC  '"PATTERNSTRLEN='      *KPOSA* MNOTE           00089100
&ZMS               SETC  '&ZMS.&PATTERNSTRLEN"'                         00089200
&ZMS               SETC  '&ZMS "PATTERNSTRLEN"'                         00089300
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00089400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00089500
.ZG8A              ANOP  ,                                              00089600
.*-------------------------------------------------------------------   00089700
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00089800
&ZXPATTERNSTRLEN   SETC  'INPUT'     SET IN/OUTPUT                      00089900
&XPATTERNSTRLEN    SETC  '&PATTERNSTRLEN(1)'    SET XVARIABLE           00090000
                   AIF   (N'&PATTERNSTRLEN GT 1).ZG8B  MULTI PARMS      00090100
&XPATTERNSTRLEN    SETC  '&PATTERNSTRLEN'       SET XVARIABLE           00090200
.ZG8B              AIF   (K'&PATTERNSTRLEN(1) GT 0).ZG8C                00090300
&ZXPATTERNSTRLEN   SETC  ''          RESET IN/OUTPUT                    00090400
&ZMS               SETC  ' '         *KRQDA*                            00090500
&ZMS               SETC  '&ZMS "PATTERNSTRLEN" KEY AND ITS ARGUMENT'    00090600
                   MNOTE 8,' &ZMS ARE REQUIRED.'                        00090700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00090800
.ZG8C              ANOP  ,                                              00090900
.*-------------------------------------------------------------------   00091000
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00091100
                   AIF   (K'&ZXPATTERNSTRLEN LE 0).ZG8R  NOT I/O        00091200
                   AIF   ('&XPATTERNSTRLEN'(1,1) NE '(').ZG8R           00091300
&ZCGPR             SETC  '&XPATTERNSTRLEN'(2,K'&XPATTERNSTRLEN-2)       00091400
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG8P                    00091500
                   AIF   (K'&ZCGPR GT 2).ZG8Q                           00091600
                   AIF   ('&ZCGPR' EQ '0').ZG8Q                         00091700
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00091800
                   AIF   (T'&ZCGPR NE 'N').ZG8Q  INVALID REG NAME       00091900
.ZG8P              ANOP  ,                                              00092000
                   AIF   (T'&ZCGPR NE 'N').ZG8R  NON NUMERIC            00092100
                   AIF   ('&ZCGPR' LT '2').ZG8Q                         00092200
                   AIF   ('&ZCGPR' LE '12').ZG8R                        00092300
.ZG8Q              ANOP  ,                                              00092400
&ZMS               SETC  '"PATTERNSTRLEN='      *KGPRA* MNOTE           00092500
&ZMS               SETC  '&ZMS.&PATTERNSTRLEN"'                         00092600
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00092700
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00092800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00092900
.ZG8R              ANOP  ,                                              00093000
.*----------------------------------------------------------------***   00093100
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00093200
                   AIF   (N'&STRING LE 1).ZG11A  CK NUM                 00093300
&ZMS               SETC  '"STRING='  *KPOSA* MNOTE                      00093400
&ZMS               SETC  '&ZMS.&STRING"'                                00093500
&ZMS               SETC  '&ZMS "STRING"'                                00093600
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00093700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00093800
.ZG11A             ANOP  ,                                              00093900
.*-------------------------------------------------------------------   00094000
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00094100
&ZXSTRING          SETC  'INPUT'     SET IN/OUTPUT                      00094200
&XSTRING           SETC  '&STRING(1)'           SET XVARIABLE           00094300
                   AIF   (N'&STRING GT 1).ZG11B  MULTI PARMS            00094400
&XSTRING           SETC  '&STRING'   SET XVARIABLE                      00094500
.ZG11B             AIF   (K'&STRING(1) GT 0).ZG11C                      00094600
&ZXSTRING          SETC  ''          RESET IN/OUTPUT                    00094700
&ZMS               SETC  ' '         *KRQDA*                            00094800
&ZMS               SETC  '&ZMS "STRING" KEY AND ITS ARGUMENT'           00094900
                   MNOTE 8,' &ZMS ARE REQUIRED.'                        00095000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00095100
.ZG11C             ANOP  ,                                              00095200
.*-------------------------------------------------------------------   00095300
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00095400
                   AIF   (K'&ZXSTRING LE 0).ZG11R  NOT I/O              00095500
                   AIF   ('&XSTRING'(1,1) NE '(').ZG11R                 00095600
&ZCGPR             SETC  '&XSTRING'(2,K'&XSTRING-2)                     00095700
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG11P                   00095800
                   AIF   (K'&ZCGPR GT 2).ZG11Q                          00095900
                   AIF   ('&ZCGPR' EQ '0').ZG11Q                        00096000
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00096100
                   AIF   (T'&ZCGPR NE 'N').ZG11Q  INVALID REG NAME      00096200
.ZG11P             ANOP  ,                                              00096300
                   AIF   (T'&ZCGPR NE 'N').ZG11R  NON NUMERIC           00096400
                   AIF   ('&ZCGPR' LT '2').ZG11Q                        00096500
                   AIF   ('&ZCGPR' LE '12').ZG11R                       00096600
.ZG11Q             ANOP  ,                                              00096700
&ZMS               SETC  '"STRING='  *KGPRA* MNOTE                      00096800
&ZMS               SETC  '&ZMS.&STRING"'                                00096900
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00097000
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00097100
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00097200
.ZG11R             ANOP  ,                                              00097300
.*----------------------------------------------------------------***   00097400
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00097500
                   AIF   (N'&STRINGLEN LE 1).ZG14A  CK NUM              00097600
&ZMS               SETC  '"STRINGLEN='          *KPOSA* MNOTE           00097700
&ZMS               SETC  '&ZMS.&STRINGLEN"'                             00097800
&ZMS               SETC  '&ZMS "STRINGLEN"'                             00097900
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00098000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00098100
.ZG14A             ANOP  ,                                              00098200
.*-------------------------------------------------------------------   00098300
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00098400
&ZXSTRINGLEN       SETC  'INPUT'     SET IN/OUTPUT                      00098500
&XSTRINGLEN        SETC  '&STRINGLEN(1)'        SET XVARIABLE           00098600
                   AIF   (N'&STRINGLEN GT 1).ZG14B  MULTI PARMS         00098700
&XSTRINGLEN        SETC  '&STRINGLEN'           SET XVARIABLE           00098800
.ZG14B             AIF   (K'&STRINGLEN(1) GT 0).ZG14C                   00098900
&ZXSTRINGLEN       SETC  ''          RESET IN/OUTPUT                    00099000
&ZMS               SETC  ' '         *KRQDA*                            00099100
&ZMS               SETC  '&ZMS "STRINGLEN" KEY AND ITS ARGUMENT'        00099200
                   MNOTE 8,' &ZMS ARE REQUIRED.'                        00099300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00099400
.ZG14C             ANOP  ,                                              00099500
.*-------------------------------------------------------------------   00099600
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00099700
                   AIF   (K'&ZXSTRINGLEN LE 0).ZG14R  NOT I/O           00099800
                   AIF   ('&XSTRINGLEN'(1,1) NE '(').ZG14R              00099900
&ZCGPR             SETC  '&XSTRINGLEN'(2,K'&XSTRINGLEN-2)               00100000
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG14P                   00100100
                   AIF   (K'&ZCGPR GT 2).ZG14Q                          00100200
                   AIF   ('&ZCGPR' EQ '0').ZG14Q                        00100300
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00100400
                   AIF   (T'&ZCGPR NE 'N').ZG14Q  INVALID REG NAME      00100500
.ZG14P             ANOP  ,                                              00100600
                   AIF   (T'&ZCGPR NE 'N').ZG14R  NON NUMERIC           00100700
                   AIF   ('&ZCGPR' LT '2').ZG14Q                        00100800
                   AIF   ('&ZCGPR' LE '12').ZG14R                       00100900
.ZG14Q             ANOP  ,                                              00101000
&ZMS               SETC  '"STRINGLEN='          *KGPRA* MNOTE           00101100
&ZMS               SETC  '&ZMS.&STRINGLEN"'                             00101200
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00101300
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00101400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00101500
.ZG14R             ANOP  ,                                              00101600
.*----------------------------------------------------------------***   00101700
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00101800
                   AIF   (N'&ZEROORMORE LE 1).ZG17A  CK NUM             00101900
&ZMS               SETC  '"ZEROORMORE='         *KPOSA* MNOTE           00102000
&ZMS               SETC  '&ZMS.&ZEROORMORE"'                            00102100
&ZMS               SETC  '&ZMS "ZEROORMORE"'                            00102200
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00102300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00102400
.ZG17A             ANOP  ,                                              00102500
.*-------------------------------------------------------------------   00102600
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00102700
&ZXZEROORMORE      SETC  'INPUT'     SET IN/OUTPUT                      00102800
&XZEROORMORE       SETC  '&ZEROORMORE(1)'       SET XVARIABLE           00102900
                   AIF   (N'&ZEROORMORE GT 1).ZG17B  MULTI PARMS        00103000
&XZEROORMORE       SETC  '&ZEROORMORE'          SET XVARIABLE           00103100
.ZG17B             AIF   (K'&ZEROORMORE(1) GT 0).ZG17C                  00103200
&ZXZEROORMORE      SETC  ''          RESET IN/OUTPUT                    00103300
&ZMS               SETC  ' '         *KRQDA*                            00103400
&ZMS               SETC  '&ZMS "ZEROORMORE" KEY AND ITS ARGUMENT'       00103500
                   MNOTE 8,' &ZMS ARE REQUIRED.'                        00103600
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00103700
.ZG17C             ANOP  ,                                              00103800
.*-------------------------------------------------------------------   00103900
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00104000
                   AIF   (K'&ZXZEROORMORE LE 0).ZG17R  NOT I/O          00104100
                   AIF   ('&XZEROORMORE'(1,1) NE '(').ZG17R             00104200
&ZCGPR             SETC  '&XZEROORMORE'(2,K'&XZEROORMORE-2)             00104300
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG17P                   00104400
                   AIF   (K'&ZCGPR GT 2).ZG17Q                          00104500
                   AIF   ('&ZCGPR' EQ '0').ZG17Q                        00104600
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00104700
                   AIF   (T'&ZCGPR NE 'N').ZG17Q  INVALID REG NAME      00104800
.ZG17P             ANOP  ,                                              00104900
                   AIF   (T'&ZCGPR NE 'N').ZG17R  NON NUMERIC           00105000
                   AIF   ('&ZCGPR' LT '2').ZG17Q                        00105100
                   AIF   ('&ZCGPR' LE '12').ZG17R                       00105200
.ZG17Q             ANOP  ,                                              00105300
&ZMS               SETC  '"ZEROORMORE='         *KGPRA* MNOTE           00105400
&ZMS               SETC  '&ZMS.&ZEROORMORE"'                            00105500
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00105600
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00105700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00105800
.ZG17R             ANOP  ,                                              00105900
.*----------------------------------------------------------------***   00106000
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00106100
                   AIF   (N'&ONECHAR LE 1).ZG20A  CK NUM                00106200
&ZMS               SETC  '"ONECHAR='            *KPOSA* MNOTE           00106300
&ZMS               SETC  '&ZMS.&ONECHAR"'                               00106400
&ZMS               SETC  '&ZMS "ONECHAR"'                               00106500
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00106600
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00106700
.ZG20A             ANOP  ,                                              00106800
.*-------------------------------------------------------------------   00106900
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00107000
&ZXONECHAR         SETC  'INPUT'     SET IN/OUTPUT                      00107100
&XONECHAR          SETC  '&ONECHAR(1)'          SET XVARIABLE           00107200
                   AIF   (N'&ONECHAR GT 1).ZG20B  MULTI PARMS           00107300
&XONECHAR          SETC  '&ONECHAR'  SET XVARIABLE                      00107400
.ZG20B             AIF   (K'&ONECHAR(1) GT 0).ZG20C                     00107500
&ZXONECHAR         SETC  ''          RESET IN/OUTPUT                    00107600
&ZMS               SETC  ' '         *KRQDA*                            00107700
&ZMS               SETC  '&ZMS "ONECHAR" KEY AND ITS ARGUMENT'          00107800
                   MNOTE 8,' &ZMS ARE REQUIRED.'                        00107900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00108000
.ZG20C             ANOP  ,                                              00108100
.*-------------------------------------------------------------------   00108200
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00108300
                   AIF   (K'&ZXONECHAR LE 0).ZG20R  NOT I/O             00108400
                   AIF   ('&XONECHAR'(1,1) NE '(').ZG20R                00108500
&ZCGPR             SETC  '&XONECHAR'(2,K'&XONECHAR-2)                   00108600
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG20P                   00108700
                   AIF   (K'&ZCGPR GT 2).ZG20Q                          00108800
                   AIF   ('&ZCGPR' EQ '0').ZG20Q                        00108900
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00109000
                   AIF   (T'&ZCGPR NE 'N').ZG20Q  INVALID REG NAME      00109100
.ZG20P             ANOP  ,                                              00109200
                   AIF   (T'&ZCGPR NE 'N').ZG20R  NON NUMERIC           00109300
                   AIF   ('&ZCGPR' LT '2').ZG20Q                        00109400
                   AIF   ('&ZCGPR' LE '12').ZG20R                       00109500
.ZG20Q             ANOP  ,                                              00109600
&ZMS               SETC  '"ONECHAR='            *KGPRA* MNOTE           00109700
&ZMS               SETC  '&ZMS.&ONECHAR"'                               00109800
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00109900
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00110000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00110100
.ZG20R             ANOP  ,                                              00110200
.*----------------------------------------------------------------***   00110300
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00110400
                   AIF   (N'&DELIMITER LE 1).ZG23A  CK NUM              00110500
&ZMS               SETC  '"DELIMITER='          *KPOSA* MNOTE           00110600
&ZMS               SETC  '&ZMS.&DELIMITER"'                             00110700
&ZMS               SETC  '&ZMS "DELIMITER"'                             00110800
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00110900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00111000
.ZG23A             ANOP  ,                                              00111100
.*-------------------------------------------------------------------   00111200
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00111300
&ZXDELIMITER       SETC  'INPUT'     SET IN/OUTPUT                      00111400
&XDELIMITER        SETC  'LENGTHS_WERE_SET'                             00111500
                   AIF   (K'&DELIMITER(1) LE 0).ZG23B  PARM             00111600
&XDELIMITER        SETC  '&DELIMITER(1)'        SET XVARIABLE           00111700
                   AIF   (N'&DELIMITER GT 1).ZG23B  MULTI PARMS         00111800
&XDELIMITER        SETC  '&DELIMITER'           SET XVARIABLE           00111900
.ZG23B             ANOP  ,                                              00112000
.*-------------------------------------------------------------------   00112100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00112200
                   AIF   (K'&ZXDELIMITER LE 0).ZG23R  NOT I/O           00112300
                   AIF   ('&XDELIMITER' EQ 'LENGTHS_WERE_SET').ZG23R    00112400
                   AIF   ('&XDELIMITER'(1,1) NE '(').ZG23R              00112500
&ZCGPR             SETC  '&XDELIMITER'(2,K'&XDELIMITER-2)               00112600
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG23P                   00112700
                   AIF   (K'&ZCGPR GT 2).ZG23Q                          00112800
                   AIF   ('&ZCGPR' EQ '0').ZG23Q                        00112900
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00113000
                   AIF   (T'&ZCGPR NE 'N').ZG23Q  INVALID REG NAME      00113100
.ZG23P             ANOP  ,                                              00113200
                   AIF   (T'&ZCGPR NE 'N').ZG23R  NON NUMERIC           00113300
                   AIF   ('&ZCGPR' LT '2').ZG23Q                        00113400
                   AIF   ('&ZCGPR' LE '12').ZG23R                       00113500
.ZG23Q             ANOP  ,                                              00113600
&ZMS               SETC  '"DELIMITER='          *KGPRA* MNOTE           00113700
&ZMS               SETC  '&ZMS.&DELIMITER"'                             00113800
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00113900
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00114000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00114100
.ZG23R             ANOP  ,                                              00114200
.*----------------------------------------------------------------***   00114300
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00114400
                   AIF   (N'&WORKAREA LE 1).ZG26A  CK NUM               00114500
&ZMS               SETC  '"WORKAREA='           *KPOSA* MNOTE           00114600
&ZMS               SETC  '&ZMS.&WORKAREA"'                              00114700
&ZMS               SETC  '&ZMS "WORKAREA"'                              00114800
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00114900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00115000
.ZG26A             ANOP  ,                                              00115100
.*-------------------------------------------------------------------   00115200
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00115300
&ZXWORKAREA        SETC  'INPUT'     SET IN/OUTPUT                      00115400
&XWORKAREA         SETC  'NO_WORKAREA'                                  00115500
                   AIF   (K'&WORKAREA(1) LE 0).ZG26B  PARM              00115600
&XWORKAREA         SETC  '&WORKAREA(1)'         SET XVARIABLE           00115700
                   AIF   (N'&WORKAREA GT 1).ZG26B  MULTI PARMS          00115800
&XWORKAREA         SETC  '&WORKAREA'            SET XVARIABLE           00115900
.ZG26B             ANOP  ,                                              00116000
.*-------------------------------------------------------------------   00116100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00116200
                   AIF   (K'&ZXWORKAREA LE 0).ZG26R  NOT I/O            00116300
                   AIF   ('&XWORKAREA' EQ 'NO_WORKAREA').ZG26R          00116400
                   AIF   ('&XWORKAREA'(1,1) NE '(').ZG26R               00116500
&ZCGPR             SETC  '&XWORKAREA'(2,K'&XWORKAREA-2)                 00116600
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG26P                   00116700
                   AIF   (K'&ZCGPR GT 2).ZG26Q                          00116800
                   AIF   ('&ZCGPR' EQ '0').ZG26Q                        00116900
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00117000
                   AIF   (T'&ZCGPR NE 'N').ZG26Q  INVALID REG NAME      00117100
.ZG26P             ANOP  ,                                              00117200
                   AIF   (T'&ZCGPR NE 'N').ZG26R  NON NUMERIC           00117300
                   AIF   ('&ZCGPR' LT '2').ZG26Q                        00117400
                   AIF   ('&ZCGPR' LE '12').ZG26R                       00117500
.ZG26Q             ANOP  ,                                              00117600
&ZMS               SETC  '"WORKAREA='           *KGPRA* MNOTE           00117700
&ZMS               SETC  '&ZMS.&WORKAREA"'                              00117800
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00117900
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00118000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00118100
.ZG26R             ANOP  ,                                              00118200
.*----------------------------------------------------------------***   00118300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00118400
                   AIF   (N'&RETCODE LE 1).ZG29A  CK NUM                00118500
&ZMS               SETC  '"RETCODE='            *KPOSA* MNOTE           00118600
&ZMS               SETC  '&ZMS.&RETCODE"'                               00118700
&ZMS               SETC  '&ZMS "RETCODE"'                               00118800
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00118900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00119000
.ZG29A             ANOP  ,                                              00119100
.*-------------------------------------------------------------------   00119200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00119300
                   AIF   (K'&RETCODE(1) LE 0).ZG29C  NO PARM            00119400
&ZXRETCODE         SETC  'OUTPUT'    SET OUTPUT                         00119500
&XRETCODE          SETC  '&RETCODE(1)'          SET XVARIABLE           00119600
                   AIF   (N'&RETCODE GT 1).ZG29C                        00119700
&XRETCODE          SETC  '&RETCODE'  SET XVARIABLE                      00119800
.ZG29C             ANOP  ,                                              00119900
.*-------------------------------------------------------------------   00120000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00120100
                   AIF   (K'&ZXRETCODE LE 0).ZG29R  NOT I/O             00120200
                   AIF   ('&XRETCODE'(1,1) NE '(').ZG29R                00120300
&ZCGPR             SETC  '&XRETCODE'(2,K'&XRETCODE-2)                   00120400
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG29P                   00120500
                   AIF   (K'&ZCGPR GT 2).ZG29Q                          00120600
                   AIF   ('&ZCGPR' EQ '0').ZG29Q                        00120700
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00120800
                   AIF   (T'&ZCGPR NE 'N').ZG29Q  INVALID REG NAME      00120900
.ZG29P             ANOP  ,                                              00121000
                   AIF   (T'&ZCGPR NE 'N').ZG29R  NON NUMERIC           00121100
                   AIF   ('&ZCGPR' LT '2').ZG29Q                        00121200
                   AIF   ('&ZCGPR' LE '12').ZG29R                       00121300
.ZG29Q             ANOP  ,                                              00121400
&ZMS               SETC  '"RETCODE='            *KGPRA* MNOTE           00121500
&ZMS               SETC  '&ZMS.&RETCODE"'                               00121600
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00121700
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00121800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00121900
.ZG29R             ANOP  ,                                              00122000
.******************************************************************     00122100
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00122200
.******************************************************************     00122300
                   ACTR  10000                                          00122400
.*----------------------------------------------------------------***   00122500
.***AH.P02 EXTRA POSITIONALS                                            00122600
                   AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS           00122700
&ZCVAL             SETC  ''          ERROR FIELD                        00122800
&ZAWRK             SETA  0           POSITIONAL NUMBER                  00122900
.ZGLIST2           ANOP  ,                                              00123000
&ZAWRK             SETA  &ZAWRK+1    NEXT POSITIONAL                    00123100
                   AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE           00123200
&ZCVAL             SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA                00123300
                   AGO   .ZGLIST2                                       00123400
.*                                                                      00123500
.ZGLIST3           ANOP  ,                                              00123600
&ZCVAL             SETC '&ZCVAL'(2,K'&ZCVAL-1)  STRIP COMMA             00123700
&ZMS               SETC  'POSITIONAL ARGUMENT(S),'  *PPOSA* MNOTE       00123800
&ZMS               SETC  '&ZMS "&ZCVAL"'                                00123900
&ZMS               SETC  '&ZMS CANNOT BE USED.'                         00124000
&ZMS               SETC  '&ZMS NO POSITIONAL ARGUMENTS'                 00124100
                   MNOTE 8,' &ZMS ARE ALLOWED.'                         00124200
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00124300
.ZGLISTX           ANOP  ,                                              00124400
&ZASYSLNDX         SETA  0                                              00124500
.*-------------------------------------------------------------------   00124600
.***AG.MF04 MF=(SLME)                                                   00124700
.ZGMFX             ANOP  ,           END OF FULL SYNTAX CHECK           00124800
.********************************************************************   00124900
.***AE.MF01   PARTIAL MACRO SYNTAX CHECKING                             00125000
.********************************************************************   00125100
                   ACTR  10000                                          00125200
.*-------------------------------------------------------------------   00125300
.***AE.MF01 MF=(SLME)                                                   00125400
                   AIF   ('&XMF' EQ 'L').ZEMFX                          00125500
                   AIF   ('&XMFSCK' NE 'NOCHECK').ZEMFX                 00125600
.********************************************************************   00125700
.***AE.KC00 INITIALIZE KEYWORD CONTROL VARIABLES                        00125800
.********************************************************************   00125900
.*----------------------------------------------------------------***   00126000
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          00126100
                   AIF   (N'&PATTERNSTR LE 1).ZE5A  CK NUM              00126200
&ZMS               SETC  '"PATTERNSTR='         *KPOSA* MNOTE           00126300
&ZMS               SETC  '&ZMS.&PATTERNSTR"'                            00126400
&ZMS               SETC  '&ZMS "PATTERNSTR"'                            00126500
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00126600
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00126700
.ZE5A              ANOP  ,                                              00126800
.*-------------------------------------------------------------------   00126900
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     00127000
                   AIF   (K'&PATTERNSTR(1) LE 0).ZE5B NO PRM            00127100
&ZXPATTERNSTR      SETC  'INPUT'     SET IN/OUTPUT                      00127200
&XPATTERNSTR       SETC  '&PATTERNSTR(1)'       SET XVARIABLE           00127300
                   AIF   (N'&PATTERNSTR GT 1).ZE5B                      00127400
.*                 ANOP              MULTIPLE PARMS                     00127500
&XPATTERNSTR       SETC  '&PATTERNSTR'          SET XVARIABLE           00127600
.ZE5B              ANOP  ,                                              00127700
.*-------------------------------------------------------------------   00127800
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00127900
                   AIF   (K'&ZXPATTERNSTR LE 0).ZE5R  NOT I/O           00128000
                   AIF   ('&XPATTERNSTR'(1,1) NE '(').ZE5R              00128100
&ZCGPR             SETC  '&XPATTERNSTR'(2,K'&XPATTERNSTR-2)             00128200
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE5P                    00128300
                   AIF   (K'&ZCGPR GT 2).ZE5Q                           00128400
                   AIF   ('&ZCGPR' EQ '0').ZE5Q                         00128500
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00128600
                   AIF   (T'&ZCGPR NE 'N').ZE5Q  INVALID REG NAME       00128700
.ZE5P              ANOP  ,                                              00128800
                   AIF   (T'&ZCGPR NE 'N').ZE5R  NON NUMERIC            00128900
                   AIF   ('&ZCGPR' LT '2').ZE5Q                         00129000
                   AIF   ('&ZCGPR' LE '12').ZE5R                        00129100
.ZE5Q              ANOP  ,                                              00129200
&ZMS               SETC  '"PATTERNSTR='         *KGPRA* MNOTE           00129300
&ZMS               SETC  '&ZMS.&PATTERNSTR"'                            00129400
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00129500
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00129600
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00129700
.ZE5R              ANOP  ,                                              00129800
.*----------------------------------------------------------------***   00129900
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          00130000
                   AIF   (N'&PATTERNSTRLEN LE 1).ZE8A  CK NUM           00130100
&ZMS               SETC  '"PATTERNSTRLEN='      *KPOSA* MNOTE           00130200
&ZMS               SETC  '&ZMS.&PATTERNSTRLEN"'                         00130300
&ZMS               SETC  '&ZMS "PATTERNSTRLEN"'                         00130400
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00130500
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00130600
.ZE8A              ANOP  ,                                              00130700
.*-------------------------------------------------------------------   00130800
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     00130900
                   AIF   (K'&PATTERNSTRLEN(1) LE 0).ZE8B NO PRM         00131000
&ZXPATTERNSTRLEN   SETC  'INPUT'     SET IN/OUTPUT                      00131100
&XPATTERNSTRLEN    SETC  '&PATTERNSTRLEN(1)'    SET XVARIABLE           00131200
                   AIF   (N'&PATTERNSTRLEN GT 1).ZE8B                   00131300
.*                 ANOP              MULTIPLE PARMS                     00131400
&XPATTERNSTRLEN    SETC  '&PATTERNSTRLEN'       SET XVARIABLE           00131500
.ZE8B              ANOP  ,                                              00131600
.*-------------------------------------------------------------------   00131700
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00131800
                   AIF   (K'&ZXPATTERNSTRLEN LE 0).ZE8R  NOT I/O        00131900
                   AIF   ('&XPATTERNSTRLEN'(1,1) NE '(').ZE8R           00132000
&ZCGPR             SETC  '&XPATTERNSTRLEN'(2,K'&XPATTERNSTRLEN-2)       00132100
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE8P                    00132200
                   AIF   (K'&ZCGPR GT 2).ZE8Q                           00132300
                   AIF   ('&ZCGPR' EQ '0').ZE8Q                         00132400
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00132500
                   AIF   (T'&ZCGPR NE 'N').ZE8Q  INVALID REG NAME       00132600
.ZE8P              ANOP  ,                                              00132700
                   AIF   (T'&ZCGPR NE 'N').ZE8R  NON NUMERIC            00132800
                   AIF   ('&ZCGPR' LT '2').ZE8Q                         00132900
                   AIF   ('&ZCGPR' LE '12').ZE8R                        00133000
.ZE8Q              ANOP  ,                                              00133100
&ZMS               SETC  '"PATTERNSTRLEN='      *KGPRA* MNOTE           00133200
&ZMS               SETC  '&ZMS.&PATTERNSTRLEN"'                         00133300
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00133400
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00133500
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00133600
.ZE8R              ANOP  ,                                              00133700
.*----------------------------------------------------------------***   00133800
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          00133900
                   AIF   (N'&STRING LE 1).ZE11A  CK NUM                 00134000
&ZMS               SETC  '"STRING='  *KPOSA* MNOTE                      00134100
&ZMS               SETC  '&ZMS.&STRING"'                                00134200
&ZMS               SETC  '&ZMS "STRING"'                                00134300
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00134400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00134500
.ZE11A             ANOP  ,                                              00134600
.*-------------------------------------------------------------------   00134700
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     00134800
                   AIF   (K'&STRING(1) LE 0).ZE11B NO PRM               00134900
&ZXSTRING          SETC  'INPUT'     SET IN/OUTPUT                      00135000
&XSTRING           SETC  '&STRING(1)'           SET XVARIABLE           00135100
                   AIF   (N'&STRING GT 1).ZE11B                         00135200
.*                 ANOP              MULTIPLE PARMS                     00135300
&XSTRING           SETC  '&STRING'   SET XVARIABLE                      00135400
.ZE11B             ANOP  ,                                              00135500
.*-------------------------------------------------------------------   00135600
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00135700
                   AIF   (K'&ZXSTRING LE 0).ZE11R  NOT I/O              00135800
                   AIF   ('&XSTRING'(1,1) NE '(').ZE11R                 00135900
&ZCGPR             SETC  '&XSTRING'(2,K'&XSTRING-2)                     00136000
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE11P                   00136100
                   AIF   (K'&ZCGPR GT 2).ZE11Q                          00136200
                   AIF   ('&ZCGPR' EQ '0').ZE11Q                        00136300
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00136400
                   AIF   (T'&ZCGPR NE 'N').ZE11Q  INVALID REG NAME      00136500
.ZE11P             ANOP  ,                                              00136600
                   AIF   (T'&ZCGPR NE 'N').ZE11R  NON NUMERIC           00136700
                   AIF   ('&ZCGPR' LT '2').ZE11Q                        00136800
                   AIF   ('&ZCGPR' LE '12').ZE11R                       00136900
.ZE11Q             ANOP  ,                                              00137000
&ZMS               SETC  '"STRING='  *KGPRA* MNOTE                      00137100
&ZMS               SETC  '&ZMS.&STRING"'                                00137200
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00137300
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00137400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00137500
.ZE11R             ANOP  ,                                              00137600
.*----------------------------------------------------------------***   00137700
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          00137800
                   AIF   (N'&STRINGLEN LE 1).ZE14A  CK NUM              00137900
&ZMS               SETC  '"STRINGLEN='          *KPOSA* MNOTE           00138000
&ZMS               SETC  '&ZMS.&STRINGLEN"'                             00138100
&ZMS               SETC  '&ZMS "STRINGLEN"'                             00138200
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00138300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00138400
.ZE14A             ANOP  ,                                              00138500
.*-------------------------------------------------------------------   00138600
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     00138700
                   AIF   (K'&STRINGLEN(1) LE 0).ZE14B NO PRM            00138800
&ZXSTRINGLEN       SETC  'INPUT'     SET IN/OUTPUT                      00138900
&XSTRINGLEN        SETC  '&STRINGLEN(1)'        SET XVARIABLE           00139000
                   AIF   (N'&STRINGLEN GT 1).ZE14B                      00139100
.*                 ANOP              MULTIPLE PARMS                     00139200
&XSTRINGLEN        SETC  '&STRINGLEN'           SET XVARIABLE           00139300
.ZE14B             ANOP  ,                                              00139400
.*-------------------------------------------------------------------   00139500
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00139600
                   AIF   (K'&ZXSTRINGLEN LE 0).ZE14R  NOT I/O           00139700
                   AIF   ('&XSTRINGLEN'(1,1) NE '(').ZE14R              00139800
&ZCGPR             SETC  '&XSTRINGLEN'(2,K'&XSTRINGLEN-2)               00139900
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE14P                   00140000
                   AIF   (K'&ZCGPR GT 2).ZE14Q                          00140100
                   AIF   ('&ZCGPR' EQ '0').ZE14Q                        00140200
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00140300
                   AIF   (T'&ZCGPR NE 'N').ZE14Q  INVALID REG NAME      00140400
.ZE14P             ANOP  ,                                              00140500
                   AIF   (T'&ZCGPR NE 'N').ZE14R  NON NUMERIC           00140600
                   AIF   ('&ZCGPR' LT '2').ZE14Q                        00140700
                   AIF   ('&ZCGPR' LE '12').ZE14R                       00140800
.ZE14Q             ANOP  ,                                              00140900
&ZMS               SETC  '"STRINGLEN='          *KGPRA* MNOTE           00141000
&ZMS               SETC  '&ZMS.&STRINGLEN"'                             00141100
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00141200
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00141300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00141400
.ZE14R             ANOP  ,                                              00141500
.*----------------------------------------------------------------***   00141600
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          00141700
                   AIF   (N'&ZEROORMORE LE 1).ZE17A  CK NUM             00141800
&ZMS               SETC  '"ZEROORMORE='         *KPOSA* MNOTE           00141900
&ZMS               SETC  '&ZMS.&ZEROORMORE"'                            00142000
&ZMS               SETC  '&ZMS "ZEROORMORE"'                            00142100
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00142200
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00142300
.ZE17A             ANOP  ,                                              00142400
.*-------------------------------------------------------------------   00142500
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     00142600
                   AIF   (K'&ZEROORMORE(1) LE 0).ZE17B NO PRM           00142700
&ZXZEROORMORE      SETC  'INPUT'     SET IN/OUTPUT                      00142800
&XZEROORMORE       SETC  '&ZEROORMORE(1)'       SET XVARIABLE           00142900
                   AIF   (N'&ZEROORMORE GT 1).ZE17B                     00143000
.*                 ANOP              MULTIPLE PARMS                     00143100
&XZEROORMORE       SETC  '&ZEROORMORE'          SET XVARIABLE           00143200
.ZE17B             ANOP  ,                                              00143300
.*-------------------------------------------------------------------   00143400
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00143500
                   AIF   (K'&ZXZEROORMORE LE 0).ZE17R  NOT I/O          00143600
                   AIF   ('&XZEROORMORE'(1,1) NE '(').ZE17R             00143700
&ZCGPR             SETC  '&XZEROORMORE'(2,K'&XZEROORMORE-2)             00143800
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE17P                   00143900
                   AIF   (K'&ZCGPR GT 2).ZE17Q                          00144000
                   AIF   ('&ZCGPR' EQ '0').ZE17Q                        00144100
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00144200
                   AIF   (T'&ZCGPR NE 'N').ZE17Q  INVALID REG NAME      00144300
.ZE17P             ANOP  ,                                              00144400
                   AIF   (T'&ZCGPR NE 'N').ZE17R  NON NUMERIC           00144500
                   AIF   ('&ZCGPR' LT '2').ZE17Q                        00144600
                   AIF   ('&ZCGPR' LE '12').ZE17R                       00144700
.ZE17Q             ANOP  ,                                              00144800
&ZMS               SETC  '"ZEROORMORE='         *KGPRA* MNOTE           00144900
&ZMS               SETC  '&ZMS.&ZEROORMORE"'                            00145000
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00145100
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00145200
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00145300
.ZE17R             ANOP  ,                                              00145400
.*----------------------------------------------------------------***   00145500
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          00145600
                   AIF   (N'&ONECHAR LE 1).ZE20A  CK NUM                00145700
&ZMS               SETC  '"ONECHAR='            *KPOSA* MNOTE           00145800
&ZMS               SETC  '&ZMS.&ONECHAR"'                               00145900
&ZMS               SETC  '&ZMS "ONECHAR"'                               00146000
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00146100
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00146200
.ZE20A             ANOP  ,                                              00146300
.*-------------------------------------------------------------------   00146400
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     00146500
                   AIF   (K'&ONECHAR(1) LE 0).ZE20B NO PRM              00146600
&ZXONECHAR         SETC  'INPUT'     SET IN/OUTPUT                      00146700
&XONECHAR          SETC  '&ONECHAR(1)'          SET XVARIABLE           00146800
                   AIF   (N'&ONECHAR GT 1).ZE20B                        00146900
.*                 ANOP              MULTIPLE PARMS                     00147000
&XONECHAR          SETC  '&ONECHAR'  SET XVARIABLE                      00147100
.ZE20B             ANOP  ,                                              00147200
.*-------------------------------------------------------------------   00147300
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00147400
                   AIF   (K'&ZXONECHAR LE 0).ZE20R  NOT I/O             00147500
                   AIF   ('&XONECHAR'(1,1) NE '(').ZE20R                00147600
&ZCGPR             SETC  '&XONECHAR'(2,K'&XONECHAR-2)                   00147700
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE20P                   00147800
                   AIF   (K'&ZCGPR GT 2).ZE20Q                          00147900
                   AIF   ('&ZCGPR' EQ '0').ZE20Q                        00148000
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00148100
                   AIF   (T'&ZCGPR NE 'N').ZE20Q  INVALID REG NAME      00148200
.ZE20P             ANOP  ,                                              00148300
                   AIF   (T'&ZCGPR NE 'N').ZE20R  NON NUMERIC           00148400
                   AIF   ('&ZCGPR' LT '2').ZE20Q                        00148500
                   AIF   ('&ZCGPR' LE '12').ZE20R                       00148600
.ZE20Q             ANOP  ,                                              00148700
&ZMS               SETC  '"ONECHAR='            *KGPRA* MNOTE           00148800
&ZMS               SETC  '&ZMS.&ONECHAR"'                               00148900
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00149000
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00149100
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00149200
.ZE20R             ANOP  ,                                              00149300
.*----------------------------------------------------------------***   00149400
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          00149500
                   AIF   (N'&DELIMITER LE 1).ZE23A  CK NUM              00149600
&ZMS               SETC  '"DELIMITER='          *KPOSA* MNOTE           00149700
&ZMS               SETC  '&ZMS.&DELIMITER"'                             00149800
&ZMS               SETC  '&ZMS "DELIMITER"'                             00149900
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00150000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00150100
.ZE23A             ANOP  ,                                              00150200
.*-------------------------------------------------------------------   00150300
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     00150400
                   AIF   (K'&DELIMITER(1) LE 0).ZE23B NO PRM            00150500
&ZXDELIMITER       SETC  'INPUT'     SET IN/OUTPUT                      00150600
&XDELIMITER        SETC  '&DELIMITER(1)'        SET XVARIABLE           00150700
                   AIF   (N'&DELIMITER GT 1).ZE23B                      00150800
.*                 ANOP              MULTIPLE PARMS                     00150900
&XDELIMITER        SETC  '&DELIMITER'           SET XVARIABLE           00151000
.ZE23B             ANOP  ,                                              00151100
.*-------------------------------------------------------------------   00151200
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00151300
                   AIF   (K'&ZXDELIMITER LE 0).ZE23R  NOT I/O           00151400
                   AIF   ('&XDELIMITER'(1,1) NE '(').ZE23R              00151500
&ZCGPR             SETC  '&XDELIMITER'(2,K'&XDELIMITER-2)               00151600
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE23P                   00151700
                   AIF   (K'&ZCGPR GT 2).ZE23Q                          00151800
                   AIF   ('&ZCGPR' EQ '0').ZE23Q                        00151900
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00152000
                   AIF   (T'&ZCGPR NE 'N').ZE23Q  INVALID REG NAME      00152100
.ZE23P             ANOP  ,                                              00152200
                   AIF   (T'&ZCGPR NE 'N').ZE23R  NON NUMERIC           00152300
                   AIF   ('&ZCGPR' LT '2').ZE23Q                        00152400
                   AIF   ('&ZCGPR' LE '12').ZE23R                       00152500
.ZE23Q             ANOP  ,                                              00152600
&ZMS               SETC  '"DELIMITER='          *KGPRA* MNOTE           00152700
&ZMS               SETC  '&ZMS.&DELIMITER"'                             00152800
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00152900
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00153000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00153100
.ZE23R             ANOP  ,                                              00153200
.*----------------------------------------------------------------***   00153300
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          00153400
                   AIF   (N'&WORKAREA LE 1).ZE26A  CK NUM               00153500
&ZMS               SETC  '"WORKAREA='           *KPOSA* MNOTE           00153600
&ZMS               SETC  '&ZMS.&WORKAREA"'                              00153700
&ZMS               SETC  '&ZMS "WORKAREA"'                              00153800
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00153900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00154000
.ZE26A             ANOP  ,                                              00154100
.*-------------------------------------------------------------------   00154200
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     00154300
                   AIF   (K'&WORKAREA(1) LE 0).ZE26B NO PRM             00154400
&ZXWORKAREA        SETC  'INPUT'     SET IN/OUTPUT                      00154500
&XWORKAREA         SETC  '&WORKAREA(1)'         SET XVARIABLE           00154600
                   AIF   (N'&WORKAREA GT 1).ZE26B                       00154700
.*                 ANOP              MULTIPLE PARMS                     00154800
&XWORKAREA         SETC  '&WORKAREA'            SET XVARIABLE           00154900
.ZE26B             ANOP  ,                                              00155000
.*-------------------------------------------------------------------   00155100
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00155200
                   AIF   (K'&ZXWORKAREA LE 0).ZE26R  NOT I/O            00155300
                   AIF   ('&XWORKAREA'(1,1) NE '(').ZE26R               00155400
&ZCGPR             SETC  '&XWORKAREA'(2,K'&XWORKAREA-2)                 00155500
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE26P                   00155600
                   AIF   (K'&ZCGPR GT 2).ZE26Q                          00155700
                   AIF   ('&ZCGPR' EQ '0').ZE26Q                        00155800
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00155900
                   AIF   (T'&ZCGPR NE 'N').ZE26Q  INVALID REG NAME      00156000
.ZE26P             ANOP  ,                                              00156100
                   AIF   (T'&ZCGPR NE 'N').ZE26R  NON NUMERIC           00156200
                   AIF   ('&ZCGPR' LT '2').ZE26Q                        00156300
                   AIF   ('&ZCGPR' LE '12').ZE26R                       00156400
.ZE26Q             ANOP  ,                                              00156500
&ZMS               SETC  '"WORKAREA='           *KGPRA* MNOTE           00156600
&ZMS               SETC  '&ZMS.&WORKAREA"'                              00156700
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00156800
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00156900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00157000
.ZE26R             ANOP  ,                                              00157100
.*----------------------------------------------------------------***   00157200
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         00157300
                   AIF   (N'&RETCODE LE 1).ZE29A  CK NUM                00157400
&ZMS               SETC  '"RETCODE='            *KPOSA* MNOTE           00157500
&ZMS               SETC  '&ZMS.&RETCODE"'                               00157600
&ZMS               SETC  '&ZMS "RETCODE"'                               00157700
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00157800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00157900
.ZE29A             ANOP  ,                                              00158000
.*-------------------------------------------------------------------   00158100
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    00158200
                   AIF   (K'&RETCODE(1) LE 0).ZE29B NO PRM              00158300
&ZXRETCODE         SETC  'OUTPUT'    SET IN/OUTPUT                      00158400
&XRETCODE          SETC  '&RETCODE(1)'          SET XVARIABLE           00158500
                   AIF   (N'&RETCODE GT 1).ZE29B                        00158600
.*                 ANOP              MULTIPLE PARMS                     00158700
&XRETCODE          SETC  '&RETCODE'  SET XVARIABLE                      00158800
.ZE29B             ANOP  ,                                              00158900
.*-------------------------------------------------------------------   00159000
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00159100
                   AIF   (K'&ZXRETCODE LE 0).ZE29R  NOT I/O             00159200
                   AIF   ('&XRETCODE'(1,1) NE '(').ZE29R                00159300
&ZCGPR             SETC  '&XRETCODE'(2,K'&XRETCODE-2)                   00159400
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE29P                   00159500
                   AIF   (K'&ZCGPR GT 2).ZE29Q                          00159600
                   AIF   ('&ZCGPR' EQ '0').ZE29Q                        00159700
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00159800
                   AIF   (T'&ZCGPR NE 'N').ZE29Q  INVALID REG NAME      00159900
.ZE29P             ANOP  ,                                              00160000
                   AIF   (T'&ZCGPR NE 'N').ZE29R  NON NUMERIC           00160100
                   AIF   ('&ZCGPR' LT '2').ZE29Q                        00160200
                   AIF   ('&ZCGPR' LE '12').ZE29R                       00160300
.ZE29Q             ANOP  ,                                              00160400
&ZMS               SETC  '"RETCODE='            *KGPRA* MNOTE           00160500
&ZMS               SETC  '&ZMS.&RETCODE"'                               00160600
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00160700
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00160800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00160900
.ZE29R             ANOP  ,                                              00161000
.******************************************************************     00161100
.***AF.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00161200
.******************************************************************     00161300
                   ACTR  10000                                          00161400
.*----------------------------------------------------------------***   00161500
.***AF.P02 EXTRA POSITIONALS                                            00161600
                   AIF   (N'&SYSLIST LE 0).ZELISTX  NO EXTRAS           00161700
&ZCVAL             SETC  ''          ERROR FIELD                        00161800
&ZAWRK             SETA  0           POSITIONAL NUMBER                  00161900
.ZELIST2           ANOP  ,                                              00162000
&ZAWRK             SETA  &ZAWRK+1    NEXT POSITIONAL                    00162100
                   AIF   (&ZAWRK GT N'&SYSLIST).ZELIST3  DONE           00162200
&ZCVAL             SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA                00162300
                   AGO   .ZELIST2                                       00162400
.*                                                                      00162500
.ZELIST3           ANOP  ,                                              00162600
&ZCVAL             SETC '&ZCVAL'(2,K'&ZCVAL-1)  STRIP COMMA             00162700
&ZMS               SETC  'POSITIONAL ARGUMENT(S),'  *PPOSA* MNOTE       00162800
&ZMS               SETC  '&ZMS "&ZCVAL"'                                00162900
&ZMS               SETC  '&ZMS CANNOT BE USED.'                         00163000
&ZMS               SETC  '&ZMS NO POSITIONAL ARGUMENTS'                 00163100
                   MNOTE 8,' &ZMS ARE ALLOWED.'                         00163200
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00163300
.ZELISTX           ANOP  ,                                              00163400
&ZASYSLNDX         SETA  0                                              00163500
.*-------------------------------------------------------------------   00163600
.***AE.MF02 MF=(SLME)                                                   00163700
.ZEMFX             ANOP  ,           END OF PARTIAL SYNTAX CHECK        00163800
.*******************************************************************    00163900
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00164000
.*******************************************************************    00164100
                   AIF   (&ZMACRET NE 0).ZLX2   ERROR DETECTED          00164200
.*******************************************************************    00164300
.***AE.01  START OF ASAXWC MACRO CODE                                   00164400
.*******************************************************************    00164500
                   LCLC  &M0M0001                 NAME                  00164600
&M0M0001           SETC  '&XLABEL'                SET NAME              00164700
                   AIF   (K'&XLABEL NE 0).XLAB2                         00164800
&M0M0001           SETC  'M00M&SYSNDX'            DEFAULT NAME          00164900
.*                                                                      00165000
.XLAB2             ANOP  ,                                              00165100
&M0M0001 DS    0H                             ASAXWC-0                  00165200
.*******************************************************************    00165300
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00165400
.*******************************************************************    00165500
              PUSH  PRINT                                               00165600
                   AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON     00165700
                   PRINT OFF         ++ PR01                            00165800
                   AGO   .ZPRNTXX                                       00165900
.ZPRINTX           PRINT ON                                             00166000
.ZPRNTXX           ANOP  ,                                              00166100
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00166200
         AIF   ('&XMF' NE 'M' OR '&WORKAREA' EQ '').WORKOK       @L1A   00166300
         MNOTE 8,' WORKAREA IS NOT ALLOWED WITH MF=M'                   00166400
&ZMACRET SETA  8      SET MACRO ERROR RETURN CODE                       00166500
.WORKOK  ANOP                                                    @L1A   00166600
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00166700
.********************************************************************   00166800
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00166900
.********************************************************************   00167000
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00167100
                      LCLA  &ZOPN1         INVOCATION INDEX             00167200
                      LCLC  &ZOPL(4095)    LABEL                        00167300
                      LCLC  &ZOPO(4095)    OPERATION                    00167400
                      LCLC  &ZOPV(4095)    VALUE                        00167500
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00167600
.*                                                                      00167700
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00167800
.******************************************************************     00167900
.***AL.L10 ASAXWC FMT=LIST MF=S|L PARAMETERS                            00168000
.******************************************************************     00168100
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     00168200
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     00168300
&XMFCTRL              SETC  '#Z'.'&SYSNDX'(1,4).'A'                     00168400
&XMFATTR              SETC  '0D'                                        00168500
.*                                                                      00168600
&ZOPN                 SETA  &ZOPN+1                                     00168700
&ZOPL(&ZOPN)          SETC  ' '                                         00168800
&ZOPO(&ZOPN)          SETC  'B'                                         00168900
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'                                00169000
&ZOPD(&ZOPN)          SETC  '++ ASAXWC ARG PARMS'                       00169100
.*                                                                      00169200
&ZOPN                 SETA  &ZOPN+1                                     00169300
&ZOPL(&ZOPN)          SETC  ' '                                         00169400
&ZOPO(&ZOPN)          SETC  'SPACE'                                     00169500
&ZOPV(&ZOPN)          SETC  '1'                                         00169600
&ZOPD(&ZOPN)          SETC  ' '                                         00169700
.*                                                                      00169800
.ZLMFSL2              ANOP  ,                                           00169900
.*-------------------------------------------------------------------   00170000
.***AM.L01  ASAXWC FMT=LIST PARAMETERS                                  00170100
&ZOPN                 SETA &ZOPN+1                                      00170200
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00170300
&ZOPO(&ZOPN)          SETC 'DS'                                         00170400
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00170500
&ZOPD(&ZOPN)          SETC '++ ASAXWC PARM LIST'                        00170600
.*-------------------------------------------------------------------   00170700
.***AM.L09 ADDR XPATTERNSTR A                                           00170800
&ZOPN                 SETA &ZOPN+1                                      00170900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPATTERNSTR_ADDR'                 00171000
&ZOPO(&ZOPN)          SETC 'DS'                                         00171100
&ZOPV(&ZOPN)          SETC 'A'                                          00171200
&ZOPD(&ZOPN)          SETC '++ &ZXPATTERNSTR ADDR XPATTERNSTR'          00171300
.*-------------------------------------------------------------------   00171400
.***AM.L09  XPATTERNSTRLEN F                                            00171500
&ZOPN                 SETA &ZOPN+1                                      00171600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPATTERNSTRLEN'                   00171700
&ZOPO(&ZOPN)          SETC 'DS'                                         00171800
&ZOPV(&ZOPN)          SETC 'F'                                          00171900
&ZOPD(&ZOPN)          SETC '++ &ZXPATTERNSTRLEN  XPATTERNSTRLEN'        00172000
.*-------------------------------------------------------------------   00172100
.***AM.L09 ADDR XSTRING A                                               00172200
&ZOPN                 SETA &ZOPN+1                                      00172300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSTRING_ADDR'                     00172400
&ZOPO(&ZOPN)          SETC 'DS'                                         00172500
&ZOPV(&ZOPN)          SETC 'A'                                          00172600
&ZOPD(&ZOPN)          SETC '++ &ZXSTRING ADDR XSTRING'                  00172700
.*-------------------------------------------------------------------   00172800
.***AM.L09  XSTRINGLEN F                                                00172900
&ZOPN                 SETA &ZOPN+1                                      00173000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSTRINGLEN'                       00173100
&ZOPO(&ZOPN)          SETC 'DS'                                         00173200
&ZOPV(&ZOPN)          SETC 'F'                                          00173300
&ZOPD(&ZOPN)          SETC '++ &ZXSTRINGLEN  XSTRINGLEN'                00173400
.*-------------------------------------------------------------------   00173500
.***AM.L09 ADDR XZEROORMORE A                                           00173600
&ZOPN                 SETA &ZOPN+1                                      00173700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XZEROORMORE_ADDR'                 00173800
&ZOPO(&ZOPN)          SETC 'DS'                                         00173900
&ZOPV(&ZOPN)          SETC 'A'                                          00174000
&ZOPD(&ZOPN)          SETC '++ &ZXZEROORMORE ADDR XZEROORMORE'          00174100
.*-------------------------------------------------------------------   00174200
.***AM.L09 ADDR XONECHAR A                                              00174300
&ZOPN                 SETA &ZOPN+1                                      00174400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XONECHAR_ADDR'                    00174500
&ZOPO(&ZOPN)          SETC 'DS'                                         00174600
&ZOPV(&ZOPN)          SETC 'A'                                          00174700
&ZOPD(&ZOPN)          SETC '++ &ZXONECHAR ADDR XONECHAR'                00174800
.*-------------------------------------------------------------------   00174900
.***AM.L09 ADDR XDELIMITER A                                            00175000
&ZOPN                 SETA &ZOPN+1                                      00175100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XDELIMITER_ADDR'                  00175200
&ZOPO(&ZOPN)          SETC 'DS'                                         00175300
&ZOPV(&ZOPN)          SETC 'A'                                          00175400
&ZOPD(&ZOPN)          SETC '++ &ZXDELIMITER ADDR XDELIMITER'            00175500
.*-------------------------------------------------------------------   00175600
.***AM.L10 END OF ASAXWC LIST PARAMETERS                                00175700
&ZOPN                 SETA &ZOPN+1                                      00175800
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00175900
&ZOPO(&ZOPN)          SETC 'EQU'                                        00176000
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00176100
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00176200
.*                                                                      00176300
&ZOPN                 SETA &ZOPN+1                                      00176400
&ZOPL(&ZOPN)          SETC ' '                                          00176500
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00176600
&ZOPV(&ZOPN)          SETC '1'                                          00176700
&ZOPD(&ZOPN)          SETC ' '                                          00176800
.*-------------------------------------------------------------------   00176900
.***AL.L12 ASAXWC FMT=LIST MF=S|L PARAMETERS                            00177000
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         00177100
.*                                                                      00177200
&ZOPN                 SETA  &ZOPN+1                                     00177300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                00177400
&ZOPO(&ZOPN)          SETC  'DC'                                        00177500
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   00177600
&ZOPD(&ZOPN)          SETC  '++ ASAXWC ARG PARMS'                       00177700
.*                                                                      00177800
.ZLMFSLX              ANOP  ,                                           00177900
.*-------------------------------------------------------------------   00178000
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00178100
&ZPLLEN               SETA 28                                           00178200
.*                                                                      00178300
.******************************************************************     00178400
.***AI.L01 ASAXWC FMT=LIST FILL IN PARAMETER AREA                       00178500
.******************************************************************     00178600
                      ACTR  10000                                       00178700
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00178800
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00178900
&ZCVAL                SETC  'LAE'          XAX MODE                     00179000
.ZIMFXA               ANOP ,                                            00179100
.*                                                                      00179200
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00179300
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00179400
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00179500
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00179600
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00179700
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00179800
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00179900
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00180000
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00180100
&ZOPN                 SETA  &ZOPN+1                                     00180200
&ZOPL(&ZOPN)          SETC  ' '                                         00180300
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00180400
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00180500
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00180600
                      AGO   .ZIMFNX                                     00180700
.*                                                                      00180800
.ZIMFN2               ANOP ,                                            00180900
&ZOPN                 SETA  &ZOPN+1                                     00181000
&ZOPL(&ZOPN)          SETC  ' '                                         00181100
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00181200
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00181300
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00181400
.ZIMFNX               ANOP ,                                            00181500
.********************************************************************   00181600
.***AI.L02 ASAXWC FMT=LIST INITIALIZE PARAMETER AREA                    00181700
.********************************************************************   00181800
.***AI.L03 MF=(SLME)                                                    00181900
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00182000
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZIMFLX            00182100
.*                                                                      00182200
&ZOPN                 SETA  &ZOPN+1                                     00182300
&ZOPL(&ZOPN)          SETC  ' '                                         00182400
&ZOPO(&ZOPN)          SETC  'XC'                                        00182500
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00182600
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00182700
.ZIMFLX               ANOP  ,                                           00182800
.*-------------------------------------------------------------------   00182900
.***AI.L19 ADDR XPATTERNSTR A                                           00183000
                      AIF   ('&ZXPATTERNSTR' EQ '').ZI2H  NOT USED      00183100
&ZCLNG                SETC  '&XPATTERNSTR'                              00183200
&ZCGPR                SETC  '14'                                        00183300
         AIF   ('&XPATTERNSTR'(1,1) EQ '(').ZI2F  IN GPR                00183400
.*                                                                      00183500
&ZOPN                 SETA  &ZOPN+1                                     00183600
&ZOPL(&ZOPN)          SETC  ' '                                         00183700
&ZOPO(&ZOPN)          SETC  'LA'                                        00183800
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00183900
&ZOPD(&ZOPN)          SETC  '++ &ZXPATTERNSTR XPATTERNSTR A'            00184000
.*                                                                      00184100
                      AGO   .ZI2G                                       00184200
.*                                                                      00184300
.ZI2F                 ANOP  ,                                           00184400
&ZCGPR   SETC  '&XPATTERNSTR'(2,K'&XPATTERNSTR-2)                       00184500
.*                                                                      00184600
.ZI2G                 ANOP  ,                                           00184700
.*                                                                      00184800
&ZOPN                 SETA  &ZOPN+1                                     00184900
&ZOPL(&ZOPN)          SETC  ' '                                         00185000
&ZOPO(&ZOPN)          SETC  'ST'                                        00185100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0(,1)'                              00185200
&ZOPD(&ZOPN)          SETC  '++ &ZXPATTERNSTR XPATTERNSTR A'            00185300
.*                                                                      00185400
.ZI2H                 ANOP  ,                                           00185500
.*-------------------------------------------------------------------   00185600
.***AI.L25  XPATTERNSTRLEN F                                            00185700
                      AIF   ('&ZXPATTERNSTRLEN' EQ '').ZI3E  NOT USED   00185800
                      AIF   ('&ZXPATTERNSTRLEN' EQ 'OUTPUT').ZI3E       00185900
&ZCGPR                SETC  '&XPATTERNSTRLEN'                           00186000
.*                                                                      00186100
                      AIF   ('&XPATTERNSTRLEN'(1,1) NE '(').ZI3B        00186200
&ZCGPR   SETC  '0('.'&XPATTERNSTRLEN'(2,K'&XPATTERNSTRLEN-2).')'        00186300
                      AGO   .ZI3D                                       00186400
.ZI3B                 ANOP  ,                                           00186500
.*                                                                      00186600
&ZC                   SETC  '&XPATTERNSTRLEN'(1,1)                      00186700
                      AIF   (T'&ZC NE 'N').ZI3D                         00186800
&ZC                   SETC  '&XPATTERNSTRLEN'                           00186900
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI3D                00187000
&ZCGPR                SETC  '=FL4''&XPATTERNSTRLEN'''                   00187100
.*                                                                      00187200
.ZI3D                 ANOP  ,                                           00187300
.*                                                                      00187400
&ZOPN                 SETA  &ZOPN+1                                     00187500
&ZOPL(&ZOPN)          SETC  ' '                                         00187600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00187700
&ZOPV(&ZOPN)          SETC  '4(4,1),&ZCGPR'                             00187800
&ZOPD(&ZOPN)          SETC  '++ &ZXPATTERNSTRLEN XPATTERNSTRLEN F'      00187900
.*                                                                      00188000
.ZI3E                 ANOP  ,                                           00188100
.*-------------------------------------------------------------------   00188200
.***AI.L19 ADDR XSTRING A                                               00188300
                      AIF   ('&ZXSTRING' EQ '').ZI4H  NOT USED          00188400
&ZCLNG                SETC  '&XSTRING'                                  00188500
&ZCGPR                SETC  '14'                                        00188600
         AIF   ('&XSTRING'(1,1) EQ '(').ZI4F  IN GPR                    00188700
.*                                                                      00188800
&ZOPN                 SETA  &ZOPN+1                                     00188900
&ZOPL(&ZOPN)          SETC  ' '                                         00189000
&ZOPO(&ZOPN)          SETC  'LA'                                        00189100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00189200
&ZOPD(&ZOPN)          SETC  '++ &ZXSTRING XSTRING A'                    00189300
.*                                                                      00189400
                      AGO   .ZI4G                                       00189500
.*                                                                      00189600
.ZI4F                 ANOP  ,                                           00189700
&ZCGPR   SETC  '&XSTRING'(2,K'&XSTRING-2)                               00189800
.*                                                                      00189900
.ZI4G                 ANOP  ,                                           00190000
.*                                                                      00190100
&ZOPN                 SETA  &ZOPN+1                                     00190200
&ZOPL(&ZOPN)          SETC  ' '                                         00190300
&ZOPO(&ZOPN)          SETC  'ST'                                        00190400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,8(,1)'                              00190500
&ZOPD(&ZOPN)          SETC  '++ &ZXSTRING XSTRING A'                    00190600
.*                                                                      00190700
.ZI4H                 ANOP  ,                                           00190800
.*-------------------------------------------------------------------   00190900
.***AI.L25  XSTRINGLEN F                                                00191000
                      AIF   ('&ZXSTRINGLEN' EQ '').ZI5E  NOT USED       00191100
                      AIF   ('&ZXSTRINGLEN' EQ 'OUTPUT').ZI5E           00191200
&ZCGPR                SETC  '&XSTRINGLEN'                               00191300
.*                                                                      00191400
                      AIF   ('&XSTRINGLEN'(1,1) NE '(').ZI5B            00191500
&ZCGPR   SETC  '0('.'&XSTRINGLEN'(2,K'&XSTRINGLEN-2).')'                00191600
                      AGO   .ZI5D                                       00191700
.ZI5B                 ANOP  ,                                           00191800
.*                                                                      00191900
&ZC                   SETC  '&XSTRINGLEN'(1,1)                          00192000
                      AIF   (T'&ZC NE 'N').ZI5D                         00192100
&ZC                   SETC  '&XSTRINGLEN'                               00192200
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI5D                00192300
&ZCGPR                SETC  '=FL4''&XSTRINGLEN'''                       00192400
.*                                                                      00192500
.ZI5D                 ANOP  ,                                           00192600
.*                                                                      00192700
&ZOPN                 SETA  &ZOPN+1                                     00192800
&ZOPL(&ZOPN)          SETC  ' '                                         00192900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00193000
&ZOPV(&ZOPN)          SETC  '12(4,1),&ZCGPR'                            00193100
&ZOPD(&ZOPN)          SETC  '++ &ZXSTRINGLEN XSTRINGLEN F'              00193200
.*                                                                      00193300
.ZI5E                 ANOP  ,                                           00193400
.*-------------------------------------------------------------------   00193500
.***AI.L19 ADDR XZEROORMORE A                                           00193600
                      AIF   ('&ZXZEROORMORE' EQ '').ZI6H  NOT USED      00193700
&ZCLNG                SETC  '&XZEROORMORE'                              00193800
&ZCGPR                SETC  '14'                                        00193900
         AIF   ('&XZEROORMORE'(1,1) EQ '(').ZI6F  IN GPR                00194000
.*                                                                      00194100
&ZOPN                 SETA  &ZOPN+1                                     00194200
&ZOPL(&ZOPN)          SETC  ' '                                         00194300
&ZOPO(&ZOPN)          SETC  'LA'                                        00194400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00194500
&ZOPD(&ZOPN)          SETC  '++ &ZXZEROORMORE XZEROORMORE A'            00194600
.*                                                                      00194700
                      AGO   .ZI6G                                       00194800
.*                                                                      00194900
.ZI6F                 ANOP  ,                                           00195000
&ZCGPR   SETC  '&XZEROORMORE'(2,K'&XZEROORMORE-2)                       00195100
.*                                                                      00195200
.ZI6G                 ANOP  ,                                           00195300
.*                                                                      00195400
&ZOPN                 SETA  &ZOPN+1                                     00195500
&ZOPL(&ZOPN)          SETC  ' '                                         00195600
&ZOPO(&ZOPN)          SETC  'ST'                                        00195700
&ZOPV(&ZOPN)          SETC  '&ZCGPR,16(,1)'                             00195800
&ZOPD(&ZOPN)          SETC  '++ &ZXZEROORMORE XZEROORMORE A'            00195900
.*                                                                      00196000
.ZI6H                 ANOP  ,                                           00196100
.*-------------------------------------------------------------------   00196200
.***AI.L19 ADDR XONECHAR A                                              00196300
                      AIF   ('&ZXONECHAR' EQ '').ZI7H  NOT USED         00196400
&ZCLNG                SETC  '&XONECHAR'                                 00196500
&ZCGPR                SETC  '14'                                        00196600
         AIF   ('&XONECHAR'(1,1) EQ '(').ZI7F  IN GPR                   00196700
.*                                                                      00196800
&ZOPN                 SETA  &ZOPN+1                                     00196900
&ZOPL(&ZOPN)          SETC  ' '                                         00197000
&ZOPO(&ZOPN)          SETC  'LA'                                        00197100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00197200
&ZOPD(&ZOPN)          SETC  '++ &ZXONECHAR XONECHAR A'                  00197300
.*                                                                      00197400
                      AGO   .ZI7G                                       00197500
.*                                                                      00197600
.ZI7F                 ANOP  ,                                           00197700
&ZCGPR   SETC  '&XONECHAR'(2,K'&XONECHAR-2)                             00197800
.*                                                                      00197900
.ZI7G                 ANOP  ,                                           00198000
.*                                                                      00198100
&ZOPN                 SETA  &ZOPN+1                                     00198200
&ZOPL(&ZOPN)          SETC  ' '                                         00198300
&ZOPO(&ZOPN)          SETC  'ST'                                        00198400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,20(,1)'                             00198500
&ZOPD(&ZOPN)          SETC  '++ &ZXONECHAR XONECHAR A'                  00198600
.*                                                                      00198700
.ZI7H                 ANOP  ,                                           00198800
.*-------------------------------------------------------------------   00198900
.***AI.L18 ADDR XDELIMITER A                                            00199000
                      AIF   ('&XDELIMITER' NE 'LENGTHS_WERE_SET').ZI8   00199100
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI8  CK *         00199200
&ZXDELIMITER          SETC  ''             RESET INPUT/OUTPUT           00199300
.ZI8                  ANOP  ,                                           00199400
.*-------------------------------------------------------------------   00199500
.***AI.L19 ADDR XDELIMITER A                                            00199600
                      AIF   ('&ZXDELIMITER' EQ '').ZI8H  NOT USED       00199700
&ZCLNG                SETC  '&XDELIMITER'                               00199800
&ZCGPR                SETC  '14'                                        00199900
         AIF   ('&XDELIMITER'(1,1) EQ '(').ZI8F  IN GPR                 00200000
                      AIF   ('&XDELIMITER' NE 'LENGTHS_WERE_SET').ZI8A  00200100
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZI8H              00200200
.*                                                                      00200300
&ZCLNG                SETC  '=XL4''00'''                                00200400
.ZI8A                 ANOP  ,                                           00200500
.*                                                                      00200600
&ZOPN                 SETA  &ZOPN+1                                     00200700
&ZOPL(&ZOPN)          SETC  ' '                                         00200800
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00200900
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00201000
&ZOPD(&ZOPN)          SETC  '++ &ZXDELIMITER XDELIMITER A'              00201100
.*                                                                      00201200
                      AGO   .ZI8G                                       00201300
.*                                                                      00201400
.ZI8F                 ANOP  ,                                           00201500
&ZCGPR   SETC  '&XDELIMITER'(2,K'&XDELIMITER-2)                         00201600
.*                                                                      00201700
.ZI8G                 ANOP  ,                                           00201800
.*                                                                      00201900
&ZOPN                 SETA  &ZOPN+1                                     00202000
&ZOPL(&ZOPN)          SETC  ' '                                         00202100
&ZOPO(&ZOPN)          SETC  'ST'                                        00202200
&ZOPV(&ZOPN)          SETC  '&ZCGPR,24(,1)'                             00202300
&ZOPD(&ZOPN)          SETC  '++ &ZXDELIMITER XDELIMITER A'              00202400
.*                                                                      00202500
.ZI8H                 ANOP  ,                                           00202600
.*-------------------------------------------------------------------   00202700
&ZOPN1                SETA &ZOPN                                        00202800
.*-------------------------------------------------------------------   00202900
.***AI.C00 MF=M CHECK TO BYPASS INVOCATION                              00203000
                      AIF   ('&XMF' EQ 'M').ZMFLX  DONE IF MF=M         00203100
.*******************************************************************    00203200
.***  PROCESS ASAXWC OUTPUT PARAMETERS                                  00203300
.*******************************************************************    00203400
                      ACTR  10000                                       00203500
.*******************************************************************    00203600
.***AO.X02  RETURN CODE PROCESSING                                      00203700
.*******************************************************************    00203800
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00203900
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00204000
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00204100
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00204200
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00204300
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00204400
&ZOPN                 SETA  &ZOPN+1                                     00204500
&ZOPL(&ZOPN)          SETC  ' '                                         00204600
&ZOPO(&ZOPN)          SETC  'ST'                                        00204700
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00204800
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00204900
                      AGO   .ZMRETX                                     00205000
.*                                                                      00205100
.ZMRET2               ANOP  ,                                           00205200
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00205300
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00205400
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00205500
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00205600
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00205700
&ZOPN                 SETA  &ZOPN+1                                     00205800
&ZOPL(&ZOPN)          SETC  ' '                                         00205900
&ZOPO(&ZOPN)          SETC  'LR'                                        00206000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00206100
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00206200
.ZMRETX               ANOP  ,                                           00206300
.*******************************************************************    00206400
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00206500
.*******************************************************************    00206600
.ZMFLX                ANOP  ,              MF=L PROCESSING              00206700
.*******************************************************************    00206800
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00206900
.*******************************************************************    00207000
                      ACTR  10000                                       00207100
.*                                                                      00207200
                      LCLA  &ZLC           COLUMN POSITION              00207300
                      LCLA  &ZOPX          LIST TABLE INDEX             00207400
                      LCLC  &ZLL           LABEL                        00207500
                      LCLC  &ZLOP          OPERATION                    00207600
                      LCLC  &ZLV           VALUE                        00207700
                      LCLC  &ZLD           DESCRIPTION                  00207800
.*                                                                      00207900
&ZOPX                 SETA  1                                           00208000
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00208100
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00208200
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00208300
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00208400
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00208500
                      AIF   (K'&ZLD LE 0).ZL5                           00208600
&ZLC                  SETA  35             COMMENT COLUMN               00208700
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00208800
&ZLC                  SETA  33             COMMMENT COLUMN              00208900
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00209000
&ZLV                  SETC  '&ZLV'.' '                                  00209100
                      AGO   .ZL3                                        00209200
.*                                                                      00209300
.ZL4                  ANOP  ,                                           00209400
&ZLV                  SETC  '&ZLV'.' '                                  00209500
.ZL5                  ANOP  ,                                           00209600
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00209700
.*                                                                      00209800
&ZLL     &ZLOP &ZLV                                                     00209900
.*                                                                      00210000
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00210100
                      AGO   .ZL2           CONTINUE LOOPING             00210200
.*                                                                      00210300
.ZLX                  ANOP  ,                                           00210400
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00210500
                      AIF   ('&XMF' EQ 'M').ZLINKX  MF=M                00210600
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00210700
         L     15,16              Get CVT address                @L1A   00210800
         L     15,140(15,0)       Get ECVT address               @L1A   00210900
         L     15,232(15,0)       Get REUCB address              @L1A   00211000
         AIF   ('&WORKAREA' EQ '').NOTWILDB                      @L1A   00211100
         AIF   ('&XWORKAREA' NE 'NO_WORKAREA').WILDB             @L1A   00211200
.NOTWILDB ANOP                                                   @L1A   00211300
         L     15,28(15,0)        Get ASAWILDC address           @L1A   00211400
         BASR  14,15              Call ASAWILDC                  @L1A   00211500
         AGO   .ENDMAC                                           @L1A   00211600
.WILDB   ANOP                                                    @L1A   00211700
         AIF   ('&WORKAREA'(1,1) EQ '(').INREG                   @L1A   00211800
         LA    0,&WORKAREA(1)     Get workarea address           @L1A   00211900
         AGO   .DOCALL                                           @L1A   00212000
.INREG   ANOP                                                    @L1A   00212100
         AIF   ('&WORKAREA(1)' EQ 'GPR0').DOCALL                 @L1A   00212200
         AIF   ('&WORKAREA(1)' EQ 'GPR00').DOCALL                @L1A   00212300
         AIF   ('&WORKAREA(1)' EQ 'REG0').DOCALL                 @L1A   00212400
         AIF   ('&WORKAREA(1)' EQ 'REG00').DOCALL                @L1A   00212500
         AIF   ('&WORKAREA(1)' EQ 'R0').DOCALL                   @L1A   00212600
         AIF   ('&WORKAREA(1)' EQ '0').DOCALL                    @L1A   00212700
         AIF   ('&WORKAREA(1)' EQ '00').DOCALL                   @L1A   00212800
         LR    0,&WORKAREA(1)     Get workarea address           @L1A   00212900
.DOCALL  ANOP                                                    @L1A   00213000
         L     15,32(15,0)        Get ASAWILDB address           @L1A   00213100
         BASR  14,15              Call ASAWILDB                  @L1A   00213200
.ENDMAC  ANOP                                                    @L1A   00213300
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00213400
.ZLINKX               ANOP  ,                                           00213500
.*******************************************************************    00213600
.***AP.X01  FORMAT GENERATED CODE                                       00213700
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00213800
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00213900
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00214000
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00214100
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00214200
                      AIF   (K'&ZLD LE 0).ZL51                          00214300
&ZLC                  SETA  35             COMMENT COLUMN               00214400
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00214500
&ZLC                  SETA  33             COMMENT COLUMN               00214600
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00214700
&ZLV                  SETC  '&ZLV'.' '                                  00214800
                      AGO   .ZL31                                       00214900
.*                                                                      00215000
.ZL41                 ANOP  ,                                           00215100
&ZLV                  SETC  '&ZLV'.' '                                  00215200
.ZL51                 ANOP  ,                                           00215300
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00215400
.*                                                                      00215500
&ZLL     &ZLOP &ZLV                                                     00215600
.*                                                                      00215700
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00215800
                      AGO   .ZL21          CONTINUE LOOPING             00215900
.*                                                                      00216000
.ZLX1                 ANOP  ,                                           00216100
.*******************************************************************    00216200
.***AP.X02  END OF ASAXWC MACRO                                         00216300
&ZASAXWC              SETC  'YES'          SET ASAXWC USED              00216400
         POP   PRINT                                                    00216500
*                                            ASAXWC-0                   00216600
         SPACE 1                                                        00216700
.ZLX2                 ANOP  ,                                           00216800
         MEND                                                           00216900
**********************************************************************/ 00217000
*/**** START OF SPECIFICATIONS **************************************** 00217100
*                                                                     * 00217200
*                                                                     * 00217300
*01* MACRO NAME:  ASAXWC                                -07/19/94-<0> * 00217400
*                                                                     * 00217500
*                                                                     * 00217600
*01* DESCRIPTIVE NAME:  Wildcard service                              * 00217700
*                                                                     * 00217800
*01* PROPRIETARY STATEMENT:                                           * 00217900
*                                                                     * 00218000
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00218100
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00218200
*     5655-068 (C) COPYRIGHT IBM CORP. 1994                           * 00218300
*     SEE COPYRIGHT INSTRUCTIONS                                      * 00218400
*                                                                     * 00218500
* STATUS= HBB5520                                                     * 00218600
*                                                                     * 00218700
*                                                                     * 00218800
*                                                                     * 00218900
*01* FUNCTION:                                                        * 00219000
*       See the ASAXWC macro prologue for details.                    * 00219100
*                                                                     * 00219200
*01* INPUT:                                                           * 00219300
*                                                                     * 00219400
*            ?ASAXWC    [PLISTVER                                     * 00219500
*                                 (¬xplistver|IMPLIED_VERSION­)]      * 00219600
*                        PATTERNSTR(xpatternstr)                      * 00219700
*                        PATTERNSTRLEN(xpatternstrlen)                * 00219800
*                        STRING(xstring)                              * 00219900
*                        STRINGLEN(xstringlen)                        * 00220000
*                        ZEROORMORE(xzeroormore)                      * 00220100
*                        ONECHAR(xonechar)                            * 00220200
*                       [DELIMITER(¬xdelimiter|LENGTHS_WERE_SET­)]    * 00220300
*                       [WORKAREA(¬xworkarea|NO_WORKAREA­)]           * 00220400
*                       [RETCODE(xretcode)]                           * 00220500
*                      ¿[MF(S)]                                       * 00220600
*                      õ[MF(L,xmfctrl¬,xmfattr|BDY(DWORD)­)]          * 00220700
*                      õ[MF(M,xmfctrl¬,COMPLETE|NOCHECK­)]            * 00220800
*                      ¾[MF(E,xmfctrl¬,COMPLETE|NOCHECK­)]            * 00220900
*                                                                     * 00221000
****** END OF SPECIFICATIONS *****************************************/ 00221100
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 00221200
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                00221300
*  ANS('/* ? ASAXWC '||MACLIST||' ')                                    00221400
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00221500
*                                                                       00221600
*  DCL ZELO  FIXED;                                                     00221700
*  DCL ZECOL FIXED;                                                     00221800
*                                                                       00221900
*  ZELO=1;     /* STARTING COLUMN */                                    00222000
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00222100
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    00222200
*    IF ZECOL>0                                                         00222300
*      THEN                                                             00222400
*        DO;   /* PARENTHESIS FOUND */                                  00222500
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)||' ')                         00222600
*             NORESCAN COL(MACLMAR+5);                                  00222700
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   00222800
*        END;                                                           00222900
*      ELSE                                                             00223000
*        DO;   /* REMAINING KEYS */                                     00223100
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           00223200
*             NORESCAN COL(MACLMAR+5);                                  00223300
*          ZELO=LENGTH(MACKEYS)+1;                                      00223400
*        END;                                                           00223500
*  END;                                                                 00223600
*  ANS(' -07/19/94-0- */')                                              00223700
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00223800
*/********************************************************************/ 00223900
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00224000
*/********************************************************************/ 00224100
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00224200
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00224300
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00224400
*                                                                       00224500
*  DCL   ZASAXWC CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */   00224600
*  DEACT ZASAXWC;                                                       00224700
*                                                                       00224800
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00224900
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00225000
*                                                                       00225100
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00225200
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00225300
*                                                                       00225400
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00225500
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00225600
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00225700
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00225800
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00225900
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00226000
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00226100
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00226200
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00226300
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00226400
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00226500
*                                                                       00226600
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00226700
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00226800
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00226900
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00227000
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00227100
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00227200
*/*******************************************************************/  00227300
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00227400
*/*******************************************************************/  00227500
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00227600
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00227700
*  DCL   XPATTERNSTR;              /***PV.XVAR03 INPUT NAME */          00227800
*  DEACT XPATTERNSTR;              /***PV.XVAR03 INPUT NAME */          00227900
*  DCL   ZXPATTERNSTR;             /***INPUT/OUTPUT CONTROL */          00228000
*  DEACT ZXPATTERNSTR;             /***INPUT/OUTPUT CONTROL */          00228100
*  DCL   XPATTERNSTRLEN;           /***PV.XVAR03 INPUT NAME */          00228200
*  DEACT XPATTERNSTRLEN;           /***PV.XVAR03 INPUT NAME */          00228300
*  DCL   ZXPATTERNSTRLEN;          /***INPUT/OUTPUT CONTROL */          00228400
*  DEACT ZXPATTERNSTRLEN;          /***INPUT/OUTPUT CONTROL */          00228500
*  DCL XSTRING;  DEACT XSTRING;    /***PV.XVAR02 INPUT NAME */          00228600
*  DCL ZXSTRING; DEACT ZXSTRING;   /***INPUT/OUTPUT CONTROL */          00228700
*  DCL   XSTRINGLEN;               /***PV.XVAR03 INPUT NAME */          00228800
*  DEACT XSTRINGLEN;               /***PV.XVAR03 INPUT NAME */          00228900
*  DCL   ZXSTRINGLEN;              /***INPUT/OUTPUT CONTROL */          00229000
*  DEACT ZXSTRINGLEN;              /***INPUT/OUTPUT CONTROL */          00229100
*  DCL   XZEROORMORE;              /***PV.XVAR03 INPUT NAME */          00229200
*  DEACT XZEROORMORE;              /***PV.XVAR03 INPUT NAME */          00229300
*  DCL   ZXZEROORMORE;             /***INPUT/OUTPUT CONTROL */          00229400
*  DEACT ZXZEROORMORE;             /***INPUT/OUTPUT CONTROL */          00229500
*  DCL XONECHAR;  DEACT XONECHAR;  /***PV.XVAR02 INPUT NAME */          00229600
*  DCL ZXONECHAR; DEACT ZXONECHAR;  /***INPUT/OUTPUT CONTROL */         00229700
*  DCL   XDELIMITER;               /***PV.XVAR03 INPUT NAME */          00229800
*  DEACT XDELIMITER;               /***PV.XVAR03 INPUT NAME */          00229900
*  DCL   ZXDELIMITER;              /***INPUT/OUTPUT CONTROL */          00230000
*  DEACT ZXDELIMITER;              /***INPUT/OUTPUT CONTROL */          00230100
*  DCL XWORKAREA;  DEACT XWORKAREA;  /***PV.XVAR02 INPUT NAME */        00230200
*  DCL ZXWORKAREA; DEACT ZXWORKAREA;  /***INPUT/OUTPUT CONTROL */       00230300
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00230400
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00230500
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00230600
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00230700
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00230800
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00230900
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00231000
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00231100
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00231200
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00231300
*/********************************************************************/ 00231400
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00231500
*/********************************************************************/ 00231600
*  IF TRANSLATE(PLISTVER(1)) = 'MAX' THEN                               00231700
*    XPLISTVER=0;                                                       00231800
*  ELSE                                                                 00231900
*    XPLISTVER=0;                                                       00232000
*  IF PLISTVER~=''                                                      00232100
*     & TRANSLATE(PLISTVER(1))~='IMPLIED_VERSION'                       00232200
*     & TRANSLATE(PLISTVER(1))~='MAX'                                   00232300
*    THEN                                                               00232400
*      DO;                                                              00232500
*        IF FIXED(PLISTVER(1))>=XPLISTVER                               00232600
*          THEN                                                         00232700
*              XPLISTVER=FIXED(PLISTVER(1));                            00232800
*          ELSE                                                         00232900
*            DO;                                                        00233000
*              ZMS=' 8, PLISTVER='||         /**KVALP* MSG*/            00233100
*                    PLISTVER(1)||                                      00233200
*                  ', BUT PLISTVER OF '||                               00233300
*                    CHAR(XPLISTVER)||                                  00233400
*                  ' IS REQUIRED.';                                     00233500
*              ANS MSG('?ASAXWC ---> '||ZMS);                           00233600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00233700
*              ZMACRET=8;                    /* MACRO ERROR */          00233800
*            END;                                                       00233900
*                                                                       00234000
*        IF PLISTVER='PLISTVER' | PLISTVER='()'  /*CHCK ENTRY*/         00234100
*          THEN                                                         00234200
*            DO;                                                        00234300
*              ZMS=' 8, THE "PLISTVER" KEY'|| /**KOPTP* MSG*/           00234400
*                  ' MUST CONTAIN ONE'||                                00234500
*                  ' (OR MORE) ARGUMENT(S).';                           00234600
*              ANS MSG('?ASAXWC ---> '||ZMS);                           00234700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00234800
*              ZMACRET=8;                    /* MACRO ERROR */          00234900
*            END;                                                       00235000
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00235100
*          THEN                                                         00235200
*            DO;                                                        00235300
*              ZMS=' 8, "PLISTVER'||         /**KPOSP* MSG*/            00235400
*                  PLISTVER||                                           00235500
*                  '" "PLISTVER"'||                                     00235600
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00235700
*              ANS MSG('?ASAXWC ---> '||ZMS);                           00235800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00235900
*              ZMACRET=8;                    /* MACRO ERROR */          00236000
*            END;                                                       00236100
*                                                                       00236200
*        ZCVAL='';                           /* ERROR FLAG */           00236300
*        ZC=PLISTVER(1);                                                00236400
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00236500
*          IF ZC(ZL:ZL)<'0' |                /* MUST BE NUMERIC */      00236600
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00236700
*            THEN                                                       00236800
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00236900
*        END;                                                           00237000
*        IF ZCVAL=''                                                    00237100
*          THEN                                                         00237200
*            DO;                             /* CHECK RANGE LIMITS */   00237300
*              IF XPLISTVER<0 |              /* LOW LIMIT */            00237400
*                 XPLISTVER>0                /* HIGH LIMIT */           00237500
*                THEN                                                   00237600
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00237700
*            END;                                                       00237800
*        IF ZCVAL~=''                                                   00237900
*          THEN                                                         00238000
*            DO;                             /* RANGE ERROR */          00238100
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00238200
*              ZMS=' 8, "PLISTVER '||        /**KRNGP* MSG*/            00238300
*                  PLISTVER||                                           00238400
*                  '" THE RANGE IS "0-0"'||                             00238500
*                  ' FOR ARGUMENT 1.';                                  00238600
*              ANS MSG('?ASAXWC ---> '||ZMS);                           00238700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00238800
*              ZMACRET=8;                    /* MACRO ERROR */          00238900
*            END;                                                       00239000
*      END;                                                             00239100
*                                                                       00239200
*/********************************************************************/ 00239300
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00239400
*/********************************************************************/ 00239500
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00239600
*  XMF='';                                                              00239700
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00239800
*  IF TRANSLATE(MF(1))                                                  00239900
*              = 'S'                         /* CHECK FOR KEYWORD */    00240000
*    THEN                                                               00240100
*      DO;                                                              00240200
*        XMFSCK='COMPLETE';                                             00240300
*        XMF='S';                            /* SET XVARIABLE */        00240400
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    00240500
*          THEN                                                         00240600
*            DO;                                                        00240700
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00240800
*                  MF||                                                 00240900
*                  '" "MF"'||                                           00241000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00241100
*              ANS MSG('?ASAXWC ---> '||ZMS);                           00241200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00241300
*              ZMACRET=8;                    /* MACRO ERROR */          00241400
*            END;                                                       00241500
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00241600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00241700
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00241800
*  IF TRANSLATE(MF(1))                                                  00241900
*              = 'L'                         /* CHECK FOR KEYWORD */    00242000
*    THEN                                                               00242100
*      DO;                                                              00242200
*        XMF='L';                            /* SET XVARIABLE */        00242300
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00242400
*          THEN                                                         00242500
*            DO;                                                        00242600
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00242700
*                  MF||                                                 00242800
*                  '" "MF"'||                                           00242900
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00243000
*              ANS MSG('?ASAXWC ---> '||ZMS);                           00243100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00243200
*              ZMACRET=8;                    /* MACRO ERROR */          00243300
*            END;                                                       00243400
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00243500
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00243600
*        IF PLISTVER ~= ''                                              00243700
*          THEN                                                         00243800
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00243900
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN |                            00244000
*           MACLIST ~= ''                    /* CHECK FOR OTHER PARMS*/ 00244100
*          THEN                                                         00244200
*            DO;                                                        00244300
*              ZMS=' 8, THE "L" FORM OF "MF"'|| /**MFLP* MSG*/          00244400
*                  ' CAN ONLY HAVE'||                                   00244500
*                  ' THE "PLISTVER" KEY'||                              00244600
*                  ' SPECIFIED ON THE INVOCATION.';                     00244700
*              ANS MSG('?ASAXWC ---> '||ZMS);                           00244800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00244900
*              ZMACRET=8;                    /* MACRO ERROR */          00245000
*            END;                                                       00245100
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00245200
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00245300
*  IF MF(2)=''                               /* CHECK FOR NULL */       00245400
*   THEN                                                                00245500
*    DO;                                     /* KEY IS REQUIRED */      00245600
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00245700
*        ZMS=' 8, WHEN "L" IS SPECIFIED'||                              00245800
*            ' FOR THE "MF" KEY, POSITIONAL'||                          00245900
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00246000
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00246100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00246200
*        ZMACRET=8;                          /* MACRO ERROR */          00246300
*    END;                                                               00246400
*  ELSE                                                                 00246500
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00246600
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00246700
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00246800
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00246900
*  IF MF(3)~=''                              /* CHECK FOR NULL */       00247000
*    THEN                                                               00247100
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00247200
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00247300
*  IF ZXMFATTR~='' &                         /* NOT IN/OUTPUT */        00247400
*     LENGTH(XMFATTR)>60                                                00247500
*    THEN                                                               00247600
*      DO;                                                              00247700
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00247800
*        ZMS=' 8, "MF'||                     /**KLNGP* MSG*/            00247900
*            MF||                                                       00248000
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'||                       00248100
*            ' LENGTH OF 60 CHARACTERS. ';                              00248200
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00248300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00248400
*        ZMACRET=8;                          /* MACRO ERROR */          00248500
*      END;                                                             00248600
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00248700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00248800
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00248900
*  IF TRANSLATE(MF(1))                                                  00249000
*              = 'M'                         /* CHECK FOR KEYWORD */    00249100
*    THEN                                                               00249200
*      DO;                                                              00249300
*        XMF='M';                            /* SET XVARIABLE */        00249400
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00249500
*          THEN                                                         00249600
*            DO;                                                        00249700
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00249800
*                  MF||                                                 00249900
*                  '" "MF"'||                                           00250000
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00250100
*              ANS MSG('?ASAXWC ---> '||ZMS);                           00250200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00250300
*              ZMACRET=8;                    /* MACRO ERROR */          00250400
*            END;                                                       00250500
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00250600
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00250700
*  IF MF(2)=''                               /* CHECK FOR NULL */       00250800
*   THEN                                                                00250900
*    DO;                                     /* KEY IS REQUIRED */      00251000
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00251100
*        ZMS=' 8, WHEN "M" IS SPECIFIED'||                              00251200
*            ' FOR THE "MF" KEY, POSITIONAL'||                          00251300
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00251400
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00251500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00251600
*        ZMACRET=8;                          /* MACRO ERROR */          00251700
*    END;                                                               00251800
*  ELSE                                                                 00251900
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00252000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00252100
*  XMFSCK='';                                /* RESET XVARIABLE */      00252200
*  IF TRANSLATE(MF(3))                                                  00252300
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */    00252400
*    THEN                                                               00252500
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00252600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00252700
*  IF TRANSLATE(MF(3))                                                  00252800
*              = 'NOCHECK'                   /* CHECK FOR KEYWORD */    00252900
*    THEN                                                               00253000
*      XMFSCK = 'NOCHECK';                   /* SET XVARIABLE */        00253100
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00253200
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00253300
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00253400
*    THEN                                                               00253500
*      DO;                                   /* KEYWORD NOT ENTERED */  00253600
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00253700
*        IF MF(3)~=''                                                   00253800
*          THEN                                                         00253900
*            DO;                                                        00254000
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00254100
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/            00254200
*                  MF||'"'||                                            00254300
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '||              00254400
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00254500
*                  ' "COMPLETE"'||           /* VALID KEYWORD */        00254600
*                  ' OR "NOCHECK".';         /* VALID KEYWORD */        00254700
*              ANS MSG('?ASAXWC ---> '||ZMS);                           00254800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00254900
*              ZMACRET=8;                    /* MACRO ERROR */          00255000
*            END;                                                       00255100
*      END;                                                             00255200
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00255300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00255400
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00255500
*  IF TRANSLATE(MF(1))                                                  00255600
*              = 'E'                         /* CHECK FOR KEYWORD */    00255700
*    THEN                                                               00255800
*      DO;                                                              00255900
*        XMF='E';                            /* SET XVARIABLE */        00256000
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00256100
*          THEN                                                         00256200
*            DO;                                                        00256300
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00256400
*                  MF||                                                 00256500
*                  '" "MF"'||                                           00256600
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00256700
*              ANS MSG('?ASAXWC ---> '||ZMS);                           00256800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00256900
*              ZMACRET=8;                    /* MACRO ERROR */          00257000
*            END;                                                       00257100
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00257200
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00257300
*  IF MF(2)=''                               /* CHECK FOR NULL */       00257400
*   THEN                                                                00257500
*    DO;                                     /* KEY IS REQUIRED */      00257600
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00257700
*        ZMS=' 8, WHEN "E" IS SPECIFIED'||                              00257800
*            ' FOR THE "MF" KEY, POSITIONAL'||                          00257900
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00258000
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00258100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00258200
*        ZMACRET=8;                          /* MACRO ERROR */          00258300
*    END;                                                               00258400
*  ELSE                                                                 00258500
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00258600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00258700
*  XMFSCK='';                                /* RESET XVARIABLE */      00258800
*  IF TRANSLATE(MF(3))                                                  00258900
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */    00259000
*    THEN                                                               00259100
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00259200
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00259300
*  IF TRANSLATE(MF(3))                                                  00259400
*              = 'NOCHECK'                   /* CHECK FOR KEYWORD */    00259500
*    THEN                                                               00259600
*      XMFSCK = 'NOCHECK';                   /* SET XVARIABLE */        00259700
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00259800
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00259900
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00260000
*    THEN                                                               00260100
*      DO;                                   /* KEYWORD NOT ENTERED */  00260200
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00260300
*        IF MF(3)~=''                                                   00260400
*          THEN                                                         00260500
*            DO;                                                        00260600
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00260700
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/            00260800
*                  MF||'"'||                                            00260900
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '||              00261000
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00261100
*                  ' "COMPLETE"'||           /* VALID KEYWORD */        00261200
*                  ' OR "NOCHECK".';         /* VALID KEYWORD */        00261300
*              ANS MSG('?ASAXWC ---> '||ZMS);                           00261400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00261500
*              ZMACRET=8;                    /* MACRO ERROR */          00261600
*            END;                                                       00261700
*      END;                                                             00261800
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00261900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00262000
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00262100
*  IF MF='MF'                                                           00262200
*    | MF='()'                               /*CHECK ENTRY*/            00262300
*     THEN                                                              00262400
*       DO;                                                             00262500
*              ZMS=' 8, THE "MF" KEY'||      /**KOPTP* MSG*/            00262600
*                  ' MUST CONTAIN ONE'||                                00262700
*                  ' (OR MORE) ARGUMENT(S).';                           00262800
*              ANS MSG('?ASAXWC ---> '||ZMS);                           00262900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00263000
*              ZMACRET=8;                    /* MACRO ERROR */          00263100
*       END;                                                            00263200
*  ELSE                                                                 00263300
*    DO;                                                                00263400
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00263500
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00263600
*        THEN                                                           00263700
*          DO;                               /* KEYWORD NOT ENTERED */  00263800
*            XMF='S';                        /* SET DEFAULT */          00263900
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    00264000
*            IF MF(1)~=''                    /* CHECK FOR KEYWORD */    00264100
*              THEN                                                     00264200
*                DO;                                                    00264300
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00264400
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/            00264500
*                  MF||'"'||                                            00264600
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00264700
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00264800
*                  ' "S",'||                 /* VALID KEYWORD */        00264900
*                  ' "L",'||                 /* VALID KEYWORD */        00265000
*                  ' "M",'||                 /* VALID KEYWORD */        00265100
*                  ' OR "E".';               /* VALID KEYWORD */        00265200
*              ANS MSG('?ASAXWC ---> '||ZMS);                           00265300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00265400
*              ZMACRET=8;                    /* MACRO ERROR */          00265500
*                END;                                                   00265600
*          END;                                                         00265700
*    END;                                                               00265800
*/********************************************************************/ 00265900
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00266000
*/********************************************************************/ 00266100
*  IF PLISTVER=''                                                       00266200
*     | PLISTVER(1)='IMPLIED_VERSION'                                   00266300
*    THEN                                                               00266400
*      ZC='ON';                              /* DEFAULT FLAG ON */      00266500
*    ELSE                                                               00266600
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00266700
*/********************************************************************/ 00266800
*/***PD.P02 DEFAULT ECHO                                             */ 00266900
*/********************************************************************/ 00267000
*/*PD.P02 XMF~='L' & XMFSCK='COMPLETE' ------------------------------*/ 00267100
*  IF XMF~='L'                                                          00267200
*     & XMFSCK='COMPLETE'                                               00267300
*    THEN                                                               00267400
*      DO;                                   /* FULL SYNTAX CHECK */    00267500
*        ANS('/*DEFAULT(S): */')                                        00267600
*           NORESCAN COL(MACLMAR+5);                                    00267700
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00267800
*  IF PLISTVER=''                                                       00267900
*    THEN                                                               00268000
*      ANS('/* PLISTVER('||                                             00268100
*          CHAR(XPLISTVER)||                                            00268200
*          ')*/')                                                       00268300
*          NORESCAN COL(MACLMAR+5);                                     00268400
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00268500
*  XDELIMITER='';                                                       00268600
*  IF DELIMITER(1)=''                                                   00268700
*    THEN                                                               00268800
*      DO;                                                              00268900
*        XDELIMITER='LENGTHS_WERE_SET';      /* SET DEFAULT */          00269000
*        ZC='ON';                            /* DEFAULT FLAG ON */      00269100
*      END;                                                             00269200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00269300
*  IF XDELIMITER~=''                                                    00269400
*    THEN                                                               00269500
*      ANS('/* DELIMITER('||                                            00269600
*          XDELIMITER||                                                 00269700
*          ')*/')                                                       00269800
*          NORESCAN COL(MACLMAR+5);                                     00269900
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00270000
*  XWORKAREA='';                                                        00270100
*  IF WORKAREA(1)=''                                                    00270200
*    THEN                                                               00270300
*      DO;                                                              00270400
*        XWORKAREA='NO_WORKAREA';            /* SET DEFAULT */          00270500
*        ZC='ON';                            /* DEFAULT FLAG ON */      00270600
*      END;                                                             00270700
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00270800
*  IF XWORKAREA~=''                                                     00270900
*    THEN                                                               00271000
*      ANS('/* WORKAREA('||                                             00271100
*          XWORKAREA||                                                  00271200
*          ')*/')                                                       00271300
*          NORESCAN COL(MACLMAR+5);                                     00271400
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00271500
*    THEN                                                               00271600
*      ANS('/* NONE. */')                                               00271700
*         NORESCAN COL(MACLMAR+5);                                      00271800
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00271900
*      END;                                                             00272000
*/********************************************************************/ 00272100
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00272200
*/********************************************************************/ 00272300
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00272400
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00272500
*                                                                       00272600
*  IF SYSASCE=''                                                        00272700
*    THEN                                                               00272800
*      DO;                                                              00272900
*        IF SYSSPLV=''                                                  00273000
*          THEN                                                         00273100
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00273200
*        IF SYSSPLV~='1' & SYSSPLV~='2'                                 00273300
*          THEN                                                         00273400
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00273500
*          ELSE                                                         00273600
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00273700
*      END;                                                             00273800
*/********************************************************************/ 00273900
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00274000
*/********************************************************************/ 00274100
*/*PG.P02 XMF~='L' & XMFSCK='COMPLETE' ------------------------------*/ 00274200
*  IF XMF~='L'                                                          00274300
*     & XMFSCK='COMPLETE'                                               00274400
*    THEN                                                               00274500
*      DO;                                   /* FULL SYNTAX CHECK */    00274600
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00274700
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00274800
*    THEN                                                               00274900
*      DO;                                                              00275000
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'|| /**PPOSP* MSG*/            00275100
*            ' "'||MACLIST||'"'||                                       00275200
*            ' CANNOT BE USED.'||                                       00275300
*            ' NO POSITIONAL ARGUMENTS'||                               00275400
*            ' ARE ALLOWED.';                                           00275500
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00275600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00275700
*        ZMACRET=8;                          /* MACRO ERROR */          00275800
*      END;                                                             00275900
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00276000
*  IF NUMBER(PATTERNSTR)>1                   /* CHECK POSITIONALS */    00276100
*    THEN                                                               00276200
*      DO;                                                              00276300
*        ZMS=' 8, "PATTERNSTR'||             /**KPOSP* MSG*/            00276400
*            PATTERNSTR||                                               00276500
*            '" "PATTERNSTR"'||                                         00276600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00276700
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00276800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00276900
*        ZMACRET=8;                          /* MACRO ERROR */          00277000
*      END;                                                             00277100
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00277200
*  XPATTERNSTR=PATTERNSTR(1);                /* SET XVARIABLE */        00277300
*  IF PATTERNSTR(1)=''                       /* CHECK FOR NULL */       00277400
*   THEN                                                                00277500
*    DO;                                     /* KEY IS REQUIRED */      00277600
*        ZXPATTERNSTR='';                    /* RESET IN/OUTPUT */      00277700
*        ZMS=' 8,  '||                                                  00277800
*            ' "PATTERNSTR" KEY AND ITS ARGUMENT'||                     00277900
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00278000
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00278100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00278200
*        ZMACRET=8;                          /* MACRO ERROR */          00278300
*    END;                                                               00278400
*  ELSE                                                                 00278500
*    ZXPATTERNSTR='INPUT';                   /* SET IN/OUTPUT */        00278600
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00278700
*  IF NUMBER(PATTERNSTRLEN)>1                /* CHECK POSITIONALS */    00278800
*    THEN                                                               00278900
*      DO;                                                              00279000
*        ZMS=' 8, "PATTERNSTRLEN'||          /**KPOSP* MSG*/            00279100
*            PATTERNSTRLEN||                                            00279200
*            '" "PATTERNSTRLEN"'||                                      00279300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00279400
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00279500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00279600
*        ZMACRET=8;                          /* MACRO ERROR */          00279700
*      END;                                                             00279800
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00279900
*  XPATTERNSTRLEN=PATTERNSTRLEN(1);          /* SET XVARIABLE */        00280000
*  IF PATTERNSTRLEN(1)=''                    /* CHECK FOR NULL */       00280100
*   THEN                                                                00280200
*    DO;                                     /* KEY IS REQUIRED */      00280300
*        ZXPATTERNSTRLEN='';                 /* RESET IN/OUTPUT */      00280400
*        ZMS=' 8,  '||                                                  00280500
*            ' "PATTERNSTRLEN" KEY AND ITS ARGUMENT'||                  00280600
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00280700
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00280800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00280900
*        ZMACRET=8;                          /* MACRO ERROR */          00281000
*    END;                                                               00281100
*  ELSE                                                                 00281200
*    ZXPATTERNSTRLEN='INPUT';                /* SET IN/OUTPUT */        00281300
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00281400
*  IF NUMBER(STRING)>1                       /* CHECK POSITIONALS */    00281500
*    THEN                                                               00281600
*      DO;                                                              00281700
*        ZMS=' 8, "STRING'||                 /**KPOSP* MSG*/            00281800
*            STRING||                                                   00281900
*            '" "STRING"'||                                             00282000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00282100
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00282200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00282300
*        ZMACRET=8;                          /* MACRO ERROR */          00282400
*      END;                                                             00282500
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00282600
*  XSTRING=STRING(1);                        /* SET XVARIABLE */        00282700
*  IF STRING(1)=''                           /* CHECK FOR NULL */       00282800
*   THEN                                                                00282900
*    DO;                                     /* KEY IS REQUIRED */      00283000
*        ZXSTRING='';                        /* RESET IN/OUTPUT */      00283100
*        ZMS=' 8,  '||                                                  00283200
*            ' "STRING" KEY AND ITS ARGUMENT'||                         00283300
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00283400
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00283500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00283600
*        ZMACRET=8;                          /* MACRO ERROR */          00283700
*    END;                                                               00283800
*  ELSE                                                                 00283900
*    ZXSTRING='INPUT';                       /* SET IN/OUTPUT */        00284000
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00284100
*  IF NUMBER(STRINGLEN)>1                    /* CHECK POSITIONALS */    00284200
*    THEN                                                               00284300
*      DO;                                                              00284400
*        ZMS=' 8, "STRINGLEN'||              /**KPOSP* MSG*/            00284500
*            STRINGLEN||                                                00284600
*            '" "STRINGLEN"'||                                          00284700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00284800
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00284900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00285000
*        ZMACRET=8;                          /* MACRO ERROR */          00285100
*      END;                                                             00285200
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00285300
*  XSTRINGLEN=STRINGLEN(1);                  /* SET XVARIABLE */        00285400
*  IF STRINGLEN(1)=''                        /* CHECK FOR NULL */       00285500
*   THEN                                                                00285600
*    DO;                                     /* KEY IS REQUIRED */      00285700
*        ZXSTRINGLEN='';                     /* RESET IN/OUTPUT */      00285800
*        ZMS=' 8,  '||                                                  00285900
*            ' "STRINGLEN" KEY AND ITS ARGUMENT'||                      00286000
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00286100
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00286200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00286300
*        ZMACRET=8;                          /* MACRO ERROR */          00286400
*    END;                                                               00286500
*  ELSE                                                                 00286600
*    ZXSTRINGLEN='INPUT';                    /* SET IN/OUTPUT */        00286700
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00286800
*  IF NUMBER(ZEROORMORE)>1                   /* CHECK POSITIONALS */    00286900
*    THEN                                                               00287000
*      DO;                                                              00287100
*        ZMS=' 8, "ZEROORMORE'||             /**KPOSP* MSG*/            00287200
*            ZEROORMORE||                                               00287300
*            '" "ZEROORMORE"'||                                         00287400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00287500
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00287600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00287700
*        ZMACRET=8;                          /* MACRO ERROR */          00287800
*      END;                                                             00287900
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00288000
*  XZEROORMORE=ZEROORMORE(1);                /* SET XVARIABLE */        00288100
*  IF ZEROORMORE(1)=''                       /* CHECK FOR NULL */       00288200
*   THEN                                                                00288300
*    DO;                                     /* KEY IS REQUIRED */      00288400
*        ZXZEROORMORE='';                    /* RESET IN/OUTPUT */      00288500
*        ZMS=' 8,  '||                                                  00288600
*            ' "ZEROORMORE" KEY AND ITS ARGUMENT'||                     00288700
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00288800
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00288900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00289000
*        ZMACRET=8;                          /* MACRO ERROR */          00289100
*    END;                                                               00289200
*  ELSE                                                                 00289300
*    ZXZEROORMORE='INPUT';                   /* SET IN/OUTPUT */        00289400
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00289500
*  IF NUMBER(ONECHAR)>1                      /* CHECK POSITIONALS */    00289600
*    THEN                                                               00289700
*      DO;                                                              00289800
*        ZMS=' 8, "ONECHAR'||                /**KPOSP* MSG*/            00289900
*            ONECHAR||                                                  00290000
*            '" "ONECHAR"'||                                            00290100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00290200
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00290300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00290400
*        ZMACRET=8;                          /* MACRO ERROR */          00290500
*      END;                                                             00290600
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00290700
*  XONECHAR=ONECHAR(1);                      /* SET XVARIABLE */        00290800
*  IF ONECHAR(1)=''                          /* CHECK FOR NULL */       00290900
*   THEN                                                                00291000
*    DO;                                     /* KEY IS REQUIRED */      00291100
*        ZXONECHAR='';                       /* RESET IN/OUTPUT */      00291200
*        ZMS=' 8,  '||                                                  00291300
*            ' "ONECHAR" KEY AND ITS ARGUMENT'||                        00291400
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00291500
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00291600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00291700
*        ZMACRET=8;                          /* MACRO ERROR */          00291800
*    END;                                                               00291900
*  ELSE                                                                 00292000
*    ZXONECHAR='INPUT';                      /* SET IN/OUTPUT */        00292100
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00292200
*  IF DELIMITER='DELIMITER' | DELIMITER='()'  /*CHECK ENTRY*/           00292300
*    THEN                                                               00292400
*      DO;                                                              00292500
*        ZMS=' 8, THE "DELIMITER" KEY'||     /**KOPTP* MSG*/            00292600
*            ' MUST CONTAIN ONE'||                                      00292700
*            ' (OR MORE) ARGUMENT(S).';                                 00292800
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00292900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00293000
*        ZMACRET=8;                          /* MACRO ERROR */          00293100
*      END;                                                             00293200
*  IF NUMBER(DELIMITER)>1                    /* CHECK POSITIONALS */    00293300
*    THEN                                                               00293400
*      DO;                                                              00293500
*        ZMS=' 8, "DELIMITER'||              /**KPOSP* MSG*/            00293600
*            DELIMITER||                                                00293700
*            '" "DELIMITER"'||                                          00293800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00293900
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00294000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00294100
*        ZMACRET=8;                          /* MACRO ERROR */          00294200
*      END;                                                             00294300
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00294400
*  ZXDELIMITER='INPUT';                      /* SET IN/OUTPUT */        00294500
*  XDELIMITER='LENGTHS_WERE_SET';            /* SET DEFAULT */          00294600
*  IF DELIMITER(1)~=''                       /* CHECK FOR NULL */       00294700
*    THEN                                                               00294800
*      XDELIMITER=DELIMITER(1);              /* SET XVARIABLE */        00294900
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00295000
*  IF WORKAREA='WORKAREA' | WORKAREA='()'    /*CHECK ENTRY*/            00295100
*    THEN                                                               00295200
*      DO;                                                              00295300
*        ZMS=' 8, THE "WORKAREA" KEY'||      /**KOPTP* MSG*/            00295400
*            ' MUST CONTAIN ONE'||                                      00295500
*            ' (OR MORE) ARGUMENT(S).';                                 00295600
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00295700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00295800
*        ZMACRET=8;                          /* MACRO ERROR */          00295900
*      END;                                                             00296000
*  IF NUMBER(WORKAREA)>1                     /* CHECK POSITIONALS */    00296100
*    THEN                                                               00296200
*      DO;                                                              00296300
*        ZMS=' 8, "WORKAREA'||               /**KPOSP* MSG*/            00296400
*            WORKAREA||                                                 00296500
*            '" "WORKAREA"'||                                           00296600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00296700
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00296800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00296900
*        ZMACRET=8;                          /* MACRO ERROR */          00297000
*      END;                                                             00297100
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00297200
*  ZXWORKAREA='INPUT';                       /* SET IN/OUTPUT */        00297300
*  XWORKAREA='NO_WORKAREA';                  /* SET DEFAULT */          00297400
*  IF WORKAREA(1)~=''                        /* CHECK FOR NULL */       00297500
*    THEN                                                               00297600
*      XWORKAREA=WORKAREA(1);                /* SET XVARIABLE */        00297700
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00297800
*  IF RETCODE='RETCODE' | RETCODE='()'       /*CHECK ENTRY*/            00297900
*    THEN                                                               00298000
*      DO;                                                              00298100
*        ZMS=' 8, THE "RETCODE" KEY'||       /**KOPTP* MSG*/            00298200
*            ' MUST CONTAIN ONE'||                                      00298300
*            ' (OR MORE) ARGUMENT(S).';                                 00298400
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00298500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00298600
*        ZMACRET=8;                          /* MACRO ERROR */          00298700
*      END;                                                             00298800
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00298900
*    THEN                                                               00299000
*      DO;                                                              00299100
*        ZMS=' 8, "RETCODE'||                /**KPOSP* MSG*/            00299200
*            RETCODE||                                                  00299300
*            '" "RETCODE"'||                                            00299400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00299500
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00299600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00299700
*        ZMACRET=8;                          /* MACRO ERROR */          00299800
*      END;                                                             00299900
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00300000
*  IF RETCODE(1)~=''                         /* CHECK FOR NULL */       00300100
*    THEN                                                               00300200
*      DO;                                                              00300300
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00300400
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00300500
*      END;                                                             00300600
*  ELSE                                                                 00300700
*    IF ZXRETCODE~=''                                                   00300800
*      THEN                                                             00300900
*        ZXRETCODE='';                       /* RESET OUTPUT */         00301000
*/*PG.P04 XMF~='L' & XMFSCK='COMPLETE' ------------------------------*/ 00301100
*      END;                                  /* END COMPLETE CHECKING*/ 00301200
*/********************************************************************/ 00301300
*/***PE.MF00 PARTIAL MACRO SYNTAX CHECKING                           */ 00301400
*/********************************************************************/ 00301500
*/*PE.MF01 XMF~='L' & XMFSCK='NOCHECK' ------------------------------*/ 00301600
*  IF XMF~='L' & XMFSCK='NOCHECK'                                       00301700
*    THEN                                                               00301800
*      DO;                                   /* PARTIAL SYNTAX CHECK */ 00301900
*/*PE.KC00 INITIALIZE KEYWORD CONTROL VARIABLES----------------------*/ 00302000
*/*PE.P01 EXCESSIVE POSITIONALS--------------------------------------*/ 00302100
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00302200
*    THEN                                                               00302300
*      DO;                                                              00302400
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'|| /**PPOSP* MSG*/            00302500
*            ' "'||MACLIST||'"'||                                       00302600
*            ' CANNOT BE USED.'||                                       00302700
*            ' NO POSITIONAL ARGUMENTS'||                               00302800
*            ' ARE ALLOWED.';                                           00302900
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00303000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00303100
*        ZMACRET=8;                          /* MACRO ERROR */          00303200
*      END;                                                             00303300
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00303400
*  IF NUMBER(PATTERNSTR)>1                   /* CHECK POSITIONALS */    00303500
*    THEN                                                               00303600
*      DO;                                                              00303700
*        ZMS=' 8, "PATTERNSTR'||             /**KPOSP* MSG*/            00303800
*            PATTERNSTR||                                               00303900
*            '" "PATTERNSTR"'||                                         00304000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00304100
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00304200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00304300
*        ZMACRET=8;                          /* MACRO ERROR */          00304400
*      END;                                                             00304500
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00304600
*  IF PATTERNSTR(1)~=''                      /* CHECK FOR NULL */       00304700
*    THEN                                                               00304800
*      DO;                                                              00304900
*        XPATTERNSTR=PATTERNSTR(1);          /* SET XVARIABLE */        00305000
*        ZXPATTERNSTR='INPUT';               /* SET IN/OUTPUT */        00305100
*      END;                                                             00305200
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00305300
*  IF NUMBER(PATTERNSTRLEN)>1                /* CHECK POSITIONALS */    00305400
*    THEN                                                               00305500
*      DO;                                                              00305600
*        ZMS=' 8, "PATTERNSTRLEN'||          /**KPOSP* MSG*/            00305700
*            PATTERNSTRLEN||                                            00305800
*            '" "PATTERNSTRLEN"'||                                      00305900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00306000
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00306100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00306200
*        ZMACRET=8;                          /* MACRO ERROR */          00306300
*      END;                                                             00306400
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00306500
*  IF PATTERNSTRLEN(1)~=''                   /* CHECK FOR NULL */       00306600
*    THEN                                                               00306700
*      DO;                                                              00306800
*        XPATTERNSTRLEN=PATTERNSTRLEN(1);    /* SET XVARIABLE */        00306900
*        ZXPATTERNSTRLEN='INPUT';            /* SET IN/OUTPUT */        00307000
*      END;                                                             00307100
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00307200
*  IF NUMBER(STRING)>1                       /* CHECK POSITIONALS */    00307300
*    THEN                                                               00307400
*      DO;                                                              00307500
*        ZMS=' 8, "STRING'||                 /**KPOSP* MSG*/            00307600
*            STRING||                                                   00307700
*            '" "STRING"'||                                             00307800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00307900
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00308000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00308100
*        ZMACRET=8;                          /* MACRO ERROR */          00308200
*      END;                                                             00308300
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00308400
*  IF STRING(1)~=''                          /* CHECK FOR NULL */       00308500
*    THEN                                                               00308600
*      DO;                                                              00308700
*        XSTRING=STRING(1);                  /* SET XVARIABLE */        00308800
*        ZXSTRING='INPUT';                   /* SET IN/OUTPUT */        00308900
*      END;                                                             00309000
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00309100
*  IF NUMBER(STRINGLEN)>1                    /* CHECK POSITIONALS */    00309200
*    THEN                                                               00309300
*      DO;                                                              00309400
*        ZMS=' 8, "STRINGLEN'||              /**KPOSP* MSG*/            00309500
*            STRINGLEN||                                                00309600
*            '" "STRINGLEN"'||                                          00309700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00309800
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00309900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00310000
*        ZMACRET=8;                          /* MACRO ERROR */          00310100
*      END;                                                             00310200
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00310300
*  IF STRINGLEN(1)~=''                       /* CHECK FOR NULL */       00310400
*    THEN                                                               00310500
*      DO;                                                              00310600
*        XSTRINGLEN=STRINGLEN(1);            /* SET XVARIABLE */        00310700
*        ZXSTRINGLEN='INPUT';                /* SET IN/OUTPUT */        00310800
*      END;                                                             00310900
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00311000
*  IF NUMBER(ZEROORMORE)>1                   /* CHECK POSITIONALS */    00311100
*    THEN                                                               00311200
*      DO;                                                              00311300
*        ZMS=' 8, "ZEROORMORE'||             /**KPOSP* MSG*/            00311400
*            ZEROORMORE||                                               00311500
*            '" "ZEROORMORE"'||                                         00311600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00311700
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00311800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00311900
*        ZMACRET=8;                          /* MACRO ERROR */          00312000
*      END;                                                             00312100
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00312200
*  IF ZEROORMORE(1)~=''                      /* CHECK FOR NULL */       00312300
*    THEN                                                               00312400
*      DO;                                                              00312500
*        XZEROORMORE=ZEROORMORE(1);          /* SET XVARIABLE */        00312600
*        ZXZEROORMORE='INPUT';               /* SET IN/OUTPUT */        00312700
*      END;                                                             00312800
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00312900
*  IF NUMBER(ONECHAR)>1                      /* CHECK POSITIONALS */    00313000
*    THEN                                                               00313100
*      DO;                                                              00313200
*        ZMS=' 8, "ONECHAR'||                /**KPOSP* MSG*/            00313300
*            ONECHAR||                                                  00313400
*            '" "ONECHAR"'||                                            00313500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00313600
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00313700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00313800
*        ZMACRET=8;                          /* MACRO ERROR */          00313900
*      END;                                                             00314000
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00314100
*  IF ONECHAR(1)~=''                         /* CHECK FOR NULL */       00314200
*    THEN                                                               00314300
*      DO;                                                              00314400
*        XONECHAR=ONECHAR(1);                /* SET XVARIABLE */        00314500
*        ZXONECHAR='INPUT';                  /* SET IN/OUTPUT */        00314600
*      END;                                                             00314700
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00314800
*  IF DELIMITER='DELIMITER'                  /* CHECK ENTRY */          00314900
*    THEN                                                               00315000
*      DO;                                                              00315100
*        ZMS=' 8, THE "DELIMITER" KEY'||     /**KOPTP* MSG*/            00315200
*            ' MUST CONTAIN ONE'||                                      00315300
*            ' (OR MORE) ARGUMENT(S).';                                 00315400
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00315500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00315600
*        ZMACRET=8;                          /* MACRO ERROR */          00315700
*      END;                                                             00315800
*  IF NUMBER(DELIMITER)>1                    /* CHECK POSITIONALS */    00315900
*    THEN                                                               00316000
*      DO;                                                              00316100
*        ZMS=' 8, "DELIMITER'||              /**KPOSP* MSG*/            00316200
*            DELIMITER||                                                00316300
*            '" "DELIMITER"'||                                          00316400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00316500
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00316600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00316700
*        ZMACRET=8;                          /* MACRO ERROR */          00316800
*      END;                                                             00316900
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00317000
*  IF DELIMITER(1)~=''                       /* CHECK FOR NULL */       00317100
*    THEN                                                               00317200
*      DO;                                                              00317300
*        XDELIMITER=DELIMITER(1);            /* SET XVARIABLE */        00317400
*        ZXDELIMITER='INPUT';                /* SET IN/OUTPUT */        00317500
*      END;                                                             00317600
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00317700
*  IF WORKAREA='WORKAREA'                    /* CHECK ENTRY */          00317800
*    THEN                                                               00317900
*      DO;                                                              00318000
*        ZMS=' 8, THE "WORKAREA" KEY'||      /**KOPTP* MSG*/            00318100
*            ' MUST CONTAIN ONE'||                                      00318200
*            ' (OR MORE) ARGUMENT(S).';                                 00318300
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00318400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00318500
*        ZMACRET=8;                          /* MACRO ERROR */          00318600
*      END;                                                             00318700
*  IF NUMBER(WORKAREA)>1                     /* CHECK POSITIONALS */    00318800
*    THEN                                                               00318900
*      DO;                                                              00319000
*        ZMS=' 8, "WORKAREA'||               /**KPOSP* MSG*/            00319100
*            WORKAREA||                                                 00319200
*            '" "WORKAREA"'||                                           00319300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00319400
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00319500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00319600
*        ZMACRET=8;                          /* MACRO ERROR */          00319700
*      END;                                                             00319800
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00319900
*  IF WORKAREA(1)~=''                        /* CHECK FOR NULL */       00320000
*    THEN                                                               00320100
*      DO;                                                              00320200
*        XWORKAREA=WORKAREA(1);              /* SET XVARIABLE */        00320300
*        ZXWORKAREA='INPUT';                 /* SET IN/OUTPUT */        00320400
*      END;                                                             00320500
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00320600
*  IF RETCODE='RETCODE'                      /* CHECK ENTRY */          00320700
*    THEN                                                               00320800
*      DO;                                                              00320900
*        ZMS=' 8, THE "RETCODE" KEY'||       /**KOPTP* MSG*/            00321000
*            ' MUST CONTAIN ONE'||                                      00321100
*            ' (OR MORE) ARGUMENT(S).';                                 00321200
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00321300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00321400
*        ZMACRET=8;                          /* MACRO ERROR */          00321500
*      END;                                                             00321600
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00321700
*    THEN                                                               00321800
*      DO;                                                              00321900
*        ZMS=' 8, "RETCODE'||                /**KPOSP* MSG*/            00322000
*            RETCODE||                                                  00322100
*            '" "RETCODE"'||                                            00322200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00322300
*        ANS MSG('?ASAXWC ---> '||ZMS);                                 00322400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00322500
*        ZMACRET=8;                          /* MACRO ERROR */          00322600
*      END;                                                             00322700
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00322800
*  IF RETCODE(1)~=''                         /* CHECK FOR NULL */       00322900
*    THEN                                                               00323000
*      DO;                                                              00323100
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00323200
*        ZXRETCODE='OUTPUT';                 /* SET IN/OUTPUT */        00323300
*      END;                                                             00323400
*/*PE.MF02 XMF~='L' & XMFSCK='NOCHECK' ------------------------------*/ 00323500
*      END;                                  /* END PARTIAL CHECK */    00323600
*/********************************************************************/ 00323700
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00323800
*/********************************************************************/ 00323900
*  IF ZMACRET = 0                                                       00324000
*    THEN                                                               00324100
*      DO;                                                              00324200
*/********************************************************************/ 00324300
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00324400
*/********************************************************************/ 00324500
*  ANS(MACCONC||'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);             00324600
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00324700
*    THEN                                                               00324800
*      ANS(MACCONC||'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);          00324900
*    ELSE                                                               00325000
*      ANS(MACCONC||'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);          00325100
*/********************************************************************/ 00325200
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00325300
*  IF XMF~='L'                                                          00325400
*    THEN                                                               00325500
*      ANS('DO; /* ASAXWC-PLISTVER */')                                 00325600
*          NORESCAN COL(MACLMAR);                                       00325700
*/*MCMPLS01 RFY 15*/                                                    00325800
*  IF XMF~='L' & ZMACRET = 0                                            00325900
*    THEN                                                               00326000
*      ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);                   00326100
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00326200
*DCL EHAMAPS CHAR EXTERNAL;                                             00326300
*IF INDEX(EHAMAPS,'XM@')=0 THEN                                         00326400
*  EHAMAPS=EHAMAPS||'XM@,';                                             00326500
*DCL EHAREGS CHAR EXTERNAL;                                             00326600
*IF INDEX(EHAREGS,'00P')=0 THEN                                         00326700
*  EHAREGS=EHAREGS||'00P';                                              00326800
*IF XMF = 'M' & WorkArea ~= '' THEN                                     00326900
*DO;                                                                    00327000
*   ZMS = 'WORKAREA IS NOT ALLOWED WITH MF(M)';                         00327100
*   ANS MSG('?ASAXWC ---> '||ZMS);                                      00327200
*   ANS(COMMENT(ZMS)) COL(MACLMAR);                                     00327300
*   ZMACRET=8;                          /* MACRO ERROR */               00327400
*END;                                                                   00327500
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00327600
*/*PL.LL01 ?ASAXWC MF=L PARAMETER LIST-------------------------------*/ 00327700
*  IF XMF='L'                                                           00327800
*    THEN                                                               00327900
*      DO;                                                              00328000
*        ANS('DCL 1 '||XMFCTRL||' '||XMFATTR||', '||                    00328100
*            '/* ?ASAXWC PARM LIST*/')                                  00328200
*            NORESCAN COL(MACLMAR);                                     00328300
*/*PL.LL13 ADDR XPATTERNSTR PTR(31) INPUT ADDR-----------------------*/ 00328400
*        ANS('2 '||XMFCTRL||                                            00328500
*            '_XPATTERNSTR_ADDR PTR(31), '||                            00328600
*            '/* '||ZXPATTERNSTR_ADDR||' XPATTERNSTR_ADDR */')          00328700
*            NORESCAN COL(MACLMAR+2);                                   00328800
*/*PL.LL13  XPATTERNSTRLEN FIXED(31) INPUT---------------------------*/ 00328900
*        ANS('2 '||XMFCTRL||                                            00329000
*            '_XPATTERNSTRLEN FIXED(31), '||                            00329100
*            '/* '||ZXPATTERNSTRLEN||' XPATTERNSTRLEN */')              00329200
*            NORESCAN COL(MACLMAR+2);                                   00329300
*/*PL.LL13 ADDR XSTRING PTR(31) INPUT ADDR---------------------------*/ 00329400
*        ANS('2 '||XMFCTRL||                                            00329500
*            '_XSTRING_ADDR PTR(31), '||                                00329600
*            '/* '||ZXSTRING_ADDR||' XSTRING_ADDR */')                  00329700
*            NORESCAN COL(MACLMAR+2);                                   00329800
*/*PL.LL13  XSTRINGLEN FIXED(31) INPUT-------------------------------*/ 00329900
*        ANS('2 '||XMFCTRL||                                            00330000
*            '_XSTRINGLEN FIXED(31), '||                                00330100
*            '/* '||ZXSTRINGLEN||' XSTRINGLEN */')                      00330200
*            NORESCAN COL(MACLMAR+2);                                   00330300
*/*PL.LL13 ADDR XZEROORMORE PTR(31) INPUT ADDR-----------------------*/ 00330400
*        ANS('2 '||XMFCTRL||                                            00330500
*            '_XZEROORMORE_ADDR PTR(31), '||                            00330600
*            '/* '||ZXZEROORMORE_ADDR||' XZEROORMORE_ADDR */')          00330700
*            NORESCAN COL(MACLMAR+2);                                   00330800
*/*PL.LL13 ADDR XONECHAR PTR(31) INPUT ADDR--------------------------*/ 00330900
*        ANS('2 '||XMFCTRL||                                            00331000
*            '_XONECHAR_ADDR PTR(31), '||                               00331100
*            '/* '||ZXONECHAR_ADDR||' XONECHAR_ADDR */')                00331200
*            NORESCAN COL(MACLMAR+2);                                   00331300
*/*PL.LL13 ADDR XDELIMITER PTR(31) INPUT ADDR------------------------*/ 00331400
*        ANS('2 '||XMFCTRL||                                            00331500
*            '_XDELIMITER_ADDR PTR(31), '||                             00331600
*            '/* '||ZXDELIMITER_ADDR||' XDELIMITER_ADDR */')            00331700
*            NORESCAN COL(MACLMAR+2);                                   00331800
*/*PL.LL18 ----------------------------------------------------------*/ 00331900
*        ANS('2 * CHAR(0);')                                            00332000
*            NORESCAN COL(MACLMAR+2);                                   00332100
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00332200
*      END;                                                             00332300
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00332400
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00332500
*  DEACT ZPRMLINE;                                                      00332600
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00332700
*  DEACT ZNDX;                                                          00332800
*  ZNDX=MACINDEX(1:4);         /* MACINDEX LAST THREE DIGITS        */  00332900
*/*PL.L02 ?ASAXWC PARAMETER LIST-------------------------------------*/ 00333000
*  IF XMF~='L'                                                          00333100
*    THEN                                                               00333200
*      DO;                                                              00333300
*/*PL.L03 ?ASAXWC PARAMETER LIST-------------------------------------*/ 00333400
*        IF XMF='S'                                                     00333500
*          THEN                                                         00333600
*            XMFCTRL='#ZPLIST';                                         00333700
*/*PL.L04 ?ASAXWC PARAMETER LIST-------------------------------------*/ 00333800
*        ZPRMLINE='DCL 1 #Z'||ZNDX||' DEF('||XMFCTRL||'),'||            00333900
*                 ' /* ?ASAXWC PARM LIST*/';                            00334000
*/*PL.L08 ADDR XPATTERNSTR PTR(31) INPUT ADDR------------------------*/ 00334100
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00334200
*                 '_XPATTERNSTR_ADDR PTR(31), '||                       00334300
*                 '/* '||ZXPATTERNSTR_ADDR||' XPATTERNSTR_ADDR */';     00334400
*/*PL.L08  XPATTERNSTRLEN FIXED(31) INPUT----------------------------*/ 00334500
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00334600
*                 '_XPATTERNSTRLEN FIXED(31), '||                       00334700
*                 '/* '||ZXPATTERNSTRLEN||' XPATTERNSTRLEN */';         00334800
*/*PL.L08 ADDR XSTRING PTR(31) INPUT ADDR----------------------------*/ 00334900
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00335000
*                 '_XSTRING_ADDR PTR(31), '||                           00335100
*                 '/* '||ZXSTRING_ADDR||' XSTRING_ADDR */';             00335200
*/*PL.L08  XSTRINGLEN FIXED(31) INPUT--------------------------------*/ 00335300
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00335400
*                 '_XSTRINGLEN FIXED(31), '||                           00335500
*                 '/* '||ZXSTRINGLEN||' XSTRINGLEN */';                 00335600
*/*PL.L08 ADDR XZEROORMORE PTR(31) INPUT ADDR------------------------*/ 00335700
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00335800
*                 '_XZEROORMORE_ADDR PTR(31), '||                       00335900
*                 '/* '||ZXZEROORMORE_ADDR||' XZEROORMORE_ADDR */';     00336000
*/*PL.L08 ADDR XONECHAR PTR(31) INPUT ADDR---------------------------*/ 00336100
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00336200
*                 '_XONECHAR_ADDR PTR(31), '||                          00336300
*                 '/* '||ZXONECHAR_ADDR||' XONECHAR_ADDR */';           00336400
*/*PL.L08 ADDR XDELIMITER PTR(31) INPUT ADDR-------------------------*/ 00336500
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00336600
*                 '_XDELIMITER_ADDR PTR(31), '||                        00336700
*                 '/* '||ZXDELIMITER_ADDR||' XDELIMITER_ADDR */';       00336800
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00336900
*        ZPRMNUM=ZPRMNUM+1;                                             00337000
*        ZPRM(ZPRMNUM)=ZPRMLINE||' 2 * CHAR(0);';                       00337100
*        IF XPLISTVER~=0                                                00337200
*           & XMF~='S'                                                  00337300
*          THEN                                                         00337400
*            DO;                                                        00337500
*              ZPRMNUM=ZPRMNUM+1;                                       00337600
*              ZPRM(ZPRMNUM)=                                           00337700
*               'DCL #Z'||ZNDX||'_LENCHECK FIXED(32) CONSTANT('||       00337800
*               'LENGTH('||XMFCTRL||')-LENGTH(#Z'||ZNDX||'));'||        00337900
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'||            00338000
*               ' IS LONG ENOUGH */';                                   00338100
*            END;                                                       00338200
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00338300
*        ZPLLEN=28;                                                     00338400
*        IF ZPRMMAX<ZPLLEN                                              00338500
*           & XMF~='E'                                                  00338600
*           & XMF~='M'                                                  00338700
*          THEN                                                         00338800
*            ZPRMMAX=ZPLLEN;                                            00338900
*/*PL.L13 -----------------------------------------------------------*/ 00339000
*      END;                                                             00339100
*/*PI.L01 XMF~='L' & XMFSCK='COMPLETE' ------------------------------*/ 00339200
*  IF XMF~='L'                                                          00339300
*    THEN                                                               00339400
*      DO;                                                              00339500
*        ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);               00339600
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00339700
*  IF XMFSCK='COMPLETE'                                                 00339800
*    THEN                                                               00339900
*            ANS('#Z'||ZNDX||'=''''B;'||                                00340000
*                '/* CLEAR PARAMETER AREA */')                          00340100
*                NORESCAN COL(MACLMAR);                                 00340200
*/*PI.L15 ADDR(XPATTERNSTR) CHAR(*)----------------------------------*/ 00340300
*        IF ZXPATTERNSTR~=''                                            00340400
*          THEN                                                         00340500
*            ANS('#Z'||ZNDX||'_XPATTERNSTR_ADDR='||                     00340600
*                'ADDR('||XPATTERNSTR||');'||                           00340700
*                '/* ADDR XPATTERNSTR CHAR(*) */')                      00340800
*                NORESCAN COL(MACLMAR);                                 00340900
*/*PI.L17 XPATTERNSTRLEN FIXED(31)-----------------------------------*/ 00341000
*        IF ZXPATTERNSTRLEN='INPUT' |                                   00341100
*           ZXPATTERNSTRLEN='INOUT'                                     00341200
*          THEN                                                         00341300
*            ANS('#Z'||ZNDX||'_XPATTERNSTRLEN='||                       00341400
*                XPATTERNSTRLEN||';'||                                  00341500
*                '/* XPATTERNSTRLEN FIXED(31) */')                      00341600
*                NORESCAN COL(MACLMAR);                                 00341700
*/*PI.L15 ADDR(XSTRING) CHAR(*)--------------------------------------*/ 00341800
*        IF ZXSTRING~=''                                                00341900
*          THEN                                                         00342000
*            ANS('#Z'||ZNDX||'_XSTRING_ADDR='||                         00342100
*                'ADDR('||XSTRING||');'||                               00342200
*                '/* ADDR XSTRING CHAR(*) */')                          00342300
*                NORESCAN COL(MACLMAR);                                 00342400
*/*PI.L17 XSTRINGLEN FIXED(31)---------------------------------------*/ 00342500
*        IF ZXSTRINGLEN='INPUT' |                                       00342600
*           ZXSTRINGLEN='INOUT'                                         00342700
*          THEN                                                         00342800
*            ANS('#Z'||ZNDX||'_XSTRINGLEN='||                           00342900
*                XSTRINGLEN||';'||                                      00343000
*                '/* XSTRINGLEN FIXED(31) */')                          00343100
*                NORESCAN COL(MACLMAR);                                 00343200
*/*PI.L15 ADDR(XZEROORMORE) CHAR(1)----------------------------------*/ 00343300
*        IF ZXZEROORMORE~=''                                            00343400
*          THEN                                                         00343500
*            ANS('#Z'||ZNDX||'_XZEROORMORE_ADDR='||                     00343600
*                'ADDR('||XZEROORMORE||');'||                           00343700
*                '/* ADDR XZEROORMORE CHAR(1) */')                      00343800
*                NORESCAN COL(MACLMAR);                                 00343900
*/*PI.L15 ADDR(XONECHAR) CHAR(1)-------------------------------------*/ 00344000
*        IF ZXONECHAR~=''                                               00344100
*          THEN                                                         00344200
*            ANS('#Z'||ZNDX||'_XONECHAR_ADDR='||                        00344300
*                'ADDR('||XONECHAR||');'||                              00344400
*                '/* ADDR XONECHAR CHAR(1) */')                         00344500
*                NORESCAN COL(MACLMAR);                                 00344600
*/*PI.L14 CHECK FOR * AS THE CHAR(1) ARGUMENT------------------------*/ 00344700
*        IF TRANSLATE(XDELIMITER)                                       00344800
*                    = 'LENGTHS_WERE_SET'                               00344900
*           & XMFSCK='COMPLETE'                                         00345000
*          THEN                                                         00345100
*            ZXDELIMITER='';                 /* RESET INPUT/INOUT */    00345200
*/*PI.L15 ADDR(XDELIMITER) CHAR(1)-----------------------------------*/ 00345300
*        IF ZXDELIMITER~=''                                             00345400
*          THEN                                                         00345500
*            DO;                                                        00345600
*            IF (XDELIMITER='LENGTHS_WERE_SET' & XMFSCK~='COMPLETE')    00345700
*              THEN                                                     00345800
*                ANS('#Z'||ZNDX||'_XDELIMITER_ADDR=0;'||                00345900
*                    '/* ADDR XDELIMITER CHAR(1) */')                   00346000
*                    NORESCAN COL(MACLMAR);                             00346100
*            IF XDELIMITER~='LENGTHS_WERE_SET'                          00346200
*              THEN                                                     00346300
*                ANS('#Z'||ZNDX||'_XDELIMITER_ADDR='||                  00346400
*                    'ADDR('||XDELIMITER||');'||                        00346500
*                    '/* ADDR XDELIMITER CHAR(1) */')                   00346600
*                    NORESCAN COL(MACLMAR);                             00346700
*            END;                                                       00346800
*/*PI.L29 NOT MF=M MACRO FORM----------------------------------------*/ 00346900
*        IF XMF~='M'                                                    00347000
*          THEN                                                         00347100
*            DO;                                                        00347200
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00347300
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00347400
*              ANS('GPR01P=ADDR(#Z'||ZNDX||');'||                       00347500
*                  '/* PARAMETER LIST */')                              00347600
*                  NORESCAN COL(MACLMAR);                               00347700
*              IF SYSASCE~='P'                                          00347800
*                THEN                                                   00347900
*                  ANS('SAR(GPR01P,ALET(#Z'||ZNDX||'));'||              00348000
*                      '/* PARAMETER LIST AR */')                       00348100
*                      NORESCAN COL(MACLMAR);                           00348200
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00348300
* IF WorkArea = '' |                                   /*        @L1A*/ 00348400
*    Translate(Xworkarea) = 'NO_WORKAREA' THEN         /*        @L1A*/ 00348500
*    ANS('CALL ((((XM@CVT+140)->I031P+232) -> I031P+28) -> I031P)'      00348600
*            || '-> I31ANY;')                                           00348700
*         SKIP COL(5);                                 /*        @L1A*/ 00348800
* ELSE DO;             /* Workarea, use ASAWILDB                 @L1A*/ 00348900
*    BANS SKIP COL(5);                                 /*        @L1A*/ 00349000
*      'RFY GPR00P RSTD;'                                               00349100
*      'GPR00P = ADDR(' || XWorkArea || ');'                            00349200
*      'CALL ((((XM@CVT+140)->I031P+232) -> I031P+32) -> I031P)' ||     00349300
*            '-> I31ANY;'                                               00349400
*      'RFY GPR00P UNRSTD;'                                             00349500
*    EANS;                                             /*        @L1A*/ 00349600
* END;                                                 /*        @L1A*/ 00349700
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00349800
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00349900
*              IF NUMBER(RETCODE)>0                                     00350000
*                THEN                                                   00350100
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00350200
*/*PO.L08 XRETCODE FIXED(31) RETURN CODE-----------------------------*/ 00350300
*              IF NUMBER(RETCODE)>0                                     00350400
*                THEN                                                   00350500
*                    ANS(XRETCODE||                                     00350600
*                     '=GPR15F; /* SET RETURN CODE */')                 00350700
*                      NORESCAN COL(MACLMAR);                           00350800
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00350900
*              IF NUMBER(RETCODE)>0                                     00351000
*                THEN                                                   00351100
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00351200
*/*PO.L11 END OF FUNCTION INVOCATION---------------------------------*/ 00351300
*            END;                                                       00351400
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00351500
*      END;                                                             00351600
*/*PO.L13 ASAXWC USAGE INDICATOR-------------------------------------*/ 00351700
*  ZASAXWC='YES';                            /* SET ASAXWC USED */      00351800
*/*PO.L15 END OF EXECUTABLE ASAXWC-PLISTVER MACRO--------------------*/ 00351900
*  IF XMF~='L'                                                          00352000
*    THEN                                                               00352100
*      ANS('END; /* ASAXWC-PLISTVER */')                                00352200
*          NORESCAN COL(MACLMAR);                                       00352300
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00352400
*  ANS(MACCONC||'LIST POP NOECHO;') NORESCAN COL(MACLMAR);              00352500
*/*PO.L17 END OF ASAXWC MACRO----------------------------------------*/ 00352600
*  ANS(MACCONC||'SPACE;') NORESCAN COL(MACLMAR);                        00352700
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00352800
*/*******************************************************************/  00352900
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ~= 0            */  00353000
*/*******************************************************************/  00353100
*      END;                                                             00353200
*/*******************************************************************/  00353300
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00353400
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00353500
*/*******************************************************************/  00353600
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00353700
*    THEN                                                               00353800
*      DO;                                                              00353900
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00354000
*                                      DOUBLEWORD MULTIPLES        */   00354100
*/*******************************************************************/  00354200
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00354300
*/*******************************************************************/  00354400
*        IF XMF ~= 'M' & XMF ~= 'E'                                     00354500
*          THEN                                                         00354600
*            DO;                                                        00354700
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00354800
*                THEN                                                   00354900
*                  DO;                                                  00355000
*                    ANS('?EPILOG                                       00355100
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00355200
*                    EHALIST=EHALIST||',AMG,';                          00355300
*                  END;                                                 00355400
*            END;                                                       00355500
*/*******************************************************************/  00355600
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00355700
*/*******************************************************************/  00355800
*        IF XMF ~= 'M' & XMF ~= 'E'                                     00355900
*          THEN                                                         00356000
*            DO;                                                        00356100
*              IF ZPRMMAX>EHAMAXLEN                                     00356200
*                THEN                                                   00356300
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00356400
*            END;                                                       00356500
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00356600
*          ANS('?EPILOG STRING('''||ZPRM(ZI)||''');')                   00356700
*              COL(MACLMAR);                                            00356800
*        END;                                                           00356900
*      END;                                                             00357000
*/*-----------------------------------------------------------------*/  00357100
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00357200
*/*        BY ?EPILOG                                               */  00357300
*/*-----------------------------------------------------------------*/  00357400
*        IF INDEX(EHAREGS,'01P')=0                                      00357500
*          THEN                                                         00357600
*            EHAREGS=EHAREGS||'01P'; /* GPR01P                      */  00357700
*        IF INDEX(EHAREGS,'15F')=0                                      00357800
*          THEN                                                         00357900
*            EHAREGS=EHAREGS||'15F'; /* GPR15F                      */  00358000
*  RETURN CODE(ZMACRET);                                                00358100
*%END ASAXWC;                                                           00358200
