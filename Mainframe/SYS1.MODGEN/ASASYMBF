*%ASASYMBF: MACRO KEYS(NOSYMBOL,TRTABLE,INITTAB,EPADDR);                00000100
*/**** START OF SPECIFICATIONS **************************************** 00000200
*                                                                     * 00000300
*                                                                     * 00000400
*01* MACRO NAME:  ASASYMBF                               -05/06/94-<> * 00000500
*                                                                     * 00000600
*                                                                     * 00000700
*01* DESCRIPTIVE NAME:  Fast path to ASASYMBM                         * 00000800
*                                                                     * 00000900
*01* PROPRIETARY STATEMENT:                                           * 00001000
*                                                                     * 00001100
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001200
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00001300
*     5655-068 (C) COPYRIGHT IBM CORP. 1994                           * 00001400
*     SEE COPYRIGHT INSTRUCTIONS                                      * 00001500
*                                                                     * 00001600
* STATUS= HBB5520                                                     * 00001700
*                                                                     * 00001800
*                                                                     * 00001900
*                                                                     * 00002000
*01* FUNCTION:                                                        * 00002100
*                                                                     * 00002200
*                                                                     * 00002300
*      This service uses a TRT loop to check if there any symbols to  * 00002400
*      be resolved. If not, it bypasses the ASASYMBM service          * 00002500
*      invocation, thus avoiding the overhead of that service, and    * 00002600
*      thus providing a fastpath for the case where there is no       * 00002700
*      symbol resolution to be done.                                  * 00002800
*                                                                     * 00002900
*01* EXTERNAL CLASSIFICATION:  NONE                                   * 00003000
*                                                                     * 00003100
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00003200
*                                                                     * 00003300
*01* ENVIRONMENT:                                                     * 00003400
*                                                                     * 00003500
*                                                                     * 00003600
*      Minimum authorization: Problem state. PSW key 8-15.            * 00003700
*                                                                     * 00003800
*      Dispatchable unit mode: Task mode.                             * 00003900
*                                                                     * 00004000
*      Cross Memory Mode: PASN=HASN=SASN.                             * 00004100
*                                                                     * 00004200
*      AMODE:            31-bit.                                      * 00004300
*                                                                     * 00004400
*      ASC mode:         Primary.                                     * 00004500
*                                                                     * 00004600
*      Interrupt status: Enabled for I/O and external interrupts.     * 00004700
*                                                                     * 00004800
*      Locks:            No locks held.                               * 00004900
*                                                                     * 00005000
*      Control parameters: Control parameters must be in the primary  * 00005100
*                        address space.                               * 00005200
*                                                                     * 00005300
*                                                                     * 00005400
*                                                                     * 00005500
*01* PROGRAMMING REQUIREMENTS:                                        * 00005600
*                                                                     * 00005700
*    Include mapping macro ASASYMBP to get a mapping of the SYMBP     * 00005800
*    area. Provide addressability (using) to the SYMBP area that is   * 00005900
*    to be passed to the ASASYMBM service.                            * 00006000
*                                                                     * 00006100
*01* RESTRICTIONS:                                                    * 00006200
*                                                                     * 00006300
*    None.                                                            * 00006400
*                                                                     * 00006500
*01* INPUT REGISTER INFORMATION:                                      * 00006600
*                                                                     * 00006700
*    Before issuing the ASASYMBF macro, the caller must ensure that   * 00006800
*    the following general purpose registers (GPRs) contain the       * 00006900
*    specified information.                                           * 00007000
*                                                                     * 00007100
*                                                                     * 00007200
*    REGISTER  CONTENTS                                               * 00007300
*                                                                     * 00007400
*    13        The address of a 72-byte standard save area in the     * 00007500
*              primary address space                                  * 00007600
*                                                                     * 00007700
*                                                                     * 00007800
*                                                                     * 00007900
*    Before issuing the ASASYMBF macro, the caller does not have to   * 00008000
*    place any information into any access register (AR).             * 00008100
*                                                                     * 00008200
*01* OUTPUT REGISTER INFORMATION:                                     * 00008300
*                                                                     * 00008400
*    When control returns to the caller, the GPRs contain:            * 00008500
*                                                                     * 00008600
*                                                                     * 00008700
*    REGISTER  CONTENTS                                               * 00008800
*                                                                     * 00008900
*    0-2       Used as work registers by the system                   * 00009000
*                                                                     * 00009100
*    3-13      Unchanged                                              * 00009200
*                                                                     * 00009300
*    14        Used as a work register by the system                  * 00009400
*                                                                     * 00009500
*    15        Return code from the ASASYMBM service                  * 00009600
*                                                                     * 00009700
*                                                                     * 00009800
*                                                                     * 00009900
*    When control returns to the caller, the ARs contain:             * 00010000
*                                                                     * 00010100
*                                                                     * 00010200
*    REGISTER  CONTENTS                                               * 00010300
*                                                                     * 00010400
*    0-1       Used as work registers by the system                   * 00010500
*                                                                     * 00010600
*    2-13      Unchanged                                              * 00010700
*                                                                     * 00010800
*    14-15     Used as work registers by the system                   * 00010900
*                                                                     * 00011000
*                                                                     * 00011100
*                                                                     * 00011200
*    Note that when control is passed to the "NOSYMBOLS" label, GPR   * 00011300
*    15 does not contain a return code.                               * 00011400
*                                                                     * 00011500
*01* PERFORMANCE IMPLICATIONS:                                        * 00011600
*                                                                     * 00011700
*    None.                                                            * 00011800
*                                                                     * 00011900
*01* SYNTAX:                                                          * 00012000
*                                                                     * 00012100
*[xlabel]  ASASYMBF     NOSYMBOL=xnosymbol                            * 00012200
*                      ,TRTABLE=xtrtable                              * 00012300
*                        ¿[,INITTAB=YES]                              * 00012400
*                        ¾[,INITTAB=NO]                               * 00012500
*                     [,EPADDR=¬xepaddr|USE_LINK­]                    * 00012600
*                                                                     * 00012700
*                                                                     * 00012800
*      Where:                                                         * 00012900
*                                                                     * 00013000
*                                                                     * 00013100
*      [xlabel]                                                       * 00013200
*          is an optional symbol, starting in column 1, that is the   * 00013300
*          name on the ASASYMBF macro invocation.  The name must      * 00013400
*          conform to the rules for an ordinary assembler language    * 00013500
*          symbol.                                                    * 00013600
*          DEFAULT: No name.                                          * 00013700
*                                                                     * 00013800
*                                                                     * 00013900
*                                                                     * 00014000
*                                                                     * 00014100
*      NOSYMBOL(xnosymbol)                                            * 00014200
*          is a required input.  It is the name (RS-type) of a label  * 00014300
*          to which control is to be passed when no "&" is found in   * 00014400
*          the input string and thus no symbols exist.                * 00014500
*                                                                     * 00014600
*                                                                     * 00014700
*                                                                     * 00014800
*                                                                     * 00014900
*      TRTABLE(xtrtable)                                              * 00015000
*          is the name (RS-type) of a required 256 character          * 00015100
*          input/output that specifies a translate table to be used   * 00015200
*          for the TRT operation.  It will only be modified if the    * 00015300
*          INITTAB keyword specifies, or defaults to, YES.            * 00015400
*                                                                     * 00015500
*                                                                     * 00015600
*          [INITTAB(¬YES|NO­)]                                        * 00015700
*              is an optional keyword input that indicates whether or * 00015800
*              not ASASYMBF processing should initialize the          * 00015900
*              translate table.                                       * 00016000
*              DEFAULT: YES                                           * 00016100
*                                                                     * 00016200
*                                                                     * 00016300
*              [INITTAB(YES)]                                         * 00016400
*                  indicates that ASASYMBF should initialize the      * 00016500
*                  table.                                             * 00016600
*                                                                     * 00016700
*              [INITTAB(NO)]                                          * 00016800
*                  indicates that the invoker has previously          * 00016900
*                  initialized the table, to all zeroes except for a  * 00017000
*                  non-zero in the "ampersand" position.  ASASYMBF    * 00017100
*                  should not modify the table.                       * 00017200
*                                                                     * 00017300
*                                                                     * 00017400
*                                                                     * 00017500
*                                                                     * 00017600
*                                                                     * 00017700
*                                                                     * 00017800
*                                                                     * 00017900
*                                                                     * 00018000
*      [EPADDR(¬xepaddr|USE_LINK­)]                                   * 00018100
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00018200
*          only) of an optional pointer input that contains the       * 00018300
*          address of the ASASYMBM routine, presumably because        * 00018400
*          ASASYMBM has been previously loaded, and thus shouldn't be * 00018500
*          linked to.                                                 * 00018600
*          DEFAULT: USE_LINK                                          * 00018700
*                                                                     * 00018800
*                                                                     * 00018900
*                                                                     * 00019000
*01* ABEND CODES:                                                     * 00019100
*                                                                     * 00019200
*                                                                     * 00019300
*       0C4                                                           * 00019400
*                                                                     * 00019500
*                 The user may get this completion code if a          * 00019600
*                 user-provided data area is not accessible.          * 00019700
*                                                                     * 00019800
*                                                                     * 00019900
*                                                                     * 00020000
*01* RETURN CODES:                                                    * 00020100
*                                                                     * 00020200
*                                                                     * 00020300
*                                                                     * 00020400
*                                                                     * 00020500
*01* REASON CODES:  None.                                             * 00020600
*                                                                     * 00020700
*01* MODULE TYPE:  ASSEM-PL/AS MACRO                                  * 00020800
*                                                                     * 00020900
*02*   PROCESSOR:  ASSEM-PL/AS                                        * 00021000
*                                                                     * 00021100
*01* COMPONENT:  SCASA                                                * 00021200
*                                                                     * 00021300
*01* DISTRIBUTION LIBRARY: AMODGEN                                    * 00021400
*                                                                     * 00021500
*01* EXAMPLES:                                                        * 00021600
*                                                                     * 00021700
*           ASASYMBF NOSYMBOL=NOAMPER,TRTABLE=TRTAB,INITTAB=YES       * 00021800
*           ASASYMBF NOSYMBOL=NOAMPER,TRTABLE=TRTAB,INITTAB=NO,       * 00021900
*                 EPADDR=(3)                                          * 00022000
*                                                                     * 00022100
*                                                                     * 00022200
*01* MACRO USAGE NOTES:                                               * 00022300
*                                                                     * 00022400
*                                                                     * 00022500
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00022600
*        global macro variable.  Any value other than 'NO' will       * 00022700
*        result in the macro expansion being printed.  The default is * 00022800
*        'YES'.  The following examples illustrate how the ZPRINT     * 00022900
*        variable should be set.                                      * 00023000
*                                                                     * 00023100
*                    GBLC &ZPRINT                                     * 00023200
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00023300
*                                                                     * 00023400
*                                                                     * 00023500
*                                                                     * 00023600
*01* CHANGE ACTIVITY:                                                 * 00023700
*                                                                     * 00023800
*   Flag LineItem  FMID    Date   ID    Comment                       * 00023900
*                                                                     * 00024000
*    $P0=PN70538  HBB5520 940505 PD00XB:  ASASYMBF fastpath for       * 00024100
*                                         ASASYMBM                    * 00024200
*    $P1=PN70538  HBB5520 940505 PD00XB:  ASASYMBF fastpath for       * 00024300
*                                         ASASYMBM                    * 00024400
****** END OF SPECIFICATIONS *****************************************/ 00024500
*/********************************************************************* 00024600
         MACRO                                                          00024700
&XLABEL  ASASYMBF &NOSYMBOL=,&TRTABLE=,&INITTAB=,&EPADDR=               00024800
.*                                                                      00024900
*              MACDATE -05/06/94-<0>                                    00025000
.*                                                                      00025100
.*******************************************************************    00025200
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00025300
.*******************************************************************    00025400
              GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                   00025500
              GBLC  &ZTEST      YES=TEST NO=NO TEST                     00025600
              GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX             00025700
.*                                                                      00025800
              GBLC  &ZASASYMBF  YES=MACRO USED AT LEAST ONCE            00025900
.*******************************************************************    00026000
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00026100
.*******************************************************************    00026200
              LCLC  &ZMS        ERROR MESSAGE WORK AREA                 00026300
              LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS            00026400
              LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED              00026500
              LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR             00026600
              LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE             00026700
              LCLA  &ZAWRK      USED AS A WORK AREA                     00026800
              LCLA  &ZASIZ      USED FOR SIZE OF VALUE                  00026900
              LCLA  &ZN         NUMERIC WORK VARIABLE                   00027000
              LCLC  &ZC         CHARACTER WORK VARIABLE                 00027100
              LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE             00027200
              LCLA  &ZTLA       VALUE TOO LONG VARIABLE                 00027300
              LCLA  &ZMACRET    MACRO RETURN CODE                       00027400
&ZMACRET      SETA  0           ASSUME NO ERRORS                        00027500
.*                                                                      00027600
              LCLC  &ZCSYSLIST(255)             NONXKEY, POS ARRAY      00027700
              LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()              00027800
              LCLA  &ZPLLEN     PARAMETER LIST LENGTH                   00027900
.*******************************************************************    00028000
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00028100
.*******************************************************************    00028200
              LCLC  &XNOSYMBOL  ++ NAME                                 00028300
              LCLC  &XTRTABLE   ++ NAME                                 00028400
              LCLC  &XINITTAB   ++ VALUE                                00028500
              LCLC  &XEPADDR    ++ NAME                                 00028600
.*******************************************************************    00028700
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00028800
.*******************************************************************    00028900
              LCLC  &ZXNOSYMBOL                 ++ INPUT NAME           00029000
              LCLC  &ZXTRTABLE  ++ INOUT NAME                           00029100
              LCLC  &ZXINITTAB  ++ INPUT VALUE                          00029200
              LCLC  &ZXEPADDR   ++ INPUT NAME                           00029300
.********************************************************************   00029400
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00029500
.********************************************************************   00029600
              ACTR  10000                                               00029700
.*----------------------------------------------------------------***   00029800
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00029900
              AIF   (N'&NOSYMBOL LE 1).ZG2A     CK NUM                  00030000
&ZMS          SETC  '"NOSYMBOL='                *KPOSA* MNOTE           00030100
&ZMS          SETC  '&ZMS.&NOSYMBOL"'                                   00030200
&ZMS          SETC  '&ZMS "NOSYMBOL"'                                   00030300
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00030400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00030500
.ZG2A         ANOP  ,                                                   00030600
.*-------------------------------------------------------------------   00030700
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00030800
&ZXNOSYMBOL   SETC  'INPUT'     SET IN/OUTPUT                           00030900
&XNOSYMBOL    SETC  '&NOSYMBOL(1)'              SET XVARIABLE           00031000
              AIF   (N'&NOSYMBOL GT 1).ZG2B     MULTI PARMS             00031100
&XNOSYMBOL    SETC  '&NOSYMBOL'                 SET XVARIABLE           00031200
.ZG2B         AIF   (K'&NOSYMBOL(1) GT 0).ZG2C                          00031300
&ZXNOSYMBOL   SETC  ''          RESET IN/OUTPUT                         00031400
&ZMS          SETC  ' '         *KRQDA*                                 00031500
&ZMS          SETC  '&ZMS "NOSYMBOL" KEY AND ITS ARGUMENT'              00031600
              MNOTE 8,' &ZMS ARE REQUIRED.'                             00031700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00031800
.ZG2C         ANOP  ,                                                   00031900
.*-------------------------------------------------------------------   00032000
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00032100
              AIF   (K'&ZXNOSYMBOL LE 0).ZG2P   NOT I/O                 00032200
              AIF   ('&XNOSYMBOL'(1,1) NE '(').ZG2P                     00032300
&ZXNOSYMBOL   SETC  ''          RESET IN/OUTPUT                         00032400
&ZMS          SETC  '"NOSYMBOL='                *KGPRA* MNOTE           00032500
&ZMS          SETC  '&ZMS.&NOSYMBOL"'                                   00032600
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'           00032700
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                   00032800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00032900
.ZG2P         ANOP  ,                                                   00033000
.*----------------------------------------------------------------***   00033100
.***AG.KXVAR05 NAME, RQD INOUT, KEYS -XVARIABLE KEY                     00033200
              AIF   (N'&TRTABLE LE 1).ZG5A      CK NUM                  00033300
&ZMS          SETC  '"TRTABLE='                 *KPOSA* MNOTE           00033400
&ZMS          SETC  '&ZMS.&TRTABLE"'                                    00033500
&ZMS          SETC  '&ZMS "TRTABLE"'                                    00033600
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00033700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00033800
.ZG5A         ANOP  ,                                                   00033900
.*-------------------------------------------------------------------   00034000
.***AG.KXVAR06 NAME, RQD INOUT, KEYS -XVARIABLE                         00034100
&ZXTRTABLE    SETC  'INOUT'     SET IN/OUTPUT                           00034200
&XTRTABLE     SETC  '&TRTABLE(1)'               SET XVARIABLE           00034300
              AIF   (N'&TRTABLE GT 1).ZG5B      MULTI PARMS             00034400
&XTRTABLE     SETC  '&TRTABLE'  SET XVARIABLE                           00034500
.ZG5B         AIF   (K'&TRTABLE(1) GT 0).ZG5C                           00034600
&ZXTRTABLE    SETC  ''          RESET IN/OUTPUT                         00034700
&ZMS          SETC  ' '         *KRQDA*                                 00034800
&ZMS          SETC  '&ZMS "TRTABLE" KEY AND ITS ARGUMENT'               00034900
              MNOTE 8,' &ZMS ARE REQUIRED.'                             00035000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00035100
.ZG5C         ANOP  ,                                                   00035200
.*-------------------------------------------------------------------   00035300
.***AG.KCK01 NAME, RQD INOUT, KEYS -GPR NOT ALLOWED                     00035400
              AIF   (K'&ZXTRTABLE LE 0).ZG5P    NOT I/O                 00035500
              AIF   ('&XTRTABLE'(1,1) NE '(').ZG5P                      00035600
&ZXTRTABLE    SETC  ''          RESET IN/OUTPUT                         00035700
&ZMS          SETC  '"TRTABLE='                 *KGPRA* MNOTE           00035800
&ZMS          SETC  '&ZMS.&TRTABLE"'                                    00035900
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'           00036000
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                   00036100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00036200
.ZG5P         ANOP  ,                                                   00036300
.*------------------------------------------------------------------    00036400
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00036500
&XINITTAB     SETC  ''          INITIALIZE XVARIABLE                    00036600
.*-------------------------------------------------------------------   00036700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00036800
.ZG8          ANOP  ,                                                   00036900
              AIF   (K'&INITTAB(1) LE 0).ZG8A                           00037000
&ZTLC         SETC 'YES'                                                00037100
              AIF   ('&INITTAB(1)' NE '&ZTLC').ZG9                      00037200
&XINITTAB     SETC  'YES'       SET KEYWORD                             00037300
              AIF   (N'&INITTAB LE 1).ZG8A      CK NUM                  00037400
&ZMS          SETC  '"INITTAB='                 *KPOSA* MNOTE           00037500
&ZMS          SETC  '&ZMS.&INITTAB"'                                    00037600
&ZMS          SETC  '&ZMS "INITTAB"'                                    00037700
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00037800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00037900
.ZG8A         ANOP  ,                                                   00038000
.*-------------------------------------------------------------------   00038100
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00038200
.ZG9          ANOP  ,                                                   00038300
&ZTLC         SETC 'NO'                                                 00038400
              AIF   ('&INITTAB(1)' NE '&ZTLC').ZG10                     00038500
&XINITTAB     SETC  'NO'        SET KEYWORD                             00038600
              AIF   (N'&INITTAB LE 1).ZG9A      CK NUM                  00038700
&ZMS          SETC  '"INITTAB='                 *KPOSA* MNOTE           00038800
&ZMS          SETC  '&ZMS.&INITTAB"'                                    00038900
&ZMS          SETC  '&ZMS "INITTAB"'                                    00039000
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00039100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00039200
.ZG9A         ANOP  ,                                                   00039300
.*------------------------------------------------------------------    00039400
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00039500
.ZG10         ANOP  ,                                                   00039600
&ZXINITTAB    SETC  'INPUT'     SET IN/OUTPUT                           00039700
              AIF   (K'&XINITTAB GT 0).ZG10E    VALID ARG               00039800
              AIF   (T'&INITTAB EQ 'O').ZG10D   OMITTED                 00039900
&ZASYSLNDX    SETA  0                                                   00040000
.ZG10A        ANOP  ,           POSITIONAL MACRO KEY                    00040100
&ZASYSLNDX    SETA  &ZASYSLNDX+1                                        00040200
              AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG10C                    00040300
&ZTLC         SETC 'INITTAB'                                            00040400
              AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG10A           00040500
.ZG10B        ANOP  ,                                                   00040600
&ZXINITTAB    SETC  ''          RESET IN/OUTPUT                         00040700
&ZMS          SETC  'THE "INITTAB" KEY'         *KOPTA* MNOTE           00040800
&ZMS          SETC  '&ZMS MUST CONTAIN ONE'                             00040900
              MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                    00041000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00041100
              AGO   .ZG10E                                              00041200
.ZG10C        ANOP  ,                                                   00041300
&ZXINITTAB    SETC  ''          RESET IN/OUTPUT                         00041400
&ZMS          SETC  '"INITTAB='                 *KUKWA* MNOTE           00041500
&ZMS          SETC  '&ZMS.&INITTAB"'                                    00041600
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00041700
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00041800
&ZMS          SETC  '&ZMS "YES"'                VALID KEYWORD           00041900
&ZMS          SETC  '&ZMS OR "NO".'             VALID KEYWORD           00042000
              MNOTE 8,' &ZMS '                                          00042100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00042200
              AGO   .ZG10E                                              00042300
.ZG10D        ANOP  ,                                                   00042400
&XINITTAB     SETC  'YES'       SET DEFAULT KEYWORD                     00042500
.ZG10E        ANOP  ,                                                   00042600
.*------------------------------------------------------------------    00042700
.***AG.KKCTL07 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00042800
              AIF   (K'&TRTABLE(1) GT 0).ZG10F  KEY                     00042900
              AIF   (K'&INITTAB(1) LE 0).ZG10F  PARM                    00043000
&ZMS          SETC  '"INITTAB'  *KDEPA* MNOTE                           00043100
&ZMS          SETC  '&ZMS.=&INITTAB"'                                   00043200
&ZMS          SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                     00043300
&ZMS          SETC  '&ZMS '                                             00043400
&ZMS          SETC  '&ZMS "TRTABLE"'                                    00043500
              MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                        00043600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00043700
.ZG10F        ANOP  ,                                                   00043800
.*----------------------------------------------------------------***   00043900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00044000
              AIF   (N'&EPADDR LE 1).ZG13A      CK NUM                  00044100
&ZMS          SETC  '"EPADDR='  *KPOSA* MNOTE                           00044200
&ZMS          SETC  '&ZMS.&EPADDR"'                                     00044300
&ZMS          SETC  '&ZMS "EPADDR"'                                     00044400
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00044500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00044600
.ZG13A        ANOP  ,                                                   00044700
.*-------------------------------------------------------------------   00044800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00044900
&ZXEPADDR     SETC  'INPUT'     SET IN/OUTPUT                           00045000
&XEPADDR      SETC  'USE_LINK'                                          00045100
              AIF   (K'&EPADDR(1) LE 0).ZG13B   PARM                    00045200
&XEPADDR      SETC  '&EPADDR(1)'                SET XVARIABLE           00045300
              AIF   (N'&EPADDR GT 1).ZG13B      MULTI PARMS             00045400
&XEPADDR      SETC  '&EPADDR'   SET XVARIABLE                           00045500
.ZG13B        ANOP  ,                                                   00045600
.*-------------------------------------------------------------------   00045700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00045800
              AIF   (K'&ZXEPADDR LE 0).ZG13R    NOT I/O                 00045900
              AIF   ('&XEPADDR' EQ 'USE_LINK').ZG13R                    00046000
              AIF   ('&XEPADDR'(1,1) NE '(').ZG13R                      00046100
&ZCGPR        SETC  '&XEPADDR'(2,K'&XEPADDR-2)                          00046200
              AIF   ('&ZCGPR'(1,1) NE '0').ZG13P                        00046300
              AIF   (K'&ZCGPR GT 2).ZG13Q                               00046400
              AIF   ('&ZCGPR' EQ '0').ZG13Q                             00046500
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00046600
              AIF   (T'&ZCGPR NE 'N').ZG13Q     INVALID REG NAME        00046700
.ZG13P        ANOP  ,                                                   00046800
              AIF   (T'&ZCGPR NE 'N').ZG13R     NON NUMERIC             00046900
              AIF   ('&ZCGPR' LT '2').ZG13Q                             00047000
              AIF   ('&ZCGPR' LE '12').ZG13R                            00047100
.ZG13Q        ANOP  ,                                                   00047200
&ZMS          SETC  '"EPADDR='  *KGPRA* MNOTE                           00047300
&ZMS          SETC  '&ZMS.&EPADDR"'                                     00047400
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00047500
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00047600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00047700
.ZG13R        ANOP  ,                                                   00047800
.******************************************************************     00047900
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00048000
.******************************************************************     00048100
              ACTR  10000                                               00048200
.*----------------------------------------------------------------***   00048300
.***AH.P02 EXTRA POSITIONALS                                            00048400
              AIF   (N'&SYSLIST LE 0).ZGLISTX   NO EXTRAS               00048500
&ZCVAL        SETC  ''          ERROR FIELD                             00048600
&ZAWRK        SETA  0           POSITIONAL NUMBER                       00048700
.ZGLIST2      ANOP  ,                                                   00048800
&ZAWRK        SETA  &ZAWRK+1    NEXT POSITIONAL                         00048900
              AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE                00049000
&ZCVAL        SETC '&ZCVAL,&SYSLIST(&ZAWRK)'    EXTRA                   00049100
              AGO   .ZGLIST2                                            00049200
.*                                                                      00049300
.ZGLIST3      ANOP  ,                                                   00049400
&ZCVAL        SETC '&ZCVAL'(2,K'&ZCVAL-1)       STRIP COMMA             00049500
&ZMS          SETC  'POSITIONAL ARGUMENT(S),'   *PPOSA* MNOTE           00049600
&ZMS          SETC  '&ZMS "&ZCVAL"'                                     00049700
&ZMS          SETC  '&ZMS CANNOT BE USED.'                              00049800
&ZMS          SETC  '&ZMS NO POSITIONAL ARGUMENTS'                      00049900
              MNOTE 8,' &ZMS ARE ALLOWED.'                              00050000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00050100
.ZGLISTX      ANOP  ,                                                   00050200
&ZASYSLNDX    SETA  0                                                   00050300
.*******************************************************************    00050400
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00050500
.*******************************************************************    00050600
              AIF   (&ZMACRET NE 0).ZLX2        ERROR DETECTED          00050700
.*******************************************************************    00050800
.***AE.01  START OF ASASYMBF MACRO CODE                                 00050900
.*******************************************************************    00051000
              LCLC  &M0M0001                 NAME                       00051100
&M0M0001      SETC  '&XLABEL'                SET NAME                   00051200
              AIF   (K'&XLABEL NE 0).XLAB2                              00051300
&M0M0001      SETC  'M00M&SYSNDX'            DEFAULT NAME               00051400
.*                                                                      00051500
.XLAB2        ANOP  ,                                                   00051600
&M0M0001 DS    0H                             ASASYMBF-0                00051700
.*******************************************************************    00051800
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00051900
.*******************************************************************    00052000
              PUSH  PRINT                                               00052100
              AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON          00052200
              PRINT OFF         ++ PR01                                 00052300
              AGO   .ZPRNTXX                                            00052400
.ZPRINTX      PRINT ON                                                  00052500
.ZPRNTXX      ANOP  ,                                                   00052600
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00052700
         LCLC  &R0                                                 @P1A 00052800
         LCLC  &SOURCE@                                            @P1A 00052900
         LCLC  &TRTLEN                                             @P1A 00053000
         LCLC  &LEN                                                @P1A 00053100
         LCLC  &TOPLOOP                                            @P1A 00053200
         LCLC  &LT257                                              @P1A 00053300
         LCLC  &HAVELEN                                            @P1A 00053400
         LCLC  &TRTINSTR                                           @P1A 00053500
         LCLC  &FOUNDAMPERSAND                                     @P1A 00053600
&R0      SETC  'R0_&SYSNDX'                                        @P1A 00053700
&SOURCE@ SETC  'R1_SOURCE@_&SYSNDX'                                @P1A 00053800
&TRTLEN  SETC  'R14_TRTLENGTH_&SYSNDX'                             @P1A 00053900
&LEN     SETC  'R15_LENGTH_&SYSNDX'                                @P1A 00054000
&TOPLOOP SETC  'TOPLOOP_&SYSNDX'                                   @P1A 00054100
&LT257   SETC  'LT257_&SYSNDX'                                     @P1A 00054200
&HAVELEN SETC  'HAVELEN_&SYSNDX'                                   @P1A 00054300
&TRTINSTR SETC 'TRTINSTR_&SYSNDX'                                  @P1A 00054400
&FOUNDAMPERSAND SETC 'FOUNDAMPERSAND_&SYSNDX'                      @P1A 00054500
&R0      EQU   0         Work Reg                                  @P1A 00054600
&SOURCE@ EQU   1         Source address                            @P1A 00054700
&TRTLEN  EQU   14        Length for TRT                            @P1A 00054800
&LEN     EQU   15        Length remaining                          @P1A 00054900
         AIF   ('&XINITTAB' NE 'YES').NOINIT                       @P1A 00055000
*                                                                  @P1A 00055100
* Initialize table for TRT                                         @P1A 00055200
*                                                                  @P1A 00055300
         XC    &XTRTABLE.(256),&XTRTABLE                           @P1A 00055400
         MVI   &XTRTABLE.+C'&&',X'01'                              @P1A 00055500
.NOINIT  ANOP                                                      @P1A 00055600
* Assumes that there's a using outstanding on SYMBP                @P1A 00055700
*                                                                  @P1A 00055800
* Fetch pattern length and pattern address                         @P1A 00055900
*                                                                  @P1A 00056000
         L     &LEN,SYMBPPATTERNLENGTH                             @P1A 00056100
         L     &SOURCE@,SYMBPPATTERN@                              @P1A 00056200
*                                                                  @P1A 00056300
* There is no ampersand if the length is 0                         @P1A 00056400
*                                                                  @P1A 00056500
         LTR   &LEN,&LEN                                           @P1A 00056600
         BZ    &XNOSYMBOL                                          @P1A 00056700
*                                                                  @P1A 00056800
* Loop, doing 256-byte TRTs looking for ampersand                  @P1A 00056900
* until the length is less than 256, at which point                @P1A 00057000
* do one TRT for the rest                                          @P1A 00057100
*                                                                  @P1A 00057200
&TOPLOOP DS    0H                                                  @P1A 00057300
*                                                                  @P1A 00057400
* If there are more than 256 characters left, use 256              @P1A 00057500
* (minus one, since used on EX instruction).                       @P1A 00057600
* Otherwise, use the actual length (again, minus one).             @P1A 00057700
*                                                                  @P1A 00057800
         LA    &R0,256                                             @P1A 00057900
         CR    &LEN,&R0                                            @P1A 00058000
         BNH   &LT257                                              @P1A 00058100
         LA    &TRTLEN,255                                         @P1A 00058200
         B     &HAVELEN                                            @P1A 00058300
&LT257   DS    0H                                                  @P1A 00058400
         LR    &TRTLEN,&LEN                                        @P1A 00058500
         BCTR  &TRTLEN,0                                           @P1A 00058600
&HAVELEN DS    0H                                                  @P1A 00058700
*                                                                  @P1A 00058800
* Look for the ampersand, leave if found                           @P1A 00058900
*                                                                  @P1A 00059000
         EX    &TRTLEN,&TRTINSTR                                   @P1A 00059100
         BC    7,&FOUNDAMPERSAND                                   @P1A 00059200
*               CC=0 -- not found                                  @P1A 00059300
*               CC=1 -- found                                      @P1A 00059400
*               CC=2 -- found                                      @P1A 00059500
*               CC=3 -- undefined                                  @P1A 00059600
* Update the length remaining                                      @P1A 00059700
*                                                                  @P1A 00059800
         BCTR  &LEN,0                                              @P1A 00059900
         SR    &LEN,&TRTLEN                                        @P1A 00060000
*                                                                  @P1A 00060100
* If no more to do, no ampersand was found                         @P1A 00060200
*                                                                  @P1A 00060300
         BZ    &XNOSYMBOL                                          @P1A 00060400
*                                                                  @P1A 00060500
* Update the source address                                        @P1A 00060600
*                                                                  @P1A 00060700
         LA    &SOURCE@,1(&TRTLEN,&SOURCE@)                        @P1A 00060800
*                                                                  @P1A 00060900
*                                                                  @P1A 00061000
* Continue the loop (there's more to do)                           @P1A 00061100
*                                                                  @P1A 00061200
         B     &TOPLOOP                                            @P1A 00061300
&TRTINSTR TRT    0(0,&SOURCE@.),&XTRTABLE                          @P1A 00061400
*                                                                  @P1A 00061500
* Ampersand was found, invoke ASASYMBM                             @P1A 00061600
*                                                                  @P1A 00061700
&FOUNDAMPERSAND DS  0H                                             @P1A 00061800
         AIF   ('&XEPADDR' EQ 'USE_LINK').DOLINK                   @P1A 00061900
         AIF   ('&EPADDR'(1,1) EQ '(').INREG                       @P1A 00062000
         L     15,&EPADDR(1)       Get routine address             @P1A 00062100
         AGO   .HAVEADDR                                           @P1A 00062200
.INREG   ANOP                                                      @P1A 00062300
         L     15,0(&EPADDR(1))    Get routine address             @P1A 00062400
.HAVEADDR ANOP                                                     @T1A 00062500
         CALL  (15),MF=(E,SYMBP)                                   @P1A 00062600
         AGO   .ENDLINKAGE                                         @P1A 00062700
.DOLINK  ANOP                                                      @P1A 00062800
         LINK  EP=ASASYMBM,MF=(E,SYMBP)                            @P1A 00062900
.ENDLINKAGE ANOP                                                   @P1A 00063000
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00063100
.********************************************************************   00063200
.***AL.A01  INTERNAL ARRAY TO PRODUCE FORMATTED CODE                    00063300
.********************************************************************   00063400
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00063500
                      LCLA  &ZOPN1         INVOCATION INDEX             00063600
                      LCLC  &ZOPL(4095)    LABEL                        00063700
                      LCLC  &ZOPO(4095)    OPERATION                    00063800
                      LCLC  &ZOPV(4095)    VALUE                        00063900
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00064000
.*                                                                      00064100
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00064200
.*******************************************************************    00064300
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00064400
.*******************************************************************    00064500
                      ACTR  10000                                       00064600
.*                                                                      00064700
                      LCLA  &ZLC           COLUMN POSITION              00064800
                      LCLA  &ZOPX          LIST TABLE INDEX             00064900
                      LCLC  &ZLL           LABEL                        00065000
                      LCLC  &ZLOP          OPERATION                    00065100
                      LCLC  &ZLV           VALUE                        00065200
                      LCLC  &ZLD           DESCRIPTION                  00065300
.*                                                                      00065400
&ZOPX                 SETA  1                                           00065500
.*******************************************************************    00065600
.***AP.X01  FORMAT GENERATED CODE                                       00065700
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00065800
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00065900
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00066000
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00066100
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00066200
                      AIF   (K'&ZLD LE 0).ZL51                          00066300
&ZLC                  SETA  35             COMMENT COLUMN               00066400
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00066500
&ZLC                  SETA  33             COMMENT COLUMN               00066600
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00066700
&ZLV                  SETC  '&ZLV'.' '                                  00066800
                      AGO   .ZL31                                       00066900
.*                                                                      00067000
.ZL41                 ANOP  ,                                           00067100
&ZLV                  SETC  '&ZLV'.' '                                  00067200
.ZL51                 ANOP  ,                                           00067300
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00067400
.*                                                                      00067500
&ZLL     &ZLOP &ZLV                                                     00067600
.*                                                                      00067700
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00067800
                      AGO   .ZL21          CONTINUE LOOPING             00067900
.*                                                                      00068000
.ZLX1                 ANOP  ,                                           00068100
.*******************************************************************    00068200
.***AP.X02  END OF ASASYMBF MACRO                                       00068300
&ZASASYMBF            SETC  'YES'          SET ASASYMBF USED            00068400
         POP   PRINT                                                    00068500
*                                            ASASYMBF-0                 00068600
         SPACE 1                                                        00068700
.ZLX2                 ANOP  ,                                           00068800
         MEND                                                           00068900
**********************************************************************/ 00069000
*/**** START OF SPECIFICATIONS **************************************** 00069100
*                                                                     * 00069200
*                                                                     * 00069300
*01* MACRO NAME:  ASASYMBF                               -05/06/94-<> * 00069400
*                                                                     * 00069500
*                                                                     * 00069600
*01* DESCRIPTIVE NAME:  Fast path to ASASYMBM                         * 00069700
*                                                                     * 00069800
*01* PROPRIETARY STATEMENT:                                           * 00069900
*                                                                     * 00070000
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00070100
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00070200
*     5655-068 (C) COPYRIGHT IBM CORP. 1994                           * 00070300
*     SEE COPYRIGHT INSTRUCTIONS                                      * 00070400
*                                                                     * 00070500
* STATUS= HBB5520                                                     * 00070600
*                                                                     * 00070700
*                                                                     * 00070800
*                                                                     * 00070900
*01* FUNCTION:                                                        * 00071000
*       See the ASASYMBF macro prologue for details.                  * 00071100
*                                                                     * 00071200
*01* INPUT:                                                           * 00071300
*                                                                     * 00071400
*            ?ASASYMBF     NOSYMBOL(xnosymbol)                        * 00071500
*                          TRTABLE(xtrtable)                          * 00071600
*                            ¿[INITTAB(YES)]                          * 00071700
*                            ¾[INITTAB(NO)]                           * 00071800
*                         [EPADDR(¬xepaddr|USE_LINK­)]                * 00071900
*                                                                     * 00072000
****** END OF SPECIFICATIONS *****************************************/ 00072100
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 00072200
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                00072300
*  ANS('/* ? ASASYMBF '||MACLIST||' ')                                  00072400
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00072500
*                                                                       00072600
*  DCL ZELO  FIXED;                                                     00072700
*  DCL ZECOL FIXED;                                                     00072800
*                                                                       00072900
*  ZELO=1;     /* STARTING COLUMN */                                    00073000
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00073100
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    00073200
*    IF ZECOL>0                                                         00073300
*      THEN                                                             00073400
*        DO;   /* PARENTHESIS FOUND */                                  00073500
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)||' ')                         00073600
*             NORESCAN COL(MACLMAR+5);                                  00073700
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   00073800
*        END;                                                           00073900
*      ELSE                                                             00074000
*        DO;   /* REMAINING KEYS */                                     00074100
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           00074200
*             NORESCAN COL(MACLMAR+5);                                  00074300
*          ZELO=LENGTH(MACKEYS)+1;                                      00074400
*        END;                                                           00074500
*  END;                                                                 00074600
*  ANS(' -05/06/94-0- */')                                              00074700
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00074800
*/********************************************************************/ 00074900
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00075000
*/********************************************************************/ 00075100
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00075200
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00075300
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00075400
*                                                                       00075500
*  DCL   ZASASYMBF CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */ 00075600
*  DEACT ZASASYMBF;                                                     00075700
*                                                                       00075800
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00075900
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00076000
*                                                                       00076100
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00076200
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00076300
*                                                                       00076400
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00076500
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00076600
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00076700
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00076800
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00076900
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00077000
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00077100
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00077200
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00077300
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00077400
*                                                                       00077500
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00077600
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00077700
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00077800
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00077900
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00078000
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00078100
*/*******************************************************************/  00078200
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00078300
*/*******************************************************************/  00078400
*  DCL XNOSYMBOL;  DEACT XNOSYMBOL;  /***PV.XVAR02 INPUT NAME */        00078500
*  DCL ZXNOSYMBOL; DEACT ZXNOSYMBOL;  /***INPUT/OUTPUT CONTROL */       00078600
*  DCL XTRTABLE;  DEACT XTRTABLE;  /***PV.XVAR02 INOUT NAME */          00078700
*  DCL ZXTRTABLE; DEACT ZXTRTABLE;  /***INPUT/OUTPUT CONTROL */         00078800
*  DCL XINITTAB;  DEACT XINITTAB;  /***PV.XVAR02 INPUT VALUE */         00078900
*  DCL ZXINITTAB; DEACT ZXINITTAB;  /***INPUT/OUTPUT CONTROL */         00079000
*  DCL XEPADDR;  DEACT XEPADDR;    /***PV.XVAR02 INPUT NAME */          00079100
*  DCL ZXEPADDR; DEACT ZXEPADDR;   /***INPUT/OUTPUT CONTROL */          00079200
*/********************************************************************/ 00079300
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00079400
*/********************************************************************/ 00079500
*  ZC='OFF';                                 /* DEFAULT FLAG OFF */     00079600
*/********************************************************************/ 00079700
*/***PD.P02 DEFAULT ECHO                                             */ 00079800
*/********************************************************************/ 00079900
*        ANS('/*DEFAULT(S): */')                                        00080000
*           NORESCAN COL(MACLMAR+5);                                    00080100
*/*PD.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00080200
*  IF INITTAB(1)=''                                                     00080300
*    THEN                                                               00080400
*      DO;                                                              00080500
*        ANS('/*INITTAB(YES)*/')                                        00080600
*            NORESCAN COL(MACLMAR+5);                                   00080700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00080800
*      END;                                                             00080900
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00081000
*  XEPADDR='';                                                          00081100
*  IF EPADDR(1)=''                                                      00081200
*    THEN                                                               00081300
*      DO;                                                              00081400
*        XEPADDR='USE_LINK';                 /* SET DEFAULT */          00081500
*        ZC='ON';                            /* DEFAULT FLAG ON */      00081600
*      END;                                                             00081700
*/*PD.DFLT01 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00081800
*  IF XEPADDR~=''                                                       00081900
*    THEN                                                               00082000
*      ANS('/* EPADDR('||                                               00082100
*          XEPADDR||                                                    00082200
*          ')*/')                                                       00082300
*          NORESCAN COL(MACLMAR+5);                                     00082400
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00082500
*    THEN                                                               00082600
*      ANS('/* NONE. */')                                               00082700
*         NORESCAN COL(MACLMAR+5);                                      00082800
*/********************************************************************/ 00082900
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00083000
*/********************************************************************/ 00083100
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00083200
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00083300
*    THEN                                                               00083400
*      DO;                                                              00083500
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'|| /**PPOSP* MSG*/            00083600
*            ' "'||MACLIST||'"'||                                       00083700
*            ' CANNOT BE USED.'||                                       00083800
*            ' NO POSITIONAL ARGUMENTS'||                               00083900
*            ' ARE ALLOWED.';                                           00084000
*        ANS MSG('?ASASYMBF ---> '||ZMS);                               00084100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00084200
*        ZMACRET=8;                          /* MACRO ERROR */          00084300
*      END;                                                             00084400
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00084500
*  IF NUMBER(NOSYMBOL)>1                     /* CHECK POSITIONALS */    00084600
*    THEN                                                               00084700
*      DO;                                                              00084800
*        ZMS=' 8, "NOSYMBOL'||               /**KPOSP* MSG*/            00084900
*            NOSYMBOL||                                                 00085000
*            '" "NOSYMBOL"'||                                           00085100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00085200
*        ANS MSG('?ASASYMBF ---> '||ZMS);                               00085300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00085400
*        ZMACRET=8;                          /* MACRO ERROR */          00085500
*      END;                                                             00085600
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00085700
*  XNOSYMBOL=NOSYMBOL(1);                    /* SET XVARIABLE */        00085800
*  IF NOSYMBOL(1)=''                         /* CHECK FOR NULL */       00085900
*   THEN                                                                00086000
*    DO;                                     /* KEY IS REQUIRED */      00086100
*        ZXNOSYMBOL='';                      /* RESET IN/OUTPUT */      00086200
*        ZMS=' 8,  '||                                                  00086300
*            ' "NOSYMBOL" KEY AND ITS ARGUMENT'||                       00086400
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00086500
*        ANS MSG('?ASASYMBF ---> '||ZMS);                               00086600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00086700
*        ZMACRET=8;                          /* MACRO ERROR */          00086800
*    END;                                                               00086900
*  ELSE                                                                 00087000
*    ZXNOSYMBOL='INPUT';                     /* SET IN/OUTPUT */        00087100
*/*PG.KXVAR01 NAME, RQD INOUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00087200
*  IF NUMBER(TRTABLE)>1                      /* CHECK POSITIONALS */    00087300
*    THEN                                                               00087400
*      DO;                                                              00087500
*        ZMS=' 8, "TRTABLE'||                /**KPOSP* MSG*/            00087600
*            TRTABLE||                                                  00087700
*            '" "TRTABLE"'||                                            00087800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00087900
*        ANS MSG('?ASASYMBF ---> '||ZMS);                               00088000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00088100
*        ZMACRET=8;                          /* MACRO ERROR */          00088200
*      END;                                                             00088300
*/*PG.KXVAR03 NAME, RQD INOUT, KEYS -XVARIABLE-----------------------*/ 00088400
*  XTRTABLE=TRTABLE(1);                      /* SET XVARIABLE */        00088500
*  IF TRTABLE(1)=''                          /* CHECK FOR NULL */       00088600
*   THEN                                                                00088700
*    DO;                                     /* KEY IS REQUIRED */      00088800
*        ZXTRTABLE='';                       /* RESET IN/OUTPUT */      00088900
*        ZMS=' 8,  '||                                                  00089000
*            ' "TRTABLE" KEY AND ITS ARGUMENT'||                        00089100
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00089200
*        ANS MSG('?ASASYMBF ---> '||ZMS);                               00089300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00089400
*        ZMACRET=8;                          /* MACRO ERROR */          00089500
*    END;                                                               00089600
*  ELSE                                                                 00089700
*    ZXTRTABLE='INOUT';                      /* SET IN/OUTPUT */        00089800
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00089900
*  XINITTAB='';                                                         00090000
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00090100
*  IF TRANSLATE(INITTAB(1))                                             00090200
*              = 'YES'                       /* CHECK FOR KEYWORD */    00090300
*     | INITTAB(1)=''                        /* CHECK FOR NULL */       00090400
*    THEN                                                               00090500
*      DO;                                                              00090600
*        XINITTAB='YES';                     /* SET XVARIABLE */        00090700
*        IF NUMBER(INITTAB)>1                /* CHECK POSITIONALS */    00090800
*          THEN                                                         00090900
*            DO;                                                        00091000
*              ZMS=' 8, "INITTAB'||          /**KPOSP* MSG*/            00091100
*                  INITTAB||                                            00091200
*                  '" "INITTAB"'||                                      00091300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00091400
*              ANS MSG('?ASASYMBF ---> '||ZMS);                         00091500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00091600
*              ZMACRET=8;                    /* MACRO ERROR */          00091700
*            END;                                                       00091800
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00091900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00092000
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00092100
*  IF TRANSLATE(INITTAB(1))                                             00092200
*              = 'NO'                        /* CHECK FOR KEYWORD */    00092300
*    THEN                                                               00092400
*      DO;                                                              00092500
*        XINITTAB='NO';                      /* SET XVARIABLE */        00092600
*        IF NUMBER(INITTAB)>1                /* CHECK POSITIONALS */    00092700
*          THEN                                                         00092800
*            DO;                                                        00092900
*              ZMS=' 8, "INITTAB'||          /**KPOSP* MSG*/            00093000
*                  INITTAB||                                            00093100
*                  '" "INITTAB"'||                                      00093200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00093300
*              ANS MSG('?ASASYMBF ---> '||ZMS);                         00093400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00093500
*              ZMACRET=8;                    /* MACRO ERROR */          00093600
*            END;                                                       00093700
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00093800
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00093900
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00094000
*  IF INITTAB='INITTAB'                                                 00094100
*    | INITTAB='()'                          /*CHECK ENTRY*/            00094200
*     THEN                                                              00094300
*       DO;                                                             00094400
*              ZMS=' 8, THE "INITTAB" KEY'|| /**KOPTP* MSG*/            00094500
*                  ' MUST CONTAIN ONE'||                                00094600
*                  ' (OR MORE) ARGUMENT(S).';                           00094700
*              ANS MSG('?ASASYMBF ---> '||ZMS);                         00094800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00094900
*              ZMACRET=8;                    /* MACRO ERROR */          00095000
*       END;                                                            00095100
*  ELSE                                                                 00095200
*    DO;                                                                00095300
*      ZXINITTAB='INPUT';                    /* SET IN/OUTPUT */        00095400
*      IF XINITTAB=''                        /* CHECK FOR KEYWORD */    00095500
*        THEN                                                           00095600
*          DO;                               /* KEYWORD NOT ENTERED */  00095700
*            XINITTAB='YES';                 /* SET DEFAULT */          00095800
*            IF INITTAB(1)~=''               /* CHECK FOR KEYWORD */    00095900
*              THEN                                                     00096000
*                DO;                                                    00096100
*                  ZXINITTAB='';             /* RESET IN/OUTPUT */      00096200
*              ZMS=' 8, "INITTAB'||          /**KUKWP* MSG*/            00096300
*                  INITTAB||'"'||                                       00096400
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00096500
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00096600
*                  ' "YES"'||                /* VALID KEYWORD */        00096700
*                  ' OR "NO".';              /* VALID KEYWORD */        00096800
*              ANS MSG('?ASASYMBF ---> '||ZMS);                         00096900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00097000
*              ZMACRET=8;                    /* MACRO ERROR */          00097100
*                END;                                                   00097200
*          END;                                                         00097300
*    END;                                                               00097400
*/*PG.KKCTL08 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00097500
*  IF TRTABLE(1)='' &                        /* CHECK FOR KEY */        00097600
*     INITTAB(1)~=''                         /* CHECK FOR KEYWORD */    00097700
*    THEN                                                               00097800
*      DO;                                                              00097900
*        ZMS=' 8, "INITTAB'||                /**KDEPP* MSG*/            00098000
*            INITTAB||'"'||                                             00098100
*            ' CAN ONLY BE SPECIFIED IF'||                              00098200
*            ' '||                                                      00098300
*            ' "TRTABLE"'||                                             00098400
*            ' IS ALSO SPECIFIED.';                                     00098500
*        ANS MSG('?ASASYMBF ---> '||ZMS);                               00098600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00098700
*        ZMACRET=8;                          /* MACRO ERROR */          00098800
*      END;                                                             00098900
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00099000
*  IF EPADDR='EPADDR' | EPADDR='()'          /*CHECK ENTRY*/            00099100
*    THEN                                                               00099200
*      DO;                                                              00099300
*        ZMS=' 8, THE "EPADDR" KEY'||        /**KOPTP* MSG*/            00099400
*            ' MUST CONTAIN ONE'||                                      00099500
*            ' (OR MORE) ARGUMENT(S).';                                 00099600
*        ANS MSG('?ASASYMBF ---> '||ZMS);                               00099700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00099800
*        ZMACRET=8;                          /* MACRO ERROR */          00099900
*      END;                                                             00100000
*  IF NUMBER(EPADDR)>1                       /* CHECK POSITIONALS */    00100100
*    THEN                                                               00100200
*      DO;                                                              00100300
*        ZMS=' 8, "EPADDR'||                 /**KPOSP* MSG*/            00100400
*            EPADDR||                                                   00100500
*            '" "EPADDR"'||                                             00100600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00100700
*        ANS MSG('?ASASYMBF ---> '||ZMS);                               00100800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00100900
*        ZMACRET=8;                          /* MACRO ERROR */          00101000
*      END;                                                             00101100
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00101200
*  ZXEPADDR='INPUT';                         /* SET IN/OUTPUT */        00101300
*  XEPADDR='USE_LINK';                       /* SET DEFAULT */          00101400
*  IF EPADDR(1)~=''                          /* CHECK FOR NULL */       00101500
*    THEN                                                               00101600
*      XEPADDR=EPADDR(1);                    /* SET XVARIABLE */        00101700
*/********************************************************************/ 00101800
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00101900
*/********************************************************************/ 00102000
*  IF ZMACRET = 0                                                       00102100
*    THEN                                                               00102200
*      DO;                                                              00102300
*/********************************************************************/ 00102400
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00102500
*/********************************************************************/ 00102600
*  ANS(MACCONC||'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);             00102700
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00102800
*    THEN                                                               00102900
*      ANS(MACCONC||'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);          00103000
*    ELSE                                                               00103100
*      ANS(MACCONC||'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);          00103200
*/********************************************************************/ 00103300
*/*PE.DO01 OUTER MACRO DO STATEMENT----------------------------------*/ 00103400
*  ANS('DO; /* ASASYMBF-0 */')                                          00103500
*      NORESCAN COL(MACLMAR);                                           00103600
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00103700
*IF INDEX(EHAREGS,'01P')=0 THEN           /*                     @P1A*/ 00103800
*  EHAREGS=EHAREGS||'01P';                /*                     @P1A*/ 00103900
*IF INDEX(EHAREGS,'02F')=0 THEN           /*                     @P1A*/ 00104000
*  EHAREGS=EHAREGS||'02F';                /*                     @P1A*/ 00104100
* IF Translate(XINITTAB) = 'YES' THEN     /*                     @P1A*/ 00104200
* DO;                                     /*                     @P1A*/ 00104300
*   BANS Rescan;                          /*                     @P1A*/ 00104400
*    XTRTABLE || "= ''B;        /* Clear table */"        /*     @P1A*/ 00104500
*    XTRTABLE || "(51x) = '01'X;  /* Set ampersand slot */"   /* @P1A*/ 00104600
*   EANS;                                 /*                     @P1A*/ 00104700
* END;                                    /*                     @P1A*/ 00104800
* BANS RESCAN;                            /*                     @P1A*/ 00104900
*'BEGIN;'                                 /*                     @P1A*/ 00105000
*  'Dcl SymbfLength Fixed;      /* Remaining length */'       /* @P1A*/ 00105100
*  'Dcl SymbfSource CHAR(*) Based(SymbfSource@);'  /*            @P1A*/ 00105200
*  'Dcl SymbfSource@ PTR; /* Address of chars to check */'    /* @P1A*/ 00105300
*  'Dcl SymbfTrtLength Fixed;  /* Length for TRT */'          /* @P1A*/ 00105400
*  'SymbfLength = Symbp.SymbpPatternLength;' ||                         00105500
*                          '/* Initial length */'             /* @P1A*/ 00105600
*  'SymbfSource@ = Symbp.SymbpPattern@; /* First char */'     /* @P1A*/ 00105700
*  'IF SymbfLength = 0 THEN      /* Check for null length */' /* @P1A*/ 00105800
*    'GoTo ' || xNoSymbol || ';  /* 0, cannot be symbols  */' /* @P1A*/ 00105900
*  'Do Until (SymbfLength = 0);  /* Loop through string   */' /* @P1A*/ 00106000
*  '  If SymbfLength > 256 THEN '                                       00106100
*                          '/* Is remaining length > 256? */' /* @P1A*/ 00106200
*  '    SymbfTrtLength = 256;' ||                                       00106300
*                          '/* Yes, TRT only supports 256 */' /* @P1A*/ 00106400
*  '  Else                       /* No, <= 256 left       */' /* @P1A*/ 00106500
*  '    SymbfTrtLength = SymbfLength;' ||                               00106600
*                          '/* Use all that is left       */' /* @P1A*/ 00106700
*  "  TRT(SymbfSource(1:SymbfTrtLength)," || XTrTable || ");" ||        00106800
*                          '/* Scan                       */' /* @P1A*/ 00106900
*  '  GEN SETS(GPR02F) OPTACROSS (SPACE 1); ' ||                        00107000
*                          '/* TRT clobbers R2            */' /* @P1A*/ 00107100
*  '  BC (7,FoundAmpersand);       /* Leave loop if found */' /* @P1A*/ 00107200
*  '  SymbfLength = SymbfLength - SymbfTrtLength;' ||                   00107300
*                          '/* Update                     */' /* @P1A*/ 00107400
*  '  SymbfSource@ = SymbfSource@ + SymbfTrtLength;' ||                 00107500
*                          '/* Update                     */' /* @P1A*/ 00107600
*  'End;                           /* End Do UNTIL        */' /* @P1A*/ 00107700
*  'GoTo ' || XNoSymbol || ';      /* No symbol found     */' /* @P1A*/ 00107800
*  'FoundAmpersand:;               /* Symbol found        */' /* @P1A*/ 00107900
*'END;'                            /* END BEGIN                  @P1A*/ 00108000
* EANS;                            /*                            @P1A*/ 00108100
* IF Translate(XEPADDR) ~= 'USE_LINK' THEN /*                    @P1A*/ 00108200
* DO;                                     /*                     @P1A*/ 00108300
*   BANS Rescan;                          /*                     @P1A*/ 00108400
*    'RFY GPR01P RSTD;'                   /*                     @P1A*/ 00108500
*    'GPR01P = ADDR(SYMBP);'              /*                     @P1A*/ 00108600
*    'Call ' || XEPADDR || '-> I31ANY;'   /*                     @P1A*/ 00108700
*    'RFY GPR01P UNRSTD;'                 /*                     @P1A*/ 00108800
*   EANS;                                 /*                     @P1A*/ 00108900
* END;                                    /*                     @P1A*/ 00109000
* ELSE DO;                                /*                     @P1A*/ 00109100
*   BANS;                                 /*                     @P1A*/ 00109200
*    "?LINK EP('ASASYMBM') SF(SYMBP);"    /*                     @P1A*/ 00109300
*   EANS;                                 /*                     @P1A*/ 00109400
* END;                                    /*                     @P1A*/ 00109500
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00109600
*/*PO.L13 ASASYMBF USAGE INDICATOR-----------------------------------*/ 00109700
*  ZASASYMBF='YES';                          /* SET ASASYMBF USED */    00109800
*/*PO.L14 END OF EXECUTABLE ASASYMBF-0 MACRO-------------------------*/ 00109900
*  ANS('END; /* ASASYMBF-0 */')                                         00110000
*      NORESCAN COL(MACLMAR);                                           00110100
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00110200
*  ANS(MACCONC||'LIST POP NOECHO;') NORESCAN COL(MACLMAR);              00110300
*/*PO.L17 END OF ASASYMBF MACRO--------------------------------------*/ 00110400
*  ANS(MACCONC||'SPACE;') NORESCAN COL(MACLMAR);                        00110500
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00110600
*/*******************************************************************/  00110700
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ~= 0            */  00110800
*/*******************************************************************/  00110900
*      END;                                                             00111000
*  RETURN CODE(ZMACRET);                                                00111100
*%END ASASYMBF;                                                         00111200
