* % GOTO PLSSKIP;                                                       00000500
*/********************************************************************/ 00001100
*/*                                                                  */ 00001800
*/*01* MACRO-NAME = FREEMAIN                                         */ 00002500
*/*                                                                  */ 00003200
*/*01* DESCRIPTIVE-NAME = Free main storage macro.                   */ 00003900
*/*                                                                  */ 00004600
*/*01* PROPRIETARY STATEMENT=                                        */ 00006200
*/***PROPRIETARY_STATEMENT********************************************/ 00007800
*/*                                                                  */ 00009500
*/*                                                                  */ 00009600
*/* LICENSED MATERIALS - PROPERTY OF IBM                             */ 00009700
*/* THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                      */ 00009800
*/* 5647-A01 (C) COPYRIGHT IBM CORP. 1981, 2000                      */ 00009900
*/*                                                                  */ 00010100
*/* STATUS= HBB7703                                                  */ 00010200
*/*                                                                  */ 00010300
*/***END_OF_PROPRIETARY_STATEMENT*************************************/ 00010400
*/*                                                                  */ 00010900
*/*01* EXTERNAL CLASSIFICATION: PI                                   */ 00011100
*/*01* END OF EXTERNAL CLASSIFICAION:                                */ 00011400
*/*01* FUNCTION =                                                    */ 00011600
*/*    Interface to VSM used to free a block of virtual storage.     */ 00012300
*/*                                                                  */ 00013000
*/*01* MACROS-INVOKED = SYSSTATE                                     */ 00013700
*/*                                                                  */ 00014400
*/*01* EXTERNAL MACRO VARIABLES = SYSASCE,SYSAM64                    */ 00015100
*/*                                                                  */ 00015800
*/*01* CHANGE ACTIVITY =                                             */ 00016500
*/*                                                                  */ 00017200
*/*         $D1=DCR0127,HBB3310,861029,PDF5: Allow disabled,         */ 00017900
*/*             AR mode users of branch entry GETMAIN/FREEMAIN to    */ 00018600
*/*             get/free storage from the primary address space.     */ 00019300
*/*             (Access registers are ignored.)                  @D1A*/ 00020000
*/*         OZ74333 - When REG1 is used for ADDRESS parm, no LA was  */ 00020500
*/*             done                                                 */ 00021000
*/*         $L1=PROD310,HBB3310,870603,PDF5:  Copy-right changes @L1A*/ 00021600
*/*         OY30573 - Restore value in register for KEY parameter    */ 00021700
*/*      $L2=SUBOV  ,JBB4422,900928,PDDS: Support for new low        */ 00021800
*/*                  private, user-key subpools.                 @L2A*/ 00021900
*/*      $O1=OY45819,JBB4422,910620,PDF5: Subpool FREEMAIN request   */ 00022000
*/*                  fails to assemble.  'FREEMAIN RU,SP=SPNUM'      */ 00022100
*/*                  was expanding to include 'O 15,IHBxxxxZ', which */ 00022200
*/*                  was supposed to set the 'key-specified' bit     */ 00022300
*/*                  in register 15 if the KEY parameter was         */ 00022400
*/*                  specified.  IHBxxxxZ was, however, undefined.   */ 00022500
*/*                  The KEY parameter makes no sense on a subpool   */ 00022600
*/*                  FREEMAIN, so the fix for this APAR was to       */ 00022700
*/*                  remove the 'O 15,IHBxxxxZ' from the expansion.  */ 00022800
*/*                                                              @O1A*/ 00022900
*/*      $O2=OY47011,JBB4422,910824,PDF5: Remove superfluous         */ 00023000
*/*                  instructions from FREEMAIN expansion.           */ 00023100
*/*                                                              @O2A*/ 00023200
*/*      $P1=PIG2882,HBB5510,930907,PDXB: AREA                       */ 00023300
*/*      $L3=64BITVSM HBB7703 981204 PD00XB: ESAME                   */ 00023400
*/*                                                                  */ 00023500
*/********************************************************************/ 00023600
*/*                                                              @D1A*/ 00023700
* %/*                                                                   00023800
         MACRO                                                          00024200
&NAME    FREEMAIN &MODE,&LV=,&LA=,&A=,&SP=,&BRANCH=,&KEY=,&MF=I,       *00024900
               &RELATED=                                                00025600
.******************************************************************     00025700
.* Parameters                                                           00025800
.******************************************************************     00025900
.* &MODE    - The mode                                                  00026000
.* &LV      - The input length value                                    00026100
.* &LA      - The input length address                                  00026200
.* &A       - The address GETMAIN will return your output in            00026300
.* &SP      - The subpool                                               00026400
.* &MF      - The macro format                                          00026500
.* &KEY     - The key                                                   00026600
.* &BRANCH  - Branch entry or SVC                                       00026700
.* &RELATED - Any valid macro keyword specification                     00026800
.******************************************************************     00026900
.* Local and global variables                                           00027000
.******************************************************************     00027100
.* &SVCN    - SVC number. currently valid choices: 4,10,120             00027200
.* &PRG     - parameter register                                        00027300
.* &AA      - 1= LV value is in a register                              00027400
.* &B       - 1= LA value is in a register                              00027500
.* &C       - 1= A value is in a register                               00027600
.* &D       - something to do with subpool                              00027700
.* &KYSPC   - 1= key was specified on the macro          @L2A           00027800
.* &M       -                                                           00027900
.* &CTR     -                                                           00028000
.* &GLBR    - 1= global branch entry request                            00028100
.* &BR      - 1= branch entry request                                   00028200
.* &SPREG   - 1= subpool was passed to us in a register                 00028300
.* &UNCND   - 1= its an unconditional request                           00028400
.* &CND     - 1= its a conditional request                              00028500
.* &KEYRG   - 1= key was passed to us in a register                     00028600
.* &LVREG   - 1= length value was passed to us in a register            00028700
.* &GNAME   -                                                           00028800
.* &SYSASCE - indicates whether the invoker of FREEMAIN is in AR        00028900
.*            mode or primary mode.                                     00029000
.*                                                                      00029100
.* &SYSAM64 - indicates whether the invoker of getmain is in 64-bit     00029200
.*            AMODE or not                                              00029300
.*                                                                      00029400
.******************************************************************     00029500
         LCLC  &GNAME                                                   00029600
         LCLB  &AA,&B,&C,&D,&M(3),&GLBR,&BR,&UNCND,&SPREG,&KEYRG,&LVREG 00029700
         LCLB  &KYSPC                                                   00029800
.*                        @L2A                                          00029900
         LCLA  &CTR,&SVCN,&PRG,&CND                                     00030000
         GBLC  &SYSASCE                Global character variable -      00030100
.*                                     indicates whether the invoker    00030200
.*                                     of GETMAIN is in AR ASC mode or  00030500
.*                                     primary ASC mode.           @D1A 00031200
         GBLC  &SYSAM64                Global character variable -      00031400
.*                                     indicates whether the invoker    00031600
.*                                     of GETMAIN is in AMODE 64 or     00031800
.*                                     AMODE 24/31                 @L3A 00032100
&PRG     SETA  15             DEFAULT PARM REG FOR RC AND RU FORMS      00032400
&GNAME   SETC  'IHB'.'&SYSNDX'                                          00032500
         SYSSTATE TEST            This macro sets the global       @D1A 00032600
.*                                variable SYSASCE.  This          @D1A 00032700
.*                                variable is used later to        @D1A 00032800
.*                                determine whether the caller is  @D1A 00032900
.*                                in AR ASC mode or primary ASC    @D1A 00033000
.*                                mode.                            @D1A 00033100
.*                                                                      00033200
.******************************************************************     00033300
.* If no key was specified then go to the label SKIP since key          00033400
.* can't be checked against anything else.                              00033500
.******************************************************************     00033600
.*                                                                      00033700
         AIF   ('&KEY' EQ '').SKIP                                      00033800
.*                                                                      00033900
.******************************************************************     00034000
.* Key was specified, set a variable to indicate that it was            00034100
.* specified on the freemain invocation.  This will help us             00034200
.* distinguish between key not specified and key 0 specified. @L2A      00034300
.******************************************************************     00034400
.*                                                                      00034500
&KYSPC   SETB  ('&KEY' NE '')                    @L2A                   00034600
.*                                                                      00034700
.******************************************************************     00034800
.* Key was specified, and since it can only be specified with RC and    00034900
.* RU issue an error message for the other modes.                       00035000
.******************************************************************     00035100
.*                                                                      00035200
         AIF   ('&MODE' NE 'RC' AND '&MODE' NE 'RU').ERRORA             00035300
.*                                                                      00035400
.******************************************************************     00035500
.* Set a bit to indicate if the key is in a register or not.            00035600
.* If possible , check the key given and issue error messages if        00035700
.* its invalid.                                                         00035800
.******************************************************************     00035900
.*                                                                      00036000
&KEYRG   SETB  ('&KEY'(1,1) EQ '(')     KEY IS IN A REGISTER            00036100
         AIF   (&KEYRG).SKIP   REGISTER VALUE CANNOT BE CHECKED         00036200
         AIF   (T'&KEY NE 'N').SKIP     EQUATED KEYS CANNOT BE CHECKED  00036300
         AIF   (&KEY GT 15).ERRORB                                      00036400
.*                                                                      00036500
.******************************************************************     00036600
.* Branch form cannot be specified with the list form of the macro      00036700
.******************************************************************     00036800
.*                                                                      00036900
.SKIP    AIF   ('&MF' EQ 'L' AND '&BRANCH' NE '').ERRORC                00037000
.*                                                                      00037100
.******************************************************************     00037200
.* If branch wasn't specified, continue at BRCNT                        00037300
.******************************************************************     00037400
.*                                                                      00037500
         AIF   ('&BRANCH' EQ '').BRCNT                                  00037600
.*                                                                      00037700
.******************************************************************     00037800
.* If its just a single branch request like YES or NO then go to        00037900
.* BRSNG to continue                                                    00038000
.******************************************************************     00038100
.*                                                                      00038200
         AIF   ('&BRANCH'(1,1) NE '(').BRSNG                            00038300
.*                                                                      00038400
.******************************************************************     00038500
.* The only valid double branch request is YES,GLOBAL. Give error       00038600
.* message for anything else.                                           00038700
.******************************************************************     00038800
.*                                                                      00038900
       AIF   ('&BRANCH(1)' NE 'YES' OR '&BRANCH(2)' NE 'GLOBAL').ERRORD 00039000
.*                                                                      00039100
.******************************************************************     00039200
.* Global requests are only valid for RC and RU forms of freemain       00039300
.* so issue an error message for any others.                            00039400
.******************************************************************     00039500
.*                                                                      00039600
         AIF   ('&BRANCH(2)' EQ 'GLOBAL' AND '&MODE' NE 'RC' AND       *00039700
               '&MODE' NE 'RU').ERRORF                                  00039800
.*                                                                      00039900
.******************************************************************     00040000
.* Set the bits that say this is global and that its branch entry       00040100
.******************************************************************     00040200
.*                                                                      00040300
&GLBR    SETB  1                                                        00040400
&BR      SETB  1                                                        00040500
.*                                                                      00040600
.******************************************************************     00040700
.* Branch unconditionally to BRCNT to continue                          00040800
.******************************************************************     00040900
.*                                                                      00041000
         AGO   .BRCNT                                                   00041100
.*                                                                      00041200
.******************************************************************     00041300
.* If branch NO was specified, its an error because you must            00041400
.* specify branch YES when key has been specified (something that       00041500
.* we already decided was specified in code above)                      00041600
.******************************************************************     00041700
.*                                                                      00041800
.BRSNG   AIF   ('&BRANCH' NE 'YES').ERRORD                              00041900
.*                                                                      00042000
.******************************************************************     00042100
.* Otherwise it was just a single, valid yes so set the bit that        00042200
.* says this is branch entry                                            00042300
.******************************************************************     00042400
.*                                                                      00042500
&BR      SETB  1                                                        00042600
.BRCNT   ANOP                                                           00042700
.*                                                                      00042800
.******************************************************************     00042900
.* Set the SVC number to  5                                             00043000
.******************************************************************     00043100
.*                                                                      00043200
&SVCN    SETA  5                                                        00043300
.*                                                                      00043400
.******************************************************************     00043500
.* If this is a 1 character mode freemain request (such as  V, L and    00043600
.* R) then go to SKPC to continue processing                            00043700
.******************************************************************     00043800
.*                                                                      00043900
         AIF   (K'&MODE LT 2).SKPC                                      00044000
.*                                                                      00044100
.******************************************************************     00044200
.* Since the greatest size mode is a 2 character one, flag all the      00044300
.* others as errors                                                     00044400
.******************************************************************     00044500
.*                                                                      00044600
         AIF   (K'&MODE GT 2).ERROR7                           @G860P30 00044700
.*                                                                      00044800
.******************************************************************     00044900
.* If its an unconditional request, go to SKPC to continue processing   00045000
.******************************************************************     00045100
.*                                                                      00045200
         AIF   ('&MODE'(2,1) NE 'C').SKPC                               00045300
.*                                                                      00045400
.******************************************************************     00045500
.* Set the conditional variable to indicate that this is a conditional  00045600
.* request                                                              00045700
.******************************************************************     00045800
.*                                                                      00045900
&CND     SETA  32                                                       00046000
.*                                                                      00046100
.******************************************************************     00046200
.* Mode must be specified on the internal format. If it wasn't go       00046300
.* to error1                                                            00046400
.******************************************************************     00046500
.*                                                                      00046600
.SKPC    AIF   ('&MODE' EQ '' AND '&MF' EQ 'I').ERROR1                  00046700
.*                                                                      00046800
.******************************************************************     00046900
.* Both LV and LA cannot be given on the same request                   00047000
.******************************************************************     00047100
.*                                                                      00047200
         AIF   ('&LV' NE '' AND '&LA' NE '').ERROR5                     00047300
.*                                                                      00047400
.******************************************************************     00047500
.* If mode wasn't specified then go to CONTA to continue processing.    00047600
.******************************************************************     00047700
.*                                                                      00047800
         AIF   ('&MODE' EQ '').CONTA                                    00047900
.*                                                                      00048000
.******************************************************************     00048100
.* All E modes require LV                                               00048200
.******************************************************************     00048300
.*                                                                      00048400
         AIF   ('&MODE'(1,1) EQ 'E' AND '&LA' NE '').ERROR6             00048500
.*                                                                      00048600
.******************************************************************     00048700
.* All R modes don't use LA. They either use LV or SP                   00048800
.******************************************************************     00048900
.*                                                                      00049000
         AIF   ('&MODE'(1,1) EQ 'R' AND '&LA' NE '').ERROR6             00049100
.*                                                                      00049200
.******************************************************************     00049300
.* All L modes require LA                                               00049400
.******************************************************************     00049500
.*                                                                      00049600
         AIF   ('&MODE'(1,1) EQ 'L' AND '&LV' NE '').ERROR4             00049700
.*                                                                      00049800
.******************************************************************     00049900
.* V forms don't use LV                                                 00050000
.******************************************************************     00050100
.*                                                                      00050200
         AIF   ('&MODE'(1,1) EQ 'V' AND '&LV' NE '').ERROR4             00050300
.*                                                                      00050400
.******************************************************************     00050500
.* V forms don't use LA                                                 00050600
.******************************************************************     00050700
.*                                                                      00050800
         AIF   ('&MODE'(1,1) EQ 'V' AND '&LA' NE '').ERROR6             00050900
.*                                                                      00051000
.******************************************************************     00051100
.* If the macro format isn't I then continue at CONTB                   00051200
.******************************************************************     00051300
.*                                                                      00051400
.CONTA   AIF   ('&MF' NE 'I').CONTB                                     00051500
.*                                                                      00051600
.******************************************************************     00051700
.* E forms require LV to be specified                                   00051800
.******************************************************************     00051900
.*                                                                      00052000
         AIF   ('&MODE'(1,1) EQ 'E' AND '&LV' EQ '').ERROR8             00052100
.*                                                                      00052200
.******************************************************************     00052300
.* L forms require LA to be specified                                   00052400
.******************************************************************     00052500
.*                                                                      00052600
         AIF   ('&MODE'(1,1) EQ 'L' AND '&LA' EQ '').ERROR8             00052700
.*                                                                      00052800
.******************************************************************     00052900
.* All non-R forms require A to be specified                            00053000
.******************************************************************     00053100
.*                                                                      00053200
         AIF   ('&MODE'(1,1) NE 'R' AND '&A' EQ '').ERROR8              00053300
.*                                                                      00053400
.******************************************************************     00053500
.* If its a list form go to LROUT to do list form processing            00053600
.******************************************************************     00053700
.*                                                                      00053800
.CONTB   AIF   ('&MF' EQ 'L').LROUT                                     00053900
.*                                                                      00054000
.******************************************************************     00054100
.* If its an internal form go to IROUT to do internal form processing   00054200
.******************************************************************     00054300
.*                                                                      00054400
         AIF   ('&MF' EQ 'I').IROUT                                     00054500
.*                                                                      00054600
.******************************************************************     00054700
.* The only form left is execute form and this form requires that       00054800
.* you supply a remote control program parameter....MF=(E,ctrl prog)    00054900
.* So, if the number of things given isn't 2, then its an error         00055000
.******************************************************************     00055100
.*                                                                      00055200
         AIF   (N'&MF LE 1).ERROR2                                      00055300
         AIF   ('&MF(1)' NE 'E').ERROR2                                 00055400
.*                                                                      00055500
.******************************************************************     00055600
.* Load register 1 with the parameter list                              00055700
.******************************************************************     00055800
.*                                                                      00055900
&NAME    IHBINNRA &MF(2)                                                00056000
.*                                                                      00056100
.******************************************************************     00056200
.* If mode wasn't specified, skip the setting of M.                     00056300
.******************************************************************     00056400
.*                                                                      00056500
.CONTC   AIF   ('&MODE' EQ '').CONTD                                    00056600
.*                                                                      00056700
.******************************************************************     00056800
.* Set the bits to indicate if it was a list request, element           00056900
.* request or variable request.                                         00057000
.******************************************************************     00057100
.*                                                                      00057200
&M(1)    SETB  ('&MODE'(1,1) EQ 'E')                                    00057300
&M(2)    SETB  ('&MODE'(1,1) EQ 'L')                                    00057400
&M(3)    SETB  ('&MODE'(1,1) EQ 'V')                                    00057500
.*                                                                      00057600
.******************************************************************     00057700
.* If its not one of these and we are at this code, its an error        00057800
.******************************************************************     00057900
.*                                                                      00058000
         AIF   (&M(1)+&M(2)+&M(3) NE 1).ERROR7                          00058100
.*                                                                      00058200
.******************************************************************     00058300
.* Place this information in a control variable and then store it       00058400
.* in the parameter list.                                               00058500
.******************************************************************     00058600
.*                                                                      00058700
&CTR     SETA  128*&M(2)+192*&M(3)+&CND                                 00058800
         MVI   8(1),&CTR                         MOVE MODE BYTE TO LIST 00058900
.*                                                                      00059000
.******************************************************************     00059100
.* If LV wasn't specified then skip over the checks related to it       00059200
.******************************************************************     00059300
.*                                                                      00059400
.CONTD   AIF   ('&LV' EQ '').CONTG                                      00059500
.*                                                                      00059600
.******************************************************************     00059700
.* If LV was given to us in a register, go to ISAREGA to process it     00059800
.******************************************************************     00059900
.*                                                                      00060000
         AIF   ('&LV'(1,1) EQ '(').ISAREGA                              00060100
.*                                                                      00060200
.******************************************************************     00060300
.* If LV was given to us in a variable, go to CONTAA to process it      00060400
.******************************************************************     00060500
.*                                                                      00060600
         AIF   (T'&LV EQ 'N').CONTAA                                    00060700
.*                                                                      00060800
.******************************************************************     00060900
.* Otherwise, just store it in the parameter list in the right place    00061000
.******************************************************************     00061100
.*                                                                      00061200
.CONTBB  ANOP                                                           00061300
         B     *+8                               BRANCH AROUND LENGTH   00061400
         DC    AL4(&LV)                          LENGTH                 00061500
         MVC   0(4,1),*-4                        MOVE LENGTH INTO LIST  00061600
.*                                                                      00061700
.******************************************************************     00061800
.* Branch unconditionally to CONTG to continue processing               00061900
.******************************************************************     00062000
.*                                                                      00062100
         AGO   .CONTG                                                   00062200
.*                                                                      00062300
.******************************************************************     00062400
.* If the length that we are trying to free is greater than a page      00062500
.* then go to CONTBB to continue                                        00062600
.******************************************************************     00062700
.*                                                                      00062800
.CONTAA  AIF   (&LV GT 4095).CONTBB                                     00062900
.*                                                                      00063000
.******************************************************************     00063100
.* Otherwise, store the length in the parameter list and branch         00063200
.* unconditionally to CONTG to continue processing                      00063300
.******************************************************************     00063400
.*                                                                      00063500
         LA    14,&LV.(0,0)                      PICK UP LENGTH         00063600
         ST    14,0(0,1)                         STORE LENGTH INTO LIST 00063700
         AGO   .CONTG                                                   00063800
.*                                                                      00063900
.******************************************************************     00064000
.* Otherwise, store the length in the parameter list and branch         00064100
.* unconditionally to CONTG to continue processing                      00064200
.******************************************************************     00064300
.*                                                                      00064400
.ISAREGA ST    &LV(1),0(0,1)                     STORE LENGTH INTO LIST 00064500
.*                                                                      00064600
.******************************************************************     00064700
.* If LA wasn't specified then go to CONTH to continue processing       00064800
.******************************************************************     00064900
.*                                                                      00065000
.CONTG   AIF   ('&LA' EQ '').CONTH                                      00065100
.*                                                                      00065200
.******************************************************************     00065300
.* If LA was specified in a register then go to ISAREGB to continue     00065400
.******************************************************************     00065500
.*                                                                      00065600
         AIF   ('&LA'(1,1) EQ '(').ISAREGB                              00065700
.*                                                                      00065800
.******************************************************************     00065900
.* Otherwise, its there for the taking so just put it in the            00066000
.* parameter list. Then, branch unconditionally to CONTH to continue    00066100
.******************************************************************     00066200
.*                                                                      00066300
         LA    14,&LA                            PICK UP LIST ADDRESS   00066400
         ST    14,0(0,1)                         STORE LA INTO LIST     00066500
         AGO   .CONTH                                                   00066600
.*                                                                      00066700
.******************************************************************     00066800
.* LA is in a register, get it and put it in the                        00066900
.* parameter list.                                                      00067000
.******************************************************************     00067100
.*                                                                      00067200
.ISAREGB ST    &LA(1),0(0,1)                     STORE LA INTO LIST     00067300
.*                                                                      00067400
.******************************************************************     00067500
.* If A wasn't specified then go to CONTI to continue                   00067600
.******************************************************************     00067700
.*                                                                      00067800
.CONTH   AIF   ('&A' EQ '').CONTI                                       00067900
.*                                                                      00068000
.******************************************************************     00068100
.* If A was specified in a register then go to ISAREGC to process       00068200
.* it.                                                                  00068300
.******************************************************************     00068400
.*                                                                      00068500
         AIF   ('&A'(1,1) EQ '(').ISAREGC                               00068600
.*                                                                      00068700
.******************************************************************     00068800
.* Otherwise take the address and store it in the parameter list        00068900
.* before branching unconditionally to CONTI to continue processing     00069000
.******************************************************************     00069100
.*                                                                      00069200
         LA    14,&A                             PICK UP AREA LIST ADDR 00069300
         ST    14,4(0,1)                         STORE INTO LIST        00069400
         AGO   .CONTI                                                   00069500
.*                                                                      00069600
.******************************************************************     00069700
.* A in a register processing. Store it in the parameter list           00069800
.******************************************************************     00069900
.*                                                                      00070000
.ISAREGC ST    &A(1),4(0,1)                      STORE A-ADDR INTO LIST 00070100
.*                                                                      00070200
.******************************************************************     00070300
.* If subpool wasn't specified, we're done, go to FINI                  00070400
.******************************************************************     00070500
.*                                                                      00070600
.CONTI   AIF   ('&SP' EQ '').FINI                                       00070700
.*                                                                      00070800
.******************************************************************     00070900
.* If subpool is in a register, then go to ISAREGD to continue          00071000
.* processing                                                           00071100
.******************************************************************     00071200
.*                                                                      00071300
         AIF   ('&SP'(1,1) EQ '(').ISAREGD                              00071400
.*                                                                      00071500
.******************************************************************     00071600
.* Otherwise, just put the subpool in the parameter list.               00071700
.* Then unconditionally branch to FINI to finish.                       00071800
.******************************************************************     00071900
.*                                                                      00072000
         MVI   9(1),&SP                          MOVE SUBPOOL INTO LIST 00072100
         AGO   .FINI                                                    00072200
.*                                                                      00072300
.******************************************************************     00072400
.* Subpool in a register processing.                                    00072500
.* Then unconditionally branch to FINI to finish.                       00072600
.******************************************************************     00072700
.*                                                                      00072800
.ISAREGD STC   &SP(1),9(0,1)                     STORE SUBPOOL IN LIST  00072900
         AGO   .FINI                                                    00073000
.*                                                                      00073100
.******************************************************************     00073200
.* List Form processing ...if length wasn't specified, go to CONTJ      00073300
.******************************************************************     00073400
.*                                                                      00073500
.LROUT   AIF   ('&LV' EQ '').CONTJ                                      00073600
.*                                                                      00073700
.******************************************************************     00073800
.* If the length was given to us in a register, thats an error          00073900
.******************************************************************     00074000
.*                                                                      00074100
         AIF   ('&LV'(1,1) EQ '(').ERROR3                               00074200
.*                                                                      00074300
.******************************************************************     00074400
.* Else it was just given to us straight, take it then branch to        00074500
.* CONTL to continue                                                    00074600
.******************************************************************     00074700
.*                                                                      00074800
&NAME    DC    A(&LV)                            LENGTH                 00074900
         AGO   .CONTL                                                   00075000
.*                                                                      00075100
.******************************************************************     00075200
.* If the length address wasn't specified go to CONTK to continue       00075300
.******************************************************************     00075400
.*                                                                      00075500
.CONTJ   AIF   ('&LA' EQ '').CONTK                                      00075600
.*                                                                      00075700
.******************************************************************     00075800
.* If the length address was given to us in a register, its an error    00075900
.******************************************************************     00076000
.*                                                                      00076100
         AIF   ('&LA'(1,1) EQ '(').ERROR3                               00076200
.*                                                                      00076300
.******************************************************************     00076400
.* Else it was just given to us straight, take it , put it in the       00076500
.* parameter list and branch to CONTL to continue                       00076600
.******************************************************************     00076700
.*                                                                      00076800
&NAME    DC    A(&LA)                            LIST ADDRESS           00076900
         AGO   .CONTL                                                   00077000
.CONTK   ANOP                                                           00077100
.*                                                                      00077200
.******************************************************************     00077300
.* Save the space in the parameter list that the LA would have taken    00077400
.* had it been specified.                                               00077500
.******************************************************************     00077600
.*                                                                      00077700
&NAME    DC    F'0'                                                     00077800
.*                                                                      00077900
.******************************************************************     00078000
.* If A parameter wasn't specified then go to CONTM to continue         00078100
.******************************************************************     00078200
.*                                                                      00078300
.CONTL   AIF   ('&A' EQ '').CONTM                                       00078400
.*                                                                      00078500
.******************************************************************     00078600
.* If A parameter was specified in a register, its an error. Go to      00078700
.* ERROR3 to continue.                                                  00078800
.******************************************************************     00078900
.*                                                                      00079000
         AIF   ('&A'(1,1) EQ '(').ERROR3                                00079100
.*                                                                      00079200
.******************************************************************     00079300
.* Otherwise just store it in the parameter list                        00079400
.******************************************************************     00079500
.*                                                                      00079600
         DC    A(&A)                             AREA LIST ADDRESS      00079700
.*                                                                      00079800
.******************************************************************     00079900
.* Unconditionally branch to CONTN to continue processing               00080000
.******************************************************************     00080100
.*                                                                      00080200
         AGO   .CONTN                                                   00080300
.*                                                                      00080400
.******************************************************************     00080500
.* Save the space in the parameter list that the A would have taken     00080600
.* had it been specified.                                               00080700
.******************************************************************     00080800
.*                                                                      00080900
.CONTM   DC    F'0'                              AREA LIST ADDRESS      00081000
.*                                                                      00081100
.******************************************************************     00081200
.* If mode wasn't specified, then go to CONTO to continue processing    00081300
.******************************************************************     00081400
.*                                                                      00081500
.CONTN   AIF   ('&MODE' EQ '').CONTO                                    00081600
.*                                                                      00081700
.******************************************************************     00081800
.* Set a series of bits in M to indicate the mode specified             00081900
.******************************************************************     00082000
.*                                                                      00082100
&M(1)    SETB  ('&MODE'(1,1) EQ 'E')                                    00082200
&M(2)    SETB  ('&MODE'(1,1) EQ 'L')                                    00082300
&M(3)    SETB  ('&MODE'(1,1) EQ 'V')                                    00082400
.*                                                                      00082500
.******************************************************************     00082600
.* If none of the about set instructions was true, then go to           00082700
.* ERROR7 to issue an error message because the mode is invalid.        00082800
.******************************************************************     00082900
.*                                                                      00083000
         AIF   (&M(1)+&M(2)+&M(3) NE 1).ERROR7                          00083100
.*                                                                      00083200
.******************************************************************     00083300
.* Fill in the mode byte and put it in the parameter list               00083400
.******************************************************************     00083500
.*                                                                      00083600
&CTR     SETA  128*&M(2)+192*&M(3)+&CND                                 00083700
         DC    AL1(&CTR)                         MODE BYTE              00083800
.*                                                                      00083900
.******************************************************************     00084000
.* Unconditionally branch to CONTSP to continue processing              00084100
.******************************************************************     00084200
.*                                                                      00084300
         AGO   .CONTSP                                                  00084400
.*                                                                      00084500
.******************************************************************     00084600
.* Save the space it would have taken if the mode byte was there.       00084700
.******************************************************************     00084800
.*                                                                      00084900
.CONTO   DC    AL1(0)                            MODE BYTE              00085000
.*                                                                      00085100
.******************************************************************     00085200
.* If subpool wasn't specified, go to CONTU to continue processing      00085300
.******************************************************************     00085400
.*                                                                      00085500
.CONTSP  AIF   ('&SP' EQ '').CONTU                                      00085600
.*                                                                      00085700
.******************************************************************     00085800
.* If subpool is in a register, its an error, go to ERROR3              00085900
.******************************************************************     00086000
.*                                                                      00086100
         AIF   ('&SP'(1,1) EQ '(').ERROR3                               00086200
.*                                                                      00086300
.******************************************************************     00086400
.* Otherwise just store the subpool value in the parameter list         00086500
.******************************************************************     00086600
.*                                                                      00086700
         DC    AL1(&SP)                          SUBPOOL VALUE          00087000
.*                                                                      00087100
.******************************************************************     00087200
.* Unconditionally branch to FINISH to continue processing              00087300
.******************************************************************     00087400
.*                                                                      00087500
         AGO   .FINISH                                                  00088000
.*                                                                      00088100
.******************************************************************     00088200
.* Save the space it would have taken if the subpool was given  .       00088300
.******************************************************************     00088400
.*                                                                      00088500
.CONTU   DC    AL1(0)                            SUBPOOL VALUE          00089000
.*                                                                      00089100
.******************************************************************     00089200
.* Exit the macro                                                       00089300
.******************************************************************     00089400
.*                                                                      00089500
.FINISH  MEXIT                                                          00090000
.*                                                                      00090100
.******************************************************************     00090200
.* Internal Form processing, go to the appropriate spot depending       00090300
.* on if its R mode or P mode                                           00090400
.******************************************************************     00090500
.*                                                                      00090600
.IROUT   AIF   ('&MODE'(1,1) EQ 'R').RROUT                              00091002
         AIF   ('&MODE'(1,1) EQ 'P').PROUT                     @Z30EN9G 00091503
.*                                                                      00091700
.******************************************************************     00091900
.* Internal Form processing                                             00092100
.******************************************************************     00092300
.*                                                                      00092500
         CNOP  0,4                                                      00092700
&NAME    BAL   1,*+14                            BRANCH AROUND LIST     00093000
.*                                                                      00093100
.******************************************************************     00093200
.* If Length variable wasn't specified then got to CNTA to continue     00093300
.******************************************************************     00093400
.*                                                                      00093500
         AIF   ('&LV' EQ '').CNTA                                       00094000
.*                                                                      00094100
.******************************************************************     00094200
.* If Length variable was given to us in a register, got to CNTB        00094300
.* to continue                                                          00094400
.******************************************************************     00094500
.*                                                                      00094600
         AIF   ('&LV'(1,1) EQ '(').CNTB                                 00095000
.*                                                                      00095100
.******************************************************************     00095200
.* Otherwise just store it in the parm list since it was given to       00095300
.* us directly on the invocation.                                       00095400
.******************************************************************     00095500
.*                                                                      00095600
         DC    A(&LV)                            LENGTH                 00096000
.*                                                                      00096100
.******************************************************************     00096200
.* Unconditionally branch to CNTC   to continue processing              00096300
.******************************************************************     00096400
.*                                                                      00096500
         AGO   .CNTC                                                    00097000
.*                                                                      00097100
.******************************************************************     00097200
.* Save the space it would have taken if the length was given  .        00097300
.******************************************************************     00097400
.*                                                                      00097500
.CNTB    DC    A(0)                              LENGTH                 00098000
.*                                                                      00098100
.******************************************************************     00098200
.* Set &AA to indicate that the LV was given in a register              00098300
.******************************************************************     00098400
.*                                                                      00098500
&AA      SETB  1                                                        00099000
.*                                                                      00099100
.******************************************************************     00099200
.* Unconditionally branch to CNTC   to continue processing              00099300
.******************************************************************     00099400
.*                                                                      00099500
         AGO   .CNTC                                                    00100000
.*                                                                      00100100
.******************************************************************     00100200
.* If the length address wasn't specified then go to CNTDD to continue  00100300
.******************************************************************     00100400
.*                                                                      00100500
.CNTA    AIF   ('&LA' EQ '').CNTDD                                      00101000
.*                                                                      00101100
.******************************************************************     00101200
.* If the length address was specified in a register go to CNTD         00101300
.* to continue                                                          00101400
.******************************************************************     00101500
.*                                                                      00101600
         AIF   ('&LA'(1,1) EQ '(').CNTD                                 00102000
.*                                                                      00102100
.******************************************************************     00102200
.* Otherwise, just store the length address in the parameter list       00102300
.* since it was given to us directly on the invocation                  00102400
.******************************************************************     00102500
.*                                                                      00102600
         DC    A(&LA)                            LIST ADDRESS           00103000
.*                                                                      00103100
.******************************************************************     00103200
.* Unconditionally branch to CNTC   to continue processing              00103300
.******************************************************************     00103400
.*                                                                      00103500
         AGO   .CNTC                                                    00104000
.CNTD    ANOP                                                           00105000
.*                                                                      00105100
.******************************************************************     00105200
.* Set &B on to indicate that LA was given to us in a register          00105300
.******************************************************************     00105400
.*                                                                      00105500
&B       SETB  1                                                        00106000
.*                                                                      00106100
.******************************************************************     00106200
.* Save the space it would have taken if the length address was given   00106300
.******************************************************************     00106400
.*                                                                      00106500
.CNTDD   DC    A(0)                                                     00107000
.*                                                                      00107100
.******************************************************************     00107200
.* If the address was given in a register, go to CNTE to                00107300
.* continue                                                             00107400
.******************************************************************     00107500
.*                                                                      00107600
.CNTC    AIF   ('&A'(1,1) EQ '(').CNTE                                  00108000
.*                                                                      00108100
.******************************************************************     00108200
.* Otherwise, just store the address in the parameter list since        00108300
.* it was given to us directly on the invocation                        00108400
.******************************************************************     00108500
.*                                                                      00108600
         DC    A(&A)                             AREA LIST ADDRESS      00109000
.*                                                                      00109100
.******************************************************************     00109200
.* Unconditionally branch to CNTF   to continue processing              00109300
.******************************************************************     00109400
.*                                                                      00109500
         AGO   .CNTF                                                    00110000
.*                                                                      00110100
.******************************************************************     00110200
.* Save the space it would have taken if the area list address          00110300
.* was given                                                            00110400
.******************************************************************     00110500
.*                                                                      00110600
.CNTE    DC    A(0)                              AREA LIST ADDRESS      00111000
.*                                                                      00111100
.******************************************************************     00111200
.* Set &C to inicate that the address was given to us in a register.    00111300
.******************************************************************     00111400
.*                                                                      00111500
&C       SETB  1                                                        00112000
.CNTF    ANOP                                                           00113000
.*                                                                      00113100
.******************************************************************     00113200
.* Set the mode byte to indicate the mode type that was specified       00113300
.******************************************************************     00113400
.*                                                                      00113500
&M(1)    SETB  ('&MODE'(1,1) EQ 'E')                                    00114002
&M(2)    SETB  ('&MODE'(1,1) EQ 'L')                                    00115002
&M(3)    SETB  ('&MODE'(1,1) EQ 'V')                                    00116002
.*                                                                      00116100
.******************************************************************     00116200
.* If no valid mode types were specified, go to ERROR7                  00116300
.******************************************************************     00116400
.*                                                                      00116500
         AIF   (&M(1)+&M(2)+&M(3) NE 1).ERROR7                          00117000
.*                                                                      00117100
.******************************************************************     00117200
.* Fill in the mode byte                                                00117300
.******************************************************************     00117400
.*                                                                      00117500
&CTR     SETA  128*&M(2)+192*&M(3)+&CND                                 00118002
.*                                                                      00118100
.******************************************************************     00118200
.* Store the mode byte in the parameter list.                           00118300
.******************************************************************     00118400
.*                                                                      00118500
         DC    AL1(&CTR)                         MODE BYTE              00119000
.*                                                                      00119100
.******************************************************************     00119200
.* If subpool wasn't specified, then go to CNTL to continue             00119300
.******************************************************************     00119400
.*                                                                      00119500
.CNTSP   AIF   ('&SP' EQ '').CNTL                                       00120000
.*                                                                      00120100
.******************************************************************     00120200
.* If subpool was given to us in a register, go to ISAREGQ              00120300
.* to process it                                                        00120400
.******************************************************************     00120500
.*                                                                      00120600
         AIF   ('&SP'(1,1) EQ '(').ISAREGQ                              00121000
.*                                                                      00121100
.******************************************************************     00121200
.* Else the subpool was specified right on the parameter, just put      00121300
.* it in the parameter list.                                            00121400
.******************************************************************     00121500
.*                                                                      00121600
         DC    AL1(&SP)                          SUBPOOL VALUE          00122000
.*                                                                      00122100
.******************************************************************     00122200
.* Unconditionally branch to CNTM   to continue processing              00122300
.******************************************************************     00122400
.*                                                                      00122500
         AGO   .CNTM                                                    00123000
.*                                                                      00123100
.******************************************************************     00123200
.* Save the space so that we can put the register that the subpool is   00123300
.* specified in into the parm list.                                     00123400
.******************************************************************     00123500
.*                                                                      00123600
.ISAREGQ DC    AL1(0)                            SUBPOOL VALUE          00124000
         STC   &SP(1),9(0,1)                     STORE SUBPOOL          00125002
.*                                                                      00125100
.******************************************************************     00125200
.* Unconditionally branch to CNTM   to continue processing              00125300
.******************************************************************     00125400
.*                                                                      00125500
         AGO   .CNTM                                                    00126000
.*                                                                      00126100
.******************************************************************     00126200
.* Save the space that the subpool would have taken up if it had been   00126300
.* specified                                                            00126400
.******************************************************************     00126500
.*                                                                      00126600
.CNTL    DC    AL1(0)                            SUBPOOL VALUE          00127000
.*                                                                      00127100
.******************************************************************     00127200
.* If the length variable wasn't given to us in a register go to        00127300
.* CNTN to continue otherwise, store the length in the parameter        00127400
.* list                                                                 00127500
.******************************************************************     00127600
.*                                                                      00127700
.CNTM    AIF   (NOT &AA).CNTN                                           00128000
         ST    &LV(1),0(0,1)                     STORE LENGTH IN LIST   00129002
.*                                                                      00129100
.******************************************************************     00129200
.* Unconditionally branch to CNTO   to continue processing              00129300
.******************************************************************     00129400
.*                                                                      00129500
         AGO   .CNTO                                                    00130000
.*                                                                      00130100
.******************************************************************     00130200
.* If the length address wasn't given to us in a register go to         00130300
.* CNTO to continue processing otherwise take it out of the             00130400
.* register and store it in the parameter list.                         00130500
.******************************************************************     00130600
.*                                                                      00130700
.CNTN    AIF   (NOT &B).CNTO                                            00131000
         ST    &LA(1),0(0,1)                     STORE LA INTO LIST     00132002
.*                                                                      00132100
.******************************************************************     00132200
.* If the a-address wasn't given to us in a register go to              00132300
.* FINI to continue processing otherwise take it out of the             00132400
.* register and store it in the parameter list.                         00132500
.******************************************************************     00132600
.*                                                                      00132700
.CNTO    AIF   (NOT &C).FINI                                            00133002
         ST    &A(1),4(0,1)                      STORE A-ADDR INTO LIST 00134002
.*                                                                      00134100
.******************************************************************     00134200
.* Unconditionally branch to FINI   to continue processing              00134300
.******************************************************************     00134400
.*                                                                      00134500
         AGO   .FINI                                                    00134600
.*                                                                      00134700
.******************************************************************     00134800
.* R form processing. If the number of characters in the mode is        00134900
.* 2 go to NREGM to do RC and RU processing.                            00135000
.******************************************************************     00135100
.*                                                                      00135200
.RROUT   AIF   (K'&MODE EQ 2).NREGM                                     00135300
.*                                                                      00135400
.******************************************************************     00135500
.* This is SVC 10 processing  (just plain old R)                        00135600
.******************************************************************     00135700
.*                                                                      00135800
&SVCN    SETA  10                                                       00136802
.*                                                                      00136900
.******************************************************************     00137000
.* If the length variable and the a-address weren't specified go to     00137100
.* SPROUT to continue processing. This is a subpool freemain.           00137200
.******************************************************************     00137300
.*                                                                      00137400
         AIF   ('&LV' EQ '' AND '&A' EQ '').SPROUT                      00137500
.*                                                                      00137600
.******************************************************************     00137700
.* If the length variable or the a-address wasn't specified go to       00137800
.* ERROR8. One or the other must be specified on regular freemains.     00137900
.******************************************************************     00138000
.*                                                                      00138100
         AIF   ('&LV' EQ '' OR '&A' EQ '').ERROR8                       00138200
.*                                                                      00138300
.******************************************************************     00138400
.* If the length variable was given in register 0 and the subpool       00138500
.* was also specified, its an error. Go to error9.                      00138600
.******************************************************************     00138700
.*                                                                      00138800
         AIF   ('&LV' EQ '(0)' AND '&SP' NE '').ERROR9                  00138900
.*                                                                      00139000
.******************************************************************     00139100
.* If the length variable was given in a register, go to ISARGA         00139200
.* to continue processing.                                              00139300
.******************************************************************     00139400
.*                                                                      00139500
         AIF   ('&LV'(1,1) EQ '(').ISARGA                               00139600
.*                                                                      00139700
.******************************************************************     00139800
.* If subpool wasn't specified, then go to CTUA to continue             00139900
.* processing.                                                          00140000
.******************************************************************     00140100
.*                                                                      00140200
         AIF   ('&SP' EQ '').CTUA                                       00142000
.*                                                                      00142100
.******************************************************************     00142200
.* Set &D to indicate that the subpool was specified.                   00142300
.******************************************************************     00142400
.*                                                                      00142500
&D       SETB 1                                                         00142600
.*                                                                      00142700
.******************************************************************     00142800
.* If subpool was specified in a register, to to ISARGB to              00142900
.* continue                                                             00143000
.******************************************************************     00143100
.*                                                                      00143200
         AIF   ('&SP'(1,1) EQ '(').ISARGB                               00143300
.CMNB    CNOP  0,4                                                      00144002
&NAME    B     *+8                               BRANCH AROUND LENGTH   00145002
.*                                                                      00145100
.******************************************************************     00145200
.* If subpool wasn't specified then go to NSPS to continue processing   00145300
.******************************************************************     00145400
.*                                                                      00145500
         AIF   (NOT &D).NSPS                                            00145600
.*                                                                      00145700
.******************************************************************     00145800
.* Otherwise, store the subpool and the length variable since they      00145900
.* were both given to us on the invocation.                             00146000
.******************************************************************     00146100
.*                                                                      00146200
         DC    AL1(&SP)                          SUBPOOL VALUE          00146300
         DC    AL3(&LV)                          LENGTH                 00147000
.*                                                                      00147100
.******************************************************************     00147200
.* Unconditionally branch to CMNA   to continue processing              00147300
.******************************************************************     00147400
.*                                                                      00147500
         AGO   .CMNA                                                    00147600
.*                                                                      00147700
.******************************************************************     00147800
.* Since no subpool was specified, just store the length variable       00147900
.* in the parameter list.                                               00148000
.******************************************************************     00148100
.*                                                                      00148200
.NSPS    DC    A(&LV)                            LENGTH                 00148300
.*                                                                      00148400
.******************************************************************     00148500
.* Load the subpool and the length into register 0                      00148600
.******************************************************************     00148700
.*                                                                      00148800
.CMNA    L     0,*-4                             LOAD SP AND LV         00148900
.*                                                                      00149000
.******************************************************************     00149100
.* If the address parameter was given in a register branch to           00149200
.* ISARGD to continue, otherwise just load it into register 1           00149300
.******************************************************************     00149400
.*                                                                      00149500
.CTUD    AIF   ('&A'(1,1) EQ '(').ISARGD                                00149600
         L     1,&A                              LOAD AREA ADDRESS      00149700
.*                                                                      00149800
.******************************************************************     00149900
.* Unconditionally branch to FINI   to continue processing              00150000
.******************************************************************     00150100
.*                                                                      00150200
         AGO   .FINI                                                    00152802
.*                                                                      00153200
.******************************************************************     00153600
.* If the length variable isn't determinable or is greater than a       00154000
.* a page go to CMNB to continue.                                       00154400
.******************************************************************     00154800
.*                                                                      00155200
.CTUA    AIF   (T'&LV NE 'N').CMNB                                      00156002
         AIF   (&LV GT 4095).CMNB                                       00158002
.*                                                                      00158500
.******************************************************************     00159000
.* Otherwise, just load the length into register 0                      00159500
.******************************************************************     00160000
.*                                                                      00160500
&NAME    LA    0,&LV.(0,0)                       LOAD LENGTH            00161000
.*                                                                      00161100
.******************************************************************     00161200
.* Unconditionally branch to CTUD   to continue processing              00161300
.******************************************************************     00161400
.*                                                                      00161500
         AGO   .CTUD                                                    00162000
.ISARGD  ANOP                                                  @ZA74333 00163000
.*                                                                      00163100
.******************************************************************     00163200
.* Load the address into register 1                                     00163300
.******************************************************************     00163400
.*                                                                      00163500
         LA    1,0(0,&A(1))                      LOAD AREA ADDRESS      00164002
.*                                                                      00164100
.******************************************************************     00164200
.* Unconditionally branch to FINI   to continue processing              00164300
.******************************************************************     00164400
.*                                                                      00164500
         AGO   .FINI                                                    00165002
.*                                                                      00165100
.******************************************************************     00165200
.* P form processing                                                    00165300
.******************************************************************     00165400
.*                                                                      00165500
.PROUT   ANOP                                                  @Z30EN9G 00165600
.*                                                                      00165700
.******************************************************************     00165800
.* Branch must be specified with P form processing. If it wasn't        00165900
.* go to ERROR8 to issue a nastygram.                                   00166000
.******************************************************************     00166100
.*                                                                      00166200
         AIF   ('&BRANCH' EQ '').ERROR8                        @Z30EN9G 00166300
.*                                                                      00166400
.******************************************************************     00166500
.* If the address was given to us in a register go to the PROUTR        00166600
.* (p form register processing)                                         00166700
.******************************************************************     00166800
.*                                                                      00166900
         AIF   ('&A'(1,1) EQ '(').PROUTR                       @Z30EN9G 00167000
.*                                                                      00167100
.******************************************************************     00167200
.* Otherwise, load the actual address into register 1                   00167300
.******************************************************************     00167400
.*                                                                      00167500
&NAME    L     1,&A                        LOAD AREA ADDRESS   @Z30EN9G 00168803
.*                                                                      00169000
.******************************************************************     00169200
.* Unconditionally branch to FINI   to continue processing              00169400
.******************************************************************     00169600
.*                                                                      00169800
         AGO   .FINI                                           @Z30EN9G 00170000
.*                                                                      00170100
.******************************************************************     00170200
.* P form register processing                                           00170300
.******************************************************************     00170400
.*                                                                      00170500
.PROUTR  ANOP                                                  @Z30EN9G 00171003
.*                                                                      00171100
.******************************************************************     00171200
.* Load the actual address into register 1                              00171300
.******************************************************************     00171400
.*                                                                      00171500
&NAME    LA    1,0(0,&A(1))                LOAD AREA ADDRESS   @Z30EN9G 00172003
.*                                                                      00172100
.******************************************************************     00172200
.* Unconditionally branch to FINI   to continue processing              00172300
.******************************************************************     00172400
.*                                                                      00172500
         AGO   .FINI                                           @Z30EN9G 00173003
.*                                                                      00173100
.******************************************************************     00173200
.* If we can't look at the length variable or its greater than          00173300
.* a page then go to CONTFF to continue processing                      00173400
.******************************************************************     00173500
.*                                                                      00173600
.ISARGB  AIF   (T'&LV NE 'N').CONTFF                                    00174003
         AIF   (&LV GT 4095).CONTFF                                     00175003
.*                                                                      00175100
.******************************************************************     00175200
.* Otherwise load register 0 with the subpool, shift it to the          00175300
.* high order byte.                                                     00175400
.******************************************************************     00175500
.*                                                                      00175600
&NAME    LR    0,&SP(1)                          PICK UP SUBPOOL        00176003
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE 00177003
.*                                                                      00177100
.******************************************************************     00177200
.* Store the length in register 14 then put it all together in          00177300
.* register 0 by ORing the two together.                                00177400
.******************************************************************     00177500
.*                                                                      00177600
         LA    14,&LV.(0,0)                      PICK UP LENGTH         00178003
         OR    0,14                              PACK SP AND LV         00179003
.*                                                                      00179100
.******************************************************************     00179200
.* Unconditionally branch to CTUD   to continue processing              00179300
.******************************************************************     00179400
.*                                                                      00179500
         AGO   .CTUD                                                    00180003
.CONTFF  CNOP  0,4                                                      00181003
&NAME    B     *+8                               BRANCH AROUND LENGTH   00182003
         DC    A(&LV)                            LENGTH                 00183003
.*                                                                      00183100
.******************************************************************     00183200
.* Store the subpool in register 0, shift it to the hi order            00183300
.* byte and combine it with the length which is 10 instructions         00183400
.* back.                                                                00183500
.******************************************************************     00183600
.*                                                                      00183700
         LR    0,&SP(1)                          PICK UP SUBPOOL        00184003
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE 00184803
         O     0,*-10                            PACK SP AND LV         00186003
.*                                                                      00186100
.******************************************************************     00186200
.* Unconditionally branch to CTUD   to continue processing              00186300
.******************************************************************     00186400
.*                                                                      00186500
         AGO   .CTUD                                                    00187003
.ISARGA  AIF   ('&NAME' EQ '').UNNAMED                                  00188003
&NAME    DS    0H                                                       00189003
.UNNAMED AIF   ('&LV(1)' EQ '0').CTUD                                   00190003
         AIF   ('&SP' NE '').CTUG                                       00191003
         LR    0,&LV(1)                          LOAD LENGTH            00192003
.*                                                                      00192100
.******************************************************************     00192200
.* Unconditionally branch to CTUD   to continue processing              00192300
.******************************************************************     00192400
.*                                                                      00192500
         AGO   .CTUD                                                    00193003
.CTUG    AIF   ('&SP'(1,1) EQ '(').CTUGP                                00194003
         LA    0,&SP.(0,0)                       LOAD SUBPOOL           00195003
.*                                                                      00195100
.******************************************************************     00195200
.* Unconditionally branch to CTUGPP to continue processing              00195300
.******************************************************************     00195400
.*                                                                      00195500
         AGO   .CTUGPP                                                  00196003
.CTUGP   LR    0,&SP(1)                          LOAD SUBPOOL           00197003
.CTUGPP  SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE 00198003
         OR    0,&LV(1)                          PACK SP AND LV         00199003
.*                                                                      00199100
.******************************************************************     00199200
.* Unconditionally branch to CTUD   to continue processing              00199300
.******************************************************************     00199400
.*                                                                      00199500
         AGO   .CTUD                                                    00200003
.*                                                                      00200100
.******************************************************************     00200200
.* Subpool processing, if it wasn't specified, its an error             00200300
.******************************************************************     00200400
.*                                                                      00200500
.SPROUT  AIF   ('&SP' EQ '').ERROR8                                     00201003
         AIF   ('&SP'(1,1) EQ '(').ISARGQ                               00202003
&NAME    LA    0,&SP.(0,0)                       LOAD SUBPOOL           00203003
.CTUX    SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE 00204003
.CTUXX   SR    1,1                               INDICATE SP RELEASE    00205003
.*                                                                      00205300
.******************************************************************     00205600
.* Unconditionally branch to FINI   to continue processing              00205900
.******************************************************************     00206200
.*                                                                      00206500
         AGO   .FINI                                                    00206803
.ISARGQ  AIF   ('&NAME' EQ '').NONE                                     00207403
&NAME    DS    0H                                                       00208003
.NONE    AIF   ('&SP(1)' EQ '0').CTUXX                                  00208803
         LR    0,&SP(1)                          LOAD SUBPOOL           00209803
.*                                                                      00209900
.******************************************************************     00210000
.* Unconditionally branch to CTUX   to continue processing              00210100
.******************************************************************     00210200
.*                                                                      00210300
         AGO   .CTUX                                                    00210803
.NREGM   ANOP      REGISTER (RC AND RU) FORMS OF FREEMAIN               00211803
&PRG     SETA  &PRG-12*&BR     CHANGE PARM REG FOR BRANCH ENTRY         00212803
.*                                                                      00212900
.******************************************************************     00213000
.* Set the SVC number to be SVC 120                                     00213100
.* Remember whether this is a conditional or unconditional FREEMAIN     00213200
.* Remember whether the subpool was passed in a register.               00213300
.* Remember whether both subpool and key were passed in a register.     00213400
.*                                                              @O1A    00213500
.******************************************************************     00213600
.*                                                                      00213700
&SVCN    SETA  120                                                      00213803
&UNCND   SETB  ('&MODE' EQ 'RU')                                        00214803
         AIF   ('&SP' EQ '').CONT1                                      00215803
&SPREG   SETB  ('&SP'(1,1) EQ '(')                                      00216803
.CONT1   ANOP                                                           00218203
&B       SETB  (&SPREG AND &KEYRG)                                      00220202
.*                                                                      00220600
.******************************************************************     00221000
.* Perform special processing if this is a subpool FREEMAIN             00221400
.*                                                              @O1A    00221800
.******************************************************************     00222200
.*                                                                      00222600
         AIF   ('&LV' EQ '' AND '&A' EQ '').NSPFM                       00223202
.*                                                                      00223300
.******************************************************************     00223400
.* The absence of both the LV parameter and the A parameter             00223500
.* indicates a request for a subpool FREEMAIN.  The presence of         00223600
.* just a length to free (LV) or just an address to free (A) makes      00223700
.* no sense.                                                            00223800
.*                                                              @O1A    00223900
.******************************************************************     00224000
.*                                                                      00224100
         AIF   ('&LV' EQ '' OR '&A' EQ '').ERROR8                       00224802
.*                                                                      00225000
.******************************************************************     00225200
.* Remember whether the length to free (LV) was passed in a register    00225400
.*                                                              @O1A    00225600
.******************************************************************     00225800
.*                                                                      00226000
&LVREG   SETB  ('&LV'(1,1) EQ '(')                                      00226402
.*                                                                      00226500
.******************************************************************     00226600
.* Put data that was specified on the macro in the calling              00226700
.* program's storage so that it can later be loaded into registers      00226800
.* and thus passed to the FREEMAIN service.                             00226900
.*                                                                      00227000
.* The first step in this process is to generate code to branch around  00227100
.* the pseudo parmlist.  The correctness of the method used to          00227200
.* compute the number of bytes to branch is not obvious, so it is       00227300
.* explained below.  Note that &B = 1 if both the subpool and key       00227400
.* were passed in registers, and that &LVREG = 1 if the argument of     00227500
.* the LV parameter was passed in a register.                           00227600
.*                                                                      00227700
.* The largest possible pseudo parmlist looks like this:                00227800
.*                                                                      00227900
.* Length  Contents                                                     00228000
.* ------  --------                                                     00228100
.* 04      Length of storage being freed, argument of the LV parm       00228200
.* 01      Flags that go in byte 0 of the parameter reg                 00228300
.* 01      Subpool number, argument of the SP parameter                 00228400
.* 01      Key, argument of the KEY parameter                           00228500
.* 01      Flags that go in byte 3 of the parameter reg                 00228600
.*                                                                      00228700
.* This sums 8, and we must also take the branch instruction itself     00228800
.* into account, so the max distance to branch is 12.  If the FREEMAIN  00228900
.* coder placed the argument of the LV parameter in a register, then    00229000
.* there is nothing in the pseudo parmlist for it.  If the FREEMAIN     00229100
.* coder placed both the argument of the SP parameter and the KEY       00229200
.* parameter in registers, then there is nothing in the pseudo          00229300
.* parmlist for them either.  So, the smallest possible pseudo          00229400
.* parmlist looks like this:                                            00229500
.*                                                                      00229600
.* Length  Contents                                                     00229700
.* ------  --------                                                     00229800
.* 01      Flags that go in byte 0 of the parameter reg                 00229900
.* 01      Flags that go in byte 3 of the parameter reg                 00230000
.*                                                                      00230100
.* The CNOP 0,4 comes into play in the following case:                  00230200
.* If the FREEMAIN coder placed the argument of the SP parameter in a   00230300
.* register (but the argument of the KEY parameter is not in a          00230400
.* register) then the pseudo parmlist contains the 1 byte key, but not  00230500
.* the subpool.  The pseudo parmlist would like this:                   00230600
.*                                                                      00230700
.* Length  Contents                                                     00230800
.* ------  --------                                                     00230900
.* 04      Length of storage being freed, argument of the LV parm       00231000
.* 01      Flags that go in byte 0 of the parameter reg                 00231100
.* 01      Key, argument of the KEY parameter                           00231200
.* 01      Flags that go in byte 3 of the parameter reg                 00231300
.* 01      Inserted by the assembler to force correct boundary!         00231400
.*                                                                      00231500
.******************************************************************     00231600
.*                                                                      00231700
         CNOP  0,4                                                      00231800
&NAME    B     *+12-4*&LVREG-2*&B          BRANCH AROUND DATA @O2C      00231900
         AIF   (&LVREG OR '&LV' EQ '').CONT10                           00232000
         DC    A(&LV)                            LENGTH                 00232100
.CONT10  ANOP                                                           00232602
.*                                                                      00232700
.******************************************************************     00232800
.* Produce the first byte of the "pseudo parmlist".  See the prolog     00232900
.* of IGVVSM31 for a breakdown of exactly what goes in this byte.       00233000
.******************************************************************     00233100
.*                                                                      00233200
&GNAME.F DC    BL1'0&KYSPC.000000'      Flags              @O2A         00233300
.*                                                                      00233400
.******************************************************************     00233500
.* If the key parameter was not specified, we skip to CONT1A to         00233600
.* save the space that the key would have taken up if it had been       00233700
.* specified.  If key was specified in a register, we need do           00233800
.* nothing to remember what was specified, so we skip to CONTB.         00233900
.* If key was specified and was not in a register, we                   00234000
.* put the key that was specified on the macro in the calling           00234100
.* program's storage so that it can later be loaded into a register     00234200
.* and thus passed to the FREEMAIN service.                             00234300
.*                                                              @O1A    00234400
.******************************************************************     00234500
.*                                                                      00234600
         AIF   ('&KEY' EQ '').CONT1A    KEY PARM PRESENT?               00234700
         AIF   (&KEYRG).CONT1B                                          00234802
         DC    AL1(&KEY*16)                      STORAGE KEY            00239202
         AGO   .CONT1B                                                  00239300
.CONT1A  DC    AL1(0)                            RESERVED               00239400
.*                                                                      00239500
.******************************************************************     00239600
.* If the subpool parameter was not specified, we skip to CONT1E to     00239700
.* insert the default subpool number, which is zero.  If subpool was    00239800
.* specified in a register, we need do nothing to remember what was     00239900
.* specified, so we skip to CONT1C.  If subpool was specified and       00240000
.* was not in a register, we put the subpool that was specified on      00240100
.* the macro in the calling program's storage so that it can later      00240200
.* be loaded into a register and thus passed to the FREEMAIN            00240300
.* service.                                                             00240400
.*                                                              @O1A    00240500
.******************************************************************     00240600
.*                                                                      00240700
.CONT1B  AIF   (&SPREG).CONT1C                   SUBPOOL IN REGISTER?   00240802
         AIF   ('&SP' EQ '').CONT1E                                     00241202
         DC    AL1(&SP)                          SUBPOOL NUMBER         00242402
         AGO   .CONT1C                                                  00242500
.CONT1E  DC    AL1(0)                            SUBPOOL NUMBER         00242600
.*                                                                      00242700
.******************************************************************     00242800
.* Put data that was specified on the macro in the calling              00242900
.* program's storage so that it can later be loaded into a register     00243000
.* and thus passed to the FREEMAIN service.  In particular,             00243100
.* remember whether the FREEMAIN was conditional or unconditional.      00243200
.* If the length (LV) was not specified, or if it was passed in a       00243300
.* register, there is no need to load the passed length into reg 0,     00243400
.* so we skip to LVCHK.                                                 00243500
.*                                                              @O1A    00243600
.******************************************************************     00243700
.*                                                                      00243800
.CONT1C  DC    BL1'000000&UNCND.1'               MODE BYTE              00244002
         AIF   (&LVREG OR '&LV' EQ '').LVCHK                            00245500
         L     0,*-8+2*&B                        LOAD LENGTH            00246000
         AGO   .NCT1                                                    00246100
.*                                                                      00246200
.******************************************************************     00246300
.* The length (LV) was passed in a register or was not specified.       00246400
.* The &D check puzzles me.  If the length is not in a register, it     00246500
.* must be true that LV was not specified at all, so we have nothing    00246600
.* to load into register 0.  If the length was passed in a register     00246700
.* other than register 0, we move the length to register 0.             00246800
.*                                                              @O1A    00246900
.******************************************************************     00247000
.*                                                                      00247100
.LVCHK   AIF   (&D).CONT1D                                              00247200
         AIF   (NOT &LVREG).NCT1                                        00247500
.CNT1    AIF   ('&LV(1)' EQ '0').NCT1                                   00248000
         LR    0,&LV(1)                          LOAD LENGTH            00248500
.NCT1    AIF   ('&A'(1,1) EQ '(').NREGA                                 00249000
         L     1,&A                              LOAD AREA ADDRESS      00249500
         AGO   .CONT1D                                                  00249600
.*                                                                      00249700
.******************************************************************     00249800
.* If the address to be freed was placed in register 1 by the           00249900
.* FREEMAIN invoker, then there is no need to move it to register 1.    00250000
.*                                                              @O1A    00250100
.******************************************************************     00250200
.*                                                                      00250300
.NREGA   AIF   ('&A(1)' EQ '1').CONT1D                                  00250500
         LR    1,&A(1)                           LOAD AREA ADDRESS      00251000
.*                                                                      00252600
.******************************************************************     00252700
.* Below collect data from various places, and copy it into the         00252800
.* parameter register that will be passed to the FREEMAIN service       00252900
.* routines.  The subpool and key are always passed to the FREEMAIN     00253000
.* service routines in the parameter register.  The coder of the        00253100
.* FREEMAIN macro can, however, choose to put the subpool and key in a  00253200
.* variety of places - either or both can be in a register, or can be   00253300
.* passed as a symbol, or can be a decimal number.  If the coder of     00253400
.* the FREEMAIN macro has passed the subpool and/or key as a decimal    00253500
.* number or a symbol, then the value passed will already be in the     00253600
.* pseudo parmlist.  Otherwise, the value passed will be in the         00253700
.* register that the FREEMAIN coder chose.                              00253800
.*                                                              @O2A    00253900
.******************************************************************     00254000
.*                                                                      00254100
.CONT1D  AIF   (&KEYRG OR &SPREG).KORSREG                               00254200
.*                                                                      00254300
.******************************************************************     00254400
.* Neither the key nor the subpool are in a register, so everything     00254500
.* we need is in the pseudo parmlist.                                   00254600
.*                                                              @O2A    00254700
.******************************************************************     00254800
.*                                                                      00254900
         L     &PRG.,&GNAME.F                    LOAD PARAMETERS        00255000
.*                                                             2@O2D    00255100
         AGO   .FINI                                                    00255200
.*                                                                      00255300
.******************************************************************     00255400
.* Either the key or subpool is in a register                           00255500
.******************************************************************     00255600
.*                                                                      00255700
.KORSREG AIF   (&B).BOTHREG                                             00255800
.*       ONLY ONE OF KEY OR SP IS IN A REGISTER                         00255900
         AIF   (NOT &SPREG).KEYREG                                      00256000
.*       ONLY SP IS A REGISTER                                          00256100
         AIF   ('&SP(1)' EQ '&PRG').SPINPRG                             00256200
.*       SP IS NOT IN THE PARAMETER REGISTER.                           00256300
         LR    &PRG.,&SP(1)                      INSERT SUBPOOL ID      00256400
.SPINPRG SLL   &PRG.,8(0)                     SHIFT SP TO BYTE 2 YM1995 00256602
         ICM   &PRG.,13,&GNAME.F                 INSERT REST OF PARMS   00257002
.*                                                                @O2D  00257200
         AGO   .FINI                                                    00257400
.*                                                                      00257800
.******************************************************************     00257900
.* The key was passed in a register, but the subpool was not.           00258000
.******************************************************************     00258100
.*                                                                      00258200
.KEYREG  AIF   ('&KEY(1)' EQ '&PRG').KYINPRG                            00258803
.*       KEY IS NOT IN THE PARAMETER REGISTER                           00259200
         LR    &PRG.,&KEY(1)                     OBTAIN STORAGE KEY     00260003
.KYINPRG SLL   &PRG.,16(0)                   SHIFT KEY TO BYTE 1 YM1995 00261803
         ICM   &PRG.,11,&GNAME.F                 ADD REST OF PARMS      00262803
.*                                                              @O2D    00263400
         AGO   .FINI                                                    00264100
.*                                                                      00264200
.******************************************************************     00264300
.* Both sp and key are in registers                                     00264400
.******************************************************************     00264500
.*                                                                      00264600
.BOTHREG AIF   ('&KEY(1)' NE '&SP(1)').NOTSAME                          00265803
.*                                                                      00266100
.******************************************************************     00266400
.* Both key and sp are the same register                                00266700
.******************************************************************     00267000
.*                                                                      00267300
         AIF   ('&KEY(1)' EQ '&PRG').BOTHPRG                            00267803
.*                                                                      00268100
.******************************************************************     00268400
.* The common register is not the parm register                         00268700
.******************************************************************     00269000
.*                                                                      00269300
         LR    &PRG.,&KEY(1)                     GET KEY & SUBPOOL ID   00269803
.BOTHPRG ICM   &PRG.,9,&GNAME.F                  ADD REST OF PARAMETERS 00270803
.*                                                              @O2D    00271400
         AGO   .FINI                                                    00272100
.*                                                                      00272200
.******************************************************************     00272300
.* Both key and sp are regs, but they are different registers.          00272400
.******************************************************************     00272500
.*                                                                      00272600
.NOTSAME AIF   ('&KEY(1)' EQ '&PRG' OR '&SP(1)' EQ '&PRG').PRGIS1       00273803
.*                                                                      00274100
.******************************************************************     00274400
.* Neither register is the parameter register                           00274700
.******************************************************************     00275000
.*                                                                      00275300
         LR    &PRG.,&KEY(1)                     INSERT KEY             00275803
.ADDSP   SLL   &PRG.,8(0)                  SHIFT KEY INTO BYTE 2 YM1995 00276803
         OR    &PRG.,&SP(1)                      ADD SUBPOOL NUMBER     00277803
         SLL   &PRG.,8(0)                   SHIFT TO BYTES 1 & 2 YM1995 00278803
.*                                                                      00278900
.******************************************************************     00279000
.* Unconditionally branch to BOTHPRG to continue processing             00279100
.******************************************************************     00279200
.*                                                                      00279300
         AGO   .BOTHPRG                                                 00279803
.PRGIS1  AIF   ('&KEY(1)' EQ '&PRG').ADDSP                              00280803
.*       SP IS IN THE PARM REGISTER, KEY IS IN ANOTHER REG.             00281800
         SLL   &PRG.,8(0)                 MOVE SUBPOOL TO BYTE 2 YM1995 00282803
         SLL   &KEY(1),16(0)                 SHIFT KEY TO BYTE 1 YM1995 00283803
         OR    &PRG.,&KEY(1)                     COMBINE KEY & SUBPOOL  00284803
         SRL   &KEY(1),16(0)                 RESTORE KEY BACK  @YA30573 00284900
.*                                                                      00285000
.******************************************************************     00285100
.* Unconditionally branch to BOTHPRG to continue processing             00285200
.******************************************************************     00285300
.*                                                                      00285400
         AGO   .BOTHPRG                                                 00285803
.*       SUBPOOL FREEMAIN                                               00296802
.NSPFM   AIF   ('&SP' EQ '').ERROR8                                     00298402
         CNOP  0,4                                                      00300002
&NAME    SR    0,0                               ZERO LENGTH            00301602
         SR    1,1                               INDICATE SP RELEASE    00303202
         B     *+8-2*&B                          BRANCH AROUND VALUES   00304802
&D       SETB  1                                                        00306402
.*                                                                      00306600
.******************************************************************     00306800
.* Unconditionally branch to CONT10  to continue processing             00307000
.******************************************************************     00307200
.*                                                                      00307400
         AGO   .CONT10                                                  00308002
.*                                                                      00308200
.******************************************************************     00308400
.* If its a branch entry request, go to SETBE to continue               00308600
.******************************************************************     00308800
.*                                                                      00309000
.FINI    AIF   (&BR).SETBE                                              00309602
.*                                                                      00309800
.******************************************************************     00310000
.* Otherwise, issue the SVC                                             00310200
.******************************************************************     00310400
.*                                                                      00310600
         SVC   &SVCN                             ISSUE FREEMAIN SVC     00311202
.*                                                                      00311400
.******************************************************************     00311600
.* Exit the macro                                                       00311800
.******************************************************************     00312000
.*                                                                      00312200
         MEXIT                                                          00312802
.SETBE   ANOP                                                           00313200
         AIF   ('&SYSAM64' NE 'YES').NO64A1                        @L3A 00313500
         LLGT  15,16(0,0)         ADDRESS THE CVT              @G860P30 00313800
         AGO   .NO64A2                                             @L3A 00314100
.NO64A1  ANOP                                                      @L3A 00314400
         L     15,16(0,0)         ADDRESS THE CVT              @G860P30 00314700
.NO64A2  ANOP                                                      @L3A 00315000
         AIF   ('&MODE' EQ 'P').CBBE                           @Z30EN9G 00315400
         AIF   (&SVCN EQ 120).CRBE                                      00316400
         AIF   (&SVCN EQ 10).RMBE                                       00317400
         L     15,844(0,15)       FREEMAIN ENTRY CVTLFRM       @G860P30 00318400
.*                                                                      00318500
.******************************************************************     00318600
.* Unconditionally branch to SBE     to continue processing             00318700
.******************************************************************     00318800
.*                                                                      00318900
         AGO   .SBE                                                     00319400
.CBBE    L     15,972(0,15)       FREEMAIN ENTRY CVTCBBR       @G860P30 00320400
.*                                                                      00320500
.******************************************************************     00320600
.* Unconditionally branch to SBE     to continue processing             00320700
.******************************************************************     00320800
.*                                                                      00320900
         AGO   .SBE                                            @Z30EN9G 00321400
.RMBE    L     15,840(0,15)       FREEMAIN ENTRY CVTRMBR       @G860P30 00322400
.*                                                                      00322500
.******************************************************************     00322600
.* Unconditionally branch to SBE     to continue processing             00322700
.******************************************************************     00322800
.*                                                                      00322900
         AGO   .SBE                                                     00323400
.*                                                                      00323500
.********************************************************************** 00323600
.*                                                                      00323700
.* The code below finds the address of the VSM entry point that must    00323800
.* be branched to.  This path is used by SVC 120 eqivalent branch       00323900
.* entry requests (local and global).  Callers in AR ASC mode are       00324000
.* allowed to use this interface to free global storage or to free      00324100
.* storage from the primary address space.  This is made possible by    00324200
.* the 'SAC 0', which causes ARs to be ignored.  (VSM will not work if  00324300
.* ARs are active.)  Note that the 'SAC 0' must appear                  00324400
.* before register 15 is used as a base register because there is no    00324500
.* guarantee that AR 15 is set up properly.  (Using reg 15 as a base    00324600
.* register without a valid ALET in AR 15 will cause a program          00324700
.* check.)                                                              00324800
.*                                                                      00324900
.****************************************************************  @D1A 00325000
.*                                                                      00325100
.CRBE    ANOP                                                      @D1C 00325200
         AIF ('&SYSASCE' EQ 'P').SKIPSW1  If we are already in     @D1A 00325300
.*                                primary ASC mode, do not         @D1A 00325400
.*                                produce a SAC to switch to       @D1A 00325500
.*                                primary.  (That is, skip the     @D1A 00325600
.*                                switch.)                         @D1A 00325700
         SAC   0                  Switch to primary ASC mode.      @D1A 00325800
.SKIPSW1 ANOP                                                      @D1A 00325900
         AIF   (&GLBR).GLBE       Global branch entry ?            @D1C 00326000
.*                                                                 @D1A 00326100
.******************************************************************     00326200
.* Find the SVC 120 equivalent local branch entry point.           @D1A 00326300
.******************************************************************     00326400
.*                                                                 @D1A 00326500
         L     15,504(0,15)       FREEMAIN ENTRY CVTCRMN       @G860P30 00326600
.*                                                                      00326700
.******************************************************************     00326800
.* Unconditionally branch to S120BE  to continue processing             00326900
.******************************************************************     00327000
.*                                                                      00327100
         AGO   .S120BE                                             @D1C 00327200
.*                                                                 @D1A 00327300
.******************************************************************     00327400
.* Find the SVC 120 equivalent global branch entry point.          @D1A 00327500
.******************************************************************     00327600
.*                                                                 @D1A 00327700
.*                                                                 @D1A 00327800
.******************************************************************     00327900
.* Load register 4 with the address of the VSWK                         00328000
.******************************************************************     00328100
.*                                                                 @D1A 00328200
.GLBE    ANOP                                                           00328300
         AIF   ('&SYSAM64' NE 'YES').NO64B1                        @L3A 00328400
         LLGT  4,684(0,15)        GLOBAL WORK/SAVE AREA ADDR   @G860P30 00328500
         AGO   .NO64B2                                             @L3A 00328600
.NO64B1  ANOP                                                      @L3A 00328700
         L     4,684(0,15)        GLOBAL WORK/SAVE AREA ADDR   @G860P30 00328800
.NO64B2  ANOP                                                      @L3A 00328900
         L     4,4(0,4)           VSM GLOBAL SAVE AREA         @G860P30 00329000
.*                                                                 @D1A 00329100
.******************************************************************     00329200
.* Load register 15 with the global branch entry point.                 00329300
.******************************************************************     00329400
.*                                                                 @D1A 00329500
         L     15,680(0,15)       GLBRANCH ENTRY CVTGLMN       @G860P30 00329600
.*                                                                 @D1A 00329700
.******************************************************************     00329800
.* Call freemain                                                        00329900
.******************************************************************     00330000
.*                                                                 @D1A 00330100
.S120BE  ANOP                                                           00330200
         BALR  14,15              CALL FREEMAIN                    @D1A 00330300
         AIF ('&SYSASCE' EQ 'P').SKIPSW2 If we were entered in     @D1A 00330400
.*                                primary ASC mode, do not         @D1A 00330500
.*                                produce a SAC to switch back     @D1A 00330600
.*                                to AR mode.  (That is, skip      @D1A 00330700
.*                                the switch.)                     @D1A 00330800
         SAC   512                Switch back to AR mode.          @D1A 00330900
.SKIPSW2 ANOP                                                      @D1A 00331000
.*                                                                      00331100
.******************************************************************     00331200
.* Exit the macro                                                       00331300
.******************************************************************     00331400
.*                                                                      00331500
         MEXIT                                                     @D1A 00331600
.*                                                                 @D1A 00331700
.******************************************************************     00331800
.*  Branch to FREEMAIN service.  This handles SVC 5 and 10         @D1A 00331900
.*  equivalent branch entry, and 'P' type requests.                @D1A 00332000
.******************************************************************     00332100
.*                                                                 @D1A 00332200
.SBE     ANOP                                                           00332300
         BALR  14,15              CALL FREEMAIN                    @D1A 00332400
.*                                                                      00332500
.******************************************************************     00332600
.* Exit the macro                                                       00332700
.******************************************************************     00332800
.*                                                                      00332900
         MEXIT                                                          00333000
.*                                                                 @D1A 00333100
.*                                                                      00333200
.******************************************************************     00333300
.* If mode wasn't specifed with internal macro format its an error      00333400
.******************************************************************     00333500
.*                                                                      00333600
.ERROR1  IHBERMAC 17                                                    00334002
.*                                                                      00335600
.******************************************************************     00337200
.* Exit the macro                                                       00338800
.******************************************************************     00340400
.*                                                                      00342000
         MEXIT                                                          00344002
.*                                                                      00349000
.******************************************************************     00354000
.*  Invalid MF operand was specified                                    00359000
.******************************************************************     00364000
.*                                                                      00369000
.ERROR2  IHBERMAC 1001,MF,&MF INVALID MF OPERAND -- &MF                 00374002
.*                                                                      00382300
.******************************************************************     00390600
.* Exit the macro                                                       00398900
.******************************************************************     00407200
.*                                                                      00415500
         MEXIT                                                          00424002
.*                                                                      00432300
.******************************************************************     00440600
.* A parm was given to us in a register and that isn't legal            00448900
.******************************************************************     00457200
.*                                                                      00465500
.ERROR3  IHBERMAC 69                                                    00474002
.*                                                                      00482300
.******************************************************************     00490600
.* Exit the macro                                                       00498900
.******************************************************************     00507200
.*                                                                      00515500
         MEXIT                                                          00524002
.*                                                                      00532300
.******************************************************************     00540600
.* LA is required and wasn't specified                                  00548900
.******************************************************************     00557200
.*                                                                      00565500
.ERROR4  IHBERMAC 89                                                    00574002
.*                                                                      00582300
.******************************************************************     00590600
.* Exit the macro                                                       00598900
.******************************************************************     00607200
.*                                                                      00615500
         MEXIT                                                          00624002
.*                                                                      00632300
.******************************************************************     00640600
.* Both LA and LV can't be specified on the same request                00648900
.******************************************************************     00657200
.*                                                                      00665500
.ERROR5  IHBERMAC 91                                                    00674002
.*                                                                      00682300
.******************************************************************     00690600
.* Exit the macro                                                       00698900
.******************************************************************     00707200
.*                                                                      00715500
         MEXIT                                                          00724002
.*                                                                      00732300
.******************************************************************     00740600
.*  LV is required but wasn't specified.                                00748900
.******************************************************************     00757200
.*                                                                      00765500
.ERROR6  IHBERMAC 90                                                    00774002
.*                                                                      00782300
.******************************************************************     00790600
.* Exit the macro                                                       00798900
.******************************************************************     00807200
.*                                                                      00815500
         MEXIT                                                          00824002
.*                                                                      00832300
.******************************************************************     00840600
.* Invalid mode specified                                               00848900
.******************************************************************     00857200
.*                                                                      00865500
.ERROR7  IHBERMAC 1001,MODE,&MODE      INVALID MODE OPERAND &MODE       00874002
.*                                                                      00882300
.******************************************************************     00890600
.* Exit the macro                                                       00898900
.******************************************************************     00907200
.*                                                                      00915500
         MEXIT                                                          00924002
.*                                                                      00932300
.******************************************************************     00940600
.*  A required parameter wasn't specified                               00948900
.******************************************************************     00957200
.*                                                                      00965500
.ERROR8  IHBERMAC 01                                                    00974002
.*                                                                      00982300
.******************************************************************     00990600
.* Exit the macro                                                       00998900
.******************************************************************     01007200
.*                                                                      01015500
         MEXIT                                                          01024002
.*                                                                      01032300
.******************************************************************     01040600
.* Length value and subpool relationship screwed up                     01048900
.******************************************************************     01057200
.*                                                                      01065500
.ERROR9  IHBERMAC 92                                                    01074002
.*                                                                      01075600
.******************************************************************     01077200
.* Exit the macro                                                       01078800
.******************************************************************     01080400
.*                                                                      01082000
         MEXIT                                                          01084002
.*                                                                      01092300
.******************************************************************     01100600
.*  Key can only be specified with RU and RC freemains                  01108900
.******************************************************************     01117200
.*                                                                      01125500
.ERRORA  IHBERMAC 1020,KEY,&MODE                                        01134002
.*                                                                      01142300
.******************************************************************     01150600
.* Exit the macro                                                       01158900
.******************************************************************     01167200
.*                                                                      01175500
         MEXIT                                                          01184002
.*                                                                      01192300
.******************************************************************     01200600
.*  Key must be between 0 and 15 inclusive.                             01208900
.******************************************************************     01217200
.*                                                                      01225500
.ERRORB  IHBERMAC 1001,KEY,&KEY                                         01234002
.*                                                                      01242300
.******************************************************************     01250600
.* Exit the macro                                                       01258900
.******************************************************************     01267200
.*                                                                      01275500
         MEXIT                                                          01284002
.*                                                                      01292300
.******************************************************************     01300600
.*  No such thing as branch entry list form of freemain.                01308900
.******************************************************************     01317200
.*                                                                      01325500
.ERRORC  IHBERMAC 1020,BRANCH,''MF=L''                                  01334002
.*                                                                      01342300
.******************************************************************     01350600
.* Exit the macro                                                       01358900
.******************************************************************     01367200
.*                                                                      01375500
         MEXIT                                                          01384002
.*                                                                      01392300
.******************************************************************     01400600
.*  The only valid 2 branch request is YES,GLOBAL                       01408900
.******************************************************************     01417200
.*                                                                      01425500
.ERRORD  IHBERMAC 1001,BRANCH,&BRANCH                                   01434002
.*                                                                      01435600
.******************************************************************     01437200
.* Exit the macro                                                       01438800
.******************************************************************     01440400
.*                                                                      01442000
         MEXIT                                                          01444002
.*                                                                      01447600
.******************************************************************     01451200
.* Global requests are only valid for RC and RU forms of freemain       01454800
.******************************************************************     01458400
.*                                                                      01462000
.ERRORF  IHBERMAC 1020,&BRANCH(2),&MODE                                 01466002
         MEND                                                           01474002
* */ PLSSKIP: ;                                                         01524000
* % FREEMAIN:  MACRO KEYS(LV, LA, A, AREA, SP,                          01574000
*            BRANCH, RTCD, KEY, MF, RELATED,        /*           @P1C*/ 01607300
*            TCBADDR, ASCBADDR);                    /*           @L3A*/ 01640600
* ANS('? ' || MACLABEL || ' FREEMANP '|| MACLIST || MACKEYS || ';');    01674000
*%       END FREEMAIN;                                                  01724000
