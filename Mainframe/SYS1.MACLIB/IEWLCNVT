*/* BILINGUAL IEWLCNVT MACRO                                            00050000
.*********************************************************************  00100000
.*                                                                   *  00250000
.*   MACRO NAME: IEWLCNVT                                            *  00300000
.*                                                                   *  00350000
.*   DESCRIPTION: System interface to the PMLoader convert routines. *  00400000
.*                                                                   *  00450000
.*01* PROPRIETARY_STATEMENT*******************************************  00500000
.*                                                                   *  00550000
.*                                                                   *  00600000
.* LICENSED MATERIALS - PROPERTY OF IBM                              *  00650000
.* THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                       *  00700000
.* 5647-A01 (C) COPYRIGHT IBM CORP. 1991, 2000                       *  00750000
.*                                                                   *  00800000
.* STATUS= HBB7703                                                   *  00850000
.*                                                                   *  00900000
.***END_OF_PROPRIETARY_STATEMENT**************************************  00950000
*/*01* EXTERNAL CLASSIFICATION: PI                                   */ 01000000
*/*01* END OF EXTERNAL CLASSIFICATION:                               */ 01050000
*/*                                                                  */ 01100000
.*                                                                   *  01150000
.*   FUNCTION:                                                       *  01200000
.*       This macro provides callers conversion services on PDS      *  01250000
.*       load module directory entries (mapped by IHAPDS) and the    *  01300000
.*       module attribute records (mapped by IEWPMAR).               *  01350000
.*                                                                   *  01400000
.*                                                                   *  01450000
.*   PROCESSING:                                                     *  01500000
.*                                                                   *  01550000
.*     LOGIC:                                                        *  01600000
.*                                                                   *  01650000
.*       -   Produces a comment block of all parameters.             *  01700000
.*       -   Insure no positional parameters were specified.         *  01750000
.*       -   Validate the FUNC keyword. At the same time the         *  01800000
.*           processing tables will be generated to control          *  01850000
.*           keyword validation.                                     *  01900000
.*       -   Validate keywords.                                      *  01950000
.*       -   Generate the code.                                      *  02000000
.*                                                                   *  02050000
.*     ERROR PROCESSING:                                             *  02100000
.*                                                                   *  02150000
.*       The macro checks:                                           *  02200000
.*                                                                   *  02250000
.*       -   that no positional parameters are specified             *  02300000
.*       -   that all keywords are given the proper number of        *  02350000
.*           arguments                                               *  02400000
.*       -   that all required keywords are specified                *  02450000
.*                                                                   *  02500000
.*       If any of the above checks fail, then the macro issues a    *  02550000
.*       message and a return code of 8.  Processing continues, if   *  02600000
.*       possible, so that all syntax errors will be found in one    *  02650000
.*       compile.                                                    *  02700000
.*                                                                   *  02750000
.*                                                                   *  02800000
.*   NOTES:                                                          *  02850000
.*                                                                   *  02900000
.*     DEPENDENCIES:                                                 *  02950000
.*       -   IEWLCNV macro must be included (will be auto included   *  03000000
.*                   as a result of invoking IEWLCNVT)               *  03050000
.*     RESTRICTIONS: NONE                                            *  03100000
.*                                                                   *  03150000
.*   MACRO:                                                          *  03200000
.*                                                                   *  03250000
.*     PROCESSOR: ASSEMBLER H                                        *  03300000
.*     DISTRIBUTION LIBRARY: AMACLIB                                 *  03350000
.*     ATTRIBUTES: NONE                                              *  03400000
.*                                                                   *  03450000
.*-------------------------------------------------------------------*  03500000
.*                                                                   *  03550000
.*     PURPOSE:                                                      *  03600000
.*         Build an inline IEWLCNVT parameter list                   *  03650000
.*                                                                   *  03700000
.*     LINKAGE:                                                      *  03750000
.*                                                                   *  03800000
.* <Label>  IEWLCNVT MF=L                                            *  03850000
.*                                                                   *  03900000
.*-------------------------------------------------------------------*  03950000
.*                                                                   *  04000000
.*     PURPOSE:                                                      *  04050000
.*         Convert PMAR to PDSDE                                     *  04100000
.*                                                                   *  04150000
.*     LINKAGE:                                                      *  04200000
.*                                                                   *  04250000
.* <label> IEWLCNVT FUNC=PMAR_TO_PDSDE                               *  04300000
.*                  ,FLAGS=processing_flags                          *  04350000
.*                  <,MF={S|                                         *  04400000
.*                        L|                                         *  04450000
.*                       {(E,{(1-12)|label},{COMPLETE|NOCHECK})}}>   *  04500000
.*                  ,PDS2INDC=indicator byte||user_data              *  04550000
.*                  ,PMAR=primary_process_sar_data                   *  04600000
.*                  <,PMARA=alias_process_sar_data>                  *  04650000
.*                  <,PNAME=primary_name_of_alias>                   *  04700000
.*                  <,OUTLEN=output_length>                          *  04750000
.*                  ,AMODEREG=register                               *  04800000
.*                  <,RETCODE=return_code>                           *  04850000
.*                  <,RSNCODE=reason_code>                           *  04900000
.*                                                                   *  04950000
.* ------------------------------------------------------------------*  05000000
.*                                                                   *  05050000
.*     PURPOSE:                                                      *  05100000
.*         Convert record format load module PDSDE to PMAR           *  05150000
.*                                                                   *  05200000
.*     LINKAGE:                                                      *  05250000
.*                                                                   *  05300000
.* <label> IEWLCNVT FUNC=PDSDE_TO_PMAR                               *  05350000
.*                  <,MF={S|                                         *  05400000
.*                        L|                                         *  05450000
.*                       {(E,{(1-12)|label},{COMPLETE|NOCHECK})}}>   *  05500000
.*                  ,PDS2INDC=indicator byte||user_data              *  05550000
.*                  ,PMAR=primary_process_sar_data                   *  05600000
.*                  <,PNAME=primary_name_of_alias>                   *  05650000
.*                  <,OUTLEN=output_length>                          *  05700000
.*                  ,AMODEREG=register                               *  05750000
.*                  <,RETCODE=return_code>                           *  05800000
.*                  <,RSNCODE=reason_code>                           *  05850000
.*                                                                   *  05900000
.* ------------------------------------------------------------------*  05950000
.*                                                                   *  06000000
.* IEWLCNVT KEYWORD  TABLE :                                         *  06050000
.*                                                                   *  06100000
.* #      -   number of arguments allowed for each keyword.          *  06150000
.*            When more than one argument is specified for a keyword,*  06200000
.*            the arguments must be separated by comma(s) and        *  06250000
.*            enclosed within a set of parentheses.                  *  06300000
.*                                                                   *  06350000
.* TYPE   -   type of keyword arguments allowed                      *  06400000
.*      'KEY' - must be a valid character string, see                *  06450000
.*              Keyword Description section for strings.             *  06500000
.*      'RX'  - can be a register or RX type of address              *  06550000
.*                                                                   *  06600000
.*      '*'   - MF keyword, 1-3 arguments allowed. MF=L and MF=S     *  06650000
.*              have 1 argument only, MF=E has 2 or 3 arguments.     *  06700000
.*              First argument is type of KEY, second is type of     *  06750000
.*              RX (can be register) and third is optional KEY type. *  06800000
.*                                                                   *  06850000
.*  Note : For further descriptions of how keyword argument's may be *  06900000
.*         defined, see the individual keyword descriptions below.   *  06950000
.*         Keyword arguments will be assumed to be a valid TYPE, if  *  07000000
.*         they are not an assembly error will occur.                *  07050000
.*                                                                   *  07100000
.* For function columns :                                            *  07150000
.*                                                                   *  07200000
.*      'R' - keyword is required                                    *  07250000
.*      'O' - keyword is optional                                    *  07300000
.*      ' ' - keyword is invalid                                     *  07350000
.*cc                                                                 *  07400000
.*                                                                   *  07450000
.* IEWLCNVT FUNCTION TABLE                                           *  07500000
.* -----------------------------------------                         *  07550000
.* KEYWORDS     #  TYPE  |PMAR_TO |PDSDE_TO|                         *  07600000
.*                       | _PDSDE | _PMAR  |                         *  07650000
.* -----------------------------------------                         *  07700000
.* AMODEREG     1    KEY |    O   |   O    |                         *  07750000
.* -----------------------------------------                         *  07800000
.* FLAGS        1    RX  |    R   |        |                         *  07850000
.* -----------------------------------------                         *  07900000
.* FUNC         1    KEY |    R   |   R    |                         *  07950000
.* -----------------------------------------                         *  08000000
.* MF          1-3   *   |    O   |   O    |                         *  08050000
.* -----------------------------------------                         *  08100000
.* OUTLEN       1    RX  |    R   |   R    |                         *  08150000
.* -----------------------------------------                         *  08200000
.* PDS2INDC     1    RX  |    R   |   R    |                         *  08250000
.* -----------------------------------------                         *  08300000
.* PMAR         1    RX  |    R   |   R    |                         *  08350000
.* -----------------------------------------                         *  08400000
.* PMARA        1    RX  |    O   |        |                         *  08450000
.* -----------------------------------------                         *  08500000
.* PNAME        1    RX  |    O   |   O    |                         *  08550000
.* -----------------------------------------                         *  08600000
.* RETCODE      1    RX  |    O   |   O    |                         *  08650000
.* -----------------------------------------                         *  08700000
.* RSNCODE      1    RX  |    O   |   O    |                         *  08750000
.* -----------------------------------------                         *  08800000
.*cc                                                                 *  08850000
.* KEYWORD DESCRIPTIONS                                              *  08900000
.*                                                                   *  08950000
.*   Notes:                                                          *  09000000
.*       - registers specified for keyword arguments (RX or SYM)     *  09050000
.*         must be enclosed in parentheses. I.E. PMAR=R2 specifies   *  09100000
.*         register R2 points to the storage location containing     *  09150000
.*         the PMAR.                                                 *  09200000
.*       - there are no defaults for omitted keywords except for     *  09250000
.*         the MF keyword                                            *  09300000
.*       - see MF keyword description below for further information  *  09350000
.*         as to what argument types are valid for each macro format.*  09400000
.*                                                                   *  09450000
.*                                                                   *  09500000
.*     AMODEREG=register                                             *  09550000
.*         This identifies a register which is to be used to save    *  09600000
.*         and restore the addressing mode if the caller.            *  09650000
.*         If the caller is always in 31-bit addressing mode,        *  09700000
.*         this parameter may be omitted. If the caller might be in  *  09750000
.*         24-bit addressing mode at the time IEWLCNVT is to be      *  09800000
.*         issued, the AMODEREG parameter must be specified.         *  09850000
.*         Valid registers are 2-12. The register may be enclosed    *  09900000
.*         in parentheses, but this is not required for this         *  09950000
.*         parameter.                                                *  10000000
.*                                                                   *  10050000
.*     FUNC=function_name                                            *  10100000
.*         This identifies the function to be performed.  It is a    *  10150000
.*         required parameter on all invocations (see MF keyword     *  10200000
.*         for exception when no keywords are specified for MF=E).   *  10250000
.*         The FUNC parameter is not required for MF=L, unless other *  10300000
.*         parameters are specified.                                 *  10350000
.*         Valid function_name values are :                          *  10400000
.*                                                                   *  10450000
.*         PMAR_TO_PDSDE                                             *  10500000
.*             Convert a Program Management Attribute Record (PMAR)  *  10550000
.*             to a PDS2 style directory entry.                      *  10600000
.*                                                                   *  10650000
.*         PDSDE_TO_PMAR                                             *  10700000
.*             Convert the user data of a PDS2 sytle directory entry *  10750000
.*             for a load module to a PMAR.                          *  10800000
.*                                                                   *  10850000
.*     FLAGS=processing_flags                                        *  10900000
.*         Specifies options to be used while processing the         *  10950000
.*         PMAR_TO_PDSDE function. Variable processing_flags is      *  11000000
.*         a byte of flags. The only defined flag is to              *  11050000
.*         indicate if an alias entry is being processed.            *  11100000
.*                                                                   *  11150000
.*    MF= {S|                                                        *  11200000
.*         L|                                                        *  11250000
.*         {(E,{(1-12)|label},{COMPLETE|NOCHECK})}}                  *  11300000
.*                                                                   *  11350000
.*        First argument - keyword "S", "L", "E"                     *  11400000
.*                         or default to "S" when MF is ommitted     *  11450000
.*        Second argument, if MF=E - regs 1-12 or RX-Type Address    *  11500000
.*        Third argument, if MF=E  - keyword "COMPLETE", "NOCHECK"   *  11550000
.*                               or default to COMPLETE  if ommitted *  11600000
.*                                                                   *  11650000
.*        The MF, Macro Format, keyword specifies how the            *  11700000
.*        the macro should generate its code.                        *  11750000
.*        Invalid keyword checking, based on function specified,     *  11800000
.*        is done for all macro formats.                             *  11850000
.*                                                                   *  11900000
.*        The  Standard  form, S, will check all required keywords   *  11950000
.*        keywords and  invalid keywords.  This  form generates      *  12000000
.*        a complete  inline  expansion  of the parameter list       *  12050000
.*        Control is then  transferred to the convert routine.       *  12100000
.*        The standard form  is for programs that are not            *  12150000
.*        reenterable, or for programs that do not change values     *  12200000
.*        in the parameter list.                                     *  12250000
.*                                                                   *  12300000
.*        L  specifies the  List form  of the  macro.  This  form    *  12350000
.*        generates a remote parameter list.  Registers are          *  12400000
.*        invalid arguments for MF=L format since executable code    *  12450000
.*        generation does not occur, only adcons are generated.      *  12500000
.*        Invalid keyword checking is done.                          *  12550000
.*                                                                   *  12600000
.*        E specifies the  Execute form of the  macro.  This form    *  12650000
.*        updates the remote parameter list (MF=L) and transfers     *  12700000
.*        control to the convert routine. A second parameter         *  12750000
.*        is required and a third parameter is optional.             *  12800000
.*                                                                   *  12850000
.*        The second parameter for MF=E format is the address of     *  12900000
.*        the plist created by the MF=L IEWLCNVT invocation. This    *  12950000
.*        parameter must be specified as either a RX type of address *  13000000
.*        (possibly the label from MF=L macro invocation) or a       *  13050000
.*        register enclosed in parentheses.                          *  13100000
.*                                                                   *  13150000
.*        The third parameter, COMPLETE or NOCHECK, is optional.     *  13200000
.*        Default  is  COMPLETE.  This argument specifies  whether   *  13250000
.*        required keyword checking will be done.                    *  13300000
.*                                                                   *  13350000
.*        If NOCHECK is coded, then   no,  some  or  all  allowed    *  13400000
.*        keywords  may be  specified, assumption  will  be  that    *  13450000
.*        any  missing keywords were coded on the MF=L macro         *  13500000
.*        invocation. If some keywords are coded, the FUNC keyword   *  13550000
.*        is also required to enable keyword validation.             *  13600000
.*                                                                   *  13650000
.*        If COMPLETE is coded or allowed to default,                *  13700000
.*        the  plist  will  be  zeroed  out  (except for the plist   *  13750000
.*        header). All  required  keywords must be specified.        *  13800000
.*                                                                   *  13850000
.*                                                                   *  13900000
.*     ALL OF THE FOLLOWING KEYWORD ARGUMENTS MUST BE SPECIFIED      *  13950000
.*     AS RX-FORMAT OR REGISTER. SEE IEWLCNVT FUNCTION TABLE         *  14000000
.*     AND MF KEYWORD DESCRIPTION FOR FURTHER DETAILS.               *  14050000
.*                                                                   *  14100000
.*                                                                   *  14150000
.*     OUTLEN=output_length                                          *  14200000
.*         Specifies a fullword (4-byte) field to contain the        *  14250000
.*         length of the generated directory data. Variable          *  14300000
.*         output_length is an output parameter on the               *  14350000
.*         PMAR_TO_PDSDE and PDSDE_TO_PMAR functions.                *  14400000
.*         OUTLEN may not be specified on MF=L.                      *  14450000
.*                                                                   *  14500000
.*     PDS2INDC=indicator_byte||user_data                            *  14550000
.*         Specifies the indicator byte preceding the user data      *  14600000
.*         field of a PDS directory entry. Variable                  *  14650000
.*         indicator_byte is an input parameter on the               *  14700000
.*         PDSDE_TO_PMAR function and an output parameter on the     *  14750000
.*         PMAR_TO_PDSDE function.                                   *  14800000
.*                                                                   *  14850000
.*     PMAR=primary_process_sar_data                                 *  14900000
.*         Specifies an area mapped by the PMAR structure of         *  14950000
.*         macro IEWPMAR. Variable primary_process_sar_data is       *  15000000
.*         the PMAR structure used for input on the                  *  15050000
.*         PMAR_TO_PDSDE function and output on the                  *  15100000
.*         PDSDE_TO_PMAR function.                                   *  15150000
.*                                                                   *  15200000
.*     PMARA=alias_process_sar_data                                  *  15250000
.*         Specifies an area mapped by the PMARA structure of        *  15300000
.*         macro IEWPMAR. Variable alias_process_sar_data is         *  15350000
.*         the PMARA structure used as input by the                  *  15400000
.*         PMAR_TO_PDSDE function.                                   *  15450000
.*                                                                   *  15500000
.*     PNAME=primary_name_of_alias                                   *  15550000
.*         Specifies the area for an eight byte primary name.        *  15600000
.*         This is an                                                *  15650000
.*         input field on the PMAR_TO_PDSDE function and must        *  15700000
.*         be passed if the processing flags indicate that an        *  15750000
.*         alias is being processed.                                 *  15800000
.*                                                                   *  15850000
.*     RETCODE=return_code                                           *  15900000
.*         Specifies the name of the variable where the              *  15950000
.*         macro is to store the return code associated with         *  16000000
.*         the result of the function invocation. Variable           *  16050000
.*         return_code is a fullword value but is optional.          *  16100000
.*         If RETCODE is not specified, the return code is           *  16150000
.*         in register 15. The RETCODE parameter may not be          *  16200000
.*         specified on an MF=L invocation.                          *  16250000
.*                                                                   *  16300000
.*     RSNCODE=reason_code                                           *  16350000
.*         Specifies the name of the variable where the              *  16400000
.*         macro is to store the reason code associated with         *  16450000
.*         the result of the function invocation. Variable           *  16500000
.*         reason_code is a fullword value but is optional.          *  16550000
.*         If RSNCODE is not specified, the return code is           *  16600000
.*         in register 0. The RSNCODE parameter may not be          *   16650000
.*         specified on an MF=L invocation.                          *  16700000
.*                                                                   *  16750000
.* ---------------------------------------------------------------   *  16800000
.*                                                                   *  16850000
.*   EXIT NORMAL:                                                    *  16900000
.*                                                                   *  16950000
.*     RETURN CODE: 0                                                *  17000000
.*                                                                   *  17050000
.*   EXIT ERRORS:                                                    *  17100000
.*                                                                   *  17150000
.*     RETURN CODE: 8                                                *  17200000
.*                                                                   *  17250000
.*       REASON CODE: NONE                                           *  17300000
.*        MESSAGE:                                                   *  17350000
.*                    KEYWORD "keyword" MUST HAVE EXACTLY n          *  17400000
.*                    ARGUMENT(S).                                   *  17450000
.*                                                                   *  17500000
.*       REASON CODE: NONE                                           *  17550000
.*        MESSAGE:                                                   *  17600000
.*                    KEYWORD "keyword" IS A REQUIRED KEYWORD.       *  17650000
.*                                                                   *  17700000
.*       REASON CODE: NONE                                           *  17750000
.*        MESSAGE:                                                   *  17800000
.*                    NO POSITIONAL ARGUMENTS ARE ALLOWED ON THIS    *  17850000
.*                    MACRO.                                         *  17900000
.*                                                                   *  17950000
.*       REASON CODE: NONE                                           *  18000000
.*        MESSAGE:                                                   *  18050000
.*                    KEYWORD "keyword" IS INVALID WHEN "keyword2"   *  18100000
.*                    IS SPECIFIED.                                  *  18150000
.*       REASON CODE: NONE                                           *  18200000
.*        MESSAGE:                                                   *  18250000
.*                    INVALID VALUE "value" SPECIFIED FOR KEYWORD    *  18300000
.*                    "keyword".                                     *  18350000
.*       REASON CODE: NONE                                           *  18400000
.*        MESSAGE:                                                   *  18450000
.*                    KEYWORD "keyword" MUST HAVE NO MORE THAN n     *  18500000
.*                    ARGUMENT(S).                                   *  18550000
.*                                                                   *  18600000
.*                                                                   *  18650000
.*   EXTERNAL REFERENCES:                                            *  18700000
.*                                                                   *  18750000
.*     MACROS:                                                       *  18800000
.*       NONE                                                        *  18850000
.*                                                                   *  18900000
.*   CHANGE ACTIVITY:                                                *  18950000
.* $01=OW02551,HDZ11B0,940510,SJPLGIN: CONVERT TO BILINGUAL      @01A*  19000000
.*********************************************************************  19050000
         MACRO                                                          19100000
&LABN IEWLCNVT &MF=,                                                   X19150000
               &FUNC=,                                                 X19200000
               &RETCODE=,                                              X19250000
               &RSNCODE=,                                              X19300000
               &FLAGS=,                                                X19350000
               &PDS2INDC=,                                             X19400000
               &PMAR=,                                                 X19450000
               &PMARA=,                                                X19500000
               &PNAME=,                                                X19550000
               &AMODEREG=,                                             X19600000
               &OUTLEN=                                                 19650000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  19700000
.* INVOKE IEWLCNV DSECTS -                                              19750000
.* IEWLCNV CODE WILL PREVENT MULTIPLE DSECT INVOCATIONS                 19800000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  19850000
         GBLC  &CNVCSECT               IF SET TO YES, IEWLCNV WILL      19900000
.*                                     ECHO THE PREVIOUS CSECT NAME     19950000
&CNVCSECT SETC 'YES'                                                    20000000
         IEWLCNV                                                        20050000
&CNVCSECT SETC ''                                                       20100000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  20150000
.* SETUP VARIABLES USED THROUGHOUT MACRO                                20200000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  20250000
         LCLA  &I                      LOOP INDEX                       20300000
         LCLC  &FAIL                   EXIT MACRO IF FAIL FLAG SET      20350000
         LCLC  &INVOC                  INVOC=YES IF MF=S OR MF=E        20400000
         LCLC  &COMPLET                COMPLETE/NOCHECK KEYWORD FLAG    20450000
&FAIL    SETC  'NO'                    INIT FAIL FLAG AS NO             20500000
&INVOC   SETC  'YES'                   INVOKE IEWLCNVX                  20550000
&COMPLET SETC  'YES'                   DEFAULT, REQUIRE PARMS CHECKED   20600000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  20650000
.* CHECK FOR POSITIONAL ARGUMENTS                                       20700000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  20750000
         AIF   (N'&SYSLIST EQ 0).NOPOS ANY NON-KEYWORD ARGUMENTS ?      20800000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            20850000
         MNOTE 8,'NO POSITIONAL ARGUMENTS ARE ALLOWED ON THIS MACRO.'   20900000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  20950000
.* VARIABLES USED FOR KEYWORD MF CHECKING                               21000000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  21050000
.NOPOS   LCLC  &MF1                FIRST MF PARAMETER                   21100000
         LCLA  &MFARGS             NUMBER OF MF ARGUMENTS SPECIFIED     21150000
         LCLC  &MF2E               MF=E 2ND PARAM MF=(E,X               21200000
         LCLC  &MF2E1              MF=E SECOND PAREN, MF=(E,(           21250000
&MF1     SETC  '&MF(1)'            GET MF IF SPECIFIED                  21300000
         AIF   ('&MF1' NE '').MFSET                                     21350000
&MF1     SETC  'S'                     DEFAULT TO 'S' IF NOT SPECIFIED  21400000
&MFARGS  SETA  1                   NUMBER OF MF PARAMETERS              21450000
         AGO   .CHKMF                                                   21500000
.MFSET   ANOP                                                           21550000
&MFARGS  SETA  N'&MF               NUMBER OF MF PARAMETERS              21600000
.* CHECK MF KEYWORD, DEFAULTS TO MF=S                                   21650000
.CHKMF   AIF   ('&MF1' EQ 'S').MFS,    GO CHECK MF=S                   X21700000
               ('&MF1' EQ 'L').MFL,    GO CHECK MF=L                   X21750000
               ('&MF1' EQ 'E').MFE     GO CHECK MF=E                    21800000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  21850000
.* MF=?   INVALID MF VALUE SPECIFIED                                    21900000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  21950000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            22000000
         MNOTE 8,'KEYWORD "MF" MUST BE "S", "L", "E", OR OMITTED.  VALUX22050000
               E "&MF1" IS INVALID. THIS VALUE WILL BE IGNORED FOR SYNTX22100000
               AX CHECKING.'                                            22150000
&MF1     SETC  'S'                     USE MF=S TO DO SYNTAX CHECKING   22200000
         AGO   .ENDMF                  DONE MF KEYWORD CHECKING         22250000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  22300000
.* MF=S   WAS SPECIFIED OR ALLOWED TO DEFAULT                           22350000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  22400000
.MFS     ANOP                                                           22450000
         AIF   (&MFARGS EQ 1).MFSOK                                     22500000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            22550000
         MNOTE 8,'KEYWORD "MF=S" MUST HAVE EXACTLY 1 ARGUMENT WHEN SPECX22600000
               IFIED. "&MFARGS" ARGUMENTS WERE SPECIFIED.'              22650000
.MFSOK   AGO   .ENDMF                  DONE MF KEYWORD CHECKING         22700000
.*                                                                      22750000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  22800000
.* MF=L  WAS SPECIFIED                                                  22850000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  22900000
.MFL     ANOP                                                           22950000
&COMPLET SETC  'NO'                    PARAMETER CHECKING NOT REQUIRED  23000000
&INVOC   SETC  'NO'                 MF=L SO DON'T INVOC                 23050000
         AIF   (&MFARGS EQ 1).ENDMF                                     23100000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            23150000
         MNOTE 8,'KEYWORD "MF=L" MUST HAVE EXACTLY 1 ARGUMENT,  "&MFARGX23200000
               S" ARGUMENT(S) WERE SPECIFIED.'                          23250000
         AGO   .ENDMF                  DONE MF KEYWORD CHECKING         23300000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  23350000
.* MF=(E,...  WAS SPECIFIED                                             23400000
.* CHECK FOR VALID PARAMETERS                                           23450000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  23500000
.MFE     AIF   ((&MFARGS LE 3) AND (&MFARGS GE 2)).CHKCOM               23550000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            23600000
         MNOTE 8,'KEYWORD "MF=E" MUST HAVE 2 OR 3 ARGUMENTS, "&MFARGS" X23650000
               ARGUMENT(S) WERE SPECIFIED.'                             23700000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  23750000
.* THIRD MF=(E,... PARAMETER MAY BE :                                   23800000
.* "COMPLETE"      - CHECK ALL REQUIRED PARAMETERS SPECIFIED            23850000
.* "NOCHECK"       - SKIP REQUIRED PARAM CHECKING,                      23900000
.*                   MF=L MAY HAVE SPECIFIED REQUIRED PARAMETERS        23950000
.*  NOT SPECIFIED  - DEFAULTS TO "COMPLETE"                             24000000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  24050000
.CHKCOM  AIF   (('&MF(3)' EQ '') OR ('&MF(3)' EQ 'COMPLETE')).COMOK     24100000
         AIF   ('&MF(3)' EQ 'NOCHECK').SETCHK                           24150000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            24200000
         MNOTE 8,'INVALID VALUE "&MF(3)" SPECIFIED FOR THE THIRD ARGUMEX24250000
                NT OF KEYWORD KEYWORD "MF=(E,..". VALID VALUES ARE "COMX24300000
                PLETE", "NOCHECK" OR DEFAULT TO "COMPLETE". NO FURTHER X24350000
                KEYWORD CHECKING IS DONE.'                              24400000
         AGO   .ENDMAC                                                  24450000
.SETCHK  ANOP                      NOCHECK SPECIFIED                    24500000
&COMPLET SETC  'NO'                DON'T DO REQUIRED PARM CHECKING      24550000
.COMOK   ANOP                      COMPLETE SPECIFIED OR DEFAULTED TO   24600000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  24650000
.* SECOND MF=(E,... PARAMETER MAY BE EITHER                             24700000
.* "(1-12) PLIST ADDRESS REGISTER                                       24750000
.* "label"    VARIABLE CONTAINING ADDRESS OF PLIST OR LABEL FROM MF=L   24800000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  24850000
&MF2E    SETC  '&MF(2)'                                                 24900000
         AIF   ('&MF2E' NE '').MF2EOK                                   24950000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            25000000
         MNOTE 8,'THE SECOND ARGUMENT OF KEYWORD "MF=(E,..." WAS NOT SPX25050000
                ECIFIED, IT IS REQUIRED.'                               25100000
         AGO   .ENDMF                                                   25150000
.MF2EOK  ANOP                                                           25200000
&MF2E1   SETC  '&MF(2)'(1,1)      GET FIRST CHARACTER FOR PAREN CHECK   25250000
.* CHECK 2ND MF=E ARGUMENT - {(1)|(reg)|label}                          25300000
         AIF   ('&MF2E' NE '(1)').MFE2CHK                               25350000
&LABN    DC    0H'0'                                                    25400000
         AGO   .ENDMFE             REG1 ALREADY SETUP                   25450000
.*       IS = (reg)  ?                                                  25500000
.MFE2CHK AIF   ('&MF2E1' NE '(').GENLA                                  25550000
.*       REMOVE PARENS WHEN DO LR                                       25600000
&LABN    LR    1,&MF(2,1)                                               25650000
         AGO   .ENDMFE             MF CHECKING DONE                     25700000
.*       ELSE IS VARIABLE/LABEL                                         25750000
.GENLA   ANOP                                                           25800000
&LABN    LA    1,&MF2E                                                  25850000
.ENDMFE  AIF   ('&COMPLET' NE 'YES').ENDMF                              25900000
.*                                                                      25950000
.*  ZERO PLIST EXCEPT FOR LCNV_HEADER                                   26000000
.*                                                                      26050000
         XC   LCNV_OUTLEN-LCNV+8(LCNV_LEN_LIST,1),LCNV_OUTLEN-LCNV+8(1) 26100000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  26150000
.ENDMF   ANOP                      MF CHECKING DONE                     26200000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  26250000
.* CREATE STATIC VARIABLES FOR USE AS ARRAY INDICES,                    26300000
.* ONE FOR EVERY ALLOWED PARAMETER                                      26350000
.* ORDER MUST BE THE ORDER IN WHICH PARAMETERS EXIST IN THE IEWLCNV     26400000
.* MAPPING MACRO (IEWLCNV). ALL ARRAYS AND CHARACTER STRINGS USED       26450000
.* WILL USE THIS SAME ORDER.                                            26500000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  26550000
.*                                                                      26600000
&IOUTLEN   SETA  1            KEYWORD PLIST VALUE                       26650000
&IPMAR     SETA  2            KEYWORD PLIST VALUE                       26700000
&IFLAGS    SETA  3            KEYWORD PLIST VALUE                       26750000
&IPDS2INDC SETA  4            KEYWORD PLIST VALUE                       26800000
&IPMARA    SETA  5            KEYWORD PLIST VALUE                       26850000
&IPNAME    SETA  6            KEYWORD PLIST VALUE                       26900000
&IFUNC     SETA  7            KEYWORD PLIST VALUE                       26950000
.*         SETA  8            RESERVED PLIST VALUE                      27000000
&IRETCODE  SETA  9            NON-PLIST KEYWORD                         27050000
&IRSNCODE  SETA 10            NON-PLIST KEYWORD                         27100000
&IMAX1     SETA 10            FOR LOOP1                                 27150000
&IMAX2     SETA  8            FOR LOOP2 & LOOP3                         27200000
.*                                                                      27250000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  27300000
.*  SET &PARMNAM ARRAY ELEMENTS TO EQUAL KEYWORD NAME                   27350000
.*  TO BE USED MAINLY IN MNOTE ERROR MESSAGES FOR MSG CLARITY           27400000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  27450000
.*                                                                      27500000
         LCLC  &PARMNAM(10)                                             27550000
.*                                                                      27600000
&PARMNAM(&IOUTLEN)   SETC    '"OUTLEN"'                                 27650000
&PARMNAM(&IPMAR)     SETC    '"PMAR"'                                   27700000
&PARMNAM(&IFLAGS)    SETC    '"FLAGS"'                                  27750000
&PARMNAM(&IPDS2INDC) SETC    '"PDS2INDC"'                               27800000
&PARMNAM(&IPMARA)    SETC    '"PMARA"'                                  27850000
&PARMNAM(&IPNAME)    SETC    '"PNAME"'                                  27900000
&PARMNAM(&IFUNC)     SETC    '"FUNC"'                                   27950000
&PARMNAM(&IRETCODE)  SETC    '"RETCODE"'                                28000000
&PARMNAM(&IRSNCODE)  SETC    '"RSNCODE"'                                28050000
.*                                                                      28100000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  28150000
.*  SET &ARGVAL ARRAY ELEMENTS TO VALUE OF EACH ARGUMENT IF SPECIFIED   28200000
.*  IF THE ARGUMENT WAS SPECIFIED IN PARENS, THESE WILL BE RETAINED     28250000
.*  IN THE &ARGVAL ELEMENT. PARENS DENOTE REGISTERS.                    28300000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  28350000
.*                                                                      28400000
         LCLC  &ARGVAL(10)                                              28450000
.*                                                                      28500000
&ARGVAL(&IOUTLEN)   SETC    '&OUTLEN'                                   28550000
&ARGVAL(&IPMAR)     SETC    '&PMAR'                                     28600000
&ARGVAL(&IFLAGS)    SETC    '&FLAGS'                                    28650000
&ARGVAL(&IPDS2INDC) SETC    '&PDS2INDC'                                 28700000
&ARGVAL(&IPMARA)    SETC    '&PMARA'                                    28750000
&ARGVAL(&IPNAME)    SETC    '&PNAME'                                    28800000
&ARGVAL(&IFUNC)     SETC    'LDR_FUNC_&FUNC'                            28850000
&ARGVAL(&IRETCODE)  SETC    '&RETCODE'                                  28900000
&ARGVAL(&IRSNCODE)  SETC    '&RSNCODE'                                  28950000
.*                                                                      29000000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  29050000
.*  SET &ARGNUM ARRAY ELEMENTS TO THE NUMBER OF PARAMETERS              29100000
.*  SPECIFIED FOR EACH KEYWORD. EXPECTED VALUES ARE 1.                  29150000
.*  USED IN LOOP1 TO DETERMINE IF CORRECT NUMBER OF PARAMETERS          29200000
.*  WERE SPECIFIED.                                                     29250000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  29300000
.*                                                                      29350000
         LCLA  &ARGNUM(10)                                              29400000
.*                                                                      29450000
&ARGNUM(&IOUTLEN)   SETA N'&OUTLEN                                      29500000
&ARGNUM(&IPMAR)     SETA N'&PMAR                                        29550000
&ARGNUM(&IFLAGS)    SETA N'&FLAGS                                       29600000
&ARGNUM(&IPDS2INDC) SETA N'&PDS2INDC                                    29650000
&ARGNUM(&IPMARA)    SETA N'&PMARA                                       29700000
&ARGNUM(&IPNAME)    SETA N'&PNAME                                       29750000
&ARGNUM(&IFUNC)     SETA N'&FUNC                                        29800000
&ARGNUM(&IRETCODE)  SETA N'&RETCODE                                     29850000
&ARGNUM(&IRSNCODE)  SETA N'&RSNCODE                                     29900000
.*                                                                      29950000
.*                                                                      30000000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  30050000
.*  SET &OFFSET ARRAY ELEMENTS TO PLIST LABEL VALUE                     30100000
.*  USED IN LOOP3 FOR ST, STC, OI, NI AND MVI INSTRUCTIONS.             30150000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  30200000
.*                                                                      30250000
         LCLC  &OFFSET(10)                                              30300000
.*                                                                      30350000
&OFFSET(&IOUTLEN)   SETC 'LCNV_OUTLEN'                                  30400000
&OFFSET(&IPMAR)     SETC 'LCNV_PMAR_PTR'                                30450000
&OFFSET(&IFLAGS)    SETC 'LCNV_FLAGS_PTR'                               30500000
&OFFSET(&IPDS2INDC) SETC 'LCNV_PDS2INDC_PTR'                            30550000
&OFFSET(&IPMARA)    SETC 'LCNV_PMARA_PTR'                               30600000
&OFFSET(&IPNAME)    SETC 'LCNV_PNAME_PTR'                               30650000
&OFFSET(&IFUNC)     SETC 'LCNV_FUNC'                                    30700000
.*                                                                      30750000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  30800000
.* CREATE STATIC ARRAY TO CONTAIN PLIST FIELD COMMENTS                  30850000
.* ATTEMPTED TO MOVE COMMENTS TO RIGHT COLUMN AREA AS MUCH AS POSSIBLE  30900000
.* DEPENDING ON CODE GENERATED FOR EACH COMMENT. COMMENTS WILL BE       30950000
.* RAGGED SINCE NO CODE WAS ADDED TO COUNT CHARACTERS ON EACH           31000000
.* LINE OF GENNED CODE.                                                 31050000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  31100000
         LCLC  &FIELDNAM(10)                                            31150000
.*                                                                      31200000
&FIELDNAM(&IOUTLEN)   SETC '  Output length'                            31250000
&FIELDNAM(&IPMAR)     SETC '  PMAR address'                             31300000
&FIELDNAM(&IFLAGS)    SETC '  FLAGS address'                            31350000
&FIELDNAM(&IPDS2INDC) SETC '  PDS dir entry indicator byte adr'         31400000
&FIELDNAM(&IPMARA)    SETC '  PMARA address'                            31450000
&FIELDNAM(&IPNAME)    SETC '  Primary name address'                     31500000
&FIELDNAM(&IFUNC)     SETC '  Function code'                            31550000
&FIELDNAM(8)          SETC '  Reserved'                                 31600000
.*                                                                      31650000
.*cc                                                                    31700000
.* SETUP UNIQUE CHARACTER STRINGS FOR FUNCTION SPECIFIED                31750000
.*                                                                      31800000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  31850000
.* &FS- THE FUNCTION CHARACTER STRING FOR THE FUNCTION                  31900000
.*      SPECIFIED (PMAR_TO_PDSDE, PDSDE_TO_PMAR)                        31950000
.*                                                                      32000000
.*      &FS WILL BE COMPRISED OF THE FOLLOWING CHARACTERS :             32050000
.*                                                                      32100000
.*         'R' - DENOTES A  REQUIRED KEYWORD FOR THIS FUNCTION          32150000
.*         'O' - DENOTES AN OPTIONAL KEYWORD FOR THIS FUNCTION          32200000
.*         'X' - DENOTES AN INVALID  KEYWORD FOR THIS FUNCTION          32250000
.*         'I' - A NON-KEYWORD PLIST FIELD                              32300000
.*               NOT USED FOR FUNC CHECKING                             32350000
.*                                                                      32400000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  32450000
.*  HANDLE FUNC KEYWORD                                                 32500000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  32550000
.*  IF ANY KEYWORDS WERE SPECIFIED THEN FUNC KEYWORD IS REQUIRED        32600000
.*  SO THAT KEYWORD VALIDITY CHECKING CAN BE DONE                       32650000
.*                                                                      32700000
         AIF   ((N'&FUNC EQ 1) OR ('&FUNC' EQ '')).CHKFUNC              32750000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            32800000
         MNOTE 8,'ONLY ONE VALUE MAY BE SPECIFED FOR REQUIRED KEYWORD "X32850000
               FUNC".'                                                  32900000
.CHKFUNC ANOP                                                           32950000
.*                                                                      33000000
         LCLC  &FS                     FUNCTION STRING                  33050000
         LCLC  &FUNCODE                CODE FOR FUNCTION SPECIFIED      33100000
         AIF   ('&FUNC' EQ               '').NOFUNC,                   X33150000
               ('&FUNC' EQ  'PMAR_TO_PDSDE').PMARPDSDE,                X33200000
               ('&FUNC' EQ  'PDSDE_TO_PMAR').PDSDEPMAR                  33250000
.*       OTHERWISE INVALID FUNCTION SPECIFIED                           33300000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            33350000
         MNOTE 8,'INVALID VALUE "&FUNC" SPECIFIED FOR KEYWORD FUNC,    X33400000
               NO FURTHER PARAMETER CHECKING IS DONE.'                  33450000
         AGO   .ENDMAC                                                  33500000
.*                                                                      33550000
.*                                                                      33600000
.*                                                                      33650000
.*                                                                      33700000
.NOFUNC  ANOP                                                           33750000
.*      FOLLOWING ARE PARAMETER NAMES, READ DOWN (COLUMNS)              33800000
.*                                                                      33850000
.*        OPFPPPF RR                                                    33900000
.*        UMLDMNU ES                                                    33950000
.*        TAASAAN TN                                                    34000000
.*        LRG2RMC CC                                                    34050000
.*        E SIAE  OO                                                    34100000
.*        N  N    DD                                                    34150000
.*           D    EE                                                    34200000
.*           C                                                          34250000
.*                                                                      34300000
&FS SETC 'OOOOOOIIOO'               No function mask                    34350000
         AGO   .ENDFUNC                                                 34400000
.*                                                                      34450000
.PMARPDSDE ANOP                                                         34500000
.*                                                                      34550000
.* PMAR_TO_PDSDE - Convert PMAR to a PDSDE                              34600000
.*                                                                      34650000
.* SETUP FUNC=PMAR_TO_PDSDE CHAR STRING OF ALLOWED PARAMETERS           34700000
.*                                                                      34750000
.*      FOLLOWING ARE PARAMETER NAMES, READ DOWN (COLUMNS)              34800000
.*                                                                      34850000
.*        OPFPPPF RR                                                    34900000
.*        UMLDMNU ES                                                    34950000
.*        TAASAAN TN                                                    35000000
.*        LRG2RMC CC                                                    35050000
.*        E SIAE  OO                                                    35100000
.*        N  N    DD                                                    35150000
.*           D    EE                                                    35200000
.*           C                                                          35250000
.*                                                                      35300000
&FS SETC 'ORRROORIOO'               PMAR_TO_PDSDE function mask         35350000
.*                                                                      35400000
&FUNCODE SETC 'LDR_FUNC_PMAR_TO_PDSDE'                                  35450000
         AGO   .ENDFUNC                                                 35500000
.*                                                                      35550000
.*                                                                      35600000
.PDSDEPMAR ANOP                                                         35650000
.*                                                                      35700000
.* PDSDE_TO_PMAR - Convert record format load module PDSDE to PMAR      35750000
.*                                                                      35800000
.* SETUP FUNC=PDSDE_TO_PMAR CHAR STRING OF ALLOWED PARAMETERS           35850000
.*                                                                      35900000
.*      FOLLOWING ARE PARAMETER NAMES, READ DOWN (COLUMNS)              35950000
.*                                                                      36000000
.*        OPFPPPF RR                                                    36050000
.*        UMLDMNU ES                                                    36100000
.*        TAASAAN TN                                                    36150000
.*        LRG2RMC CC                                                    36200000
.*        E SIAE  OO                                                    36250000
.*        N  N    DD                                                    36300000
.*           D    EE                                                    36350000
.*           C                                                          36400000
.*                                                                      36450000
&FS SETC 'ORXRXRRIOO'               PDSDE_TO_PMAR function mask         36500000
.*                                                                      36550000
&FUNCODE SETC 'LDR_FUNC_PDSDE_TO_PMAR'                                  36600000
         AGO   .ENDFUNC                                                 36650000
.*                                                                      36700000
.*                                                                      36750000
.ENDFUNC ANOP                                                           36800000
.*                                                                      36850000
.*                                                                      36900000
.*                                                                      36950000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  37000000
.*cc                                                                    37050000
.* &ARGTYP - ARGUMENT TYPE ARRAY, SETUP DURING LOOP1                    37100000
.*                                                                      37150000
.*       ELEMENTS SET TO ONE OF THE FOLLOWING CHARACTERS.               37200000
.*       CHARACTERS DENOTE THE TYPE OF ARGUMENT SUPPLIED.               37250000
.*                                                                      37300000
.*                                                                      37350000
.*                                                                      37400000
.*  &ARGTYP WILL BE COMPRISED OF :                                      37450000
.*                                                                      37500000
.*    'R' - KEYWORD ARGUMENT WAS SPECIFIED IN A REGISTER                37550000
.*          VALID FOR ALL ARGUMENT TYPES IF MF=L IS NOT SPECIFED        37600000
.*                                                                      37650000
.*    'A' - RX TYPE OF ARGUMENT, IF REGISTER NOTATION NOT USED          37700000
.*                                                                      37750000
.*  NOTE :                                                              37800000
.*  IF SYMBOLS ARE USED WHERE RX-TYPE ARGUMENTS ARE EXPECTED,           37850000
.*  NO MACRO ERROR CHECKING IS DONE, ASSEMBLY ERRORS WILL OCCUR.        37900000
.*                                                                      37950000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  38000000
         LCLC  &ARGTYP(10)                 FIELD TYPE STRING            38050000
.*                                                                      38100000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  38150000
.*                                                                      38200000
.*  LOOP 1  - "PRESENCE AND ERROR MESSAGE LOOP"                         38250000
.*                                                                      38300000
.*  - CHECK ALL SPECIFIED KEYWORDS                                      38350000
.*  - DONE FOR MF = L, S, OR E                                          38400000
.*  - HANDLES FUNCTION STRING ELEMENTS &FS = 'R','O' OR 'X'             38450000
.*                                                                      38500000
.*  - SET &ARGTYP ARRAY ELEMENTS AS DESCRIBED UNDER &ARGTYP DECLARATION 38550000
.*  - USES &FS TO DETERMINE IF SHOULD ISSUE MESSAGES :                  38600000
.*       - KEYWORD REQUIRED MSG IF COMPLET = YES                        38650000
.*       - KEYWORD INVALID  MSG                                         38700000
.*       - REGISTER INVALID FOR MF =L                                   38750000
.*       - REGISTER INVALID FOR THIS KEYWORD                            38800000
.*       - WRONG NUMBER OF PARAMETERS FOR THIS KEYWORD                  38850000
.*  - USES &FIELD TO DETERMINE IF SHOULD ISSUE MESSAGE :                38900000
.*       - SELF DEFINING TERM INVALID FOR ADDRESS TYPE OF KEYWORD       38950000
.*  - SET &FAIL FLAG IF ANY KEYWORD ERRORS                              39000000
.*  - SET &ANYKEYS IF ANY KEYWORDS WERE SPECIFIED, VALID OR INVALID     39050000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  39100000
.*                                                                      39150000
.LOOP1   ANOP                                                           39200000
         LCLC  &ANYKEYS          SET TO YES IF ANY KEYWORDS SPECIFIED   39250000
         LCLA  &ARGLEN           LENGTH OF EACH KEYWORD ARGUMENT        39300000
&ANYKEYS SETC  'NO'                                                     39350000
.*                                                                      39400000
&I       SETA  0                                                        39450000
.RELOOP1 ANOP                                                           39500000
&I       SETA  &I+1                                                     39550000
         AIF   (&I GT &IMAX1).ENDLOP1             EXIT LOOP 1           39600000
.* NO KEYWORD EXISTS FOR 'I'                                            39650000
         AIF   ('&FS'(&I,1) EQ 'I').RELOOP1                             39700000
.* DETERMINE IF KEYWORD SPECIFIED                                       39750000
         AIF   ('&ARGVAL(&I)' NE '').CHKINVA                            39800000
.* KEYWORD NOT REQUIRED AND COMPLET IS OFF  DONE TRY NEXT               39850000
         AIF   ('&COMPLET' NE 'YES').RELOOP1                            39900000
.* COMPLET = YES, KEYWORD NOT SPECIFIED - IS KEYWORD REQUIRED ?         39950000
         AIF   ('&FS'(&I,1) NE 'R').RELOOP1                             40000000
.* COMPLET = YES  SO ISSUE MESSAGE                                      40050000
&FAIL    SETC  'YES'                                                    40100000
         MNOTE 8,'&PARMNAM(&I) IS REQUIRED WHEN "FUNC=&FUNC" IS SPECIFIX40150000
               ED.'                                                     40200000
         AGO   .RELOOP1                                                 40250000
.*                                                                      40300000
.CHKINVA ANOP                                                           40350000
.* REMEMBER KEYWORD WAS SPECIFIED                                       40400000
&ANYKEYS SETC 'YES'                                                     40450000
.* CHECK IF KEYWORD VALID FOR FUNCTION SPECIFIED                        40500000
         AIF   ('&FS'(&I,1)  NE 'X' ).CHKNUM                            40550000
&FAIL    SETC  'YES'                                                    40600000
         MNOTE 8,'&PARMNAM(&I) IS INVALID FOR FUNC="&FUNC".'            40650000
         AGO   .RELOOP1                                                 40700000
.*                                                                      40750000
.* CHECK NUMBER OF KEYWORD ARGUMENTS SPECIFIED, USE &ARGNUM TO TEST     40800000
.CHKNUM  ANOP                                                           40850000
         AIF ('&ARGNUM(&I)' EQ '1').CHKREG                              40900000
&FAIL    SETC  'YES'                                                    40950000
         MNOTE 8,'1 VALUE MUST BE SPECIFIED FOR KEYWORD &PARMNAM(&I), &X41000000
               ARGNUM(&I) VALUE(S) WERE SPECIFIED.'                     41050000
         AGO   .RELOOP1                                                 41100000
.*                                                                      41150000
.* CHECK FOR REGISTER ARGUMENT                                          41200000
.* ARGUMENT IS IN A REGISTER IF FIRST CHAR IS '(' AND LAST              41250000
.*                                                    CHAR IS ')'       41300000
.CHKREG  ANOP                                                           41350000
&ARGLEN  SETA  K'&ARGVAL(&I)                                            41400000
         AIF   ('&ARGVAL(&I)'(1,1) NE '(').SETRX                        41450000
         AIF   ('&ARGVAL(&I)'(&ARGLEN,1) NE ')').SETRX                  41500000
         AIF   ('&MF1' NE 'L').SETR                                     41550000
&FAIL    SETC  'YES'                                                    41600000
         MNOTE 8,'REGISTER FORMAT IS NOT ALLOWED FOR MF=L FORMAT, REGISX41650000
               TER FORMAT WAS USED FOR KEYWORD &PARMNAM(&I).'           41700000
         AGO   .RELOOP1                                                 41750000
.*    SET ARGUMENT TYPE TO 'R' FOR REGISTER                             41800000
.SETR    ANOP                                                           41850000
&ARGTYP(&I) SETC  'R'                                                   41900000
         AGO   .RELOOP1                                                 41950000
.*                                                                      42000000
.* ASSUME RX TYPE OF ARGUMENT                                           42050000
.*                                                                      42100000
.SETRX   ANOP                                                           42150000
&ARGTYP(&I) SETC  'X'                                                   42200000
         AGO   .RELOOP1                                                 42250000
.*                                                                      42300000
.ENDLOP1 ANOP                                                           42350000
.*cc                                                                    42400000
.*                                                                      42450000
.*cc                                                                    42500000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  42550000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  42600000
.*                                                                      42650000
.* RETCODE / RSNCODE KEYWORD VALIDITY CHECKING                          42700000
.*                                                                      42750000
.* IF MF=L THEN RETCODE AND RSNCODE CAN NOT BE SPECIFIED.               42800000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  42850000
.*                                                                      42900000
.CHKRCS  LCLA  &RCNUM                                                   42950000
         AIF   (('&RETCODE' EQ '') AND ('&RSNCODE' EQ '')).ENDRCS       43000000
&ANYKEYS SETC  'YES'                                                    43050000
         AIF   ('&MF1' NE 'L').CHKRET                                   43100000
&FAIL    SETC  'YES'                                                    43150000
         MNOTE 8,'OPTIONAL KEYWORDS "RETCODE" AND/OR "RSNCODE"  CANNOT X43200000
               BE SPECIFIED FOR "MF=L", IF DESIRED, SPECIFY ON MF=E.'   43250000
         AGO   .ENDRCS                                                  43300000
.CHKRET  AIF   ('&RETCODE' EQ '').CHKRSN                                43350000
         AIF   (N'&RETCODE EQ 1).CHKRSN                                 43400000
&FAIL    SETC  'YES'                                                    43450000
&RCNUM   SETA  N'&RETCODE                                               43500000
         MNOTE 8,'EXACTLY ONE ARGUMENT ALLOWED FOR KEYWORD "RETCODE",  X43550000
               &RCNUM WERE SPECIFIFED.'                                 43600000
.CHKRSN  AIF   ('&RSNCODE' EQ '').ENDRCS                                43650000
         AIF   (N'&RSNCODE EQ 1).ENDRCS                                 43700000
&FAIL    SETC  'YES'                                                    43750000
&RCNUM   SETA  N'&RETCODE                                               43800000
         MNOTE 8,'EXACTLY ONE ARGUMENT ALLOWED FOR KEYWORD "RSNCODE",  X43850000
               &RCNUM WERE SPECIFIFED.'                                 43900000
.ENDRCS  ANOP                                                           43950000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  44000000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  44050000
.*                                                                      44100000
.* AMODEREG KEYWORD VALIDITY CHECKING                                   44150000
.*                                                                      44200000
.* IF MF=L THEN AMODEREG CAN NOT BE SPECIFIED.                          44250000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  44300000
.*                                                                      44350000
         AIF   ('&AMODEREG' EQ '').EAMODECK                             44400000
&ANYKEYS SETC  'YES'                                                    44450000
         AIF   ('&MF1' NE 'L').CKAMODE                                  44500000
&FAIL    SETC  'YES'                                                    44550000
         MNOTE 8,'OPTIONAL KEYWORD "AMODEREG" CANNOT BE SPECIFIED FOR "X44600000
               MF=L".'                                                  44650000
         AGO   .EAMODECK                                                44700000
.CKAMODE AIF   (N'&AMODEREG EQ 1).EAMODECK                              44750000
&FAIL    SETC  'YES'                                                    44800000
&I       SETA  N'&AMODEREG                                              44850000
         MNOTE 8,'EXACTLY ONE ARGUMENT ALLOWED FOR KEYWORD "AMODEREG", X44900000
               &I WERE SPECIFIFED.'                                     44950000
.EAMODECK ANOP                                                          45000000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  45050000
.*                                                                      45100000
.* IF MF=L THEN OUTLEN CAN NOT BE SPECIFIED.                            45150000
.*                                                                      45200000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  45250000
.*                                                                      45300000
         AIF   ('&OUTLEN' EQ '').EOUTLNCK                               45350000
&ANYKEYS SETC  'YES'                                                    45400000
         AIF   ('&MF1' NE 'L').EOUTLNCK                                 45450000
&FAIL    SETC  'YES'                                                    45500000
         MNOTE 8,'OPTIONAL KEYWORD "OUTLEN" CANNOT BE SEPCIFIED FOR "MFX45550000
               =L".'                                                    45600000
.EOUTLNCK ANOP                                                          45650000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  45700000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  45750000
.* ALLOW NO FUNCTION (&FUNC) TO BE CODED IF BOTH :                      45800000
.*   1.  &COMPLET = NO (MACRO FORMAT IS MF=L OR MF=E WITH NOCHECK)      45850000
.*   2.  NO OTHER KEYWORDS WERE SPECIFIED                               45900000
.*                                                                      45950000
.* ALREADY CHECKED #1 PRIOR TO LOOP1                                    46000000
.* NOW CHECK #2  (&ANYKEYS = NO AT END OF LOOP1)                        46050000
.*                                                                      46100000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  46150000
.*                                                                      46200000
         AIF   ('&FUNC' NE '').FUNCOK                                   46250000
.* IF MF=E AND NO KEYWORDS SPECIFIED, GO INVOC IEWLCNVT                 46300000
         AIF   (('&ANYKEYS' EQ 'NO') AND ('&MF1' EQ 'E')).CHKINVO       46350000
.* IF MF=L AND NO KEYWORDS SPECIFIED, CONTINUE, GEN PLIST               46400000
         AIF   (('&ANYKEYS' EQ 'NO') AND ('&MF1' EQ 'L')).FUNCOK        46450000
&FAIL    SETC  'YES'                                                    46500000
.*                                                                      46550000
         MNOTE 8,'THE "FUNC" KEYWORD IS REQUIRED WHEN OTHER KEYWORDS ARX46600000
               E SPECIFIED.'                                            46650000
         AGO   .ENDMAC                                                  46700000
.FUNCOK  ANOP                                                           46750000
.*                                                                      46800000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  46850000
.* IEWLCNVT MACRO KEYWORD VALIDITY CHECKING DONE.                       46900000
.* IF ERRORS EXIST EXIT. ELSE CONTINUE AND ALL OTHER ERROR              46950000
.* MESSAGES WILL BE FROM THE ASSEMBLER.                                 47000000
.*                                                                      47050000
         AIF  ('&FAIL' EQ 'YES').ENDMAC                                 47100000
.*                                                                      47150000
.*                                                                      47200000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  47250000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  47300000
.*cc                                                                    47350000
.*                                                                      47400000
.*  GEN BRANCH CODE FOR MF=S OR MF=E, GEN PLIST HEADER FOR MF=S OR MF=L 47450000
.*  GEN FUNC CODE                                                       47500000
.*                                                                      47550000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  47600000
.GEN     ANOP                  START GENERATING CODE                    47650000
.*                                                                      47700000
         AIF   ('&MF1' EQ 'E').GENEND     =S OR =L                      47750000
.* HANDLE MF = S                                                        47800000
.GENSL   CNOP  0,4                     FULL-WORD ALIGNMENT              47850000
         AIF   ('&MF1' EQ 'L').GENMFL                                   47900000
.* PRODUCE MF=S EXPANSION                                               47950000
&LABN    BAS   1,*+LCNV_LEN_IV+12      BRANCH AROUND PARAM LIST         48000000
         DC    A(&LABN+12+&OFFSET(&IFUNC)-LCNV)                         48050000
         DC    A(&LABN+12)                                              48100000
         AGO   .GENHEAD                                                 48150000
.GENMFL  ANOP                                                           48200000
.* PRODUCE MF=L EXPANSION                                               48250000
&LABN    DC    A(&LABN+8+&OFFSET(&IFUNC)-LCNV)                          48300000
         DC    A(&LABN+8)                                               48350000
.* PRODUCE EXPANSION COMMON TO MF=L AND MF=S                            48400000
.GENHEAD ANOP                                                           48450000
         DC    CL8'IEWLCNV '           PARAMETER LIST ID                48500000
         DC    AL4(LCNV_LEN_IV)        PARAMETER LIST LENGTH            48550000
         DC    AL1(LCNV_LEV_IV)        PARAMETER LIST LEVEL             48600000
         DC    XL3'0'                  RESERVED                         48650000
.GENEND  ANOP                                                           48700000
.*                                                                      48750000
.*                                                                      48800000
.*cc                                                                    48850000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  48900000
.*                                                                      48950000
.*  LOOP 2 - "BUILD INLINE PLIST LOOP"                                  49000000
.*                                                                      49050000
.*  -  DONE FOR MF=L OR MF=S                                            49100000
.*  -  ENTERED IF NO PREVIOUS KEYWORD ERRORS                            49150000
.*  -  ISSUE DC XLn'0' FOR KEYWORDS THAT DO NOT EXIST                   49200000
.*  -  ISSUE DC ASSEMBLER STATEMENT FOR KEYWORDS THAT EXIST AND         49250000
.*     ARE &ARGTYP (ARGUMENT TYPES SETUP IN LOOP1) OF :                 49300000
.*        'X' - RX TYPE, ASSUMED TO BE NON-EXTERNAL                     49350000
.*                                                                      49400000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  49450000
.*                                                                      49500000
         AIF   ('&MF1' EQ 'E').LOOP3     SKIP PLIST BUILD               49550000
&FILLER  SETC '            '        TO PUSH PLIST COMMENT TO RIGHT      49600000
&I       SETA  0                                                        49650000
.RELOOP2 ANOP                                                           49700000
&I       SETA  &I+1                                                     49750000
         AIF   ('&I' GT '&IMAX2').ENDLOP2       EXIT LOOP 2             49800000
.*                                                                      49850000
.*                                                                      49900000
.* HANDLE ARGUMENT TYPE OF RX ADDRESS 'X'                               49950000
.*                                                                      50000000
         AIF   ('&ARGTYP(&I)' NE 'X').DOREST                            50050000
.* IF HANDLING THE OUTLEN PARAMETER, SET LCNV_OUTLEN FIELD TO ZERO      50100000
         AIF   ('&I' EQ '&IOUTLEN').DOREST                              50150000
.*                                                                      50200000
         DC    A(&ARGVAL(&I))&FILLER.&FIELDNAM(&I)                      50250000
         AGO   .RELOOP2                                                 50300000
.*                                                                      50350000
.* ELSE ARGUMENT WAS NOT SPECIFIED OR IF WAS FOR MF=S &                 50400000
.* WILL BE HANDLED BY CODE GENNED IN LOOP3                              50450000
.*                                                                      50500000
.DOREST  DC    XL4'0'&FILLER.&FIELDNAM(&I)                              50550000
         AGO   .RELOOP2                                                 50600000
.*                                                                      50650000
.ENDLOP2 ANOP                                                           50700000
.*                                                                      50750000
.*cc                                                                    50800000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  50850000
.*                                                                      50900000
.*  LOOP 3 - "FILL IN PLIST LOOP"                                       50950000
.*                                                                      51000000
.*  -  FOR MF=E OR MF=S                                                 51050000
.*  -  HANDLE REMOTE PLIST (MF=E) AND IN-LINE PLIST (MF=S)              51100000
.*  -  ENTERED IF NO PREVIOUS KEYWORD ERRORS                            51150000
.*  -  MOVE KEYWORD ADDRESSES OR VALUES INTO PLIST                      51200000
.*                                                                      51250000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  51300000
.*                                                                      51350000
.LOOP3   AIF   ('&MF1' EQ 'L').ENDLOP3                                  51400000
&I       SETA  0                                                        51450000
.RELOOP3 ANOP                                                           51500000
&I       SETA  &I+1                                                     51550000
         AIF   ('&I' GT '&IMAX2').ENDLOP3       EXIT LOOP 3             51600000
.* DO NOT PROCESS OUTLEN PARAMETER, IT IS AN OUTPUT PARAMETER           51650000
         AIF   ('&I' EQ '&IOUTLEN').RELOOP3     SKIP OUTLEN PARM        51700000
.*                                                                      51750000
.* HANDLE ARGUMENT TYPE OF REGISTER 'R'                                 51800000
.*                                                                      51850000
.*                                                                      51900000
         AIF   ('&ARGTYP(&I)' NE 'R').DOX3                              51950000
         ST    &ARGVAL(&I),&OFFSET(&I)-LCNV+8(0,1)                      52000000
         AGO   .RELOOP3                                                 52050000
.*                                                                      52100000
.* HANDLE ARGUMENT TYPE OF RX ADDRESS                                   52150000
.*                                                                      52200000
.*                                                                      52250000
.DOX3    AIF   ('&ARGTYP(&I)' NE 'X').RELOOP3                           52300000
         AIF   ('&MF1' EQ 'S').RELOOP3                                  52350000
.*                                                                      52400000
.*                                                                      52450000
         LA    15,&ARGVAL(&I)                                           52500000
         ST    15,&OFFSET(&I)-LCNV+8(0,1)                               52550000
         AGO   .RELOOP3                                                 52600000
.ENDLOP3 ANOP                                                           52650000
.*                                                                      52700000
.*cc                                                                    52750000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  52800000
.* GEN CODE TO INVOKE IEWLCNVX MODULE.                                  52850000
.* ON RETURN FROM IEWLCNVX, RETURN RETCODE AND RSNCODE VALUES           52900000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  52950000
.*                                                                      53000000
.*                                                                      53050000
.CHKINVO ANOP                                                           53100000
.*                                                                      53150000
.*                                                                      53200000
         AIF   ('&INVOC' NE 'YES').DORCS                                53250000
.*                                                                      53300000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  53350000
.* GEN CODE TO BRANCH TO IEWLCNVT                                       53400000
.* ON RETURN FROM IEWLCNVT CHECK RETCODE AND RSNCODE KEYWORDS           53450000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  53500000
.* IF MF=E THEN SET POINTERS TO FUNCTION CODE AND TO IEWLCNV BLOCK.     53550000
.* FOR MF=S, THESE POINTERS WERE SET WHEN BUILDING THE PARM LIST.       53600000
         AIF   ('&MF1' EQ 'S').LOADCVT                                  53650000
         LA    15,LCNV_FUNC-LCNV+8(,1) ADDR OF FUNC CODE                53700000
         ST    15,0(,1)                POINT TO FUNC CODE               53750000
         LA    15,8(,1)                ADDR OF IEWLCNV BLOCK            53800000
         ST    15,4(,1)                POINT TO IEWLCNV BLOCK           53850000
.LOADCVT ANOP                                                           53900000
         L     15,16(,0)               CVT                              53950000
         L     15,1216(,15)            DFA                              54000000
         L     15,44(,15)                                               54050000
         L     15,40(,15)              CONVERT ROUTINE ENTRY POINT      54100000
.* IF AMODEREG WAS SPECIFIED, SET 31-BIT ADDRESSING MODE IN R15,        54150000
.* SAVE THE CURRENT ADDRESSING MODE, BASSM TO THE CONVERT ROUTINE       54200000
.* AND RESTORE THE ORIGINAL ADDRESSING MODE                             54250000
.* IF AMODEREG WAS NOT SPECIFIED, JUST BALR TO IEWLCNVX                 54300000
         AIF   ('&AMODEREG(1)' EQ '').BALR                              54350000
         CNOP  2,4                     HALF-WORD ALIGNMENT FOR DC       54400000
         O     15,*+14                 SET 31-BIT AMODE                 54450000
         LA    &AMODEREG(1),*+14       SAVE ADDR FOLLOWING BASSM 0,X    54500000
         BSM   &AMODEREG(1),0          SAVE AMODE AROUND CALL           54550000
         BASSM 14,15                   CALL CONVERT                     54600000
         BASSM 0,&AMODEREG(1)          RESTORE AMODE                    54650000
         DC    XL4'80000000'           AMODE FOR CONVERT ROUTINE        54700000
         AGO   .CALLDONE                                                54750000
.BALR    BALR  14,15                   CALL CONVERT ROUTINE             54800000
.CALLDONE ANOP                                                          54850000
.*                                                                      54900000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  54950000
.* GEN RET/RSNCODE CODE                                                 55000000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  55050000
.*                                                                      55100000
.DORCS   ANOP                                                           55150000
         AIF   ('&INVOC' NE 'YES').DOOUTLEN                             55200000
         AIF   (('&RETCODE' EQ '') AND ('&RSNCODE' EQ '')).DOOUTLEN     55250000
.*                                                                      55300000
.*   HANDLE RETCODE                                                     55350000
.*                                                                      55400000
         AIF   ('&RETCODE' EQ '').DORSN                                 55450000
.*              CHECK IF PARENS, SIGNIFING REGISTER                     55500000
         AIF   ('&RETCODE' EQ '&RETCODE(1)').DORTRX                     55550000
         ST    15,0(,&RETCODE(1))                                       55600000
         AGO   .DORSN                                                   55650000
.DORTRX  ST    15,&RETCODE                                              55700000
.*                                                                      55750000
.*     HANDLE REASON CODE                                               55800000
.*                                                                      55850000
.DORSN   AIF   ('&RSNCODE' EQ '').ENDMAC                                55900000
.*              CHECK IF PARENS, SIGNIFING REGISTER                     55950000
         AIF   ('&RSNCODE' EQ  '&RSNCODE(1)').DORSRX                    56000000
         ST    0,0(,&RSNCODE(1))                                        56050000
         AGO   .DOOUTLEN                                                56100000
.DORSRX  ST    0,&RSNCODE                                               56150000
.*                                                                      56200000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  56250000
.* GEN OUTLEN CODE                                                      56300000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  56350000
.*                                                                      56400000
.DOOUTLEN AIF  ('&INVOC' NE 'YES').ENDMAC                               56450000
.*                                                                      56500000
.*   OUTPUT OUTLEN VALUE                                                56550000
.*                                                                      56600000
         AIF   ('&OUTLEN' EQ '').ENDOUTLN                               56650000
.*   CHECK IF PARENS, SIGNIFING REGISTER                                56700000
         AIF   ('&OUTLEN'(1,1) NE '(').DOOUTLNX                         56750000
         MVC   0(4,&OUTLEN(1)),LCNV_OUTLEN-LCNV+8(1)                    56800000
         AGO  .ENDOUTLN                                                 56850000
.DOOUTLNX ANOP                                                          56900000
         MVC   &OUTLEN(1).(4),LCNV_OUTLEN-LCNV+8(1)                     56950000
.ENDOUTLN ANOP                                                          57000000
.*                                                                      57050000
.*                                                                      57100000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  57150000
.*                                                                      57200000
.ENDMAC  ANOP                                                           57250000
.*                                                                      57300000
         MEND                                                           57350000
**/                                                                     57400000
*/* INVOKE THE INTERNAL PL/AS VERSION OF THE MACRO                   */ 57450000
* %IEWLCNVT: MACRO                                                      57500000
*    KEYS(MF,FUNC,RETCODE,RSNCODE,FLAGS,PDS2INDC,PMAR,PMARA,PNAME,      57550000
*            OUTLEN);                                                   57600000
* ANS ('?' || MACLABEL || ' IEWLCNVP ' || MACLIST || MACKEYS || ';');   57650000
*                                                                       57700000
* %END IEWLCNVT;                                                        57750000
