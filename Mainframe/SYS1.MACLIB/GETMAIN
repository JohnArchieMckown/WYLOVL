*/********************************************************************/ 00000100
*/*                                                                  */ 00000200
*/*                                                                  */ 00000300
*/*01* MACRO-NAME = GETMAIN                                          */ 00000400
*/*                                                                  */ 00000500
*/*01* DESCRIPTIVE-NAME = Get main storage macro.                    */ 00000600
*/*                                                                  */ 00000700
*/*01* PROPRIETARY STATEMENT=                                        */ 00000800
*/***PROPRIETARY_STATEMENT********************************************/ 00000900
*/*                                                                  */ 00001300
*/*                                                                  */ 00001400
*/* LICENSED MATERIALS - PROPERTY OF IBM                             */ 00001500
*/* THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                      */ 00001600
*/* 5647-A01 (C) COPYRIGHT IBM CORP. 1981, 2000                      */ 00001700
*/*                                                                  */ 00001900
*/* STATUS= HBB7703                                                  */ 00002000
*/*                                                                  */ 00002100
*/***END_OF_PROPRIETARY_STATEMENT*************************************/ 00002200
*/*                                                                  */ 00002300
*/*01* EXTERNAL CLASSIFICATION: PI                                   */ 00002500
*/*01* END OF EXTERNAL CLASSIFICTION:                                */ 00002800
*/*                                                                  */ 00002900
*/*01* FUNCTION =                                                    */ 00003000
*/*    Interface to VSM used to obtain a block of virtual storage.   */ 00003100
*/*                                                                  */ 00003200
*/*01* MACROS-INVOKED = SYSSTATE                                     */ 00003300
*/*                                                                  */ 00003400
*/*01* EXTERNAL MACRO VARIABLES = SYSASCE,SYSAM64                    */ 00003500
*/*                                                                  */ 00003600
*/*01* CHANGE ACTIVITY =                                             */ 00003700
*/*                                                                  */ 00003800
*/*         $D1=DCR0127,HBB3310,861029,PDF5: Allow disabled,         */ 00003900
*/*             AR mode users of branch entry GETMAIN/FREEMAIN to    */ 00004000
*/*             get/free storage from the primary address space.     */ 00004100
*/*             (Access registers are ignored.)                  @D1A*/ 00004200
*/*                                                                  */ 00004300
*/*         $L1=PROD310,HBB3310,870603,PDF5: Copy-right changes  @L1A*/ 00004400
*/*      $L2=SUBOV  ,JBB4422,900928,PDDS: Support for new low        */ 00004500
*/*                  private, user-key subpools.                 @L2A*/ 00004600
*/*         OY30573 - Restore value in register for KEY parameter    */ 00004700
*/*      $P1=PKB0042,HBB4430,910719,PDF5: Refrain from generating       00004800
*                    superfluous instructions when the Key parameter    00004900
*                    is not specified.  The fix also prevents R1 from   00005000
*                    being corrupted on VRC/VRU GETMAIN.                00005100
*                                                                @P1A*/ 00005200
*/*      $01=OY46876,JBB4422,910821,PDF5: This APAR fixes the same      00005340
*                    error as PKB0042.  No code changes were needed to  00005400
*                    roll up this APAR because the PTM fixed the whole  00005500
*                    problem.                                           00005600
*                                                                    */ 00005740
*/*      $L3=TCSAU  ,HBB4430,911003,PDXB:  OWNER                     */ 00005800
*/*      $L4=POSIXVSM,HBB4430,911031,PD00BV: EXPLICIT GETMAIN Support*/ 00005900
*/*      $P2=PKB2327 ,HBB4430,920429,PD00XB: Fix &RL check           */ 00006000
*/*      $P3=PKB2328 ,HBB4430,920429,PD00XB: Fix MNOTEs              */ 00006100
*/*      $L5=PR522   ,JBB5522,941201,PD00XB: TCBADDR, ASCBADDR       */ 00006200
*/*      $D2=DVT0002 ,HBB6606,980119,PD00H6: CHECKZERO               */ 00006300
*/*      $L6=64BITVSM,HBB7703,980101,PD00XB: 64,CONTBDY,STARTBDY     */ 00006400
*/*      $L7=64BITVSM HBB7703 980101 PD00XB: StartBdy/ContBdy        */ 00006500
*/*      $02=OW45896  HBB7703 000817 PD00XB: ARCHLVL=1               */ 00006550
*/*      $03=OW49681  HBB7703 011026 PD00OQ: Changed *GNAME.VMN to   */ 00006620
*/*                                                  &GNAME.VMN      */ 00006640
*/********************************************************************/ 00006700
*/*                                                              @D1A*/ 00006800
* %/*                                                                   00006900
         MACRO                                                          00007000
&NAME    GETMAIN &MODE,&LV=,&LA=,&A=,&SP=,&MF=I,&HIARCHY=,&BNDRY=,     *00007100
               &KEY=,&BRANCH=,&RELATED=,&LOC=,&OWNER=,&INADDR=,        *00007200
               &CHECKZERO=,&CONTBDY=,&STARTBDY=                    @L7C 00007300
.******************************************************************     00007400
.* Parameters                                                           00007500
.******************************************************************     00007600
.* &MODE    - The mode (e.g., R, RC, RU ...).  Note that 'P' mode       00007700
.*            is for VSM internal use only, and provides entry to       00007800
.*            VSM internal cellpool processing.                         00007900
.* &LV      - The input length value                                    00008000
.* &LA      - The input length address. Actually the address of         00008100
.*            the storage holding a list of lengths.                    00008200
.* &A       - The address GETMAIN will return your output in            00008300
.* &SP      - The subpool                                               00008400
.* &MF      - The macro format                                          00008500
.* &HIARCHY - Used by IHBINNRA                                          00008600
.* &BNDRY   - The boundary                                              00008700
.* &KEY     - The key                                                   00008800
.* &BRANCH  - Branch entry or SVC                                       00008900
.* &RELATED - Any valid macro keyword specification                     00009000
.* &LOC     - Specified location of virtual and real storage            00009100
.*            (relative to the 16 mb line)                              00009200
.* &NAME    - Relocatable symbol used to define the first byte of the   00009300
.*            GETMAIN macro expansion.                                  00009400
.* &OWNER   - Owner for Common Storage: HOME, PRIMARY, SECONDARY,       00009500
.*            SYSTEM                                               @L3A 00009600
.* &CHECKZERO - If YES, a return code of 20 indicates a successful      00009700
.*            GETMAIN, and the obtained storage contains zeros.         00009800
.*            Allowed only with RU or RC.                          @D2A 00009900
.* &CONTBDY   - The power of two (in the range 3 - 30)             @L7A 00010000
.* &STARTBDY  - The power of two (in the range 3 - 30)             @L7A 00010100
.******************************************************************     00010200
.* Local and global variables                                           00010300
.******************************************************************     00010400
.* &SVCN    - SVC number. currently valid choices: 4,10,120             00010500
.* &PRG     - Register in which the parameters were passed.             00010600
.* &KYSPC   - 1= Key was specified on the macro invocation       @L2A   00010700
.* &B       - 1= LV value is in a register                              00010800
.* &C       - 1= LA value is in a register                              00010900
.* &D       - 1= A is in a register                                     00011000
.* &GLBR    - 1= global branch entry request                            00011100
.* &BR      - 1= branch entry request                                   00011200
.* &SPREG   - 1= subpool was passed to us in a register                 00011300
.* &UNCND   - 1= its an unconditional request                           00011400
.* &BND     - 1= page boundary 0=doubleword boundary                    00011500
.* &CHKZ    - 1= CHECKZERO=YES was specified                       @D2A 00011600
.* &BAR15   - 1= Need AR 15  (CONTBDY or STARTBDY)                 @L7A 00011700
.* &BCBDY   - 1= CONTBDY was specified                             @L7A 00011800
.* &ICBDY   - value of CONTBDY                                     @L7A 00011900
.* &BSBDY   - 1= STARTBDY was specified                            @L7A 00012000
.* &ISBDY   - value of STARTBDY                                    @L7A 00012100
.* &L       - 1= its either a variable request or a list request        00012200
.* &V       - 1= its a variable request                                 00012300
.* &CND     - 1= its a conditional request                              00012400
.* &KEYRG   - 1= key was passed to us in a register                     00012500
.* &LVREG   - 1= length value was passed to us in a register            00012600
.* &INAREG  - 1= input address was passed in a register            @L4A 00012700
.* &RL      - 1= real backing location was specified as 31              00012800
.*               (also on when 64)                                 @L7A 00012900
.* &RL64    - 1= real backing location was specified as 64         @L7A 00013000
.* &RLB     - 1= real backing location was specified as 24         @L4A 00013100
.* &EXPL    - 1= LOC=EXPLICIT was specified                        @L4A 00013200
.* &VA      - 1= virtual storage can be located anywhere                00013300
.* &VB      - 1= virtual storage must be 24                             00013400
.* &MAXRG   - 1= maximum length was passed to us in a register          00013500
.* &MINRG   - 1= minimum length was passed to us in a register          00013600
.*                                                                      00013700
.* &GNAME   - Macro-generated relocatable symbol that defines the       00013800
.*            static storage used for the parameter list.               00013900
.* &MAX     - the first length value. it indicates to us the            00014000
.*            most amount of storage that we want to get                00014100
.* &MIN     - the second length value. it indicates to us the           00014200
.*            least amount of storage that we are willing to take       00014300
.* &SYSASCE - indicates whether the invoker of getmain is in AR         00014400
.*            mode or primary mode.                                     00014500
.*                                                                      00014600
.* &SYSAM64 - indicates whether the invoker of getmain is in 64-bit     00014700
.*            AMODE or not                                              00014800
.*                                                                      00014900
.******************************************************************     00015000
         LCLA  &SVCN,&PRG              LOCAL ARITHMETIC VARIABLES       00015100
         LCLB  &B,&C,&D,&GLBR,&BR,&SPREG,&UNCND,&BND,&L,&V,&CND         00015200
         LCLB  &KEYRG,&LVREG,&RL,&VA,&VB,&MAXRG,&MINRG,&KYSPC           00015300
         LCLB  &CHKZ                                              @D2A  00015400
         LCLC  &BAR15                                              @L7A 00015500
         LCLB  &RL64                                               @L7A 00015600
         LCLC  &ICBDY,&BCBDY,&ICBDY1                               @L7A 00015700
         LCLC  &ISBDY,&BSBDY,&ISBDY1                               @L7A 00015800
.*                                                                @L2C  00015900
         LCLB  &RLB,&EXPL,&INAREG                                       00016000
.*                                                                @L4A  00016100
         LCLC  &GNAME,&MAX,&MIN        LOCAL CHARACTER VARIABLES        00016200
         LCLC  &BOWN                   Ownership                   @L3A 00016300
         GBLA  &SYSALVL                                            @02A 00016350
         GBLC  &SYSASCE                Global character variable -      00016400
.*                                     indicates whether the invoker    00016500
.*                                     of GETMAIN is in AR ASC mode or  00016600
.*                                     primary ASC mode.           @D1A 00016700
         GBLC  &SYSAM64                Global character variable -      00016800
.*                                     indicates whether the invoker    00016900
.*                                     of GETMAIN is in AMODE 64 or     00017000
.*                                     AMODE 24/31                 @L7A 00017100
.*0000000400,012200,013000-013200,016800-017600,026600-026800      LC0A 00017200
.*    047000                                                       LC0A 00017300
.*8002,691302-691702,725202-783002                             @G860P30 00017400
&BAR15   SETC  '0'                                                 @L7A 00017500
&GNAME   SETC  'IHB'.'&SYSNDX'                                          00017600
&PRG     SETA  15                 DEFAULT REG FOR RC, RU, VRC, AND VRU  00017700
         SYSSTATE TEST            This macro sets SYSASCE and      @D1A 00017800
.*                                SYSAM64. SYSASCE is used to      @D1A 00017900
.*                                determine whether the caller is  @D1A 00018000
.*                                in AR ASC mode or primary ASC    @D1A 00018100
.*                                mode.                            @D1A 00018200
.*                                                                      00018300
.******************************************************************     00018400
.* If no mode was specified then go to the label  NOMODE                00018500
.******************************************************************     00018600
.*                                                                      00018700
         AIF   ('&MODE' EQ '').NOMODE                                   00018800
.*                                                                      00018900
.******************************************************************     00019000
.* If the first letter of the mode is not one of these then its not     00019100
.* a valid mode, branch to label ERROR7 to issue an error message       00019200
.******************************************************************     00019300
.*                                                                      00019400
         AIF   ('&MODE'(1,1) NE 'V' AND '&MODE'(1,1) NE 'E' AND        *00019500
               '&MODE'(1,1) NE 'L' AND '&MODE'(1,1) NE 'R' AND         *00019600
               '&MODE'(1,1) NE 'P').ERROR7                     @Z30EN9G 00019700
.*                                                                      00019800
.******************************************************************     00019900
.* If we are in single character mode (P or R) then branch to           00020000
.* label MODE1                                                          00020100
.******************************************************************     00020200
.*                                                                      00020300
         AIF   (K'&MODE EQ 1).MODE1    SINGLE CHARACTER MODE?           00020400
.*                                                                      00020500
.******************************************************************     00020600
.* If the mode specified is greater than 3 characters long, its         00020700
.* not a valid mode. VRU and VRC are the longest currently valid        00020800
.* modes. Branch to ERROR7 to issue a message.                          00020900
.******************************************************************     00021000
.*                                                                      00021100
         AIF   (K'&MODE GT 3).ERROR7                           @G860P30 00021200
.*                                                                      00021300
.******************************************************************     00021400
.* If the last letter of the mode isn't U or C then we have an          00021500
.* invalid mode. Branch to ERROR7 to issue a message.                   00021600
.******************************************************************     00021700
.*                                                                      00021800
         AIF   ('&MODE'(K'&MODE,1) NE 'U'                              *00021900
               AND '&MODE'(K'&MODE,1) NE 'C').ERROR7           @G860P30 00022000
.*                                                                      00022100
.******************************************************************     00022200
.* If its a 2 character mode skip the next check and go straight        00022300
.* to MODE1 (do not pass go, do not collect $200.00)                    00022400
.******************************************************************     00022500
.*                                                                      00022600
         AIF   (K'&MODE EQ 2).MODE1                            @G860P30 00022700
.*                                                                      00022800
.******************************************************************     00022900
.* For triple character modes, make sure that the first 2               00023000
.* letters of the mode are valid, if not, go to ERROR7 to issue         00023100
.* a message                                                            00023200
.******************************************************************     00023300
.*                                                                      00023400
         AIF   ('&MODE'(1,2) NE 'VR').ERROR7                   @G860P30 00023500
.MODE1   ANOP                                                           00023600
.*                                                                      00023700
.******************************************************************     00023800
.* Set the variable &L to indicate if we are processing either a        00023900
.* variable request or a list request. &L will be 1 if either is        00024000
.* true.                                                                00024100
.******************************************************************     00024200
.*                                                                      00024300
&L       SETB  ('&MODE'(1,1) EQ 'V' OR '&MODE'(1,1) EQ 'L')             00024400
.*                                                                      00024500
.******************************************************************     00024600
.* Set the variable &V to indicate if we are processing a               00024700
.* variable request &V will be 1 it is a variable request               00024800
.******************************************************************     00024900
.*                                                                      00025000
&V       SETB  ('&MODE'(1,1) EQ 'V')                                    00025100
.*                                                                      00025200
.******************************************************************     00025300
.* If the mode is any of the R varieties (R, RC, RU) or P (internal)    00025400
.* then go to label NOMODE                                              00025500
.******************************************************************     00025600
.*                                                                      00025700
         AIF   ('&MODE'(1,1) EQ 'R' OR '&MODE'(1,1) EQ 'P').NOMODE      00025800
.*                                                                      00025900
.******************************************************************     00026000
.* So if the length of the mode is 1 we have a problem since the        00026100
.* only valid one character modes are R and P...and on the              00026200
.* previous instruction we branched to NOMODE for them. Well,           00026300
.* times are tough, go to ERROR7 and issue a message                    00026400
.******************************************************************     00026500
.*                                                                      00026600
         AIF   (K'&MODE EQ 1).ERROR7                                    00026700
.*                                                                      00026800
.******************************************************************     00026900
.* We are now only processing 2 and 3 character valid modes.            00027000
.******************************************************************     00027100
.*                                                                      00027200
.******************************************************************     00027300
.* If the second (and possibly last) character is C, this means that    00027400
.* this is conditional request. Since special processing happens        00027500
.* based on COND/UNCOND, set a variable to indicate this                00027600
.******************************************************************     00027700
.*                                                                      00027800
&CND     SETB  ('&MODE'(2,1) EQ 'C') SVC 4 CONDITIONAL FLAG             00027900
.*                                                                      00028000
.******************************************************************     00028100
.* We are now processing all valid modes regardless of their length     00028200
.******************************************************************     00028300
.*                                                                      00028400
.******************************************************************     00028500
.* If boundary wasn't specified on the macro invocation branch to       00028600
.* NOBNDRY to avoid the boundary related checks                         00028700
.******************************************************************     00028800
.*                                                                      00028900
.NOMODE  AIF   ('&BNDRY' EQ '').NOBNDRY                                 00029000
.*                                                                      00029100
.******************************************************************     00029200
.* Since boundary was specified, set a variable to indicate whether     00029300
.* PAGE was specified or not. Note that if page was specified,          00029400
.* &BND will be 1. If anything else was specified (valid or invalid)    00029500
.* &BND will be 0. These invalid values for boundary will be            00029600
.* caught later in processing.                                          00029700
.******************************************************************     00029800
.*                                                                      00029900
&BND     SETB  ('&BNDRY' EQ 'PAGE')                                     00030000
.*                                                                      00030100
.NOBNDRY ANOP                                                      @L3A 00030200
.*                                                                      00030300
.******************************************************************     00030400
.* If CHECKZERO wasn't specified on the macro invocation branch to      00030500
.* NOCHKZ to avoid the CHECKZERO related checks                    @D2A 00030600
.******************************************************************     00030700
.*                                                                      00030800
         AIF   ('&CHECKZERO' EQ '').NOCHKZ                         @D2A 00030900
.*                                                                      00031000
.******************************************************************     00031100
.* Since CHECKZERO was specified, set a variable to indicate whether    00031200
.* YES was specified or not. Note that if YES was specified,            00031300
.* &CHKZ will be 1. If anything else was specified (valid or invalid)   00031400
.* &CHKZ will be 0. These invalid values for CHECKZERO will be          00031500
.* caught later in processing.                                     @D2A 00031600
.******************************************************************     00031700
.*                                                                      00031800
&CHKZ    SETB  ('&CHECKZERO' EQ 'YES')                             @D2A 00031900
.*                                                                      00032000
.NOCHKZ  ANOP                                                      @D2A 00032100
.*                                                                      00032200
.********************************************************************** 00032300
.*                                                                      00032400
.* Check keyword for the CONTBDY specification.                         00032500
.*                                                                      00032600
.********************************************************************** 00032700
.*                                                                      00032800
&BCBDY   SETC   '0'  SET INDICATOR BIT TO ASSUME NO CBDY           @L7A 00032900
&ICBDY   SETC   ''        SET ARGUMENT TO ASSUME NO CBDY           @L7A 00033000
         AIF ('&CONTBDY' EQ '').ENDCBDY IF CBDY WAS NOT SPECed     @L7A 00033100
.CHKCBDY4 ANOP                                                     @L7A 00033200
      AIF (N'&CONTBDY LT 2).CHKCBDY1 IF NUMBER OF ARGUMENTS LT 2   @L7A 00033300
         MNOTE 12,'&I331 ''CONTBDY=&CONTBDY'' &TOLONG ''CONTBDY=&CONTBD+00033400
               Y(1)''.'                                            @L7A 00033500
&ERROR12 SETA  12                      NOTE ERROR                  @L7A 00033600
         AGO    .ENDCBDY            CONTINUE TO CHECK NEXT KEYWORD @L7A 00033700
.CHKCBDY1 ANOP                                                     @L7A 00033800
&ICBDY   SETC   '&CONTBDY'           SAVE CONTBDY SPECIFICATION    @L7A 00033900
&ICBDY1  SETC   '&CONTBDY(1)'        SAVE CONTBDY SPECIFICATION    @L7A 00034000
         AIF ('&ICBDY' NE '').CHKCBDY3  Continue if argument       @L7A 00034100
         MNOTE  12,'&I313 &NOARG        ''CONTBDY'' PARAMETER.'    @L7A 00034200
&ERROR12 SETA   12                     NOTE ERROR                  @L7A 00034300
         AGO    .ENDCBDY            CONTINUE TO CHECK NEXT KEYWORD @L7A 00034400
.CHKCBDY3 ANOP                                                     @L7A 00034500
&BCBDY   SETC   '1'                 SET INDICATOR BIT FOR CBDY=YES @L7A 00034600
&BAR15   SETC   '1'                 SET INDICATOR BIT FOR AR 15    @L7A 00034700
.ENDCBDY ANOP                       End of CONTBDY processing      @L7A 00034800
.*                                                                      00034900
.********************************************************************** 00035000
.*                                                                      00035100
.* Check keyword for the STARTBDY specification.                        00035200
.*                                                                      00035300
.********************************************************************** 00035400
.*                                                                      00035500
&BSBDY   SETC   '0'  SET INDICATOR BIT TO ASSUME NO SBDY           @L7A 00035600
&ISBDY   SETC   ''        SET ARGUMENT TO ASSUME NO SBDY           @L7A 00035700
         AIF ('&STARTBDY' EQ '').ENDSBDY IF SBDY WAS NOT SPECed    @L7A 00035800
.CHKSBDY4 ANOP                                                     @L7A 00035900
      AIF (N'&STARTBDY LT 2).CHKSBDY1 IF NUMBER OF ARGUMENTS LT 2  @L7A 00036000
      MNOTE 12,'&I331 ''STARTBDY=&STARTBDY'' &TOLONG ''STARTBDY=&CONTBD+00036100
               Y(1)''.'                                            @L7A 00036200
&ERROR12 SETA   12                     NOTE ERROR                  @L7A 00036300
         AGO    .ENDSBDY            CONTINUE TO CHECK NEXT KEYWORD @L7A 00036400
.CHKSBDY1 ANOP                                                     @L7A 00036500
&ISBDY   SETC   '&STARTBDY'          SAVE STARTBDY SPECIFICATION   @L7A 00036600
&ISBDY1  SETC   '&STARTBDY(1)'       SAVE STARTBDY SPECIFICATION   @L7A 00036700
         AIF ('&ISBDY' NE '').CHKSBDY3  Continue if argument       @L7A 00036800
         MNOTE  12,'&I313 &NOARG        ''STARTBDY'' PARAMETER.'   @L7A 00036900
&ERROR12 SETA   12                     NOTE ERROR                  @L7A 00037000
         AGO    .ENDSBDY            CONTINUE TO CHECK NEXT KEYWORD @L7A 00037100
.CHKSBDY3 ANOP                                                     @L7A 00037200
&BSBDY   SETC   '1'                 SET INDICATOR BIT FOR SBDY=YES @L7A 00037300
&BAR15   SETC   '1'                 SET INDICATOR BIT FOR AR 15    @L7A 00037400
.ENDSBDY ANOP                       End of STARTBDY processing     @L7A 00037500
.*                                                                      00037600
.******************************************************************@L3A 00037700
.* Check OWNER                                                     @L3A 00037800
.******************************************************************@L3A 00037900
.*                                                                 @L3A 00038000
&BOWN    SETC  '00'                 OWNER=HOME                     @L3A 00038100
         AIF   ('&OWNER' EQ '').NOOWNER                            @L3A 00038200
         AIF   ('&OWNER' NE 'HOME').OWN1                           @L3A 00038300
&BOWN    SETC  '00'                 OWNER=HOME                     @L3A 00038400
         AGO   .OWN9                                               @L3A 00038500
.OWN1    ANOP                                                      @L3A 00038600
         AIF   ('&OWNER' NE 'PRIMARY').OWN2                        @L3A 00038700
&BOWN    SETC  '01'                 OWNER=PRIMARY                  @L3A 00038800
         AGO   .OWN9                                               @L3A 00038900
.OWN2    ANOP                                                      @L3A 00039000
         AIF   ('&OWNER' NE 'SECONDARY').OWN3                      @L3A 00039100
&BOWN    SETC  '10'                 OWNER=SECONDARY                @L3A 00039200
         AGO   .OWN9                                               @L3A 00039300
.OWN3    ANOP                                                      @L3A 00039400
         AIF   ('&OWNER' NE 'SYSTEM').OWN4                         @L3A 00039500
&BOWN    SETC  '11'                 OWNER=SYSTEM                   @L3A 00039600
         AGO   .OWN9                                               @L3A 00039700
.OWN4    AGO   .ERRORO1             OWNER error                    @L3A 00039800
.OWN9    ANOP                                                      @L3A 00039900
         AIF   ('&MODE' NE 'RC' AND                                    *00040000
               '&MODE' NE 'RU' AND '&MODE' NE 'VRC' AND                *00040100
               '&MODE' NE 'VRU').ERRORO2                           @L3A 00040200
.NOOWNER ANOP                                                      @L3A 00040300
.******************************************************************@L4A 00040400
.* Enfore rule that INADDR is only allowed with RC and RU forms    @L4A 00040500
.******************************************************************@L4A 00040600
.*                                                                 @L4A 00040700
         AIF   ('&INADDR' EQ '').NOINADD                           @L4A 00040800
         AIF   ('&MODE' NE 'RC' AND                                    *00040900
               '&MODE' NE 'RU').ERROR33                            @L4A 00041000
.NOINADD ANOP                                                      @L4A 00041100
.******************************************************************     00041200
.* We are now processing request that may or may not have had           00041300
.* boundary specified. If key wasn't specified on the invocation,       00041400
.* go to the label SKIP.This will skip some of the key related          00041500
.* validity checks.                                                     00041600
.******************************************************************     00041700
.*                                                                      00041800
         AIF   ('&KEY' EQ '').SKIP                                      00041900
.*                                                                      00042000
.*                                                            @P1D      00042100
.*                                                                      00042200
.******************************************************************     00042300
.* Since key must have been specified in order to be processing         00042400
.* here, check and see if the valid modes were present. Currently       00042500
.* key can only be specified with RC, RU, VRC and VRU modes             00042600
.******************************************************************     00042700
.*                                                                      00042800
         AIF   ('&MODE' NE 'RC' AND '&MODE' NE 'RU' AND                *00042900
               '&MODE' NE 'VRC' AND '&MODE' NE 'VRU').ERRORA   @G860P30 00043000
.*                                                                      00043100
.******************************************************************     00043200
.* If the key is in a register, we can't really tell much so skip       00043300
.* these checks by going to the label SKIP                              00043400
.******************************************************************     00043500
.*                                                                      00043600
         AIF   ('&KEY'(1,1) EQ '(').SKIP                                00043700
.*                                                                      00043800
.******************************************************************     00043900
.* If the type of the key isn't numeric then we can't check the         00044000
.* value equated to it.                                                 00044100
.******************************************************************     00044200
.*                                                                      00044300
         AIF   (T'&KEY NE 'N').SKIP   CAN'T CHECK EQUATED VALUE         00044400
.*                                                                      00044500
.******************************************************************     00044600
.* Key specified was just a straight number. Check this number          00044700
.* and make sure its not too big. If it is, go to ERRORB to issue       00044800
.* a message.                                                           00044900
.* Note that since anything less than 0 would have failed the           00045000
.* previous type check, we don't have to check for negatives.           00045100
.******************************************************************     00045200
.*                                                                      00045300
         AIF   (&KEY GT 15).ERRORB                                      00045400
.*                                                                      00045500
.******************************************************************     00045600
.* We've done what checking we can for KEY, move on to check            00045700
.* certain combinations that are invalid.                               00045800
.******************************************************************     00045900
.*                                                                      00046000
.******************************************************************     00046100
.* Issuing a branch entry getmain with the list form of the macro       00046200
.* is invalid not to mention fruitless. Go to ERRORC to issue           00046300
.* a message. NOTE: you come here if key isn't specified.               00046400
.******************************************************************     00046500
.*                                                                      00046600
.SKIP    AIF   ('&MF' EQ 'L' AND '&BRANCH' NE '').ERRORC                00046700
.*                                                                      00046800
.******************************************************************     00046900
.* If branch wasn't specified at all, theres nothing to check so        00047000
.* go to the label BRCNT.                                               00047100
.******************************************************************     00047200
.*                                                                      00047300
         AIF   ('&BRANCH' EQ '').BRCNT                                  00047400
.*                                                                      00047500
.******************************************************************     00047600
.* Now that we know that branch was specified...                        00047700
.* If the number of things specified within the branch operand is       00047800
.* less than 2 then we don't have to bother doing the GLOBAL            00047900
.* checks. Branch around these to the label BRSNG to handle             00048000
.* single operand branch requests.                                      00048100
.******************************************************************     00048200
.*                                                                      00048300
         AIF   (N'&BRANCH LT 2).BRSNG                                   00048400
.*                                                                      00048500
.******************************************************************     00048600
.* Since the only valid 2 operand branch request is (YES,GLOBAL)        00048700
.* go to ERRORD to issue a message for any other combinations           00048800
.******************************************************************     00048900
.*                                                                      00049000
         AIF ('&BRANCH(1)' NE 'YES' OR '&BRANCH(2)' NE 'GLOBAL').ERRORD 00049100
.*                                                                      00049200
.******************************************************************     00049300
.* Global branch entry can only be specified with certain modes.        00049400
.* If the mode chosen is not one of the "chosen" then                   00049500
.* go to ERRORF to issue a message.                                     00049600
.******************************************************************     00049700
.*                                                                      00049800
         AIF   ('&BRANCH(2)' EQ 'GLOBAL' AND '&MODE' NE 'RC' AND       *00049900
               '&MODE' NE 'RU' AND '&MODE' NE 'VRC' AND                *00050000
               '&MODE' NE 'VRU').ERRORF                        @G860P30 00050100
.*                                                                      00050200
.******************************************************************     00050300
.* Set bits indicating that this is                                     00050400
.* GLOBAL (&GLBR is set)                                                00050500
.* BRANCH (&BR is set)                                                  00050600
.* These will be used in later processing                               00050700
.******************************************************************     00050800
.*                                                                      00050900
&GLBR    SETB  1                                                        00051000
&BR      SETB  1                                                        00051100
.*                                                                      00051200
.******************************************************************     00051300
.* Branch unconditionally to label BRCNT to continue processing         00051400
.* this request.                                                        00051500
.******************************************************************     00051600
.*                                                                      00051700
         AGO   .BRCNT                                                   00051800
.*                                                                      00051900
.******************************************************************     00052000
.* We are processing single operand branch requests here. Since         00052100
.* at the only valid single request is YES, give an error message       00052200
.* if its not YES                                                       00052300
.******************************************************************     00052400
.*                                                                      00052500
.BRSNG   AIF   ('&BRANCH' NE 'YES').ERRORD                              00052600
.*                                                                      00052700
.******************************************************************     00052800
.* Set bit indicating that this is                                      00052900
.* BRANCH (&BR is set)                                                  00053000
.* This will be used in later processing                                00053200
.******************************************************************     00053400
.*                                                                      00053600
&BR      SETB  1                                                        00054100
.*                                                                      00054400
.******************************************************************     00054700
.* Continue processing                                                  00055000
.******************************************************************     00055300
.*                                                                      00055600
.BRCNT   ANOP                                                           00056000
.*                                                                      00056200
.******************************************************************     00056400
.* Set the SVC number to 4 as a base place to start. This may very      00056600
.* well change in the event that we determine that it is really         00056800
.* not an SVC 4 request.                                                00057000
.******************************************************************     00057200
&SVCN    SETA  4                                                        00057900
.*                                                                      00058100
.******************************************************************     00058300
.*  If MF is 'I', we are processing the standard form of GETMAIN.       00058500
.* (That is, the MF parameter was absent from the macro.)               00058700
.* Mode (e.g., RC or EC or ...) is required when MF is absent.          00058900
.******************************************************************     00059100
.*                                                                      00059300
         AIF   ('&MODE' EQ '' AND '&MF' EQ 'I').ERROR1                  00059800
.*                                                                      00060000
.******************************************************************     00060200
.* If both a length value and an length address were specified,         00060400
.* this is an error. Go to ERROR5 to issue the message                  00060600
.******************************************************************     00060800
.*                                                                      00061000
         AIF   ('&LV' NE '' AND '&LA' NE '').ERROR5                     00061700
.*                                                                      00061900
.******************************************************************     00062100
.* If mode wasn't specified, branch past these specific mode            00062300
.* tests by going to CONT1                                              00062500
.******************************************************************     00062700
.*                                                                      00062900
         AIF   ('&MODE' EQ '').CONT1                                    00063600
.*                                                                      00063900
.******************************************************************     00064200
.* E modes must use LV not LA, issue error message                      00064500
.******************************************************************     00064800
.*                                                                      00065100
         AIF   ('&MODE'(1,1) EQ 'E' AND '&LA' NE '').ERROR6             00065500
.*                                                                      00065800
.******************************************************************     00066100
.* R modes must use LV not LA, issue error message                      00066400
.******************************************************************     00066700
.*                                                                      00067000
         AIF   ('&MODE'(1,1) EQ 'R' AND '&LA' NE '').ERROR6             00067400
.*                                                                      00067600
.******************************************************************     00067800
.* 3 character modes (VRU and VRC) must use LV not LA, issue            00068000
.* an error message                                                     00068200
.******************************************************************     00068400
.*                                                                      00068600
         AIF   (K'&MODE EQ 3 AND '&LA' NE '').ERROR6           @G860P30 00069300
.*                                                                      00069500
.******************************************************************     00069700
.* If a valid value for the boundary parameter was not supplied,        00069900
.* issue an error message                                               00070100
.******************************************************************     00070300
.*                                                                      00070500
         AIF   ('&BNDRY' NE '' AND '&BNDRY' NE 'DBLWD' AND '&BNDRY'    *00070900
               NE 'PAGE').ERROR10                                       00072500
.*                                                                      00072700
.******************************************************************     00072900
.* R mode callers cannot request page boundaries                        00073100
.******************************************************************     00073300
.*                                                                      00073500
         AIF   ('&BNDRY' EQ 'PAGE' AND '&MODE' EQ 'R').ERR10A           00074100
.*                                                                      00074200
.******************************************************************     00074300
.* If a valid value for the CHECKZERO parameter was not supplied,       00074400
.* issue an error message                                          @D2A 00074500
.******************************************************************     00074600
.*                                                                      00074700
         AIF   ('&CHECKZERO' NE '' AND '&CHECKZERO' NE 'YES' AND       *00074800
               '&CHECKZERO' NE 'NO').ERRORZ1                       @D2A 00074900
.*                                                                      00075000
.******************************************************************     00075100
.* CHECKZERO is allowed only with RU, RC, VRU, or VRC mode.        @D2A 00075200
.******************************************************************     00075300
.*                                                                      00075400
         AIF   ('&CHECKZERO' NE '' AND '&MODE' NE 'RU' AND             *00075500
               '&MODE' NE 'RC' AND '&MODE' NE 'VRU' AND                *00075600
               '&MODE' NE 'VRC').ERRORZ2                           @D2A 00075700
.*                                                                      00075800
.******************************************************************     00075900
.* CONTBDY is allowed only with RC/RU                              @L7A 00076000
.******************************************************************     00076100
.*                                                                      00076200
         AIF   ('&CONTBDY' NE '' AND '&MODE' NE 'RU' AND               *00076300
               '&MODE' NE 'RC').ERRORCBDY                          @L7A 00076400
.*                                                                      00076500
.******************************************************************     00076600
.* CONTBDY is not allowed with LOC = EXPLICIT                      @L7A 00076700
.******************************************************************     00076800
.*                                                                      00076900
      AIF   ('&CONTBDY' NE '' AND '&LOC(1)' EQ 'EXPLICIT').ERRORCBDY1  *00077000
                                                                   @L7A 00077100
.*                                                                      00077200
.******************************************************************     00077300
.* CONTBDY is not allowed with BNDRY                               @L7A 00077400
.******************************************************************     00077500
.*                                                                      00077600
      AIF   ('&CONTBDY' NE '' AND '&BNDRY' NE '').ERRORCBDY2       @L7A 00077700
.*                                                                      00077800
.******************************************************************     00077900
.* STARTBDY is allowed only with RC/RU                             @L7A 00078000
.******************************************************************     00078100
.*                                                                      00078200
         AIF   ('&STARTBDY' NE '' AND '&MODE' NE 'RU' AND              *00078300
               '&MODE' NE 'RC').ERRORSBDY                          @L7A 00078400
.*                                                                      00078500
.******************************************************************     00078600
.* STARTBDY is not allowed with LOC = EXPLICIT                     @L7A 00078700
.******************************************************************     00078800
.*                                                                      00078900
       AIF   ('&STARTBDY' NE '' AND '&LOC(1)' EQ 'EXPLICIT').ERRORSBDY1*00079000
                                                                   @L7A 00079100
.*                                                                      00079200
.******************************************************************     00079300
.* STARTBDY is not allowed with BNDRY                              @L7A 00079400
.******************************************************************     00079500
.*                                                                      00079600
      AIF   ('&STARTBDY' NE '' AND '&BNDRY' NE '').ERRORSBDY2      @L7A 00079700
.*                                                                      00079800
.******************************************************************     00079900
.* L modes require LA not LV                                            00080000
.******************************************************************     00080100
.*                                                                      00080200
         AIF   ('&MODE'(1,1) EQ 'L' AND '&LV' NE '').ERROR4             00080300
.*                                                                      00080400
.******************************************************************     00080500
.* 2 character V mode requires LA not LV, issue an error message        00080600
.******************************************************************     00080700
.*                                                                      00080800
      AIF ('&MODE'(1,1) EQ 'V' AND '&LV' NE '' AND K'&MODE LT 3).ERROR4 00080900
.*                                                                      00081000
.******************************************************************     00081100
.* Hiarchy is used by IHBINNRA. Valid values are 0, 1 and not           00081200
.* specified                                                            00081300
.******************************************************************     00081400
.*                                                                      00081500
         AIF   ('&HIARCHY' EQ '' OR '&HIARCHY' EQ '0' OR '&HIARCHY' EQ *00081600
               '1').CONT1                                               00081700
.*                                                                      00081800
.******************************************************************     00081900
.* Otherwise the hiarchy value specified is invalid. Issue a message    00082000
.******************************************************************     00082100
.*                                                                      00082200
         IHBERMAC 195                                                   00082600
.*                                                                      00082900
.******************************************************************     00083200
.* Exit                                                                 00083500
.******************************************************************     00083800
.*                                                                      00084100
         MEXIT                                                          00084500
.*                                                                      00084600
.******************************************************************     00084700
.* Continue processing. Route based on Macro format                     00084800
.* Note that either the mode hasn't been specified or it has            00084900
.* passed all validity checks.                                          00085000
.******************************************************************     00085100
.*                                                                      00085200
.******************************************************************     00085300
.* If macro form is list, go to LROUT                                   00085400
.******************************************************************     00085500
.*                                                                      00085600
.CONT1   AIF   ('&MF' EQ 'L').LROUT                                     00086400
.*                                                                      00086600
.******************************************************************     00086800
.* If macro form is standard (i.e., MF absent from GETMAIN),            00087000
.* go to IROUT. Note that mode is required with MF of I                 00087200
.******************************************************************     00087400
.*                                                                      00087600
         AIF   ('&MF' EQ 'I').IROUT                                     00088300
.*                                                                      00088500
.******************************************************************     00088700
.* We are processing an execute form, which requires that the MF        00088900
.* parameter look like 'MF=(E,<remote parm list description>)'.  We     00089100
.* know that we can't find the parm list if there are less than 2       00089300
.* values specified for the MF parameter.                               00089500
.******************************************************************     00089700
.*                                                                      00089900
         AIF   (N'&MF LE 1).ERROR2                                      00090200
.*                                                                      00090400
.******************************************************************     00090600
.* Only valid thing left is the execute form, if this isn't what        00090800
.* was specified, issue an error message                                00091000
.******************************************************************     00091200
.*                                                                      00091400
         AIF   ('&MF(1)' NE 'E').ERROR2                                 00092100
.*                                                                      00092200
.******************************************************************     00092300
.* We are working with an execute form, so the caller has already       00092400
.* constructed a GETMAIN parameter list with the LIST form of the       00092500
.* macro.  &MF(2) contains the address of the parameter list.  It can   00092600
.* be either an RX address or a register.  IHBINNRA properly loads      00092700
.* register 1 with the address of the parameter list in both cases.     00092800
.* (That is, it will generate a 'LR 1,parm-list-reg-name', or a         00092900
.* 'LA 1,parm-list-RX-addr'                                             00093000
.******************************************************************     00093100
.*                                                                      00093200
&NAME    IHBINNRA &MF(2)                                                00094000
.*                                                                      00094200
.******************************************************************     00094400
.* If the length value wasn't specified                                 00094600
.* Go to CONTB to continue processing                                   00094800
.******************************************************************     00095000
.*                                                                      00095200
         AIF   ('&LV' EQ '').CONTB                                      00095900
.*                                                                      00096100
.******************************************************************     00096300
.* If the length value is in a register go to ISAREG to do the          00096500
.* processing to get it                                                 00096700
.******************************************************************     00096900
.*                                                                      00097100
         AIF   ('&LV'(1,1) EQ '(').ISAREG                               00097800
.*                                                                      00098000
.******************************************************************     00098200
.* If the length value is a symbol then go to CONTBB to                 00098400
.* continue processing.                                                 00098600
.******************************************************************     00098800
.*                                                                      00099000
         AIF   (T'&LV NE 'N').CONTBB                                    00099700
.*                                                                      00099800
.******************************************************************     00099900
.* If the length value is less than 4K (1 page) then continue           00100000
.* processing at label CONTAA                                           00100100
.*                                                                      00100200
.* Note that if the request is for less than 1 page, we can             00100300
.* quickly get the length into a register (with no storage access)      00100400
.* by treating the length as a displacement.                            00100500
.******************************************************************     00100600
.*                                                                      00100700
         AIF   (&LV LE 4095).CONTAA                                     00101600
.*                                                                      00101800
.******************************************************************     00102000
.* Special processing for a page or more. If a page or more is          00102200
.* requested, we must put the length in storage, move it into a         00102400
.* register and then move the register into the parameter list.         00102600
.******************************************************************     00102800
.*                                                                      00103000
.CONTBB  CNOP  0,4                                                      00103500
         B     *+8                     BRANCH AROUND LENGTH             00105400
         DC    A(&LV)                  LENGTH                           00109000
         MVC   0(4,1),*-4              MOVE LENGTH INTO LIST            00112600
.*                                                                      00113200
.******************************************************************     00113800
.* Unconditionally branch to CONTB to continue processing               00114400
.******************************************************************     00115000
.*                                                                      00115600
         AGO   .CONTB                                                   00116200
.*                                                                      00116500
.******************************************************************     00116800
.* Special processing for less than a page                              00117100
.******************************************************************     00117400
.*                                                                      00117700
.******************************************************************     00118000
.* Put the length value into register 14                                00118300
.******************************************************************     00118600
.*                                                                      00118900
.CONTAA  LA    14,&LV.(0,0)            PICK UP LENGTH                   00119800
         ST    14,0(0,1)               STORE INTO LIST                  00123400
.*                                                                      00124000
.******************************************************************     00124600
.* Unconditionally branch to CONTB to continue processing               00125200
.******************************************************************     00125800
.*                                                                      00126400
         AGO   .CONTB                                                   00127000
.*                                                                      00127600
.******************************************************************     00128200
.* Deal with the length being in a register                             00128800
.******************************************************************     00129400
.*                                                                      00130000
.ISAREG  ST    &LV(1),0(0,1)           STORE LENGTH IN LIST             00130600
.*                                                                      00131100
.******************************************************************     00131600
.* If the length address wasn't specified, go to CONTD to continue      00132100
.* processing.                                                          00132600
.******************************************************************     00133100
.*                                                                      00133600
.CONTB   AIF   ('&LA' EQ '').CONTD                                      00134200
.*                                                                      00134700
.******************************************************************     00135200
.* If the length address is in a register, go to ISAREGA to continue    00135700
.* processing.                                                          00136200
.******************************************************************     00136700
.*                                                                      00137200
         AIF   ('&LA'(1,1) EQ '(').ISAREGA                              00137800
.*                                                                      00138300
.******************************************************************     00138800
.* Otherwise, the length address is right there, just process           00139300
.* it                                                                   00139800
.******************************************************************     00140300
.*                                                                      00140800
         LA    14,&LA                  PICK UP LIST ADDRESS             00141400
         ST    14,0(0,1)               STORE IN PARAM LIST              00145000
.*                                                                      00145600
.******************************************************************     00146200
.* Unconditionally branch to CONTD to continue processing               00146800
.******************************************************************     00147400
.*                                                                      00148000
         AGO   .CONTD                                                   00148600
.*                                                                      00149200
.******************************************************************     00149800
.* Process getting the length address from the register.                00150400
.******************************************************************     00151000
.*                                                                      00151600
.ISAREGA ST    &LA(1),0(0,1)           STORE LA IN PARAM LIST           00152200
.*                                                                      00152700
.******************************************************************     00153200
.* If neither mode nor boundary was specified on the execute form       00153700
.* we have nothing to move into the parameter list. We use the values   00154200
.* put there by the list form.                                          00154700
.******************************************************************     00155200
.*                                                                      00155700
.CONTD   AIF   ('&MODE' EQ '' AND '&BNDRY' EQ '').CONTE                 00156800
         MVI   8(1),B'&L&V&CND&BND.0000'         SET MODE / BNDRY FLGS  00158600
.*                                                                      00165100
.******************************************************************     00171600
.* If the output address was not specified then continue                00178100
.* processing at CONTI                                                  00184600
.******************************************************************     00191100
.*                                                                      00197600
.CONTE   AIF   ('&A' EQ '').CONTI                                       00204200
.*                                                                      00204400
.******************************************************************     00204600
.* If the output address is in a register branch to ISAREGB to          00204800
.* process it.                                                          00205000
.******************************************************************     00205200
.*                                                                      00205400
         AIF   ('&A'(1,1) EQ '(').ISAREGB                               00206100
.*                                                                      00206300
.******************************************************************     00206500
.* Otherwise the address is right there for the taking so just          00206700
.* take it.                                                             00206900
.******************************************************************     00207100
.*                                                                      00207300
         LA    14,&A                   LOAD AREA LIST ADDRESS           00208000
         ST    14,4(0,1)               STORE INTO PARAM LIST            00212900
.*                                                                      00213700
.******************************************************************     00214500
.* Unconditionally branch to CONTI to continue processing               00215300
.******************************************************************     00216100
.*                                                                      00216900
         AGO   .CONTI                                                   00217800
.*                                                                      00218500
.******************************************************************     00219200
.* Process the obtaining of the output address when its in a            00219900
.* register.                                                            00220600
.******************************************************************     00221300
.*                                                                      00222000
.ISAREGB ST    &A(1),4(1,0)            STORE INTO PARAM LIST            00222700
.*                                                                      00223300
.******************************************************************     00223900
.* If subpool wasn't specfied, go to label FINI                         00224500
.* we are done modifying the parameter list built by the list           00225100
.* form.                                                                00225700
.******************************************************************     00226300
.*                                                                      00226900
.CONTI   AIF   ('&SP' EQ '').FINI                                       00227600
.*                                                                      00228400
.******************************************************************     00229200
.* If subpool is in a register, go to ISAREGC to get it out of there!   00230000
.******************************************************************     00230800
.*                                                                      00231600
         AIF   ('&SP'(1,1) EQ '(').ISAREGC                              00232500
.*                                                                      00233300
.******************************************************************     00234100
.* Else the subpool is ripe for the picking, just take it               00234900
.******************************************************************     00235700
.*                                                                      00236500
         MVI   9(1),&SP                STORE SUBPOOL VALUE              00237400
.*                                                                      00238200
.******************************************************************     00239000
.* Unconditionally branch to FINI, we are finished                      00239800
.******************************************************************     00240600
.*                                                                      00241400
         AGO   .FINI                                                    00242300
.*                                                                      00243100
.******************************************************************     00243900
.* Get the subpool out of the register and store it                     00244700
.******************************************************************     00245500
.*                                                                      00246300
.ISAREGC STC   &SP(1),9(1,0)           STORE SUBPOOL VALUE              00247200
.*                                                                      00247900
.******************************************************************     00248600
.* Unconditionally branch to FINI, we are finished with the             00249300
.* execute form.                                                        00250000
.******************************************************************     00250700
.*                                                                      00251400
         AGO   .FINI                                                    00252100
.*                                                                      00252200
.******************************************************************     00252300
.* LIST FORM PROCESSING                                                 00252400
.*                                                                      00252500
.* We create a parameter list in the caller's static storage below.     00252600
.* The list looks like this:                                            00252700
.*  Word 1 - Length value, or length list address, or 0.                00252800
.*  Word 2 - When GETMAIN is done, the address of the storage           00252900
.*           obtained will be placed at the storage location            00253000
.*           pointed to by this word.  This is 0 if the list form       00253100
.*           did not specify the 'A' parameter.                         00253200
.*  Word 3 -                                                            00253300
.*   Byte 1 - Flags                                                     00253400
.*   Byte 2 - Subpool.  This is zero if the list form did not           00253500
.*            specify the 'SP' parameter.                               00253600
.*                                                                      00253700
.* Notes:                                                               00253800
.* &NAME is used as a relocatable symbol that defines start of the      00253900
.* parameter list. This is needed so that a subsequent GETMAIN that     00254000
.* specifies MF=(E,&NAME) can find the parameter list created by a      00254100
.* list form GETMAIN.                                                   00254200
.******************************************************************     00254300
.*                                                                      00254400
.******************************************************************     00254500
.* If the length value wasn't specified, go to CONTJ to continue        00254600
.* processing                                                           00254700
.******************************************************************     00254800
.*                                                                      00254900
.LROUT   AIF   ('&LV' EQ  '').CONTJ                                     00257000
.*                                                                      00257700
.******************************************************************     00258400
.* Length value cannot be in a register on the list form of             00259100
.* this macro. Go to ERROR3 and no TV for the rest of the night.        00259800
.******************************************************************     00260500
.*                                                                      00261200
         AIF   ('&LV'(1,1) EQ '(').ERROR3                               00261900
.*                                                                      00262300
.******************************************************************     00262700
.* Start defining the parameter list in the caller's static storage.    00263100
.* The first word contains the length of storage requested.             00263500
.* &NAME is used as a relocatable symbol that defines start of the      00263900
.* parameter list. This is needed so that a subsequent GETMAIN that     00264300
.* specifies MF=(E,&NAME) can find the parameter list created by a      00264700
.* list form GETMAIN.                                                   00265100
.******************************************************************     00265500
.*                                                                      00265900
&NAME    DC    A(&LV)                  LENGTH                           00266800
.*                                                                      00267600
.******************************************************************     00268400
.* Branch unconditionally to CONTLL to continue processing.             00269200
.******************************************************************     00270000
.*                                                                      00270800
         AGO   .CONTLL                                                  00271700
.*                                                                      00272100
.******************************************************************     00272500
.* Processing for when no length value was specified                    00272900
.******************************************************************     00273300
.*                                                                      00273700
.******************************************************************     00274100
.* If the length address was also not specified, go to CONTK to         00274500
.* continue processing.                                                 00274900
.******************************************************************     00275300
.*                                                                      00275700
.CONTJ   AIF   ('&LA' EQ '').CONTK                                      00276600
.*                                                                      00277400
.******************************************************************     00278200
.* If the length address is in a register, thats an error!              00279000
.******************************************************************     00279800
.*                                                                      00280600
         AIF   ('&LA'(1,1) EQ '(').ERROR3                               00281500
.*                                                                      00281900
.******************************************************************     00282300
.* Otherwise the length address is there. Take it. Really, I mean       00282700
.* that.                                                                00283100
.* Note that this is the first thing in the parameter list.             00283500
.* &NAME is used as a relocatable symbol that defines start of the      00283900
.* parameter list. This is needed so that a subsequent GETMAIN that     00284300
.* specifies MF=(E,&NAME) can find the parameter list created by a      00284700
.* list form GETMAIN.                                                   00285100
.******************************************************************     00285500
.*                                                                      00285900
&NAME    DC    A(&LA)                  ADDRESS OF LENGTH LIST           00286400
.*                                                                      00287200
.******************************************************************     00288000
.* Branch unconditionally to CONTLL to continue processing              00288800
.******************************************************************     00289600
.*                                                                      00290400
         AGO   .CONTLL                                                  00291300
.*                                                                      00291600
.******************************************************************     00291900
.* Neither a length value nor a length address has been specified.      00292200
.* We must create a 'place holder' for the spot where the length value  00292500
.* or length list address would have gone.  Note that this is the       00292800
.* first thing in the parameter list.                                   00293100
.* &NAME is used as a relocatable symbol that defines start of the      00293400
.* parameter list. This is needed so that a subsequent GETMAIN that     00293700
.* specifies MF=(E,&NAME) can find the parameter list created by a      00294000
.* list form GETMAIN.                                                   00294300
.******************************************************************     00294600
.*                                                                      00294900
.CONTK   ANOP                                                           00296200
&NAME    DC   A(0)                     LA OR LU                         00301100
.*                                                                      00301800
.******************************************************************     00302500
.* If address wasn't specified then go to CONTM to continue             00303200
.* processing                                                           00303900
.******************************************************************     00304600
.*                                                                      00305300
.CONTLL  AIF   ('&A' EQ '').CONTM                                       00306000
.*                                                                      00306700
.******************************************************************     00307400
.* If the output address is listed as a register, this is an            00308100
.* error. It can only be an A-type address                              00308800
.******************************************************************     00309500
.*                                                                      00310200
         AIF   ('&A'(1,1) EQ '(').ERROR3                                00310900
         DC    A(&A)                   ADDR. OF ADDR. LIST              00315800
.*                                                                      00316500
.******************************************************************     00317200
.* This means the address must have been specified.                     00317900
.* Branch unconditionally to CONTN to continue processing.              00318600
.******************************************************************     00319300
.*                                                                      00320000
         AGO   .CONTN                                                   00320700
.*                                                                      00321400
.******************************************************************     00322100
.* The 'A' parameter was not specified.  Thus, we must create a 'place  00322800
.* holder' for the spot where the output address would have gone.       00323500
.******************************************************************     00324200
.*                                                                      00324900
.CONTM   DC    A(0)                    ADDR. OF ADDR. LIST              00325600
.*                                                                      00326300
.******************************************************************     00327000
.* Set the mode and options flags based on the information              00327700
.* we have been collecting.                                             00328400
.******************************************************************     00329100
.*                                                                      00329800
.CONTN   DC    BL1'&L&V&CND&BND.0000'  MODE AND OPTION FLAGS            00330500
.*                                                                      00331200
.******************************************************************     00331900
.* If the subpool wasn't specified then go to CONTU to set up           00332600
.* the default subpool.                                                 00333300
.******************************************************************     00334000
.*                                                                      00334700
         AIF   ('&SP' EQ '').CONTU                                      00335400
.*                                                                      00336200
.******************************************************************     00337000
.* Subpool can't be in a register, issue a message via ERROR3           00337800
.******************************************************************     00338600
.*                                                                      00339400
         AIF   ('&SP'(1,1) EQ '(').ERROR3                               00340300
.*                                                                      00341100
.******************************************************************     00341900
.* Put the subpool in the parm list.                                    00342700
.******************************************************************     00343500
.*                                                                      00344300
         DC    AL1(&SP)                SUBPOOL VALUE                    00345200
.*                                                                      00345900
.******************************************************************     00346600
.* Unconditionally branch to FINISH since we are done                   00347300
.* with list form processing                                            00348000
.******************************************************************     00348700
.*                                                                      00349400
         AGO   .FINISH                                                  00350100
.*                                                                      00350800
.******************************************************************     00351500
.* The 'SP' parameter was not specified.  Thus, we put a default        00352200
.* subpool value of 0 in the parm list.                                 00352900
.******************************************************************     00353600
.*                                                                      00354300
.CONTU   DC    AL1(0)                  SUBPOOL VALUE                    00355000
.*                                                                      00355800
.******************************************************************     00356600
.* EXIT - we are finished with the lst form (MF=L)                      00357400
.******************************************************************     00358200
.*                                                                      00359000
.FINISH  MEXIT                                                          00360000
.*                                                                      00360100
.******************************************************************     00360200
.* INTERNAL ROUTING - when the mf parameter is absent from the          00360300
.* getmain macro, we come thru here.                                    00360400
.******************************************************************     00360500
.*                                                                      00360600
.******************************************************************     00360700
.* If its a R mode (R, RU, RC) or VRU, VRC then go to RROUT             00360800
.******************************************************************     00360900
.*                                                                      00361000
.IROUT   AIF   ('&MODE'(1,1) EQ 'R' OR K'&MODE EQ 3).RROUT     @G860P30 00362000
.*                                                                      00362100
.******************************************************************     00362200
.* If its a P-type getmain go to PROUT                                  00362300
.******************************************************************     00362400
.*                                                                      00362500
         AIF   ('&MODE'(1,1) EQ 'P').PROUT                     @Z30EN9G 00363000
.*                                                                      00363100
.******************************************************************     00363200
.* If neither a length variable or length address was given             00363300
.* its an error. One or the other must be specified.                    00363400
.* Must be either EC or EU, VC or VU, LC or LU mode.                    00363500
.******************************************************************     00363600
.*                                                                      00363700
         AIF   ('&LV' EQ '' AND '&LA' EQ '').ERROR8                     00364000
.*                                                                      00364300
.******************************************************************     00364600
.*  Align on a word boundary                                            00364900
.******************************************************************     00365200
.*                                                                      00365500
         CNOP  0,4                                                      00366000
         AIF   (&SYSALVL GT 0).AL1_0A                              @02A 00367000
&NAME    BAL   1,*+14                  BRANCH AROUND LIST               00368000
         AGO   .AL1_0B                                             @02A 00368040
.AL1_0A  ANOP                                                      @02A 00368080
         BRAS  1,*+14                  BRANCH AROUND LIST          @02A 00368120
.AL1_0B  ANOP                                                      @02A 00368160
.*                                                                      00368200
.******************************************************************     00368400
.* If no length variable was specified, branch to CNTA                  00368600
.* Start generating the parameter list.                                 00368800
.******************************************************************     00369000
.*                                                                      00369200
         AIF   ('&LV' EQ '').CNTA                                       00370000
.*                                                                      00370300
.******************************************************************     00370600
.* If the length variable is in a register, branch to CNTB              00370900
.******************************************************************     00371200
.*                                                                      00371500
         AIF   ('&LV'(1,1) EQ '(').CNTB                                 00372000
.*                                                                      00372300
.******************************************************************     00372600
.* Else the length is right there, just take it.                        00372900
.******************************************************************     00373200
.*                                                                      00373500
         DC    A(&LV)                  LENGTH                           00374000
         AGO   .CNTC                                                    00376000
.*                                                                      00376200
.******************************************************************     00376400
.* The 'LV' parameter has been passed in a register.                    00376600
.* Set aside some space in the parm list for where the length           00376800
.* goes.  We will store the register that contains the length           00377000
.* here.                                                                00377200
.******************************************************************     00377400
.*                                                                      00377600
.CNTB    DC    A(0)                    LENGTH                           00378000
.*                                                                      00378300
.******************************************************************     00378600
.* Set &B on to indicate that LV is in a register                       00378900
.******************************************************************     00379200
.*                                                                      00379500
&B       SETB  1                                                        00380000
.*                                                                      00380300
.******************************************************************     00380600
.* Unconditionally branch to CNTC                                       00380900
.******************************************************************     00381200
.*                                                                      00381500
         AGO   .CNTC                                                    00382000
.*                                                                      00382200
.******************************************************************     00382400
.* We get here when the Getmain specified the LA parameter rather       00382600
.* than the LV parameter.                                               00382800
.* Now check the LA parameter. If its in a register, go to CNTD         00383000
.******************************************************************     00383200
.*                                                                      00383400
.CNTA    AIF   ('&LA'(1,1) EQ '(').CNTD                                 00384000
.*                                                                      00384300
.******************************************************************     00384600
.* Otherwise, its just right there, take it                             00384900
.******************************************************************     00385200
.*                                                                      00385500
         DC    A(&LA)                  ADDR. OF LENGTH LIST             00386000
         AGO   .CNTC                                                    00388000
.*                                                                      00388200
.******************************************************************     00388400
.* The 'LA' parameter has been passed in a register.                    00388600
.* Set aside some spece in the parm list for where the length goes.     00388800
.* We will store the register that contains the address of length list  00389000
.* address here.                                                        00389200
.******************************************************************     00389400
.*                                                                      00389600
.CNTD    DC    A(0)                    ADDR. OF LENGTH LIST             00390000
.*                                                                      00390300
.******************************************************************     00390600
.* Set &B on to indicate that LA is in a register                       00390900
.******************************************************************     00391200
.*                                                                      00391500
&C       SETB  1                                                        00392000
.*                                                                      00392300
.******************************************************************     00392600
.* If A was not specified, its an error                                 00392900
.******************************************************************     00393200
.*                                                                      00393500
.CNTC    AIF   ('&A' EQ '').ERROR8                                      00394000
.*                                                                      00394300
.******************************************************************     00394600
.* If A is in a register, go to CNTE to get it                          00394900
.******************************************************************     00395200
.*                                                                      00395500
         AIF   ('&A'(1,1) EQ '(').CNTE                                  00396000
.*                                                                      00397600
.******************************************************************     00399200
.* Otherwise A is just right there. snatch it                           00400800
.******************************************************************     00402400
.*                                                                      00404000
         DC    A(&A)                  ADDR. OF ADDR. LIST               00406000
         AGO   .CNTF                                                    00408000
.*                                                                      00408200
.******************************************************************     00408400
.* The 'A' parameter has been passed in a register.  Set aside some     00408600
.* space in the parm list for where the address of the address-list     00408800
.* goes.  We will store the register that contains the address of the   00409000
.* address-list here.                                                   00409200
.******************************************************************     00409400
.*                                                                      00409600
.CNTE    DC    A(0)                    ADDR. OF ADDR. LIST              00410000
.*                                                                      00411000
.******************************************************************     00412000
.* Set &D to indicate that A is in a register                           00413000
.******************************************************************     00414000
.*                                                                      00415000
&D       SETB  1                                                        00416400
.*                                                                      00417400
.******************************************************************     00418400
.* Set a byte of mode and option flags                                  00419400
.******************************************************************     00419700
.*                                                                      00420000
.******************************************************************     00420300
.* Note that initialization of the &BOWN flags to 0's has made it       00420600
.* so that it is OK to use that variable even if OWNER cannot           00420900
.* truly be specified on this path.                                     00421200
.******************************************************************     00421500
.*                                                                      00421800
.CNTF    DC    BL1'&L&V&CND&BND.00&BOWN.'  MODE AND OPTION FLAGS   @L3A 00422800
.*                                                                      00423800
.******************************************************************     00424800
.* If no subpool was specified , then go to CNTL to continue            00425800
.******************************************************************     00426800
.*                                                                      00427800
         AIF   ('&SP' EQ '').CNTL                                       00429200
.*                                                                      00430200
.******************************************************************     00431200
.* If the subpool is in a register go to ISAREGQ to continue            00432200
.******************************************************************     00433200
.*                                                                      00434200
         AIF   ('&SP'(1,1) EQ '(').ISAREGQ                              00435600
.*                                                                      00436600
.******************************************************************     00437600
.* Otherwise, get the subpool , it was specified directly               00438600
.******************************************************************     00439600
.*                                                                      00440600
         DC    AL1(&SP)                SUBPOOL VALUE                    00442000
.*                                                                      00443000
.******************************************************************     00444000
.* Branch unconditionally to CNTM to continue                           00445000
.******************************************************************     00446000
.*                                                                      00447000
         AGO   .CNTM                                                    00448400
.*                                                                      00449400
.******************************************************************     00450400
.* Processing for when the subpool is in a register                     00451400
.******************************************************************     00452400
.*                                                                      00453400
.ISAREGQ DC    AL1(0)                  SUBPOOL VALUE                    00454800
.*                                                                      00455800
.******************************************************************     00456800
.* Store the subpool number in the parameter list                       00457800
.******************************************************************     00458800
.*                                                                      00459800
         STC   &SP(1),9(0,1)           STORE SUBPOOL IN LIST            00461200
.*                                                                      00462200
.******************************************************************     00463200
.* Unconditionally branch to CNTM to continue processing.               00464200
.******************************************************************     00465200
.*                                                                      00466200
         AGO   .CNTM                                                    00467600
.*                                                                      00468600
.******************************************************************     00469600
.* No subpool was specified so, set a default of 0                      00470600
.******************************************************************     00471600
.*                                                                      00472600
.CNTL    DC    AL1(0)                  SUBPOOL VALUE                    00474000
.*                                                                      00475000
.******************************************************************     00476000
.* If the LV value isn't in a register go to CNTN to process            00477000
.******************************************************************     00478000
.*                                                                      00479000
.CNTM    AIF   (NOT &B).CNTN                                            00480400
.*                                                                      00481300
.******************************************************************     00482200
.* Otherwise extract the value and store the length in the parameter    00483100
.* list                                                                 00484000
.******************************************************************     00484900
.*                                                                      00485800
         ST    &LV(1),0(0,1)           STORE LENGTH IN LIST             00486800
.*                                                                      00487800
.******************************************************************     00488800
.* Unconditionally branch to CNTO to continue processing                00489800
.******************************************************************     00490800
.*                                                                      00491800
         AGO   .CNTO                                                    00493200
.*                                                                      00494200
.******************************************************************     00495200
.* If the LA value isn't in a register go to CNTN to process            00496200
.******************************************************************     00497200
.*                                                                      00498200
.CNTN    AIF   (NOT &C).CNTO                                            00499600
.*                                                                      00500600
.******************************************************************     00501600
.* Otherwise extract the value and store it in the parameter list       00502600
.******************************************************************     00503600
.*                                                                      00504600
         ST    &LA(1),0(0,1)           STORE LA IN LIST                 00506000
.*                                                                      00507000
.******************************************************************     00508000
.* If A isn't in a register, go to FINI to continue processing          00509000
.******************************************************************     00510000
.*                                                                      00511000
.CNTO    AIF   (NOT &D).FINI                                            00512400
.*                                                                      00513400
.******************************************************************     00514400
.* Extract the A value and store it in the parameter list               00515400
.******************************************************************     00516400
.*                                                                      00517400
         ST    &A(1),4(0,1)            STORE IN PARAM LIST              00518800
.*                                                                      00520000
.******************************************************************     00521200
.* Unconditionally branch to FINI to finish processing                  00522400
.******************************************************************     00523600
.*                                                                      00524800
         AGO   .FINI                                                    00526000
.*                                                                      00526100
.******************************************************************     00526200
.* Internal P type routing - mode of the getmain is P                   00526300
.******************************************************************     00526400
.*                                                                      00526500
.PROUT   ANOP                                                  @Z30EN9G 00526600
.*                                                                      00526700
.******************************************************************     00526800
.* If subpool wasn't specified for this P type, its an error            00526900
.******************************************************************     00527000
.*                                                                      00527100
         AIF   ('&SP' EQ '').ERROR8                            @Z30EN9G 00527200
.*                                                                      00527300
.******************************************************************     00527400
.* If branch  wasn't specified for this P type, its an error            00527500
.******************************************************************     00527600
.*                                                                      00527700
         AIF   ('&BRANCH' EQ '').ERROR8                        @Z30EN9G 00527800
.*                                                                      00527900
.******************************************************************     00528000
.* Branch unconditionally to PROUT1 to continue P type processing       00528100
.******************************************************************     00528200
.*                                                                      00528300
         AGO   .PROUT1                                         @Z30EN9G 00528400
.*                                                                      00528500
.******************************************************************     00528600
.* R-mode GETMAIN (REGMAIN) OR RC, RU, VRC, OR VRU modes @G860P30       00528700
.* If address was specified, its an error. These forms of getmain       00528800
.* do not allow the caller to specify where the address of the          00528900
.* obtained storage should be saved. It is always put in register 1     00529000
.******************************************************************     00529100
.*                                                                      00529200
.RROUT   AIF   ('&A' NE '').ERROR9                                      00529700
.*                                                                      00529900
.******************************************************************     00530100
.* If Length value wasn't specified its an error                        00530300
.******************************************************************     00530500
.*                                                                      00530700
         AIF   ('&LV' EQ '').ERROR8                                     00531400
.*                                                                      00531600
.******************************************************************     00531800
.* If its RC or RU or VRC or VRU mode of getmain go to NREGM            00532000
.* to continue                                                          00532200
.******************************************************************     00532400
.*                                                                      00532600
         AIF   (K'&MODE EQ 2 OR K'&MODE EQ 3).NREGM            @G860P30 00533100
.*                                                                      00533300
.******************************************************************     00533500
.* Else its just a plain R mode which is SVC 10, set that variable      00533700
.******************************************************************     00533900
.*                                                                      00534100
&SVCN    SETA  10                                                       00534800
.*                                                                      00534900
.******************************************************************     00535000
.* If the R mode's length variable is in a register go to ISARGA        00535100
.* to continue processing                                               00535200
.******************************************************************     00535300
.*                                                                      00535400
         AIF   ('&LV'(1,1) EQ '(').ISARGA                               00536000
.*                                                                      00536300
.******************************************************************     00536600
.* If subpool wasn't specified, go to CTUA to continue processing       00536900
.******************************************************************     00537200
.*                                                                      00537500
         AIF   ('&SP' EQ '').CTUA                                       00538000
.*                                                                      00538100
.******************************************************************     00538200
.* P type and R type common code.                                       00538300
.******************************************************************     00538400
.*                                                                      00538500
.PROUT1  ANOP                                                  @Z30EN9G 00539000
.*                                                                      00539100
.******************************************************************     00539200
.* If subpool is in a register, go to ISARGB to continue processing     00539300
.******************************************************************     00539400
.*                                                                      00539500
         AIF   ('&SP'(1,1) EQ '(').ISARGB                               00540000
.*                                                                      00540100
.******************************************************************     00540200
.* Align on a word boundary ( this may be only historical, but I'm      00540300
.* not brave enough to delete it. In the paste the DC AL1 had to        00540400
.* be on a full word boundary for L 0,0(0,1) to work.                   00540500
.******************************************************************     00540600
.*                                                                      00540700
         CNOP  0,4                                                      00540800
.*                                                                      00540900
.******************************************************************     00541000
.* If mode is P go to PMODE to continue processing                      00541100
.* Getmain P gets a cell from VSMs internal cellpool so it never        00541200
.* needs a length.                                                      00541300
.******************************************************************     00541400
.*                                                                      00541500
         AIF   ('&MODE' EQ 'P').PMODE                          @Z30EN9G 00541600
.*                                                                      00541700
.******************************************************************     00541800
.* Fill the subpool value and length value into the parameter           00541900
.* list for the R mode getmain                                          00542000
.******************************************************************     00542100
.*                                                                      00542200
         AIF   (&SYSALVL GT 0).AL1_1A                              @02A 00543100
&NAME    BAL   1,*+8                   BRANCH AROUND SP+LV              00544000
         DC    AL1(&SP)                SUBPOOL VALUE                    00545500
         DC    AL3(&LV)                LENGTH                           00547000
         L     0,0(0,1)                LOAD SP AND LV                   00548500
.*                                                                      00548700
.******************************************************************     00548900
.* Branch unconditionally to FINI to finish                             00549100
.******************************************************************     00549300
.*                                                                      00549500
         AGO   .FINI                                                    00550000
.AL1_1A  ANOP                                                      @02A 00550020
&NAME    L     0,=AL1(&SP,(&LV)/65536,((&LV)-65536*((&LV)/65536))/256,(=00550040
               &LV)-256*((&LV)/256))                                    00550060
         SLR   1,1                     INDICATE GETMAIN            @02A 00550080
         BCTR  1,0                     INDICATE GETMAIN            @02A 00550100
         AGO   .FINI                                               @02A 00550120
.*                                                                      00550200
.******************************************************************     00550400
.* Fill the subpool value into the parameter list and put it where      00550600
.* it needs to go for the P mode getmain                                00550800
.******************************************************************     00551000
.*                                                                      00551200
.PMODE   ANOP                                                  @Z30EN9G 00551500
&NAME    LA    0,&SP.(0,0)             GET SUBPOOL             @Z30EN9G 00553000
         SLL   0,24(0)          SHIFT TO HIGH-ORDER BYTE       @Z30EN9G 00554500
         AIF   (&SYSALVL GT 0).AL1_2A                              @02A 00554700
         BAL   1,*+4            INDICATE GETMAIN               @Z30EN9G 00555000
         AGO   .AL1_2B                                             @02A 00555010
.AL1_2A  ANOP                                                      @02A 00555020
         SLR   1,1                     INDICATE GETMAIN            @02C 00555030
         BCTR  1,0                     INDICATE GETMAIN            @02A 00555040
.AL1_2B  ANOP                                                      @02A 00555050
.*                                                                      00555100
.******************************************************************     00555200
.* Branch unconditionally to FINI to finish                             00555300
.******************************************************************     00555400
.*                                                                      00555500
         AGO   .FINI                                           @Z30EN9G 00556000
.*                                                                      00556100
.******************************************************************     00556200
.* If the Length value isn't checkable (type is not numeric)            00556300
.* branch around the check                                              00556400
.* and go to CTUAA to continue processing.                              00556500
.* Recall that we only get here if no subpool was specified             00556600
.* when a subpool is specified, subpool and length are dealt with       00556700
.* together.                                                            00556800
.******************************************************************     00556900
.*                                                                      00557000
.CTUA    AIF   (T'&LV NE 'N').CTUAA                                     00558000
.*                                                                      00558100
.******************************************************************     00558200
.* If the length is less than a page, go to CONTCC to continue          00558300
.******************************************************************     00558400
.*                                                                      00558500
         AIF   (&LV LE 4095).CONTCC                                     00558600
.*                                                                      00558700
.******************************************************************     00558800
.* Length is a page or more or we can't tell what it is cause it        00558900
.* was specified as a symbol rather than a number, put it into          00559000
.* register 0. This is the "long way" (i.e. can't treat the length      00559100
.* as a displacement.                                                   00559200
.******************************************************************     00559300
.*                                                                      00559400
.CTUAA   ANOP                                                           00560690
         AIF   (&SYSALVL GT 0).AL1_3A                              @02A 00561380
         CNOP  0,4                     ALIGN PARAMETER                  00562070
&NAME    BAL   1,*+8                   BRANCH AROUND LENGTH             00563100
         DC    A(&LV)                  LENGTH                           00566200
         L     0,0(0,1)                LOAD LENGTH                      00569300
.*                                                                      00569800
.******************************************************************     00570300
.* Branch to FINI to finish processing                                  00570800
.******************************************************************     00571300
.*                                                                      00571800
         AGO   .FINI                                                    00572400
.AL1_3A  ANOP                                                      @02A 00572480
&NAME    L     0,=A(&LV)               LOAD LENGTH                 @02A 00572560
         SLR   1,1                     INDICATE GETMAIN            @02A 00572640
         BCTR  1,0                     INDICATE GETMAIN            @02A 00572720
         AGO   .FINI                                               @02A 00572800
.*                                                                      00572900
.******************************************************************     00573400
.* Length is less than a page put it in register 0 (the fast way)       00573900
.******************************************************************     00574400
.*                                                                      00574900
.CONTCC  ANOP                                                           00575500
&NAME    LA    0,&LV.(0,0)             LOAD LENGTH                      00578600
.*                                                                      00579100
.******************************************************************     00579600
.* Branch to NOP2 to continue processing                                00580100
.******************************************************************     00580600
.*                                                                      00581100
         AGO   .NOP2                                                    00582000
.*                                                                      00582200
.******************************************************************     00582400
.* Subpool is in a register. If mode is P then go to PMODE2 to          00582600
.* continue processing                                                  00582800
.******************************************************************     00583000
.*                                                                      00583200
.ISARGB  AIF   ('&MODE' EQ 'P').PMODE2                         @Z30EN9G 00584000
.*                                                                      00584200
.******************************************************************     00584400
.* If the length value isn't checkable, skip the check                  00584600
.* by going to CONTFF                                                   00584800
.******************************************************************     00585000
.*                                                                      00585200
         AIF   (T'&LV NE 'N').CONTFF                           @Z30EN9G 00586000
.*                                                                      00586100
.******************************************************************     00586200
.* If the length value is less than a page, then go to CONTEE           00586300
.* to continue processing                                               00586400
.******************************************************************     00586500
.*                                                                      00586600
         AIF   (&LV LE 4095).CONTEE                                     00586700
.*                                                                      00586800
.******************************************************************     00586900
.* Put the subpool and the length where they belong in register 0.      00587000
.******************************************************************     00587100
.*                                                                      00587200
.CONTFF  ANOP                                                           00588290
         AIF   (&SYSALVL GT 0).AL1_4A                              @02A 00588580
         CNOP  0,4                     ALIGN LENGTH                     00588870
&NAME    BAL   1,*+8                   BRANCH AROUND LENGTH             00589300
         DC    A(&LV)                  LENGTH                           00590600
         LR    0,&SP(1)                GET SUBPOOL                      00591900
         SLL   0,24(0)                 SHIFT TO HI-ORDER BYTE           00593200
         O     0,0(0,1)                PACK SP AND LV                   00594500
.*                                                                      00594700
.******************************************************************     00594900
.* Unconditionally branch to FINI to finish processing                  00595100
.******************************************************************     00595300
.*                                                                      00595500
         AGO   .FINI                                                    00595800
.AL1_4A  ANOP                                                      @02A 00595820
&NAME    LR    0,&SP(1)                GET SUBPOOL                 @02A 00595840
         SLL   0,24(0)                 SHIFT TO HI-ORDER BYTE      @02A 00595860
         O     0,=A(&LV)               PACK SP AND LV              @02A 00595880
         SLR   1,1                     INDICATE GETMAIN            @02A 00595900
         BCTR  1,0                     INDICATE GETMAIN            @02A 00595920
         AGO   .FINI                                               @02A 00595940
.*                                                                      00596000
.******************************************************************     00596200
.* Its P mode and our subpool is in a register                          00596400
.******************************************************************     00596600
.*                                                                      00596800
.PMODE2  ANOP                                                  @Z30EN9G 00597100
.*                                                                      00597200
.******************************************************************     00597300
.* Its P mode and our subpool is in a register                          00597400
.* If its already in register 0, go to pmode3 to make sure its          00597500
.* in the right spot of register 0.                                     00597600
.******************************************************************     00597700
.*                                                                      00597800
         AIF   ('&SP(1)' EQ '0').PMODE3                        @Z30EN9G 00598400
.*                                                                      00598600
.******************************************************************     00598800
.* Else load it into register 0 and put it in the right place           00599000
.******************************************************************     00599200
.*                                                                      00599400
&NAME    LR    0,&SP(1)                GET SUBPOOL             @Z30EN9G 00599700
         CNOP  0,4                     ALIGN INSTR STREAM      @Z30EN9G 00601000
         SLL   0,24(0)                 MOVE TO HIGH BYTE       @Z30EN9G 00602300
         AIF   (&SYSALVL GT 0).AL1_5A                              @02A 00602900
         BAL   1,*+4                   INDICATE GETMAIN        @Z30EN9G 00603600
         AGO   .AL1_5B                                             @02A 00603630
.AL1_5A  ANOP                                                      @02A 00603660
         SLR   1,1                     INDICATE GETMAIN            @02A 00603690
         BCTR  1,0                     INDICATE GETMAIN            @02A 00603720
.AL1_5B  ANOP                                                      @02A 00603750
.*                                                                      00603800
.******************************************************************     00604000
.* Unconditionally branch to FINI to finish processing                  00604200
.******************************************************************     00604400
.*                                                                      00604600
         AGO   .FINI                                           @Z30EN9G 00604900
.*                                                                      00605000
.******************************************************************     00605100
.* Subpool is already in register 0, just make sure its in the          00605200
.* right spot                                                           00605300
.******************************************************************     00605400
.*                                                                      00605500
.PMODE3  ANOP                                                  @Z30EN9G 00606200
         CNOP  0,4                                             @Z30EN9G 00607500
&NAME    SLL   0,24(0)                 MOVE TO HIGH BYTE       @Z30EN9G 00608800
         AIF   (&SYSALVL GT 0).AL1_6A                              @02A 00609400
         BAL   1,*+4                   INDICATE GETMAIN        @Z30EN9G 00610100
         AGO   .AL1_6B                                             @02A 00610130
.AL1_6A  ANOP                                                      @02A 00610160
         SLR   1,1                     INDICATE GETMAIN            @02A 00610190
         BCTR  1,0                     INDICATE GETMAIN            @02A 00610220
.AL1_6B  ANOP                                                      @02A 00610250
.*                                                                      00610300
.******************************************************************     00610500
.* Unconditionally branch to FINI to finish processing                  00610700
.******************************************************************     00610900
.*                                                                      00611100
         AGO   .FINI                                           @Z30EN9G 00611400
.*                                                                      00611500
.******************************************************************     00611600
.* Length value is less than a page, get subpool and length and         00611700
.* put them where they belong in register 1.                            00611800
.******************************************************************     00611900
.*                                                                      00612000
.CONTEE  ANOP                                                           00612700
&NAME    LR    0,&SP(1)                PICK UP SUBPOOL                  00614000
         SLL   0,24(0)                 SHIFT TO HIGH BYTE               00615300
         LA    1,&LV.(0,0)             LOAD LENGTH                      00616600
         OR    0,1                     PACK SP AND LV                   00617900
.*                                                                      00618200
.******************************************************************     00618500
.* Unconditionally branch to NOP2 to finish processing                  00618800
.******************************************************************     00619100
.*                                                                      00619400
         AGO   .NOP2                                                    00620000
.*                                                                      00620500
.******************************************************************     00621000
.* Processing R-mode getmain.                                           00621500
.* The length variable is in a register. If that register is 0          00622000
.* then go to ZEROUT                                                    00622500
.******************************************************************     00623000
.*                                                                      00623500
.ISARGA  AIF   ('&LV(1)' EQ '0').ZEROUT                                 00624000
.*                                                                      00624200
.******************************************************************     00624400
.* If subpool wasn't specified then go to CTUB to continue              00624600
.* processing                                                           00624800
.******************************************************************     00625000
.*                                                                      00625200
         AIF   ('&SP' EQ '').CTUB                                       00626000
.*                                                                      00626200
.******************************************************************     00626400
.* If subpool is also in a register then go to ISARGC to continue       00626600
.* processing                                                           00626800
.******************************************************************     00627000
.*                                                                      00627200
         AIF   ('&SP'(1,1) EQ '(').ISARGC                               00628000
.*                                                                      00628100
.******************************************************************     00628200
.* Otherwise, subpool is right there for the taking, and the length     00628300
.* is already in a register other than 0, so take the subpool put       00628400
.* it in register 0 and or in the length                                00628500
.******************************************************************     00628600
.*                                                                      00628700
.*                                                                      00628800
.******************************************************************     00628900
.* Note that setting register 1 to a value less than 0 tells the        00629000
.* service routine that this is a getmain.                              00629100
.******************************************************************     00629200
.*                                                                      00629300
&NAME    LA    0,&SP.(0,0)             PICK UP SUBPOOL                  00630000
.NOP1    SLL   0,24(0)                 SHIFT TO HIGH BYTE               00634000
         OR    0,&LV(1)                PACK SP AND LV                   00638000
.NOP2    ANOP                                                           00642050
         AIF   (&SYSALVL GT 0).AL1_7A                              @02A 00642100
         BAL   1,*+4                   INDICATE GETMAIN        @Z30EN9G 00642150
         AGO   .AL1_7B                                             @02A 00642200
.AL1_7A  ANOP                                                      @02A 00642250
         SLR   1,1                     INDICATE GETMAIN            @02A 00642300
         BCTR  1,0                     INDICATE GETMAIN            @02A 00642350
.AL1_7B  ANOP                                                      @02A 00642400
.*                                                                      00642600
.******************************************************************     00643200
.* Unconditionally branch to FINI to finish processing                  00643800
.******************************************************************     00644400
.*                                                                      00645000
         AGO   .FINI                                                    00646000
.*                                                                      00646500
.******************************************************************     00647000
.* Subpool wasn't specified, so just start dealing with the Length      00647500
.* (Its in a register)                                                  00648000
.* Put the length where it belongs in register 0                        00648500
.******************************************************************     00649000
.*                                                                      00649500
.CTUB    ANOP                                                           00650000
&NAME    LR    0,&LV(1)                LOAD LENGTH                      00654000
.*                                                                      00654600
.******************************************************************     00655200
.* Unconditionally branch to NOP2 to continue processing                00655800
.******************************************************************     00656400
.*                                                                      00657000
         AGO   .NOP2                                                    00658000
.*                                                                      00658500
.******************************************************************     00659000
.* Both length and subpool were given in a register. Put the subpool    00659500
.* in register 0 and                                                    00660000
.* branch back up to NOP1 to continue processing                        00660500
.******************************************************************     00661000
.*                                                                      00661500
.ISARGC  ANOP                                                           00662000
&NAME    LR    0,&SP(1)                PICK UP SUBPOOL                  00666000
         AGO   .NOP1                                                    00670000
.*                                                                      00670500
.******************************************************************     00671000
.* Processing R-mode getmain                                            00671500
.* The length variable is already in register 0.  If subpool            00672000
.* was specified, its an error.                                         00672500
.******************************************************************     00673000
.*                                                                      00673500
.ZEROUT  AIF   ('&SP' NE '').ERROR0                                     00674000
         AIF   (&SYSALVL GT 0).AL1_8A                              @02A 00678090
&NAME    BAL   1,*+4                   INDICATE GETMAIN        @Z30EN9G 00678180
         AGO   .AL1_8B                                             @02A 00678270
.AL1_8A  ANOP                                                      @02A 00678360
&NAME    SLR   1,1                     INDICATE GETMAIN            @02A 00678450
         BCTR  1,0                     INDICATE GETMAIN            @02A 00678540
.AL1_8B  ANOP                                                      @02A 00678630
.*                                                                      00678800
.******************************************************************     00679600
.* Unconditionally branch to FINI to finish processing                  00680400
.******************************************************************     00681200
.*                                                                      00682000
         AGO   .FINI                                                    00682800
.*                                                                      00683000
.******************************************************************     00683200
.* SVC 120 Getmain (RC, RU, VRC and VRU)                                00683400
.******************************************************************     00683600
.*                                                                      00683800
.NREGM   ANOP    RC AND RU modes OF GETMAIN                             00684000
&SVCN    SETA  120                SET THE SVC NUMBER                    00684200
.*                                                                      00684400
.******************************************************************     00684600
.* Set a variable to indicate whether this is an SVC 120 condional      00684800
.* request or an unconditional one. &UNCND will be on for               00685000
.* unconditional requests                                               00685200
.******************************************************************     00685400
.*                                                                      00685600
&UNCND   SETB  ('&MODE' EQ 'RU' OR '&MODE' EQ 'VRU') CONDL FLAG         00686000
.*                                                                      00686200
.******************************************************************     00686400
.* If its not branch entry go to COND to contiue processing             00686600
.******************************************************************     00686800
.*                                                                      00687000
         AIF   (NOT &BR).COND     CHECK FOR BRANCH ENTRY TO GETMAIN     00687200
.*                                                                      00687400
.******************************************************************     00687600
.* For branch entry getmain the parameter register should be 3.         00687800
.******************************************************************     00688000
.*                                                                      00688200
&PRG     SETA  3                  SET PARAMETER REG FOR BRANCH ENTRY    00688400
.*                                                                      00688600
.******************************************************************     00688800
.* If subpool wasn't specified then go to CREG1 to continue             00689000
.******************************************************************     00689200
.*                                                                      00689400
.COND    AIF   ('&SP' EQ '').CREG1                                      00690000
.*                                                                      00690100
.******************************************************************     00690200
.* Set a variable to indicate if the subpool is in a register           00690300
.******************************************************************     00690400
.*                                                                      00690500
&SPREG   SETB  ('&SP'(1,1) EQ '(')                                      00690600
.*                                                                      00690700
.******************************************************************     00690800
.* If key wasn't specified, then go to CREG01 to continue processing    00690900
.******************************************************************     00691000
.*                                                                      00691100
.CREG1   AIF   ('&KEY' EQ '').CREG01                                    00691200
.*                                                                      00691300
.*                                                            @P1D      00691600
.*                                                                      00691900
.******************************************************************     00692000
.* Set a variable to indicate if the key is in a register               00692100
.******************************************************************     00692200
.*                                                                      00692300
&KEYRG   SETB  ('&KEY'(1,1) EQ '(')                                     00692400
.CREG01  ANOP                                                           00692500
.*                                                                      00692600
.******************************************************************     00692700
.* Initialize these variables to 0                                      00692800
.******************************************************************     00692900
.*                                                                      00693000
&RL      SETB  0                                               @G860P30 00693100
&VA      SETB  0                                               @G860P30 00693200
&VB      SETB  0                                               @G860P30 00693800
&EXPL    SETB  0                                                   @L4A 00693900
&RLB     SETB  0                                                   @L4A 00694000
.*                                                                      00694100
.******************************************************************     00694200
.* If LOC wasn't supplied, then go to BYLOC1 to continue processing.    00694300
.* note that Not supplied and Resident are the same.                    00694400
.******************************************************************     00694500
.*                                                                      00694600
         AIF   ('&LOC' EQ '').BYLOC1 NOT SUPPL & RES ARE SAME  @G860P30 00694900
.*                                                                      00695000
.******************************************************************     00695100
.* Remember if EXPLICIT was specified as the first operand         @L4A 00695200
.******************************************************************     00695300
.*                                                                      00695400
&EXPL    SETB  ('&LOC(1)' EQ 'EXPLICIT')                           @L4A 00695500
.*                                                                      00695600
.******************************************************************     00695700
.* Ensure that INADDR was specified if first LOC parm is EXPLICIT  @L4A 00695800
.******************************************************************     00695900
.*                                                                      00696000
         AIF   (&EXPL AND '&INADDR' EQ '').ERROR39                 @P3C 00696100
.*                                                                      00696200
.******************************************************************     00696300
.* If more than 2 suboperands were given for LOC, its an error.         00696400
.* Go to Error20 to issue the nastygram.                                00696500
.******************************************************************     00696600
.*                                                                      00696700
         AIF   (N'&LOC GT 2).ERROR20 TWO SUBOPS MAX            @G860P30 00696800
.*                                                                      00696900
.******************************************************************     00697000
.* If only one suboperand was given, go to Byloc2 to continue           00697100
.* processing. They have taken the default of ANY for the second.       00697200
.******************************************************************     00697300
.*                                                                      00697400
         AIF   (N'&LOC EQ 1).BYLOC2                            @G860P30 00697500
.*                                                                      00697600
.******************************************************************     00697700
.* Since the second operand was specified, it must be 31           @L4C 00697800
.* or 64, or if                                                    @L6C 00697900
.* the first operand is EXPLICIT, it can be 24. Issue              @L4A 00698000
.* an error message if its not.                                         00698100
.******************************************************************     00698200
.*                                                                      00698300
         AIF   ('&LOC(2)' EQ 'ANY' OR                                  *00698400
                '&LOC(2)' EQ '31' OR                                   *00698500
                '&LOC(2)' EQ '64').OK21                                 00698600
         AIF   (NOT &EXPL).ERROR21                                 @L6C 00698700
         AIF  ('&LOC(2)' NE 'BELOW' AND '&LOC(2)' NE '24').ERROR21 @L6C 00698800
.OK21    ANOP                                                           00698900
.*                                                                      00699000
.******************************************************************     00699100
.* Caller specified LOC with a second parameter. Remember          @L4C 00699200
.* which one was specified.                                        @L4C 00699300
.******************************************************************     00699400
.*                                                                      00699500
&RL      SETB  (('&LOC(2)' EQ 'ANY') OR ('&LOC(2)' EQ '31') OR         *00699600
               ('&LOC(2)' EQ '64'))                                @L6C 00699700
&RLB     SETB  ('&LOC(2)' EQ 'BELOW' OR '&LOC(2)' EQ '24')         @L6C 00699800
&RL64    SETB  ('&LOC(2)' EQ '64')                                 @L6A 00699900
.*                                                                      00700000
.******************************************************************     00700100
.* If a valid choice for the first loc suboperand wasn't given then     00700200
.* issue an error message.                                              00700300
.******************************************************************     00700400
.*                                                                      00700500
.BYLOC2  AIF   ('&LOC(1)' NE 'ANY' AND '&LOC(1)' NE '31' AND           *00700600
               '&LOC(1)' NE 'BELOW' AND                                *00700700
               '&LOC(1)' NE '24' AND                                   *00700800
               '&LOC(1)' NE 'RES' AND                                  *00700900
               '&LOC(1)' NE 'EXPLICIT').ERROR22                    @L4C 00701200
.*                                                                      00701600
.******************************************************************     00701700
.* Set the virtual location bits. The combinations are based on the     00701800
.* first LOC operand as follows:                                        00701900
.* RES - 00                                                             00702000
.* 24  - 01                                                             00702100
.* EXPLICIT - 10                                                        00702200
.* 31 - 11                                                              00702300
.******************************************************************     00702400
.*                                                                      00702500
&VA      SETB  ('&LOC(1)' EQ 'ANY' OR &EXPL OR '&LOC(1)' EQ '31')      *00702700
                                                                   @L6C 00702900
&VB      SETB  ('&LOC(1)' EQ 'BELOW' OR '&LOC(1)' EQ 'ANY' OR          *00703100
               '&LOC(1)' EQ '31' OR '&LOC(1)' EQ '24')             @L6C 00703400
.*                                                                      00703800
.******************************************************************     00703900
.* Caller wants real 'anywhere' if they specified LOC=(xxx,31) or       00704000
.* LOC=(31).                                                            00704100
.* Caller wants real 24 if they specified LOC=(24) or                   00704200
.* LOC=(EXPLICIT,24). (Note, at this point, variable &RL is 1 if        00704300
.* a second operand of 31 was specified.                                00704400
.* &RLB is 1 if a second operand                                        00704500
.* of 24 was specified)                                            @L4C 00704600
.******************************************************************     00704700
.*                                                                      00705200
&RL      SETB  (&RL OR '&LOC(1)' EQ 'ANY' OR '&LOC(1)' EQ '31' OR      *00705400
               ('&LOC(1)' EQ 'EXPLICIT' AND NOT &RLB))             @L6C 00705600
.BYLOC1  ANOP                                                  @G860P30 00705900
.*                                                                      00706000
.******************************************************************     00706100
.* Check INADDR parameter                                          @L4A 00706200
.*   EXPLICIT must have been specified for LOC                     @L4A 00706300
.*   GLOBAL branch entry is not allowed                            @L4A 00706400
.*   BNDRY is not allowed                                          @L4A 00706500
.*   OWNER is not allowed                                          @L4A 00706600
.* Also, remember if INADDR is in a register                       @L4A 00706700
.******************************************************************     00706800
.*                                                                      00706900
         AIF   ('&INADDR' EQ '').NOINADR                           @L4A 00707000
         AIF   ('&LOC' EQ '').ERROR32                              @P3A 00707100
         AIF   (NOT &EXPL).ERROR35                                 @P3C 00707200
         AIF   (&GLBR).ERROR36                                     @L4A 00707300
         AIF   ('&BNDRY' NE '').ERROR37                            @L4A 00707400
         AIF   ('&OWNER' NE '').ERROR38                            @P3A 00707500
&INAREG  SETB  ('&INADDR'(1,1) EQ '(')                             @L4A 00707600
.NOINADR ANOP                                                      @L4A 00707700
.*                                                                      00707800
.******************************************************************     00707900
.* If both the subpool and key are in registers, set a bit              00708000
.******************************************************************     00708100
.*                                                                      00708200
&B       SETB  (&SPREG AND &KEYRG)                                      00708300
.*                                                                      00708400
.******************************************************************     00708500
.* Go to PASS1 to do 2 character mode processing                        00708600
.******************************************************************     00708700
.*                                                                      00708800
         AIF   (K'&MODE EQ 2).PASS1                            @G860P30 00708900
.*                                                                      00709000
.******************************************************************     00709100
.* VRC and VRU mode request processing                                  00709200
.******************************************************************     00709300
.*                                                                      00709400
.*                                                                      00709500
.******************************************************************     00709600
.* We need a max and a min, if we don't have both, issue an             00709700
.* error message.                                                       00709800
.******************************************************************     00709900
.*                                                                      00710000
         AIF   (N'&LV NE 2).ERROR30                            @G860P30 00710300
.*                                                                      00710400
.******************************************************************     00710500
.* Set the variable MAX to contain the maximum                          00710600
.******************************************************************     00710700
.*                                                                      00710800
&MAX     SETC  '&LV(1)'                                        @G860P30 00711400
.*                                                                      00711500
.******************************************************************     00711600
.* Set the variable MIN to contain the minimum                          00711700
.******************************************************************     00711800
.*                                                                      00711900
&MIN     SETC  '&LV(2)'                                        @G860P30 00712500
.*                                                                      00712600
.******************************************************************     00712700
.* Max is required!!!!!!!!!!                                            00712800
.******************************************************************     00712900
.*                                                                      00713000
         AIF   ('&MAX' EQ '').ERROR31 MAXIMUM IS REQUIRED      @G860P30 00713600
.*                                                                      00713700
.******************************************************************     00713800
.* Set a bit to indicate if the Maximum was given in a register         00713900
.******************************************************************     00714000
.*                                                                      00714100
&MAXRG   SETB  ('&MAX'(1,1) EQ '(')   MAX IN A REG             @G860P30 00714700
.*                                                                      00714800
.******************************************************************     00714900
.* Minimum can be defaulted                                             00715000
.******************************************************************     00715100
.*                                                                      00715200
         AIF   ('&MIN' EQ '').PASS2   MINIMUM CAN BE DEFAULTED @G860P30 00715800
.*                                                                      00715900
.******************************************************************     00716000
.* Set a bit to indicate if the Minimum was given in a register         00716100
.******************************************************************     00716200
.*                                                                      00716300
&MINRG   SETB  ('&MIN'(1,1) EQ '(')   MINIMUM IN A REG         @G860P30 00716900
.*                                                                      00717000
.******************************************************************     00717100
.* Branch unconditionally to PASS3 to continue processing               00717200
.******************************************************************     00717300
.*                                                                      00717400
         AGO   .PASS3                                          @G860P30 00718000
.*                                                                      00718100
.******************************************************************     00718200
.* Set up default for the minimum as 8 bytes not specified in a         00718300
.* register                                                             00718400
.******************************************************************     00718500
.*                                                                      00718600
.PASS2   ANOP                                                  @G860P30 00719100
&MIN     SETC  '8'                DEFAULT MINIMUM LENGTH       @G860P30 00720200
&MINRG   SETB  0                  MIN NOT IN A REG             @G860P30 00720300
.*                                                                      00720400
.******************************************************************     00720500
.* Generate code to branch past the static storage we will need to      00720600
.* move items from where the caller put them to where the getmain       00720700
.* service routine expects to find them. The most we will need is       00720800
.* 16 bytes. We don't need static storage for some items if they        00720900
.* are already in registers. For example, If the max length is in       00721000
.* a register already, we only need 16-4 bytes. If the minimum size     00721100
.* is also in a register, we will only need 16-4-4 bytes.               00721200
.******************************************************************     00721300
.*                                                                      00721400
.PASS3   CNOP  0,4                ALIGN DATA ON FULLWORD BDY   @G860P30 00722400
&NAME    B     &GNAME.C           BRANCH PAST DATA                 @L6C 00723000
.*                                                                      00723600
.******************************************************************     00723700
.* Start to generate static storage area that we need to move input     00723800
.* Data from where caller provides it to where getmain expects it       00723900
.******************************************************************     00724000
.*                                                                      00724100
.*                                                                      00724200
.******************************************************************     00724300
.* If the maximum is in a reg, go to PASS4                              00724400
.******************************************************************     00724500
.*                                                                      00724600
         AIF   (&MAXRG).PASS4     MAX IN A REG                 @G860P30 00724700
.*                                                                      00724800
.******************************************************************     00724900
.* Else the max was specified directly, just take it.                   00725000
.******************************************************************     00725100
.*                                                                      00725200
&GNAME.VMX DC  A(&MAX)            MAXIMUM LENGTH               @G860P30 00725500
.*                                                                      00725800
.******************************************************************     00725900
.* If the minimum is in a reg, go to PASS5                              00726000
.******************************************************************     00726100
.*                                                                      00726200
.PASS4   AIF   (&MINRG).PASS5     MIN IN A REG                 @G860P30 00726800
.*                                                                      00726900
.******************************************************************     00727000
.* Else the min was specified directly, just take it.                   00727100
.******************************************************************     00727200
.*                                                                      00727300
&GNAME.VMN DC  A(&MIN)            MINIMUM LENGTH               @G860P30 00727600
.*                                                                      00728000
.******************************************************************     00728100
.* Processing is complete for the VRU and VRC modes, go to CREG11       00728200
.******************************************************************     00728300
.*                                                                      00728400
.PASS5   AGO   .CREG11            PROCESSING COMPLETED         @G860P30 00729000
.PASS1   ANOP                     HANDLE RC/RU modes           @G860P30 00729400
.*                                                                      00729800
.******************************************************************     00730200
.* RC and RU request processing                                         00730600
.******************************************************************     00731000
.*                                                                      00731400
.*                                                                      00731800
.******************************************************************     00732200
.* If the length variable is in a register, set a bit to indicate       00732600
.* that                                                                 00733000
.******************************************************************     00733400
.*                                                                      00733800
&LVREG   SETB  ('&LV'(1,1) EQ '(')                                      00734800
.*                                                                      00735000
.******************************************************************     00735200
.* Align data on a fullword boundary                                    00735400
.******************************************************************     00735600
.*                                                                      00735800
         CNOP  0,4                                                      00736000
&NAME    B     &GNAME.C           BRANCH AROUND DATA                    00736600
.*                                                                      00737300
.******************************************************************     00737400
.* If the length variable is in a register, then go to CREG11 to        00737500
.* continue processing.                                                 00737600
.******************************************************************     00737700
.*                                                                      00737800
         AIF   (&LVREG).CREG11                                          00738400
.*                                                                      00738600
.******************************************************************     00738800
.* Else, just extract the length                                        00739000
.******************************************************************     00739200
.*                                                                      00739400
&GNAME.L DC    A(&LV)             LENGTH                                00740100
.CREG11  ANOP                                                           00740800
.*                                                                      00742200
.******************************************************************     00742400
.* If the key was not specified, refrain from setting the bit           00742500
.* that says it was specified.                                          00742600
.******************************************************************     00742700
.*                                                                      00742800
         AIF   ('&KEY' EQ '').NOKEY1                           @P1A     00742900
.*                                                                      00743000
.******************************************************************     00743100
.* Key was specified, so remember it.  (This makes it easy to           00743200
.* give the 'key-specified' bit the proper value in a DC                00743300
.* instruction.)                                               @P1C     00743400
.******************************************************************     00743500
.*                                                                      00743600
&KYSPC   SETB 1                                                @L2A     00743700
.NOKEY1  ANOP                                                  @P1A     00743800
.*                                                                      00743900
.******************************************************************     00744000
.* Start generating a 'pseudo parmlist' in the invoking                 00744100
.* program's static storage.  Register 15 will eventually be            00744200
.* loaded with the values contained here.                      @P1C     00744300
.******************************************************************     00744400
.*                                                                      00744500
&GNAME.F DC    BL1'0&KYSPC.&BAR15&RL64&CHKZ.0&BOWN.' Flags.        @L7C 00744600
.*                                                                      00744700
.******************************************************************     00744800
.* If key wasn't specified, then we set aside space for it so we can    00744900
.* easily load up register 15 later.                                    00745000
.******************************************************************     00745100
.*                                                                      00745200
         AIF   ('&KEY' EQ '').CREG1A  KEY OMITTED                       00745300
.*                                                                      00745400
.******************************************************************     00745500
.* If key is in a register, we do not set aside any space for it.       00745600
.* We do this because later we will put the key in the 2d byte of       00745700
.* reg 15 (xx xK xx xx), and then use an ICM instruction to fill in     00745800
.* the other bytes ( BB xK BB BB).  The ICM moves 3 contigious          00745900
.* bytes from storage to the register, so we don't want to set          00746000
.* aside any space for the key.                                         00746100
.******************************************************************     00746200
.*                                                                      00746300
         AIF   (&KEYRG).CREG1B    KEY IN REGISTER                       00746400
.*                                                                      00746500
.******************************************************************     00746600
.* Otherwise key was given, just take it and move the 4-bit key         00746700
.* to the high nibble.                                                  00746800
.******************************************************************     00746900
.*                                                                      00747000
         DC    AL1(&KEY*16)       STORAGE KEY                           00747100
.*                                                                      00747200
.******************************************************************     00747300
.* We are all done with the key, move on to the next parameter.         00747400
.******************************************************************     00747500
.*                                                                      00747600
         AGO   .CREG1B                                                  00747700
.*                                                                      00747800
.******************************************************************     00747900
.* Reserve the space that the key would have taken up                   00748000
.******************************************************************     00748100
.*                                                                      00748200
.CREG1A  DC    AL1(0)             RESERVED                              00748300
.*                                                                      00748400
.******************************************************************     00748500
.* If subpool wasn't specified then go to SPNULL1 to continue           00748600
.******************************************************************     00748800
.*                                                                      00749000
.CREG1B  AIF   ('&SP' EQ '').SPNULL1  SUBPOOL OMITTED                   00749200
.*                                                                      00749400
.******************************************************************     00749600
.* If subpool is in a register go to CREG1C to continue                 00749800
.******************************************************************     00750000
.*                                                                      00750200
         AIF   (&SPREG).CREG1C    SUBPOOL IN REGISTER                   00750400
.*                                                                      00750600
.******************************************************************     00750800
.* Else its just right there for the taking                             00751000
.******************************************************************     00751200
.*                                                                      00751400
         DC    AL1(&SP)           SUBPOOL                               00751600
.*                                                                      00751800
.******************************************************************     00752000
.* Unconditionally branch to CREG1C                                     00752200
.******************************************************************     00752400
.*                                                                      00752600
         AGO   .CREG1C                                                  00752800
.*                                                                      00753000
.******************************************************************     00753200
.* Reserve the space that the subpool would have taken up.              00753400
.******************************************************************     00753600
.*                                                                      00753800
.SPNULL1 DC    AL1(0)             SUBPOOL                               00754000
.*                                                                      00754200
.******************************************************************     00754400
.* Fill in the mode byte                                                00754600
.******************************************************************     00754800
.*                                                                      00755000
.CREG1C  DC    BL1'0&RL&VA&VB&V&BND&UNCND.0' MODE BYTE         @G860P30 00755200
.*                                                                      00755300
.********************************************************************** 00755400
.*     GENERATE CODE TO SET UP ACCESS REGISTER 15                       00755500
.********************************************************************** 00755600
.*                                                                      00755700
         AIF   ('&BAR15' EQ '0').NOAR15                            @L7A 00755800
.A15BYTE0 ANOP                                                          00755900
           DS   0F                           .ALIGN                @L7A 00756000
&GNAME.A15 DC   BL1'00000000'                .FLAGS                @L7A 00756100
         AIF   ('&ICBDY' EQ '').A15BYTE1A    If CBDY, branch       @L7A 00756200
         AIF   ('&ICBDY'(1,1) EQ '(').A15BYTE1A if reg, branch     @L7A 00756300
         AIF   (T'&ICBDY EQ 'N').A15BYTE1    Numeric               @L7A 00756400
.A15BYTE1A ANOP                                                         00756500
         DC    AL1(0)                        .No CBDY              @L7A 00756600
         AGO   .A15BYTE2                                           @L7A 00756700
.A15BYTE1 ANOP                                                          00756800
         DC    AL1(&ICBDY)                   .CBDY                      00756900
.A15BYTE2 ANOP                                                          00757000
         AIF   ('&ISBDY' EQ '').A15BYTE2A1   If SBDY, branch       @L7A 00757100
         AIF   ('&ISBDY'(1,1) EQ '(').A15BYTE2A1 if reg, branch    @L7A 00757200
         AIF   (T'&ISBDY EQ 'N').A15BYTE2A   Numeric               @L7A 00757300
.A15BYTE2A1 ANOP                                                        00757400
         DC    AL1(0)                        .No SBDY              @L7A 00757500
         AGO   .A15BYTE3                                           @L7A 00757600
.A15BYTE2A ANOP                                                         00757700
         DC    AL1(&ISBDY)                   .SBDY                      00757800
.A15BYTE3 ANOP                                                          00757900
         DC    BL1'000000&BCBDY&BSBDY.'      .FLAGS                @L7A 00758000
.*                                                                      00758100
.********************************************************************** 00758200
.*     GENERATE CODE TO SET UP ACCESS REGISTER 15                       00758300
.********************************************************************** 00758400
.*                                                                      00758500
.NOAR15  ANOP                                                      @L7A 00758600
&GNAME.C DS     0H                                                      00758700
.* We can just load the value we formed if there are no dynamic    @L7A 00758800
.* specifications of cbdy/sbdy                                     @L7A 00758900
         AIF   ('&BAR15' EQ '0').NOAR15A                           @L7A 00759000
         AIF   ('&ISBDY' EQ '').CKAR15A                            @L7A 00759100
         AIF   ('&ISBDY'(1,1) EQ '(').AR15B     if reg, branch     @L7A 00759200
         AIF   (T'&ISBDY NE 'N').AR15B                             @L7A 00759300
.CKAR15A ANOP                                                      @L7A 00759400
         AIF   ('&ICBDY' EQ '').DOAR15A                            @L7A 00759500
         AIF   ('&ICBDY'(1,1) EQ '(').AR15B     if reg, branch     @L7A 00759600
         AIF   (T'&ICBDY NE 'N').AR15B                             @L7A 00759700
.DOAR15A ANOP                                                      @L7A 00759800
         LAM   15,15,&GNAME.A15                .SET ACCESS REGISTER 15  00759900
.*                                                                 @L7A 00760000
         AGO   .NOAR15A                                            @L7A 00760100
.* When there was a dynamic specification of cbdy/sbdy, we must    @L7A 00760200
.* process each individually                                       @L7A 00760300
.AR15B   ANOP                                                      @L7A 00760400
         L     14,&GNAME.A15                 .SET GPR 14           @L7A 00760500
         AIF   ('&ISBDY' EQ '').AR15B1                             @L7A 00760600
         AIF   ('&ISBDY'(1,1) EQ '(').AR15B1R  Check for "(n)"     @L7A 00760700
         AIF   (T'&ISBDY EQ 'N').AR15B1                            @L7A 00760800
         SLR   15,15                         .clear work reg       @L7A 00760900
         IC    15,&ISBDY                     .move to work reg     @L7A 00761000
         AGO   .AR15B1R1                                           @L7A 00761100
.AR15B1R ANOP                                                      @L7A 00761200
         LR    15,&ISBDY1                    .move to work reg     @L7A 00761300
.AR15B1R1 ANOP                                                     @L7A 00761400
         SLL   15,8                          .Shift to 16-23       @L7A 00761500
         OR    14,15                         .Put into GPR         @L7A 00761600
.AR15B1  ANOP                                                      @L7A 00761700
         AIF   ('&ICBDY' EQ '').AR15B2                             @L7A 00761800
         AIF   ('&ICBDY'(1,1) EQ '(').AR15B2R   Check for "(n)"    @L7A 00761900
         AIF   (T'&ICBDY EQ 'N').AR15B2                            @L7A 00762000
         SLR   15,15                         .Clear work reg       @L7A 00762100
         IC    15,&ICBDY                     .Put into work reg    @L7A 00762200
         AGO   .AR15B2R1                                           @L7A 00762300
.AR15B2R ANOP                                                      @L7A 00762400
         LR    15,&ICBDY1                    .Move to work reg     @L7A 00762500
.AR15B2R1 ANOP                                                     @L7A 00762600
         SLL   15,16                         .Shift to 8-15        @L7A 00762700
         OR    14,15                         .Put into GPR         @L7A 00762800
.AR15B2  ANOP                                                      @L7A 00762900
         SAR   15,14                         .SET AR 15            @L7A 00763000
.NOAR15A ANOP                                                      @L7A 00763100
.*                                                                      00763200
         AIF   (K'&MODE EQ 2).PASS6                            @G860P30 00763300
.*                                                                      00763400
.******************************************************************     00763500
.* Handle VRC and VRU length operand                                    00763600
.******************************************************************     00763700
.*                                                                      00763800
.*                                                                      00763900
.******************************************************************     00764000
.* If both max and min are in registers go to PASS10                    00764100
.******************************************************************     00764200
.*                                                                      00764300
         AIF   (&MAXRG AND &MINRG).PASS10                      @G860P30 00764400
.*                                                                      00764500
.******************************************************************     00764600
.* If either max or min is in a register go to PASS7                    00764700
.******************************************************************     00764800
.*                                                                      00764900
         AIF   (&MAXRG OR &MINRG).PASS7                        @G860P30 00765000
.*                                                                      00765100
.******************************************************************     00765200
.* Neither maximum length nor minimum length are in regs                00765300
.******************************************************************     00765400
.*                                                                      00765500
         LM    0,1,&GNAME.VMX     LOAD MAX AND MIN LENGTHS         @L7C 00765600
         AGO   .PASS9             DONE                         @G860P30 00765700
.*                                                                      00765800
.******************************************************************     00765900
.* Both maximum length and minimum length are in regs                   00766000
.******************************************************************     00766100
.*                                                                      00766200
.PASS10  AIF   ('&MAX' EQ '(0)').PASS11                        @G860P30 00766300
         LR    0,&MAX             LOAD MAXIMUM LENGTH          @G860P30 00766400
.PASS11  AIF   ('&MIN' EQ '(1)').PASS9                         @G860P30 00766500
         LR    1,&MIN             LOAD MINIMUM LENGTH          @G860P30 00766600
         AGO   .PASS9             DONE                         @G860P30 00766700
.*                                                                      00766800
.******************************************************************     00766900
.* Either the maximum or minimum length are in regs                     00767000
.******************************************************************     00767100
.*                                                                      00767200
.PASS7   AIF   (&MAXRG).PASS8                                  @G860P30 00767300
         L     0,&GNAME.VMX       LOAD MAXIMUM LENGTH          @G860P30 00767400
         AIF   ('&MIN' EQ '1').PASS9   MIN IN RIGHT REG        @G860P30 00767500
         LR    1,&MIN             LOAD MINIMUM LENGTH          @G860P30 00767600
         AGO   .PASS9                                          @G860P30 00767700
.PASS8   L     1,&GNAME.VMN       LOAD MINIMUM LENGTH              @03C 00767840
         AIF   ('&MAX' EQ '0').PASS9                           @G860P30 00767900
         LR    0,&MAX             LOAD MAXIMUM LENGTH          @G860P30 00768400
.PASS9   AGO   .CREG1M                                             @L4C 00769000
.PASS6   ANOP                                                  @G860P30 00769600
.*                                                                      00769700
.******************************************************************     00769800
.* Handle the length parameter for RC and RU modes.  If the length was  00769900
.* passed in a register go to CREG1Z to continue processing             00770000
.******************************************************************     00770100
.*                                                                      00770200
         AIF   (&LVREG).CREG1Z                                     @L4C 00770800
         L     0,&GNAME.L         LOAD LENGTH                           00772000
         AGO   .CREG1M                                             @L4C 00773200
.*                                                                      00773300
.******************************************************************     00773400
.* Get the length variable out of the register it was given in and      00773500
.* put it in register 0.                                                00773800
.******************************************************************     00774100
.*                                                                      00774400
.CREG1Z  AIF   ('&LV(1)' EQ '0').CREG1M                            @L4C 00774700
         LR    0,&LV(1)           LOAD LENGTH                  @ZA07133 00775000
.*                                                                      00775300
.******************************************************************     00775600
.* If INADDR specified, load the input address into register 1     @L4A 00775900
.******************************************************************     00776200
.*                                                                      00776500
.CREG1M  AIF   ('&INADDR' EQ '').CREG1D                            @L4A 00776800
         AIF   (&INAREG).CREG1L                                    @L4A 00777100
         L     1,&INADDR(1)       LOAD INPUT ADDRESS               @L4A 00777400
         AGO   .CREG1D                                             @L4A 00777700
.CREG1L  ANOP                                                      @L4A 00778000
         AIF   ('&INADDR(1)' EQ '1').CREG1D                        @L4A 00778300
         LR    1,&INADDR(1)       LOAD INPUT ADDRESS               @L4A 00778600
.*                                                                      00778900
.******************************************************************     00779200
.* If either the key or the subpool was                                 00779500
.* specified in a register, go to KORSREG to continue processing        00779800
.******************************************************************     00780100
.*                                                                      00780400
.CREG1D  AIF   (&KEYRG OR &SPREG).KORSREG                               00783000
.*                                                                      00783700
.******************************************************************     00784400
.* Neither key or subpool is in a register, so just load all of         00785100
.* the getmain parameters into the parameter register.                  00785800
.******************************************************************     00786500
.*                                                                      00787200
         L     &PRG.,&GNAME.F                    LOAD GETMAIN PARMS     00788500
         AGO   .LVCHK                                                   00790500
.*                                                                      00790800
.******************************************************************     00791100
.* Either the key or the subpool is in a register. Check if they        00791400
.* both are.                                                            00791700
.******************************************************************     00792000
.*                                                                      00792300
.KORSREG AIF   (&KEYRG AND &SPREG).BOTHREG                              00792600
.*                                                                      00792700
.******************************************************************     00792800
.* Only one of them is a register, if its not the subpool go to         00792900
.* KEYRG cause it must be the key                                       00793000
.*****************************************************************      00793100
.*                                                                      00793200
         AIF   (NOT &SPREG).KEYREG                                      00793300
.*                                                                      00793400
.******************************************************************     00793500
.* Only Subpool is in a register, if its in the parameter register      00793600
.* already, go to SPINPRG to continue processing                        00793700
.*****************************************************************      00793800
.*                                                                      00793900
         AIF   ('&SP(1)' EQ '&PRG').SPINPRG                             00794000
.*                                                                      00794100
.******************************************************************     00794200
.* Subpool is not in the parm register so put it there                  00794300
.* and throw a few other things in while we're at it.                   00794400
.*****************************************************************      00794500
.*                                                                      00794600
         LR    &PRG.,&SP(1)                      OBTAIN SUBPOOL ID      00794700
.SPINPRG SLL   &PRG.,8(0)                 MOVE SUBPOOL TO BYTE 2 YM1995 00794800
         ICM   &PRG.,13,&GNAME.F                 ADD REMAINING PARMS    00794900
.*                                                                      00795000
.******************************************************************     00795100
.* Subpool and key stuff is done branch to LVCHK to continue            00795200
.*****************************************************************      00795300
.*                                                                      00795400
         AGO   .LVCHK                                                   00795500
.*                                                                      00795600
.******************************************************************     00795700
.* Only key is a register, if its in the parameter register             00795800
.* go to KYINPRG to continue processing                                 00795900
.*****************************************************************      00796000
.*                                                                      00796100
.KEYREG  AIF   ('&KEY(1)' EQ '&PRG').KYINPRG                            00796200
.*                                                                      00796300
.******************************************************************     00796400
.* Key is not in the parameter register, so put it there and add        00796500
.* some other parms.                                                    00796600
.*****************************************************************      00796700
.*                                                                      00796800
         LR    &PRG.,&KEY(1)                     GET STORAGE KEY        00796900
.KYINPRG SLL   &PRG.,16(0)                   SHIFT KEY TO BYTE 1 YM1995 00797000
         ICM   &PRG.,11,&GNAME.F                 ADD REMAINING PARMS    00797200
.*                                                                      00797300
.******************************************************************     00797400
.* Subpool and key stuff is done branch to LVCHK to continue            00797500
.*****************************************************************      00797600
.*                                                                      00797700
         AGO      .LVCHK                                                00798100
.*                                                                      00798300
.******************************************************************     00798500
.* Both key and subpool are in registers                                00798700
.*****************************************************************      00798900
.*                                                                      00799100
.BOTHREG AIF   ('&KEY(1)' NE '&SP(1)').NOTSAME                          00799300
.*                                                                      00799500
.******************************************************************     00799700
.* Both key and subpool are in the same register                        00799900
.* The register must look like this. xxK0SSxx where each letter         00800100
.* represents 1 hex digit. 'x' can be any value, 'K' contains           00800300
.* the 4 bit key and 'SS' is the 1 byte subpool.                        00800500
.*****************************************************************      00800700
.*                                                                      00800900
         AIF   ('&KEY(1)' EQ '&PRG').BOTHPRG                            00801400
.*                                                                      00801500
.******************************************************************     00801600
.* The common register is not the  parm register.                       00801700
.*****************************************************************      00801800
.*                                                                      00801900
         LR    &PRG.,&KEY(1)                     GET STORAGE KEY        00802000
.BOTHPRG ICM   &PRG.,9,&GNAME.F                  ADD REMAINING PARMS    00802200
.*                                                                      00802400
.******************************************************************     00802600
.* Subpool and key stuff is done branch to LVCHK to continue            00802800
.*****************************************************************      00803000
.*                                                                      00803200
         AGO   .LVCHK                                                   00803400
.*                                                                      00803600
.******************************************************************     00803800
.* Both are in registers, but they are different registers.             00804000
.*****************************************************************      00804200
.*                                                                      00804400
.NOTSAME AIF   ('&KEY(1)' EQ '&PRG' OR '&SP(1)' EQ '&PRG').PRGIS1       00804600
.*                                                                      00804800
.******************************************************************     00805000
.* Neither register is the  parm register.                              00805200
.*****************************************************************      00805400
.*                                                                      00805600
         LR    &PRG.,&KEY(1)                     GET STORAGE KEY        00807000
.ADDSP   SLL   &PRG.,8(0)                  SHIFT KEY OVER FOR SP YM1995 00807400
         OR    &PRG.,&SP(1)                      ADD SUBPOOL NUMBER     00807800
         SLL   &PRG.,8(0)                 MOVE PAIR TO BYTES 1-2 YM1995 00807900
         AGO   .BOTHPRG                                                 00808000
.PRGIS1  AIF   ('&KEY(1)' EQ '&PRG').ADDSP                              00808100
.*                                                                      00808200
.******************************************************************     00808300
.* Subpool in in the parm register.                                     00808400
.*****************************************************************      00808500
.*                                                                      00808600
         SLL   &PRG.,8(0)                 MOVE SUBPOOL TO BYTE 2 YM1995 00808700
         SLL   &KEY(1),16(0)                 SHIFT KEY TO BYTE 1 YM1995 00808900
         OR    &PRG.,&KEY(1)           COMBINE KEY & SP                 00809600
         SRL   &KEY(1),16(0)                 RESTORE KEY BACK  @YA30573 00810600
         AGO   .BOTHPRG                                                 00811600
.LVCHK   ANOP                                                  @ZA07133 00813600
.*                                                                3@P1D 00814300
.*--------------------------------------------------------------------- 00815100
.********************************************************************** 00815200
.* All interface parameters have been put where GETMAIN service         00815300
.* routines expect to find them.  The section that follows finds and    00815400
.* branches to the proper VSM entry point.                              00815500
.********************************************************************** 00815600
.*--------------------------------------------------------------------- 00815700
.*                                                                      00815800
.FINI    AIF   ('&MODE' NE 'RC' AND '&MODE' NE 'RU'                    *00816400
                OR &EXPL).FINI1                                    @L4C 00817000
         SR    1,1                     ZERO RESERVED REG 1              00817600
.********************************************************************** 00818100
.* If its branch entry, go to SETBE else issue the SVC                  00818600
.********************************************************************** 00819100
.FINI1   AIF   (&BR).SETBE             TEST FOR BRANCH=YES              00819600
.********************************************************************** 00820100
.* Issue the SVC                                                        00820600
.********************************************************************** 00821100
         SVC   &SVCN                   ISSUE GETMAIN SVC                00821600
         MEXIT                                                          00824000
.********************************************************************** 00824800
.* Handle branch entry.  The CVT contains pointers to various VSM       00825600
.* entry points (e.g., SVC 120 local branch, SVC 4 branch, ...).        00826400
.********************************************************************** 00827200
.SETBE   ANOP                                                           00827800
         AIF   ('&SYSAM64' NE 'YES').NO64A1                        @L6A 00827900
         LLGT  15,16(0,0)         ADDRESS OF CVT               @G860P30 00828000
         AGO   .NO64A2                                             @L6A 00828100
.NO64A1  ANOP                                                      @L6A 00828200
         L     15,16(0,0)         ADDRESS OF CVT               @G860P30 00828400
.NO64A2  ANOP                                                      @L6A 00829800
         AIF   ('&MODE' EQ 'P').CBBE                           @Z30EN9G 00831300
         AIF   (&SVCN EQ 120).CRBE                                      00834600
         AIF   (&SVCN EQ 10).RMBE                                       00837900
.********************************************************************** 00838700
.* Entry point for list form branch entry                               00839500
.********************************************************************** 00840300
         L     15,848(15,0)       CVTGMBR ENTRY ADDRESS        @G860P30 00842400
         AGO   .SBE                                                     00844500
.********************************************************************** 00845300
.* Entry point for VSM internal cellpool processing.                    00846100
.********************************************************************** 00846900
.CBBE    ANOP                                                  @Z30EN9G 00847800
         L     15,972(15,0)       CVTCBBR ENTRY POINT          @G860P30 00851100
         AGO   .SBE                                            @Z30EN9G 00854400
.********************************************************************** 00855200
.* Entry point for 'R' mode branch entry. (SVC 10 branch entry)         00856000
.********************************************************************** 00856800
.RMBE    L     15,840(15,0)       CVTRMBR ENTRY POINT          @G860P30 00858900
         AGO   .SBE                                                     00861000
.********************************************************************** 00861400
.*                                                                      00861800
.* SVC 120 branch entry.                                                00861900
.*                                                                      00862000
.* The code below finds the address of the VSM entry point that must    00862200
.* be branched to.  This path is used by SVC 120 eqivalent branch       00862600
.* entry requests (local and global).  Callers in AR ASC mode are       00863000
.* allowed to use this interface to obtain global storage or to obtain  00863400
.* storage from the primary address space.  This is made possible by    00863800
.* the 'SAC 0', which causes ARs to be ignored.  (VSM will not work if  00864200
.* ARs are active.)  Note that the 'SAC 0' must appear                  00864600
.* before register 15 is used as a base register because there is no    00865000
.* guarantee that AR 15 is set up properly.  (Using reg 15 as a base    00865400
.* register without a valid ALET in AR 15 will cause a program          00865800
.* check.)                                                              00866200
.*                                                                      00866600
.****************************************************************  @D1A 00867000
.CRBE    ANOP                                                      @D1C 00867400
         AIF ('&SYSASCE' EQ 'P').SKIPSW1  If we are already in     @D1A 00867800
.*                                primary ASC mode, do not         @D1A 00868200
.*                                produce a SAC to switch to       @D1A 00868600
.*                                primary.  (That is, skip the     @D1A 00869000
.*                                switch.)                         @D1A 00869400
         SAC   0                  Switch to primary ASC mode.      @D1A 00869800
.SKIPSW1 ANOP                                                      @D1A 00870200
         AIF   (&GLBR).GLBE       Global branch entry ?            @D1C 00870600
.*                                                                 @D1A 00870700
.* Find the SVC 120 equivalent local branch entry point.           @D1A 00870800
.*                                                                 @D1A 00870900
         L     15,504(15,0)       CVTCRMN ENTRY POINT          @G860P30 00871100
         AGO   .S120BE                                             @D1C 00871400
.*                                                                      00871500
.* Find the Global Work/Save Area used by VSM when it is entered        00871600
.* disabled.  (VSM saves registers here.)                               00871700
.*                                                                      00871800
.GLBE    ANOP                                                           00871900
         AIF   ('&SYSAM64' NE 'YES').NO64B1                        @L6A 00872000
         LLGT  4,684(15,0)        SAVE AREA ADDRESS TABLE      @G860P30 00872100
         AGO   .NO64B2                                             @L6A 00872200
.NO64B1  ANOP                                                      @L6A 00872300
         L     4,684(15,0)        SAVE AREA ADDRESS TABLE      @G860P30 00872400
.NO64B2  ANOP                                                      @L6A 00872500
         L     4,4(0,4)           SAVE AREA ADDRESS            @G860P30 00872600
.*                                                                 @D1A 00872700
.* Find the SVC 120 equivalent global branch entry point.          @D1A 00872800
.*                                                                 @D1A 00873500
         L     15,680(15,0)       CVTGLMN ENTRY POINT          @G860P30 00875600
.S120BE  ANOP                                                           00877700
         BALR  14,15              CALL GETMAIN                     @D1A 00879800
         AIF ('&SYSASCE' EQ 'P').SKIPSW2 If we were entered in     @D1A 00882200
.*                                primary ASC mode, do not         @D1A 00882900
.*                                produce a SAC to switch back     @D1A 00883600
.*                                to AR mode.  (That is, skip      @D1A 00884300
.*                                the switch.)                     @D1A 00885000
         SAC   512                Switch back to AR mode.          @D1A 00886000
.SKIPSW2 ANOP                                                      @D1A 00886400
         MEXIT                                                     @D1A 00886800
.****************************************************************  @D1A 00887000
.*  Branch to GETMAIN service.   This handles SVC 4 and 10         @D1A 00887200
.*  equivalent branch entry, and 'P' mode requests.                @D1A 00887400
.****************************************************************  @D1A 00887600
.SBE     ANOP                                                           00887700
         BALR  14,15              CALL GETMAIN                     @D1A 00887800
         MEXIT                                                          00888000
.*                                                                 @D1A 00890000
.****************************************************************       00890500
.*                                                                      00891000
.****************************************************************       00891500
.ERROR0  IHBERMAC 92                                                    00892000
         MEXIT                                                          00896000
.****************************************************************       00897000
.*                                                                      00898000
.****************************************************************       00899000
.ERROR1  IHBERMAC 17                                                    00900000
         MEXIT                                                          00950000
.****************************************************************       00962500
.*  Macro form is invalid                                               00975000
.****************************************************************       00987500
.ERROR2  IHBERMAC 1001,MF,&MF                                           01000000
         MEXIT                                                          01050000
.****************************************************************       01062500
.* Something was specified in a register that can't be in a register    01075000
.****************************************************************       01087500
.ERROR3  IHBERMAC 69                                                    01100000
         MEXIT                                                          01150000
.****************************************************************       01162500
.*  Invocation requires LA not LV                                       01175000
.****************************************************************       01187500
.ERROR4  IHBERMAC 89                                                    01200000
         MEXIT                                                          01250000
.****************************************************************       01262500
.* LA and LV can't be specified together                                01275000
.****************************************************************       01287500
.ERROR5  IHBERMAC 91                                                    01300000
         MEXIT                                                          01350000
.****************************************************************       01362500
.* LV must be specified with this invocation, not LA                    01375000
.****************************************************************       01387500
.ERROR6  IHBERMAC 90                                                    01400000
         MEXIT                                                          01450000
.****************************************************************       01460000
.* Issue a message saying that the mode was invalid. Can happen         01470000
.* for various reasons.                                                 01480000
.****************************************************************       01490000
.ERROR7  IHBERMAC 1001,MODE,&MODE                                       01500000
         MEXIT                                                          01550000
.****************************************************************       01562500
.* Required parameters weren't specified                                01575000
.****************************************************************       01587500
.ERROR8  IHBERMAC 01                                                    01600000
         MEXIT                                                          01650000
.****************************************************************       01660000
.*  R mode getmains require that the A parameter be specified           01670000
.*  in this case.                                                       01680000
.****************************************************************       01690000
.ERROR9  IHBERMAC 93                                                    01700000
         MEXIT                                                          01750000
.****************************************************************       01762500
.*  Invalid boundary specified                                          01775000
.****************************************************************       01787500
.ERROR10 IHBERMAC 1014,BNDRY                                            01800000
         MEXIT                                                          01810000
.****************************************************************       01812500
.* R mode callers cannot specify page for their boundary                01815000
.****************************************************************       01817500
.ERR10A  IHBERMAC 1020,&BNDRY,&MODE                                     01820000
         MEXIT                                                          01830000
.****************************************************************       01837500
.*  Invalid CHECKZERO specified                                    @D2A 01838100
.****************************************************************       01838700
.ERRORZ1 IHBERMAC 1014,CHECKZERO                                   @D2A 01839300
         MEXIT                                                          01839900
.****************************************************************       01840500
.* Non (V)RU or (V)RC mode callers cannot specify CHECKZERO        @D2A 01841100
.****************************************************************       01841700
.ERRORZ2 IHBERMAC 1020,CHECKZERO,&MODE                             @D2A 01842300
         MEXIT                                                          01842900
.****************************************************************       01843500
.* Non RU or RC mode callers cannot specify CONTBDY                @L7A 01843700
.****************************************************************       01843900
.ERRORCBDY IHBERMAC 1020,CONTBDY,&MODE                             @L7A 01844100
         MEXIT                                                          01844300
.****************************************************************       01844500
.* LOC=EXPLICIT callers cannot specify CONTBDY                     @L7A 01844700
.****************************************************************       01844900
.ERRORCBDY1 IHBERMAC 1020,CONTBDY,''LOC=EXPLICIT''                 @L7A 01845100
         MEXIT                                                          01845300
.****************************************************************       01845500
.* BNDRY callers cannot specify CONTBDY                            @L7A 01845700
.****************************************************************       01845900
.ERRORCBDY2 IHBERMAC 1020,CONTBDY,BNDRY                            @L7A 01846100
         MEXIT                                                          01846300
.****************************************************************       01846500
.* Non RU or RC mode callers cannot specify STARTBDY               @L7A 01846700
.****************************************************************       01846900
.ERRORSBDY IHBERMAC 1020,STARTBDY,&MODE                            @L7A 01847100
         MEXIT                                                          01847300
.****************************************************************       01847500
.* LOC=EXPLICIT callers cannot specify STARTBDY                    @L7A 01847700
.****************************************************************       01847900
.ERRORSBDY1 IHBERMAC 1020,STARTBDY,''LOC=EXPLICIT''                @L7A 01848100
         MEXIT                                                          01848300
.****************************************************************       01848500
.* BNDRY callers cannot specify STARTBDY                           @L7A 01848700
.****************************************************************       01848900
.ERRORSBDY2 IHBERMAC 1020,STARTBDY,BNDRY                           @L7A 01849100
         MEXIT                                                          01849300
.****************************************************************       01849500
.* Key was specified with other options that are invalid with key       01849700
.****************************************************************       01852500
.ERRORA  IHBERMAC 1020,KEY,&MODE                                        01860000
         MEXIT                                                          01910000
.****************************************************************       01922500
.* Key specified was too large                                          01935000
.****************************************************************       01947500
.ERRORB  IHBERMAC 1001,KEY,&KEY                                         01960000
         MEXIT                                                          02010000
.****************************************************************       02022500
.* Branch entry list form is invalid                                    02035000
.****************************************************************       02047500
.ERRORC  IHBERMAC 1020,BRANCH,''MF=L''                                  02060000
         MEXIT                                                          02110000
.****************************************************************       02122500
.* Invalid value for the branch keyword was given                       02135000
.****************************************************************       02147500
.ERRORD  IHBERMAC 1001,BRANCH,&BRANCH                                   02160000
         MEXIT                                                          02210000
.****************************************************************       02227500
.* Global branch entry can only be specified with certain modes.        02245000
.****************************************************************       02262500
.ERRORF  IHBERMAC 1020,&BRANCH(2),&MODE                                 02280000
         MEXIT                                                          02282700
.****************************************************************       02283300
.* Too many suboperands were given for the LOC keyword                  02283900
.****************************************************************       02284500
.ERROR20 IHBERMAC 1012,LOC                                     @G860P30 02285400
         MEXIT                                                          02288100
.****************************************************************       02288600
.* The second operand for LOC was specified, but it wasn't 31      @L4C 02288900
.* OR 64. Or, if the first operand was EXPLICIT, the second        @L4C 02289200
.* operand was not 24, 31, or 64.                                  @L4C 02289500
.****************************************************************       02290100
.ERROR21 IHBERMAC 1007,LOC(2)                                  @G860P30 02290800
         MEXIT                                                          02293500
.****************************************************************       02294100
.* LOC(1)  must be 24, RES , 31 or EXPLICIT.                       @L4C 02294700
.****************************************************************       02295300
.ERROR22 IHBERMAC 1007,LOC(1)                                  @G860P30 02296200
         MEXIT                                                          02298900
.****************************************************************       02299500
.* Space for max and min must be there on the LV parameter.             02300100
.****************************************************************       02300700
.ERROR30 IHBERMAC 1012,LV                                      @G860P30 02301600
         MEXIT                                                          02304300
.****************************************************************       02304900
.* Maximum is required. (minimum can be defaulted but max can't)        02305500
.****************************************************************       02306100
.ERROR31 IHBERMAC 1017,LV(1)                                   @G860P30 02307000
         MEXIT                                                     @L3A 02307200
.****************************************************************       02307400
.* LOC must be specified when INADDR is specified                  @P3C 02308400
.****************************************************************       02309400
.ERROR32 IHBERMAC 1017,LOC(1)                                      @L4A 02310400
         MEXIT                                                     @L4A 02311400
.****************************************************************       02312400
.* INADDR is only valid with RU and RC forms                       @L4A 02313400
.****************************************************************       02314400
.ERROR33 IHBERMAC 1020,INADDR,&MODE                                @L4A 02315400
         MEXIT                                                     @L4A 02316400
.****************************************************************       02317400
.* LOC=EXPLICIT is only valid with RU and RC forms                 @L4A 02318400
.****************************************************************       02319400
.ERROR34 IHBERMAC 1020,LOC(1),&MODE                                @L4A 02320400
         MEXIT                                                     @L4A 02321400
.****************************************************************       02322400
.* INADDR requires that LOC=EXPLICIT be specified                  @L4A 02323400
.****************************************************************       02324400
.ERROR35 IHBERMAC 1020,LOC(1),INADDR                               @L4A 02325400
         MEXIT                                                     @L4A 02326400
.****************************************************************       02327400
.* Global branch entry is not allowed for explicit request         @L4A 02328400
.* (it doesn't make sense because EXPLICIT is only valid for       @L4A 02329400
.* private, and GLOBAL is only valid for COMMON)                   @L4A 02330400
.****************************************************************       02331400
.ERROR36 IHBERMAC 1020,BRANCH(2),INADDR                            @P3C 02332400
         MEXIT                                                     @L4A 02333400
.****************************************************************       02334400
.* BNDRY is not allowed for explicit request                       @L4A 02335400
.* (and it doesn't make sense, since the input address specifies   @L4A 02336400
.* the exact location)                                             @L4A 02337400
.****************************************************************       02338400
.ERROR37 IHBERMAC 1020,BNDRY,INADDR                                @L4A 02339400
         MEXIT                                                     @L4A 02340400
.****************************************************************       02341400
.* OWNER is not allowed for explicit request                       @L4A 02342400
.* (it doesn't make sense because EXPLICIT is only valid for       @L4A 02343400
.* private, and OWNER is only valid for COMMON)                    @L4A 02344400
.****************************************************************       02345400
.ERROR38 IHBERMAC 1020,OWNER,INADDR                                @L4A 02346400
         MEXIT                                                     @L4A 02347400
.****************************************************************       02348400
.* INADDR must be specified when LOC=EXPLICIT specified            @P3A 02348500
.****************************************************************       02348600
.ERROR39 IHBERMAC 1017,INADDR                                      @P3A 02348700
         MEXIT                                                     @P3A 02348800
.****************************************************************       02348900
.* OWNER is not valid                                                   02349400
.****************************************************************       02350400
.ERRORO1 IHBERMAC 1007,OWNER(1)                                    @L3A 02351400
         MEXIT                                                     @L3A 02352400
.****************************************************************       02353400
.* OWNER is not valid with non-SVC 120 forms                            02354400
.****************************************************************       02355400
.ERRORO2 IHBERMAC 1020,OWNER,&MODE                                 @L3A 02356400
         MEXIT                                                     @L3A 02357400
         MEND                                                           02358400
* */ GETMAIN: MACRO                                                     02360000
* KEYS(LV,LA,A,SP,SZ,BNDRY,BRANCH,MF,RTCD,RETCODE,KEY,                  02387700
* RELATED,LOC,OWNER,INADDR,         /*                           @L4C*/ 02415500
* TCBADDR,ASCBADDR,                 /*                           @L5A*/ 02430300
* CHECKZERO                         /*                           @D2A*/ 02437700
* ,CONTBDY,STARTBDY,FLAGVALUE,AR15VALUE  /*                      @L7A*/ 02445100
* );                                /*                               */ 02452500
*          ANS('?'||MACLABEL||'GETMAINP '||MACLIST||MACKEYS||';');      02460000
*%     END GETMAIN;                                                     02510000
