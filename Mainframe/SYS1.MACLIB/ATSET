*  /* START OF SPECIFICATIONS ***************************************** 00050000
*                                                                     * 00100000
*01*  MODULE-NAME = ATSET                                             * 00150000
*                                                                     * 00200000
*01*  MACDATE = 93.170                                                * 00250000
*                                                                     * 00280000
*01*  DESCRIPTIVE-NAME = AUTHORIZATION TABLE SET MACRO                * 00310000
*                                                                     * 00340000
*01*  COPYRIGHT =                                                     * 00375000
*            5655-068                                                 * 00410000
*            THIS MODULE IS "RESTRICTED MATERIALS OF IBM"             * 00445000
*            (C)COPYRIGHT IBM CORP. 1980, 1993                        * 00480000
*            LICENSED MATERIALS - PROPERTY OF IBM                     * 00515000
*                                                                     * 00550000
*01*  STATUS = HBB5510                                            @P1C* 00600000
*                                                                     * 00650000
*01*  FUNCTION = INTERFACE TO THE ATSET SERVICE                       * 00700000
*                                                                     * 00750000
*01*  NOTES = THE 'PT' AND 'SSAR' PARAMETERS DEFAULT TO 'NO'.         * 00760000
*                                                                     * 00770000
*01*  MODULE-TYPE = MACRO                                             * 00800000
*                                                                     * 00850000
*01*  PROCESSOR = ASSEMBLER,PL/S-III (BILINGUAL)              @ZM50111* 00900000
*                                                                     * 00937500
*01*  MACROS = IHBERMAC                                               * 00975000
*                                                                     * 01012500
*01*  CHANGE ACTIVITY =       NEW FOR OS/VS2 JBB1226.                 * 01050000
*                             UPDATE BOTH BAL AND PL/S MACDATE        * 01068700
*                             WHENEVER THIS MACRO IS CHANGED.         * 01087500
*                             THE S/D CODE IS @G387PXX.               * 01125000
*             VS50111 - (PL/S) FORCE RC=12 ON NULL AX(1).     @ZM50111* 01162500
*             PBB0031 - (PL/S) PTR NOTATION CHECKS INVALID.   @ZMB0031* 01181200
*             PBB0091 - REMOVE DEPENDENCY ON BITS 0-15        @ZMB0091* 01187400
*                       OF AN AX REGISTER BEING ZERO.         @ZMB0091* 01193700
*           $P1=PIG1968,HBB5510,930616,PDXB: Savearea                 * 01196800
*                                                                     * 01200000
*01*  MNOTES = IHB001 AX OPERAND REQUIRED, NOT SPECIFIED              * 01250000
*              IHB002 INVALID PT OPERAND - ___                        * 01300000
*              IHB002 INVALID SSAR OPERAND - ___                      * 01350000
*              IHB002 INVALID AX OPERAND - ___                        * 01400000
*              IHB027 EXCESSIVE POSITIONAL PARAMETERS SPECIFIED       * 01450000
*                                                                     * 01500000
*01*  PL/S MSGS = AS FOLLOWS:                                         * 01550000
*     AHA0013 AX(1) IS REQUIRED BUT IS NOT SPECIFIED.                 * 01600000
*             NO TEXT IS GENERATED.                                   * 01650000
*     AHA0013 AX IS REQUIRED BUT IS NOT                               * 01700000
*             SPECIFIED. NO TEXT IS GENERATED.                        * 01750000
*     AHA0033 AX - '_' - HAS TOO MANY ARGUMENTS.                      * 01800000
*             NO TEXT IS GENERATED.                                   * 01850000
*     AHA0033 PT - '_' - HAS TOO MANY ARGUMENTS.                      * 01900000
*             NO TEXT IS GENERATED.                                   * 01950000
*     AHA0033 SSAR - '_' - HAS TOO MANY ARGUMENTS.                    * 02000000
*             NO TEXT IS GENERATED.                                   * 02050000
*     AHA0043 PT MUST BE 'YES' OR 'NO'. NO TEXT IS GENERATED.         * 02100000
*     AHA0043 SSAR MUST BE 'YES' OR 'NO'. NO TEXT IS GENERATED.       * 02150000
*     AHA0053 THE MACLIST '_' IS NOT ALLOWED. NO TEXT IS GENERATED.   * 02200000
*                                                                     * 02250000
*A000000-999999                                                @G387PXX 02300000
***** END OF SPECIFICATIONS ******************************************* 02400000
         MACRO                                                          02490000
&LABL    ATSET &AX=,       REQUIRED AX VALUE (SEE NOTE BELOW)  (INPUT) X02520000
               &PT=,       OPTIONAL, 'YES' OR 'NO'(DEFAULT)    (INPUT) X02550000
               &SSAR=,     OPTIONAL, 'YES' OR 'NO'(DEFAULT)    (INPUT) X02580000
               &RELATED=   OPTIONAL VALUE FOR DOCUMENTATION             02650000
.* NOTE: IF THE AX PARAMETER IS EXPRESSED IN RX FORM IT IS              02750000
.*         INTERPRETED AS THE ADDRESS OF A HALFWORD AX VALUE.           02800000
.*       IF THE AX PARAMETER IS EXPRESSED IN REGISTER NOTATION          02850000
.*         THE MACRO ASSUMES THE AX VALUE IS IN THE LOW-ORDER HALF      02900000
.*         OF THE SPECIFIED REGISTER. THE HIGH-ORDER HALF OF THE        02950000
.*         REGISTER IS REQUIRED TO BE ZERO BY ATSET.                    03000000
.********************************************************************** 03050000
.*       PUT OUT BAL MACDATE COMMENT LINE REGARDLESS OF ERRORS.       * 03100000
.********************************************************************** 03150000
*              MACDATE = 80.122                                         03200000
.********************************************************************** 03250000
.*       DECLARE ARITHMETIC VARIABLES                                 * 03300000
.********************************************************************** 03350000
         LCLA  &A          GENERAL USAGE LOCAL ARITH. VAR.              03400000
         LCLA  &BOPTS      OPTIONS BYTE INIT VALUE.                     03450000
.********************************************************************** 03500000
.*       DECLARE BIT VARIABLES                                        * 03550000
.********************************************************************** 03600000
         LCLB  &AX0        SPECIAL REGISTER 0 NOTATION WAS SPECIFIED    03650000
.*                         FOR THE 'AX' PARAMETER.                      03700000
         LCLB  &B(8)       OPTIONS BITS                                 03750000
.********************************************************************** 03800000
.*       DECLARE CHARACTER VARIABLES                                  * 03850000
.********************************************************************** 03900000
         LCLC  &LT1        LOAD TYPE 1 - THIS VARIABLE WILL BE:         03950000
.*                              'R' IF AX IS IN A REG                   04000000
.*                           OR 'H' IF AX IS AN RX TYPE HALFWORD ADDR   04050000
         LCLC  &AXV        HOLDS VALUE OF AX FOR USE IN INSTRUCTIONS    04100000
         LCLC  &OPERAND    HOLDS OPERAND STRINGS FOR MNOTES             04150000
         LCLC  &OPVAL      HOLDS OPERAND VALUES FOR MNOTES              04200000
         LCLC  &P1         CHAR VARIABLE FOR 'PT' PARM                  04250000
         LCLC  &P2         CHAR VARIABLE FOR 'SSAR' PARM                04300000
.********************************************************************** 04400000
.*       INITIALIZE BIT VARIABLES                                     * 04450000
.********************************************************************** 04500000
&AX0     SETB  0           INDICATE NOT SPECIAL REG 0 INPUT PARM        04550000
&B(1)    SETB  0           SHOW PT=NO                                   04600000
&B(2)    SETB  0           SHOW SSAR=NO                                 04650000
&B(3)    SETB  0           RESERVED BIT- MUST BE ZERO                   04700000
&B(4)    SETB  0           RESERVED BIT- MUST BE ZERO                   04750000
&B(5)    SETB  0           RESERVED BIT- MUST BE ZERO                   04800000
&B(6)    SETB  0           RESERVED BIT- MUST BE ZERO                   04850000
&B(7)    SETB  0           RESERVED BIT- MUST BE ZERO                   04900000
&B(8)    SETB  0           RESERVED BIT- MUST BE ZERO                   04950000
.********************************************************************** 05000000
.*       CHECK FOR EXTRANEOUS POSITIONAL PARMS                        * 05050000
.********************************************************************** 05100000
         AIF   (N'&SYSLIST NE 0).ERR027                                 05150000
.********************************************************************** 05200000
.*       VALIDATE AX PARAMETER IF PRESENT                             * 05250000
.********************************************************************** 05300000
&OPERAND SETC  'AX'                     SET FOR POSSIBLE ERROR MSGS     05350000
&OPVAL   SETC  '&AX'                    SET FOR POSSIBLE ERROR MSGS     05400000
         AIF   (T'&AX EQ 'O').ERR001    REQ'D PARM IS MISSING           05450000
.*   DETERMINE WHETHER AX ADDRESS IS RX OR REG TYPE                     05500000
         AIF   ('&AX'(1,1) EQ '(').OK11       BRANCH IF REG TYPE        05550000
&AXV     SETC  '&AX'                    SET VALUE FOR USE IN INST.      05600000
&LT1     SETC  'H'                      SET TO 'H' FOR RX TYPE ADDR     05650000
         AGO   .OK20                    GO CHECK SSAR PARAMETER         05700000
.OK11    ANOP                                                           05750000
&LT1     SETC  'R'                      SET TO 'R' FOR REG              05800000
&AXV     SETC  '&AX'(2,K'&AX-2)         EXTRACT REGISTER NAME           05850000
         AIF   (N'&AX NE 1).ERR002      BR IF INVALID REG FORM          05870000
         AIF   ('&AXV' NE '0').OK20     BR IF NOT SPECIAL REG 0         05900000
&AX0     SETB  1                        INDICATE SPECIAL REG 0 USED     05950000
.********************************************************************** 06000000
.*       VALIDATE PT PARAMETER IF PRESENT                             * 06050000
.********************************************************************** 06100000
.OK20    ANOP                                                           06150000
         AIF   (T'&PT EQ 'O').DEF20                                     06200000
&OPERAND SETC  'PT'                                                     06250000
&OPVAL   SETC  '&PT'                                                    06300000
         AIF   ('&PT' NE 'YES' AND '&PT' NE 'NO').ERR002                06350000
&P1      SETC  '&PT'                                                    06400000
         AGO   .OK30                                                    06450000
.DEF20   ANOP  DEFAULT TO PT=NO IF PT NOT SPECIFIED                     06500000
.*             UNLESS IT IS THE EXECUTE FORM                            06550000
&P1      SETC  'NO'                                                     06600000
.********************************************************************** 06650000
.*       VALIDATE SSAR PARAMETER IF PRESENT                           * 06700000
.********************************************************************** 06750000
.OK30    ANOP                                                           06800000
         AIF   (T'&SSAR EQ 'O').DEF30                                   06850000
&OPERAND SETC  'SSAR'                                                   06900000
&OPVAL   SETC  '&SSAR'                                                  06950000
         AIF   ('&SSAR' NE 'YES' AND '&SSAR' NE 'NO').ERR002            07000000
&P2      SETC  '&SSAR'                                                  07050000
         AGO   .OK99                                                    07100000
.DEF30   ANOP  DEFAULT TO SSAR=NO IF SSAR NOT SPECIFIED                 07150000
.*             UNLESS IT IS THE EXECUTE FORM                            07200000
&P2      SETC  'NO'                                                     07250000
.OK99    ANOP                                                           07300000
.********************************************************************** 07350000
.* MAP OPTIONS BITS INTO OPTIONS BYTE                                   07400000
.********************************************************************** 07450000
&B(1)    SETB  ('&P1' EQ 'YES')                                         07500000
&B(2)    SETB  ('&P2' EQ 'YES')                                         07550000
&BOPTS   SETA  128*&B(1)+64*&B(2)+32*&B(3)+16*&B(4)+8*&B(5)+4*&B(6)+2*&X07600000
               B(7)+&B(8)               OPTIONS BYTE INIT. VALUE        07650000
.********************************************************************** 07700000
.*       GENERATE THE CODE                                            * 07750000
.********************************************************************** 07800000
&LABL    DC    0H'0'                .ATSET XM SERVICE PC                07850000
         STM   14,12,12(13)         .SAVE CALLER'S REGS                 07870000
         LA    15,&BOPTS            .LOAD OPTIONS BYTE VALUE            07900000
         SLL   15,16                .SHIFT INTO PROPER POSITION         07950000
         AIF   ('&LT1' EQ 'R').SF40     BR IF REGISTER FORMAT           08000000
         ANOP                           RX FORM CODE                    08050000
         ICM   15,3,&AXV            .INSERT HALFWORD AX VALUE           08350000
         LR    0,15                 .TRANSFER TO PARM REG 0             08400000
         AGO   .SF90                    BR TO COMMON CODE               08450000
.*                                      REGISTER FORMS                  08500000
.SF40    SLL   &AXV,16              .ASSURE NO GARBAGE IN HIGH @ZMB0091 08550000
         SRL   &AXV,16              .ORDER BYTES OF AX REG     @ZMB0091 08600000
         AIF   (&AX0 EQ 1).SF50         BR IF SPECIAL REG 0 NOTATION    08700000
         OR    15,&AXV              .OR IN AX VALUE FROM REG            08750000
         LR    0,15                 .TRANSFER TO PARM REG 0             08800000
         AGO   .SF90                    BR TO COMMON CODE               08850000
.SF50    ANOP                           SPECIAL REG 0                   08900000
         OR    0,15                 .OR OPTIONS AND AX VALUE TOGETHER   08950000
.SF90    ANOP                           COMMON INTERFACE CODE           09250000
         SLR   1,1                  .PARM REG 1 MUST BE ZERO            09300000
         ESAR  2                    .EXTRACT SASID                      09316600
         ST    2,16(,13)            .SAVE SASID IN REG 15 SLOT          09333200
         L     2,16(0,0)            .GET ADDR OF CVT                    09350000
         L     2,772(,2)            .GET ADDR OF SYSTEM FUNCTION TABLE  09390000
         L     2,40(,2)             .GET LX/EX FOR ATSET                09430000
         PC    0(2)                 .PC TO ATSET SERVICE                09470000
         L     2,16(,13)            .EXTRACT SAVED SASID                09496600
         SSAR  2                    .RESTORE SASID                      09523200
         LM    2,12,28(13)          .RESTORE REGS 2-12                  09550000
         L     14,12(,13)           .RESTORE REG 14                     09600000
         MEXIT                                                          09650000
.********************************************************************** 09750000
.*       PROCESS ERROR CONDITIONS                                     * 09800000
.********************************************************************** 09850000
.ERR001  ANOP SEV 12 MNOTE -- IHB001 &OPERAND REQ''D - NOT SPECIFIED    09900000
         IHBERMAC 1017,&OPERAND                                         09950000
         MEXIT                                                          10000000
.ERR002  ANOP SEV 12 MNOTE -- IHB002 - INVALID &OPERAND OPERAND &OPVAL  10050000
         IHBERMAC 1001,&OPERAND,&OPVAL                                  10100000
         MEXIT                                                          10150000
.ERR027  ANOP SEV 12 MNOTE -- IHB027 - EXCESSIVE POSITIONAL PARAMETERS  10200000
         IHBERMAC 238                                                   10250000
         MEND                                                           10300000
* */                                                                    10350000
*@EJECT;                                                                10400000
*%ATSET:                                                                10450000
*        MACRO KEYS(AX,PT,SSAR,RELATED);                                10500000
*/********************************************************************/ 10550000
*/*                DEFINE EXTERNAL MACRO VARIABLES                   */ 10600000
*/********************************************************************/ 10650000
* DECLARE                                                               10700000
*   EHAREGS   CHARACTER EXT, /* CONTAINS DECLARED REGISTER NUMBERS.  */ 10750000
*   EHAMAPS   CHARACTER EXT; /* CONTAINS REQUESTS FOR MAPPINGS       */ 10800000
*/********************************************************************/ 10850000
*/*                DEFINE INTERNAL MACRO VARIABLES                   */ 10900000
*/********************************************************************/ 10950000
* DECLARE CC       FIXED;    /* STARTING COLUMN FOR PL/S COMMENTS    */ 11000000
* DECLARE IVDOCMT  CHAR;     /* COMMENT FOR DO AND END LINES.        */ 11250000
* DECLARE IVINDNT2 FIXED;    /* STARTING COLUMN FOR ALL ANSWER TEXT  */ 11300000
*                            /*   EXCEPT DO AND END STATEMENTS.      */ 11350000
* DECLARE IVLP1    FIXED;    /* LEFT  PAREN COL FOR PTR FORM AX      */ 11400000
* DECLARE IVOPTS   FIXED;    /* OPTIONS BYTE INITIALIZATION VALUE.   */ 11450000
*                            /* ADD 128 TO INDICATE 'PT'   SPECIFIED.*/ 11500000
*                            /* ADD  64 TO INDICATE 'SSAR' SPECIFIED.*/ 11550000
* DECLARE IVRC     FIXED;    /* RETURN CODE TO DETERMINE IF TEXT WILL*/ 11600000
*                            /* BE GENERATED.                        */ 11650000
* DECLARE IVRP1    FIXED;    /* RIGHT PAREN COL FOR PTR FORM AX      */ 11700000
*/********************************************************************/ 11750000
*/*                INITIALIZE INTERNAL MACRO VARIABLES                  11800000
*/********************************************************************/ 11850000
* CC         = MACRMAR-35;   /* COMMENTS COLUMN (DEFAULT= 72-35 = 37)*/ 11900000
* IVDOCMT    = ' ATSET';     /* START OF DO-END COMMENT--NO KEYS YET */ 11950000
* IVINDNT2   = MACCOL + 2;   /* SET INDENTATION MARGIN.              */ 12150000
*                            /*   END OF AN ANSWER ASSIGNMENT.       */ 12200000
* IVLP1      = INDEX(AX(1),'('); /* GET POSITION OF LEFT PAREN       */ 12250000
*                            /* NOTE: A NON-ZERO VALUE FOR IVLP1     */ 12300000
*                            /* INDICATES A POINTER FORM PARAMETER.  */ 12350000
* IVOPTS     = 0;            /* INDICATE NO OPTIONS SPECIFIED.       */ 12400000
* IVRC       = 0;            /* SET CODE TO GENERATE TEXT            */ 12450000
* IF IVLP1=1 THEN            /* IF POINTER NOTATION          @ZMB0031*/ 12500000
*   DO;                      /* POINTER NOTATION.            @ZMB0031*/ 12504500
*     IVRP1=LENGTH(AX(1));   /* GET LAST CHAR OF SUBLIST     @ZMB0031*/ 12509000
*     IF AX(1,IVRP1:IVRP1)^=')' THEN /* IF NOT A RIGHT PAREN @ZMB0031*/ 12513500
*       IVRP1=IVLP1;         /* FORCE 'NOT-SPECIFIED' ERROR  @ZMB0031*/ 12518000
*   END;                     /* POINTER NOTATION.            @ZMB0031*/ 12522500
* ELSE                       /* NOT POINTER NOTATION.        @ZMB0031*/ 12527000
*   DO;                      /* NOT POINTER NOTATION.        @ZMB0031*/ 12531500
*     IVLP1=0;               /* NOT POINTER NOTATION.        @ZMB0031*/ 12536000
*     IVRP1=0;               /* NOT POINTER NOTATION.        @ZMB0031*/ 12540500
*   END;                     /* NOT POINTER NOTATION.        @ZMB0031*/ 12545000
*/********************************************************************/ 12550000
*/*                CHECK FOR MACLIST                                 */ 12600000
*/********************************************************************/ 12650000
* IF MACLIST ^= ''           /* MACLIST SUPPLIED?                    */ 12800000
*   THEN DO;                 /* YES -                                */ 12850000
*     IVRC = 12;             /*       PREVENT TEXT GENERATION        */ 12900000
*     ANS MSG('AHA0053 THE MACLIST '||QUOTE(MACLIST)||                  12950000
*             ' IS NOT ALLOWED. NO TEXT IS GENERATED.');                13000000
*                            /*       INDICATE MACLIST IN DO-COMMENT.*/ 13050000
*     IVDOCMT = IVDOCMT||' '||MACLIST;                                  13100000
*   END;                     /* END - MACLIST SPECIFIED.             */ 13150000
*/********************************************************************/ 13200000
*/*                PROCESS AX KEYWORD                                */ 13250000
*/********************************************************************/ 13300000
* IF AX ^= ''                /* AX SPECIFIED?                        */ 13400000
*   THEN DO;                 /* YES - ADD KEYWD TO COMMENT           */ 13450000
*     IVDOCMT = IVDOCMT||' AX'||AX;                                     13500000
*     IF AX(1) ^= '' &       /* WAS ARGUMENT SPECIFIED?      @ZM50111*/ 13650000
*       ((IVLP1=0 & IVRP1=0)|/* AND NOT POINTER FORM         @ZM50111*/ 13675000
*       (IVLP1+1 <= IVRP1-1))/* AND NOT = '()' ?             @ZM50111*/ 13687500
*       THEN DO;             /* YES - AX(1) SPECIFIED                */ 13700000
*         IF NUMBER(AX) > 1 /* TOO MANY AX ARGS?                     */ 13750000
*           THEN DO;         /* YES - ISSUE AHA0033                  */ 13800000
*             ANS MSG('AHA0033 AX - '||AX||                             13850000
*                      ' - HAS TOO MANY ARGUMENTS. '||                  13900000
*                      'NO TEXT IS GENERATED.');                        13950000
*             IVRC = 12;     /* KILL TEXT GENERATION                 */ 14000000
*           END;             /* NUMBER(AX) > 1                       */ 14050000
*       END;                 /* AX(1) SPECIFIED                      */ 14600000
*       ELSE DO;             /* NO ARGUMENT-ISSUE AHA0013            */ 14650000
*         ANS MSG('AHA0013 AX(1) IS REQUIRED '||                        14700000
*                 'BUT IS NOT SPECIFIED. NO TEXT IS GENERATED.');       14750000
*         IVRC = 12;         /* KILL TEXT GENERATION                 */ 14800000
*       END;                 /* NO AX ARGUMENT                       */ 14850000
*   END;                     /* AX KEYWORD SPECIFIED                 */ 14900000
*   ELSE DO;                 /* AX NOT SPECIFIED                     */ 14950000
*     ANS MSG('AHA0013 AX IS REQUIRED FOR STANDARD FORM '||             15000000
*             'BUT IS NOT SPECIFIED. NO TEXT IS GENERATED.');           15050000
*     IVRC = 12;             /* KILL TEXT GENERATION                 */ 15100000
*   END;                     /* AX NOT SPECIFIED                     */ 15150000
*/********************************************************************/ 15200000
*/*                PROCESS PT KEYWORD                                */ 15250000
*/********************************************************************/ 15300000
* IF PT ^= ''                /* PT SPECIFIED?                        */ 15350000
*   THEN DO;                 /* YES                                  */ 15400000
*                            /* ADD PT KYWD TO COMMENT               */ 15450000
*     IVDOCMT=IVDOCMT||' PT'||PT;                                       15500000
*     IF PT(1) ^= ''         /* ARGUMENT SPECIFIED?                  */ 15650000
*       THEN DO;             /* YES                                  */ 15700000
*         IF PT(1)='YES' /* IS ARGUMENT 'YES'                        */ 15750000
*           THEN             /* YES                                  */ 15800000
*             IVOPTS=IVOPTS+128; /* INDICATE 'PT' OPTION WAS SPEC'D  */ 15850000
*           ELSE DO;         /* ARGUMENT IS NOT 'YES'                */ 15900000
*             IF PT(1)^='NO' /* ARGUMENT OTHER THAN 'NO'             */ 15950000
*               THEN DO;     /* YES - INVALID ARGUMENT               */ 16000000
*                 ANS MSG('AHA0043 PT MUST BE '||                       16050000
*                         '''YES'' OR ''NO''. '||                       16100000
*                         'NO TEXT IS GENERATED.');                     16150000
*                 IVRC=12;   /* PREVENT TEXT GENERATION              */ 16200000
*               END;         /* INVALID PT ARGUMENT                  */ 16250000
*           END;             /* ARGUMENT IS NOT 'YES'                */ 16300000
*           IF NUMBER(PT) > 1 /* TOO MANY PT ARGS?                   */ 16350000
*             THEN DO;                  /* YES -                     */ 16400000
*               ANS MSG('AHA0033 PT - '||PT||                           16450000
*                      ' - HAS TOO MANY ARGUMENTS. '||                  16500000
*                      'NO TEXT IS GENERATED.');                        16550000
*               IVRC = 12;   /* KILL TEXT GENERATION                 */ 16600000
*             END;           /* TOO MANY PT ARGS                     */ 16650000
*       END;                 /* ARGUMENT SPECIFIED                   */ 16700000
*       ELSE DO;             /* NO ARGUMENT                          */ 16750000
*         ANS MSG('AHA0043 PT MUST BE ''YES'' OR ''NO''. '||            16800000
*                         'NO TEXT IS GENERATED.');                     16850000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 16900000
*       END;                 /* NO ARGUMENT                          */ 16950000
*   END;                     /* PT SPECIFIED                         */ 17000000
*/********************************************************************/ 17050000
*/*                PROCESS SSAR KEYWORD                              */ 17100000
*/********************************************************************/ 17150000
* IF SSAR ^= ''              /* SSAR SPECIFIED?                      */ 17200000
*   THEN DO;                 /* YES                                  */ 17250000
*                            /* ADD SSAR KYWD TO COMMENT             */ 17300000
*     IVDOCMT=IVDOCMT||' SSAR'||SSAR;                                   17350000
*     IF SSAR(1) ^= ''       /* ARGUMENT SPECIFIED?                  */ 17500000
*       THEN DO;             /* YES                                  */ 17550000
*         IF SSAR(1)='YES' /* IS ARGUMENT 'YES'                      */ 17600000
*           THEN             /* YES                                  */ 17650000
*             IVOPTS=IVOPTS+64; /* INDICATE 'SSAR' OPTION WAS SPEC'D */ 17700000
*           ELSE DO;         /* ARGUMENT IS NOT 'YES'                */ 17750000
*             IF SSAR(1)^='NO' /* ARGUMENT OTHER THAN 'NO'           */ 17800000
*               THEN DO;     /* YES - INVALID ARGUMENT               */ 17850000
*                 ANS MSG('AHA0043 SSAR MUST BE '||                     17900000
*                         '''YES'' OR ''NO''. '||                       17950000
*                         'NO TEXT IS GENERATED.');                     18000000
*                 IVRC=12;   /* PREVENT TEXT GENERATION              */ 18050000
*               END;         /* INVALID SSAR ARGUMENT                */ 18100000
*           END;             /* ARGUMENT IS NOT 'YES'                */ 18150000
*           IF NUMBER(SSAR) > 1 /* TOO MANY SSAR ARGS?               */ 18200000
*             THEN DO;                  /* YES -                     */ 18250000
*               ANS MSG('AHA0033 SSAR - '||SSAR||                       18300000
*                      ' - HAS TOO MANY ARGUMENTS. '||                  18350000
*                      'NO TEXT IS GENERATED.');                        18400000
*               IVRC = 12;   /* KILL TEXT GENERATION                 */ 18450000
*             END;           /* TOO MANY SSAR ARGS                   */ 18500000
*       END;                 /* ARGUMENT SPECIFIED                   */ 18550000
*       ELSE DO;             /* NO ARGUMENT                          */ 18600000
*         ANS MSG('AHA0043 SSAR MUST BE ''YES'' OR ''NO''. '||          18650000
*                         'NO TEXT IS GENERATED.');                     18700000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 18750000
*       END;                 /* NO ARGUMENT                          */ 18800000
*   END;                     /* SSAR SPECIFIED                       */ 18850000
*/********************************************************************/ 18900000
*/*                PROCESS 'RELATED' KEYWORD                         */ 18950000
*/********************************************************************/ 19000000
* IF RELATED ^= ''           /* IF RELATED WAS SPECIFIED             */ 19150000
*   THEN                     /* ADD KEYWORD TO DO COMMENT            */ 19200000
*     IVDOCMT=IVDOCMT||IVBLANK||'RELATED'||RELATED;                     19250000
*/********************************************************************/ 19300000
*/*   INDICATE EPILOG IS TO PRODUCE STANDARD SAVEAREA MAPPING.       */ 19750000
*/********************************************************************/ 19800000
* IF INDEX(EHAMAPS,'SA@')=0   /* IF SA@ MAPPING NOT PREVIOUSLY       */ 19850000
*   THEN                      /* REQUESTED THEN INDICATE REQUEST     */ 19900000
*     EHAMAPS = EHAMAPS||'SA@,'; /* NOTE: COMMAS SEPERATE REQUESTS   */ 19950000
*/********************************************************************/ 20050000
*/*   INDICATE EPILOG IS TO PROVIDE ACCESS TO XM SERVICES.           */ 20100000
*/********************************************************************/ 20150000
* IF INDEX(EHAMAPS,'XM@')=0   /* IF XM SERVICES NOT PREVIOUSLY       */ 20200000
*   THEN                      /* REQUESTED THEN INDICATE REQUEST     */ 20250000
*     EHAMAPS = EHAMAPS||'XM@,'; /* NOTE: COMMAS SEPERATE REQUESTS   */ 20300000
*/********************************************************************/ 20350000
*/*                PUT OUT LABELS (IF ANY)                           */ 20390000
*/********************************************************************/ 20430000
* IF MACLABEL ^= ''          /* ANY LABELS SPECIFIED?                */ 20470000
*   THEN                     /* YES - PUT THEM OUT.                  */ 20510000
*     ANS(MACLABEL) COL(MACLMAR);                                       20550000
*/********************************************************************/ 20590000
*/*     PUT OUT DO STATEMENT                                         */ 20630000
*/********************************************************************/ 20670000
* IVDOCMT=IVDOCMT||' MACDATE(80.122) '; /* ADD MACDATE TO COMMENT    */ 20710000
*                            /* GENERATE THE DO STATEMENT.           */ 20750000
* ANS('DO; '||COMMENT(IVDOCMT)) COL(MACCOL);                            20790000
*/********************************************************************/ 20830000
*/*                DETERMINE IF TEXT SHOULD BE PRODUCED              */ 20870000
*/********************************************************************/ 20910000
* IF IVRC > 4                /* ANY SEVERE ERRORS?                   */ 20950000
*   THEN                     /* YES -                                */ 20990000
*     GOTO LHA09000;         /*       EXIT - NO TEXT PRODUCED.       */ 21030000
*/********************************************************************/ 21070000
*/*                DEFINE REGISTER NAMES                             */ 21110000
*/********************************************************************/ 21150000
* IF INDEX(EHAREGS,'00F')=0  /* REGISTER 0 PREVIOUSLY DEFINED?       */ 21350000
*   THEN                     /* NO  -                                */ 21400000
*     EHAREGS=EHAREGS||'00F';/*       DEFINE IT.                     */ 21450000
* IF INDEX(EHAREGS,'01P')=0  /* REGISTER 1 PREVIOUSLY DEFINED?       */ 21500000
*   THEN                     /* NO  -                                */ 21550000
*     EHAREGS=EHAREGS||'01P';/*       DEFINE IT.                     */ 21600000
* IF INDEX(EHAREGS,'02P')=0  /* REGISTER 2 PREVIOUSLY DEFINED?       */ 21650000
*   THEN                     /* NO  -                                */ 21700000
*     EHAREGS=EHAREGS||'02P';/*       DEFINE IT.                     */ 21750000
* IF INDEX(EHAREGS,'12P')=0  /* REGISTER 12 PREVIOUSLY DEFINED?      */ 21800000
*   THEN                     /* NO  -                                */ 21850000
*     EHAREGS=EHAREGS||'12P';/*       DEFINE IT.                     */ 21900000
* IF INDEX(EHAREGS,'13P')=0  /* REGISTER 13 PREVIOUSLY DEFINED?      */ 21950000
*   THEN                     /* NO  -                                */ 22000000
*     EHAREGS=EHAREGS||'13P';/*       DEFINE IT.                     */ 22050000
* IF INDEX(EHAREGS,'14P')=0  /* REGISTER 14 PREVIOUSLY DEFINED?      */ 22100000
*   THEN                     /* NO  -                                */ 22150000
*     EHAREGS=EHAREGS||'14P';/*       DEFINE IT.                     */ 22200000
* IF INDEX(EHAREGS,'15F')=0  /* FIXED REG 15 PREVIOUSLY DEFINED?     */ 22250000
*   THEN                     /* NO  -                                */ 22300000
*     EHAREGS=EHAREGS||'15F';/*       DEFINE IT.                     */ 22350000
*/********************************************************************/ 22400000
*/*                GENERATE LINKAGE TO ATSET SERVICE                 */ 22450000
*/********************************************************************/ 22500000
* ANS('RESPECIFY')                                COL(IVINDNT2);        22650000
* ANS('(GPR00F,')                                 COL(IVINDNT2+1);      22700000
* ANS('GPR01P,')                                  COL(IVINDNT2+2);      22750000
* ANS('GPR02P,')                                  COL(IVINDNT2+2);      22800000
* ANS('GPR13P,')                                  COL(IVINDNT2+2);      22830000
* ANS('GPR14P,')                                  COL(IVINDNT2+2);      22860000
* ANS('GPR15F) RESTRICTED;')                      COL(IVINDNT2+2);      22890000
* ANS('STM(GPR14P,GPR12P,SA@G1412);')             COL(IVINDNT2);        22920000
* ANS(COMMENT(' SAVE CALLER''S REGS            ')) COL(CC);             22950000
* IF IVLP1 ^= 1              /* IF NOT POINTER FORM ADDRESS  @ZMB0031*/ 22980000
*   THEN DO;                                                            23010000
*     ANS('GPR00F='||AX(1)||';')                  COL(IVINDNT2);        23040000
*     ANS(COMMENT(' AX VALUE TO PARM REG 0    ')) COL(CC);              23070000
*   END;                                                                23100000
*   ELSE DO;                                                            23130000
*     ANS('GPR00F='||AX(1,IVLP1+1:IVRP1-1)||';')  COL(IVINDNT2);        23160000
*     ANS(COMMENT(' AX VALUE TO PARM REG 0    ')) COL(CC);              23190000
*   END;                                                                23350000
* ANS('SLL(GPR00F,16);')                   COL(IVINDNT2); /* @ZMB0091*/ 23400000
* ANS(COMMENT(' ASSURE NO GARBAGE IS IN HIGH  ')) COL(CC);              23445000
* ANS('SRL(GPR00F,16);')                   COL(IVINDNT2); /* @ZMB0091*/ 23490000
* ANS(COMMENT(' ORDER HALF OF REGISTER ZERO.  ')) COL(CC);              23535000
* ANS('GPR15F='||CHAR(IVOPTS)||';')               COL(IVINDNT2);        23580000
* ANS(COMMENT(' SET WORK REG WITH OPTIONS BYTE')) COL(CC);              23625000
* ANS('SLL(GPR15F,16);')                          COL(IVINDNT2);        23670000
* ANS(COMMENT(' SHIFT OPTIONS BYTE INTO POS.  ')) COL(CC);              23715000
* ANS('GPR00F=(GPR00F|GPR15F);')                  COL(IVINDNT2);        23760000
* ANS(COMMENT(' OR TOGETHER INTO PARM REG 0   ')) COL(CC);              23805000
* ANS('GPR01P=0;')                                COL(IVINDNT2);        23850000
* ANS(COMMENT(' PARM REG 1 MUST BE ZERO       ')) COL(CC);              23900000
* ANS('ESAR(SA@GPR15);')                          COL(IVINDNT2);        23916600
* ANS(COMMENT('SAVE SASID                     ')) COL(CC);              23933200
* ANS('GPR02P=XM@(11);')                          COL(IVINDNT2);        23950000
* ANS(COMMENT(' GET LX/EX FOR ATSET FROM SFT  ')) COL(CC);              24000000
* ANS('GEN (DS 0H);') COL(IVINDNT2);  /* MAKE PL/AS USE SAVEAREA @P1A*/ 24025000
* ANS('PC(GPR02P);')                              COL(IVINDNT2);        24050000
* ANS(COMMENT(' PC TO ATSET SERVICE           ')) COL(CC);              24100000
* ANS('SSAR(SA@GPR15);')                          COL(IVINDNT2);        24116600
* ANS(COMMENT('RESTORE SASID                  ')) COL(CC);              24133200
* ANS('LM(GPR02P,GPR12P,SA@G0212);')              COL(IVINDNT2);        24150000
* ANS(COMMENT(' RESTORE REGS 2-12             ')) COL(CC);              24200000
* ANS('GPR14P=SA@GPR14;')                         COL(IVINDNT2);        24250000
* ANS(COMMENT(' RESTORE REG 14                ')) COL(CC);              24300000
* ANS('RESPECIFY')                                COL(IVINDNT2);        24350000
* ANS('(GPR00F,')                                 COL(IVINDNT2+1);      24400000
* ANS('GPR01P,')                                  COL(IVINDNT2+2);      24450000
* ANS('GPR02P,')                                  COL(IVINDNT2+2);      24500000
* ANS('GPR13P,')                                  COL(IVINDNT2+2);      24600000
* ANS('GPR14P,')                                  COL(IVINDNT2+2);      24650000
* ANS('GPR15F) UNRESTRICTED;')                    COL(IVINDNT2+2);      24700000
*/********************************************************************/ 24750000
*/*                CLOSE OUT DO GROUP AND RETURN                     */ 24800000
*/********************************************************************/ 24850000
*LHA09000:                   /* CLOSE OUT DO GROUP.                  */ 24900000
* ANS('END; ') COL(MACCOL);                                             24950000
* RETURN CODE(IVRC);                                                    25000000
*/********************************************************************/ 25250000
*/*                END OF ATSET MACRO                                */ 25300000
*/********************************************************************/ 25350000
* % END ATSET;                                                          25400013
