*/**** START OF SPECIFICATIONS **************************************** 00000100
*                                                                     * 00000200
*                                                                     * 00000300
*01* MACRO NAME:  SYMRBLD                               -05/03/96-<0> * 00000400
*                                                                     * 00000500
*                                                                     * 00000600
*01* DESCRIPTIVE NAME:  Symptom Record Build                          * 00000700
*                                                                     * 00000800
*01* PROPRIETARY STATEMENT:                                           * 00000900
*                                                                     * 00001000
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001100
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00001200
*     5645-001 (C) COPYRIGHT IBM CORP. 1997                           * 00001300
*                                                                     * 00001400
* STATUS= HBB6603                                                     * 00001500
*                                                                     * 00001600
*                                                                     * 00001700
*                                                                     * 00001800
*01* FUNCTION:                                                        * 00001900
*                                                                     * 00002000
*                                                                     * 00002100
*      The SYMRBLD macro will generate code to build a symptom        * 00002200
*      record.  The SYMRBLD macro is provided in PL/AS and assembler  * 00002300
*      formats.                                                       * 00002400
*                                                                     * 00002500
*      A symptom record is a data area that contains a description of * 00002600
*      a program failure combined with a description of the           * 00002700
*      environment where the failure occurred.  The symptom record    * 00002800
*      consists of six sections.  These sections are numbered 1       * 00002900
*      through 5, including an additional section that is numbered    * 00003000
*      2.1.  The purpose of each section is as follows:               * 00003100
*                                                                     * 00003200
*                                                                     * 00003300
*      o   Section 1 (Environmental Data) - This section is filled in * 00003400
*          by the the SYMREC service.  The environmental data that    * 00003500
*          SYMREC stores in this section includes the CPU model and   * 00003600
*          serial numbers, data and time, name of the customer        * 00003700
*          installation, and the product ID of the control program.   * 00003800
*                                                                     * 00003900
*      o   Section 2 (Control Data) - Section 2 contains the lengths  * 00004000
*          and offsets of the remaining sections.                     * 00004100
*                                                                     * 00004200
*      o   Section 2.1 (Component Data) - Section 2.1 identifies the  * 00004300
*          component in which the error occurred.                     * 00004400
*                                                                     * 00004500
*      o   Section 3 (Primary SDB symptoms) - Section 3 contains the  * 00004600
*          primary string of problem symptoms.  This data may be used * 00004700
*          for duplicate problem recognition.                         * 00004800
*                                                                     * 00004900
*      o   Section 4 (Secondary SDB symptoms) - Section 4 contains    * 00005000
*          any additional diagnostic values saved at the time of the  * 00005100
*          error.                                                     * 00005200
*                                                                     * 00005300
*      o   Section 5 (Variable data) - Section 5 contains diagnostic  * 00005400
*          data in key-length-data format.  This area contains        * 00005500
*          portions of control blocks or parameter lists pertinent to * 00005600
*          the error.                                                 * 00005700
*                                                                     * 00005800
*                                                                     * 00005900
*                                                                     * 00006000
*      Input to the SYMRBLD macro is a storage area for the symptom   * 00006100
*      record (the storage area must reside in the invoker's primary  * 00006200
*      address space), and the diagnostic data for sections 2.1, 3,   * 00006300
*      4, and 5 of the symptom record. The SYMRBLD macro must be      * 00006400
*      invoked several times in order to build a complete symptom     * 00006500
*      record.  The following describes the necessary steps:          * 00006600
*                                                                     * 00006700
*                                                                     * 00006800
*      o   Invoke SYMRBLD with the INITIAL keyword to initialize      * 00006900
*          sections 1 and 2, and provide component data for section   * 00007000
*          2.1.                                                       * 00007100
*                                                                     * 00007200
*      o   Invoke SYMRBLD with the PRIMARY keyword one or more times  * 00007300
*          to store symptoms into section 3.                          * 00007400
*                                                                     * 00007500
*      o   Invoke SYMRBLD with the SECONDARY keyword zero or more     * 00007600
*          times to store symptoms into section 4.                    * 00007700
*                                                                     * 00007800
*      o   Invoke SYMRBLD with the VARIABLE keyword zero or more      * 00007900
*          times to store symptoms into section 5.                    * 00008000
*                                                                     * 00008100
*      o   Invoke SYMRBLD with the COMPLETE keyword to set the        * 00008200
*          lengths of sections 3, 4, and 5 in section 2.1 and         * 00008300
*          optionally pass the symptom record to SYMREC for recording * 00008400
*          to SYS1.LOGREC.                                            * 00008500
*                                                                     * 00008600
*                                                                     * 00008700
*                                                                     * 00008800
*       Note: The same version of SYMRBLD, i.e.,PLAS or assembler,    * 00008900
*      must be used to build all sections of the symptom record.      * 00009000
*                                                                     * 00009100
*                                                                     * 00009200
*      REGISTER USAGE:                                                * 00009300
*                                                                     * 00009400
*                                                                     * 00009500
*      INPUT REGISTERS:                                               * 00009600
*                                                                     * 00009700
*                                                                     * 00009800
*                          GR0-GR12    Undefined                      * 00009900
*                                                                     * 00010000
*                          GR13        Address of a 72 byte savearea  * 00010100
*                                      if the COMPLETE INVOKE=YES     * 00010200
*                                      keywords are specified.        * 00010300
*                                                                     * 00010400
*                          GR14-GR15   Undefined                      * 00010500
*                                                                     * 00010600
*                                                                     * 00010700
*                                                                     * 00010800
*      OUTPUT ENVIRONMENT: Same as on entry                           * 00010900
*                                                                     * 00011000
*      OUTPUT REGISTERS:                                              * 00011100
*                                                                     * 00011200
*                                                                     * 00011300
*                          GR0-GR1     Unpredictable                  * 00011400
*                                                                     * 00011500
*                          GR2-GR13    Unchanged                      * 00011600
*                                                                     * 00011700
*                          GR14-GR15   Unpredictable                  * 00011800
*                                                                     * 00011900
*                                                                     * 00012000
*                                                                     * 00012100
*                                                                     * 00012200
*                                                                     * 00012300
*01* ENVIRONMENT:                                                     * 00012400
*                                                                     * 00012500
*                                                                     * 00012600
*      Dispatchable unit mode: SRB or task mode.                      * 00012700
*                                                                     * 00012800
*      Minimum authorization: Problem or Supervisor state, any key.   * 00012900
*                                                                     * 00013000
*      AMODE:            24- or 31-bit.                               * 00013100
*                                                                     * 00013200
*      ASC mode:         Primary or Access Register.                  * 00013300
*                                                                     * 00013400
*                        Also, secondary and home ASC modes are       * 00013500
*                        supported. The symptom record storage must   * 00013600
*                        reside in primary, or be qualified with a    * 00013700
*                        suitable ALET if running in AR mode, i.e.,   * 00013800
*                        qualified by an ALET of zero.  Enabled or    * 00013900
*                        disabled, locked or unlocked                 * 00014000
*                                                                     * 00014100
*                                                                     * 00014200
*                                                                     * 00014300
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00014400
*                                                                     * 00014500
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00014600
*                                                                     * 00014700
*01* SYNTAX:                                                          * 00014800
*                                                                     * 00014900
*[xlabel]  SYMRBLD    INITIAL                                        * 00015000
*                   |     ,SR=xsr                                     * 00015100
*                   |     ,PRIMLEN=xprimlen                           * 00015200
*                   |    [,SECLEN=xseclen|0]                        * 00015300
*                   |    [,VARLEN=xvarlen|0]                        * 00015400
*                   |     ,ARCHLEV=10                               * 00015500
*                   |    [,DAE=YES|NO]                              * 00015600
*                   |    [,COMPDSC=xcompdsc|NO_COMPDSC]             * 00015700
*                   |    [,PROBLEM=xproblem|NO_PROBLEM]             * 00015800
*                   |    [,SERVLEV=xservlev|NO_SERVICE_LEVEL]       * 00015900
*                   |    [,NOCONVERTS]                                * 00016000
*                   |   [,IBM=NO                                     * 00016100
*                   |   |     ,PROGRAM=xprogram                       * 00016200
*                   |   |     ,PROGLEV=xproglev]                      * 00016300
*                   |   [,IBM=YES                                    * 00016400
*                   |        ,COMPID=xcompid                         * 00016500
*                   |       |     ,COMPLEV=xcomplev                   * 00016600
*                   |        ,PID=xpid                               * 00016700
*                   |             ,PIDLEVEL=xpidlevel                 * 00016800
*                   |        [,SUBSYSTEM=xsubsystem|NO_SUBSYSTEM]]  * 00016900
*                    ,RESET                                          * 00017000
*                   |     ,SR=xsr                                     * 00017100
*                   |    [,PRIMLEN=xprimlen|OLD_PRIMLEN]            * 00017200
*                   |    [,SECLEN=xseclen|OLD_SECLEN]               * 00017300
*                   |    [,VARLEN=xvarlen|OLD_VARLEN]               * 00017400
*                    ,PRIMARY                                        * 00017500
*                   |    [,SR=xsr|SR_IN_R1]                         * 00017600
*                   |    [,SDBSTRING=xsdbstring|NO_SDB_STRING       * 00017700
*                   |        [,SDBLEN=xsdblen|DEFINED_LENGTH]       * 00017800
*                   |        [,SDBLENVAR                              * 00017900
*                   |                    =xsdblenvar|DEFINED_LENGTH * 00018000
*                   |                    ]]                           * 00018100
*                   |    [,SDBKEY=xsdbkey|NO_SDBKEY                 * 00018200
*                   |         ,DATA=xdata                             * 00018300
*                   |            [,LEN=xlen|DEFINED_LENGTH]         * 00018400
*                   |            [,LENVAR=xlenvar|DEFINED_LENGTH]   * 00018500
*                   |            [,CONVERT=NO|YES]]                 * 00018600
*                   |    [,TYPE=TEST|NOTEST]                        * 00018700
*                    ,SECONDARY                                      * 00018800
*                   |    [,SR=xsr|SR_IN_R1]                         * 00018900
*                   |    [,SDBSTRING=xsdbstring|NO_SDB_STRING       * 00019000
*                   |        [,SDBLEN=xsdblen|DEFINED_LENGTH]       * 00019100
*                   |        [,SDBLENVAR                              * 00019200
*                   |                    =xsdblenvar|DEFINED_LENGTH * 00019300
*                   |                    ]]                           * 00019400
*                   |    [,SDBKEY=xsdbkey|NO_SDBKEY                 * 00019500
*                   |         ,DATA=xdata                             * 00019600
*                   |            [,LEN=xlen|DEFINED_LENGTH]         * 00019700
*                   |            [,LENVAR=xlenvar|DEFINED_LENGTH]   * 00019800
*                   |            [,CONVERT=NO|YES]]                 * 00019900
*                   |    [,TYPE=TEST|NOTEST]                        * 00020000
*                    ,VARIABLE                                       * 00020100
*                   |    [,SR=xsr|SR_IN_R1]                         * 00020200
*                   |     ,S5KEY=xs5key                               * 00020300
*                   |     ,DATA=xdata                                 * 00020400
*                   |        [,LEN=xlen|DEFINED_LENGTH]             * 00020500
*                   |        [,LENVAR=xlenvar|DEFINED_LENGTH]       * 00020600
*                   |    [,TYPE=TEST|NOTEST]                        * 00020700
*                    ,COMPLETE                                       * 00020800
*                        [,SR=xsr|SR_IN_R1]                         * 00020900
*                       [,INVOKE=YES                                 * 00021000
*                       |    [,RETCODE=xretcode|NO_RETURN_CODE]     * 00021100
*                       |    [,RSNCODE=xrsncode|NO_REASON_CODE]]    * 00021200
*                       [,INVOKE=NO]                                 * 00021300
*                                                                     * 00021400
*                                                                     * 00021500
*      Where:                                                         * 00021600
*                                                                     * 00021700
*                                                                     * 00021800
*      [xlabel]                                                       * 00021900
*          is an optional symbol, starting in column 1, that is the   * 00022000
*          name on the SYMRBLD macro invocation.  The name must       * 00022100
*          conform to the rules for an ordinary assembler language    * 00022200
*          symbol.                                                    * 00022300
*          DEFAULT: No name.                                          * 00022400
*                                                                     * 00022500
*                                                                     * 00022600
*                                                                     * 00022700
*                                                                     * 00022800
*      The following is a set of mutually exclusive keys.  This set   * 00022900
*      is required; only one key must be specified.                   * 00023000
*                                                                     * 00023100
*                                                                     * 00023200
*      INITIAL                                                        * 00023300
*          Initialization of the symptom record includes setting      * 00023400
*          sections 1, 2, and 2.1 of the symptom record to zero, and  * 00023500
*          initializing the offsets of sections 3, 4, and 5 in        * 00023600
*          section 2.1.                                               * 00023700
*                                                                     * 00023800
*                                                                     * 00023900
*          SR=xsr                                                     * 00024000
*              is a required input.  It is the name (RS-type), or     * 00024100
*              address in register (2)-(12), of the storage area to   * 00024200
*              be used for the symptom record.  The storage area must * 00024300
*              reside in primary or be qualified by an ALET of zero   * 00024400
*              if running in AR mode. SYMRBLD assumes the storage     * 00024500
*              area is on a double word boundary.                     * 00024600
*                                                                     * 00024700
*              The maximum size of the symptom record is 1900 bytes.  * 00024800
*              Sections 1, 2, and 2.1 use 212 bytes of the total 1900 * 00024900
*              bytes.  Sections 3, 4, and 5 can use the remaining     * 00025000
*              1688 bytes.  Use the PRIMLEN, SECLEN and VARLEN        * 00025100
*              keywords to specify the lengths of sections 3, 4, and  * 00025200
*              5 respectively.                                        * 00025300
*                                                                     * 00025400
*              In addition to providing storage for the symptom       * 00025500
*              record, 100 bytes must be provided for a work area,    * 00025600
*              therefore, the maximum amount of storage needed is     * 00025700
*              2000 bytes.                                            * 00025800
*                                                                     * 00025900
*                                                                     * 00026000
*                                                                     * 00026100
*                                                                     * 00026200
*          PRIMLEN=xprimlen                                           * 00026300
*              is the name (RS-type), or address in register          * 00026400
*              (2)-(12), of a required halfword input variable which  * 00026500
*              contains the maximum length in bytes of the primary    * 00026600
*              symptom string.  The length provided must be large     * 00026700
*              enough to contain the primary symptom string.  The     * 00026800
*              following formula can be used to calculate the length  * 00026900
*              of the primary symptom string:  Lengths of all SDBKEYs * 00027000
*              + length of all data provided with the DATA keyword +  * 00027100
*              the number of times SDBKEY is specified + the length   * 00027200
*              of all data specified with the SDBSTRING keyword + the * 00027300
*              number of times the SDBSTRING keyword is provided.     * 00027400
*              Note that the maximum size of the entire symptom       * 00027500
*              record is 1900 bytes.                                  * 00027600
*                                                                     * 00027700
*              The primary symptom string is required by the symptom  * 00027800
*              record architecture, consequently, this field cannot   * 00027900
*              be zero.                                               * 00028000
*                                                                     * 00028100
*                                                                     * 00028200
*                                                                     * 00028300
*                                                                     * 00028400
*          [SECLEN=xseclen|0]                                       * 00028500
*              is the name (RS-type), or address in register          * 00028600
*              (2)-(12), of an optional halfword input variable which * 00028700
*              contains the maximum length in bytes of the secondary  * 00028800
*              symptom string.  The length provided must be large     * 00028900
*              enough to contain the secondary symptom string.  The   * 00029000
*              following formula can be used to calculate the length  * 00029100
*              of the secondary symptom string:  Lengths of all       * 00029200
*              SDBKEYs + length of all data provided with the DATA    * 00029300
*              keyword + the number of times SDBKEY is specified +    * 00029400
*              the length of all data specified with the SDBSTRING    * 00029500
*              keyword + the number of times the SDBSTRING keyword is * 00029600
*              provided.  Note that the maximum size of the entire    * 00029700
*              symptom record is 1900 bytes.                          * 00029800
*                                                                     * 00029900
*              The secondary symptom string is not required by the    * 00030000
*              symptom record architecture.  If a length of zero is   * 00030100
*              specified, the secondary symptom string will be        * 00030200
*              ignored.                                               * 00030300
*              DEFAULT: 0                                             * 00030400
*                                                                     * 00030500
*                                                                     * 00030600
*                                                                     * 00030700
*                                                                     * 00030800
*          [VARLEN=xvarlen|0]                                       * 00030900
*              is the name (RS-type), or address in register          * 00031000
*              (2)-(12), of an optional halfword input variable which * 00031100
*              contains the maximum length in bytes of the variable   * 00031200
*              data section.  The length provided must be the total   * 00031300
*              length of the variable data items + the number of      * 00031400
*              items * 4. (The 4 is for the 2 byte key (FF00 or F000) * 00031500
*              plus 2 bytes for the length) Note that the maximum     * 00031600
*              size of the entire symptom record is 1900 bytes.       * 00031700
*                                                                     * 00031800
*              The variable data section is not required by the       * 00031900
*              symptom record architecture.  If a length of zero is   * 00032000
*              specified, section 5 will be ignored.                  * 00032100
*              DEFAULT: 0                                             * 00032200
*                                                                     * 00032300
*                                                                     * 00032400
*                                                                     * 00032500
*                                                                     * 00032600
*          ARCHLEV=10                                               * 00032700
*              is a required keyword input which indicates the        * 00032800
*              architecture level of the symptom record.              * 00032900
*                                                                     * 00033000
*                                                                     * 00033100
*              ARCHLEV=10                                             * 00033200
*                  Use symptom record architecture level 10.          * 00033300
*                  Currently, this is the only valid architecture     * 00033400
*                  level.                                             * 00033500
*                                                                     * 00033600
*                                                                     * 00033700
*                                                                     * 00033800
*                                                                     * 00033900
*                                                                     * 00034000
*                                                                     * 00034100
*          [DAE=YES|NO]                                             * 00034200
*              is an optional keyword input which indicates whether   * 00034300
*              the symptom string is to be used by DAE for dump       * 00034400
*              suppression.                                           * 00034500
*              DEFAULT: YES                                           * 00034600
*                                                                     * 00034700
*                                                                     * 00034800
*              DAE=YES                                                * 00034900
*                  The symptom string is to be used by DAE for dump   * 00035000
*                  suppression.                                       * 00035100
*                                                                     * 00035200
*              DAE=NO                                                 * 00035300
*                  The symptom string is not to be used by DAE for    * 00035400
*                  dump suppression.                                  * 00035500
*                                                                     * 00035600
*                                                                     * 00035700
*                                                                     * 00035800
*                                                                     * 00035900
*                                                                     * 00036000
*                                                                     * 00036100
*          [COMPDSC=xcompdsc|NO_COMPDSC]                            * 00036200
*              is the name (RS-type), or address in register          * 00036300
*              (2)-(12), of an optional 32 character input text       * 00036400
*              description of the failing module's subfunction.       * 00036500
*              (e.g. IOS - IOSB Analysis Routine).                    * 00036600
*              DEFAULT: NO_COMPDSC                                    * 00036700
*                                                                     * 00036800
*                                                                     * 00036900
*                                                                     * 00037000
*                                                                     * 00037100
*          [PROBLEM=xproblem|NO_PROBLEM]                            * 00037200
*              is the name (RS-type), or address in register          * 00037300
*              (2)-(12), of an optional 8 character input problem     * 00037400
*              identifier used to associate the symptom record with   * 00037500
*              other symptom records or with other problem            * 00037600
*              indicators.                                            * 00037700
*              DEFAULT: NO_PROBLEM                                    * 00037800
*                                                                     * 00037900
*                                                                     * 00038000
*                                                                     * 00038100
*                                                                     * 00038200
*          [SERVLEV=xservlev|NO_SERVICE_LEVEL]                      * 00038300
*              is the name (RS-type), or address in register          * 00038400
*              (2)-(12), of an optional 8 character input service     * 00038500
*              level.  This service level is different than the PID   * 00038600
*              and Component release levels.  When the value is       * 00038700
*              provided, the code is normally at a higher level than  * 00038800
*              the release level.  The values of this field may be    * 00038900
*              any information which is indicative of the service     * 00039000
*              level e.g. PTF#, APAR#, FMID, user modification        * 00039100
*              number, etc.                                           * 00039200
*              DEFAULT: NO_SERVICE_LEVEL                              * 00039300
*                                                                     * 00039400
*                                                                     * 00039500
*                                                                     * 00039600
*                                                                     * 00039700
*          [NOCONVERTS]                                               * 00039800
*              Keyword that indicates no data conversion from         * 00039900
*              hexadecimal to EBCDIC will be needed for this symptom  * 00040000
*              record.  Specifying this keyword on an assembler       * 00040100
*              invocation of SYMRBLD will prevent generating          * 00040200
*              unnecessary code.                                      * 00040300
*                                                                     * 00040400
*              If only conversion to decimal EBCDIC will be done,     * 00040500
*              NOCONVERTS can be specified. Note that conversion to   * 00040600
*              decimal EBCDIC is only supported for a hexadecimal     * 00040700
*              user abend code provided with the SDBAB_U SDB key.     * 00040800
*              DEFAULT: CONVERSIONS                                   * 00040900
*                                                                     * 00041000
*                                                                     * 00041100
*                                                                     * 00041200
*                                                                     * 00041300
*          [IBM=NO|YES]                                             * 00041400
*              is an optional keyword input which indicates whether   * 00041500
*              the program building the symptom record is an IBM      * 00041600
*              program or not.                                        * 00041700
*              DEFAULT: NO                                            * 00041800
*                                                                     * 00041900
*                                                                     * 00042000
*              [IBM=NO                                                * 00042100
*                  specifies that a non-IBM program is building the   * 00042200
*                  symptom record.                                    * 00042300
*                                                                     * 00042400
*                                                                     * 00042500
*                  PROGRAM=xprogram                                   * 00042600
*                      is the name (RS-type), or address in register  * 00042700
*                      (2)-(12), of a required 8 character input      * 00042800
*                      variable that contains the name of the failing * 00042900
*                      program.                                       * 00043000
*                                                                     * 00043100
*                      When this keyword is specified, the            * 00043200
*                      PIDS/aaaaaaaa SDB symptom is automatically put * 00043300
*                      into section 3 of the symptom record.          * 00043400
*                      DEFAULT: NO_PROGRAM                            * 00043500
*                                                                     * 00043600
*                                                                     * 00043700
*                                                                     * 00043800
*                                                                     * 00043900
*                  PROGLEV=xproglev]                                  * 00044000
*                      is the name (RS-type), or address in register  * 00044100
*                      (2)-(12), of a required 8 character input      * 00044200
*                      variable that specifies the program major      * 00044300
*                      level.                                         * 00044400
*                      DEFAULT: NO_PROGLEV                            * 00044500
*                                                                     * 00044600
*                                                                     * 00044700
*                                                                     * 00044800
*              [IBM=YES                                               * 00044900
*                  specifies that an IBM program is building the      * 00045000
*                  symptom record.                                    * 00045100
*                                                                     * 00045200
*                                                                     * 00045300
*                  The following is a set of mutually exclusive keys. * 00045400
*                  This set is required; only one key must be         * 00045500
*                  specified.                                         * 00045600
*                                                                     * 00045700
*                                                                     * 00045800
*                  COMPID=xcompid                                     * 00045900
*                      belongs to a set of mutually exclusive keys.   * 00046000
*                      It is the name (RS-type), or address in        * 00046100
*                      register (2)-(12), of a 9 character input It   * 00046200
*                      designates a component ID without imbedded     * 00046300
*                      punctuation ( e.g. 5752SC1CM).                 * 00046400
*                                                                     * 00046500
*                      When this keyword is specified, the            * 00046600
*                      PIDS/aaaaaaaaa SDB symptom is automatically    * 00046700
*                      put into section 3 of the symptom record.      * 00046800
*                      DEFAULT: NO_COMPID                             * 00046900
*                                                                     * 00047000
*                                                                     * 00047100
*                      COMPLEV=xcomplev                               * 00047200
*                          is the name (RS-type), or address in       * 00047300
*                          register (2)-(12), of a required 4         * 00047400
*                          character input component release level,   * 00047500
*                          left justified.  For example, the MVS BCP  * 00047600
*                          component release level for HBB3310 is     * 00047700
*                          'C10 '.                                    * 00047800
*                          DEFAULT: NO_COMPLEV                        * 00047900
*                                                                     * 00048000
*                                                                     * 00048100
*                                                                     * 00048200
*                  PID=xpid                                           * 00048300
*                      belongs to a set of mutually exclusive keys.   * 00048400
*                      It is the name (RS-type), or address in        * 00048500
*                      register (2)-(12), of an 8 character input It  * 00048600
*                      designates a Program Information Department    * 00048700
*                      (PID) number.  The PID is represented as a 7   * 00048800
*                      character value with no punctuation and 1 byte * 00048900
*                      of padding ( e.g. 5740-CB-1 is given as        * 00049000
*                      '5740CB1 ').  This field is never provided     * 00049100
*                      instead of, or in addition to, the component   * 00049200
*                      ID.  This field should ONLY be specified by    * 00049300
*                      IBM programs which do not have an assigned     * 00049400
*                      component ID.                                  * 00049500
*                                                                     * 00049600
*                      When this keyword is specified, the            * 00049700
*                      PIDS/aaaaaaaa SDB symptom is automatically put * 00049800
*                      into section 3 of the symptom record.          * 00049900
*                      DEFAULT: NO_PID                                * 00050000
*                                                                     * 00050100
*                                                                     * 00050200
*                      PIDLEVEL=xpidlevel                             * 00050300
*                          is the name (RS-type), or address in       * 00050400
*                          register (2)-(12), of a required 8         * 00050500
*                          character input variable which contains    * 00050600
*                          the release level of the program           * 00050700
*                          designated by a Program Information        * 00050800
*                          Department (PID) number.  The format of    * 00050900
*                          this field is VxRxxMxx where x represents  * 00051000
*                          numerical values.  For example, V1R21bbb   * 00051100
*                          is the way to express Version 1, Release   * 00051200
*                          2.1 (no modification number in this        * 00051300
*                          instance).                                 * 00051400
*                          DEFAULT: NO_PIDLEV                         * 00051500
*                                                                     * 00051600
*                                                                     * 00051700
*                                                                     * 00051800
*                                                                     * 00051900
*                                                                     * 00052000
*                  End of a set of mutually exclusive required keys.  * 00052100
*                                                                     * 00052200
*                                                                     * 00052300
*                                                                     * 00052400
*                  [SUBSYSTEM=xsubsystem|NO_SUBSYSTEM]]             * 00052500
*                      is the name (RS-type), or address in register  * 00052600
*                      (2)-(12), of an optional 8 character input     * 00052700
*                      variable which contains the name of a          * 00052800
*                      subsystem.  The intended use of this keyword   * 00052900
*                      is to allow IBM subsystems (e.g., CICS,        * 00053000
*                      VM/GCS) to intercept a symptom record created  * 00053100
*                      by programs which run on the subsystem.  The   * 00053200
*                      subsystem may then provide additional          * 00053300
*                      information to the symptom record.             * 00053400
*                      DEFAULT: NO_SUBSYSTEM                          * 00053500
*                                                                     * 00053600
*                                                                     * 00053700
*                                                                     * 00053800
*                                                                     * 00053900
*                                                                     * 00054000
*                                                                     * 00054100
*                                                                     * 00054200
*      RESET                                                          * 00054300
*          The RESET keyword indicates that the symptom record is to  * 00054400
*          be rebuilt using the same storage and component            * 00054500
*          information that was specified with the INITIAL keyword.   * 00054600
*                                                                     * 00054700
*          The size of the primary, secondary, and variable sections  * 00054800
*          can be changed by specifying new lengths.  Otherwise, the  * 00054900
*          original lengths are used.                                 * 00055000
*                                                                     * 00055100
*          This keyword is useful when the primary, secondary, and    * 00055200
*          variable sections of the symptom record are to be changed, * 00055300
*          but the component information in section 2.1 remains the   * 00055400
*          same.                                                      * 00055500
*                                                                     * 00055600
*                                                                     * 00055700
*          SR=xsr                                                     * 00055800
*              is a required input.  It is the name (RS-type), or     * 00055900
*              address in register (2)-(12), of the storage area to   * 00056000
*              be used for the symptom record.                        * 00056100
*                                                                     * 00056200
*                                                                     * 00056300
*                                                                     * 00056400
*                                                                     * 00056500
*          [PRIMLEN=xprimlen|OLD_PRIMLEN]                           * 00056600
*              is the name (RS-type), or address in register          * 00056700
*              (2)-(12), of an optional halfword input variable which * 00056800
*              contains the maximum length in bytes of the primary    * 00056900
*              symptom string.  The length provided must be large     * 00057000
*              enough to contain the primary symptom string.  Note    * 00057100
*              that the maximum size of the entire symptom record is  * 00057200
*              1900 bytes.  When this keyword is not specified, the   * 00057300
*              length of the primary symptom string will not change.  * 00057400
*                                                                     * 00057500
*              The primary symptom string is required by the symptom  * 00057600
*              record architecture, consequently, this field cannot   * 00057700
*              be zero.                                               * 00057800
*              DEFAULT: OLD_PRIMLEN                                   * 00057900
*                                                                     * 00058000
*                                                                     * 00058100
*                                                                     * 00058200
*                                                                     * 00058300
*          [SECLEN=xseclen|OLD_SECLEN]                              * 00058400
*              is the name (RS-type), or address in register          * 00058500
*              (2)-(12), of an optional halfword input variable which * 00058600
*              contains the maximum length in bytes of the secondary  * 00058700
*              symptom string.  The length provided must be large     * 00058800
*              enough to contain the secondary symptom string.  Note  * 00058900
*              that the maximum size of the entire symptom record is  * 00059000
*              1900 bytes.  When this keyword is not specified, the   * 00059100
*              length of the secondary symptom string will not        * 00059200
*              change.                                                * 00059300
*                                                                     * 00059400
*              The secondary symptom string is not required by the    * 00059500
*              symptom record architecture.  If a length of zero is   * 00059600
*              specified, the secondary symptom string will be        * 00059700
*              ignored.                                               * 00059800
*              DEFAULT: OLD_SECLEN                                    * 00059900
*                                                                     * 00060000
*                                                                     * 00060100
*                                                                     * 00060200
*                                                                     * 00060300
*          [VARLEN=xvarlen|OLD_VARLEN]                              * 00060400
*              is the name (RS-type), or address in register          * 00060500
*              (2)-(12), of an optional halfword input variable which * 00060600
*              contains the maximum length in bytes of the variable   * 00060700
*              data section.  The length provided must be large       * 00060800
*              enough to contain the variable data.  Note that the    * 00060900
*              maximum size of the entire symptom record is 1900      * 00061000
*              bytes.  When this keyword is not specified, the length * 00061100
*              of the variable data section will not change.          * 00061200
*                                                                     * 00061300
*              The variable data section is not required by the       * 00061400
*              symptom record architecture.  If a length of zero is   * 00061500
*              specified, section 5 will be ignored.                  * 00061600
*              DEFAULT: OLD_VARLEN                                    * 00061700
*                                                                     * 00061800
*                                                                     * 00061900
*                                                                     * 00062000
*      PRIMARY                                                        * 00062100
*          This keyword indicates that the symptom data provided is   * 00062200
*          to be concatenated to section 3, the primary symptom       * 00062300
*          string.  The primary symptom string is an EBCDIC character * 00062400
*          string of problem symptoms.  The primary symptom string is * 00062500
*          used for duplicate problem recognition, therefore, the     * 00062600
*          symptom data must be repeatable for each instance of the   * 00062700
*          problem.                                                   * 00062800
*                                                                     * 00062900
*          In most cases the symptom record architecture requires     * 00063000
*          that the PIDS/aaaaaaaaa symptom be in section 3 of the     * 00063100
*          symptom record. Therefore, when the symptom record is      * 00063200
*          initialized by invoking SYMRBLD INITIAL, the symptom is    * 00063300
*          created from the data supplied with either the COMPID,     * 00063400
*          PID, or PROGRAM keyword and is placed as the first symptom * 00063500
*          in section 3.                                              * 00063600
*                                                                     * 00063700
*          The suggested minimum list of symptoms includes:           * 00063800
*                                                                     * 00063900
*                                                                     * 00064000
*          o   Return or Reason code  -  PRCS/aaaaaaaa                * 00064100
*                                                                     * 00064200
*          o   CSECT name  - RIDS/aaaaaaaa                            * 00064300
*                                                                     * 00064400
*          o   Load module name  - RIDS/aaaaaaaa#L                    * 00064500
*                                                                     * 00064600
*                                                                     * 00064700
*                                                                     * 00064800
*          The following restrictions apply to symptoms in the        * 00064900
*          primary symptom string:                                    * 00065000
*                                                                     * 00065100
*                                                                     * 00065200
*          o   The symptom data cannot contain imbedded blanks.  The  * 00065300
*              '#' can be used to substitute for desired blanks.      * 00065400
*                                                                     * 00065500
*          o   The total length of each symptom (key/data) may not    * 00065600
*              exceed 15 characters. The symptom length includes the  * 00065700
*              SDB key, a slash, and the EDCDIC data. (Note that      * 00065800
*              hexadecimal data doubles in length when converted to   * 00065900
*              EBCDIC.)                                               * 00066000
*                                                                     * 00066100
*                                                                     * 00066200
*                                                                     * 00066300
*                                                                     * 00066400
*          [SR=xsr|SR_IN_R1]                                        * 00066500
*              is an optional input.  It is the name (RS-type), or    * 00066600
*              address in register (2)-(12), of the storage area to   * 00066700
*              be used for the symptom record.  If the keyword is not * 00066800
*              specified, register 1 is assumed to contain a pointer  * 00066900
*              to the symptom record.                                 * 00067000
*              DEFAULT: SR_IN_R1                                      * 00067100
*                                                                     * 00067200
*                                                                     * 00067300
*                                                                     * 00067400
*                                                                     * 00067500
*          [SDBSTRING=xsdbstring|NO_SDB_STRING                      * 00067600
*              is the name (RS-type) of an optional character input   * 00067700
*              string to be added to the primary symptom string. The  * 00067800
*              data is a list of symptoms separated by a blank. A     * 00067900
*              symptom is an SDB key followed by a slash and EBCDIC   * 00068000
*              data.                                                  * 00068100
*                                                                     * 00068200
*              When both the SDBSTRING and SDBKEY keywords are        * 00068300
*              supplied on the same macro invocation, the data        * 00068400
*              provided with the SDBSTRING keyword will be put into   * 00068500
*              the symptom string first.                              * 00068600
*                                                                     * 00068700
*              For example:                                           * 00068800
*                                                                     * 00068900
*                  SYMRBLD PRIMARY,SDBSTRING=S3_DATA                  * 00069000
*                                                                     * 00069100
*                  S3_DATA DC CL41'MS/IEE0001I RIDS/IEAVTRRR          * 00069200
*                                  RIDS/IEAVTRLD#L'                   * 00069300
*                                                                     * 00069400
*              DEFAULT: NO_SDB_STRING                                 * 00069500
*                                                                     * 00069600
*                                                                     * 00069700
*              [SDBLEN=xsdblen|DEFINED_LENGTH]                      * 00069800
*                  is  an  optional  halfword input decimal value, or * 00069900
*                  register  (2)-(12),  in the "1-256" range which is * 00070000
*                  the  length  of  the  data  provided.   The SDBLEN * 00070100
*                  keyword  is  mutually exclusive with the SDBLENVAR * 00070200
*                  keyword.                                           * 00070300
*                  DEFAULT: DEFINED_LENGTH                            * 00070400
*                                                                     * 00070500
*                                                                     * 00070600
*                                                                     * 00070700
*                                                                     * 00070800
*              [SDBLENVAR=xsdblenvar|DEFINED_LENGTH]]               * 00070900
*                  is  the  name  (RS-type),  or  address in register * 00071000
*                  (2)-(12),  of  an  optional  halfword  input which * 00071100
*                  contains  the  length  of the data provided.   The * 00071200
*                  length  of the data is assumed to be less than 256 * 00071300
*                  bytes.      The   SDBLENVAR  keyword  is  mutually * 00071400
*                  exclusive with the SDBLEN keyword.                 * 00071500
*                  DEFAULT: DEFINED_LENGTH                            * 00071600
*                                                                     * 00071700
*                                                                     * 00071800
*                                                                     * 00071900
*                                                                     * 00072000
*                                                                     * 00072100
*                                                                     * 00072200
*          [SDBKEY=xsdbkey|NO_SDBKEY                                * 00072300
*              is an optional character input name from the set of    * 00072400
*              SDB key names documented in the macro usage section or * 00072500
*              an SDB key in single quotes. The SDB key names         * 00072600
*              documented in the macro usage section are in the form  * 00072700
*              SDB followed by the SDB key.  For example: the SDB key * 00072800
*              name for the 'AB/S' SDB key is SDBAB_S.                * 00072900
*              DEFAULT: NO_SDBKEY                                     * 00073000
*                                                                     * 00073100
*                                                                     * 00073200
*              DATA=xdata                                             * 00073300
*                  is a required input.  It is the name (RS-type), or * 00073400
*                  address in register (2)-(12), of the area that     * 00073500
*                  contains the data associated with the key          * 00073600
*                  specified by the SDBKEY keyword.                   * 00073700
*                                                                     * 00073800
*                                                                     * 00073900
*                  [LEN=xlen|DEFINED_LENGTH]                        * 00074000
*                      is an optional halfword input decimal value,   * 00074100
*                      or register (2)-(12), in the "1-13" range      * 00074200
*                      which is the length of the data provided.  The * 00074300
*                      LEN keyword is mutually exclusive with the     * 00074400
*                      LENVAR keyword.                                * 00074500
*                      DEFAULT: DEFINED_LENGTH                        * 00074600
*                                                                     * 00074700
*                                                                     * 00074800
*                                                                     * 00074900
*                                                                     * 00075000
*                  [LENVAR=xlenvar|DEFINED_LENGTH]                  * 00075100
*                      is the name (RS-type), or address in register  * 00075200
*                      (2)-(12), of an optional halfword input which  * 00075300
*                      contains the length of the data provided.  The * 00075400
*                      length of the data is assumed to be between 1  * 00075500
*                      and 13 bytes.  The LENVAR keyword is mutually  * 00075600
*                      exclusive with the LEN keyword.                * 00075700
*                      DEFAULT: DEFINED_LENGTH                        * 00075800
*                                                                     * 00075900
*                                                                     * 00076000
*                                                                     * 00076100
*                                                                     * 00076200
*                  [CONVERT=NO|YES]]                                * 00076300
*                      is an optional keyword input which indicates 1 * 00076400
*                      to 4 bytes of hexadecimal data specified by    * 00076500
*                      the DATA keyword should be converted to        * 00076600
*                      EBCDIC.  If the length provided is greater     * 00076700
*                      than 4 bytes, the results are unpredictable.   * 00076800
*                                                                     * 00076900
*                      If CONVERT is specified with the user abend    * 00077000
*                      code SDB key, SDBAB_U, the hexadecimal data    * 00077100
*                      will be converted to decimal EBCDIC.           * 00077200
*                      DEFAULT: NO                                    * 00077300
*                                                                     * 00077400
*                                                                     * 00077500
*                      CONVERT=NO                                     * 00077600
*                          The data will not be converted.            * 00077700
*                                                                     * 00077800
*                      CONVERT=YES                                    * 00077900
*                          The data will be converted.                * 00078000
*                                                                     * 00078100
*                                                                     * 00078200
*                                                                     * 00078300
*                                                                     * 00078400
*                                                                     * 00078500
*                                                                     * 00078600
*                                                                     * 00078700
*                                                                     * 00078800
*                                                                     * 00078900
*                                                                     * 00079000
*          [TYPE=TEST|NOTEST]                                       * 00079100
*              is an optional keyword input which specifies whether   * 00079200
*              code should be generated to test if the data will fit  * 00079300
*              in the symptom record before storing the data.         * 00079400
*              DEFAULT: TEST                                          * 00079500
*                                                                     * 00079600
*                                                                     * 00079700
*              TYPE=TEST                                              * 00079800
*                  Code will be generated to test if the data will    * 00079900
*                  fit into the symptom record.                       * 00080000
*                                                                     * 00080100
*              TYPE=NOTEST                                            * 00080200
*                  The data and key will be unconditionally moved     * 00080300
*                  into the symptom record.                           * 00080400
*                                                                     * 00080500
*                                                                     * 00080600
*                                                                     * 00080700
*                                                                     * 00080800
*                                                                     * 00080900
*      SECONDARY                                                      * 00081000
*          This keyword indicates that the symptom data provided is   * 00081100
*          to be concatenated to section 4, the secondary symptom     * 00081200
*          string.  The secondary symptom string is an EBCDIC         * 00081300
*          character string of problem symptoms, SDB key/data pairs.  * 00081400
*          The purpose of the secondary symptom string is to save     * 00081500
*          diagnostic data at the time of the error.  This data may   * 00081600
*          not be repeatable for each instance of the problem.        * 00081700
*                                                                     * 00081800
*          The suggested minimum list of symptoms includes:           * 00081900
*                                                                     * 00082000
*                                                                     * 00082100
*          o   Module assembly level -  LVLS/aaa                      * 00082200
*                                                                     * 00082300
*          o   Field name related to the error and contents -         * 00082400
*              FLDS/av10 VALU/Cav8                                    * 00082500
*                                                                     * 00082600
*              Note that binary and hex data can be provided with the * 00082700
*              VALU/B and VALU/H keys.                                * 00082800
*                                                                     * 00082900
*                                                                     * 00083000
*                                                                     * 00083100
*          The following restrictions apply to symptoms in the        * 00083200
*          secondary symptom string:                                  * 00083300
*                                                                     * 00083400
*                                                                     * 00083500
*          o   The symptom data cannot contain imbedded blanks.  The  * 00083600
*              '#' can be used to substitute for desired blanks.      * 00083700
*                                                                     * 00083800
*          o   The total length of each symptom (key/data) may not    * 00083900
*              exceed 15 characters. The symptom length includes the  * 00084000
*              SDB key, a slash, and the EDCDIC data. (Note that      * 00084100
*              hexadecimal data doubles in length when converted to   * 00084200
*              EBCDIC.)                                               * 00084300
*                                                                     * 00084400
*                                                                     * 00084500
*                                                                     * 00084600
*                                                                     * 00084700
*          [SR=xsr|SR_IN_R1]                                        * 00084800
*              is an optional input.  It is the name (RS-type), or    * 00084900
*              address in register (2)-(12), of the storage area to   * 00085000
*              be used for the symptom record.  If the keyword is not * 00085100
*              specified, register 1 is assumed to contain a pointer  * 00085200
*              to the symptom record.                                 * 00085300
*              DEFAULT: SR_IN_R1                                      * 00085400
*                                                                     * 00085500
*                                                                     * 00085600
*                                                                     * 00085700
*                                                                     * 00085800
*          [SDBSTRING=xsdbstring|NO_SDB_STRING                      * 00085900
*              is the name (RS-type), or address in register          * 00086000
*              (2)-(12), of an optional character input string to be  * 00086100
*              added to the secondary symptom string. The data is a   * 00086200
*              list of symptoms separated by a blank. A symptom is an * 00086300
*              SDB key followed by a slash and EBCDIC data.           * 00086400
*                                                                     * 00086500
*              When both the SDBSTRING and SDBKEY keywords are        * 00086600
*              supplied on the same macro invocation, the data        * 00086700
*              provided with the SDBSTRING keyword will be put into   * 00086800
*              the symptom string first.                              * 00086900
*                                                                     * 00087000
*              For example:                                           * 00087100
*                                                                     * 00087200
*                  SYMRBLD SECONDARY,SDBSTRING=S4_DATA,               * 00087300
*                          SDBKEY=SDBVALU_H,                          * 00087400
*                          DATA=COUNTER,CONVERT                       * 00087500
*                                                                     * 00087600
*                  COUNTER DS F                                       * 00087700
*                  S4_DATA DC CL22'LVLS/C20 FLDS/COUNTER'             * 00087800
*                                                                     * 00087900
*                  Secondary Symptom String:                          * 00088000
*                                                                     * 00088100
*                            LVLS/C20 FLDS/COUNTER VALU/HFFFFFFFF     * 00088200
*                                                                     * 00088300
*              DEFAULT: NO_SDB_STRING                                 * 00088400
*                                                                     * 00088500
*                                                                     * 00088600
*              [SDBLEN=xsdblen|DEFINED_LENGTH]                      * 00088700
*                  is  an  optional  halfword input decimal value, or * 00088800
*                  register  (2)-(12),  in the "1-256" range which is * 00088900
*                  the  length  of  the  data  provided.   The SDBLEN * 00089000
*                  keyword  is  mutually exclusive with the SDBLENVAR * 00089100
*                  keyword.                                           * 00089200
*                  DEFAULT: DEFINED_LENGTH                            * 00089300
*                                                                     * 00089400
*                                                                     * 00089500
*                                                                     * 00089600
*                                                                     * 00089700
*              [SDBLENVAR=xsdblenvar|DEFINED_LENGTH]]               * 00089800
*                  is  the  name  (RS-type),  or  address in register * 00089900
*                  (2)-(12),  of  an  optional  halfword  input which * 00090000
*                  contains  the  length  of the data provided.   The * 00090100
*                  length  of the data is assumed to be between 1 and * 00090200
*                  256  bytes.    The  SDBLENVAR  keyword is mutually * 00090300
*                  exclusive with the SDBLEN keyword.                 * 00090400
*                  DEFAULT: DEFINED_LENGTH                            * 00090500
*                                                                     * 00090600
*                                                                     * 00090700
*                                                                     * 00090800
*                                                                     * 00090900
*                                                                     * 00091000
*                                                                     * 00091100
*          [SDBKEY=xsdbkey|NO_SDBKEY                                * 00091200
*              is an optional character input name from the set of    * 00091300
*              SDB key names documented in the macro usage section or * 00091400
*              an SDB key in single quotes. The SDB key names         * 00091500
*              documented in the macro usage section are in the form  * 00091600
*              SDB followed by the SDB key.  For example: the SDB key * 00091700
*              name for the 'RIDS/' SDB key is SDBRIDS.               * 00091800
*              DEFAULT: NO_SDBKEY                                     * 00091900
*                                                                     * 00092000
*                                                                     * 00092100
*              DATA=xdata                                             * 00092200
*                  is a required input.  It is the name (RS-type), or * 00092300
*                  address in register (2)-(12), of the area that     * 00092400
*                  contains the data associated with the key          * 00092500
*                  specified by the SDBKEY keyword.                   * 00092600
*                                                                     * 00092700
*                                                                     * 00092800
*                  [LEN=xlen|DEFINED_LENGTH]                        * 00092900
*                      is an optional halfword input decimal value,   * 00093000
*                      or register (2)-(12), in the "1-13" range      * 00093100
*                      which is the length of the data provided.  The * 00093200
*                      LEN keyword is mutually exclusive with the     * 00093300
*                      LENVAR keyword.                                * 00093400
*                      DEFAULT: DEFINED_LENGTH                        * 00093500
*                                                                     * 00093600
*                                                                     * 00093700
*                                                                     * 00093800
*                                                                     * 00093900
*                  [LENVAR=xlenvar|DEFINED_LENGTH]                  * 00094000
*                      is the name (RS-type), or address in register  * 00094100
*                      (2)-(12), of an optional halfword input which  * 00094200
*                      contains the length of the data provided.  The * 00094300
*                      length of the data is assumed to be between 1  * 00094400
*                      and 13 bytes.  The LENVAR keyword is mutually  * 00094500
*                      exclusive with the LEN keyword.                * 00094600
*                      DEFAULT: DEFINED_LENGTH                        * 00094700
*                                                                     * 00094800
*                                                                     * 00094900
*                                                                     * 00095000
*                                                                     * 00095100
*                  [CONVERT=NO|YES]]                                * 00095200
*                      is an optional keyword input which indicates 1 * 00095300
*                      to 4 bytes of hexadecimal data specified by    * 00095400
*                      the DATA keyword should be converted to        * 00095500
*                      EBCDIC.  If the length provided is greater     * 00095600
*                      than 4 bytes, the results are unpredictable.   * 00095700
*                                                                     * 00095800
*                      If CONVERT is specified with the user abend    * 00095900
*                      code SDB key, SDBAB_U, the hexadecimal data    * 00096000
*                      will be converted to decimal EBCDIC.           * 00096100
*                      DEFAULT: NO                                    * 00096200
*                                                                     * 00096300
*                                                                     * 00096400
*                      CONVERT=NO                                     * 00096500
*                          The data will not be converted.            * 00096600
*                                                                     * 00096700
*                      CONVERT=YES                                    * 00096800
*                          The data will be converted.                * 00096900
*                                                                     * 00097000
*                                                                     * 00097100
*                                                                     * 00097200
*                                                                     * 00097300
*                                                                     * 00097400
*                                                                     * 00097500
*                                                                     * 00097600
*                                                                     * 00097700
*                                                                     * 00097800
*                                                                     * 00097900
*          [TYPE=TEST|NOTEST]                                       * 00098000
*              is an optional keyword input which specifies whether   * 00098100
*              code should be generated to test if the data will fit  * 00098200
*              in the symptom record before storing the data.         * 00098300
*              DEFAULT: TEST                                          * 00098400
*                                                                     * 00098500
*                                                                     * 00098600
*              TYPE=TEST                                              * 00098700
*                  Code will be generated to test if the data will    * 00098800
*                  fit into the symptom record.                       * 00098900
*                                                                     * 00099000
*              TYPE=NOTEST                                            * 00099100
*                  The data and key will be unconditionally moved     * 00099200
*                  into the symptom record.                           * 00099300
*                                                                     * 00099400
*                                                                     * 00099500
*                                                                     * 00099600
*                                                                     * 00099700
*                                                                     * 00099800
*      VARIABLE                                                       * 00099900
*          This keyword indicates that the symptom data provided is   * 00100000
*          to be concatenated to section 5, the variable data         * 00100100
*          section.  The variable data section is in key/length/data  * 00100200
*          format.  The purpose of the variable data section is to    * 00100300
*          provide additional serviceability data for debugging, for  * 00100400
*          example, a parameter list, a text description of the       * 00100500
*          problem, a portion of a control block, etc...              * 00100600
*                                                                     * 00100700
*          The VARIABLE keyword must be specified once for each       * 00100800
*          symptom provided in key/length/data format.                * 00100900
*                                                                     * 00101000
*                                                                     * 00101100
*          [SR=xsr|SR_IN_R1]                                        * 00101200
*              is an optional input.  It is the name (RS-type), or    * 00101300
*              address in register (2)-(12), of the storage area to   * 00101400
*              be used for the symptom record.  If the keyword is not * 00101500
*              specified, register 1 is assumed to contain a pointer  * 00101600
*              to the symptom record.                                 * 00101700
*              DEFAULT: SR_IN_R1                                      * 00101800
*                                                                     * 00101900
*                                                                     * 00102000
*                                                                     * 00102100
*                                                                     * 00102200
*          S5KEY=xs5key                                               * 00102300
*              is a required halfword input symbol or decimal value   * 00102400
*              that is the key which describes the data put in        * 00102500
*              section 5 of the symptom record.  Names for two keys   * 00102600
*              (S5EBCDIC, S5HEX) are described by macro usage note 5. * 00102700
*                                                                     * 00102800
*                                                                     * 00102900
*                                                                     * 00103000
*                                                                     * 00103100
*          DATA=xdata                                                 * 00103200
*              is a required input.  It is the name (RS-type), or     * 00103300
*              address in register (2)-(12), of the area that         * 00103400
*              contains the data associated with the key specified by * 00103500
*              the S5KEY keyword.                                     * 00103600
*                                                                     * 00103700
*                                                                     * 00103800
*              [LEN=xlen|DEFINED_LENGTH]                            * 00103900
*                  is an optional halfword input decimal value, or    * 00104000
*                  register (2)-(12), in the "1-256" range which      * 00104100
*                  contains the length of the data provided.  The LEN * 00104200
*                  keyword is mutually exclusive with the LENVAR      * 00104300
*                  keyword.                                           * 00104400
*                  DEFAULT: DEFINED_LENGTH                            * 00104500
*                                                                     * 00104600
*                                                                     * 00104700
*                                                                     * 00104800
*                                                                     * 00104900
*              [LENVAR=xlenvar|DEFINED_LENGTH]                      * 00105000
*                  is the name (RS-type), or address in register      * 00105100
*                  (2)-(12), of an optional halfword input which      * 00105200
*                  contains the length of the data provided.  The     * 00105300
*                  length of the data is assumed to be between 1 and  * 00105400
*                  256 bytes.  The LENVAR keyword is mutually         * 00105500
*                  exclusive with the LEN keyword.                    * 00105600
*                  DEFAULT: DEFINED_LENGTH                            * 00105700
*                                                                     * 00105800
*                                                                     * 00105900
*                                                                     * 00106000
*                                                                     * 00106100
*                                                                     * 00106200
*                                                                     * 00106300
*          [TYPE=TEST|NOTEST]                                       * 00106400
*              is an optional keyword input which specifies whether   * 00106500
*              code should be generated to test if the data will fit  * 00106600
*              in the symptom record before storing the data.         * 00106700
*              DEFAULT: TEST                                          * 00106800
*                                                                     * 00106900
*                                                                     * 00107000
*              TYPE=TEST                                              * 00107100
*                  Code will be generated to test if the data will    * 00107200
*                  fit into the symptom record.                       * 00107300
*                                                                     * 00107400
*              TYPE=NOTEST                                            * 00107500
*                  The data and key will be unconditionally moved     * 00107600
*                  into the symptom record.                           * 00107700
*                                                                     * 00107800
*                                                                     * 00107900
*                                                                     * 00108000
*                                                                     * 00108100
*                                                                     * 00108200
*      COMPLETE                                                       * 00108300
*          This keyword indicates that the symptom record is          * 00108400
*          complete, and is ready to be passed to the SYMREC service  * 00108500
*          in order to be written to SYS1.LOGREC.                     * 00108600
*                                                                     * 00108700
*          SYMRBLD COMPLETE is REQUIRED before the symptom record can * 00108800
*          be successfully written to SYS1.LOGREC.                    * 00108900
*                                                                     * 00109000
*                                                                     * 00109100
*          [SR=xsr|SR_IN_R1]                                        * 00109200
*              is an optional input.  It is the name (RS-type), or    * 00109300
*              address in register (2)-(12), of the storage area to   * 00109400
*              be used for the symptom record.  If the keyword is not * 00109500
*              specified, register 1 is assumed to contain a pointer  * 00109600
*              to the symptom record.                                 * 00109700
*              DEFAULT: SR_IN_R1                                      * 00109800
*                                                                     * 00109900
*                                                                     * 00110000
*                                                                     * 00110100
*                                                                     * 00110200
*          [INVOKE=YES|NO]                                          * 00110300
*              is an optional keyword input that indicates whether or * 00110400
*              not to invoke SYMREC.                                  * 00110500
*              DEFAULT: YES                                           * 00110600
*                                                                     * 00110700
*                                                                     * 00110800
*              [INVOKE=YES                                            * 00110900
*                  indicates SYMREC should be invoked.                * 00111000
*                                                                     * 00111100
*                                                                     * 00111200
*                  [RETCODE=xretcode|NO_RETURN_CODE]                * 00111300
*                      is the name (RS-type) of an optional fullword  * 00111400
*                      input variable, or register (2)-(12), to       * 00111500
*                      contain the return code from the SYMREC        * 00111600
*                      service.                                       * 00111700
*                      DEFAULT: NO_RETURN_CODE                        * 00111800
*                                                                     * 00111900
*                                                                     * 00112000
*                                                                     * 00112100
*                                                                     * 00112200
*                  [RSNCODE=xrsncode|NO_REASON_CODE]]               * 00112300
*                      is the name (RS-type) of an optional fullword  * 00112400
*                      input variable, or register (2)-(12), to       * 00112500
*                      contain the reason code from the SYMREC        * 00112600
*                      service.                                       * 00112700
*                      DEFAULT: NO_REASON_CODE                        * 00112800
*                                                                     * 00112900
*                                                                     * 00113000
*                                                                     * 00113100
*              [INVOKE=NO]                                            * 00113200
*                  indicates SYMREC should not be invoked.            * 00113300
*                                                                     * 00113400
*                                                                     * 00113500
*                                                                     * 00113600
*                                                                     * 00113700
*                                                                     * 00113800
*                                                                     * 00113900
*                                                                     * 00114000
*      End of a set of mutually exclusive required keys.              * 00114100
*                                                                     * 00114200
*                                                                     * 00114300
*01* RETURN CODES:  None.                                             * 00114400
*                                                                     * 00114500
*01* REASON CODES:  None.                                             * 00114600
*                                                                     * 00114700
*01* MODULE TYPE:  ASSEM MACRO                                        * 00114800
*                                                                     * 00114900
*02*   PROCESSOR:  ASSEM                                              * 00115000
*                                                                     * 00115100
*01* COMPONENT:  SCASR                                                * 00115200
*                                                                     * 00115300
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00115400
*                                                                     * 00115500
*01* MACRO USAGE NOTES:                                               * 00115600
*                                                                     * 00115700
*                                                                     * 00115800
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00115900
*        global macro variable.  Any value other than 'NO' will       * 00116000
*        result in the macro expansion being printed.  The default is * 00116100
*        'YES'.  The following examples illustrate how the ZPRINT     * 00116200
*        variable should be set.                                      * 00116300
*                                                                     * 00116400
*                    GBLC &ZPRINT                                     * 00116500
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00116600
*                                                                     * 00116700
*    2.  The  ?EPILOG  macro  is  required  by  PLAS  invocations  of * 00116800
*        SYMRBLD.                                                     * 00116900
*                                                                     * 00117000
*    3.  Names  have  been defined for the recommended SDB keys.  The * 00117100
*        names  have been formed by placing 'SDB' in front of the key * 00117200
*        and  replacing  a  slash in the middle of an SDB key with an * 00117300
*        underscore.  Following are the names and descriptions of the * 00117400
*        SDB keys that can be specified with the SDBKEY keyword.  Any * 00117500
*        key  that  is  not in this list can be specified as a quoted * 00117600
*        string.                                                      * 00117700
*                                                                     * 00117800
*        The  following SYMRBLD examples only use the PRIMARY keyword * 00117900
*        indicating  that  the  symptom  will be added to the primary * 00118000
*        symptom  string.   The SECONDARY keyword may be used instead * 00118100
*        of PRIMARY in all of the following examples.                 * 00118200
*                                                                     * 00118300
*        The  following  characters  are used to show the data format * 00118400
*        for each SDB key:                                            * 00118500
*                                                                     * 00118600
*                                                                     * 00118700
*        o   a - Alphameric                                           * 00118800
*                                                                     * 00118900
*        o   n - Numeric                                              * 00119000
*                                                                     * 00119100
*        o   h - Hexadecimal                                          * 00119200
*                                                                     * 00119300
*        o   b - Binary                                               * 00119400
*                                                                     * 00119500
*        o   v - Variable length to the number shown                  * 00119600
*                                                                     * 00119700
*        o   (LZP) - Zero padding on the left is required             * 00119800
*                                                                     * 00119900
*        o   (RZP) - Zero padding on the right is required            * 00120000
*                                                                     * 00120100
*                                                                     * 00120200
*                                                                     * 00120300
*        Name           SDB Key             Description/Example       * 00120400
*        _________________________________________________________    * 00120500
*                                                                     * 00120600
*                                                                     * 00120700
*        SDBAB_S     AB/S      System Abend or program check.         * 00120800
*                                                                     * 00120900
*                              Form: AB/Saaaa                         * 00121000
*                              Example: AB/S00C4                      * 00121100
*                                                                     * 00121200
*                              SYMRBLD PRIMARY,SDBKEY=SDBAB_S,        * 00121300
*                                      DATA=ABEND_C,CONVERT,          * 00121400
*                                      LEN=2                          * 00121500
*                              ABEND_C DC XL2'00C4'                   * 00121600
*        _________________________________________________________    * 00121700
*                                                                     * 00121800
*        SDBAB_U     AB/U      User Abend Code.                       * 00121900
*                                                                     * 00122000
*                              NOTE:  When CONVERT is specified       * 00122100
*                                     for a user abend, the abend     * 00122200
*                                     code is converted from          * 00122300
*                                     hexadecimal to decimal          * 00122400
*                                     EBCDIC.                         * 00122500
*                                                                     * 00122600
*                              Form:    AB/Uaaaa                      * 00122700
*                              Example: AB/U0189                      * 00122800
*                                                                     * 00122900
*                              SYMRBLD PRIMARY,SDBKEY=SDBAB_U,        * 00123000
*                                      DATA=ABEND_C,CONVERT,          * 00123100
*                                      LEN=2                          * 00123200
*                              ABEND_C DC XL2'00BD'                   * 00123300
*        _________________________________________________________    * 00123400
*                                                                     * 00123500
*        SDBADRS     ADRS/     Any software routine/CSECT/program     * 00123600
*                              address, displacement within a         * 00123700
*                              routine, or offset within a field      * 00123800
*                              or control block.                      * 00123900
*                                                                     * 00124000
*                              Form:    ADRS/hhhhhhhh (LZP)           * 00124100
*                              Example: ADRS/0000145E                 * 00124200
*                                                                     * 00124300
*                              SYMRBLD PRIMARY,SDBKEY=SDBADRS,        * 00124400
*                                      DATA=(3),CONVERT,LEN=4         * 00124500
*        _________________________________________________________    * 00124600
*                                                                     * 00124700
*        SDBDEVS     DEVS/     IBM device types                       * 00124800
*                                                                     * 00124900
*                              Generic device types:                  * 00125000
*                              Form:    DEVS/aaa                      * 00125100
*                              Example: DEVS/PRT                      * 00125200
*                                                                     * 00125300
*                              SYMRBLD PRIMARY,SDBKEY=SDBDEVS,        * 00125400
*                                      DATA=PRINTER                   * 00125500
*                              PRINTER DC CL3'PRT'                    * 00125600
*                                                                     * 00125700
*                              Specific device types:                 * 00125800
*                              Form: DEVS/nnnnaaa                     * 00125900
*                              Example: DEVS/3278004                  * 00126000
*                                                                     * 00126100
*                              SYMRBLD PRIMARY,SDBKEY=SDBDEVS,        * 00126200
*                                      DATA=TERMINAL                  * 00126300
*                              TERMINAL DC CL7'3278004'               * 00126400
*                                                                     * 00126500
*                              Some values which may be entered:      * 00126600
*                                                                     * 00126700
*                              AUD (audios)  CHN (channels)           * 00126800
*                              CPU (CPU's)   CTL (control units)      * 00126900
*                              DAS (disks)   KEY (keyboard)           * 00127000
*                              LOC (local)   MIS (misc.)              * 00127100
*                              MOD (modem)   PCH (punch)              * 00127200
*                              PRT (printer) PWR (power)              * 00127300
*                              REM (remote)  RDR (readers)            * 00127400
*                              TAP (tapes)   VID (displays)           * 00127500
*        _________________________________________________________    * 00127600
*                                                                     * 00127700
*        SDBFLDS     FLDS/     A field, control block, or label       * 00127800
*                              involved with the problem. If a        * 00127900
*                              field name is longer than 10           * 00128000
*                              characters, use two keys and           * 00128100
*                              split the name of the field.           * 00128200
*                                                                     * 00128300
*                              Form:     FLDS/av10                    * 00128400
*                              Example:  FLDS/CVTPTR                  * 00128500
*                                                                     * 00128600
*                              SYMRBLD PRIMARY,SDBKEY=SDBFLDS,        * 00128700
*                                      DATA=FIELD                     * 00128800
*                              FIELD DC CL6'CVTPTR'                   * 00128900
*        _________________________________________________________    * 00129000
*                                                                     * 00129100
*         SDBLVLS    LVLS/     The system release or program          * 00129200
*                              product/component level that the       * 00129300
*                              problem occurs on.                     * 00129400
*                                                                     * 00129500
*                              Form:     LVLS/aaa (LZP)               * 00129600
*                              Example:  LVLS/C20 for HBB4410         * 00129700
*                                                                     * 00129800
*                              SYMRBLD PRIMARY,SDBKEY=SDBLVLS,        * 00129900
*                                      DATA=MSYSRLVL,LEN=3            * 00130000
*        _________________________________________________________    * 00130100
*                                                                     * 00130200
*         SDBMS      MS/       Program or device issued message.      * 00130300
*                              If there is no identifier, enter       * 00130400
*                              the message as it appears and          * 00130500
*                              MS/NOID to denote this.                * 00130600
*                                                                     * 00130700
*                              Form:    MS/av12                       * 00130800
*                              Example: MS/IEF244I                    * 00130900
*                                       MS/NOID MS/PRINTER MS/BUSY    * 00131000
*                                                                     * 00131100
*                              SYMRBLD PRIMARY,SDBKEY=SDBMS,          * 00131200
*                                      DATA=MS_ID                     * 00131300
*                              MS_ID DC CL7'IEF244I'                  * 00131400
*        _________________________________________________________    * 00131500
*                                                                     * 00131600
*        SDBOPCS     OPCS/     Software program operation code        * 00131700
*                              (opcodes), I/O read/write command      * 00131800
*                              codes, teleprocessing operation        * 00131900
*                              codes and request codes.               * 00132000
*                                                                     * 00132100
*                              Form:     OPCS/av8                     * 00132200
*                                        OPCS/SVChh                   * 00132300
*                                        OPCS/hh                      * 00132400
*                              Examples:                              * 00132500
*                                 Software: OPCS/MVC or OPCS/BALR     * 00132600
*                                 SVC Call: OPCS/SVC0A                * 00132700
*                                 I/O commands: OPCS/02               * 00132800
*                                 TP Op Codes: OPCS/010201            * 00132900
*                                                                     * 00133000
*                              SYMRBLD PRIMARY,SDBKEY=SDBOPCS,        * 00133100
*                                      DATA=SFT_OPC                   * 00133200
*                              SFT_OPC DC CL4'BALR'                   * 00133300
*        _________________________________________________________    * 00133400
*                                                                     * 00133500
*        SDBOVS      OVS/      Overlaid Storage.                      * 00133600
*                                                                     * 00133700
*                              Form:     OVS/av10                     * 00133800
*                              Example:  OVS/LOW                      * 00133900
*                                        OVS/CORE                     * 00134000
*                                                                     * 00134100
*                              SYMRBLD PRIMARY,SDBKEY=SDBOPCS,        * 00134200
*                                      DATA=STORAGE                   * 00134300
*                              STORAGE DC CL4'CORE'                   * 00134400
*        _________________________________________________________    * 00134500
*                                                                     * 00134600
*        SDBPCSS     PCSS/     Any software statement, JCL,           * 00134700
*                              operator or user commands,             * 00134800
*                              parameters, program language           * 00134900
*                              statements, data set names, library    * 00135000
*                              names, teleprocessing logical and      * 00135100
*                              physical unit names.  Special          * 00135200
*                              characters that are not accepted       * 00135300
*                              are entered by spelling the            * 00135400
*                              function represented. Environments,    * 00135500
*                              process names, procedures or           * 00135600
*                              other symptoms which do not fit        * 00135700
*                              elsewhere. Program function keys or    * 00135800
*                              other operator keys.                   * 00135900
*                                                                     * 00136000
*                              Form:     PCSS/av10                    * 00136100
*                              Example:  PCSS/LPALIB                  * 00136200
*                                        PCSS/ASCRE                   * 00136300
*                                        PCSS/DISPLAY                 * 00136400
*                                        PCSS/PF1                     * 00136500
*                                                                     * 00136600
*                              SYMRBLD PRIMARY,SDBKEY=SDBPCSS,        * 00136700
*                                      DATA=MACRO_NAME                * 00136800
*                              MACRO_NAME DC CL5'ASCRE'               * 00136900
*        _________________________________________________________    * 00137000
*                                                                     * 00137100
*        SDBPIDS     PIDS/     Product identifier.                    * 00137200
*                                                                     * 00137300
*                              NOTE: This key is automatically put    * 00137400
*                                    into the primary symptom         * 00137500
*                                    string by coding the INITIAL     * 00137600
*                                    keyword. If a problem is         * 00137700
*                                    related to more than one         * 00137800
*                                    component or product, then       * 00137900
*                                    the PIDS/ key can be provided    * 00138000
*                                    to identify that component.      * 00138100
*                                                                     * 00138200
*                              Form:     PIDS/aaaaaaaaa  (LZP)        * 00138300
*                              Example:  PIDS/5752SC1CM               * 00138400
*                                        PIDS/5740CB1b                * 00138500
*                                        PIDS/CREATRTN                * 00138600
*                                                                     * 00138700
*                              SYMRBLD PRIMARY SDBKEY=SDBPIDS         * 00138800
*                                              DATA=SYMREC            * 00138900
*                              SYMREC  DC CL9'5752SCASR'              * 00139000
*        _________________________________________________________    * 00139100
*                                                                     * 00139200
*        SDBPRCS     PRCS/     Any program generated return,          * 00139300
*                              reason, step, condition, or device     * 00139400
*                              status code.                           * 00139500
*                                                                     * 00139600
*                              Form:     PRCS/aaaaaaaa  (LZP)         * 00139700
*                              Example:  PRCS/04004008                * 00139800
*                                                                     * 00139900
*                                        PRCS/0000UNIT                * 00140000
*                                        PRCS/000CHECK                * 00140100
*                                                                     * 00140200
*                              SYMRBLD PRIMARY,SDBKEY=SDBPRCS,        * 00140300
*                                      DATA=(GPR00F),CONVERT,         * 00140400
*                                      LEN=4                          * 00140500
*                              GPR00F  EQU  0                         * 00140600
*        _________________________________________________________    * 00140700
*                                                                     * 00140800
*        SDBPTFS     PTFS/     Program temporary fix (PTF) or         * 00140900
*                              APAR associated with the problem.      * 00141000
*                                                                     * 00141100
*                              Form:     PTFS/aaaaaaa (RZP)           * 00141200
*                              Example:  PTFS/UZ00934                 * 00141300
*                                                                     * 00141400
*                              SYMRBLD PRIMARY,SDBKEY=SDBPTFS,        * 00141500
*                                      DATA=FIX                       * 00141600
*                              STORAGE DC CL7'UZ00934'                * 00141700
*                                                                     * 00141800
*        _________________________________________________________    * 00141900
*                                                                     * 00142000
*        SDBPUBS     PUBS/     Publication identifier.                * 00142100
*                                                                     * 00142200
*                              Form:     PUBS/av10                    * 00142300
*                              Example:  PUBS/GC38100807              * 00142400
*                                                                     * 00142500
*                              SYMRBLD PRIMARY,SDBKEY=SDBPUBS,        * 00142600
*                                      DATA=PUB#                      * 00142700
*                              PUB# DC CL10'GC38100807'               * 00142800
*        _________________________________________________________    * 00142900
*                                                                     * 00143000
*        SDBREGS     REGS/     A register number associated with      * 00143100
*                              the problem, followed by the offset    * 00143200
*                              from the PSW.                          * 00143300
*                                                                     * 00143400
*                              NOTE: Conversion for hexadecimal       * 00143500
*                                    to EBCDIC is not supported       * 00143600
*                                    for this keyword.                * 00143700
*                                                                     * 00143800
*                              Form:     REGS/xxhhh                   * 00143900
*                                        xx = register number(hex)    * 00144000
*                                        hhh = offset                 * 00144100
*                                                                     * 00144200
*                              Example:  REGS/02100                   * 00144300
*                                                                     * 00144400
*                              SYMRBLD PRIMARY,SDBKEY=SDBREGS,        * 00144500
*                                      DATA=REG_OFFSET,LEN=5          * 00144600
*                              REG_OFFSET DS CL5                      * 00144700
*                              REG#       DC CL2'02'                  * 00144800
*                              OFFSET     DS CL3'100'                 * 00144900
*        _________________________________________________________    * 00145000
*                                                                     * 00145100
*        SDBREGS_CR  REGS/CR   A control register associated with     * 00145200
*                              the problem. This symptom should be    * 00145300
*                              followed with a symptom containing     * 00145400
*                              the value in the register.             * 00145500
*                                                                     * 00145600
*                              Form:     REGS/CRhh                    * 00145700
*                              Example:  REGS/CR01                    * 00145800
*                                                                     * 00145900
*                              SYMRBLD PRIMARY,SDBKEY=SDBREGS_CR,     * 00146000
*                                      DATA=REG#,LEN=1,CONVERT        * 00146100
*                              REG#       DS FL1                      * 00146200
*        _________________________________________________________    * 00146300
*                                                                     * 00146400
*        SDBREGS_FP  REGS/FP   A floating point register              * 00146500
*                              associated with the problem.  This     * 00146600
*                              symptom should be followed with a      * 00146700
*                              symptom containing the value in the    * 00146800
*                              register.                              * 00146900
*                                                                     * 00147000
*                              Form:     REGS/FPhh                    * 00147100
*                              Example:  REGS/FP01                    * 00147200
*                                                                     * 00147300
*                              SYMRBLD PRIMARY,SDBKEY=SDBREGS_FP,     * 00147400
*                                      DATA=REG#,LEN=1,CONVERT        * 00147500
*                              REG#       DS FL1                      * 00147600
*        _________________________________________________________    * 00147700
*                                                                     * 00147800
*        SDBREGS_GR  REGS/GR   A gereral purpose register             * 00147900
*                              associated with the problem.  This     * 00148000
*                              symptom should be followed with a      * 00148100
*                              symptom containing the value in the    * 00148200
*                              register.                              * 00148300
*                                                                     * 00148400
*                              Form:     REGS/GRhh                    * 00148500
*                              Example:  REGS/GR01                    * 00148600
*                                                                     * 00148700
*                              SYMRBLD PRIMARY,SDBKEY=SDBREGS_GR,     * 00148800
*                                      DATA=REG#,LEN=1,CONVERT        * 00148900
*                              REG#       DS FL1                      * 00149000
*        _________________________________________________________    * 00149100
*                                                                     * 00149200
*        SDBREGS_AR  REGS/AR   An access register associated with     * 00149300
*                              the problem.  This symptom should      * 00149400
*                              be followed with a symptom             * 00149500
*                              containing the value in the            * 00149600
*                              register.                              * 00149700
*                                                                     * 00149800
*                              Form:     REGS/ARhh                    * 00149900
*                              Example:  REGS/AR01                    * 00150000
*                                                                     * 00150100
*                              SYMRBLD PRIMARY,SDBKEY=SDBREGS_AR,     * 00150200
*                                      DATA=REG#,LEN=1,CONVERT        * 00150300
*                              REG#       DS FL1                      * 00150400
*        _________________________________________________________    * 00150500
*                                                                     * 00150600
*        SDBRIDS     RIDS/     Module CSECT name.                     * 00150700
*                                                                     * 00150800
*                              Form:     RIDS/aaaaaaaa                * 00150900
*                              Example:  RIDS/ASRMODUL                * 00151000
*                                                                     * 00151100
*                              SYMRBLD PRIMARY,SDBKEY=SDBRIDS,        * 00151200
*                                      DATA=MOD_NAME                  * 00151300
*                              MOD_NAME DC CL8'ASRMODUL'              * 00151400
*        _________________________________________________________    * 00151500
*                                                                     * 00151600
*        SDBRIDSL    RIDS/     Load module name.                      * 00151700
*                                                                     * 00151800
*                              Form:     RIDS/aaaaaaaa                * 00151900
*                              Example:  RIDS/ASRLOADM#L              * 00152000
*                                                                     * 00152100
*                              SYMRBLD PRIMARY,SDBKEY=SDBRIDSL,       * 00152200
*                                      DATA=LOAD_MOD                  * 00152300
*                              LOAD_MOD DC CL10'ASRLOADM#L'           * 00152400
*        _________________________________________________________    * 00152500
*                                                                     * 00152600
*        SDBRIDSR    RIDS/     Recovery routine CSECT name            * 00152700
*                                                                     * 00152800
*                              Form:     RIDS/aaaaaaaa                * 00152900
*                              Example:  RIDS/ASRRECVR#R              * 00153000
*                                                                     * 00153100
*                              SYMRBLD PRIMARY,SDBKEY=SDBRIDSR,       * 00153200
*                                      DATA=RECV_MOD                  * 00153300
*                              RECV_MOD DC CL10'ASRRECVR#R'           * 00153400
*        _________________________________________________________    * 00153500
*                                                                     * 00153600
*        SDBSIG      SIG/      System or device issued operator       * 00153700
*                              warning signal.                        * 00153800
*                                                                     * 00153900
*                              Form:     SIG/av11                     * 00154000
*                              Example:  SIG/MACHINE SIG/CHECK        * 00154100
*                                        SIG/AUDIBLE SIG/ALARM        * 00154200
*                                                                     * 00154300
*                              SYMRBLD PRIMARY,SDBKEY=SDBSIG,         * 00154400
*                                      DATA=MSG1                      * 00154500
*                              SYMRBLD PRIMARY,SDBKEY=SDBSIG,         * 00154600
*                                      DATA=MSG2                      * 00154700
*                              MSG1  DC CL7'MACHINE'                  * 00154800
*                              MSG2  DC CL5'CHECK'                    * 00154900
*        _________________________________________________________    * 00155000
*                                                                     * 00155100
*        SDBVALU     VALU/     Contents of a register.  This SDB      * 00155200
*                              keyword must be preceded with one      * 00155300
*                              of:  REGS/CRhh, REGS/FPhh, or          * 00155400
*                              REGS/GRhh.                             * 00155500
*                                                                     * 00155600
*                              Form:    VALU/v8                       * 00155700
*                              Example: REGS/GR05 VALU/0000FFFF       * 00155800
*                                                                     * 00155900
*                              SYMRBLD PRIMARY,SDBKEY=SDBREGS_GR,     * 00156000
*                                      DATA=REG5                      * 00156100
*                              SYMRBLD PRIMARY,SDBKEY=SDBVALU,        * 00156200
*                                      DATA=(5),CONVERT,LEN=4         * 00156300
*                              REG5 DC CL2'05'                        * 00156400
*        _________________________________________________________    * 00156500
*                                                                     * 00156600
*        SDBVALU_B   VALU/B    Binary value of a field in error.      * 00156700
*                              This SDB key must be preceded by       * 00156800
*                              the name of the field. The most        * 00156900
*                              appropriate SDB key is FLDS/.          * 00157000
*                                                                     * 00157100
*                              NOTE: Conversion for hexadecimal to    * 00157200
*                                    binary EBCDIC is not provided    * 00157300
*                                    by SYMRBLD.                      * 00157400
*                                                                     * 00157500
*                              Form:    VALU/Bv8                      * 00157600
*                              Example: FLDS/FOOTPRINT                * 00157700
*                                       VALU/B01010000                * 00157800
*                                                                     * 00157900
*                              SYMRBLD PRIMARY,SDBKEY=SDBFLDS,        * 00158000
*                                      DATA=FIELD                     * 00158100
*                              SYMRBLD PRIMARY,SDBKEY=SDBVALU_B,      * 00158200
*                                      DATA=FOOTPRINT,LEN=8           * 00158300
*                                                                     * 00158400
*                              FIELD DC CL9'FOOTPRINT'                * 00158500
*                              FOOTPRINT DC CL8'01010000'             * 00158600
*        _________________________________________________________    * 00158700
*                                                                     * 00158800
*        SDBVALU_C   VALU/C    Character value of a field in          * 00158900
*                              error. This SDB key must be            * 00159000
*                              preceded by the name of the field.     * 00159100
*                              The most appropriate SDB key is        * 00159200
*                              FLDS/.                                 * 00159300
*                                                                     * 00159400
*                              Form: VALU/Cv8                         * 00159500
*                              Example: FLDS/NAME VALU/CABCD          * 00159600
*                                                                     * 00159700
*                              SYMRBLD PRIMARY,SDBKEY=SDBFLDS,        * 00159800
*                                      DATA=FIELD                     * 00159900
*                              SYMRBLD PRIMARY,SDBKEY=SDBVALU_C,      * 00160000
*                                      DATA=NAME,LEN=8                * 00160100
*                              FIELD DC CL4'NAME'                     * 00160200
*                              NAME  DS CL8                           * 00160300
*        _________________________________________________________    * 00160400
*                                                                     * 00160500
*        SDBVALU_H   VALU/H    Hexadecimal value of a field in        * 00160600
*                              error.  This SDB key must be           * 00160700
*                              preceded by the name of the field.     * 00160800
*                              The most appropriate SDB key is        * 00160900
*                              FLDS/.                                 * 00161000
*                                                                     * 00161100
*                              Form:    VALU/Hv8                      * 00161200
*                              Example: FLDS/COUNTER                  * 00161300
*                                       VALU/H0000000F                * 00161400
*                                                                     * 00161500
*                              SYMRBLD PRIMARY,SDBKEY=SDBFLDS,        * 00161600
*                                      DATA=CL7'COUNTER'              * 00161700
*                              SYMRBLD PRIMARY,SDBKEY=SDBVALU_H,      * 00161800
*                                      DATA=COUNTER,LEN=4             * 00161900
*                              FIELD   DC CL7'COUNTER'                * 00162000
*                              COUNTER DS F                           * 00162100
*        _________________________________________________________    * 00162200
*                                                                     * 00162300
*        SDBWS_D     WS/D      System or device-issued disabled       * 00162400
*                              WAIT code.                             * 00162500
*                                                                     * 00162600
*                              Form:    WS/Dhhhh                      * 00162700
*                              Example: WS/D0028                      * 00162800
*                                                                     * 00162900
*                              SYMRBLD PRIMARY,SDBKEY=SDBWS_D,        * 00163000
*                                      DATA=WAIT_CODE,LEN=2,          * 00163100
*                                      CONVERT                        * 00163200
*                              WAIT_CODE DS FL2                       * 00163300
*        _________________________________________________________    * 00163400
*                                                                     * 00163500
*        SDBWS_E     WS/E      System or device-issued enabled        * 00163600
*                              WAIT code.                             * 00163700
*                                                                     * 00163800
*                              Form:    WS/Ehhhh                      * 00163900
*                              Example: WS/E0007                      * 00164000
*                                                                     * 00164100
*                              SYMRBLD PRIMARY,SDBKEY=SDBWS_E         * 00164200
*                                      DATA=WAIT_CODE,LEN=2,          * 00164300
*                                      CONVERT                        * 00164400
*                              WAIT_CODE DC FL2'0007'                 * 00164500
*        _________________________________________________________    * 00164600
*                                                                     * 00164700
*                                                                     * 00164800
*    4.  Following  is  an  example for providing an SDBKEY that does * 00164900
*        not have a name.                                             * 00165000
*                                                                     * 00165100
*                                                                     * 00165200
*                    RECFM/    Record Format.                         * 00165300
*                                                                     * 00165400
*                              Form:    RECFM/fff                     * 00165500
*                              Example: RECFM/FB -  fixed block       * 00165600
*                                       RECFM/VBA - Variable          * 00165700
*                                                   blocked ASA       * 00165800
*                                                                     * 00165900
*                              SYMRBLD PRIMARY,SDBKEY='RECFM/'        * 00166000
*                                      DATA=FORMAT,LEN=3              * 00166100
*                              FORMAT  DC CL3'VBA'                    * 00166200
*                                                                     * 00166300
*    5.  Names  have  been  defined  for two keys that can be used in * 00166400
*        section  5 of the symptom record, the variable data section. * 00166500
*        Any  key  that  is  not in this list can be specified as a 2 * 00166600
*        byte hexadecimal value.                                      * 00166700
*                                                                     * 00166800
*          S5EBCDIC  F000     EBCDIC printable data. Available for    * 00166900
*                             all users.                              * 00167000
*                                                                     * 00167100
*          S5HEX     FF00     Hexadecimal data. Available for all     * 00167200
*                             users.                                  * 00167300
*                                                                     * 00167400
*          Example for providing 20 bytes of control block, CNTL,     * 00167500
*          in section 5:                                              * 00167600
*                                                                     * 00167700
*             SYMRBLD VARIABLE S5KEY=S5HEX,DATA=CNTL,LEN=20           * 00167800
*                                                                     * 00167900
*             CNTL DS 0CL100                                          * 00168000
*                   .                                                 * 00168100
*                   .                                                 * 00168200
*                   .                                                 * 00168300
*                                                                     * 00168400
*                                                                     * 00168500
*                                                                     * 00168600
*                                                                     * 00168700
*01* CHANGE ACTIVITY:                                                 * 00168800
*                                                                     * 00168900
*   Flag LineItem  FMID    Date   ID    Comment                       * 00169000
*                                                                     * 00169100
*    $L0=SYME1    HBB4410 881207 PDBG:  SYMREC Enhancements           * 00169200
*    $D1=DEO1030  HBB4410 890313 PDBG:  Change name from SRBUILD to   * 00169300
*                                         SYMRBLD                     * 00169400
*    $D2=DEO0258  HBB4410 890918 PDBG:  Change fixed 15 length and    * 00169500
*                                         offsets to fixed 16         * 00169600
*    $P1=PEO3066  HBB4410 900105 PDCI:  Correct test for length of    * 00169700
*                                         section 5 data.             * 00169800
*    $01=OW08389  HBB5510 940922 PDXZ:  Add DAE=NO option.            * 00169900
****** END OF SPECIFICATIONS *****************************************/ 00170000
*/********************************************************************* 00170100
         MACRO                                                          00170200
&XLABEL  SYMRBLD &SR=,&PRIMLEN=,&SECLEN=,&VARLEN=,&ARCHLEV=,&DAE=,     *00170300
               &COMPDSC=,&PROBLEM=,&SERVLEV=,&IBM=,&PROGRAM=,&PROGLEV=,*00170400
               &COMPID=,&COMPLEV=,&PID=,&PIDLEVEL=,&SUBSYSTEM=,        *00170500
               &SDBSTRING=,&SDBLEN=,&SDBLENVAR=,&SDBKEY=,&DATA=,&LEN=, *00170600
               &LENVAR=,&CONVERT=,&TYPE=,&S5KEY=,&INVOKE=,&RETCODE=,   *00170700
               &RSNCODE=                                                00170800
.*                                                                      00170900
*                MACDATE -05/03/96-<0>                                  00171000
.*                                                                      00171100
.*******************************************************************    00171200
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00171300
.*******************************************************************    00171400
                GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                 00171500
                GBLC  &ZTEST      YES=TEST NO=NO TEST                   00171600
                GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX           00171700
.*                                                                      00171800
                GBLC  &ZSYMRBLD   YES=MACRO USED AT LEAST ONCE          00171900
.*******************************************************************    00172000
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00172100
.*******************************************************************    00172200
                LCLC  &ZMS        ERROR MESSAGE WORK AREA               00172300
                LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS          00172400
                LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED            00172500
                LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR           00172600
                LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE           00172700
                LCLA  &ZAWRK      USED AS A WORK AREA                   00172800
                LCLA  &ZASIZ      USED FOR SIZE OF VALUE                00172900
                LCLA  &ZN         NUMERIC WORK VARIABLE                 00173000
                LCLC  &ZC         CHARACTER WORK VARIABLE               00173100
                LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE           00173200
                LCLA  &ZTLA       VALUE TOO LONG VARIABLE               00173300
                LCLA  &ZMACRET    MACRO RETURN CODE                     00173400
&ZMACRET        SETA  0           ASSUME NO ERRORS                      00173500
.*                                                                      00173600
                LCLC  &ZCSYSLIST(255)           NONXKEY, POS ARRAY      00173700
                LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()            00173800
                LCLA  &ZPLLEN     PARAMETER LIST LENGTH                 00173900
                LCLC  &ZENDBASEPL               End of base PL          00174000
.*******************************************************************    00174100
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00174200
.*******************************************************************    00174300
                LCLA  &ZI         INDEX FOR ARRAY                       00174400
                LCLA  &ZJ         INDEX FOR PARMS                       00174500
                LCLA  &ZK         INDEX FOR PARSE                       00174600
                LCLA  &ZLO        LOW RANGE VALUE                       00174700
                LCLA  &ZHI        HIGH RANGE VALUE                      00174800
                LCLC  &ZW         WORK AREA FOR PARM                    00174900
.*******************************************************************    00175000
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00175100
.*******************************************************************    00175200
                LCLC  &XTEST      ++ VALUE                              00175300
                LCLC  &XINITIAL   ++ VALUE                              00175400
                LCLC  &XSR        ++ NAME                               00175500
                LCLC  &XPRIMLEN   ++ NAME                               00175600
                LCLC  &XSECLEN    ++ NAME                               00175700
                LCLC  &XVARLEN    ++ NAME                               00175800
                LCLC  &XARCHLEV   ++ VALUE                              00175900
                LCLC  &XDAE       ++ VALUE                              00176000
                LCLC  &XCOMPDSC   ++ NAME                               00176100
                LCLC  &XPROBLEM   ++ NAME                               00176200
                LCLC  &XSERVLEV   ++ NAME                               00176300
                LCLC  &XNOCONVERTS              ++ NAME                 00176400
                LCLC  &XIBM       ++ VALUE                              00176500
                LCLC  &XPROGRAM   ++ NAME                               00176600
                LCLC  &XPROGLEV   ++ NAME                               00176700
                LCLC  &XTEST2     ++ NAME                               00176800
                LCLC  &XCOMPID    ++ NAME                               00176900
                LCLC  &XCOMPLEV   ++ NAME                               00177000
                LCLC  &XPID       ++ NAME                               00177100
                LCLC  &XPIDLEVEL  ++ NAME                               00177200
                LCLC  &XSUBSYSTEM               ++ NAME                 00177300
                LCLC  &XRESET     ++ VALUE                              00177400
                LCLC  &XPRIMARY   ++ VALUE                              00177500
                LCLC  &XSDBSTRING               ++ NAME                 00177600
                LCLC  &XSDBLEN    ++ VALUE                              00177700
                LCLC  &XSDBLENVAR               ++ NAME                 00177800
                LCLC  &XSDBKEY    ++ VALUE                              00177900
                LCLC  &XDATA      ++ NAME                               00178000
                LCLC  &XLEN       ++ VALUE                              00178100
                LCLC  &XLENVAR    ++ NAME                               00178200
                LCLC  &XCONVERT   ++ VALUE                              00178300
                LCLC  &XTYPE      ++ VALUE                              00178400
                LCLC  &XSECONDARY               ++ VALUE                00178500
                LCLC  &XVARIABLE  ++ VALUE                              00178600
                LCLC  &XS5KEY     ++ VALUE                              00178700
                LCLC  &XCOMPLETE  ++ VALUE                              00178800
                LCLC  &XINVOKE    ++ VALUE                              00178900
                LCLC  &XRETCODE   ++ NAME                               00179000
                LCLC  &XRSNCODE   ++ NAME                               00179100
.*******************************************************************    00179200
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00179300
.*******************************************************************    00179400
                LCLC  &ZXTEST     ++ INPUT VALUE                        00179500
                LCLC  &ZXINITIAL  ++ INPUT VALUE                        00179600
                LCLC  &ZXSR       ++ INPUT NAME                         00179700
                LCLC  &ZXPRIMLEN  ++ INPUT NAME                         00179800
                LCLC  &ZXSECLEN   ++ INPUT NAME                         00179900
                LCLC  &ZXVARLEN   ++ INPUT NAME                         00180000
                LCLC  &ZXARCHLEV  ++ INPUT VALUE                        00180100
                LCLC  &ZXDAE      ++ INPUT VALUE                        00180200
                LCLC  &ZXCOMPDSC  ++ INPUT NAME                         00180300
                LCLC  &ZXPROBLEM  ++ INPUT NAME                         00180400
                LCLC  &ZXSERVLEV  ++ INPUT NAME                         00180500
                LCLC  &ZXNOCONVERTS             ++ INPUT NAME           00180600
                LCLC  &ZXIBM      ++ INPUT VALUE                        00180700
                LCLC  &ZXPROGRAM  ++ INPUT NAME                         00180800
                LCLC  &ZXPROGLEV  ++ INPUT NAME                         00180900
                LCLC  &ZXTEST2    ++ INPUT NAME                         00181000
                LCLC  &ZXCOMPID   ++ INPUT NAME                         00181100
                LCLC  &ZXCOMPLEV  ++ INPUT NAME                         00181200
                LCLC  &ZXPID      ++ INPUT NAME                         00181300
                LCLC  &ZXPIDLEVEL               ++ INPUT NAME           00181400
                LCLC  &ZXSUBSYSTEM              ++ INPUT NAME           00181500
                LCLC  &ZXRESET    ++ INPUT VALUE                        00181600
                LCLC  &ZXPRIMARY  ++ INPUT VALUE                        00181700
                LCLC  &ZXSDBSTRING              ++ INPUT NAME           00181800
                LCLC  &ZXSDBLEN   ++ INPUT VALUE                        00181900
                LCLC  &ZXSDBLENVAR              ++ INPUT NAME           00182000
                LCLC  &ZXSDBKEY   ++ INPUT VALUE                        00182100
                LCLC  &ZXDATA     ++ INPUT NAME                         00182200
                LCLC  &ZXLEN      ++ INPUT VALUE                        00182300
                LCLC  &ZXLENVAR   ++ INPUT NAME                         00182400
                LCLC  &ZXCONVERT  ++ INPUT VALUE                        00182500
                LCLC  &ZXTYPE     ++ INPUT VALUE                        00182600
                LCLC  &ZXSECONDARY              ++ INPUT VALUE          00182700
                LCLC  &ZXVARIABLE               ++ INPUT VALUE          00182800
                LCLC  &ZXS5KEY    ++ INPUT VALUE                        00182900
                LCLC  &ZXCOMPLETE               ++ INPUT VALUE          00183000
                LCLC  &ZXINVOKE   ++ INPUT VALUE                        00183100
                LCLC  &ZXRETCODE  ++ INPUT NAME                         00183200
                LCLC  &ZXRSNCODE  ++ INPUT NAME                         00183300
.********************************************************************   00183400
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00183500
.********************************************************************   00183600
                ACTR  10000                                             00183700
.*-------------------------------------------------------------------   00183800
.***AG.KMEKY05 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                  00183900
&XTEST          SETC  ''          INITIALIZE XVARIABLE                  00184000
&ZASYSLNDX      SETA  0                                                 00184100
.ZG2A           ANOP  ,           POSITIONAL KEY SEARCH                 00184200
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT POSITIONAL         00184300
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG2B  DONE                    00184400
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG2A             00184500
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'INITIAL').ZG2A               00184600
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00184700
&ZXTEST         SETC  'INPUT'     SET IN/OUTPUT                         00184800
&XTEST          SETC  'INITIAL'   SET XVARIABLE                         00184900
&ZXINITIAL      SETC  'INPUT'     SET IN/OUTPUT                         00185000
&XINITIAL       SETC  'INITIAL'   SET XVARIABLE PARM                    00185100
.ZG2B           ANOP  ,                                                 00185200
.*-------------------------------------------------------------------   00185300
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                  00185400
&ZASYSLNDX      SETA  0                                                 00185500
.ZG60A          ANOP  ,           POSITIONAL KEY SEARCH                 00185600
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT POSITIONAL         00185700
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG60C  DONE                   00185800
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG60A            00185900
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'RESET').ZG60A                00186000
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00186100
                AIF   (K'&XTEST LE 0).ZG60B     VALID                   00186200
&ZMS            SETC  '"RESET'    *KMEKA* MNOTE                         00186300
&ZMS            SETC  '&ZMS."'                                          00186400
&ZMS            SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'             00186500
&ZMS            SETC  '&ZMS "&XTEST"'                                   00186600
                MNOTE 8,' &ZMS KEY.'                                    00186700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00186800
                AGO   .ZG60C                                            00186900
.*                                                                      00187000
.ZG60B          ANOP  ,                                                 00187100
&ZXTEST         SETC  'INPUT'     SET IN/OUTPUT                         00187200
&XTEST          SETC  'RESET'     SET XVARIABLE                         00187300
&ZXRESET        SETC  'INPUT'     SET IN/OUTPUT                         00187400
&XRESET         SETC  'RESET'     SET XVARIABLE PARM                    00187500
.ZG60C          ANOP  ,                                                 00187600
.*-------------------------------------------------------------------   00187700
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                  00187800
&ZASYSLNDX      SETA  0                                                 00187900
.ZG73A          ANOP  ,           POSITIONAL KEY SEARCH                 00188000
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT POSITIONAL         00188100
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG73C  DONE                   00188200
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG73A            00188300
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'PRIMARY').ZG73A              00188400
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00188500
                AIF   (K'&XTEST LE 0).ZG73B     VALID                   00188600
&ZMS            SETC  '"PRIMARY'  *KMEKA* MNOTE                         00188700
&ZMS            SETC  '&ZMS."'                                          00188800
&ZMS            SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'             00188900
&ZMS            SETC  '&ZMS "&XTEST"'                                   00189000
                MNOTE 8,' &ZMS KEY.'                                    00189100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00189200
                AGO   .ZG73C                                            00189300
.*                                                                      00189400
.ZG73B          ANOP  ,                                                 00189500
&ZXTEST         SETC  'INPUT'     SET IN/OUTPUT                         00189600
&XTEST          SETC  'PRIMARY'   SET XVARIABLE                         00189700
&ZXPRIMARY      SETC  'INPUT'     SET IN/OUTPUT                         00189800
&XPRIMARY       SETC  'PRIMARY'   SET XVARIABLE PARM                    00189900
.ZG73C          ANOP  ,                                                 00190000
.*-------------------------------------------------------------------   00190100
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                  00190200
&ZASYSLNDX      SETA  0                                                 00190300
.ZG108A         ANOP  ,           POSITIONAL KEY SEARCH                 00190400
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT POSITIONAL         00190500
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG108C  DONE                  00190600
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG108A           00190700
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'SECONDARY').ZG108A           00190800
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00190900
                AIF   (K'&XTEST LE 0).ZG108B    VALID                   00191000
&ZMS            SETC  '"SECONDARY'              *KMEKA* MNOTE           00191100
&ZMS            SETC  '&ZMS."'                                          00191200
&ZMS            SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'             00191300
&ZMS            SETC  '&ZMS "&XTEST"'                                   00191400
                MNOTE 8,' &ZMS KEY.'                                    00191500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00191600
                AGO   .ZG108C                                           00191700
.*                                                                      00191800
.ZG108B         ANOP  ,                                                 00191900
&ZXTEST         SETC  'INPUT'     SET IN/OUTPUT                         00192000
&XTEST          SETC  'SECONDARY'               SET XVARIABLE           00192100
&ZXSECONDARY    SETC  'INPUT'     SET IN/OUTPUT                         00192200
&XSECONDARY     SETC  'SECONDARY'               SET XVARIABLE PARM      00192300
.ZG108C         ANOP  ,                                                 00192400
.*-------------------------------------------------------------------   00192500
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                  00192600
&ZASYSLNDX      SETA  0                                                 00192700
.ZG143A         ANOP  ,           POSITIONAL KEY SEARCH                 00192800
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT POSITIONAL         00192900
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG143C  DONE                  00193000
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG143A           00193100
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'VARIABLE').ZG143A            00193200
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00193300
                AIF   (K'&XTEST LE 0).ZG143B    VALID                   00193400
&ZMS            SETC  '"VARIABLE'               *KMEKA* MNOTE           00193500
&ZMS            SETC  '&ZMS."'                                          00193600
&ZMS            SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'             00193700
&ZMS            SETC  '&ZMS "&XTEST"'                                   00193800
                MNOTE 8,' &ZMS KEY.'                                    00193900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00194000
                AGO   .ZG143C                                           00194100
.*                                                                      00194200
.ZG143B         ANOP  ,                                                 00194300
&ZXTEST         SETC  'INPUT'     SET IN/OUTPUT                         00194400
&XTEST          SETC  'VARIABLE'  SET XVARIABLE                         00194500
&ZXVARIABLE     SETC  'INPUT'     SET IN/OUTPUT                         00194600
&XVARIABLE      SETC  'VARIABLE'  SET XVARIABLE PARM                    00194700
.ZG143C         ANOP  ,                                                 00194800
.*-------------------------------------------------------------------   00194900
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                  00195000
&ZASYSLNDX      SETA  0                                                 00195100
.ZG164A         ANOP  ,           POSITIONAL KEY SEARCH                 00195200
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT POSITIONAL         00195300
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG164C  DONE                  00195400
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG164A           00195500
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'COMPLETE').ZG164A            00195600
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00195700
                AIF   (K'&XTEST LE 0).ZG164B    VALID                   00195800
&ZMS            SETC  '"COMPLETE'               *KMEKA* MNOTE           00195900
&ZMS            SETC  '&ZMS."'                                          00196000
&ZMS            SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'             00196100
&ZMS            SETC  '&ZMS "&XTEST"'                                   00196200
                MNOTE 8,' &ZMS KEY.'                                    00196300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00196400
                AGO   .ZG164C                                           00196500
.*                                                                      00196600
.ZG164B         ANOP  ,                                                 00196700
&ZXTEST         SETC  'INPUT'     SET IN/OUTPUT                         00196800
&XTEST          SETC  'COMPLETE'  SET XVARIABLE                         00196900
&ZXCOMPLETE     SETC  'INPUT'     SET IN/OUTPUT                         00197000
&XCOMPLETE      SETC  'COMPLETE'  SET XVARIABLE PARM                    00197100
.ZG164C         ANOP  ,                                                 00197200
.*------------------------------------------------------------------    00197300
.***AG.KME4Y09 VALUE, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED          00197400
                AIF   (K'&XTEST GT 0).ZG179B                            00197500
&ZXTEST         SETC  ''          RESET IN/OUTPUT                       00197600
&ZXINITIAL      SETC  ''          RESET IN/OUTPUT                       00197700
&XTEST          SETC  ''          ENSURE NULL                           00197800
&XINITIAL       SETC  ''          ENSURE NULL                           00197900
&ZMS            SETC  'ONE OF THE FOLLOWING'    *KMERA* MNOTE           00198000
&ZMS            SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'               00198100
&ZMS            SETC  '&ZMS REQUIRED:'                                  00198200
&ZMS            SETC  '&ZMS "INITIAL",'         VALID ME KEY            00198300
&ZMS            SETC  '&ZMS "RESET",'           VALID ME KEY            00198400
&ZMS            SETC  '&ZMS "PRIMARY",'         VALID ME KEY            00198500
&ZMS            SETC  '&ZMS "SECONDARY",'       VALID ME KEY            00198600
&ZMS            SETC  '&ZMS "VARIABLE",'        VALID ME KEY            00198700
&ZMS            SETC  '&ZMS OR "COMPLETE".'     VALID ME KEY            00198800
                MNOTE 8,' &ZMS '                                        00198900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00199000
.ZG179B         ANOP  ,                                                 00199100
.*-------------------------------------------------------------------   00199200
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES          00199300
.ZG2            AIF   ('&XTEST' NE 'INITIAL').ZG60                      00199400
.*-------------------------------------------------------------------   00199500
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS               00199600
&ZCVAL          SETC ''           ERROR KEY FIELD                       00199700
.ZG2I0          AIF   (K'&SDBSTRING LE 0).ZG2I1                         00199800
&ZCVAL          SETC '&ZCVAL SDBSTRING'         DISALLOWED KEY          00199900
.ZG2I1          AIF   (K'&SDBLEN LE 0).ZG2I2                            00200000
&ZCVAL          SETC '&ZCVAL SDBLEN'            DISALLOWED KEY          00200100
.ZG2I2          AIF   (K'&SDBLENVAR LE 0).ZG2I3                         00200200
&ZCVAL          SETC '&ZCVAL SDBLENVAR'         DISALLOWED KEY          00200300
.ZG2I3          AIF   (K'&SDBKEY LE 0).ZG2I4                            00200400
&ZCVAL          SETC '&ZCVAL SDBKEY'            DISALLOWED KEY          00200500
.ZG2I4          AIF   (K'&DATA LE 0).ZG2I5                              00200600
&ZCVAL          SETC '&ZCVAL DATA'              DISALLOWED KEY          00200700
.ZG2I5          AIF   (K'&LEN LE 0).ZG2I6                               00200800
&ZCVAL          SETC '&ZCVAL LEN'               DISALLOWED KEY          00200900
.ZG2I6          AIF   (K'&LENVAR LE 0).ZG2I7                            00201000
&ZCVAL          SETC '&ZCVAL LENVAR'            DISALLOWED KEY          00201100
.ZG2I7          AIF   (K'&CONVERT LE 0).ZG2I8                           00201200
&ZCVAL          SETC '&ZCVAL CONVERT'           DISALLOWED KEY          00201300
.ZG2I8          AIF   (K'&TYPE LE 0).ZG2I9                              00201400
&ZCVAL          SETC '&ZCVAL TYPE'              DISALLOWED KEY          00201500
.ZG2I9          AIF   (K'&S5KEY LE 0).ZG2I10                            00201600
&ZCVAL          SETC '&ZCVAL S5KEY'             DISALLOWED KEY          00201700
.ZG2I10         AIF   (K'&INVOKE LE 0).ZG2I11                           00201800
&ZCVAL          SETC '&ZCVAL INVOKE'            DISALLOWED KEY          00201900
.ZG2I11         AIF   (K'&RETCODE LE 0).ZG2I12                          00202000
&ZCVAL          SETC '&ZCVAL RETCODE'           DISALLOWED KEY          00202100
.ZG2I12         AIF   (K'&RSNCODE LE 0).ZG2I13                          00202200
&ZCVAL          SETC '&ZCVAL RSNCODE'           DISALLOWED KEY          00202300
.ZG2I13         AIF   (K'&ZCVAL LE 0).ZG2J      KEY                     00202400
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00202500
&ZMS            SETC  '"INITIAL'  *KMEIA* MNOTE                         00202600
&ZMS            SETC  '&ZMS."'                                          00202700
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00202800
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00202900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00203000
.ZG2J           ANOP  ,                                                 00203100
.*----------------------------------------------------------------***   00203200
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00203300
                AIF   (N'&SR LE 1).ZG4A         CK NUM                  00203400
&ZMS            SETC  '"SR='      *KPOSA* MNOTE                         00203500
&ZMS            SETC  '&ZMS.&SR"'                                       00203600
&ZMS            SETC  '&ZMS "SR"'                                       00203700
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00203800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00203900
.ZG4A           ANOP  ,                                                 00204000
.*-------------------------------------------------------------------   00204100
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00204200
&ZXSR           SETC  'INPUT'     SET IN/OUTPUT                         00204300
&XSR            SETC  '&SR(1)'    SET XVARIABLE                         00204400
                AIF   (N'&SR GT 1).ZG4B         MULTI PARMS             00204500
&XSR            SETC  '&SR'       SET XVARIABLE                         00204600
.ZG4B           AIF   (K'&SR(1) GT 0).ZG4C                              00204700
&ZXSR           SETC  ''          RESET IN/OUTPUT                       00204800
&ZMS            SETC  ' '         *KRQDA*                               00204900
&ZMS            SETC  '&ZMS "SR" KEY AND ITS ARGUMENT'                  00205000
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00205100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00205200
.ZG4C           ANOP  ,                                                 00205300
.*-------------------------------------------------------------------   00205400
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00205500
                AIF   (K'&ZXSR LE 0).ZG4R       NOT I/O                 00205600
                AIF   ('&XSR'(1,1) NE '(').ZG4R                         00205700
&ZCGPR          SETC  '&XSR'(2,K'&XSR-2)                                00205800
                AIF   ('&ZCGPR'(1,1) NE '0').ZG4P                       00205900
                AIF   (K'&ZCGPR GT 2).ZG4Q                              00206000
                AIF   ('&ZCGPR' EQ '0').ZG4Q                            00206100
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00206200
                AIF   (T'&ZCGPR NE 'N').ZG4Q    INVALID REG NAME        00206300
.ZG4P           ANOP  ,                                                 00206400
                AIF   (T'&ZCGPR NE 'N').ZG4R    NON NUMERIC             00206500
                AIF   ('&ZCGPR' LT '2').ZG4Q                            00206600
                AIF   ('&ZCGPR' LE '12').ZG4R                           00206700
.ZG4Q           ANOP  ,                                                 00206800
&ZMS            SETC  '"SR='      *KGPRA* MNOTE                         00206900
&ZMS            SETC  '&ZMS.&SR"'                                       00207000
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00207100
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00207200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00207300
.ZG4R           ANOP  ,                                                 00207400
.*----------------------------------------------------------------***   00207500
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00207600
                AIF   (N'&PRIMLEN LE 1).ZG7A    CK NUM                  00207700
&ZMS            SETC  '"PRIMLEN='               *KPOSA* MNOTE           00207800
&ZMS            SETC  '&ZMS.&PRIMLEN"'                                  00207900
&ZMS            SETC  '&ZMS "PRIMLEN"'                                  00208000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00208100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00208200
.ZG7A           ANOP  ,                                                 00208300
.*-------------------------------------------------------------------   00208400
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00208500
&ZXPRIMLEN      SETC  'INPUT'     SET IN/OUTPUT                         00208600
&XPRIMLEN       SETC  '&PRIMLEN(1)'             SET XVARIABLE           00208700
                AIF   (N'&PRIMLEN GT 1).ZG7B    MULTI PARMS             00208800
&XPRIMLEN       SETC  '&PRIMLEN'  SET XVARIABLE                         00208900
.ZG7B           AIF   (K'&PRIMLEN(1) GT 0).ZG7C                         00209000
&ZXPRIMLEN      SETC  ''          RESET IN/OUTPUT                       00209100
&ZMS            SETC  ' '         *KRQDA*                               00209200
&ZMS            SETC  '&ZMS "PRIMLEN" KEY AND ITS ARGUMENT'             00209300
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00209400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00209500
.ZG7C           ANOP  ,                                                 00209600
.*-------------------------------------------------------------------   00209700
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00209800
                AIF   (K'&ZXPRIMLEN LE 0).ZG7R  NOT I/O                 00209900
                AIF   ('&XPRIMLEN'(1,1) NE '(').ZG7R                    00210000
&ZCGPR          SETC  '&XPRIMLEN'(2,K'&XPRIMLEN-2)                      00210100
                AIF   ('&ZCGPR'(1,1) NE '0').ZG7P                       00210200
                AIF   (K'&ZCGPR GT 2).ZG7Q                              00210300
                AIF   ('&ZCGPR' EQ '0').ZG7Q                            00210400
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00210500
                AIF   (T'&ZCGPR NE 'N').ZG7Q    INVALID REG NAME        00210600
.ZG7P           ANOP  ,                                                 00210700
                AIF   (T'&ZCGPR NE 'N').ZG7R    NON NUMERIC             00210800
                AIF   ('&ZCGPR' LT '2').ZG7Q                            00210900
                AIF   ('&ZCGPR' LE '12').ZG7R                           00211000
.ZG7Q           ANOP  ,                                                 00211100
&ZMS            SETC  '"PRIMLEN='               *KGPRA* MNOTE           00211200
&ZMS            SETC  '&ZMS.&PRIMLEN"'                                  00211300
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00211400
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00211500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00211600
.ZG7R           ANOP  ,                                                 00211700
.*----------------------------------------------------------------***   00211800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00211900
                AIF   (N'&SECLEN LE 1).ZG10A    CK NUM                  00212000
&ZMS            SETC  '"SECLEN='  *KPOSA* MNOTE                         00212100
&ZMS            SETC  '&ZMS.&SECLEN"'                                   00212200
&ZMS            SETC  '&ZMS "SECLEN"'                                   00212300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00212400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00212500
.ZG10A          ANOP  ,                                                 00212600
.*-------------------------------------------------------------------   00212700
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00212800
&ZXSECLEN       SETC  'INPUT'     SET IN/OUTPUT                         00212900
&XSECLEN        SETC  '0'                                               00213000
                AIF   (K'&SECLEN(1) LE 0).ZG10B  PARM                   00213100
&XSECLEN        SETC  '&SECLEN(1)'              SET XVARIABLE           00213200
                AIF   (N'&SECLEN GT 1).ZG10B    MULTI PARMS             00213300
&XSECLEN        SETC  '&SECLEN'   SET XVARIABLE                         00213400
.ZG10B          ANOP  ,                                                 00213500
.*-------------------------------------------------------------------   00213600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00213700
                AIF   (K'&ZXSECLEN LE 0).ZG10R  NOT I/O                 00213800
                AIF   ('&XSECLEN'(1,1) NE '(').ZG10R                    00213900
&ZCGPR          SETC  '&XSECLEN'(2,K'&XSECLEN-2)                        00214000
                AIF   ('&ZCGPR'(1,1) NE '0').ZG10P                      00214100
                AIF   (K'&ZCGPR GT 2).ZG10Q                             00214200
                AIF   ('&ZCGPR' EQ '0').ZG10Q                           00214300
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00214400
                AIF   (T'&ZCGPR NE 'N').ZG10Q   INVALID REG NAME        00214500
.ZG10P          ANOP  ,                                                 00214600
                AIF   (T'&ZCGPR NE 'N').ZG10R   NON NUMERIC             00214700
                AIF   ('&ZCGPR' LT '2').ZG10Q                           00214800
                AIF   ('&ZCGPR' LE '12').ZG10R                          00214900
.ZG10Q          ANOP  ,                                                 00215000
&ZMS            SETC  '"SECLEN='  *KGPRA* MNOTE                         00215100
&ZMS            SETC  '&ZMS.&SECLEN"'                                   00215200
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00215300
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00215400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00215500
.ZG10R          ANOP  ,                                                 00215600
.*----------------------------------------------------------------***   00215700
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00215800
                AIF   (N'&VARLEN LE 1).ZG13A    CK NUM                  00215900
&ZMS            SETC  '"VARLEN='  *KPOSA* MNOTE                         00216000
&ZMS            SETC  '&ZMS.&VARLEN"'                                   00216100
&ZMS            SETC  '&ZMS "VARLEN"'                                   00216200
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00216300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00216400
.ZG13A          ANOP  ,                                                 00216500
.*-------------------------------------------------------------------   00216600
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00216700
&ZXVARLEN       SETC  'INPUT'     SET IN/OUTPUT                         00216800
&XVARLEN        SETC  '0'                                               00216900
                AIF   (K'&VARLEN(1) LE 0).ZG13B  PARM                   00217000
&XVARLEN        SETC  '&VARLEN(1)'              SET XVARIABLE           00217100
                AIF   (N'&VARLEN GT 1).ZG13B    MULTI PARMS             00217200
&XVARLEN        SETC  '&VARLEN'   SET XVARIABLE                         00217300
.ZG13B          ANOP  ,                                                 00217400
.*-------------------------------------------------------------------   00217500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00217600
                AIF   (K'&ZXVARLEN LE 0).ZG13R  NOT I/O                 00217700
                AIF   ('&XVARLEN'(1,1) NE '(').ZG13R                    00217800
&ZCGPR          SETC  '&XVARLEN'(2,K'&XVARLEN-2)                        00217900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG13P                      00218000
                AIF   (K'&ZCGPR GT 2).ZG13Q                             00218100
                AIF   ('&ZCGPR' EQ '0').ZG13Q                           00218200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00218300
                AIF   (T'&ZCGPR NE 'N').ZG13Q   INVALID REG NAME        00218400
.ZG13P          ANOP  ,                                                 00218500
                AIF   (T'&ZCGPR NE 'N').ZG13R   NON NUMERIC             00218600
                AIF   ('&ZCGPR' LT '2').ZG13Q                           00218700
                AIF   ('&ZCGPR' LE '12').ZG13R                          00218800
.ZG13Q          ANOP  ,                                                 00218900
&ZMS            SETC  '"VARLEN='  *KGPRA* MNOTE                         00219000
&ZMS            SETC  '&ZMS.&VARLEN"'                                   00219100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00219200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00219300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00219400
.ZG13R          ANOP  ,                                                 00219500
.*----------------------------------------------------------------***   00219600
.***AG.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00219700
                AIF   (N'&ARCHLEV LE 1).ZG16A   CK NUM                  00219800
&ZMS            SETC  '"ARCHLEV='               *KPOSA* MNOTE           00219900
&ZMS            SETC  '&ZMS.&ARCHLEV"'                                  00220000
&ZMS            SETC  '&ZMS "ARCHLEV"'                                  00220100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00220200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00220300
.ZG16A          ANOP  ,                                                 00220400
.*-------------------------------------------------------------------   00220500
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00220600
&XARCHLEV       SETC  ''          INITIALIZE XVARIABLE                  00220700
.ZG17A   AIF   ('&ARCHLEV(1)' NE '10').ZG18A                            00220800
&XARCHLEV       SETC  '10'        SET KEYWORD                           00220900
.*-------------------------------------------------------------------   00221000
.***AG.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00221100
.ZG18A          AIF   (K'&XARCHLEV GT 0).ZG18C  KEYWORD                 00221200
                AIF   (K'&ARCHLEV(1) LE 0).ZG18B                        00221300
&ZMS            SETC  '"ARCHLEV='               *KUKWA* MNOTE           00221400
&ZMS            SETC  '&ZMS.&ARCHLEV"'                                  00221500
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00221600
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00221700
&ZMS            SETC  '&ZMS "10".'              VALID KEYWORD           00221800
                MNOTE 8,' &ZMS '                                        00221900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00222000
.ZG18B          ANOP  ,                                                 00222100
&XARCHLEV       SETC  '10'        SET DEFAULT KEYWORD                   00222200
.ZG18C          ANOP  ,                                                 00222300
&ZXARCHLEV      SETC  'INPUT'     SET IN/OUTPUT                         00222400
.*-------------------------------------------------------------------   00222500
.***AG.KKWRD04 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00222600
                AIF   (K'&ARCHLEV(1) GT 0).ZG18D  VALID                 00222700
&ZXARCHLEV      SETC  ''          RESET IN/OUTPUT                       00222800
&ZMS            SETC  'THE'                                             00222900
&ZMS            SETC  '&ZMS "ARCHLEV" KEY AND ITS ARGUMENT'             00223000
&ZMS            SETC  '&ZMS ARE REQUIRED.'                              00223100
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00223200
&ZMS            SETC  '&ZMS "10".'              VALID KEYWORD           00223300
                MNOTE 8,' &ZMS '                                        00223400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00223500
.ZG18D          ANOP  ,                                                 00223600
.*----------------------------------------------------------------***   00223700
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00223800
                AIF   (N'&DAE LE 1).ZG20A       CK NUM                  00223900
&ZMS            SETC  '"DAE='     *KPOSA* MNOTE                         00224000
&ZMS            SETC  '&ZMS.&DAE"'                                      00224100
&ZMS            SETC  '&ZMS "DAE"'                                      00224200
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00224300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00224400
.ZG20A          ANOP  ,                                                 00224500
.*-------------------------------------------------------------------   00224600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00224700
&XDAE           SETC  ''          INITIALIZE XVARIABLE                  00224800
.ZG21A   AIF   ('&DAE(1)' NE 'YES').ZG22A                               00224900
&XDAE           SETC  'YES'       SET KEYWORD                           00225000
.*-------------------------------------------------------------------   00225100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00225200
.ZG22A   AIF   ('&DAE(1)' NE 'NO').ZG23A                                00225300
&XDAE           SETC  'NO'        SET KEYWORD                           00225400
.*-------------------------------------------------------------------   00225500
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00225600
.ZG23A          AIF   (K'&XDAE GT 0).ZG23C      KEYWORD                 00225700
                AIF   (K'&DAE(1) LE 0).ZG23B                            00225800
&ZMS            SETC  '"DAE='     *KUKWA* MNOTE                         00225900
&ZMS            SETC  '&ZMS.&DAE"'                                      00226000
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00226100
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00226200
&ZMS            SETC  '&ZMS "YES"'              VALID KEYWORD           00226300
&ZMS            SETC  '&ZMS OR "NO".'           VALID KEYWORD           00226400
                MNOTE 8,' &ZMS '                                        00226500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00226600
.ZG23B          ANOP  ,                                                 00226700
&XDAE           SETC  'YES'       SET DEFAULT KEYWORD                   00226800
.ZG23C          ANOP  ,                                                 00226900
&ZXDAE          SETC  'INPUT'     SET IN/OUTPUT                         00227000
.*----------------------------------------------------------------***   00227100
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00227200
                AIF   (N'&COMPDSC LE 1).ZG25A   CK NUM                  00227300
&ZMS            SETC  '"COMPDSC='               *KPOSA* MNOTE           00227400
&ZMS            SETC  '&ZMS.&COMPDSC"'                                  00227500
&ZMS            SETC  '&ZMS "COMPDSC"'                                  00227600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00227700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00227800
.ZG25A          ANOP  ,                                                 00227900
.*-------------------------------------------------------------------   00228000
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00228100
&ZXCOMPDSC      SETC  'INPUT'     SET IN/OUTPUT                         00228200
&XCOMPDSC       SETC  'NO_COMPDSC'                                      00228300
                AIF   (K'&COMPDSC(1) LE 0).ZG25B  PARM                  00228400
&XCOMPDSC       SETC  '&COMPDSC(1)'             SET XVARIABLE           00228500
                AIF   (N'&COMPDSC GT 1).ZG25B   MULTI PARMS             00228600
&XCOMPDSC       SETC  '&COMPDSC'  SET XVARIABLE                         00228700
.ZG25B          ANOP  ,                                                 00228800
.*-------------------------------------------------------------------   00228900
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00229000
                AIF   (K'&ZXCOMPDSC LE 0).ZG25R  NOT I/O                00229100
                AIF   ('&XCOMPDSC' EQ 'NO_COMPDSC').ZG25R               00229200
                AIF   ('&XCOMPDSC'(1,1) NE '(').ZG25R                   00229300
&ZCGPR          SETC  '&XCOMPDSC'(2,K'&XCOMPDSC-2)                      00229400
                AIF   ('&ZCGPR'(1,1) NE '0').ZG25P                      00229500
                AIF   (K'&ZCGPR GT 2).ZG25Q                             00229600
                AIF   ('&ZCGPR' EQ '0').ZG25Q                           00229700
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00229800
                AIF   (T'&ZCGPR NE 'N').ZG25Q   INVALID REG NAME        00229900
.ZG25P          ANOP  ,                                                 00230000
                AIF   (T'&ZCGPR NE 'N').ZG25R   NON NUMERIC             00230100
                AIF   ('&ZCGPR' LT '2').ZG25Q                           00230200
                AIF   ('&ZCGPR' LE '12').ZG25R                          00230300
.ZG25Q          ANOP  ,                                                 00230400
&ZMS            SETC  '"COMPDSC='               *KGPRA* MNOTE           00230500
&ZMS            SETC  '&ZMS.&COMPDSC"'                                  00230600
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00230700
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00230800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00230900
.ZG25R          ANOP  ,                                                 00231000
.*----------------------------------------------------------------***   00231100
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00231200
                AIF   (N'&PROBLEM LE 1).ZG28A   CK NUM                  00231300
&ZMS            SETC  '"PROBLEM='               *KPOSA* MNOTE           00231400
&ZMS            SETC  '&ZMS.&PROBLEM"'                                  00231500
&ZMS            SETC  '&ZMS "PROBLEM"'                                  00231600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00231700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00231800
.ZG28A          ANOP  ,                                                 00231900
.*-------------------------------------------------------------------   00232000
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00232100
&ZXPROBLEM      SETC  'INPUT'     SET IN/OUTPUT                         00232200
&XPROBLEM       SETC  'NO_PROBLEM'                                      00232300
                AIF   (K'&PROBLEM(1) LE 0).ZG28B  PARM                  00232400
&XPROBLEM       SETC  '&PROBLEM(1)'             SET XVARIABLE           00232500
                AIF   (N'&PROBLEM GT 1).ZG28B   MULTI PARMS             00232600
&XPROBLEM       SETC  '&PROBLEM'  SET XVARIABLE                         00232700
.ZG28B          ANOP  ,                                                 00232800
.*-------------------------------------------------------------------   00232900
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00233000
                AIF   (K'&ZXPROBLEM LE 0).ZG28R  NOT I/O                00233100
                AIF   ('&XPROBLEM' EQ 'NO_PROBLEM').ZG28R               00233200
                AIF   ('&XPROBLEM'(1,1) NE '(').ZG28R                   00233300
&ZCGPR          SETC  '&XPROBLEM'(2,K'&XPROBLEM-2)                      00233400
                AIF   ('&ZCGPR'(1,1) NE '0').ZG28P                      00233500
                AIF   (K'&ZCGPR GT 2).ZG28Q                             00233600
                AIF   ('&ZCGPR' EQ '0').ZG28Q                           00233700
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00233800
                AIF   (T'&ZCGPR NE 'N').ZG28Q   INVALID REG NAME        00233900
.ZG28P          ANOP  ,                                                 00234000
                AIF   (T'&ZCGPR NE 'N').ZG28R   NON NUMERIC             00234100
                AIF   ('&ZCGPR' LT '2').ZG28Q                           00234200
                AIF   ('&ZCGPR' LE '12').ZG28R                          00234300
.ZG28Q          ANOP  ,                                                 00234400
&ZMS            SETC  '"PROBLEM='               *KGPRA* MNOTE           00234500
&ZMS            SETC  '&ZMS.&PROBLEM"'                                  00234600
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00234700
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00234800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00234900
.ZG28R          ANOP  ,                                                 00235000
.*----------------------------------------------------------------***   00235100
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00235200
                AIF   (N'&SERVLEV LE 1).ZG31A   CK NUM                  00235300
&ZMS            SETC  '"SERVLEV='               *KPOSA* MNOTE           00235400
&ZMS            SETC  '&ZMS.&SERVLEV"'                                  00235500
&ZMS            SETC  '&ZMS "SERVLEV"'                                  00235600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00235700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00235800
.ZG31A          ANOP  ,                                                 00235900
.*-------------------------------------------------------------------   00236000
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00236100
&ZXSERVLEV      SETC  'INPUT'     SET IN/OUTPUT                         00236200
&XSERVLEV       SETC  'NO_SERVICE_LEVEL'                                00236300
                AIF   (K'&SERVLEV(1) LE 0).ZG31B  PARM                  00236400
&XSERVLEV       SETC  '&SERVLEV(1)'             SET XVARIABLE           00236500
                AIF   (N'&SERVLEV GT 1).ZG31B   MULTI PARMS             00236600
&XSERVLEV       SETC  '&SERVLEV'  SET XVARIABLE                         00236700
.ZG31B          ANOP  ,                                                 00236800
.*-------------------------------------------------------------------   00236900
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00237000
                AIF   (K'&ZXSERVLEV LE 0).ZG31R  NOT I/O                00237100
                AIF   ('&XSERVLEV' EQ 'NO_SERVICE_LEVEL').ZG31R         00237200
                AIF   ('&XSERVLEV'(1,1) NE '(').ZG31R                   00237300
&ZCGPR          SETC  '&XSERVLEV'(2,K'&XSERVLEV-2)                      00237400
                AIF   ('&ZCGPR'(1,1) NE '0').ZG31P                      00237500
                AIF   (K'&ZCGPR GT 2).ZG31Q                             00237600
                AIF   ('&ZCGPR' EQ '0').ZG31Q                           00237700
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00237800
                AIF   (T'&ZCGPR NE 'N').ZG31Q   INVALID REG NAME        00237900
.ZG31P          ANOP  ,                                                 00238000
                AIF   (T'&ZCGPR NE 'N').ZG31R   NON NUMERIC             00238100
                AIF   ('&ZCGPR' LT '2').ZG31Q                           00238200
                AIF   ('&ZCGPR' LE '12').ZG31R                          00238300
.ZG31Q          ANOP  ,                                                 00238400
&ZMS            SETC  '"SERVLEV='               *KGPRA* MNOTE           00238500
&ZMS            SETC  '&ZMS.&SERVLEV"'                                  00238600
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00238700
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00238800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00238900
.ZG31R          ANOP  ,                                                 00239000
.*----------------------------------------------------------------***   00239100
.***AG.KXVAR01 NAME, OPT INPUT, KEYS -NO ARGUMENTS                      00239200
&XNOCONVERTS    SETC  ''          RESET XVARIABLE                       00239300
&ZXNOCONVERTS   SETC  ''          RESET IN/OUTPUT                       00239400
&ZASYSLNDX      SETA  0                                                 00239500
.ZG34A          ANOP  ,           POSITIONAL MACRO KEY                  00239600
&ZASYSLNDX      SETA  &ZASYSLNDX+1                                      00239700
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG34B                         00239800
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG34A            00239900
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'NOCONVERTS').ZG34A           00240000
&ZCSYSLIST(&ZASYSLNDX) SETC  'NONXKEY'          POSITIONAL IS MACRO KEY 00240100
&XNOCONVERTS    SETC  'NOCONVERTS'              MACRO KEY FOUND         00240200
&ZXNOCONVERTS   SETC  'INPUT'     SET IN/OUTPUT                         00240300
.ZG34B          ANOP  ,                                                 00240400
.*-------------------------------------------------------------------   00240500
.***AG.KXVAR03 NAME, OPT INPUT, KEYS -NO ARGUMENTS                      00240600
                AIF   (K'&XNOCONVERTS GT 0).ZG34C  KEY ENTERED          00240700
&ZXNOCONVERTS   SETC  'INPUT'     SET IN/OUTPUT                         00240800
&XNOCONVERTS    SETC  'CONVERSIONS'             SET DEFAULT             00240900
.ZG34C          ANOP  ,                                                 00241000
.*------------------------------------------------------------------    00241100
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00241200
&XIBM           SETC  ''          INITIALIZE XVARIABLE                  00241300
.*-------------------------------------------------------------------   00241400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00241500
.ZG38           ANOP  ,                                                 00241600
                AIF   (K'&IBM(1) LE 0).ZG38A                            00241700
&ZTLC           SETC 'NO'                                               00241800
                AIF   ('&IBM(1)' NE '&ZTLC').ZG45                       00241900
&XIBM           SETC  'NO'        SET KEYWORD                           00242000
                AIF   (N'&IBM LE 1).ZG38A       CK NUM                  00242100
&ZMS            SETC  '"IBM='     *KPOSA* MNOTE                         00242200
&ZMS            SETC  '&ZMS.&IBM"'                                      00242300
&ZMS            SETC  '&ZMS "IBM"'                                      00242400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00242500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00242600
.ZG38A          ANOP  ,                                                 00242700
.*------------------------------------------------------------------    00242800
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00242900
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00243000
.ZG38A0         AIF   (K'&COMPID LE 0).ZG38A1   OK                      00243100
&ZCVAL          SETC '&ZCVAL COMPID'            INCORRECT KEY USED      00243200
.ZG38A1         AIF   (K'&COMPLEV LE 0).ZG38A2  OK                      00243300
&ZCVAL          SETC '&ZCVAL COMPLEV'           INCORRECT KEY USED      00243400
.ZG38A2         AIF   (K'&PID LE 0).ZG38A3      OK                      00243500
&ZCVAL          SETC '&ZCVAL PID'               INCORRECT KEY USED      00243600
.ZG38A3         AIF   (K'&PIDLEVEL LE 0).ZG38A4  OK                     00243700
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          INCORRECT KEY USED      00243800
.ZG38A4         AIF   (K'&SUBSYSTEM LE 0).ZG38A5  OK                    00243900
&ZCVAL          SETC '&ZCVAL SUBSYSTEM'         INCORRECT KEY USED      00244000
.ZG38A5         AIF   (K'&ZCVAL LE 0).ZG38A6    OK                      00244100
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00244200
&ZMS            SETC  '"IBM'      *KMEIA* MNOTE                         00244300
&ZMS            SETC  '&ZMS.=&IBM"'                                     00244400
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00244500
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00244600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00244700
.ZG38A6         ANOP  ,                                                 00244800
.*----------------------------------------------------------------***   00244900
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00245000
                AIF   (N'&PROGRAM LE 1).ZG40A   CK NUM                  00245100
&ZMS            SETC  '"PROGRAM='               *KPOSA* MNOTE           00245200
&ZMS            SETC  '&ZMS.&PROGRAM"'                                  00245300
&ZMS            SETC  '&ZMS "PROGRAM"'                                  00245400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00245500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00245600
.ZG40A          ANOP  ,                                                 00245700
.*-------------------------------------------------------------------   00245800
.***AG.KXVAR06 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00245900
&ZXPROGRAM      SETC  'INPUT'     SET IN/OUTPUT                         00246000
&XPROGRAM       SETC  '&PROGRAM(1)'             SET XVARIABLE           00246100
                AIF   (N'&PROGRAM GT 1).ZG40B   MULTI PARMS             00246200
&XPROGRAM       SETC  '&PROGRAM'  SET XVARIABLE                         00246300
.ZG40B          AIF   (K'&PROGRAM(1) GT 0).ZG40C                        00246400
&ZXPROGRAM      SETC  ''          RESET IN/OUTPUT                       00246500
&ZMS            SETC  ' '         *KRQDA*                               00246600
&ZMS            SETC  '&ZMS "PROGRAM" KEY AND ITS ARGUMENT'             00246700
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00246800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00246900
                AGO   .ZG40D                                            00247000
.ZG40C          AIF   ('&XPROGRAM' NE 'NO_PROGRAM').ZG40D               00247100
&ZXPROGRAM      SETC  ''          RESET IN/OUTPUT                       00247200
.ZG40D          ANOP  ,                                                 00247300
.*-------------------------------------------------------------------   00247400
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00247500
                AIF   (K'&ZXPROGRAM LE 0).ZG40R  NOT I/O                00247600
                AIF   ('&XPROGRAM' EQ 'NO_PROGRAM').ZG40R               00247700
                AIF   ('&XPROGRAM'(1,1) NE '(').ZG40R                   00247800
&ZCGPR          SETC  '&XPROGRAM'(2,K'&XPROGRAM-2)                      00247900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG40P                      00248000
                AIF   (K'&ZCGPR GT 2).ZG40Q                             00248100
                AIF   ('&ZCGPR' EQ '0').ZG40Q                           00248200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00248300
                AIF   (T'&ZCGPR NE 'N').ZG40Q   INVALID REG NAME        00248400
.ZG40P          ANOP  ,                                                 00248500
                AIF   (T'&ZCGPR NE 'N').ZG40R   NON NUMERIC             00248600
                AIF   ('&ZCGPR' LT '2').ZG40Q                           00248700
                AIF   ('&ZCGPR' LE '12').ZG40R                          00248800
.ZG40Q          ANOP  ,                                                 00248900
&ZMS            SETC  '"PROGRAM='               *KGPRA* MNOTE           00249000
&ZMS            SETC  '&ZMS.&PROGRAM"'                                  00249100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00249200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00249300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00249400
.ZG40R          ANOP  ,                                                 00249500
.*----------------------------------------------------------------***   00249600
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00249700
                AIF   (N'&PROGLEV LE 1).ZG43A   CK NUM                  00249800
&ZMS            SETC  '"PROGLEV='               *KPOSA* MNOTE           00249900
&ZMS            SETC  '&ZMS.&PROGLEV"'                                  00250000
&ZMS            SETC  '&ZMS "PROGLEV"'                                  00250100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00250200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00250300
.ZG43A          ANOP  ,                                                 00250400
.*-------------------------------------------------------------------   00250500
.***AG.KXVAR06 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00250600
&ZXPROGLEV      SETC  'INPUT'     SET IN/OUTPUT                         00250700
&XPROGLEV       SETC  '&PROGLEV(1)'             SET XVARIABLE           00250800
                AIF   (N'&PROGLEV GT 1).ZG43B   MULTI PARMS             00250900
&XPROGLEV       SETC  '&PROGLEV'  SET XVARIABLE                         00251000
.ZG43B          AIF   (K'&PROGLEV(1) GT 0).ZG43C                        00251100
&ZXPROGLEV      SETC  ''          RESET IN/OUTPUT                       00251200
&ZMS            SETC  ' '         *KRQDA*                               00251300
&ZMS            SETC  '&ZMS "PROGLEV" KEY AND ITS ARGUMENT'             00251400
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00251500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00251600
                AGO   .ZG43D                                            00251700
.ZG43C          AIF   ('&XPROGLEV' NE 'NO_PROGLEV').ZG43D               00251800
&ZXPROGLEV      SETC  ''          RESET IN/OUTPUT                       00251900
.ZG43D          ANOP  ,                                                 00252000
.*-------------------------------------------------------------------   00252100
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00252200
                AIF   (K'&ZXPROGLEV LE 0).ZG43R  NOT I/O                00252300
                AIF   ('&XPROGLEV' EQ 'NO_PROGLEV').ZG43R               00252400
                AIF   ('&XPROGLEV'(1,1) NE '(').ZG43R                   00252500
&ZCGPR          SETC  '&XPROGLEV'(2,K'&XPROGLEV-2)                      00252600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG43P                      00252700
                AIF   (K'&ZCGPR GT 2).ZG43Q                             00252800
                AIF   ('&ZCGPR' EQ '0').ZG43Q                           00252900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00253000
                AIF   (T'&ZCGPR NE 'N').ZG43Q   INVALID REG NAME        00253100
.ZG43P          ANOP  ,                                                 00253200
                AIF   (T'&ZCGPR NE 'N').ZG43R   NON NUMERIC             00253300
                AIF   ('&ZCGPR' LT '2').ZG43Q                           00253400
                AIF   ('&ZCGPR' LE '12').ZG43R                          00253500
.ZG43Q          ANOP  ,                                                 00253600
&ZMS            SETC  '"PROGLEV='               *KGPRA* MNOTE           00253700
&ZMS            SETC  '&ZMS.&PROGLEV"'                                  00253800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00253900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00254000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00254100
.ZG43R          ANOP  ,                                                 00254200
.*-------------------------------------------------------------------   00254300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00254400
.ZG45           ANOP  ,                                                 00254500
&ZTLC           SETC 'YES'                                              00254600
                AIF   ('&IBM(1)' NE '&ZTLC').ZG59                       00254700
&XIBM           SETC  'YES'       SET KEYWORD                           00254800
                AIF   (N'&IBM LE 1).ZG45A       CK NUM                  00254900
&ZMS            SETC  '"IBM='     *KPOSA* MNOTE                         00255000
&ZMS            SETC  '&ZMS.&IBM"'                                      00255100
&ZMS            SETC  '&ZMS "IBM"'                                      00255200
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00255300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00255400
.ZG45A          ANOP  ,                                                 00255500
.*------------------------------------------------------------------    00255600
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00255700
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00255800
.ZG45A0         AIF   (K'&PROGRAM LE 0).ZG45A1  OK                      00255900
&ZCVAL          SETC '&ZCVAL PROGRAM'           INCORRECT KEY USED      00256000
.ZG45A1         AIF   (K'&PROGLEV LE 0).ZG45A2  OK                      00256100
&ZCVAL          SETC '&ZCVAL PROGLEV'           INCORRECT KEY USED      00256200
.ZG45A2         AIF   (K'&ZCVAL LE 0).ZG45A3    OK                      00256300
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00256400
&ZMS            SETC  '"IBM'      *KMEIA* MNOTE                         00256500
&ZMS            SETC  '&ZMS.=&IBM"'                                     00256600
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00256700
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00256800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00256900
.ZG45A3         ANOP  ,                                                 00257000
.*----------------------------------------------------------------***   00257100
.***AG.KMEKY01 NAME, OPT RQD INPUT, ME KEYS -XVARIABLE                  00257200
&XTEST2         SETC  ''          INITIALIZE XVARIABLE                  00257300
                AIF   (K'&COMPID LE 0).ZG47C                            00257400
&ZXTEST2        SETC  'INPUT'     SET IN/OUTPUT                         00257500
&XTEST2         SETC  'COMPID'    SET XVARIABLE                         00257600
&ZXCOMPID       SETC  'INPUT'     SET IN/OUTPUT                         00257700
&XCOMPID        SETC  '&COMPID(1)'              SET XVARIABLE PARM      00257800
                AIF   (N'&COMPID GT 1).ZG47A    MULTIPLE PARMS          00257900
&XCOMPID        SETC  '&COMPID'   SET XVARIABLE PARM                    00258000
.ZG47A          AIF   (N'&COMPID LE 1).ZG47B    CK NUM                  00258100
&ZMS            SETC  '"COMPID='  *KPOSA* MNOTE                         00258200
&ZMS            SETC  '&ZMS.&COMPID"'                                   00258300
&ZMS            SETC  '&ZMS "COMPID"'                                   00258400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00258500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00258600
.ZG47B          AIF   (K'&XCOMPID GT 0).ZG47C   ONE PARM                00258700
&ZXTEST2        SETC  ''          RESET IN/OUTPUT                       00258800
&ZXCOMPID       SETC  ''          RESET IN/OUTPUT                       00258900
&ZMS            SETC  ' '         *KRQDA*                               00259000
&ZMS            SETC  '&ZMS "COMPID" KEY AND ITS ARGUMENT'              00259100
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00259200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00259300
.ZG47C          ANOP  ,                                                 00259400
.*----------------------------------------------------------------***   00259500
.***AG.KMEKY02 NAME, OPT RQD INPUT, ME KEYS -XVARIABLE                  00259600
                AIF   (K'&PID LE 0).ZG51D       NO ME KEY               00259700
                AIF   (N'&PID LE 1).ZG51A       CK NUM                  00259800
&ZMS            SETC  '"PID='     *KPOSA* MNOTE                         00259900
&ZMS            SETC  '&ZMS.&PID"'                                      00260000
&ZMS            SETC  '&ZMS "PID"'                                      00260100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00260200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00260300
.ZG51A          AIF   (K'&XTEST2 LE 0).ZG51B                            00260400
&ZMS            SETC  '"PID'      *KMEKA* MNOTE                         00260500
&ZMS            SETC  '&ZMS.=&PID"'                                     00260600
&ZMS            SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'             00260700
&ZMS            SETC  '&ZMS "&XTEST2"'                                  00260800
                MNOTE 8,' &ZMS KEY.'                                    00260900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00261000
                AGO   .ZG51D                                            00261100
.*                                                                      00261200
.ZG51B          ANOP  ,                                                 00261300
&ZXTEST2        SETC  'INPUT'     SET IN/OUTPUT                         00261400
&XTEST2         SETC  'PID'       SET XVARIABLE                         00261500
&ZXPID          SETC  'INPUT'     SET IN/OUTPUT                         00261600
&XPID           SETC  '&PID(1)'   SET XVARIABLE PARM                    00261700
                AIF   (N'&PID GT 1).ZG51C       MULTIPLE PARMS          00261800
&XPID           SETC  '&PID'      SET XVARIABLE PARM                    00261900
.ZG51C          AIF   (K'&XPID GT 0).ZG51D      ONE PARM                00262000
&ZXTEST2        SETC  ''          RESET IN/OUTPUT                       00262100
&ZXPID          SETC  ''          RESET IN/OUTPUT                       00262200
&ZMS            SETC  ' '         *KRQDA*                               00262300
&ZMS            SETC  '&ZMS "PID" KEY AND ITS ARGUMENT'                 00262400
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00262500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00262600
.ZG51D          ANOP  ,                                                 00262700
.*------------------------------------------------------------------    00262800
.***AG.KME4Y09 NAME, OPT RQD INPUT, ME KEYS -CHECK IF KEY ENTERED       00262900
                AIF   (K'&XTEST2 GT 0).ZG55B                            00263000
&ZXTEST2        SETC  ''          RESET IN/OUTPUT                       00263100
&ZXCOMPID       SETC  ''          RESET IN/OUTPUT                       00263200
&XTEST2         SETC  ''          ENSURE NULL                           00263300
&XCOMPID        SETC  ''          ENSURE NULL                           00263400
&ZMS            SETC  'ONE OF THE FOLLOWING'    *KMERA* MNOTE           00263500
&ZMS            SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'               00263600
&ZMS            SETC  '&ZMS REQUIRED:'                                  00263700
&ZMS            SETC  '&ZMS "COMPID"'           VALID ME KEY            00263800
&ZMS            SETC  '&ZMS OR "PID".'          VALID ME KEY            00263900
                MNOTE 8,' &ZMS '                                        00264000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00264100
.ZG55B          ANOP  ,                                                 00264200
.*-------------------------------------------------------------------   00264300
.***AG.KMEKY13 NAME, OPT RQD INPUT, ME KEYS -PROCESS DEPENDENCIES       00264400
.ZG47           AIF   ('&XTEST2' NE 'COMPID').ZG51                      00264500
.*-------------------------------------------------------------------   00264600
.***AG.KMEKY14 NAME, OPT RQD INPUT, ME KEYS -DISALLOWED KEYS            00264700
&ZCVAL          SETC ''           ERROR KEY FIELD                       00264800
.ZG47I0         AIF   (K'&PIDLEVEL LE 0).ZG47I1                         00264900
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          DISALLOWED KEY          00265000
.ZG47I1         AIF   (K'&ZCVAL LE 0).ZG47J     KEY                     00265100
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00265200
&ZMS            SETC  '"COMPID'   *KMEIA* MNOTE                         00265300
&ZMS            SETC  '&ZMS.=&COMPID"'                                  00265400
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00265500
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00265600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00265700
.ZG47J          ANOP  ,                                                 00265800
.*-------------------------------------------------------------------   00265900
.***AG.KCK02 NAME, OPT RQD INPUT, ME KEYS -GPR OUT OF RANGE             00266000
                AIF   (K'&ZXCOMPID LE 0).ZG47R  NOT I/O                 00266100
                AIF   ('&XCOMPID' EQ 'NO_COMPID').ZG47R                 00266200
                AIF   ('&XCOMPID'(1,1) NE '(').ZG47R                    00266300
&ZCGPR          SETC  '&XCOMPID'(2,K'&XCOMPID-2)                        00266400
                AIF   ('&ZCGPR'(1,1) NE '0').ZG47P                      00266500
                AIF   (K'&ZCGPR GT 2).ZG47Q                             00266600
                AIF   ('&ZCGPR' EQ '0').ZG47Q                           00266700
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00266800
                AIF   (T'&ZCGPR NE 'N').ZG47Q   INVALID REG NAME        00266900
.ZG47P          ANOP  ,                                                 00267000
                AIF   (T'&ZCGPR NE 'N').ZG47R   NON NUMERIC             00267100
                AIF   ('&ZCGPR' LT '2').ZG47Q                           00267200
                AIF   ('&ZCGPR' LE '12').ZG47R                          00267300
.ZG47Q          ANOP  ,                                                 00267400
&ZMS            SETC  '"COMPID='  *KGPRA* MNOTE                         00267500
&ZMS            SETC  '&ZMS.&COMPID"'                                   00267600
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00267700
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00267800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00267900
.ZG47R          ANOP  ,                                                 00268000
.*----------------------------------------------------------------***   00268100
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00268200
                AIF   (N'&COMPLEV LE 1).ZG49A   CK NUM                  00268300
&ZMS            SETC  '"COMPLEV='               *KPOSA* MNOTE           00268400
&ZMS            SETC  '&ZMS.&COMPLEV"'                                  00268500
&ZMS            SETC  '&ZMS "COMPLEV"'                                  00268600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00268700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00268800
.ZG49A          ANOP  ,                                                 00268900
.*-------------------------------------------------------------------   00269000
.***AG.KXVAR06 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00269100
&ZXCOMPLEV      SETC  'INPUT'     SET IN/OUTPUT                         00269200
&XCOMPLEV       SETC  '&COMPLEV(1)'             SET XVARIABLE           00269300
                AIF   (N'&COMPLEV GT 1).ZG49B   MULTI PARMS             00269400
&XCOMPLEV       SETC  '&COMPLEV'  SET XVARIABLE                         00269500
.ZG49B          AIF   (K'&COMPLEV(1) GT 0).ZG49C                        00269600
&ZXCOMPLEV      SETC  ''          RESET IN/OUTPUT                       00269700
&ZMS            SETC  ' '         *KRQDA*                               00269800
&ZMS            SETC  '&ZMS "COMPLEV" KEY AND ITS ARGUMENT'             00269900
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00270000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00270100
                AGO   .ZG49D                                            00270200
.ZG49C          AIF   ('&XCOMPLEV' NE 'NO_COMPLEV').ZG49D               00270300
&ZXCOMPLEV      SETC  ''          RESET IN/OUTPUT                       00270400
.ZG49D          ANOP  ,                                                 00270500
.*-------------------------------------------------------------------   00270600
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00270700
                AIF   (K'&ZXCOMPLEV LE 0).ZG49R  NOT I/O                00270800
                AIF   ('&XCOMPLEV' EQ 'NO_COMPLEV').ZG49R               00270900
                AIF   ('&XCOMPLEV'(1,1) NE '(').ZG49R                   00271000
&ZCGPR          SETC  '&XCOMPLEV'(2,K'&XCOMPLEV-2)                      00271100
                AIF   ('&ZCGPR'(1,1) NE '0').ZG49P                      00271200
                AIF   (K'&ZCGPR GT 2).ZG49Q                             00271300
                AIF   ('&ZCGPR' EQ '0').ZG49Q                           00271400
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00271500
                AIF   (T'&ZCGPR NE 'N').ZG49Q   INVALID REG NAME        00271600
.ZG49P          ANOP  ,                                                 00271700
                AIF   (T'&ZCGPR NE 'N').ZG49R   NON NUMERIC             00271800
                AIF   ('&ZCGPR' LT '2').ZG49Q                           00271900
                AIF   ('&ZCGPR' LE '12').ZG49R                          00272000
.ZG49Q          ANOP  ,                                                 00272100
&ZMS            SETC  '"COMPLEV='               *KGPRA* MNOTE           00272200
&ZMS            SETC  '&ZMS.&COMPLEV"'                                  00272300
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00272400
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00272500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00272600
.ZG49R          ANOP  ,                                                 00272700
.*-------------------------------------------------------------------   00272800
.***AG.KMEKY13 NAME, OPT RQD INPUT, ME KEYS -PROCESS DEPENDENCIES       00272900
.ZG51           AIF   ('&XTEST2' NE 'PID').ZG55                         00273000
.*-------------------------------------------------------------------   00273100
.***AG.KMEKY14 NAME, OPT RQD INPUT, ME KEYS -DISALLOWED KEYS            00273200
&ZCVAL          SETC ''           ERROR KEY FIELD                       00273300
.ZG51I0         AIF   (K'&COMPLEV LE 0).ZG51I1                          00273400
&ZCVAL          SETC '&ZCVAL COMPLEV'           DISALLOWED KEY          00273500
.ZG51I1         AIF   (K'&ZCVAL LE 0).ZG51J     KEY                     00273600
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00273700
&ZMS            SETC  '"PID'      *KMEIA* MNOTE                         00273800
&ZMS            SETC  '&ZMS.=&PID"'                                     00273900
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00274000
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00274100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00274200
.ZG51J          ANOP  ,                                                 00274300
.*-------------------------------------------------------------------   00274400
.***AG.KCK02 NAME, OPT RQD INPUT, ME KEYS -GPR OUT OF RANGE             00274500
                AIF   (K'&ZXPID LE 0).ZG51R     NOT I/O                 00274600
                AIF   ('&XPID' EQ 'NO_PID').ZG51R                       00274700
                AIF   ('&XPID'(1,1) NE '(').ZG51R                       00274800
&ZCGPR          SETC  '&XPID'(2,K'&XPID-2)                              00274900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG51P                      00275000
                AIF   (K'&ZCGPR GT 2).ZG51Q                             00275100
                AIF   ('&ZCGPR' EQ '0').ZG51Q                           00275200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00275300
                AIF   (T'&ZCGPR NE 'N').ZG51Q   INVALID REG NAME        00275400
.ZG51P          ANOP  ,                                                 00275500
                AIF   (T'&ZCGPR NE 'N').ZG51R   NON NUMERIC             00275600
                AIF   ('&ZCGPR' LT '2').ZG51Q                           00275700
                AIF   ('&ZCGPR' LE '12').ZG51R                          00275800
.ZG51Q          ANOP  ,                                                 00275900
&ZMS            SETC  '"PID='     *KGPRA* MNOTE                         00276000
&ZMS            SETC  '&ZMS.&PID"'                                      00276100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00276200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00276300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00276400
.ZG51R          ANOP  ,                                                 00276500
.*----------------------------------------------------------------***   00276600
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00276700
                AIF   (N'&PIDLEVEL LE 1).ZG53A  CK NUM                  00276800
&ZMS            SETC  '"PIDLEVEL='              *KPOSA* MNOTE           00276900
&ZMS            SETC  '&ZMS.&PIDLEVEL"'                                 00277000
&ZMS            SETC  '&ZMS "PIDLEVEL"'                                 00277100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00277200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00277300
.ZG53A          ANOP  ,                                                 00277400
.*-------------------------------------------------------------------   00277500
.***AG.KXVAR06 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00277600
&ZXPIDLEVEL     SETC  'INPUT'     SET IN/OUTPUT                         00277700
&XPIDLEVEL      SETC  '&PIDLEVEL(1)'            SET XVARIABLE           00277800
                AIF   (N'&PIDLEVEL GT 1).ZG53B  MULTI PARMS             00277900
&XPIDLEVEL      SETC  '&PIDLEVEL'               SET XVARIABLE           00278000
.ZG53B          AIF   (K'&PIDLEVEL(1) GT 0).ZG53C                       00278100
&ZXPIDLEVEL     SETC  ''          RESET IN/OUTPUT                       00278200
&ZMS            SETC  ' '         *KRQDA*                               00278300
&ZMS            SETC  '&ZMS "PIDLEVEL" KEY AND ITS ARGUMENT'            00278400
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00278500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00278600
                AGO   .ZG53D                                            00278700
.ZG53C          AIF   ('&XPIDLEVEL' NE 'NO_PIDLEV').ZG53D               00278800
&ZXPIDLEVEL     SETC  ''          RESET IN/OUTPUT                       00278900
.ZG53D          ANOP  ,                                                 00279000
.*-------------------------------------------------------------------   00279100
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00279200
                AIF   (K'&ZXPIDLEVEL LE 0).ZG53R  NOT I/O               00279300
                AIF   ('&XPIDLEVEL' EQ 'NO_PIDLEV').ZG53R               00279400
                AIF   ('&XPIDLEVEL'(1,1) NE '(').ZG53R                  00279500
&ZCGPR          SETC  '&XPIDLEVEL'(2,K'&XPIDLEVEL-2)                    00279600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG53P                      00279700
                AIF   (K'&ZCGPR GT 2).ZG53Q                             00279800
                AIF   ('&ZCGPR' EQ '0').ZG53Q                           00279900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00280000
                AIF   (T'&ZCGPR NE 'N').ZG53Q   INVALID REG NAME        00280100
.ZG53P          ANOP  ,                                                 00280200
                AIF   (T'&ZCGPR NE 'N').ZG53R   NON NUMERIC             00280300
                AIF   ('&ZCGPR' LT '2').ZG53Q                           00280400
                AIF   ('&ZCGPR' LE '12').ZG53R                          00280500
.ZG53Q          ANOP  ,                                                 00280600
&ZMS            SETC  '"PIDLEVEL='              *KGPRA* MNOTE           00280700
&ZMS            SETC  '&ZMS.&PIDLEVEL"'                                 00280800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00280900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00281000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00281100
.ZG53R          ANOP  ,                                                 00281200
.*-------------------------------------------------------------------   00281300
.***AG.KMEKY15 NAME, OPT RQD INPUT, ME KEYS -END                        00281400
.ZG55           ANOP  ,           END MUTUALLY EXCLUSIVE KEYS           00281500
.*----------------------------------------------------------------***   00281600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00281700
                AIF   (N'&SUBSYSTEM LE 1).ZG57A  CK NUM                 00281800
&ZMS            SETC  '"SUBSYSTEM='             *KPOSA* MNOTE           00281900
&ZMS            SETC  '&ZMS.&SUBSYSTEM"'                                00282000
&ZMS            SETC  '&ZMS "SUBSYSTEM"'                                00282100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00282200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00282300
.ZG57A          ANOP  ,                                                 00282400
.*-------------------------------------------------------------------   00282500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00282600
&ZXSUBSYSTEM    SETC  'INPUT'     SET IN/OUTPUT                         00282700
&XSUBSYSTEM     SETC  'NO_SUBSYSTEM'                                    00282800
                AIF   (K'&SUBSYSTEM(1) LE 0).ZG57B  PARM                00282900
&XSUBSYSTEM     SETC  '&SUBSYSTEM(1)'           SET XVARIABLE           00283000
                AIF   (N'&SUBSYSTEM GT 1).ZG57B  MULTI PARMS            00283100
&XSUBSYSTEM     SETC  '&SUBSYSTEM'              SET XVARIABLE           00283200
.ZG57B          ANOP  ,                                                 00283300
.*-------------------------------------------------------------------   00283400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00283500
                AIF   (K'&ZXSUBSYSTEM LE 0).ZG57R  NOT I/O              00283600
                AIF   ('&XSUBSYSTEM' EQ 'NO_SUBSYSTEM').ZG57R           00283700
                AIF   ('&XSUBSYSTEM'(1,1) NE '(').ZG57R                 00283800
&ZCGPR          SETC  '&XSUBSYSTEM'(2,K'&XSUBSYSTEM-2)                  00283900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG57P                      00284000
                AIF   (K'&ZCGPR GT 2).ZG57Q                             00284100
                AIF   ('&ZCGPR' EQ '0').ZG57Q                           00284200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00284300
                AIF   (T'&ZCGPR NE 'N').ZG57Q   INVALID REG NAME        00284400
.ZG57P          ANOP  ,                                                 00284500
                AIF   (T'&ZCGPR NE 'N').ZG57R   NON NUMERIC             00284600
                AIF   ('&ZCGPR' LT '2').ZG57Q                           00284700
                AIF   ('&ZCGPR' LE '12').ZG57R                          00284800
.ZG57Q          ANOP  ,                                                 00284900
&ZMS            SETC  '"SUBSYSTEM='             *KGPRA* MNOTE           00285000
&ZMS            SETC  '&ZMS.&SUBSYSTEM"'                                00285100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00285200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00285300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00285400
.ZG57R          ANOP  ,                                                 00285500
.*------------------------------------------------------------------    00285600
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00285700
.ZG59           ANOP  ,                                                 00285800
&ZXIBM          SETC  'INPUT'     SET IN/OUTPUT                         00285900
                AIF   (K'&XIBM GT 0).ZG59E      VALID ARG               00286000
                AIF   (T'&IBM EQ 'O').ZG59D     OMITTED                 00286100
&ZASYSLNDX      SETA  0                                                 00286200
.ZG59A          ANOP  ,           POSITIONAL MACRO KEY                  00286300
&ZASYSLNDX      SETA  &ZASYSLNDX+1                                      00286400
                AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG59C                  00286500
&ZTLC           SETC 'IBM'                                              00286600
                AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG59A         00286700
.ZG59B          ANOP  ,                                                 00286800
&ZXIBM          SETC  ''          RESET IN/OUTPUT                       00286900
&ZMS            SETC  'THE "IBM" KEY'           *KOPTA* MNOTE           00287000
&ZMS            SETC  '&ZMS MUST CONTAIN ONE'                           00287100
                MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                  00287200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00287300
                AGO   .ZG59E                                            00287400
.ZG59C          ANOP  ,                                                 00287500
&ZXIBM          SETC  ''          RESET IN/OUTPUT                       00287600
&ZMS            SETC  '"IBM='     *KUKWA* MNOTE                         00287700
&ZMS            SETC  '&ZMS.&IBM"'                                      00287800
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00287900
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00288000
&ZMS            SETC  '&ZMS "NO"'               VALID KEYWORD           00288100
&ZMS            SETC  '&ZMS OR "YES".'          VALID KEYWORD           00288200
                MNOTE 8,' &ZMS '                                        00288300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00288400
                AGO   .ZG59E                                            00288500
.ZG59D          ANOP  ,                                                 00288600
&XIBM           SETC  'NO'        SET DEFAULT KEYWORD                   00288700
.ZG59E          ANOP  ,                                                 00288800
.*-------------------------------------------------------------------   00288900
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES          00289000
.ZG60           AIF   ('&XTEST' NE 'RESET').ZG73                        00289100
.*-------------------------------------------------------------------   00289200
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS               00289300
&ZCVAL          SETC ''           ERROR KEY FIELD                       00289400
.ZG60I0         AIF   (K'&ARCHLEV LE 0).ZG60I1                          00289500
&ZCVAL          SETC '&ZCVAL ARCHLEV'           DISALLOWED KEY          00289600
.ZG60I1         AIF   (K'&DAE LE 0).ZG60I2                              00289700
&ZCVAL          SETC '&ZCVAL DAE'               DISALLOWED KEY          00289800
.ZG60I2         AIF   (K'&COMPDSC LE 0).ZG60I3                          00289900
&ZCVAL          SETC '&ZCVAL COMPDSC'           DISALLOWED KEY          00290000
.ZG60I3         AIF   (K'&PROBLEM LE 0).ZG60I4                          00290100
&ZCVAL          SETC '&ZCVAL PROBLEM'           DISALLOWED KEY          00290200
.ZG60I4         AIF   (K'&SERVLEV LE 0).ZG60I5                          00290300
&ZCVAL          SETC '&ZCVAL SERVLEV'           DISALLOWED KEY          00290400
.ZG60I5         AIF   (K'&XNOCONVERTS LE 0).ZG60I6                      00290500
&ZCVAL          SETC '&ZCVAL XNOCONVERTS'       DISALLOWED KEY          00290600
.ZG60I6         AIF   (K'&IBM LE 0).ZG60I7                              00290700
&ZCVAL          SETC '&ZCVAL IBM'               DISALLOWED KEY          00290800
.ZG60I7         AIF   (K'&PROGRAM LE 0).ZG60I8                          00290900
&ZCVAL          SETC '&ZCVAL PROGRAM'           DISALLOWED KEY          00291000
.ZG60I8         AIF   (K'&PROGLEV LE 0).ZG60I9                          00291100
&ZCVAL          SETC '&ZCVAL PROGLEV'           DISALLOWED KEY          00291200
.ZG60I9         AIF   (K'&COMPID LE 0).ZG60I10                          00291300
&ZCVAL          SETC '&ZCVAL COMPID'            DISALLOWED KEY          00291400
.ZG60I10        AIF   (K'&COMPLEV LE 0).ZG60I11                         00291500
&ZCVAL          SETC '&ZCVAL COMPLEV'           DISALLOWED KEY          00291600
.ZG60I11        AIF   (K'&PID LE 0).ZG60I12                             00291700
&ZCVAL          SETC '&ZCVAL PID'               DISALLOWED KEY          00291800
.ZG60I12        AIF   (K'&PIDLEVEL LE 0).ZG60I13                        00291900
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          DISALLOWED KEY          00292000
.ZG60I13        AIF   (K'&SUBSYSTEM LE 0).ZG60I14                       00292100
&ZCVAL          SETC '&ZCVAL SUBSYSTEM'         DISALLOWED KEY          00292200
.ZG60I14        AIF   (K'&SDBSTRING LE 0).ZG60I15                       00292300
&ZCVAL          SETC '&ZCVAL SDBSTRING'         DISALLOWED KEY          00292400
.ZG60I15        AIF   (K'&SDBLEN LE 0).ZG60I16                          00292500
&ZCVAL          SETC '&ZCVAL SDBLEN'            DISALLOWED KEY          00292600
.ZG60I16        AIF   (K'&SDBLENVAR LE 0).ZG60I17                       00292700
&ZCVAL          SETC '&ZCVAL SDBLENVAR'         DISALLOWED KEY          00292800
.ZG60I17        AIF   (K'&SDBKEY LE 0).ZG60I18                          00292900
&ZCVAL          SETC '&ZCVAL SDBKEY'            DISALLOWED KEY          00293000
.ZG60I18        AIF   (K'&DATA LE 0).ZG60I19                            00293100
&ZCVAL          SETC '&ZCVAL DATA'              DISALLOWED KEY          00293200
.ZG60I19        AIF   (K'&LEN LE 0).ZG60I20                             00293300
&ZCVAL          SETC '&ZCVAL LEN'               DISALLOWED KEY          00293400
.ZG60I20        AIF   (K'&LENVAR LE 0).ZG60I21                          00293500
&ZCVAL          SETC '&ZCVAL LENVAR'            DISALLOWED KEY          00293600
.ZG60I21        AIF   (K'&CONVERT LE 0).ZG60I22                         00293700
&ZCVAL          SETC '&ZCVAL CONVERT'           DISALLOWED KEY          00293800
.ZG60I22        AIF   (K'&TYPE LE 0).ZG60I23                            00293900
&ZCVAL          SETC '&ZCVAL TYPE'              DISALLOWED KEY          00294000
.ZG60I23        AIF   (K'&S5KEY LE 0).ZG60I24                           00294100
&ZCVAL          SETC '&ZCVAL S5KEY'             DISALLOWED KEY          00294200
.ZG60I24        AIF   (K'&INVOKE LE 0).ZG60I25                          00294300
&ZCVAL          SETC '&ZCVAL INVOKE'            DISALLOWED KEY          00294400
.ZG60I25        AIF   (K'&RETCODE LE 0).ZG60I26                         00294500
&ZCVAL          SETC '&ZCVAL RETCODE'           DISALLOWED KEY          00294600
.ZG60I26        AIF   (K'&RSNCODE LE 0).ZG60I27                         00294700
&ZCVAL          SETC '&ZCVAL RSNCODE'           DISALLOWED KEY          00294800
.ZG60I27        AIF   (K'&ZCVAL LE 0).ZG60J     KEY                     00294900
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00295000
                AIF  (K'&ZCVAL LE 160).ZG60K                            00295100
&ZCVAL          SETC '&ZCVAL'(1,160)                                    00295200
&ZCVAL          SETC '&ZCVAL....'                                       00295300
.ZG60K          ANOP                                                    00295400
&ZMS            SETC  '"RESET'    *KMEIA* MNOTE                         00295500
&ZMS            SETC  '&ZMS."'                                          00295600
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00295700
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00295800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00295900
.ZG60J          ANOP  ,                                                 00296000
.*----------------------------------------------------------------***   00296100
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00296200
                AIF   (N'&SR LE 1).ZG62A        CK NUM                  00296300
&ZMS            SETC  '"SR='      *KPOSA* MNOTE                         00296400
&ZMS            SETC  '&ZMS.&SR"'                                       00296500
&ZMS            SETC  '&ZMS "SR"'                                       00296600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00296700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00296800
.ZG62A          ANOP  ,                                                 00296900
.*-------------------------------------------------------------------   00297000
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00297100
&ZXSR           SETC  'INPUT'     SET IN/OUTPUT                         00297200
&XSR            SETC  '&SR(1)'    SET XVARIABLE                         00297300
                AIF   (N'&SR GT 1).ZG62B        MULTI PARMS             00297400
&XSR            SETC  '&SR'       SET XVARIABLE                         00297500
.ZG62B          AIF   (K'&SR(1) GT 0).ZG62C                             00297600
&ZXSR           SETC  ''          RESET IN/OUTPUT                       00297700
&ZMS            SETC  ' '         *KRQDA*                               00297800
&ZMS            SETC  '&ZMS "SR" KEY AND ITS ARGUMENT'                  00297900
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00298000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00298100
.ZG62C          ANOP  ,                                                 00298200
.*-------------------------------------------------------------------   00298300
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00298400
                AIF   (K'&ZXSR LE 0).ZG62R      NOT I/O                 00298500
                AIF   ('&XSR'(1,1) NE '(').ZG62R                        00298600
&ZCGPR          SETC  '&XSR'(2,K'&XSR-2)                                00298700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG62P                      00298800
                AIF   (K'&ZCGPR GT 2).ZG62Q                             00298900
                AIF   ('&ZCGPR' EQ '0').ZG62Q                           00299000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00299100
                AIF   (T'&ZCGPR NE 'N').ZG62Q   INVALID REG NAME        00299200
.ZG62P          ANOP  ,                                                 00299300
                AIF   (T'&ZCGPR NE 'N').ZG62R   NON NUMERIC             00299400
                AIF   ('&ZCGPR' LT '2').ZG62Q                           00299500
                AIF   ('&ZCGPR' LE '12').ZG62R                          00299600
.ZG62Q          ANOP  ,                                                 00299700
&ZMS            SETC  '"SR='      *KGPRA* MNOTE                         00299800
&ZMS            SETC  '&ZMS.&SR"'                                       00299900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00300000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00300100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00300200
.ZG62R          ANOP  ,                                                 00300300
.*----------------------------------------------------------------***   00300400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00300500
                AIF   (N'&PRIMLEN LE 1).ZG65A   CK NUM                  00300600
&ZMS            SETC  '"PRIMLEN='               *KPOSA* MNOTE           00300700
&ZMS            SETC  '&ZMS.&PRIMLEN"'                                  00300800
&ZMS            SETC  '&ZMS "PRIMLEN"'                                  00300900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00301000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00301100
.ZG65A          ANOP  ,                                                 00301200
.*-------------------------------------------------------------------   00301300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00301400
&ZXPRIMLEN      SETC  'INPUT'     SET IN/OUTPUT                         00301500
&XPRIMLEN       SETC  'OLD_PRIMLEN'                                     00301600
                AIF   (K'&PRIMLEN(1) LE 0).ZG65B  PARM                  00301700
&XPRIMLEN       SETC  '&PRIMLEN(1)'             SET XVARIABLE           00301800
                AIF   (N'&PRIMLEN GT 1).ZG65B   MULTI PARMS             00301900
&XPRIMLEN       SETC  '&PRIMLEN'  SET XVARIABLE                         00302000
.ZG65B          ANOP  ,                                                 00302100
.*-------------------------------------------------------------------   00302200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00302300
                AIF   (K'&ZXPRIMLEN LE 0).ZG65R  NOT I/O                00302400
                AIF   ('&XPRIMLEN' EQ 'OLD_PRIMLEN').ZG65R              00302500
                AIF   ('&XPRIMLEN'(1,1) NE '(').ZG65R                   00302600
&ZCGPR          SETC  '&XPRIMLEN'(2,K'&XPRIMLEN-2)                      00302700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG65P                      00302800
                AIF   (K'&ZCGPR GT 2).ZG65Q                             00302900
                AIF   ('&ZCGPR' EQ '0').ZG65Q                           00303000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00303100
                AIF   (T'&ZCGPR NE 'N').ZG65Q   INVALID REG NAME        00303200
.ZG65P          ANOP  ,                                                 00303300
                AIF   (T'&ZCGPR NE 'N').ZG65R   NON NUMERIC             00303400
                AIF   ('&ZCGPR' LT '2').ZG65Q                           00303500
                AIF   ('&ZCGPR' LE '12').ZG65R                          00303600
.ZG65Q          ANOP  ,                                                 00303700
&ZMS            SETC  '"PRIMLEN='               *KGPRA* MNOTE           00303800
&ZMS            SETC  '&ZMS.&PRIMLEN"'                                  00303900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00304000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00304100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00304200
.ZG65R          ANOP  ,                                                 00304300
.*----------------------------------------------------------------***   00304400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00304500
                AIF   (N'&SECLEN LE 1).ZG68A    CK NUM                  00304600
&ZMS            SETC  '"SECLEN='  *KPOSA* MNOTE                         00304700
&ZMS            SETC  '&ZMS.&SECLEN"'                                   00304800
&ZMS            SETC  '&ZMS "SECLEN"'                                   00304900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00305000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00305100
.ZG68A          ANOP  ,                                                 00305200
.*-------------------------------------------------------------------   00305300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00305400
&ZXSECLEN       SETC  'INPUT'     SET IN/OUTPUT                         00305500
&XSECLEN        SETC  'OLD_SECLEN'                                      00305600
                AIF   (K'&SECLEN(1) LE 0).ZG68B  PARM                   00305700
&XSECLEN        SETC  '&SECLEN(1)'              SET XVARIABLE           00305800
                AIF   (N'&SECLEN GT 1).ZG68B    MULTI PARMS             00305900
&XSECLEN        SETC  '&SECLEN'   SET XVARIABLE                         00306000
.ZG68B          ANOP  ,                                                 00306100
.*-------------------------------------------------------------------   00306200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00306300
                AIF   (K'&ZXSECLEN LE 0).ZG68R  NOT I/O                 00306400
                AIF   ('&XSECLEN' EQ 'OLD_SECLEN').ZG68R                00306500
                AIF   ('&XSECLEN'(1,1) NE '(').ZG68R                    00306600
&ZCGPR          SETC  '&XSECLEN'(2,K'&XSECLEN-2)                        00306700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG68P                      00306800
                AIF   (K'&ZCGPR GT 2).ZG68Q                             00306900
                AIF   ('&ZCGPR' EQ '0').ZG68Q                           00307000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00307100
                AIF   (T'&ZCGPR NE 'N').ZG68Q   INVALID REG NAME        00307200
.ZG68P          ANOP  ,                                                 00307300
                AIF   (T'&ZCGPR NE 'N').ZG68R   NON NUMERIC             00307400
                AIF   ('&ZCGPR' LT '2').ZG68Q                           00307500
                AIF   ('&ZCGPR' LE '12').ZG68R                          00307600
.ZG68Q          ANOP  ,                                                 00307700
&ZMS            SETC  '"SECLEN='  *KGPRA* MNOTE                         00307800
&ZMS            SETC  '&ZMS.&SECLEN"'                                   00307900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00308000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00308100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00308200
.ZG68R          ANOP  ,                                                 00308300
.*----------------------------------------------------------------***   00308400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00308500
                AIF   (N'&VARLEN LE 1).ZG71A    CK NUM                  00308600
&ZMS            SETC  '"VARLEN='  *KPOSA* MNOTE                         00308700
&ZMS            SETC  '&ZMS.&VARLEN"'                                   00308800
&ZMS            SETC  '&ZMS "VARLEN"'                                   00308900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00309000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00309100
.ZG71A          ANOP  ,                                                 00309200
.*-------------------------------------------------------------------   00309300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00309400
&ZXVARLEN       SETC  'INPUT'     SET IN/OUTPUT                         00309500
&XVARLEN        SETC  'OLD_VARLEN'                                      00309600
                AIF   (K'&VARLEN(1) LE 0).ZG71B  PARM                   00309700
&XVARLEN        SETC  '&VARLEN(1)'              SET XVARIABLE           00309800
                AIF   (N'&VARLEN GT 1).ZG71B    MULTI PARMS             00309900
&XVARLEN        SETC  '&VARLEN'   SET XVARIABLE                         00310000
.ZG71B          ANOP  ,                                                 00310100
.*-------------------------------------------------------------------   00310200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00310300
                AIF   (K'&ZXVARLEN LE 0).ZG71R  NOT I/O                 00310400
                AIF   ('&XVARLEN' EQ 'OLD_VARLEN').ZG71R                00310500
                AIF   ('&XVARLEN'(1,1) NE '(').ZG71R                    00310600
&ZCGPR          SETC  '&XVARLEN'(2,K'&XVARLEN-2)                        00310700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG71P                      00310800
                AIF   (K'&ZCGPR GT 2).ZG71Q                             00310900
                AIF   ('&ZCGPR' EQ '0').ZG71Q                           00311000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00311100
                AIF   (T'&ZCGPR NE 'N').ZG71Q   INVALID REG NAME        00311200
.ZG71P          ANOP  ,                                                 00311300
                AIF   (T'&ZCGPR NE 'N').ZG71R   NON NUMERIC             00311400
                AIF   ('&ZCGPR' LT '2').ZG71Q                           00311500
                AIF   ('&ZCGPR' LE '12').ZG71R                          00311600
.ZG71Q          ANOP  ,                                                 00311700
&ZMS            SETC  '"VARLEN='  *KGPRA* MNOTE                         00311800
&ZMS            SETC  '&ZMS.&VARLEN"'                                   00311900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00312000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00312100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00312200
.ZG71R          ANOP  ,                                                 00312300
.*-------------------------------------------------------------------   00312400
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES          00312500
.ZG73           AIF   ('&XTEST' NE 'PRIMARY').ZG108                     00312600
.*-------------------------------------------------------------------   00312700
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS               00312800
&ZCVAL          SETC ''           ERROR KEY FIELD                       00312900
.ZG73I0         AIF   (K'&PRIMLEN LE 0).ZG73I1                          00313000
&ZCVAL          SETC '&ZCVAL PRIMLEN'           DISALLOWED KEY          00313100
.ZG73I1         AIF   (K'&SECLEN LE 0).ZG73I2                           00313200
&ZCVAL          SETC '&ZCVAL SECLEN'            DISALLOWED KEY          00313300
.ZG73I2         AIF   (K'&VARLEN LE 0).ZG73I3                           00313400
&ZCVAL          SETC '&ZCVAL VARLEN'            DISALLOWED KEY          00313500
.ZG73I3         AIF   (K'&ARCHLEV LE 0).ZG73I4                          00313600
&ZCVAL          SETC '&ZCVAL ARCHLEV'           DISALLOWED KEY          00313700
.ZG73I4         AIF   (K'&DAE LE 0).ZG73I5                              00313800
&ZCVAL          SETC '&ZCVAL DAE'               DISALLOWED KEY          00313900
.ZG73I5         AIF   (K'&COMPDSC LE 0).ZG73I6                          00314000
&ZCVAL          SETC '&ZCVAL COMPDSC'           DISALLOWED KEY          00314100
.ZG73I6         AIF   (K'&PROBLEM LE 0).ZG73I7                          00314200
&ZCVAL          SETC '&ZCVAL PROBLEM'           DISALLOWED KEY          00314300
.ZG73I7         AIF   (K'&SERVLEV LE 0).ZG73I8                          00314400
&ZCVAL          SETC '&ZCVAL SERVLEV'           DISALLOWED KEY          00314500
.ZG73I8         AIF   (K'&XNOCONVERTS LE 0).ZG73I9                      00314600
&ZCVAL          SETC '&ZCVAL XNOCONVERTS'       DISALLOWED KEY          00314700
.ZG73I9         AIF   (K'&IBM LE 0).ZG73I10                             00314800
&ZCVAL          SETC '&ZCVAL IBM'               DISALLOWED KEY          00314900
.ZG73I10        AIF   (K'&PROGRAM LE 0).ZG73I11                         00315000
&ZCVAL          SETC '&ZCVAL PROGRAM'           DISALLOWED KEY          00315100
.ZG73I11        AIF   (K'&PROGLEV LE 0).ZG73I12                         00315200
&ZCVAL          SETC '&ZCVAL PROGLEV'           DISALLOWED KEY          00315300
.ZG73I12        AIF   (K'&COMPID LE 0).ZG73I13                          00315400
&ZCVAL          SETC '&ZCVAL COMPID'            DISALLOWED KEY          00315500
.ZG73I13        AIF   (K'&COMPLEV LE 0).ZG73I14                         00315600
&ZCVAL          SETC '&ZCVAL COMPLEV'           DISALLOWED KEY          00315700
.ZG73I14        AIF   (K'&PID LE 0).ZG73I15                             00315800
&ZCVAL          SETC '&ZCVAL PID'               DISALLOWED KEY          00315900
.ZG73I15        AIF   (K'&PIDLEVEL LE 0).ZG73I16                        00316000
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          DISALLOWED KEY          00316100
.ZG73I16        AIF   (K'&SUBSYSTEM LE 0).ZG73I17                       00316200
&ZCVAL          SETC '&ZCVAL SUBSYSTEM'         DISALLOWED KEY          00316300
.ZG73I17        AIF   (K'&S5KEY LE 0).ZG73I18                           00316400
&ZCVAL          SETC '&ZCVAL S5KEY'             DISALLOWED KEY          00316500
.ZG73I18        AIF   (K'&INVOKE LE 0).ZG73I19                          00316600
&ZCVAL          SETC '&ZCVAL INVOKE'            DISALLOWED KEY          00316700
.ZG73I19        AIF   (K'&RETCODE LE 0).ZG73I20                         00316800
&ZCVAL          SETC '&ZCVAL RETCODE'           DISALLOWED KEY          00316900
.ZG73I20        AIF   (K'&RSNCODE LE 0).ZG73I21                         00317000
&ZCVAL          SETC '&ZCVAL RSNCODE'           DISALLOWED KEY          00317100
.ZG73I21        AIF   (K'&ZCVAL LE 0).ZG73J     KEY                     00317200
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00317300
&ZMS            SETC  '"PRIMARY'  *KMEIA* MNOTE                         00317400
&ZMS            SETC  '&ZMS."'                                          00317500
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00317600
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00317700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00317800
.ZG73J          ANOP  ,                                                 00317900
.*----------------------------------------------------------------***   00318000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00318100
                AIF   (N'&SR LE 1).ZG75A        CK NUM                  00318200
&ZMS            SETC  '"SR='      *KPOSA* MNOTE                         00318300
&ZMS            SETC  '&ZMS.&SR"'                                       00318400
&ZMS            SETC  '&ZMS "SR"'                                       00318500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00318600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00318700
.ZG75A          ANOP  ,                                                 00318800
.*-------------------------------------------------------------------   00318900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00319000
&ZXSR           SETC  'INPUT'     SET IN/OUTPUT                         00319100
&XSR            SETC  'SR_IN_R1'                                        00319200
                AIF   (K'&SR(1) LE 0).ZG75B     PARM                    00319300
&XSR            SETC  '&SR(1)'    SET XVARIABLE                         00319400
                AIF   (N'&SR GT 1).ZG75B        MULTI PARMS             00319500
&XSR            SETC  '&SR'       SET XVARIABLE                         00319600
.ZG75B          ANOP  ,                                                 00319700
.*-------------------------------------------------------------------   00319800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00319900
                AIF   (K'&ZXSR LE 0).ZG75R      NOT I/O                 00320000
                AIF   ('&XSR' EQ 'SR_IN_R1').ZG75R                      00320100
                AIF   ('&XSR'(1,1) NE '(').ZG75R                        00320200
&ZCGPR          SETC  '&XSR'(2,K'&XSR-2)                                00320300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG75P                      00320400
                AIF   (K'&ZCGPR GT 2).ZG75Q                             00320500
                AIF   ('&ZCGPR' EQ '0').ZG75Q                           00320600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00320700
                AIF   (T'&ZCGPR NE 'N').ZG75Q   INVALID REG NAME        00320800
.ZG75P          ANOP  ,                                                 00320900
                AIF   (T'&ZCGPR NE 'N').ZG75R   NON NUMERIC             00321000
                AIF   ('&ZCGPR' LT '2').ZG75Q                           00321100
                AIF   ('&ZCGPR' LE '12').ZG75R                          00321200
.ZG75Q          ANOP  ,                                                 00321300
&ZMS            SETC  '"SR='      *KGPRA* MNOTE                         00321400
&ZMS            SETC  '&ZMS.&SR"'                                       00321500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00321600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00321700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00321800
.ZG75R          ANOP  ,                                                 00321900
.*----------------------------------------------------------------***   00322000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00322100
                AIF   (N'&SDBSTRING LE 1).ZG78A  CK NUM                 00322200
&ZMS            SETC  '"SDBSTRING='             *KPOSA* MNOTE           00322300
&ZMS            SETC  '&ZMS.&SDBSTRING"'                                00322400
&ZMS            SETC  '&ZMS "SDBSTRING"'                                00322500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00322600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00322700
.ZG78A          ANOP  ,                                                 00322800
.*-------------------------------------------------------------------   00322900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00323000
&ZXSDBSTRING    SETC  'INPUT'     SET IN/OUTPUT                         00323100
&XSDBSTRING     SETC  'NO_SDB_STRING'                                   00323200
                AIF   (K'&SDBSTRING(1) LE 0).ZG78B  PARM                00323300
&XSDBSTRING     SETC  '&SDBSTRING(1)'           SET XVARIABLE           00323400
                AIF   (N'&SDBSTRING GT 1).ZG78B  MULTI PARMS            00323500
&XSDBSTRING     SETC  '&SDBSTRING'              SET XVARIABLE           00323600
.ZG78B          ANOP  ,                                                 00323700
.*-------------------------------------------------------------------   00323800
.***AG.KCK01 NAME, OPT INPUT, KEYS -GPR NOT ALLOWED                     00323900
                AIF   (K'&ZXSDBSTRING LE 0).ZG78P  NOT I/O              00324000
                AIF   ('&XSDBSTRING' EQ 'NO_SDB_STRING').ZG78P          00324100
                AIF   ('&XSDBSTRING'(1,1) NE '(').ZG78P                 00324200
&ZXSDBSTRING    SETC  ''          RESET IN/OUTPUT                       00324300
&ZMS            SETC  '"SDBSTRING='             *KGPRA* MNOTE           00324400
&ZMS            SETC  '&ZMS.&SDBSTRING"'                                00324500
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00324600
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00324700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00324800
.ZG78P          ANOP  ,                                                 00324900
.*----------------------------------------------------------------***   00325000
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00325100
                AIF   (N'&SDBLEN LE 1).ZG80A    CK NUM                  00325200
&ZMS            SETC  '"SDBLEN='  *KPOSA* MNOTE                         00325300
&ZMS            SETC  '&ZMS.&SDBLEN"'                                   00325400
&ZMS            SETC  '&ZMS "SDBLEN"'                                   00325500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00325600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00325700
.ZG80A          ANOP  ,                                                 00325800
.*-------------------------------------------------------------------   00325900
.***AG.KXVAR17 VALUE, OPT INPUT, KEYS -XVARIABLE                        00326000
&XSDBLEN        SETC  'DEFINED_LENGTH'          SET DEFAULT             00326100
                AIF   (K'&SDBLEN(1) LE 0).ZG80C  PARM                   00326200
&XSDBLEN        SETC  '&SDBLEN(1)'              SET XVARIABLE           00326300
                AIF   (N'&SDBLEN GT 1).ZG80B    MULTI PARMS             00326400
&XSDBLEN        SETC  '&SDBLEN'   SET XVARIABLE                         00326500
.ZG80B          AIF   (K'&SDBSTRING(1) GT 0).ZG80C  KEY                 00326600
&ZMS            SETC  '"SDBLEN'   *KDEPA* MNOTE                         00326700
&ZMS            SETC  '&ZMS.=&SDBLEN"'                                  00326800
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00326900
&ZMS            SETC  '&ZMS '                                           00327000
&ZMS            SETC  '&ZMS "SDBSTRING"'                                00327100
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00327200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00327300
.ZG80C          ANOP  ,                                                 00327400
&ZXSDBLEN       SETC  'INPUT'     SET IN/OUTPUT                         00327500
.*-------------------------------------------------------------------   00327600
.***AG.KCK02 VALUE, OPT INPUT, KEYS -GPR OUT OF RANGE                   00327700
                AIF   (K'&ZXSDBLEN LE 0).ZG80R  NOT I/O                 00327800
                AIF   ('&XSDBLEN' EQ 'DEFINED_LENGTH').ZG80R            00327900
                AIF   ('&XSDBLEN'(1,1) NE '(').ZG80R                    00328000
&ZCGPR          SETC  '&XSDBLEN'(2,K'&XSDBLEN-2)                        00328100
                AIF   ('&ZCGPR'(1,1) NE '0').ZG80P                      00328200
                AIF   (K'&ZCGPR GT 2).ZG80Q                             00328300
                AIF   ('&ZCGPR' EQ '0').ZG80Q                           00328400
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00328500
                AIF   (T'&ZCGPR NE 'N').ZG80Q   INVALID REG NAME        00328600
.ZG80P          ANOP  ,                                                 00328700
                AIF   (T'&ZCGPR NE 'N').ZG80R   NON NUMERIC             00328800
                AIF   ('&ZCGPR' LT '2').ZG80Q                           00328900
                AIF   ('&ZCGPR' LE '12').ZG80R                          00329000
.ZG80Q          ANOP  ,                                                 00329100
&ZMS            SETC  '"SDBLEN='  *KGPRA* MNOTE                         00329200
&ZMS            SETC  '&ZMS.&SDBLEN"'                                   00329300
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00329400
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00329500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00329600
.ZG80R          ANOP  ,                                                 00329700
.*-------------------------------------------------------------------   00329800
.***AG.KCK07 VALUE, OPT INPUT, KEYS -KMG RANGE                          00329900
                AIF   (K'&ZXSDBLEN LE 0).ZG80T  NOT I/O                 00330000
                AIF   ('&XSDBLEN' EQ 'DEFINED_LENGTH').ZG80T            00330100
                AIF   ('&XSDBLEN'(1,1) EQ '(').ZG80T  IN GPR            00330200
                AIF   (T'&XSDBLEN NE 'N').ZG80S  NUMERIC ERR            00330300
&ZASIZ          SETA  &XSDBLEN    CONVERT                               00330400
                AIF   (&ZASIZ LT 1).ZG80S       TOO LOW                 00330500
                AIF   (&ZASIZ LE 256).ZG80T     NOT HIGH                00330600
.ZG80S          ANOP  ,                                                 00330700
&ZXSDBLEN       SETC  ''          RESET IN/OUTPUT                       00330800
&ZMS            SETC  '"SDBLEN='  *KRNGA* MNOTE                         00330900
&ZMS            SETC  '&ZMS.&SDBLEN"'                                   00331000
&ZMS            SETC  '&ZMS THE RANGE IS "1-256"'                       00331100
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00331200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00331300
.ZG80T          ANOP  ,                                                 00331400
.*----------------------------------------------------------------***   00331500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00331600
                AIF   (N'&SDBLENVAR LE 1).ZG83A  CK NUM                 00331700
&ZMS            SETC  '"SDBLENVAR='             *KPOSA* MNOTE           00331800
&ZMS            SETC  '&ZMS.&SDBLENVAR"'                                00331900
&ZMS            SETC  '&ZMS "SDBLENVAR"'                                00332000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00332100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00332200
.ZG83A          ANOP  ,                                                 00332300
.*-------------------------------------------------------------------   00332400
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00332500
&XSDBLENVAR     SETC  'DEFINED_LENGTH'          SET DEFAULT             00332600
                AIF   (K'&SDBLENVAR(1) LE 0).ZG83C  PARM                00332700
&XSDBLENVAR     SETC  '&SDBLENVAR(1)'           SET XVARIABLE           00332800
                AIF   (N'&SDBLENVAR GT 1).ZG83B  MULTI PARMS            00332900
&XSDBLENVAR     SETC  '&SDBLENVAR'              SET XVARIABLE           00333000
.ZG83B          AIF   (K'&SDBSTRING(1) GT 0).ZG83C  KEY                 00333100
&ZMS            SETC  '"SDBLENVAR'              *KDEPA* MNOTE           00333200
&ZMS            SETC  '&ZMS.=&SDBLENVAR"'                               00333300
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00333400
&ZMS            SETC  '&ZMS '                                           00333500
&ZMS            SETC  '&ZMS "SDBSTRING"'                                00333600
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00333700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00333800
.ZG83C          ANOP  ,                                                 00333900
&ZXSDBLENVAR    SETC  'INPUT'     SET IN/OUTPUT                         00334000
.*-------------------------------------------------------------------   00334100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00334200
                AIF   (K'&ZXSDBLENVAR LE 0).ZG83R  NOT I/O              00334300
                AIF   ('&XSDBLENVAR' EQ 'DEFINED_LENGTH').ZG83R         00334400
                AIF   ('&XSDBLENVAR'(1,1) NE '(').ZG83R                 00334500
&ZCGPR          SETC  '&XSDBLENVAR'(2,K'&XSDBLENVAR-2)                  00334600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG83P                      00334700
                AIF   (K'&ZCGPR GT 2).ZG83Q                             00334800
                AIF   ('&ZCGPR' EQ '0').ZG83Q                           00334900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00335000
                AIF   (T'&ZCGPR NE 'N').ZG83Q   INVALID REG NAME        00335100
.ZG83P          ANOP  ,                                                 00335200
                AIF   (T'&ZCGPR NE 'N').ZG83R   NON NUMERIC             00335300
                AIF   ('&ZCGPR' LT '2').ZG83Q                           00335400
                AIF   ('&ZCGPR' LE '12').ZG83R                          00335500
.ZG83Q          ANOP  ,                                                 00335600
&ZMS            SETC  '"SDBLENVAR='             *KGPRA* MNOTE           00335700
&ZMS            SETC  '&ZMS.&SDBLENVAR"'                                00335800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00335900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00336000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00336100
.ZG83R          ANOP  ,                                                 00336200
.*----------------------------------------------------------------***   00336300
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00336400
                AIF   (N'&SDBKEY LE 1).ZG87A    CK NUM                  00336500
&ZMS            SETC  '"SDBKEY='  *KPOSA* MNOTE                         00336600
&ZMS            SETC  '&ZMS.&SDBKEY"'                                   00336700
&ZMS            SETC  '&ZMS "SDBKEY"'                                   00336800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00336900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00337000
.ZG87A          ANOP  ,                                                 00337100
.*-------------------------------------------------------------------   00337200
.***AG.KXVAR13 VALUE, OPT INPUT, KEYS -XVARIABLE                        00337300
&ZXSDBKEY       SETC  'INPUT'     SET IN/OUTPUT                         00337400
&XSDBKEY        SETC  'NO_SDBKEY'                                       00337500
                AIF   (K'&SDBKEY(1) LE 0).ZG87B  PARM                   00337600
&XSDBKEY        SETC  '&SDBKEY(1)'              SET XVARIABLE           00337700
                AIF   (N'&SDBKEY GT 1).ZG87B    MULTI PARMS             00337800
&XSDBKEY        SETC  '&SDBKEY'   SET XVARIABLE                         00337900
.ZG87B          ANOP  ,                                                 00338000
.*-------------------------------------------------------------------   00338100
.***AG.KCK01 VALUE, OPT INPUT, KEYS -GPR NOT ALLOWED                    00338200
                AIF   (K'&ZXSDBKEY LE 0).ZG87P  NOT I/O                 00338300
                AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').ZG87P                 00338400
                AIF   ('&XSDBKEY'(1,1) NE '(').ZG87P                    00338500
&ZXSDBKEY       SETC  ''          RESET IN/OUTPUT                       00338600
&ZMS            SETC  '"SDBKEY='  *KGPRA* MNOTE                         00338700
&ZMS            SETC  '&ZMS.&SDBKEY"'                                   00338800
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00338900
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00339000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00339100
.ZG87P          ANOP  ,                                                 00339200
.*-------------------------------------------------------------------   00339300
.***AG.KCK03 VALUE, OPT INPUT, KEYS -CHARACTER LENGTH                   00339400
                AIF   (K'&ZXSDBKEY LE 0).ZG87S  NOT I/O                 00339500
                AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').ZG87S                 00339600
                AIF   (K'&XSDBKEY LE 256).ZG87S  LNG OK                 00339700
&ZXSDBKEY       SETC  ''          RESET IN/OUTPUT                       00339800
&ZMS            SETC  '"SDBKEY='  *KLNGA* MNOTE                         00339900
&ZMS            SETC  '&ZMS.&SDBKEY"'                                   00340000
&ZMS            SETC  '&ZMS ARGUMENT 1 EXCEEDS THE MAXIMUM'             00340100
                MNOTE 8,' &ZMS LENGTH OF 256 CHARACTERS.'               00340200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00340300
.ZG87S          ANOP  ,                                                 00340400
.*----------------------------------------------------------------***   00340500
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00340600
                AIF   (N'&DATA LE 1).ZG89A      CK NUM                  00340700
&ZMS            SETC  '"DATA='    *KPOSA* MNOTE                         00340800
&ZMS            SETC  '&ZMS.&DATA"'                                     00340900
&ZMS            SETC  '&ZMS "DATA"'                                     00341000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00341100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00341200
.ZG89A          ANOP  ,                                                 00341300
.*-------------------------------------------------------------------   00341400
.***AG.KXVAR09 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00341500
&ZXDATA         SETC  'INPUT'     SET IN/OUTPUT                         00341600
&XDATA          SETC  '&DATA(1)'  SET XVARIABLE                         00341700
                AIF   (N'&DATA GT 1).ZG89B      MULTI PARMS             00341800
&XDATA          SETC  '&DATA'     SET XVARIABLE                         00341900
.ZG89B          AIF   (K'&SDBKEY(1) GT 0).ZG89C  KEY                    00342000
                AIF   (K'&DATA(1) LE 0).ZG89D   PARM                    00342100
&ZMS            SETC  '"DATA'     *KDEPA* MNOTE                         00342200
&ZMS            SETC  '&ZMS.=&DATA"'                                    00342300
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00342400
&ZMS            SETC  '&ZMS '                                           00342500
&ZMS            SETC  '&ZMS "SDBKEY"'                                   00342600
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00342700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00342800
                AGO   .ZG89E                                            00342900
.*                                                                      00343000
.ZG89C          AIF   (K'&DATA(1) GT 0).ZG89E   PARM                    00343100
&ZXDATA         SETC  ''          RESET IN/OUTPUT                       00343200
&ZMS            SETC  ' '         *KRQDA*                               00343300
&ZMS            SETC  '&ZMS "DATA" KEY AND ITS ARGUMENT'                00343400
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00343500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00343600
.ZG89D          ANOP  ,                                                 00343700
&XDATA          SETC  '0'         SET DEFAULT                           00343800
.ZG89E          ANOP  ,                                                 00343900
.*-------------------------------------------------------------------   00344000
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00344100
                AIF   (K'&ZXDATA LE 0).ZG89R    NOT I/O                 00344200
                AIF   ('&XDATA'(1,1) NE '(').ZG89R                      00344300
&ZCGPR          SETC  '&XDATA'(2,K'&XDATA-2)                            00344400
                AIF   ('&ZCGPR'(1,1) NE '0').ZG89P                      00344500
                AIF   (K'&ZCGPR GT 2).ZG89Q                             00344600
                AIF   ('&ZCGPR' EQ '0').ZG89Q                           00344700
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00344800
                AIF   (T'&ZCGPR NE 'N').ZG89Q   INVALID REG NAME        00344900
.ZG89P          ANOP  ,                                                 00345000
                AIF   (T'&ZCGPR NE 'N').ZG89R   NON NUMERIC             00345100
                AIF   ('&ZCGPR' LT '2').ZG89Q                           00345200
                AIF   ('&ZCGPR' LE '12').ZG89R                          00345300
.ZG89Q          ANOP  ,                                                 00345400
&ZMS            SETC  '"DATA='    *KGPRA* MNOTE                         00345500
&ZMS            SETC  '&ZMS.&DATA"'                                     00345600
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00345700
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00345800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00345900
.ZG89R          ANOP  ,                                                 00346000
.*----------------------------------------------------------------***   00346100
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00346200
                AIF   (N'&LEN LE 1).ZG91A       CK NUM                  00346300
&ZMS            SETC  '"LEN='     *KPOSA* MNOTE                         00346400
&ZMS            SETC  '&ZMS.&LEN"'                                      00346500
&ZMS            SETC  '&ZMS "LEN"'                                      00346600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00346700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00346800
.ZG91A          ANOP  ,                                                 00346900
.*-------------------------------------------------------------------   00347000
.***AG.KXVAR17 VALUE, OPT INPUT, KEYS -XVARIABLE                        00347100
&XLEN           SETC  'DEFINED_LENGTH'          SET DEFAULT             00347200
                AIF   (K'&LEN(1) LE 0).ZG91C    PARM                    00347300
&XLEN           SETC  '&LEN(1)'   SET XVARIABLE                         00347400
                AIF   (N'&LEN GT 1).ZG91B       MULTI PARMS             00347500
&XLEN           SETC  '&LEN'      SET XVARIABLE                         00347600
.ZG91B          AIF   (K'&DATA(1) GT 0).ZG91C   KEY                     00347700
&ZMS            SETC  '"LEN'      *KDEPA* MNOTE                         00347800
&ZMS            SETC  '&ZMS.=&LEN"'                                     00347900
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00348000
&ZMS            SETC  '&ZMS '                                           00348100
&ZMS            SETC  '&ZMS "DATA"'                                     00348200
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00348300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00348400
.ZG91C          ANOP  ,                                                 00348500
&ZXLEN          SETC  'INPUT'     SET IN/OUTPUT                         00348600
.*-------------------------------------------------------------------   00348700
.***AG.KCK02 VALUE, OPT INPUT, KEYS -GPR OUT OF RANGE                   00348800
                AIF   (K'&ZXLEN LE 0).ZG91R     NOT I/O                 00348900
                AIF   ('&XLEN' EQ 'DEFINED_LENGTH').ZG91R               00349000
                AIF   ('&XLEN'(1,1) NE '(').ZG91R                       00349100
&ZCGPR          SETC  '&XLEN'(2,K'&XLEN-2)                              00349200
                AIF   ('&ZCGPR'(1,1) NE '0').ZG91P                      00349300
                AIF   (K'&ZCGPR GT 2).ZG91Q                             00349400
                AIF   ('&ZCGPR' EQ '0').ZG91Q                           00349500
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00349600
                AIF   (T'&ZCGPR NE 'N').ZG91Q   INVALID REG NAME        00349700
.ZG91P          ANOP  ,                                                 00349800
                AIF   (T'&ZCGPR NE 'N').ZG91R   NON NUMERIC             00349900
                AIF   ('&ZCGPR' LT '2').ZG91Q                           00350000
                AIF   ('&ZCGPR' LE '12').ZG91R                          00350100
.ZG91Q          ANOP  ,                                                 00350200
&ZMS            SETC  '"LEN='     *KGPRA* MNOTE                         00350300
&ZMS            SETC  '&ZMS.&LEN"'                                      00350400
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00350500
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00350600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00350700
.ZG91R          ANOP  ,                                                 00350800
.*-------------------------------------------------------------------   00350900
.***AG.KCK07 VALUE, OPT INPUT, KEYS -KMG RANGE                          00351000
                AIF   (K'&ZXLEN LE 0).ZG91T     NOT I/O                 00351100
                AIF   ('&XLEN' EQ 'DEFINED_LENGTH').ZG91T               00351200
                AIF   ('&XLEN'(1,1) EQ '(').ZG91T  IN GPR               00351300
                AIF   (T'&XLEN NE 'N').ZG91S    NUMERIC ERR             00351400
&ZASIZ          SETA  &XLEN       CONVERT                               00351500
                AIF   (&ZASIZ LT 1).ZG91S       TOO LOW                 00351600
                AIF   (&ZASIZ LE 13).ZG91T      NOT HIGH                00351700
.ZG91S          ANOP  ,                                                 00351800
&ZXLEN          SETC  ''          RESET IN/OUTPUT                       00351900
&ZMS            SETC  '"LEN='     *KRNGA* MNOTE                         00352000
&ZMS            SETC  '&ZMS.&LEN"'                                      00352100
&ZMS            SETC  '&ZMS THE RANGE IS "1-13"'                        00352200
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00352300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00352400
.ZG91T          ANOP  ,                                                 00352500
.*----------------------------------------------------------------***   00352600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00352700
                AIF   (N'&LENVAR LE 1).ZG94A    CK NUM                  00352800
&ZMS            SETC  '"LENVAR='  *KPOSA* MNOTE                         00352900
&ZMS            SETC  '&ZMS.&LENVAR"'                                   00353000
&ZMS            SETC  '&ZMS "LENVAR"'                                   00353100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00353200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00353300
.ZG94A          ANOP  ,                                                 00353400
.*-------------------------------------------------------------------   00353500
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00353600
&XLENVAR        SETC  'DEFINED_LENGTH'          SET DEFAULT             00353700
                AIF   (K'&LENVAR(1) LE 0).ZG94C  PARM                   00353800
&XLENVAR        SETC  '&LENVAR(1)'              SET XVARIABLE           00353900
                AIF   (N'&LENVAR GT 1).ZG94B    MULTI PARMS             00354000
&XLENVAR        SETC  '&LENVAR'   SET XVARIABLE                         00354100
.ZG94B          AIF   (K'&DATA(1) GT 0).ZG94C   KEY                     00354200
&ZMS            SETC  '"LENVAR'   *KDEPA* MNOTE                         00354300
&ZMS            SETC  '&ZMS.=&LENVAR"'                                  00354400
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00354500
&ZMS            SETC  '&ZMS '                                           00354600
&ZMS            SETC  '&ZMS "DATA"'                                     00354700
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00354800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00354900
.ZG94C          ANOP  ,                                                 00355000
&ZXLENVAR       SETC  'INPUT'     SET IN/OUTPUT                         00355100
.*-------------------------------------------------------------------   00355200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00355300
                AIF   (K'&ZXLENVAR LE 0).ZG94R  NOT I/O                 00355400
                AIF   ('&XLENVAR' EQ 'DEFINED_LENGTH').ZG94R            00355500
                AIF   ('&XLENVAR'(1,1) NE '(').ZG94R                    00355600
&ZCGPR          SETC  '&XLENVAR'(2,K'&XLENVAR-2)                        00355700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG94P                      00355800
                AIF   (K'&ZCGPR GT 2).ZG94Q                             00355900
                AIF   ('&ZCGPR' EQ '0').ZG94Q                           00356000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00356100
                AIF   (T'&ZCGPR NE 'N').ZG94Q   INVALID REG NAME        00356200
.ZG94P          ANOP  ,                                                 00356300
                AIF   (T'&ZCGPR NE 'N').ZG94R   NON NUMERIC             00356400
                AIF   ('&ZCGPR' LT '2').ZG94Q                           00356500
                AIF   ('&ZCGPR' LE '12').ZG94R                          00356600
.ZG94Q          ANOP  ,                                                 00356700
&ZMS            SETC  '"LENVAR='  *KGPRA* MNOTE                         00356800
&ZMS            SETC  '&ZMS.&LENVAR"'                                   00356900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00357000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00357100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00357200
.ZG94R          ANOP  ,                                                 00357300
.*----------------------------------------------------------------***   00357400
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00357500
                AIF   (N'&CONVERT LE 1).ZG97A   CK NUM                  00357600
&ZMS            SETC  '"CONVERT='               *KPOSA* MNOTE           00357700
&ZMS            SETC  '&ZMS.&CONVERT"'                                  00357800
&ZMS            SETC  '&ZMS "CONVERT"'                                  00357900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00358000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00358100
.ZG97A          ANOP  ,                                                 00358200
.*-------------------------------------------------------------------   00358300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00358400
&XCONVERT       SETC  ''          INITIALIZE XVARIABLE                  00358500
.ZG98A   AIF   ('&CONVERT(1)' NE 'NO').ZG99A                            00358600
&XCONVERT       SETC  'NO'        SET KEYWORD                           00358700
.*-------------------------------------------------------------------   00358800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00358900
.ZG99A   AIF   ('&CONVERT(1)' NE 'YES').ZG100A                          00359000
&XCONVERT       SETC  'YES'       SET KEYWORD                           00359100
.*-------------------------------------------------------------------   00359200
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00359300
.ZG100A         AIF   (K'&XCONVERT GT 0).ZG100C  KEYWORD                00359400
                AIF   (K'&CONVERT(1) LE 0).ZG100B                       00359500
&ZMS            SETC  '"CONVERT='               *KUKWA* MNOTE           00359600
&ZMS            SETC  '&ZMS.&CONVERT"'                                  00359700
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00359800
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00359900
&ZMS            SETC  '&ZMS "NO"'               VALID KEYWORD           00360000
&ZMS            SETC  '&ZMS OR "YES".'          VALID KEYWORD           00360100
                MNOTE 8,' &ZMS '                                        00360200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00360300
.ZG100B         ANOP  ,                                                 00360400
&XCONVERT       SETC  'NO'        SET DEFAULT KEYWORD                   00360500
.ZG100C         ANOP  ,                                                 00360600
&ZXCONVERT      SETC  'INPUT'     SET IN/OUTPUT                         00360700
.*-------------------------------------------------------------------   00360800
.***AG.KKWRD06 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00360900
                AIF   (K'&DATA(1) GT 0).ZG100D  KEY                     00361000
                AIF   (K'&CONVERT(1) LE 0).ZG100D  PARM                 00361100
&ZMS            SETC  '"CONVERT'  *KDEPA* MNOTE                         00361200
&ZMS            SETC  '&ZMS.=&CONVERT"'                                 00361300
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00361400
&ZMS            SETC  '&ZMS '                                           00361500
&ZMS            SETC  '&ZMS "DATA"'                                     00361600
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00361700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00361800
.ZG100D         ANOP  ,                                                 00361900
.*----------------------------------------------------------------***   00362000
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00362100
                AIF   (N'&TYPE LE 1).ZG104A     CK NUM                  00362200
&ZMS            SETC  '"TYPE='    *KPOSA* MNOTE                         00362300
&ZMS            SETC  '&ZMS.&TYPE"'                                     00362400
&ZMS            SETC  '&ZMS "TYPE"'                                     00362500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00362600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00362700
.ZG104A         ANOP  ,                                                 00362800
.*-------------------------------------------------------------------   00362900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00363000
&XTYPE          SETC  ''          INITIALIZE XVARIABLE                  00363100
.ZG105A   AIF   ('&TYPE(1)' NE 'TEST').ZG106A                           00363200
&XTYPE          SETC  'TEST'      SET KEYWORD                           00363300
.*-------------------------------------------------------------------   00363400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00363500
.ZG106A   AIF   ('&TYPE(1)' NE 'NOTEST').ZG107A                         00363600
&XTYPE          SETC  'NOTEST'    SET KEYWORD                           00363700
.*-------------------------------------------------------------------   00363800
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00363900
.ZG107A         AIF   (K'&XTYPE GT 0).ZG107C    KEYWORD                 00364000
                AIF   (K'&TYPE(1) LE 0).ZG107B                          00364100
&ZMS            SETC  '"TYPE='    *KUKWA* MNOTE                         00364200
&ZMS            SETC  '&ZMS.&TYPE"'                                     00364300
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00364400
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00364500
&ZMS            SETC  '&ZMS "TEST"'             VALID KEYWORD           00364600
&ZMS            SETC  '&ZMS OR "NOTEST".'       VALID KEYWORD           00364700
                MNOTE 8,' &ZMS '                                        00364800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00364900
.ZG107B         ANOP  ,                                                 00365000
&XTYPE          SETC  'TEST'      SET DEFAULT KEYWORD                   00365100
.ZG107C         ANOP  ,                                                 00365200
&ZXTYPE         SETC  'INPUT'     SET IN/OUTPUT                         00365300
.*-------------------------------------------------------------------   00365400
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES          00365500
.ZG108          AIF   ('&XTEST' NE 'SECONDARY').ZG143                   00365600
.*-------------------------------------------------------------------   00365700
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS               00365800
&ZCVAL          SETC ''           ERROR KEY FIELD                       00365900
.ZG108I0        AIF   (K'&PRIMLEN LE 0).ZG108I1                         00366000
&ZCVAL          SETC '&ZCVAL PRIMLEN'           DISALLOWED KEY          00366100
.ZG108I1        AIF   (K'&SECLEN LE 0).ZG108I2                          00366200
&ZCVAL          SETC '&ZCVAL SECLEN'            DISALLOWED KEY          00366300
.ZG108I2        AIF   (K'&VARLEN LE 0).ZG108I3                          00366400
&ZCVAL          SETC '&ZCVAL VARLEN'            DISALLOWED KEY          00366500
.ZG108I3        AIF   (K'&ARCHLEV LE 0).ZG108I4                         00366600
&ZCVAL          SETC '&ZCVAL ARCHLEV'           DISALLOWED KEY          00366700
.ZG108I4        AIF   (K'&DAE LE 0).ZG108I5                             00366800
&ZCVAL          SETC '&ZCVAL DAE'               DISALLOWED KEY          00366900
.ZG108I5        AIF   (K'&COMPDSC LE 0).ZG108I6                         00367000
&ZCVAL          SETC '&ZCVAL COMPDSC'           DISALLOWED KEY          00367100
.ZG108I6        AIF   (K'&PROBLEM LE 0).ZG108I7                         00367200
&ZCVAL          SETC '&ZCVAL PROBLEM'           DISALLOWED KEY          00367300
.ZG108I7        AIF   (K'&SERVLEV LE 0).ZG108I8                         00367400
&ZCVAL          SETC '&ZCVAL SERVLEV'           DISALLOWED KEY          00367500
.ZG108I8        AIF   (K'&XNOCONVERTS LE 0).ZG108I9                     00367600
&ZCVAL          SETC '&ZCVAL XNOCONVERTS'       DISALLOWED KEY          00367700
.ZG108I9        AIF   (K'&IBM LE 0).ZG108I10                            00367800
&ZCVAL          SETC '&ZCVAL IBM'               DISALLOWED KEY          00367900
.ZG108I10       AIF   (K'&PROGRAM LE 0).ZG108I11                        00368000
&ZCVAL          SETC '&ZCVAL PROGRAM'           DISALLOWED KEY          00368100
.ZG108I11       AIF   (K'&PROGLEV LE 0).ZG108I12                        00368200
&ZCVAL          SETC '&ZCVAL PROGLEV'           DISALLOWED KEY          00368300
.ZG108I12       AIF   (K'&COMPID LE 0).ZG108I13                         00368400
&ZCVAL          SETC '&ZCVAL COMPID'            DISALLOWED KEY          00368500
.ZG108I13       AIF   (K'&COMPLEV LE 0).ZG108I14                        00368600
&ZCVAL          SETC '&ZCVAL COMPLEV'           DISALLOWED KEY          00368700
.ZG108I14       AIF   (K'&PID LE 0).ZG108I15                            00368800
&ZCVAL          SETC '&ZCVAL PID'               DISALLOWED KEY          00368900
.ZG108I15       AIF   (K'&PIDLEVEL LE 0).ZG108I16                       00369000
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          DISALLOWED KEY          00369100
.ZG108I16       AIF   (K'&SUBSYSTEM LE 0).ZG108I17                      00369200
&ZCVAL          SETC '&ZCVAL SUBSYSTEM'         DISALLOWED KEY          00369300
.ZG108I17       AIF   (K'&S5KEY LE 0).ZG108I18                          00369400
&ZCVAL          SETC '&ZCVAL S5KEY'             DISALLOWED KEY          00369500
.ZG108I18       AIF   (K'&INVOKE LE 0).ZG108I19                         00369600
&ZCVAL          SETC '&ZCVAL INVOKE'            DISALLOWED KEY          00369700
.ZG108I19       AIF   (K'&RETCODE LE 0).ZG108I20                        00369800
&ZCVAL          SETC '&ZCVAL RETCODE'           DISALLOWED KEY          00369900
.ZG108I20       AIF   (K'&RSNCODE LE 0).ZG108I21                        00370000
&ZCVAL          SETC '&ZCVAL RSNCODE'           DISALLOWED KEY          00370100
.ZG108I21       AIF   (K'&ZCVAL LE 0).ZG108J    KEY                     00370200
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00370300
&ZMS            SETC  '"SECONDARY'              *KMEIA* MNOTE           00370400
&ZMS            SETC  '&ZMS."'                                          00370500
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00370600
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00370700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00370800
.ZG108J         ANOP  ,                                                 00370900
.*----------------------------------------------------------------***   00371000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00371100
                AIF   (N'&SR LE 1).ZG110A       CK NUM                  00371200
&ZMS            SETC  '"SR='      *KPOSA* MNOTE                         00371300
&ZMS            SETC  '&ZMS.&SR"'                                       00371400
&ZMS            SETC  '&ZMS "SR"'                                       00371500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00371600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00371700
.ZG110A         ANOP  ,                                                 00371800
.*-------------------------------------------------------------------   00371900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00372000
&ZXSR           SETC  'INPUT'     SET IN/OUTPUT                         00372100
&XSR            SETC  'SR_IN_R1'                                        00372200
                AIF   (K'&SR(1) LE 0).ZG110B    PARM                    00372300
&XSR            SETC  '&SR(1)'    SET XVARIABLE                         00372400
                AIF   (N'&SR GT 1).ZG110B       MULTI PARMS             00372500
&XSR            SETC  '&SR'       SET XVARIABLE                         00372600
.ZG110B         ANOP  ,                                                 00372700
.*-------------------------------------------------------------------   00372800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00372900
                AIF   (K'&ZXSR LE 0).ZG110R     NOT I/O                 00373000
                AIF   ('&XSR' EQ 'SR_IN_R1').ZG110R                     00373100
                AIF   ('&XSR'(1,1) NE '(').ZG110R                       00373200
&ZCGPR          SETC  '&XSR'(2,K'&XSR-2)                                00373300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG110P                     00373400
                AIF   (K'&ZCGPR GT 2).ZG110Q                            00373500
                AIF   ('&ZCGPR' EQ '0').ZG110Q                          00373600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00373700
                AIF   (T'&ZCGPR NE 'N').ZG110Q  INVALID REG NAME        00373800
.ZG110P         ANOP  ,                                                 00373900
                AIF   (T'&ZCGPR NE 'N').ZG110R  NON NUMERIC             00374000
                AIF   ('&ZCGPR' LT '2').ZG110Q                          00374100
                AIF   ('&ZCGPR' LE '12').ZG110R                         00374200
.ZG110Q         ANOP  ,                                                 00374300
&ZMS            SETC  '"SR='      *KGPRA* MNOTE                         00374400
&ZMS            SETC  '&ZMS.&SR"'                                       00374500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00374600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00374700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00374800
.ZG110R         ANOP  ,                                                 00374900
.*----------------------------------------------------------------***   00375000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00375100
                AIF   (N'&SDBSTRING LE 1).ZG113A  CK NUM                00375200
&ZMS            SETC  '"SDBSTRING='             *KPOSA* MNOTE           00375300
&ZMS            SETC  '&ZMS.&SDBSTRING"'                                00375400
&ZMS            SETC  '&ZMS "SDBSTRING"'                                00375500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00375600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00375700
.ZG113A         ANOP  ,                                                 00375800
.*-------------------------------------------------------------------   00375900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00376000
&ZXSDBSTRING    SETC  'INPUT'     SET IN/OUTPUT                         00376100
&XSDBSTRING     SETC  'NO_SDB_STRING'                                   00376200
                AIF   (K'&SDBSTRING(1) LE 0).ZG113B  PARM               00376300
&XSDBSTRING     SETC  '&SDBSTRING(1)'           SET XVARIABLE           00376400
                AIF   (N'&SDBSTRING GT 1).ZG113B  MULTI PARMS           00376500
&XSDBSTRING     SETC  '&SDBSTRING'              SET XVARIABLE           00376600
.ZG113B         ANOP  ,                                                 00376700
.*-------------------------------------------------------------------   00376800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00376900
                AIF   (K'&ZXSDBSTRING LE 0).ZG113R  NOT I/O             00377000
                AIF   ('&XSDBSTRING' EQ 'NO_SDB_STRING').ZG113R         00377100
                AIF   ('&XSDBSTRING'(1,1) NE '(').ZG113R                00377200
&ZCGPR          SETC  '&XSDBSTRING'(2,K'&XSDBSTRING-2)                  00377300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG113P                     00377400
                AIF   (K'&ZCGPR GT 2).ZG113Q                            00377500
                AIF   ('&ZCGPR' EQ '0').ZG113Q                          00377600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00377700
                AIF   (T'&ZCGPR NE 'N').ZG113Q  INVALID REG NAME        00377800
.ZG113P         ANOP  ,                                                 00377900
                AIF   (T'&ZCGPR NE 'N').ZG113R  NON NUMERIC             00378000
                AIF   ('&ZCGPR' LT '2').ZG113Q                          00378100
                AIF   ('&ZCGPR' LE '12').ZG113R                         00378200
.ZG113Q         ANOP  ,                                                 00378300
&ZMS            SETC  '"SDBSTRING='             *KGPRA* MNOTE           00378400
&ZMS            SETC  '&ZMS.&SDBSTRING"'                                00378500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00378600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00378700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00378800
.ZG113R         ANOP  ,                                                 00378900
.*----------------------------------------------------------------***   00379000
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00379100
                AIF   (N'&SDBLEN LE 1).ZG115A   CK NUM                  00379200
&ZMS            SETC  '"SDBLEN='  *KPOSA* MNOTE                         00379300
&ZMS            SETC  '&ZMS.&SDBLEN"'                                   00379400
&ZMS            SETC  '&ZMS "SDBLEN"'                                   00379500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00379600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00379700
.ZG115A         ANOP  ,                                                 00379800
.*-------------------------------------------------------------------   00379900
.***AG.KXVAR17 VALUE, OPT INPUT, KEYS -XVARIABLE                        00380000
&XSDBLEN        SETC  'DEFINED_LENGTH'          SET DEFAULT             00380100
                AIF   (K'&SDBLEN(1) LE 0).ZG115C  PARM                  00380200
&XSDBLEN        SETC  '&SDBLEN(1)'              SET XVARIABLE           00380300
                AIF   (N'&SDBLEN GT 1).ZG115B   MULTI PARMS             00380400
&XSDBLEN        SETC  '&SDBLEN'   SET XVARIABLE                         00380500
.ZG115B         AIF   (K'&SDBSTRING(1) GT 0).ZG115C  KEY                00380600
&ZMS            SETC  '"SDBLEN'   *KDEPA* MNOTE                         00380700
&ZMS            SETC  '&ZMS.=&SDBLEN"'                                  00380800
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00380900
&ZMS            SETC  '&ZMS '                                           00381000
&ZMS            SETC  '&ZMS "SDBSTRING"'                                00381100
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00381200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00381300
.ZG115C         ANOP  ,                                                 00381400
&ZXSDBLEN       SETC  'INPUT'     SET IN/OUTPUT                         00381500
.*-------------------------------------------------------------------   00381600
.***AG.KCK02 VALUE, OPT INPUT, KEYS -GPR OUT OF RANGE                   00381700
                AIF   (K'&ZXSDBLEN LE 0).ZG115R  NOT I/O                00381800
                AIF   ('&XSDBLEN' EQ 'DEFINED_LENGTH').ZG115R           00381900
                AIF   ('&XSDBLEN'(1,1) NE '(').ZG115R                   00382000
&ZCGPR          SETC  '&XSDBLEN'(2,K'&XSDBLEN-2)                        00382100
                AIF   ('&ZCGPR'(1,1) NE '0').ZG115P                     00382200
                AIF   (K'&ZCGPR GT 2).ZG115Q                            00382300
                AIF   ('&ZCGPR' EQ '0').ZG115Q                          00382400
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00382500
                AIF   (T'&ZCGPR NE 'N').ZG115Q  INVALID REG NAME        00382600
.ZG115P         ANOP  ,                                                 00382700
                AIF   (T'&ZCGPR NE 'N').ZG115R  NON NUMERIC             00382800
                AIF   ('&ZCGPR' LT '2').ZG115Q                          00382900
                AIF   ('&ZCGPR' LE '12').ZG115R                         00383000
.ZG115Q         ANOP  ,                                                 00383100
&ZMS            SETC  '"SDBLEN='  *KGPRA* MNOTE                         00383200
&ZMS            SETC  '&ZMS.&SDBLEN"'                                   00383300
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00383400
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00383500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00383600
.ZG115R         ANOP  ,                                                 00383700
.*-------------------------------------------------------------------   00383800
.***AG.KCK07 VALUE, OPT INPUT, KEYS -KMG RANGE                          00383900
                AIF   (K'&ZXSDBLEN LE 0).ZG115T  NOT I/O                00384000
                AIF   ('&XSDBLEN' EQ 'DEFINED_LENGTH').ZG115T           00384100
                AIF   ('&XSDBLEN'(1,1) EQ '(').ZG115T  IN GPR           00384200
                AIF   (T'&XSDBLEN NE 'N').ZG115S  NUMERIC ERR           00384300
&ZASIZ          SETA  &XSDBLEN    CONVERT                               00384400
                AIF   (&ZASIZ LT 1).ZG115S      TOO LOW                 00384500
                AIF   (&ZASIZ LE 256).ZG115T    NOT HIGH                00384600
.ZG115S         ANOP  ,                                                 00384700
&ZXSDBLEN       SETC  ''          RESET IN/OUTPUT                       00384800
&ZMS            SETC  '"SDBLEN='  *KRNGA* MNOTE                         00384900
&ZMS            SETC  '&ZMS.&SDBLEN"'                                   00385000
&ZMS            SETC  '&ZMS THE RANGE IS "1-256"'                       00385100
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00385200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00385300
.ZG115T         ANOP  ,                                                 00385400
.*----------------------------------------------------------------***   00385500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00385600
                AIF   (N'&SDBLENVAR LE 1).ZG118A  CK NUM                00385700
&ZMS            SETC  '"SDBLENVAR='             *KPOSA* MNOTE           00385800
&ZMS            SETC  '&ZMS.&SDBLENVAR"'                                00385900
&ZMS            SETC  '&ZMS "SDBLENVAR"'                                00386000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00386100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00386200
.ZG118A         ANOP  ,                                                 00386300
.*-------------------------------------------------------------------   00386400
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00386500
&XSDBLENVAR     SETC  'DEFINED_LENGTH'          SET DEFAULT             00386600
                AIF   (K'&SDBLENVAR(1) LE 0).ZG118C  PARM               00386700
&XSDBLENVAR     SETC  '&SDBLENVAR(1)'           SET XVARIABLE           00386800
                AIF   (N'&SDBLENVAR GT 1).ZG118B  MULTI PARMS           00386900
&XSDBLENVAR     SETC  '&SDBLENVAR'              SET XVARIABLE           00387000
.ZG118B         AIF   (K'&SDBSTRING(1) GT 0).ZG118C  KEY                00387100
&ZMS            SETC  '"SDBLENVAR'              *KDEPA* MNOTE           00387200
&ZMS            SETC  '&ZMS.=&SDBLENVAR"'                               00387300
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00387400
&ZMS            SETC  '&ZMS '                                           00387500
&ZMS            SETC  '&ZMS "SDBSTRING"'                                00387600
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00387700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00387800
.ZG118C         ANOP  ,                                                 00387900
&ZXSDBLENVAR    SETC  'INPUT'     SET IN/OUTPUT                         00388000
.*-------------------------------------------------------------------   00388100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00388200
                AIF   (K'&ZXSDBLENVAR LE 0).ZG118R  NOT I/O             00388300
                AIF   ('&XSDBLENVAR' EQ 'DEFINED_LENGTH').ZG118R        00388400
                AIF   ('&XSDBLENVAR'(1,1) NE '(').ZG118R                00388500
&ZCGPR          SETC  '&XSDBLENVAR'(2,K'&XSDBLENVAR-2)                  00388600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG118P                     00388700
                AIF   (K'&ZCGPR GT 2).ZG118Q                            00388800
                AIF   ('&ZCGPR' EQ '0').ZG118Q                          00388900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00389000
                AIF   (T'&ZCGPR NE 'N').ZG118Q  INVALID REG NAME        00389100
.ZG118P         ANOP  ,                                                 00389200
                AIF   (T'&ZCGPR NE 'N').ZG118R  NON NUMERIC             00389300
                AIF   ('&ZCGPR' LT '2').ZG118Q                          00389400
                AIF   ('&ZCGPR' LE '12').ZG118R                         00389500
.ZG118Q         ANOP  ,                                                 00389600
&ZMS            SETC  '"SDBLENVAR='             *KGPRA* MNOTE           00389700
&ZMS            SETC  '&ZMS.&SDBLENVAR"'                                00389800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00389900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00390000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00390100
.ZG118R         ANOP  ,                                                 00390200
.*----------------------------------------------------------------***   00390300
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00390400
                AIF   (N'&SDBKEY LE 1).ZG122A   CK NUM                  00390500
&ZMS            SETC  '"SDBKEY='  *KPOSA* MNOTE                         00390600
&ZMS            SETC  '&ZMS.&SDBKEY"'                                   00390700
&ZMS            SETC  '&ZMS "SDBKEY"'                                   00390800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00390900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00391000
.ZG122A         ANOP  ,                                                 00391100
.*-------------------------------------------------------------------   00391200
.***AG.KXVAR13 VALUE, OPT INPUT, KEYS -XVARIABLE                        00391300
&ZXSDBKEY       SETC  'INPUT'     SET IN/OUTPUT                         00391400
&XSDBKEY        SETC  'NO_SDBKEY'                                       00391500
                AIF   (K'&SDBKEY(1) LE 0).ZG122B  PARM                  00391600
&XSDBKEY        SETC  '&SDBKEY(1)'              SET XVARIABLE           00391700
                AIF   (N'&SDBKEY GT 1).ZG122B   MULTI PARMS             00391800
&XSDBKEY        SETC  '&SDBKEY'   SET XVARIABLE                         00391900
.ZG122B         ANOP  ,                                                 00392000
.*-------------------------------------------------------------------   00392100
.***AG.KCK01 VALUE, OPT INPUT, KEYS -GPR NOT ALLOWED                    00392200
                AIF   (K'&ZXSDBKEY LE 0).ZG122P  NOT I/O                00392300
                AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').ZG122P                00392400
                AIF   ('&XSDBKEY'(1,1) NE '(').ZG122P                   00392500
&ZXSDBKEY       SETC  ''          RESET IN/OUTPUT                       00392600
&ZMS            SETC  '"SDBKEY='  *KGPRA* MNOTE                         00392700
&ZMS            SETC  '&ZMS.&SDBKEY"'                                   00392800
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00392900
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00393000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00393100
.ZG122P         ANOP  ,                                                 00393200
.*-------------------------------------------------------------------   00393300
.***AG.KCK03 VALUE, OPT INPUT, KEYS -CHARACTER LENGTH                   00393400
                AIF   (K'&ZXSDBKEY LE 0).ZG122S  NOT I/O                00393500
                AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').ZG122S                00393600
                AIF   (K'&XSDBKEY LE 256).ZG122S  LNG OK                00393700
&ZXSDBKEY       SETC  ''          RESET IN/OUTPUT                       00393800
&ZMS            SETC  '"SDBKEY='  *KLNGA* MNOTE                         00393900
&ZMS            SETC  '&ZMS.&SDBKEY"'                                   00394000
&ZMS            SETC  '&ZMS ARGUMENT 1 EXCEEDS THE MAXIMUM'             00394100
                MNOTE 8,' &ZMS LENGTH OF 256 CHARACTERS.'               00394200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00394300
.ZG122S         ANOP  ,                                                 00394400
.*----------------------------------------------------------------***   00394500
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00394600
                AIF   (N'&DATA LE 1).ZG124A     CK NUM                  00394700
&ZMS            SETC  '"DATA='    *KPOSA* MNOTE                         00394800
&ZMS            SETC  '&ZMS.&DATA"'                                     00394900
&ZMS            SETC  '&ZMS "DATA"'                                     00395000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00395100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00395200
.ZG124A         ANOP  ,                                                 00395300
.*-------------------------------------------------------------------   00395400
.***AG.KXVAR09 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00395500
&ZXDATA         SETC  'INPUT'     SET IN/OUTPUT                         00395600
&XDATA          SETC  '&DATA(1)'  SET XVARIABLE                         00395700
                AIF   (N'&DATA GT 1).ZG124B     MULTI PARMS             00395800
&XDATA          SETC  '&DATA'     SET XVARIABLE                         00395900
.ZG124B         AIF   (K'&SDBKEY(1) GT 0).ZG124C  KEY                   00396000
                AIF   (K'&DATA(1) LE 0).ZG124D  PARM                    00396100
&ZMS            SETC  '"DATA'     *KDEPA* MNOTE                         00396200
&ZMS            SETC  '&ZMS.=&DATA"'                                    00396300
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00396400
&ZMS            SETC  '&ZMS '                                           00396500
&ZMS            SETC  '&ZMS "SDBKEY"'                                   00396600
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00396700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00396800
                AGO   .ZG124E                                           00396900
.*                                                                      00397000
.ZG124C         AIF   (K'&DATA(1) GT 0).ZG124E  PARM                    00397100
&ZXDATA         SETC  ''          RESET IN/OUTPUT                       00397200
&ZMS            SETC  'WHEN "SDBKEY" IS SPECIFIED'  *KRQDA*             00397300
&ZMS            SETC  '&ZMS , "DATA" KEY AND ITS ARGUMENT'              00397400
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00397500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00397600
.ZG124D         ANOP  ,                                                 00397700
&XDATA          SETC  '0'         SET DEFAULT                           00397800
.ZG124E         ANOP  ,                                                 00397900
.*-------------------------------------------------------------------   00398000
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00398100
                AIF   (K'&ZXDATA LE 0).ZG124R   NOT I/O                 00398200
                AIF   ('&XDATA'(1,1) NE '(').ZG124R                     00398300
&ZCGPR          SETC  '&XDATA'(2,K'&XDATA-2)                            00398400
                AIF   ('&ZCGPR'(1,1) NE '0').ZG124P                     00398500
                AIF   (K'&ZCGPR GT 2).ZG124Q                            00398600
                AIF   ('&ZCGPR' EQ '0').ZG124Q                          00398700
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00398800
                AIF   (T'&ZCGPR NE 'N').ZG124Q  INVALID REG NAME        00398900
.ZG124P         ANOP  ,                                                 00399000
                AIF   (T'&ZCGPR NE 'N').ZG124R  NON NUMERIC             00399100
                AIF   ('&ZCGPR' LT '2').ZG124Q                          00399200
                AIF   ('&ZCGPR' LE '12').ZG124R                         00399300
.ZG124Q         ANOP  ,                                                 00399400
&ZMS            SETC  '"DATA='    *KGPRA* MNOTE                         00399500
&ZMS            SETC  '&ZMS.&DATA"'                                     00399600
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00399700
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00399800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00399900
.ZG124R         ANOP  ,                                                 00400000
.*----------------------------------------------------------------***   00400100
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00400200
                AIF   (N'&LEN LE 1).ZG126A      CK NUM                  00400300
&ZMS            SETC  '"LEN='     *KPOSA* MNOTE                         00400400
&ZMS            SETC  '&ZMS.&LEN"'                                      00400500
&ZMS            SETC  '&ZMS "LEN"'                                      00400600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00400700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00400800
.ZG126A         ANOP  ,                                                 00400900
.*-------------------------------------------------------------------   00401000
.***AG.KXVAR17 VALUE, OPT INPUT, KEYS -XVARIABLE                        00401100
&XLEN           SETC  'DEFINED_LENGTH'          SET DEFAULT             00401200
                AIF   (K'&LEN(1) LE 0).ZG126C   PARM                    00401300
&XLEN           SETC  '&LEN(1)'   SET XVARIABLE                         00401400
                AIF   (N'&LEN GT 1).ZG126B      MULTI PARMS             00401500
&XLEN           SETC  '&LEN'      SET XVARIABLE                         00401600
.ZG126B         AIF   (K'&DATA(1) GT 0).ZG126C  KEY                     00401700
&ZMS            SETC  '"LEN'      *KDEPA* MNOTE                         00401800
&ZMS            SETC  '&ZMS.=&LEN"'                                     00401900
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00402000
&ZMS            SETC  '&ZMS '                                           00402100
&ZMS            SETC  '&ZMS "DATA"'                                     00402200
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00402300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00402400
.ZG126C         ANOP  ,                                                 00402500
&ZXLEN          SETC  'INPUT'     SET IN/OUTPUT                         00402600
.*-------------------------------------------------------------------   00402700
.***AG.KCK02 VALUE, OPT INPUT, KEYS -GPR OUT OF RANGE                   00402800
                AIF   (K'&ZXLEN LE 0).ZG126R    NOT I/O                 00402900
                AIF   ('&XLEN' EQ 'DEFINED_LENGTH').ZG126R              00403000
                AIF   ('&XLEN'(1,1) NE '(').ZG126R                      00403100
&ZCGPR          SETC  '&XLEN'(2,K'&XLEN-2)                              00403200
                AIF   ('&ZCGPR'(1,1) NE '0').ZG126P                     00403300
                AIF   (K'&ZCGPR GT 2).ZG126Q                            00403400
                AIF   ('&ZCGPR' EQ '0').ZG126Q                          00403500
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00403600
                AIF   (T'&ZCGPR NE 'N').ZG126Q  INVALID REG NAME        00403700
.ZG126P         ANOP  ,                                                 00403800
                AIF   (T'&ZCGPR NE 'N').ZG126R  NON NUMERIC             00403900
                AIF   ('&ZCGPR' LT '2').ZG126Q                          00404000
                AIF   ('&ZCGPR' LE '12').ZG126R                         00404100
.ZG126Q         ANOP  ,                                                 00404200
&ZMS            SETC  '"LEN='     *KGPRA* MNOTE                         00404300
&ZMS            SETC  '&ZMS.&LEN"'                                      00404400
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00404500
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00404600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00404700
.ZG126R         ANOP  ,                                                 00404800
.*-------------------------------------------------------------------   00404900
.***AG.KCK07 VALUE, OPT INPUT, KEYS -KMG RANGE                          00405000
                AIF   (K'&ZXLEN LE 0).ZG126T    NOT I/O                 00405100
                AIF   ('&XLEN' EQ 'DEFINED_LENGTH').ZG126T              00405200
                AIF   ('&XLEN'(1,1) EQ '(').ZG126T  IN GPR              00405300
                AIF   (T'&XLEN NE 'N').ZG126S   NUMERIC ERR             00405400
&ZASIZ          SETA  &XLEN       CONVERT                               00405500
                AIF   (&ZASIZ LT 1).ZG126S      TOO LOW                 00405600
                AIF   (&ZASIZ LE 13).ZG126T     NOT HIGH                00405700
.ZG126S         ANOP  ,                                                 00405800
&ZXLEN          SETC  ''          RESET IN/OUTPUT                       00405900
&ZMS            SETC  '"LEN='     *KRNGA* MNOTE                         00406000
&ZMS            SETC  '&ZMS.&LEN"'                                      00406100
&ZMS            SETC  '&ZMS THE RANGE IS "1-13"'                        00406200
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00406300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00406400
.ZG126T         ANOP  ,                                                 00406500
.*----------------------------------------------------------------***   00406600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00406700
                AIF   (N'&LENVAR LE 1).ZG129A   CK NUM                  00406800
&ZMS            SETC  '"LENVAR='  *KPOSA* MNOTE                         00406900
&ZMS            SETC  '&ZMS.&LENVAR"'                                   00407000
&ZMS            SETC  '&ZMS "LENVAR"'                                   00407100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00407200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00407300
.ZG129A         ANOP  ,                                                 00407400
.*-------------------------------------------------------------------   00407500
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00407600
&XLENVAR        SETC  'DEFINED_LENGTH'          SET DEFAULT             00407700
                AIF   (K'&LENVAR(1) LE 0).ZG129C  PARM                  00407800
&XLENVAR        SETC  '&LENVAR(1)'              SET XVARIABLE           00407900
                AIF   (N'&LENVAR GT 1).ZG129B   MULTI PARMS             00408000
&XLENVAR        SETC  '&LENVAR'   SET XVARIABLE                         00408100
.ZG129B         AIF   (K'&DATA(1) GT 0).ZG129C  KEY                     00408200
&ZMS            SETC  '"LENVAR'   *KDEPA* MNOTE                         00408300
&ZMS            SETC  '&ZMS.=&LENVAR"'                                  00408400
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00408500
&ZMS            SETC  '&ZMS '                                           00408600
&ZMS            SETC  '&ZMS "DATA"'                                     00408700
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00408800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00408900
.ZG129C         ANOP  ,                                                 00409000
&ZXLENVAR       SETC  'INPUT'     SET IN/OUTPUT                         00409100
.*-------------------------------------------------------------------   00409200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00409300
                AIF   (K'&ZXLENVAR LE 0).ZG129R  NOT I/O                00409400
                AIF   ('&XLENVAR' EQ 'DEFINED_LENGTH').ZG129R           00409500
                AIF   ('&XLENVAR'(1,1) NE '(').ZG129R                   00409600
&ZCGPR          SETC  '&XLENVAR'(2,K'&XLENVAR-2)                        00409700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG129P                     00409800
                AIF   (K'&ZCGPR GT 2).ZG129Q                            00409900
                AIF   ('&ZCGPR' EQ '0').ZG129Q                          00410000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00410100
                AIF   (T'&ZCGPR NE 'N').ZG129Q  INVALID REG NAME        00410200
.ZG129P         ANOP  ,                                                 00410300
                AIF   (T'&ZCGPR NE 'N').ZG129R  NON NUMERIC             00410400
                AIF   ('&ZCGPR' LT '2').ZG129Q                          00410500
                AIF   ('&ZCGPR' LE '12').ZG129R                         00410600
.ZG129Q         ANOP  ,                                                 00410700
&ZMS            SETC  '"LENVAR='  *KGPRA* MNOTE                         00410800
&ZMS            SETC  '&ZMS.&LENVAR"'                                   00410900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00411000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00411100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00411200
.ZG129R         ANOP  ,                                                 00411300
.*----------------------------------------------------------------***   00411400
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00411500
                AIF   (N'&CONVERT LE 1).ZG132A  CK NUM                  00411600
&ZMS            SETC  '"CONVERT='               *KPOSA* MNOTE           00411700
&ZMS            SETC  '&ZMS.&CONVERT"'                                  00411800
&ZMS            SETC  '&ZMS "CONVERT"'                                  00411900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00412000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00412100
.ZG132A         ANOP  ,                                                 00412200
.*-------------------------------------------------------------------   00412300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00412400
&XCONVERT       SETC  ''          INITIALIZE XVARIABLE                  00412500
.ZG133A   AIF   ('&CONVERT(1)' NE 'NO').ZG134A                          00412600
&XCONVERT       SETC  'NO'        SET KEYWORD                           00412700
.*-------------------------------------------------------------------   00412800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00412900
.ZG134A   AIF   ('&CONVERT(1)' NE 'YES').ZG135A                         00413000
&XCONVERT       SETC  'YES'       SET KEYWORD                           00413100
.*-------------------------------------------------------------------   00413200
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00413300
.ZG135A         AIF   (K'&XCONVERT GT 0).ZG135C  KEYWORD                00413400
                AIF   (K'&CONVERT(1) LE 0).ZG135B                       00413500
&ZMS            SETC  '"CONVERT='               *KUKWA* MNOTE           00413600
&ZMS            SETC  '&ZMS.&CONVERT"'                                  00413700
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00413800
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00413900
&ZMS            SETC  '&ZMS "NO"'               VALID KEYWORD           00414000
&ZMS            SETC  '&ZMS OR "YES".'          VALID KEYWORD           00414100
                MNOTE 8,' &ZMS '                                        00414200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00414300
.ZG135B         ANOP  ,                                                 00414400
&XCONVERT       SETC  'NO'        SET DEFAULT KEYWORD                   00414500
.ZG135C         ANOP  ,                                                 00414600
&ZXCONVERT      SETC  'INPUT'     SET IN/OUTPUT                         00414700
.*-------------------------------------------------------------------   00414800
.***AG.KKWRD06 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00414900
                AIF   (K'&DATA(1) GT 0).ZG135D  KEY                     00415000
                AIF   (K'&CONVERT(1) LE 0).ZG135D  PARM                 00415100
&ZMS            SETC  '"CONVERT'  *KDEPA* MNOTE                         00415200
&ZMS            SETC  '&ZMS.=&CONVERT"'                                 00415300
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00415400
&ZMS            SETC  '&ZMS '                                           00415500
&ZMS            SETC  '&ZMS "DATA"'                                     00415600
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00415700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00415800
.ZG135D         ANOP  ,                                                 00415900
.*----------------------------------------------------------------***   00416000
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00416100
                AIF   (N'&TYPE LE 1).ZG139A     CK NUM                  00416200
&ZMS            SETC  '"TYPE='    *KPOSA* MNOTE                         00416300
&ZMS            SETC  '&ZMS.&TYPE"'                                     00416400
&ZMS            SETC  '&ZMS "TYPE"'                                     00416500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00416600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00416700
.ZG139A         ANOP  ,                                                 00416800
.*-------------------------------------------------------------------   00416900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00417000
&XTYPE          SETC  ''          INITIALIZE XVARIABLE                  00417100
.ZG140A   AIF   ('&TYPE(1)' NE 'TEST').ZG141A                           00417200
&XTYPE          SETC  'TEST'      SET KEYWORD                           00417300
.*-------------------------------------------------------------------   00417400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00417500
.ZG141A   AIF   ('&TYPE(1)' NE 'NOTEST').ZG142A                         00417600
&XTYPE          SETC  'NOTEST'    SET KEYWORD                           00417700
.*-------------------------------------------------------------------   00417800
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00417900
.ZG142A         AIF   (K'&XTYPE GT 0).ZG142C    KEYWORD                 00418000
                AIF   (K'&TYPE(1) LE 0).ZG142B                          00418100
&ZMS            SETC  '"TYPE='    *KUKWA* MNOTE                         00418200
&ZMS            SETC  '&ZMS.&TYPE"'                                     00418300
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00418400
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00418500
&ZMS            SETC  '&ZMS "TEST"'             VALID KEYWORD           00418600
&ZMS            SETC  '&ZMS OR "NOTEST".'       VALID KEYWORD           00418700
                MNOTE 8,' &ZMS '                                        00418800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00418900
.ZG142B         ANOP  ,                                                 00419000
&XTYPE          SETC  'TEST'      SET DEFAULT KEYWORD                   00419100
.ZG142C         ANOP  ,                                                 00419200
&ZXTYPE         SETC  'INPUT'     SET IN/OUTPUT                         00419300
.*-------------------------------------------------------------------   00419400
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES          00419500
.ZG143          AIF   ('&XTEST' NE 'VARIABLE').ZG164                    00419600
.*-------------------------------------------------------------------   00419700
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS               00419800
&ZCVAL          SETC ''           ERROR KEY FIELD                       00419900
.ZG143I0        AIF   (K'&PRIMLEN LE 0).ZG143I1                         00420000
&ZCVAL          SETC '&ZCVAL PRIMLEN'           DISALLOWED KEY          00420100
.ZG143I1        AIF   (K'&SECLEN LE 0).ZG143I2                          00420200
&ZCVAL          SETC '&ZCVAL SECLEN'            DISALLOWED KEY          00420300
.ZG143I2        AIF   (K'&VARLEN LE 0).ZG143I3                          00420400
&ZCVAL          SETC '&ZCVAL VARLEN'            DISALLOWED KEY          00420500
.ZG143I3        AIF   (K'&ARCHLEV LE 0).ZG143I4                         00420600
&ZCVAL          SETC '&ZCVAL ARCHLEV'           DISALLOWED KEY          00420700
.ZG143I4        AIF   (K'&DAE LE 0).ZG143I5                             00420800
&ZCVAL          SETC '&ZCVAL DAE'               DISALLOWED KEY          00420900
.ZG143I5        AIF   (K'&COMPDSC LE 0).ZG143I6                         00421000
&ZCVAL          SETC '&ZCVAL COMPDSC'           DISALLOWED KEY          00421100
.ZG143I6        AIF   (K'&PROBLEM LE 0).ZG143I7                         00421200
&ZCVAL          SETC '&ZCVAL PROBLEM'           DISALLOWED KEY          00421300
.ZG143I7        AIF   (K'&SERVLEV LE 0).ZG143I8                         00421400
&ZCVAL          SETC '&ZCVAL SERVLEV'           DISALLOWED KEY          00421500
.ZG143I8        AIF   (K'&XNOCONVERTS LE 0).ZG143I9                     00421600
&ZCVAL          SETC '&ZCVAL XNOCONVERTS'       DISALLOWED KEY          00421700
.ZG143I9        AIF   (K'&IBM LE 0).ZG143I10                            00421800
&ZCVAL          SETC '&ZCVAL IBM'               DISALLOWED KEY          00421900
.ZG143I10       AIF   (K'&PROGRAM LE 0).ZG143I11                        00422000
&ZCVAL          SETC '&ZCVAL PROGRAM'           DISALLOWED KEY          00422100
.ZG143I11       AIF   (K'&PROGLEV LE 0).ZG143I12                        00422200
&ZCVAL          SETC '&ZCVAL PROGLEV'           DISALLOWED KEY          00422300
.ZG143I12       AIF   (K'&COMPID LE 0).ZG143I13                         00422400
&ZCVAL          SETC '&ZCVAL COMPID'            DISALLOWED KEY          00422500
.ZG143I13       AIF   (K'&COMPLEV LE 0).ZG143I14                        00422600
&ZCVAL          SETC '&ZCVAL COMPLEV'           DISALLOWED KEY          00422700
.ZG143I14       AIF   (K'&PID LE 0).ZG143I15                            00422800
&ZCVAL          SETC '&ZCVAL PID'               DISALLOWED KEY          00422900
.ZG143I15       AIF   (K'&PIDLEVEL LE 0).ZG143I16                       00423000
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          DISALLOWED KEY          00423100
.ZG143I16       AIF   (K'&SUBSYSTEM LE 0).ZG143I17                      00423200
&ZCVAL          SETC '&ZCVAL SUBSYSTEM'         DISALLOWED KEY          00423300
.ZG143I17       AIF   (K'&SDBSTRING LE 0).ZG143I18                      00423400
&ZCVAL          SETC '&ZCVAL SDBSTRING'         DISALLOWED KEY          00423500
.ZG143I18       AIF   (K'&SDBLEN LE 0).ZG143I19                         00423600
&ZCVAL          SETC '&ZCVAL SDBLEN'            DISALLOWED KEY          00423700
.ZG143I19       AIF   (K'&SDBLENVAR LE 0).ZG143I20                      00423800
&ZCVAL          SETC '&ZCVAL SDBLENVAR'         DISALLOWED KEY          00423900
.ZG143I20       AIF   (K'&SDBKEY LE 0).ZG143I21                         00424000
&ZCVAL          SETC '&ZCVAL SDBKEY'            DISALLOWED KEY          00424100
.ZG143I21       AIF   (K'&CONVERT LE 0).ZG143I22                        00424200
&ZCVAL          SETC '&ZCVAL CONVERT'           DISALLOWED KEY          00424300
.ZG143I22       AIF   (K'&INVOKE LE 0).ZG143I23                         00424400
&ZCVAL          SETC '&ZCVAL INVOKE'            DISALLOWED KEY          00424500
.ZG143I23       AIF   (K'&RETCODE LE 0).ZG143I24                        00424600
&ZCVAL          SETC '&ZCVAL RETCODE'           DISALLOWED KEY          00424700
.ZG143I24       AIF   (K'&RSNCODE LE 0).ZG143I25                        00424800
&ZCVAL          SETC '&ZCVAL RSNCODE'           DISALLOWED KEY          00424900
.ZG143I25       AIF   (K'&ZCVAL LE 0).ZG143J    KEY                     00425000
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00425100
                AIF  (K'&ZCVAL LE 160).ZG143K                           00425200
&ZCVAL          SETC '&ZCVAL'(1,160)                                    00425300
&ZCVAL          SETC '&ZCVAL....'                                       00425400
.ZG143K         ANOP                                                    00425500
&ZMS            SETC  '"VARIABLE'               *KMEIA* MNOTE           00425600
&ZMS            SETC  '&ZMS."'                                          00425700
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00425800
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00425900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00426000
.ZG143J         ANOP  ,                                                 00426100
.*----------------------------------------------------------------***   00426200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00426300
                AIF   (N'&SR LE 1).ZG145A       CK NUM                  00426400
&ZMS            SETC  '"SR='      *KPOSA* MNOTE                         00426500
&ZMS            SETC  '&ZMS.&SR"'                                       00426600
&ZMS            SETC  '&ZMS "SR"'                                       00426700
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00426800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00426900
.ZG145A         ANOP  ,                                                 00427000
.*-------------------------------------------------------------------   00427100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00427200
&ZXSR           SETC  'INPUT'     SET IN/OUTPUT                         00427300
&XSR            SETC  'SR_IN_R1'                                        00427400
                AIF   (K'&SR(1) LE 0).ZG145B    PARM                    00427500
&XSR            SETC  '&SR(1)'    SET XVARIABLE                         00427600
                AIF   (N'&SR GT 1).ZG145B       MULTI PARMS             00427700
&XSR            SETC  '&SR'       SET XVARIABLE                         00427800
.ZG145B         ANOP  ,                                                 00427900
.*-------------------------------------------------------------------   00428000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00428100
                AIF   (K'&ZXSR LE 0).ZG145R     NOT I/O                 00428200
                AIF   ('&XSR' EQ 'SR_IN_R1').ZG145R                     00428300
                AIF   ('&XSR'(1,1) NE '(').ZG145R                       00428400
&ZCGPR          SETC  '&XSR'(2,K'&XSR-2)                                00428500
                AIF   ('&ZCGPR'(1,1) NE '0').ZG145P                     00428600
                AIF   (K'&ZCGPR GT 2).ZG145Q                            00428700
                AIF   ('&ZCGPR' EQ '0').ZG145Q                          00428800
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00428900
                AIF   (T'&ZCGPR NE 'N').ZG145Q  INVALID REG NAME        00429000
.ZG145P         ANOP  ,                                                 00429100
                AIF   (T'&ZCGPR NE 'N').ZG145R  NON NUMERIC             00429200
                AIF   ('&ZCGPR' LT '2').ZG145Q                          00429300
                AIF   ('&ZCGPR' LE '12').ZG145R                         00429400
.ZG145Q         ANOP  ,                                                 00429500
&ZMS            SETC  '"SR='      *KGPRA* MNOTE                         00429600
&ZMS            SETC  '&ZMS.&SR"'                                       00429700
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00429800
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00429900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00430000
.ZG145R         ANOP  ,                                                 00430100
.*----------------------------------------------------------------***   00430200
.***AG.KXVAR05 VALUE, RQD INPUT, KEYS -XVARIABLE KEY                    00430300
                AIF   (N'&S5KEY LE 1).ZG148A    CK NUM                  00430400
&ZMS            SETC  '"S5KEY='   *KPOSA* MNOTE                         00430500
&ZMS            SETC  '&ZMS.&S5KEY"'                                    00430600
&ZMS            SETC  '&ZMS "S5KEY"'                                    00430700
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00430800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00430900
.ZG148A         ANOP  ,                                                 00431000
.*-------------------------------------------------------------------   00431100
.***AG.KXVAR06 VALUE, RQD INPUT, KEYS -XVARIABLE                        00431200
&ZXS5KEY        SETC  'INPUT'     SET IN/OUTPUT                         00431300
&XS5KEY         SETC  '&S5KEY(1)'               SET XVARIABLE           00431400
                AIF   (N'&S5KEY GT 1).ZG148B    MULTI PARMS             00431500
&XS5KEY         SETC  '&S5KEY'    SET XVARIABLE                         00431600
.ZG148B         AIF   (K'&S5KEY(1) GT 0).ZG148C                         00431700
&ZXS5KEY        SETC  ''          RESET IN/OUTPUT                       00431800
&ZMS            SETC  ' '         *KRQDA*                               00431900
&ZMS            SETC  '&ZMS "S5KEY" KEY AND ITS ARGUMENT'               00432000
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00432100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00432200
.ZG148C         ANOP  ,                                                 00432300
.*-------------------------------------------------------------------   00432400
.***AG.KCK01 VALUE, RQD INPUT, KEYS -GPR NOT ALLOWED                    00432500
                AIF   (K'&ZXS5KEY LE 0).ZG148P  NOT I/O                 00432600
                AIF   ('&XS5KEY'(1,1) NE '(').ZG148P                    00432700
&ZXS5KEY        SETC  ''          RESET IN/OUTPUT                       00432800
&ZMS            SETC  '"S5KEY='   *KGPRA* MNOTE                         00432900
&ZMS            SETC  '&ZMS.&S5KEY"'                                    00433000
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00433100
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00433200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00433300
.ZG148P         ANOP  ,                                                 00433400
.*-------------------------------------------------------------------   00433500
.***AG.KCK06 VALUE, RQD INPUT, KEYS -KMG RANGE OR EQUATE                00433600
                AIF   (K'&ZXS5KEY LE 0).ZG148V  NOT I/O                 00433700
                AIF   ('&XS5KEY'(1,1) EQ '(').ZG148V  IN GPR            00433800
                AIF   ('&XS5KEY'(1,1) EQ '-').ZG148U  INVALID ENTRY     00433900
                AIF   (T'&XS5KEY NE 'N').ZG148S  NON NUMERIC            00434000
&ZAWRK          SETA  &XS5KEY     INITIALIZE ZAWRK                      00434100
&ZCVAL          SETC  '&XS5KEY'   INITIALIZE ZCVAL                      00434200
&ZASIZ          SETA  1                                                 00434300
                AGO   .ZG148TT                                          00434400
.ZG148S         ANOP ,                                                  00434500
&ZCLNG          SETC  '&XS5KEY'(1,K'&XS5KEY-1)                          00434600
                AIF   (T'&ZCLNG EQ 'N').ZG148SS  NUMERIC                00434700
&ZCGPR          SETC  '&XS5KEY'(1,1)            FIRST CHAR              00434800
                AIF   (T'&ZCGPR EQ 'N').ZG148U  NUMERIC ERR             00434900
                AGO   .ZG148V                                           00435000
.*                                                                      00435100
.ZG148SS        ANOP ,                                                  00435200
&ZAWRK          SETA  &ZCLNG      CONVERT                               00435300
&ZCGPR          SETC  '&XS5KEY'(K'&XS5KEY,1)                            00435400
&ZASIZ          SETA  1024                                              00435500
                AIF   ('&ZCGPR' EQ 'K').ZG148T  K FACTOR                00435600
&ZASIZ          SETA  1024*1024                                         00435700
                AIF   ('&ZCGPR' EQ 'M').ZG148T  M FACTOR                00435800
&ZASIZ          SETA  1024*1024*1024                                    00435900
                AIF   ('&ZCGPR' NE 'G').ZG148U  NOT G FACTOR            00436000
.ZG148T         ANOP  ,                                                 00436100
&ZCVAL          SETC  '&ZAWRK*&ZASIZ'           EQUIVALENT NUMBER       00436200
.ZG148TT        ANOP  ,                                                 00436300
&ZN             SETA  65535/&ZASIZ              CONVERT                 00436400
                AIF   (&ZN LT 0).ZG148U         TOO LOW                 00436500
                AIF   (&ZAWRK GT &ZN).ZG148U    TOO HIGH                00436600
&XS5KEY         SETC '&ZCVAL'     SET XVARIABLE NUMBER                  00436700
                AGO   .ZG148V                                           00436800
.*                                                                      00436900
.ZG148U         ANOP  ,                                                 00437000
&ZXS5KEY        SETC  ''          RESET IN/OUTPUT                       00437100
&ZMS            SETC  '"S5KEY='   *KRNGA* MNOTE                         00437200
&ZMS            SETC  '&ZMS.&S5KEY"'                                    00437300
&ZMS            SETC  '&ZMS THE RANGE IS "0-65535"'                     00437400
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00437500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00437600
.ZG148V         ANOP  ,                                                 00437700
.*----------------------------------------------------------------***   00437800
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00437900
                AIF   (N'&DATA LE 1).ZG151A     CK NUM                  00438000
&ZMS            SETC  '"DATA='    *KPOSA* MNOTE                         00438100
&ZMS            SETC  '&ZMS.&DATA"'                                     00438200
&ZMS            SETC  '&ZMS "DATA"'                                     00438300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00438400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00438500
.ZG151A         ANOP  ,                                                 00438600
.*-------------------------------------------------------------------   00438700
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00438800
&ZXDATA         SETC  'INPUT'     SET IN/OUTPUT                         00438900
&XDATA          SETC  '&DATA(1)'  SET XVARIABLE                         00439000
                AIF   (N'&DATA GT 1).ZG151B     MULTI PARMS             00439100
&XDATA          SETC  '&DATA'     SET XVARIABLE                         00439200
.ZG151B         AIF   (K'&DATA(1) GT 0).ZG151C                          00439300
&ZXDATA         SETC  ''          RESET IN/OUTPUT                       00439400
&ZMS            SETC  ' '         *KRQDA*                               00439500
&ZMS            SETC  '&ZMS "DATA" KEY AND ITS ARGUMENT'                00439600
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00439700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00439800
.ZG151C         ANOP  ,                                                 00439900
.*-------------------------------------------------------------------   00440000
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00440100
                AIF   (K'&ZXDATA LE 0).ZG151R   NOT I/O                 00440200
                AIF   ('&XDATA'(1,1) NE '(').ZG151R                     00440300
&ZCGPR          SETC  '&XDATA'(2,K'&XDATA-2)                            00440400
                AIF   ('&ZCGPR'(1,1) NE '0').ZG151P                     00440500
                AIF   (K'&ZCGPR GT 2).ZG151Q                            00440600
                AIF   ('&ZCGPR' EQ '0').ZG151Q                          00440700
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00440800
                AIF   (T'&ZCGPR NE 'N').ZG151Q  INVALID REG NAME        00440900
.ZG151P         ANOP  ,                                                 00441000
                AIF   (T'&ZCGPR NE 'N').ZG151R  NON NUMERIC             00441100
                AIF   ('&ZCGPR' LT '2').ZG151Q                          00441200
                AIF   ('&ZCGPR' LE '12').ZG151R                         00441300
.ZG151Q         ANOP  ,                                                 00441400
&ZMS            SETC  '"DATA='    *KGPRA* MNOTE                         00441500
&ZMS            SETC  '&ZMS.&DATA"'                                     00441600
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00441700
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00441800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00441900
.ZG151R         ANOP  ,                                                 00442000
.*----------------------------------------------------------------***   00442100
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00442200
                AIF   (N'&LEN LE 1).ZG153A      CK NUM                  00442300
&ZMS            SETC  '"LEN='     *KPOSA* MNOTE                         00442400
&ZMS            SETC  '&ZMS.&LEN"'                                      00442500
&ZMS            SETC  '&ZMS "LEN"'                                      00442600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00442700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00442800
.ZG153A         ANOP  ,                                                 00442900
.*-------------------------------------------------------------------   00443000
.***AG.KXVAR17 VALUE, OPT INPUT, KEYS -XVARIABLE                        00443100
&XLEN           SETC  'DEFINED_LENGTH'          SET DEFAULT             00443200
                AIF   (K'&LEN(1) LE 0).ZG153C   PARM                    00443300
&XLEN           SETC  '&LEN(1)'   SET XVARIABLE                         00443400
                AIF   (N'&LEN GT 1).ZG153B      MULTI PARMS             00443500
&XLEN           SETC  '&LEN'      SET XVARIABLE                         00443600
.ZG153B         AIF   (K'&DATA(1) GT 0).ZG153C  KEY                     00443700
&ZMS            SETC  '"LEN'      *KDEPA* MNOTE                         00443800
&ZMS            SETC  '&ZMS.=&LEN"'                                     00443900
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00444000
&ZMS            SETC  '&ZMS '                                           00444100
&ZMS            SETC  '&ZMS "DATA"'                                     00444200
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00444300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00444400
.ZG153C         ANOP  ,                                                 00444500
&ZXLEN          SETC  'INPUT'     SET IN/OUTPUT                         00444600
.*-------------------------------------------------------------------   00444700
.***AG.KCK02 VALUE, OPT INPUT, KEYS -GPR OUT OF RANGE                   00444800
                AIF   (K'&ZXLEN LE 0).ZG153R    NOT I/O                 00444900
                AIF   ('&XLEN' EQ 'DEFINED_LENGTH').ZG153R              00445000
                AIF   ('&XLEN'(1,1) NE '(').ZG153R                      00445100
&ZCGPR          SETC  '&XLEN'(2,K'&XLEN-2)                              00445200
                AIF   ('&ZCGPR'(1,1) NE '0').ZG153P                     00445300
                AIF   (K'&ZCGPR GT 2).ZG153Q                            00445400
                AIF   ('&ZCGPR' EQ '0').ZG153Q                          00445500
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00445600
                AIF   (T'&ZCGPR NE 'N').ZG153Q  INVALID REG NAME        00445700
.ZG153P         ANOP  ,                                                 00445800
                AIF   (T'&ZCGPR NE 'N').ZG153R  NON NUMERIC             00445900
                AIF   ('&ZCGPR' LT '2').ZG153Q                          00446000
                AIF   ('&ZCGPR' LE '12').ZG153R                         00446100
.ZG153Q         ANOP  ,                                                 00446200
&ZMS            SETC  '"LEN='     *KGPRA* MNOTE                         00446300
&ZMS            SETC  '&ZMS.&LEN"'                                      00446400
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00446500
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00446600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00446700
.ZG153R         ANOP  ,                                                 00446800
.*-------------------------------------------------------------------   00446900
.***AG.KCK07 VALUE, OPT INPUT, KEYS -KMG RANGE                          00447000
                AIF   (K'&ZXLEN LE 0).ZG153T    NOT I/O                 00447100
                AIF   ('&XLEN' EQ 'DEFINED_LENGTH').ZG153T              00447200
                AIF   ('&XLEN'(1,1) EQ '(').ZG153T  IN GPR              00447300
                AIF   (T'&XLEN NE 'N').ZG153S   NUMERIC ERR             00447400
&ZASIZ          SETA  &XLEN       CONVERT                               00447500
                AIF   (&ZASIZ LT 1).ZG153S      TOO LOW                 00447600
                AIF   (&ZASIZ LE 256).ZG153T    NOT HIGH                00447700
.ZG153S         ANOP  ,                                                 00447800
&ZXLEN          SETC  ''          RESET IN/OUTPUT                       00447900
&ZMS            SETC  '"LEN='     *KRNGA* MNOTE                         00448000
&ZMS            SETC  '&ZMS.&LEN"'                                      00448100
&ZMS            SETC  '&ZMS THE RANGE IS "1-256"'                       00448200
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00448300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00448400
.ZG153T         ANOP  ,                                                 00448500
.*----------------------------------------------------------------***   00448600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00448700
                AIF   (N'&LENVAR LE 1).ZG156A   CK NUM                  00448800
&ZMS            SETC  '"LENVAR='  *KPOSA* MNOTE                         00448900
&ZMS            SETC  '&ZMS.&LENVAR"'                                   00449000
&ZMS            SETC  '&ZMS "LENVAR"'                                   00449100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00449200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00449300
.ZG156A         ANOP  ,                                                 00449400
.*-------------------------------------------------------------------   00449500
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00449600
&XLENVAR        SETC  'DEFINED_LENGTH'          SET DEFAULT             00449700
                AIF   (K'&LENVAR(1) LE 0).ZG156C  PARM                  00449800
&XLENVAR        SETC  '&LENVAR(1)'              SET XVARIABLE           00449900
                AIF   (N'&LENVAR GT 1).ZG156B   MULTI PARMS             00450000
&XLENVAR        SETC  '&LENVAR'   SET XVARIABLE                         00450100
.ZG156B         AIF   (K'&DATA(1) GT 0).ZG156C  KEY                     00450200
&ZMS            SETC  '"LENVAR'   *KDEPA* MNOTE                         00450300
&ZMS            SETC  '&ZMS.=&LENVAR"'                                  00450400
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00450500
&ZMS            SETC  '&ZMS '                                           00450600
&ZMS            SETC  '&ZMS "DATA"'                                     00450700
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00450800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00450900
.ZG156C         ANOP  ,                                                 00451000
&ZXLENVAR       SETC  'INPUT'     SET IN/OUTPUT                         00451100
.*-------------------------------------------------------------------   00451200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00451300
                AIF   (K'&ZXLENVAR LE 0).ZG156R  NOT I/O                00451400
                AIF   ('&XLENVAR' EQ 'DEFINED_LENGTH').ZG156R           00451500
                AIF   ('&XLENVAR'(1,1) NE '(').ZG156R                   00451600
&ZCGPR          SETC  '&XLENVAR'(2,K'&XLENVAR-2)                        00451700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG156P                     00451800
                AIF   (K'&ZCGPR GT 2).ZG156Q                            00451900
                AIF   ('&ZCGPR' EQ '0').ZG156Q                          00452000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00452100
                AIF   (T'&ZCGPR NE 'N').ZG156Q  INVALID REG NAME        00452200
.ZG156P         ANOP  ,                                                 00452300
                AIF   (T'&ZCGPR NE 'N').ZG156R  NON NUMERIC             00452400
                AIF   ('&ZCGPR' LT '2').ZG156Q                          00452500
                AIF   ('&ZCGPR' LE '12').ZG156R                         00452600
.ZG156Q         ANOP  ,                                                 00452700
&ZMS            SETC  '"LENVAR='  *KGPRA* MNOTE                         00452800
&ZMS            SETC  '&ZMS.&LENVAR"'                                   00452900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00453000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00453100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00453200
.ZG156R         ANOP  ,                                                 00453300
.*----------------------------------------------------------------***   00453400
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00453500
                AIF   (N'&TYPE LE 1).ZG160A     CK NUM                  00453600
&ZMS            SETC  '"TYPE='    *KPOSA* MNOTE                         00453700
&ZMS            SETC  '&ZMS.&TYPE"'                                     00453800
&ZMS            SETC  '&ZMS "TYPE"'                                     00453900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00454000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00454100
.ZG160A         ANOP  ,                                                 00454200
.*-------------------------------------------------------------------   00454300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00454400
&XTYPE          SETC  ''          INITIALIZE XVARIABLE                  00454500
.ZG161A   AIF   ('&TYPE(1)' NE 'TEST').ZG162A                           00454600
&XTYPE          SETC  'TEST'      SET KEYWORD                           00454700
.*-------------------------------------------------------------------   00454800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00454900
.ZG162A   AIF   ('&TYPE(1)' NE 'NOTEST').ZG163A                         00455000
&XTYPE          SETC  'NOTEST'    SET KEYWORD                           00455100
.*-------------------------------------------------------------------   00455200
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00455300
.ZG163A         AIF   (K'&XTYPE GT 0).ZG163C    KEYWORD                 00455400
                AIF   (K'&TYPE(1) LE 0).ZG163B                          00455500
&ZMS            SETC  '"TYPE='    *KUKWA* MNOTE                         00455600
&ZMS            SETC  '&ZMS.&TYPE"'                                     00455700
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00455800
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00455900
&ZMS            SETC  '&ZMS "TEST"'             VALID KEYWORD           00456000
&ZMS            SETC  '&ZMS OR "NOTEST".'       VALID KEYWORD           00456100
                MNOTE 8,' &ZMS '                                        00456200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00456300
.ZG163B         ANOP  ,                                                 00456400
&XTYPE          SETC  'TEST'      SET DEFAULT KEYWORD                   00456500
.ZG163C         ANOP  ,                                                 00456600
&ZXTYPE         SETC  'INPUT'     SET IN/OUTPUT                         00456700
.*-------------------------------------------------------------------   00456800
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES          00456900
.ZG164          AIF   ('&XTEST' NE 'COMPLETE').ZG179                    00457000
.*-------------------------------------------------------------------   00457100
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS               00457200
&ZCVAL          SETC ''           ERROR KEY FIELD                       00457300
.ZG164I0        AIF   (K'&PRIMLEN LE 0).ZG164I1                         00457400
&ZCVAL          SETC '&ZCVAL PRIMLEN'           DISALLOWED KEY          00457500
.ZG164I1        AIF   (K'&SECLEN LE 0).ZG164I2                          00457600
&ZCVAL          SETC '&ZCVAL SECLEN'            DISALLOWED KEY          00457700
.ZG164I2        AIF   (K'&VARLEN LE 0).ZG164I3                          00457800
&ZCVAL          SETC '&ZCVAL VARLEN'            DISALLOWED KEY          00457900
.ZG164I3        AIF   (K'&ARCHLEV LE 0).ZG164I4                         00458000
&ZCVAL          SETC '&ZCVAL ARCHLEV'           DISALLOWED KEY          00458100
.ZG164I4        AIF   (K'&DAE LE 0).ZG164I5                             00458200
&ZCVAL          SETC '&ZCVAL DAE'               DISALLOWED KEY          00458300
.ZG164I5        AIF   (K'&COMPDSC LE 0).ZG164I6                         00458400
&ZCVAL          SETC '&ZCVAL COMPDSC'           DISALLOWED KEY          00458500
.ZG164I6        AIF   (K'&PROBLEM LE 0).ZG164I7                         00458600
&ZCVAL          SETC '&ZCVAL PROBLEM'           DISALLOWED KEY          00458700
.ZG164I7        AIF   (K'&SERVLEV LE 0).ZG164I8                         00458800
&ZCVAL          SETC '&ZCVAL SERVLEV'           DISALLOWED KEY          00458900
.ZG164I8        AIF   (K'&XNOCONVERTS LE 0).ZG164I9                     00459000
&ZCVAL          SETC '&ZCVAL XNOCONVERTS'       DISALLOWED KEY          00459100
.ZG164I9        AIF   (K'&IBM LE 0).ZG164I10                            00459200
&ZCVAL          SETC '&ZCVAL IBM'               DISALLOWED KEY          00459300
.ZG164I10       AIF   (K'&PROGRAM LE 0).ZG164I11                        00459400
&ZCVAL          SETC '&ZCVAL PROGRAM'           DISALLOWED KEY          00459500
.ZG164I11       AIF   (K'&PROGLEV LE 0).ZG164I12                        00459600
&ZCVAL          SETC '&ZCVAL PROGLEV'           DISALLOWED KEY          00459700
.ZG164I12       AIF   (K'&COMPID LE 0).ZG164I13                         00459800
&ZCVAL          SETC '&ZCVAL COMPID'            DISALLOWED KEY          00459900
.ZG164I13       AIF   (K'&COMPLEV LE 0).ZG164I14                        00460000
&ZCVAL          SETC '&ZCVAL COMPLEV'           DISALLOWED KEY          00460100
.ZG164I14       AIF   (K'&PID LE 0).ZG164I15                            00460200
&ZCVAL          SETC '&ZCVAL PID'               DISALLOWED KEY          00460300
.ZG164I15       AIF   (K'&PIDLEVEL LE 0).ZG164I16                       00460400
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          DISALLOWED KEY          00460500
.ZG164I16       AIF   (K'&SUBSYSTEM LE 0).ZG164I17                      00460600
&ZCVAL          SETC '&ZCVAL SUBSYSTEM'         DISALLOWED KEY          00460700
.ZG164I17       AIF   (K'&SDBSTRING LE 0).ZG164I18                      00460800
&ZCVAL          SETC '&ZCVAL SDBSTRING'         DISALLOWED KEY          00460900
.ZG164I18       AIF   (K'&SDBLEN LE 0).ZG164I19                         00461000
&ZCVAL          SETC '&ZCVAL SDBLEN'            DISALLOWED KEY          00461100
.ZG164I19       AIF   (K'&SDBLENVAR LE 0).ZG164I20                      00461200
&ZCVAL          SETC '&ZCVAL SDBLENVAR'         DISALLOWED KEY          00461300
.ZG164I20       AIF   (K'&SDBKEY LE 0).ZG164I21                         00461400
&ZCVAL          SETC '&ZCVAL SDBKEY'            DISALLOWED KEY          00461500
.ZG164I21       AIF   (K'&DATA LE 0).ZG164I22                           00461600
&ZCVAL          SETC '&ZCVAL DATA'              DISALLOWED KEY          00461700
.ZG164I22       AIF   (K'&LEN LE 0).ZG164I23                            00461800
&ZCVAL          SETC '&ZCVAL LEN'               DISALLOWED KEY          00461900
.ZG164I23       AIF   (K'&LENVAR LE 0).ZG164I24                         00462000
&ZCVAL          SETC '&ZCVAL LENVAR'            DISALLOWED KEY          00462100
.ZG164I24       AIF   (K'&CONVERT LE 0).ZG164I25                        00462200
&ZCVAL          SETC '&ZCVAL CONVERT'           DISALLOWED KEY          00462300
.ZG164I25       AIF   (K'&TYPE LE 0).ZG164I26                           00462400
&ZCVAL          SETC '&ZCVAL TYPE'              DISALLOWED KEY          00462500
.ZG164I26       AIF   (K'&S5KEY LE 0).ZG164I27                          00462600
&ZCVAL          SETC '&ZCVAL S5KEY'             DISALLOWED KEY          00462700
.ZG164I27       AIF   (K'&ZCVAL LE 0).ZG164J    KEY                     00462800
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00462900
                AIF  (K'&ZCVAL LE 160).ZG164K                           00463000
&ZCVAL          SETC '&ZCVAL'(1,160)                                    00463100
&ZCVAL          SETC '&ZCVAL....'                                       00463200
.ZG164K         ANOP                                                    00463300
&ZMS            SETC  '"COMPLETE'               *KMEIA* MNOTE           00463400
&ZMS            SETC  '&ZMS."'                                          00463500
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00463600
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00463700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00463800
.ZG164J         ANOP  ,                                                 00463900
.*----------------------------------------------------------------***   00464000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00464100
                AIF   (N'&SR LE 1).ZG166A       CK NUM                  00464200
&ZMS            SETC  '"SR='      *KPOSA* MNOTE                         00464300
&ZMS            SETC  '&ZMS.&SR"'                                       00464400
&ZMS            SETC  '&ZMS "SR"'                                       00464500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00464600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00464700
.ZG166A         ANOP  ,                                                 00464800
.*-------------------------------------------------------------------   00464900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00465000
&ZXSR           SETC  'INPUT'     SET IN/OUTPUT                         00465100
&XSR            SETC  'SR_IN_R1'                                        00465200
                AIF   (K'&SR(1) LE 0).ZG166B    PARM                    00465300
&XSR            SETC  '&SR(1)'    SET XVARIABLE                         00465400
                AIF   (N'&SR GT 1).ZG166B       MULTI PARMS             00465500
&XSR            SETC  '&SR'       SET XVARIABLE                         00465600
.ZG166B         ANOP  ,                                                 00465700
.*-------------------------------------------------------------------   00465800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00465900
                AIF   (K'&ZXSR LE 0).ZG166R     NOT I/O                 00466000
                AIF   ('&XSR' EQ 'SR_IN_R1').ZG166R                     00466100
                AIF   ('&XSR'(1,1) NE '(').ZG166R                       00466200
&ZCGPR          SETC  '&XSR'(2,K'&XSR-2)                                00466300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG166P                     00466400
                AIF   (K'&ZCGPR GT 2).ZG166Q                            00466500
                AIF   ('&ZCGPR' EQ '0').ZG166Q                          00466600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00466700
                AIF   (T'&ZCGPR NE 'N').ZG166Q  INVALID REG NAME        00466800
.ZG166P         ANOP  ,                                                 00466900
                AIF   (T'&ZCGPR NE 'N').ZG166R  NON NUMERIC             00467000
                AIF   ('&ZCGPR' LT '2').ZG166Q                          00467100
                AIF   ('&ZCGPR' LE '12').ZG166R                         00467200
.ZG166Q         ANOP  ,                                                 00467300
&ZMS            SETC  '"SR='      *KGPRA* MNOTE                         00467400
&ZMS            SETC  '&ZMS.&SR"'                                       00467500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00467600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00467700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00467800
.ZG166R         ANOP  ,                                                 00467900
.*------------------------------------------------------------------    00468000
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00468100
&XINVOKE        SETC  ''          INITIALIZE XVARIABLE                  00468200
.*-------------------------------------------------------------------   00468300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00468400
.ZG170          ANOP  ,                                                 00468500
                AIF   (K'&INVOKE(1) LE 0).ZG170A                        00468600
&ZTLC           SETC 'YES'                                              00468700
                AIF   ('&INVOKE(1)' NE '&ZTLC').ZG177                   00468800
&XINVOKE        SETC  'YES'       SET KEYWORD                           00468900
                AIF   (N'&INVOKE LE 1).ZG170A   CK NUM                  00469000
&ZMS            SETC  '"INVOKE='  *KPOSA* MNOTE                         00469100
&ZMS            SETC  '&ZMS.&INVOKE"'                                   00469200
&ZMS            SETC  '&ZMS "INVOKE"'                                   00469300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00469400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00469500
.ZG170A         ANOP  ,                                                 00469600
.*----------------------------------------------------------------***   00469700
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00469800
                AIF   (N'&RETCODE LE 1).ZG172A  CK NUM                  00469900
&ZMS            SETC  '"RETCODE='               *KPOSA* MNOTE           00470000
&ZMS            SETC  '&ZMS.&RETCODE"'                                  00470100
&ZMS            SETC  '&ZMS "RETCODE"'                                  00470200
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00470300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00470400
.ZG172A         ANOP  ,                                                 00470500
.*-------------------------------------------------------------------   00470600
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00470700
&ZXRETCODE      SETC  'INPUT'     SET IN/OUTPUT                         00470800
&XRETCODE       SETC  'NO_RETURN_CODE'                                  00470900
                AIF   (K'&RETCODE(1) LE 0).ZG172B  PARM                 00471000
&XRETCODE       SETC  '&RETCODE(1)'             SET XVARIABLE           00471100
                AIF   (N'&RETCODE GT 1).ZG172B  MULTI PARMS             00471200
&XRETCODE       SETC  '&RETCODE'  SET XVARIABLE                         00471300
.ZG172B         ANOP  ,                                                 00471400
.*-------------------------------------------------------------------   00471500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00471600
                AIF   (K'&ZXRETCODE LE 0).ZG172R  NOT I/O               00471700
                AIF   ('&XRETCODE' EQ 'NO_RETURN_CODE').ZG172R          00471800
                AIF   ('&XRETCODE'(1,1) NE '(').ZG172R                  00471900
&ZCGPR          SETC  '&XRETCODE'(2,K'&XRETCODE-2)                      00472000
                AIF   ('&ZCGPR'(1,1) NE '0').ZG172P                     00472100
                AIF   (K'&ZCGPR GT 2).ZG172Q                            00472200
                AIF   ('&ZCGPR' EQ '0').ZG172Q                          00472300
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00472400
                AIF   (T'&ZCGPR NE 'N').ZG172Q  INVALID REG NAME        00472500
.ZG172P         ANOP  ,                                                 00472600
                AIF   (T'&ZCGPR NE 'N').ZG172R  NON NUMERIC             00472700
                AIF   ('&ZCGPR' LT '2').ZG172Q                          00472800
                AIF   ('&ZCGPR' LE '12').ZG172R                         00472900
.ZG172Q         ANOP  ,                                                 00473000
&ZMS            SETC  '"RETCODE='               *KGPRA* MNOTE           00473100
&ZMS            SETC  '&ZMS.&RETCODE"'                                  00473200
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00473300
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00473400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00473500
.ZG172R         ANOP  ,                                                 00473600
.*----------------------------------------------------------------***   00473700
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00473800
                AIF   (N'&RSNCODE LE 1).ZG175A  CK NUM                  00473900
&ZMS            SETC  '"RSNCODE='               *KPOSA* MNOTE           00474000
&ZMS            SETC  '&ZMS.&RSNCODE"'                                  00474100
&ZMS            SETC  '&ZMS "RSNCODE"'                                  00474200
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00474300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00474400
.ZG175A         ANOP  ,                                                 00474500
.*-------------------------------------------------------------------   00474600
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00474700
&ZXRSNCODE      SETC  'INPUT'     SET IN/OUTPUT                         00474800
&XRSNCODE       SETC  'NO_REASON_CODE'                                  00474900
                AIF   (K'&RSNCODE(1) LE 0).ZG175B  PARM                 00475000
&XRSNCODE       SETC  '&RSNCODE(1)'             SET XVARIABLE           00475100
                AIF   (N'&RSNCODE GT 1).ZG175B  MULTI PARMS             00475200
&XRSNCODE       SETC  '&RSNCODE'  SET XVARIABLE                         00475300
.ZG175B         ANOP  ,                                                 00475400
.*-------------------------------------------------------------------   00475500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00475600
                AIF   (K'&ZXRSNCODE LE 0).ZG175R  NOT I/O               00475700
                AIF   ('&XRSNCODE' EQ 'NO_REASON_CODE').ZG175R          00475800
                AIF   ('&XRSNCODE'(1,1) NE '(').ZG175R                  00475900
&ZCGPR          SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                      00476000
                AIF   ('&ZCGPR'(1,1) NE '0').ZG175P                     00476100
                AIF   (K'&ZCGPR GT 2).ZG175Q                            00476200
                AIF   ('&ZCGPR' EQ '0').ZG175Q                          00476300
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00476400
                AIF   (T'&ZCGPR NE 'N').ZG175Q  INVALID REG NAME        00476500
.ZG175P         ANOP  ,                                                 00476600
                AIF   (T'&ZCGPR NE 'N').ZG175R  NON NUMERIC             00476700
                AIF   ('&ZCGPR' LT '2').ZG175Q                          00476800
                AIF   ('&ZCGPR' LE '12').ZG175R                         00476900
.ZG175Q         ANOP  ,                                                 00477000
&ZMS            SETC  '"RSNCODE='               *KGPRA* MNOTE           00477100
&ZMS            SETC  '&ZMS.&RSNCODE"'                                  00477200
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00477300
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00477400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00477500
.ZG175R         ANOP  ,                                                 00477600
.*-------------------------------------------------------------------   00477700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00477800
.ZG177          ANOP  ,                                                 00477900
&ZTLC           SETC 'NO'                                               00478000
                AIF   ('&INVOKE(1)' NE '&ZTLC').ZG178                   00478100
&XINVOKE        SETC  'NO'        SET KEYWORD                           00478200
                AIF   (N'&INVOKE LE 1).ZG177A   CK NUM                  00478300
&ZMS            SETC  '"INVOKE='  *KPOSA* MNOTE                         00478400
&ZMS            SETC  '&ZMS.&INVOKE"'                                   00478500
&ZMS            SETC  '&ZMS "INVOKE"'                                   00478600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00478700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00478800
.ZG177A         ANOP  ,                                                 00478900
.*------------------------------------------------------------------    00479000
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00479100
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00479200
.ZG177A0        AIF   (K'&RETCODE LE 0).ZG177A1  OK                     00479300
&ZCVAL          SETC '&ZCVAL RETCODE'           INCORRECT KEY USED      00479400
.ZG177A1        AIF   (K'&RSNCODE LE 0).ZG177A2  OK                     00479500
&ZCVAL          SETC '&ZCVAL RSNCODE'           INCORRECT KEY USED      00479600
.ZG177A2        AIF   (K'&ZCVAL LE 0).ZG177A3   OK                      00479700
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00479800
&ZMS            SETC  '"INVOKE'   *KMEIA* MNOTE                         00479900
&ZMS            SETC  '&ZMS.=&INVOKE"'                                  00480000
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00480100
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00480200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00480300
.ZG177A3        ANOP  ,                                                 00480400
.*------------------------------------------------------------------    00480500
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00480600
.ZG178          ANOP  ,                                                 00480700
&ZXINVOKE       SETC  'INPUT'     SET IN/OUTPUT                         00480800
                AIF   (K'&XINVOKE GT 0).ZG178E  VALID ARG               00480900
                AIF   (T'&INVOKE EQ 'O').ZG178D  OMITTED                00481000
&ZASYSLNDX      SETA  0                                                 00481100
.ZG178A         ANOP  ,           POSITIONAL MACRO KEY                  00481200
&ZASYSLNDX      SETA  &ZASYSLNDX+1                                      00481300
                AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG178C                 00481400
&ZTLC           SETC 'INVOKE'                                           00481500
                AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG178A        00481600
.ZG178B         ANOP  ,                                                 00481700
&ZXINVOKE       SETC  ''          RESET IN/OUTPUT                       00481800
&ZMS            SETC  'THE "INVOKE" KEY'        *KOPTA* MNOTE           00481900
&ZMS            SETC  '&ZMS MUST CONTAIN ONE'                           00482000
                MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                  00482100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00482200
                AGO   .ZG178E                                           00482300
.ZG178C         ANOP  ,                                                 00482400
&ZXINVOKE       SETC  ''          RESET IN/OUTPUT                       00482500
&ZMS            SETC  '"INVOKE='  *KUKWA* MNOTE                         00482600
&ZMS            SETC  '&ZMS.&INVOKE"'                                   00482700
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00482800
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00482900
&ZMS            SETC  '&ZMS "YES"'              VALID KEYWORD           00483000
&ZMS            SETC  '&ZMS OR "NO".'           VALID KEYWORD           00483100
                MNOTE 8,' &ZMS '                                        00483200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00483300
                AGO   .ZG178E                                           00483400
.ZG178D         ANOP  ,                                                 00483500
&XINVOKE        SETC  'YES'       SET DEFAULT KEYWORD                   00483600
.ZG178E         ANOP  ,                                                 00483700
.*-------------------------------------------------------------------   00483800
.***AG.KMEKY15 VALUE, RQD INPUT, ME KEYS -END                           00483900
.ZG179          ANOP  ,           END MUTUALLY EXCLUSIVE KEYS           00484000
.******************************************************************     00484100
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00484200
.******************************************************************     00484300
                ACTR  10000                                             00484400
.*-------------------------------------------------------------------   00484500
.***AH.P03 EXTRA POSITIONALS AMONG NON-X KEYS                           00484600
&ZCVAL          SETC  ''          ERROR FIELD                           00484700
&ZAWRK          SETA  0           POSITIONAL COUNTER                    00484800
&ZASYSLNDX      SETA  0           NON-X KEY COUNTER                     00484900
.ZGLIST2        ANOP  ,                                                 00485000
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT NON-X KEY          00485100
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZGLIST3  DONE                 00485200
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZGLIST2          00485300
&ZAWRK          SETA  &ZAWRK+1    NEXT POSITIONAL                       00485400
                AIF   (&ZAWRK LE 0).ZGLIST2                             00485500
&ZCVAL          SETC '&ZCVAL,&SYSLIST(&ZASYSLNDX)'  EXTRA               00485600
                AGO   .ZGLIST2                                          00485700
.*                                                                      00485800
.ZGLIST3  AIF  (K'&ZCVAL LE 0).ZGLISTX                                  00485900
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)     STRIP COMMA             00486000
&ZMS            SETC  'POSITIONAL ARGUMENT(S),'  *PPOSA* MNOTE          00486100
&ZMS            SETC  '&ZMS "&ZCVAL"'                                   00486200
&ZMS            SETC  '&ZMS CANNOT BE USED.'                            00486300
&ZMS            SETC  '&ZMS NO POSITIONAL ARGUMENTS'                    00486400
                MNOTE 8,' &ZMS ARE ALLOWED.'                            00486500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00486600
.ZGLISTX        ANOP  ,                                                 00486700
&ZASYSLNDX      SETA  0                                                 00486800
.*******************************************************************    00486900
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00487000
.*******************************************************************    00487100
                AIF   (&ZMACRET NE 0).ZLX2      ERROR DETECTED          00487200
.*******************************************************************    00487300
.***AE.01  START OF SYMRBLD MACRO CODE                                  00487400
.*******************************************************************    00487500
                LCLC  &M0M0001                 NAME                     00487600
&M0M0001        SETC  '&XLABEL'                SET NAME                 00487700
                AIF   (K'&XLABEL NE 0).XLAB2                            00487800
&M0M0001        SETC  'M00M&SYSNDX'            DEFAULT NAME             00487900
.*                                                                      00488000
.XLAB2          ANOP  ,                                                 00488100
&M0M0001 DS    0H                             SYMRBLD-0                 00488200
.*******************************************************************    00488300
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00488400
.*******************************************************************    00488500
              PUSH  PRINT                                               00488600
                AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON        00488700
                PRINT OFF         ++ PR01                               00488800
                AGO   .ZPRNTXX                                          00488900
.ZPRINTX        PRINT ON                                                00489000
.ZPRNTXX        ANOP  ,                                                 00489100
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00489200
.* Test for len and lenvar being mutually exclusive                     00489300
         AIF   ('&LENVAR' EQ '' OR '&LEN' EQ '').OKME                   00489400
     MNOTE 8,' "LEN" IS MUTUALLY EXCLUSIVE WITH THE "LENVAR" KEY.'      00489500
&ZMACRET SETA  8                                                        00489600
         AGO   .ENDSR                                                   00489700
.OKME    ANOP                                                           00489800
.* Test for SDBLEN and SDBLENvar being mutually exclusive               00489900
         AIF   ('&SDBLENVAR' EQ '' OR '&SDBLEN' EQ '').OKME2            00490000
     MNOTE 8,'"SDBLEN" IS MUTUALLY EXCLUSIVE WITH THE "SDBLENVAR" KEY.' 00490100
&ZMACRET SETA  8                                                        00490200
         AGO   .ENDSR                                                   00490300
.OKME2   ANOP                                                           00490400
     AIF   ('&ZXPRIMARY' NE 'INPUT').T1                                 00490500
     AIF   ('&SDBKEY' NE '' AND '&SDBKEY(1)' NE 'NO_SDBKEY').T1         00490600
     AIF ('&SDBSTRING' NE '' AND '&SDBSTRING(1)' NE 'NO_SDB_STRING').T1 00490700
&TEMPC   SETC 'WHEN "PRIMARY" IS SPECIFIED, THE "SDBKEY" KEY OR '       00490800
&TEMPC   SETC '&TEMPC.THE "SDBSTRING" KEY IS REQUIRED.'                 00490900
      MNOTE 8,' &TEMPC.'                                                00491000
&ZMACRET SETA  8                                                        00491100
         AGO   .ENDSR                                                   00491200
.T1      ANOP                                                           00491300
     AIF   ('&ZXSECONDARY' NE 'INPUT').T2                               00491400
     AIF   ('&SDBKEY' NE '' AND '&SDBKEY(1)' NE 'NO_SDBKEY').T2         00491500
     AIF ('&SDBSTRING' NE '' AND '&SDBSTRING(1)' NE 'NO_SDB_STRING').T2 00491600
&TEMPC   SETC 'WHEN "SECONDARY" IS SPECIFIED, THE "SDBKEY" KEY OR '     00491700
&TEMPC   SETC '&TEMPC.THE "SDBSTRING" KEY IS REQUIRED.'                 00491800
      MNOTE 8,' &TEMPC.'                                                00491900
&ZMACRET SETA  8                                                        00492000
         AGO   .ENDSR                                                   00492100
.T2      ANOP                                                           00492200
.* Test SYSSTATE, if P then set &LA variable to LA, else to LAE         00492300
         GBLC  &SYSASCE                                                 00492400
         SYSSTATE TEST                   Get ASC environment            00492500
&LA      SETC  'LA'                      P/S/H, use LA instruction      00492600
         AIF   ('&SYSASCE' EQ 'P').ASCP  Test for AR environment        00492700
&LA      SETC  'LAE'                     AR mode, use LAE instruction   00492800
.ASCP    ANOP                                                           00492900
          LCLA  &SR2OFF,&SR21OFF,&SR2LEN,&SR21LEN,&SAVEAREA             00493000
          LCLA  &ADSR,&SAVEALEN,&SR3OFF,&SRHEADER                       00493100
          LCLC  &TEMPC,&TEMPCA,&KEYVAL,&CUR,&END,&S,&T1                 00493200
          LCLC  &TEMPC2,&TPID                                           00493300
          LCLA  &KEYLEN,&L1,&TPIDL                                      00493400
&S        SETC  '&SYSNDX'                                               00493500
&ADSR     SETA  0                                                       00493600
&ADSRID   SETA  &ADSR+0                  'SR' record header             00493700
&ADSRFL1  SETA  &ADSR+54                 Offset to FL1             @01A 00493800
&SR2OFF   SETA  64                       Offset to SR2                  00493900
          LCLA &ADSRARID,&ADSRL,&ADSRCSL,&ADSRCSO,&ADSRDBL,&ADSRDBO     00494000
          LCLA &ADSRROSL,&ADSRROSA,&ADSRRONL,&ADSRRONA,&ADSRISL         00494100
          LCLA &ADSRISA                                                 00494200
&ADSRARID SETA &SR2OFF+0                 Architectural level            00494300
&ADSRL    SETA &SR2OFF+2                 Length of SR2                  00494400
&ADSRCSL  SETA &SR2OFF+4                 Length of SR2.1                00494500
&ADSRCSO  SETA &SR2OFF+6                 Offset to SR2.1                00494600
&ADSRDBL  SETA &SR2OFF+8                 Length of SR3                  00494700
&ADSRDBO  SETA &SR2OFF+10                Offset to SR3                  00494800
&ADSRROSL SETA &SR2OFF+12                Length of SR4                  00494900
&ADSRROSA SETA &SR2OFF+14                Offset to SR4                  00495000
&ADSRRONL SETA &SR2OFF+16                Length of SR5                  00495100
&ADSRRONA SETA &SR2OFF+18                Offset to SR5                  00495200
&ADSRISL  SETA &SR2OFF+20                Length of SR6                  00495300
&ADSRISA  SETA &SR2OFF+22                Offset to SR6                  00495400
&SR21OFF  SETA  112                      Offset to SR2.1                00495500
&SR2LEN   SETA  &SR21OFF-&SR2OFF         Length of SR2                  00495600
          LCLA &ADSRC,&ADSRCRL,&ADSRCID,&ADSRFLC,&ADSRLVL,&ADSRPTF      00495700
          LCLA &ADSRPID,&ADSRPIDL,&ADSRCDSC,&ADSRPRID,&ADSRSSID         00495800
&ADSRC    SETA &SR21OFF+0                'SR21' ID                      00495900
&ADSRCRL  SETA &SR21OFF+4                Architectural level            00496000
&ADSRCID  SETA &SR21OFF+6                Component ID                   00496100
&ADSRFLC  SETA &SR21OFF+15               Flags                          00496200
&ADSRLVL  SETA &SR21OFF+16               Component release level        00496300
&ADSRPTF  SETA &SR21OFF+20               Service Level                  00496400
&ADSRPID  SETA &SR21OFF+28               PID                            00496500
&ADSRPIDL SETA &SR21OFF+36               PID level                      00496600
&ADSRCDSC SETA &SR21OFF+44               Component Description          00496700
&ADSRPRID SETA &SR21OFF+84               Program ID                     00496800
&ADSRSSID SETA &SR21OFF+92               Subsystem ID                   00496900
&SR21LEN  SETA  100                      Length of SR2.1                00497000
&SAVEAREA SETA  &SR21OFF+&SR21LEN        Offset to 100-byte Savearea    00497100
&SRHEADER SETA  &SAVEAREA                Length of SR1, SR2, SR2.1      00497200
          LCLA  &SR3CUR,&SR3END,&SR4CUR,&SR4END,&SR5CUR,&SR5END         00497300
          LCLA  &PR@OUT,&PR@OUT1,&PR@HEX,&SRLIST                        00497400
          LCLA  &SR3LEN,&SR4LEN,&SR5LEN,&SR3PLEN                        00497500
&SR3CUR   SETA  &SAVEAREA+0              Current loc for SR3            00497600
&SR3END   SETA  &SAVEAREA+4              End of SR3 section             00497700
&SR4CUR   SETA  &SAVEAREA+8              Current loc for SR4            00497800
&SR4END   SETA  &SAVEAREA+12             End of SR4 section             00497900
&SR5CUR   SETA  &SAVEAREA+16             Current loc for SR5            00498000
&SR5END   SETA  &SAVEAREA+20             End of SR5 section             00498100
&SRLIST   SETA  &SAVEAREA+24             Use for SYMREC List form       00498200
&PR@OUT1  SETA  &SAVEAREA+33             Work area for convert          00498300
&PR@HEX   SETA  &SAVEAREA+40             TR table for convert           00498400
&SR3LEN   SETA  &SAVEAREA+56             Length of primary area         00498500
&SR4LEN   SETA  &SAVEAREA+58             Length of secondary area       00498600
&SR5LEN   SETA  &SAVEAREA+60             Length of variable area        00498700
&SR3PLEN  SETA  &SAVEAREA+62             Length used for PIDS/ part     00498800
&PR@OUT   SETA  &SAVEAREA+68             Work area for convert          00498900
&SAVEALEN SETA  100                                                     00499000
&SR2LEN   SETA  &SR21OFF-&SR2OFF         Length of SR2                  00499100
&SR21LEN  SETA  &SAVEAREA-&SR21OFF       Length of SR2.1                00499200
&SR3OFF   SETA  &SAVEAREA+&SAVEALEN      Offset to SR3                  00499300
.*                                                                      00499400
.* Determine SDB key string and length to use                           00499500
         AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').NOSDB    Is SDBKEY specified 00499600
         AIF   ('&SDBKEY' EQ '').NOSDB    Is SDBKEY specified           00499700
         AIF   ('&SDBKEY'(1,1) EQ '''').QUOSDB Start with quote         00499800
         AIF   ('&SDBKEY' NE 'SDBAB_S').SDB2 Is it AB_S                 00499900
&KEYVAL  SETC  'AB/S'                    Use AB/S                       00500000
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00500100
         AGO   .NOS5                                                    00500200
.SDB2    AIF   ('&SDBKEY' NE 'SDBAB_U').SDB3 Is it AB_U                 00500300
&KEYVAL  SETC  'AB/U'                    Use AB/U                       00500400
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00500500
         AGO   .NOS5                                                    00500600
.SDB3    AIF   ('&SDBKEY' NE 'SDBADRS').SDB4 Is it ADRS                 00500700
&KEYVAL  SETC  'ADRS/'                   Use ADRS/                      00500800
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00500900
         AGO   .NOS5                                                    00501000
.SDB4    AIF   ('&SDBKEY' NE 'SDBBOMS').SDB5 Is it BOMS                 00501100
&KEYVAL  SETC  'BOMS/'                   Use BOMS/                      00501200
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00501300
         AGO   .NOS5                                                    00501400
.SDB5    AIF   ('&SDBKEY' NE 'SDBBPS').SDB6 Is it BPS                   00501500
&KEYVAL  SETC  'BPS/'                    Use BPS/                       00501600
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00501700
         AGO   .NOS5                                                    00501800
.SDB6    AIF   ('&SDBKEY' NE 'SDBCLS').SDB7 Is it CLS                   00501900
&KEYVAL  SETC  'CLS/'                    Use CLS/                       00502000
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00502100
         AGO   .NOS5                                                    00502200
.SDB7    AIF   ('&SDBKEY' NE 'SDBDEVS').SDB8 Is it DEVS                 00502300
&KEYVAL  SETC  'DEVS/'                   Use DEVS/                      00502400
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00502500
         AGO   .NOS5                                                    00502600
.SDB8    AIF   ('&SDBKEY' NE 'SDBECAS').SDB9 Is it ECAS                 00502700
&KEYVAL  SETC  'ECAS/'                   Use ECAS/                      00502800
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00502900
         AGO   .NOS5                                                    00503000
.SDB9    AIF   ('&SDBKEY' NE 'SDBFDS').SDB10 Is it FDS                  00503100
&KEYVAL  SETC  'FDS/'                    Use FDS/                       00503200
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00503300
         AGO   .NOS5                                                    00503400
.SDB10   AIF   ('&SDBKEY' NE 'SDBFEAS').SDB11 Is it FEAS                00503500
&KEYVAL  SETC  'FEAS/'                   Use FEAS/                      00503600
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00503700
         AGO   .NOS5                                                    00503800
.SDB11   AIF   ('&SDBKEY' NE 'SDBFLDS').SDB12 Is it FLDS                00503900
&KEYVAL  SETC  'FLDS/'                   Use FLDS/                      00504000
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00504100
         AGO   .NOS5                                                    00504200
.SDB12   AIF   ('&SDBKEY' NE 'SDBHL_D').SDB13 Is it HD_D                00504300
&KEYVAL  SETC  'HL/D'                    Use HL/D                       00504400
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00504500
         AGO   .NOS5                                                    00504600
.SDB13   AIF   ('&SDBKEY' NE 'SDBHL_S').SDB14 Is it HD_S                00504700
&KEYVAL  SETC  'HL/S'                    Use HL/S                       00504800
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00504900
         AGO   .NOS5                                                    00505000
.SDB14   AIF   ('&SDBKEY' NE 'SDBIOPS').SDB15 Is it IOPS                00505100
&KEYVAL  SETC  'IOPS/'                   Use IOPS/                      00505200
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00505300
         AGO   .NOS5                                                    00505400
.SDB15   AIF   ('&SDBKEY' NE 'SDBLVLS').SDB16 Is it LVLS                00505500
&KEYVAL  SETC  'LVLS/'                   Use LVLS/                      00505600
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00505700
         AGO   .NOS5                                                    00505800
.SDB16   AIF   ('&SDBKEY' NE 'SDBMAUS').SDB17 Is it MAUS                00505900
&KEYVAL  SETC  'MAUS/'                   Use MAUS/                      00506000
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00506100
         AGO   .NOS5                                                    00506200
.SDB17   AIF   ('&SDBKEY' NE 'SDBMEP').SDB18 Is it MEP                  00506300
&KEYVAL  SETC  'MEP/'                    Use MEP/                       00506400
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00506500
         AGO   .NOS5                                                    00506600
.SDB18   AIF   ('&SDBKEY' NE 'SDBMIUS').SDB19 Is it MIUS                00506700
&KEYVAL  SETC  'MIUS/'                   Use MIUS/                      00506800
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00506900
         AGO   .NOS5                                                    00507000
.SDB19   AIF   ('&SDBKEY' NE 'SDBMS').SDB20 Is it MS                    00507100
&KEYVAL  SETC  'MS/'                     Use MS/                        00507200
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00507300
         AGO   .NOS5                                                    00507400
.SDB20   AIF   ('&SDBKEY' NE 'SDBOPCS').SDB21 Is it OPCS                00507500
&KEYVAL  SETC  'OPCS/'                   Use OPCS/                      00507600
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00507700
         AGO   .NOS5                                                    00507800
.SDB21   AIF   ('&SDBKEY' NE 'SDBOVS').SDB22 Is it OVS                  00507900
&KEYVAL  SETC  'OVS/'                    Use OVS/                       00508000
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00508100
         AGO   .NOS5                                                    00508200
.SDB22   AIF   ('&SDBKEY' NE 'SDBPCSS').SDB23 Is it PCSS                00508300
&KEYVAL  SETC  'PCSS/'                   Use PCSS/                      00508400
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00508500
         AGO   .NOS5                                                    00508600
.SDB23   AIF   ('&SDBKEY' NE 'SDBPIDS').SDB24 Is it PIDS                00508700
&KEYVAL  SETC  'PIDS/'                   Use PIDS/                      00508800
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00508900
         AGO   .NOS5                                                    00509000
.SDB24   AIF   ('&SDBKEY' NE 'SDBPNS').SDB25 Is it PNS                  00509100
&KEYVAL  SETC  'PNS/'                    Use PNS/                       00509200
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00509300
         AGO   .NOS5                                                    00509400
.SDB25   AIF   ('&SDBKEY' NE 'SDBPRCS').SDB26 Is it PRCS                00509500
&KEYVAL  SETC  'PRCS/'                     Use PRCS/                    00509600
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00509700
         AGO   .NOS5                                                    00509800
.SDB26   AIF   ('&SDBKEY' NE 'SDBPTFS').SDB27 Is it PTFS                00509900
&KEYVAL  SETC  'PTFS/'                     Use PTFS/                    00510000
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00510100
         AGO   .NOS5                                                    00510200
.SDB27   AIF   ('&SDBKEY' NE 'SDBPUBS').SDB28 Is it PUBS                00510300
&KEYVAL  SETC  'PUBS/'                   Use PUBS/                      00510400
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00510500
         AGO   .NOS5                                                    00510600
.SDB28   AIF   ('&SDBKEY' NE 'SDBPZFS').SDB29 Is it PZFS                00510700
&KEYVAL  SETC  'PZFS/'                   Use PZFS/                      00510800
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00510900
         AGO   .NOS5                                                    00511000
.SDB29   AIF   ('&SDBKEY' NE 'SDBREAS').SDB30 Is it REAS                00511100
&KEYVAL  SETC  'REAS/'                   Use REAS/                      00511200
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00511300
         AGO   .NOS5                                                    00511400
.SDB30   AIF   ('&SDBKEY' NE 'SDBRECFM').SDB31 Is it RECFM              00511500
&KEYVAL  SETC  'RECFM/'                  Use RECFM/                     00511600
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00511700
         AGO   .NOS5                                                    00511800
.SDB31   AIF   ('&SDBKEY' NE 'SDBRECO').SDB32 Is it RECO                00511900
&KEYVAL  SETC  'RECO/'                   Use RECO/                      00512000
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00512100
         AGO   .NOS5                                                    00512200
.SDB32   AIF   ('&SDBKEY' NE 'SDBRECS').SDB33 Is it RECS                00512300
&KEYVAL  SETC  'RECS/'                   Use RECS/                      00512400
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00512500
         AGO   .NOS5                                                    00512600
.SDB33   AIF   ('&SDBKEY' NE 'SDBREGS').SDB34 Is it REGS                00512700
&KEYVAL  SETC  'REGS/'                   Use REGS/                      00512800
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00512900
         AGO   .NOS5                                                    00513000
.SDB34   AIF   ('&SDBKEY' NE 'SDBREGS_CR').SDB35 Is it REGCR            00513100
&KEYVAL  SETC  'REGS/CR'                 Use REGS/CR                    00513200
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00513300
         AGO   .NOS5                                                    00513400
.SDB35   AIF   ('&SDBKEY' NE 'SDBREGS_FP').SDB36 Is it REGFP            00513500
&KEYVAL  SETC  'REGS/FP'                 Use REGS/FP                    00513600
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00513700
         AGO   .NOS5                                                    00513800
.SDB36   AIF   ('&SDBKEY' NE 'SDBREGS_GR').SDB37 Is it REGGR            00513900
&KEYVAL  SETC  'REGS/GR'                 Use REGS/GR                    00514000
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00514100
         AGO   .NOS5                                                    00514200
.SDB37   AIF   ('&SDBKEY' NE 'SDBRIDS').SDB38 Is it RIDS                00514300
&KEYVAL  SETC  'RIDS/'                   Use RIDS/                      00514400
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00514500
         AGO   .NOS5                                                    00514600
.SDB38   AIF   ('&SDBKEY' NE 'SDBRIDSL').SDB39 Is it RIDSL              00514700
&KEYVAL  SETC  'RIDS/'                   Use RIDS/                      00514800
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00514900
         AGO   .NOS5                                                    00515000
.SDB39   AIF   ('&SDBKEY' NE 'SDBRIDSR').SDB40 Is it RIDSR              00515100
&KEYVAL  SETC  'RIDS/'                   Use RIDS/                      00515200
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00515300
         AGO   .NOS5                                                    00515400
.SDB40   AIF   ('&SDBKEY' NE 'SDBRPQS').SDB41 Is it RPQS                00515500
&KEYVAL  SETC  'RPQS/'                   Use RPQS/                      00515600
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00515700
         AGO   .NOS5                                                    00515800
.SDB41   AIF   ('&SDBKEY' NE 'SDBSIG').SDB42 Is it SIG                  00515900
&KEYVAL  SETC  'SIG/'                    Use SIG/                       00516000
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00516100
         AGO   .NOS5                                                    00516200
.SDB42   AIF   ('&SDBKEY' NE 'SDBVALU').SDB43 Is it VALU                00516300
&KEYVAL  SETC  'VALU/'                   Use VALU/                      00516400
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00516500
         AGO   .NOS5                                                    00516600
.SDB43   AIF   ('&SDBKEY' NE 'SDBVALU_B').SDB44 Is it VALUB             00516700
&KEYVAL  SETC  'VALU/B'                  Use VALU/B                     00516800
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00516900
         AGO   .NOS5                                                    00517000
.SDB44   AIF   ('&SDBKEY' NE 'SDBVALU_C').SDB45 Is it VALUC             00517100
&KEYVAL  SETC  'VALU/C'                  Use VALU/C                     00517200
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00517300
         AGO   .NOS5                                                    00517400
.SDB45   AIF   ('&SDBKEY' NE 'SDBVALU_H').SDB46 Is it VALUH             00517500
&KEYVAL  SETC  'VALU/H'                  Use VALU/H                     00517600
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00517700
         AGO   .NOS5                                                    00517800
.SDB46   AIF   ('&SDBKEY' NE 'SDBWS_D').SDB47 Is it WS_D                00517900
&KEYVAL  SETC  'WS/D'                    Use WS/D                       00518000
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00518100
         AGO   .NOS5                                                    00518200
.SDB47   AIF   ('&SDBKEY' NE 'SDBWS_E').SDB48 Is it WS_E                00518300
&KEYVAL  SETC  'WS/E'                    Use WS/E                       00518400
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00518500
         AGO   .NOS5                                                    00518600
.SDB48   AIF   ('&SDBKEY' NE 'SDBREGS_AR').SDB49 Is it REGS_AR          00518700
&KEYVAL  SETC  'REGS/AR'                 Use REGS/AR                    00518800
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00518900
         AGO   .NOS5                                                    00519000
.SDB49   ANOP             ..... no more choices .....                   00519100
        MNOTE 8,' "SDBKEY=&SDBKEY" ARGUMENT 1 IS AN UNKNOWN KEYWORD.'   00519200
&ZMACRET SETA  8                                                        00519300
         AGO   .ENDSR                                                   00519400
.QUOSDB  ANOP                             Starts with quote             00519500
&KEYVAL  SETC  '&SDBKEY'(2,K'&SDBKEY-2)   Get rid of quotes             00519600
&KEYLEN  SETA  K'&SDBKEY-2                Get length                    00519700
         AGO   .NOS5                                                    00519800
.NOSDB   ANOP                                                           00519900
         AIF   ('&XS5KEY' EQ 'NO_S5KEY').NOS5  Is S5KEY specified       00520000
         AIF   ('&S5KEY' EQ '').NOS5  Is S5KEY specified                00520100
         AIF   ('&S5KEY'(1,1) EQ '''').QUOS5  Start with quote          00520200
         AIF   ('&S5KEY' NE 'S5EBCDIC').S51 Is S5EBCDIC specified       00520300
&KEYVAL  SETC  'X''F000'''                Get key                       00520400
&KEYLEN  SETA  2                          Key has length of 2           00520500
         AGO   .NOS5                                                    00520600
.S51     ANOP                                                           00520700
         AIF   ('&S5KEY' NE 'S5HEX').S52      Is S5HEX specified        00520800
&KEYVAL  SETC  'X''FF00'''                Get key                       00520900
&KEYLEN  SETA  2                          Key has length of 2           00521000
         AGO   .NOS5                                                    00521100
.S52     ANOP                                                           00521200
&KEYVAL  SETC  '&S5KEY'                   Get key                       00521300
&KEYLEN  SETA  2                          Key has length of 2           00521400
         AGO   .NOS5                                                    00521500
.QUOS5   ANOP                             Starts with quote             00521600
&KEYVAL  SETC  'X&S5KEY'                  Get rid of quotes             00521700
&KEYLEN  SETA  2                          Get length                    00521800
         AGO   .NOS5                                                    00521900
.NOS5    ANOP                                                           00522000
.*                                                                      00522100
.* Get addressability to SR                                             00522200
.*                                                                      00522300
         AIF   ('&SR' EQ '').SRREGE       SR not specified, use R1      00522400
         AIF   ('&XSR' EQ 'SR_IN_R1').SRREGE Default provided           00522500
         AIF   ('&SR'(1,1) EQ '(').SRREG  Is SR a reg                   00522600
         &LA   1,&SR                      Get SR address                00522700
         AGO   .SRREGE                                                  00522800
.SRREG   ANOP                                                           00522900
&TEMPC   SETC  '&SR'(2,K'&SR-2)                                         00523000
         LR    1,&TEMPC                   Get SR reg                    00523100
         AIF   ('&SYSASCE' EQ 'P').SRREGE                               00523200
         CPYA  1,&TEMPC                   Get SR ALET                   00523300
.SRREGE ANOP                                                            00523400
         AIF   ('&ZXINITIAL' NE 'INPUT').RESET Is INIT specified        00523500
.*If INIT                                                               00523600
.* Zero SR1, SR2, SR2.1                                                 00523700
.*                                                                      00523800
         XC    0(&SRHEADER.,1),0(1)       Clear SR1, SR2, SR2.1         00523900
         XC    &SRHEADER.(100,1),0(1)     Clear work area               00524000
.*                                                                      00524100
.* Initialize known parts of SR, SR2, SR2.1                             00524200
.*                                                                      00524300
.* The following uses the CL4 constant so that an extra literal         00524400
.* is not produced                                                      00524500
         MVC   &ADSRID.(2,1),=CL4'SR21'   Set ID to "SR"                00524600
         AIF   ('&DAE' NE  'NO').SKIPOI   DAE=NO?                  @01A 00524700
         OI    &ADSRFL1.(1),X'04'         Set DAE=NO               @01A 00524800
.SKIPOI  ANOP                                                      @01A 00524900
         MVC   &ADSRC.(4,1),=CL4'SR21'    Set section 2.1 ID            00525000
         MVC   &ADSRCRL.(2,1),=CL2'10'    Set Architecture ID           00525100
&T1      SETC  '&SR2LEN'                                                00525200
         MVC   &ADSRL.(2,1),=FL2'&T1'     Set Length of Section 2       00525300
&T1      SETC  '&SR21LEN'                                               00525400
         MVC   &ADSRCSL.(2,1),=FL2'&T1'   Set Length of Section 2.1     00525500
&T1      SETC  '&SR21OFF'                                               00525600
         MVC   &ADSRCSO.(2,1),=FL2'&T1'   Set Offset to Section 2.1     00525700
&T1      SETC  '&SR3OFF'                                                00525800
         MVC   &ADSRDBO.(2,1),=FL2'&T1'   Set Offset to Section 3       00525900
.* Process SR3                                                          00526000
         AIF   ('&PRIMLEN'(1,1) EQ '(').PLEN0   In a reg?               00526100
         AIF   (T'&XPRIMLEN NE 'N').NONUM1                              00526200
         LA    14,&XPRIMLEN               Get length                    00526300
         AGO   .PLEN1                                                   00526400
.NONUM1  ANOP                                                           00526500
         LH    14,&PRIMLEN(1)             Get Length                    00526600
         AGO   .PLEN1                                                   00526700
.PLEN0   ANOP                             Primlen in a reg              00526800
&TEMPC   SETC  '&PRIMLEN'(2,K'&PRIMLEN-2)                               00526900
         LH    14,0(,&TEMPC.)             Fetch length                  00527000
.PLEN1   ANOP                                                           00527100
         STH   14,&SR3LEN.(,1)            Save length                   00527200
&TPIDL   SETA  0                          Assume no PIDS/               00527300
         AIF   ('&PID' EQ '').PNOPID      See if PID specified          00527400
&TPIDL   SETA  8                          Length of PID                 00527500
&TPID    SETC  '&XPID'                                                  00527600
         AIF   ('&PID'(1,1) NE '(').DOPID In a reg                      00527700
&TPID    SETC  '0&PID'                                                  00527800
         AGO   .DOPID                                                   00527900
.PNOPID  AIF   ('&COMPID' EQ '').PNOCOMP  See if COMPID specified       00528000
&TPIDL   SETA  9                          Length of COMPID              00528100
&TPID    SETC  '&XCOMPID'                                               00528200
         AIF   ('&COMPID'(1,1) NE '(').DOPID In a reg                   00528300
&TPID    SETC  '0&COMPID'                                               00528400
         AGO   .DOPID                                                   00528500
.PNOCOMP ANOP                             Program must be specified     00528600
&TPIDL   SETA  8                          Length of PROGRAM             00528700
&TPID    SETC  '&XPROGRAM'                                              00528800
         AIF   ('&PROGRAM'(1,1) NE '(').DOPID In a reg                  00528900
&TPID    SETC  '0&PROGRAM'                                              00529000
.DOPID   ANOP                                                           00529100
         &LA   15,&SR3OFF.(,1)            Set to start of Primary area  00529200
         AIF   (&TPIDL EQ 0).PNOPIDL                                    00529300
         MVC   0(5,15),=CL5'PIDS/'        Move in required PIDS/        00529400
         MVC   5(&TPIDL.,15),&TPID        Move in PIDS/COMPID/PROGRAM   00529500
&L1      SETA  &TPIDL+5                                                 00529600
         MVI   &L1.(15),C' '              Blank out next character      00529700
&L1      SETA  &L1+1                      Get past blank                00529800
         MVI   &SR3PLEN+1(1),&L1          Save length used for PIDS/    00529900
         LA    0,&L1.(,15)                Get next available position   00530000
         ST    0,&SR3CUR.(,1)             Save position in SR3          00530100
         AGO   .PNOPID2                                                 00530200
.PNOPIDL ST    15,&SR3CUR.(,1)            Save position in SR3          00530300
.PNOPID2 ALR   15,14                      Find end of range             00530400
         ST    15,&SR3END.(,1)            Save end of SR3               00530500
         ST    15,&SR4CUR.(,1)            Also start of SR4             00530600
         LR    0,15                       Copy start of SR4             00530700
         SR    0,1                        Decrease by start of SR       00530800
         STH   0,&ADSRROSA.(,1)           Save offset to SR4            00530900
.* Process SR4                                                          00531000
         AIF   ('&XSECLEN' EQ '0').NOSLEN3 Not specified                00531100
         AIF   ('&SECLEN'(1,1) EQ '(').SLEN0   In a reg                 00531200
         AIF   (T'&XSECLEN NE 'N').SNONUM1                              00531300
         LA    14,&XSECLEN                Get length                    00531400
         AGO   .SLEN1                                                   00531500
.SNONUM1 ANOP                                                           00531600
         LH    14,&SECLEN(1)              Get Length                    00531700
         AGO   .SLEN1                                                   00531800
.SLEN0   ANOP                             Seclen in a reg               00531900
&TEMPC   SETC  '&SECLEN'(2,K'&SECLEN-2)                                 00532000
         LH    14,0(,&TEMPC.)             Fetch length                  00532100
.SLEN1   ANOP                                                           00532200
         STH   14,&SR4LEN.(,1)            Save length                   00532300
         AR    15,14                      Add length                    00532400
.NOSLEN3 ANOP                                                           00532500
         ST    15,&SR4END.(,1)            Save end of SR4               00532600
         ST    15,&SR5CUR.(,1)            Also start of SR5             00532700
         LR    0,15                       Copy start of SR5             00532800
         SR    0,1                        Decrease by start of SR       00532900
         STH   0,&ADSRRONA.(,1)           Save offset to SR5            00533000
.* Process SR5                                                          00533100
         AIF   ('&XVARLEN' EQ '0').NOVLEN3 Not specified                00533200
         AIF   ('&VARLEN'(1,1) EQ '(').VLEN0   In a reg                 00533300
         AIF   (T'&XVARLEN NE 'N').VNONUM1                              00533400
         LA    14,&XVARLEN                Get length                    00533500
         AGO   .VLEN1                                                   00533600
.VNONUM1 ANOP                                                           00533700
         LH    14,&VARLEN(1)              Get Length                    00533800
         AGO   .VLEN1                                                   00533900
.VLEN0   ANOP                             Varlen in a reg               00534000
&TEMPC   SETC  '&VARLEN'(2,K'&VARLEN-2)                                 00534100
         LH    14,0(,&TEMPC.)             Fetch length                  00534200
.VLEN1   ANOP                                                           00534300
         STH   14,&SR5LEN.(,1)            Save length                   00534400
         ALR   15,14                      Find end of range             00534500
.NOVLEN3 ANOP                                                           00534600
         ST    15,&SR5END.(,1)            Save end of SR5               00534700
         AIF   ('&XNOCONVERTS' NE 'CONVERSIONS').NOCONV Convert wanted  00534800
         MVC   &PR@HEX.(16,1),=CL16'0123456789ABCDEF' Set TR string     00534900
.NOCONV  ANOP                                                           00535000
.* Fillin compdsc                                                       00535100
.*   If specified then LAE/MVC                                          00535200
         AIF  ('&XCOMPDSC' EQ 'NO_COMPDSC').NOCDSC  COMPDSC specified   00535300
         AIF  ('&COMPDSC' EQ '').NOCDSC  COMPDSC specified              00535400
&TEMPC   SETC  '&COMPDSC(1)'                                            00535500
         AIF   ('&COMPDSC'(1,1) NE '(').CDSCNR                          00535600
&TEMPC   SETC  '0&COMPDSC'                                              00535700
.CDSCNR  MVC   &ADSRCDSC.(32,1),&TEMPC    Move COMPDSC into SR2.1       00535800
.NOCDSC  ANOP                                                           00535900
.* Fillin problem                                                       00536000
         AIF   ('&XPROBLEM' EQ 'NO_PROBLEM').NOPROB                     00536100
         AIF   ('&PROBLEM' EQ '').NOPROB                                00536200
&TEMPC   SETC  '&PROBLEM(1)'                                            00536300
         AIF   ('&PROBLEM'(1,1) NE '(').PROBNR                          00536400
&TEMPC   SETC  '0&PROBLEM'                                              00536500
.PROBNR  MVC   &ADSRPRID.(8,1),&TEMPC     Move PROBLEM into SR2.1       00536600
.NOPROB  ANOP                                                           00536700
.* Fillin SERVLEV                                                       00536800
         AIF   ('&XSERVLEV' EQ 'NO_SERVICE_LEVEL').NOSERVL              00536900
         AIF   ('&SERVLEV' EQ '').NOSERVL                               00537000
&TEMPC   SETC  '&SERVLEV(1)'                                            00537100
         AIF   ('&SERVLEV'(1,1) NE '(').SERVLNR                         00537200
&TEMPC   SETC  '0&SERVLEV'                                              00537300
.SERVLNR MVC   &ADSRPTF.(8,1),&TEMPC      Move SERVLEV into SR2.1       00537400
.NOSERVL ANOP                                                           00537500
.* Fillin IBM no/yes                                                    00537600
.*   If NO then OI bit                                                  00537700
         AIF   ('&IBM' EQ 'YES').IBMYES                                 00537800
         OI    &ADSRFLC.(1),X'80'         Indicate non-IBM SR           00537900
.IBMYES  ANOP                                                           00538000
.* Fillin Program/Proglev                                               00538100
.*   If specified then LAE/MVC                                          00538200
         AIF   ('&XPROGRAM' EQ 'NO_PROGRAM').NOPRGM                     00538300
         AIF   ('&PROGRAM' EQ '').NOPRGM                                00538400
&TEMPC   SETC  '&PROGRAM(1)'                                            00538500
         AIF   ('&PROGRAM'(1,1) NE '(').PRGMNR                          00538600
&TEMPC   SETC  '0&PROGRAM'                                              00538700
.PRGMNR  MVC   &ADSRPID.(8,1),&TEMPC      Move PROGRAM into SR2.1       00538800
.NOPRGM  ANOP                                                           00538900
         AIF   ('&XPROGLEV' EQ 'NO_PROGLEV').NOPRGL                     00539000
         AIF   ('&PROGLEV' EQ '').NOPRGL                                00539100
&TEMPC   SETC  '&PROGLEV(1)'                                            00539200
         AIF   ('&PROGLEV'(1,1) NE '(').PRGLNR                          00539300
&TEMPC   SETC  '0&PROGLEV'                                              00539400
.PRGLNR  MVC   &ADSRPIDL.(8,1),&TEMPC     Move PROGLEV into SR2.1       00539500
.NOPRGL  ANOP                                                           00539600
.* Fillin Compid/Complev                                                00539700
.*   If specified then LAE/MVC                                          00539800
         AIF   ('&COMPID' EQ '').NOCMPI                                 00539900
&TEMPC   SETC  '&COMPID(1)'                                             00540000
         AIF   ('&COMPID'(1,1) NE '(').CMPINR                           00540100
&TEMPC   SETC  '0&COMPID'                                               00540200
.CMPINR  MVC   &ADSRCID.(9,1),&TEMPC      Move COMPID into SR2.1        00540300
.NOCMPI  ANOP                                                           00540400
         AIF   ('&COMPLEV' EQ '').NOCMPL                                00540500
&TEMPC   SETC  '&COMPLEV(1)'                                            00540600
         AIF   ('&COMPLEV'(1,1) NE '(').CMPLNR                          00540700
&TEMPC   SETC  '0&COMPLEV'                                              00540800
.CMPLNR  MVC   &ADSRLVL.(4,1),&TEMPC      Move COMPLEV into SR2.1       00540900
.NOCMPL  ANOP                                                           00541000
.* Fillin Subsystem                                                     00541100
.*   If specified then LAE/MVC                                          00541200
         AIF   ('&XSUBSYSTEM' EQ 'NO_SUBSYSTEM').NOSUBS                 00541300
         AIF   ('&SUBSYSTEM' EQ '').NOSUBS                              00541400
&TEMPC   SETC  '&SUBSYSTEM(1)'                                          00541500
         AIF   ('&SUBSYSTEM'(1,1) NE '(').SUBSNR                        00541600
&TEMPC   SETC  '0&SUBSYSTEM'                                            00541700
.SUBSNR  MVC   &ADSRSSID.(8,1),&TEMPC     Move SUBSYSTEM into SR2.1     00541800
.NOSUBS  ANOP                                                           00541900
.* Fillin PID/PIDL                                                      00542000
.*   If specified then LAE/MVC                                          00542100
         AIF   ('&PID' EQ '').NOPID                                     00542200
&TEMPC   SETC  '&PID(1)'                                                00542300
         AIF   ('&PID'(1,1) NE '(').PIDNR                               00542400
&TEMPC   SETC  '0&PID'                                                  00542500
.PIDNR   MVC   &ADSRPID.(8,1),&TEMPC      Move PID into SR2.1           00542600
.NOPID   ANOP                                                           00542700
         AIF   ('&PIDLEVEL' EQ '').NOPIDL                               00542800
&TEMPC   SETC  '&PIDLEVEL(1)'                                           00542900
         AIF   ('&PIDLEVEL'(1,1) NE '(').PIDLNR                         00543000
&TEMPC   SETC  '0&PIDLEVEL'                                             00543100
.PIDLNR  MVC   &ADSRPIDL.(8,1),&TEMPC     Move PIDLEVEL into SR2.1      00543200
.NOPIDL  ANOP                                                           00543300
         AGO   .ENDSR                                                   00543400
.RESET   ANOP                                                           00543500
         AIF   ('&ZXRESET' NE 'INPUT').PRIM Is RESET specified          00543600
         AIF   ('&XPRIMLEN' EQ 'OLD_PRIMLEN').RPRIM1                    00543700
         AIF   ('&PRIMLEN'(1,1) EQ '(').RPLEN0  In a reg?               00543800
         AIF   (T'&XPRIMLEN NE 'N').RNONUM1                             00543900
         LA    14,&XPRIMLEN               Get length                    00544000
         AGO   .RPLEN1                                                  00544100
.RNONUM1 ANOP                                                           00544200
         LH    14,&PRIMLEN(1)             Get Length                    00544300
         AGO   .RPLEN1                                                  00544400
.RPLEN0  ANOP                             Primlen in a reg              00544500
&TEMPC   SETC  '&PRIMLEN'(2,K'&PRIMLEN-2)                               00544600
         LH    14,0(,&TEMPC.)             Fetch length                  00544700
.RPLEN1  ANOP                                                           00544800
         STH   14,&SR3LEN.(,1)            Save length                   00544900
         AGO   .RPRIM2                                                  00545000
.RPRIM1  ANOP                                                           00545100
         LH    14,&SR3LEN.(,1)            Fetch length                  00545200
.RPRIM2  ANOP                                                           00545300
         LA    0,&SR3OFF.(,1)             Get to start                  00545400
         AH    0,&SR3PLEN.(,1)            Get past potential PIDS/      00545500
         ST    0,&SR3CUR.(,1)             Save start address            00545600
         &LA   15,&SR3OFF.(14,1)          Find end of range             00545700
         ST    15,&SR3END.(,1)            Save end of SR3               00545800
         ST    15,&SR4CUR.(,1)            Also start of SR4             00545900
         AIF   ('&XPRIMLEN' EQ 'OLD_PRIMLEN').RPNOOFF                   00546000
         LR    0,15                       Copy start of SR4             00546100
         SR    0,1                        Decrease by start of SR       00546200
         STH   0,&ADSRROSA.(,1)           Save offset to SR4            00546300
.RPNOOFF AIF   ('&XSECLEN' EQ 'OLD_SECLEN').RSEC1 Not specified         00546400
         AIF   ('&SECLEN'(1,1) EQ '(').RSLEN0   In a reg                00546500
         AIF   (T'&XSECLEN NE 'N').RSNONUM1                             00546600
         LA    14,&XSECLEN                Get length                    00546700
         AGO   .RSLEN1                                                  00546800
.RSNONUM1 ANOP                                                          00546900
         LH    14,&SECLEN(1)              Get Length                    00547000
         AGO   .RSLEN1                                                  00547100
.RSLEN0  ANOP                             Seclen in a reg               00547200
&TEMPC   SETC  '&SECLEN'(2,K'&SECLEN-2)                                 00547300
         LH    14,0(,&TEMPC.)             Fetch length                  00547400
.RSLEN1  ANOP                                                           00547500
         STH   14,&SR4LEN.(,1)            Save length                   00547600
         AGO   .RSEC2                                                   00547700
.RSEC1   ANOP                                                           00547800
         AH    15,&SR4LEN.(,1)            Add in length                 00547900
         AGO   .NORSLEN3                                                00548000
.RSEC2   ANOP                                                           00548100
         AIF   ('&XSECLEN' EQ '0').NORSLEN3 Don't need to add if 0      00548200
         AR    15,14                      Add length                    00548300
.NORSLEN3 ANOP                                                          00548400
         ST    15,&SR4END.(,1)            Save end of SR4               00548500
         ST    15,&SR5CUR.(,1)            Also start of SR5             00548600
         AIF   ('&XSECLEN' NE 'OLD_SECLEN').RSOFF                       00548700
         AIF   ('&XPRIMLEN' EQ 'OLD_PRIMLEN').RSNOOFF                   00548800
.RSOFF   LR    0,15                       Copy start of SR5             00548900
         SR    0,1                        Decrease by start of SR       00549000
         STH   0,&ADSRRONA.(,1)           Save offset to SR5            00549100
.* Process SR5                                                          00549200
.RSNOOFF AIF   ('&XVARLEN' EQ 'OLD_VARLEN').RVAR1 Not specified         00549300
         AIF   ('&VARLEN'(1,1) EQ '(').RVLEN0   In a reg                00549400
         AIF   (T'&XVARLEN NE 'N').RVNONUM1                             00549500
         LA    14,&XVARLEN                Get length                    00549600
         AGO   .RVLEN1                                                  00549700
.RVNONUM1 ANOP                                                          00549800
         LH    14,&VARLEN(1)              Get Length                    00549900
         AGO   .RVLEN1                                                  00550000
.RVLEN0  ANOP                             Varlen in a reg               00550100
&TEMPC   SETC  '&VARLEN'(2,K'&VARLEN-2)                                 00550200
         LH    14,0(,&TEMPC.)             Fetch length                  00550300
.RVLEN1  ANOP                                                           00550400
         STH   14,&SR5LEN.(,1)            Save length                   00550500
         AGO   .RVAR2                                                   00550600
.RVAR1   ANOP                                                           00550700
         AH    15,&SR5LEN.(,1)            Add length of SR5             00550800
         AGO   .RNOVLEN3                                                00550900
.RVAR2   ANOP                                                           00551000
         AIF   ('&XVARLEN' EQ '0').RNOVLEN3                             00551100
         ALR   15,14                      Find end of range             00551200
.RNOVLEN3 ANOP                                                          00551300
         ST    15,&SR5END.(,1)            Save end of SR5               00551400
         AGO   .ENDSR                                                   00551500
.PRIM    AIF   ('&ZXCOMPLETE' EQ 'INPUT').COMP Is Complete specified    00551600
.*If PRIMARY | SECONDARY | VARIABLE                                     00551700
         AIF   ('&ZXPRIMARY' NE 'INPUT').SEC  Is primary specified      00551800
&CUR     SETC  '&SR3CUR'                  Use SR3 section               00551900
&END     SETC  '&SR3END'                                                00552000
         AGO   .ALL                                                     00552100
.SEC     AIF   ('&ZXSECONDARY' NE 'INPUT').VAR  Is secondary specified  00552200
&CUR     SETC  '&SR4CUR'                  Use SR4 section               00552300
&END     SETC  '&SR4END'                                                00552400
         AGO   .ALL                                                     00552500
.VAR     ANOP                             Must be VAR                   00552600
&CUR     SETC  '&SR5CUR'                  Use SR5 section               00552700
&END     SETC  '&SR5END'                                                00552800
.ALL     ANOP                                                           00552900
.*   Length = SDBKEY_LEN + LEN/LENVAR + 1 (for the blank)               00553000
.*     (this also works for k-l-d format for S5key)                     00553100
         L     15,&CUR.(,1)               Get current part              00553200
         AIF   ('&SYSASCE' EQ 'P').NOAR2                                00553300
         CPYA  15,1                       Get ALET too                  00553400
.NOAR2   ANOP                                                           00553500
         AIF   ('&XSDBSTRING' EQ 'NO_SDB_STRING').NOSDBSTR              00553600
         AIF   ('&SDBSTRING' EQ '').NOSDBSTR                            00553700
&T1      SETC  'DEFINED_LENGTH'                                         00553800
       AIF   ('&XSDBLENVAR' NE '&T1' AND '&SDBLENVAR' NE '').DOSDBLENV  00553900
         AIF   ('&XSDBLEN' EQ '&T1').NOSDBLEN Is SDBLEN specified       00554000
         AIF   ('&SDBLEN' EQ '').NOSDBLEN Is SDBLEN specified           00554100
         AIF   ('&SDBLEN'(1,1) EQ '(').SDBLENREG Yes, but in a reg      00554200
         LA    14,&SDBLEN(1)              Get length                    00554300
         AGO   .ENDSDBLEN                                               00554400
.SDBLENREG ANOP                           SDBLEN in a reg               00554500
         LR    14,&SDBLEN(1)              Get length                    00554600
         AGO   .ENDSDBLEN                                               00554700
.DOSDBLENV ANOP                           SDBLENVAR specified           00554800
         AIF   ('&SDBLENVAR'(1,1) EQ '(').SDBLENVREG                    00554900
         LH    14,&SDBLENVAR(1)           Get length                    00555000
         AGO   .ENDSDBLEN                                               00555100
.SDBLENVREG ANOP                          SDBLENVAR in reg              00555200
         LH    14,0&SDBLENVAR             Get length                    00555300
         AGO   .ENDSDBLEN                                               00555400
.NOSDBLEN AIF  ('&XSDBSTRING' EQ 'NO_SDB_STRING').NOSDB9                00555500
          AIF  ('&SDBSTRING' EQ '').NOSDB9                              00555600
         LA    14,L'&SDBSTRING            Use L-con                     00555700
         AGO   .ENDSDBLEN                                               00555800
.NOSDB9  ANOP                             No SDBSTRING keyword          00555900
         SLR   14,14                      Use length of 0               00556000
.ENDSDBLEN ANOP                                                         00556100
.* Calculate total length                                               00556200
.* If test wanted then test for room                                    00556300
.*   If SRncur+Length>SRnend then no room                               00556400
         AIF   ('&XTYPE' NE 'TEST').NOTEST9 Test needed                 00556500
         LA    0,1(14,15)                 Get needed end position       00556600
         C     0,&END.(,1)                Will it fit                   00556700
         BNL   JJ&S                       No, skip fill-in              00556800
.NOTEST9 ANOP                                                           00556900
&TEMPC   SETC  '&SDBSTRING(1)'                                          00557000
         AIF   ('&SDBSTRING'(1,1) NE '(').SDBNR                         00557100
&TEMPC   SETC  '0&SDBSTRING'                                            00557200
.SDBNR   ANOP                                                           00557300
         BCTR  14,0                       Decrement for execute         00557400
         EX    14,MVC3&S                  Move into proper place        00557500
         B     LL&S                       Skip MVC definition           00557600
MVC3&S   MVC   0(*-*,15),&TEMPC           MVC definition for move       00557700
LL&S     DS    0H                                                       00557800
         LA    15,1(14,15)                Update Current pointer        00557900
         MVI   0(15),C' '                 Blank out next position       00558000
         LA    15,1(,15)                  Update Current pointer        00558100
         ST    15,&CUR.(,1)               Save Current pointer          00558200
         AIF   ('&XTYPE' NE 'TEST').NOTEST8  See if TEST was specified  00558300
JJ&S     DS    0H                                                       00558400
.NOTEST8 ANOP                                                           00558500
         AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').ENDSR                        00558600
         AIF   ('&SDBKEY' EQ '').ENDSR                                  00558700
.NOSDBSTR ANOP                                                          00558800
&T1      SETC  'DEFINED_LENGTH'                                         00558900
         AIF   ('&XLENVAR' NE '&T1' AND '&LENVAR' NE '').DOLENV         00559000
         AIF   ('&XLEN' EQ '&T1').NOLEN  Is LEN specified               00559100
         AIF   ('&LEN' EQ '').NOLEN  Is LEN specified                   00559200
         AIF   ('&LEN'(1,1) EQ '(').LENREG  Yes, but in a reg           00559300
         LA    14,&LEN(1)                 Get length                    00559400
         AGO   .ENDLEN                                                  00559500
.LENREG  ANOP                             LEN in a reg                  00559600
         LR    14,&LEN(1)                 Get length                    00559700
         AGO   .ENDLEN                                                  00559800
.DOLENV  ANOP                             LENVAR specified              00559900
         AIF   ('&LENVAR'(1,1) EQ '(').LENVREG                          00560000
         LH    14,&LENVAR(1)              Get length                    00560100
         AGO   .ENDLEN                                                  00560200
.LENVREG ANOP                             LENVAR in reg                 00560300
         LH    14,0&LENVAR                Get length                    00560400
         AGO   .ENDLEN                                                  00560500
.NOLEN   AIF   ('&DATA' EQ '').NODATA     Length not specified          00560600
         LA    14,L'&DATA                 Use L-con                     00560700
         AGO   .ENDLEN                                                  00560800
.NODATA  ANOP                             No DATA keyword               00560900
         SLR   14,14                      Use length of 0               00561000
.ENDLEN  ANOP                                                           00561100
.* Calculate total length                                               00561200
.* If test wanted then test for room                                    00561300
.*   If SRncur+Length>SRnend then no room                               00561400
         AIF   ('&XTYPE' NE 'TEST').NOTEST Test needed                  00561500
         AIF   ('&XS5KEY' EQ 'NO_S5KEY').NOS54                          00561600
         AIF   ('&S5KEY' EQ '').NOS54                                   00561700
&L1      SETA  &KEYLEN+2                                                00561800
         AGO   .TOTLEN                                                  00561900
.NOS54   ANOP                                                           00562000
&L1      SETA  &KEYLEN+1                                                00562100
.TOTLEN  ANOP                                                           00562200
         AIF   ('&XCONVERT' NE 'YES' OR '&KEYVAL' NE 'AB/U').N          00562300
         AIF   ('&XS5KEY' NE 'NO_S5KEY' AND '&S5KEY' NE '').N           00562400
&L1      SETA  &L1+4                                                    00562500
         LA    0,&L1.(,15)                Get needed end position       00562600
         AGO   .NOCONV2                   End position is known         00562700
.N       ANOP                                                           00562800
         LA    0,&L1.(14,15)              Get needed end position       00562900
.NOTABU  ANOP                                                           00563000
         AIF   ('&XCONVERT' NE 'YES').NOCONV2 Convert wanted            00563100
         AR    0,14                       Need more bytes for total     00563200
.NOCONV2 ANOP                                                           00563300
         C     0,&END.(,1)                Will it fit                   00563400
         BH    J&S                        No, skip fill-in              00563500
.NOTEST  ANOP                                                           00563600
.* Move in SDBKEY                                                       00563700
.*   MVC (SRncur,SDBKEY-CHAR)                                           00563800
.*   Update SRncur                                                      00563900
         AIF   ('&XS5KEY' NE 'NO_S5KEY' AND '&S5KEY' NE '').NOMVC       00564000
         AIF   (&KEYLEN NE 1).DOMVC       Key length of 1               00564100
         MVI   0(15),C'&KEYVAL.'          Move in key value             00564200
         AGO   .DONEMVC                                                 00564300
.DOMVC   ANOP                                                           00564400
&T1      SETC  '0(&KEYLEN.,15),=CL&KEYLEN.''&KEYVAL.'''                 00564500
         MVC   &T1                        Move in key value             00564600
.DONEMVC ANOP                                                           00564700
         LA    15,&KEYLEN.(,15)           Update Current pointer        00564800
.* If S5KEY, move in LENGTH                                             00564900
.*   Update SRncur                                                      00565000
.NOMVC   AIF   ('&XS5KEY' EQ 'NO_S5KEY').NOS51 S5KEY being processed    00565100
         AIF   ('&S5KEY' EQ '').NOS51 S5KEY being processed             00565200
         MVC   0(2,15),=AL2(&KEYVAL.)     Move in key value             00565300
         STH   14,2(,15)                  Include length                00565400
         LA    15,4(,15)                  Update Current pointer        00565500
.NOS51   ANOP                                                           00565600
.* Move in DATA                                                         00565700
.*   Convert if needed                                                  00565800
.*   MVC (SRncur,DATA) using execute                                    00565900
.*   Use LEN or LENVAR                                                  00566000
.*   Update SRncur                                                      00566100
&TEMPC   SETC  '&DATA(1)'                                               00566200
&TEMPCA  SETC  '&DATA(1)'                                               00566300
         AIF   ('&DATA'(1,1) NE '(').DATANR                             00566400
&TEMPC   SETC  '0&DATA'                                                 00566500
&TEMPCA  SETC  '&DATA'(2,K'&DATA-2)                                     00566600
&TEMPCA  SETC  '0(,&TEMPCA.)'                                           00566700
.DATANR  ANOP                                                           00566800
         AIF   ('&XCONVERT' NE 'YES').NOCONV3 Convert wanted            00566900
         AIF   ('&KEYVAL' NE 'AB/U').NOABU Not user abend               00567000
         AIF   ('&LEN' NE '2').ABUN2      Not length 2                  00567100
         SLR   0,0                        Clear reg 0                   00567200
         LH    0,&TEMPCA                  Fetch data                    00567300
         AGO   .ABU                                                     00567400
.ABUN2   AIF   ('&LEN' NE '4').ABUN4      Not length 4                  00567500
         L     0,&TEMPCA                  Fetch data                    00567600
         AGO   .ABU                                                     00567700
.ABUN4   ANOP                                                           00567800
         LA    0,1                        Get starting value            00567900
         SLL   0,0(14)                    Calculate 2**Length           00568000
         BCTR  0,0                        Decrement by 1                00568100
         LR    14,0                       Save ICM mask                 00568200
         SLR   0,0                        Clear reg for ICM             00568300
         EX    14,ICM1&S                  Fetch data                    00568400
         B     L&S                        Skip target of execute        00568500
ICM1&S   ICM   0,*-*,&TEMPC               Get AB/U data                 00568600
L&S      DS    0H                                                       00568700
.ABU     ANOP                                                           00568800
         CVD   0,&PR@OUT.(,1)             Get Decimal Equivalent        00568900
&T1      SETC  '&PR@OUT'                                                00569000
         UNPK  &PR@OUT1.(4,1),&T1.(8,1)   Unpack it                     00569100
&L1      SETA  &PR@OUT1+3                                               00569200
         OI    &L1.(1),X'F0'              Make it printable             00569300
         MVC   0(4,15),&PR@OUT1.(1)       Move to user area             00569400
         LA    15,4(,15)                  Update Current pointer        00569500
         AGO   .DONECV1                                                 00569600
.NOABU   ANOP                                                           00569700
         BCTR  14,0                       One less for move             00569800
         EX    14,MVC1&S                  Move data to work area        00569900
&TEMPC2  SETC  '&TEMPC'                   Source for move               00570000
&TEMPC   SETC  '&PR@OUT.(1)'              Source for move               00570100
&T1      SETC  '&PR@OUT'                                                00570200
         UNPK  &T1.(9,1),&PR@OUT1.(5,1)   UNPK the word                 00570300
         TR    &T1.(8,1),&PR@HEX-C'0'(1)  Make it printable             00570400
         LA    14,1(14,14)                Get length to move            00570500
         AGO   .DONCONV                                                 00570600
.NOCONV3 ANOP                                                           00570700
         BCTR  14,0                       Decrement for execute         00570800
.DONCONV ANOP                                                           00570900
         EX    14,MVC2&S                  Move into proper place        00571000
         B     L&S                        Skip MVC definition           00571100
         AIF   ('&XCONVERT' NE 'YES').NOCONV4 Convert wanted            00571200
MVC1&S   MVC   &PR@OUT1.(*-*,1),&TEMPC2   MVC for move to work area     00571300
.NOCONV4 ANOP                                                           00571400
MVC2&S   MVC   0(*-*,15),&TEMPC           MVC definition for move       00571500
L&S      DS    0H                                                       00571600
         LA    15,1(14,15)                Update Current pointer        00571700
.* If SDBKEY, Blank out the next character                              00571800
.*   Update SRncur                                                      00571900
.DONECV1 AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').NOSDB1   SDB key             00572000
         AIF   ('&SDBKEY' EQ '').NOSDB1   SDB key                       00572100
         MVI   0(15),C' '                 Move in blank                 00572200
         LA    15,1(,15)                  Skip 1 for the blank          00572300
.NOSDB1  ANOP                                                           00572400
         ST    15,&CUR.(,1)               Save Current pointer          00572500
         AIF   ('&XTYPE' NE 'TEST').NOTEST2  See if TEST was specified  00572600
J&S      DS    0H                                                       00572700
.NOTEST2 ANOP                                                           00572800
         AGO   .ENDSR                                                   00572900
.COMP    ANOP  ,                         COMPLETE                       00573000
.* Get addressability to SR1 -- R1                                      00573100
.* SR3LEN=SR3CUR-SR3START                                               00573200
         L     0,&SR3CUR.(,1)             Get Current SR3 position      00573300
         SLR   0,1                        Less address to SR1           00573400
         SH    0,&ADSRDBO.(,1)            Less offset to SR3            00573500
         STH   0,&ADSRDBL.(,1)            Save SR3 Length               00573600
.* SR4LEN=SR4CUR-SR4START                                               00573700
         L     0,&SR4CUR.(,1)             Get Current SR4 position      00573800
         SLR   0,1                        Less address to SR1           00573900
         SH    0,&ADSRROSA.(,1)           Less offset to SR4            00574000
         STH   0,&ADSRROSL.(,1)           Save SR4 Length               00574100
.* SR5LEN=SR5CUR-SR5START                                               00574200
         L     0,&SR5CUR.(,1)             Get Current SR5 position      00574300
         SLR   0,1                        Less address to SR1           00574400
         SH    0,&ADSRRONA.(,1)           Less offset to SR5            00574500
         STH   0,&ADSRRONL.(,1)           Save SR5 Length               00574600
         AIF   ('&INVOKE' EQ 'NO').NOSYM  See if SYMREC wanted          00574700
         LR    15,1                       Copy SR address               00574800
*        Invoke SYMREC                                                  00574900
         AIF   ('&SYSASCE' EQ 'P').ASCP2 Skip if primary ASC            00575000
         SAC   0                          Enter Primary for SYMREC      00575100
.ASCP2   ANOP                                                           00575200
         SYMREC SR=0(,15),MF=(E,&SRLIST.(1))                            00575300
         AIF   ('&SYSASCE' EQ 'P').DONESYM Skip if primary ASC          00575400
         SAC   512                        Reset to AR mode              00575500
.DONESYM ANOP                                                           00575600
         AIF   ('&XRETCODE' EQ 'NO_RETURN_CODE').TRYRSN                 00575700
         AIF   ('&RETCODE' EQ '').TRYRSN                                00575800
         AIF   ('&RETCODE'(1,1) EQ '(').RETCREG                         00575900
&TEMPC   SETC  '&RETCODE(1)'                                            00576000
         ST    15,&TEMPC                  Save return code              00576100
         AGO   .TRYRSN                                                  00576200
.RETCREG ANOP                                                           00576300
&TEMPC   SETC  '&RETCODE'(2,K'&RETCODE-2)                               00576400
         LR    &TEMPC,15                                                00576500
.TRYRSN  ANOP                                                           00576600
         AIF   ('&XRSNCODE' EQ 'NO_REASON_CODE').NOSYM                  00576700
         AIF   ('&RSNCODE' EQ '').NOSYM                                 00576800
         AIF   ('&RSNCODE'(1,1) EQ '(').RSNCREG                         00576900
&TEMPC   SETC  '&RSNCODE(1)'                                            00577000
         ST    0,&TEMPC                   Save return code              00577100
         AGO   .NOSYM                                                   00577200
.RSNCREG ANOP                                                           00577300
&TEMPC   SETC  '&RSNCODE'(2,K'&RSNCODE-2)                               00577400
         LR    &TEMPC,0                                                 00577500
.NOSYM   ANOP                                                           00577600
.ENDSR   ANOP                                                           00577700
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00577800
.********************************************************************   00577900
.***AL.A01  INTERNAL ARRAY TO PRODUCE FORMATTED CODE                    00578000
.********************************************************************   00578100
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00578200
                      LCLA  &ZOPN1         INVOCATION INDEX             00578300
                      LCLC  &ZOPL(4095)    LABEL                        00578400
                      LCLC  &ZOPO(4095)    OPERATION                    00578500
                      LCLC  &ZOPV(4095)    VALUE                        00578600
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00578700
.*                                                                      00578800
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00578900
.*******************************************************************    00579000
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00579100
.*******************************************************************    00579200
                      ACTR  10000                                       00579300
.*                                                                      00579400
                      LCLA  &ZLC           COLUMN POSITION              00579500
                      LCLA  &ZOPX          LIST TABLE INDEX             00579600
                      LCLC  &ZLL           LABEL                        00579700
                      LCLC  &ZLOP          OPERATION                    00579800
                      LCLC  &ZLV           VALUE                        00579900
                      LCLC  &ZLD           DESCRIPTION                  00580000
.*                                                                      00580100
&ZOPX                 SETA  1                                           00580200
.*******************************************************************    00580300
.***AP.X01  FORMAT GENERATED CODE                                       00580400
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00580500
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00580600
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00580700
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00580800
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00580900
                      AIF   (K'&ZLD LE 0).ZL51                          00581000
&ZLC                  SETA  35             COMMENT COLUMN               00581100
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00581200
&ZLC                  SETA  33             COMMENT COLUMN               00581300
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00581400
&ZLV                  SETC  '&ZLV'.' '                                  00581500
                      AGO   .ZL31                                       00581600
.*                                                                      00581700
.ZL41                 ANOP  ,                                           00581800
&ZLV                  SETC  '&ZLV'.' '                                  00581900
.ZL51                 ANOP  ,                                           00582000
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00582100
.*                                                                      00582200
&ZLL     &ZLOP &ZLV                                                     00582300
.*                                                                      00582400
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00582500
                      AGO   .ZL21          CONTINUE LOOPING             00582600
.*                                                                      00582700
.ZLX1                 ANOP  ,                                           00582800
.*******************************************************************    00582900
.***AP.X02  END OF SYMRBLD MACRO                                        00583000
&ZSYMRBLD             SETC  'YES'          SET SYMRBLD USED             00583100
         POP   PRINT                                                    00583200
*                                            SYMRBLD-0                  00583300
         SPACE 1                                                        00583400
.ZLX2                 ANOP  ,                                           00583500
         MEND                                                           00583600
**********************************************************************/ 00583700
*/*PB.OC01 INVOKE MACRO---------------------------------------------*/  00583800
*%SYMRBLD: MACRO KEYS(INITIAL,SR,PRIMLEN,SECLEN,VARLEN,ARCHLEV,DAE,     00583900
*                 COMPDSC,PROBLEM,SERVLEV,NOCONVERTS,IBM,PROGRAM,       00584000
*                 PROGLEV,COMPID,COMPLEV,PID,PIDLEVEL,SUBSYSTEM,RESET,  00584100
*                 PRIMARY,SDBSTRING,SDBLEN,SDBLENVAR,SDBKEY,DATA,LEN,   00584200
*                 LENVAR,CONVERT,TYPE,SECONDARY,VARIABLE,S5KEY,         00584300
*                 COMPLETE,INVOKE,RETCODE,RSNCODE);                     00584400
*  ANS('?'||MACLABEL||' '||'SYMRBLP '||MACLIST||                        00584500
*         ' '||MACKEYS||';') COL(MACLMAR);                              00584600
*%END SYMRBLD;                                                          00584700
