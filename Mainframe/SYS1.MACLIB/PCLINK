*  /* START OF SPECIFICATIONS ***************************************** 00050000
*                                                                     * 00100000
*01*  MODULE-NAME = PCLINK                                            * 00150000
*                                                                     * 00200000
*01*  DESCRIPTIVE-NAME = PROGRAM CALL LINKAGE MACRO                   * 00250000
*                                                                     * 00300000
*01*  COPYRIGHT = 5740-XC6 COPYRIGHT IBM CORP. 1980, 1981;            * 00350000
*                 LICENSED MATERIAL PROGRAM; PROPERTY OF IBM;         * 00400000
*                 REFER TO COPYRIGHT INSTRUCTIONS FORM NUMBER         * 00450000
*                 G120-2083.                                          * 00500000
*                                                                     * 00550000
*01*  STATUS = OS/VS2 HBB2102                                         * 00600000
*                                                                     * 00650000
*01*  FUNCTION = INTERFACE TO THE PCLINK STACK,UNSTACK AND            * 00700000
*                EXTRACT SERVICES                                     * 00750000
*                                                                     * 00800000
*01*  NOTES = PL/S VERSION REQUIRES USE OF EPILOG MACRO.              * 00850000
*             PROGRAMS USING PCLINK MUST INCLUDE THE                  * 00854000
*             IHAPSA AND IHASVT MACROS.                               * 00858000
*             EACH KEYWORD HAS AN ASSOCIATED NUMBER. ON THE BAL MACRO * 00866000
*             PROTOTYPE THESE NUMBERS ARE SHOWN TO THE RIGHT OF EACH  * 00872000
*             KEYWORD, AND TO THE RIGHT OF THE NUMBER ARE THE MAJOR   * 00878000
*             POSITIONAL OPTIONS (STACK,UNSTACK,EXTRACT) FOR WHICH    * 00884000
*             THE PARTICULAR KEYWORD IS VALID.                        * 00890000
*                                                                     * 00900000
*01*  MODULE-TYPE = MACRO                                             * 00950000
*                                                                     * 01000000
*01*  PROCESSOR = ASSEMBLER,PL/S-III (BILINGUAL)                      * 01050000
*                                                                     * 01087500
*01*  MACROS = IHBERMAC(ASSEMBLER)                                    * 01125000
*                                                                     * 01162500
*01*  CHANGE ACTIVITY =       NEW FOR OS/VS2 JBB1226.                 * 01200000
*                             UPDATE BOTH BAL AND PL/S MACDATE        * 01218700
*                             WHENEVER THIS MACRO IS CHANGED.         * 01237500
*                             THE S/D CODE IS @G388PXX.               * 01275000
*             PBB0031 - (PL/S) PTR NOTATION CHECKS INVALID.   @ZMB0031* 01312500
*             PBB0341 - (PL/S) ASSURE FIRST LINE OF CODE AFTER A      * 01320000
*                        VARIABLE LENGTH GENERATE STMT STARTS ON A    * 01327500
*                        NEW LINE AND WILL THEREFORE NOT RISK BEING   * 01335000
*                        TREATED AS A COMMENT.                @ZMB0341* 01342500
*             G860PXZ - PUT THE PLS 'DO' COMMENT ALSO ON THE          * 01345000
*                       'END' STATEMENT                       @G860PXZ* 01347500
*                                                                     * 01350000
*01*  MNOTES = SEE CODE                                               * 01400000
*                                                                     * 01450000
*01*  PL/S MSGS = SEE CODE                                            * 01500000
*                                                                     * 01550000
*A000000-999999                                                @G388PXX 01600000
***** END OF SPECIFICATIONS ******************************************* 01650000
         MACRO                                                          01700000
&LABL    PCLINK &OPTION,   REQUIRED, 'STACK','UNSTACK' OR 'EXTRACT'    X01750000
               &INKEY=,    1         STACK   UNSTACK                   X01800000
               &OUTKEY=,   2         STACK   UNSTACK                   X01830000
               &SAVE=,     3         STACK   UNSTACK                   X01900000
               &TO=,       4                 UNSTACK                   X01950000
               &THRU=,     5                 UNSTACK                   X02000000
               &PURGE=,    6                 UNSTACK                   X02050000
               &ERRET=,    7                 UNSTACK                   X02100000
               &TOKEN=,    8                              EXTRACT      X02150000
               &SVAREA=,   9                              EXTRACT      X02200000
               &RETADR=,  10                              EXTRACT      X02250000
               &PARM15=,  11                              EXTRACT      X02300000
               &PARM0=,   12                              EXTRACT      X02350000
               &PARM1=,   13                              EXTRACT      X02400000
               &KEY=,     14                              EXTRACT      X02450000
               &ASID=,    15                              EXTRACT      X02500000
               &LP=,      16                              EXTRACT      X02550000
               &ENTRY=,   16                              EXTRACT      X02570000
               &ALL=,     18                              EXTRACT      X02580000
               &RELATED=  OPTIONAL VALUE FOR DOCUMENTATION              02600000
.*                                                                      02700000
.********************************************************************** 02750000
.*       DECLARE ARITHMETIC VARIABLES                                 * 02800000
.********************************************************************** 02850000
         LCLA  &A          GENERAL USAGE LOCAL ARITH. VAR.              02900000
         LCLA  &EKW        EXTRACT KEYWORD SUBSCRIPT                    02950000
         LCLA  &DVKC       COUNT OF DATA VALUE KEYWORDS SPECIFIED       02980000
.********************************************************************** 03010000
.*       DECLARE BIT VARIABLES                                        * 03040000
.********************************************************************** 03070000
         LCLB  &S(18)      KEYWORDS SPECIFIED-BY-CALLER BITS            03100000
         LCLB  &KILL       INVALID KEYWORDS SPECIFIED - KILL ASSEMBLY   03200000
.********************************************************************** 03250000
.*       DECLARE CHARACTER VARIABLES                                  * 03300000
.********************************************************************** 03350000
.*       LCLC  &C          3 CHAR. MSG IDENTIFIER FOR MNOTES            03400000
         LCLC  &CG         GENERAL USAGE CHARACTER VARIABLE             03450000
         LCLC  &ERRETV     HOLDS VALUE OF ERRET REGISTER                03470000
         LCLC  &EXTK       4 CHAR. EXTRACT OPTION DATA FIELD INDICATOR  03490000
         LCLC  &EXTV       THE REGISTER THE EXTRACTED VALUE IS TO       03530000
.*                           BE RETURNED IN FOR EXTRACTS                03560000
         LCLC  &INKV       VALUE OF INKEY KEYWORD                       03590000
         LCLC  &KW(18)     ARRAY OF KEYWORD NAMES                       03620000
         LCLC  &LT1        LOAD TYPE 1 - THIS VARIABLE WILL BE:         03650000
.*                              'R' IF ERRET IS A REG TYPE ADDR         03680000
.*                           OR 'A' IF ERRET IS AN RX TYPE ADDR         03710000
         LCLC  &M(8)       ARRAY OF CHAR STRINGS FOR MESSAGES           03715000
         LCLC  &OPB        B OPERAND FOR IHBERMAC INVOCATIONS           03720000
         LCLC  &OPD        D OPERAND FOR IHBERMAC INVOCATIONS           03725000
         LCLC  &OPE        E OPERAND FOR IHBERMAC INVOCATIONS           03730000
         LCLC  &OPF        F OPERAND FOR IHBERMAC INVOCATIONS           03735000
         LCLC  &OUTKV      VALUE OF OUTKEY  KEYWORD                     03740000
         LCLC  &SAVEV      VALUE OF SAVE    KEYWORD                     03770000
         LCLC  &THRUV      HOLDS VALUE OF THRU     REGISTER             03800000
         LCLC  &TOV        HOLDS VALUE OF TO       REGISTER             03830000
         LCLC  &TOKV       HOLDS VALUE OF TOKEN    REGISTER             03860000
.*                                                                      04050000
.********************************************************************** 04100000
.*       INITIALIZE ARITHMETIC VARIABLES                              * 04150000
.********************************************************************** 04200000
&DVKC    SETA  0                     INIT COUNT OF DATA VALUE KEYWORDS  04250000
.********************************************************************** 04300000
.*       INITIALIZE BIT VARIABLES                                     * 04350000
.********************************************************************** 04400000
&KILL    SETB  0   NO BAD KEYWORDS ENCOUNTERED - KEEP GOING             04450000
.*       AN 'S' BIT ON MEANS THE PARM WAS SPECIFIED                     04500000
&S(1)    SETB  0   SHOW INKEY    NOT SPECIFIED                          04550000
&S(2)    SETB  0   SHOW OUTKEY   NOT SPECIFIED                          04600000
&S(3)    SETB  0   SHOW SAVE     NOT SPECIFIED                          04650000
&S(4)    SETB  0   SHOW TO       NOT SPECIFIED                          04700000
&S(5)    SETB  0   SHOW THRU     NOT SPECIFIED                          04750000
&S(6)    SETB  0   SHOW PURGE    NOT SPECIFIED                          04800000
&S(7)    SETB  0   SHOW ERRET    NOT SPECIFIED                          04850000
&S(8)    SETB  0   SHOW TOKEN    NOT SPECIFIED                          04890000
&S(9)    SETB  0   SHOW SVAREA   NOT SPECIFIED                          04930000
&S(10)   SETB  0   SHOW RETADR   NOT SPECIFIED                          04970000
&S(11)   SETB  0   SHOW PARM15   NOT SPECIFIED                          05010000
&S(12)   SETB  0   SHOW PARM0    NOT SPECIFIED                          05050000
&S(13)   SETB  0   SHOW PARM1    NOT SPECIFIED                          05090000
&S(14)   SETB  0   SHOW KEY      NOT SPECIFIED                          05130000
&S(15)   SETB  0   SHOW ASID     NOT SPECIFIED                          05170000
&S(16)   SETB  0   SHOW LP       NOT SPECIFIED                          05210000
&S(17)   SETB  0   SHOW ENTRY    NOT SPECIFIED                          05230000
&S(18)   SETB  0   SHOW ALL      NOT SPECIFIED                          05236000
.********************************************************************** 05250000
.*       INITIALIZE CHARACTER VARIABLES                               * 05290000
.********************************************************************** 05330000
.*&C     SETC  '***  IHB' MNOTES START WITH '***  IHB'                  05370000
&EXTV    SETC  ''         REG FOR RETURNED EXTRACTED VALUE              05450000
&KW(1)   SETC  'INKEY'                                                  05650000
&KW(2)   SETC  'OUTKEY'                                                 05700000
&KW(3)   SETC  'SAVE'                                                   05750000
&KW(4)   SETC  'TO'                                                     05800000
&KW(5)   SETC  'THRU'                                                   05850000
&KW(6)   SETC  'PURGE'                                                  05900000
&KW(7)   SETC  'ERRET'                                                  05950000
&KW(8)   SETC  'TOKEN'                                                  06000000
&KW(9)   SETC  'SVAREA'                                                 06050000
&KW(10)  SETC  'RETADR'                                                 06100000
&KW(11)  SETC  'PARM15'                                                 06150000
&KW(12)  SETC  'PARM0'                                                  06200000
&KW(13)  SETC  'PARM1'                                                  06250000
&KW(14)  SETC  'KEY'                                                    06300000
&KW(15)  SETC  'ASID'                                                   06350000
&KW(16)  SETC  'LP'                                                     06400000
&KW(17)  SETC  'ENTRY'                                                  06450000
&KW(18)  SETC  'ALL'                                                    06460000
&M(1)    SETC  'STACK'                                                  06500000
&M(2)    SETC  'UNSTACK'                                                06510000
&M(3)    SETC  'EXTRACT'                                                06520000
&M(4)    SETC  'UNSTACK TO'                                             06530000
&M(5)    SETC  'UNSTACK THRU'                                           06540000
&M(6)    SETC  'UNSTACK PURGE'                                          06550000
&M(7)    SETC  'ZERO'                                                   06560000
&M(8)    SETC  'CALLER'                                                 06570000
.********************************************************************** 06580000
.*       PUT OUT BAL MACDATE COMMENT LINE REGARDLESS OF ERRORS.       * 06590000
.********************************************************************** 06600000
*              MACDATE = 82.076                                         06610000
.********************************************************************** 06700000
.*       VALIDATE INKEY    KEYWORD IF PRESENT                         * 06750000
.********************************************************************** 06800000
.OK01    AIF   (T'&INKEY EQ 'O').OK01B  INKEY WAS OMITTED - USE DEFAULT 06850000
&S(1)    SETB  1                        OPTION WAS SPECIFIED - SET BIT  06880000
&INKV    SETC  '&INKEY'                                                 06910000
         AIF   ('&INKEY' EQ 'ZERO').OK02                                07000000
         IHBERMAC 1001,&KW(1),&INKEY    EQUIVALENT TO FOLLOWING MNOTE   07050000
.*       MNOTE 12,'&C.002 INVALID INKEY OPERAND SPECIFIED-&INKEY.'      07060000
&KILL    SETB  1                                                        07100000
         AGO   .OK02                                                    07150000
.OK01B   ANOP                                                           07200000
&INKV    SETC  'UNKNOWN'                                                07250000
.********************************************************************** 07300000
.*       VALIDATE OUTKEY   KEYWORD IF PRESENT                         * 07350000
.********************************************************************** 07400000
.OK02    AIF   (T'&OUTKEY EQ 'O').OK02Z OUTKEY OMITTED - USE DEFAULT    07450000
&S(2)    SETB  1                        OPTION WAS SPECIFIED - SET BIT  07454000
&OUTKV   SETC  '&OUTKEY'                                                07458000
         AIF   ('&OUTKV' EQ 'ZERO').OK03                                07462000
         AIF   ('&OUTKV' EQ 'CALLER').OK03                              07466000
         AIF   ('&OUTKV' EQ 'STACK').OK03                               07470000
.*             SPECIFIC KEYS (IN ASCENDING KEY SEQUENCE)                07479000
         AIF   ('&OUTKV' EQ 'KEY0').OK020                               07488000
         AIF   ('&OUTKV' EQ 'KEY1').OK021                               07492000
         AIF   ('&OUTKV' EQ 'KEY2').OK022                               07496000
         AIF   ('&OUTKV' EQ 'KEY3').OK023                               07500000
         AIF   ('&OUTKV' EQ 'KEY4').OK024                               07504000
         AIF   ('&OUTKV' EQ 'KEY5').OK025                               07508000
         AIF   ('&OUTKV' EQ 'KEY6').OK026                               07512000
         AIF   ('&OUTKV' EQ 'KEY7').OK027                               07516000
         AIF   ('&OUTKV' EQ 'KEY8').OK028                               07520000
         AIF   ('&OUTKV' EQ 'KEY9').OK029                               07524000
         AIF   ('&OUTKV' EQ 'KEYA').OK02A                               07528000
         AIF   ('&OUTKV' EQ 'KEYB').OK02B                               07532000
         AIF   ('&OUTKV' EQ 'KEYC').OK02C                               07536000
         AIF   ('&OUTKV' EQ 'KEYD').OK02D                               07540000
         AIF   ('&OUTKV' EQ 'KEYE').OK02E                               07544000
         AIF   ('&OUTKV' EQ 'KEYF').OK02F                               07548000
         IHBERMAC 1001,&KW(2),&OUTKEY   EQUIVALENT TO FOLLOWING MNOTE   07569000
.*       MNOTE 12,'&C.002 INVALID OUTKEY OPERAND SPECIFIED-&OUTKEY.'    07572000
&KILL    SETB  1                                                        07578000
         AGO   .OK03                                                    07587000
.OK020   ANOP                                                           07596000
&OUTKV   SETC  'ZERO'                   KEY IS EQUIVALENT TO ZERO       07605000
         AGO   .OK03                                                    07614000
.OK021   ANOP                                                           07623000
&OUTKV   SETC  '1'                      KEY = 1 FOR SPKA INST.          07632000
         AGO   .OK03                                                    07633000
.OK022   ANOP                                                           07634000
&OUTKV   SETC  '2'                      KEY = 2 FOR SPKA INST.          07635000
         AGO   .OK03                                                    07636000
.OK023   ANOP                                                           07637000
&OUTKV   SETC  '3'                      KEY = 3 FOR SPKA INST.          07638000
         AGO   .OK03                                                    07639000
.OK024   ANOP                                                           07640000
&OUTKV   SETC  '4'                      KEY = 4 FOR SPKA INST.          07641000
         AGO   .OK03                                                    07642000
.OK025   ANOP                                                           07643000
&OUTKV   SETC  '5'                      KEY = 5 FOR SPKA INST.          07644000
         AGO   .OK03                                                    07645000
.OK026   ANOP                                                           07646000
&OUTKV   SETC  '6'                      KEY = 6 FOR SPKA INST.          07647000
         AGO   .OK03                                                    07648000
.OK027   ANOP                                                           07649000
&OUTKV   SETC  '7'                      KEY = 7 FOR SPKA INST.          07650000
         AGO   .OK03                                                    07651000
.OK028   ANOP                                                           07652000
&OUTKV   SETC  '8'                      KEY = 8 FOR SPKA INST.          07653000
         AGO   .OK03                                                    07654000
.OK029   ANOP                                                           07655000
&OUTKV   SETC  '9'                      KEY = 9 FOR SPKA INST.          07656000
         AGO   .OK03                                                    07657000
.OK02A   ANOP                                                           07658000
&OUTKV   SETC  '10'                     KEY = A FOR SPKA INST.          07659000
         AGO   .OK03                                                    07660000
.OK02B   ANOP                                                           07661000
&OUTKV   SETC  '11'                     KEY = B FOR SPKA INST.          07662000
         AGO   .OK03                                                    07663000
.OK02C   ANOP                                                           07664000
&OUTKV   SETC  '12'                     KEY = C FOR SPKA INST.          07665000
         AGO   .OK03                                                    07666000
.OK02D   ANOP                                                           07667000
&OUTKV   SETC  '13'                     KEY = D FOR SPKA INST.          07668000
         AGO   .OK03                                                    07669000
.OK02E   ANOP                                                           07670000
&OUTKV   SETC  '14'                     KEY = E FOR SPKA INST.          07671000
         AGO   .OK03                                                    07672000
.OK02F   ANOP                                                           07673000
&OUTKV   SETC  '15'                     KEY = F FOR SPKA INST.          07674000
         AGO   .OK03                                                    07703100
.OK02Z   ANOP  DEFAULT TO OUTKEY='DEFAULT' IF OUTKEY NOT SPECIFIED      07704000
&OUTKV   SETC  'DEFAULT'                                                07713000
.********************************************************************** 07750000
.*       VALIDATE SAVE     KEYWORD IF PRESENT                         * 07800000
.********************************************************************** 07850000
.OK03    AIF   (T'&SAVE EQ 'O').OK03B SAVE OMITTED - USE DEFAULT        07900000
&S(3)    SETB  1                                                        07950000
&SAVEV   SETC  '&SAVE'                                                  08000000
         AIF   ('&SAVE' EQ 'YES').OK04                                  08500000
         AIF   ('&SAVE' EQ 'NO').OK04                                   08550000
         IHBERMAC 1001,&KW(3),&SAVE     EQUIVALENT TO FOLLOWING MNOTE   08600000
.*       MNOTE 12,'&C.002 INVALID SAVE OPERAND SPECIFIED-&SAVE.'        08610000
&KILL    SETB  1                                                        08650000
.OK03B   ANOP  DEFAULT TO SAVE='YES' IF SAVE NOT SPECIFIED              08700000
&SAVEV   SETC  'YES'                                                    08750000
.********************************************************************** 08800000
.*       VALIDATE TO       KEYWORD IF PRESENT                         * 08850000
.********************************************************************** 08900000
.OK04    AIF   (T'&TO EQ 'O').OK05      IF OMITTED, GO CHECK NEXT PARM  08950000
&S(4)    SETB  1                        OPTION WAS SPECIFIED - SET BIT  09050000
.*             DETERMINE WHETHER ADDRESS IS REG TYPE                    09100000
         AIF   ('&TO'(1,1) EQ '(').OK04B      BRANCH IF REG TYPE        09150000
         AGO   .OK04C                                                   09200000
.OK04B   AIF   (N'&TO EQ 1).OK04D       BR IF REG FORM IS OK            09250000
.OK04C   IHBERMAC 1001,&KW(4),&TO       EQUIVALENT TO FOLLOWING MNOTE   09350000
.*       MNOTE 12,'&C.002 INVALID TO OPERAND SPECIFIED-&TO.'            09360000
&KILL    SETB  1                                                        09400000
&TOV     SETC  ''                       INDICATE NO REG NAME            09450000
         AGO   .OK05                    GO CHECK NEXT PARAMETER         09500000
.OK04D   ANOP                                                           09550000
&TOV     SETC  '&TO(1)'                 EXTRACT REGISTER NAME           09600000
.********************************************************************** 09650000
.*       VALIDATE THRU     KEYWORD IF PRESENT                         * 09700000
.********************************************************************** 09750000
.OK05    AIF   (T'&THRU EQ 'O').OK06    IF OMITTED, GO CHECK NEXT PARM  09800000
&S(5)    SETB  1                        OPTION WAS SPECIFIED - SET BIT  09850000
.*             DETERMINE WHETHER ADDRESS IS REG TYPE                    09900000
         AIF   ('&THRU'(1,1) EQ '(').OK05B    BRANCH IF REG TYPE        09950000
         AGO   .OK05C                                                   10000000
.OK05B   AIF   (N'&THRU EQ 1).OK05D     BR IF REG FORM IS OK            10050000
.OK05C   IHBERMAC 1001,&KW(5),&THRU     EQUIVALENT TO FOLLOWING MNOTE   10150000
.*       MNOTE 12,'&C.002 INVALID THRU OPERAND SPECIFIED-&THRU.'        10160000
&KILL    SETB  1                                                        10200000
&THRUV   SETC  ''                       INDICATE NO REG NAME            10250000
         AGO   .OK06                    GO CHECK NEXT PARAMETER         10300000
.OK05D   ANOP                                                           10350000
&THRUV   SETC  '&THRU(1)'               EXTRACT REGISTER NAME           10450000
.********************************************************************** 10500000
.*       VALIDATE PURGE    KEYWORD IF PRESENT                         * 10550000
.********************************************************************** 10600000
.OK06    AIF   (T'&PURGE EQ 'O').OK07   PURGE WAS OMITTED - NOT USED    10650000
&S(6)    SETB  1                        OPTION WAS SPECIFIED - SET BIT  10690000
         AIF   ('&PURGE' EQ 'YES').OK07                                 10730000
         IHBERMAC 1001,&KW(6),&PURGE    EQUIVALENT TO FOLLOWING MNOTE   10770000
.*       MNOTE 12,'&C.002 INVALID PURGE OPERAND SPECIFIED-&PURGE.'      10780000
&KILL    SETB  1                                                        10810000
.********************************************************************** 10850000
.*       VALIDATE ERRET    KEYWORD IF PRESENT                         * 10890000
.********************************************************************** 10930000
.OK07    AIF   (T'&ERRET EQ 'O').OK08   IF OMITTED, GO CHECK NEXT PARM  10970000
&S(7)    SETB  1                        OPTION WAS SPECIFIED - SET BIT  11010000
.*   DETERMINE WHETHER ERRET ADDRESS IS RX OR REG TYPE                  11050000
         AIF   ('&ERRET'(1,1) EQ '(').OK07B   BRANCH IF REG TYPE        11090000
&ERRETV  SETC  '&ERRET'                 SET VALUE FOR USE IN LOAD INST. 11130000
&LT1     SETC  'A'                      SET TO 'LA' FOR RX TYPE ADDR    11170000
         AGO   .OK08                    GO CHECK NEXT PARAMETER         11210000
.OK07B   ANOP                                                           11250000
&LT1     SETC  'R'                      SET TO 'LR' FOR REG TYPE ADDR   11290000
         AIF   (N'&ERRET EQ 1).OK07C    BR IF REG FORM IS OK            11330000
         IHBERMAC 1001,&KW(7),&ERRET    EQUIVALENT TO FOLLOWING MNOTE   11370000
.*       MNOTE 12,'&C.002 INVALID ERRET OPERAND SPECIFIED-&ERRET.'      11380000
&KILL    SETB  1                                                        11410000
&ERRETV  SETC  ''                       INDICATE NO REG NAME            11450000
         AGO   .OK08                    GO CHECK NEXT PARAMETER         11490000
.OK07C   ANOP                                                           11530000
&ERRETV  SETC  '&ERRET(1)'              EXTRACT REGISTER NAME           11570000
.********************************************************************** 11610000
.*       VALIDATE TOKEN    KEYWORD IF PRESENT                         * 11650000
.********************************************************************** 11690000
.OK08    AIF   (T'&TOKEN EQ 'O').OK09   IF OMITTED, GO CHECK NEXT PARM  11730000
&S(8)    SETB  1                        OPTION WAS SPECIFIED - SET BIT  11770000
.*             DETERMINE WHETHER ADDRESS IS REG TYPE                    11810000
         AIF   ('&TOKEN'(1,1) EQ '(').OK08B BRANCH IF REG TYPE          11850000
         AGO   .OK08C                                                   11890000
.OK08B   AIF   (N'&TOKEN EQ 1).OK08D    BR IF REG FORM IS OK            11930000
.OK08C   IHBERMAC 1001,&KW(8),&TOKEN    EQUIVALENT TO FOLLOWING MNOTE   12010000
.*       MNOTE 12,'&C.002 INVALID TOKEN OPERAND SPECIFIED-&TOKEN.'      12020000
&KILL    SETB  1                                                        12050000
&TOKV    SETC  ''                       INDICATE NO REG NAME            12090000
         AGO   .OK09                    GO CHECK NEXT PARAMETER         12130000
.OK08D   ANOP                                                           12170000
&TOKV    SETC  '&TOKEN(1)'              EXTRACT REGISTER NAME           12210000
.********************************************************************** 12490000
.*       VALIDATE SVAREA   KEYWORD IF PRESENT                         * 12530000
.********************************************************************** 12570000
.OK09    AIF   (T'&SVAREA EQ 'O').OK10  IF OMITTED, GO CHECK NEXT PARM  12610000
&S(9)    SETB  1                        OPTION WAS SPECIFIED - SET BIT  12650000
&EKW     SETA  9                        INDICATE KYWD ARRAY SUBSCRIPT   12690000
&EXTK    SETC  '4   '                   INDICATE SVAREA EXTRACT REQUEST 12730000
&DVKC    SETA  &DVKC+1                  INCREASE DATA VALUE KYWD COUNT  12760000
.*             DETERMINE WHETHER ADDRESS IS REG TYPE                    12790000
         AIF   ('&SVAREA'(1,1) EQ '(').OK09B BRANCH IF REG TYPE         12850000
         AGO   .OK09C                                                   12890000
.OK09B   AIF   (N'&SVAREA EQ 1).OK09D   BR IF REG FORM IS OK            12930000
.OK09C   IHBERMAC 1001,&KW(9),&SVAREA   EQUIVALENT TO FOLLOWING MNOTE   13010000
.*       MNOTE 12,'&C.002 INVALID SVAREA OPERAND SPECIFIED-&SVAREA.'    13020000
&KILL    SETB  1                                                        13050000
         AGO   .OK10                    GO CHECK NEXT PARAMETER         13130000
.OK09D   ANOP                                                           13170000
&EXTV    SETC  '&SVAREA(1)'             EXTRACT REGISTER NAME           13210000
.********************************************************************** 13250000
.*       VALIDATE RETADR   KEYWORD IF PRESENT                         * 13290000
.********************************************************************** 13330000
.OK10    AIF   (T'&RETADR EQ 'O').OK11  IF OMITTED, GO CHECK NEXT PARM  13370000
&S(10)   SETB  1                        OPTION WAS SPECIFIED - SET BIT  13410000
&EKW     SETA  10                       INDICATE KYWD ARRAY SUBSCRIPT   13450000
&EXTK    SETC  '8   '                   INDICATE RETADR EXTRACT REQUEST 13490000
&DVKC    SETA  &DVKC+1                  INCREASE DATA VALUE KYWD COUNT  13520000
.*             DETERMINE WHETHER ADDRESS IS REG TYPE                    13550000
         AIF   ('&RETADR'(1,1) EQ '(').OK10B BRANCH IF REG TYPE         13610000
         AGO   .OK10C                                                   13650000
.OK10B   AIF   (N'&RETADR EQ 1).OK10D   BR IF REG FORM IS OK            13690000
.OK10C   IHBERMAC 1001,&KW(10),&RETADR  EQUIVALENT TO FOLLOWING MNOTE   13770000
.*       MNOTE 12,'&C.002 INVALID RETADR OPERAND SPECIFIED-&RETADR.'    13820000
&KILL    SETB  1                                                        14350000
         AGO   .OK11                    GO CHECK NEXT PARAMETER         14450000
.OK10D   ANOP                                                           14500000
&EXTV    SETC  '&RETADR(1)'             EXTRACT REGISTER NAME           14550000
.********************************************************************** 14590000
.*       VALIDATE PARM15   KEYWORD IF PRESENT                         * 14630000
.********************************************************************** 14670000
.OK11    AIF   (T'&PARM15 EQ 'O').OK12  IF OMITTED, GO CHECK NEXT PARM  14710000
&S(11)   SETB  1                        OPTION WAS SPECIFIED - SET BIT  14750000
&EKW     SETA  11                       INDICATE KYWD ARRAY SUBSCRIPT   14790000
&EXTK    SETC  '12  '                   INDICATE PARM15 EXTRACT REQUEST 14830000
&DVKC    SETA  &DVKC+1                  INCREASE DATA VALUE KYWD COUNT  14870000
.*             DETERMINE WHETHER ADDRESS IS REG TYPE                    14910000
         AIF   ('&PARM15'(1,1) EQ '(').OK11B BRANCH IF REG TYPE         14950000
         AGO   .OK11C                                                   14990000
.OK11B   AIF   (N'&PARM15 EQ 1).OK11D   BR IF REG FORM IS OK            15030000
.OK11C   IHBERMAC 1001,&KW(11),&PARM15  EQUIVALENT TO FOLLOWING MNOTE   15070000
.*       MNOTE 12,'&C.002 INVALID PARM15 OPERAND SPECIFIED-&PARM15.'    15110000
&KILL    SETB  1                                                        15150000
         AGO   .OK12                    GO CHECK NEXT PARAMETER         15190000
.OK11D   ANOP                                                           15230000
&EXTV    SETC  '&PARM15(1)'             EXTRACT REGISTER NAME           15270000
.********************************************************************** 15490000
.*       VALIDATE PARM0    KEYWORD IF PRESENT                         * 15530000
.********************************************************************** 15570000
.OK12    AIF   (T'&PARM0 EQ 'O').OK13   IF OMITTED, GO CHECK NEXT PARM  15610000
&S(12)   SETB  1                        OPTION WAS SPECIFIED - SET BIT  15650000
&EKW     SETA  12                       INDICATE KYWD ARRAY SUBSCRIPT   15690000
&EXTK    SETC  '16  '                   INDICATE PARM0 EXTRACT REQUEST  15730000
&DVKC    SETA  &DVKC+1                  INCREASE DATA VALUE KYWD COUNT  15760000
.*             DETERMINE WHETHER ADDRESS IS REG TYPE                    15790000
         AIF   ('&PARM0'(1,1) EQ '(').OK12B BRANCH IF REG TYPE          15850000
         AGO   .OK12C                                                   15890000
.OK12B   AIF   (N'&PARM0 EQ 1).OK12D    BR IF REG FORM IS OK            15930000
.OK12C   IHBERMAC 1001,&KW(12),&PARM0   EQUIVALENT TO FOLLOWING MNOTE   16010000
.*       MNOTE 12,'&C.002 INVALID PARM0 OPERAND SPECIFIED-&PARM0.'      16050000
&KILL    SETB  1                                                        16150000
         AGO   .OK13                    GO CHECK NEXT PARAMETER         16250000
.OK12D   ANOP                                                           16300000
&EXTV    SETC  '&PARM0(1)'              EXTRACT REGISTER NAME           16350000
.********************************************************************** 16390000
.*       VALIDATE PARM1    KEYWORD IF PRESENT                         * 16430000
.********************************************************************** 16470000
.OK13    AIF   (T'&PARM1 EQ 'O').OK14   IF OMITTED, GO CHECK NEXT PARM  16510000
&S(13)   SETB  1                        OPTION WAS SPECIFIED - SET BIT  16550000
&EKW     SETA  13                       INDICATE KYWD ARRAY SUBSCRIPT   16590000
&EXTK    SETC  '20  '                   INDICATE PARM1 EXTRACT REQUEST  16630000
&DVKC    SETA  &DVKC+1                  INCREASE DATA VALUE KYWD COUNT  16660000
.*             DETERMINE WHETHER ADDRESS IS REG TYPE                    16690000
         AIF   ('&PARM1'(1,1) EQ '(').OK13B BRANCH IF REG TYPE          16750000
         AGO   .OK13C                                                   16790000
.OK13B   AIF   (N'&PARM1 EQ 1).OK13D    BR IF REG FORM IS OK            16830000
.OK13C   IHBERMAC 1001,&KW(13),&PARM1   EQUIVALENT TO FOLLOWING MNOTE   16910000
.*       MNOTE 12,'&C.002 INVALID PARM1 OPERAND SPECIFIED-&PARM1.'      16950000
&KILL    SETB  1                                                        17050000
         AGO   .OK14                    GO CHECK NEXT PARAMETER         17150000
.OK13D   ANOP                                                           17200000
&EXTV    SETC  '&PARM1(1)'              EXTRACT REGISTER NAME           17250000
.********************************************************************** 17290000
.*       VALIDATE KEY      KEYWORD IF PRESENT                         * 17330000
.********************************************************************** 17370000
.OK14    AIF   (T'&KEY EQ 'O').OK15     IF OMITTED, GO CHECK NEXT PARM  17410000
&S(14)   SETB  1                        OPTION WAS SPECIFIED - SET BIT  17450000
&EKW     SETA  14                       INDICATE KYWD ARRAY SUBSCRIPT   17490000
&EXTK    SETC  '24  '                   INDICATE KEY EXTRACT REQUEST    17530000
&DVKC    SETA  &DVKC+1                  INCREASE DATA VALUE KYWD COUNT  17560000
.*             DETERMINE WHETHER ADDRESS IS REG TYPE                    17590000
         AIF   ('&KEY'(1,1) EQ '(').OK14B BRANCH IF REG TYPE            17650000
         AGO   .OK14C                                                   17690000
.OK14B   AIF   (N'&KEY EQ 1).OK14D      BR IF REG FORM IS OK            17730000
.OK14C   IHBERMAC 1001,&KW(14),&KEY     EQUIVALENT TO FOLLOWING MNOTE   17810000
.*       MNOTE 12,'&C.002 INVALID KEY OPERAND SPECIFIED-&KEY.'          17850000
&KILL    SETB  1                                                        17950000
         AGO   .OK15                    GO CHECK NEXT PARAMETER         18050000
.OK14D   ANOP                                                           18100000
&EXTV    SETC  '&KEY(1)'                EXTRACT REGISTER NAME           18150000
.********************************************************************** 18190000
.*       VALIDATE ASID     KEYWORD IF PRESENT                         * 18230000
.********************************************************************** 18270000
.OK15    AIF   (T'&ASID EQ 'O').OK16    IF OMITTED, GO CHECK NEXT PARM  18310000
&S(15)   SETB  1                        OPTION WAS SPECIFIED - SET BIT  18350000
&EKW     SETA  15                       INDICATE KYWD ARRAY SUBSCRIPT   18390000
&EXTK    SETC  '28  '                   INDICATE ASID EXTRACT REQUEST   18430000
&DVKC    SETA  &DVKC+1                  INCREASE DATA VALUE KYWD COUNT  18460000
.*             DETERMINE WHETHER ADDRESS IS REG TYPE                    18490000
         AIF   ('&ASID'(1,1) EQ '(').OK15B BRANCH IF REG TYPE           18550000
         AGO   .OK15C                                                   18590000
.OK15B   AIF   (N'&ASID EQ 1).OK15D     BR IF REG FORM IS OK            18630000
.OK15C   IHBERMAC 1001,&KW(15),&ASID    EQUIVALENT TO FOLLOWING MNOTE   18710000
.*       MNOTE 12,'&C.002 INVALID ASID OPERAND SPECIFIED-&ASID.'        18750000
&KILL    SETB  1                                                        18850000
         AGO   .OK16                    GO CHECK NEXT PARAMETER         18950000
.OK15D   ANOP                                                           19000000
&EXTV    SETC  '&ASID(1)'               EXTRACT REGISTER NAME           19050000
.********************************************************************** 19100000
.*       VALIDATE LP       KEYWORD IF PRESENT                         * 19150000
.********************************************************************** 19200000
.OK16    AIF   (T'&LP EQ 'O').OK17      IF OMITTED, GO CHECK NEXT PARM  19250000
&S(16)   SETB  1                        OPTION WAS SPECIFIED - SET BIT  19300000
&EKW     SETA  16                       INDICATE KYWD ARRAY SUBSCRIPT   19350000
&EXTK    SETC  '32  '                   INDICATE LP EXTRACT REQUEST     19400000
&DVKC    SETA  &DVKC+1                  INCREASE DATA VALUE KYWD COUNT  19430000
.*             DETERMINE WHETHER ADDRESS IS REG TYPE                    19460000
         AIF   ('&LP'(1,1) EQ '(').OK16B BRANCH IF REG TYPE             19550000
         AGO   .OK16C                                                   19600000
.OK16B   AIF   (N'&LP EQ 1).OK16D       BR IF REG FORM IS OK            19650000
.OK16C   IHBERMAC 1001,&KW(16),&LP      EQUIVALENT TO FOLLOWING MNOTE   19750000
.*       MNOTE 12,'&C.002 INVALID LP OPERAND SPECIFIED-&LP.'            19760000
&KILL    SETB  1                                                        19800000
         AGO   .OK17                    GO CHECK NEXT PARAMETER         19900000
.OK16D   ANOP                                                           19920000
&EXTV    SETC  '&LP(1)'                 EXTRACT REGISTER NAME           19940000
.********************************************************************** 19960000
.*       VALIDATE ENTRY    KEYWORD IF PRESENT                         * 19980000
.********************************************************************** 19985000
.OK17    AIF   (T'&ENTRY EQ 'O').OK18   IF OMITTED, GO CHECK NEXT PARM  19990000
&S(17)   SETB  1                        OPTION WAS SPECIFIED - SET BIT  19995000
&EKW     SETA  17                       INDICATE KYWD ARRAY SUBSCRIPT   20000000
&EXTK    SETC  '36  '                   INDICATE ENTRY EXTRACT REQUEST  20005000
&DVKC    SETA  &DVKC+1                  INCREASE DATA VALUE KYWD COUNT  20010000
.*             DETERMINE WHETHER ADDRESS IS REG TYPE                    20015000
         AIF   ('&ENTRY'(1,1) EQ '(').OK17B BRANCH IF REG TYPE          20020000
         AGO   .OK17C                                                   20025000
.OK17B   AIF   (N'&ENTRY EQ 1).OK17D    BR IF REG FORM IS OK            20030000
.OK17C   IHBERMAC 1001,&KW(17),&ENTRY   EQUIVALENT TO FOLLOWING MNOTE   20035000
.*       MNOTE 12,'&C.002 INVALID ENTRY OPERAND SPECIFIED-&ENTRY.'      20040000
&KILL    SETB  1                                                        20045000
         AGO   .OK18                    GO CHECK NEXT PARAMETER         20050000
.OK17D   ANOP                                                           20055000
&EXTV    SETC  '&ENTRY(1)'              EXTRACT REGISTER NAME           20060000
.********************************************************************** 20065000
.*       VALIDATE ALL      KEYWORD IF PRESENT                         * 20070000
.********************************************************************** 20075000
.OK18    AIF   (T'&ALL EQ 'O').OKDV     ALL WAS OMITTED - NOT USED      20080000
&S(18)   SETB  1                        OPTION WAS SPECIFIED - SET BIT  20085000
&EKW     SETA  18                       INDICATE KYWD ARRAY SUBSCRIPT   20090000
&EXTK    SETC  '0   '                   INDICATE EXTRACT ALL REQUEST    20095000
&DVKC    SETA  &DVKC+1                  INCREASE DATA VALUE KYWD COUNT  20100000
         AIF   ('&ALL' EQ 'YES').OKDV                                   20105000
         IHBERMAC 1001,&KW(18),&ALL     EQUIVALENT TO FOLLOWING MNOTE   20110000
.*       MNOTE 12,'&C.002 INVALID ALL OPERAND SPECIFIED-&ALL.'          20146000
&KILL    SETB  1                                                        20160000
.********************************************************************** 20180000
.*       CHECK FOR ILLEGAL REGISTER VALUES IF LITERALS WERE USED.     * 20200000
.*       (LEGAL REGS ARE 0-12)                                        * 20220000
.********************************************************************** 20240000
.OKDV    AIF   ('&EXTV' EQ '13' OR '&EXTV' EQ '14').OKDV2               20260000
         AIF   ('&EXTV' EQ '15').OKDV2                                  20350000
         AGO   .OKPOS                   GO CHECK NEXT PARAMETER         20650000
.OKDV2   IHBERMAC 1001,&KW(&EKW),&EXTV  EQUIVALENT TO FOLLOWING MNOTE   20700000
.*       MNOTE 12,'&C.002 INVALID &KW(&EKW) OPERAND SPECIFIED-&EXTV.'   20710000
&KILL    SETB  1                                                        20750000
.********************************************************************** 20800000
.*       CHECK FOR POSITIONAL PARAMETER                               * 20850000
.********************************************************************** 20900000
.OKPOS   AIF   (N'&SYSLIST EQ 0).ERR001 REQD POSPARM MISSING            20950000
         AIF   (N'&SYSLIST NE 1).ERR027 EXCESSIVE POSITIONAL PARAMETERS 21000000
         AIF   ('&OPTION' EQ 'STACK').STACK                             21050000
         AIF   ('&OPTION' EQ 'UNSTACK').UNSTACK                         21100000
         AIF   ('&OPTION' EQ 'EXTRACT').EXTRACT                         21150000
         IHBERMAC 1300,&OPTION          EQUIVALENT TO FOLLOWING MNOTE   21200000
.*       MNOTE 12,'&C.300 INVALID POSITIONAL PARAMETER -&OPTION'        21210000
         MEXIT                                                          21250000
.********************************************************************** 21750000
.*       S T A C K  REQUEST  C O D E   G E N E R A T I O N            * 21800000
.********************************************************************** 21840000
.STACK   ANOP                                                           21880000
&A       SETA  4                     CK FOR INVALID KEYWORDS 4-18       21920000
.ST01    AIF   (&S(&A) EQ 0).ST02                                       21960000
         IHBERMAC 1301,&KW(&A),&M(1)    EQUIVALENT TO FOLLOWING MNOTE   22000000
.*       MNOTE 12,'&C.301 - ''&KW(&A)'' INVALID WITH STACK REQUEST.'    22010000
&KILL    SETB  1                                                        22040000
.ST02    ANOP                                                           22080000
&A       SETA  &A+1                                                     22120000
         AIF   (&A LE 18).ST01                                          22160000
         AIF   ('&OUTKV' NE 'STACK').ST02B                              22200000
&OPB     SETC  'OUTKEY=STACK'                                           22205000
         IHBERMAC 1301,&OPB,&M(1)    EQUIVALENT TO FOLLOWING MNOTE      22206000
.*       MNOTE 12,'&C.301 - OUTKEY=STACK INVALID WITH STACK REQUEST.'   22207000
&KILL    SETB  1                                                        22210000
.ST02B   AIF   ('&OUTKV' NE 'DEFAULT').ST02C                            22215000
&OUTKV   SETC  'CALLER'              DEFAULT IS 'CALLER' FOR STACK      22220000
.ST02C   AIF   (&KILL EQ 0).ST03     IF NO SYNTAX ERRORS, CONTINUE      22225000
         MEXIT                                                          22240000
.*----------------------------------                                    22280000
.ST03    ANOP  ALWAYS GENERATE THE FOLLOWING LINE OF CODE               22320000
&LABL    DS    0H'0'                .PCLINK STACK SERVICE               22360000
         SLL   2,8                  .LEFT ADJUST CONTENTS OF REG2       22380000
         AIF   ('&INKV' EQ 'ZERO').ST03B                                22400000
*                                   .(BITS 24-27 = PSW KEY FROM IPK)    22420000
         IPK                        .SAVE CALLERS PSW KEY IN REG2       22470000
         SPKA  0(0)                 .SET PSW KEY TO ZERO                22500000
         AGO   .ST04                                                    22530000
.ST03B   ANOP                       INKEY=ZERO CALLERS                  22560000
*                                   .(BITS 24-27 = PSW KEY OF ZERO)     22590000
.*----------------------------------                                    22620000
.ST04    AIF   ('&SAVEV' EQ 'NO').ST05                                  22650000
         L     5,16(0,0)            .GET CVT ADDRESS                    22680000
         L     5,776(,5)            .PCLINK STACK(SAVE=YES) RTN ADDR    22710000
         BALR  5,5                  .PERFORM STACK SERVICE              22740000
         AGO   .ST06                                                    22770000
.ST05    L     9,16(0,0)            .GET CVT ADDRESS                    22800000
         L     9,780(,9)            .PCLINK STACK(SAVE=NO) RTN ADDR     22830000
         BALR  5,9                  .PERFORM STACK SERVICE              22860000
.*----------------------------------                                    23050000
.ST06    AIF   ('&OUTKV' EQ 'ZERO').ST08                                23080000
         AIF   ('&OUTKV' EQ 'CALLER').ST07                              23110000
         SPKA  &OUTKV.*16(0)        .SET PSW KEY TO SPECIFIED KEY       23170000
         MEXIT                                                          23200000
.ST07    AIF   ('&INKV' EQ 'ZERO').ST08                                 23230000
         SPKA  0(2)                 .SET PSW KEY TO CALLERS KEY         23260000
.ST08    MEXIT                                                          23290000
.********************************************************************** 23320000
.*       U N S T A C K  REQUEST  C O D E   G E N E R A T I O N        * 23350000
.********************************************************************** 23380000
.UNSTACK ANOP                                                           23410000
&A       SETA  8                     CK FOR INVALID KEYWORDS 8-18       23440000
.UN01    AIF   (&S(&A) EQ 0).UN02                                       23470000
         IHBERMAC 1301,&KW(&A),&M(2)         EQUAL TO FOLLOWING MNOTE   23500000
.*       MNOTE 12,'&C.301 - ''&KW(&A)'' INVALID WITH UNSTACK REQUEST.'  23510000
&KILL    SETB  1                                                        23530000
.UN02    ANOP                                                           23560000
&A       SETA  &A+1                                                     23590000
         AIF   (&A LE 18).UN01                                          23620000
.UN04    AIF   (&S(2) EQ 1 AND '&PURGE' EQ 'YES').UN04B                 23650000
         AIF   (&S(2) EQ 1 AND '&TO' NE '').UN04C                       23680000
         AGO   .UN04D                                                   23710000
.UN04B   IHBERMAC 1302,&KW(2),&M(6)    EQUIVALENT TO FOLLOWING MNOTE    23740000
.*       MNOTE 12,'&C.302 - ''OUTKEY'' INVALID WITH UNSTACK PURGE.'     23750000
&KILL    SETB  1                                                        23760000
         AGO   .UN05                                                    23770000
.UN04C   IHBERMAC 1302,&KW(2),&M(4)    EQUIVALENT TO FOLLOWING MNOTE    23780000
.*       MNOTE 12,'&C.302 - ''OUTKEY'' INVALID WITH UNSTACK TO.'        23790000
&KILL    SETB  1                                                        23860000
         AGO   .UN05                                                    23890000
.UN04D   AIF   ('&OUTKV' NE 'DEFAULT').UN04F                            23920000
         AIF   (&S(5) EQ 1).UN04E      IF THRU DEFAULTS                 23928000
&OUTKV   SETC  'CALLER'                DEFAULT OUTKEY FOR TO/PURGE      23936000
         AGO   .UN05                                                    23944000
.UN04E   ANOP                                                           23946000
&OUTKV   SETC  'STACK'                 DEFAULT OUTKEY FOR THRU          23952000
.* TO PERMIT KEY 0 EQUIVALENT SYMBOLICS TO BE VALID WITH UNSTACK THRU   23960000
.* CHANGE OUTKEY TO OUTKV ON LINE .UN04F                                23968000
.UN04F   AIF   ('&OUTKEY' EQ 'ZERO' OR '&OUTKV' EQ 'STACK').UN05        23976000
         IHBERMAC 1303,&KW(2),&M(7),&M(1),&M(5) EQ TO FOLLOWING MNOTE   23984000
.*       MNOTE 12,'&C.303 - ''OUTKEY'' MUST BE ''ZERO'' OR ''STACK'' WH 24034000
.*             EN USED WITH ''UNSTACK THRU''.'                          24084000
&KILL    SETB  1                                                        24300000
.UN05    AIF   (&S(4) EQ 1 AND &S(5) EQ 1).UNME1                        24350000
.UN05B   AIF   (&S(5) EQ 1 AND &S(6) EQ 1).UNME2                        24400000
.UN05C   AIF   (&S(4) EQ 1 AND &S(6) EQ 1).UNME3                        24450000
         AGO   .UN07                                                    24500000
.UNME1   IHBERMAC 1304,&KW(4),&KW(5)          EQUAL TO FOLLOWING MNOTE  24550000
.*       MNOTE 12,'&C.304 TO AND THRU OPTIONS ARE MUTUALLY EXCLUSIVE.'  24570000
&KILL    SETB  1                                                        24590000
         AGO   .UN05B                                                   24610000
.UNME2   IHBERMAC 1304,&KW(5),&KW(6)          EQUAL TO FOLLOWING MNOTE  24630000
.*       MNOTE 12,'&C.304 THRU + PURGE OPTIONS ARE MUTUALLY EXCLUSIVE.' 24650000
&KILL    SETB  1                                                        24670000
         AGO   .UN05C                                                   24690000
.UNME3   IHBERMAC 1304,&KW(4),&KW(6)          EQUAL TO FOLLOWING MNOTE  24710000
.*       MNOTE 12,'&C.304 TO AND PURGE OPTIONS ARE MUTUALLY EXCLUSIVE.' 24730000
&KILL    SETB  1                                                        24870000
.*----------------------------------                                    24910000
.UN07    AIF   (&S(4) EQ 0 AND &S(5) EQ 0 AND &S(6) EQ 0).UNREQ1        24950000
         AGO   .UN09                                                    24990000
.UNREQ1  IHBERMAC 1305,&KW(4),&KW(5),&KW(6),&M(2) EQUAL TO MNOTE BELOW  25040000
.*       MNOTE 12,'&C.305 MUST SPECIFY TO,THRU OR PURGE WITH UNSTACK.'  25090000
&KILL    SETB  1                                                        25140000
.UN09    AIF   (&S(7) EQ 1 AND &S(6) EQ 1).UNREQ3                       25190000
         AGO   .UNKILL                                                  25200000
.UNREQ3  IHBERMAC 1304,&KW(7),&M(6)   EQUIVALENT TO FOLLOWING MNOTE     25210000
.*       MNOTE 12,'&C.304 ERRET AND UNSTACK PURGE OPTIONS ARE MUTUALLY  25215000
.*             EXCLUSIVE.'                                              25220000
&KILL    SETB  1                                                        25230000
.UNKILL  AIF   (&KILL EQ 0).UNG1     IF NO SYNTAX ERRORS, CONTINUE      25270000
         MEXIT                                                          25310000
.*----------------------------------                                    25350000
.UNG1    ANOP                                                           25390000
&LABL    DS    0H'0'                .PCLINK UNSTACK SERVICE             25430000
.*             SEE IF IPK SHOULD BE GENERATED                           25470000
         AIF   (&S(5) EQ 1 AND '&INKV' NE 'ZERO' AND &S(7) EQ 1).UNG1B  25488400
         AIF   (&S(4) EQ 1 AND '&INKV' NE 'ZERO').UNG1B                 25506800
         AIF   (&S(6) EQ 1 AND '&INKV' NE 'ZERO').UNG1B                 25525200
.*             SEE IF SHIFT OF REG2 SHOULD BE GENERATED                 25543600
         AIF   (&S(5) EQ 1 AND '&INKV' EQ 'ZERO' AND &S(7) EQ 1).UNG1C  25562000
         AIF   (&S(4) EQ 1 AND '&INKV' EQ 'ZERO' AND &S(7) EQ 1).UNG1C  25580400
         AGO   .UNG1D                                                   25598800
.UNG1B   IPK                        .SAVE CALLERS PSW KEY IN REG2       25617200
         AGO   .UNG1D                                                   25635600
.UNG1C   SLL   2,8                  .INDICATE ZERO PSW KEY IN REG2      25654000
.UNG1D   AIF   ('&INKV' EQ 'ZERO').UNG2                                 25672400
         SPKA  0(0)                 .SET PSW KEY TO ZERO                25690800
.*----------------------------------                                    25710000
.UNG2    AIF   (&S(4) EQ 0).UNG3     BR IF NOT TO OPTION                25750000
         LCR   14,&TOV              .LOAD TOKEN TO UNSTACK TO           25790000
         AGO   .UNG5                                                    25830000
.UNG3    AIF   (&S(5) EQ 0).UNG4     BR IF NOT THRU OPTION              25870000
         AIF   ('&THRUV' EQ '14').UNG5 OPTIMIZE CODE IF REG 14          25890000
         LR    14,&THRUV            .LOAD TOKEN TO UNSTACK THRU         25910000
         AGO   .UNG5                                                    25950000
.UNG4    LA    14,2                 .INDICATE PURGE OPTION SPECIFIED    25990000
         LCR   14,14                .(VIA A TOKEN VALUE OF MINUS 2)     26000000
.*----------------------------------                                    26030000
.UNG5    AIF   (&S(6) EQ 1).UNG7     ERRET NOT USED WITH PURGE          26070000
         AIF   (&S(5) EQ 1).UNG6B    BR IF UNSTACK THRU OPTION          26085300
.*                                   UNSTACK TO OPTION                  26100600
         AIF   (&S(7) EQ 0).UNG6A    BR IF ERRET NOT SPECIFIED          26115900
         L&LT1 1,&ERRETV            .INDICATE ERROR RETURN ADDRESS      26131200
         AGO   .UNG7                                                    26146500
.UNG6A   SLR   1,1                  .INDICATE NO ERRET ADDRESS          26161800
         AGO   .UNG7                                                    26177100
.UNG6B   ANOP                        UNSTACK THRU OPTION                26192400
         AIF   (&S(7) EQ 0).UNG6C    BR IF ERRET NOT SPECIFIED          26207700
         L&LT1 3,&ERRETV            .INDICATE ERRET ADDRESS             26223000
         AGO   .UNG7                                                    26238300
.UNG6C   SLR   3,3                  .INDICATE NO ERRET ADDRESS          26253600
.*----------------------------------                                    26270000
.UNG7    AIF   ('&SAVEV' EQ 'NO').UNG8                                  26310000
         AIF   (&S(5) EQ 1).UNG7B    IF THRU OPTION DONT CLOBBER REG15  26350000
         LR    15,13                .SAVE CONTENTS OF REGISTER 13       26370000
.UNG7B   L     13,16(0,0)           .GET CVT ADDRESS                    26390000
         L     13,784(,13)          .PCLINK UNSTACK(SAVE=YES) RTN ADDR  26410000
         BALR  13,13                .PERFORM PCLINK UNSTACK SERVICE     26430000
         AGO   .UNG9                                                    26450000
.UNG8    L     9,16(0,0)            .GET CVT ADDRESS                    26470000
         L     9,816(,9)            .PCLINK UNSTACK(SAVE=NO) RTN ADDR   26490000
         BALR  8,9                  .PERFORM PCLINK UNSTACK SERVICE     26590000
.*----------------------------------                                    26630000
.UNG9    AIF   (&S(5) EQ 1).UND51    BR IF THRU  OPTION SPECIFIED       26670000
.*----------------------------------       TO OR PURGE OPTION           26720000
.UND41   AIF   ('&INKV' EQ 'ZERO').UNG12                                26830000
         AGO   .UNG11                                                   26870000
.*----------------------------------       THRU OPTION                  26910000
.UND51   AIF   ('&OUTKV' EQ 'ZERO').UNG13                               26950000
.*                                   OUTKEY MUST BE 'STACK'             26990000
.*----------------------------------                                    27190000
.UNG11   SPKA  0(2)                 .SET THE PSW KEY                    27230000
.UNG12   AIF   (&S(5) EQ 1).UNG13    ALL DONE IF THRU OPTION            27270000
         AIF   ('&SAVEV' NE 'YES').UNG13 OR IF NOSAVE                   27310000
         LR    13,15                .RESTORE CONTENTS OF REGISTER 13    27350000
.UNG13   MEXIT                                                          27390000
.********************************************************************** 27650000
.*       EXTRACT REQUEST                                              * 27700000
.********************************************************************** 27750000
.EXTRACT ANOP                                                           27800000
&A       SETA  1                     CK FOR INVALID KEYWORDS 1 - 7      27850000
.EX01    AIF   (&S(&A) EQ 0).EX02                                       27860000
         IHBERMAC 1301,&KW(&A),&M(3)    EQUAL TO FOLLOWING MNOTE        27870000
.*       MNOTE 12,'&C.024 - ''&KW(&A)'' INVALID WITH EXTRACT REQUESTS.' 27873000
&KILL    SETB  1                                                        27880000
.EX02    ANOP                                                           27890000
&A       SETA  &A+1                                                     27900000
         AIF   (&A LE 7).EX01                                           27910000
.*---------------------------------- CK FOR REQUIRED VALID TOKEN KYWD   27945000
.EX03    AIF   ('&TOKV' NE '').EX04                                     27950000
         IHBERMAC 1306,1,&M(3)     EQUIVALENT TO FOLLOWING MNOTE        27955000
.*       MNOTE 12,'&C.306  A TOKEN IS REQUIRED WITH EXTRACT REQUESTS.'  27959000
&KILL    SETB  1                                                        27963000
.*---------------------------------- CK FOR MISSING DATA VALUE KYWD     27967000
.EX04    AIF   (&DVKC NE 0).EX05                                        27971000
         IHBERMAC 1306,2,&M(3)     EQUIVALENT TO FOLLOWING MNOTE        27975000
.*       MNOTE 12,'&C.306  A DATA VALUE KYWD IS REQUIRED WITH EXTRACT.' 27979000
&KILL    SETB  1                                                        27990000
         AGO   .EXKILL                                                  28000000
.*---------------------------------- ASSURE ONLY 1 DATA VALUE REQUEST   28010000
.EX05    AIF   (&DVKC EQ 1).EXKILL                                      28020000
         IHBERMAC 1307,1,&M(3)     EQUIVALENT TO FOLLOWING MNOTE        28030000
.*       MNOTE 12,'&C.307  SPECIFY ONLY 1 DATA VALUE KYWD PER EXTRACT.' 28033000
&KILL    SETB  1                                                        28040000
.EXKILL  AIF   (&KILL EQ 0).EXG1     IF NO SYNTAX ERRORS, GENERATE CODE 28050000
         MEXIT                                                          28060000
.*---------------------------------- GENERATE EXTRACT OPTION CODE       28070000
.EXG1    ANOP                                                           28080000
&LABL    DS    0H'0'                .PCLINK EXTRACT SERVICE             28082000
.EXG2    AIF   ('&TOKV' EQ '14').EXG3                                   28090000
         LR    14,&TOKV             .GET TOKEN FOR CURRENT STACK ENTRY  28093000
.EXG3    ANOP                                                           28096000
&CG      SETC  '&EXTK               .INDICATE &KW(&EKW) EXTRACTION'     28099000
         LA    1,&CG                                                    28102000
         L     15,16(0,0)           .GET CVT ADDRESS                    28106000
         L     15,824(,15)          .PCLINK EXTRACT ROUTINE ADDRESS     28108000
         BALR  0,15                 .PERFORM PCLINK EXTRACT SERVICE     28114000
         AIF   (&S(18) EQ 1 OR '&EXTV' EQ '1').EXG4                     28125000
         LR    &EXTV,1              .EXTRACTED VALUE TO SPECIFIED REG   28130000
.EXG4    MEXIT                                                          28135000
.********************************************************************** 28160000
.*       PROCESS ERROR CONDITIONS                                     * 28170000
.********************************************************************** 28180000
.ERR027  IHBERMAC 238       EQUIVALENT TO THE FOLLOWING MNOTE           28190000
.*       MNOTE 12,'&C.027 - EXCESSIVE POSITIONAL PARAMETERS SPECIFIED'  28240000
         MEXIT                                                          28290000
.ERR001  IHBERMAC 1308      EQUIVALENT TO THE FOLLOWING MNOTE           28340000
.*       MNOTE 12,'&C.308  REQUIRED POSITIONAL PARM NOT SPECIFIED.'     28390000
         MEND                                                           28550000
* */                                                                    28600000
*@EJECT;                                                                28650000
*%PCLINK:                                                               28700000
*        MACRO KEYS(INKEY,OUTKEY,SAVE,                                  28750000
*                   TO,THRU,PURGE,ERRET,TOKEN,                          28800000
*                   SVAREA,RETADR,PARM15,PARM0,PARM1,KEY,ASID,LP,       28810000
*                   ENTRY,ALL,RELATED);                                 28820000
*/********************************************************************/ 28860000
*/*                DEFINE EXTERNAL MACRO VARIABLES                   */ 28880000
*/********************************************************************/ 28900000
* DECLARE EHAREGS  CHAR EXT; /* CONTAINS DECLARED REGISTER NAMES     */ 28920000
*/********************************************************************/ 28940000
*/*                DEFINE INTERNAL MACRO VARIABLES                   */ 28960000
*/********************************************************************/ 28980000
* DECLARE ALLV     CHAR;     /* VALUE OF ALL     KEYWORD             */ 28990000
* DECLARE ERRETV   CHAR;     /* VALUE OF ERRET   KEYWORD             */ 29000000
* DECLARE EXTK     CHAR;     /* DATA FIELD INDICATOR FOR EXTRACT OPT.*/ 29020000
* DECLARE EXTV     CHAR;     /* VALUE OF EXTRACT DATA VALUE KEYWORD  */ 29040000
* DECLARE INKEYV   CHAR;     /* VALUE OF INKEY   KEYWORD             */ 29060000
* DECLARE OUTKV    CHAR;     /* VALUE OF OUTKEY  KEYWORD             */ 29080000
* DECLARE PURGEV   CHAR;     /* VALUE OF PURGE   KEYWORD             */ 29100000
* DECLARE SAVEV    CHAR;     /* VALUE OF SAVE    KEYWORD             */ 29120000
* DECLARE THRUV    CHAR;     /* VALUE OF THRU    KEYWORD             */ 29140000
* DECLARE TOV      CHAR;     /* VALUE OF TO      KEYWORD             */ 29160000
* DECLARE TOKV     CHAR;     /* VALUE OF TOKEN   KEYWORD             */ 29180000
*                                                                       29200000
* DECLARE IVBLANK  CHAR;     /* ALWAYS ONE BLANK.                    */ 29220000
* DECLARE IVDOCMT  CHAR;     /* COMMENT FOR DO AND END LINES.        */ 29240000
* DECLARE IVXUN    CHAR;     /* CHAR STRING FOR GENERATE REFS KYWD   */ 29260000
* DECLARE KW(18)   CHAR;     /* KEYWORDS-SPECIFIED EBCDIC ARRAY      */ 29280000
* DECLARE REFSL    CHAR;     /* REFS STRING FOR GENERATES            */ 29288000
* DECLARE RESTL    CHAR;     /* RESTRICT STRING FOR GENERATES        */ 29292000
* DECLARE SETSL    CHAR;     /* SETS STRING FOR GENERATES            */ 29296000
* DECLARE S(18)    CHAR;     /* KEYWORDS-SPECIFIED ARRAY             */ 29304000
*/*------------------------------------------------------------------*/ 29320000
* DECLARE CCOL     FIXED;    /* STARTING COLUMN FOR BAL COMMENTS     */ 29325000
* DECLARE DVKC     FIXED;    /* NUMBER DATA VALUE KEYWORDS SPECIFIED */ 29330000
* DECLARE EKW      FIXED;    /* EXTRACT KEYWORD SUBSCRIPT (0=NONE)   */ 29340000
* DECLARE ERRLP    FIXED;    /* LEFT  PAREN COL FOR PTR FORM ERRET   */ 29350000
* DECLARE ERRRP    FIXED;    /* RIGHT PAREN COL FOR PTR FORM ERRET   */ 29360000
* DECLARE ICOL     FIXED;    /* STARTING COLUMN FOR BAL INSTRUCTIONS */ 29365000
* DECLARE IVINDNT2 FIXED;    /* STARTING COLUMN FOR ALL ANSWER TEXT  */ 29370000
*                            /*   EXCEPT DO AND END STATEMENTS.      */ 29380000
* DECLARE IVLP     FIXED;    /* LEFT  PAREN COL FOR REG FORM KYWDS   */ 29390000
* DECLARE IVRC     FIXED;    /* RETURN CODE TO DETERMINE IF TEXT WILL*/ 29400000
*                            /* BE GENERATED.                        */ 29410000
* DECLARE IVRP     FIXED;    /* RIGHT PAREN COL FOR REG FORM KYWDS   */ 29420000
* DECLARE N        FIXED;    /* GENERAL USAGE SUBSCRIPT              */ 29560000
*/********************************************************************/ 29580000
*/*                INITIALIZE INTERNAL MACRO VARIABLES                  29600000
*/********************************************************************/ 29620000
* CCOL       = MACGRMAR-35;  /* SET STARTING COLUMN FOR BAL COMMENTS */ 29640000
* DVKC       = 0;            /* NUMBER DATA VALUE KEYWORDS SPECIFIED */ 29660000
* EKW        = 0;            /* EXTRACT KEYWORD SUBSCRIPT (0=NONE)   */ 29680000
* EXTK       = '';           /* DATA FIELD INDICATOR FOR EXTRACT OPT.*/ 29700000
* ICOL       = MACGLMAR+9;   /* SET STARTING COL FOR BAL INSTRUCTION */ 29720000
* IVBLANK    = ' ';          /* ONE BLANK CHARACTER.                 */ 29800000
* IVDOCMT    = ' PCLINK '||MACLIST;                                     29850000
*                            /* START OF DO-END COMMENT--NO KEYS YET */ 29880000
* IVINDNT2   = MACCOL;       /* SET INDENTATION MARGIN.              */ 29910000
* IVRC       = 0;            /* SET CODE TO GENERATE TEXT            */ 30000000
* KW(1)      = 'INKEY';      /* INIT TO KEYWORD NAME                 */ 30020000
* KW(2)      = 'OUTKEY';     /* INIT TO KEYWORD NAME                 */ 30040000
* KW(3)      = 'SAVE';       /* INIT TO KEYWORD NAME                 */ 30060000
* KW(4)      = 'TO';         /* INIT TO KEYWORD NAME                 */ 30080000
* KW(5)      = 'THRU';       /* INIT TO KEYWORD NAME                 */ 30100000
* KW(6)      = 'PURGE';      /* INIT TO KEYWORD NAME                 */ 30120000
* KW(7)      = 'ERRET';      /* INIT TO KEYWORD NAME                 */ 30140000
* KW(8)      = 'TOKEN';      /* INIT TO KEYWORD NAME                 */ 30160000
* KW(9)      = 'SVAREA';     /* INIT TO KEYWORD NAME                 */ 30180000
* KW(10)     = 'RETADR';     /* INIT TO KEYWORD NAME                 */ 30200000
* KW(11)     = 'PARM15';     /* INIT TO KEYWORD NAME                 */ 30220000
* KW(12)     = 'PARM0';      /* INIT TO KEYWORD NAME                 */ 30240000
* KW(13)     = 'PARM1';      /* INIT TO KEYWORD NAME                 */ 30260000
* KW(14)     = 'KEY';        /* INIT TO KEYWORD NAME                 */ 30280000
* KW(15)     = 'ASID';       /* INIT TO KEYWORD NAME                 */ 30300000
* KW(16)     = 'LP';         /* INIT TO KEYWORD NAME                 */ 30320000
* KW(17)     = 'ENTRY';      /* INIT TO KEYWORD NAME                 */ 30330000
* KW(18)     = 'ALL';        /* INIT TO KEYWORD NAME                 */ 30333000
*/********************************************************************/ 30340000
*/*                CHECK FOR MACLIST                                 */ 30360000
*/********************************************************************/ 30380000
* IF MACLIST = ''            /* MACLIST MISSING?                     */ 30500000
*   THEN DO;                 /* YES -                                */ 30550000
*     IVRC = 12;             /*       PREVENT TEXT GENERATION        */ 30600000
*     ANS MSG('AHA0013 THE POSITIONAL REQUEST OPTION'||                 30650000
*             ' IS NOT SUPPLIED. NO TEXT IS GENERATED.');               30700000
*   END;                     /* END - MACLIST MISSING                */ 30750000
* IF NUMBER(MACLIST) > 1     /* TOO MANY POSITIONAL PARMS?           */ 30752000
*   THEN DO;                 /* YES -                                */ 30754000
*     IVRC = 12;             /*       PREVENT TEXT GENERATION        */ 30756000
*     ANS MSG('AHA0033 TOO MANY POSITIONAL PARAMETERS SPECIFIED. '||    30758000
*             'NO TEXT IS GENERATED.');                                 30760000
*   END;                     /* END - TOO MANY POSITIONALS           */ 30762000
*/********************************************************************/ 30764000
*/*      PROCESS  I N K E Y  KEYWORD                                 */ 30766000
*/********************************************************************/ 30768000
* IF INKEY ^= ''             /* INKEY SPECIFIED?                     */ 30770000
*   THEN DO;                 /* YES                                  */ 30772000
*     S(1) = 'Y';            /* INDICATE KEYWORD SPECIFIED           */ 30774000
*     IVDOCMT=IVDOCMT||' INKEY'||INKEY;                                 30776000
*     INKEYV=INKEY(1);                                                  30778000
*     IF NUMBER(INKEY) > 1   /* TOO MANY INKEY ARGUMENTS?            */ 30780000
*       THEN DO;                                                        30782000
*         ANS MSG('AHA0033 INKEY - '||INKEY||                           30784000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       30786000
*                 'NO TEXT IS GENERATED.');                             30788000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 30790000
*       END;                 /* TOO MANY INKEY ARGUMENTS             */ 30792000
*     IF INKEY(1)^='ZERO'    /* IS ARGUMENT INVALID?                 */ 30794000
*       THEN DO;             /* ARGUMENT IS NOT 'ZERO'               */ 30796000
*         ANS MSG('AHA0043 INKEY MUST BE '||                            30798000
*                 '''ZERO''. NO TEXT IS GENERATED.');                   30800000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 30802000
*       END;                 /* ARGUMENT IS NOT 'ZERO'               */ 30804000
*   END;                     /* INKEY SPECIFIED                      */ 30806000
*/********************************************************************/ 30808000
*/*      PROCESS  O U T K E Y  KEYWORD                               */ 30810000
*/********************************************************************/ 30812000
* IF OUTKEY ^= ''            /* OUTKEY SPECIFIED?                    */ 30814000
*   THEN DO;                 /* YES                                  */ 30816000
*     S(2) = 'Y';            /* INDICATE KEYWORD SPECIFIED           */ 30818000
*     OUTKV = OUTKEY(1);     /* SET SPECIFIED VALUE                  */ 30820000
*     IVDOCMT=IVDOCMT||' OUTKEY'||OUTKEY;                               30822000
*     IF NUMBER(OUTKEY) > 1  /* TOO MANY OUTKEY ARGUMENTS?           */ 30824000
*       THEN DO;                                                        30826000
*         ANS MSG('AHA0033 OUTKEY - '||OUTKEY||                         30828000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       30830000
*                 'NO TEXT IS GENERATED.');                             30832000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 30834000
*       END;                 /* TOO MANY OUTKEY ARGUMENTS            */ 30836000
*     IF OUTKV = 'ZERO' THEN GOTO LHA00010; /* SKIP ERROR MSG IF GOOD*/ 30838000
*     IF OUTKV = 'CALLER' THEN GOTO LHA00010;                           30838100
*     IF OUTKV = 'STACK' THEN GOTO LHA00010;                            30838300
*/*   SPECIFIC KEY VALUES                                            */ 30838400
*     IF OUTKV = 'KEY0' THEN DO; OUTKV='ZERO'; GOTO LHA00010; END;      30838500
*     IF OUTKV = 'KEY1' THEN DO; OUTKV='1';    GOTO LHA00010; END;      30838600
*     IF OUTKV = 'KEY2' THEN DO; OUTKV='2';    GOTO LHA00010; END;      30838700
*     IF OUTKV = 'KEY3' THEN DO; OUTKV='3';    GOTO LHA00010; END;      30838800
*     IF OUTKV = 'KEY4' THEN DO; OUTKV='4';    GOTO LHA00010; END;      30838900
*     IF OUTKV = 'KEY5' THEN DO; OUTKV='5';    GOTO LHA00010; END;      30839000
*     IF OUTKV = 'KEY6' THEN DO; OUTKV='6';    GOTO LHA00010; END;      30839100
*     IF OUTKV = 'KEY7' THEN DO; OUTKV='7';    GOTO LHA00010; END;      30839200
*     IF OUTKV = 'KEY8' THEN DO; OUTKV='8';    GOTO LHA00010; END;      30839300
*     IF OUTKV = 'KEY9' THEN DO; OUTKV='9';    GOTO LHA00010; END;      30839400
*     IF OUTKV = 'KEYA' THEN DO; OUTKV='10';   GOTO LHA00010; END;      30839500
*     IF OUTKV = 'KEYB' THEN DO; OUTKV='11';   GOTO LHA00010; END;      30839600
*     IF OUTKV = 'KEYC' THEN DO; OUTKV='12';   GOTO LHA00010; END;      30839700
*     IF OUTKV = 'KEYD' THEN DO; OUTKV='13';   GOTO LHA00010; END;      30839800
*     IF OUTKV = 'KEYE' THEN DO; OUTKV='14';   GOTO LHA00010; END;      30839900
*     IF OUTKV = 'KEYF' THEN DO; OUTKV='15';   GOTO LHA00010; END;      30840000
*     DO;                                                               30841200
*       ANS MSG('AHA0043 OUTKEY - '||OUTKEY||' - IS INVALID.'||         30841300
*               'NO TEXT IS GENERATED.');                               30841400
*       IVRC=12;             /* PREVENT TEXT GENERATION              */ 30841500
*     END;                                                              30841600
*LHA00010:                                                              30841700
*   END;                     /* OUTKEY WAS SPECIFIED                 */ 30841800
*   ELSE                     /* NO                                   */ 30841900
*     OUTKV = 'DEFAULT';     /* INDICATE DEFAULT VALUE IS TO BE USED */ 30842000
*/********************************************************************/ 30844000
*/*      PROCESS  S A V E  KEYWORD                                   */ 30846000
*/********************************************************************/ 30848000
* IF SAVE ^= ''              /* SAVE SPECIFIED?                      */ 30850000
*   THEN DO;                 /* YES                                  */ 30852000
*     S(3) = 'Y';            /* INDICATE KEYWORD SPECIFIED           */ 30854000
*     IVDOCMT=IVDOCMT||' SAVE'||SAVE;                                   30856000
*     SAVEV = SAVE(1);                                                  30858000
*     IF NUMBER(SAVE) > 1    /* TOO MANY SAVE ARGUMENTS?             */ 30860000
*       THEN DO;                                                        30862000
*         ANS MSG('AHA0033 SAVE - '||SAVE||                             30864000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       30866000
*                 'NO TEXT IS GENERATED.');                             30868000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 30870000
*       END;                 /* TOO MANY SAVE ARGUMENTS              */ 30872000
*     IF SAVE(1) ^= 'YES' THEN                                          30874000
*       IF SAVE(1) ^= 'NO'                                              30876000
*         THEN DO;           /* ARGUMENT IS NOT 'YES' OR 'NO'        */ 30878000
*           ANS MSG('AHA0043 SAVE MUST BE '||                           30880000
*                   '''YES'' OR ''NO''. NO TEXT IS GENERATED.');        30882000
*           IVRC=12;         /* PREVENT TEXT GENERATION              */ 30884000
*         END;               /* ARGUMENT IS NOT 'YES' OR 'NO'        */ 30886000
*   END;                     /* SAVE SPECIFIED                       */ 30888000
*   ELSE                     /* SAVE NOT SPECIFIED - USE DEFAULT     */ 30890000
*     SAVEV = 'YES';                                                    30892000
*/********************************************************************/ 30894000
*/*      PROCESS  T O  KEYWORD                                       */ 30896000
*/********************************************************************/ 30898000
* IF TO ^= ''                /* TO SPECIFIED?                        */ 30900000
*   THEN DO;                 /* YES                                  */ 30902000
*     S(4) = 'Y';            /* INDICATE KEYWORD SPECIFIED           */ 30904000
*     IVDOCMT=IVDOCMT||' TO'||TO;                                       30906000
*     TOV=TO(1);                                                        30908000
*     IF NUMBER(TO) > 1      /* TOO MANY TO ARGUMENTS?               */ 30910000
*       THEN DO;                                                        30912000
*         ANS MSG('AHA0033 TO - '||TO||                                 30914000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       30916000
*                 'NO TEXT IS GENERATED.');                             30918000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 30920000
*       END;                 /* TOO MANY TO ARGUMENTS                */ 30922000
*     IF TO(1) = ''          /* IS ARGUMENT NULL?                    */ 30924000
*       THEN DO;             /* YES -                                */ 30926000
*         ANS MSG('AHA0013 TO(1) (TOKENREG) IS REQUIRED '||             30928000
*                 'BUT IS NOT SPECIFIED.'||                             30930000
*                 '. NO TEXT IS GENERATED.');                           30932000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 30934000
*       END;                 /* ARGUMENT IS NULL                     */ 30936000
*       ELSE DO;             /* ARGUMENT SPECIFIED                   */ 30938000
*         IVLP=INDEX(TO(1),'('); /* GET POSITION OF LEFT PAREN       */ 30940000
*         IF IVLP=1 THEN     /* IF POINTER NOTATION          @ZMB0031*/ 30942000
*           DO;              /* POINTER NOTATION.            @ZMB0031*/ 30942700
*             IVRP=LENGTH(TO(1)); /*                         @ZMB0031*/ 30943400
*             IF TO(1,IVRP:IVRP)^=')' THEN /* IF NOT A RIGHT            30944100
*                                             PAREN          @ZMB0031*/ 30944800
*               IVRP=IVLP;   /* FORCE 'NOT-REGISTER FORM'    @ZMB0031*/ 30945500
*           END;             /* POINTER NOTATION.            @ZMB0031*/ 30946200
*         ELSE               /* NOT POINTER NOTATION.        @ZMB0031*/ 30946900
*           DO;              /* NOT POINTER NOTATION.        @ZMB0031*/ 30947600
*             IVLP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 30948300
*             IVRP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 30949000
*           END;             /* NOT POINTER NOTATION.        @ZMB0031*/ 30949700
*         IF IVLP=1 THEN     /* TO((REGNAME)) USED?          @ZMB0031*/ 30950400
*           TOV=TO(1,IVLP+1:IVRP-1); /* STRIP OFF INNER PARENS       */ 30952000
*         ELSE DO;           /* REG FORM NOT USED                    */ 30968000
*           ANS MSG('AHA0043 TO MUST BE IN REGISTER FORM - '||          30970000
*                   '''TO((REGNAME))''. NO TEXT IS GENERATED.');        30972000
*           IVRC=12;         /* PREVENT TEXT GENERATION              */ 30974000
*         END;               /* REG FORM NOT USED                    */ 30976000
*       END;                 /* ARGUMENT SPECIFIED                   */ 30978000
*   END;                     /* TO SPECIFIED                         */ 30980000
*/********************************************************************/ 30982000
*/*      PROCESS  T H R U  KEYWORD                                   */ 30984000
*/********************************************************************/ 30986000
* IF THRU ^= ''              /* THRU SPECIFIED?                      */ 30988000
*   THEN DO;                 /* YES                                  */ 30990000
*     S(5) = 'Y';            /* INDICATE KEYWORD SPECIFIED           */ 30992000
*     IVDOCMT=IVDOCMT||' THRU'||THRU;                                   30994000
*     THRUV=THRU(1);                                                    30996000
*     IF NUMBER(THRU) > 1    /* TOO MANY THRU ARGUMENTS?             */ 30998000
*       THEN DO;                                                        31000000
*         ANS MSG('AHA0033 THRU - '||THRU||                             31002000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       31004000
*                 'NO TEXT IS GENERATED.');                             31006000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 31008000
*       END;                 /* TOO MANY THRU ARGUMENTS              */ 31010000
*     IF THRU(1) = ''        /* IS ARGUMENT NULL?                    */ 31012000
*       THEN DO;             /* YES -                                */ 31014000
*         ANS MSG('AHA0013 THRU(1) (TOKENREG) IS REQUIRED '||           31016000
*                 'BUT IS NOT SPECIFIED.'||                             31018000
*                 '. NO TEXT IS GENERATED.');                           31020000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 31022000
*       END;                 /* ARGUMENT IS NULL                     */ 31024000
*       ELSE DO;             /* ARGUMENT SPECIFIED                   */ 31026000
*         IVLP=INDEX(THRU(1),'('); /* GET POSITION OF LEFT PAREN     */ 31028000
*         IF IVLP=1 THEN     /* IF POINTER NOTATION          @ZMB0031*/ 31030000
*           DO;              /* POINTER NOTATION.            @ZMB0031*/ 31030700
*             IVRP=LENGTH(THRU(1)); /*                       @ZMB0031*/ 31031400
*             IF THRU(1,IVRP:IVRP)^=')' THEN /* IF NOT A RIGHT          31032100
*                                               PAREN        @ZMB0031*/ 31032800
*               IVRP=IVLP;   /* FORCE 'NOT-REGISTER FORM'    @ZMB0031*/ 31033500
*           END;             /* POINTER NOTATION.            @ZMB0031*/ 31034200
*         ELSE               /* NOT POINTER NOTATION.        @ZMB0031*/ 31034900
*           DO;              /* NOT POINTER NOTATION.        @ZMB0031*/ 31035600
*             IVLP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 31036300
*             IVRP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 31037000
*           END;             /* NOT POINTER NOTATION.        @ZMB0031*/ 31037700
*         IF IVLP=1 THEN     /* THRU((REGNAME)) USED?        @ZMB0031*/ 31038400
*           THRUV=THRU(1,IVLP+1:IVRP-1); /* STRIP OFF INNER PARENS   */ 31040000
*         ELSE DO;           /* REG FORM NOT USED                    */ 31058000
*           ANS MSG('AHA0043 THRU MUST BE IN REGISTER FORM - '||        31060000
*                   '''THRU((REGNAME))''. NO TEXT IS GENERATED.');      31062000
*           IVRC=12;         /* PREVENT TEXT GENERATION              */ 31064000
*         END;               /* REG FORM NOT USED                    */ 31066000
*       END;                 /* ARGUMENT SPECIFIED                   */ 31068000
*   END;                     /* THRU SPECIFIED                       */ 31070000
*/********************************************************************/ 31072000
*/*      PROCESS  P U R G E  KEYWORD                                 */ 31074000
*/********************************************************************/ 31076000
* IF PURGE ^= ''             /* PURGE SPECIFIED?                     */ 31078000
*   THEN DO;                 /* YES                                  */ 31080000
*     S(6) = 'Y';            /* INDICATE KEYWORD SPECIFIED           */ 31082000
*     IVDOCMT=IVDOCMT||' PURGE'||PURGE;                                 31084000
*     PURGEV=PURGE(1);                                                  31086000
*     IF NUMBER(PURGE) > 1   /* TOO MANY PURGE ARGUMENTS?            */ 31088000
*       THEN DO;                                                        31090000
*         ANS MSG('AHA0033 PURGE - '||PURGE||                           31092000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       31094000
*                 'NO TEXT IS GENERATED.');                             31096000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 31098000
*       END;                 /* TOO MANY PURGE ARGUMENTS             */ 31100000
*     IF PURGE(1)^='YES'     /* IS ARGUMENT INVALID?                 */ 31102000
*       THEN DO;             /* ARGUMENT IS NOT 'YES'                */ 31103000
*         ANS MSG('AHA0043 PURGE MUST BE '||                            31104000
*                 '''YES''. NO TEXT IS GENERATED.');                    31105000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 31106000
*       END;                 /* ARGUMENT IS NOT 'YES'                */ 31107000
*   END;                     /* PURGE SPECIFIED                      */ 31114000
*/********************************************************************/ 31116000
*/*      PROCESS  E R R E T  KEYWORD                                 */ 31118000
*/********************************************************************/ 31120000
* IF ERRET ^= ''             /* ERRET SPECIFIED?                     */ 31122000
*   THEN DO;                 /* YES - ADD KEYWD TO COMMENT           */ 31124000
*     S(7) = 'Y';            /* INDICATE KEYWORD SPECIFIED           */ 31126000
*     IVDOCMT = IVDOCMT||' ERRET'||ERRET;                               31200000
*     ERRETV = ERRET(1);                                                31220000
*     IF ERRET(1) ^= ''      /* WAS ARGUMENT SPECIFIED?              */ 31250000
*       THEN DO;             /* YES -                                */ 31300000
*         IF NUMBER(ERRET) > 1 /* TOO MANY ERRET ARGS?               */ 31350000
*           THEN DO;         /* YES - ISSUE AHA0033                  */ 31400000
*             ANS MSG('AHA0033 ERRET - '||ERRET||                       31450000
*                      ' - HAS TOO MANY ARGUMENTS. '||                  31500000
*                      'NO TEXT IS GENERATED.');                        31550000
*             IVRC = 12;     /* KILL TEXT GENERATION                 */ 31600000
*           END;             /* NUMBER(ERRET) > 1                    */ 31650000
*         ERRLP = INDEX(ERRET(1),'(');                                  31700000
*         IF ERRLP=1 THEN    /* IF POINTER NOTATION          @ZMB0031*/ 31720000
*           DO;              /* POINTER NOTATION.            @ZMB0031*/ 31723000
*             ERRRP=LENGTH(ERRET(1)); /*                     @ZMB0031*/ 31726000
*             IF ERRET(1,ERRRP:ERRRP)^=')' THEN /* IF NOT A RIGHT       31729000
*                                                  PAREN     @ZMB0031*/ 31732000
*               ERRRP=ERRLP; /* FORCE 'NOT-REGISTER FORM'    @ZMB0031*/ 31735000
*           END;             /* POINTER NOTATION.            @ZMB0031*/ 31738000
*         ELSE               /* NOT POINTER NOTATION.        @ZMB0031*/ 31741000
*           DO;              /* NOT POINTER NOTATION.        @ZMB0031*/ 31744000
*             ERRLP=0;       /* NOT POINTER NOTATION.        @ZMB0031*/ 31747000
*             ERRRP=0;       /* NOT POINTER NOTATION.        @ZMB0031*/ 31750000
*           END;             /* NOT POINTER NOTATION.        @ZMB0031*/ 31753000
*         IF ERRLP=1 THEN    /* ERRET((REGNAME)) USED?       @ZMB0031*/ 31756000
*           ERRETV = ERRET(1,ERRLP+1:ERRRP-1); /* SRIP INNER PARENS  */ 31760000
*       END;                 /* ERRET(1) SPECIFIED                   */ 32200000
*       ELSE DO;             /* NO ARGUMENT-ISSUE AHA0013            */ 32250000
*         ANS MSG('AHA0013 ERRET(1) (ERROR RTN ADDR) IS REQUIRED '||    32300000
*                 'BUT IS NOT SPECIFIED. NO TEXT IS GENERATED.');       32350000
*         IVRC = 12;         /* KILL TEXT GENERATION                 */ 32400000
*       END;                 /* NO ERRET ARGUMENT                    */ 32450000
*   END;                     /* ERRET KEYWORD SPECIFIED              */ 32500000
*/********************************************************************/ 32550000
*/*      PROCESS  T O K E N  KEYWORD                                 */ 32556000
*/********************************************************************/ 32562000
* IF TOKEN ^= ''             /* TOKEN SPECIFIED?                     */ 32568000
*   THEN DO;                 /* YES                                  */ 32574000
*     S(8) = 'Y';            /* INDICATE KEYWORD SPECIFIED           */ 32580000
*     IVDOCMT=IVDOCMT||' TOKEN'||TOKEN;                                 32586000
*     TOKV=TOKEN(1);                                                    32592000
*     IF NUMBER(TOKEN) > 1   /* TOO MANY TOKEN ARGUMENTS?            */ 32598000
*       THEN DO;                                                        32604000
*         ANS MSG('AHA0033 TOKEN - '||TOKEN||                           32610000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       32616000
*                 'NO TEXT IS GENERATED.');                             32622000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 32628000
*       END;                 /* TOO MANY TOKEN ARGUMENTS             */ 32634000
*     IF TOKEN(1) = ''       /* IS ARGUMENT NULL?                    */ 32640000
*       THEN DO;             /* YES -                                */ 32646000
*         ANS MSG('AHA0013 TOKEN(1) (TOKENREG) IS REQUIRED '||          32652000
*                 'BUT IS NOT SPECIFIED.'||                             32658000
*                 '. NO TEXT IS GENERATED.');                           32664000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 32670000
*       END;                 /* ARGUMENT IS NULL                     */ 32676000
*       ELSE DO;             /* ARGUMENT SPECIFIED                   */ 32682000
*         IVLP=INDEX(TOKEN(1),'('); /* GET POSITION OF LEFT PAREN    */ 32688000
*         IF IVLP=1 THEN     /* IF POINTER NOTATION          @ZMB0031*/ 32694000
*           DO;              /* POINTER NOTATION.            @ZMB0031*/ 32696000
*             IVRP=LENGTH(TOKEN(1)); /*                      @ZMB0031*/ 32698000
*             IF TOKEN(1,IVRP:IVRP)^=')' THEN /* IF NOT A RIGHT         32700000
*                                                PAREN       @ZMB0031*/ 32702000
*               IVRP=IVLP;   /* FORCE 'NOT-REGISTER FORM'    @ZMB0031*/ 32704000
*           END;             /* POINTER NOTATION.            @ZMB0031*/ 32706000
*         ELSE               /* NOT POINTER NOTATION.        @ZMB0031*/ 32708000
*           DO;              /* NOT POINTER NOTATION.        @ZMB0031*/ 32710000
*             IVLP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 32712000
*             IVRP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 32714000
*           END;             /* NOT POINTER NOTATION.        @ZMB0031*/ 32716000
*         IF IVLP=1 THEN     /* TOKEN((REGNAME)) USED?       @ZMB0031*/ 32718000
*           TOKV=TOKEN(1,IVLP+1:IVRP-1); /* STRIP OFF INNER PARENS   */ 32720000
*         ELSE DO;           /* REG FORM NOT USED                    */ 32778000
*           ANS MSG('AHA0043 TOKEN MUST BE IN REGISTER FORM - '||       32784000
*                   '''TOKEN((REGNAME))''. NO TEXT IS GENERATED.');     32790000
*           IVRC=12;         /* PREVENT TEXT GENERATION              */ 32796000
*         END;               /* REG FORM NOT USED                    */ 32802000
*       END;                 /* ARGUMENT SPECIFIED                   */ 32808000
*   END;                     /* TOKEN SPECIFIED                      */ 32814000
*/********************************************************************/ 32820000
*/*      PROCESS  S V A R E A  KEYWORD                               */ 32826000
*/********************************************************************/ 32832000
* IF SVAREA ^= ''            /* SVAREA SPECIFIED?                    */ 32838000
*   THEN DO;                 /* YES                                  */ 32844000
*     S(9) = 'Y';            /* INDICATE KEYWORD SPECIFIED           */ 32850000
*     DVKC  = DVKC+1;        /* BUMP NO. DATA VALUE KYWDS SPECIFIED  */ 32856000
*     EKW   = 9;             /* SET DATA VALUE KEYWORD SUBSCRIPT     */ 32862000
*     EXTK  = '4';           /* SET DATA-FIELD-TO-BE-EXTRACTED INDIC.*/ 32868000
*     IVDOCMT=IVDOCMT||' SVAREA'||SVAREA;                               32874000
*     EXTV=SVAREA(1);                                                   32880000
*     IF NUMBER(SVAREA) > 1  /* TOO MANY SVAREA ARGUMENTS?           */ 32886000
*       THEN DO;                                                        32892000
*         ANS MSG('AHA0033 SVAREA - '||SVAREA||                         32898000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       32904000
*                 'NO TEXT IS GENERATED.');                             32910000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 32916000
*       END;                 /* TOO MANY SVAREA ARGUMENTS            */ 32922000
*     IF SVAREA(1) = ''      /* IS ARGUMENT NULL?                    */ 32928000
*       THEN DO;             /* YES -                                */ 32934000
*         ANS MSG('AHA0013 SVAREA(1) (REGISTER) IS REQUIRED '||         32940000
*                 'BUT IS NOT SPECIFIED.'||                             32946000
*                 '. NO TEXT IS GENERATED.');                           32952000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 32958000
*       END;                 /* ARGUMENT IS NULL                     */ 32964000
*       ELSE DO;             /* ARGUMENT SPECIFIED                   */ 32970000
*         IVLP=INDEX(SVAREA(1),'('); /* GET POSITION OF LEFT PAREN   */ 32976000
*         IF IVLP=1 THEN     /* IF POINTER NOTATION          @ZMB0031*/ 32982000
*           DO;              /* POINTER NOTATION.            @ZMB0031*/ 32984000
*             IVRP=LENGTH(SVAREA(1)); /*                     @ZMB0031*/ 32986000
*             IF SVAREA(1,IVRP:IVRP)^=')' THEN /* IF NOT A RIGHT        32988000
*                                                 PAREN      @ZMB0031*/ 32990000
*               IVRP=IVLP;   /* FORCE 'NOT-REGISTER FORM'    @ZMB0031*/ 32992000
*           END;             /* POINTER NOTATION.            @ZMB0031*/ 32994000
*         ELSE               /* NOT POINTER NOTATION.        @ZMB0031*/ 32996000
*           DO;              /* NOT POINTER NOTATION.        @ZMB0031*/ 32998000
*             IVLP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 33000000
*             IVRP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 33002000
*           END;             /* NOT POINTER NOTATION.        @ZMB0031*/ 33004000
*         IF IVLP=1 THEN     /* SVAREA((REGNAME)) USED?      @ZMB0031*/ 33006000
*           EXTV=SVAREA(1,IVLP+1:IVRP-1); /* STRIP INNER PARENS      */ 33008000
*         ELSE DO;           /* REG FORM NOT USED                    */ 33060000
*           ANS MSG('AHA0043 SVAREA MUST BE IN REGISTER FORM - '||      33066000
*                   '''SVAREA((REGNAME))''. NO TEXT IS GENERATED.');    33072000
*           IVRC=12;         /* PREVENT TEXT GENERATION              */ 33078000
*         END;               /* REG FORM NOT USED                    */ 33084000
*       END;                 /* ARGUMENT SPECIFIED                   */ 33090000
*   END;                     /* SVAREA SPECIFIED                     */ 33096000
*/********************************************************************/ 33102000
*/*      PROCESS  R E T A D R  KEYWORD                               */ 33108000
*/********************************************************************/ 33114000
* IF RETADR ^= ''            /* RETADR SPECIFIED?                    */ 33120000
*   THEN DO;                 /* YES                                  */ 33126000
*     S(10) = 'Y';           /* INDICATE KEYWORD SPECIFIED           */ 33132000
*     DVKC  = DVKC+1;        /* BUMP NO. DATA VALUE KYWDS SPECIFIED  */ 33138000
*     EKW   = 10;            /* SET DATA VALUE KEYWORD SUBSCRIPT     */ 33144000
*     EXTK  = '8';           /* SET DATA-FIELD-TO-BE-EXTRACTED INDIC.*/ 33150000
*     IVDOCMT=IVDOCMT||' RETADR'||RETADR;                               33156000
*     EXTV=RETADR(1);                                                   33162000
*     IF NUMBER(RETADR) > 1  /* TOO MANY RETADR ARGUMENTS?           */ 33168000
*       THEN DO;                                                        33174000
*         ANS MSG('AHA0033 RETADR - '||RETADR||                         33180000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       33186000
*                 'NO TEXT IS GENERATED.');                             33192000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 33198000
*       END;                 /* TOO MANY RETADR ARGUMENTS            */ 33204000
*     IF RETADR(1) = ''      /* IS ARGUMENT NULL?                    */ 33210000
*       THEN DO;             /* YES -                                */ 33216000
*         ANS MSG('AHA0013 RETADR(1) (REGISTER) IS REQUIRED '||         33222000
*                 'BUT IS NOT SPECIFIED.'||                             33228000
*                 '. NO TEXT IS GENERATED.');                           33234000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 33240000
*       END;                 /* ARGUMENT IS NULL                     */ 33246000
*       ELSE DO;             /* ARGUMENT SPECIFIED                   */ 33252000
*         IVLP=INDEX(RETADR(1),'('); /* GET POSITION OF LEFT PAREN   */ 33258000
*         IF IVLP=1 THEN     /* IF POINTER NOTATION          @ZMB0031*/ 33264000
*           DO;              /* POINTER NOTATION.            @ZMB0031*/ 33266000
*             IVRP=LENGTH(RETADR(1)); /*                     @ZMB0031*/ 33268000
*             IF RETADR(1,IVRP:IVRP)^=')' THEN /* IF NOT A RIGHT        33270000
*                                                 PAREN      @ZMB0031*/ 33272000
*               IVRP=IVLP;   /* FORCE 'NOT-REGISTER FORM'    @ZMB0031*/ 33274000
*           END;             /* POINTER NOTATION.            @ZMB0031*/ 33276000
*         ELSE               /* NOT POINTER NOTATION.        @ZMB0031*/ 33278000
*           DO;              /* NOT POINTER NOTATION.        @ZMB0031*/ 33280000
*             IVLP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 33282000
*             IVRP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 33284000
*           END;             /* NOT POINTER NOTATION.        @ZMB0031*/ 33286000
*         IF IVLP=1 THEN     /* RETADR((REGNAME)) USED?      @ZMB0031*/ 33288000
*           EXTV=RETADR(1,IVLP+1:IVRP-1); /* STRIP INNER PARENS      */ 33290000
*         ELSE DO;           /* REG FORM NOT USED                    */ 33342000
*           ANS MSG('AHA0043 RETADR MUST BE IN REGISTER FORM - '||      33348000
*                   '''RETADR((REGNAME))''. NO TEXT IS GENERATED.');    33354000
*           IVRC=12;         /* PREVENT TEXT GENERATION              */ 33360000
*         END;               /* REG FORM NOT USED                    */ 33366000
*       END;                 /* ARGUMENT SPECIFIED                   */ 33372000
*   END;                     /* RETADR SPECIFIED                     */ 33378000
*/********************************************************************/ 33384000
*/*      PROCESS  P A R M 1 5  KEYWORD                               */ 33390000
*/********************************************************************/ 33394000
* IF PARM15 ^= ''            /* PARM15 SPECIFIED?                    */ 33398000
*   THEN DO;                 /* YES                                  */ 33408000
*     S(11) = 'Y';           /* INDICATE KEYWORD SPECIFIED           */ 33414000
*     DVKC  = DVKC+1;        /* BUMP NO. DATA VALUE KYWDS SPECIFIED  */ 33420000
*     EKW   = 11;            /* SET DATA VALUE KEYWORD SUBSCRIPT     */ 33426000
*     EXTK  = '12';          /* SET DATA-FIELD-TO-BE-EXTRACTED INDIC.*/ 33432000
*     IVDOCMT=IVDOCMT||' PARM15'||PARM15;                               33438000
*     EXTV=PARM15(1);                                                   33443000
*     IF NUMBER(PARM15) > 1  /* TOO MANY PARM15 ARGUMENTS?           */ 33448000
*       THEN DO;                                                        33453000
*         ANS MSG('AHA0033 PARM15 - '||PARM15||                         33458000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       33463000
*                 'NO TEXT IS GENERATED.');                             33468000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 33473000
*       END;                 /* TOO MANY PARM15 ARGUMENTS            */ 33478000
*     IF PARM15(1) = ''      /* IS ARGUMENT NULL?                    */ 33483000
*       THEN DO;             /* YES -                                */ 33488000
*         ANS MSG('AHA0013 PARM15(1) (REGISTER) IS REQUIRED '||         33493000
*                 'BUT IS NOT SPECIFIED.'||                             33510000
*                 '. NO TEXT IS GENERATED.');                           33516000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 33522000
*       END;                 /* ARGUMENT IS NULL                     */ 33528000
*       ELSE DO;             /* ARGUMENT SPECIFIED                   */ 33534000
*         IVLP=INDEX(PARM15(1),'('); /* GET POSITION OF LEFT PAREN   */ 33540000
*         IF IVLP=1 THEN     /* IF POINTER NOTATION          @ZMB0031*/ 33550000
*           DO;              /* POINTER NOTATION.            @ZMB0031*/ 33551500
*             IVRP=LENGTH(PARM15(1)); /*                     @ZMB0031*/ 33553000
*             IF PARM15(1,IVRP:IVRP)^=')' THEN /* IF NOT A RIGHT        33554500
*                                                 PAREN      @ZMB0031*/ 33556000
*               IVRP=IVLP;   /* FORCE 'NOT-REGISTER FORM'    @ZMB0031*/ 33557500
*           END;             /* POINTER NOTATION.            @ZMB0031*/ 33559000
*         ELSE               /* NOT POINTER NOTATION.        @ZMB0031*/ 33560500
*           DO;              /* NOT POINTER NOTATION.        @ZMB0031*/ 33562000
*             IVLP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 33563500
*             IVRP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 33565000
*           END;             /* NOT POINTER NOTATION.        @ZMB0031*/ 33566500
*         IF IVLP=1 THEN     /* PARM15((REGNAME)) USED?      @ZMB0031*/ 33568000
*           EXTV=PARM15(1,IVLP+1:IVRP-1); /* STRIP INNER PARENS      */ 33570000
*         ELSE DO;           /* REG FORM NOT USED                    */ 33580000
*           ANS MSG('AHA0043 PARM15 MUST BE IN REGISTER FORM - '||      33590000
*                   '''PARM15((REGNAME))''. NO TEXT IS GENERATED.');    33600000
*           IVRC=12;         /* PREVENT TEXT GENERATION              */ 33610000
*         END;               /* REG FORM NOT USED                    */ 33620000
*       END;                 /* ARGUMENT SPECIFIED                   */ 33630000
*   END;                     /* PARM15 SPECIFIED                     */ 33640000
*/********************************************************************/ 33666000
*/*      PROCESS  P A R M 0  KEYWORD                                 */ 33672000
*/********************************************************************/ 33678000
* IF PARM0 ^= ''             /* PARM0 SPECIFIED?                     */ 33684000
*   THEN DO;                 /* YES                                  */ 33690000
*     S(12) = 'Y';           /* INDICATE KEYWORD SPECIFIED           */ 33696000
*     DVKC  = DVKC+1;        /* BUMP NO. DATA VALUE KYWDS SPECIFIED  */ 33702000
*     EKW   = 12;            /* SET DATA VALUE KEYWORD SUBSCRIPT     */ 33708000
*     EXTK  = '16';          /* SET DATA-FIELD-TO-BE-EXTRACTED INDIC.*/ 33714000
*     IVDOCMT=IVDOCMT||' PARM0'||PARM0;                                 33720000
*     EXTV=PARM0(1);                                                    33726000
*     IF NUMBER(PARM0) > 1   /* TOO MANY PARM0 ARGUMENTS?            */ 33732000
*       THEN DO;                                                        33738000
*         ANS MSG('AHA0033 PARM0 - '||PARM0||                           33744000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       33750000
*                 'NO TEXT IS GENERATED.');                             33756000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 33762000
*       END;                 /* TOO MANY PARM0 ARGUMENTS             */ 33768000
*     IF PARM0(1) = ''       /* IS ARGUMENT NULL?                    */ 33774000
*       THEN DO;             /* YES -                                */ 33780000
*         ANS MSG('AHA0013 PARM0(1) (REGISTER) IS REQUIRED '||          33786000
*                 'BUT IS NOT SPECIFIED.'||                             33792000
*                 '. NO TEXT IS GENERATED.');                           33798000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 33804000
*       END;                 /* ARGUMENT IS NULL                     */ 33810000
*       ELSE DO;             /* ARGUMENT SPECIFIED                   */ 33816000
*         IVLP=INDEX(PARM0(1),'('); /* GET POSITION OF LEFT PAREN    */ 33822000
*         IF IVLP=1 THEN     /* IF POINTER NOTATION          @ZMB0031*/ 33828000
*           DO;              /* POINTER NOTATION.            @ZMB0031*/ 33830000
*             IVRP=LENGTH(PARM0(1)); /*                      @ZMB0031*/ 33832000
*             IF PARM0(1,IVRP:IVRP)^=')' THEN /* IF NOT A RIGHT         33834000
*                                                PAREN       @ZMB0031*/ 33836000
*               IVRP=IVLP;   /* FORCE 'NOT-REGISTER FORM'    @ZMB0031*/ 33838000
*           END;             /* POINTER NOTATION.            @ZMB0031*/ 33840000
*         ELSE               /* NOT POINTER NOTATION.        @ZMB0031*/ 33842000
*           DO;              /* NOT POINTER NOTATION.        @ZMB0031*/ 33844000
*             IVLP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 33846000
*             IVRP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 33848000
*           END;             /* NOT POINTER NOTATION.        @ZMB0031*/ 33850000
*         IF IVLP=1 THEN     /* PARM0((REGNAME)) USED?       @ZMB0031*/ 33852000
*           EXTV=PARM0(1,IVLP+1:IVRP-1); /* STRIP INNER PARENS       */ 33854000
*         ELSE DO;           /* REG FORM NOT USED                    */ 33906000
*           ANS MSG('AHA0043 PARM0 MUST BE IN REGISTER FORM - '||       33912000
*                   '''PARM0((REGNAME))''. NO TEXT IS GENERATED.');     33918000
*           IVRC=12;         /* PREVENT TEXT GENERATION              */ 33924000
*         END;               /* REG FORM NOT USED                    */ 33930000
*       END;                 /* ARGUMENT SPECIFIED                   */ 33936000
*   END;                     /* PARM0 SPECIFIED                      */ 33942000
*/********************************************************************/ 33948000
*/*      PROCESS  P A R M 1  KEYWORD                                 */ 33954000
*/********************************************************************/ 33960000
* IF PARM1 ^= ''             /* PARM1 SPECIFIED?                     */ 33966000
*   THEN DO;                 /* YES                                  */ 33972000
*     S(13) = 'Y';           /* INDICATE KEYWORD SPECIFIED           */ 33978000
*     DVKC  = DVKC+1;        /* BUMP NO. DATA VALUE KYWDS SPECIFIED  */ 33984000
*     EKW   = 13;            /* SET DATA VALUE KEYWORD SUBSCRIPT     */ 33990000
*     EXTK  = '20';          /* SET DATA-FIELD-TO-BE-EXTRACTED INDIC.*/ 33996000
*     IVDOCMT=IVDOCMT||' PARM1'||PARM1;                                 34002000
*     EXTV=PARM1(1);                                                    34008000
*     IF NUMBER(PARM1) > 1   /* TOO MANY PARM1 ARGUMENTS?            */ 34014000
*       THEN DO;                                                        34020000
*         ANS MSG('AHA0033 PARM1 - '||PARM1||                           34026000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       34032000
*                 'NO TEXT IS GENERATED.');                             34038000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 34044000
*       END;                 /* TOO MANY PARM1 ARGUMENTS             */ 34050000
*     IF PARM1(1) = ''       /* IS ARGUMENT NULL?                    */ 34056000
*       THEN DO;             /* YES -                                */ 34062000
*         ANS MSG('AHA0013 PARM1(1) (REGISTER) IS REQUIRED '||          34068000
*                 'BUT IS NOT SPECIFIED.'||                             34074000
*                 '. NO TEXT IS GENERATED.');                           34080000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 34086000
*       END;                 /* ARGUMENT IS NULL                     */ 34092000
*       ELSE DO;             /* ARGUMENT SPECIFIED                   */ 34098000
*         IVLP=INDEX(PARM1(1),'('); /* GET POSITION OF LEFT PAREN    */ 34104000
*         IF IVLP=1 THEN     /* IF POINTER NOTATION          @ZMB0031*/ 34110000
*           DO;              /* POINTER NOTATION.            @ZMB0031*/ 34112000
*             IVRP=LENGTH(PARM1(1)); /*                      @ZMB0031*/ 34114000
*             IF PARM1(1,IVRP:IVRP)^=')' THEN /* IF NOT A RIGHT         34116000
*                                                PAREN       @ZMB0031*/ 34118000
*               IVRP=IVLP;   /* FORCE 'NOT-REGISTER FORM'    @ZMB0031*/ 34120000
*           END;             /* POINTER NOTATION.            @ZMB0031*/ 34122000
*         ELSE               /* NOT POINTER NOTATION.        @ZMB0031*/ 34124000
*           DO;              /* NOT POINTER NOTATION.        @ZMB0031*/ 34126000
*             IVLP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 34128000
*             IVRP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 34130000
*           END;             /* NOT POINTER NOTATION.        @ZMB0031*/ 34132000
*         IF IVLP=1 THEN     /* PARM1((REGNAME)) USED?       @ZMB0031*/ 34134000
*           EXTV=PARM1(1,IVLP+1:IVRP-1); /* STRIP INNER PARENS       */ 34136000
*         ELSE DO;           /* REG FORM NOT USED                    */ 34188000
*           ANS MSG('AHA0043 PARM1 MUST BE IN REGISTER FORM - '||       34194000
*                   '''PARM1((REGNAME))''. NO TEXT IS GENERATED.');     34200000
*           IVRC=12;         /* PREVENT TEXT GENERATION              */ 34206000
*         END;               /* REG FORM NOT USED                    */ 34212000
*       END;                 /* ARGUMENT SPECIFIED                   */ 34218000
*   END;                     /* PARM1 SPECIFIED                      */ 34224000
*/********************************************************************/ 34230000
*/*      PROCESS  K E Y  KEYWORD                                     */ 34236000
*/********************************************************************/ 34242000
* IF KEY ^= ''               /* KEY SPECIFIED?                       */ 34248000
*   THEN DO;                 /* YES                                  */ 34254000
*     S(14) = 'Y';           /* INDICATE KEYWORD SPECIFIED           */ 34260000
*     DVKC  = DVKC+1;        /* BUMP NO. DATA VALUE KYWDS SPECIFIED  */ 34266000
*     EKW   = 14;            /* SET DATA VALUE KEYWORD SUBSCRIPT     */ 34272000
*     EXTK  = '24';          /* SET DATA-FIELD-TO-BE-EXTRACTED INDIC.*/ 34278000
*     IVDOCMT=IVDOCMT||' KEY'||KEY;                                     34284000
*     EXTV=KEY(1);                                                      34290000
*     IF NUMBER(KEY) > 1     /* TOO MANY KEY ARGUMENTS?              */ 34296000
*       THEN DO;                                                        34302000
*         ANS MSG('AHA0033 KEY - '||KEY||                               34308000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       34314000
*                 'NO TEXT IS GENERATED.');                             34320000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 34326000
*       END;                 /* TOO MANY KEY ARGUMENTS               */ 34332000
*     IF KEY(1) = ''         /* IS ARGUMENT NULL?                    */ 34338000
*       THEN DO;             /* YES -                                */ 34344000
*         ANS MSG('AHA0013 KEY(1) (REGISTER) IS REQUIRED '||            34350000
*                 'BUT IS NOT SPECIFIED.'||                             34356000
*                 '. NO TEXT IS GENERATED.');                           34362000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 34368000
*       END;                 /* ARGUMENT IS NULL                     */ 34374000
*       ELSE DO;             /* ARGUMENT SPECIFIED                   */ 34380000
*         IVLP=INDEX(KEY(1),'('); /* GET POSITION OF LEFT PAREN      */ 34386000
*         IF IVLP=1 THEN     /* IF POINTER NOTATION          @ZMB0031*/ 34392000
*           DO;              /* POINTER NOTATION.            @ZMB0031*/ 34394000
*             IVRP=LENGTH(KEY(1)); /*                        @ZMB0031*/ 34396000
*             IF KEY(1,IVRP:IVRP)^=')' THEN /* IF NOT A RIGHT           34398000
*                                              PAREN         @ZMB0031*/ 34400000
*               IVRP=IVLP;   /* FORCE 'NOT-REGISTER FORM'    @ZMB0031*/ 34402000
*           END;             /* POINTER NOTATION.            @ZMB0031*/ 34404000
*         ELSE               /* NOT POINTER NOTATION.        @ZMB0031*/ 34406000
*           DO;              /* NOT POINTER NOTATION.        @ZMB0031*/ 34408000
*             IVLP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 34410000
*             IVRP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 34412000
*           END;             /* NOT POINTER NOTATION.        @ZMB0031*/ 34414000
*         IF IVLP=1 THEN     /* KEY((REGNAME)) USED?         @ZMB0031*/ 34416000
*           EXTV=KEY(1,IVLP+1:IVRP-1); /* STRIP INNER PARENS         */ 34418000
*         ELSE DO;           /* REG FORM NOT USED                    */ 34470000
*           ANS MSG('AHA0043 KEY MUST BE IN REGISTER FORM - '||         34476000
*                   '''KEY((REGNAME))''. NO TEXT IS GENERATED.');       34482000
*           IVRC=12;         /* PREVENT TEXT GENERATION              */ 34488000
*         END;               /* REG FORM NOT USED                    */ 34494000
*       END;                 /* ARGUMENT SPECIFIED                   */ 34500000
*   END;                     /* KEY SPECIFIED                        */ 34506000
*/********************************************************************/ 34512000
*/*      PROCESS  A S I D  KEYWORD                                   */ 34518000
*/********************************************************************/ 34524000
* IF ASID ^= ''              /* ASID SPECIFIED?                      */ 34530000
*   THEN DO;                 /* YES                                  */ 34536000
*     S(15) = 'Y';           /* INDICATE KEYWORD SPECIFIED           */ 34542000
*     DVKC  = DVKC+1;        /* BUMP NO. DATA VALUE KYWDS SPECIFIED  */ 34548000
*     EKW   = 15;            /* SET DATA VALUE KEYWORD SUBSCRIPT     */ 34554000
*     EXTK  = '28';          /* SET DATA-FIELD-TO-BE-EXTRACTED INDIC.*/ 34560000
*     IVDOCMT=IVDOCMT||' ASID'||ASID;                                   34566000
*     EXTV=ASID(1);                                                     34572000
*     IF NUMBER(ASID) > 1    /* TOO MANY ASID ARGUMENTS?             */ 34578000
*       THEN DO;                                                        34584000
*         ANS MSG('AHA0033 ASID - '||ASID||                             34590000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       34596000
*                 'NO TEXT IS GENERATED.');                             34602000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 34608000
*       END;                 /* TOO MANY ASID ARGUMENTS              */ 34614000
*     IF ASID(1) = ''        /* IS ARGUMENT NULL?                    */ 34620000
*       THEN DO;             /* YES -                                */ 34626000
*         ANS MSG('AHA0013 ASID(1) (REGISTER) IS REQUIRED '||           34632000
*                 'BUT IS NOT SPECIFIED.'||                             34638000
*                 '. NO TEXT IS GENERATED.');                           34644000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 34650000
*       END;                 /* ARGUMENT IS NULL                     */ 34656000
*       ELSE DO;             /* ARGUMENT SPECIFIED                   */ 34662000
*         IVLP=INDEX(ASID(1),'('); /* GET POSITION OF LEFT PAREN     */ 34668000
*         IF IVLP=1 THEN     /* IF POINTER NOTATION          @ZMB0031*/ 34674000
*           DO;              /* POINTER NOTATION.            @ZMB0031*/ 34676000
*             IVRP=LENGTH(ASID(1)); /*                       @ZMB0031*/ 34678000
*             IF ASID(1,IVRP:IVRP)^=')' THEN /* IF NOT A RIGHT          34680000
*                                               PAREN        @ZMB0031*/ 34682000
*               IVRP=IVLP;   /* FORCE 'NOT-REGISTER FORM'    @ZMB0031*/ 34684000
*           END;             /* POINTER NOTATION.            @ZMB0031*/ 34686000
*         ELSE               /* NOT POINTER NOTATION.        @ZMB0031*/ 34688000
*           DO;              /* NOT POINTER NOTATION.        @ZMB0031*/ 34690000
*             IVLP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 34692000
*             IVRP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 34694000
*           END;             /* NOT POINTER NOTATION.        @ZMB0031*/ 34696000
*         IF IVLP=1 THEN     /* ASID((REGNAME)) USED?        @ZMB0031*/ 34698000
*           EXTV=ASID(1,IVLP+1:IVRP-1); /* STRIP INNER PARENS        */ 34700000
*         ELSE DO;           /* REG FORM NOT USED                    */ 34752000
*           ANS MSG('AHA0043 ASID MUST BE IN REGISTER FORM - '||        34758000
*                   '''ASID((REGNAME))''. NO TEXT IS GENERATED.');      34764000
*           IVRC=12;         /* PREVENT TEXT GENERATION              */ 34770000
*         END;               /* REG FORM NOT USED                    */ 34776000
*       END;                 /* ARGUMENT SPECIFIED                   */ 34782000
*   END;                     /* ASID SPECIFIED                       */ 34788000
*/********************************************************************/ 34794000
*/*      PROCESS  L P  KEYWORD                                       */ 34800000
*/********************************************************************/ 34806000
* IF LP ^= ''                /* LP SPECIFIED?                        */ 34812000
*   THEN DO;                 /* YES                                  */ 34818000
*     S(16) = 'Y';           /* INDICATE KEYWORD SPECIFIED           */ 34824000
*     DVKC  = DVKC+1;        /* BUMP NO. DATA VALUE KYWDS SPECIFIED  */ 34830000
*     EKW   = 16;            /* SET DATA VALUE KEYWORD SUBSCRIPT     */ 34836000
*     EXTK  = '32';          /* SET DATA-FIELD-TO-BE-EXTRACTED INDIC.*/ 34842000
*     IVDOCMT=IVDOCMT||' LP'||LP;                                       34848000
*     EXTV=LP(1);                                                       34854000
*     IF NUMBER(LP) > 1      /* TOO MANY LP ARGUMENTS?               */ 34860000
*       THEN DO;                                                        34866000
*         ANS MSG('AHA0033 LP - '||LP||                                 34872000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       34878000
*                 'NO TEXT IS GENERATED.');                             34884000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 34890000
*       END;                 /* TOO MANY LP ARGUMENTS                */ 34896000
*     IF LP(1) = ''          /* IS ARGUMENT NULL?                    */ 34902000
*       THEN DO;             /* YES -                                */ 34908000
*         ANS MSG('AHA0013 LP(1) (REGISTER) IS REQUIRED '||             34914000
*                 'BUT IS NOT SPECIFIED.'||                             34920000
*                 '. NO TEXT IS GENERATED.');                           34926000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 34932000
*       END;                 /* ARGUMENT IS NULL                     */ 34938000
*       ELSE DO;             /* ARGUMENT SPECIFIED                   */ 34944000
*         IVLP=INDEX(LP(1),'('); /* GET POSITION OF LEFT PAREN       */ 34950000
*         IF IVLP=1 THEN     /* IF POINTER NOTATION          @ZMB0031*/ 34956000
*           DO;              /* POINTER NOTATION.            @ZMB0031*/ 34958000
*             IVRP=LENGTH(LP(1)); /*                         @ZMB0031*/ 34960000
*             IF LP(1,IVRP:IVRP)^=')' THEN /* IF NOT A RIGHT            34962000
*                                             PAREN          @ZMB0031*/ 34964000
*               IVRP=IVLP;   /* FORCE 'NOT-REGISTER FORM'    @ZMB0031*/ 34966000
*           END;             /* POINTER NOTATION.            @ZMB0031*/ 34968000
*         ELSE               /* NOT POINTER NOTATION.        @ZMB0031*/ 34970000
*           DO;              /* NOT POINTER NOTATION.        @ZMB0031*/ 34972000
*             IVLP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 34974000
*             IVRP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 34976000
*           END;             /* NOT POINTER NOTATION.        @ZMB0031*/ 34978000
*         IF IVLP=1 THEN     /* LP((REGNAME)) USED?          @ZMB0031*/ 34980000
*           EXTV=LP(1,IVLP+1:IVRP-1); /* STRIP INNER PARENS          */ 34982000
*         ELSE DO;           /* REG FORM NOT USED                    */ 35034000
*           ANS MSG('AHA0043 LP MUST BE IN REGISTER FORM - '||          35040000
*                   '''LP((REGNAME))''. NO TEXT IS GENERATED.');        35046000
*           IVRC=12;         /* PREVENT TEXT GENERATION              */ 35052000
*         END;               /* REG FORM NOT USED                    */ 35058000
*       END;                 /* ARGUMENT SPECIFIED                   */ 35064000
*   END;                     /* LP SPECIFIED                         */ 35070000
*/********************************************************************/ 35076000
*/*      PROCESS  E N T R Y  KEYWORD                                 */ 35076200
*/********************************************************************/ 35076300
* IF ENTRY ^= ''             /* ENTRY SPECIFIED?                     */ 35076400
*   THEN DO;                 /* YES                                  */ 35076800
*     S(17) = 'Y';           /* INDICATE KEYWORD SPECIFIED           */ 35077000
*     DVKC  = DVKC+1;        /* BUMP NO. DATA VALUE KYWDS SPECIFIED  */ 35077200
*     EKW   = 17;            /* SET DATA VALUE KEYWORD SUBSCRIPT     */ 35077400
*     EXTK  = '36';          /* SET DATA-FIELD-TO-BE-EXTRACTED INDIC.*/ 35077600
*     IVDOCMT=IVDOCMT||' ENTRY'||ENTRY;                                 35077700
*     EXTV=ENTRY(1);                                                    35077800
*     IF NUMBER(ENTRY) > 1   /* TOO MANY ENTRY ARGUMENTS?            */ 35077900
*       THEN DO;                                                        35078000
*         ANS MSG('AHA0033 ENTRY - '||ENTRY||                           35078100
*                 ' - HAS TOO MANY ARGUMENTS. '||                       35078200
*                 'NO TEXT IS GENERATED.');                             35078300
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 35078400
*       END;                 /* TOO MANY ENTRY ARGUMENTS             */ 35078500
*     IF ENTRY(1) = ''       /* IS ARGUMENT NULL?                    */ 35078600
*       THEN DO;             /* YES -                                */ 35078700
*         ANS MSG('AHA0013 ENTRY(1) (REGISTER) IS REQUIRED '||          35078800
*                 'BUT IS NOT SPECIFIED.'||                             35078900
*                 '. NO TEXT IS GENERATED.');                           35079000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 35079100
*       END;                 /* ARGUMENT IS NULL                     */ 35079200
*       ELSE DO;             /* ARGUMENT SPECIFIED                   */ 35079300
*         IVLP=INDEX(ENTRY(1),'('); /* GET POSITION OF LEFT PAREN    */ 35079400
*         IF IVLP=1 THEN     /* IF POINTER NOTATION          @ZMB0031*/ 35079500
*           DO;              /* POINTER NOTATION.            @ZMB0031*/ 35079600
*             IVRP=LENGTH(ENTRY(1)); /*                      @ZMB0031*/ 35079700
*             IF ENTRY(1,IVRP:IVRP)^=')' THEN /* IF NOT A RIGHT         35079800
*                                                PAREN       @ZMB0031*/ 35079900
*               IVRP=IVLP;   /* FORCE 'NOT-REGISTER FORM'    @ZMB0031*/ 35080000
*           END;             /* POINTER NOTATION.            @ZMB0031*/ 35080100
*         ELSE               /* NOT POINTER NOTATION.        @ZMB0031*/ 35080200
*           DO;              /* NOT POINTER NOTATION.        @ZMB0031*/ 35080300
*             IVLP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 35080400
*             IVRP=0;        /* NOT POINTER NOTATION.        @ZMB0031*/ 35080500
*           END;             /* NOT POINTER NOTATION.        @ZMB0031*/ 35080600
*         IF IVLP=1 THEN     /* ENTRY((REGNAME)) USED?       @ZMB0031*/ 35080700
*           EXTV=ENTRY(1,IVLP+1:IVRP-1); /* STRIP INNER PARENS       */ 35080800
*         ELSE DO;           /* REG FORM NOT USED                    */ 35080900
*           ANS MSG('AHA0043 ENTRY MUST BE IN REGISTER FORM - '||       35081000
*                   '''ENTRY((REGNAME))''. NO TEXT IS GENERATED.');     35081100
*           IVRC=12;         /* PREVENT TEXT GENERATION              */ 35081200
*         END;               /* REG FORM NOT USED                    */ 35081300
*       END;                 /* ARGUMENT SPECIFIED                   */ 35081400
*   END;                     /* ENTRY SPECIFIED                      */ 35081500
*/********************************************************************/ 35081600
*/*      PROCESS  A L L  KEYWORD                                     */ 35081700
*/********************************************************************/ 35081800
* IF ALL ^= ''               /* ALL SPECIFIED?                       */ 35081900
*   THEN DO;                 /* YES                                  */ 35082000
*     S(18) = 'Y';           /* INDICATE KEYWORD SPECIFIED           */ 35082100
*     DVKC  = DVKC+1;        /* BUMP NO. DATA VALUE KYWDS SPECIFIED  */ 35082200
*     EKW   = 18;            /* SET DATA VALUE KEYWORD SUBSCRIPT     */ 35082300
*     EXTK  = '0';           /* SET DATA-FIELD-TO-BE-EXTRACTED INDIC.*/ 35082400
*     EXTV  = 'GPR01F';      /* PREVENT LR AFTER BALR IN EXPANSION.  */ 35082500
*     IVDOCMT=IVDOCMT||' ALL'||ALL;                                     35082600
*     ALLV=ALL(1);                                                      35082700
*     IF NUMBER(ALL) > 1     /* TOO MANY ALL ARGUMENTS?              */ 35082800
*       THEN DO;                                                        35082900
*         ANS MSG('AHA0033 ALL - '||ALL||                               35083000
*                 ' - HAS TOO MANY ARGUMENTS. '||                       35083100
*                 'NO TEXT IS GENERATED.');                             35083200
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 35083300
*       END;                 /* TOO MANY ALL ARGUMENTS               */ 35083400
*     IF ALL(1)^='YES'       /* IS ARGUMENT INVALID?                 */ 35083500
*       THEN DO;             /* ARGUMENT IS NOT 'YES'                */ 35083600
*         ANS MSG('AHA0043 ALL MUST BE '||                              35083700
*                 '''YES''. NO TEXT IS GENERATED.');                    35083800
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 35083900
*       END;                 /* ARGUMENT IS NOT 'YES'                */ 35084000
*   END;                     /* PURGE SPECIFIED                      */ 35084100
*/********************************************************************/ 35084200
*/*      PROCESS  R E L A T E D  KEYWORD                             */ 35084300
*/********************************************************************/ 35088000
* IF RELATED ^= ''           /* IF RELATED WAS SPECIFIED             */ 35094000
*   THEN                     /* ADD KEYWORD TO DO COMMENT            */ 35100000
*     IVDOCMT=IVDOCMT||' RELATED'||RELATED;                             35106000
*/********************************************************************/ 35107000
*/*      ADD MACDATE TO DO COMMENT                                   */ 35108000
*/********************************************************************/ 35109000
* IVDOCMT=IVDOCMT||' MACDATE(82.076) ';                                 35110000
*LHA00100:                                                              35112000
* IF MACLIST(1) = 'STACK'   THEN GOTO LHA01000;                         35118000
* IF MACLIST(1) = 'UNSTACK' THEN GOTO LHA02000;                         35124000
* IF MACLIST(1) = 'EXTRACT' THEN GOTO LHA03000;                         35130000
* IVRC=12;                                                              35136000
* ANS MSG('AHA0043 PCLINK OPTION - '||MACLIST(1)||                      35142000
*         ' - IS INVALID. NO TEXT IS GENERATED.');                      35148000
* GOTO LHA09000;             /* GO PUT OUT LABEL AND/OR DO-END STMTS */ 35154000
*/********************************************************************/ 35160000
*/*      S T A C K  UNIQUE CHECKS                                    */ 35166000
*/********************************************************************/ 35172000
*LHA01000:                                                              35178000
* N=4;                       /* CK FOR INVALID KYWDS 4-18            */ 35184000
*LHA01010:                                                              35190000
* IF S(N) = 'Y' THEN                                                    35196000
*   DO;                                                                 35202000
*     ANS MSG('AHA0073 - '''||KW(N)||''' IS INVALID WITH STACK '||      35208000
*             'REQUESTS. NO TEXT IS GENERATED.');                       35214000
*     IVRC=12;                                                          35220000
*   END;                                                                35226000
* N=N+1;                                                                35232000
* IF N <= 18 THEN GOTO LHA01010;                                        35238000
* IF OUTKV = 'DEFAULT' THEN                                             35238600
*   OUTKV = 'CALLER';                                                   35239200
* IF OUTKV = 'STACK' THEN                                               35239800
*   DO;                                                                 35240400
*     ANS MSG('AHA0073 - ''OUTKEY(STACK)'' IS INVALID WITH '||          35241000
*             'STACK REQUESTS. NO TEXT IS GENERATED.');                 35241600
*     IVRC=12;                                                          35242200
*   END;                                                                35242800
* GOTO LHA09000;             /* GO GENERATE S T A C K CODE           */ 35244000
*/********************************************************************/ 35250000
*/*      U N S T A C K  UNIQUE CHECKS                                */ 35256000
*/********************************************************************/ 35262000
*LHA02000:                                                              35268000
* N=8;                       /* CK FOR INVALID KYWDS 8-18            */ 35274000
*LHA02010:                                                              35280000
* IF S(N) = 'Y' THEN                                                    35286000
*   DO;                                                                 35292000
*     ANS MSG('AHA0073 - '''||KW(N)||''' IS INVALID WITH UNSTACK '||    35298000
*             'REQUESTS. NO TEXT IS GENERATED.');                       35304000
*     IVRC=12;                                                          35310000
*   END;                                                                35316000
* N=N+1;                                                                35322000
* IF N <= 18 THEN GOTO LHA02010;                                        35328000
* IF S(2) = 'Y' THEN         /* IF OUTKEY WAS SPECIFIED              */ 35334000
*   DO;                      /* OUTKEY SPECIFIED                     */ 35344000
*     IF S(4) = 'Y' THEN                                                35382000
*       DO;                                                             35388000
*         ANS MSG('AHA0073 - ''OUTKEY'' IS INVALID WITH '||             35394000
*                 '''UNSTACK TO''. NO TEXT IS GENERATED.');             35400000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 35406000
*       END;                                                            35412000
*     IF S(5) = 'Y' THEN                                                35418000
*       DO;                                                             35424000
*/* TO ALLOW KEY 0 EQUIVALENT SYMBOLICS TO BE VALID WITH UNSTACK THRU*/ 35430000
*/* CHANGE 'OUTKEY(1)' ON NEXT STMT TO 'OUTKV'.                      */ 35434000
*         IF OUTKEY(1) = 'ZERO'    THEN GOTO LHA02020;                  35438000
*         IF OUTKV = 'STACK'   THEN GOTO LHA02020;                      35442000
*         ANS MSG('AHA0073 - ''OUTKEY'' MUST BE '||                     35446000
*                 '''ZERO'' OR ''STACK'' WHEN USED WITH '||             35450000
*                 '''UNSTACK THRU''. NO TEXT IS GENERATED.');           35460000
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 35466000
*       END;                                                            35472000
*     IF S(6) = 'Y' THEN                                                35472800
*       DO;                                                             35473600
*         ANS MSG('AHA0073 - ''OUTKEY'' IS INVALID WITH '||             35474400
*                 '''UNSTACK PURGE''. NO TEXT IS GENERATED.');          35475200
*         IVRC=12;           /* PREVENT TEXT GENERATION              */ 35476000
*       END;                                                            35476800
*   END;                     /* OUTKEY WAS SPECIFIED                 */ 35478000
* ELSE                       /* OUTKEY='DEFAULT'                     */ 35478700
*   DO;                                                                 35479400
*     IF S(5) = 'Y' THEN     /* FOR THRU, OUTKEY DEFAULTS TO STACK   */ 35480100
*       OUTKV = 'STACK';                                                35480800
*     ELSE                   /* FOR TO OR PURGE,THE DEFAULT IS CALLER*/ 35481500
*       OUTKV = 'CALLER';                                               35482200
*   END;                                                                35482900
*LHA02020:                                                              35484000
* IF S(4) = 'Y' THEN         /* IF TO SPECIFIED                      */ 35490000
*   IF S(5) = 'Y' THEN       /* AND THRU SPECIFIED                   */ 35496000
*     DO;                                                               35502000
*       ANS MSG('AHA0073 - ''TO'' AND ''THRU'' OPTIONS ARE '||          35508000
*               'MUTUALLY EXCLUSIVE. NO TEXT IS GENERATED.');           35514000
*       IVRC = 12;           /* PREVENT TEXT GENERATION              */ 35520000
*     END;                                                              35526000
* IF S(4) = 'Y' THEN         /* IF TO SPECIFIED                      */ 35532000
*   IF S(6) = 'Y' THEN       /* AND PURGE SPECIFIED                  */ 35538000
*     DO;                                                               35544000
*       ANS MSG('AHA0073 - ''TO'' AND ''PURGE'' OPTIONS ARE '||         35550000
*               'MUTUALLY EXCLUSIVE. NO TEXT IS GENERATED.');           35556000
*       IVRC = 12;           /* PREVENT TEXT GENERATION              */ 35562000
*     END;                                                              35568000
* IF S(5) = 'Y' THEN         /* IF THRU SPECIFIED                    */ 35574000
*   IF S(6) = 'Y' THEN       /* AND PURGE SPECIFIED                  */ 35580000
*     DO;                                                               35586000
*       ANS MSG('AHA0073 - ''THRU'' AND ''PURGE'' OPTIONS ARE '||       35592000
*               'MUTUALLY EXCLUSIVE. NO TEXT IS GENERATED.');           35598000
*       IVRC = 12;           /* PREVENT TEXT GENERATION              */ 35604000
*     END;                                                              35610000
* IF S(4) ^= 'Y' THEN        /* IF  TO    NOT SPECIFIED              */ 35616000
*   IF S(5) ^= 'Y' THEN      /* AND THRU  NOT SPECIFIED              */ 35620000
*     IF S(6) ^= 'Y' THEN    /* AND PURGE NOT SPECIFIED              */ 35624000
*       DO;                                                             35634000
*         ANS MSG('AHA0073 - ''TO'',''THRU'' OR ''PURGE'' MUST BE '||   35640000
*                 'SPECIFIED WITH UNSTACK. NO TEXT IS GENERATED.');     35646000
*         IVRC = 12;         /* PREVENT TEXT GENERATION              */ 35652000
*       END;                                                            35658000
* IF S(7) = 'Y' THEN         /* IF ERRET SPECIFIED                   */ 35664000
*   DO;                                                                 35670000
*     IF S(6) = 'Y' THEN     /* AND PURGE SPECIFIED                  */ 35684000
*       DO;                                                             35686000
*         ANS MSG('AHA0073 - ''ERRET'' IS NOT VALID WITH ''UNSTACK '||  35688000
*                 'PURGE''. NO TEXT IS GENERATED.');                    35690000
*         IVRC = 12;         /* PREVENT TEXT GENERATION              */ 35692000
*       END;                                                            35694000
*   END;                     /* ERRET SPECIFIED                      */ 35696000
* GOTO LHA09000;             /* GO GENERATE U N S T A C K CODE       */ 35706000
*/********************************************************************/ 35712000
*/*      E X T R A C T  UNIQUE CHECKS                                */ 35718000
*/********************************************************************/ 35724000
*LHA03000:                                                              35730000
* N=1;                       /* CK FOR INVALID KYWDS 1-7             */ 35736000
*LHA03010:                                                              35742000
* IF S(N) = 'Y' THEN                                                    35748000
*   DO;                                                                 35754000
*     ANS MSG('AHA0073 - '''||KW(N)||''' IS INVALID WITH EXTRACT '||    35760000
*             'REQUESTS. NO TEXT IS GENERATED.');                       35766000
*     IVRC=12;                                                          35772000
*   END;                                                                35778000
* N=N+1;                                                                35784000
* IF N <= 7 THEN GOTO LHA03010;                                         35790000
* IF TOKV = '' THEN                                                     35796000
*   DO;                                                                 35802000
*     ANS MSG('AHA0013 - ''TOKEN'' IS REQUIRED WITH EXTRACT '||         35808000
*             'REQUESTS. NO TEXT IS GENERATED.');                       35814000
*     IVRC=12;                                                          35820000
*   END;                                                                35826000
* IF DVKC = 0 THEN                                                      35832000
*   DO;                                                                 35838000
*     ANS MSG('AHA0013 - A DATA VALUE KEYWORD IS REQUIRED WITH '||      35844000
*             'EXTRACT. NO TEXT IS GENERATED.');                        35850000
*     IVRC=12;                                                          35856000
*   END;                                                                35862000
* IF DVKC > 1 THEN                                                      35868000
*   DO;                                                                 35874000
*     ANS MSG('AHA0013 - MUTUALLY EXCLUSIVE DATA VALUE KEYWORDS '||     35880000
*             'SPECIFIED. NO TEXT IS GENERATED.');                      35886000
*     IVRC=12;                                                          35892000
*   END;                                                                35898000
*/********************************************************************/ 35904000
*/* CHECK FOR ILLEGAL REGISTER VALUES FOR EXTRACTS. 0-12 ARE VALID   */ 35914000
*/********************************************************************/ 35924000
* IF EXTV = 'GPR13F' THEN GOTO LHA03020;                                35934000
* IF EXTV = 'GPR14F' THEN GOTO LHA03020;                                35944000
* IF EXTV = 'GPR15F' THEN GOTO LHA03020;                                35954000
* IF EXTV = 'GPR13P' THEN GOTO LHA03020;                                35964000
* IF EXTV = 'GPR14P' THEN GOTO LHA03020;                                35974000
* IF EXTV = 'GPR15P' THEN GOTO LHA03020;                                35984000
* GOTO LHA09000;             /* GO GENERATE  E X T R A C T  CODE     */ 35994000
*LHA03020:                                                              36004000
* ANS MSG('AHA0043 DATA VALUE KYWD USES ILLEGAL REGISTER - '||          36024000
*         EXTV||'. NO TEXT IS GENERATED.');                             36030000
* IVRC=12;                   /* PREVENT TEXT GENERATION              */ 36036000
*/********************************************************************/ 36042000
*/*                DETERMINE IF TEXT SHOULD BE PRODUCED              */ 36048000
*/********************************************************************/ 36054000
*LHA09000:                                                              36060000
*/********************************************************************/ 36084000
*/*                PUT OUT LABELS (IF ANY)                           */ 36090000
*/********************************************************************/ 36096000
* IF MACLABEL ^= ''          /* ANY LABELS SPECIFIED?                */ 36102000
*   THEN                     /* YES - PUT THEM OUT.                  */ 36108000
*     ANS(MACLABEL) COL(MACLMAR);                                       36114000
*/********************************************************************/ 36120000
*/*     PUT OUT DO STATEMENT                                         */ 36126000
*/********************************************************************/ 36132000
*     ANS('DO; '||COMMENT(IVDOCMT)) COL(MACCOL);                        36350000
*/********************************************************************/ 36400000
*/*     CK IF TEXT IS TO BE GENERATED                                */ 36407000
*/********************************************************************/ 36414000
* IF IVRC > 4                /* ANY SEVERE ERRORS?                   */ 36421000
*   THEN                     /* YES -                                */ 36428000
*     GOTO LHA99999;         /*       EXIT - NO TEXT PRODUCED.       */ 36435000
*/********************************************************************/ 36442000
*/*      GO GENERATE CODE FOR THE OPTION SELECTED                    */ 36450000
*/********************************************************************/ 36455000
* IF MACLIST(1) = 'UNSTACK' THEN GOTO LHA20000;                         36460000
* IF MACLIST(1) = 'EXTRACT' THEN GOTO LHA30000;                         36465000
*/********************************************************************/ 36470000
*/*      S T A C K      OPTION   C O D E   G E N E R A T I O N       */ 36475000
*/********************************************************************/ 36480000
*LHA10000:                                                              36485000
* IF INDEX(EHAREGS,'02F')=0 THEN                                        36490000
*   EHAREGS=EHAREGS||'02F';                                             36494000
* IF INDEX(EHAREGS,'05P')=0 THEN                                        36498000
*   EHAREGS=EHAREGS||'05P';                                             36501000
* IF INDEX(EHAREGS,'13P')=0 THEN                                        36504000
*   EHAREGS=EHAREGS||'13P';                                             36507000
* IF INDEX(EHAREGS,'14F')=0 THEN                                        36510000
*   EHAREGS=EHAREGS||'14F';                                             36513000
*/* NOTE: PCLINK STACK CLEARS REGISTER 13                            */ 36516000
* IF SAVEV = 'YES' THEN                                                 36519000
*   SETSL='GPR02F,GPR05P,GPR13P,GPR14F';                                36522000
* ELSE                                                                  36535000
*   DO;                                                                 36540000
*     IF INDEX(EHAREGS,'08F')=0 THEN                                    36545000
*       EHAREGS=EHAREGS||'08F';                                         36550000
*     IF INDEX(EHAREGS,'09P')=0 THEN                                    36555000
*       EHAREGS=EHAREGS||'09P';                                         36560000
*     IF INDEX(EHAREGS,'10F')=0 THEN                                    36565000
*       EHAREGS=EHAREGS||'10F';                                         36570000
*     IF INDEX(EHAREGS,'11F')=0 THEN                                    36575000
*       EHAREGS=EHAREGS||'11F';                                         36580000
*     IF INDEX(EHAREGS,'12F')=0 THEN                                    36585000
*       EHAREGS=EHAREGS||'12F';                                         36590000
*     SETSL='GPR02F,GPR05P,GPR08F,GPR09P,GPR10F,GPR11F,GPR12F';         36595000
*     SETSL=SETSL||',GPR13P,GPR14F';                                    36596000
*   END;                                                                36600000
*                                                                       36605000
* RESTL=SETSL;                                                          36608000
* ANS('RFY ('||RESTL||') RSTD;')                  COL(IVINDNT2);        36609000
*                                                                       36611000
* ANS('GENERATE SETS('||SETSL||');')              COL(IVINDNT2);        36615000
*                                                                       36672100
* /* DO NOT REMOVE THE 9 BLANKS IN FRONT OF SLL INSTRUCTION. @ZMB0341*/ 36672200
* ANS('         SLL   2,8')                COL(MACGLMAR);  /*@ZMB0341*/ 36672300
* ANS('.LEFT ADJUST CONTENTS OF REG2')            COL(CCOL);            36672500
*                                                                       36672800
* IF INKEYV = 'ZERO' THEN                                               36673100
*   DO;                                                                 36673400
*     ANS('*')                                    COL(MACGLMAR);        36673700
*     ANS('.(BITS 24-27 = PSW KEY OF ZERO)')      COL(CCOL);            36674000
*   END;                                                                36674300
* ELSE                                                                  36674600
*   DO;                                                                 36674900
*     ANS('*')                                    COL(MACGLMAR);        36675200
*     ANS('.(BITS 24-27 = PSW KEY FROM IPK)')     COL(CCOL);            36675500
*     ANS('IPK')                                  COL(ICOL);            36675800
*     ANS('.SAVE CALLERS PSW KEY IN REG2')        COL(CCOL);            36676100
*     ANS('SPKA  0(0)')                           COL(ICOL);            36676400
*     ANS('.SET PSW KEY TO ZERO')                 COL(CCOL);            36676700
*   END;                                                                36677500
*                                                                       36677600
* IF SAVEV = 'YES' THEN                                                 36677700
*   DO;                                                                 36677800
*     ANS('L     5,16(0,0)')                      COL(ICOL);            36677900
*     ANS('.GET CVT ADDRESS')                     COL(CCOL);            36678900
*     ANS('L     5,776(,5)')                      COL(ICOL);            36679900
*     ANS('.GET STACK(SAVE=YES) RTN ADDR')        COL(CCOL);            36680900
*     ANS('BALR  5,5')                            COL(ICOL);            36681900
*     ANS('.PERFORM PCLINK STACK SERVICE')        COL(CCOL);            36682900
*   END;                                                                36683900
* ELSE                                                                  36684900
*   DO;                                                                 36685900
*     ANS('L     9,16(0,0)')                      COL(ICOL);            36686900
*     ANS('.GET CVT ADDRESS')                     COL(CCOL);            36687900
*     ANS('L     9,780(,9)')                      COL(ICOL);            36688900
*     ANS('.GET STACK(SAVE=NO) RTN ADDR')         COL(CCOL);            36689900
*     ANS('BALR  5,9')                            COL(ICOL);            36690900
*     ANS('.PERFORM PCLINK STACK SERVICE')        COL(CCOL);            36691900
*   END;                                                                36700000
*                                                                       36705000
* IF INKEYV = 'ZERO' THEN                                               36710000
*   DO;                                                                 36714000
*     IF OUTKV = 'CALLER' THEN GOTO LHA10020;                           36718000
*     IF OUTKV = 'ZERO' THEN GOTO LHA10020;                             36726000
*     ANS('SPKA  '||OUTKV||'*16(0)')              COL(ICOL);            36730000
*     ANS('.SET PSW KEY TO SPECIFIED KEY')        COL(CCOL);            36732000
*     GOTO LHA10020;                                                    36738000
*   END;                                                                36742000
* ELSE                                                                  36746000
*   DO;                                                                 36750000
*     IF OUTKV = 'ZERO' THEN GOTO LHA10020;                             36754000
*     IF OUTKV = 'CALLER' THEN GOTO LHA10010;                           36758000
*     ANS('SPKA  '||OUTKV||'*16(0)')              COL(ICOL);            36766000
*     ANS('.SET PSW KEY TO SPECIFIED KEY')        COL(CCOL);            36769000
*     GOTO LHA10020;                                                    36772000
*LHA10010:                                                              36775000
*     ANS('SPKA  0(2)')                           COL(ICOL);            36778000
*     ANS('.SET PSW KEY TO CALLERS KEY')          COL(CCOL);            36781000
*   END;                                                                36784000
*                                                                       36787000
*LHA10020:                                                              36790000
* ANS('@ENDGEN;')                                 COL(IVINDNT2);        36793000
* ANS(' ')                                        COL(71);              36806000
* GOTO LHA90000;                                                        36825000
*/********************************************************************/ 36830000
*                                                                       36835000
*/********************************************************************/ 36840000
*/*  U N S T A C K      OPTION   C O D E   G E N E R A T I O N       */ 36845000
*/********************************************************************/ 36850000
*LHA20000:                                                              36855000
*     IF INDEX(EHAREGS,'02F')=0 THEN                                    36860000
*       EHAREGS=EHAREGS||'02F';                                         36865000
*     IF INDEX(EHAREGS,'14F')=0 THEN                                    36870000
*       EHAREGS=EHAREGS||'14F';                                         36875000
* IF THRUV ^= '' THEN        /* THRU OPTION SPECIFIED                */ 36880000
*   DO;                                                                 36885000
*     SETSL='GPR02F,GPR03F,GPR13P,GPR14F';                              36890000
*     IF INDEX(EHAREGS,'03F')=0 THEN                                    36895000
*       EHAREGS=EHAREGS||'03F';                                         36901000
*     IF INDEX(EHAREGS,'13P')=0 THEN                                    36907000
*       EHAREGS=EHAREGS||'13P';                                         36913000
*   END;                                                                36925000
*  ELSE                      /* TO OR PURGE OPTION SPECIFIED         */ 36930000
*   DO;                                                                 36935000
*     SETSL='GPR00F,GPR01P,GPR02F,GPR14F,GPR15P';                       36940000
*     IF INDEX(EHAREGS,'00F')=0 THEN                                    36945000
*       EHAREGS=EHAREGS||'00F';                                         36947000
*     IF INDEX(EHAREGS,'01P')=0 THEN                                    36949000
*       EHAREGS=EHAREGS||'01P';                                         36951000
*     IF INDEX(EHAREGS,'15P')=0 THEN                                    36953000
*       EHAREGS=EHAREGS||'15P';                                         36955000
*   END;                                                                36965000
* IF SAVEV = 'NO' THEN       /* SAVEV = 'NO'                         */ 36970000
*   DO;                                                                 36985000
*     IF INDEX(EHAREGS,'08P')=0 THEN                                    36986000
*       EHAREGS=EHAREGS||'08P';                                         36987000
*     IF INDEX(EHAREGS,'09P')=0 THEN                                    36988000
*       EHAREGS=EHAREGS||'09P';                                         36989000
*     IF INDEX(EHAREGS,'10F')=0 THEN                                    36990000
*       EHAREGS=EHAREGS||'10F';                                         37000000
*     IF INDEX(EHAREGS,'11F')=0 THEN                                    37010000
*       EHAREGS=EHAREGS||'11F';                                         37020000
*     IF INDEX(EHAREGS,'12F')=0 THEN                                    37030000
*       EHAREGS=EHAREGS||'12F';                                         37040000
*     SETSL=SETSL||',GPR08P,GPR09P,GPR10F,GPR11F,GPR12F';               37050000
*   END;                                                                37060000
*                                                                       37176000
* RESTL=SETSL;                                                          37177000
* ANS('RFY ('||RESTL||') RSTD;')                  COL(IVINDNT2);        37177300
*                                                                       37178000
* IF TOV ^= '' THEN                                                     37180000
*   DO;                                                                 37184000
*     ANS('GENERATE SETS('||SETSL||')')           COL(IVINDNT2);        37188000
*     ANS('REFS('||TOV||');')                     COL(IVINDNT2+9);      37192000
*     /* DO NOT REMOVE THE 9 BLANKS IN FRONT OF 'LCR'.       @ZMB0341*/ 37205000
*     ANS('         LCR   14,'||TOV)       COL(MACGLMAR);  /*@ZMB0341*/ 37206500
*     ANS('.LOAD TOKEN TO UNSTACK TO')            COL(CCOL);            37208000
*   END;                                                                37215000
* ELSE                                                                  37220000
*   IF THRUV ^= '' THEN                                                 37225000
*     DO;                                                               37230000
*       ANS('GENERATE SETS('||SETSL||')')         COL(IVINDNT2);        37235000
*       ANS('REFS('||THRUV||');')                 COL(IVINDNT2+9);      37240000
*       IF THRUV ^= 'GPR14F' THEN /* IF NOT OPTIMIZED TO REG 14      */ 37242000
*         DO;                                                           37246000
*           /* DO NOT REMOVE THE 9 BLANKS IN FRONT OF 'LR'.  @ZMB0341*/ 37249000
*           ANS('         LR    14,'||THRUV) COL(MACGLMAR);/*@ZMB0341*/ 37250000
*           ANS('.LOAD TOKEN TO UNSTACK THRU')    COL(CCOL);            37251000
*         END;                                                          37255000
*     END;                                                              37258000
*   ELSE                      /* PURGE OPTION WAS SPECIFIED          */ 37261000
*     DO;                                                               37264000
*       ANS('GENERATE SETS('||SETSL||');')        COL(IVINDNT2);        37267000
*       /* DO NOT REMOVE THE 9 BLANKS IN FRONT OF 'LA'.      @ZMB0341*/ 37280000
*       ANS('         LA    14,2')       COL(MACGLMAR);    /*@ZMB0341*/ 37281000
*       ANS('.INDICATE PURGE OPTION SPECIFIED')   COL(CCOL);            37282000
*       ANS('LCR   14,14')                        COL(ICOL);            37284000
*       ANS('.(VIA A TOKEN VALUE OF MINUS 2')     COL(CCOL);            37286000
*     END;                                                              37292000
*                                                                       37293000
* IF (THRUV^='' & INKEYV^='ZERO' & ERRETV^='')                          37294000
*   |(TOV^='' & INKEYV^='ZERO')                                         37294400
*   |(PURGEV^='' & INKEYV^='ZERO') THEN                                 37294800
*   DO;                                                                 37295200
*     ANS('IPK')                                  COL(ICOL);            37295300
*     ANS('.SAVE CALLERS KEY IN REG2')            COL(CCOL);            37295400
*   END;                                                                37295500
* ELSE                                                                  37295600
*   IF (THRUV^='' & INKEYV='ZERO' & ERRETV^='')                         37295700
*     |(TOV^='' & INKEYV='ZERO') THEN                                   37295800
*     DO;                                                               37295900
*       ANS('SLL   2,8')                          COL(ICOL);            37296000
*       ANS('.INDICATE PSW KEY IS ZERO')          COL(CCOL);            37296100
*     END;                                                              37296200
*                                                                       37297200
* IF INKEYV ^= 'ZERO' THEN                                              37297300
*   DO;                                                                 37297400
*     ANS('SPKA  0(0)')                           COL(ICOL);            37297500
*     ANS('.SET PSW KEY TO ZERO')                 COL(CCOL);            37297600
*   END;                                                                37298000
*                                                                       37299000
* IF TOV ^= '' THEN           /* IF UNSTACK TO OPTION                */ 37300000
*   IF ERRETV ^= '' THEN      /* IF ERRET WAS SPECIFIED              */ 37301000
*     DO;                                                               37302000
*       IF ERRLP = 1 THEN     /* IF REGISTER FORM WAS SPECIFIED      */ 37303000
*         ANS('LR    1,'||ERRETV)                 COL(ICOL);            37312000
*       ELSE                  /* LABEL FORM WAS USED                 */ 37315000
*         ANS('LA    1,'||ERRETV)                 COL(ICOL);            37318000
*       ANS('.INDICATE ERROR RETURN ADDRESS')     COL(CCOL);            37321000
*     END;                                                              37324000
*   ELSE                                                                37327000
*     DO;                                                               37330000
*       ANS('SLR   1,1')                          COL(ICOL);            37333000
*       ANS('.INDICATE NO ERROR RETURN ADDRESS')  COL(CCOL);            37336000
*     END;                                                              37348000
*                                                                       37360000
* IF THRUV ^= '' THEN         /* IF UNSTACK THRU OPTION              */ 37360300
*   IF ERRETV ^= '' THEN      /* IF ERRET WAS SPECIFIED              */ 37360600
*     DO;                                                               37360900
*       IF ERRLP = 1 THEN     /* IF REGISTER FORM SPECIFIED          */ 37361200
*         ANS('LR    3,'||ERRETV)                 COL(ICOL);            37361500
*       ELSE                  /* LABEL FORM WAS USED                 */ 37361800
*         ANS('LA    3,'||ERRETV)                 COL(ICOL);            37362100
*       ANS('.INDICATE ERROR RETURN ADDRESS')     COL(CCOL);            37362400
*     END;                                                              37362700
*   ELSE                                                                37363000
*     DO;                                                               37363300
*       ANS('SLR   3,3')                          COL(ICOL);            37363600
*       ANS('.INDICATE NO ERROR RETURN ADDRESS')  COL(CCOL);            37363900
*     END;                                                              37364200
*                                                                       37364500
* IF SAVEV = 'YES' THEN      /* IF TO OR PURGE WITH SAVE(YES)        */ 37365000
*   IF THRUV = '' THEN                                                  37370000
*     DO;                                                               37375000
*       ANS('LR    15,13')                        COL(ICOL);            37380000
*       ANS('.SAVE CONTENTS OF REGISTER 13')      COL(CCOL);            37382000
*     END;                                                              37384000
* IF SAVEV = 'YES' THEN                                                 37386000
*   DO;                                                                 37388000
*     ANS('L     13,16(0,0)')                     COL(ICOL);            37390000
*     ANS('.GET CVT ADDRESS')                     COL(CCOL);            37392000
*     ANS('L     13,784(,13)')                    COL(ICOL);            37394000
*     ANS('.GET UNSTACK(SAVE=YES) RTN ADDR')      COL(CCOL);            37396000
*     ANS('BALR  13,13')                          COL(ICOL);            37398000
*     ANS('.PERFORM PCLINK UNSTACK SERVICE')      COL(CCOL);            37400000
*   END;                                                                37402000
* ELSE                                                                  37404000
*   DO;                                                                 37406000
*     ANS('L     9,16(0,0)')                      COL(ICOL);            37408000
*     ANS('.GET CVT ADDRESS')                     COL(CCOL);            37410000
*     ANS('L     9,816(,9)')                      COL(ICOL);            37412000
*     ANS('.GET UNSTACK(SAVE=NO) RTN ADDR')       COL(CCOL);            37414000
*     ANS('BALR  8,9')                            COL(ICOL);            37416000
*     ANS('.PERFORM PCLINK UNSTACK SERVICE')      COL(CCOL);            37418000
*   END;                                                                37435000
*                                                                       37455000
* IF THRUV ^= '' THEN        /* THRU SPECIFIED                       */ 37460000
*   DO;                                                                 37461000
*     IF OUTKV = 'STACK' THEN                                           37462000
*       DO;                                                             37463000
*         ANS('SPKA  0(2)')                       COL(ICOL);            37464000
*         ANS('.SET PSW KEY')                     COL(CCOL);            37464600
*       END;                                                            37466000
*   END;                                                                37467000
* ELSE                       /* NOTE THAT FOR TO OR PURGE            */ 37468000
*   DO;                      /* OUTKV=CALLER                         */ 37469000
*     IF INKEYV^= 'ZERO' THEN                                           37470000
*       DO;                                                             37471000
*         ANS('SPKA  0(2)')                       COL(ICOL);            37472000
*         ANS('.SET PSW KEY')                     COL(CCOL);            37472600
*       END;                                                            37474000
*   END;                                                                37475000
*                                                                       37476000
* IF SAVEV = 'YES' THEN      /* IF TO OR PURGE WITH SAVE(YES)        */ 37480000
*   IF THRUV = '' THEN                                                  37485000
*     DO;                                                               37490000
*       ANS('LR    13,15')                        COL(ICOL);            37495000
*       ANS('.RESTORE CONTENTS OF REGISTER 13')   COL(CCOL);            37500000
*     END;                                                              37505000
* ANS('@ENDGEN;')                                 COL(IVINDNT2);        37510000
* ANS(' ')                                        COL(71);              37523000
* GOTO LHA90000;                                                        37540000
*/********************************************************************/ 37545000
*                                                                       37550000
*/********************************************************************/ 37555000
*/*  E X T R A C T      OPTION   C O D E   G E N E R A T I O N       */ 37560000
*/********************************************************************/ 37565000
*LHA30000:                                                              37570000
* IF INDEX(EHAREGS,'00F')=0 THEN                                        37575000
*   EHAREGS=EHAREGS||'00F';                                             37579000
* IF INDEX(EHAREGS,'01F')=0 THEN                                        37583000
*   EHAREGS=EHAREGS||'01F';                                             37587000
* IF INDEX(EHAREGS,'14P')=0 THEN                                        37591000
*   EHAREGS=EHAREGS||'14P';                                             37595000
* IF INDEX(EHAREGS,'15P')=0 THEN                                        37599000
*   EHAREGS=EHAREGS||'15P';                                             37610000
* SETSL = 'GPR00F,GPR01F,GPR14P,GPR15P';                                37615000
*                                                                       37617000
* IF ALLV = 'YES' THEN                                                  37619000
*   DO;                                                                 37621000
*     IF INDEX(EHAREGS,'03F')=0 THEN                                    37623000
*       EHAREGS=EHAREGS||'03F';                                         37625000
*     IF INDEX(EHAREGS,'04P')=0 THEN                                    37627000
*       EHAREGS=EHAREGS||'04P';                                         37629000
*     IF INDEX(EHAREGS,'13P')=0 THEN                                    37631000
*       EHAREGS=EHAREGS||'13P';                                         37633000
*   END;                                                                37635000
*                                                                       37637000
* RESTL=SETSL;                                                          37639000
* IF INDEX(SETSL,EXTV)=0 THEN                                           37641000
*   SETSL=SETSL||','||EXTV;                                             37643000
*                                                                       37645000
* ANS('RFY ('||RESTL||') RSTD;')                  COL(IVINDNT2);        37647000
*                                                                       37655000
* ANS('GENERATE')                                 COL(IVINDNT2);        37659000
* ANS('SETS('||SETSL||')')                        COL(IVINDNT2+2);      37663000
* ANS('REFS('||TOKV||');')                        COL(IVINDNT2+2);      37667000
* IF TOKV ^= 'GPR14F' THEN                                              37671000
*   DO;                                                                 37675000
*     /* DO NOT REMOVE THE 9 BLANKS IN FRONT OF 'LR' INSTR.  @ZMB0341*/ 37679000
*     ANS('         LR    14,'||TOKV)       COL(MACGLMAR); /*@ZMB0341*/ 37682300
*     ANS('.GET TOKEN FOR CURRENT STACK ENTRY')   COL(CCOL);            37685600
*   END;                                                                37688900
* /* DO NOT REMOVE THE 9 BLANKS IN FRONT OF 'LA' INSTRUCTION @ZMB0341*/ 37692200
* ANS('         LA    1,'||EXTK)            COL(MACGLMAR); /*@ZMB0341*/ 37695500
* ANS('.INDICATE '||KW(EKW)||' EXTRACTION')       COL(CCOL);            37699000
* ANS('L     15,16(0,0)')                         COL(ICOL);            37704000
* ANS('.GET CVT ADDRESS')                         COL(CCOL);            37709000
* ANS('L     15,824(,15)')                        COL(ICOL);            37714000
* ANS('.GET EXTRACT ROUTINE ADDRESS')             COL(CCOL);            37719000
* ANS('BALR  0,15')                               COL(ICOL);            37724000
* ANS('.PERFORM PCLINK EXTRACT SERVICE')          COL(CCOL);            37729000
* IF EXTV ^= 'GPR01F' THEN    /* IF REG FOR EXTRACTED VALUE IS NOT 1 */ 37734000
*                             /* OR IF 'ALL' WAS SPECIFIED           */ 37739000
*   DO;                                                                 37744000
*     ANS('LR    '||EXTV||',1')                   COL(ICOL);            37749000
*     ANS('.EXTRACTED VALUE TO SPECIFIED REG')    COL(CCOL);            37754000
*   END;                                                                37759000
* ANS('@ENDGEN;')                                 COL(IVINDNT2);        37764000
* ANS(' ')                                        COL(71);              37780000
*/********************************************************************/ 37825000
*LHA90000:                 /* UNRESTRICT REGISTERS                   */ 37830000
*/********************************************************************/ 37840000
* ANS('RFY ('||RESTL||') UNRSTD;')                COL(IVINDNT2);        37850000
*/********************************************************************/ 37860000
*LHA99999:                 /* CLOSE OUT DO GROUP                     */ 37870000
*/********************************************************************/ 37880000
* ANS('END; '||COMMENT(IVDOCMT)) COL(MACCOL); /*             @G860PXZ*/ 37900000
*/********************************************************************/ 38000000
*/*                RETURN                                            */ 38050000
*/********************************************************************/ 38100000
*  RETURN CODE(IVRC);        /* RETURN TO INVOKER                    */ 38200000
*/********************************************************************/ 38250000
*/*                END OF PCLINK MACRO                               */ 38300000
*/********************************************************************/ 38350000
* % END PCLINK;                                                         38400000
