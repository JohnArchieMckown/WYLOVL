*/***  Start of Specifications for IEAMSYMP  *************************/ 00000100
*/*                                                                  */ 00000200
*/*01* Descriptive Name: Static Symbol Service Parameter List        */ 00000400
*/*02*   Acronym:    SYMP                                            */ 00000410
*/*                                                                  */ 00000500
*/*01* Macro Name: IEAMSYMP                                          */ 00000510
*/*                                                                  */ 00000520
*/*01* Dsect Name: Caller supplied                                   */ 00000600
*/*                                                                  */ 00000610
*/*01* Component:  Supervisor Control (SC1C5)                        */ 00000700
*/*                                                                  */ 00000800
*/*01* PROPRIETARY STATEMENT =                                       */ 00000900
*/*                                                                  */ 00001000
*/*    LICENSED MATERIALS - PROPERTY OF IBM                          */ 00001100
*/*    THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                   */ 00001200
*/*    5655-068 (C) COPYRIGHT IBM CORP. 1994                         */ 00001300
*/*    SEE COPYRIGHT INSTRUCTIONS.                                   */ 00001400
*/*                                                                  */ 00001500
*/*01* STATUS = HBB5520                                              */ 00001600
*/*                                                                  */ 00001700
*/*01* EXTERNAL CLASSIFICATION: GUPI                                 */ 00001710
*/*                                                                  */ 00001801
*/*01* END OF EXTERNAL CLASSIFICATION:                               */ 00001802
*/*                                                                  */ 00001810
*/*01* FUNCTION= IEAMSYMP contains the mapping of the parameters     */ 00001900
*/*    used for communication between IPCS exits and the Static      */ 00002000
*/*    Symbol Service Parameter List.                                */ 00002100
*/*                                                                  */ 00002200
*/*01* Eye Catcher: SYMP                                             */ 00002300
*/*02*   Offset:      0                                              */ 00002400
*/*02*   Length:      4                                              */ 00002500
*/*                                                                  */ 00002600
*/*01*  STORAGE ATTRIBUTES: None                                     */ 00002700
*/*02*    Residency: At direction of caller                          */ 00003410
*/*                                                                  */ 00003420
*/*01* Size:       128 bytes                                         */ 00003500
*/*                                                                  */ 00003600
*/*01* Created by:    Caller                                         */ 00003700
*/*                                                                  */ 00004000
*/*01* POINTED TO BY: Invocation dependant                           */ 00004020
*/*                                                                  */ 00004040
*/*01* SERIALIZATION: None                                           */ 00004080
*/*                                                                  */ 00004091
*/*01* METHOD OF ACCESS:                                             */ 00004110
*/*                                                                  */ 00004200
*/*     PLAS = The macro can expand in a LIST or SUBLIST format.     */ 00004300
*/*                                                                  */ 00004400
*/*       Set macro variable EHBENDCHAR to comma or semicolon.       */ 00004500
*/*       Defaults to semicolon for LIST form and must be set        */ 00004600
*/*       for the SUBLIST form.  For example:                        */ 00004700
*/*                                                                  */ 00004800
*/*         %DCL EHBENDCHAR EXTERNAL CHAR                            */ 00004900
*/*         %EHBENDCHAR=','                                          */ 00005000
*/*                                                                  */ 00005100
*/*      LIST FORM    = ?IEAMSYMP MF(LIST,PREFIX,STORCLASS)          */ 00005200
*/*                                                                  */ 00005300
*/*      SUBLIST FORM = ?IEAMSYMP MF(SUBLIST,PREFIX,STORCLASS,LEVEL) */ 00005400
*/*                                                                  */ 00005500
*/*        MF                                                        */ 00005600
*/*       PARM  Meaning                                              */ 00005700
*/*       ----  ---------------------------------------------------  */ 00005800
*/*                                                                  */ 00005900
*/*        1    LIST or L for LIST form                              */ 00006000
*/*             SUBLIST or S for SUBLIST form                        */ 00006100
*/*                                                                  */ 00006200
*/*        2    PREFIX is from 1 to 4 alpha-numeric starting with    */ 00006300
*/*             an alpha character. e.g. 'SYMP'                      */ 00006400
*/*                                                                  */ 00006500
*/*        3    STORAGE CLASS and initialization attribute           */ 00006600
*/*             COMPLETE keyword will cause initial values to        */ 00006700
*/*             be generated.  Default storage class with COMPLETE   */ 00006800
*/*             is STATIC LOCAL.  Can specify BASED, DEFINED ...     */ 00006900
*/*             BASED and DEFINED are not valid with SUBLIST.        */ 00006910
*/*                                                                  */ 00007000
*/*        4    Structure level number to start with.  This can      */ 00007100
*/*             only be specified on the SUBLIST form.               */ 00007200
*/*                                                                  */ 00007300
*/*    ASM = The assembler format takes the form                     */ 00007400
*/*                                                                  */ 00007500
*/*          LABEL  IEAMSYMP DSECT=YES                               */ 00007600
*/*                                NO                                */ 00007700
*/*                                                                  */ 00007800
*/*          The LABEL is used as the prefix for all the             */ 00007900
*/*          field names.  The label cannot exceed 4 characters.     */ 00008000
*/*          For example code 'SYMP   IEAMSYMP DSECT=YES'            */ 00008100
*/*                                                                  */ 00008200
*/*          DSECT=YES will cause a DSECT to be generated.           */ 00008300
*/*                    The initial values will be ignored.           */ 00008400
*/*                                                                  */ 00008500
*/*          DSECT=NO  will cause a set of initialized DCs           */ 00008600
*/*                    to be generated.                              */ 00008700
*/*                                                                  */ 00008800
*/*01* NOTES = None                                                  */ 00008900
*/*                                                                  */ 00008910
*/*01* DEPENDENCIES = This macro requires external macro variables   */ 00009000
*/*                   be declared in one of the two following ways:  */ 00009100
*/*                                                                  */ 00009200
*/*                   1. Use the BLSRPROC macro to generate the      */ 00009300
*/*                      PROC statement and macro declares.          */ 00009400
*/*                                                                  */ 00009500
*/*                   2. Use the BLSRMAC0 macro to generate only     */ 00009600
*/*                      the declares.                               */ 00009700
*/*02*   CHARACTER CODE DEPENDENCIES = None                          */ 00009900
*/*                                                                  */ 00009910
*/*01* RESTRICTIONS = None                                           */ 00010000
*/*                                                                  */ 00010010
*/*01* REGISTER CONVENTIONS = None                                   */ 00010100
*/*                                                                  */ 00010110
*/* ---------------------------------------------------------------- */ 00010200
*/*                                                                  */ 00010300
*/*01* CHANGE-ACTIVITY=                                              */ 00010400
*/*                                                                  */ 00010500
*/* $L0=CLONE    HBB5520  940602  PD16EJ: Cloning Support            */ 00010600
*/* $P1=PN71292  HBB5520  940908  PD16H5: Showhdr Support            */ 00010610
*/*                                                                  */ 00010700
*/* END OF SPECIFICATIONS FOR IEAMSYMP ******************************** 00010800
         MACRO                                                          00010900
&P       IEAMSYMP &DSECT=YES                                            00011000
         IEZBITS ,                Define symbolic bits                  00011100
         AIF   ('&DSECT' EQ 'NO').L010 No DSECT statement               00011200
&P       DSECT ,                  IPCS name service parameter list      00011300
         AGO   .L020              Define structure of record            00011400
.L010    ANOP  ,                  No DSECT statement                    00011500
         DS    0D                 Align on doubleword boundary          00011600
&P       DS    0CL128             IPCS name service parameter list      00011700
.L020    ANOP  ,                  Define structure of record            00011800
&P.000   DS    0C                 Begin IEAMSYMP                        00011900
&P.ID    DS    0CL6               Static Symbol service parameter      *00012000
                                  identifier                            00012100
&P.IDC   DC    CL4'SYMP'          SYMP acronym                          00012200
&P.IDL   DC    CL1'1'             SYMP level indicator                  00012300
         DC    CL1' '             Reserved                              00012400
         DC    CL2' '             Reserved                              00012500
&P.MODN  DC    CL8' '             The name of the module requesting the*00012600
                                  service                               00012700
&P.SYMBOL  DC  CL8' '             The input SYMBOL to be translated.    00012800
         DC    CL12' '            Reserved                              00012900
&P.PFLG  DS    0BL2               Processing flags                      00013000
&P.PFL1  DC    BL1'0'             First byte of flags (input)           00013100
&P.FNOT  EQU   BIT0               No output requested                   00013200
*                                 Set by caller, not housekept          00013300
*                                                                       00013400
*                                                                       00013500
&P.PFL2  DC    BL1'0'             Second byte of flags (output)         00013600
&P.SYMBOLNOTFOUND EQU BIT0        Requested Symbol not found            00013700
&P.SYSTEMDEFINED EQU BIT1         System defined symbol                 00013800
&P.MISSINGSTORAGE EQU BIT2        Missing storage                       00013900
&P.LOGICALERROR EQU BIT3          Logical Error In Data                 00014000
&P.SUBTEXT DC  CL10' '            The output Subtext                    00014100
         DC    CL12' '            Reserved                              00014200
&P.SUBTEXTLENGTH DC  F'0'         Length of Subtext                     00014300
&P.SYMBOLNUMBER  DC  F'0'         Position of symbol in Table           00014400
&P.TOTALSYMBOLS  DC  F'0'         Total number of symbols in Table      00014500
&P.RBAD  DC    A(0)               Reference Block Address               00014600
         DC    XL52'00'           Reserved                              00014700
&P.999   DS    0C                 End IEAMSYMP                          00014800
         MEND  ,                  End assembler macro IEAMSYMP       */ 00014900
*                                                                       00015000
*%IEAMSYMP:                         /* SYMDEF service parameter list */ 00015100
*   MACRO KEYS(MF);                 /*                               */ 00015300
*/*------------------------------------------------------------------*/ 00015400
*/* Define Macro-Variables                                           */ 00015500
*/*------------------------------------------------------------------*/ 00015600
*                                                                       00015700
*   DECLARE                         /* External macro variables      */ 00015800
*     ELSRSYMP CHARACTER EXTERNAL,  /* IEAMSYMP global data          */ 00015900
*     EHBENDCHAR CHARACTER EXTERNAL, /* Final punctuation            */ 00016000
*     EHBBLRPENDESS CHARACTER EXTERNAL, /* Deferred macro requests   */ 00016100
*                                                                       00016200
*     EHBLVL1  CHARACTER EXTERNAL,  /* First level number            */ 00016300
*     EHBLVL2  CHARACTER EXTERNAL,  /* Second level number           */ 00016400
*     EHBLVL3  CHARACTER EXTERNAL,  /* Third level number            */ 00016500
*     EHBLVL4  CHARACTER EXTERNAL,  /* Fourth level number           */ 00016600
*     EHBMF1   CHARACTER EXTERNAL,  /* Macro form                    */ 00016700
*     EHBMF2   CHARACTER EXTERNAL,  /* Prefix characters             */ 00016800
*     EHBMF3   CHARACTER EXTERNAL,  /* Scope/storage class           */ 00016900
*     EHBMF3A  CHARACTER EXTERNAL,  /* Complete initialization flag  */ 00017000
*                                                                       00017100
*     BLSRENDDECLARE CHARACTER EXTERNAL, /* Deferred declarations    */ 00017200
*                                                                       00017300
*     EHBCOL1  FIXED EXTERNAL,      /* First indentation column      */ 00017400
*     EHBCOL2  FIXED EXTERNAL,      /* Second indentation column     */ 00017500
*     EHBCOL3  FIXED EXTERNAL,      /* Third indentation column      */ 00017600
*     EHBCOL4  FIXED EXTERNAL,      /* Fourth indentation column     */ 00017700
*     EHBCSECT CHARACTER EXTERNAL,  /* CSECT name                    */ 00017800
*     EHBRC    FIXED EXTERNAL;      /* Macro return code             */ 00017900
*   DEACTIVATE ELSRSYMP,BLSRENDDECLARE; /* Prevent accidents         */ 00018000
*   DECLARE                         /* Internal macro variables      */ 00018100
*     CENDCHAR CHARACTER INTERNAL,  /* Final punctuation             */ 00018200
*     CLVL2    CHARACTER INTERNAL,  /* Second level number           */ 00018300
*     CLVL3    CHARACTER INTERNAL,  /* Third level number            */ 00018400
*     CLVL4    CHARACTER INTERNAL,  /* Fourth level number           */ 00018500
*     CMF1     CHARACTER INTERNAL,  /* Macro form                    */ 00018600
*     CMF2     CHARACTER INTERNAL,  /* Prefix characters             */ 00018700
*     CMF3A    CHARACTER INTERNAL,  /* Complete initialization flag  */ 00018800
*                                                                       00018900
*     CQCOMPLETE CHARACTER INTERNAL, /* Literal                      */ 00019000
*     CQINITIAL CHARACTER INTERNAL, /* Literal                       */ 00019100
*     FCOL2    FIXED INTERNAL,      /* Second indentation column     */ 00019200
*     FCOL3    FIXED INTERNAL,      /* Third indentation column      */ 00019300
*     FCOL4    FIXED INTERNAL,      /* Fourth indentation column     */ 00019400
*     FRC      FIXED INTERNAL,      /* Macro return code             */ 00019500
*     F1       FIXED INTERNAL;      /* Utility variable              */ 00019600
*   DEACTIVATE CENDCHAR,CLVL2,CLVL3,CLVL4,CMF1,CMF2,CMF3A,CQCOMPLETE,   00019700
*       CQINITIAL,FCOL2,FCOL3,FCOL4,FRC,F1; /* Prevent accidents     */ 00019800
*   CQINITIAL = ' INITIAL(';        /* Literal                       */ 00019900
*   CQCOMPLETE = 'COMPLETE';        /* Literal                       */ 00020000
*/*------------------------------------------------------------------*/ 00020100
*/* Invoke BLRMF (analyze the MF keyword and set global variables).  */ 00020200
*/*------------------------------------------------------------------*/ 00020300
*                                                                       00020400
*   ANSWER('?'||MACLABEL||'BLRMF('||MF||') FORMS(L,S);'); /*         */ 00020500
*   FRC = EHBRC;                    /* Macro return code             */ 00020600
*   IF FRC > 8 THEN                 /* BLRMF return code             */ 00020700
*     GO TO EXITSYMP;               /* Error detected, exit          */ 00020800
*   CENDCHAR = EHBENDCHAR;          /* Final punctuation             */ 00020900
*   EHBENDCHAR = ',';               /* Final punctuation             */ 00021000
*   CLVL2 = EHBLVL2;                /* Second level number           */ 00021100
*   CLVL3 = EHBLVL3;                /* Third level number            */ 00021200
*   CLVL4 = EHBLVL4;                /* Fourth level number           */ 00021300
*   CMF1 = EHBMF1;                  /* Macro form                    */ 00021400
*   CMF2 = EHBMF2;                  /* Prefix characters             */ 00021500
*   CMF3A = EHBMF3A;                /* Complete initialization flag     00021600
*                                                                    */ 00021700
*   FCOL2 = EHBCOL2;                /* Second indentation column     */ 00021800
*   FCOL3 = EHBCOL3;                /* Third indentation column      */ 00021900
*   FCOL4 = EHBCOL4;                /* Fourth indentation column     */ 00022000
*   BLSRENDDECLARE = BLSRENDDECLARE || CMF2 ||                          00022100
*       'SYMP CHAR(6) CONSTANT(''SYMP1 ''),' ||                         00022200
*       '/*SYMP identifier constant used to fill in SYMPID.*/';         00022300
*                                                                       00022400
*/*------------------------------------------------------------------*/ 00022500
*/* Generate the main level declaration for the structure.           */ 00022600
*/*------------------------------------------------------------------*/ 00022700
*                                                                       00022800
*   IF CMF1 = 'LIST' THEN           /* List form                     */ 00022900
*     ANSWER('DECLARE/*IEAMSYMP #MD90xxx*/') COLUMN(5); /*           */ 00023000
*   ANSWER(EHBLVL1||CMF2||' BOUNDARY(WORD)'||EHBMF3||',/*IEAMSYMP'||    00023100
*       MACLIST||' '||MACKEYS||'*/') COLUMN(EHBCOL1);                   00023200
*/*------------------------------------------------------------------*/ 00023300
*/* Generate text for the elements of the substructure.              */ 00023400
*/*------------------------------------------------------------------*/ 00023500
*                                                                       00023600
*   ANSWER(CLVL2||CMF2||'ID CHAR(6)') COLUMN(FCOL2); /*              */ 00023700
*   IF CMF3A = CQCOMPLETE THEN      /*                               */ 00023800
*     ANSWER(CQINITIAL||'''SYMP1'')');                                  00023900
*   ANSWER(',/*SYMDEF service parameter list identifier*/');            00024000
*   ANSWER(CLVL3||CMF2||'IDC CHARACTER(4),/*SYMP acronym*/') COLUMN(    00024100
*       FCOL3);                                                         00024200
*   ANSWER(CLVL3||CMF2||'IDL CHARACTER(1),/*SYMP level indicator*/')    00024300
*       COLUMN(FCOL3);                                                  00024400
*   ANSWER(CLVL3||'*   CHARACTER(1),/*Reserved*/') COLUMN(FCOL3);       00024500
*   ANSWER(CLVL2||'*   CHARACTER(2),/*Reserved*/') COLUMN(FCOL2);       00024600
*                                                                       00024700
*/*--Module name-----------------------------------------------------*/ 00024800
*                                                                       00024900
*   ANSWER(CLVL2||CMF2||'MODN CHAR(8)') COLUMN(FCOL2); /*            */ 00025000
*   IF CMF3A = CQCOMPLETE THEN      /*                               */ 00025100
*     IF LENGTH(EHBCSECT) >= 8 THEN /* CSECT name defined by BLRPROC    00025200
*                                                                    */ 00025300
*       ANSWER(CQINITIAL||QUOTE(EHBCSECT(1:8))||')'); /*             */ 00025400
*     ELSE                          /* No token specified            */ 00025500
*       ANSWER(CQINITIAL||'''        '')'); /* Default is blanks     */ 00025600
*   ANSWER(',/*Name of module requesting the service*/'); /*         */ 00025700
*                                                                       00025800
*/*--Symbol----------------------------------------------------------*/ 00025900
*                                                                       00026000
*   ANSWER(CLVL2||CMF2||'Symbol CHAR(8)') COLUMN(FCOL2);                00026100
*   IF CMF3A = CQCOMPLETE THEN                                          00026200
*     ANSWER(CQINITIAL||''' '')');                                      00026300
*   ANSWER(',/* Symbol Name, excluding ampersand and period */');       00026400
*   ANSWER(CLVL2||'* CHAR(12)') COLUMN(FCOL2);                          00026500
*   IF CMF3A = CQCOMPLETE THEN                                          00026600
*     ANSWER(CQINITIAL||''' '')');                                      00026700
*   ANSWER(',/* Reserved */');                                          00026800
*                                                                       00026900
*/*--Flag bytes------------------------------------------------------*/ 00027000
*                                                                       00027100
*   ANSWER(CLVL2||CMF2||'PFLG BIT(16),/*Processing flags*/') COLUMN(    00027200
*       FCOL3);                                                         00027300
*                                                                       00027400
*   ANSWER(CLVL3||CMF2||'PFL1 BIT(8)') COLUMN(FCOL3);                   00027500
*   IF CMF3A = CQCOMPLETE THEN      /* Initialization required?      */ 00027600
*     ANSWER(CQINITIAL||'''00''X)');                                    00027700
*   ANSWER(',/*First flag byte (input) */');                            00027800
*   ANSWER(CLVL4||CMF2||'FNOT BIT(1),/*No output requested*/') COLUMN(  00027900
*       FCOL4);                                                         00028000
*   ANSWER(CLVL4||'* BIT(7),/*Reserved*/') COLUMN(FCOL4);               00028100
*                                                                       00028200
*   ANSWER(CLVL3||CMF2||'PFL2 BIT(8)') COLUMN(FCOL3);                   00028300
*   IF CMF3A = CQCOMPLETE THEN      /* Initialization required?      */ 00028400
*     ANSWER(CQINITIAL||'''00''X)');                                    00028500
*   ANSWER(',/*Second flag byte (output) */');                          00028600
*   ANSWER(CLVL4||CMF2||'SymbolNotFound BIT(1),/*Symbol not found*/')   00028700
*       COLUMN(FCOL4);                                                  00028800
*   ANSWER(CLVL4||CMF2||'SystemDefined BIT(1),'||                       00028900
*         '/*System Defined Symbol*/')                                  00029000
*       COLUMN(FCOL4);                                                  00029100
*   ANSWER(CLVL4||CMF2||'MissingStorage BIT(1),/*Missing storage*/')    00029200
*       COLUMN(FCOL4);                                                  00029300
*   ANSWER(CLVL4||CMF2||'LogicalError BIT(1), '||                       00029400
*         '/* Logical error in data */')                                00029500
*       COLUMN(FCOL4);                                                  00029600
*   ANSWER(CLVL4||'* BIT(4),/*Reserved*/') COLUMN(FCOL4);               00029700
*                                                                       00029800
*/*--SubText---------------------------------------------------------*/ 00029900
*                                                                       00030000
*   ANSWER(CLVL2||CMF2||'SubText CHAR(10)') COLUMN(FCOL2);              00030100
*   IF CMF3A = CQCOMPLETE THEN                                          00030200
*     ANSWER(CQINITIAL||''' '')');                                      00030300
*   ANSWER(',/* SubText assigned to this symbol */');                   00030400
*   ANSWER(CLVL2||' * CHAR(12)') COLUMN(FCOL2);                         00030500
*   IF CMF3A = CQCOMPLETE THEN                                          00030600
*     ANSWER(CQINITIAL||''' '')');                                      00030700
*   ANSWER(',/* Reserved */');                                          00030800
*   ANSWER(CLVL2||CMF2||'SubTextLength FIXED(31)') COLUMN(FCOL2);       00030900
*   IF CMF3A = CQCOMPLETE THEN                                          00031000
*     ANSWER(CQINITIAL||'''00000000''X)');                              00031100
*   ANSWER(',/* Length of the Subtext */');                             00031200
*                                                                       00031300
*/*--SymbolNum-------------------------------------------------------*/ 00031400
*                                                                       00031500
*   ANSWER(CLVL2||CMF2||'SymbolNumber FIXED(32)') COLUMN(FCOL2);        00031600
*   IF CMF3A = CQCOMPLETE THEN                                          00031700
*     ANSWER(CQINITIAL||'''00000000''X)');                              00031800
*   ANSWER(',/*Position of Symbol in Table*/');                         00031900
*                                                                       00032000
*/*--TotalSymbols----------------------------------------------------*/ 00032100
*                                                                       00032200
*   ANSWER(CLVL2||CMF2||'TotalSymbols FIXED(32)') COLUMN(FCOL2);        00032300
*   IF CMF3A = CQCOMPLETE THEN                                          00032400
*     ANSWER(CQINITIAL||'''00000000''X)');                              00032500
*   ANSWER(',/*Total number of symbols in Table*/');                    00032600
*                                                                       00032700
*/*--RBAD------------------------------------------------------------*/ 00032800
*                                                                       00032900
*   ANSWER(CLVL2||CMF2||'RBAD PTR(31)') COLUMN(FCOL2);                  00033000
*   IF CMF3A = CQCOMPLETE THEN                                          00033100
*     ANSWER(CQINITIAL||'''00000000''X)');                              00033200
*   ANSWER(',/*Referenced Block Address*/');                            00033300
*                                                                       00033400
*/*--Reserved space--------------------------------------------------*/ 00033500
*                                                                       00033600
*   ANSWER(CLVL2||CMF2||'RSVD CHAR(52)') COLUMN(FCOL2);                 00033700
*   IF CMF3A = CQCOMPLETE THEN                                          00033800
*     ANSWER(CQINITIAL||''' '')');                                      00033900
*   ANSWER(',/*Reserved*/');                                            00034000
*                                                                       00034100
*/*--End Of Parameter List-------------------------------------------*/ 00034200
*                                                                       00034300
*   ANSWER(CLVL2||CMF2||'999 CHARACTER(0)'||CENDCHAR||                  00034400
*       '/*IEAMSYMP #MD90xxx*/') COLUMN(FCOL2);                         00034500
*   IF CENDCHAR = ';' THEN                                              00034600
*     ANSWER('?BLSR002;');          /* Process deferred declarations    00034700
*                                                                    */ 00034800
*   ANSWER('?BLR003(IEAMSYMP,'||CHAR(EHBRC)||');'); /*               */ 00034900
*EXITSYMP:                                                              00035000
*   RETURN CODE(FRC);               /*                               */ 00035100
*   %END IEAMSYMP;                                                      00035200
