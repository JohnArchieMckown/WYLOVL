*%IWMSRSRS: MACRO KEYS(SYSINFO_BLOCK,EXTENDED_DATA,ANSLEN,ENTRY_COUNT,  00000100
*                 QUERYLEN,LOCATION,FUNCTION,RETCODE,RSNCODE,PLISTVER,  00000200
*                 MF);                                                  00000300
*/**** START OF SPECIFICATIONS **************************************** 00000400
*                                                                     * 00000500
*                                                                     * 00000600
*01* MACRO NAME:  IWMSRSRS                              -01/14/97-<1> * 00000700
*                                                                     * 00000800
*                                                                     * 00000900
*01* DESCRIPTIVE NAME:  Sysplex Routing Information                   * 00001000
*                                                                     * 00001100
*01* PROPRIETARY STATEMENT:                                           * 00001200
*                                                                     * 00001300
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001400
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00001500
*     5645-001 (C) COPYRIGHT IBM CORP. 1994, 1997                     * 00001600
*                                                                     * 00001700
* STATUS= HBB6603                                                     * 00001800
*                                                                     * 00001900
*                                                                     * 00002000
*                                                                     * 00002100
*01* FUNCTION:                                                        * 00002200
*                                                                     * 00002300
*      IWMSRSRS provides two functions: Select and Query.  Both       * 00002400
*      return a list of registered servers known to the system on     * 00002500
*      which the service is invoked.  Servers which have              * 00002600
*      deregistered, via IWMSRDRS, may still be present in the output * 00002700
*      list, due to the asynchronous nature of deregistration.        * 00002800
*      Conversely, some registered servers may not appear for this    * 00002900
*      same reason.                                                   * 00003000
*                                                                     * 00003100
*      When the Select function is chosen, IWMSRSRS will return a     * 00003200
*      list of servers in the sysplex which are associated with the   * 00003300
*      input Location name along with a relative weighting for each   * 00003400
*      server.  These servers are identified by their Network id and  * 00003500
*      LU name, which were previously registered using the Sysplex    * 00003600
*      Router Register macro, IWMSRSRG.  Note that some servers may   * 00003700
*      not appear in the output list due to balancing decisions, so   * 00003800
*      this service should not be used as a general query service to  * 00003900
*      find all currently registered servers for the input location.  * 00004000
*                                                                     * 00004100
*      Next to each server in the list will be a weight which tells   * 00004200
*      the caller the relative number of requests to send to each     * 00004300
*      entry.  For example, the caller might send the indicated       * 00004400
*      number of requests to each LU in the list before routing to    * 00004500
*      the next LU in the list.                                       * 00004600
*                                                                     * 00004700
*        Server               Weight                                  * 00004800
*        ------               ------                                  * 00004900
*        NETIDA.LUNAME1          4                                    * 00005000
*        NETIDB.LUNAME2          7                                    * 00005100
*        NETIDC.LUNAME3          1                                    * 00005200
*        NETIDD.LUNAME43         4                                    * 00005300
*        NETID4.LUNAME2          2                                    * 00005400
*                                                                     * 00005500
*      The requestor could then choose to send the first 4 requests   * 00005600
*      to NETIDA.LUNAME1, the next 7 requests to NETIDB.LUNAME2, the  * 00005700
*      next request to NETIDC.LUNAME3, and so forth.  When the list   * 00005800
*      is exhausted, the requestor could invoke this macro again and  * 00005900
*      get a whole new list or could rotate through the list again.   * 00006000
*      It is expected that the requestor would invoke this macro      * 00006100
*      frequently to get current system views for work balancing.     * 00006200
*      For example, it would be appropriate for the caller to invoke  * 00006300
*      this service approximately every 1 to 3 minutes, so that       * 00006400
*      system conditions do not change radically prior to refreshing  * 00006500
*      the list.                                                      * 00006600
*                                                                     * 00006700
*      The Query function is only available on systems running OS/390 * 00006800
*      R3 or higher. When the Query function is requested, IWMSRSRS   * 00006900
*      will return the list of all servers in the sysplex which are   * 00007000
*      associated with the input Location name along with a fixed     * 00007100
*      weight of one for each server.  The format of the output is    * 00007200
*      the same as for Select.                                        * 00007300
*                                                                     * 00007400
*      The Sysplex Routing Service (IWMSRSRS) can be used to obtain   * 00007500
*      the userdata associated with each server when invoked on a     * 00007600
*      system at OS/390 R3 or higher, though servers resident on an   * 00007700
*      earlier release will be associated with userdata which is      * 00007800
*      binary zeroes.                                                 * 00007900
*                                                                     * 00008000
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00008100
*                                                                     * 00008200
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00008300
*                                                                     * 00008400
*01* ENVIRONMENT:                                                     * 00008500
*                                                                     * 00008600
*                                                                     * 00008700
*      Minimum authorization: Problem state with any PSW key.         * 00008800
*                                                                     * 00008900
*      Dispatchable unit mode: Task mode.                             * 00009000
*                                                                     * 00009100
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00009200
*                                                                     * 00009300
*      AMODE:            31-bit.                                      * 00009400
*                                                                     * 00009500
*      ASC mode:         Primary.                                     * 00009600
*                                                                     * 00009700
*      Interrupt status: Enabled for I/O and external interrupts.     * 00009800
*                                                                     * 00009900
*      Locks:            No locks held.  FRRs may be established.     * 00010000
*                                                                     * 00010100
*      Control parameters: Control parameters must be in the primary  * 00010200
*                        address space.                               * 00010300
*                                                                     * 00010400
*                                                                     * 00010500
*                                                                     * 00010600
*01* PROGRAMMING REQUIREMENTS:                                        * 00010700
*                                                                     * 00010800
*                                                                     * 00010900
*    1.  The macro CVT must be included to use this macro.            * 00011000
*                                                                     * 00011100
*    2.  The macro IWMYCON must be included to use this macro.        * 00011200
*                                                                     * 00011300
*    3.  The macro IWMPB must be in the library concatenation, since  * 00011400
*        it is included by IWMYCON.                                   * 00011500
*                                                                     * 00011600
*    4.  Note that the high order halfword of register 0, and the     * 00011700
*        reason code variable when specified, may be non-zero and     * 00011800
*        represents diagnostic data which is NOT part of the external * 00011900
*        interface.  The high order halfword should thus be excluded  * 00012000
*        from comparison with the reason code values described above. * 00012100
*        The constant, IWMRSNCODE_MASK_CONST defined in IWMYCON, may  * 00012200
*        be used for this purpose.                                    * 00012300
*                                                                     * 00012400
*    5.  All character data, unless otherwise specified, is assumed   * 00012500
*        to be left justified and padded with blanks on the right, as * 00012600
*        needed, to occupy the specified number of bytes.             * 00012700
*                                                                     * 00012800
*                                                                     * 00012900
*                                                                     * 00013000
*01* RESTRICTIONS:                                                    * 00013100
*                                                                     * 00013200
*                                                                     * 00013300
*    1.  This macro may not be used prior to the completion of WLM    * 00013400
*        address space initialization                                 * 00013500
*                                                                     * 00013600
*    2.  This macro may only be used on MVS/ESA SP5.2 or higher       * 00013700
*        levels.  Extended data may only be returned when running on  * 00013800
*        OS/390 R3 or higher, and server instances residing on prior  * 00013900
*        releases will be assigned userdata values consisting of all  * 00014000
*        binary zeroes.                                               * 00014100
*                                                                     * 00014200
*                                                                     * 00014300
*                                                                     * 00014400
*01* INPUT REGISTER INFORMATION:                                      * 00014500
*                                                                     * 00014600
*    Before issuing the IWMSRSRS macro, the caller does not have to   * 00014700
*    place any information into any register unless using it in       * 00014800
*    register notation for a particular parameter, or using it as a   * 00014900
*    base register.                                                   * 00015000
*                                                                     * 00015100
*01* OUTPUT REGISTER INFORMATION:                                     * 00015200
*                                                                     * 00015300
*    When control returns to the caller, the GPRs contain:            * 00015400
*                                                                     * 00015500
*                                                                     * 00015600
*    REGISTER  CONTENTS                                               * 00015700
*                                                                     * 00015800
*    0         Reason code if GR15 return code is non-zero            * 00015900
*                                                                     * 00016000
*    1         Used as work register by the system                    * 00016100
*                                                                     * 00016200
*    2-13      Unchanged                                              * 00016300
*                                                                     * 00016400
*    14        Used as work register by the system                    * 00016500
*                                                                     * 00016600
*    15        Return code                                            * 00016700
*                                                                     * 00016800
*                                                                     * 00016900
*                                                                     * 00017000
*    When control returns to the caller, the ARs contain:             * 00017100
*                                                                     * 00017200
*                                                                     * 00017300
*    REGISTER  CONTENTS                                               * 00017400
*                                                                     * 00017500
*    0-1       Used as work registers by the system                   * 00017600
*                                                                     * 00017700
*    2-13      Unchanged                                              * 00017800
*                                                                     * 00017900
*    14-15     Used as work registers by the system                   * 00018000
*                                                                     * 00018100
*                                                                     * 00018200
*                                                                     * 00018300
*    Some callers depend on register contents remaining the same      * 00018400
*    before and after issuing a service.  If the system changes the   * 00018500
*    contents of registers on which the caller depends, the caller    * 00018600
*    must save them before issuing the service, and restore them      * 00018700
*    after the system returns control.                                * 00018800
*                                                                     * 00018900
*01* PERFORMANCE IMPLICATIONS:                                        * 00019000
*                                                                     * 00019100
*    None                                                             * 00019200
*                                                                     * 00019300
*01* SYNTAX:                                                          * 00019400
*                                                                     * 00019500
*[xlabel]  IWMSRSRS     SYSINFO_BLOCK                                 * 00019600
*                                     =xsysinfo_block                 * 00019700
*                    [,EXTENDED_DATA=NO]                             * 00019800
*                    [,EXTENDED_DATA=YES]                            * 00019900
*                      ,ANSLEN=xanslen                                * 00020000
*                     [,ENTRY_COUNT=xentry_count]                     * 00020100
*                      ,QUERYLEN=xquerylen                            * 00020200
*                      ,LOCATION=xlocation                            * 00020300
*                    [,FUNCTION=SELECT]                              * 00020400
*                    [,FUNCTION=QUERY]                               * 00020500
*                     [,RETCODE=xretcode]                             * 00020600
*                     [,RSNCODE=xrsncode]                             * 00020700
*                     [,PLISTVER=xplistver|IMPLIED_VERSION]         * 00020800
*                    [,MF=S]                                         * 00020900
*                    [,MF=(L,xmfctrl,xmfattr|0D)]                  * 00021000
*                    [,MF=(E,xmfctrl,COMPLETE)]                    * 00021100
*                                                                     * 00021200
*                                                                     * 00021300
*      Where:                                                         * 00021400
*                                                                     * 00021500
*                                                                     * 00021600
*      [xlabel]                                                       * 00021700
*          is an optional symbol, starting in column 1, that is the   * 00021800
*          name on the IWMSRSRS macro invocation.  The name must      * 00021900
*          conform to the rules for an ordinary assembler language    * 00022000
*          symbol.                                                    * 00022100
*          DEFAULT: No name.                                          * 00022200
*                                                                     * 00022300
*                                                                     * 00022400
*                                                                     * 00022500
*                                                                     * 00022600
*      SYSINFO_BLOCK(xsysinfo_block)                                  * 00022700
*          is a required input.  It is the name (RS-type) (or address * 00022800
*          in register (2)-(12) ASM only) of the area to be filled in * 00022900
*          with the system information for the registered, active,    * 00023000
*          LUs in the SYSPLEX associated with the input location.     * 00023100
*                                                                     * 00023200
*          The area must be large enough to contain at least 1 entry. * 00023300
*          The format of this area is mapped by IWMWSYSR.  The        * 00023400
*          EXTENDED_DATA keyword describes the desired format.  The   * 00023500
*          FUNCTION keyword describes which servers are candidates    * 00023600
*          for inclusion.                                             * 00023700
*                                                                     * 00023800
*                                                                     * 00023900
*                                                                     * 00024000
*                                                                     * 00024100
*      [EXTENDED_DATA(NO|YES)]                                      * 00024200
*          is an optional keyword input which describes whether the   * 00024300
*          format of the output area named by SYSINFO_BLOCK includes  * 00024400
*          the extended section or not (see IWMWSYSR).                * 00024500
*          DEFAULT: NO                                                * 00024600
*                                                                     * 00024700
*                                                                     * 00024800
*          [EXTENDED_DATA(NO)]                                        * 00024900
*                                                                     * 00025000
*              indicates that the format of the output area named by  * 00025100
*              SYSINFO_BLOCK includes only the standard information   * 00025200
*              mapped by the SYSR, which consists of an array of      * 00025300
*              entries described by SYSR_INFO.                        * 00025400
*                                                                     * 00025500
*          [EXTENDED_DATA(YES)]                                       * 00025600
*                                                                     * 00025700
*              indicates that the format of the output area given by  * 00025800
*              SYSINFO_BLOCK includes first the standard information  * 00025900
*              mapped by the SYSR, which consists of an array of      * 00026000
*              entries described by SYSR_INFO, followed immediately   * 00026100
*              by the header for the extension section and any other  * 00026200
*              data described by the header.                          * 00026300
*                                                                     * 00026400
*              EXTENDED_DATA is only available to callers of the      * 00026500
*              IWMSRSRS service when invoked on a system running      * 00026600
*              OS/390 R3 or higher.  The EXTENDED_DATA returned by    * 00026700
*              OS/390 R3 includes the header and associated userdata. * 00026800
*              Data associated with entries on MVS images not         * 00026900
*              supporting a particular type of data will be set as    * 00027000
*              binary zeroes - for example servers on MVS SP5.2 will  * 00027100
*              have userdata which is all zeroes.  No special         * 00027200
*              indication will be given for this condition.  In       * 00027300
*              particular no special return or reason codes are       * 00027400
*              given.                                                 * 00027500
*                                                                     * 00027600
*              On releases prior to OS/390 R3, EXTENDED_DATA(YES) is  * 00027700
*              processed as though EXTENDED_DATA(NO) was specified.   * 00027800
*              No return code is given that this has happened.        * 00027900
*                                                                     * 00028000
*                                                                     * 00028100
*                                                                     * 00028200
*                                                                     * 00028300
*                                                                     * 00028400
*                                                                     * 00028500
*      ANSLEN(xanslen)                                                * 00028600
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00028700
*          only) of a required fullword input which contains the      * 00028800
*          length of the SYSINFO_BLOCK in bytes.                      * 00028900
*                                                                     * 00029000
*                                                                     * 00029100
*                                                                     * 00029200
*                                                                     * 00029300
*      [ENTRY_COUNT(xentry_count)]                                    * 00029400
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00029500
*          only) of an optional fullword output which will hold the   * 00029600
*          number of server entries returned by the service.  This is * 00029700
*          the number of entries in the SYSR_INFO array (see          * 00029800
*          IWMWSYSR).  ENTRY_COUNT may only be specified when running * 00029900
*          on OS/390 R3 or higher.  On earlier releases this request  * 00030000
*          is ignored and the variable is zeroed.  No return code is  * 00030100
*          given that this has happened.                              * 00030200
*                                                                     * 00030300
*                                                                     * 00030400
*                                                                     * 00030500
*                                                                     * 00030600
*      QUERYLEN(xquerylen)                                            * 00030700
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00030800
*          only) of a required fullword output variable which         * 00030900
*          contains the number of bytes needed for all data           * 00031000
*          requested, taking into account the format specified via    * 00031100
*          the EXTENDED_DATA keyword.                                 * 00031200
*                                                                     * 00031300
*                                                                     * 00031400
*                                                                     * 00031500
*                                                                     * 00031600
*      LOCATION(xlocation)                                            * 00031700
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00031800
*          only) of a required 18 character input which contains the  * 00031900
*          LOCATION associated with the registered address spaces     * 00032000
*          which are candidates to receive work.                      * 00032100
*                                                                     * 00032200
*                                                                     * 00032300
*                                                                     * 00032400
*                                                                     * 00032500
*      [FUNCTION(SELECT|QUERY)]                                     * 00032600
*          is an optional keyword input which describes which set of  * 00032700
*          servers are of interest to the caller.                     * 00032800
*          DEFAULT: SELECT                                            * 00032900
*                                                                     * 00033000
*                                                                     * 00033100
*          [FUNCTION(SELECT)]                                         * 00033200
*                                                                     * 00033300
*              indicates that the servers best suited to receive work * 00033400
*              are to be returned.                                    * 00033500
*                                                                     * 00033600
*          [FUNCTION(QUERY)]                                          * 00033700
*                                                                     * 00033800
*              indicates that all servers associated with the input   * 00033900
*              LOCATION are to be returned.  QUERY may only be        * 00034000
*              specified when running on OS/390 R3 or higher.  On     * 00034100
*              earlier releases this request is processed as a SELECT * 00034200
*              request.  No return code is given that this has        * 00034300
*              happened.                                              * 00034400
*                                                                     * 00034500
*                                                                     * 00034600
*                                                                     * 00034700
*                                                                     * 00034800
*                                                                     * 00034900
*                                                                     * 00035000
*      [RETCODE(xretcode)]                                            * 00035100
*          is the name (RS-type) of an optional fullword output       * 00035200
*          variable (or register (2)-(12) ASM only) into which the    * 00035300
*          return code is to be copied from GPR 15.                   * 00035400
*                                                                     * 00035500
*                                                                     * 00035600
*                                                                     * 00035700
*                                                                     * 00035800
*      [RSNCODE(xrsncode)]                                            * 00035900
*          is the name (RS-type) of an optional fullword output       * 00036000
*          variable (or register (2)-(12) ASM only) into which the    * 00036100
*          reason code is to be copied from GPR 0.                    * 00036200
*                                                                     * 00036300
*                                                                     * 00036400
*                                                                     * 00036500
*                                                                     * 00036600
*      [PLISTVER(xplistver|IMPLIED_VERSION)]                        * 00036700
*          is an optional byte input decimal value in the "0-1" range * 00036800
*          that specifies the macro version.  PLISTVER is the only    * 00036900
*          key allowed on the list form of MF and determines which    * 00037000
*          parameter list is generated.  The macro keys associated    * 00037100
*          with each supported version of the macro are listed in     * 00037200
*          MACRO USAGE NOTE 2.  Note that MAX may be specified        * 00037300
*          instead of a number, and the parameter list will be of the * 00037400
*          largest size currently supported. This size may grow from  * 00037500
*          release to release (thus possibly affecting the amount of  * 00037600
*          storage needed by your program).  If your program can      * 00037700
*          tolerate this, IBM recommends that you always specify MAX  * 00037800
*          when creating the list form parameter list as that will    * 00037900
*          ensure that the list form parameter list is always long    * 00038000
*          enough to hold whatever parameters might be specified on   * 00038100
*          the execute form.                                          * 00038200
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00038300
*          default is the lowest version which allows all of the      * 00038400
*          parameters specified on the invocation to be processed.    * 00038500
*                                                                     * 00038600
*                                                                     * 00038700
*                                                                     * 00038800
*                                                                     * 00038900
*      [MF(S|L|E)]                                                  * 00039000
*          is an optional keyword input which specifies the macro     * 00039100
*          form.                                                      * 00039200
*          DEFAULT: S                                                 * 00039300
*                                                                     * 00039400
*                                                                     * 00039500
*          [MF(S)]                                                    * 00039600
*              specifies the standard form of the macro.  The "S"     * 00039700
*              form generates code to put the parameters into the     * 00039800
*              parameter list and invoke the desired service.  Full   * 00039900
*              checking for required macro keys is done along with    * 00040000
*              supplying defaults for omitted optional parameters.    * 00040100
*              The ?EPILOG macro must be invoked at the end of the    * 00040200
*              module.                                                * 00040300
*                                                                     * 00040400
*              For assembly language code modules, the "S" form       * 00040500
*              generates code to put the parameters into an in-line   * 00040600
*              parameter list and invoke the desired service.  Full   * 00040700
*              checking for required macro keys is done along with    * 00040800
*              supplying defaults for omitted optional parameters.    * 00040900
*                                                                     * 00041000
*          [MF(L,xmfctrl,xmfattr|BDY(DWORD))]                       * 00041100
*              specifies the list form of the macro.  The "L" form    * 00041200
*              defines an area to be used for the parameter list.     * 00041300
*              Only the PLISTVER key may be specified on the          * 00041400
*              invocation.  All other macro parameters are flagged as * 00041500
*              errors.  If PLISTVER is not specified, the original    * 00041600
*              parameter list definition is used.                     * 00041700
*                                                                     * 00041800
*            ,xmfctrl                                                 * 00041900
*              is a required input.  It is the name of a storage area * 00042000
*              for the parameter list.                                * 00042100
*                                                                     * 00042200
*            ,xmfattr|BDY(DWORD)                                    * 00042300
*              is an optional 60 character input string that varies   * 00042400
*              from 1 to 60 characters. Use it to force boundary      * 00042500
*              alignment of the parameter list. Use any value that    * 00042600
*              represents a boundary and is valid on an assembler DS  * 00042700
*              pseudo op (assembler-only).                            * 00042800
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/X, which  * 00042900
*              forces the parameter list to a doubleword boundary.    * 00043000
*                                                                     * 00043100
*          [MF(E,xmfctrl,COMPLETE)]                                 * 00043200
*              specifies the execute form of the macro.  The "E" form * 00043300
*              generates code to put the parameters into the          * 00043400
*              parameter list specified by xmfctrl and provides full  * 00043500
*              syntax checking with default setting.                  * 00043600
*                                                                     * 00043700
*            ,xmfctrl                                                 * 00043800
*              is a required input.  It is the name (RS-type) (or     * 00043900
*              address in register (1)-(12) ASM only) of a storage    * 00044000
*              area for the parameter list.                           * 00044100
*                                                                     * 00044200
*            ,COMPLETE                                              * 00044300
*              is an optional keyword input which specifies the       * 00044400
*              degree of macro parameter syntax checking.             * 00044500
*              DEFAULT: COMPLETE                                      * 00044600
*                                                                     * 00044700
*                                                                     * 00044800
*              COMPLETE                                               * 00044900
*                  Checking for required macro keys is done and       * 00045000
*                  defaults are supplied for omitted optional         * 00045100
*                  parameters.                                        * 00045200
*                                                                     * 00045300
*                                                                     * 00045400
*                                                                     * 00045500
*                                                                     * 00045600
*                                                                     * 00045700
*                                                                     * 00045800
*                                                                     * 00045900
*01* ABEND CODES:  None.                                              * 00046000
*                                                                     * 00046100
*01* RETURN CODES:                                                    * 00046200
*                                                                     * 00046300
*                                                                     * 00046400
*            0    Name: IwmRetCodeOk                                  * 00046500
*                                                                     * 00046600
*                 Meaning: Successful completion.                     * 00046700
*                                                                     * 00046800
*                 Action: None required.                              * 00046900
*                                                                     * 00047000
*            4    Name: IwmRetCodeWarning                             * 00047100
*                                                                     * 00047200
*                 Meaning: Successful completion, unusual conditions  * 00047300
*                 noted.                                              * 00047400
*                                                                     * 00047500
*                                                                     * 00047600
*                 HEX REASON  MEANING/ACTION                          * 00047700
*                 CODE                                                * 00047800
*                                                                     * 00047900
*                 xxxx040A    Name: IwmRsnCodeOutputAreaTooSmall      * 00048000
*                                                                     * 00048100
*                             Meaning:  The output area supplied is   * 00048200
*                             too small to receive all the available  * 00048300
*                             information.                            * 00048400
*                                                                     * 00048500
*                             Action: None required.  If necessary,   * 00048600
*                             reinvoke the service with an output     * 00048700
*                             area of sufficient size to receive all  * 00048800
*                             information.                            * 00048900
*                                                                     * 00049000
*                 xxxx040B    Name: IwmRsnCodeNoServersRegistered     * 00049100
*                                                                     * 00049200
*                             Meaning:  No Servers have registered in * 00049300
*                             the sysplex.                            * 00049400
*                                                                     * 00049500
*                             Action: None required.                  * 00049600
*                                                                     * 00049700
*                                                                     * 00049800
*                                                                     * 00049900
*            8    Name: IwmRetCodeInvocError                          * 00050000
*                                                                     * 00050100
*                 Meaning: Invalid invocation environment or          * 00050200
*                 parameters.                                         * 00050300
*                                                                     * 00050400
*                                                                     * 00050500
*                 HEX REASON  MEANING/ACTION                          * 00050600
*                 CODE                                                * 00050700
*                                                                     * 00050800
*                 xxxx0803    Name: IwmRsnCodeDisabled                * 00050900
*                                                                     * 00051000
*                             Meaning: Caller is disabled.            * 00051100
*                                                                     * 00051200
*                             Action: Avoid requesting this function  * 00051300
*                             while disabled.                         * 00051400
*                                                                     * 00051500
*                 xxxx0804    Name: IwmRsnCodeLocked                  * 00051600
*                                                                     * 00051700
*                             Meaning: Caller is locked.              * 00051800
*                                                                     * 00051900
*                             Action: Avoid requesting this function  * 00052000
*                             while locked.                           * 00052100
*                                                                     * 00052200
*                 xxxx080B    Name: IwmRsnCodeBadPl                   * 00052300
*                                                                     * 00052400
*                             Meaning:  Error accessing parameter     * 00052500
*                             list.                                   * 00052600
*                                                                     * 00052700
*                             Action: Check for possible storage      * 00052800
*                             overlay.                                * 00052900
*                                                                     * 00053000
*                 xxxx0823    Name: IwmRsnCodeDatoff                  * 00053100
*                                                                     * 00053200
*                             Meaning: Caller invoked service while   * 00053300
*                             DATOFF                                  * 00053400
*                                                                     * 00053500
*                             Action: Avoid requesting this function  * 00053600
*                             in this environment.                    * 00053700
*                                                                     * 00053800
*                 xxxx0824    Name: IwmRsnCodeAmode24                 * 00053900
*                                                                     * 00054000
*                             Meaning: Caller invoked service but was * 00054100
*                             in 24 bit addressing mode.              * 00054200
*                                                                     * 00054300
*                             Action: Request this function only when * 00054400
*                             you are in 31 bit addressing mode.      * 00054500
*                                                                     * 00054600
*                 xxxx0825    Name: IwmRsnCodeAscModeNotPrimary       * 00054700
*                                                                     * 00054800
*                             Meaning: Caller invoked service but was * 00054900
*                             not DAT on Primary ASC mode.            * 00055000
*                                                                     * 00055100
*                             Action: Avoid requesting this function  * 00055200
*                             in this environment.                    * 00055300
*                                                                     * 00055400
*                 xxxx0828    Name: IwmRsnCodeBadVersion              * 00055500
*                                                                     * 00055600
*                             Meaning: Version number in parameter    * 00055700
*                             list or version length field is not     * 00055800
*                             valid.  This reason code is only set    * 00055900
*                             when the MVS release is on MVS/ESA      * 00056000
*                             HBB6603 or higher levels.               * 00056100
*                                                                     * 00056200
*                             Action: Check for possible storage      * 00056300
*                             overlay of the parameter list.          * 00056400
*                                                                     * 00056500
*                                                                     * 00056600
*                                                                     * 00056700
*            C    Name: IwmRetCodeEnvError                            * 00056800
*                                                                     * 00056900
*                 Meaning: Environmental error.                       * 00057000
*                                                                     * 00057100
*                                                                     * 00057200
*                 HEX REASON  MEANING/ACTION                          * 00057300
*                 CODE                                                * 00057400
*                                                                     * 00057500
*                 xxxx0C01    Name: IwmRsnCodeNoStg                   * 00057600
*                                                                     * 00057700
*                             Meaning:  Storage is not available for  * 00057800
*                             the request.                            * 00057900
*                                                                     * 00058000
*                             Action: There is a storage shortage.    * 00058100
*                             The function may work successfully at a * 00058200
*                             later time.                             * 00058300
*                                                                     * 00058400
*                                                                     * 00058500
*                                                                     * 00058600
*            10   Name: IwmRetCodeCompError                           * 00058700
*                                                                     * 00058800
*                 Meaning: Component error.                           * 00058900
*                                                                     * 00059000
*                 Action: No action required.  The function may be    * 00059100
*                 successful if invoked again.                        * 00059200
*                                                                     * 00059300
*                                                                     * 00059400
*                                                                     * 00059500
*01* REASON CODES:                                                    * 00059600
*                                                                     * 00059700
*       A unique reason code will be returned whenever the return     * 00059800
*       code is non-zero.  Reason codes, as appropriate, are defined  * 00059900
*       under their corresponding return code.  Reason code and       * 00060000
*       return code constants are defined within IWMYCON.  Note that  * 00060100
*       the high order halfword of register 0, and the reason code    * 00060200
*       variable when specified, may be non-zero and represents       * 00060300
*       diagnostic data which is NOT part of the external interface.  * 00060400
*       The high order halfword should thus be excluded from          * 00060500
*       comparison with the reason code values described above.  The  * 00060600
*       constant, IWMRSNCODE_MASK_CONST defined in IWMYCON, may be    * 00060700
*       used for this purpose.                                        * 00060800
*                                                                     * 00060900
*01* MODULE TYPE:  ASSEM-PL/AS MACRO                                  * 00061000
*                                                                     * 00061100
*02*   PROCESSOR:  ASSEM-PL/AS                                        * 00061200
*                                                                     * 00061300
*01* COMPONENT:  SCWLM                                                * 00061400
*                                                                     * 00061500
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00061600
*                                                                     * 00061700
*01* EXAMPLES:                                                        * 00061800
*                                                                     * 00061900
*    To register an instance of a given location:                     * 00062000
*                                                                     * 00062100
*               IWMSRSRS SYSINFO_BLOCK=DATA,                          * 00062200
*                        EXTENDED_DATA=YES,                           * 00062300
*                        ANSLEN=SIZE,                                 * 00062400
*                        ENTRY_COUNT=E,                               * 00062500
*                        QUERYLEN=Q,                                  * 00062600
*                        LOCATION=LOC,                                * 00062700
*                        FUNCTION=QUERY,RETCODE=RC,RSNCODE=RSN        * 00062800
*      *                                                              * 00062900
*      * Storage areas                                                * 00063000
*      *                                                              * 00063100
*      DATA     DS    CL200           Area to receive output          * 00063200
*      SIZEEQU  EQU   *-DATA          Equate for size of Data         * 00063300
*      E        DS    F               Field to receive entry count    * 00063400
*      Q        DS    F               Field to receive query length   * 00063500
*      LOC      DS    CL18            Contains the Location           * 00063600
*      *                              associated with the server      * 00063700
*      *                              instance                        * 00063800
*      RC       DS    F               Return code                     * 00063900
*      RSN      DS    F               Reason code                     * 00064000
*      SIZE     DC    A(SIZEEQU)      Field to hold size              * 00064100
*                                                                     * 00064200
*                                                                     * 00064300
*01* MACRO USAGE NOTES:                                               * 00064400
*                                                                     * 00064500
*                                                                     * 00064600
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00064700
*        global macro variable.  Any value other than 'NO' will       * 00064800
*        result in the macro expansion being printed.  The default is * 00064900
*        'YES'.  The following examples illustrate how the ZPRINT     * 00065000
*        variable should be set.                                      * 00065100
*                                                                     * 00065200
*                    GBLC &ZPRINT                                     * 00065300
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00065400
*                                                                     * 00065500
*                                                                     * 00065600
*    2.  The IWMSRSRS macro supports multiple versions. The macro key * 00065700
*        list  below  contains the version level in which the key was * 00065800
*        first  introduced.  Positionals  are  identified by the word * 00065900
*        'Positional'  followed by the numeric value of its position. * 00066000
*        Nested  positionals  are  preceded  by their outer key.  The * 00066100
*        lowest value represents the original version and the highest * 00066200
*        value  represents  the  most  recent version of the IWMSRSRS * 00066300
*        macro.    When  specifying  PLISTVER,  be sure that it is as * 00066400
*        least  as high as the highest version number of all the keys * 00066500
*        being used.                                                  * 00066600
*                                                                     * 00066700
*        VERSION   KEY                                                * 00066800
*                                                                     * 00066900
*              0      ANSLEN                                          * 00067000
*                     LOCATION                                        * 00067100
*                     QUERYLEN                                        * 00067200
*                     SYSINFO_BLOCK                                   * 00067300
*              1      ENTRY_COUNT                                     * 00067400
*                     EXTENDED_DATA                                   * 00067500
*                     FUNCTION                                        * 00067600
*                                                                     * 00067700
*                                                                     * 00067800
*                                                                     * 00067900
*01* CHANGE ACTIVITY:                                                 * 00068000
*                                                                     * 00068100
*   Flag LineItem  FMID    Date   ID    Comment                       * 00068200
*                                                                     * 00068300
*    $L0=ENCLV    HBB5520 940222 PDDD:  Sysplex Router.               * 00068400
*    $L1=WLMP     HBB6603 960220 PD16:  DB2 TCP/IP Support.           * 00068500
*    $L2=WLMPDNS  JBB6604 961031 PDKP:  Domain Name Support.          * 00068600
****** END OF SPECIFICATIONS *****************************************/ 00068700
*/********************************************************************* 00068800
         MACRO                                                          00068900
&XLABEL  IWMSRSRS &SYSINFO_BLOCK=,&EXTENDED_DATA=,&ANSLEN=,            *00069000
               &ENTRY_COUNT=,&QUERYLEN=,&LOCATION=,&FUNCTION=,         *00069100
               &RETCODE=,&RSNCODE=,&PLISTVER=,&MF=                      00069200
.*                                                                      00069300
*                   MACDATE -01/14/97-<1>                               00069400
.*                                                                      00069500
.*******************************************************************    00069600
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00069700
.*******************************************************************    00069800
                   GBLC  &ZPRINT     YES=PRINT NO=NO PRINT              00069900
                   GBLC  &ZTEST      YES=TEST NO=NO TEST                00070000
                   GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX        00070100
.*                                                                      00070200
                   GBLC  &ZIWMSRSRS  YES=MACRO USED AT LEAST ONCE       00070300
.*******************************************************************    00070400
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00070500
.*******************************************************************    00070600
                   LCLC  &ZMS        ERROR MESSAGE WORK AREA            00070700
                   LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS       00070800
                   LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED         00070900
                   LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR        00071000
                   LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE        00071100
                   LCLA  &ZAWRK      USED AS A WORK AREA                00071200
                   LCLA  &ZASIZ      USED FOR SIZE OF VALUE             00071300
                   LCLA  &ZN         NUMERIC WORK VARIABLE              00071400
                   LCLC  &ZC         CHARACTER WORK VARIABLE            00071500
                   LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE        00071600
                   LCLA  &ZTLA       VALUE TOO LONG VARIABLE            00071700
                   LCLA  &ZMACRET    MACRO RETURN CODE                  00071800
&ZMACRET           SETA  0           ASSUME NO ERRORS                   00071900
.*                                                                      00072000
                   LCLC  &ZCSYSLIST(255)        NONXKEY, POS ARRAY      00072100
                   LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()         00072200
                   LCLA  &ZPLLEN     PARAMETER LIST LENGTH              00072300
                   LCLC  &ZENDBASEPL            End of base PL          00072400
                   LCLA  &ZPLWORKA   PARAMETER LIST LENGTH              00072500
.*******************************************************************    00072600
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00072700
.*******************************************************************    00072800
                   LCLA  &ZI         INDEX FOR ARRAY                    00072900
                   LCLA  &ZJ         INDEX FOR PARMS                    00073000
                   LCLA  &ZK         INDEX FOR PARSE                    00073100
                   LCLA  &ZLO        LOW RANGE VALUE                    00073200
                   LCLA  &ZHI        HIGH RANGE VALUE                   00073300
                   LCLC  &ZW         WORK AREA FOR PARM                 00073400
.********************************************************************   00073500
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00073600
.********************************************************************   00073700
                   GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL            00073800
                   GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE     00073900
.*                                                                      00074000
                   AIF   (K'&SYSASCE GT 0).ZSYS4  SYS STATE DEFINED     00074100
                   AIF   (K'&SYSSPLV GT 0).ZSYS2  SP LEVEL DEFINED      00074200
                   SPLEVEL  TEST                                        00074300
.ZSYS2             ANOP  ,                                              00074400
                   AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1          00074500
                   AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1          00074600
                   SYSSTATE TEST                                        00074700
                   AGO   .ZSYS4                                         00074800
.ZSYS3             ANOP  ,                                              00074900
&SYSASCE           SETC  'P'         ASSUME SYSSTATE PRIMARY            00075000
.ZSYS4             ANOP  ,                                              00075100
.*******************************************************************    00075200
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00075300
.*******************************************************************    00075400
                   LCLC  &XSYSINFO_BLOCK        ++ NAME                 00075500
                   LCLC  &XEXTENDED_DATA        ++ VALUE                00075600
                   LCLC  &XANSLEN    ++ NAME                            00075700
                   LCLC  &XENTRY_COUNT          ++ NAME                 00075800
                   LCLC  &XQUERYLEN  ++ NAME                            00075900
                   LCLC  &XLOCATION  ++ NAME                            00076000
                   LCLC  &XFUNCTION  ++ VALUE                           00076100
                   LCLC  &XRETCODE   ++ NAME                            00076200
                   LCLC  &XRSNCODE   ++ NAME                            00076300
                   LCLA  &XPLISTVER  ++ VALUE                           00076400
                   LCLC  &XMF        ++ VALUE                           00076500
                   LCLC  &XMFCTRL    ++ NAME                            00076600
                   LCLC  &XMFATTR    ++ VALUE                           00076700
                   LCLC  &XMFSCK     ++ VALUE                           00076800
.*******************************************************************    00076900
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00077000
.*******************************************************************    00077100
                   LCLC  &ZXSYSINFO_BLOCK       ++ INPUT NAME           00077200
                   LCLC  &ZXEXTENDED_DATA       ++ INPUT VALUE          00077300
                   LCLC  &ZXANSLEN   ++ INPUT NAME                      00077400
                   LCLC  &ZXENTRY_COUNT         ++ OUTPUT NAME          00077500
                   LCLC  &ZXQUERYLEN            ++ OUTPUT NAME          00077600
                   LCLC  &ZXLOCATION            ++ INPUT NAME           00077700
                   LCLC  &ZXFUNCTION            ++ INPUT VALUE          00077800
                   LCLC  &ZXRETCODE  ++ OUTPUT NAME                     00077900
                   LCLC  &ZXRSNCODE  ++ OUTPUT NAME                     00078000
                   LCLC  &ZXPLISTVER            ++ INPUT VALUE          00078100
                   LCLC  &ZXMF       ++ INPUT VALUE                     00078200
                   LCLC  &ZXMFCTRL   ++ INPUT NAME                      00078300
                   LCLC  &ZXMFATTR   ++ INPUT VALUE                     00078400
                   LCLC  &ZXMFSCK    ++ INPUT VALUE                     00078500
.********************************************************************   00078600
.***AC.PLV01  PROCESS PLISTVER                                      *   00078700
.********************************************************************   00078800
&XPLISTVER      SETA  0                                                 00078900
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00079000
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00079100
&XPLISTVER      SETA  1                                                 00079200
.ZPLV0          ANOP  ,                                                 00079300
.*                                                                      00079400
                AIF   ('&EXTENDED_DATA' EQ '').ZPLV1E                   00079500
                AIF   (&XPLISTVER GE 1).ZPLV1E                          00079600
&XPLISTVER      SETA  1                                                 00079700
.ZPLV1E         ANOP  ,                                                 00079800
.*                                                                      00079900
                AIF   ('&ENTRY_COUNT' EQ '').ZPLV2E                     00080000
                AIF   (&XPLISTVER GE 1).ZPLV2E                          00080100
&XPLISTVER      SETA  1                                                 00080200
.ZPLV2E         ANOP  ,                                                 00080300
.*                                                                      00080400
                AIF   ('&FUNCTION' EQ '').ZPLV3E                        00080500
                AIF   (&XPLISTVER GE 1).ZPLV3E                          00080600
&XPLISTVER      SETA  1                                                 00080700
.ZPLV3E         ANOP  ,                                                 00080800
.*                                                                      00080900
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00081000
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00081100
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00081200
.*-------------------------------------------------------------------   00081300
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00081400
&ZMS            SETC  '"PLISTVER='         *KPOSA* MNOTE                00081500
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00081600
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00081700
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00081800
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00081900
                AGO   .ZPVCK2                                           00082000
.ZPVCK3         ANOP  ,                                                 00082100
.*-------------------------------------------------------------------   00082200
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00082300
&ZMS            SETC  '"PLISTVER='         *KGPRA* MNOTE                00082400
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00082500
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00082600
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00082700
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00082800
                AGO   .ZPVCKE                                           00082900
.ZPVCK2         ANOP  ,                                                 00083000
.*-------------------------------------------------------------------   00083100
&ZCVAL          SETC  '&PLISTVER(1)'                                    00083200
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00083300
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00083400
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00083500
                AIF   (&ZN LT 0).ZPVCK6    TOO LOW                      00083600
                AIF   (&ZN LE 1).ZPVCK4A   NOT HIGH                     00083700
.ZPVCK6         ANOP  ,                                                 00083800
&ZMS            SETC  '"PLISTVER='         *KRNGA* MNOTE                00083900
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00084000
&ZMS            SETC  '&ZMS THE RANGE IS "0-1"'                         00084100
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00084200
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00084300
&XPLISTVER      SETA  1                                                 00084400
                AGO   .ZPVCKE                                           00084500
.*-------------------------------------------------------------------   00084600
.ZPVCK4A        ANOP  ,                                                 00084700
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00084800
&ZMS            SETC  'PLISTVER='          *KVALA* MNOTE                00084900
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00085000
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00085100
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00085200
                MNOTE 8,' &ZMS IS REQUIRED.'                            00085300
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00085400
                AGO   .ZPVCK5                                           00085500
.ZPVCK4         ANOP  ,                                                 00085600
&XPLISTVER      SETA  &PLISTVER(1)                                      00085700
.ZPVCK5         ANOP  ,                                                 00085800
.ZPVCKE         ANOP  ,                                                 00085900
.********************************************************************   00086000
.***AG.MF01 PROCESS MF MACRO FORMS                                      00086100
.********************************************************************   00086200
                   ACTR  10000                                          00086300
.*------------------------------------------------------------------    00086400
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00086500
&XMF               SETC  ''          INITIALIZE XVARIABLE               00086600
.*-------------------------------------------------------------------   00086700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00086800
.ZG37              ANOP  ,                                              00086900
&ZTLC              SETC 'S'                                             00087000
                   AIF   ('&MF(1)' NE '&ZTLC').ZG38                     00087100
&XMF               SETC  'S'         SET KEYWORD                        00087200
                   AIF   (N'&MF LE 1).ZG37A     CK NUM                  00087300
&ZMS               SETC  '"MF='      *KPOSA* MNOTE                      00087400
&ZMS               SETC  '&ZMS.&MF"'                                    00087500
&ZMS               SETC  '&ZMS "MF"'                                    00087600
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00087700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00087800
.ZG37A             ANOP  ,                                              00087900
.*-------------------------------------------------------------------   00088000
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00088100
.ZG38              ANOP  ,                                              00088200
&ZTLC              SETC 'L'                                             00088300
                   AIF   ('&MF(1)' NE '&ZTLC').ZG45                     00088400
&XMF               SETC  'L'         SET KEYWORD                        00088500
                   AIF   (N'&MF LE 3).ZG38A     CK NUM                  00088600
&ZMS               SETC  '"MF='      *KPOSA* MNOTE                      00088700
&ZMS               SETC  '&ZMS.&MF"'                                    00088800
&ZMS               SETC  '&ZMS "MF"'                                    00088900
                   MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'           00089000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00089100
.ZG38A             ANOP  ,                                              00089200
.*-------------------------------------------------------------------   00089300
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00089400
                   AIF   (N'&SYSLIST NE 0).ZG38B  POSITIONALS?          00089500
                   AIF   ('&SYSINFO_BLOCK' NE '').ZG38B  KEYS?          00089600
                   AIF   ('&EXTENDED_DATA' NE '').ZG38B  KEYS?          00089700
                   AIF   ('&ANSLEN' NE '').ZG38B  KEYS?                 00089800
                   AIF   ('&ENTRY_COUNT' NE '').ZG38B  KEYS?            00089900
                   AIF   ('&QUERYLEN' NE '').ZG38B  KEYS?               00090000
                   AIF   ('&LOCATION' NE '').ZG38B  KEYS?               00090100
                   AIF   ('&FUNCTION' NE '').ZG38B  KEYS?               00090200
                   AIF   ('&RETCODE' NE '').ZG38B  KEYS?                00090300
                   AIF   ('&RSNCODE' NE '').ZG38B  KEYS?                00090400
                   AGO    .ZG38C     INVOCATION OKAY                    00090500
.ZG38B             ANOP  ,                                              00090600
&ZMS               SETC  'THE "L" FORM OF "MF"'  *MFLA* MNOTE           00090700
&ZMS               SETC  '&ZMS CAN ONLY HAVE'                           00090800
&ZMS               SETC  '&ZMS THE "PLISTVER" KEY'                      00090900
                   MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'         00091000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00091100
.ZG38C             ANOP  ,                                              00091200
.*-------------------------------------------------------------------   00091300
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00091400
&ZXMFCTRL          SETC  'INPUT'     SET IN/OUTPUT                      00091500
&XMFCTRL           SETC  '&MF(2,1)'  SET XVARIABLE                      00091600
                   AIF   (N'&MF(2) GT 1).ZG40B  MULTI PARMS             00091700
&XMFCTRL           SETC  '&MF(2)'    SET XVARIABLE                      00091800
.ZG40B             AIF   (K'&MF(2) GT 0).ZG40C                          00091900
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT                    00092000
&ZMS               SETC  'WHEN "L" IS SPECIFIED'  *KRQDA*               00092100
&ZMS               SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'            00092200
                   MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                   00092300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00092400
.ZG40C             ANOP  ,                                              00092500
.*-------------------------------------------------------------------   00092600
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00092700
                   AIF   (K'&ZXMFCTRL LE 0).ZG40P  NOT I/O              00092800
                   AIF   ('&XMFCTRL'(1,1) NE '(').ZG40P                 00092900
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT                    00093000
&ZMS               SETC  '"MF='      *KGPRA* MNOTE                      00093100
&ZMS               SETC  '&ZMS.&MF"'                                    00093200
&ZMS               SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'      00093300
                   MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'              00093400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00093500
.ZG40P             ANOP  ,                                              00093600
.*-------------------------------------------------------------------   00093700
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00093800
&ZXMFATTR          SETC  'INPUT'     SET IN/OUTPUT                      00093900
&XMFATTR           SETC  '0D'                                           00094000
                   AIF   (K'&MF(3) LE 0).ZG43B  PARM                    00094100
&XMFATTR           SETC  '&MF(3,1)'  SET XVARIABLE                      00094200
                   AIF   (N'&MF(3) GT 1).ZG43B  MULTI PARMS             00094300
&XMFATTR           SETC  '&MF(3)'    SET XVARIABLE                      00094400
.ZG43B             ANOP  ,                                              00094500
.*-------------------------------------------------------------------   00094600
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00094700
                   AIF   (K'&ZXMFATTR LE 0).ZG43P  NOT I/O              00094800
                   AIF   ('&XMFATTR'(1,1) NE '(').ZG43P                 00094900
&ZXMFATTR          SETC  ''          RESET IN/OUTPUT                    00095000
&ZMS               SETC  '"MF='      *KGPRA* MNOTE                      00095100
&ZMS               SETC  '&ZMS.&MF"'                                    00095200
&ZMS               SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'      00095300
                   MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'              00095400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00095500
.ZG43P             ANOP  ,                                              00095600
.*-------------------------------------------------------------------   00095700
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00095800
                   AIF   (K'&ZXMFATTR LE 0).ZG43S  NOT I/O              00095900
                   AIF   (K'&XMFATTR LE 60).ZG43S  LNG OK               00096000
&ZXMFATTR          SETC  ''          RESET IN/OUTPUT                    00096100
&ZMS               SETC  '"MF='      *KLNGA* MNOTE                      00096200
&ZMS               SETC  '&ZMS.&MF"'                                    00096300
&ZMS               SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'          00096400
                   MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'             00096500
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00096600
.ZG43S             ANOP  ,                                              00096700
.*-------------------------------------------------------------------   00096800
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00096900
.ZG45              ANOP  ,                                              00097000
&ZTLC              SETC 'E'                                             00097100
                   AIF   ('&MF(1)' NE '&ZTLC').ZG53                     00097200
&XMF               SETC  'E'         SET KEYWORD                        00097300
                   AIF   (N'&MF LE 3).ZG45A     CK NUM                  00097400
&ZMS               SETC  '"MF='      *KPOSA* MNOTE                      00097500
&ZMS               SETC  '&ZMS.&MF"'                                    00097600
&ZMS               SETC  '&ZMS "MF"'                                    00097700
                   MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'           00097800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00097900
.ZG45A             ANOP  ,                                              00098000
.*-------------------------------------------------------------------   00098100
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00098200
&ZXMFCTRL          SETC  'INPUT'     SET IN/OUTPUT                      00098300
&XMFCTRL           SETC  '&MF(2,1)'  SET XVARIABLE                      00098400
                   AIF   (N'&MF(2) GT 1).ZG47B  MULTI PARMS             00098500
&XMFCTRL           SETC  '&MF(2)'    SET XVARIABLE                      00098600
.ZG47B             AIF   (K'&MF(2) GT 0).ZG47C                          00098700
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT                    00098800
&ZMS               SETC  'WHEN "E" IS SPECIFIED'  *KRQDA*               00098900
&ZMS               SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'            00099000
                   MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                   00099100
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00099200
.ZG47C             ANOP  ,                                              00099300
.*-------------------------------------------------------------------   00099400
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00099500
                   AIF   (K'&ZXMFCTRL LE 0).ZG47R  NOT I/O              00099600
                   AIF   ('&XMFCTRL'(1,1) NE '(').ZG47R                 00099700
&ZCGPR             SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                     00099800
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG47P                   00099900
                   AIF   (K'&ZCGPR GT 2).ZG47Q                          00100000
                   AIF   ('&ZCGPR' EQ '0').ZG47Q                        00100100
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00100200
                   AIF   (T'&ZCGPR NE 'N').ZG47Q  INVALID REG NAME      00100300
.ZG47P             ANOP  ,                                              00100400
                   AIF   (T'&ZCGPR NE 'N').ZG47R  NON NUMERIC           00100500
                   AIF   ('&ZCGPR' LT '1').ZG47Q                        00100600
                   AIF   ('&ZCGPR' LE '12').ZG47R                       00100700
.ZG47Q             ANOP  ,                                              00100800
&ZMS               SETC  '"MF='      *KGPRA* MNOTE                      00100900
&ZMS               SETC  '&ZMS.&MF"'                                    00101000
&ZMS               SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'      00101100
                   MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'               00101200
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00101300
.ZG47R             ANOP  ,                                              00101400
.*-------------------------------------------------------------------   00101500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00101600
&XMFSCK            SETC  ''          INITIALIZE XVARIABLE               00101700
.ZG51A   AIF   ('&MF(3)' NE 'COMPLETE').ZG52A                           00101800
&XMFSCK            SETC  'COMPLETE'  SET KEYWORD                        00101900
.*-------------------------------------------------------------------   00102000
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00102100
.ZG52A             AIF   (K'&XMFSCK GT 0).ZG52C  KEYWORD                00102200
                   AIF   (K'&MF(3) LE 0).ZG52B                          00102300
&ZMS               SETC  '"MF='      *KUKWA* MNOTE                      00102400
&ZMS               SETC  '&ZMS.&MF"'                                    00102500
&ZMS               SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '      00102600
&ZMS               SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'            00102700
&ZMS               SETC  '&ZMS "COMPLETE".'     VALID KEYWORD           00102800
                   MNOTE 8,' &ZMS '                                     00102900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00103000
.ZG52B             ANOP  ,                                              00103100
&XMFSCK            SETC  'COMPLETE'  SET DEFAULT KEYWORD                00103200
.ZG52C             ANOP  ,                                              00103300
&ZXMFSCK           SETC  'INPUT'     SET IN/OUTPUT                      00103400
.*------------------------------------------------------------------    00103500
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00103600
.ZG53              ANOP  ,                                              00103700
&ZXMF              SETC  'INPUT'     SET IN/OUTPUT                      00103800
                   AIF   (K'&XMF GT 0).ZG53E    VALID ARG               00103900
                   AIF   (T'&MF EQ 'O').ZG53D   OMITTED                 00104000
&ZASYSLNDX         SETA  0                                              00104100
.ZG53A             ANOP  ,           POSITIONAL MACRO KEY               00104200
&ZASYSLNDX         SETA  &ZASYSLNDX+1                                   00104300
                   AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG53C               00104400
&ZTLC              SETC 'MF'                                            00104500
                   AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG53A      00104600
.ZG53B             ANOP  ,                                              00104700
&ZXMF              SETC  ''          RESET IN/OUTPUT                    00104800
&ZMS               SETC  'THE "MF" KEY'         *KOPTA* MNOTE           00104900
&ZMS               SETC  '&ZMS MUST CONTAIN ONE'                        00105000
                   MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'               00105100
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00105200
                   AGO   .ZG53E                                         00105300
.ZG53C             ANOP  ,                                              00105400
&ZXMF              SETC  ''          RESET IN/OUTPUT                    00105500
&ZMS               SETC  '"MF='      *KUKWA* MNOTE                      00105600
&ZMS               SETC  '&ZMS.&MF"'                                    00105700
&ZMS               SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '      00105800
&ZMS               SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'            00105900
&ZMS               SETC  '&ZMS "S",'            VALID KEYWORD           00106000
&ZMS               SETC  '&ZMS "L",'            VALID KEYWORD           00106100
&ZMS               SETC  '&ZMS OR "E".'         VALID KEYWORD           00106200
                   MNOTE 8,' &ZMS '                                     00106300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00106400
                   AGO   .ZG53E                                         00106500
.ZG53D             ANOP  ,                                              00106600
&XMF               SETC  'S'         SET DEFAULT KEYWORD                00106700
&XMFSCK            SETC  'COMPLETE'  COMPLETE CHECKING                  00106800
.ZG53E             ANOP  ,                                              00106900
.********************************************************************   00107000
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00107100
.********************************************************************   00107200
                   ACTR  10000                                          00107300
.*-------------------------------------------------------------------   00107400
.***AG.MF03 MF=(SLE)                                                    00107500
                   AIF   ('&XMF' EQ 'L').ZGMFX                          00107600
.*----------------------------------------------------------------***   00107700
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00107800
                   AIF   (N'&SYSINFO_BLOCK LE 1).ZG2A  CK NUM           00107900
&ZMS               SETC  '"SYSINFO_BLOCK='      *KPOSA* MNOTE           00108000
&ZMS               SETC  '&ZMS.&SYSINFO_BLOCK"'                         00108100
&ZMS               SETC  '&ZMS "SYSINFO_BLOCK"'                         00108200
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00108300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00108400
.ZG2A              ANOP  ,                                              00108500
.*-------------------------------------------------------------------   00108600
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00108700
&ZXSYSINFO_BLOCK   SETC  'INPUT'     SET IN/OUTPUT                      00108800
&XSYSINFO_BLOCK    SETC  '&SYSINFO_BLOCK(1)'    SET XVARIABLE           00108900
                   AIF   (N'&SYSINFO_BLOCK GT 1).ZG2B  MULTI PARMS      00109000
&XSYSINFO_BLOCK    SETC  '&SYSINFO_BLOCK'       SET XVARIABLE           00109100
.ZG2B              AIF   (K'&SYSINFO_BLOCK(1) GT 0).ZG2C                00109200
&ZXSYSINFO_BLOCK   SETC  ''          RESET IN/OUTPUT                    00109300
&ZMS               SETC  ' '         *KRQDA*                            00109400
&ZMS               SETC  '&ZMS "SYSINFO_BLOCK" KEY AND ITS ARGUMENT'    00109500
                   MNOTE 8,' &ZMS ARE REQUIRED.'                        00109600
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00109700
.ZG2C              ANOP  ,                                              00109800
.*-------------------------------------------------------------------   00109900
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00110000
                   AIF   (K'&ZXSYSINFO_BLOCK LE 0).ZG2R  NOT I/O        00110100
                   AIF   ('&XSYSINFO_BLOCK'(1,1) NE '(').ZG2R           00110200
&ZCGPR             SETC  '&XSYSINFO_BLOCK'(2,K'&XSYSINFO_BLOCK-2)       00110300
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG2P                    00110400
                   AIF   (K'&ZCGPR GT 2).ZG2Q                           00110500
                   AIF   ('&ZCGPR' EQ '0').ZG2Q                         00110600
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00110700
                   AIF   (T'&ZCGPR NE 'N').ZG2Q  INVALID REG NAME       00110800
.ZG2P              ANOP  ,                                              00110900
                   AIF   (T'&ZCGPR NE 'N').ZG2R  NON NUMERIC            00111000
                   AIF   ('&ZCGPR' LT '2').ZG2Q                         00111100
                   AIF   ('&ZCGPR' LE '12').ZG2R                        00111200
.ZG2Q              ANOP  ,                                              00111300
&ZMS               SETC  '"SYSINFO_BLOCK='      *KGPRA* MNOTE           00111400
&ZMS               SETC  '&ZMS.&SYSINFO_BLOCK"'                         00111500
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00111600
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00111700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00111800
.ZG2R              ANOP  ,                                              00111900
.*------------------------------------------------------------------    00112000
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00112100
&XEXTENDED_DATA    SETC  ''          INITIALIZE XVARIABLE               00112200
.*-------------------------------------------------------------------   00112300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00112400
.ZG6               ANOP  ,                                              00112500
                   AIF   (K'&EXTENDED_DATA(1) LE 0).ZG6A                00112600
&ZTLC              SETC 'NO'                                            00112700
                   AIF   ('&EXTENDED_DATA(1)' NE '&ZTLC').ZG7           00112800
&XEXTENDED_DATA    SETC  'NO'        SET KEYWORD                        00112900
                   AIF   (N'&EXTENDED_DATA LE 1).ZG6A  CK NUM           00113000
&ZMS               SETC  '"EXTENDED_DATA='      *KPOSA* MNOTE           00113100
&ZMS               SETC  '&ZMS.&EXTENDED_DATA"'                         00113200
&ZMS               SETC  '&ZMS "EXTENDED_DATA"'                         00113300
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00113400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00113500
.ZG6A              ANOP  ,                                              00113600
.*-------------------------------------------------------------------   00113700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00113800
.ZG7               ANOP  ,                                              00113900
&ZTLC              SETC 'YES'                                           00114000
                   AIF   ('&EXTENDED_DATA(1)' NE '&ZTLC').ZG8           00114100
&XEXTENDED_DATA    SETC  'YES'       SET KEYWORD                        00114200
                   AIF   (N'&EXTENDED_DATA LE 1).ZG7A  CK NUM           00114300
&ZMS               SETC  '"EXTENDED_DATA='      *KPOSA* MNOTE           00114400
&ZMS               SETC  '&ZMS.&EXTENDED_DATA"'                         00114500
&ZMS               SETC  '&ZMS "EXTENDED_DATA"'                         00114600
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00114700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00114800
.ZG7A              ANOP  ,                                              00114900
.*------------------------------------------------------------------    00115000
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00115100
.ZG8               ANOP  ,                                              00115200
&ZXEXTENDED_DATA   SETC  'INPUT'     SET IN/OUTPUT                      00115300
                   AIF   (K'&XEXTENDED_DATA GT 0).ZG8E  VALID ARG       00115400
                   AIF   (T'&EXTENDED_DATA EQ 'O').ZG8D  OMITTED        00115500
&ZASYSLNDX         SETA  0                                              00115600
.ZG8A              ANOP  ,           POSITIONAL MACRO KEY               00115700
&ZASYSLNDX         SETA  &ZASYSLNDX+1                                   00115800
                   AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG8C                00115900
&ZTLC              SETC 'EXTENDED_DATA'                                 00116000
                   AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG8A       00116100
.ZG8B              ANOP  ,                                              00116200
&ZXEXTENDED_DATA   SETC  ''          RESET IN/OUTPUT                    00116300
&ZMS               SETC  'THE "EXTENDED_DATA" KEY'  *KOPTA* MNOTE       00116400
&ZMS               SETC  '&ZMS MUST CONTAIN ONE'                        00116500
                   MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'               00116600
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00116700
                   AGO   .ZG8E                                          00116800
.ZG8C              ANOP  ,                                              00116900
&ZXEXTENDED_DATA   SETC  ''          RESET IN/OUTPUT                    00117000
&ZMS               SETC  '"EXTENDED_DATA='      *KUKWA* MNOTE           00117100
&ZMS               SETC  '&ZMS.&EXTENDED_DATA"'                         00117200
&ZMS               SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '      00117300
&ZMS               SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'            00117400
&ZMS               SETC  '&ZMS "NO"'            VALID KEYWORD           00117500
&ZMS               SETC  '&ZMS OR "YES".'       VALID KEYWORD           00117600
                   MNOTE 8,' &ZMS '                                     00117700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00117800
                   AGO   .ZG8E                                          00117900
.ZG8D              ANOP  ,                                              00118000
&XEXTENDED_DATA    SETC  'NO'        SET DEFAULT KEYWORD                00118100
.ZG8E              ANOP  ,                                              00118200
.*----------------------------------------------------------------***   00118300
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00118400
                   AIF   (N'&ANSLEN LE 1).ZG10A  CK NUM                 00118500
&ZMS               SETC  '"ANSLEN='  *KPOSA* MNOTE                      00118600
&ZMS               SETC  '&ZMS.&ANSLEN"'                                00118700
&ZMS               SETC  '&ZMS "ANSLEN"'                                00118800
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00118900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00119000
.ZG10A             ANOP  ,                                              00119100
.*-------------------------------------------------------------------   00119200
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00119300
&ZXANSLEN          SETC  'INPUT'     SET IN/OUTPUT                      00119400
&XANSLEN           SETC  '&ANSLEN(1)'           SET XVARIABLE           00119500
                   AIF   (N'&ANSLEN GT 1).ZG10B  MULTI PARMS            00119600
&XANSLEN           SETC  '&ANSLEN'   SET XVARIABLE                      00119700
.ZG10B             AIF   (K'&ANSLEN(1) GT 0).ZG10C                      00119800
&ZXANSLEN          SETC  ''          RESET IN/OUTPUT                    00119900
&ZMS               SETC  ' '         *KRQDA*                            00120000
&ZMS               SETC  '&ZMS "ANSLEN" KEY AND ITS ARGUMENT'           00120100
                   MNOTE 8,' &ZMS ARE REQUIRED.'                        00120200
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00120300
.ZG10C             ANOP  ,                                              00120400
.*-------------------------------------------------------------------   00120500
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00120600
                   AIF   (K'&ZXANSLEN LE 0).ZG10R  NOT I/O              00120700
                   AIF   ('&XANSLEN'(1,1) NE '(').ZG10R                 00120800
&ZCGPR             SETC  '&XANSLEN'(2,K'&XANSLEN-2)                     00120900
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG10P                   00121000
                   AIF   (K'&ZCGPR GT 2).ZG10Q                          00121100
                   AIF   ('&ZCGPR' EQ '0').ZG10Q                        00121200
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00121300
                   AIF   (T'&ZCGPR NE 'N').ZG10Q  INVALID REG NAME      00121400
.ZG10P             ANOP  ,                                              00121500
                   AIF   (T'&ZCGPR NE 'N').ZG10R  NON NUMERIC           00121600
                   AIF   ('&ZCGPR' LT '2').ZG10Q                        00121700
                   AIF   ('&ZCGPR' LE '12').ZG10R                       00121800
.ZG10Q             ANOP  ,                                              00121900
&ZMS               SETC  '"ANSLEN='  *KGPRA* MNOTE                      00122000
&ZMS               SETC  '&ZMS.&ANSLEN"'                                00122100
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00122200
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00122300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00122400
.ZG10R             ANOP  ,                                              00122500
.*----------------------------------------------------------------***   00122600
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00122700
                   AIF   (N'&ENTRY_COUNT LE 1).ZG13A  CK NUM            00122800
&ZMS               SETC  '"ENTRY_COUNT='        *KPOSA* MNOTE           00122900
&ZMS               SETC  '&ZMS.&ENTRY_COUNT"'                           00123000
&ZMS               SETC  '&ZMS "ENTRY_COUNT"'                           00123100
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00123200
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00123300
.ZG13A             ANOP  ,                                              00123400
.*-------------------------------------------------------------------   00123500
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00123600
                   AIF   (K'&ENTRY_COUNT(1) LE 0).ZG13C  NO PARM        00123700
&ZXENTRY_COUNT     SETC  'OUTPUT'    SET OUTPUT                         00123800
&XENTRY_COUNT      SETC  '&ENTRY_COUNT(1)'      SET XVARIABLE           00123900
                   AIF   (N'&ENTRY_COUNT GT 1).ZG13C                    00124000
&XENTRY_COUNT      SETC  '&ENTRY_COUNT'         SET XVARIABLE           00124100
.ZG13C             ANOP  ,                                              00124200
.*-------------------------------------------------------------------   00124300
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00124400
                   AIF   (K'&ZXENTRY_COUNT LE 0).ZG13R  NOT I/O         00124500
                   AIF   ('&XENTRY_COUNT'(1,1) NE '(').ZG13R            00124600
&ZCGPR             SETC  '&XENTRY_COUNT'(2,K'&XENTRY_COUNT-2)           00124700
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG13P                   00124800
                   AIF   (K'&ZCGPR GT 2).ZG13Q                          00124900
                   AIF   ('&ZCGPR' EQ '0').ZG13Q                        00125000
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00125100
                   AIF   (T'&ZCGPR NE 'N').ZG13Q  INVALID REG NAME      00125200
.ZG13P             ANOP  ,                                              00125300
                   AIF   (T'&ZCGPR NE 'N').ZG13R  NON NUMERIC           00125400
                   AIF   ('&ZCGPR' LT '2').ZG13Q                        00125500
                   AIF   ('&ZCGPR' LE '12').ZG13R                       00125600
.ZG13Q             ANOP  ,                                              00125700
&ZMS               SETC  '"ENTRY_COUNT='        *KGPRA* MNOTE           00125800
&ZMS               SETC  '&ZMS.&ENTRY_COUNT"'                           00125900
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00126000
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00126100
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00126200
.ZG13R             ANOP  ,                                              00126300
.*----------------------------------------------------------------***   00126400
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY                    00126500
                   AIF   (N'&QUERYLEN LE 1).ZG16A  CK NUM               00126600
&ZMS               SETC  '"QUERYLEN='           *KPOSA* MNOTE           00126700
&ZMS               SETC  '&ZMS.&QUERYLEN"'                              00126800
&ZMS               SETC  '&ZMS "QUERYLEN"'                              00126900
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00127000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00127100
.ZG16A             ANOP  ,                                              00127200
.*-------------------------------------------------------------------   00127300
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE                        00127400
&ZXQUERYLEN        SETC  'OUTPUT'    SET IN/OUTPUT                      00127500
&XQUERYLEN         SETC  '&QUERYLEN(1)'         SET XVARIABLE           00127600
                   AIF   (N'&QUERYLEN GT 1).ZG16B  MULTI PARMS          00127700
&XQUERYLEN         SETC  '&QUERYLEN'            SET XVARIABLE           00127800
.ZG16B             AIF   (K'&QUERYLEN(1) GT 0).ZG16C                    00127900
&ZXQUERYLEN        SETC  ''          RESET IN/OUTPUT                    00128000
&ZMS               SETC  ' '         *KRQDA*                            00128100
&ZMS               SETC  '&ZMS "QUERYLEN" KEY AND ITS ARGUMENT'         00128200
                   MNOTE 8,' &ZMS ARE REQUIRED.'                        00128300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00128400
.ZG16C             ANOP  ,                                              00128500
.*-------------------------------------------------------------------   00128600
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE                   00128700
                   AIF   (K'&ZXQUERYLEN LE 0).ZG16R  NOT I/O            00128800
                   AIF   ('&XQUERYLEN'(1,1) NE '(').ZG16R               00128900
&ZCGPR             SETC  '&XQUERYLEN'(2,K'&XQUERYLEN-2)                 00129000
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG16P                   00129100
                   AIF   (K'&ZCGPR GT 2).ZG16Q                          00129200
                   AIF   ('&ZCGPR' EQ '0').ZG16Q                        00129300
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00129400
                   AIF   (T'&ZCGPR NE 'N').ZG16Q  INVALID REG NAME      00129500
.ZG16P             ANOP  ,                                              00129600
                   AIF   (T'&ZCGPR NE 'N').ZG16R  NON NUMERIC           00129700
                   AIF   ('&ZCGPR' LT '2').ZG16Q                        00129800
                   AIF   ('&ZCGPR' LE '12').ZG16R                       00129900
.ZG16Q             ANOP  ,                                              00130000
&ZMS               SETC  '"QUERYLEN='           *KGPRA* MNOTE           00130100
&ZMS               SETC  '&ZMS.&QUERYLEN"'                              00130200
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00130300
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00130400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00130500
.ZG16R             ANOP  ,                                              00130600
.*----------------------------------------------------------------***   00130700
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00130800
                   AIF   (N'&LOCATION LE 1).ZG19A  CK NUM               00130900
&ZMS               SETC  '"LOCATION='           *KPOSA* MNOTE           00131000
&ZMS               SETC  '&ZMS.&LOCATION"'                              00131100
&ZMS               SETC  '&ZMS "LOCATION"'                              00131200
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00131300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00131400
.ZG19A             ANOP  ,                                              00131500
.*-------------------------------------------------------------------   00131600
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00131700
&ZXLOCATION        SETC  'INPUT'     SET IN/OUTPUT                      00131800
&XLOCATION         SETC  '&LOCATION(1)'         SET XVARIABLE           00131900
                   AIF   (N'&LOCATION GT 1).ZG19B  MULTI PARMS          00132000
&XLOCATION         SETC  '&LOCATION'            SET XVARIABLE           00132100
.ZG19B             AIF   (K'&LOCATION(1) GT 0).ZG19C                    00132200
&ZXLOCATION        SETC  ''          RESET IN/OUTPUT                    00132300
&ZMS               SETC  ' '         *KRQDA*                            00132400
&ZMS               SETC  '&ZMS "LOCATION" KEY AND ITS ARGUMENT'         00132500
                   MNOTE 8,' &ZMS ARE REQUIRED.'                        00132600
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00132700
.ZG19C             ANOP  ,                                              00132800
.*-------------------------------------------------------------------   00132900
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00133000
                   AIF   (K'&ZXLOCATION LE 0).ZG19R  NOT I/O            00133100
                   AIF   ('&XLOCATION'(1,1) NE '(').ZG19R               00133200
&ZCGPR             SETC  '&XLOCATION'(2,K'&XLOCATION-2)                 00133300
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG19P                   00133400
                   AIF   (K'&ZCGPR GT 2).ZG19Q                          00133500
                   AIF   ('&ZCGPR' EQ '0').ZG19Q                        00133600
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00133700
                   AIF   (T'&ZCGPR NE 'N').ZG19Q  INVALID REG NAME      00133800
.ZG19P             ANOP  ,                                              00133900
                   AIF   (T'&ZCGPR NE 'N').ZG19R  NON NUMERIC           00134000
                   AIF   ('&ZCGPR' LT '2').ZG19Q                        00134100
                   AIF   ('&ZCGPR' LE '12').ZG19R                       00134200
.ZG19Q             ANOP  ,                                              00134300
&ZMS               SETC  '"LOCATION='           *KGPRA* MNOTE           00134400
&ZMS               SETC  '&ZMS.&LOCATION"'                              00134500
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00134600
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00134700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00134800
.ZG19R             ANOP  ,                                              00134900
.*------------------------------------------------------------------    00135000
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00135100
&XFUNCTION         SETC  ''          INITIALIZE XVARIABLE               00135200
.*-------------------------------------------------------------------   00135300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00135400
.ZG23              ANOP  ,                                              00135500
                   AIF   (K'&FUNCTION(1) LE 0).ZG23A                    00135600
&ZTLC              SETC 'SELECT'                                        00135700
                   AIF   ('&FUNCTION(1)' NE '&ZTLC').ZG24               00135800
&XFUNCTION         SETC  'SELECT'    SET KEYWORD                        00135900
                   AIF   (N'&FUNCTION LE 1).ZG23A  CK NUM               00136000
&ZMS               SETC  '"FUNCTION='           *KPOSA* MNOTE           00136100
&ZMS               SETC  '&ZMS.&FUNCTION"'                              00136200
&ZMS               SETC  '&ZMS "FUNCTION"'                              00136300
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00136400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00136500
.ZG23A             ANOP  ,                                              00136600
.*-------------------------------------------------------------------   00136700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00136800
.ZG24              ANOP  ,                                              00136900
&ZTLC              SETC 'QUERY'                                         00137000
                   AIF   ('&FUNCTION(1)' NE '&ZTLC').ZG25               00137100
&XFUNCTION         SETC  'QUERY'     SET KEYWORD                        00137200
                   AIF   (N'&FUNCTION LE 1).ZG24A  CK NUM               00137300
&ZMS               SETC  '"FUNCTION='           *KPOSA* MNOTE           00137400
&ZMS               SETC  '&ZMS.&FUNCTION"'                              00137500
&ZMS               SETC  '&ZMS "FUNCTION"'                              00137600
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00137700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00137800
.ZG24A             ANOP  ,                                              00137900
.*------------------------------------------------------------------    00138000
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00138100
.ZG25              ANOP  ,                                              00138200
&ZXFUNCTION        SETC  'INPUT'     SET IN/OUTPUT                      00138300
                   AIF   (K'&XFUNCTION GT 0).ZG25E  VALID ARG           00138400
                   AIF   (T'&FUNCTION EQ 'O').ZG25D  OMITTED            00138500
&ZASYSLNDX         SETA  0                                              00138600
.ZG25A             ANOP  ,           POSITIONAL MACRO KEY               00138700
&ZASYSLNDX         SETA  &ZASYSLNDX+1                                   00138800
                   AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG25C               00138900
&ZTLC              SETC 'FUNCTION'                                      00139000
                   AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG25A      00139100
.ZG25B             ANOP  ,                                              00139200
&ZXFUNCTION        SETC  ''          RESET IN/OUTPUT                    00139300
&ZMS               SETC  'THE "FUNCTION" KEY'   *KOPTA* MNOTE           00139400
&ZMS               SETC  '&ZMS MUST CONTAIN ONE'                        00139500
                   MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'               00139600
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00139700
                   AGO   .ZG25E                                         00139800
.ZG25C             ANOP  ,                                              00139900
&ZXFUNCTION        SETC  ''          RESET IN/OUTPUT                    00140000
&ZMS               SETC  '"FUNCTION='           *KUKWA* MNOTE           00140100
&ZMS               SETC  '&ZMS.&FUNCTION"'                              00140200
&ZMS               SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '      00140300
&ZMS               SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'            00140400
&ZMS               SETC  '&ZMS "SELECT"'        VALID KEYWORD           00140500
&ZMS               SETC  '&ZMS OR "QUERY".'     VALID KEYWORD           00140600
                   MNOTE 8,' &ZMS '                                     00140700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00140800
                   AGO   .ZG25E                                         00140900
.ZG25D             ANOP  ,                                              00141000
&XFUNCTION         SETC  'SELECT'    SET DEFAULT KEYWORD                00141100
.ZG25E             ANOP  ,                                              00141200
.*----------------------------------------------------------------***   00141300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00141400
                   AIF   (N'&RETCODE LE 1).ZG27A  CK NUM                00141500
&ZMS               SETC  '"RETCODE='            *KPOSA* MNOTE           00141600
&ZMS               SETC  '&ZMS.&RETCODE"'                               00141700
&ZMS               SETC  '&ZMS "RETCODE"'                               00141800
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00141900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00142000
.ZG27A             ANOP  ,                                              00142100
.*-------------------------------------------------------------------   00142200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00142300
                   AIF   (K'&RETCODE(1) LE 0).ZG27C  NO PARM            00142400
&ZXRETCODE         SETC  'OUTPUT'    SET OUTPUT                         00142500
&XRETCODE          SETC  '&RETCODE(1)'          SET XVARIABLE           00142600
                   AIF   (N'&RETCODE GT 1).ZG27C                        00142700
&XRETCODE          SETC  '&RETCODE'  SET XVARIABLE                      00142800
.ZG27C             ANOP  ,                                              00142900
.*-------------------------------------------------------------------   00143000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00143100
                   AIF   (K'&ZXRETCODE LE 0).ZG27R  NOT I/O             00143200
                   AIF   ('&XRETCODE'(1,1) NE '(').ZG27R                00143300
&ZCGPR             SETC  '&XRETCODE'(2,K'&XRETCODE-2)                   00143400
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG27P                   00143500
                   AIF   (K'&ZCGPR GT 2).ZG27Q                          00143600
                   AIF   ('&ZCGPR' EQ '0').ZG27Q                        00143700
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00143800
                   AIF   (T'&ZCGPR NE 'N').ZG27Q  INVALID REG NAME      00143900
.ZG27P             ANOP  ,                                              00144000
                   AIF   (T'&ZCGPR NE 'N').ZG27R  NON NUMERIC           00144100
                   AIF   ('&ZCGPR' LT '2').ZG27Q                        00144200
                   AIF   ('&ZCGPR' LE '12').ZG27R                       00144300
.ZG27Q             ANOP  ,                                              00144400
&ZMS               SETC  '"RETCODE='            *KGPRA* MNOTE           00144500
&ZMS               SETC  '&ZMS.&RETCODE"'                               00144600
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00144700
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00144800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00144900
.ZG27R             ANOP  ,                                              00145000
.*----------------------------------------------------------------***   00145100
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00145200
                   AIF   (N'&RSNCODE LE 1).ZG30A  CK NUM                00145300
&ZMS               SETC  '"RSNCODE='            *KPOSA* MNOTE           00145400
&ZMS               SETC  '&ZMS.&RSNCODE"'                               00145500
&ZMS               SETC  '&ZMS "RSNCODE"'                               00145600
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00145700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00145800
.ZG30A             ANOP  ,                                              00145900
.*-------------------------------------------------------------------   00146000
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00146100
                   AIF   (K'&RSNCODE(1) LE 0).ZG30C  NO PARM            00146200
&ZXRSNCODE         SETC  'OUTPUT'    SET OUTPUT                         00146300
&XRSNCODE          SETC  '&RSNCODE(1)'          SET XVARIABLE           00146400
                   AIF   (N'&RSNCODE GT 1).ZG30C                        00146500
&XRSNCODE          SETC  '&RSNCODE'  SET XVARIABLE                      00146600
.ZG30C             ANOP  ,                                              00146700
.*-------------------------------------------------------------------   00146800
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00146900
                   AIF   (K'&ZXRSNCODE LE 0).ZG30R  NOT I/O             00147000
                   AIF   ('&XRSNCODE'(1,1) NE '(').ZG30R                00147100
&ZCGPR             SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                   00147200
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG30P                   00147300
                   AIF   (K'&ZCGPR GT 2).ZG30Q                          00147400
                   AIF   ('&ZCGPR' EQ '0').ZG30Q                        00147500
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00147600
                   AIF   (T'&ZCGPR NE 'N').ZG30Q  INVALID REG NAME      00147700
.ZG30P             ANOP  ,                                              00147800
                   AIF   (T'&ZCGPR NE 'N').ZG30R  NON NUMERIC           00147900
                   AIF   ('&ZCGPR' LT '2').ZG30Q                        00148000
                   AIF   ('&ZCGPR' LE '12').ZG30R                       00148100
.ZG30Q             ANOP  ,                                              00148200
&ZMS               SETC  '"RSNCODE='            *KGPRA* MNOTE           00148300
&ZMS               SETC  '&ZMS.&RSNCODE"'                               00148400
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00148500
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00148600
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00148700
.ZG30R             ANOP  ,                                              00148800
.******************************************************************     00148900
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00149000
.******************************************************************     00149100
                   ACTR  10000                                          00149200
.*----------------------------------------------------------------***   00149300
.***AH.P02 EXTRA POSITIONALS                                            00149400
                   AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS           00149500
                   AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL           00149600
                   AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL       00149700
                   AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL        00149800
.ZGLISTX1          ANOP  ,                                              00149900
&ZCVAL             SETC  ''          ERROR FIELD                        00150000
&ZAWRK             SETA  0           POSITIONAL NUMBER                  00150100
.ZGLIST2           ANOP  ,                                              00150200
&ZAWRK             SETA  &ZAWRK+1    NEXT POSITIONAL                    00150300
                   AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE           00150400
&ZCVAL             SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA                00150500
                   AGO   .ZGLIST2                                       00150600
.*                                                                      00150700
.ZGLIST3           ANOP  ,                                              00150800
&ZCVAL             SETC '&ZCVAL'(2,K'&ZCVAL-1)  STRIP COMMA             00150900
&ZMS               SETC  'POSITIONAL ARGUMENT(S),'  *PPOSA* MNOTE       00151000
&ZMS               SETC  '&ZMS "&ZCVAL"'                                00151100
&ZMS               SETC  '&ZMS CANNOT BE USED.'                         00151200
&ZMS               SETC  '&ZMS NO POSITIONAL ARGUMENTS'                 00151300
                   MNOTE 8,' &ZMS ARE ALLOWED.'                         00151400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00151500
.ZGLISTX           ANOP  ,                                              00151600
&ZASYSLNDX         SETA  0                                              00151700
.*-------------------------------------------------------------------   00151800
.***AG.MF04 MF=(SLE)                                                    00151900
.ZGMFX             ANOP  ,           END OF FULL SYNTAX CHECK           00152000
.*******************************************************************    00152100
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00152200
.*******************************************************************    00152300
                   AIF   (&ZMACRET NE 0).ZLX2   ERROR DETECTED          00152400
.*******************************************************************    00152500
.***AE.01  START OF IWMSRSRS MACRO CODE                                 00152600
.*******************************************************************    00152700
                   LCLC  &M0M0001                 NAME                  00152800
&M0M0001           SETC  '&XLABEL'                SET NAME              00152900
                   AIF   (K'&XLABEL NE 0).XLAB2                         00153000
&M0M0001           SETC  'M00M&SYSNDX'            DEFAULT NAME          00153100
.*                                                                      00153200
.XLAB2             ANOP  ,                                              00153300
                   AIF   ('&XMF' EQ 'L').XLAB3                          00153400
&M0M0001 DS    0H                             IWMSRSRS-1                00153500
.XLAB3             ANOP  ,                                              00153600
.*******************************************************************    00153700
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00153800
.*******************************************************************    00153900
              PUSH  PRINT                                               00154000
                   AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON     00154100
                   PRINT OFF         ++ PR01                            00154200
                   AGO   .ZPRNTXX                                       00154300
.ZPRINTX           PRINT ON                                             00154400
.ZPRNTXX           ANOP  ,                                              00154500
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00154600
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00154700
.********************************************************************   00154800
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00154900
.********************************************************************   00155000
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00155100
                      LCLA  &ZOPN1         INVOCATION INDEX             00155200
                      LCLC  &ZOPL(4095)    LABEL                        00155300
                      LCLC  &ZOPO(4095)    OPERATION                    00155400
                      LCLC  &ZOPV(4095)    VALUE                        00155500
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00155600
.*                                                                      00155700
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00155800
.******************************************************************     00155900
.***AL.L10 IWMSRSRS FMT=LIST MF=S|L PARAMETERS                          00156000
.******************************************************************     00156100
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     00156200
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     00156300
&XMFCTRL              SETC  '#Z'.'&SYSNDX'(1,4).'A'                     00156400
&XMFATTR              SETC  '0D'                                        00156500
.*                                                                      00156600
&ZOPN                 SETA  &ZOPN+1                                     00156700
&ZOPL(&ZOPN)          SETC  ' '                                         00156800
&ZOPO(&ZOPN)          SETC  'B'                                         00156900
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'                                00157000
&ZOPD(&ZOPN)          SETC  '++ IWMSRSRS ARG PARMS'                     00157100
.*                                                                      00157200
&ZOPN                 SETA  &ZOPN+1                                     00157300
&ZOPL(&ZOPN)          SETC  ' '                                         00157400
&ZOPO(&ZOPN)          SETC  'SPACE'                                     00157500
&ZOPV(&ZOPN)          SETC  '1'                                         00157600
&ZOPD(&ZOPN)          SETC  ' '                                         00157700
.*                                                                      00157800
.ZLMFSL2              ANOP  ,                                           00157900
.*-------------------------------------------------------------------   00158000
.***AM.L00  IWMSRSRS FMT=LIST name                                      00158100
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                    00158200
&ZOPN                 SETA &ZOPN+1                                      00158300
&ZOPL(&ZOPN)          SETC '&M0M0001'                                   00158400
&ZOPO(&ZOPN)          SETC 'EQU'                                        00158500
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                   00158600
&ZOPD(&ZOPN)          SETC '++ IWMSRSRS NAME'                           00158700
.ZLMFSL2M             ANOP  ,                                           00158800
.*-------------------------------------------------------------------   00158900
.***AM.L01  IWMSRSRS FMT=LIST PARAMETERS                                00159000
&ZOPN                 SETA &ZOPN+1                                      00159100
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00159200
&ZOPO(&ZOPN)          SETC 'DS'                                         00159300
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00159400
&ZOPD(&ZOPN)          SETC '++ IWMSRSRS PARM LIST'                      00159500
.*-------------------------------------------------------------------   00159600
.***AM.L02 XVERSION XL1                                                 00159700
&ZOPN                 SETA &ZOPN+1                                      00159800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00159900
&ZOPO(&ZOPN)          SETC 'DS'                                         00160000
&ZOPV(&ZOPN)          SETC 'XL1'                                        00160100
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00160200
.*-------------------------------------------------------------------   00160300
.***AM.L09  XRSV002 CL3                                                 00160400
&ZOPN                 SETA &ZOPN+1                                      00160500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV002'                          00160600
&ZOPO(&ZOPN)          SETC 'DS'                                         00160700
&ZOPV(&ZOPN)          SETC 'CL3'                                        00160800
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV002'                       00160900
.*-------------------------------------------------------------------   00161000
.***AM.L09  XSYSINFO_BLOCK A                                            00161100
&ZOPN                 SETA &ZOPN+1                                      00161200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSYSINFO_BLOCK'                   00161300
&ZOPO(&ZOPN)          SETC 'DS'                                         00161400
&ZOPV(&ZOPN)          SETC 'A'                                          00161500
&ZOPD(&ZOPN)          SETC '++ &ZXSYSINFO_BLOCK  XSYSINFO_BLOCK'        00161600
.*-------------------------------------------------------------------   00161700
.***AM.L09  XANSLEN F                                                   00161800
&ZOPN                 SETA &ZOPN+1                                      00161900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XANSLEN'                          00162000
&ZOPO(&ZOPN)          SETC 'DS'                                         00162100
&ZOPV(&ZOPN)          SETC 'F'                                          00162200
&ZOPD(&ZOPN)          SETC '++ &ZXANSLEN  XANSLEN'                      00162300
.*-------------------------------------------------------------------   00162400
.***AM.L09  XQUERYLEN F                                                 00162500
&ZOPN                 SETA &ZOPN+1                                      00162600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XQUERYLEN'                        00162700
&ZOPO(&ZOPN)          SETC 'DS'                                         00162800
&ZOPV(&ZOPN)          SETC 'F'                                          00162900
&ZOPD(&ZOPN)          SETC '++ &ZXQUERYLEN  XQUERYLEN'                  00163000
.*-------------------------------------------------------------------   00163100
.***AM.L09  XLOCATION CL18                                              00163200
&ZOPN                 SETA &ZOPN+1                                      00163300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XLOCATION'                        00163400
&ZOPO(&ZOPN)          SETC 'DS'                                         00163500
&ZOPV(&ZOPN)          SETC 'CL18'                                       00163600
&ZOPD(&ZOPN)          SETC '++ &ZXLOCATION  XLOCATION'                  00163700
.*-------------------------------------------------------------------   00163800
.***AM.L09  XRSV0022 CL2                                                00163900
&ZOPN                 SETA &ZOPN+1                                      00164000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0022'                         00164100
&ZOPO(&ZOPN)          SETC 'DS'                                         00164200
&ZOPV(&ZOPN)          SETC 'CL2'                                        00164300
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0022'                      00164400
.*-------------------------------------------------------------------   00164500
.***AM.MLM2 SAVED LOCATION COUNTER                                      00164600
                      AIF  (&XPLISTVER GE 1).ZL8LA                      00164700
                      AIF  ('&ZENDBASEPL' NE '').ZL8LA                  00164800
&ZENDBASEPL           SETC 'YES'                                        00164900
&ZOPN                 SETA &ZOPN+1                                      00165000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           00165100
&ZOPO(&ZOPN)          SETC 'EQU'                                        00165200
&ZOPV(&ZOPN)          SETC '*'                                          00165300
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       00165400
.ZL8LA                ANOP  ,                                           00165500
.*-------------------------------------------------------------------   00165600
.***AM.LVER1                                                            00165700
                      AIF  (&XPLISTVER LT 1).ZL8L                       00165800
.*-------------------------------------------------------------------   00165900
.*-------------------------------------------------------------------   00166000
.***AM.L09  XPLISTLEN XL2                                               00166100
&ZOPN                 SETA &ZOPN+1                                      00166200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'                        00166300
&ZOPO(&ZOPN)          SETC 'DS'                                         00166400
&ZOPV(&ZOPN)          SETC 'XL2'                                        00166500
&ZOPD(&ZOPN)          SETC '++ INPUT  XPLISTLEN'                        00166600
.*-------------------------------------------------------------------   00166700
.***AM.LVER2                                                            00166800
.ZL8L                 ANOP  ,                                           00166900
.*-------------------------------------------------------------------   00167000
.*-------------------------------------------------------------------   00167100
.***AM.LVER1                                                            00167200
                      AIF  (&XPLISTVER LT 1).ZL9L                       00167300
.*-------------------------------------------------------------------   00167400
.*-------------------------------------------------------------------   00167500
.***AM.L03 XSRS_OPTIONS BL.8                                            00167600
&ZOPN                 SETA &ZOPN+1                                      00167700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSRS_OPTIONS'                     00167800
&ZOPO(&ZOPN)          SETC 'DS'                                         00167900
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00168000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00168100
.*-------------------------------------------------------------------   00168200
.***AM.LVER2                                                            00168300
.ZL9L                 ANOP  ,                                           00168400
.*-------------------------------------------------------------------   00168500
.*-------------------------------------------------------------------   00168600
.***AM.LVER1                                                            00168700
                      AIF  (&XPLISTVER LT 1).ZL10L                      00168800
.*-------------------------------------------------------------------   00168900
.*                                                                      00169000
&ZOPN                 SETA  &ZOPN+1                                     00169100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XEXTENDED_DATA_YES'              00169200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00169300
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00169400
&ZOPD(&ZOPN)          SETC  '++ XEXTENDED_DATA.'                        00169500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          00169600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00169700
.*-------------------------------------------------------------------   00169800
.***AM.LVER2                                                            00169900
.ZL10L                ANOP  ,                                           00170000
.*-------------------------------------------------------------------   00170100
.*-------------------------------------------------------------------   00170200
.***AM.LVER1                                                            00170300
                      AIF  (&XPLISTVER LT 1).ZL11L                      00170400
.*-------------------------------------------------------------------   00170500
.*                                                                      00170600
&ZOPN                 SETA  &ZOPN+1                                     00170700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XFUNCTION_QUERY'                 00170800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00170900
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             00171000
&ZOPD(&ZOPN)          SETC  '++ XFUNCTION.'                             00171100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).QUERY'                        00171200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00171300
.*-------------------------------------------------------------------   00171400
.***AM.LVER2                                                            00171500
.ZL11L                ANOP  ,                                           00171600
.*-------------------------------------------------------------------   00171700
.*-------------------------------------------------------------------   00171800
.***AM.LVER1                                                            00171900
                      AIF  (&XPLISTVER LT 1).ZL12L                      00172000
.*-------------------------------------------------------------------   00172100
.*-------------------------------------------------------------------   00172200
.***AM.L09  XRSV0025 CL1                                                00172300
&ZOPN                 SETA &ZOPN+1                                      00172400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0025'                         00172500
&ZOPO(&ZOPN)          SETC 'DS'                                         00172600
&ZOPV(&ZOPN)          SETC 'CL1'                                        00172700
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0025'                      00172800
.*-------------------------------------------------------------------   00172900
.***AM.LVER2                                                            00173000
.ZL12L                ANOP  ,                                           00173100
.*-------------------------------------------------------------------   00173200
.*-------------------------------------------------------------------   00173300
.***AM.LVER1                                                            00173400
                      AIF  (&XPLISTVER LT 1).ZL13L                      00173500
.*-------------------------------------------------------------------   00173600
.*-------------------------------------------------------------------   00173700
.***AM.L09  XENTRY_COUNT F                                              00173800
&ZOPN                 SETA &ZOPN+1                                      00173900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XENTRY_COUNT'                     00174000
&ZOPO(&ZOPN)          SETC 'DS'                                         00174100
&ZOPV(&ZOPN)          SETC 'F'                                          00174200
&ZOPD(&ZOPN)          SETC '++ &ZXENTRY_COUNT  XENTRY_COUNT'            00174300
.*-------------------------------------------------------------------   00174400
.***AM.LVER2                                                            00174500
.ZL13L                ANOP  ,                                           00174600
.*-------------------------------------------------------------------   00174700
.*-------------------------------------------------------------------   00174800
.***AM.L10 END OF IWMSRSRS LIST PARAMETERS                              00174900
&ZOPN                 SETA &ZOPN+1                                      00175000
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00175100
&ZOPO(&ZOPN)          SETC 'EQU'                                        00175200
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00175300
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00175400
.*                                                                      00175500
&ZOPN                 SETA &ZOPN+1                                      00175600
&ZOPL(&ZOPN)          SETC ' '                                          00175700
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00175800
&ZOPV(&ZOPN)          SETC '1'                                          00175900
&ZOPD(&ZOPN)          SETC ' '                                          00176000
.*-------------------------------------------------------------------   00176100
.***AL.L12 IWMSRSRS FMT=LIST MF=S|L PARAMETERS                          00176200
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         00176300
.*                                                                      00176400
&ZOPN                 SETA  &ZOPN+1                                     00176500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                00176600
&ZOPO(&ZOPN)          SETC  'DC'                                        00176700
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   00176800
&ZOPD(&ZOPN)          SETC  '++ IWMSRSRS ARG PARMS'                     00176900
.*                                                                      00177000
.ZLMFSLX              ANOP  ,                                           00177100
.*-------------------------------------------------------------------   00177200
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00177300
&ZPLLEN               SETA 36                                           00177400
.*                                                                      00177500
                      AIF  (&XPLISTVER LT 1).ZLLEN2Z                    00177600
&ZPLLEN               SETA 44                                           00177700
.ZLLEN2Z              ANOP  ,                                           00177800
.*                                                                      00177900
.******************************************************************     00178000
.***AI.L01 IWMSRSRS FMT=LIST FILL IN PARAMETER AREA                     00178100
.******************************************************************     00178200
                      ACTR  10000                                       00178300
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00178400
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00178500
&ZCVAL                SETC  'LAE'          XAX MODE                     00178600
.ZIMFXA               ANOP ,                                            00178700
.*                                                                      00178800
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00178900
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00179000
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00179100
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00179200
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00179300
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00179400
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00179500
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00179600
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00179700
&ZOPN                 SETA  &ZOPN+1                                     00179800
&ZOPL(&ZOPN)          SETC  ' '                                         00179900
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00180000
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00180100
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00180200
                      AGO   .ZIMFNX                                     00180300
.*                                                                      00180400
.ZIMFN2               ANOP ,                                            00180500
&ZOPN                 SETA  &ZOPN+1                                     00180600
&ZOPL(&ZOPN)          SETC  ' '                                         00180700
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00180800
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00180900
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00181000
.ZIMFNX               ANOP ,                                            00181100
.********************************************************************   00181200
.***AI.L02 IWMSRSRS FMT=LIST INITIALIZE PARAMETER AREA                  00181300
.********************************************************************   00181400
.***AI.L03 MF=(SLE)                                                     00181500
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00181600
.*                                                                      00181700
&ZOPN                 SETA  &ZOPN+1                                     00181800
&ZOPL(&ZOPN)          SETC  ' '                                         00181900
&ZOPO(&ZOPN)          SETC  'XC'                                        00182000
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00182100
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00182200
.ZIMFLX               ANOP  ,                                           00182300
.*-------------------------------------------------------------------   00182400
.***AI.L04B XVERSION XL1                                                00182500
                      AIF   (&XPLISTVER EQ 0).ZIMFVZ                    00182600
&ZOPN                 SETA  &ZOPN+1                                     00182700
&ZOPL(&ZOPN)          SETC  ' '                                         00182800
&ZOPO(&ZOPN)          SETC  'MVI'                                       00182900
&ZOPV(&ZOPN)          SETC  '0(1),&XPLISTVER'                           00183000
&ZOPD(&ZOPN)          SETC  '++ INPUT XVERSION XL1'                     00183100
.ZIMFVZ               ANOP  ,                                           00183200
.*-------------------------------------------------------------------   00183300
.***AI.L19  XSYSINFO_BLOCK A                                            00183400
                      AIF   ('&ZXSYSINFO_BLOCK' EQ '').ZI3H             00183500
&ZCLNG                SETC  '&XSYSINFO_BLOCK'                           00183600
&ZCGPR                SETC  '14'                                        00183700
         AIF   ('&XSYSINFO_BLOCK'(1,1) EQ '(').ZI3F  IN GPR             00183800
.*                                                                      00183900
&ZOPN                 SETA  &ZOPN+1                                     00184000
&ZOPL(&ZOPN)          SETC  ' '                                         00184100
&ZOPO(&ZOPN)          SETC  'LA'                                        00184200
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00184300
&ZOPD(&ZOPN)          SETC  '++ &ZXSYSINFO_BLOCK XSYSINFO_BLOCK'        00184400
.*                                                                      00184500
                      AGO   .ZI3G                                       00184600
.*                                                                      00184700
.ZI3F                 ANOP  ,                                           00184800
&ZCGPR   SETC  '&XSYSINFO_BLOCK'(2,K'&XSYSINFO_BLOCK-2)                 00184900
.*                                                                      00185000
.ZI3G                 ANOP  ,                                           00185100
.*                                                                      00185200
&ZOPN                 SETA  &ZOPN+1                                     00185300
&ZOPL(&ZOPN)          SETC  ' '                                         00185400
&ZOPO(&ZOPN)          SETC  'ST'                                        00185500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4(,1)'                              00185600
&ZOPD(&ZOPN)          SETC  '++ &ZXSYSINFO_BLOCK XSYSINFO_BLOCK'        00185700
.*                                                                      00185800
.ZI3H                 ANOP  ,                                           00185900
.*-------------------------------------------------------------------   00186000
.***AI.L25  XANSLEN F                                                   00186100
                      AIF   ('&ZXANSLEN' EQ '').ZI4E                    00186200
                      AIF   ('&ZXANSLEN' EQ 'OUTPUT').ZI4E              00186300
&ZCGPR                SETC  '&XANSLEN'                                  00186400
.*                                                                      00186500
                      AIF   ('&XANSLEN'(1,1) NE '(').ZI4B               00186600
&ZCGPR   SETC  '0('.'&XANSLEN'(2,K'&XANSLEN-2).')'                      00186700
                      AGO   .ZI4D                                       00186800
.ZI4B                 ANOP  ,                                           00186900
.*                                                                      00187000
&ZC                   SETC  '&XANSLEN'(1,1)                             00187100
                      AIF   (T'&ZC NE 'N').ZI4D                         00187200
&ZC                   SETC  '&XANSLEN'                                  00187300
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI4D                00187400
&ZCGPR                SETC  '=FL4''&XANSLEN'''                          00187500
.*                                                                      00187600
.ZI4D                 ANOP  ,                                           00187700
.*                                                                      00187800
&ZOPN                 SETA  &ZOPN+1                                     00187900
&ZOPL(&ZOPN)          SETC  ' '                                         00188000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00188100
&ZOPV(&ZOPN)          SETC  '8(4,1),&ZCGPR'                             00188200
&ZOPD(&ZOPN)          SETC  '++ &ZXANSLEN XANSLEN'                      00188300
.*                                                                      00188400
.ZI4E                 ANOP  ,                                           00188500
.*-------------------------------------------------------------------   00188600
.***AI.L25  XLOCATION CL18                                              00188700
                      AIF   ('&ZXLOCATION' EQ '').ZI6E                  00188800
                      AIF   ('&ZXLOCATION' EQ 'OUTPUT').ZI6E            00188900
&ZCGPR                SETC  '&XLOCATION'                                00189000
.*                                                                      00189100
                      AIF   ('&XLOCATION'(1,1) NE '(').ZI6B             00189200
&ZCGPR   SETC  '0('.'&XLOCATION'(2,K'&XLOCATION-2).')'                  00189300
.ZI6B                 ANOP  ,                                           00189400
.*                                                                      00189500
&ZOPN                 SETA  &ZOPN+1                                     00189600
&ZOPL(&ZOPN)          SETC  ' '                                         00189700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00189800
&ZOPV(&ZOPN)          SETC  '16(18,1),&ZCGPR'                           00189900
&ZOPD(&ZOPN)          SETC  '++ &ZXLOCATION XLOCATION'                  00190000
.*                                                                      00190100
.ZI6E                 ANOP  ,                                           00190200
.*-------------------------------------------------------------------   00190300
.***AI.LVER01                                                           00190400
                      AIF  (&XPLISTVER LT 1).ZI8Z                       00190500
.*-------------------------------------------------------------------   00190600
.***AI.L04 XPLISTLEN XL2                                                00190700
&ZOPN                 SETA  &ZOPN+1                                     00190800
&ZOPL(&ZOPN)          SETC  ' '                                         00190900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00191000
&ZOPV(&ZOPN)          SETC  '36(2,1),=AL2(&ZPLLEN)'                     00191100
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'                    00191200
.*-------------------------------------------------------------------   00191300
.***AI.LVER02                                                           00191400
.ZI8Z                 ANOP  ,                                           00191500
.*-------------------------------------------------------------------   00191600
.***AI.LVER01                                                           00191700
                      AIF  (&XPLISTVER LT 1).ZI9Z                       00191800
.*-------------------------------------------------------------------   00191900
.***AI.L05 XSRS_OPTIONS BL1                                             00192000
&ZW                   SETC  ''                                          00192100
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00192200
.*-------------------------------------------------------------------   00192300
.***AI.LVER02                                                           00192400
.ZI9Z                 ANOP  ,                                           00192500
.*-------------------------------------------------------------------   00192600
.***AI.LVER01                                                           00192700
                      AIF  (&XPLISTVER LT 1).ZI10Z                      00192800
.*-------------------------------------------------------------------   00192900
.***AI.L08 XSRS_OPTIONS "YES"                                           00193000
.***      BL1'1XXXXXXX'                                                 00193100
         AIF   ('&XEXTENDED_DATA' NE 'YES').ZI10A                       00193200
&ZW                   SETC  '&ZW.1'                                     00193300
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00193400
                      AGO   .ZI10C                                      00193500
.*                                                                      00193600
.ZI10A                ANOP  ,                                           00193700
&ZW                   SETC  '&ZW.0'                                     00193800
.ZI10C                ANOP  ,                                           00193900
.*-------------------------------------------------------------------   00194000
.***AI.LVER02                                                           00194100
.ZI10Z                ANOP  ,                                           00194200
.*-------------------------------------------------------------------   00194300
.***AI.LVER01                                                           00194400
                      AIF  (&XPLISTVER LT 1).ZI11Z                      00194500
.*-------------------------------------------------------------------   00194600
.***AI.L08 XSRS_OPTIONS "QUERY"                                         00194700
.***      BL1'X1XXXXXX'                                                 00194800
         AIF   ('&XFUNCTION' NE 'QUERY').ZI11A                          00194900
&ZW                   SETC  '&ZW.1000000'                               00195000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00195100
                      AGO   .ZI11C                                      00195200
.*                                                                      00195300
.ZI11A                ANOP  ,                                           00195400
&ZW                   SETC  '&ZW.0000000'                               00195500
.ZI11C                ANOP  ,                                           00195600
.*-------------------------------------------------------------------   00195700
.***AI.L11 XSRS_OPTIONS BL1                                             00195800
                      AIF   ('&ZCLNG' NE 'YES').ZI11E  ALL ZERO BITS    00195900
&ZOPN                 SETA  &ZOPN+1                                     00196000
&ZOPL(&ZOPN)          SETC  ' '                                         00196100
&ZOPO(&ZOPN)          SETC  'OI'                                        00196200
&ZOPV(&ZOPN)          SETC  '38(1),B''&ZW'''                            00196300
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00196400
.ZI11E                ANOP  ,                                           00196500
.*-------------------------------------------------------------------   00196600
.***AI.LVER02                                                           00196700
.ZI11Z                ANOP  ,                                           00196800
.*-------------------------------------------------------------------   00196900
.***AI.LVER01                                                           00197000
                      AIF  (&XPLISTVER LT 1).ZI12Z                      00197100
.*-------------------------------------------------------------------   00197200
.***AI.LVER02                                                           00197300
.ZI12Z                ANOP  ,                                           00197400
.*-------------------------------------------------------------------   00197500
&ZOPN1                SETA &ZOPN                                        00197600
.*******************************************************************    00197700
.***  PROCESS IWMSRSRS OUTPUT PARAMETERS                                00197800
.*******************************************************************    00197900
                      ACTR  10000                                       00198000
.*------------------------------------------------------------------    00198100
.***AO.L02 XQUERYLEN F                                                  00198200
         AIF   ('&ZXQUERYLEN' EQ 'OUTPUT').ZO5A  OUTPUT                 00198300
         AIF   ('&ZXQUERYLEN' NE 'INOUT').ZO5C  INOUT                   00198400
.ZO5A    AIF   ('&XQUERYLEN'(1,1) NE '(').ZO5B  ADDR IN GPR             00198500
&ZCGPR   SETC  '&XQUERYLEN'(2,K'&XQUERYLEN-2)                           00198600
&ZOPN                 SETA  &ZOPN+1                                     00198700
&ZOPL(&ZOPN)          SETC  ' '                                         00198800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00198900
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),12(1)'                         00199000
&ZOPD(&ZOPN)          SETC  '++ XQUERYLEN F'                            00199100
                      AGO   .ZO5C                                       00199200
.*                                                                      00199300
.ZO5B                 ANOP  ,                                           00199400
&ZAWRK   SETA  K'&XQUERYLEN                                             00199500
         AIF   ('&XQUERYLEN'(&ZAWRK,1) NE ')').ZO5G                     00199600
&ZN      SETA  2                                                        00199700
.ZO5H    ANOP                                                           00199800
         AIF   (&ZN GE &ZAWRK).ZO5G                                     00199900
         AIF   ('&XQUERYLEN'(&ZN,1) NE '(').ZO5I                        00200000
&ZC      SETC  '&XQUERYLEN'(1,&ZN).'4'.','                              00200100
&ZC      SETC  '&ZC'.'&XQUERYLEN'(&ZN+1,&ZAWRK-&ZN).',12(1)'            00200200
         AGO   .ZO5J                                                    00200300
.ZO5I    ANOP                                                           00200400
&ZN      SETA  &ZN+1                                                    00200500
         AGO   .ZO5H                                                    00200600
.ZO5G    ANOP                                                           00200700
&ZC      SETC  '&XQUERYLEN.(4),12(1)'                                   00200800
.ZO5J    ANOP                                                           00200900
&ZOPN                 SETA  &ZOPN+1                                     00201000
&ZOPL(&ZOPN)          SETC  ' '                                         00201100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00201200
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00201300
&ZOPD(&ZOPN)          SETC  '++ XQUERYLEN F'                            00201400
.ZO5C                 ANOP  ,                                           00201500
.*------------------------------------------------------------------    00201600
.***AO.LVER01                                                           00201700
                      AIF  (&XPLISTVER LT 1).ZO13Z  PLVER               00201800
.*------------------------------------------------------------------    00201900
.***AO.L02 XENTRY_COUNT F                                               00202000
         AIF   ('&ZXENTRY_COUNT' EQ 'OUTPUT').ZO13A  OUTPUT             00202100
         AIF   ('&ZXENTRY_COUNT' NE 'INOUT').ZO13C  INOUT               00202200
.ZO13A    AIF   ('&XENTRY_COUNT'(1,1) NE '(').ZO13B  ADDR IN GPR        00202300
&ZCGPR   SETC  '&XENTRY_COUNT'(2,K'&XENTRY_COUNT-2)                     00202400
&ZOPN                 SETA  &ZOPN+1                                     00202500
&ZOPL(&ZOPN)          SETC  ' '                                         00202600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00202700
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),40(1)'                         00202800
&ZOPD(&ZOPN)          SETC  '++ XENTRY_COUNT F'                         00202900
                      AGO   .ZO13C                                      00203000
.*                                                                      00203100
.ZO13B                ANOP  ,                                           00203200
&ZAWRK   SETA  K'&XENTRY_COUNT                                          00203300
         AIF   ('&XENTRY_COUNT'(&ZAWRK,1) NE ')').ZO13G                 00203400
&ZN      SETA  2                                                        00203500
.ZO13H    ANOP                                                          00203600
         AIF   (&ZN GE &ZAWRK).ZO13G                                    00203700
         AIF   ('&XENTRY_COUNT'(&ZN,1) NE '(').ZO13I                    00203800
&ZC      SETC  '&XENTRY_COUNT'(1,&ZN).'4'.','                           00203900
&ZC      SETC  '&ZC'.'&XENTRY_COUNT'(&ZN+1,&ZAWRK-&ZN).',40(1)'         00204000
         AGO   .ZO13J                                                   00204100
.ZO13I    ANOP                                                          00204200
&ZN      SETA  &ZN+1                                                    00204300
         AGO   .ZO13H                                                   00204400
.ZO13G    ANOP                                                          00204500
&ZC      SETC  '&XENTRY_COUNT.(4),40(1)'                                00204600
.ZO13J    ANOP                                                          00204700
&ZOPN                 SETA  &ZOPN+1                                     00204800
&ZOPL(&ZOPN)          SETC  ' '                                         00204900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00205000
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00205100
&ZOPD(&ZOPN)          SETC  '++ XENTRY_COUNT F'                         00205200
.ZO13C                ANOP  ,                                           00205300
.*------------------------------------------------------------------    00205400
.***AO.LVER02                                                           00205500
.ZO13Z                ANOP  ,                                           00205600
.*******************************************************************    00205700
.***AO.X02  RETURN CODE PROCESSING                                      00205800
.*******************************************************************    00205900
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00206000
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00206100
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00206200
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00206300
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00206400
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00206500
&ZOPN                 SETA  &ZOPN+1                                     00206600
&ZOPL(&ZOPN)          SETC  ' '                                         00206700
&ZOPO(&ZOPN)          SETC  'ST'                                        00206800
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00206900
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00207000
                      AGO   .ZMRETX                                     00207100
.*                                                                      00207200
.ZMRET2               ANOP  ,                                           00207300
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00207400
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00207500
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00207600
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00207700
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00207800
&ZOPN                 SETA  &ZOPN+1                                     00207900
&ZOPL(&ZOPN)          SETC  ' '                                         00208000
&ZOPO(&ZOPN)          SETC  'LR'                                        00208100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00208200
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00208300
.ZMRETX               ANOP  ,                                           00208400
.*******************************************************************    00208500
.***AO.X03  REASON CODE PROCESSING                                      00208600
.*******************************************************************    00208700
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    00208800
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            00208900
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              00209000
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             00209100
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              00209200
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             00209300
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                00209400
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 00209500
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                00209600
&ZOPN                 SETA  &ZOPN+1                                     00209700
&ZOPL(&ZOPN)          SETC  ' '                                         00209800
&ZOPO(&ZOPN)          SETC  'ST'                                        00209900
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               00210000
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00210100
                      AGO   .ZMRSNX                                     00210200
.*                                                                      00210300
.ZMRSN2               ANOP  ,                                           00210400
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                00210500
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 00210600
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                00210700
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 00210800
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                00210900
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   00211000
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    00211100
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   00211200
&ZOPN                 SETA  &ZOPN+1                                     00211300
&ZOPL(&ZOPN)          SETC  ' '                                         00211400
&ZOPO(&ZOPN)          SETC  'LR'                                        00211500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  00211600
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00211700
.ZMRSNX               ANOP  ,                                           00211800
.*******************************************************************    00211900
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00212000
.*******************************************************************    00212100
.ZMFLX                ANOP  ,              MF=L PROCESSING              00212200
.*******************************************************************    00212300
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00212400
.*******************************************************************    00212500
                      ACTR  10000                                       00212600
.*                                                                      00212700
                      LCLA  &ZLC           COLUMN POSITION              00212800
                      LCLA  &ZOPX          LIST TABLE INDEX             00212900
                      LCLC  &ZLL           LABEL                        00213000
                      LCLC  &ZLOP          OPERATION                    00213100
                      LCLC  &ZLV           VALUE                        00213200
                      LCLC  &ZLD           DESCRIPTION                  00213300
.*                                                                      00213400
&ZOPX                 SETA  1                                           00213500
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00213600
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00213700
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00213800
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00213900
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00214000
                      AIF   (K'&ZLD LE 0).ZL5                           00214100
&ZLC                  SETA  35             COMMENT COLUMN               00214200
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00214300
&ZLC                  SETA  33             COMMMENT COLUMN              00214400
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00214500
&ZLV                  SETC  '&ZLV'.' '                                  00214600
                      AGO   .ZL3                                        00214700
.*                                                                      00214800
.ZL4                  ANOP  ,                                           00214900
&ZLV                  SETC  '&ZLV'.' '                                  00215000
.ZL5                  ANOP  ,                                           00215100
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00215200
.*                                                                      00215300
&ZLL     &ZLOP &ZLV                                                     00215400
.*                                                                      00215500
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00215600
                      AGO   .ZL2           CONTINUE LOOPING             00215700
.*                                                                      00215800
.ZLX                  ANOP  ,                                           00215900
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00216000
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00216100
         L     14,16(0,0)              GET CVT ADDRESS                  00216200
         L     14,772(14,0)            GET SFT ADDRESS                  00216300
         L     14,380(14,0)            GET LX FOR SERVICE ROUTINE       00216400
         LA    15,30                   GET EX FOR SERVICE ROUTINE       00216500
         OR    14,15                   GET PC NUMBER                    00216600
         PC    0(14)                                                    00216700
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00216800
.ZLINKX               ANOP  ,                                           00216900
.*******************************************************************    00217000
.***AP.X01  FORMAT GENERATED CODE                                       00217100
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00217200
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00217300
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00217400
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00217500
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00217600
                      AIF   (K'&ZLD LE 0).ZL51                          00217700
&ZLC                  SETA  35             COMMENT COLUMN               00217800
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00217900
&ZLC                  SETA  33             COMMENT COLUMN               00218000
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00218100
&ZLV                  SETC  '&ZLV'.' '                                  00218200
                      AGO   .ZL31                                       00218300
.*                                                                      00218400
.ZL41                 ANOP  ,                                           00218500
&ZLV                  SETC  '&ZLV'.' '                                  00218600
.ZL51                 ANOP  ,                                           00218700
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00218800
.*                                                                      00218900
&ZLL     &ZLOP &ZLV                                                     00219000
.*                                                                      00219100
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00219200
                      AGO   .ZL21          CONTINUE LOOPING             00219300
.*                                                                      00219400
.ZLX1                 ANOP  ,                                           00219500
.*******************************************************************    00219600
.***AP.X02  END OF IWMSRSRS MACRO                                       00219700
&ZIWMSRSRS            SETC  'YES'          SET IWMSRSRS USED            00219800
         POP   PRINT                                                    00219900
*                                            IWMSRSRS-1                 00220000
         SPACE 1                                                        00220100
.ZLX2                 ANOP  ,                                           00220200
         MEND                                                           00220300
**********************************************************************/ 00220400
*/**** START OF SPECIFICATIONS **************************************** 00220500
*                                                                     * 00220600
*                                                                     * 00220700
*01* MACRO NAME:  IWMSRSRS                              -01/14/97-<1> * 00220800
*                                                                     * 00220900
*                                                                     * 00221000
*01* DESCRIPTIVE NAME:  Sysplex Routing Information                   * 00221100
*                                                                     * 00221200
*01* PROPRIETARY STATEMENT:                                           * 00221300
*                                                                     * 00221400
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00221500
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00221600
*     5645-001 (C) COPYRIGHT IBM CORP. 1994, 1997                     * 00221700
*                                                                     * 00221800
* STATUS= HBB6603                                                     * 00221900
*                                                                     * 00222000
*                                                                     * 00222100
*                                                                     * 00222200
*01* FUNCTION:                                                        * 00222300
*       See the IWMSRSRS macro prologue for details.                  * 00222400
*                                                                     * 00222500
*01* INPUT:                                                           * 00222600
*                                                                     * 00222700
*            ?IWMSRSRS     SYSINFO_BLOCK                              * 00222800
*                                        (xsysinfo_block)             * 00222900
*                        [EXTENDED_DATA(NO)]                         * 00223000
*                        [EXTENDED_DATA(YES)]                        * 00223100
*                          ANSLEN(xanslen)                            * 00223200
*                         [ENTRY_COUNT(xentry_count)]                 * 00223300
*                          QUERYLEN(xquerylen)                        * 00223400
*                          LOCATION(xlocation)                        * 00223500
*                        [FUNCTION(SELECT)]                          * 00223600
*                        [FUNCTION(QUERY)]                           * 00223700
*                         [RETCODE(xretcode)]                         * 00223800
*                         [RSNCODE(xrsncode)]                         * 00223900
*                         [PLISTVER(xplistver|IMPLIED_VERSION)]     * 00224000
*                        [MF(S)]                                     * 00224100
*                        [MF(L,xmfctrl,xmfattr|BDY(DWORD))]        * 00224200
*                        [MF(E,xmfctrl,COMPLETE)]                  * 00224300
*                                                                     * 00224400
****** END OF SPECIFICATIONS *****************************************/ 00224500
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 00224600
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                00224700
*  ANS('/* ? IWMSRSRS '||MACLIST||' ')                                  00224800
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00224900
*                                                                       00225000
*  DCL ZELO  FIXED;                                                     00225100
*  DCL ZECOL FIXED;                                                     00225200
*                                                                       00225300
*  ZELO=1;     /* STARTING COLUMN */                                    00225400
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00225500
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    00225600
*    IF ZECOL>0                                                         00225700
*      THEN                                                             00225800
*        DO;   /* PARENTHESIS FOUND */                                  00225900
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)||' ')                         00226000
*             NORESCAN COL(MACLMAR+5);                                  00226100
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   00226200
*        END;                                                           00226300
*      ELSE                                                             00226400
*        DO;   /* REMAINING KEYS */                                     00226500
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           00226600
*             NORESCAN COL(MACLMAR+5);                                  00226700
*          ZELO=LENGTH(MACKEYS)+1;                                      00226800
*        END;                                                           00226900
*  END;                                                                 00227000
*  ANS(' -01/14/97-1- */')                                              00227100
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00227200
*/********************************************************************/ 00227300
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00227400
*/********************************************************************/ 00227500
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00227600
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00227700
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00227800
*                                                                       00227900
*  DCL   ZIWMSRSRS CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */ 00228000
*  DEACT ZIWMSRSRS;                                                     00228100
*                                                                       00228200
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00228300
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00228400
*                                                                       00228500
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00228600
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00228700
*                                                                       00228800
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00228900
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00229000
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00229100
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00229200
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00229300
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00229400
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00229500
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00229600
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00229700
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00229800
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00229900
*                                                                       00230000
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00230100
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00230200
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00230300
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00230400
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00230500
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00230600
*/*******************************************************************/  00230700
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00230800
*/*******************************************************************/  00230900
*  DCL   XSYSINFO_BLOCK;           /***PV.XVAR03 INPUT NAME */          00231000
*  DEACT XSYSINFO_BLOCK;           /***PV.XVAR03 INPUT NAME */          00231100
*  DCL   ZXSYSINFO_BLOCK;          /***INPUT/OUTPUT CONTROL */          00231200
*  DEACT ZXSYSINFO_BLOCK;          /***INPUT/OUTPUT CONTROL */          00231300
*  DCL   XEXTENDED_DATA;           /***PV.XVAR03 INPUT VALUE */         00231400
*  DEACT XEXTENDED_DATA;           /***PV.XVAR03 INPUT VALUE */         00231500
*  DCL   ZXEXTENDED_DATA;          /***INPUT/OUTPUT CONTROL */          00231600
*  DEACT ZXEXTENDED_DATA;          /***INPUT/OUTPUT CONTROL */          00231700
*  DCL XANSLEN;  DEACT XANSLEN;    /***PV.XVAR02 INPUT NAME */          00231800
*  DCL ZXANSLEN; DEACT ZXANSLEN;   /***INPUT/OUTPUT CONTROL */          00231900
*  DCL   XENTRY_COUNT;             /***PV.XVAR03 OUTPUT NAME */         00232000
*  DEACT XENTRY_COUNT;             /***PV.XVAR03 OUTPUT NAME */         00232100
*  DCL   ZXENTRY_COUNT;            /***INPUT/OUTPUT CONTROL */          00232200
*  DEACT ZXENTRY_COUNT;            /***INPUT/OUTPUT CONTROL */          00232300
*  DCL XQUERYLEN;  DEACT XQUERYLEN;  /***PV.XVAR02 OUTPUT NAME */       00232400
*  DCL ZXQUERYLEN; DEACT ZXQUERYLEN;  /***INPUT/OUTPUT CONTROL */       00232500
*  DCL XLOCATION;  DEACT XLOCATION;  /***PV.XVAR02 INPUT NAME */        00232600
*  DCL ZXLOCATION; DEACT ZXLOCATION;  /***INPUT/OUTPUT CONTROL */       00232700
*  DCL XFUNCTION;  DEACT XFUNCTION;  /***PV.XVAR02 INPUT VALUE */       00232800
*  DCL ZXFUNCTION; DEACT ZXFUNCTION;  /***INPUT/OUTPUT CONTROL */       00232900
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00233000
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00233100
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         00233200
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         00233300
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00233400
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00233500
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00233600
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00233700
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00233800
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00233900
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00234000
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00234100
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00234200
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00234300
*/********************************************************************/ 00234400
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00234500
*/********************************************************************/ 00234600
*  IF TRANSLATE(PLISTVER(1)) = 'MAX' THEN                               00234700
*    XPLISTVER=1;                                                       00234800
*  ELSE                                                                 00234900
*    XPLISTVER=0;                                                       00235000
*  IF EXTENDED_DATA^='' & XPLISTVER<1                                   00235100
*    THEN                                                               00235200
*      XPLISTVER=1;                                                     00235300
*  IF ENTRY_COUNT^='' & XPLISTVER<1                                     00235400
*    THEN                                                               00235500
*      XPLISTVER=1;                                                     00235600
*  IF FUNCTION^='' & XPLISTVER<1                                        00235700
*    THEN                                                               00235800
*      XPLISTVER=1;                                                     00235900
*  IF PLISTVER^=''                                                      00236000
*     & TRANSLATE(PLISTVER(1))^='IMPLIED_VERSION'                       00236100
*     & TRANSLATE(PLISTVER(1))^='MAX'                                   00236200
*    THEN                                                               00236300
*      DO;                                                              00236400
*                                                                       00236500
*        ZCVAL='';                           /* ERROR FLAG */           00236600
*        IF PLISTVER='PLISTVER' | PLISTVER='()'  /*CHECK ENTRY*/        00236700
*          THEN                                                         00236800
*            DO;                                                        00236900
*              ZMS=' 8, THE "PLISTVER" KEY'|| /**KOPTP* MSG*/           00237000
*                  ' MUST CONTAIN ONE'||                                00237100
*                  ' (OR MORE) ARGUMENT(S).';                           00237200
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00237300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00237400
*              ZMACRET=8;                    /* MACRO ERROR */          00237500
*              ZCVAL='NO_ARGUMENT';                                     00237600
*            END;                                                       00237700
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00237800
*          THEN                                                         00237900
*            DO;                                                        00238000
*              ZMS=' 8, "PLISTVER'||         /**KPOSP* MSG*/            00238100
*                  PLISTVER||                                           00238200
*                  '" "PLISTVER"'||                                     00238300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00238400
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00238500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00238600
*              ZMACRET=8;                    /* MACRO ERROR */          00238700
*            END;                                                       00238800
*                                                                       00238900
*        ZC=PLISTVER(1);                                                00239000
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00239100
*          IF ZC(ZL:ZL)<'0' |                /* MUST BE NUMERIC */      00239200
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00239300
*            THEN                                                       00239400
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00239500
*        END;                                                           00239600
*        IF ZCVAL=''                                                    00239700
*          THEN                                                         00239800
*            DO;                             /* CHECK RANGE LIMITS */   00239900
*            IF FIXED(PLISTVER(1))>=XPLISTVER                           00240000
*              THEN                                                     00240100
*                XPLISTVER=FIXED(PLISTVER(1));                          00240200
*              ELSE                                                     00240300
*                DO;                                                    00240400
*              ZMS=' 8, PLISTVER='||         /**KVALP* MSG*/            00240500
*                    PLISTVER(1)||                                      00240600
*                  ', BUT PLISTVER OF '||                               00240700
*                    CHAR(XPLISTVER)||                                  00240800
*                  ' IS REQUIRED.';                                     00240900
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00241000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00241100
*              ZMACRET=8;                    /* MACRO ERROR */          00241200
*                END;                                                   00241300
*              IF XPLISTVER<0 |              /* LOW LIMIT */            00241400
*                 XPLISTVER>1                /* HIGH LIMIT */           00241500
*                THEN                                                   00241600
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00241700
*            END;                                                       00241800
*        IF ZCVAL^=''                                                   00241900
*          THEN                                                         00242000
*            DO;                             /* RANGE ERROR */          00242100
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00242200
*              ZMS=' 8, "PLISTVER '||        /**KRNGP* MSG*/            00242300
*                  PLISTVER||                                           00242400
*                  '" THE RANGE IS "0-1"'||                             00242500
*                  ' FOR ARGUMENT 1.';                                  00242600
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00242700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00242800
*              ZMACRET=8;                    /* MACRO ERROR */          00242900
*            END;                                                       00243000
*      END;                                                             00243100
*                                                                       00243200
*/********************************************************************/ 00243300
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00243400
*/********************************************************************/ 00243500
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00243600
*  XMF='';                                                              00243700
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00243800
*  IF TRANSLATE(MF(1))                                                  00243900
*              = 'S'                         /* CHECK FOR KEYWORD */    00244000
*    THEN                                                               00244100
*      DO;                                                              00244200
*        XMF='S';                            /* SET XVARIABLE */        00244300
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    00244400
*          THEN                                                         00244500
*            DO;                                                        00244600
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00244700
*                  MF||                                                 00244800
*                  '" "MF"'||                                           00244900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00245000
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00245100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00245200
*              ZMACRET=8;                    /* MACRO ERROR */          00245300
*            END;                                                       00245400
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00245500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00245600
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00245700
*  IF TRANSLATE(MF(1))                                                  00245800
*              = 'L'                         /* CHECK FOR KEYWORD */    00245900
*    THEN                                                               00246000
*      DO;                                                              00246100
*        XMF='L';                            /* SET XVARIABLE */        00246200
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00246300
*          THEN                                                         00246400
*            DO;                                                        00246500
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00246600
*                  MF||                                                 00246700
*                  '" "MF"'||                                           00246800
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00246900
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00247000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00247100
*              ZMACRET=8;                    /* MACRO ERROR */          00247200
*            END;                                                       00247300
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00247400
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00247500
*        IF PLISTVER ^= ''                                              00247600
*          THEN                                                         00247700
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00247800
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN |                            00247900
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00248000
*          THEN                                                         00248100
*            DO;                                                        00248200
*              ZMS=' 8, THE "L" FORM OF "MF"'|| /**MFLP* MSG*/          00248300
*                  ' CAN ONLY HAVE'||                                   00248400
*                  ' THE "PLISTVER" KEY'||                              00248500
*                  ' SPECIFIED ON THE INVOCATION.';                     00248600
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00248700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00248800
*              ZMACRET=8;                    /* MACRO ERROR */          00248900
*            END;                                                       00249000
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00249100
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00249200
*  IF MF(2)=''                               /* CHECK FOR NULL */       00249300
*   THEN                                                                00249400
*    DO;                                     /* KEY IS REQUIRED */      00249500
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00249600
*        ZMS=' 8, WHEN "L" IS SPECIFIED'||                              00249700
*            ' FOR THE "MF" KEY, POSITIONAL'||                          00249800
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00249900
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00250000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00250100
*        ZMACRET=8;                          /* MACRO ERROR */          00250200
*    END;                                                               00250300
*  ELSE                                                                 00250400
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00250500
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00250600
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00250700
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00250800
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00250900
*    THEN                                                               00251000
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00251100
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00251200
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00251300
*     LENGTH(XMFATTR)>60                                                00251400
*    THEN                                                               00251500
*      DO;                                                              00251600
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00251700
*        ZMS=' 8, "MF'||                     /**KLNGP* MSG*/            00251800
*            MF||                                                       00251900
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'||                       00252000
*            ' LENGTH OF 60 CHARACTERS. ';                              00252100
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00252200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00252300
*        ZMACRET=8;                          /* MACRO ERROR */          00252400
*      END;                                                             00252500
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00252600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00252700
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00252800
*  IF TRANSLATE(MF(1))                                                  00252900
*              = 'E'                         /* CHECK FOR KEYWORD */    00253000
*    THEN                                                               00253100
*      DO;                                                              00253200
*        XMF='E';                            /* SET XVARIABLE */        00253300
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00253400
*          THEN                                                         00253500
*            DO;                                                        00253600
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00253700
*                  MF||                                                 00253800
*                  '" "MF"'||                                           00253900
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00254000
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00254100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00254200
*              ZMACRET=8;                    /* MACRO ERROR */          00254300
*            END;                                                       00254400
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00254500
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00254600
*  IF MF(2)=''                               /* CHECK FOR NULL */       00254700
*   THEN                                                                00254800
*    DO;                                     /* KEY IS REQUIRED */      00254900
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00255000
*        ZMS=' 8, WHEN "E" IS SPECIFIED'||                              00255100
*            ' FOR THE "MF" KEY, POSITIONAL'||                          00255200
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00255300
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00255400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00255500
*        ZMACRET=8;                          /* MACRO ERROR */          00255600
*    END;                                                               00255700
*  ELSE                                                                 00255800
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00255900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00256000
*  XMFSCK='';                                /* RESET XVARIABLE */      00256100
*  IF TRANSLATE(MF(3))                                                  00256200
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */    00256300
*    THEN                                                               00256400
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00256500
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00256600
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00256700
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00256800
*    THEN                                                               00256900
*      DO;                                   /* KEYWORD NOT ENTERED */  00257000
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00257100
*        IF MF(3)^=''                                                   00257200
*          THEN                                                         00257300
*            DO;                                                        00257400
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00257500
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/            00257600
*                  MF||'"'||                                            00257700
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '||              00257800
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00257900
*                  ' "COMPLETE".';           /* VALID KEYWORD */        00258000
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00258100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00258200
*              ZMACRET=8;                    /* MACRO ERROR */          00258300
*            END;                                                       00258400
*      END;                                                             00258500
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00258600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00258700
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00258800
*  IF MF='MF'                                                           00258900
*    | MF='()'                               /*CHECK ENTRY*/            00259000
*     THEN                                                              00259100
*       DO;                                                             00259200
*              ZMS=' 8, THE "MF" KEY'||      /**KOPTP* MSG*/            00259300
*                  ' MUST CONTAIN ONE'||                                00259400
*                  ' (OR MORE) ARGUMENT(S).';                           00259500
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00259600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00259700
*              ZMACRET=8;                    /* MACRO ERROR */          00259800
*       END;                                                            00259900
*  ELSE                                                                 00260000
*    DO;                                                                00260100
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00260200
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00260300
*        THEN                                                           00260400
*          DO;                               /* KEYWORD NOT ENTERED */  00260500
*            XMF='S';                        /* SET DEFAULT */          00260600
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    00260700
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00260800
*              THEN                                                     00260900
*                DO;                                                    00261000
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00261100
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/            00261200
*                  MF||'"'||                                            00261300
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00261400
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00261500
*                  ' "S",'||                 /* VALID KEYWORD */        00261600
*                  ' "L",'||                 /* VALID KEYWORD */        00261700
*                  ' OR "E".';               /* VALID KEYWORD */        00261800
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00261900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00262000
*              ZMACRET=8;                    /* MACRO ERROR */          00262100
*                END;                                                   00262200
*          END;                                                         00262300
*    END;                                                               00262400
*/********************************************************************/ 00262500
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00262600
*/********************************************************************/ 00262700
*  IF PLISTVER=''                                                       00262800
*     | PLISTVER(1)='IMPLIED_VERSION'                                   00262900
*    THEN                                                               00263000
*      ZC='ON';                              /* DEFAULT FLAG ON */      00263100
*    ELSE                                                               00263200
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00263300
*/********************************************************************/ 00263400
*/***PD.P02 DEFAULT ECHO                                             */ 00263500
*/********************************************************************/ 00263600
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00263700
*  IF XMF^='L'                                                          00263800
*    THEN                                                               00263900
*      DO;                                   /* FULL SYNTAX CHECK */    00264000
*        ANS('/*DEFAULT(S): */')                                        00264100
*           NORESCAN COL(MACLMAR+5);                                    00264200
*/*PD.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00264300
*  IF XPLISTVER>=1                                                      00264400
*    THEN                                                               00264500
*      DO;                                                              00264600
*  IF EXTENDED_DATA(1)=''                                               00264700
*    THEN                                                               00264800
*      DO;                                                              00264900
*        ANS('/*EXTENDED_DATA(NO)*/')                                   00265000
*            NORESCAN COL(MACLMAR+5);                                   00265100
*        ZC='ON';                            /* DEFAULT FLAG ON */      00265200
*      END;                                                             00265300
*      END;                                                             00265400
*/*PD.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00265500
*  IF XPLISTVER>=1                                                      00265600
*    THEN                                                               00265700
*      DO;                                                              00265800
*  IF FUNCTION(1)=''                                                    00265900
*    THEN                                                               00266000
*      DO;                                                              00266100
*        ANS('/*FUNCTION(SELECT)*/')                                    00266200
*            NORESCAN COL(MACLMAR+5);                                   00266300
*        ZC='ON';                            /* DEFAULT FLAG ON */      00266400
*      END;                                                             00266500
*      END;                                                             00266600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00266700
*  IF PLISTVER=''                                                       00266800
*    THEN                                                               00266900
*      ANS('/* PLISTVER('||                                             00267000
*          CHAR(XPLISTVER)||                                            00267100
*          ')*/')                                                       00267200
*          NORESCAN COL(MACLMAR+5);                                     00267300
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00267400
*    THEN                                                               00267500
*      ANS('/* NONE. */')                                               00267600
*         NORESCAN COL(MACLMAR+5);                                      00267700
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00267800
*      END;                                                             00267900
*/********************************************************************/ 00268000
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00268100
*/********************************************************************/ 00268200
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00268300
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00268400
*                                                                       00268500
*  IF SYSASCE=''                                                        00268600
*    THEN                                                               00268700
*      DO;                                                              00268800
*        IF SYSSPLV=''                                                  00268900
*          THEN                                                         00269000
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00269100
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00269200
*          THEN                                                         00269300
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00269400
*          ELSE                                                         00269500
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00269600
*      END;                                                             00269700
*/********************************************************************/ 00269800
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00269900
*/********************************************************************/ 00270000
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00270100
*  IF XMF^='L'                                                          00270200
*    THEN                                                               00270300
*      DO;                                   /* FULL SYNTAX CHECK */    00270400
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00270500
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00270600
*    THEN                                                               00270700
*      DO;                                                              00270800
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'|| /**PPOSP* MSG*/            00270900
*            ' "'||MACLIST||'"'||                                       00271000
*            ' CANNOT BE USED.'||                                       00271100
*            ' NO POSITIONAL ARGUMENTS'||                               00271200
*            ' ARE ALLOWED.';                                           00271300
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00271400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00271500
*        ZMACRET=8;                          /* MACRO ERROR */          00271600
*      END;                                                             00271700
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00271800
*  IF NUMBER(SYSINFO_BLOCK)>1                /* CHECK POSITIONALS */    00271900
*    THEN                                                               00272000
*      DO;                                                              00272100
*        ZMS=' 8, "SYSINFO_BLOCK'||          /**KPOSP* MSG*/            00272200
*            SYSINFO_BLOCK||                                            00272300
*            '" "SYSINFO_BLOCK"'||                                      00272400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00272500
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00272600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00272700
*        ZMACRET=8;                          /* MACRO ERROR */          00272800
*      END;                                                             00272900
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00273000
*  XSYSINFO_BLOCK=SYSINFO_BLOCK(1);          /* SET XVARIABLE */        00273100
*  IF SYSINFO_BLOCK(1)=''                    /* CHECK FOR NULL */       00273200
*   THEN                                                                00273300
*    DO;                                     /* KEY IS REQUIRED */      00273400
*        ZXSYSINFO_BLOCK='';                 /* RESET IN/OUTPUT */      00273500
*        ZMS=' 8,  '||                                                  00273600
*            ' "SYSINFO_BLOCK" KEY AND ITS ARGUMENT'||                  00273700
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00273800
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00273900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00274000
*        ZMACRET=8;                          /* MACRO ERROR */          00274100
*    END;                                                               00274200
*  ELSE                                                                 00274300
*    ZXSYSINFO_BLOCK='INPUT';                /* SET IN/OUTPUT */        00274400
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00274500
*  XEXTENDED_DATA='';                                                   00274600
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00274700
*  IF TRANSLATE(EXTENDED_DATA(1))                                       00274800
*              = 'NO'                        /* CHECK FOR KEYWORD */    00274900
*     | EXTENDED_DATA(1)=''                  /* CHECK FOR NULL */       00275000
*    THEN                                                               00275100
*      DO;                                                              00275200
*        XEXTENDED_DATA='NO';                /* SET XVARIABLE */        00275300
*        IF NUMBER(EXTENDED_DATA)>1          /* CHECK POSITIONALS */    00275400
*          THEN                                                         00275500
*            DO;                                                        00275600
*              ZMS=' 8, "EXTENDED_DATA'||    /**KPOSP* MSG*/            00275700
*                  EXTENDED_DATA||                                      00275800
*                  '" "EXTENDED_DATA"'||                                00275900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00276000
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00276100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00276200
*              ZMACRET=8;                    /* MACRO ERROR */          00276300
*            END;                                                       00276400
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00276500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00276600
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00276700
*  IF TRANSLATE(EXTENDED_DATA(1))                                       00276800
*              = 'YES'                       /* CHECK FOR KEYWORD */    00276900
*    THEN                                                               00277000
*      DO;                                                              00277100
*        XEXTENDED_DATA='YES';               /* SET XVARIABLE */        00277200
*        IF NUMBER(EXTENDED_DATA)>1          /* CHECK POSITIONALS */    00277300
*          THEN                                                         00277400
*            DO;                                                        00277500
*              ZMS=' 8, "EXTENDED_DATA'||    /**KPOSP* MSG*/            00277600
*                  EXTENDED_DATA||                                      00277700
*                  '" "EXTENDED_DATA"'||                                00277800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00277900
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00278000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00278100
*              ZMACRET=8;                    /* MACRO ERROR */          00278200
*            END;                                                       00278300
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00278400
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00278500
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00278600
*  IF EXTENDED_DATA='EXTENDED_DATA'                                     00278700
*    | EXTENDED_DATA='()'                    /*CHECK ENTRY*/            00278800
*     THEN                                                              00278900
*       DO;                                                             00279000
*              ZMS=' 8, THE "EXTENDED_DATA" KEY'|| /**KOPTP* MSG*/      00279100
*                  ' MUST CONTAIN ONE'||                                00279200
*                  ' (OR MORE) ARGUMENT(S).';                           00279300
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00279400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00279500
*              ZMACRET=8;                    /* MACRO ERROR */          00279600
*       END;                                                            00279700
*  ELSE                                                                 00279800
*    DO;                                                                00279900
*      ZXEXTENDED_DATA='INPUT';              /* SET IN/OUTPUT */        00280000
*      IF XEXTENDED_DATA=''                  /* CHECK FOR KEYWORD */    00280100
*        THEN                                                           00280200
*          DO;                               /* KEYWORD NOT ENTERED */  00280300
*            XEXTENDED_DATA='NO';            /* SET DEFAULT */          00280400
*            IF EXTENDED_DATA(1)^=''         /* CHECK FOR KEYWORD */    00280500
*              THEN                                                     00280600
*                DO;                                                    00280700
*                  ZXEXTENDED_DATA='';       /* RESET IN/OUTPUT */      00280800
*              ZMS=' 8, "EXTENDED_DATA'||    /**KUKWP* MSG*/            00280900
*                  EXTENDED_DATA||'"'||                                 00281000
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00281100
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00281200
*                  ' "NO"'||                 /* VALID KEYWORD */        00281300
*                  ' OR "YES".';             /* VALID KEYWORD */        00281400
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00281500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00281600
*              ZMACRET=8;                    /* MACRO ERROR */          00281700
*                END;                                                   00281800
*          END;                                                         00281900
*    END;                                                               00282000
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00282100
*  IF NUMBER(ANSLEN)>1                       /* CHECK POSITIONALS */    00282200
*    THEN                                                               00282300
*      DO;                                                              00282400
*        ZMS=' 8, "ANSLEN'||                 /**KPOSP* MSG*/            00282500
*            ANSLEN||                                                   00282600
*            '" "ANSLEN"'||                                             00282700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00282800
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00282900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00283000
*        ZMACRET=8;                          /* MACRO ERROR */          00283100
*      END;                                                             00283200
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00283300
*  XANSLEN=ANSLEN(1);                        /* SET XVARIABLE */        00283400
*  IF ANSLEN(1)=''                           /* CHECK FOR NULL */       00283500
*   THEN                                                                00283600
*    DO;                                     /* KEY IS REQUIRED */      00283700
*        ZXANSLEN='';                        /* RESET IN/OUTPUT */      00283800
*        ZMS=' 8,  '||                                                  00283900
*            ' "ANSLEN" KEY AND ITS ARGUMENT'||                         00284000
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00284100
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00284200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00284300
*        ZMACRET=8;                          /* MACRO ERROR */          00284400
*    END;                                                               00284500
*  ELSE                                                                 00284600
*    ZXANSLEN='INPUT';                       /* SET IN/OUTPUT */        00284700
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00284800
*  IF ENTRY_COUNT='ENTRY_COUNT' | ENTRY_COUNT='()'  /*CHECK ENTRY*/     00284900
*    THEN                                                               00285000
*      DO;                                                              00285100
*        ZMS=' 8, THE "ENTRY_COUNT" KEY'||   /**KOPTP* MSG*/            00285200
*            ' MUST CONTAIN ONE'||                                      00285300
*            ' (OR MORE) ARGUMENT(S).';                                 00285400
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00285500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00285600
*        ZMACRET=8;                          /* MACRO ERROR */          00285700
*      END;                                                             00285800
*  IF NUMBER(ENTRY_COUNT)>1                  /* CHECK POSITIONALS */    00285900
*    THEN                                                               00286000
*      DO;                                                              00286100
*        ZMS=' 8, "ENTRY_COUNT'||            /**KPOSP* MSG*/            00286200
*            ENTRY_COUNT||                                              00286300
*            '" "ENTRY_COUNT"'||                                        00286400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00286500
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00286600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00286700
*        ZMACRET=8;                          /* MACRO ERROR */          00286800
*      END;                                                             00286900
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00287000
*  IF ENTRY_COUNT(1)^=''                     /* CHECK FOR NULL */       00287100
*    THEN                                                               00287200
*      DO;                                                              00287300
*        XENTRY_COUNT=ENTRY_COUNT(1);        /* SET XVARIABLE */        00287400
*        ZXENTRY_COUNT='OUTPUT';             /* SET OUTPUT */           00287500
*      END;                                                             00287600
*  ELSE                                                                 00287700
*    IF ZXENTRY_COUNT^=''                                               00287800
*      THEN                                                             00287900
*        ZXENTRY_COUNT='';                   /* RESET OUTPUT */         00288000
*/*PG.KXVAR01 NAME, RQD OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00288100
*  IF NUMBER(QUERYLEN)>1                     /* CHECK POSITIONALS */    00288200
*    THEN                                                               00288300
*      DO;                                                              00288400
*        ZMS=' 8, "QUERYLEN'||               /**KPOSP* MSG*/            00288500
*            QUERYLEN||                                                 00288600
*            '" "QUERYLEN"'||                                           00288700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00288800
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00288900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00289000
*        ZMACRET=8;                          /* MACRO ERROR */          00289100
*      END;                                                             00289200
*/*PG.KXVAR03 NAME, RQD OUTPUT, KEYS -XVARIABLE----------------------*/ 00289300
*  XQUERYLEN=QUERYLEN(1);                    /* SET XVARIABLE */        00289400
*  IF QUERYLEN(1)=''                         /* CHECK FOR NULL */       00289500
*   THEN                                                                00289600
*    DO;                                     /* KEY IS REQUIRED */      00289700
*        ZXQUERYLEN='';                      /* RESET IN/OUTPUT */      00289800
*        ZMS=' 8,  '||                                                  00289900
*            ' "QUERYLEN" KEY AND ITS ARGUMENT'||                       00290000
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00290100
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00290200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00290300
*        ZMACRET=8;                          /* MACRO ERROR */          00290400
*    END;                                                               00290500
*  ELSE                                                                 00290600
*    ZXQUERYLEN='OUTPUT';                    /* SET IN/OUTPUT */        00290700
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00290800
*  IF NUMBER(LOCATION)>1                     /* CHECK POSITIONALS */    00290900
*    THEN                                                               00291000
*      DO;                                                              00291100
*        ZMS=' 8, "LOCATION'||               /**KPOSP* MSG*/            00291200
*            LOCATION||                                                 00291300
*            '" "LOCATION"'||                                           00291400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00291500
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00291600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00291700
*        ZMACRET=8;                          /* MACRO ERROR */          00291800
*      END;                                                             00291900
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00292000
*  XLOCATION=LOCATION(1);                    /* SET XVARIABLE */        00292100
*  IF LOCATION(1)=''                         /* CHECK FOR NULL */       00292200
*   THEN                                                                00292300
*    DO;                                     /* KEY IS REQUIRED */      00292400
*        ZXLOCATION='';                      /* RESET IN/OUTPUT */      00292500
*        ZMS=' 8,  '||                                                  00292600
*            ' "LOCATION" KEY AND ITS ARGUMENT'||                       00292700
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00292800
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00292900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00293000
*        ZMACRET=8;                          /* MACRO ERROR */          00293100
*    END;                                                               00293200
*  ELSE                                                                 00293300
*    ZXLOCATION='INPUT';                     /* SET IN/OUTPUT */        00293400
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00293500
*  XFUNCTION='';                                                        00293600
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00293700
*  IF TRANSLATE(FUNCTION(1))                                            00293800
*              = 'SELECT'                    /* CHECK FOR KEYWORD */    00293900
*     | FUNCTION(1)=''                       /* CHECK FOR NULL */       00294000
*    THEN                                                               00294100
*      DO;                                                              00294200
*        XFUNCTION='SELECT';                 /* SET XVARIABLE */        00294300
*        IF NUMBER(FUNCTION)>1               /* CHECK POSITIONALS */    00294400
*          THEN                                                         00294500
*            DO;                                                        00294600
*              ZMS=' 8, "FUNCTION'||         /**KPOSP* MSG*/            00294700
*                  FUNCTION||                                           00294800
*                  '" "FUNCTION"'||                                     00294900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00295000
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00295100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00295200
*              ZMACRET=8;                    /* MACRO ERROR */          00295300
*            END;                                                       00295400
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00295500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00295600
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00295700
*  IF TRANSLATE(FUNCTION(1))                                            00295800
*              = 'QUERY'                     /* CHECK FOR KEYWORD */    00295900
*    THEN                                                               00296000
*      DO;                                                              00296100
*        XFUNCTION='QUERY';                  /* SET XVARIABLE */        00296200
*        IF NUMBER(FUNCTION)>1               /* CHECK POSITIONALS */    00296300
*          THEN                                                         00296400
*            DO;                                                        00296500
*              ZMS=' 8, "FUNCTION'||         /**KPOSP* MSG*/            00296600
*                  FUNCTION||                                           00296700
*                  '" "FUNCTION"'||                                     00296800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00296900
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00297000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00297100
*              ZMACRET=8;                    /* MACRO ERROR */          00297200
*            END;                                                       00297300
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00297400
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00297500
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00297600
*  IF FUNCTION='FUNCTION'                                               00297700
*    | FUNCTION='()'                         /*CHECK ENTRY*/            00297800
*     THEN                                                              00297900
*       DO;                                                             00298000
*              ZMS=' 8, THE "FUNCTION" KEY'|| /**KOPTP* MSG*/           00298100
*                  ' MUST CONTAIN ONE'||                                00298200
*                  ' (OR MORE) ARGUMENT(S).';                           00298300
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00298400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00298500
*              ZMACRET=8;                    /* MACRO ERROR */          00298600
*       END;                                                            00298700
*  ELSE                                                                 00298800
*    DO;                                                                00298900
*      ZXFUNCTION='INPUT';                   /* SET IN/OUTPUT */        00299000
*      IF XFUNCTION=''                       /* CHECK FOR KEYWORD */    00299100
*        THEN                                                           00299200
*          DO;                               /* KEYWORD NOT ENTERED */  00299300
*            XFUNCTION='SELECT';             /* SET DEFAULT */          00299400
*            IF FUNCTION(1)^=''              /* CHECK FOR KEYWORD */    00299500
*              THEN                                                     00299600
*                DO;                                                    00299700
*                  ZXFUNCTION='';            /* RESET IN/OUTPUT */      00299800
*              ZMS=' 8, "FUNCTION'||         /**KUKWP* MSG*/            00299900
*                  FUNCTION||'"'||                                      00300000
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00300100
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00300200
*                  ' "SELECT"'||             /* VALID KEYWORD */        00300300
*                  ' OR "QUERY".';           /* VALID KEYWORD */        00300400
*              ANS MSG('?IWMSRSRS ---> '||ZMS);                         00300500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00300600
*              ZMACRET=8;                    /* MACRO ERROR */          00300700
*                END;                                                   00300800
*          END;                                                         00300900
*    END;                                                               00301000
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00301100
*  IF RETCODE='RETCODE' | RETCODE='()'       /*CHECK ENTRY*/            00301200
*    THEN                                                               00301300
*      DO;                                                              00301400
*        ZMS=' 8, THE "RETCODE" KEY'||       /**KOPTP* MSG*/            00301500
*            ' MUST CONTAIN ONE'||                                      00301600
*            ' (OR MORE) ARGUMENT(S).';                                 00301700
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00301800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00301900
*        ZMACRET=8;                          /* MACRO ERROR */          00302000
*      END;                                                             00302100
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00302200
*    THEN                                                               00302300
*      DO;                                                              00302400
*        ZMS=' 8, "RETCODE'||                /**KPOSP* MSG*/            00302500
*            RETCODE||                                                  00302600
*            '" "RETCODE"'||                                            00302700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00302800
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00302900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00303000
*        ZMACRET=8;                          /* MACRO ERROR */          00303100
*      END;                                                             00303200
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00303300
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00303400
*    THEN                                                               00303500
*      DO;                                                              00303600
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00303700
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00303800
*      END;                                                             00303900
*  ELSE                                                                 00304000
*    IF ZXRETCODE^=''                                                   00304100
*      THEN                                                             00304200
*        ZXRETCODE='';                       /* RESET OUTPUT */         00304300
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00304400
*  IF RSNCODE='RSNCODE' | RSNCODE='()'       /*CHECK ENTRY*/            00304500
*    THEN                                                               00304600
*      DO;                                                              00304700
*        ZMS=' 8, THE "RSNCODE" KEY'||       /**KOPTP* MSG*/            00304800
*            ' MUST CONTAIN ONE'||                                      00304900
*            ' (OR MORE) ARGUMENT(S).';                                 00305000
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00305100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00305200
*        ZMACRET=8;                          /* MACRO ERROR */          00305300
*      END;                                                             00305400
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    00305500
*    THEN                                                               00305600
*      DO;                                                              00305700
*        ZMS=' 8, "RSNCODE'||                /**KPOSP* MSG*/            00305800
*            RSNCODE||                                                  00305900
*            '" "RSNCODE"'||                                            00306000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00306100
*        ANS MSG('?IWMSRSRS ---> '||ZMS);                               00306200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00306300
*        ZMACRET=8;                          /* MACRO ERROR */          00306400
*      END;                                                             00306500
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00306600
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       00306700
*    THEN                                                               00306800
*      DO;                                                              00306900
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        00307000
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           00307100
*      END;                                                             00307200
*  ELSE                                                                 00307300
*    IF ZXRSNCODE^=''                                                   00307400
*      THEN                                                             00307500
*        ZXRSNCODE='';                       /* RESET OUTPUT */         00307600
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00307700
*      END;                                  /* END COMPLETE CHECKING*/ 00307800
*/********************************************************************/ 00307900
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00308000
*/********************************************************************/ 00308100
*  IF ZMACRET = 0                                                       00308200
*    THEN                                                               00308300
*      DO;                                                              00308400
*/********************************************************************/ 00308500
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00308600
*/********************************************************************/ 00308700
*  ANS(MACCONC||'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);             00308800
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00308900
*    THEN                                                               00309000
*      ANS(MACCONC||'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);          00309100
*    ELSE                                                               00309200
*      ANS(MACCONC||'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);          00309300
*/********************************************************************/ 00309400
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00309500
*  IF XMF^='L'                                                          00309600
*    THEN                                                               00309700
*      ANS('DO; /* IWMSRSRS-PLISTVER */')                               00309800
*          NORESCAN COL(MACLMAR);                                       00309900
*/*MCMPLS01 RFY 15*/                                                    00310000
*  IF XMF^='L' & ZMACRET = 0                                            00310100
*    THEN                                                               00310200
*      ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);                   00310300
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00310400
       DCL EHAMAPS CHAR EXTERNAL;                                       00310500
       IF INDEX(EHAMAPS,'XM@')=0 THEN                                   00310600
         EHAMAPS=EHAMAPS||'XM@,';                                       00310700
       IF INDEX(EHAREGS,'00F')=0                                        00310800
         THEN                                                           00310900
           EHAREGS=EHAREGS||'00F'; /* GPR00F                      */    00311000
       IF INDEX(EHAREGS,'15F')=0                                        00311100
         THEN                                                           00311200
           EHAREGS=EHAREGS||'15F'; /* GPR15F                      */    00311300
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00311400
*/*PL.LL01 ?IWMSRSRS MF=L PARAMETER LIST-----------------------------*/ 00311500
*  IF XMF='L'                                                           00311600
*    THEN                                                               00311700
*      DO;                                                              00311800
*        ANS('DCL 1 '||XMFCTRL||' '||XMFATTR||', '||                    00311900
*            '/* ?IWMSRSRS PARM LIST*/')                                00312000
*            NORESCAN COL(MACLMAR);                                     00312100
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00312200
*        ANS('2 '||XMFCTRL||                                            00312300
*            '_XVERSION FIXED(8), '||                                   00312400
*            '/* INPUT XVERSION*/')                                     00312500
*            NORESCAN COL(MACLMAR+2);                                   00312600
*/*PL.LL13  XRSV002 CHAR(3) RESERVED---------------------------------*/ 00312700
*        ANS('2 '||XMFCTRL||                                            00312800
*            '_XRSV002 CHAR(3), '||                                     00312900
*            '/* RESERVED */')                                          00313000
*            NORESCAN COL(MACLMAR+2);                                   00313100
*/*PL.LL13  XSYSINFO_BLOCK PTR(31) INPUT NAME------------------------*/ 00313200
*        ANS('2 '||XMFCTRL||                                            00313300
*            '_XSYSINFO_BLOCK PTR(31), '||                              00313400
*            '/* '||ZXSYSINFO_BLOCK||' XSYSINFO_BLOCK */')              00313500
*            NORESCAN COL(MACLMAR+2);                                   00313600
*/*PL.LL13  XANSLEN FIXED(31) INPUT----------------------------------*/ 00313700
*        ANS('2 '||XMFCTRL||                                            00313800
*            '_XANSLEN FIXED(31), '||                                   00313900
*            '/* '||ZXANSLEN||' XANSLEN */')                            00314000
*            NORESCAN COL(MACLMAR+2);                                   00314100
*/*PL.LL13  XQUERYLEN FIXED(31) OUTPUT-------------------------------*/ 00314200
*        ANS('2 '||XMFCTRL||                                            00314300
*            '_XQUERYLEN FIXED(31), '||                                 00314400
*            '/* '||ZXQUERYLEN||' XQUERYLEN */')                        00314500
*            NORESCAN COL(MACLMAR+2);                                   00314600
*/*PL.LL13  XLOCATION CHAR(18) INPUT---------------------------------*/ 00314700
*        ANS('2 '||XMFCTRL||                                            00314800
*            '_XLOCATION CHAR(18), '||                                  00314900
*            '/* '||ZXLOCATION||' XLOCATION */')                        00315000
*            NORESCAN COL(MACLMAR+2);                                   00315100
*/*PL.LL13  XRSV0022 CHAR(2) RESERVED--------------------------------*/ 00315200
*        ANS('2 '||XMFCTRL||                                            00315300
*            '_XRSV0022 CHAR(2), '||                                    00315400
*            '/* RESERVED */')                                          00315500
*            NORESCAN COL(MACLMAR+2);                                   00315600
*/*PL.LPVER01 -------------------------------------------------------*/ 00315700
*  IF XPLISTVER>=1                                                      00315800
*    THEN                                                               00315900
*      DO;                                                              00316000
*/*PL.LL02  XPLISTLEN FIXED(16) BDY(BYTE) INPUT----------------------*/ 00316100
*        ANS('2 '||XMFCTRL||                                            00316200
*            '_XPLISTLEN FIXED(16) BDY(BYTE), '||                       00316300
*            '/* INPUT XPLISTLEN*/')                                    00316400
*            NORESCAN COL(MACLMAR+2);                                   00316500
*/*PL.LPVER02 -------------------------------------------------------*/ 00316600
*      END;                                                             00316700
*/*PL.LPVER01 -------------------------------------------------------*/ 00316800
*  IF XPLISTVER>=1                                                      00316900
*    THEN                                                               00317000
*      DO;                                                              00317100
*/*PL.LL04  XSRS_OPTIONS BIT(8) FIELD_LABEL--------------------------*/ 00317200
*        ANS('2 '||XMFCTRL||                                            00317300
*            '_XSRS_OPTIONS BIT(8), '||                                 00317400
*            '/* FIELD_LABEL */')                                       00317500
*            NORESCAN COL(MACLMAR+2);                                   00317600
*/*PL.LPVER02 -------------------------------------------------------*/ 00317700
*      END;                                                             00317800
*/*PL.LPVER01 -------------------------------------------------------*/ 00317900
*  IF XPLISTVER>=1                                                      00318000
*    THEN                                                               00318100
*      DO;                                                              00318200
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00318300
*          ANS('3 '||XMFCTRL||                                          00318400
*              '_XEXTENDED_DATA_YES BIT(1), '||                         00318500
*              '/* BIT */')                                             00318600
*              NORESCAN COL(MACLMAR+2);                                 00318700
*/*PL.LPVER02 -------------------------------------------------------*/ 00318800
*      END;                                                             00318900
*/*PL.LPVER01 -------------------------------------------------------*/ 00319000
*  IF XPLISTVER>=1                                                      00319100
*    THEN                                                               00319200
*      DO;                                                              00319300
*/*PL.LL09 BIT X1XXXXXX----------------------------------------------*/ 00319400
*          ANS('3 '||XMFCTRL||                                          00319500
*              '_XFUNCTION_QUERY BIT(1), '||                            00319600
*              '/* BIT */')                                             00319700
*              NORESCAN COL(MACLMAR+2);                                 00319800
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00319900
*          ANS('3 '||XMFCTRL||                                          00320000
*              '_XSRS_OPTIONS_RSVD1 BIT(6), '||                         00320100
*              '/* BIT */')                                             00320200
*              NORESCAN COL(MACLMAR+2);                                 00320300
*/*PL.LPVER02 -------------------------------------------------------*/ 00320400
*      END;                                                             00320500
*/*PL.LPVER01 -------------------------------------------------------*/ 00320600
*  IF XPLISTVER>=1                                                      00320700
*    THEN                                                               00320800
*      DO;                                                              00320900
*/*PL.LL13  XRSV0025 CHAR(1) RESERVED--------------------------------*/ 00321000
*        ANS('2 '||XMFCTRL||                                            00321100
*            '_XRSV0025 CHAR(1), '||                                    00321200
*            '/* RESERVED */')                                          00321300
*            NORESCAN COL(MACLMAR+2);                                   00321400
*/*PL.LPVER02 -------------------------------------------------------*/ 00321500
*      END;                                                             00321600
*/*PL.LPVER01 -------------------------------------------------------*/ 00321700
*  IF XPLISTVER>=1                                                      00321800
*    THEN                                                               00321900
*      DO;                                                              00322000
*/*PL.LL13  XENTRY_COUNT FIXED(32) OUTPUT----------------------------*/ 00322100
*        ANS('2 '||XMFCTRL||                                            00322200
*            '_XENTRY_COUNT FIXED(32), '||                              00322300
*            '/* '||ZXENTRY_COUNT||' XENTRY_COUNT */')                  00322400
*            NORESCAN COL(MACLMAR+2);                                   00322500
*/*PL.LPVER02 -------------------------------------------------------*/ 00322600
*      END;                                                             00322700
*/*PL.LL18 ----------------------------------------------------------*/ 00322800
*        ANS('2 * CHAR(0);')                                            00322900
*            NORESCAN COL(MACLMAR+2);                                   00323000
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00323100
*      END;                                                             00323200
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00323300
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00323400
*  DEACT ZPRMLINE;                                                      00323500
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00323600
*  DEACT ZNDX;                                                          00323700
*  ZNDX=MACINDEX(1:4);         /* MACINDEX LAST THREE DIGITS        */  00323800
*  DCL XVERSION CHAR;                                                   00323900
*  DEACT XVERSION;                                                      00324000
*/*PL.L02 ?IWMSRSRS PARAMETER LIST-----------------------------------*/ 00324100
*  IF XMF^='L'                                                          00324200
*    THEN                                                               00324300
*      DO;                                                              00324400
*/*PL.L03 ?IWMSRSRS PARAMETER LIST-----------------------------------*/ 00324500
*        IF XMF='S'                                                     00324600
*          THEN                                                         00324700
*            XMFCTRL='#ZPLIST';                                         00324800
*/*PL.L04 ?IWMSRSRS PARAMETER LIST-----------------------------------*/ 00324900
*        ZPRMLINE='DCL 1 #Z'||ZNDX||' DEF('||XMFCTRL||'),'||            00325000
*                 ' /* ?IWMSRSRS PARM LIST*/';                          00325100
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00325200
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00325300
*                 '_XVERSION FIXED(8), '||                              00325400
*                 '/* INPUT XVERSION*/';                                00325500
*/*PL.L08  XRSV002 CHAR(3) RESERVED----------------------------------*/ 00325600
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00325700
*                 '_XRSV002 CHAR(3), '||                                00325800
*                 '/* RESERVED */';                                     00325900
*/*PL.L08  XSYSINFO_BLOCK PTR(31) INPUT NAME-------------------------*/ 00326000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00326100
*                 '_XSYSINFO_BLOCK PTR(31), '||                         00326200
*                 '/* '||ZXSYSINFO_BLOCK||' XSYSINFO_BLOCK */';         00326300
*/*PL.L08  XANSLEN FIXED(31) INPUT-----------------------------------*/ 00326400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00326500
*                 '_XANSLEN FIXED(31), '||                              00326600
*                 '/* '||ZXANSLEN||' XANSLEN */';                       00326700
*/*PL.L08  XQUERYLEN FIXED(31) OUTPUT--------------------------------*/ 00326800
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00326900
*                 '_XQUERYLEN FIXED(31), '||                            00327000
*                 '/* '||ZXQUERYLEN||' XQUERYLEN */';                   00327100
*/*PL.L08  XLOCATION CHAR(18) INPUT----------------------------------*/ 00327200
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00327300
*                 '_XLOCATION CHAR(18), '||                             00327400
*                 '/* '||ZXLOCATION||' XLOCATION */';                   00327500
*/*PL.L08  XRSV0022 CHAR(2) RESERVED---------------------------------*/ 00327600
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00327700
*                 '_XRSV0022 CHAR(2), '||                               00327800
*                 '/* RESERVED */';                                     00327900
*/*PL.LPVER03 -------------------------------------------------------*/ 00328000
*  IF XPLISTVER>=1                                                      00328100
*    THEN                                                               00328200
*      DO;                                                              00328300
*/*PL.L05  XPLISTLEN FIXED(16) BDY(BYTE) INPUT-----------------------*/ 00328400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00328500
*                 '_XPLISTLEN FIXED(16) BDY(BYTE), '||                  00328600
*                 '/* INPUT XPLISTLEN*/';                               00328700
*/*PL.LPVER04 -------------------------------------------------------*/ 00328800
*      END;                                                             00328900
*/*PL.LPVER03 -------------------------------------------------------*/ 00329000
*  IF XPLISTVER>=1                                                      00329100
*    THEN                                                               00329200
*      DO;                                                              00329300
*/*PL.L08  XSRS_OPTIONS BIT(8) FIELD_LABEL---------------------------*/ 00329400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00329500
*                 '_XSRS_OPTIONS BIT(8), '||                            00329600
*                 '/* FIELD_LABEL */';                                  00329700
*/*PL.LPVER04 -------------------------------------------------------*/ 00329800
*      END;                                                             00329900
*/*PL.LPVER03 -------------------------------------------------------*/ 00330000
*  IF XPLISTVER>=1                                                      00330100
*    THEN                                                               00330200
*      DO;                                                              00330300
*/*PL.L08  XRSV0025 CHAR(1) RESERVED---------------------------------*/ 00330400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00330500
*                 '_XRSV0025 CHAR(1), '||                               00330600
*                 '/* RESERVED */';                                     00330700
*/*PL.LPVER04 -------------------------------------------------------*/ 00330800
*      END;                                                             00330900
*/*PL.LPVER03 -------------------------------------------------------*/ 00331000
*  IF XPLISTVER>=1                                                      00331100
*    THEN                                                               00331200
*      DO;                                                              00331300
*/*PL.L08  XENTRY_COUNT FIXED(32) OUTPUT-----------------------------*/ 00331400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00331500
*                 '_XENTRY_COUNT FIXED(32), '||                         00331600
*                 '/* '||ZXENTRY_COUNT||' XENTRY_COUNT */';             00331700
*/*PL.LPVER04 -------------------------------------------------------*/ 00331800
*      END;                                                             00331900
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00332000
*        ZPRMNUM=ZPRMNUM+1;                                             00332100
*        ZPRM(ZPRMNUM)=ZPRMLINE||' 2 * CHAR(0);';                       00332200
*        IF XPLISTVER^=0                                                00332300
*           & XMF^='S'                                                  00332400
*          THEN                                                         00332500
*            DO;                                                        00332600
*              ZPRMNUM=ZPRMNUM+1;                                       00332700
*              ZPRM(ZPRMNUM)=                                           00332800
*               'DCL #Z'||ZNDX||'_LENCHECK FIXED(32) CONSTANT('||       00332900
*               'LENGTH('||XMFCTRL||')-LENGTH(#Z'||ZNDX||'));'||        00333000
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'||            00333100
*               ' IS LONG ENOUGH */';                                   00333200
*            END;                                                       00333300
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00333400
*        ZPLLEN=36;                                                     00333500
*        IF XPLISTVER>=1                                                00333600
*          THEN                                                         00333700
*            ZPLLEN=44;                                                 00333800
*        IF ZPRMMAX<ZPLLEN                                              00333900
*           & XMF^='E'                                                  00334000
*          THEN                                                         00334100
*            ZPRMMAX=ZPLLEN;                                            00334200
*/*PL.L13 -----------------------------------------------------------*/ 00334300
*      END;                                                             00334400
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00334500
*  IF XMF^='L'                                                          00334600
*    THEN                                                               00334700
*      DO;                                                              00334800
*        ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);               00334900
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00335000
*            ANS('#Z'||ZNDX||'=''''B;'||                                00335100
*                '/* CLEAR PARAMETER AREA */')                          00335200
*                NORESCAN COL(MACLMAR);                                 00335300
*/*PI.L05B XVERSION FIXED(8)-----------------------------------------*/ 00335400
*        IF XPLISTVER^=0                                                00335500
*          THEN                                                         00335600
*            ANS('#Z'||ZNDX||'_XVERSION='||CHAR(XPLISTVER)||'; '||      00335700
*                '/* XVERSION FIXED(8) */')                             00335800
*                NORESCAN COL(MACLMAR);                                 00335900
*/*PI.L23 XSYSINFO_BLOCK NAME----------------------------------------*/ 00336000
*        IF ZXSYSINFO_BLOCK^=''                                         00336100
*          THEN                                                         00336200
*            ANS('#Z'||ZNDX||'_XSYSINFO_BLOCK='||                       00336300
*                'ADDR('||XSYSINFO_BLOCK||');'||                        00336400
*                '/* XSYSINFO_BLOCK NAME */')                           00336500
*                NORESCAN COL(MACLMAR);                                 00336600
*/*PI.L17 XANSLEN FIXED(31)------------------------------------------*/ 00336700
*        IF ZXANSLEN='INPUT' |                                          00336800
*           ZXANSLEN='INOUT'                                            00336900
*          THEN                                                         00337000
*            ANS('#Z'||ZNDX||'_XANSLEN='||                              00337100
*                XANSLEN||';'||                                         00337200
*                '/* XANSLEN FIXED(31) */')                             00337300
*                NORESCAN COL(MACLMAR);                                 00337400
*/*PI.L21 XLOCATION NAME CHAR(18)------------------------------------*/ 00337500
*        IF ZXLOCATION='INPUT' |                                        00337600
*           ZXLOCATION='INOUT'                                          00337700
*          THEN                                                         00337800
*            ANS('#Z'||ZNDX||'_XLOCATION='||                            00337900
*                XLOCATION||';'||                                       00338000
*                '/* XLOCATION CHAR(18) */')                            00338100
*                NORESCAN COL(MACLMAR);                                 00338200
*/*PI.LPVER01 -------------------------------------------------------*/ 00338300
*  IF XPLISTVER>=1                                                      00338400
*    THEN                                                               00338500
*      DO;                                                              00338600
*/*PI.L05C XPLISTLEN FIXED(16)---------------------------------------*/ 00338700
*        ANS('#Z'||ZNDX||'_XPLISTLEN=LENGTH(#Z'||ZNDX||');'||           00338800
*            '/* XPLISTLEN FIXED(16) */')                               00338900
*            NORESCAN COL(MACLMAR);                                     00339000
*/*PI.LPVER02 -------------------------------------------------------*/ 00339100
*      END;                                                             00339200
*/*PI.LPVER01 -------------------------------------------------------*/ 00339300
*  IF XPLISTVER>=1                                                      00339400
*    THEN                                                               00339500
*      DO;                                                              00339600
*/*PI.L06 XSRS_OPTIONS BIT(8)----------------------------------------*/ 00339700
*        ZW='';                                                         00339800
*        ZMS='';                                                        00339900
*/*PI.LPVER02 -------------------------------------------------------*/ 00340000
*      END;                                                             00340100
*/*PI.LPVER01 -------------------------------------------------------*/ 00340200
*  IF XPLISTVER>=1                                                      00340300
*    THEN                                                               00340400
*      DO;                                                              00340500
*/*PI.L07 XSRS_OPTIONS BIT(8) 1XXXXXXX-------------------------------*/ 00340600
*        IF XEXTENDED_DATA='YES'                                        00340700
*          THEN                                                         00340800
*            ZW=ZW||'1';                                                00340900
*          ELSE                                                         00341000
*            ZW=ZW||'0';                                                00341100
*/*PI.LPVER02 -------------------------------------------------------*/ 00341200
*      END;                                                             00341300
*/*PI.LPVER01 -------------------------------------------------------*/ 00341400
*  IF XPLISTVER>=1                                                      00341500
*    THEN                                                               00341600
*      DO;                                                              00341700
*/*PI.L07 XSRS_OPTIONS BIT(8) X1XXXXXX-------------------------------*/ 00341800
*        IF XFUNCTION='QUERY'                                           00341900
*          THEN                                                         00342000
*            ZW=ZW||'1000000';                                          00342100
*          ELSE                                                         00342200
*            ZW=ZW||'0000000';                                          00342300
*/*PI.L09 XSRS_OPTIONS BIT(8)----------------------------------------*/ 00342400
*        IF INDEX(ZW,'1')^=0                                            00342500
*          THEN                                                         00342600
*            ANS('#Z'||ZNDX||'_XSRS_OPTIONS='||                         00342700
*                '#Z'||ZNDX||'_XSRS_OPTIONS | '||                       00342800
*                ''''||ZW||'''B; '||                                    00342900
*                '/* BIT(8) */')                                        00343000
*                NORESCAN COL(MACLMAR);                                 00343100
*/*PI.LPVER02 -------------------------------------------------------*/ 00343200
*      END;                                                             00343300
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00343400
*              IF NUMBER(RSNCODE)>0                                     00343500
*                THEN                                                   00343600
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       00343700
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00343800
*              ANS('GPR01P=ADDR(#Z'||ZNDX||');'||                       00343900
*                  '/* PARAMETER LIST */')                              00344000
*                  NORESCAN COL(MACLMAR);                               00344100
*              IF SYSASCE^='P'                                          00344200
*                THEN                                                   00344300
*                  ANS('SAR(GPR01P,ALET(#Z'||ZNDX||'));'||              00344400
*                      '/* PARAMETER LIST AR */')                       00344500
*                      NORESCAN COL(MACLMAR);                           00344600
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00344700
         ANS('PC(XM@(96)|30);') SKIP COL(5);                            00344800
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00344900
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00345000
*              IF NUMBER(RETCODE)>0                                     00345100
*                THEN                                                   00345200
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00345300
*/*PO.L03 XQUERYLEN FIXED(31)----------------------------------------*/ 00345400
*              IF ZXQUERYLEN='OUTPUT' |                                 00345500
*                 ZXQUERYLEN='INOUT'                                    00345600
*                THEN                                                   00345700
*                  ANS(XQUERYLEN||                                      00345800
*                      '=#Z'||ZNDX||'_XQUERYLEN;'||                     00345900
*                      '/* XQUERYLEN FIXED(31) */')                     00346000
*                      NORESCAN COL(MACLMAR);                           00346100
*/*PO.LPVER01 -------------------------------------------------------*/ 00346200
*  IF XPLISTVER >= 1                                                    00346300
*    THEN                                                               00346400
*      DO;                                                              00346500
*/*PO.L03 XENTRY_COUNT FIXED(32)-------------------------------------*/ 00346600
*              IF ZXENTRY_COUNT='OUTPUT' |                              00346700
*                 ZXENTRY_COUNT='INOUT'                                 00346800
*                THEN                                                   00346900
*                  ANS(XENTRY_COUNT||                                   00347000
*                      '=#Z'||ZNDX||'_XENTRY_COUNT;'||                  00347100
*                      '/* XENTRY_COUNT FIXED(32) */')                  00347200
*                      NORESCAN COL(MACLMAR);                           00347300
*/*PO.LPVER02 -------------------------------------------------------*/ 00347400
*      END;                                                             00347500
*/*PO.L08 XRETCODE FIXED(32) RETURN CODE-----------------------------*/ 00347600
*              IF NUMBER(RETCODE)>0                                     00347700
*                THEN                                                   00347800
*                    ANS(XRETCODE||                                     00347900
*                     '=GPR15F; /* SET RETURN CODE */')                 00348000
*                      NORESCAN COL(MACLMAR);                           00348100
*/*PO.L09 XRSNCODE FIXED(32) REASON CODE-----------------------------*/ 00348200
*              IF NUMBER(RSNCODE)>0                                     00348300
*                THEN                                                   00348400
*                    ANS(XRSNCODE||                                     00348500
*                     '=GPR00F; /* SET REASON CODE */')                 00348600
*                      NORESCAN COL(MACLMAR);                           00348700
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00348800
*              IF NUMBER(RSNCODE)>0                                     00348900
*                THEN                                                   00349000
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         00349100
*              IF NUMBER(RETCODE)>0                                     00349200
*                THEN                                                   00349300
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00349400
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00349500
*      END;                                                             00349600
*/*PO.L13 IWMSRSRS USAGE INDICATOR-----------------------------------*/ 00349700
*  ZIWMSRSRS='YES';                          /* SET IWMSRSRS USED */    00349800
*/*PO.L15 END OF EXECUTABLE IWMSRSRS-PLISTVER MACRO------------------*/ 00349900
*  IF XMF^='L'                                                          00350000
*    THEN                                                               00350100
*      ANS('END; /* IWMSRSRS-PLISTVER */')                              00350200
*          NORESCAN COL(MACLMAR);                                       00350300
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00350400
*  ANS(MACCONC||'LIST POP NOECHO;') NORESCAN COL(MACLMAR);              00350500
*/*PO.L17 END OF IWMSRSRS MACRO--------------------------------------*/ 00350600
*  ANS(MACCONC||'SPACE;') NORESCAN COL(MACLMAR);                        00350700
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00350800
*/*******************************************************************/  00350900
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00351000
*/*******************************************************************/  00351100
*      END;                                                             00351200
*/*******************************************************************/  00351300
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00351400
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00351500
*/*******************************************************************/  00351600
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00351700
*    THEN                                                               00351800
*      DO;                                                              00351900
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00352000
*                                      DOUBLEWORD MULTIPLES        */   00352100
*/*******************************************************************/  00352200
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00352300
*/*******************************************************************/  00352400
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00352500
*          THEN                                                         00352600
*            DO;                                                        00352700
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00352800
*                THEN                                                   00352900
*                  DO;                                                  00353000
*                    ANS('?EPILOG                                       00353100
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00353200
*                    EHALIST=EHALIST||',AMG,';                          00353300
*                  END;                                                 00353400
*            END;                                                       00353500
*/*******************************************************************/  00353600
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00353700
*/*******************************************************************/  00353800
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00353900
*          THEN                                                         00354000
*            DO;                                                        00354100
*              IF ZPRMMAX>EHAMAXLEN                                     00354200
*                THEN                                                   00354300
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00354400
*            END;                                                       00354500
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00354600
*          ANS('?EPILOG STRING('''||ZPRM(ZI)||''');')                   00354700
*              COL(MACLMAR);                                            00354800
*        END;                                                           00354900
*      END;                                                             00355000
*/*-----------------------------------------------------------------*/  00355100
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00355200
*/*        BY ?EPILOG                                               */  00355300
*/*-----------------------------------------------------------------*/  00355400
*        IF INDEX(EHAREGS,'01P')=0                                      00355500
*          THEN                                                         00355600
*            EHAREGS=EHAREGS||'01P'; /* GPR01P                      */  00355700
*        IF INDEX(EHAREGS,'00F')=0                                      00355800
*          & NUMBER(RSNCODE)>0                                          00355900
*          THEN                                                         00356000
*            EHAREGS=EHAREGS||'00F'; /* GPR00F                      */  00356100
*        IF INDEX(EHAREGS,'15F')=0                                      00356200
*          THEN                                                         00356300
*            EHAREGS=EHAREGS||'15F'; /* GPR15F                      */  00356400
*  RETURN CODE(ZMACRET);                                                00356500
*%END IWMSRSRS;                                                         00356600
