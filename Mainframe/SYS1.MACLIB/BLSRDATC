*/* Start of Specifications for BLSRDATC *****************************/ 00050000
*/*                                                                  */ 00414200
*/* $MAC(BLSRDATC) COMP(SC132) PROD(HBB7703): Describe attributes    */ 00421300
*/*                                                                  */ 00428400
*/* Proprietary statement:                                           */ 00429000
*/*                                                                  */ 00429600
*/*   LICENSED MATERIALS - PROPERTY OF IBM                           */ 00432400
*/*   THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                    */ 00432500
*/*   5647-A01 (C) COPYRIGHT IBM CORP. 1984, 2000                    */ 00432600
*/*                                                                  */ 00432700
*/* STATUS= HBB7703                                                  */ 00432800
*/*                                                                  */ 00432900
*/* External classification: PI                                      */ 00433000
*/* End of external classification:                                  */ 00433100
*/*                                                                  */ 00433200
*/* DESCRIPTIVE NAME: IPCS attributes                                */ 00433300
*/*   ACRONYM:  BLSRDATC                                             */ 00433400
*/*                                                                  */ 00433500
*/* MACRO NAME: BLSRDATC                                             */ 00433600
*/* DSECT NAME: DATC                                                 */ 00433700
*/* COMPONENT:  IPCS (SC132)                                         */ 00433800
*/* EYE-CATCHER: none                                                */ 00433900
*/*                                                                  */ 00434000
*/* STORAGE ATTRIBUTES:                                              */ 00434100
*/*   SUBPOOL:  Any that may be altered by key 8 programs            */ 00434200
*/*   KEY:  8                                                        */ 00434300
*/*   RESIDENCY:  LOC(ANY,ANY)                                       */ 00434400
*/*   MAIN STORAGE:  No                                              */ 00434500
*/*   AUXILIARY STORAGE:  Yes                                        */ 00434600
*/*   VIRTUAL STORAGE:  No                                           */ 00434700
*/*   DATA SPACE: No                                                 */ 00434800
*/*                                                                  */ 00434900
*/* SIZE:                                                            */ 00435000
*/*   ABITS=31:  60 bytes                                            */ 00435100
*/*   ABITS=64:  76 bytes                                            */ 00435200
*/* CREATED BY: IPCS subcommands concerned with debugging            */ 00435300
*/* POINTED TO BY: Parameter lists used by IPCS programs to describe */ 00435400
*/*   a block of storage in a dump or trace data set or a            */ 00435500
*/*   reconstruction of part of a dumped system.                     */ 00435600
*/*                                                                  */ 00435700
*/* SERIALIZATION: None                                              */ 00435800
*/*                                                                  */ 00435900
*/* FUNCTION= Define the structure of the BLSRDATC data area.  This  */ 00437500
*/* is the structure in which IPCS stores the description of the     */ 00441500
*/* extent, data type, ... of an area in a dump.                     */ 00445500
*/*                                                                  */ 00449700
*/* METHOD OF ACCESS:                                                */ 00450000
*/*   Assembler:                                                     */ 00450300
*/*     name BLSRESSY ABITS=<31|64>,  Default is 31                  */ 00450600
*/*                   DSECT=<YES|NO>  Default is YES                 */ 00450900
*/*                                                                  */ 00451200
*/*   PL/X:                                                          */ 00451500
*/*     BLSRESSY <BUFFER>             Default is no room for remark  */ 00451800
*/*              MF(LIST,name,<COMPLETE> scope-and-storage-class);   */ 00452100
*/*                                                                  */ 00452400
*/* DELETED BY: IPCS                                                 */ 00452700
*/* DEPENDENCIES: None                                               */ 00453000
*/* DISTRIBUTION LIBRARY: AMACLIB                                    */ 00453300
*/*                                                                  */ 00453600
*/* ================================================================ */ 00453900
*/*                                                                  */ 00454900
*/* CHANGE ACTIVITY=                                                 */ 00457500
*/*                                                                  */ 00460100
*/*   Products=                                                      */ 00462700
*/* $L0= MVSIPCS,EIP1102,78001,PDE1: MVS IPCS initial release code   */ 00465300
*/* $L1= SRVASADA,JBB2220,84165,PDE1: Automatic SADUMP analysis      */ 00467900
*/*    = IPCSENH,HBB3310,86158,PDE1: Suppress assembler macro in     */ 00468900
*/*      PLAS source listing                                         */ 00469900
*/*                                                                  */ 00470000
*/* ---------------------------------------------------------------- */ 00470100
*/*                                                                  */ 00470200
*/*   Hardware=                                                      */ 00470300
*/* $H1= 64BIT,HBB7703,99049,PDE1: 64-bit support                    */ 00470400
*/*                                                                  */ 00470500
*/* ---------------------------------------------------------------- */ 00470600
*/*                                                                  */ 00470700
*/*   Design changes=                                                */ 00470800
*/* $D1= MACRO,HIP2102,78347,PDE1: Eliminate unnecessary symbols     */ 00471000
*/* $D2= QUALITY,HIP2102,82025,PDE1: Improve comments, remarks       */ 00478100
*/* $D3= DCR0049,JBB2125,83116,PDE1: Get/Store symbol services       */ 00481600
*/*                                                                  */ 00485200
*/* ---------------------------------------------------------------- */ 00485500
*/*                                                                  */ 00485800
*/*   PTMs=                                                          */ 00486300
*/* $P1= PA20624,JBB2220,85283,PDE1: Supply a default length for     */ 00487400
*/*      the assembler structure when DSECT=NO is specified.         */ 00488500
*/*                                                                  */ 00489600
*/* ---------------------------------------------------------------- */ 00489900
*/*                                                                  */ 00490200
*/*   Maintenance= none                                              */ 00490700
*/*                                                                  */ 00491800
*/*** End of Specifications for BLSRDATC *****************************/ 00492500
*/* Treat assembler macro as PLAS full-width remark ******************* 00493300
         MACRO                                                          00494000
&P       BLSRDATC &DSECT=YES,&ABITS=31                             @H1C 00496900
         GBLA  &BLSABIT           ABITS                            @H1A 00499800
         GBLB  &EDATC             Blurb produced once in assembly  @D3A 00502800
         BLSABITS ABITS=&ABITS.   Process ABITS option             @H1A 00505000
         IEZBITS ,                Define symbolic bits             @D3A 00507200
         AIF   (&EDATC).L000      Blurb produced once in assembly  @D3A 00511600
*---------------------------------------------------------------------- 00516000
*                                                                       00520400
* IPCS records the following properties for areas of storage:           00524800
*                                                                       00529200
* - The offset between an addressed byte and the physical origin        00533600
*   of this area.                                                       00538000
*                                                                       00542400
* - The physical length of this area.                                   00546800
*                                                                       00551200
* - A data type.                                                        00555600
*                                                                       00560000
* - An indication whether the area is scalar or an array and, if        00564400
*   the area is an array, the number of entries in the array            00568800
*   and the subscript which applies to the first entry.                 00573200
*                                                                       00577600
*---------------------------------------------------------------------- 00582000
&EDATC   SETB  1                  Blurb produced once in assembly  @D3A 00586400
.L000    AIF   (&BLSABIT EQ 64).OVERBAR ABITS=64 attributes        @H1A 00589300
         AIF   ('&DSECT' EQ 'NO').L010 No DSECT statement          @H1C 00592200
&P       DSECT ,                  IPCS attribute descriptor        @D3A 00595200
         AGO   .L020              Define structure of record       @D3A 00599600
.L010    ANOP  ,                  No DSECT statement               @D3A 00604000
         DS    0F                 Align structure on boundary      @P1C 00606900
&P       DS    0CL60              IPCS attribute descriptor        @P1A 00609800
.L020    ANOP  ,                  Define structure of record       @D3A 00612800
&P.00    DS    0C                 Begin BLSRDATC               #MD99049 00617200
&P.OF    DC    F'0'               Offset in bytes                  @D3A 00621600
&P.LE    DC    F'4'               Length in bytes                  @D3A 00626000
&P.OB    DC    FL1'0'                                              @D3A 00630400
&P.LB    DC    FL1'0'                                              @D3A 00634800
&P.T     BLSRDATT DSECT=NO        Data type                        @D3A 00639200
&P.IM    DC    F'0'               Array entry count                @D3A 00643600
&P.IL    DC    F'0'               Subscript of initial array entry @D3A 00648000
         AGO   .ABITANY           Common exit path                 @H1A 00648200
.OVERBAR AIF   ('&DSECT' EQ 'NO').L110 No DSECT statement          @H1A 00648400
&P       DSECT ,                  IPCS attribute descriptor        @H1P 00648600
         AGO   .L120              Define structure of record       @H1A 00648800
.L110    ANOP  ,                  No DSECT statement               @H1A 00649000
         DS    0F                 Align structure on boundary      @H1A 00649200
&P       DS    0CL76              IPCS attribute descriptor        @H1A 00649400
.L120    ANOP  ,                  Define structure of record       @H1A 00649600
&P.00    DS    0C                 Begin BLSRDATC               #MD99049 00649800
&P.OF    DC    XL8'0'             Offset in bytes                  @H1A 00650000
&P.LE    DC    XL8'0000000000000004' Length in bytes               @H1A 00650200
&P.OB    DC    FL1'0'                                              @H1P 00650400
&P.LB    DC    FL1'0'                                              @H1P 00650600
&P.T     BLSRDATT DSECT=NO        Data type                        @H1P 00650800
&P.IM    DC    XL8'0'             Array entry count                @H1A 00651000
&P.IL    DC    XL8'0'             Subscript of initial array entry @H1A 00651200
.ABITANY ANOP  ,                  Common exit path                 @H1C 00651400
&P.F     DC    XL4'00'            Flags                            @D3A 00652400
&P.FA    EQU   BIT0               Array                            @D3A 00656800
         DC    XL4'00'                                             @D3A 00661200
&P.99    DS    0C                 End BLSRDATC                 #MD99049 00665600
         MEND  ,                  End assembler macro BLSRDATC       */ 00670000
*                                                                       00671400
*%BLSRDATC:                         /* Describe area properties      */ 00674400
*   MACRO KEYS(ABITS,               /* Entry                         */ 00677300
*       E,                          /* Entry                         */ 00680200
*       L,                          /* Length                        */ 00683200
*       MF,                         /* Standard macro keyword        */ 00687600
*       O);                         /* Offset                        */ 00692000
*                                                                       00695900
*/*------------------------------------------------------------------*/ 00699800
*/* Define External Macro-Variables                                  */ 00733100
*/*------------------------------------------------------------------*/ 00766400
*                                                                       00800000
*   DECLARE                         /* External macro variables      */ 00850000
*     BLSABIT  FIXED EXTERNAL,      /* ABITS                     @H1A*/ 00855500
*     BLSADC   CHARACTER EXTERNAL,  /* Data type                     */ 00861000
*     ELSOPTS  CHARACTER EXTERNAL,  /* IPCS macro options        @D1A*/ 00866600
*     ELSRDATC CHARACTER EXTERNAL,  /* BLSRDATC global data      @D1A*/ 00883200
*     EHBENDCHAR CHARACTER EXTERNAL, /* Final punctuation            */ 00900000
*     EHBLVL1  CHARACTER EXTERNAL,  /* First level number            */ 00950000
*     EHBLVL2  CHARACTER EXTERNAL,  /* Second level number           */ 01000000
*     EHBLVL3  CHARACTER EXTERNAL,  /* Third level number            */ 01050000
*     EHBMF1   CHARACTER EXTERNAL,  /* Macro form                    */ 01100000
*     EHBMF2   CHARACTER EXTERNAL,  /* Prefix characters             */ 01150000
*     EHBMF3   CHARACTER EXTERNAL,  /* Scope/storage class           */ 01200000
*     EHBMF3A  CHARACTER EXTERNAL,  /* Complete initialization flag  */ 01250000
*     EHBCOL1  FIXED EXTERNAL,      /* First indentation column      */ 01300000
*     EHBCOL2  FIXED EXTERNAL,      /* Second indentation column     */ 01350000
*     EHBCOL3  FIXED EXTERNAL,      /* Third indentation column      */ 01400000
*     EHBRC    FIXED EXTERNAL;      /* Macro return code             */ 01450000
*   DEACTIVATE                      /* Prevent accidents         @D1P*/ 01458300
*       ELSRDATC;                   /* BLSRDATC global data      @D1A*/ 01466600
*                                                                       01470700
*/*------------------------------------------------------------------*/ 01474900
*/* Define Internal Macro-Variables                                  */ 01483200
*/*------------------------------------------------------------------*/ 01491500
*                                                                       01541500
*   DECLARE                         /* Internal macro variables      */ 01591500
*     CENDCHAR CHARACTER INTERNAL,  /* Final punctuation             */ 01641500
*     CE1      CHARACTER INTERNAL,  /* Initial entry number          */ 01691500
*     CE2      CHARACTER INTERNAL,  /* Final entry number            */ 01741500
*     CLVL2    CHARACTER INTERNAL,  /* Second level number           */ 01791500
*     CLVL3    CHARACTER INTERNAL,  /* Third level number            */ 01841500
*     CMF1     CHARACTER INTERNAL,  /* Macro form                    */ 01891500
*     CMF2     CHARACTER INTERNAL,  /* Prefix characters             */ 01941500
*     CMF3A    CHARACTER INTERNAL,  /* Complete initialization flag  */ 01991500
*     CQCOMPLETE CHARACTER INTERNAL, /* Literal                      */ 02041500
*     CQINITIAL CHARACTER INTERNAL, /* Literal                       */ 02091500
*     FCOL2    FIXED INTERNAL,      /* Second indentation column     */ 02141500
*     FCOL3    FIXED INTERNAL,      /* Third indentation column      */ 02191500
*     F1       FIXED INTERNAL;      /* Utility                       */ 02241500
*   DEACTIVATE CENDCHAR,CE1,CE2,CLVL2,CLVL3,CMF1,CMF2,CMF3A,CQCOMPLETE, 02291500
*       CQINITIAL,FCOL2,FCOL3,F1;   /* Prevent accidents         @D2C*/ 02341500
*   CQCOMPLETE = 'COMPLETE';        /* Literal                       */ 02391500
*   CQINITIAL = ' INITIAL(';        /* Literal                       */ 02441500
*   ANSWER('?'||MACLABEL||'BLRMF('||MF||')FORMS(L,S);');                02491500
*   CENDCHAR = EHBENDCHAR;          /* Final punctuation             */ 02541500
*   EHBENDCHAR = ',';               /* Final punctuation             */ 02591500
*   CLVL2 = EHBLVL2;                /* Second level number           */ 02641500
*   CLVL3 = EHBLVL3;                /* Third level number            */ 02691500
*   CMF1 = EHBMF1;                  /* Macro form                    */ 02741500
*   CMF2 = EHBMF2;                  /* Prefix characters             */ 02791500
*   CMF3A = EHBMF3A;                /* Complete initialization flag  */ 02841500
*   FCOL2 = EHBCOL2;                /* Second indentation column     */ 02891500
*   FCOL3 = EHBCOL3;                /* Third indentation column      */ 02941500
*   ANSWER('?BLSABITS '||ABITS||';'); /* Process ABITS           @H1A*/ 02966500
*   IF EHBRC > 8 THEN               /* Serious error detected        */ 02991500
*     GO TO L99900;                 /* Serious error exit            */ 03041500
*   IF CMF1 = 'LIST' THEN           /* List form                     */ 03081500
*     ANSWER('DECLARE/*BLSRDATC #MD99049*/') COLUMN(5); /*       @H1C*/ 03121500
*   IF INDEX(ELSOPTS,'DEBUG') = 0 THEN /* Minimize debugging data       03161500
*                                                                @D1A*/ 03201500
*     DO;                           /* Minimize debugging data   @D1A*/ 03241500
*       IF EHBLVL1(1:1) ^= '1' THEN /* Level number required     @D1A*/ 03291500
*         ANSWER(EHBLVL1) COLUMN(EHBCOL1); /*                    @D1A*/ 03341500
*       ANSWER(CMF2||EHBMF3||' CHARACTER(60) BOUNDARY(WORD)'||          03391500
*           EHBENDCHAR||'/*BLSRDATC #MD99049*/') /* MACDATE          */ 03441500
*           COLUMN(EHBCOL1);        /*                           @H1C*/ 03491500
*     END;                          /* Minimize debugging data   @D1A*/ 03541500
*   ELSE                            /* Debugging data            @D1A*/ 03591500
*                                                                       03641500
*     /***************************************************************/ 03691500
*     /*                                                             */ 03741500
*     /* Debugging Data                                              */ 03791500
*     /*                                                             */ 03841500
*     /***************************************************************/ 03891500
*                                                                       03941500
*     DO;                           /* Debugging data            @D1A*/ 03991500
*       IF LENGTH(ELSRDATC) = 0 THEN /* Produce blurb            @L1C*/ 03994000
*         DO;                       /* Produce blurb             @L1M*/ 03996500
*           ANSWER('/*--------------------------------------------------03999000
*----------------*/ /* IPCS records the following properties for areas o04001500
*f storage:      */ /* (1) The offset between an addressed byte and the 04004000
*physical origin */ /*     of this area.                                04006500
*                */') COLUMN(2);    /*                           @L1M*/ 04009000
*           ANSWER('/* (2) The physical length of this area.            04011500
*                */ /* (3) A data type.                                 04014000
*                */ /* (4) An indication whether the area is scalar or a04016500
*n array and, if */ /*     the area is an array, the number of entries i04019000
*n the array     */ /*     and the subscript which applies to the first 04021500
*entry.          */ /*--------------------------------------------------04024000
*----------------*/') COLUMN(2);    /*                           @L1M*/ 04026500
*           ELSRDATC = CMF2;        /* Blurb produced            @L1C*/ 04029000
*         END;                      /* Produce blurb             @L1M*/ 04031500
*       ELSE                        /* Suppress blurb                */ 04034000
*         ANSWER('/*Block comment before '||ELSRDATC||                  04036500
*             ' also pertains to '||CMF2||'*/') COLUMN(7); /*    @L1A*/ 04039000
*       IF BLSABIT = 64 THEN        /* ABITS(64) option          @H1A*/ 04074000
*         DO;                       /* ABITS(64) option          @H1A*/ 04109000
*           ANSWER(EHBLVL1||CMF2||EHBMF3||                              04144000
*               'CHARACTER(76) BOUNDARY(WORD),/*BLSRDATC'||MACLIST||' ' 04179000
*               ||MACKEYS||'*/') COLUMN(EHBCOL1); /*             @H1A*/ 04214000
*           ANSWER(CLVL2||CMF2||'00 CHARACTER(0),/*BLSRDATC #MD99049*/' 04249000
*               ) COLUMN(FCOL2);    /*                           @H1A*/ 04284000
*           ANSWER(CLVL2||CMF2||'OF CHARACTER(8)') /*            @H1A*/ 04319000
*               COLUMN(FCOL2);                                          04354000
*           IF CMF3A = CQCOMPLETE THEN /* Initialize             @H1P*/ 04389000
*             DO;                   /* Initialize                @H1P*/ 04424000
*               ANSWER(CQINITIAL);  /*                           @H1P*/ 04459000
*               IF LENGTH(O(1)) > 0 THEN /* Explicit byte offset @H1P*/ 04494000
*                 ANSWER(O(1)||')'); /*                          @H1P*/ 04529000
*               ELSE                /* Implicit byte offset      @H1A*/ 04564000
*                 ANSWER('''00''X)');                                   04599000
*             END;                  /* Initialize                @H1P*/ 04634000
*           ANSWER(',/*Offset in bytes*/'); /*                   @H1P*/ 04669000
*           ANSWER(CLVL2||CMF2||'LE '||BLSADC) /*                @H1A*/ 04704000
*               COLUMN(FCOL2);                                          04739000
*           IF CMF3A = CQCOMPLETE THEN /* Initialize             @H1P*/ 04774000
*             DO;                   /* Initialize                @H1P*/ 04809000
*               ANSWER(CQINITIAL);  /*                           @H1P*/ 04844000
*               SELECT;             /* Initial value             @H1A*/ 04863400
*                 WHEN(LENGTH(L(1)) > 0) /* Explicit byte length @H1A*/ 04882800
*                   ANSWER(L(1)||')'); /*                        @H1P*/ 04902200
*                 WHEN(BLSABIT = 64) /* ABITS(64) expansion      @H1A*/ 04921600
*                   ANSWER('''0000000000000004''X)'); /*         @H1A*/ 04941000
*                 OTHERWISE         /* Implicit byte length      @H1P*/ 04960400
*                   ANSWER('4)');                                       04979800
*               END;                /* Initial value             @H1A*/ 04999200
*             END;                  /* Initialize                @H1P*/ 05019000
*           ANSWER(',/*Length in bytes*/'); /*                   @H1P*/ 05054000
*         END;                      /* ABITS(64) option          @H1A*/ 05089000
*       ELSE                        /* ABITS(31) option          @H1A*/ 05124000
*         DO;                       /* ABITS(31) option          @H1A*/ 05159000
*           ANSWER(EHBLVL1||CMF2||EHBMF3||                              05194000
*               'CHARACTER(60) BOUNDARY(WORD),/*BLSRDATC'||MACLIST||' ' 05229000
*               ||MACKEYS||'*/') COLUMN(EHBCOL1); /*             @D1C*/ 05264000
*           ANSWER(CLVL2||CMF2||'00 CHARACTER(0),/*BLSRDATC #MD99049*/' 05299000
*               ) COLUMN(FCOL2);    /*                           @H1C*/ 05334000
*           ANSWER(CLVL2||CMF2||'OF SIGNED BINARY(31)') COLUMN(FCOL2);  05369000
*           IF CMF3A = CQCOMPLETE THEN /* Initialize                 */ 05404000
*             DO;                   /* Initialize                    */ 05439000
*               ANSWER(CQINITIAL);                                      05474000
*               IF LENGTH(O(1)) > 0 THEN /* Explicit byte offset     */ 05509000
*                 ANSWER(O(1)||')');                                    05544000
*               ELSE                /* Implicit byte offset          */ 05579000
*                 ANSWER('0)');                                         05614000
*             END;                  /* Initialize                    */ 05649000
*           ANSWER(',/*Offset in bytes*/'); /*                   @D2C*/ 05684000
*           ANSWER(CLVL2||CMF2||'LE UNSIGNED BINARY(32)') COLUMN(FCOL2) 05719000
*               ;                                                       05754000
*           IF CMF3A = CQCOMPLETE THEN /* Initialize                 */ 05789000
*             DO;                   /* Initialize                    */ 05824000
*               ANSWER(CQINITIAL);                                      05859000
*               IF LENGTH(L(1)) > 0 THEN /* Explicit byte length     */ 05894000
*                 ANSWER(L(1)||')');                                    05929000
*               ELSE                /* Implicit byte length          */ 05964000
*                 ANSWER('4)');                                         05999000
*             END;                  /* Initialize                    */ 06034000
*           ANSWER(',/*Length in bytes*/'); /*                   @D2C*/ 06069000
*         END;                      /* ABITS(31) option          @H1A*/ 06105200
*       ANSWER(CLVL2||CMF2||'OB UNSIGNED BINARY(8)') COLUMN(FCOL2);     06141500
*       IF CMF3A = CQCOMPLETE THEN  /* Initialize                    */ 06191500
*         DO;                       /* Initialize                    */ 06241500
*           ANSWER(CQINITIAL);                                          06291500
*           IF LENGTH(O(2)) > 0 THEN /* Explicit bit offset          */ 06341500
*             ANSWER(O(2)||')');                                        06391500
*           ELSE                    /* Implicit bit offset           */ 06441500
*             ANSWER('0)');                                             06491500
*         END;                      /* Initialize                    */ 06541500
*       ANSWER(',');                /* PARTIAL BYTE OFFSET           */ 06591500
*       ANSWER(CLVL2||CMF2||'LB UNSIGNED BINARY(8)') COLUMN(FCOL2);     06641500
*       IF CMF3A = CQCOMPLETE THEN  /* Initialize                    */ 06691500
*         DO;                       /* Initialize                    */ 06741500
*           ANSWER(CQINITIAL);                                          06791500
*           IF LENGTH(L(2)) > 0 THEN /* Explicit bit length          */ 06841500
*             ANSWER(L(2)||')');                                        06891500
*           ELSE                    /* Implicit bit length           */ 06941500
*             ANSWER('0)');                                             06991500
*         END;                      /* Initialize                    */ 07041500
*       ANSWER(',');                /* Partial byte length           */ 07091500
*       ANSWER('?BLSRDATT'||MACLIST||' MF(SUBLIST,'||CMF2||'T,'||CMF3A  07141500
*           ||','||CLVL2||');');                                        07191500
*       IF BLSABIT = 64 THEN        /* ABITS(64) option          @H1A*/ 07216500
*         DO;                       /* ABITS(64) option          @H1A*/ 07241500
*           ANSWER(CLVL2||CMF2||'IM '||BLSADC) /*                @H1A*/ 07266500
*               COLUMN(FCOL2);                                          07291500
*           IF CMF3A = CQCOMPLETE THEN /* INITIALIZE             @H1P*/ 07316500
*                                                                       07341500
*             /*******************************************************/ 07346500
*             /*                                                     */ 07351500
*             /* Initialize                                          */ 07356500
*             /*                                                     */ 07361500
*             /*******************************************************/ 07366500
*                                                                       07371500
*             DO;                   /* Initialize                @H1P*/ 07376500
*               ANSWER(CQINITIAL);  /*                           @H1P*/ 07381500
*               SELECT;             /* Initial value             @H1A*/ 07384800
*                 WHEN(LENGTH(E) > 0) /* Array                   @H1A*/ 07388100
*                                                                       07391500
*                   /*************************************************/ 07396500
*                   /*                                               */ 07401500
*                   /* Array                                         */ 07406500
*                   /*                                               */ 07411500
*                   /*************************************************/ 07416500
*                                                                       07421500
*                   DO;             /* Array                     @H1P*/ 07426500
*                     F1 = INDEX(E(1),':'); /* Detect range notation    07431500
*                                                                @H1P*/ 07436500
*                     IF F1 < 2 THEN /* Implicit range origin    @H1P*/ 07441000
*                       CE1 = '1';  /* Initial entry number      @H1P*/ 07445500
*                     ELSE          /* Explicit range origin         */ 07450000
*                       CE1 = E(1,1:F1-1); /* Initial entry number      07454500
*                                                                @H1P*/ 07459000
*                     IF F1 = 0 THEN /* Implicit range end       @H1P*/ 07463500
*                       CE2 = CE1;  /* Final entry number        @H1P*/ 07468000
*                     ELSE          /* Explicit range end        @H1P*/ 07472500
*                       CE2 = E(1,F1+1:LENGTH(E(1))); /* Final entry    07477000
*                                      number                        */ 07481500
*                     ANSWER('1+'||CE2||'-'||CE1||')'); /* Dimension    07486500
*                                                                @H1P*/ 07491500
*                   END;            /* Array                     @H1P*/ 07494300
*                 WHEN(BLSABIT = 64) /* ABITS(64) expansion      @H1A*/ 07497100
*                   ANSWER('''00''X)'); /*                       @H1A*/ 07499900
*                 OTHERWISE         /* Not an array              @H1P*/ 07502700
*                   ANSWER('0)');                                       07505500
*               END;                /* Initial value             @H1A*/ 07508300
*             END;                  /* Initialize                @H1P*/ 07511500
*           ANSWER(',/*Array entry count*/'); /*                 @H1P*/ 07516500
*           ANSWER(CLVL2||CMF2||'IL ') /*                        @H1A*/ 07521500
*               COLUMN(FCOL2);                                          07526500
*           IF BLSABIT = 64 THEN    /* ABITS(64)                 @H1A*/ 07527500
*             ANSWER(BLSADC);       /* Data type                 @H1A*/ 07528500
*           ELSE                    /* ABITS(31)                     */ 07529500
*             ANSWER('SIGNED BINARY(31)'); /* Data type          @H1A*/ 07530500
*           IF CMF3A = CQCOMPLETE THEN /* Initialize             @H1P*/ 07531500
*             DO;                   /* Initialize                @H1P*/ 07536500
*               ANSWER(CQINITIAL);  /*                           @H1P*/ 07541500
*               SELECT;             /* Initial value             @H1A*/ 07544200
*                 WHEN(LENGTH(E) > 0) /* Array                   @H1A*/ 07546900
*                   ANSWER(CE1||')'); /* Initial entry number    @H1P*/ 07549600
*                 WHEN(BLSABIT = 64) /* ABITS(64) expansion      @H1A*/ 07552300
*                   ANSWER('''00''X)'); /*                       @H1A*/ 07555000
*                 OTHERWISE         /* Not an array              @H1P*/ 07557700
*                   ANSWER('0)');                                       07560400
*               END;                /* Initial value             @H1A*/ 07563100
*             END;                  /* Initialize                @H1P*/ 07566500
*           ANSWER(',/*Subscript of initial array entry*/'); /*  @H1P*/ 07571500
*         END;                      /* ABITS(64) option          @H1A*/ 07576500
*       ELSE                        /* ABITS(31) option          @H1A*/ 07581500
*         DO;                       /* ABITS(31) option          @H1A*/ 07586500
*           ANSWER(CLVL2||CMF2||'IM UNSIGNED BINARY(32)') COLUMN(FCOL2) 07591500
*               ;                                                       07596500
*           IF CMF3A = CQCOMPLETE THEN /* INITIALIZE                 */ 07601500
*                                                                       07606500
*             /*******************************************************/ 07611500
*             /*                                                     */ 07616500
*             /* Initialize                                          */ 07621500
*             /*                                                     */ 07626500
*             /*******************************************************/ 07631500
*                                                                       07641500
*             DO;                   /* Initialize                    */ 07691500
*               ANSWER(CQINITIAL);                                      07741500
*               IF LENGTH(E) > 0 THEN /* Array                       */ 07791500
*                                                                       07841500
*                 /***************************************************/ 07891500
*                 /*                                                 */ 07941500
*                 /* Array                                           */ 07991500
*                 /*                                                 */ 08041500
*                 /***************************************************/ 08091500
*                                                                       08141500
*                 DO;               /* Array                         */ 08188000
*                   F1 = INDEX(E(1),':'); /* Detect range notation   */ 08234500
*                   IF F1 < 2 THEN  /* Implicit range origin         */ 08281000
*                     CE1 = '1';    /* Initial entry number          */ 08327500
*                   ELSE            /* Explicit range origin         */ 08374000
*                     CE1 = E(1,1:F1-1); /* Initial entry number     */ 08420500
*                   IF F1 = 0 THEN  /* Implicit range end            */ 08467000
*                     CE2 = CE1;    /* Final entry number            */ 08513500
*                   ELSE            /* Explicit range end            */ 08560000
*                     CE2 = E(1,F1+1:LENGTH(E(1))); /* Final entry      08606500
*                                      number                        */ 08653000
*                   ANSWER('1+'||CE2||'-'||CE1||')'); /* Dimension   */ 08699500
*                 END;              /* Array                         */ 08746000
*               ELSE                /* Not an array                  */ 08792500
*                 ANSWER('0)');                                         08839000
*             END;                  /* Initialize                    */ 08885500
*           ANSWER(',/*Array entry count*/'); /*                 @D2C*/ 08932000
*           ANSWER(CLVL2||CMF2||'IL SIGNED BINARY(31)') COLUMN(FCOL2);  08978500
*           IF CMF3A = CQCOMPLETE THEN /* Initialize                 */ 09025000
*             DO;                   /* Initialize                    */ 09071500
*               ANSWER(CQINITIAL);                                      09118000
*               IF LENGTH(E) > 0 THEN /* Array                       */ 09164500
*                 ANSWER(CE1||')'); /* Initial entry number          */ 09211000
*               ELSE                /* Not an array                  */ 09257500
*                 ANSWER('0)');                                         09304000
*             END;                  /* Initialize                    */ 09350500
*           ANSWER(',/*Subscript of initial array entry*/'); /*  @D2C*/ 09397000
*         END;                      /* ABITS(31) option          @H1A*/ 09444200
*       ANSWER(CLVL2||CMF2||'F BIT(32) BOUNDARY(WORD)') COLUMN(FCOL2);  09491500
*       IF CMF3A = CQCOMPLETE THEN  /* Initialize                    */ 09541500
*         DO;                       /* Initialize                    */ 09591500
*           ANSWER(CQINITIAL);                                          09641500
*           IF LENGTH(E) > 0 THEN   /* Array                         */ 09691500
*             ANSWER('''80000000''X)');                                 09741500
*           ELSE                    /* Not an array                  */ 09791500
*             ANSWER('''00000000''X)');                                 09841500
*         END;                      /* Initialize                    */ 09891500
*       ANSWER(',/*Flags*/');       /*                           @D2C*/ 09941500
*       ANSWER(CLVL3||CMF2||'FA BIT(1),/*Array*/') COLUMN(FCOL3); /*    09991500
*                                                                @D2C*/ 10041500
*       ANSWER(CLVL3||CMF2||'RSV01 BIT(31),') COLUMN(FCOL3); /*  @H1C*/ 10079000
*       ANSWER(CLVL2||CMF2||'RSV02 BIT(32) BOUNDARY(WORD)') COLUMN(     10116500
*           FCOL2);                 /*                           @H1C*/ 10154000
*       IF CMF3A = CQCOMPLETE THEN                                      10191500
*         ANSWER(CQINITIAL||'''00''X)');                                10241500
*       ANSWER(',');                                                    10291500
*       ANSWER(CLVL2||CMF2||'99 CHARACTER(0)'||CENDCHAR||               10341500
*           '/*BLSRDATC #MD99049*/') COLUMN(FCOL2); /*           @H1C*/ 10391500
*     END;                          /* Debugging data            @D1A*/ 10441500
*L99900:                            /* Serious error exit            */ 10491500
*   IF EHBRC > 8 THEN               /* Serious error detected        */ 10541500
*     ANSWER(';/*BLSRDATC'||MACLIST||' '||MACKEYS||'*/') COLUMN(5);     10591500
*   ANSWER('?BLR003(BLSRDATC,'||CHAR(EHBRC)||');');                     10641500
*   RETURN CODE(EHBRC);                                                 10691500
*   %END BLSRDATC;                                                      10741500
