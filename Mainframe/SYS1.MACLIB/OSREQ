*%GOTO OSRQL1; /*                                                       00050000
         MACRO                                                          04800000
&LABEL   OSREQ &FUNCTION,&BUFLIST=,&COLLECTN=,&IADDRESS=,&LENGTH=,     x04850000
               &MGMTCLAS=,&MSGAREA=,&NAME=,&OFFSET=,                   x04900000
               &QEL=,&RELBUF=,&REACODE=,&RETCODE=,                     x04950000
               &RETPD=,&SIZE=,&STORCLAS=,&TOKEN=,&VIEW=,               x04953000
               &TTOKEN=,&MF=                                       @L2C 04956000
         AGO   .OSRQBGN                                                 04959000
.*/                                                                     04963500
*%OSRQL1:;                                                              04968000
*/********************************************************************/ 04972500
*/*                                                                  */ 04977000
*/* $MAC(OSREQ) COMP(OSR) PROD(OAM):                                 */ 04981500
*/*                                                                  */ 04986000
*/*PROPRIETARY V3 STATEMENT                                          */ 04993500
*/*LICENSED MATERIALS - PROPERTY OF IBM                              */ 05001000
*/*"RESTRICTED MATERIALS OF IBM"                                     */ 05008500
*/*5695-DF1                                                          */ 05014100
*/*(C) COPYRIGHT 1989,1997  IBM CORP.                            @L2C*/ 05019700
*/*END PROPRIETARY V3 STATEMENT                                      */ 05025300
*/*                                                                  */ 05025800
*/*                                                                  */ 05031000
*/* FUNCTION: This macro provides the user interface to the          */ 05035500
*/*           Object Storage Manager.                                */ 05040000
*/*                                                                  */ 05044500
*/* SYNTAX: label OSREQ function | (function)                        */ 05049000
*/*                   ,BUFLIST=                                      */ 05053500
*/*                   ,COLLECTN=                                     */ 05058000
*/*                   ,IADDRESS=                                 @D1A*/ 05062500
*/*                   ,LENGTH=                                       */ 05067000
*/*                   ,MGMTCLAS=                                     */ 05071500
*/*                   ,MSGAREA=                                      */ 05076000
*/*                   ,NAME=                                         */ 05080500
*/*                   ,OFFSET=                                       */ 05085000
*/*                   ,QEL=                                          */ 05089500
*/*                   ,RELBUF=                                       */ 05094000
*/*                   ,REACODE=                                      */ 05098500
*/*                   ,RETCODE=                                      */ 05103000
*/*                   ,RETPD=                                        */ 05107500
*/*                   ,SIZE=                                         */ 05112000
*/*                   ,STORCLAS=                                     */ 05116500
*/*                   ,TOKEN=                                        */ 05121000
*/*                   ,VIEW=                                     @02A*/ 05125500
*/*                   ,TTOKEN=                                   @L2A*/ 05127700
*/*                   ,MF=L|(M,op1,COMPLETE)|(E,op1,COMPLETE)        */ 05130000
*/*                                                                  */ 05134500
*/*              op1 (Execute/Modify macro forms)=                   */ 05139000
*/*                       RX-type address or                         */ 05143500
*/*                       register (2) - (12)                        */ 05148000
*/*                                                                  */ 05152500
*/*      --------------------------------------------                */ 05157000
*/*      |Function #--> | 1 | 2 | 3 | 4 | 5 | 6 | 7 |                */ 05161500
*/*      --------------------------------------------                */ 05166000
*/*      |Function----> | A | S | R | Q | C | D | U |                */ 05170500
*/*      |              | C | T | E | U | H | E | N |                */ 05175000
*/*      |Keyword       | C | O | T | E | A | L | A |                */ 05179500
*/*      |  |           | E | R | R | R | N | E | C |                */ 05184000
*/*      |  |           | S | E | I | Y | G | T | C |                */ 05188500
*/*      |  |           | S |   | E |   | E | E | E |                */ 05193000
*/*      |  |           |   |   | V |   |   |   | S |                */ 05197500
*/*      |  V           |   |   | E |   |   |   | S |                */ 05202000
*/*      |-------------------------------------------                */ 05206500
*/*      |  Function....| R | R | R | R | R | R | R |                */ 05211000
*/*      |  BUFLIST.....|   | A | A |   |   |   |   |                */ 05215500
*/*      |  COLLECTN....|   | A | A | A | A | A |   |                */ 05220000
*/*      |  IADDRESS....|   |   |   |   |   |   |   |            @D1A*/ 05224500
*/*      |  LENGTH......|   |   |   |   |   |   |   |                */ 05229000
*/*      |  MGMTCLAS....|   |   |   |   |   |   |   |                */ 05233500
*/*      |  MSGAREA.....|   |   |   |   |   |   |   |                */ 05238000
*/*      |  NAME........|   | A | A | A | A | A |   |                */ 05242500
*/*      |  OFFSET......|   |   |   |   |   |   |   |                */ 05247000
*/*      |  QEL.........|   |   |   | A |   |   |   |                */ 05251500
*/*      |  RELBUF......|   |   |   |   |   |   |   |                */ 05256000
*/*      |  REACODE.....|   |   |   |   |   |   |   |                */ 05260500
*/*      |  RETCODE.....|   |   |   |   |   |   |   |                */ 05265000
*/*      |  RETPD.......|   |   |   |   |   |   |   |                */ 05269500
*/*      |  SIZE........|   | A |   |   |   |   |   |                */ 05274000
*/*      |  STORCLAS....|   |   |   |   |   |   |   |                */ 05278500
*/*      |  TOKEN.......| A | A | A | A | A | A | A |                */ 05283000
*/*      |  VIEW........|   |   |   |   |   |   |   |            @02A*/ 05287500
*/*      |  TTOKEN......|   |   |   |   |   |   |   |            @L2A*/ 05289700
*/*      |  MF..........| R | R | R | R | R | R | R |                */ 05292000
*/*      --------------------------------------------                */ 05296500
*/*                                                                  */ 05301000
*/*       R  = Required keyword                                      */ 05305500
*/*       A  = Optional keyword from a syntactic standpoint but      */ 05310000
*/*            required if COMPLETE coded on MF. It is required      */ 05314500
*/*            during execution.                                     */ 05319000
*/*                                                                  */ 05323500
*/* NOTE: 1. All keywords not listed as "A" or "R" are optional      */ 05328000
*/*          on all macro forms for all functions.                   */ 05332500
*/*                                                                  */ 05337000
*/*       2. If the function (first positional parameter) is in      */ 05341500
*/*          parentheses and MF=E or MF=M is coded, then the         */ 05346000
*/*          function value is already in the parameter area         */ 05350500
*/*          and is coded only for syntax checking.  Note that       */ 05355000
*/*          this parameter is always required.                      */ 05359500
*/*                                                                  */ 05364000
*/* CHANGE ACTIVITY:                                                 */ 05368500
*/*    $L0=JDP1110 110 871015 STLWER: Object Storage Manager         */ 05373000
*/*    $L1=JDP3227 320 881012 TPCHAD: OAM Release 1              @L1A*/ 05377500
*/*    $O1=OY29609 320 900219 TPCHLO: Correct alignment error        */ 05382000
*/*        between macro list and LTORG statement                @O1A*/ 05386500
*/*    $02=OY35530 320 900717 TPCHLO: Add VIEW=PRIMARY|BACKUP keyword*/ 05391000
*/*        to allow user to specify which copy to retrieve       @02A*/ 05395500
*/*    $D1=KBE0022 331 900809 TPCHLO: Add IADDRESS keyword to allow  */ 05400000
*/*        an application to specify the address of its own DB2      */ 05404500
*/*        language interface module.                                */ 05409000
*/*                                                                  */ 05413500
*/*    $P1=KBK0063 410 920309 TUCTNN: Validate control blk       @P1A*/ 05418000
*/*    $L2=HDZ11D0 140 960306 TUCSPP: SMF record support,        @L2A*/ 05419100
*/*                                   allow users to specify     @L2A*/ 05420200
*/*                                   a 16-byte tracking token   @L2A*/ 05421300
*/*                                                                  */ 05422500
*/********************************************************************/ 05427000
*%GOTO OSRQMAP; /*                                                      05431500
.OSRQBGN ANOP                                                           05436000
.*                                                                      05450000
.********************************************************************** 05500000
.*                      DECLARE LOCAL MACRO VARIABLES                 * 05550000
.********************************************************************** 05600000
.*                                                                      05612500
         LCLC  &TEMP         Temporary variable                         05625000
         LCLA  &CTR          Miscellaneous counter                      05637500
         LCLC  &FCODE        Function code (1=ACCESS, 2=STORE, ...)     05650000
         LCLC  &CBLKID       Parameter Control block ID                 05662500
         LCLC  &CBLKLN       Parameter Control block length (80)        05675000
         LCLC  &FNAME        Function name (ACCESS, STORE, ...)         05687500
         LCLC  &VCODE        Version code for parameter list and area   05700000
         LCLC  &RCODE        Release code for parameter list and area   05725000
         LCLC  &LCODE        Level code for parameter list and area     05750000
         LCLC  &RO           Codes for required and optional parms     X05775000
                               Each position represents a keyword       05800000
         LCLB  &MFCOMPLETE   COMPLETE coded as third value on MF        05850000
         LCLC  &REQUIRD      Names of required but omitted keywords     05900000
         LCLC  &DALLOWD      Names of disallowed but coded keywords     05950000
         LCLC  &SWSTOP       Stop processing switch (YES or NO)         06300000
         LCLC  &LIST         Where the parameter list is                06350000
         LCLC  &PXIIGN       MNOTE phrase                               06400000
         LCLC  &PNOTXT       MNOTE phrase                               06450000
.*                                                                      06500000
.********************************************************************** 06550000
.*   DECLARE RELBUF FLAG, VIEW FLAG, AND ASSOCIATED FLAG BITS     @02C  06557100
.********************************************************************** 06564200
.*                                                                      06571300
         LCLB  &RELBON,&VIEWB,&B2ON,&B3ON,&B4ON,&B5ON,&B6ON,&B7ON  @02C 06578400
.*                                                                      06585500
.********************************************************************** 06592600
.*                   INITIALIZE LOCAL MACRO VARIABLES                 * 06600000
.********************************************************************** 06650000
.***************************************************************        06659200
.*  MISCELLANEOUS VARIABLES AND SWITCHES                       *        06668400
.***************************************************************        06677600
.*                                                                      06686800
&REQERR  SETC  '240'          Token contents invalid reason             06696000
&OSMAERR SETC  '680'          Control blk not initialize rsn code  @P1A 06705200
.*                                                                      06714400
&PLSERR1 SETC  '0101'         OSREQ parmlist in unusable strg reason    06723600
.*                                                                      06732800
&TKNERR1 SETC  '0901'         Token in unusable storage rsn bytes 2,3   06742000
&TKNERR2 SETC  '0902'         Token contents invalid rsn bytes 2,3      06751200
&NOOSMA  SETC  '0100'         Control block not build rsn byte 2,3 @P1A 06760400
.*                                                                      06769600
&BADREQT SETC  '8'            Request unsuccessful return code          06778800
&BADREQO SETC  '12'           Request unsuccessful return code     @P1A 06788000
.*                                                                      06797200
&FCODE   SETC  '0'            Initial function code value (invalid)     06806400
&CBLKID  SETC  'OSRQ'         Parameter control block ID                06815600
&TOKNID  SETC  'OSMI'         Initialized Token control block ID        06824800
&OSMAID  SETC  'OSMA'         Initialized control block ID         @P1A 06834000
&MWAID   SETC  'MWA '         Initialized control block ID              06843200
&CBLKLN  SETC  '96'           Parameter Control Block length            06852400
&VCODE   SETC  '1'            Version number                            06861600
&RCODE   SETC  '1'            Release number                            06870800
&LCODE   SETC  '0'            Level number                              06880000
&FNAME   SETC  (8)' '         Function name (initial = blanks)          06889200
&SWSTOP  SETC  'NO'           Do not stop processing                    06900000
.*                                                                      06950000
&B2ON    SETB  0              Assume bit 2 is not to be changed   @02D  07000000
&B3ON    SETB  0              Assume bit 3 is not to be changed         07050000
&B4ON    SETB  0              Assume bit 4 is not to be changed         07100000
&B5ON    SETB  0              Assume bit 5 is not to be changed         07150000
&B6ON    SETB  0              Assume bit 6 is not to be changed         07200000
&B7ON    SETB  0              Assume bit 7 is not to be changed         07250000
.*                                                                      07300000
&PXIIGN  SETC  'EXTRA ITEMS ARE IGNORED.'                               07350000
&PNOTXT  SETC  'NO TEXT IS GENERATED.'                                  07400000
.*                                                                      07450000
.********************************************************************** 07490000
.*                CHECK FOR CORRECT MACRO FORM.                       * 07530000
.********************************************************************** 07570000
.*                                                                      07610000
         AIF   (T'&MF EQ 'O').MFNOTE    Go if MF omitted                07650000
         AIF   ('&MF(1)' EQ 'L').LFORM  Go if MF=L                      07700000
         AIF   ('&MF(1)' EQ 'E' OR '&MF(1)' EQ 'M').EMFORM  Do MF=E, M  07800000
.MFNOTE  MNOTE 8,'INCORRECT MACRO FORM.  MF MUST BE L, M or E. &PNOTXT' 07850000
         AGO   .MFERROR                                                 07950000
.*                                                                      07975000
.EMFORM  AIF   (N'&MF LE 3).EMCK3       Go if not too many parameters   08000000
         MNOTE 8,'TOO MANY VALUES CODED WITH MF=&MF..  &PNOTXT'         08050000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  08100000
.*                                                                      08133300
.EMCK3   AIF   (N'&MF LE 2).EMSEE2      Go if COMPLETE not specified    08166600
         AIF   ('&MF(3)' NE 'COMPLETE').EMCK4                           08200000
&MFCOMPLETE SETB 1             Remember that COMPLETE was coded         08250000
         AGO   .CKFUNC                                                  08300000
.*                                                                      08325000
.EMCK4   MNOTE 8,'IF THE THIRD VALUE OF MF IS CODED, IT MUST BE ''COMPLx08350000
               ETE''.  &PNOTXT'                                         08400000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  08450000
.*                                                                      08475000
.EMSEE2  AIF   (N'&MF EQ 2).CKFUNC      Go if correct number of params  08500000
         MNOTE 8,'WITH MF=&MF. A SECOND VALUE IS REQUIRED.  &PNOTXT'    08550000
         AGO   .MFERROR                                                 08600000
.*                                                                      08650000
.LFORM   AIF   ('&BUFLIST' EQ '&BUFLIST(1)' AND                        x08700000
               '&COLLECTN' EQ '&COLLECTN(1)' AND                       x08750000
               '&IADDRESS' EQ '&IADDRESS(1)' AND                       x08800000
               '&LENGTH' EQ '&LENGTH(1)' AND                           x08850000
               '&MGMTCLAS' EQ '&MGMTCLAS(1)' AND                       x09150000
               '&MSGAREA' EQ '&MSGAREA(1)' AND                         x09175000
               '&NAME' EQ '&NAME(1)' AND                               x09200000
               '&OFFSET' EQ '&OFFSET(1)' AND                           x09250000
               '&QEL' EQ '&QEL(1)' AND                                 x09300000
               '&REACODE' EQ '&REACODE(1)' AND                         x09350000
               '&RETCODE' EQ '&RETCODE(1)' AND                         x09400000
               '&RETPD' EQ '&RETPD(1)' AND                             x09450000
               '&SIZE' EQ '&SIZE(1)' AND                               x09500000
               '&STORCLAS' EQ '&STORCLAS(1)' AND                       x09550000
               '&TOKEN' EQ '&TOKEN(1)' AND                             X09583300
               '&TTOKEN' EQ '&TTOKEN(1)').ALFORM                   @L2C 09616600
         MNOTE 8,'REGISTER VALUES ARE NOT ALLOWED WITH MF=L.  &PNOTXT'  09650000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  09700000
.*                                                                      09750000
.ALFORM  AIF   (N'&MF EQ 1).CKFUNC      Go if correct number of values  10300000
         MNOTE 4,'EXTRA VALUE OF MF=&MF(1)..  &PXIIGN'                  10350000
         AGO   .CKFUNC                                                  10400000
.*                                                                      10425000
.MFERROR ANOP                                                           10450000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  10500000
.*                                                                      10525000
.********************************************************************** 10550000
.*               CHECK VALIDITY OF THE MACRO INVOCATION               * 10600000
.********************************************************************** 10650000
.*                                                                      10675000
.CKFUNC  ANOP                      Check function name                  10700000
&FUNC    SETC  '&FUNCTION(1)'      Remove parentheses if present        10750000
         AIF   (N'&FUNCTION LE 1).CHK1POS                               10800000
         MNOTE 4,'EXTRA VALUES OF &FUNCTION AFTER &FUNC ARE IGNORED.'   10850000
.CHK1POS AIF   (N'&SYSLIST EQ 1).CKACCE Go if correct number of params  10900000
         AIF   (N'&SYSLIST GT 1).ERR6   Go if too many positional parms 10950000
         MNOTE 8,'THE REQUIRED OSREQ SERVICE (FIRST POSITIONAL PARAMETEx11000000
               R) IS NOT SPECIFIED.  &PNOTXT'                           11050000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  11100000
         AGO   .CKVIEW         Continue validity checking          @02C 11150000
.ERR6    MNOTE 4,'MORE THAN ONE POSITIONAL PARAMETER.  ONLY &FUNC WILL x11200000
               BE USED'                                                 11250000
.*                                                                      11300000
.********************************************************************** 11350000
.*        CHECK FOR REQUESTED FUNCTION AND FOR KEYWORDS THAT SHOULD   * 11400000
.*        NOT BE PRESENT.                                             * 11450000
.********************************************************************** 11500000
.*   Each position in &RO corresponds to a keyword.  For each function* 11550000
.* &RO is set to codes that tell which keywords are optional (O),     * 11600000
.* required (R) or not allowed (blank). Each possible parameter except* 11650000
.* the function name (e.g. QUERY) is represented in &RO.              * 11700000
.* This is the logic:                                                 * 11750000
.* 1. Set &RO on the assumption we are doing the execute form.        * 11800000
.* 2. If COMPLETE was coded, replace &RO such that some of the codes  * 11850000
.*    are R instead of O.                                             * 11900000
.* 3. If the macro format is list or modify, change all the R codes to* 11950000
.*    O to make all supported keywords optional.                      * 12000000
.*   (The keywords represented in &RO are in alphabetic order)        * 12050000
.********************************************************************** 12100000
.*                                                                      12150000
.CKACCE  AIF   ('&FUNC' NE 'ACCESS').CKSTORE                            12300000
&RO      SETC  'OOOOOOOOOOOOOOOOOOR' Req'd, optional, allowed      @L2C 12350000
&FCODE   SETC  '1'            Set function code for ACCESS              12400000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  12450000
&RO      SETC  'OOOOOOOOOOOOOOOROOR' Codes when COMPLETE is coded  @L2C 12500000
         AGO   .CKRMOD                                                  12550000
.*                                                                      12600000
.CKSTORE AIF   ('&FUNC' NE 'STORE').CKRETR                              12650000
&RO      SETC  'OOOOOOOOOOOOOOOOOOR' Req'd,optional,allowed codes  @L2C 12700000
&FCODE   SETC  '2'            Set function code for STORE               12750000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  12800000
&RO      SETC  'RROOOOROOOOOOROROOR' Codes when COMPLETE is coded  @L2C 12850000
         AGO   .CKRMOD                                                  12900000
.*                                                                      12950000
.CKRETR  AIF   ('&FUNC' NE 'RETRIEVE').CKQUERY                          13000000
&RO      SETC  'OOOOOOOOOOOOOOOOOOR' Req'd,optional,allowed codes  @L2C 13050000
&FCODE   SETC  '3'            Set function code for RETRIEVE            13100000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  13150000
&RO      SETC  'RROOOOROOOOOOOOROOR' Codes when COMPLETE is coded  @L2C 13200000
         AGO   .CKRMOD                                                  13250000
.*                                                                      13300000
.CKQUERY AIF   ('&FUNC' NE 'QUERY').CKCHANG                             13350000
&RO      SETC  'OOOOOOOOOOOOOOOOOOR' Req'd,optional,allowed codes  @L2C 13400000
&FCODE   SETC  '4'            Set function code for QUERY               13450000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  13500000
&RO      SETC  'OROOOOROROOOOOOROOR' Codes when COMPLETE is coded  @L2C 13550000
         AGO   .CKRMOD                                                  13600000
.*                                                                      13650000
.CKCHANG AIF   ('&FUNC' NE 'CHANGE').CKDELET                            13700000
&RO      SETC  'OOOOOOOOOOOOOOOOOOR' Req'd,optional,allowed codes  @L2C 13750000
&FCODE   SETC  '5'            Set function code for CHANGE              13800000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  13850000
&RO      SETC  'OROOOOROOOOOOOOROOR' Codes when COMPLETE is coded  @L2C 13900000
         AGO   .CKRMOD                                                  13950000
.*                                                                      14000000
.CKDELET AIF   ('&FUNC' NE 'DELETE').CKUNACC                            14050000
&RO      SETC  'OOOOOOOOOOOOOOOOOOR' Req'd,optional,allowed codes  @L2C 14100000
&FCODE   SETC  '6'            Set function code for DELETE              14150000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  14200000
&RO      SETC  'OROOOOROOOOOOOOROOR' Codes when COMPLETE is coded  @L2C 14250000
         AGO   .CKRMOD                                                  14300000
.*                                                                      14350000
.CKUNACC AIF   ('&FUNC' NE 'UNACCESS').BADFUNC                          14400000
&RO      SETC  'OOOOOOOOOOOOOOOOOOR' Req'd,optional,allowed codes  @L2C 14450000
&FCODE   SETC  '7'            Set function code for UNACCESS            14500000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  14550000
&RO      SETC  'OOOOOOOOOOOOOOOROOR' Codes when COMPLETE is coded  @L2C 14600000
         AGO   .CKRMOD                                                  14650000
.*                            Incorrect function specified              14750000
.BADFUNC MNOTE 8,'NO VALID FUNCTION SPECIFIED.  YOU MUST SPECIFY ACCESSx14800000
               , STORE, RETRIEVE, QUERY, CHANGE, DELETE OR UNACCESS.  &x14850000
               PNOTXT'                                                  14900000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  14950000
         AGO   .CKVIEW         Continue validity checking          @02C 15000000
.*                                                                      15350000
.********************************************************************** 15388800
.* &RO was set above for the Execute form.  Now make adjustments      * 15427600
.* if not Execute form (List or Modify).                              * 15466400
.* No keyword parameter except MF is required.                        * 15505200
.* Change all the 'R' codes to 'O'.                                   * 15544000
.********************************************************************** 15582800
.*                                                                      15621600
.CKRMOD  AIF   ('&MF(1)' EQ 'E').CKR                                    15660400
&CTR     SETA  1                   Set index to first character of &RO  15700000
.ROLOOP  AIF   ('&RO'(&CTR,1) NE 'R').NEXTRO Go if code not 'R'         15737500
.*  Set 'R' in RO string to 'O'                                         15775000
&RO      SETC  '&RO'(1,&CTR-1).'O'.'&RO'(&CTR+1,K'&RO-&CTR)             15812500
.NEXTRO  ANOP                                                           15850000
&CTR     SETA  &CTR+1              Set index to next position of &RO    15900000
         AIF   (&CTR LT K'&RO).ROLOOP  Go if not yet last &RO position  15950000
.*       Last one must be done differently to avoid running off end.    16000000
         AIF   ('&RO'(&CTR,1) NE 'R').CKR      Go if code not 'R'       16050000
&RO      SETC  '&RO'(1,&CTR-1).'O'             Replace 'R' with 'O'     16100000
.*                                                                      16150000
.********************************************************************** 16170000
.* Check for required parameters that are omitted.                    * 16190000
.********************************************************************** 16210000
.*                                                                      16230000
.CKR     ANOP                                                           16250000
.CKRBUFL AIF   ('&BUFLIST' NE '' OR '&RO'(1,1) NE 'R').CKRCLNM          16300000
&REQUIRD SETC  '&REQUIRD. BUFLIST' Remember omitted required parameter  16350000
.CKRCLNM AIF   ('&COLLECTN' NE '' OR '&RO'(2,1) NE 'R').CKRIADD    @D1C 16362500
&REQUIRD SETC  '&REQUIRD. COLLECTN' Remember omitted required parameter 16375000
.CKRIADD AIF   ('&IADDRESS' NE '' OR '&RO'(3,1) NE 'R').CKRLENG    @D1A 16387500
&REQUIRD SETC  '&REQUIRD. IADDRESS' Remember omitted req'd param   @D1A 16400000
.CKRLENG AIF   ('&LENGTH' NE '' OR '&RO'(4,1) NE 'R').CKRMGMT      @D1C 16412500
&REQUIRD SETC  '&REQUIRD. LENGTH' Remember omitted required parameter   16425000
.CKRMGMT AIF   ('&MGMTCLAS' NE '' OR '&RO'(5,1) NE 'R').CKRMSGA    @D1C 16437500
&REQUIRD SETC  '&REQUIRD. MGMTCLAS' Remember omitted required parameter 16450000
.CKRMSGA AIF   ('&MSGAREA' NE '' OR '&RO'(6,1) NE 'R').CKRNAME     @D1C 16475000
&REQUIRD SETC  '&REQUIRD. MSGAREA' Remember omitted required parameter  16500000
.CKRNAME AIF   ('&NAME' NE '' OR '&RO'(7,1) NE 'R').CKROFFS        @D1C 16525000
&REQUIRD SETC  '&REQUIRD. NAME'    Remember omitted required parameter  16550000
.CKROFFS AIF   ('&OFFSET' NE '' OR '&RO'(8,1) NE 'R').CKRQEL       @D1C 16600000
&REQUIRD SETC  '&REQUIRD. OFFSET'  Remember omitted required parameter  16650000
.CKRQEL  AIF   ('&QEL' NE '' OR '&RO'(9,1) NE 'R').CKRRELB         @D1C 16700000
&REQUIRD SETC  '&REQUIRD. QEL'     Remember omitted required parameter  16750000
.CKRRELB AIF   ('&RELBUF' NE '' OR '&RO'(10,1) NE 'R').CKRREAC     @D1C 16800000
&REQUIRD SETC  '&REQUIRD. RELBUF'  Remember omitted required parameter  16850000
.CKRREAC AIF   ('&REACODE' NE '' OR '&RO'(11,1) NE 'R').CKRRETC    @D1C 16900000
&REQUIRD SETC  '&REQUIRD. REACODE' Remember omitted required parameter  16950000
.CKRRETC AIF   ('&RETCODE' NE '' OR '&RO'(12,1) NE 'R').CKRRETP    @D1C 17000000
&REQUIRD SETC  '&REQUIRD. RETCODE' Remember omitted required parameter  17050000
.CKRRETP AIF   ('&RETPD' NE '' OR '&RO'(13,1) NE 'R').CKRSIZE      @D1C 17100000
&REQUIRD SETC  '&REQUIRD. RETPD'   Remember omitted required parameter  17150000
.CKRSIZE AIF   ('&SIZE' NE '' OR '&RO'(14,1) NE 'R').CKRSTOR       @D1C 17200000
&REQUIRD SETC  '&REQUIRD. SIZE'    Remember omitted required parameter  17250000
.CKRSTOR AIF   ('&STORCLAS' NE '' OR '&RO'(15,1) NE 'R').CKRTOKE   @D1C 17300000
&REQUIRD SETC  '&REQUIRD. STORCLAS' Remember omitted required parameter 17350000
.CKRTOKE AIF   ('&TOKEN' NE '' OR '&RO'(16,1) NE 'R').CKRVIEW      @D1C 17400000
&REQUIRD SETC  '&REQUIRD. TOKEN'   Remember omitted required parameter  17450000
.CKRVIEW AIF   ('&VIEW' NE '' OR '&RO'(17,1) NE 'R').CKRTTKN       @L2C 17475000
&REQUIRD SETC  '&REQUIRD. VIEW'    Remember omitted required param @02A 17500000
.CKRTTKN AIF   ('&TTOKEN' NE '' OR '&RO'(18,1) NE 'R').CKRMF       @L2A 17512500
&REQUIRD SETC  '&REQUIRD. TTOKEN'    Remember omitted req'd parm   @L2A 17525000
.CKRMF   AIF   ('&MF' NE '' OR '&RO'(19,1) NE 'R').CKRANY          @L2C 17537500
&REQUIRD SETC  '&REQUIRD. MF'      Remember omitted required parameter  17550000
.CKRANY  AIF   ('&REQUIRD' EQ '').CKA                                   17600000
         MNOTE 8,'THESE KEYWORDS ARE REQUIRED WITH &FUNC. AND WERE OMITx17650000
               TED: &REQUIRD'                                           17700000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  17750000
.*                                                                      17800000
.********************************************************************** 17820000
.* Check for parameters that are not allowed with this function.      * 17840000
.********************************************************************** 17860000
.*                                                                      17880000
.CKA     ANOP                                                           17900000
.CKABUFL AIF   ('&BUFLIST' EQ '' OR '&RO'(1,1) NE ' ').CKACLNM          17950000
&DALLOWD SETC  '&DALLOWD. BUFLIST' Remember disallowed parameter        18000000
.CKACLNM AIF   ('&COLLECTN' EQ '' OR '&RO'(2,1) NE ' ').CKAIADD   @D1C  18012500
&DALLOWD SETC  '&DALLOWD. COLLECTN' Remember disallowed parameter       18025000
.CKAIADD AIF   ('&IADDRESS' EQ '' OR '&RO'(3,1) NE ' ').CKALENG   @D1A  18037500
&DALLOWD SETC  '&DALLOWD. IADDRESS' Remember disallowed parameter @D1A  18050000
.CKALENG AIF   ('&LENGTH' EQ '' OR '&RO'(4,1) NE ' ').CKAMGMT     @D1C  18062500
&DALLOWD SETC  '&DALLOWD. LENGTH'  Remember disallowed parameter        18075000
.CKAMGMT AIF   ('&MGMTCLAS' EQ '' OR '&RO'(5,1) NE ' ').CKAMSGA   @D1C  18087500
&DALLOWD SETC  '&DALLOWD. MGMTCLAS' Remember disallowed parameter       18100000
.CKAMSGA AIF   ('&MSGAREA' EQ '' OR '&RO'(6,1) NE ' ').CKANAME    @D1C  18125000
&DALLOWD SETC  '&DALLOWD. MSGAREA'  Remember disallowed parameter       18150000
.CKANAME AIF   ('&NAME' EQ '' OR '&RO'(7,1) NE ' ').CKAOFFS       @D1C  18175000
&DALLOWD SETC  '&DALLOWD. NAME'    Remember disallowed parameter        18200000
.CKAOFFS AIF   ('&OFFSET' EQ '' OR '&RO'(8,1) NE ' ').CKAQEL      @D1C  18250000
&DALLOWD SETC  '&DALLOWD. OFFSET'  Remember disallowed parameter        18300000
.CKAQEL  AIF   ('&QEL' EQ '' OR '&RO'(9,1) NE ' ').CKARELB        @D1C  18350000
&DALLOWD SETC  '&DALLOWD. QEL'     Remember disallowed parameter        18400000
.CKARELB AIF   ('&RELBUF' EQ '' OR '&RO'(10,1) NE ' ').CKAREAC    @D1C  18450000
&DALLOWD SETC  '&DALLOWD. RELBUF'  Remember disallowed parameter        18500000
.CKAREAC AIF   ('&REACODE' EQ '' OR '&RO'(11,1) NE ' ').CKARETC   @D1C  18550000
&DALLOWD SETC  '&DALLOWD. REACODE' Remember disallowed parameter        18600000
.CKARETC AIF   ('&RETCODE' EQ '' OR '&RO'(12,1) NE ' ').CKARETP   @D1C  18650000
&DALLOWD SETC  '&DALLOWD. RETCODE' Remember disallowed parameter        18700000
.CKARETP AIF   ('&RETPD' EQ '' OR '&RO'(13,1) NE ' ').CKASIZE     @D1C  18750000
&DALLOWD SETC  '&DALLOWD. RETPD'   Remember disallowed parameter        18800000
.CKASIZE AIF   ('&SIZE' EQ '' OR '&RO'(14,1) NE ' ').CKASTOR      @D1C  18850000
&DALLOWD SETC  '&DALLOWD. SIZE'    Remember disallowed parameter        18900000
.CKASTOR AIF   ('&STORCLAS' EQ '' OR '&RO'(15,1) NE ' ').CKATOKE  @D1C  18950000
&DALLOWD SETC  '&DALLOWD. STORCLAS' Remember disallowed parameter       19000000
.CKATOKE AIF   ('&TOKEN' EQ '' OR '&RO'(16,1) NE ' ').CKAVIEW     @D1C  19050000
&DALLOWD SETC  '&DALLOWD. TOKEN'   Remember disallowed parameter        19100000
.CKAVIEW AIF   ('&VIEW' EQ '' OR '&RO'(17,1) NE ' ').CKAANY        @D1A 19125000
&DALLOWD SETC  '&DALLOWD. VIEW'    Remember disallowed parameter   @02A 19150000
.CKAANY  AIF   ('&DALLOWD' EQ '').CKVIEW   Go if none disallowed   @02C 19175000
         MNOTE 4,'THESE KEYWORDS ARE NOT ALLOWED WITH &FUNC.,MF=&MF.: &x19200000
               DALLOWD'                                                 19250000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  19300000
.*                                                                      19350000
.********************************************************************** 19361100
.*                CHECK FOR INVALID VALUES ON KEYWORD VIEW        @02A* 19372200
.********************************************************************** 19383300
.*                                                                 @02A 19394400
.CKVIEW  ANOP                                                      @02A 19405500
.*       Set VIEWB FLAG to 1 if BACKUP is specified, 0 otherwise   @02A 19416600
&VIEWB   SETB  ('&VIEW' EQ 'BACKUP')                               @02A 19427700
.*       Ensure that VIEW is PRIMARY, BACKUP, or omitted.          @02A 19438800
         AIF   ('&VIEW' EQ '' OR '&VIEW' EQ 'PRIMARY' OR               x19449900
               '&VIEW' EQ 'BACKUP').CKINVK                         @02A 19461000
         MNOTE 8,'VIEW VALUE MUST BE PRIMARY OR BACKUP. &PNOTXT'   @02A 19472100
&SWSTOP  SETC  'YES'        Stop processing after validity check   @02A 19483200
.*                                                                 @02A 19494300
.********************************************************************** 19505400
.*                CHECK FOR INVALID VALUES ON KEYWORD RELBUF          * 19516500
.********************************************************************** 19527600
.*                                                                      19538700
.CKINVK  ANOP                                                           19550000
.*       Ensure that RELBUF is YES, NO or omitted.                      19600000
&RELBON  SETB  ('&RELBUF' EQ 'YES')      Ensure bit on if YES           19650000
.*                                                                      19700000
         AIF   ('&RELBUF' EQ '' OR '&RELBUF' EQ 'YES' OR               x19750000
               '&RELBUF' EQ 'NO').CKFAIL                                19800000
         MNOTE 8,'RELBUF VALUE MUST BE YES OR NO.  &PNOTXT'             19850000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  19900000
.*                                                                      19950000
.********************************************************************** 20000000
.* If some of the above errors allowed the macro to continue, the     * 20050000
.* macro might generate incorrect code.                               * 20100000
.********************************************************************** 20150000
.*                                                                      20250000
.CKFAIL  AIF   ('&SWSTOP' NE 'NO').MEND  Terminate if any error         20400000
.*                                                                      20450000
.********************************************************************** 20500000
.* VALIDITY CHECKING COMPLETE.  NOW GENERATE CODE AS PER MACRO FORM.  * 20550000
.********************************************************************** 20600000
.*                                                                      20800000
&FNAME   SETC '&FUNCTION(1)'      Get function name specified           20850000
.*                                                                      21400000
         AIF   ('&MF(1)' EQ 'E').DOMFE    Go if MF=E form               21425000
         AIF   ('&MF(1)' EQ 'M').DOMFM    Go if MF=M form               21450000
.*                                                                      21475000
.********************************************************************** 21500000
.* L (LIST) FORM PROCESSING                                           * 21525000
.********************************************************************** 21550000
.*                                                                      21575000
.DOMFL   ANOP                                                           21600000
.*                                                                      21900000
         DS    0D                  Doubleword align parmlist       @O1C 21903800
&LABEL   DC    CL4'&CBLKID'    +0  Parameter Control Block ID           21907600
         DC    AL1(&CBLKLN)    +4  Parameter Control Block length       21911400
         DC    AL1(&VCODE)     +5  Parameter Control Block Version #    21915200
         DC    AL1(&RCODE)     +6  Parameter Control Block Release #    21919000
         DC    AL1(&LCODE)     +7  Parameter Control Block Level #      21922800
         DC    XL4'0'          +8  Reserved, must be zero               21926600
         DC    XL4'0'          +C  Reserved, must be zero               21930400
         DC    AL1(&FCODE)     +10 Function code                        21934200
&TEMP    SETC  '&RELBON.&VIEWB.&B2ON.&B3ON.&B4ON.&B5ON.&B6ON.&B7ON.'   x21938000
                                                                   @02C 21941800
         DC    B'&TEMP'        +11 Flags--2 fields(RELBUF,VIEW)         21945600
*                                  BIT 0=1 indicates RELBUF=YES,so page 21949400
*                                  release will be performed after      21953200
*                                  buffer segments are stored. BIT 0=0  21957000
*                                  means RELBUF=NO and no pages will be 21960800
*                                  released.                            21964600
*                                  BIT 1=1 indicates VIEW=BACKUP, and   21968400
*                                  the backup copy will be addressed.   21972200
*                                  BIT 1=0 means VIEW=PRIMARY and the   21976000
*                                  primary copy will be addressed. @02C 21979800
         DC    XL2'0'          +12 Reserved, must be zero               21983600
         DC    CL8'&FNAME'     +14 Function name                        21987400
.*                                                                      21991200
&TEMP    SETC  '0'                 Set dummy address of TOKEN           21995000
         AIF   ('&TOKEN' EQ '').DOLTOK  Go if token not supplied        22000000
&TEMP    SETC  '&TOKEN'            Get token                            22050000
.DOLTOK  DC    A(&TEMP)        +1C TOKEN address                        22100000
.*                                                                      22200000
&TEMP    SETC  '0'                 Set dummy address of NAME            22250000
         AIF   ('&NAME' EQ '').DOLNAME                                  22500000
&TEMP    SETC  '&NAME'             Get object name                      22550000
.DOLNAME DC    A(&TEMP)        +20 Object name address                  22600000
.*                                                                      22650000
&TEMP    SETC  '0'                Set dummy address of BUFLIST          22700000
         AIF   ('&BUFLIST' EQ '').DOLBUFL                               22950000
&TEMP    SETC  '&BUFLIST'          Get buffer list                      23000000
.DOLBUFL DC    A(&TEMP)        +24 Buffer List address                  23050000
.*                                                                      24750000
&TEMP    SETC  '0'                 Set dummy address of SIZE            24800000
         AIF   ('&SIZE' EQ '').DOLS2A                                   24850000
&TEMP    SETC  '&SIZE'             Get SIZE value                       24900000
.DOLS2A  DC    A(&TEMP)        +28 Size Word address                    24950000
.*                                                                      25050000
&TEMP    SETC  '0'                 Set dummy address of QEL             25052900
         AIF   ('&QEL' EQ '').DOLQ1A                                    25055800
&TEMP    SETC  '&QEL'              Get query element list               25058700
.DOLQ1A  DC    A(&TEMP)        +2C Query Element List address           25061600
.*                                                                      25064500
&TEMP    SETC  '0'                 Set dummy address of MSGAREA         25067400
         AIF   ('&MSGAREA' EQ '').DOLMSG                                25070300
&TEMP    SETC  '&MSGAREA'          Get Message Area                     25073200
.DOLMSG  DC    A(&TEMP)        +30 Message Area address                 25076100
.*                                                                      25079000
&TEMP    SETC  '0'                 Set dummy address of REACODE         25081900
         AIF   ('&REACODE' EQ '').DOLREA                                25084800
&TEMP    SETC  '&REACODE'          Get Reason Code area                 25087700
.DOLREA  DC    A(&TEMP)        +34 Reason Code area address             25090600
.*                                                                      25093500
&TEMP    SETC  '0'                 Set dummy address of RETCODE         25096400
         AIF   ('&RETCODE' EQ '').DOLRET                                25099300
&TEMP    SETC  '&RETCODE'          Get Return Code area                 25102200
.DOLRET  DC    A(&TEMP)        +38 Return Code area address             25105100
.*                                                                      25108000
&TEMP    SETC  '0'                 Set dummy address of MGMTCLAS        25110900
         AIF   ('&MGMTCLAS' EQ '').DOLM1A                               25113800
&TEMP    SETC  '&MGMTCLAS'         Get management class                 25116700
.DOLM1A  DC    A(&TEMP)        +3C Management Class address             25119600
.*                                                                      25122500
&TEMP    SETC  '0'                 Set dummy address of STORCLAS        25125400
         AIF   ('&STORCLAS' EQ '').DOLS1A                               25128300
&TEMP    SETC  '&STORCLAS'         Get storage class                    25131200
.DOLS1A  DC    A(&TEMP)        +40 Storage Class address                25134100
.*                                                                      25137000
&TEMP    SETC  '0'                 Set dummy address of RETPD           25139900
         AIF   ('&RETPD' EQ '').DOLR1A                                  25142800
&TEMP    SETC  '&RETPD'            Get retention period                 25145700
.DOLR1A  DC    A(&TEMP)        +44 Retention Period address             25148600
.*                                                                      25151500
&TEMP    SETC  '0'                 Set dummy address of LENGTH          25154400
         AIF   ('&LENGTH' EQ '').DOLLNG                                 25157300
&TEMP    SETC  '&LENGTH'           Get Partial Object Read length       25160200
.DOLLNG  DC    A(&TEMP)        +48 POR Length address                   25163100
.*                                                                      25166000
&TEMP    SETC  '0'                 Set dummy address of OFFSET          25168900
         AIF   ('&OFFSET' EQ '').DOLOFS                                 25171800
&TEMP    SETC  '&OFFSET'           Get Partial Object Read offset       25174700
.DOLOFS  DC    A(&TEMP)        +4C POR Offset address                   25177600
.*                                                                      25180500
&TEMP    SETC  '0'                 Set dummy address of COLLECTN        25183400
         AIF   ('&COLLECTN' EQ '').DOLCOL                               25186300
&TEMP    SETC  '&COLLECTN'         Get Collection Name pointer          25189200
.DOLCOL  DC    A(&TEMP)        +50 Collection name address              25192100
.*                                                                      25195000
&TEMP    SETC  '0'                 Set dummy address of IADDRESS @D1A   25197900
         AIF   ('&IADDRESS' EQ '').DOLIADD                       @D1A   25200800
&TEMP    SETC  '&IADDRESS'         Get DB2 Lang Interface Addr   @D1A   25203700
.DOLIADD DC    A(&TEMP)        +54 Interface IADDRESS            @D1C   25206600
.*                                                                      25209500
&TEMP    SETC  '0'                 Set dummy address of TTOKEN   @L2A   25210400
         AIF   ('&TTOKEN'   EQ '').DOLTTKN                       @L2A   25211300
&TEMP    SETC  '&TTOKEN'           Get TTOKEN   Interface Addr   @L2A   25212200
.DOLTTKN DC    A(&TEMP)        +58 Interface TTOKEN              @L2C   25213100
.*                                                                      25214000
         DC    XL4'0'          +5C Reserved, must be zero               25215300
.*                                                                      25218200
         LTORG                     For literal addressability           25221100
.*                                                                      25224000
         AGO   .MEND               End MF=L form                        25226900
.*                                                                      25229800
.********************************************************************** 25232700
.*                BEGIN THE EXPANSION OF THE EXECUTE FORM             * 25235600
.********************************************************************** 25238500
.*                                                                      25241400
.DOMFE   ANOP                                                           25250000
         AIF   (NOT &MFCOMPLETE).DOMFE1  If COMPLETE, continue check    25261100
         AIF   ('&FUNCTION'(1,1) NE '(').DOMFE1 If function suppressed  25272200
.*                                                                      25283300
         MNOTE 8,'FUNCTION MUST BE SPECIFIED FOR MF=E,,COMPLETE.'       25294400
         AGO   .MEND                                                    25305500
.*                                                                      25316600
.DOMFE1  ANOP                                                           25327700
&LIST    SETC  '(1)'               Default parameter list ptr reg 1     25338800
         AIF   ('&MF(2)'(1,1) EQ '(').EREG   Go if address list in reg  25350000
&LABEL   LA    1,&MF(2)            Get parm list address from label     25400000
         AGO   .EMCONT                                                  25450000
.EREG    AIF   ('&MF(2)' EQ '(1)').EREG1    Go if R1 already loaded     25500000
&TEMP    SETC  '&MF(2)'(2,K'&MF(2)-2)  Extract the register from parens 25550000
&LABEL   LR    1,&TEMP             Get parm list address from register  25600000
         AGO   .EMCONT                                                  25650000
.EREG1   AIF  ('&LABEL' EQ '').EMCONT  Go if we do not need a label     25700000
&LABEL   DS    0H                                                       25750000
         AGO   .EMCONT                                                  25800000
.*                                                                      25850000
.********************************************************************** 25890000
.*                BEGIN THE EXPANSION OF THE MODIFY FORM              * 25930000
.********************************************************************** 25970000
.*                                                                      26010000
.DOMFM   ANOP      We do not need to point register 1 to the param list 26050000
         AIF   ('&MF(2)'(1,1) EQ '(').MREG   Go if address list in reg  26100000
&LIST    SETC  '+&MF(2)'           Save where to store parameters       26150000
         AGO   .MLABEL             Go to make label for modify form     26200000
.MREG    ANOP                      The list address is in a register    26250000
&LIST    SETC  '&MF(2)'            Save where to store parameters       26300000
.MLABEL  AIF  ('&LABEL' EQ '').EMCONT  Go if we do not need a label     26350000
&LABEL   DS    0H                                                       26400000
.*                                                                      26450000
.********************************************************************** 26500000
.*                CONTINUE THE EXPANSION FOR EXECUTE AND MODIFY FORMS * 26550000
.********************************************************************** 26600000
.*                                                                      28300000
.EMCONT  ANOP                                                           28350000
         AIF   (NOT &MFCOMPLETE).EMCONT1  If not COMPLETE, set parms    28400000
.*                                                                      28600000
         AIF   ('&LIST'(1,1) EQ '(').EMCHLR Go if parm list in reg      28650000
.*                                                                      28800000
         XC    0&LIST.(&CBLKLN),0&LIST    Clear parm list area          28850000
         MVC   0&LIST.(4),=CL4'&CBLKID'   Set parm list ID chars        28900000
         AGO   .EMCHDR                                                  28950000
.*                                                                      29450000
.EMCHLR  ANOP                                                           29500000
&TEMP    SETC  '&LIST'(2,K'&LIST-2)       Extract register from parens  29550000
         XC    0(&CBLKLN,&TEMP),0(&TEMP)  Clear parm list area          29600000
         MVC   0(4,&TEMP),=CL4'&CBLKID'   Set parm list ID chars        29650000
.*                                                                      29700000
.EMCHDR  MVI   4&LIST,&CBLKLN             Set parm list length          29740000
         MVI   5&LIST,&VCODE              Set parm list version number  29780000
         MVI   6&LIST,&RCODE              Set parm list release number  29820000
         MVI   7&LIST,&LCODE              Set parm list level number    29860000
.*                                                                      29900000
.EMCONT1 ANOP                                                           29906000
         AIF   ('&FUNCTION'(1,1) EQ '(').EMSTRLB Go if func suppressed  29912000
         MVI   16&LIST,&FCODE             Set function code             29918000
         AIF   ('&LIST'(1,1) EQ '(').EMCNLR Go if parm list in reg      29924000
         MVC   20&LIST.(8),=CL8'&FNAME'   Set function name             29930000
         AGO   .EMSTRLB                                                 29936000
.*                                                                      29942000
.EMCNLR  ANOP                                                           29948000
&TEMP    SETC  '&LIST'(2,K'&LIST-2)       Extract register from parens  29954000
         MVC   20(8,&TEMP),=CL8'&FNAME'   Set function name             29960000
.*                                                                      29966000
.EMSTRLB ANOP                             Set RELBUF, VIEW flags   @02C 29972000
.*       If neither RELBUF nor VIEW is specified, continue         @02A 29978000
         AIF   ('&RELBUF' EQ '' AND '&VIEW' EQ '').EMSTTKN         @02C 29984000
         AIF   (&MFCOMPLETE).EMSTFL       Go if COMPLETE specified @02A 29990000
&RELBMSK SETB  ('&RELBUF' EQ 'YES' OR '&RELBUF' EQ '') RELBUF mask @02A 29996000
&VIEWMSK SETB  ('&VIEW' EQ 'BACKUP' OR '&VIEW' EQ '')  VIEW mask   @02A 30002000
&TEMP    SETC  '&RELBMSK.&VIEWMSK.&B2ON.&B3ON.&B4ON.&B5ON.&B6ON.&B7ON.'x30008000
                                                                   @02A 30014000
         NI    17&LIST,B'&TEMP'      Reset flag if ZERO specified  @02A 30020000
.EMSTFL  ANOP                                                      @02A 30026000
&TEMP    SETC  '&RELBON.&VIEWB.&B2ON.&B3ON.&B4ON.&B5ON.&B6ON.&B7ON.'   x30032000
                                                                   @02C 30038000
         OI    17&LIST,B'&TEMP'      Set flag if ONE specified     @02C 30044000
.*                                                                      30050000
.EMSTTKN AIF   ('&TOKEN' EQ '').EMNAME  Go if TOKEN not supplied        30056000
         AIF   ('&TOKEN'(1,1) EQ '(').EMTOKR  Go if token in reg        30062000
         LA    15,&TOKEN           Get token address                    30068000
         AGO   .EMSTOK             And go set token address             30074000
.EMTOKR  LR    15,&TOKEN(1)        Get token address from reg           30080000
.EMSTOK  ST    15,28&LIST      +1C TOKEN address                        30086000
.*                                                                      30092000
.EMNAME  AIF   ('&NAME' EQ '').EMBUFL  Go if NAME not supplied          30098000
         AIF   ('&NAME'(1,1) EQ '(').EMNAMR  Go if name in reg          30104000
         LA    15,&NAME            Get name address                     30110000
         AGO   .EMSNAM             And go set name address              30116000
.EMNAMR  LR    15,&NAME(1)         Get name address from reg            30122000
.EMSNAM  ST    15,32&LIST      +20 NAME address                         30128000
.*                                                                      30134000
.EMBUFL  AIF   ('&BUFLIST' EQ '').EMSIZE  Go if BUFLIST not supplied    30140000
         AIF   ('&BUFLIST'(1,1) EQ '(').EMBUFR  Go if buflist in reg    30146000
         LA    15,&BUFLIST         Get buflist address                  30152000
         AGO   .EMSBUF             And go set buflist address           30158000
.EMBUFR  LR    15,&BUFLIST(1)      Get buflist address from reg         30164000
.EMSBUF  ST    15,36&LIST      +24 BUFLIST address                      30170000
.*                                                                      30176000
.EMSIZE  AIF   ('&SIZE' EQ '').EMQEL   Go if SIZE not supplied          30182000
         AIF   ('&SIZE'(1,1) EQ '(').EMSIZR  Go if size in reg          30188000
         LA    15,&SIZE            Get size address                     30194000
         AGO   .EMSSIZ             And go set size address              30200000
.EMSIZR  LR    15,&SIZE(1)         Get size address from reg            30206000
.EMSSIZ  ST    15,40&LIST      +28 SIZE address                         30212000
.*                                                                      30218000
.EMQEL   AIF   ('&QEL' EQ '').EMMSGA  Go if QEL not supplied            30224000
         AIF   ('&QEL'(1,1) EQ '(').EMQELR  Go if qel in reg            30230000
         LA    15,&QEL             Get qel address                      30236000
         AGO   .EMSQEL             And go set qel address               30242000
.EMQELR  LR    15,&QEL(1)          Get qel address from reg             30248000
.EMSQEL  ST    15,44&LIST      +2C QEL address                          30254000
.*                                                                      30260000
.EMMSGA  AIF   ('&MSGAREA' EQ '').EMREAC  Go if MSGAREA not supplied    30266000
         AIF   ('&MSGAREA'(1,1) EQ '(').EMMSGR  Go if msgarea in reg    30272000
         LA    15,&MSGAREA         Get msgarea address                  30278000
         AGO   .EMSMSG             And go set msgarea address           30284000
.EMMSGR  LR    15,&MSGAREA(1)      Get msgarea address from reg         30290000
.EMSMSG  ST    15,48&LIST      +30 MSGAREA address                      30296000
.*                                                                      30302000
.EMREAC  AIF   ('&REACODE' EQ '').EMRETC  Go if REACODE not supplied    30308000
         AIF   ('&REACODE'(1,1) EQ '(').EMREAR  Go if reason code reg   30314000
         LA    15,&REACODE         Get reason code address              30320000
         AGO   .EMSREA             And go set reason code address       30326000
.EMREAR  LR    15,&REACODE(1)      Get reason code address from reg     30332000
.EMSREA  ST    15,52&LIST      +34 REACODE address                      30338000
.*                                                                      30344000
.EMRETC  AIF   ('&RETCODE' EQ '').EMMGMC  Go if RETCODE not supplied    30350000
         AIF   ('&RETCODE'(1,1) EQ '(').EMRETR  Go if return code reg   30356000
         LA    15,&RETCODE         Get return code address              30362000
         AGO   .EMSRET             And go set return code address       30368000
.EMRETR  LR    15,&RETCODE(1)      Get return code address from reg     30374000
.EMSRET  ST    15,56&LIST      +38 RETCODE address                      30380000
.*                                                                      30386000
.EMMGMC  AIF   ('&MGMTCLAS' EQ '').EMSTGC  Go if MGMTCLAS not supplied  30392000
         AIF   ('&MGMTCLAS'(1,1) EQ '(').EMMGMR  Go if mgmt class reg   30398000
         LA    15,&MGMTCLAS        Get mgmt class address               30404000
         AGO   .EMSMGM             And go set mgmt class address        30410000
.EMMGMR  LR    15,&MGMTCLAS(1)     Get mgmt class address from reg      30416000
.EMSMGM  ST    15,60&LIST      +3C MGMTCLAS address                     30422000
.*                                                                      30428000
.EMSTGC  AIF   ('&STORCLAS' EQ '').EMRETP  Go if STORCLAS not supplied  30434000
         AIF   ('&STORCLAS'(1,1) EQ '(').EMSTGR  Go if strg class reg   30440000
         LA    15,&STORCLAS        Get strg class address               30446000
         AGO   .EMSSTG             And go set strg class address        30452000
.EMSTGR  LR    15,&STORCLAS(1)     Get strg class address from reg      30458000
.EMSSTG  ST    15,64&LIST      +40 STORCLAS address                     30464000
.*                                                                      30470000
.EMRETP  AIF   ('&RETPD' EQ '').EMLENG  Go if RETPD not supplied        30476000
         AIF   ('&RETPD'(1,1) EQ '(').EMRTPR  Go if retpd in reg        30482000
         LA    15,&RETPD           Get retpd address                    30488000
         AGO   .EMSRTP             And go set retpd address             30494000
.EMRTPR  LR    15,&RETPD(1)        Get retpd address from reg           30500000
.EMSRTP  ST    15,68&LIST      +44 RETPD address                        30506000
.*                                                                      30512000
.EMLENG  AIF   ('&LENGTH' EQ '').EMOFFS  Go if LENGTH not supplied      30518000
         AIF   ('&LENGTH'(1,1) EQ '(').EMLNGR  Go if length in reg      30524000
         LA    15,&LENGTH          Get length address                   30530000
         AGO   .EMSLNG             And go set length address            30536000
.EMLNGR  LR    15,&LENGTH(1)       Get length address from reg          30542000
.EMSLNG  ST    15,72&LIST      +48 LENGTH address                       30548000
.*                                                                      30554000
.EMOFFS  AIF   ('&OFFSET' EQ '').EMCLNM  Go if OFFSET not supplied      30560000
         AIF   ('&OFFSET'(1,1) EQ '(').EMOFSR  Go if offset in reg      30566000
         LA    15,&OFFSET          Get offset address                   30572000
         AGO   .EMSOFS             And go set offset address            30578000
.EMOFSR  LR    15,&OFFSET(1)       Get offset address from reg          30584000
.EMSOFS  ST    15,76&LIST      +4C OFFSET address                       30590000
.*                                                                      30596000
.EMCLNM  AIF   ('&COLLECTN' EQ '').EMIADD  Go if no COLLECTN      @D1C  30602000
         AIF   ('&COLLECTN'(1,1) EQ '(').EMCLNMR Go if collectn in reg  30608000
         LA    15,&COLLECTN        Get collectn name address            30614000
         AGO   .EMSCLNM            And go set collectn name address     30620000
.EMCLNMR LR    15,&COLLECTN(1)     Get collectn name address from reg   30626000
.EMSCLNM ST    15,80&LIST      +50 COLLECTN name address                30632000
.*                                                                      30638000
.EMIADD  AIF   ('&IADDRESS' EQ '').EMTTOK  Go if no IADDRESS ptr  @D1A  30644000
         AIF   ('&IADDRESS'(1,1) EQ '(').EMIADDR Go if in reg     @D1A  30650000
         LA    15,&IADDRESS        Get IADDRESS                   @D1A  30656000
         AGO   .EMSIADD            Go set IADDRESS pointer        @D1A  30662000
.EMIADDR LR    15,&IADDRESS(1)     Get IADDRESS from register     @D1A  30668000
.EMSIADD ST    15,84&LIST      +54 Language Interface ADDRESS     @D1A  30674000
.*                                                                      30680000
.EMTTOK  AIF   ('&TTOKEN' EQ '').EMDONE    Go if no TTOKEN   ptr  @L2A  30680700
         AIF   ('&TTOKEN'(1,1) EQ '(').EMTTOKR   Go if in reg     @L2A  30681400
         LA    15,&TTOKEN          Get TTOKEN                     @L2A  30682100
         AGO   .EMSTTOK            Go set TTOKEN   pointer        @L2A  30682800
.EMTTOKR LR    15,&TTOKEN(1)       Get TTOKEN   from register     @L2A  30683500
.EMSTTOK ST    15,88&LIST      +58 User Tracking Token TTOKEN     @L2A  30684200
.*                                                                      30684900
.EMDONE  AIF   ('&MF(1)' EQ 'M').MEND   Go if doing the modify form     30686000
         AIF   ('&FUNC' EQ 'ACCESS').INVOKE2                            30700000
         AIF   ('&FUNC' EQ 'UNACCESS').INVOKE2                          30750000
.*                                                                      32650000
.********************************************************************** 32700000
.*  INVOKE OSREQ SERVICE FOR EXECUTE FORM                             * 32750000
.********************************************************************** 32900000
.*                                                                      32950000
         L     0,=X'&REQERR.&FCODE.&PLSERR1.' Prmlst err reason code    33000000
         L     15,28&LIST          Get TOKEN address from parm lst      33050000
         L     0,=X'&REQERR.&FCODE.&TKNERR1.' Set tkn err reason code   33100000
.*                                                                      33150000
         LTR   15,15               Is TOKEN address equal to zero ?     33200000
         BZ    *+44                Branch if so to set error            33250000
         CLC   0(4,15),=CL4'&TOKNID' Token addressable & initialized?   33300000
         L     0,=X'&REQERR.&FCODE.&TKNERR2.' Preset err reason code    33350000
         BNE   *+30                Branch if not to set error           33400000
         L     15,4(,15)           Get OSR work area address            33450000
         LTR   15,15               Is OSR wrk area address eq zero ?    33500000
         BZ    *+20                Branch if so to set error            33550000
         CLC   0(4,15),=CL4'&MWAID' Token points to OSR cntl block ?    33600000
         BNE   *+10                Branch if not to set error           33650000
         SLR   0,0                 Else clear error reason from reg 0   33700000
         B     *+12                And continue, token OK               33750000
.*                                                                      33800000
         LA    15,&BADREQT         Set return code to error             33850000
         B     *+10                Bypass OSREQ processing, set rc      33900000
.*                                                                      33950000
         L     15,4(,15)           Get OSR OSREQ entry point for call   34000000
         BASR  14,15               Call OSR interface                   34050000
         AGO   .MEND                                                    34100000
.*                                                                      34114800
.********************************************************************** 34129600
.* Generate invocation code for ACCESS or UNACCESS.                     34144400
.********************************************************************** 34159200
.*                                                                      34174000
.INVOKE2 STM   14,12,12(13)        Save some general registers          34188800
         ESAR  15                  Extract Secondary ASN (SASID)        34203600
         ST    15,16(,13)          Save SASID in reg 15 save            34218400
         L     14,16(,0)           Get CVT address                      34233200
         L     15,1216(,14)        Get DFA addr (Data Facilities Area)  34248000
         L     14,44(,15)          Get DFVT addr (Data Fac. Vec. Table) 34262800
         L     15,24(,14)          Get OSR Area address                 34277600
         LTR   15,15               Validate                      @P1A   34292400
         BZ    *+42                       control block          @P1A   34307200
         CLC   0(4,15),=CL4'&OSMAID'                   address   @P1A   34322000
         BNE   *+32                                              @P1A   34336800
         L     15,8(,15)           Get LX/EX for OSREQ ACCESS/UNACCESS  34351600
         PC    0(15)               Invoke OSREQ ACCESS or UNACCESS      34366400
         L     2,16(,13)           Get original SASID                   34381200
         SSAR  2                   Restore original SASID               34396000
         L     14,12(,13)          Restore original register 14         34410800
         LM    2,12,28(13)         Restore some of program's registers  34425600
         B     *+12                                              @P1A   34440400
         L     0,=X'&OSMAERR.&FCODE.&NOOSMA.'   set rsn code     @P1A   34455200
         LA    15,&BADREQO                      set return code  @P1A   34470000
.*                                                                      34484800
.MEND    MEND                                                           34500000
.*/                                                                     34550000
*%OSRQMAP:;                                                             34600000
 /********************************************************************/ 34650000
 /*      OSREQ MACRO PLAS MAP                                        */ 34700000
 /********************************************************************/ 34750000
 @SPACE(1);                       /*                                 */ 34800000
   DECLARE                        /*                                 */ 34850000
     1 CBRIREQ BASED BDY(WORD),   /* OSREQ Macro Parm Block Map      */ 34900000
       2 REQHDR,                  /* REQ header                      */ 34950000
         3 REQID    CHAR(4),      /* Identifier                      */ 35000000
         3 REQLN    FIXED(8),     /* REQ length (80 or X'50')        */ 35050000
         3 REQVER   FIXED(8),     /* REQ Version, X'1'               */ 35100000
         3 REQREL   FIXED(8),     /* REQ Release, X'1'               */ 35150000
         3 REQLVL   FIXED(8),     /* REQ Level, X'0'                 */ 35200000
       /*     Control Block Queue pointers (reserved)                */ 35250000
       2 REQRSV1  PTR(31),        /* REQ Reserved Q forward pointer  */ 35300000
       2 REQRSV2  PTR(31),        /* REQ Reserved Q backward pointer */ 35350000
       /*     Control Fields                                         */ 35400000
       2 REQFUNC  FIXED(8),       /* REQ encoded Function            */ 35450000
       2 REQFLG1  BIT(8),         /* REQ Flags                       */ 35500000
         3 REQRELBF BIT(1),       /* REQ RELBUF Flag                    35550000
                                     1 means RELBUF=YES, so page        35600000
                                     release will be performed.         35650000
                                     0 means RELBUF=NO, so no pages     35700000
                                     will be released            @02C*/ 35750000
         3 REQVIEW  BIT(1),       /* REQ VIEW Flag                      35800000
                                     1 means VIEW=BACKUP, and the       35850000
                                     backup copy will be addressed.     35900000
                                     0 means VIEW=PRIMARY, so the       35950000
                                     primary copy will be addressed     36000000
                                                                 @02C*/ 36050000
         3 *        BIT(6),       /* REQ Flags (reserved)        @02C*/ 36100000
       2 REQRSV3  FIXED(16),      /* REQ reserved control bytes      */ 36150000
       2 REQFUNN  CHAR(8),        /* REQ EBCDIC Function name        */ 36200000
       /*     Keyword Parameter Pointers                             */ 36250000
       2 REQTOKN@ PTR(31),        /* REQ TOKEN pointer               */ 36300000
       2 REQNAME@ PTR(31),        /* REQ Object Name pointer         */ 36350000
       2 REQBUFL@ PTR(31),        /* REQ Buffer List pointer         */ 36400000
       2 REQSIZE@ PTR(31),        /* REQ Object Size pointer         */ 36450000
       2 REQQEL@  PTR(31),        /* REQ Queue Element List pointer  */ 36500000
       2 REQMSGA@ PTR(31),        /* REQ Message Area pointer        */ 36550000
       2 REQREAC@ PTR(31),        /* REQ Reason Code pointer         */ 36600000
       2 REQRETC@ PTR(31),        /* REQ Return Code pointer         */ 36650000
       2 REQMGMC@ PTR(31),        /* REQ Management Class pointer    */ 36700000
       2 REQSTGC@ PTR(31),        /* REQ Storage Class pointer       */ 36750000
       2 REQRTPD@ PTR(31),        /* REQ Retention Period pointer    */ 36800000
       2 REQLENG@ PTR(31),        /* REQ Length pointer              */ 36850000
       2 REQOFFS@ PTR(31),        /* REQ Object offset pointer       */ 36900000
       2 REQCLNM@ PTR(31),        /* REQ Collection name pointer     */ 36950000
       2 REQIADR@ PTR(31),        /* REQ Iaddress pointer        @D1C*/ 37000000
       2 REQTTOK@ PTR(31),        /* REQ User tracking token ptr @L2A*/ 37050000
       2 REQRSV6  PTR(32);        /* reserved                        */ 37100000
       /*     Constants, fields pointed to declarations              */ 37150000
   DECLARE                        /*                                 */ 37200000
     REQIDC   CHAR(4)             /* REQ header ID character string  */ 37250000
       CONSTANT('OSRQ'),          /*                                 */ 37300000
     REQTKIDC CHAR(4)             /* Token hdr ID character string   */ 37350000
       CONSTANT('OSMI'),          /*                                 */ 37400000
     REQVERN  FIXED(8)            /* REQ header Version Number       */ 37450000
       CONSTANT(1),               /*                                 */ 37500000
     1 REQTOKN                    /* Token area                      */ 37550000
         BASED(REQTOKN@),         /*                                 */ 37600000
       2 REQTKNID CHAR(4),        /* Token ID                        */ 37650000
       2 REQTMWA@ PTR(31),        /* Token pointer                   */ 37700000
     1 REQNAME                    /* REQ Object Name area            */ 37750000
         BASED(REQNAME@),         /*                                 */ 37800000
       2 REQNAMEL FIXED(15),      /* Object name length (max = 44)   */ 37850000
       2 REQNAMEC CHAR(44),       /* Object name                     */ 37900000
     REQSIZE  FIXED(31)           /* REQ Object size (length)        */ 37950000
       BASED(REQSIZE@),           /*                                 */ 38000000
     1 REQMSGA                    /* REQ Message area                */ 38050000
         BASED(REQMSGA@),         /*                                 */ 38100000
       2 REQMSGAL FIXED(15),      /* Message data area length        */ 38150000
       2 REQMSGAC BDY(HWORD),     /* Message data area               */ 38200000
         3 REQMSGDL FIXED(15),    /* Message data returned length    */ 38250000
         3 REQMSGDC CHAR(*),      /* Message area returned data      */ 38300000
     REQREAC  FIXED(31)           /* REQ Reason Code area            */ 38350000
       BASED(REQREAC@),           /*                                 */ 38400000
     REQRETC  FIXED(31)           /* REQ Return Code area            */ 38450000
       BASED(REQRETC@),           /*                                 */ 38500000
     1 REQMC                      /* REQ Management Class Name area  */ 38550000
         BASED(REQMGMC@),         /*                                 */ 38600000
       2 REQMCNL  FIXED(15),      /* Management Class Name length    */ 38650000
       2 REQMCN   CHAR(30),       /* Management Class Name           */ 38700000
     1 REQSC                      /* REQ Storage Class Name area     */ 38750000
         BASED(REQSTGC@),         /*                                 */ 38800000
       2 REQSCNL  FIXED(15),      /* Storage Class Name length       */ 38850000
       2 REQSCN   CHAR(30),       /* Storage Class Name              */ 38900000
     REQRTPD  FIXED(31)           /* REQ Retention Period area       */ 38950000
       BASED(REQRTPD@),           /*                                 */ 39000000
     REQLENG  FIXED(31)           /* REQ POR requested length        */ 39050000
       BASED(REQLENG@),           /*                                 */ 39100000
     REQOFFS  FIXED(31)           /* REQ POR requested begin offset  */ 39150000
       BASED(REQOFFS@),           /*                                 */ 39200000
     1 REQCLNM                    /* REQ Collection name area        */ 39250000
         BASED(REQCLNM@),         /*                                 */ 39300000
       2 REQCLNML FIXED(15),      /* Collection name length (max=44) */ 39350000
       2 REQCLNMC CHAR(44),       /* Collection name             @D1C*/ 39400000
     REQIADR  FIXED(32)           /* First 4 bytes of DB2 language   */ 39450000
       BASED(REQIADR@),           /*   interface module          @D1C*/ 39500000
     1 REQTTOKN                   /* User Tracking Token         @L2A*/ 39550000
       BASED(REQTTOK@),           /*                             @L2A*/ 39600000
       2 *        CHAR(16);       /* User Tracking Token         @L2A*/ 39650000
