*/********************************************************************/ 00001000
*/*                                                                  */ 00002000
*/* MODULE NAME = IEFDOADD                                           */ 00003000
*/*                                                                  */ 00004000
*/* DESCRIPTIVE NAME = OUTPUT descriptor add macro                   */ 00005000
*/*                                                                  */ 00006000
*/* COPYRIGHT = 5685-001                                             */ 00007000
*/*             THIS MACRO IS "RESTRICTED MATERIALS OF IBM"          */ 00008000
*/*             (C) COPYRIGHT IBM CORP. 1988                         */ 00009000
*/*             LICENSED MATERIALS - PROPERTY OF IBM             @D2C*/ 00010000
*/*                                                                  */ 00013000
*/* STATUS = HBB3310                                             @D2C*/ 00014000
*/*                                                                  */ 00015000
*/* FUNCTION =  The OUTADD macro is used to declare the parameter    */ 00016000
*/*             list for and invoke Dynamic OUTPUT to create an      */ 00017000
*/*             OUTPUT descriptor.                                   */ 00018000
*/*                                                                  */ 00019000
*/* OPERATION =                                                      */ 00020000
*/*                                                                  */ 00021000
*/*  1. Initializes the 'errors found' flag to off.                  */ 00022000
*/*                                                                  */ 00023000
*/*  2. Verifies the macro form parameter.                           */ 00024000
*/*                                                                  */ 00025000
*/*  3. If the macro form parameter is valid, does the               */ 00026000
*/*     following:                                                   */ 00027000
*/*                                                                  */ 00028000
*/*     A. If the list macro form is specified, verifies the         */ 00029000
*/*        macro parameter list.  If it is valid, generates          */ 00030000
*/*        the declare for storage.                                  */ 00031000
*/*                                                                  */ 00032000
*/*        The declare for storage consists of 4 bytes to            */ 00033000
*/*        be used as the parameter list pointer, followed           */ 00034000
*/*        by the number of bytes equal to the length of             */ 00035000
*/*        the IEFDOCNL parameter list.                              */ 00036000
*/*                                                                  */ 00037000
*/*     B. Otherwise, the execute macro form is specified.           */ 00038000
*/*        Verifies the execute form parameter list.  If it is       */ 00039000
*/*        valid, generates the code to fill in the Dynamic OUTPUT   */ 00040000
*/*        (SVC 109 function code 33) parameter list and invoke      */ 00041000
*/*        Dynamic OUTPUT. Also, generates code to return output     */ 00042000
*/*        from the SVC to the callers fields as specified           */ 00043000
*/*        by the macro parameters.                                  */ 00044000
*/*                                                                  */ 00045000
*/*  4. Returns from the macro with a return code of 0 for valid     */ 00046000
*/*     invocations of this macro and 12 for invalid invocations.    */ 00047000
*/*                                                                  */ 00048000
*/*     If any errors were found in verifying the parameters in      */ 00049000
*/*     the above processing, issues an error message and            */ 00050000
*/*     continues verification of the remaining parameters, if       */ 00051000
*/*     any. No code is generated (except PLS DO and END             */ 00052000
*/*     statements for the execute form) if errors are detected      */ 00053000
*/*     in the macro parameter list.                                 */ 00054000
*/*                                                                  */ 00055000
*/*  NOTES =                                                         */ 00056000
*/*                                                                  */ 00057000
*/*    DEPENDENCIES =                                                */ 00058000
*/*                                                                  */ 00059000
*/*      The parameter list declared by the list form must be on a   */ 00060000
*/*      full word boundary.                                         */ 00061000
*/*                                                                  */ 00062000
*/*      If the IEFDOCNL parameter list changes, this macro          */ 00063000
*/*      may have to be updated to use the new parameter list.       */ 00064000
*/*                                                                  */ 00065000
*/*      If the IEFDOCNL parameter list length changes the macro     */ 00066000
*/*      variable ILIST_DCL_LENGTH will need to be changed           */ 00067000
*/*      to be initialized to the proper length for the list form    */ 00068000
*/*      declare.                                                    */ 00069000
*/*                                                                  */ 00070000
*/*      PLAS programs using this macro must also use the EPILOG     */ 00071000
*/*      macro.                                                      */ 00072000
*/*                                                                  */ 00073000
*/*      Logic for the PLAS and BAL macros should maintain           */ 00074000
*/*      as much similarity as possible in order to ease future      */ 00075000
*/*      development efforts.                                        */ 00076000
*/*                                                                  */ 00077000
*/*                                                                  */ 00078000
*/*   REGISTER CONVENTIONS =                                         */ 00079000
*/*                                                                  */ 00080000
*/*   The SVC alters registers 0, 1 and 15 on return to the caller.  */ 00081000
*/*                                                                  */ 00082000
*/*   PLAS Version:                                                  */ 00083000
*/*                                                                  */ 00084000
*/*      Registers 0, 1 and 15 are uncoditionally restricted by      */ 00085000
*/*      this macro around the SVC invocation since the SVC          */ 00086000
*/*      always alters these registers.                              */ 00087000
*/*                                                                  */ 00088000
*/*   BAL Version:                                                   */ 00089000
*/*                                                                  */ 00090000
*/*      Registers 0, 1 and 15 are used by the code generated by     */ 00091000
*/*      this macro.                                                 */ 00092000
*/*                                                                  */ 00093000
*/*                                                                  */ 00094000
*/*   PATCH-LABEL = N/A                                              */ 00095000
*/*                                                                  */ 00096000
*/*   MODULE TYPE = MACRO                                            */ 00097000
*/*                                                                  */ 00098000
*/*   PROCESSOR =                                                    */ 00099000
*/*                                                                  */ 00100000
*/*     PLS Version: PL/S 3H                                         */ 00101000
*/*                                                                  */ 00102000
*/*     BAL Version: ASSEMBLER H                                     */ 00103000
*/*                                                                  */ 00104000
*/*   MODULE SIZE = N/A                                              */ 00105000
*/*                                                                  */ 00106000
*/*   ATTRIBUTES = NONE                                              */ 00107000
*/*                                                                  */ 00108000
*/*   ENTRY POINT = N/A                                              */ 00109000
*/*                                                                  */ 00110000
*/*   PURPOSE = SEE FUNCTION                                         */ 00111000
*/*                                                                  */ 00112000
*/*   LINKAGE = N/A                                                  */ 00113000
*/*                                                                  */ 00114000
*/*                                                                  */ 00115000
*/*                                                                  */ 00116000
*/*   METHOD OF INVOCATION=                                          */ 00117000
*/*                                                                  */ 00118000
*/*                                                                  */ 00119000
*/*                                                                  */ 00120000
*/*                                                                  */ 00121000
*/*   _______________________________________________________        */ 00122000
*/*                   PLS VERSION                                    */ 00123000
*/*   _______________________________________________________        */ 00124000
*/*                                                                  */ 00125000
*/*                                                                  */ 00126000
*/*                                                                  */ 00127000
*/*   PLS Macro Interface Syntax, List Form                          */ 00128000
*/*                                                                  */ 00129000
*/*                                                                  */ 00130000
*/*   ? label:  OUTADD                                               */ 00131000
*/*                                                                  */ 00132000
*/*   MF              (L,parmlist name,attr)                         */ 00133000
*/*                                                                  */ 00134000
*/*                                                                  */ 00135000
*/*                                                                  */ 00136000
*/*                                                                  */ 00137000
*/*   _______________________________________________________        */ 00138000
*/*   _______________________________________________________        */ 00139000
*/*                                                                  */ 00140000
*/*                                                                  */ 00141000
*/*                                                                  */ 00142000
*/*   PLS Macro Interface Syntax, Execute Form                       */ 00143000
*/*                                                                  */ 00144000
*/*                                                                  */ 00145000
*/*   ? label:  OUTADD                                               */ 00146000
*/*                                                                  */ 00147000
*/*   NAME            (descriptor name)                              */ 00148000
*/*   SYSNAME         (descriptor name)                              */ 00149000
*/*                                                                  */ 00150000
*/*   TEXTPTR         (text unit pointer list)                       */ 00151000
*/*                   ((text unit pointer list pointer))         @P2A*/ 00152000
*/*                                                                  */ 00153000
*/*   ENQ             (CONDITIONAL|UNCONDITIONAL)                    */ 00154000
*/*                   Default: ENQ=UNCONDITIONAL                     */ 00155000
*/*                                                                  */ 00156000
*/*                                                                  */ 00156100
*/*    ONE_USE and REUSE are reserved for a special use.         @T0A*/ 00156200
*/*    They are not intended for common use. Unless              @T0A*/ 00156300
*/*    specifically documented otherwise, they should be NO      @T0A*/ 00156400
*/*    on invocation of OUTADD.                                  @T0A*/ 00156500
*/*                                                                  */ 00156600
*/*    ONE_USE         (YES|NO)  Default: ONE_USE=NO             @T0A*/ 00156700
*/*                                                                  */ 00156800
*/*    REUSE           (YES|NO)  Default: REUSE=NO               @T0A*/ 00156900
*/*                                                                  */ 00157000
*/*                                                                  */ 00157100
*/*   RETURN_CODE     (return code)                                  */ 00157200
*/*   REASON_CODE     (reason code)                                  */ 00158000
*/*   KEY_IN_ERROR    (key in error)                                 */ 00159000
*/*                                                                  */ 00160000
*/*   MF              (E,parmlist name)                              */ 00161000
*/*                                                                  */ 00162000
*/*                                                                  */ 00163000
*/*                                                                  */ 00164000
*/*                                                                  */ 00165000
*/*                                                                  */ 00166000
*/* ________________________________________________________         */ 00167000
*/*                 BAL VERSION                                      */ 00168000
*/* ________________________________________________________         */ 00169000
*/*                                                                  */ 00170000
*/*                                                                  */ 00171000
*/*                                                                  */ 00172000
*/* BAL Macro Interface Syntax, List form                            */ 00173000
*/*                                                                  */ 00174000
*/*                                                                  */ 00175000
*/*      name            name: symbol. Begin name in column 1.       */ 00176000
*/*  b                   one or more blanks                          */ 00177000
*/*  OUTADD                                                          */ 00178000
*/*  b                   one or more blanks                          */ 00179000
*/*                                                                  */ 00180000
*/*  MF=L                                                            */ 00181000
*/*                                                                  */ 00182000
*/*                                                                  */ 00183000
*/*                                                                  */ 00184000
*/* _____________________________________________________            */ 00185000
*/* _____________________________________________________            */ 00186000
*/*                                                                  */ 00187000
*/*                                                                  */ 00188000
*/*                                                                  */ 00189000
*/* BAL Macro Interface Syntax, Execute form                         */ 00190000
*/*                                                                  */ 00191000
*/*                                                                  */ 00192000
*/*      name            name: symbol. Begin name in column 1.       */ 00193000
*/*  b                   one or more blanks                          */ 00194000
*/*  OUTADD                                                          */ 00195000
*/*  b                   one or more blanks                          */ 00196000
*/*                                                                  */ 00197000
*/*                                                                  */ 00198000
*/*  NAME=descriptor name addr         descriptor name addr:         */ 00199000
*/*                                    RX-type address, or           */ 00200000
*/*                                    register (2)-(12)             */ 00201000
*/*                                                                  */ 00202000
*/*  SYSNAME=descriptor name addr      descriptor name addr:         */ 00203000
*/*                                    RX-type address, or           */ 00204000
*/*                                    register (2)-(12)             */ 00205000
*/*                                                                  */ 00206000
*/*  ,TEXTPTR=text unit pointer list   text unit pointer list addr:  */ 00207000
*/*           address                  RX-type address, or           */ 00208000
*/*                                    register (2)-(12)             */ 00209000
*/*                                                                  */ 00210000
*/*  ,ENQ=CONDITIONAL                  Default: ENQ=UNCONDITIONAL    */ 00211000
*/*  ,ENQ=UNCONDITIONAL                                              */ 00212000
*/*                                                              @T1A*/ 00212100
*/*  ,ONEUSE=YES                       Default: ONEUSE=NO        @T1A*/ 00212200
*/*  ,ONEUSE=NO                                                  @T1A*/ 00212300
*/*                                                              @T1A*/ 00212400
*/*  ,REUSE=YES                        Default: REUSE=NO         @T1A*/ 00212500
*/*  ,REUSE=NO                                                   @T1A*/ 00212600
*/*                                                                  */ 00213000
*/*  ,MF=(E,ctrl prog)                 ctrl addr: RX-type            */ 00214000
*/*                                    address, or register          */ 00215000
*/*                                    (2)-(12)                      */ 00216000
*/*                                                                  */ 00217000
*/*                                                                  */ 00218000
*/*                                                                  */ 00219000
*/*                                                                  */ 00220000
*/*  INPUT =                                                         */ 00221000
*/*                                                                  */ 00222000
*/*                                                                  */ 00223000
*/*                                                                  */ 00224000
*/*                                                                  */ 00225000
*/*  _______________________________________________________         */ 00226000
*/*                    PLS VERSION                                   */ 00227000
*/*  _______________________________________________________         */ 00228000
*/*                                                                  */ 00229000
*/*                                                                  */ 00230000
*/*                                                                  */ 00231000
*/*  The PLS LIST FORM parameters are explained as follows:          */ 00232000
*/*                                                                  */ 00233000
*/*                                                                  */ 00234000
*/*  MF(L,parmlist name,attr)                                        */ 00235000
*/*                                                                  */ 00236000
*/*  specifies the list form of the macro. 'parmlist name'           */ 00237000
*/*  specifies a valid PL/AS variable name. 'attr' specifies the     */ 00238000
*/*  attribute applied to the parameter list. The default is         */ 00239000
*/*  'BDY(WORD)'.  If 'attr' is specified, the caller must insure    */ 00240000
*/*  the declared field is full word aligned. If 'attr' is specified */ 00241000
*/*  as anything other than 'BASED', the caller is responsible for   */ 00242000
*/*  ensuring that the attributes are compatible with the            */ 00243000
*/*  generated source code from the execute form.  MF is a           */ 00244000
*/*  required parameter.  'L' and 'parm list name' are required      */ 00245000
*/*  arguments.  'attr' is optional.                                 */ 00246000
*/*                                                                  */ 00247000
*/*                                                                  */ 00248000
*/*                                                                  */ 00249000
*/*                                                                  */ 00250000
*/*                                                                  */ 00251000
*/*  ________________________________________________________        */ 00252000
*/*  ________________________________________________________        */ 00253000
*/*                                                                  */ 00254000
*/*                                                                  */ 00255000
*/*                                                                  */ 00256000
*/*                                                                  */ 00257000
*/*  The PLS EXECUTE FORM parameters are explained as follows:       */ 00258000
*/*                                                                  */ 00259000
*/*                                                                  */ 00260000
*/*  NAME(descriptor name)                                           */ 00261000
*/*                                                                  */ 00262000
*/*  'descriptor name' specifies the name of an 8 byte PL/AS         */ 00263000
*/*  variable containing the name of the output descriptor to be     */ 00264000
*/*  added.  It is a mutually exclusive with SYSNAME. NAME or        */ 00265000
*/*  SYSNAME must be specified.                                      */ 00266000
*/*                                                                  */ 00267000
*/*                                                                  */ 00268000
*/*  SYSNAME(descriptor name)                                        */ 00269000
*/*                                                                  */ 00270000
*/*  'descriptor name' specifies the name of an 8 byte PL/AS         */ 00271000
*/*  variable that a system generated name is to be returned in.     */ 00272000
*/*  It is a mutually exclusive with NAME. NAME or SYSNAME must      */ 00273000
*/*  be specified.                                                   */ 00274000
*/*                                                                  */ 00275000
*/*                                                                  */ 00276000
*/*  TEXTPTR(text unit pointer list)                                 */ 00277000
*/*         ((text unit pointer list pointer))                   @P2A*/ 00278000
*/*                                                                  */ 00279000
*/*  'text unit pointer list' specifies the name of the PL/AS        */ 00280000
*/*  variable whose address is the text unit pointer list.           */ 00281000
*/*                                                                  */ 00282000
*/*  'text unit pointer list pointer' specifies the name of the  @P2A*/ 00283000
*/*  PL/AS variable which contains the address of the text unit  @P2A*/ 00284000
*/*  pointer list.                                               @P2A*/ 00285000
*/*                                                                  */ 00286000
*/*  Text units are required. TEXTPTR is a required parameter.       */ 00287000
*/*                                                                  */ 00288000
*/*                                                                  */ 00289000
*/*  ENQ(CONDITIONAL|UNCONDITIONAL)                                  */ 00290000
*/*                                                                  */ 00291000
*/*  specifies that serialization for the add request is to be       */ 00292000
*/*  obtained conditionally (CONDITIONAL), or unconditionally        */ 00293000
*/*  (UNCONDITIONAL). The default is UNCONDITIONAL.                  */ 00294000
*/*                                                                  */ 00295000
*/*                                                                  */ 00296000
*/*  RETURN_CODE(return code)                                        */ 00297000
*/*                                                                  */ 00298000
*/*  'return code' specifies a 4 byte PL/AS variable to be           */ 00299000
*/*  assigned the return code. It is an optional parameter.          */ 00300000
*/*                                                                  */ 00301000
*/*                                                                  */ 00302000
*/*  REASON_CODE(reason code)                                        */ 00303000
*/*                                                                  */ 00304000
*/*  'reason code' specifies a 4 byte PL/AS variable to be           */ 00305000
*/*  assigned the reason code. It is an optional parameter.          */ 00306000
*/*                                                                  */ 00307000
*/*                                                                  */ 00308000
*/*  KEY_IN_ERROR(key in error)                                      */ 00309000
*/*                                                                  */ 00310000
*/*  'key in error' specifies a 4 byte PL/AS variable to be          */ 00311000
*/*  assigned the key in error. The key in error is the              */ 00312000
*/*  key value of a text unit with invalid values. See               */ 00313000
*/*  the reason code for identification of the type of error.        */ 00314000
*/*  KEY_IN_ERROR is an optional parameter.                          */ 00315000
*/*                                                                  */ 00316000
*/*                                                                  */ 00317000
*/*  MF(E,parmlist name)                                             */ 00318000
*/*                                                                  */ 00319000
*/*  specifies the execute form of the macro instruction.            */ 00320000
*/*  'parmlist name' specifies the name of the parameter list        */ 00321000
*/*  created by the LIST form of the OUTADD macro. The parameter     */ 00322000
*/*  list must be aligned on a full word boundary.  MF is a          */ 00323000
*/*  required parameter. Both arguments are required.                */ 00324000
*/*                                                                  */ 00325000
*/*                                                                  */ 00326000
*/*                                                                  */ 00327000
*/*                                                                  */ 00328000
*/*                                                                  */ 00329000
*/*                                                                  */ 00330000
*/*  _________________________________________________________       */ 00331000
*/*                    BAL VERSION                                   */ 00332000
*/*                                                                  */ 00333000
*/*  _________________________________________________________       */ 00334000
*/*                                                                  */ 00335000
*/*                                                                  */ 00336000
*/*                                                                  */ 00337000
*/*                                                                  */ 00338000
*/*  The BAL List Form parameters are explained as follows:          */ 00339000
*/*                                                                  */ 00340000
*/*                                                                  */ 00341000
*/*  name                                                            */ 00342000
*/*                                                                  */ 00343000
*/*  specifies the symbolic name to be assocatiated with the         */ 00344000
*/*  storage declare generated by the list form.  The storage        */ 00345000
*/*  must be on a fullword boundary.                                 */ 00346000
*/*                                                                  */ 00347000
*/*                                                                  */ 00348000
*/*  MF=L                                                            */ 00349000
*/*                                                                  */ 00350000
*/*  specifies the list form of the macro.  It is a required         */ 00351000
*/*  parameter.                                                      */ 00352000
*/*                                                                  */ 00353000
*/*                                                                  */ 00354000
*/*                                                                  */ 00355000
*/*                                                                  */ 00356000
*/*                                                                  */ 00357000
*/* ____________________________________________________________     */ 00358000
*/* ____________________________________________________________     */ 00359000
*/*                                                                  */ 00360000
*/*                                                                  */ 00361000
*/*                                                                  */ 00362000
*/*  The BAL Execute Form parameters are explained as follows:       */ 00363000
*/*                                                                  */ 00364000
*/*                                                                  */ 00365000
*/*  NAME=descriptor name addr                                       */ 00366000
*/*                                                                  */ 00367000
*/*  'descriptor name addr' specifies the address of an 8            */ 00368000
*/*  character field containing the name of the OUTPUT descriptor    */ 00369000
*/*  to be added.  It is a mutually exclusive with SYSNAME.          */ 00370000
*/*  SYSNAME or NAME must be specified.                              */ 00371000
*/*                                                                  */ 00372000
*/*                                                                  */ 00373000
*/*  SYSNAME=descriptor name addr                                    */ 00374000
*/*                                                                  */ 00375000
*/*  'descriptor name addr' specifies the address of an 8            */ 00376000
*/*  character field that a system generated name is to be           */ 00377000
*/*  returned in.  It is a mutually exclusive with NAME. SYSNAME     */ 00378000
*/*  or NAME must be specified.                                      */ 00379000
*/*                                                                  */ 00380000
*/*                                                                  */ 00381000
*/*  ,TEXTPTR=text unit pointer list address                         */ 00382000
*/*                                                                  */ 00383000
*/*  'text unit pointer list address' specifies the address of the   */ 00384000
*/*  text unit pointer list.  Text units are required.               */ 00385000
*/*  TEXTPTR is a required parameter.                                */ 00386000
*/*                                                                  */ 00387000
*/*                                                                  */ 00388000
*/*  ,ENQ=CONDITIONAL                                                */ 00389000
*/*  ,ENQ=UNCONDITIONAL                                              */ 00390000
*/*                                                                  */ 00391000
*/*  see the PLAS version description of this keyword            @T1C*/ 00392000
*/*                                                                  */ 00393000
*/*                                                              @T1A*/ 00393100
*/*  ,ONEUSE=YES                                                 @T1A*/ 00393200
*/*  ,ONEUSE=NO                                                  @T1A*/ 00393300
*/*                                                              @T1A*/ 00393400
*/*  see the PLAS version (ONE_USE) description of this keyword  @T1A*/ 00393500
*/*                                                              @T1A*/ 00393600
*/*                                                              @T1A*/ 00393700
*/*  ,REUSE=YES                                                  @T1A*/ 00393800
*/*  ,REUSE=NO                                                   @T1A*/ 00393900
*/*                                                              @T1A*/ 00394000
*/*  see the PLAS version description of this keyword            @T1A*/ 00394100
*/*                                                              @T1A*/ 00394200
*/*                                                                  */ 00394300
*/*  ,MF=(E,ctrl prog)                                               */ 00395000
*/*                                                                  */ 00396000
*/*  specifies the execute form of the macro instruction using a     */ 00397000
*/*  remote control-program parameter list. 'ctrl prog' is the       */ 00398000
*/*  name of the parameter list defined via the LIST form. It        */ 00399000
*/*  must be aligned on a full word boundary.  MF is a required      */ 00400000
*/*  parameter. Both arguments are required.                         */ 00401000
*/*                                                                  */ 00402000
*/*                                                                  */ 00403000
*/*                                                                  */ 00404000
*/* OUTPUT =                                                         */ 00405000
*/*                                                                  */ 00406000
*/*                                                                  */ 00407000
*/*      For valid invocations of the LIST form:                     */ 00408000
*/*        Generates a declare for the storage for the request       */ 00409000
*/*        table.  A character declare is used. It is put on a       */ 00410000
*/*        full word boundary by default.                            */ 00411000
*/*                                                                  */ 00412000
*/*      For valid invocations of the execute form:                  */ 00413000
*/*        Generates the assignment statements to fill in the        */ 00414000
*/*        LIST form parameter list for the Dynamic OUTPUT add       */ 00415000
*/*        request. Generates the SVC for Dynamic OUTPUT.            */ 00416000
*/*        Generates assignment statements to return values          */ 00417000
*/*        from the SVC invocation to the callers specified          */ 00418000
*/*        fields, if any.                                           */ 00419000
*/*                                                                  */ 00420000
*/*                                                                  */ 00421000
*/*      PLS VERSION:                                                */ 00422000
*/*                                                                  */ 00423000
*/*      If invalid parameters are detected, only error messages     */ 00424000
*/*      will be generated (with the exception of DO and END         */ 00425000
*/*      statements for the execute form).                           */ 00426000
*/*                                                                  */ 00427000
*/*                                                                  */ 00428000
*/*      BAL VERSION:                                                */ 00429000
*/*                                                                  */ 00430000
*/*      If invalid parameters are detected, only MNOTES will be     */ 00431000
*/*      generated.                                                  */ 00432000
*/*                                                                  */ 00433000
*/*                                                                  */ 00434000
*/*                                                                  */ 00435000
*/*                                                                  */ 00436000
*/*   EXIT - NORMAL =                                                */ 00437000
*/*                                                                  */ 00438000
*/*     CONDITION = NO ERRORS DETECTED                               */ 00439000
*/*                                                                  */ 00440000
*/*     RETURN CODE = 0                                              */ 00441000
*/*                                                                  */ 00442000
*/*                                                                  */ 00443000
*/*                                                                  */ 00444000
*/*   EXIT - ERROR =                                                 */ 00445000
*/*                                                                  */ 00446000
*/*                                                                  */ 00447000
*/*     CONDITIONS =                                                 */ 00448000
*/*                                                                  */ 00449000
*/*        - ERRORS DETECTED IN INPUT PARAMETER LIST:                */ 00450000
*/*                                                                  */ 00451000
*/*          - A positional parameter is specified, but is not       */ 00452000
*/*            allowed.                                              */ 00453000
*/*                                                                  */ 00454000
*/*          - A keyword parameter contains an invalid value         */ 00455000
*/*                                                                  */ 00456000
*/*          - A required keyword parameter is not specified.        */ 00457000
*/*                                                                  */ 00458000
*/*          - A specified keyword parameter is incompatible with    */ 00459000
*/*            the specified macro form, or another specified        */ 00460000
*/*            keyword.                                              */ 00461000
*/*                                                                  */ 00462000
*/*                                                                  */ 00463000
*/*                                                                  */ 00464000
*/*     OUTPUT =                                                     */ 00465000
*/*                                                                  */ 00466000
*/*                                                                  */ 00467000
*/*          - Error messages are issued in the macro source listing */ 00468000
*/*            and in the modified source text.                      */ 00469000
*/*                                                                  */ 00470000
*/*                                                                  */ 00471000
*/*     RETURN CODE = 12  severe error indicated since no source     */ 00472000
*/*                       code is generated if an error is detected  */ 00473000
*/*                                                                  */ 00474000
*/*   EXTERNAL REFERENCES =                                          */ 00475000
*/*                                                                  */ 00476000
*/*     ROUTINES = NONE                                              */ 00477000
*/*                                                                  */ 00478000
*/*     DATA-AREAS = - execute form uses LIST form declare           */ 00479000
*/*                  - execute form sets EPILOG external macro       */ 00480000
*/*                    variable EHAREGS in PLAS version              */ 00481000
*/*                                                                  */ 00482000
*/*     CONTROL-BLOCKS = NONE                                        */ 00483000
*/*                                                                  */ 00484000
*/*                                                                  */ 00485000
*/*   TABLES = NONE                                                  */ 00486000
*/*                                                                  */ 00487000
*/*   EXECUTABLE MACROS = NONE                                       */ 00488000
*/*                                                                  */ 00489000
*/*   SERIALIZATION = N/A                                            */ 00490000
*/*                                                                  */ 00491000
*/*                                                                  */ 00492000
*/*                                                                  */ 00493000
*/*   MESSAGES =                                                     */ 00494000
*/*                                                                  */ 00495000
*/*                                                                  */ 00496000
*/*   AHA010 OUTADD ERROR:   POSITIONAL PARAMETERS ARE NOT           */ 00497000
*/*   ALLOWED.                                                       */ 00498000
*/*                                                                  */ 00499000
*/*   AHA020 OUTADD ERROR:   KEYWORD PARAMETER <parm name>           */ 00500000
*/*   SPECIFIED INCORRECTLY.                                         */ 00501000
*/*                                                                  */ 00502000
*/*   AHA030 OUTADD ERROR:   KEYWORD PARAMETER <parm name>           */ 00503000
*/*   MUST BE SPECIFIED.                                             */ 00504000
*/*                                                                  */ 00505000
*/*   AHA040 OUTADD ERROR:   KEYWORD PARAMETER<S> <parm name(s)      */ 00506000
*/*   or description> SPECIFIED BUT, MUTUALLY EXCLUSIVE WITH         */ 00507000
*/*   <parm name | THE LIST MACRO FORM>                              */ 00508000
*/*                                                                  */ 00509000
*/*   AHA050 OUTADD ERROR:  PARAMETER LIST DECLARE NOT GENERATED     */ 00510000
*/*   DUE TO ERRORS FOUND IN THE LIST FORM INVOCATION<.|:  macro     */ 00511000
*/*   invocation>                                                    */ 00512000
*/*                                                                  */ 00513000
*/*   AHA060 OUTADD ERROR:  IF ONE_USE OR REUSE IS SPECIFIED AS      */ 00513300
*/*   YES THEN BOTH MUST BE SPECIFIED AS YES                     @01A*/ 00513600
*/*                                                                  */ 00514000
*/*                                                                  */ 00514500
*/*   ABEND CODES = N/A                                              */ 00515000
*/*                                                                  */ 00516000
*/*                                                                  */ 00517000
*/*   CHANGE ACTIVITY = P1,P2,D1,D2,T0,T1,01                     @01C*/ 00518000
*/*                                                                  */ 00519000
*/* $P1= PC20283 JBB2223 870629 PDJY: Dynamic OUTPUT support         */ 00520000
*/* $P2= PC20411 JBB2223 871005 PDJY: Dynamic OUTPUT support     @P2A*/ 00520500
*/* $D1= DCR0063 JBB2223 880101 PDJY: Dynamic OUTPUT support     @D1A*/ 00521000
*/* $D2= DCR0381 HBB3310 880118 PDJY: Dynamic OUTPUT support     @D2A*/ 00521500
*/* $T0= OY22236 HBB3310 890403 PDJY: One Use Support            @T0A*/ 00521700
*/* $T1= OY26434 HBB3310 900416 PDM1: One Use Support (BAL)      @T1A*/ 00521800
*/* $01= OY37240 HBB3310 901116 PDCL: Fix One Use Support        @01A*/ 00521900
*/*                                                                  */ 00522000
*/********************************************************************/ 00523000
*/* A 000000-999999                                              @P1A*/ 00524000
*/* C Remove level of indirection for TEXTPTR parameter.         @P2A*/ 00525000
*/* C Change operand of OR instruction from 4 bytes to 1 byte    @P2A*/ 00526000
*/*   to make both operands the same length.                     @P2A*/ 00527000
*/* D Removed dynamic output support from JBB2223                @D1A*/ 00527300
*/* A Added dynamic output support to HBB3310                    @D2A*/ 00527600
*/* A Added keywords ONE_USE and REUSE for one use support       @T0A*/ 00527800
*/* A Added keywords ONEUSE  and REUSE for one use support (BAL) @T1A*/ 00528000
*/* A Added requirement that ONEUSE and REUSE both be yes or     @01A*/ 00528200
*/*   both be no                                                 @01A*/ 00528400
*@EJECT;                                                                00528600
*/********************************************************************/ 00529000
*/*                                                                  */ 00530000
*/* Definition of the macro invocation.                              */ 00531000
*/*                                                                  */ 00532000
*/********************************************************************/ 00533000
*                                                                       00534000
*%OUTADD: MACRO KEYS( NAME,         SYSNAME,                            00535000
*                     TEXTPTR,      ENQ,                                00536000
*                     RETURN_CODE,  REASON_CODE,                        00537000
*                     KEY_IN_ERROR, MF,                                 00537700
*                     ONE_USE,      REUSE                               00538400
*                   );                        /*                 @T0C*/ 00539100
*                                                                       00540000
*                                                                       00541000
*                                                                       00542000
*/********************************************************************/ 00543000
*/*                                                                  */ 00544000
*/* Declaration of external macro variables.                         */ 00545000
*/*                                                                  */ 00546000
*/********************************************************************/ 00547000
*                                                                       00548000
*DCL                                                                    00549000
*  EHAREGS CHAR EXTERNAL;              /* Indicates to EPILOG which     00550000
*                                         registers to declare       */ 00551000
*                                                                       00552000
*                                                                       00553000
*/********************************************************************/ 00554000
*/*                                                                  */ 00555000
*/* Declaration of internal macro variables.                         */ 00556000
*/*                                                                  */ 00557000
*/********************************************************************/ 00558000
*                                                                       00559000
*DCL                                                                    00560000
*  IPARML_ERR_FOUND FIXED,             /* Parm list errors found        00561000
*                                         flag                       */ 00562000
*  IRETURN_CODE     FIXED,             /* Sets return code for macro */ 00563000
*  ILIST_DCL_LENGTH  CHAR,             /* Length of field declared by   00564000
*                                         the list form              */ 00565000
*  ICOMCOL          FIXED,             /* Will contain column number    00566000
*                                         to generate line comments  */ 00567000
*  IANS_TEXT1       CHAR,              /* Answer text to be             00568000
*                                         generated                  */ 00569000
*  IANS_TEXT2       CHAR,              /* Answer text to be             00570000
*                                         generated                  */ 00571000
*  IMSG010_TEXT1    CHAR,              /* Text constant for error       00572000
*                                         message 010                */ 00573000
*  IMSG020_TEXT1    CHAR,              /* Text constant for error       00574000
*                                         message 020                */ 00575000
*  IMSG020_TEXT2    CHAR,              /* Text constant for error       00576000
*                                         message 020                */ 00577000
*  IMSG030_TEXT1    CHAR,              /* Text constant for error       00578000
*                                         message 030                */ 00579000
*  IMSG030_TEXT2    CHAR,              /* Text constant for error       00580000
*                                         message 030                */ 00581000
*  IMSG040_TEXT1    CHAR,              /* Text constant for error       00582000
*                                         message 040                */ 00583000
*  IMSG040_TEXT2    CHAR,              /* Text constant for error       00584000
*                                         message 040                */ 00585000
*  IMSG050_TEXT1    CHAR,              /* Text constant for error       00585600
*                                         message 050            @01C*/ 00586200
*  IMSG060_TEXT1    CHAR;              /* Text constant for error       00586800
*                                         message 060            @01A*/ 00587400
*@EJECT;                                                                00588000
*/********************************************************************/ 00589000
*/*                                                                  */ 00590000
*/* Initialization of constants.                                     */ 00591000
*/*                                                                  */ 00592000
*/********************************************************************/ 00593000
*                                                                       00594000
*  ILIST_DCL_LENGTH = '36';            /* Length of list form declare   00595000
*                                         equals the length of the      00596000
*                                         IEFDOCNL parameter list       00597000
*                                         (32 bytes) plus the length    00598000
*                                         of the parameter list         00599000
*                                         pointer (4 bytes)          */ 00600000
*                                                                       00601000
*  ICOMCOL = 37;                       /* Column at which to generate   00602000
*                                         line commment              */ 00603000
*                                                                       00604000
*/********************************************************************/ 00605000
*/*                                                                  */ 00606000
*/* Initialization of error message text constants that are used     */ 00607000
*/* to build error messages for the detected invalid parameters.     */ 00608000
*/*                                                                  */ 00609000
*/********************************************************************/ 00610000
*                                                                       00611000
*/********************************************************************/ 00612000
*/* Text constants for error message 010.                            */ 00613000
*/********************************************************************/ 00614000
*                                                                       00615000
*IMSG010_TEXT1 =                                                        00616000
*  'AHA010 OUTADD ERROR:  POSITIONAL PARAMETERS ARE NOT ALLOWED.';      00617000
*                                      /* Text for error message 010 */ 00618000
*                                                                       00619000
*                                                                       00620000
*/********************************************************************/ 00621000
*/* Text constants for error message 020.                            */ 00622000
*/********************************************************************/ 00623000
*                                                                       00624000
*IMSG020_TEXT1 =                                                        00625000
*  'AHA020 OUTADD ERROR:  KEYWORD PARAMETER ';                          00626000
*                                      /* Text for first part of        00627000
*                                         error message 020          */ 00628000
*                                                                       00629000
*IMSG020_TEXT2 = ' SPECIFIED INCORRECTLY.'; /* Text for second          00630000
*                                         part of error message 020  */ 00631000
*                                                                       00632000
*                                                                       00633000
*/********************************************************************/ 00634000
*/* Text constants for error message 030.                            */ 00635000
*/********************************************************************/ 00636000
*                                                                       00637000
*IMSG030_TEXT1 = 'AHA030 OUTADD ERROR:  KEYWORD PARAMETER ';            00638000
*                                      /* Text for first part of        00639000
*                                         error message 030          */ 00640000
*                                                                       00641000
*IMSG030_TEXT2 = ' MUST BE SPECIFIED.'; /* Text for second part of      00642000
*                                         error message 030          */ 00643000
*                                                                       00644000
*                                                                       00645000
*/********************************************************************/ 00646000
*/* Text constants for error message 040.                            */ 00647000
*/********************************************************************/ 00648000
*                                                                       00649000
*IMSG040_TEXT1 = 'AHA040 OUTADD ERROR:  KEYWORD PARAMETER';             00650000
*                                      /* Text for first part of        00651000
*                                         error message 040          */ 00652000
*                                                                       00653000
*IMSG040_TEXT2 = ' SPECIFIED, BUT MUTUALLY EXCLUSIVE WITH ';            00654000
*                                      /* Text for second part of       00655000
*                                         error message 040          */ 00656000
*                                                                       00657000
*                                                                       00658000
*/********************************************************************/ 00659000
*/* Text constants for error message 050.                            */ 00660000
*/********************************************************************/ 00661000
*                                                                       00662000
*IMSG050_TEXT1 =                                                        00663000
*   'AHA050 OUTADD ERROR:  PARAMETER LIST DECLARE NOT GENERATED ' ||    00664000
*   'DUE TO ERRORS FOUND IN THE LIST FORM INVOCATION';                  00665000
*                                      /* Text for error message 050 */ 00666000
*                                                                       00666100
*                                                                       00666200
*/********************************************************************/ 00666300
*/* Text constants for error message 060.                        @01A*/ 00666400
*/********************************************************************/ 00666500
*                                                                       00666600
*IMSG060_TEXT1 =                                                        00666700
*   'AHA060 OUTADD ERROR:  IF ONE_USE OR REUSE IS SPECIFIED AS ' ||     00666800
*   'YES THEN BOTH MUST BE SPECIFIED AS YES';                           00666900
*                                 /* Text for error message 060  @01A*/ 00667000
*                                                                       00667100
*                                                                       00668000
*@EJECT;                                                                00669000
*/********************************************************************/ 00670000
*/*                                                                  */ 00671000
*/*               START OF MAINLINE PROCESSING                       */ 00672000
*/*                                                                  */ 00673000
*/********************************************************************/ 00674000
*                                                                       00675000
*                                                                       00676000
*/********************************************************************/ 00677000
*/* Initializes the parameter list error flag to indicate            */ 00678000
*/* errors have not yet been found in the macro parameter list.      */ 00679000
*/********************************************************************/ 00680000
*                                                                       00681000
*IPARML_ERR_FOUND = 0;                 /* Set the parm list errors      00682000
*                                         found flag off             */ 00683000
*                                                                       00684000
*                                                                       00685000
*/********************************************************************/ 00686000
*/* Branches to the routine to verify the MF keyword.                */ 00687000
*/********************************************************************/ 00688000
*                                                                       00689000
*GOTO LHA0010A;                        /* Branch to the VERIFY_MF       00690000
*                                         routine                    */ 00691000
*LHA0010B:;                            /* Label at which to return      00692000
*                                         from the VERIFY_MF routine */ 00693000
*                                                                       00694000
*                                                                       00695000
*/********************************************************************/ 00696000
*/* If the MF keyword is valid, branches to the routine to process   */ 00697000
*/* the macro form specified.                                        */ 00698000
*/********************************************************************/ 00699000
*                                                                       00700000
*IF IPARML_ERR_FOUND = 0 THEN          /* Test if MF was valid       */ 00701000
*  DO;                                 /* MF keyword valid           */ 00702000
*   IF MF(1) = 'L' THEN                /* Test if list macro form    */ 00703000
*    DO;                               /* List macro form            */ 00704000
*      GOTO LHA0020A;                  /* Branch to 'LIST_FORM'         00705000
*                                         routine to process list       00706000
*                                         form invocation            */ 00707000
*      LHA0020B:;                      /* Label at which to return      00708000
*                                         from 'LIST_FORM' routine   */ 00709000
*    END;                              /* List macro form            */ 00710000
*   ELSE                               /* Else, execute macro form   */ 00711000
*    DO;                               /* Execute macro form         */ 00712000
*      GOTO LHA0030A;                  /* Branch to 'EXECUTE_FORM'      00713000
*                                         routine to process execute    00714000
*                                         form invocation            */ 00715000
*      LHA0030B:;                      /* Label at which to return      00716000
*                                         from 'EXECUTE_FORM'routine */ 00717000
*    END;                              /* Execute macro form         */ 00718000
*  END;                                /* MF keyword valid           */ 00719000
*                                                                       00720000
*                                                                       00721000
*/********************************************************************/ 00722000
*/* Returns from the macro with return code 0 for a valid            */ 00723000
*/* invocation, 12 for an invalid invocation.                        */ 00724000
*/********************************************************************/ 00725000
*                                                                       00726000
*IF IPARML_ERR_FOUND = 0 THEN          /* Test if valid invocation   */ 00727000
*  IRETURN_CODE = 0;                   /* Valid macro invocation     */ 00728000
*ELSE                                  /* Else, invalid invocation   */ 00729000
*  IRETURN_CODE = 12;                  /* Invalid invocation         */ 00730000
*                                                                       00731000
*RETURN CODE(IRETURN_CODE);            /* Return from macro          */ 00732000
*@EJECT;                                                                00733000
*/********************************************************************/ 00734000
*/*                                                                  */ 00735000
*/* PROCEDURE NAME: VERIFY_MF                                        */ 00736000
*/*                                                                  */ 00737000
*/* DESCRIPTIVE NAME: Verifies the macro form keyword parameter.     */ 00738000
*/*                                                                  */ 00739000
*/* ENTRY: From mainline processing                                  */ 00740000
*/*                                                                  */ 00741000
*/* INPUT: MF keyword                                                */ 00742000
*/*                                                                  */ 00743000
*/* OUTPUT: For an invalid specification of the MF keyword:          */ 00744000
*/*          a. The parameter list error flag is set on.             */ 00745000
*/*          b. An error message is generated for the invalid        */ 00746000
*/*             condition found.                                     */ 00747000
*/*                                                                  */ 00748000
*/* EXIT: To mainline processing                                     */ 00749000
*/*                                                                  */ 00750000
*/* ROUTINES BRANCHED TO: None                                       */ 00751000
*/*                                                                  */ 00752000
*/********************************************************************/ 00753000
*                                                                       00754000
*LHA0010A:;                            /* Entry point of routine     */ 00755000
*                                                                       00756000
*/********************************************************************/ 00757000
*/* Tests if the MF keyword is specified. If it is specified,        */ 00758000
*/* tests if it has a valid value. If it is invalid or is not        */ 00759000
*/* specified, generates an error message and sets the parameter     */ 00760000
*/* list error flag on.                                              */ 00761000
*/********************************************************************/ 00762000
*                                                                       00763000
*IF MF = '' THEN                       /* Test if MF not specified   */ 00764000
*  DO;                                 /* MF is not specified        */ 00765000
*                                                                       00766000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      00767000
*                                         found flag on              */ 00768000
*                                                                       00769000
*    /****************************************************************/ 00770000
*    /* Generates the error message: AHA030 OUTADD ERROR: KEYWORD    */ 00771000
*    /* PARAMETER MF MUST BE SPECIFIED.                              */ 00772000
*    /****************************************************************/ 00773000
*                                                                       00774000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to skip   00775000
*                                         a line in modified source     00776000
*                                         text before error message  */ 00777000
*                                                                       00778000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    00779000
*                                         macro source listing error    00780000
*                                         message                    */ 00781000
*                                                                       00782000
*    IANS_TEXT1 = IMSG030_TEXT1 || 'MF' || IMSG030_TEXT2;               00783000
*                                      /* Completed text for error      00784000
*                                         message                    */ 00785000
*                                                                       00786000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          00787000
*                                      /* Generate error message        00788000
*                                         in modified source text    */ 00789000
*                                                                       00790000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message in     00791000
*                                         macro source listing       */ 00792000
*                                                                       00793000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to skip   00794000
*                                         a line in modified source     00795000
*                                         text after error message   */ 00796000
*                                                                       00797000
*  END;                                /* MF is not specified        */ 00798000
*                                                                       00799000
*/********************************************************************/ 00800000
*/* Tests if it is not the case that:                                */ 00801000
*/*   1. The execute form of MF is properly specified:               */ 00802000
*/*      a. the first argument is 'E'                                */ 00803000
*/*      b. the second argument is non null                          */ 00804000
*/*      c. the number of arguments is exactly two                   */ 00805000
*/*   OR                                                             */ 00806000
*/*   2. The list form of MF is properly specified:                  */ 00807000
*/*      a. the first argument is 'L'                                */ 00808000
*/*      b. the second argument is non null                          */ 00809000
*/*      c. the number of arguments is three or less                 */ 00810000
*/********************************************************************/ 00811000
*ELSE IF ^( ((MF(1) = 'E') & (MF(2) ^= '') & (NUMBER(MF) = 2)) |        00812000
*           ((MF(1) = 'L') & (MF(2) ^= '') & (NUMBER(MF) <= 3)) ) THEN  00813000
*  DO;                                 /* MF is not valid            */ 00814000
*                                                                       00815000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      00816000
*                                         found flag on              */ 00817000
*                                                                       00818000
*    /****************************************************************/ 00819000
*    /* Generates the error message: AHA020 OUTADD ERROR: KEYWORD    */ 00820000
*    /* PARAMETER MF SPECIFIED INCORRECTLY.                          */ 00821000
*    /****************************************************************/ 00822000
*                                                                       00823000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to skip   00824000
*                                         a line in modified source     00825000
*                                         text before error message  */ 00826000
*                                                                       00827000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    00828000
*                                         macro source listing error    00829000
*                                         message                    */ 00830000
*                                                                       00831000
*    IANS_TEXT1 = IMSG020_TEXT1 || 'MF' || IMSG020_TEXT2;               00832000
*                                      /* Completed text for error      00833000
*                                         message                    */ 00834000
*                                                                       00835000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          00836000
*                                      /* Generate error message        00837000
*                                         in modified source text    */ 00838000
*                                                                       00839000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        00840000
*                                         in macro source listing    */ 00841000
*                                                                       00842000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to skip   00843000
*                                         a line in modified source     00844000
*                                         text after error message   */ 00845000
*                                                                       00846000
*  END;                                /* MF is not valid            */ 00847000
*                                                                       00848000
*                                                                       00849000
*/********************************************************************/ 00850000
*/* Returns from this routine to the label just following the        */ 00851000
*/* branch to this routine.                                          */ 00852000
*/********************************************************************/ 00853000
*                                                                       00854000
*GOTO LHA0010B;                        /* Return from VERIFY_MF      */ 00855000
*@EJECT;                                                                00856000
*/********************************************************************/ 00857000
*/*                                                                  */ 00858000
*/* PROCEDURE NAME: LIST_FORM                                        */ 00859000
*/*                                                                  */ 00860000
*/* DESCRIPTIVE NAME: Processes the list form macro invocation.      */ 00861000
*/*                                                                  */ 00862000
*/* OPERATION: 1. Verifies the list form macro parameter list.       */ 00863000
*/*                                                                  */ 00864000
*/*            2. If the parameter list is valid, generates the      */ 00865000
*/*               declare in modified source text for the list       */ 00866000
*/*               form invocation.                                   */ 00867000
*/*                                                                  */ 00868000
*/*            3. If the parameter list is invalid, generates        */ 00869000
*/*               error messages.                                    */ 00870000
*/*                                                                  */ 00871000
*/* ENTRY: From mainline processing                                  */ 00872000
*/*                                                                  */ 00873000
*/* INPUT: Macro parameter list                                      */ 00874000
*/*                                                                  */ 00875000
*/* OUTPUT: 1. For invalid invocations:                              */ 00876000
*/*            a. The parameter list error flag is set on.           */ 00877000
*/*            b. Error messages are generated for the invalid       */ 00878000
*/*               parameters found.                                  */ 00879000
*/*            c. An error message is generated echoing the          */ 00880000
*/*               the macro invocation and indicating the            */ 00881000
*/*               list form declare was not generated.               */ 00882000
*/*                                                                  */ 00883000
*/*         2. For valid invocations:                                */ 00884000
*/*                                                                  */ 00885000
*/*            Generates the declare for storage.  The declare       */ 00886000
*/*            for storage consists of 4 bytes to be used as         */ 00887000
*/*            the parameter list pointer, followed by the           */ 00888000
*/*            number of bytes equal to the length of the            */ 00889000
*/*            IEFDOCNL parameter list.                              */ 00890000
*/*                                                                  */ 00891000
*/*  NOTES: If the IEFDOCNL parameter list length changes the        */ 00892000
*/*         macro variable LIST_DCL_LENGTH will need to be           */ 00893000
*/*         changed to be initialized to the proper length for       */ 00894000
*/*         the list form declare.                                   */ 00895000
*/*                                                                  */ 00896000
*/* EXIT: To mainline processing                                     */ 00897000
*/*                                                                  */ 00898000
*/* ROUTINES BRANCHED TO: None                                       */ 00899000
*/*                                                                  */ 00900000
*/********************************************************************/ 00901000
*                                                                       00902000
*LHA0020A:;                            /* Entry point of the routine */ 00903000
*                                                                       00904000
*                                                                       00905000
*/********************************************************************/ 00906000
*/* Verifies the list form macro invocation. Checks for              */ 00907000
*/* extraneous, invalid and missing parameters.                      */ 00908000
*/********************************************************************/ 00909000
*                                                                       00910000
*                                                                       00911000
*/********************************************************************/ 00912000
*/*  Positional parameters are not used in the list form             */ 00913000
*/*  invocation. Checks that they are not specified. If they are,    */ 00914000
*/*  then generates the error message 010 and sets the parameter     */ 00915000
*/*  list error flag on.                                             */ 00916000
*/********************************************************************/ 00917000
*                                                                       00918000
*IF MACLIST ^= '' THEN                 /* Test if positional parms   */ 00919000
*  DO;                                 /* Positional parms specified */ 00920000
*                                                                       00921000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      00922000
*                                         found flag on              */ 00923000
*                                                                       00924000
*    /****************************************************************/ 00925000
*    /* Generates the error message: AHA010 OUTADD ERROR:            */ 00926000
*    /* POSITIONAL PARAMETERS ARE NOT ALLOWED.                       */ 00927000
*    /****************************************************************/ 00928000
*                                                                       00929000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to skip   00930000
*                                         a line in modified source     00931000
*                                         text before error message  */ 00932000
*                                                                       00933000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    00934000
*                                         macro source listing error    00935000
*                                         message                    */ 00936000
*                                                                       00937000
*    IANS_TEXT1 = IMSG010_TEXT1;                                        00938000
*                                      /* Completed text for error      00939000
*                                         message                    */ 00940000
*                                                                       00941000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          00942000
*                                      /* Generate error message        00943000
*                                         in modified source text    */ 00944000
*                                                                       00945000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        00946000
*                                         in macro source listing    */ 00947000
*                                                                       00948000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to skip   00949000
*                                         a line in modified source     00950000
*                                         text after error message   */ 00951000
*                                                                       00952000
*  END;                                /* Positional parms specified */ 00953000
*                                                                       00954000
*                                                                       00955000
*/********************************************************************/ 00956000
*/* Checks that execute form keyword parameters not used in the      */ 00957000
*/* list form are not specified.  If they are, then generates        */ 00958000
*/* error message 040 and sets the parameter list error flag on.     */ 00959000
*/********************************************************************/ 00960000
*                                                                       00961000
*/* Tests if any execute form parameters not used in the list form      00962000
*   are specified                                                    */ 00963000
*IF (NAME    ^= '') | (SYSNAME ^= '') | (REASON_CODE ^= '') |           00964000
*   (TEXTPTR ^= '') | (ENQ     ^= '') | (RETURN_CODE ^= '') |           00965000
*   (KEY_IN_ERROR ^= '') | (ONE_USE ^= '') | (REUSE ^= '') THEN /*      00965600
*                                                                @T0C*/ 00966200
*                                                                       00967000
*  DO;                                 /* Execute form parms            00968000
*                                         specified                  */ 00969000
*                                                                       00970000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      00971000
*                                         found flag on              */ 00972000
*                                                                       00973000
*    /****************************************************************/ 00974000
*    /* Generates the error message: AHA040 OUTADD ERROR: KEYWORD    */ 00975000
*    /* PARAMETER(S) FROM THE EXECUTE MACRO FORM SPECIFIED, BUT      */ 00976000
*    /* MUTUALLY EXCLUSIVE WITH THE LIST MACRO FORM.                 */ 00977000
*    /****************************************************************/ 00978000
*                                                                       00979000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to skip   00980000
*                                         a line in modified source     00981000
*                                         text before error message  */ 00982000
*                                                                       00983000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    00984000
*                                         macro source listing error    00985000
*                                         message                    */ 00986000
*                                                                       00987000
*    IANS_TEXT1 = IMSG040_TEXT1 || '(S) FROM THE EXECUTE MACRO FORM' || 00988000
*                 IMSG040_TEXT2 || 'THE LIST MACRO FORM.';              00989000
*                                      /* Completed text for error      00990000
*                                         message                    */ 00991000
*                                                                       00992000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          00993000
*                                      /* Generate error message        00994000
*                                         in modified source text    */ 00995000
*                                                                       00996000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        00997000
*                                         in macro source listing    */ 00998000
*                                                                       00999000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to skip   01000000
*                                         a line in modified source     01001000
*                                         text after error message   */ 01002000
*                                                                       01003000
*  END;                                /* Execute form parms            01004000
*                                         specified                  */ 01005000
*                                                                       01006000
*                                                                       01007000
*/********************************************************************/ 01008000
*/* If the list form macro parameter list is valid, then             */ 01009000
*/* generates the declare for the Dynamic OUTPUT parameter list.     */ 01010000
*/* If the macro parameter list is invalid, the macro invocation     */ 01011000
*/* is echoed in an error message.                                   */ 01012000
*/********************************************************************/ 01013000
*                                                                       01014000
*IF IPARML_ERR_FOUND = 0 THEN          /* Test if no errors found in    01015000
*                                         the parameter list         */ 01016000
*  DO;                                 /* No errors found in the        01017000
*                                         parameter list             */ 01018000
*                                                                       01019000
*    ANS COL(MACLMAR) NORESCAN (MACLABEL);  /* Echo the macro label  */ 01020000
*                                                                       01021000
*/********************************************************************/ 01022000
*/* Generates the declare for the Dynamic OUTPUT parameter list.     */ 01023000
*/* Uses the label as specified in the second MF argument.  If       */ 01024000
*/* the third MF argument is specified, uses it for the declare      */ 01025000
*/* attribute.                                                       */ 01026000
*/********************************************************************/ 01027000
*                                                                       01028000
*    IF NUMBER(MF) = 3 THEN            /* Test if the third MF          01029000
*                                         argument is specified      */ 01030000
*      IANS_TEXT2 = MF(3);             /* Uses the third MF argument    01031000
*                                         for the declare attribute  */ 01032000
*    ELSE                              /* The third MF argument is      01033000
*                                         not specified              */ 01034000
*      IANS_TEXT2 = 'BOUNDARY(WORD)';  /* Uses the default of boundary  01035000
*                                        word                        */ 01036000
*                                                                       01037000
*    IANS_TEXT1 = 'DCL ' || MF(2) || ' ' || IANS_TEXT2 ||               01038000
*                 ' CHAR(' || ILIST_DCL_LENGTH || ');';                 01039000
*                                      /* Build string for LIST form    01040000
*                                         declare                    */ 01041000
*                                                                       01042000
*    ANSWER COL(MACCOL) SKIP(1) NORESCAN (IANS_TEXT1);                  01043000
*                                      /* Generate LIST form declare */ 01044000
*                                                                       01045000
*    IANS_TEXT1 = ' /* OUTADD LIST form declare:  ' ||                  01046000
*                 '?' || MACLABEL || ' ' || MACNAME || ' ';             01047000
*                                      /* Build string for first part   01048000
*                                         of line comment on            01049000
*                                         declaration                */ 01050000
*                                                                       01051000
*    ANSWER COL(ICOMCOL) NORESCAN (IANS_TEXT1);                         01052000
*                                      /* Generate line comment      */ 01053000
*                                                                       01054000
*    IANS_TEXT1 = MACLIST || ' ' || MACKEYS || ' */'; /* Build string   01055000
*                                         for second part of comment */ 01056000
*                                                                       01057000
*    ANSWER NORESCAN (IANS_TEXT1);     /* Generate second part of       01058000
*                                         line comment               */ 01059000
*                                                                       01060000
*  END;                                /* No errors found in the        01061000
*                                         parameter list             */ 01062000
*                                                                       01063000
*ELSE                                  /* Errors were found in the      01064000
*                                         parameter list             */ 01065000
*  DO;                                 /* Generate error message     */ 01066000
*                                                                       01067000
*    /****************************************************************/ 01068000
*    /* Generates the error message: AHA050 OUTADD ERROR:            */ 01069000
*    /* LIST FORM DECLARE NOT GENERATED DUE TO ERRORS FOUND          */ 01070000
*    /* IN THE LIST FORM INVOCATION: <macro invocation>              */ 01071000
*    /* in modified source text. The error message in the macro      */ 01072000
*    /* source listing does not include the macro invocation.        */ 01073000
*    /****************************************************************/ 01074000
*                                                                       01075000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01076000
*                                         skip a line in modified       01077000
*                                         source text before error      01078000
*                                         message                    */ 01079000
*                                                                       01080000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01081000
*                                         macro source listing error    01082000
*                                         message                    */ 01083000
*                                                                       01084000
*    IANS_TEXT1 = IMSG050_TEXT1 || ':  ?' || MACLABEL || ' ' ||         01085000
*                 MACNAME || ' ';      /* Build first part of error     01086000
*                                         message for modified source   01087000
*                                         text                       */ 01088000
*                                                                       01089000
*    ANSWER COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1);                01090000
*                                      /* Generate first part of        01091000
*                                         error message for modified    01092000
*                                         source text                */ 01093000
*                                                                       01094000
*    ANS NORESCAN MSG(IMSG050_TEXT1 || '.' ); /* Generate error message 01095000
*                                         in macro source listing    */ 01096000
*                                                                       01097000
*    IANS_TEXT1 = MACLIST || ' ' || MACKEYS;                            01098000
*                                      /* Build second part of          01099000
*                                         error message for modified    01100000
*                                         source text                */ 01101000
*                                                                       01102000
*    ANSWER NORESCAN (IANS_TEXT1 || ' */');                             01103000
*                                      /* Generate second part of       01104000
*                                         error message for modified    01105000
*                                         source text                */ 01106000
*                                                                       01107000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01108000
*                                         skip a line in modified       01109000
*                                         source text after error       01110000
*                                         message                    */ 01111000
*                                                                       01112000
*  END;                                /* Generate error message     */ 01113000
*                                                                       01114000
*                                                                       01115000
*/********************************************************************/ 01116000
*/* Returns from the LIST_FORM routine to the label just             */ 01117000
*/* following the branch to this routine.                            */ 01118000
*/********************************************************************/ 01119000
*                                                                       01120000
*GOTO  LHA0020B;                       /* Return from LIST_FORM         01121000
*                                         routine                    */ 01122000
*@EJECT;                                                                01123000
*/********************************************************************/ 01124000
*/*                                                                  */ 01125000
*/* PROCEDURE NAME: EXECUTE_FORM                                     */ 01126000
*/*                                                                  */ 01127000
*/* DESCRIPTIVE NAME: Processes the execute form macro invocation.   */ 01128000
*/*                                                                  */ 01129000
*/* OPERATION: 1. Generates the DO statement with the echo of        */ 01130000
*/*               the macro invocation.                              */ 01131000
*/*                                                                  */ 01132000
*/*            2. Verifies the execute form macro parameter list.    */ 01133000
*/*               The parameter list will be checked for errors      */ 01134000
*/*               which would prevent or interfere with filling      */ 01135000
*/*               in the Dynamic OUTPUT parameter list.              */ 01136000
*/*                                                                  */ 01137000
*/*               A.  Checks that required parameters and            */ 01138000
*/*                   parameters with mutual exclusivity             */ 01139000
*/*                   conditions are properly specified.             */ 01140000
*/*                                                                  */ 01141000
*/*               B.  Verify keyword arguments:                      */ 01142000
*/*                                                                  */ 01143000
*/*                   For asis type parameters, checks that the      */ 01144000
*/*                   correct number of parameters are specified.    */ 01145000
*/*                                                                  */ 01146000
*/*                   For choice-data type parameters, checks that   */ 01147000
*/*                   a valid value is specified.                    */ 01148000
*/*                                                                  */ 01149000
*/*            3. If the execute form macro parameter list is        */ 01150000
*/*               valid:                                             */ 01151000
*/*                                                                  */ 01152000
*/*               A. Branches to the routine to generate the code    */ 01153000
*/*                  to fill in the Dynamic OUTPUT parameter         */ 01154000
*/*                  list.                                           */ 01155000
*/*                                                                  */ 01156000
*/*               B. Branches to the routine to generate the code    */ 01157000
*/*                  to establish linkage to the parameter list      */ 01158000
*/*                  and invoke Dynamic OUTPUT.                      */ 01159000
*/*                                                                  */ 01160000
*/*               C. Branches to the routine to generate the code    */ 01161000
*/*                  to return fields from Dynamic OUTPUT, as        */ 01162000
*/*                  specified in the macro parameter list.          */ 01163000
*/*                                                                  */ 01164000
*/*            4. Generates the END statement with the echo of       */ 01165000
*/*               the macro invocation.                              */ 01166000
*/*                                                                  */ 01167000
*/* ENTRY: From mainline processing                                  */ 01168000
*/*                                                                  */ 01169000
*/* INPUT: macro parameter list                                      */ 01170000
*/*                                                                  */ 01171000
*/* OUTPUT: If invalid parameters are detected:                      */ 01172000
*/*          1. The parameter list error flag is set on.             */ 01173000
*/*          2. Error messages are generated.                        */ 01174000
*/*         If the parameter list is valid, code is generated        */ 01175000
*/*         in modified source text.                                 */ 01176000
*/*                                                                  */ 01177000
*/* EXIT: To mainline processing                                     */ 01178000
*/*                                                                  */ 01179000
*/* ROUTINES BRANCHED TO: 1. CHECK_REQUIRED&MUTUAL                   */ 01180000
*/*                       2. CHECK_ARGUMENTS                         */ 01181000
*/*                       3. FILL_IN_PARM_LIST                       */ 01182000
*/*                       4. INVOKE_DYNAMIC_OUTPUT                   */ 01183000
*/*                       5. RETURN_FIELDS                           */ 01184000
*/*                                                                  */ 01185000
*/********************************************************************/ 01186000
*                                                                       01187000
*LHA0030A:;                            /* Entry point of routine     */ 01188000
*                                                                       01189000
*/********************************************************************/ 01190000
*/* Initializes the macro output for the invocation of the           */ 01191000
*/* execute form of the macro.                                       */ 01192000
*/********************************************************************/ 01193000
*                                                                       01194000
*ANSWER(MACLABEL) COLUMN(MACLMAR) NORESCAN; /* Generate label from      01195000
*                                      macro invocation              */ 01196000
*                                                                       01197000
*                                                                       01198000
*ANS NORESCAN SKIP(1) COL(MACCOL) ('DO;'); /* Generate the              01199000
*                                      beginning of the macro DO        01200000
*                                      group                         */ 01201000
*                                                                       01202000
*IANS_TEXT1 = '/* ?' || MACLABEL || ' ' || MACNAME; /* Build            01203000
*                                      first part of comment to echo    01204000
*                                      macro invocation. This is        01205000
*                                      done in two parts to ensure      01206000
*                                      this string does not exceed      01207000
*                                      1000 characters              */  01208000
*                                                                       01209000
*ANS NORESCAN COL(ICOMCOL) (IANS_TEXT1); /* Echo the first part         01210000
*                                      of the macro invocation      */  01211000
*                                                                       01212000
*IANS_TEXT1 = ' ' || MACLIST || ' ' || MACKEYS || ' */'; /* Build       01213000
*                                      second part of macro             01214000
*                                      invocation                   */  01215000
*                                                                       01216000
*ANS NORESCAN (IANS_TEXT1);         /* Echo the remainder of the        01217000
*                                      macro invocation             */  01218000
*                                                                       01219000
*                                                                       01220000
*/********************************************************************/ 01221000
*/* Verifies that required parameters are specified and that         */ 01222000
*/* parameters with mutual exclusivity conditions are properly       */ 01223000
*/* specified.                                                       */ 01224000
*/********************************************************************/ 01225000
*                                                                       01226000
*GOTO LHA0040A;                        /* Branch to                     01227000
*                                         CHECK_REQUIRED&MUTUAL      */ 01228000
*LHA0040B:;                            /* Point of return from          01229000
*                                         CHECK_REQUIRED&MUTUAL      */ 01230000
*                                                                       01231000
*                                                                       01232000
*/********************************************************************/ 01233000
*/* Verify keyword arguments                                         */ 01234000
*/********************************************************************/ 01235000
*                                                                       01236000
*GOTO LHA0050A;                        /* Branch to CHECK_ARGUMENTS  */ 01237000
*LHA0050B:;                            /* Point of return from          01238000
*                                         CHECK_ARGUMENTS            */ 01239000
*                                                                       01240000
*                                                                       01241000
*/********************************************************************/ 01242000
*/* If the execute form parameter list is valid, branches to the     */ 01243000
*/* routines to generate the code to fill in the parameter list      */ 01244000
*/* for Dynamic OUTPUT, invoke Dynamic OUTPUT, and return the        */ 01245000
*/* output fields from Dynamic OUTPUT.                               */ 01246000
*/********************************************************************/ 01247000
*                                                                       01248000
*IF IPARML_ERR_FOUND = 0 THEN           /* Test if the parameter        01249000
*                                          list is valid             */ 01250000
*  DO;                                  /* Parameter list valid      */ 01251000
*    GOTO LHA0060A;                     /* Branch to FILL_IN_PARM_      01252000
*                                          LIST routine              */ 01253000
*    LHA0060B:;                         /* Point at which to return     01254000
*                                          from FILL_IN_PARM_LIST       01255000
*                                          routine                   */ 01256000
*    GOTO LHA0070A;                     /* Branch to INVOKE_DYANMIC_    01257000
*                                          OUTPUT routine            */ 01258000
*    LHA0070B:;                         /* Point at which to return     01259000
*                                          from INVOKE_DYNAMIC_OUTPUT   01260000
*                                          routine                   */ 01261000
*    GOTO LHA0080A;                     /* Branch to RETURN_FIELDS      01262000
*                                          routine                   */ 01263000
*    LHA0080B:;                         /* Point at which to return     01264000
*                                          from RETURN_FIELDS           01265000
*                                          routine                   */ 01266000
*  END;                                 /* Parameter list valid      */ 01267000
*                                                                       01268000
*                                                                       01269000
*/********************************************************************/ 01270000
*/* Final macro output for the execute form of the macro.            */ 01271000
*/********************************************************************/ 01272000
*                                                                       01273000
*ANS NORESCAN SKIP(1) COL(MACCOL) ('END;'); /* Generate the             01274000
*                                      end of the macro DO group     */ 01275000
*                                                                       01276000
*IANS_TEXT1 = '/* ?' || MACLABEL || ' ' || MACNAME; /* Build            01277000
*                                      first part of comment to echo    01278000
*                                      macro invocation. This is        01279000
*                                      done in two parts to ensure      01280000
*                                      this string does not exceed      01281000
*                                      1000 characters              */  01282000
*                                                                       01283000
*ANS NORESCAN COL(ICOMCOL) (IANS_TEXT1); /* Echo the first part         01284000
*                                      of the macro invocation      */  01285000
*                                                                       01286000
*IANS_TEXT1 = ' ' || MACLIST || ' ' || MACKEYS || ' */'; /* Build       01287000
*                                      second part of macro             01288000
*                                      invocation                   */  01289000
*                                                                       01290000
*ANS NORESCAN (IANS_TEXT1);         /* Echo the remainder of the        01291000
*                                      macro invocation             */  01292000
*                                                                       01293000
*                                                                       01294000
*/********************************************************************/ 01295000
*/* Returns from this routine to the label following the branch      */ 01296000
*/* to this routine.                                                 */ 01297000
*/********************************************************************/ 01298000
*                                                                       01299000
*GOTO LHA0030B;                         /* Return from EXEC_FORM        01300000
*                                          routine                   */ 01301000
*@EJECT;                                                                01302000
*/********************************************************************/ 01303000
*/*                                                                  */ 01304000
*/* ROUTINE NAME: CHECK_REQUIRED&MUTUAL                              */ 01305000
*/*                                                                  */ 01306000
*/* FUNCTION: Checks execute macro form parameters that are          */ 01307000
*/*           required or have mutual exclusivity conditions.        */ 01308000
*/*                                                                  */ 01309000
*/* ENTRY: From EXEC_FORM routine                                    */ 01310000
*/*                                                                  */ 01311000
*/* INPUT: NAME and SYSNAME keyword parameters.                      */ 01312000
*/*                                                                  */ 01313000
*/* OUTPUT: If invalid parameters are detected:                      */ 01314000
*/*          1. The parameter list error flag is set on.             */ 01315000
*/*          2. Error messages are generated.                        */ 01316000
*/*                                                                  */ 01317000
*/* EXIT: To EXEC_FORM routine                                       */ 01318000
*/*                                                                  */ 01319000
*/* ROUTINE CALLED: None                                             */ 01320000
*/*                                                                  */ 01321000
*/********************************************************************/ 01322000
*                                                                       01323000
*LHA0040A:;                            /* Entry point of routine     */ 01324000
*                                                                       01325000
*                                                                       01326000
*/********************************************************************/ 01327000
*/*  Positional parameters are not used in the execute form          */ 01328000
*/*  invocation. Checks that they are not specified. If they are,    */ 01329000
*/*  then generates the error message 010 and sets the parameter     */ 01330000
*/*  list error flag on.                                             */ 01331000
*/********************************************************************/ 01332000
*                                                                       01333000
*IF MACLIST ^= '' THEN                 /* Test if positional parms   */ 01334000
*  DO;                                 /* Positional parms specified */ 01335000
*                                                                       01336000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01337000
*                                         found flag on              */ 01338000
*                                                                       01339000
*    /****************************************************************/ 01340000
*    /* Generates the error message: AHA010 OUTADD ERROR:            */ 01341000
*    /* POSITIONAL PARAMETERS ARE NOT ALLOWED.                       */ 01342000
*    /****************************************************************/ 01343000
*                                                                       01344000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to skip   01345000
*                                         a line in modified source     01346000
*                                         text before error message  */ 01347000
*                                                                       01348000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01349000
*                                         macro source listing error    01350000
*                                         message                    */ 01351000
*                                                                       01352000
*    IANS_TEXT1 = IMSG010_TEXT1;                                        01353000
*                                      /* Completed text for error      01354000
*                                         message                    */ 01355000
*                                                                       01356000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01357000
*                                      /* Generate error message        01358000
*                                         in modified source text    */ 01359000
*                                                                       01360000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01361000
*                                         in macro source listing    */ 01362000
*                                                                       01363000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to skip   01364000
*                                         a line in modified source     01365000
*                                         text after error message   */ 01366000
*                                                                       01367000
*  END;                                /* Positional parms specified */ 01368000
*                                                                       01369000
*                                                                       01370000
*/********************************************************************/ 01371000
*/*  NAME and SYSNAME parameters are mutually exclusive. If both     */ 01372000
*/*  are specified, generate error message 040 and set the           */ 01373000
*/*  parameter list error flag on.                                   */ 01374000
*/********************************************************************/ 01375000
*IF (NAME ^= '') & (SYSNAME ^= '') THEN  /* Test if both NAME and       01376000
*                                         SYSNAME parameters are        01377000
*                                         specified                  */ 01378000
*  DO;                                 /* NAME and SYSNAME parameters   01379000
*                                         are specified.             */ 01380000
*                                                                       01381000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01382000
*                                         found flag on              */ 01383000
*                                                                       01384000
*    /****************************************************************/ 01385000
*    /* Generates the error message: AHA040 OUTADD ERROR:            */ 01386000
*    /* KEYWORD PARAMETER 'SYSNAME' SPECIFIED, BUT MUTUALLY          */ 01387000
*    /* EXCLUSIVE WITH THE 'NAME' KEYWORD.                           */ 01388000
*    /****************************************************************/ 01389000
*                                                                       01390000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01391000
*                                         skip a line in modified       01392000
*                                         source text before error      01393000
*                                         message                    */ 01394000
*                                                                       01395000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01396000
*                                         macro source listing error    01397000
*                                         message                    */ 01398000
*                                                                       01399000
*    IANS_TEXT1 = IMSG040_TEXT1 || ' ''SYSNAME''' || IMSG040_TEXT2 ||   01400000
*                 'THE ''NAME'' KEYWORD.'; /* Build text for error      01401000
*                                         message                    */ 01402000
*                                                                       01403000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01404000
*                                      /* Generate error message        01405000
*                                         in modified source text    */ 01406000
*                                                                       01407000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01408000
*                                         in macro source listing    */ 01409000
*                                                                       01410000
*  END;                                /* NAME and SYSNAME parameters   01411000
*                                         are specified.             */ 01412000
*                                                                       01413000
*                                                                       01414000
*/********************************************************************/ 01415000
*/*  NAME or SYSNAME parameter must be specified. If neither are     */ 01416000
*/*  specified, generate error message 030 and set the parameter     */ 01417000
*/*  list error flag on.                                             */ 01418000
*/********************************************************************/ 01419000
*ELSE IF (NAME = '') & (SYSNAME = '') THEN                              01420000
*  DO;                                 /* Neither SYSNAME nor NAME      01421000
*                                         parameters are specified   */ 01422000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01423000
*                                         found flag on              */ 01424000
*                                                                       01425000
*                                                                       01426000
*    /****************************************************************/ 01427000
*    /* Generates the error message: AHA030 OUTADD ERROR:            */ 01428000
*    /* KEYWORD PARAMETER 'NAME' OR 'SYSNAME' MUST BE SPECIFIED.     */ 01429000
*    /****************************************************************/ 01430000
*                                                                       01431000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01432000
*                                         skip a line in modified       01433000
*                                         source text before error      01434000
*                                         message                    */ 01435000
*                                                                       01436000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01437000
*                                         macro source listing error    01438000
*                                         message                    */ 01439000
*                                                                       01440000
*    IANS_TEXT1 = IMSG030_TEXT1 || '''NAME'' OR ''SYSNAME''' ||         01441000
*                 IMSG030_TEXT2;       /* Completed text for error      01442000
*                                         message                    */ 01443000
*                                                                       01444000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01445000
*                                      /* Generate error message        01446000
*                                         in modified source text    */ 01447000
*                                                                       01448000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01449000
*                                         in macro source listing    */ 01450000
*                                                                       01451000
*  END;                                /* Neither SYSNAME nor NAME      01452000
*                                         parameters are specified   */ 01453000
*                                                                       01454000
*                                                                       01455000
*/********************************************************************/ 01456000
*/*  The TEXTPTR parameter must be specified. If it is not           */ 01457000
*/*  specified, generate error message 030 and set the parameter     */ 01458000
*/*  list error flag on.                                             */ 01459000
*/********************************************************************/ 01460000
*IF TEXTPTR = '' THEN                                                   01461000
*  DO;                                 /* If the TEXTPTR parameter      01462000
*                                         is not specified           */ 01463000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01464000
*                                         found flag on              */ 01465000
*                                                                       01466000
*                                                                       01467000
*    /****************************************************************/ 01468000
*    /* Generates the error message: AHA030 OUTADD ERROR:            */ 01469000
*    /* KEYWORD PARAMETER TEXTPTR MUST BE SPECIFIED.                 */ 01470000
*    /****************************************************************/ 01471000
*                                                                       01472000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01473000
*                                         skip a line in modified       01474000
*                                         source text before error      01475000
*                                         message                    */ 01476000
*                                                                       01477000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01478000
*                                         macro source listing error    01479000
*                                         message                    */ 01480000
*                                                                       01481000
*    IANS_TEXT1 = IMSG030_TEXT1 || 'TEXTPTR' ||                         01482000
*                 IMSG030_TEXT2;       /* Completed text for error      01483000
*                                         message                    */ 01484000
*                                                                       01485000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01486000
*                                      /* Generate error message        01487000
*                                         in modified source text    */ 01488000
*                                                                       01489000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01490000
*                                         in macro source listing    */ 01491000
*                                                                       01492000
*  END;                                /* Neither SYSNAME nor NAME      01493000
*                                         parameters are specified   */ 01494000
*                                                                       01495000
*                                                                       01496000
*/********************************************************************/ 01497000
*/* Returns from the CHECK_REQUIRED&MUTUAL routine. Branches to      */ 01498000
*/* the label just after the branch to this routine.                 */ 01499000
*/********************************************************************/ 01500000
*                                                                       01501000
*GOTO LHA0040B;                        /* Return from CHECK_REQUIRED&   01502000
*                                         MUTUAL routine             */ 01503000
*@EJECT;                                                                01504000
*/********************************************************************/ 01505000
*/*                                                                  */ 01506000
*/* ROUTINE NAME: CHECK_ARGUMENTS                                    */ 01507000
*/*                                                                  */ 01508000
*/* FUNCTION: Verifies that the parameter arguments are properly     */ 01509000
*/*           specified.                                             */ 01510000
*/*                                                                  */ 01511000
*/* ENTRY: From EXEC_FORM                                            */ 01512000
*/*                                                                  */ 01513000
*/* INPUT: Keyword macro parameters (except MF)                      */ 01514000
*/*                                                                  */ 01515000
*/* OUTPUT: If invalid parameters are detected:                      */ 01516000
*/*          1. The parameter list error flag is set on.             */ 01517000
*/*          2. Error messages are generated.                        */ 01518000
*/*                                                                  */ 01519000
*/* EXIT: EXEC_FORM                                                  */ 01520000
*/*                                                                  */ 01521000
*/* ROUTINES BRANCHED TO: None                                       */ 01522000
*/*                                                                  */ 01523000
*/********************************************************************/ 01524000
*                                                                       01525000
*LHA0050A:;                            /* Entry point of routine     */ 01526000
*                                                                       01527000
*/********************************************************************/ 01528000
*/* Verifies the NAME key word parameter field has 1 value, if       */ 01529000
*/* specified.  If it is specified and has zero values or more       */ 01530000
*/* than one value, generates error message 020 and sets the         */ 01531000
*/* parameter list error flag on.                                    */ 01532000
*/*                                                                  */ 01533000
*/* Note: the value returned by the NAME keyword variable equals     */ 01534000
*/* 'NAME' if the NAME macro keyword parameter was specified with    */ 01535000
*/* no arguments.  For example:  ...TEXTPTR(POINTER) NAME            */ 01536000
*/* MF(E,PARML)...                                                   */ 01537000
*/********************************************************************/ 01538000
*                                                                       01539000
*IF (NUMBER(NAME) > 1) | (NAME = 'NAME') THEN                           01540000
*                                      /* Test if NAME is specified     01541000
*                                         and has zero or more than     01542000
*                                         one value specified.   See    01543000
*                                         note in block comment         01544000
*                                         above                      */ 01545000
*  DO;                                 /* NAME is specified and has     01546000
*                                         zero or more than one         01547000
*                                         values specified           */ 01548000
*                                                                       01549000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01550000
*                                         found flag on              */ 01551000
*                                                                       01552000
*    /****************************************************************/ 01553000
*    /* Generates the error message: AHA020 OUTADD ERROR: KEYWORD    */ 01554000
*    /* PARAMETER 'NAME' SPECIFIED INCORRECTLY.                      */ 01555000
*    /****************************************************************/ 01556000
*                                                                       01557000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01558000
*                                         skip a line in modified       01559000
*                                         source text before error      01560000
*                                         message                    */ 01561000
*                                                                       01562000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01563000
*                                         macro source listing error    01564000
*                                         message                    */ 01565000
*                                                                       01566000
*    IANS_TEXT1 = IMSG020_TEXT1 || '''NAME''' || IMSG020_TEXT2;         01567000
*                                      /* Completed text for error      01568000
*                                         message                    */ 01569000
*                                                                       01570000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01571000
*                                      /* Generate error message        01572000
*                                         in modified source text    */ 01573000
*                                                                       01574000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01575000
*                                         in macro source listing    */ 01576000
*                                                                       01577000
*  END;                                /* NAME is specified and has     01578000
*                                         zero or more than one         01579000
*                                         value specified            */ 01580000
*                                                                       01581000
*                                                                       01582000
*/********************************************************************/ 01583000
*/* Verifies the SYSNAME key word parameter field has 1 value, if    */ 01584000
*/* specified.  If it is specified and has zero values or more       */ 01585000
*/* than one value, generates error message 020 and sets the         */ 01586000
*/* parameter list error flag on.                                    */ 01587000
*/********************************************************************/ 01588000
*                                                                       01589000
*IF (NUMBER(SYSNAME) > 1) | (SYSNAME = 'SYSNAME') THEN                  01590000
*                                      /* Test if SYSNAME is specified  01591000
*                                         and has zero or more than     01592000
*                                         one value specified        */ 01593000
*  DO;                                 /* SYSNAME is specified and has  01594000
*                                         zero or more than one         01595000
*                                         value specified            */ 01596000
*                                                                       01597000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01598000
*                                         found flag on              */ 01599000
*                                                                       01600000
*    /****************************************************************/ 01601000
*    /* Generates the error message: AHA020 OUTADD ERROR: KEYWORD    */ 01602000
*    /* PARAMETER SYSNAME SPECIFIED INCORRECTLY.                     */ 01603000
*    /****************************************************************/ 01604000
*                                                                       01605000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01606000
*                                         skip a line in modified       01607000
*                                         source text before error      01608000
*                                         message                    */ 01609000
*                                                                       01610000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01611000
*                                         macro source listing error    01612000
*                                         message                    */ 01613000
*                                                                       01614000
*    IANS_TEXT1 = IMSG020_TEXT1 || 'SYSNAME' || IMSG020_TEXT2;          01615000
*                                      /* Completed text for error      01616000
*                                         message                    */ 01617000
*                                                                       01618000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01619000
*                                      /* Generate error message        01620000
*                                         in modified source text    */ 01621000
*                                                                       01622000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01623000
*                                         in macro source listing    */ 01624000
*                                                                       01625000
*  END;                                /* SYSNAME is specified and has  01626000
*                                         zero or more than one         01627000
*                                         value specified            */ 01628000
*                                                                       01629000
*                                                                       01630000
*/********************************************************************/ 01631000
*/* Verifies the TEXTPTR key word parameter field has 1 value, if    */ 01632000
*/* specified.  If it is specified and has zero values or more       */ 01633000
*/* than one value, generates error message 020 and sets the         */ 01634000
*/* parameter list error flag on.                                    */ 01635000
*/********************************************************************/ 01636000
*                                                                       01637000
*IF (NUMBER(TEXTPTR) > 1) | (TEXTPTR = 'TEXTPTR') THEN                  01638000
*                                      /* Test if TEXTPTR is speci-     01639000
*                                         fied and has zero or more     01640000
*                                         than one value             */ 01641000
*  DO;                                 /* TEXTPTR is specified and      01642000
*                                         has zero or more than one     01643000
*                                         value                      */ 01644000
*                                                                       01645000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01646000
*                                         found flag on              */ 01647000
*                                                                       01648000
*    /****************************************************************/ 01649000
*    /* Generates the error message: AHA020 OUTADD ERROR: KEYWORD    */ 01650000
*    /* PARAMETER TEXTPTR SPECIFIED INCORRECTLY.                     */ 01651000
*    /****************************************************************/ 01652000
*                                                                       01653000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01654000
*                                         skip a line in modified       01655000
*                                         source text before error      01656000
*                                         message                    */ 01657000
*                                                                       01658000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01659000
*                                         macro source listing error    01660000
*                                         message                    */ 01661000
*                                                                       01662000
*    IANS_TEXT1 = IMSG020_TEXT1 || 'TEXTPTR' || IMSG020_TEXT2;          01663000
*                                      /* Completed text for error      01664000
*                                         message                    */ 01665000
*                                                                       01666000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01667000
*                                      /* Generate error message        01668000
*                                         in modified source text    */ 01669000
*                                                                       01670000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01671000
*                                         in macro source listing    */ 01672000
*                                                                       01673000
*  END;                                /* TEXTPTR is specified and      01674000
*                                         has zero or more than one     01675000
*                                         value                      */ 01676000
*                                                                       01677000
*                                                                       01678000
*/********************************************************************/ 01679000
*/* Verifies the RETURN_CODE key word parameter field has 1          */ 01680000
*/* value, if specified.  If it is specified and has zero values     */ 01681000
*/* or more than one value, generates error message 020 and sets     */ 01682000
*/* the parameter list error flag on.                                */ 01683000
*/********************************************************************/ 01684000
*                                                                       01685000
*IF (NUMBER(RETURN_CODE) > 1) | (RETURN_CODE = 'RETURN_CODE') THEN      01686000
*                                      /* Test if RETURN_CODE is        01687000
*                                         specified and has zero or     01688000
*                                         more than one value        */ 01689000
*                                                                       01690000
*  DO;                                 /* RETURN_CODE is specified and  01691000
*                                         has zero or more than one     01692000
*                                         value                      */ 01693000
*                                                                       01694000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01695000
*                                         found flag on              */ 01696000
*                                                                       01697000
*    /****************************************************************/ 01698000
*    /* Generates the error message: AHA020 OUTADD ERROR: KEYWORD    */ 01699000
*    /* PARAMETER RETURN_CODE SPECIFIED INCORRECTLY.                 */ 01700000
*    /****************************************************************/ 01701000
*                                                                       01702000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01703000
*                                         skip a line in modified       01704000
*                                         source text before error      01705000
*                                         message                    */ 01706000
*                                                                       01707000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01708000
*                                         macro source listing error    01709000
*                                         message                    */ 01710000
*                                                                       01711000
*    IANS_TEXT1 = IMSG020_TEXT1 || 'RETURN_CODE' || IMSG020_TEXT2;      01712000
*                                      /* Completed text for error      01713000
*                                         message                    */ 01714000
*                                                                       01715000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01716000
*                                      /* Generate error message        01717000
*                                         in modified source text    */ 01718000
*                                                                       01719000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01720000
*                                         in macro source listing    */ 01721000
*                                                                       01722000
*  END;                                /* RETURN_CODE is specified and  01723000
*                                         has zero or more than one     01724000
*                                         value                      */ 01725000
*                                                                       01726000
*                                                                       01727000
*/********************************************************************/ 01728000
*/* Verifies the REASON_CODE key word parameter field has 1          */ 01729000
*/* value, if specified.  If it is specified and has zero values     */ 01730000
*/* or more than one value, generates error message 020 and sets     */ 01731000
*/* the parameter list error flag on.                                */ 01732000
*/********************************************************************/ 01733000
*                                                                       01734000
*IF (NUMBER(REASON_CODE) > 1) | (REASON_CODE = 'REASON_CODE') THEN      01735000
*                                      /* Test if REASON_CODE is        01736000
*                                         specified and has zero or     01737000
*                                         more than one value        */ 01738000
*                                                                       01739000
*  DO;                                 /* REASON_CODE is specified and  01740000
*                                         has zero or more than one     01741000
*                                         value                      */ 01742000
*                                                                       01743000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01744000
*                                         found flag on              */ 01745000
*                                                                       01746000
*    /****************************************************************/ 01747000
*    /* Generates the error message: AHA020 OUTADD ERROR: KEYWORD    */ 01748000
*    /* PARAMETER REASON_CODE SPECIFIED INCORRECTLY.                 */ 01749000
*    /****************************************************************/ 01750000
*                                                                       01751000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01752000
*                                         skip a line in modified       01753000
*                                         source text before error      01754000
*                                         message                    */ 01755000
*                                                                       01756000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01757000
*                                         macro source listing error    01758000
*                                         message                    */ 01759000
*                                                                       01760000
*    IANS_TEXT1 = IMSG020_TEXT1 || 'REASON_CODE' || IMSG020_TEXT2;      01761000
*                                      /* Completed text for error      01762000
*                                         message                    */ 01763000
*                                                                       01764000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01765000
*                                      /* Generate error message        01766000
*                                         in modified source text    */ 01767000
*                                                                       01768000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01769000
*                                         in macro source listing    */ 01770000
*                                                                       01771000
*  END;                                /* REASON_CODE is specified and  01772000
*                                         has zero or more than one     01773000
*                                         value                      */ 01774000
*                                                                       01775000
*                                                                       01776000
*/********************************************************************/ 01777000
*/* Verifies the KEY_IN_ERROR key word parameter field has 1         */ 01778000
*/* value, if specified.  If it is specified and has zero values     */ 01779000
*/* or more than one value, generates error message 020 and sets     */ 01780000
*/* the parameter list error flag on.                                */ 01781000
*/********************************************************************/ 01782000
*                                                                       01783000
*IF (NUMBER(KEY_IN_ERROR) > 1) | (KEY_IN_ERROR = 'KEY_IN_ERROR') THEN   01784000
*                                      /* Test if KEY_IN_ERROR is       01785000
*                                         specified and has zero or     01786000
*                                         more than one value        */ 01787000
*                                                                       01788000
*  DO;                                 /* KEY_IN_ERROR is specified and 01789000
*                                         has zero or more than one     01790000
*                                         value                      */ 01791000
*                                                                       01792000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01793000
*                                         found flag on              */ 01794000
*                                                                       01795000
*    /****************************************************************/ 01796000
*    /* Generates the error message: AHA020 OUTADD ERROR: KEYWORD    */ 01797000
*    /* PARAMETER KEY_IN_ERROR SPECIFIED INCORRECTLY.                */ 01798000
*    /****************************************************************/ 01799000
*                                                                       01800000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01801000
*                                         skip a line in modified       01802000
*                                         source text before error      01803000
*                                         message                    */ 01804000
*                                                                       01805000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01806000
*                                         macro source listing error    01807000
*                                         message                    */ 01808000
*                                                                       01809000
*    IANS_TEXT1 = IMSG020_TEXT1 || 'KEY_IN_ERROR' || IMSG020_TEXT2;     01810000
*                                      /* Completed text for error      01811000
*                                         message                    */ 01812000
*                                                                       01813000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01814000
*                                      /* Generate error message        01815000
*                                         in modified source text    */ 01816000
*                                                                       01817000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01818000
*                                         in macro source listing    */ 01819000
*                                                                       01820000
*  END;                                /* KEY_IN_ERROR is specified and 01821000
*                                         has zero or more than one     01822000
*                                         value                      */ 01823000
*                                                                       01824000
*                                                                       01825000
*/********************************************************************/ 01826000
*/* Verifies that the ENQ keyword parameter has a valid value, if    */ 01827000
*/* it is specified.  Valid values are CONDITIONAL or                */ 01828000
*/* UNCONDITIONAL.  If an invalid value is specified, generates      */ 01829000
*/* error message 020 and sets the parameter list error flag on.     */ 01830000
*/********************************************************************/ 01831000
*                                                                       01832000
*IF ((ENQ ^= '') & (ENQ(1) ^= 'CONDITIONAL') &                          01833000
*    (ENQ(1) ^= 'UNCONDITIONAL')) | (NUMBER(ENQ) > 1) THEN              01834000
*  DO;                                 /* ENQ keyword invalid        */ 01835000
*                                                                       01836000
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01837000
*                                         found flag on              */ 01838000
*                                                                       01839000
*    /****************************************************************/ 01840000
*    /* Generates the error message: AHA020 OUTADD ERROR: KEYWORD    */ 01841000
*    /* PARAMETER ENQ SPECIFIED INCORRECTLY.                         */ 01842000
*    /****************************************************************/ 01843000
*                                                                       01844000
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01845000
*                                         skip a line in modified       01846000
*                                         source text before error      01847000
*                                         message                    */ 01848000
*                                                                       01849000
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01850000
*                                         macro source listing error    01851000
*                                         message                    */ 01852000
*                                                                       01853000
*    IANS_TEXT1 = IMSG020_TEXT1 || 'ENQ' || IMSG020_TEXT2;              01854000
*                                      /* Completed text for error      01855000
*                                         message                    */ 01856000
*                                                                       01857000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01858000
*                                      /* Generate error message        01859000
*                                         in modified source text    */ 01860000
*                                                                       01861000
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01862000
*                                         in macro source listing    */ 01863000
*                                                                       01864000
*  END;                                /* ENQ keyword invalid        */ 01865000
*                                                                       01866000
*                                                                       01867000
*/********************************************************************/ 01868000
*/* Verifies that the ONE_USE keyword parameter has a valid      @T0A*/ 01868100
*/* value, if it is specified.  Valid values are YES or NO.      @T0A*/ 01868200
*/* If an invalid value is specified, generates error message    @T0A*/ 01868300
*/* 020 and sets the parameter list error flag on.               @T0A*/ 01868400
*/********************************************************************/ 01868500
*                                                                       01868600
*IF ((ONE_USE ^= '') & (ONE_USE(1) ^= 'YES') &                          01868700
*    (ONE_USE(1) ^= 'NO')) | (NUMBER(ONE_USE) > 1) THEN                 01868800
*  DO;                                 /* ONE_USE keyword invalid       01868900
*                                                                @T0A*/ 01869000
*                                                                       01869100
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01869200
*                                         found flag on          @T0A*/ 01869300
*                                                                       01869400
*    /****************************************************************/ 01869500
*    /* Generates the error message: AHA020 OUTADD ERROR:        @T0A*/ 01869600
*    /* KEYWORD PARAMETER ONE_USE SPECIFIED INCORRECTLY.         @T0A*/ 01869700
*    /****************************************************************/ 01869800
*                                                                       01869900
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01870000
*                                         skip a line in modified       01870100
*                                         source text before error      01870200
*                                         message                @T0A*/ 01870300
*                                                                       01870400
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01870500
*                                         macro source listing error    01870600
*                                         message                @T0A*/ 01870700
*                                                                       01870800
*    IANS_TEXT1 = IMSG020_TEXT1 || 'ONE_USE' || IMSG020_TEXT2;          01870900
*                                      /* Completed text for error      01871000
*                                         message                @T0A*/ 01871100
*                                                                       01871200
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01871300
*                                      /* Generate error message        01871400
*                                         in modified source text       01871500
*                                                                @T0A*/ 01871600
*                                                                       01871700
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01871800
*                                         in macro source listing       01871900
*                                                                @T0A*/ 01872000
*                                                                       01872100
*  END;                                /* ONE_USE keyword invalid       01872200
*                                                                @T0A*/ 01872300
*                                                                       01872400
*                                                                       01872500
*/********************************************************************/ 01872600
*/* Verifies that the REUSE keyword parameter has a valid        @T0A*/ 01872700
*/* value, if it is specified.  Valid values are YES or NO.      @T0A*/ 01872800
*/* If an invalid value is specified, generates error message    @T0A*/ 01872900
*/* 020 and sets the parameter list error flag on.               @T0A*/ 01873000
*/********************************************************************/ 01873100
*                                                                       01873200
*IF ((REUSE ^= '') & (REUSE(1) ^= 'YES') &                              01873300
*    (REUSE(1) ^= 'NO')) | (NUMBER(REUSE) > 1) THEN                     01873400
*  DO;                                 /* REUSE keyword invalid  @T0A*/ 01873500
*                                                                       01873600
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01873700
*                                         found flag on          @T0A*/ 01873800
*                                                                       01873900
*    /****************************************************************/ 01874000
*    /* Generates the error message: AHA020 OUTADD ERROR:        @T0A*/ 01874100
*    /* KEYWORD PARAMETER REUSE SPECIFIED INCORRECTLY.           @T0A*/ 01874200
*    /****************************************************************/ 01874300
*                                                                       01874400
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01874500
*                                         skip a line in modified       01874600
*                                         source text before error      01874700
*                                         message                @T0A*/ 01874800
*                                                                       01874900
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01875000
*                                         macro source listing error    01875100
*                                         message                @T0A*/ 01875200
*                                                                       01875300
*    IANS_TEXT1 = IMSG020_TEXT1 || 'REUSE' || IMSG020_TEXT2;            01875400
*                                      /* Completed text for error      01875500
*                                         message                @T0A*/ 01875600
*                                                                       01875700
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01875800
*                                      /* Generate error message        01875900
*                                         in modified source text       01876000
*                                                                @T0A*/ 01876100
*                                                                       01876200
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01876300
*                                         in macro source listing       01876400
*                                                                @T0A*/ 01876500
*                                                                       01876600
*  END;                                /* REUSE keyword invalid  @T0A*/ 01876700
*                                                                       01876800
*                                                                       01876900
*/********************************************************************/ 01877000
*/* Verifies that if either ONEUSE or REUSE have been specified as   */ 01877100
*/* yes then both have been specified as yes.                    @01A*/ 01877200
*/********************************************************************/ 01877300
*                                                                       01877400
*IF ((REUSE(1) = 'YES') | (ONE_USE(1) = 'YES')) THEN                    01877500
*   IF (REUSE(1) ^= ONE_USE(1)) THEN                                    01877600
*  DO;                                 /* REUSE or ONE_USE specified    01877700
*                                         as YES, but not both   @01A*/ 01877800
*    IPARML_ERR_FOUND = 1;             /* Set the parm list errors      01877900
*                                         found flag on          @01A*/ 01878000
*                                                                       01878100
*    /****************************************************************/ 01878200
*    /* Generates the error message: AHA060 OUTADD ERROR:        @01A*/ 01878300
*    /* IF ONE_USE OR REUSE SPECIFIED AS YES THEN BOTH MUST BE   @01A*/ 01878400
*    /* SPECIFIED AS YES                                         @01A*/ 01878500
*    /****************************************************************/ 01878600
*                                                                       01878700
*    ANS COL(MACLMAR) NORESCAN ('@SPACE;');  /* Generate code to        01878800
*                                         skip a line in modified       01878900
*                                         source text before error      01879000
*                                         message                @01A*/ 01879100
*                                                                       01879200
*    ANS NORESCAN MSG(' ');            /* Generate blank line before    01879300
*                                         macro source listing error    01879400
*                                         message                @01A*/ 01879500
*                                                                       01879600
*    IANS_TEXT1 = IMSG060_TEXT1;                                        01879700
*                                      /* Completed text for error      01879800
*                                         message                @01A*/ 01879900
*                                                                       01880000
*    ANS COL(MACLMAR) NORESCAN ('/* ' || IANS_TEXT1 || ' */');          01880100
*                                      /* Generate error message        01880200
*                                         in modified source text       01880300
*                                                                @01A*/ 01880400
*                                                                       01880500
*    ANS NORESCAN MSG(IANS_TEXT1);     /* Generate error message        01880600
*                                         in macro source listing       01880700
*                                                                @01A*/ 01880800
*                                                                       01880900
*  END;                                /* REUSE or ONE_USE specified    01881000
*                                         as YES, but not both   @01A*/ 01881100
*                                                                       01881200
*                                                                       01881300
*/********************************************************************/ 01881400
*/* Returns from the CHECK_ARGUMENTS routine. Brances to the         */ 01881500
*/* label just following the branch to this routine.                 */ 01881600
*/********************************************************************/ 01881700
*                                                                       01881800
*GOTO LHA0050B;                        /* Return from CHECK_ARGUMENTS   01881900
*                                         routine                    */ 01882000
*@EJECT;                                                                01882100
*/********************************************************************/ 01882200
*/*                                                                  */ 01882300
*/* PROCEDURE NAME: FILL_IN_PARM_LIST                                */ 01882400
*/*                                                                  */ 01882500
*/* DESCRIPTIVE NAME: Generates code to fill in the Dynamic OUTPUT   */ 01882600
*/*                   parameter list as specified in the macro       */ 01882700
*/*                   keywords.                                      */ 01882800
*/*                                                                  */ 01883000
*/* FUNCTION:   Generates code to:                                   */ 01884000
*/*                                                                  */ 01885000
*/*             1. Zero the parameter list.                          */ 01886000
*/*             2. Fill in the parameter list constant fields.       */ 01887000
*/*             3. Flll in the variable parameter list fields        */ 01888000
*/*                as specified in the macro keywords.               */ 01889000
*/*                                                                  */ 01890000
*/*                                                                  */ 01891000
*/* ENTRY: From EXEC_FORM                                            */ 01892000
*/*                                                                  */ 01893000
*/* INPUT: None                                                      */ 01894000
*/*                                                                  */ 01895000
*/* OUTPUT: Generates answer text assignment statements and          */ 01896000
*/*         accompanying comments to fill in the parameter           */ 01897000
*/*         list as specified in the macro invocation.               */ 01898000
*/*                                                                  */ 01899000
*/*         Sets the EPILOG external macro variable EHAREGS          */ 01900000
*/*                                                                  */ 01901000
*/* EXIT: To EXEC_FORM                                               */ 01902000
*/*                                                                  */ 01903000
*/* ROUTINES BRANCHED TO: none                                       */ 01904000
*/*                                                                  */ 01905000
*/********************************************************************/ 01906000
*                                                                       01907000
*LHA0060A:;                            /* Entry point of routine     */ 01908000
*                                                                       01909000
*                                                                       01910000
*/********************************************************************/ 01911000
*/* Sets the epilog variables for register declares for registers    */ 01912000
*/* 0, 1 and 15. Generate code to restrict these registers.          */ 01913000
*/********************************************************************/ 01914000
*                                                                       01915000
*IF INDEX(EHAREGS,'15F')=0 THEN                                         01916000
*  EHAREGS=EHAREGS || '15F';        /* Have EPILOG generate a           01917000
*                                      declare for register 15       */ 01918000
*IF INDEX(EHAREGS,'01F')=0 THEN                                         01919000
*  EHAREGS=EHAREGS || '01F';        /* Have EPILOG generate a           01920000
*                                      declare for register 1        */ 01921000
*IF INDEX(EHAREGS,'00F')=0 THEN                                         01922000
*  EHAREGS=EHAREGS || '00F';        /* Have EPILOG generate a           01923000
*                                      declare for register 0        */ 01924000
*                                                                       01925000
*ANSWER('RFY (GPR15F,GPR01F,GPR00F) RSTD;') COLUMN(MACCOL+2)            01926000
*      NORESCAN SKIP(2);             /* Generate code to restrict       01927000
*                                       registers 15, 1 and 0. These    01928000
*                                       registers are restricted        01929000
*                                       around the SVC because they     01930000
*                                       may be used by the macro and    01931000
*                                       are always altered by the SVC   01932000
*                                                                   */  01933000
*                                                                       01934000
*                                                                       01935000
*/********************************************************************/ 01936000
*/* Generates code in modified source text to zero the parameter     */ 01937000
*/* list.                                                            */ 01938000
*/********************************************************************/ 01939000
*                                                                       01940000
*IANS_TEXT1 = MF(2) || ' = ' || MF(2) ||  ' && ' || MF(2) || ';';       01941000
*                                      /* Build assignment statement    01942000
*                                         to zero parameter list     */ 01943000
*                                                                       01944000
*ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                       01945000
*                                      /* Generate assignment           01946000
*                                         statement                  */ 01947000
*                                                                       01948000
*IANS_TEXT1 = '/* Zeros parameter list */'; /* Build line comment    */ 01949000
*                                                                       01950000
*ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line comment    */ 01951000
*                                                                       01952000
*                                                                       01953000
*/********************************************************************/ 01954000
*/* Generates code in modified source text to set the ID field       */ 01955000
*/* in the parameter list.                                           */ 01956000
*/********************************************************************/ 01957000
*                                                                       01958000
*IANS_TEXT1 = MF(2) || '(5:8) = ''DOCN'';';  /* Build assignment        01959000
*                                         statement to set              01960000
*                                         parameter list id          */ 01961000
*                                                                       01962000
*ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                       01963000
*                                      /* Generate assignment           01964000
*                                         statement                  */ 01965000
*                                                                       01966000
*IANS_TEXT1 = '/* Sets parameter list id */'; /* Build line comment  */ 01967000
*                                                                       01968000
*ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line comment    */ 01969000
*                                                                       01970000
*                                                                       01971000
*/********************************************************************/ 01972000
*/* Generates code in modified source text to set the version        */ 01973000
*/* number in the parameter list.                                    */ 01974000
*/********************************************************************/ 01975000
*                                                                       01976000
*IANS_TEXT1 = MF(2) || '(9:9) = ''01''X;'; /* Build assignment          01977000
*                                         statement to set              01978000
*                                         parameter list version     */ 01979000
*                                                                       01980000
*ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                       01981000
*                                      /* Generate assignment           01982000
*                                         statement                  */ 01983000
*                                                                       01984000
*IANS_TEXT1 = '/* Sets parameter list version number */'; /* Build line 01985000
*                                         comment                    */ 01986000
*                                                                       01987000
*ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line comment    */ 01988000
*                                                                       01989000
*                                                                       01990000
*/********************************************************************/ 01991000
*/* Generates code in modified source text to set the parameter      */ 01992000
*/* list length field in the parameter list.                         */ 01993000
*/********************************************************************/ 01994000
*                                                                       01995000
*IANS_TEXT1 = MF(2) || '(11:12) = ''0020''X;'; /* Build assignment      01996000
*                                         statement to set              01997000
*                                         parameter list length      */ 01998000
*                                                                       01999000
*ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                       02000000
*                                      /* Generate assignment           02001000
*                                         statement                  */ 02002000
*                                                                       02003000
*IANS_TEXT1 = '/* Sets parameter list length field */'; /* Build line   02004000
*                                         comment                    */ 02005000
*                                                                       02006000
*ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line comment    */ 02007000
*                                                                       02008000
*                                                                       02009000
*/********************************************************************/ 02010000
*/* Generates code in modified source text to set the add function   */ 02011000
*/* flag on in the parameter list.                                   */ 02012000
*/********************************************************************/ 02013000
*                                                                       02014000
*IANS_TEXT1 = MF(2) || '(10:10) = ''80''X;'; /* Build assignment        02015000
*                                         statement to turn add         02016000
*                                         function on                */ 02017000
*                                                                       02018000
*ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                       02019000
*                                      /* Generate assignment           02020000
*                                         statement                  */ 02021000
*                                                                       02022000
*IANS_TEXT1 = '/* Sets the add function bit on */'; /* Build line       02023000
*                                         comment                    */ 02024000
*                                                                       02025000
*ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line comment    */ 02026000
*                                                                       02027000
*                                                                       02028000
*/********************************************************************/ 02029000
*/* Generates code in modified source text to assign the name field  */ 02030000
*/* to the parameter list if the NAME macro keyword                  */ 02031000
*/* was specified.                                                   */ 02032000
*/********************************************************************/ 02033000
*                                                                       02034000
*IF NAME ^= '' THEN                    /* Test if NAME was              02035000
*                                         specified                  */ 02036000
*  DO;                                 /* NAME was specified         */ 02037000
*    IANS_TEXT1 = MF(2) || '(13:20) = ' || NAME(1) || ';';              02038000
*                                      /* Build assignment statement    02039000
*                                         to assign the name field      02040000
*                                         to the parameter list      */ 02041000
*                                                                       02042000
*    ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                   02043000
*                                      /* Generate assignment           02044000
*                                         statement                  */ 02045000
*                                                                       02046000
*    IANS_TEXT1 = '/* Assigns NAME macro parameter argument ' ||        02047000
*                 'to OUTPUT descriptor name field */';                 02048000
*                                      /* Build line comment         */ 02049000
*                                                                       02050000
*    ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line           02051000
*                                         comment                    */ 02052000
*                                                                       02053000
*  END;                                /* NAME was specified         */ 02054000
*                                                                       02055000
*                                                                       02056000
*/********************************************************************/ 02057000
*/* Generates code in modified source text to assign the text unit   */ 02058000
*/* pointer to the parameter list as specified by the TEXTPTR        */ 02059000
*/* keyword.                                                         */ 02060000
*/********************************************************************/ 02061000
*                                                                       02062000
*IF TEXTPTR(1:2) = '((' THEN           /* Test for TEXTPRT specified    02063000
*                                         with double parens, which     02064000
*                                         means the argument is a       02065000
*                                         pointer to the text unit      02066000
*                                         pointer list           @P2A*/ 02067000
*                                                                       02068000
*  IANS_TEXT1 = MF(2) || '(21:24) = ' || TEXTPTR(1,1) || ';';           02069000
*                                      /* Build assignment statement    02070000
*                                         to put the text unit pointer  02071000
*                                         list's address in the         02072000
*                                         parameter list         @P2A*/ 02073000
*                                                                       02074000
*ELSE                                  /* The text unit pointer list    02075000
*                                         variable name is used  @P2A*/ 02076000
*                                                                       02077000
*  IANS_TEXT1 = MF(2) || '(21:24) = ADDR(' || TEXTPTR(1) || ');';       02078000
*                                      /* Build assignment statement    02079000
*                                         to put the text unit pointer  02080000
*                                         list's address in the         02081000
*                                         parameter list             */ 02082000
*                                                                       02083000
*ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                       02084000
*                                      /* Generate assignment           02085000
*                                         statement                  */ 02086000
*                                                                       02087000
*IANS_TEXT1 = '/* Assigns TEXTPTR macro parameter argument ' ||         02088000
*             'to text unit pointer list address field */';             02089000
*                                      /* Build line comment         */ 02090000
*                                                                       02091000
*ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line               02092000
*                                         comment                    */ 02093000
*                                                                       02094000
*                                                                       02095000
*/********************************************************************/ 02096000
*/* Generates code in modified source text to set the conditional    */ 02097000
*/* ENQ flag on if it was requested.                                 */ 02098000
*/********************************************************************/ 02099000
*                                                                       02100000
*IF ENQ(1) = 'CONDITIONAL' THEN        /* Tests if conditional ENQ      02101000
*                                         was requested              */ 02102000
*  DO;                                 /* Conditional ENQ was           02103000
*                                         requested                  */ 02104000
*    IANS_TEXT1 = MF(2) || '(25:25) = ' || MF(2) ||                     02104600
*                '(25:25) | ''80''X;'; /* Build assignment              02105200
*                                         statement to turn on          02106000
*                                         conditional ENQ flag   @T0C*/ 02107000
*                                                                       02108000
*    ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                   02109000
*                                      /* Generate assignment           02110000
*                                         statement                  */ 02111000
*                                                                       02112000
*    IANS_TEXT1 = '/* Sets the conditional ENQ flag on, ' ||            02113000
*                 'as indicated by ENQ macro keyword */'; /* Build line 02114000
*                                         comment                    */ 02115000
*                                                                       02116000
*    ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line           02117000
*                                         comment                    */ 02118000
*                                                                       02119000
*  END;                                /* Conditional ENQ was           02120000
*                                         requested                  */ 02121000
*                                                                       02122000
*                                                                       02123000
*/********************************************************************/ 02124000
*/* Generates code in modified source text to set the ONE_USE    @T0A*/ 02124100
*/* flag on if it was requested.                                 @T0A*/ 02124200
*/********************************************************************/ 02124300
*                                                                       02124400
*IF ONE_USE(1) = 'YES' THEN            /* Tests if ONE_USE was          02124500
*                                         requested              @T0A*/ 02124600
*  DO;                                 /* ONE_USE was requested  @T0A*/ 02124700
*                                                                       02124800
*    IANS_TEXT1 = MF(2) || '(25:25) = ' || MF(2) ||                     02124900
*                '(25:25) | ''40''X;'; /* Build assignment              02125000
*                                         statement to turn on          02125100
*                                         ONE_USE flag           @T0A*/ 02125200
*                                                                       02125300
*    ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                   02125400
*                                      /* Generate assignment           02125500
*                                         statement              @T0A*/ 02125600
*                                                                       02125700
*    IANS_TEXT1 = '/* Sets the ONE_USE flag on, as indicated ' ||       02125800
*                 'by ONE_USE macro keyword */'; /* Build line          02125900
*                                         comment                @T0A*/ 02126000
*                                                                       02126100
*    ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line           02126200
*                                         comment                @T0A*/ 02126300
*                                                                       02126400
*  END;                                /* ONE_USE was requested  @T0A*/ 02126500
*                                                                       02126600
*                                                                       02126700
*/********************************************************************/ 02126800
*/* Generates code in modified source text to set the REUSE      @T0A*/ 02126900
*/* flag on if it was requested.                                 @T0A*/ 02127000
*/********************************************************************/ 02127100
*                                                                       02127200
*IF REUSE(1) = 'YES' THEN              /* Tests if REUSE was            02127300
*                                         requested              @T0A*/ 02127400
*  DO;                                 /* REUSE was requested    @T0A*/ 02127500
*                                                                       02127600
*    IANS_TEXT1 = MF(2) || '(25:25) = ' || MF(2) ||                     02127700
*                '(25:25) | ''20''X;'; /* Build assignment              02127800
*                                         statement to turn on          02127900
*                                         REUSE flag                    02128000
*                                                                @T0A*/ 02128100
*                                                                       02128200
*    ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                   02128300
*                                      /* Generate assignment           02128400
*                                         statement              @T0A*/ 02128500
*                                                                       02128600
*    IANS_TEXT1 = '/* Sets the REUSE flag on, as indicated ' ||         02128700
*                 'by REUSE macro keyword */'; /* Build line            02128800
*                                         comment                @T0A*/ 02128900
*                                                                       02129000
*    ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line           02129100
*                                         comment                @T0A*/ 02129200
*                                                                       02129300
*  END;                                /* REUSE was requested    @T0A*/ 02129400
*                                                                       02129500
*                                                                       02129600
*/********************************************************************/ 02129700
*/* Returns from the FILL_IN_PARM_LIST routine. Branches to the      */ 02129800
*/* label just following the branch to this routine.                 */ 02129900
*/********************************************************************/ 02130000
*                                                                       02130100
*GOTO LHA0060B;                        /* Return from FILL_IN_PARM_     02130200
*                                         LIST routine               */ 02130300
*@EJECT;                                                                02131000
*/********************************************************************/ 02132000
*/*                                                                  */ 02133000
*/* PROCEDURE NAME: INVOKE_DYNAMIC_OUTPUT                            */ 02134000
*/*                                                                  */ 02135000
*/* FUNCTION: Generates code in modified source text to establish    */ 02136000
*/*           linkage to the parameter list and to invoke Dynamic    */ 02137000
*/*           OUTPUT.                                                */ 02138000
*/*                                                                  */ 02139000
*/*           1. The first 4 bytes of the list form declare          */ 02140000
*/*              named by MF(2) are used as the pointer              */ 02141000
*/*              to the SVC parameter list. The SVC parameter        */ 02142000
*/*              list is the remaining portion of the                */ 02143000
*/*              list form declare.                                  */ 02144000
*/*                                                                  */ 02145000
*/*              Generates code to set the pointer to the            */ 02146000
*/*              SVC parameter list.                                 */ 02147000
*/*                                                                  */ 02148000
*/*           2. Generates code to set register 1 to point           */ 02149000
*/*              to the pointer to the SVC parameter list.           */ 02150000
*/*                                                                  */ 02151000
*/*           3. Generates code to set register 1 to the             */ 02152000
*/*              SVC function code '33'D.                            */ 02153000
*/*                                                                  */ 02154000
*/*           4. Generates code to invoke SVC 109.                   */ 02155000
*/*                                                                  */ 02156000
*/* ENTRY: From EXEC_FORM                                            */ 02157000
*/*                                                                  */ 02158000
*/* INPUT:  Second argument of MF parameter, parameter list name     */ 02159000
*/*                                                                  */ 02160000
*/* OUTPUT: Generates answer text assignment statements and          */ 02161000
*/*         accompanying comments to establish linkage to the        */ 02162000
*/*         parameter list and to invoke Dynamic OUTPUT.             */ 02163000
*/*                                                                  */ 02164000
*/* EXIT: To EXEC_FORM                                               */ 02165000
*/*                                                                  */ 02166000
*/* ROUTINES CALLED: None                                            */ 02167000
*/*                                                                  */ 02168000
*/********************************************************************/ 02169000
*                                                                       02170000
*LHA0070A:;                            /* Entry point of routine     */ 02171000
*                                                                       02172000
*                                                                       02173000
*/********************************************************************/ 02174000
*/* The first 4 bytes of the list form declare named by MF(2) are    */ 02175000
*/* used as the pointer to the SVC parameter list. The SVC           */ 02176000
*/* parameter list is the remaining portion of the list form         */ 02177000
*/* declare.                                                         */ 02178000
*/*                                                                  */ 02179000
*/* Generates code to set the pointer to the SVC parameter list,     */ 02180000
*/* and turn the pointer's high order bit on.                        */ 02181000
*/*                                                                  */ 02182000
*/********************************************************************/ 02183000
*                                                                       02184000
*IANS_TEXT1 = MF(2) || '(1:4) = ADDR(' || MF(2) || '(5:5));'; /*        02185000
*                                       assignment statement to set     02186000
*                                       the parameter list pointer      02187000
*                                       to point at the parameter       02188000
*                                       list                         */ 02189000
*                                                                       02190000
*ANSWER COL(MACCOL+2) SKIP(2) (IANS_TEXT1); /* Generate assignment      02191000
*                                       statement                    */ 02192000
*                                                                       02193000
*IANS_TEXT1 = '/* Puts address of parameter list in the parameter ' ||  02194000
*           'list pointer field */';   /* Build comment string       */ 02195000
*                                                                       02196000
*ANS NORESCAN COL(ICOMCOL) (IANS_TEXT1); /* Generate the comment     */ 02197000
*                                                                       02198000
*IANS_TEXT1 = MF(2) || '(1:1) = ' || MF(2) || '(1:1)' ||                02199000
*            ' | ''80''X;';          /* Build assignmemt statement      02200000
*                                       to turn on high order bit to    02201000
*                                       indicate end of input           02202000
*                                       parameters               @P2C*/ 02203000
*                                                                       02204000
*ANSWER COL(MACCOL+2) SKIP(2) (IANS_TEXT1); /* Generate assignment      02205000
*                                       statement                    */ 02206000
*                                                                       02207000
*IANS_TEXT1 = '/* Indicates end of pointer list */'; /*                 02208000
*                                       Build comment string         */ 02209000
*                                                                       02210000
*ANS NORESCAN COL(ICOMCOL) (IANS_TEXT1); /* Generate the comment    */  02211000
*                                                                       02212000
*                                                                       02213000
*/********************************************************************/ 02214000
*/* Generates code in modified source text to have register one      */ 02215000
*/* point at the parameter list pointer.                             */ 02216000
*/********************************************************************/ 02217000
*                                                                       02218000
*IANS_TEXT1 = 'GPR01F = ADDR( ' || MF(2) || '(1:1) );'; /* Build        02219000
*                                       assignment statement to place   02220000
*                                       address in register 1        */ 02221000
*                                                                       02222000
*ANSWER COL(MACCOL+2) SKIP(2) (IANS_TEXT1); /* Generate assignment      02223000
*                                       statement                    */ 02224000
*                                                                       02225000
*IANS_TEXT1 = '/* Puts address of parameter list pointer ' ||           02226000
*           'into register 1 */';    /* Build                           02227000
*                                       comment string               */ 02228000
*                                                                       02229000
*ANS NORESCAN COL(ICOMCOL) (IANS_TEXT1); /* Generate the comment        02230000
*                                                                    */ 02231000
*                                                                       02232000
*/********************************************************************/ 02233000
*/* Generates code in modified source text to assign the SVC         */ 02234000
*/* function code to register 15.                                    */ 02235000
*/********************************************************************/ 02236000
*                                                                       02237000
*ANSWER('GPR15F = 33;') COLUMN(MACCOL+2) NORESCAN SKIP(2); /*           02238000
*                                      Generates the assignment         02239000
*                                      statement to put the function    02240000
*                                      code in register 15          */  02241000
*                                                                       02242000
*IANS_TEXT1 = '/* Puts SVC 109 routing code into register 15 */'; /*    02243000
*                                      Build the comment for the        02244000
*                                      assignment statement         */  02245000
*                                                                       02246000
*                                                                       02247000
*ANS NORESCAN COL(ICOMCOL) (IANS_TEXT1); /* Generate the comment    */  02248000
*                                                                       02249000
*                                                                       02250000
*/*******************************************************************/  02251000
*/* Generate instructions to invoke the SVC                         */  02252000
*/*******************************************************************/  02253000
*                                                                       02254000
*ANSWER('SVC(109);') COLUMN(MACCOL+2) NORESCAN SKIP(2); /*              02255000
*                                       Generate code to issue SVC      02256000
*                                       109                         */  02257000
*                                                                       02258000
*ANSWER('/* Invokes Dynamic OUTPUT SVC */') COLUMN(ICOMCOL)             02259000
*      NORESCAN;                     /* Generate comment            */  02260000
*                                                                       02261000
*                                                                       02262000
*/********************************************************************/ 02263000
*/* Returns from the INVOKE_DYANMIC_OUTPUT routine. Branches to the  */ 02264000
*/* label just after the branch to this routine                      */ 02265000
*/********************************************************************/ 02266000
*                                                                       02267000
*GOTO LHA0070B;                        /* Return from INVOKE_DYNAMIC_   02268000
*                                         OUTPUT                     */ 02269000
*@EJECT;                                                                02270000
*/********************************************************************/ 02271000
*/*                                                                  */ 02272000
*/* PROCEDURE NAME: RETURN_FIELDS                                    */ 02273000
*/*                                                                  */ 02274000
*/* FUNCTION: Generates code to fill in the Dynamic OUTPUT           */ 02275000
*/*           return fields on return from the SVC.                  */ 02276000
*/*           Generates code to unrestrict registers 0, 1 and 15.    */ 02277000
*/*                                                                  */ 02278000
*/* ENTRY: From EXEC_FORM                                            */ 02279000
*/*                                                                  */ 02280000
*/* INPUT: Macro keywords: RETURN_CODE                               */ 02281000
*/*                        REASON_CODE                               */ 02282000
*/*                        KEY_IN_ERROR                              */ 02283000
*/*                        SYSNAME                                   */ 02284000
*/*                                                                  */ 02285000
*/* OUTPUT:   Generates code to fill in the Dynamic OUTPUT           */ 02286000
*/*           return fields on return from the SVC.                  */ 02287000
*/*                                                                  */ 02288000
*/* EXIT: To EXEC_FORM                                               */ 02289000
*/*                                                                  */ 02290000
*/* ROUTINES BRANCHED TO: none                                       */ 02291000
*/*                                                                  */ 02292000
*/********************************************************************/ 02293000
*                                                                       02294000
*LHA0080A:;                            /* Entry point of routine     */ 02295000
*                                                                       02296000
*                                                                       02297000
*/********************************************************************/ 02298000
*/* Generates code in modified source text to return register 1 to   */ 02299000
*/* caller's field in the KEY_IN_ERROR macro keyword was specified.  */ 02300000
*/********************************************************************/ 02301000
*                                                                       02302000
*IF KEY_IN_ERROR ^= '' THEN            /* Test if KEY_IN_ERROR was      02303000
*                                         specified                  */ 02304000
*  DO;                                 /* KEY_IN_ERROR was specified */ 02305000
*    IANS_TEXT1 = KEY_IN_ERROR(1) || ' = GPR01F;';                      02306000
*                                      /* Build assignment statement    02307000
*                                         to put register 1 in the      02308000
*                                         parameter argument         */ 02309000
*                                                                       02310000
*    ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                   02311000
*                                      /* Generate assignment           02312000
*                                         statement                  */ 02313000
*                                                                       02314000
*    IANS_TEXT1 = '/* Assigns register 1 to KEY_IN_ERROR ' ||           02315000
*                 'macro parameter argument */';                        02316000
*                                      /* Build line comment         */ 02317000
*                                                                       02318000
*    ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line           02319000
*                                         comment                    */ 02320000
*                                                                       02321000
*  END;                                /* KEY_IN_ERROR was specified */ 02322000
*                                                                       02323000
*                                                                       02324000
*/********************************************************************/ 02325000
*/* Generates code in modified source text to assign the return      */ 02326000
*/* code to the caller's field if the RETURN_CODE macro keyword      */ 02327000
*/* was specified.                                                   */ 02328000
*/********************************************************************/ 02329000
*                                                                       02330000
*IF RETURN_CODE ^= '' THEN             /* Test if RETURN_CODE was       02331000
*                                         specified                  */ 02332000
*  DO;                                 /* RETURN_CODE was specified  */ 02333000
*    IANS_TEXT1 = RETURN_CODE(1) || ' = GPR15F;';                       02334000
*                                      /* Build assignment statement    02335000
*                                         to put register 15 in the     02336000
*                                         parameter argument         */ 02337000
*                                                                       02338000
*    ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                   02339000
*                                      /* Generate assignment           02340000
*                                         statement                  */ 02341000
*                                                                       02342000
*    IANS_TEXT1 = '/* Assigns register 15 to RETURN_CODE ' ||           02343000
*                 'macro parameter argument */';                        02344000
*                                      /* Build line comment         */ 02345000
*                                                                       02346000
*    ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line           02347000
*                                         comment                    */ 02348000
*                                                                       02349000
*  END;                                /* RETURN_CODE was specified  */ 02350000
*                                                                       02351000
*                                                                       02352000
*/********************************************************************/ 02353000
*/* Generates code in modified source text to assign register 0 to   */ 02354000
*/* the caller's field if the REASON_CODE macro keyword was          */ 02355000
*/* specified.                                                       */ 02356000
*/********************************************************************/ 02357000
*                                                                       02358000
*IF REASON_CODE ^= '' THEN             /* Test if REASON_CODE was       02359000
*                                         specified                  */ 02360000
*  DO;                                 /* REASON_CODE was specified  */ 02361000
*    IANS_TEXT1 = REASON_CODE(1) || ' = GPR00F;';                       02362000
*                                      /* Build assignment statement    02363000
*                                         to put register 15 in the     02364000
*                                         parameter argument         */ 02365000
*                                                                       02366000
*    ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                   02367000
*                                      /* Generate assignment           02368000
*                                         statement                  */ 02369000
*                                                                       02370000
*    IANS_TEXT1 = '/* Assigns register 0 to REASON_CODE ' ||            02371000
*                 'macro parameter argument */';                        02372000
*                                      /* Build line comment         */ 02373000
*                                                                       02374000
*    ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line           02375000
*                                         comment                    */ 02376000
*                                                                       02377000
*  END;                                /* REASON_CODE was specified  */ 02378000
*                                                                       02379000
*                                                                       02380000
*/********************************************************************/ 02381000
*/* Generates code in modified source text to return the system      */ 02382000
*/* generated name if the SYSNAME macro keyword was specified.       */ 02383000
*/********************************************************************/ 02384000
*                                                                       02385000
*IF SYSNAME ^= '' THEN                 /* Test if SYSNAME was           02386000
*                                         specified                  */ 02387000
*  DO;                                 /* SYSNAME was specified      */ 02388000
*    IANS_TEXT1 = SYSNAME(1) || ' = ' || MF(2) || '(13:20);';           02389000
*                                      /* Build assignment statement    02390000
*                                         to return the system          02391000
*                                         generated name             */ 02392000
*                                                                       02393000
*    ANS COL(MACCOL+2) SKIP(2) NORESCAN (IANS_TEXT1);                   02394000
*                                      /* Generate assignment           02395000
*                                         statement                  */ 02396000
*                                                                       02397000
*    IANS_TEXT1 = '/* Assigns system generated OUTPUT descriptor ' ||   02398000
*                 'name to SYSNAME macro parameter argument */';        02399000
*                                      /* Build line comment         */ 02400000
*                                                                       02401000
*    ANS COL(ICOMCOL) NORESCAN (IANS_TEXT1); /* Generate line           02402000
*                                         comment                    */ 02403000
*                                                                       02404000
*  END;                                /* SYSNAME was specified      */ 02405000
*                                                                       02406000
*                                                                       02407000
*ANSWER('RFY (GPR15F,GPR01F,GPR00F) UNRSTD;') COLUMN(MACCOL+2)          02408000
*NORESCAN SKIP(2);                     /* Generate code to unrestrict   02409000
*                                         registers 15, 1 and 0     */  02410000
*                                                                       02411000
*/********************************************************************/ 02412000
*/* Returns from the RETURN_FIELDS routine. Branches to the          */ 02413000
*/* label just after the branch to this routine                      */ 02414000
*/********************************************************************/ 02415000
*                                                                       02416000
*GOTO LHA0080B;                        /* Return from RETURN_FIELDS  */ 02417000
*%END;                                 /* End of macro               */ 02418000
*%GOTO  DOADD3;                                                         02419000
*/*                                                                     02420000
         MACRO                                                          02421000
.********************************************************************** 02422000
.**                                                                  ** 02423000
.** Definition of the macro invocation.                              ** 02424000
.**                                                                  ** 02425000
.********************************************************************** 02426000
&LABEL   OUTADD &NAME=,&SYSNAME=,&TEXTPTR=,&ENQ=,&ONEUSE=,&REUSE=,     X02426600
               &MF=                                                @T1C 02427200
.*                                                                      02428000
.*                                                                      02429000
.********************************************************************** 02430000
.**                                                                  ** 02431000
.** Declaration of internal macro variables.                         ** 02432000
.**                                                                  ** 02433000
.********************************************************************** 02434000
.*                                                                      02435000
         LCLB  &PARMERR                Parm list errors found flag      02436000
         LCLB  &ONEUSON                Oneuse specified as yes     @01A 02436300
         LCLB  &REUSEON                Reuse specified as yes      @01A 02436600
         LCLB  &ERRVAL                 Error value.                     02437000
         LCLA  &ERRCODE                Error code returned.             02438000
         LCLC  &REG                    Register form of parameter       02439000
         LCLC  &DCLLEN                 Length of declare for LIST form  02440000
.*                                     parameter list                   02441000
         LCLC  &NAMEADR                Address of the name field in     02442000
.*                                     the parameter list               02443000
         LCLC  &BLANK                  A blank                          02444000
         LCLC  &MSG010A                Text constant for error msg 010  02445000
         LCLC  &MSG010B                Text constant for error msg 010  02446000
         LCLC  &MSG020A                Text constant for error msg 020  02447000
         LCLC  &MSG020B                Text constant for error msg 020  02448000
         LCLC  &MSG020C                Text constant for error msg 020  02449000
         LCLC  &MSG030A                Text constant for error msg 030  02450000
         LCLC  &MSG030B                Text constant for error msg 030  02451000
         LCLC  &MSG040A                Text constant for error msg 040  02452000
         LCLC  &MSG040B                Text constant for error msg 040  02453000
         LCLC  &MSG040C                Text constant for error msg 040  02454000
         LCLC  &MSG040D                Text constant for error msg 040  02455000
         LCLC  &MSG040E                Text constant for error msg 040  02456000
         LCLC  &MSG040F                Text constant for error msg 040  02457000
         LCLC  &MSG050A                Text constant for error msg 050  02458000
         LCLC  &MSG050B                Text constant for error msg 050  02459000
         LCLC  &MSG050C                Text constant for error msg 050  02459100
.*                                                                @01A  02459200
         LCLC  &MSG060A                Text constant for error msg 060  02459300
.*                                                                @01A  02459400
         LCLC  &MSG060B                Text constant for error msg 060  02459500
.*                                                                @01A  02459600
.*                                                                      02460000
.********************************************************************** 02461000
.**                                                                  ** 02462000
.** Initialization of error message text constants that are used     ** 02463000
.** to build error messages for the detected invalid parameters.     ** 02464000
.**                                                                  ** 02465000
.********************************************************************** 02466000
.*                                                                      02467000
.********************************************************************** 02468000
.** Text constants for error message 010.                            ** 02469000
.********************************************************************** 02470000
.*                                                                      02471000
&MSG010A SETC  'AHA010 OUTADD ERROR: POSITIONAL PARAMETERS ARE NOT ALLOX02472000
               WED.'                                                    02473000
.*                                                                      02474000
.*                                                                      02475000
.********************************************************************** 02476000
.** Text constants for error message 020.                            ** 02477000
.********************************************************************** 02478000
.*                                                                      02479000
&MSG020A SETC  'AHA020 OUTADD ERROR: KEYWORD PARAMETER '                02480000
&MSG020B SETC  ' SPECIFIED'                                             02481000
&MSG020C SETC  '                     INCORRECTLY.'                      02482000
.*                                                                      02483000
.*                                                                      02484000
.********************************************************************** 02485000
.** Text constants for error message 030.                            ** 02486000
.********************************************************************** 02487000
.*                                                                      02488000
&MSG030A SETC  'AHA030 OUTADD ERROR: KEYWORD PARAMETER '                02489000
&MSG030B SETC  '                     MUST BE SPECIFIED.'                02490000
.*                                                                      02491000
.*                                                                      02492000
.********************************************************************** 02493000
.** Text constants for error message 040.                            ** 02494000
.********************************************************************** 02495000
.*                                                                      02496000
&MSG040A SETC  'AHA040 OUTADD ERROR: KEYWORD PARAMETER ''''SYSNAME'''' X02497000
               SPECIFIED,'                                              02498000
&MSG040B SETC  '                     BUT MUTUALLY EXCLUSIVE WITH THE ''X02499000
               ''NAME'''''                                              02500000
&MSG040C SETC  '                     KEYWORD.'                          02501000
.*                                                                      02502000
.*                                                                      02503000
&MSG040D SETC  'AHA040 OUTADD ERROR: KEYWORD PARAMETER(S) FROM THE EXECX02504000
               UTE'                                                     02505000
&MSG040E SETC  '                     MACRO FORM SPECIFIED, BUT MUTUALLYX02506000
               '                                                        02507000
&MSG040F SETC  '                     EXCLUSIVE WITH THE LIST MACRO FORMX02508000
               .'                                                       02509000
.*                                                                      02510000
.*                                                                      02511000
.********************************************************************** 02512000
.** Text constants for error message 050.                            ** 02513000
.********************************************************************** 02514000
.*                                                                      02515000
&MSG050A SETC  'AHA050 OUTADD ERROR: PARAMETER LIST DECLARE NOT GENERATX02516000
               ED'                                                      02517000
&MSG050B SETC  '                     DUE TO ERRORS FOUND IN THE LIST FOX02518000
               RM'                                                      02519000
&MSG050C SETC  '                     INVOCATION.'                       02520000
.*                                                                      02520100
.********************************************************************** 02520200
.** Text constants for error message 060.                        @01A** 02520300
.********************************************************************** 02520400
.*                                                                      02520500
&MSG060A SETC  'AHA060 OUTADD ERROR: IF ONEUSE OR REUSE IS SPECIFIED ASX02520600
                YES'                                               @01A 02520700
&MSG060B SETC  '                     THEN BOTH MUST BE SPECIFIED AS YESX02520800
               '                                                   @01A 02520900
.*                                                                      02521000
.*                                                                      02522000
.********************************************************************** 02523000
.** Initialize variables.                                            ** 02524000
.********************************************************************** 02525000
.*                                                                      02526000
&ERRVAL  SETB  1                                                        02527000
&ERRCODE SETA  12                           Return a 12 for any error   02528000
.*                                          found in the macro          02529000
.*                                          invocation.                 02530000
&DCLLEN  SETC  '36'                         Length of LIST form declare 02531000
&BLANK   SETC  ' '                          Blank                       02532000
.*                                                                      02533000
.*                                                                      02534000
.********************************************************************** 02535000
.**                                                                  ** 02536000
.**               START OF MAINLINE PROCESSING                       ** 02537000
.**                                                                  ** 02538000
.********************************************************************** 02539000
.*                                                                      02540000
.*                                                                      02541000
.********************************************************************** 02542000
.** Initializes the parameter list error flag to indicate            ** 02543000
.** errors have not yet been found in the macro parameter list.      ** 02544000
.********************************************************************** 02545000
.*                                                                      02546000
&PARMERR SETB  0                            Set the parm list errors    02547000
.*                                          found flag off              02548000
.*                                                                      02549000
.*                                                                      02550000
.********************************************************************** 02551000
.** Branches to the routine to verify the MF keyword.                ** 02552000
.********************************************************************** 02553000
.*                                                                      02554000
         AGO   .LH0010A                     Branch to the VERIFY_MF     02555000
.*                                          routine.                    02556000
.LH0010B ANOP                               Label at which to return    02557000
.*                                          from the VERIFY_MF routine. 02558000
.*                                                                      02559000
.********************************************************************** 02560000
.** If the MF keyword is valid, branches to the routines to process  ** 02561000
.** the macro form specified.                                        ** 02562000
.********************************************************************** 02563000
.*                                                                      02564000
         AIF   (&PARMERR EQ 0).LH0001T      Test if MF was valid.       02565000
         AGO   .LH0000Z                                                 02566000
.LH0001T ANOP                               MF keyword is valid.        02567000
         AIF   ('&MF' EQ 'L').LH0002T       Test if list macro form     02568000
         AGO   .LH0002E                     is EXECUTE FORM.            02569000
.*                                                                      02570000
.LH0002T ANOP                               List macro form             02571000
         AGO   .LH0020A                     Branch to LIST_FORM         02572000
.*                                          routine to process list     02573000
.*                                          form invocation.            02574000
.LH0020B ANOP                               Label at which to return    02575000
.*                                          from LIST_FORM routine      02576000
         AGO   .LH0000Z                                                 02577000
.*                                                                      02578000
.LH0002E ANOP                               Execute macro form.         02579000
         AGO   .LH0030A                     Branch to EXECUTE_FORM      02580000
.*                                          routine to process execute  02581000
.*                                          invocation.                 02582000
.LH0030B ANOP                               Label at which to return    02583000
.*                                          from EXECUTE_FORM routine   02584000
.*                                                                      02585000
.*                                                                      02586000
.********************************************************************** 02587000
.** Returns from the macro with return code 0 for a valid            ** 02588000
.** invocation, 12 for an invalid invocation.                        ** 02589000
.********************************************************************** 02590000
.*                                                                      02591000
.LH0000Z ANOP                                                           02592000
         MEXIT                                                          02593000
.*                                                                      02594000
.*                                                                      02595000
.*                                                                      02596000
.********************************************************************** 02597000
.**                                                                  ** 02598000
.** PROCEDURE NAME: VERIFY_MF                                        ** 02599000
.**                                                                  ** 02600000
.** DESCRIPTIVE NAME: Verifies the macro form keyword parameter.     ** 02601000
.**                                                                  ** 02602000
.** ENTRY: From mainline processing                                  ** 02603000
.**                                                                  ** 02604000
.** INPUT: MF keyword                                                ** 02605000
.**                                                                  ** 02606000
.** OUTPUT: For an invalid specification of the MF keyword:          ** 02607000
.**          a. The parameter list error flag is set on.             ** 02608000
.**          b. An error message is generated for the invalid        ** 02609000
.**             condition found.                                     ** 02610000
.**                                                                  ** 02611000
.** EXIT: To mainline processing                                     ** 02612000
.**                                                                  ** 02613000
.** ROUTINES BRANCHED TO: None                                       ** 02614000
.**                                                                  ** 02615000
.********************************************************************** 02616000
.*                                                                      02617000
.LH0010A ANOP                               Entry Point of the          02618000
.*                                          routine.                    02619000
.********************************************************************** 02620000
.** Tests if the MF keyword is specified. If it is specified,        ** 02621000
.** tests if it has a valid value. If it is invalid or is not        ** 02622000
.** specified, generates an error message and sets the parameter     ** 02623000
.** list error flag on.                                              ** 02624000
.********************************************************************** 02625000
.*                                                                      02626000
         AIF   (0 NE N'&MF).LH0012          Is the MF keyword           02627000
.*                                          specified?                  02628000
.********************************************************************** 02629000
.** Generates the error message: AHA030 OUTADD ERROR: KEYWORD        ** 02630000
.** PARAMETER MF MUST BE SPECIFIED.                                  ** 02631000
.********************************************************************** 02632000
.*                                                                      02633000
.LH0011  MNOTE &ERRCODE,'&MSG030A.MF'       NO, MF keyword not          02634000
         MNOTE &ERRCODE,'&MSG030B'          specified.                  02635000
         MNOTE '&BLANK'                                                 02636000
&PARMERR SETB  1                                                        02637000
         AGO   .LH0010Z                                                 02638000
.*                                                                      02639000
.*                                                                      02640000
.********************************************************************** 02641000
.** If the EXECUTE or LIST forms are not properly specified,         ** 02642000
.** generate error message AHA020.                                   ** 02643000
.********************************************************************** 02644000
.LH0012  AIF   ((('&MF(1)' EQ 'E') AND                                 X02645000
               ('&MF(2)' NE '')  AND                                   X02646000
               ('&MF(2)' NE '()') AND                                  X02647000
               (2 EQ N'&MF)) OR                                        X02648000
               ('&MF' EQ 'L')).LH0010Z                                  02649000
.*                                                                      02650000
.********************************************************************** 02651000
.** Generates the error message: AHA020 OUTADD ERROR: KEYWORD        ** 02652000
.** PARAMETER MF SPECIFIED INCORRECTLY.                              ** 02653000
.********************************************************************** 02654000
.*                                                                      02655000
         MNOTE &ERRCODE,'&MSG020A.MF&MSG020B'                           02656000
         MNOTE &ERRCODE,'&MSG020C'                                      02657000
         MNOTE '&BLANK'                                                 02658000
&PARMERR SETB  1                            Sets the parameter list     02659000
.*                                          error flag on               02660000
.********************************************************************** 02661000
.** Returns from this routine to the label just following the        ** 02662000
.** branch to this routine.                                          ** 02663000
.********************************************************************** 02664000
.*                                                                      02665000
.LH0010Z ANOP                                                           02666000
         AGO   .LH0010B                     Return from VERIFY_MF       02667000
.*                                                                      02668000
.*                                                                      02669000
.********************************************************************** 02670000
.**                                                                  ** 02671000
.** PROCEDURE NAME: LIST_FORM                                        ** 02672000
.**                                                                  ** 02673000
.** DESCRIPTIVE NAME: Processes the list form macro invocation.      ** 02674000
.**                                                                  ** 02675000
.** OPERATION: 1. Verifies the list form macro parameter list.       ** 02676000
.**                                                                  ** 02677000
.**            2. If the parameter list is valid, generates the      ** 02678000
.**               declare in modified source text for the list       ** 02679000
.**               form invocation.                                   ** 02680000
.**                                                                  ** 02681000
.**            3. If the parameter list is invalid, generates        ** 02682000
.**               error messages.                                    ** 02683000
.**                                                                  ** 02684000
.** ENTRY: From mainline processing                                  ** 02685000
.**                                                                  ** 02686000
.** INPUT: Macro parameter list                                      ** 02687000
.**                                                                  ** 02688000
.** OUTPUT: 1. For invalid invocations:                              ** 02689000
.**            a. The parameter list error flag is set on.           ** 02690000
.**            b. Error messages are generated for the invalid       ** 02691000
.**               parameters found.                                  ** 02692000
.**            c. An error message is generated echoing the          ** 02693000
.**               the macro invocation and indicating the            ** 02694000
.**               list form declare was not generated.               ** 02695000
.**                                                                  ** 02696000
.**         2. For valid invocations:                                ** 02697000
.**                                                                  ** 02698000
.**            Generates the declare for storage.  The declare       ** 02699000
.**            for storage consists of 4 bytes to be used as         ** 02700000
.**            the parameter list pointer, followed by the           ** 02701000
.**            number of bytes equal to the length of the            ** 02702000
.**            IEFDOCNL parameter list.                              ** 02703000
.**                                                                  ** 02704000
.**  NOTES: If the IEFDOCNL parameter list length changes the        ** 02705000
.**         macro variable DCLLEN will need to be changed to be      ** 02706000
.**         initialized to the proper length for the list form       ** 02707000
.**         declare.                                                 ** 02708000
.**                                                                  ** 02709000
.** EXIT: To mainline processing                                     ** 02710000
.**                                                                  ** 02711000
.** ROUTINES BRANCHED TO: None                                       ** 02712000
.**                                                                  ** 02713000
.********************************************************************** 02714000
.*                                                                      02715000
.*                                                                      02716000
.LH0020A ANOP                               Entry point of the routine  02717000
.*                                                                      02718000
.********************************************************************** 02719000
.** Verifies the list form macro invocation. Checks for              ** 02720000
.** extraneous, invalid and missing parameters.                      ** 02721000
.********************************************************************** 02722000
.*                                                                      02723000
.********************************************************************** 02724000
.**  Positional parameters are not used in the list form             ** 02725000
.**  invocation. Checks that they are not specified. If they are,    ** 02726000
.**  then generates the error message 010 and sets the parameter     ** 02727000
.**  list error flag on.                                             ** 02728000
.********************************************************************** 02729000
.*                                                                      02730000
         AIF   (0 EQ N'&SYSLIST).LH0021     Any positional parameters?  02731000
.*                                                                      02732000
.********************************************************************** 02733000
.** Generates the error message: AHA010 OUTADD ERROR:                ** 02734000
.** POSITIONAL PARAMETERS ARE NOT ALLOWED.                           ** 02735000
.********************************************************************** 02736000
.*                                                                      02737000
         MNOTE &ERRCODE,'&MSG010A'          YES, generate error msg.    02738000
         MNOTE '&BLANK'                                                 02739000
&PARMERR SETB  1                            Set error flag.             02740000
.*                                                                      02741000
.*                                                                      02742000
.********************************************************************** 02743000
.** Checks that execute form keyword parameters not used in the      ** 02744000
.** list form are not specified.  If they are, then generates        ** 02745000
.** error message 040 and sets the parameter list error flag on.     ** 02746000
.********************************************************************** 02747000
.*                                                                      02748000
.LH0021  AIF   (0 NE N'&NAME).LH0021A,      Was NAME specified?        X02749000
               (0 NE N'&SYSNAME).LH0021A,   Was SYSNAME specified?     X02750000
               (0 NE N'&TEXTPTR).LH0021A,   Was TEXTPTR specified?     X02751000
               (0 NE N'&ENQ).LH0021A,       Was ENQ specified?         X02751500
               (0 NE N'&ONEUSE).LH0021A,    Was ONEUSE specified?  @T1AX02752000
               (0 NE N'&REUSE).LH0021A      Was REUSE specified?   @T1A 02752500
         AGO   .LH0025                      No errors found.            02753000
.*                                                                      02754000
.********************************************************************** 02755000
.** Generates the error message: AHA040 OUTADD ERROR: KEYWORD        ** 02756000
.** PARAMETER(S) FROM THE EXECUTE MACRO FORM SPECIFIED, BUT          ** 02757000
.** MUTUALLY EXCLUSIVE WITH THE LIST MACRO FORM.                     ** 02758000
.********************************************************************** 02759000
.*                                                                      02760000
.LH0021A MNOTE &ERRCODE,'&MSG040D'                                      02761000
         MNOTE &ERRCODE,'&MSG040E'                                      02762000
         MNOTE &ERRCODE,'&MSG040F'                                      02763000
         MNOTE '&BLANK'                                                 02764000
&PARMERR SETB  1                            YES, set error flag.        02765000
.*                                                                      02766000
.*                                                                      02767000
.********************************************************************** 02768000
.** If the list form macro parameter list is valid, then             ** 02769000
.** generates the declare for the Dynamic OUTPUT parameter list.     ** 02770000
.** If the macro parameter list is invalid, the macro invocation     ** 02771000
.** is echoed in an error message.                                   ** 02772000
.********************************************************************** 02773000
.*                                                                      02774000
.LH0025  AIF   (0 EQ &PARMERR).LH0024T                                  02775000
         AGO   .LH0024E                                                 02776000
.*                                                                      02777000
.LH0024T ANOP                               NO errors found in          02778000
.*                                          LIST form                   02779000
.*                                                                      02780000
.********************************************************************** 02781000
.** Generates the declare for the Dynamic OUTPUT parameter list.     ** 02782000
.** Uses the label as specified in the second MF argument.           ** 02783000
.********************************************************************** 02784000
.*                                                                      02785000
         DS   0F                            Force to full word          02786000
&LABEL   DS   CL(&DCLLEN)                   OUTADD LIST form declare    02787000
         AGO   .LH0020Z                                                 02788000
.*                                                                      02789000
.********************************************************************** 02790000
.** Generates the error message: AHA050 OUTADD ERROR:                ** 02791000
.** LIST FORM DECLARE NOT GENERATED DUE TO ERRORS FOUND IN THE       ** 02792000
.** LIST FORM INVOCATION, in modified source text.                   ** 02793000
.********************************************************************** 02794000
.*                                                                      02795000
.LH0024E MNOTE &ERRCODE,'&MSG050A'          Errors were found in        02796000
         MNOTE &ERRCODE,'&MSG050B'          LIST form.                  02797000
         MNOTE &ERRCODE,'&MSG050C'                                      02798000
         MNOTE '&BLANK'                                                 02799000
.*                                                                      02800000
.*                                                                      02801000
.********************************************************************** 02802000
.** Returns from the LIST_FORM routine to the label just             ** 02803000
.** following the branch to this routine.                            ** 02804000
.********************************************************************** 02805000
.*                                                                      02806000
.LH0020Z ANOP                                                           02807000
         AGO   .LH0020B                     Return to main routine.     02808000
.*                                                                      02809000
.*                                                                      02810000
.********************************************************************** 02811000
.**                                                                  ** 02812000
.** PROCEDURE NAME: EXECUTE_FORM                                     ** 02813000
.**                                                                  ** 02814000
.** DESCRIPTIVE NAME: Processes the execute form macro invocation.   ** 02815000
.**                                                                  ** 02816000
.** OPERATION: 1. Verifies the execute form macro parameter list.    ** 02817000
.**               The parameter list will be checked for errors      ** 02818000
.**               which would prevent or interfere with filling      ** 02819000
.**               in the Dynamic OUTPUT parameter list.              ** 02820000
.**                                                                  ** 02821000
.**               A.  Checks that required parameters and            ** 02822000
.**                   parameters with mutual exclusivity             ** 02823000
.**                   conditions are properly specified.             ** 02824000
.**                                                                  ** 02825000
.**               B.  Verify keyword arguments:                      ** 02826000
.**                                                                  ** 02827000
.**                   For asis type parameters, checks that the      ** 02828000
.**                   correct number of parameters are specified.    ** 02829000
.**                                                                  ** 02830000
.**                   For choice-data type parameters, checks that   ** 02831000
.**                   a valid value is specified.                    ** 02832000
.**                                                                  ** 02833000
.**            3. If the execute form macro parameter list is        ** 02834000
.**               valid:                                             ** 02835000
.**                                                                  ** 02836000
.**               A. Branches to the routine to generate the code    ** 02837000
.**                  to fill in the Dynamic OUTPUT parameter         ** 02838000
.**                  list.                                           ** 02839000
.**                                                                  ** 02840000
.**               B. Branches to the routine to generate the code    ** 02841000
.**                  to establish linkage to the parameter list      ** 02842000
.**                  and invoke Dynamic OUTPUT.                      ** 02843000
.**                                                                  ** 02844000
.**               C. Branches to the routine to generate the code    ** 02845000
.**                  to return fields from Dynamic OUTPUT, as        ** 02846000
.**                  specified in the macro parameter list.          ** 02847000
.**                                                                  ** 02848000
.** ENTRY: From mainline processing                                  ** 02849000
.**                                                                  ** 02850000
.** INPUT: macro parameter list                                      ** 02851000
.**                                                                  ** 02852000
.** OUTPUT: If invalid parameters are detected:                      ** 02853000
.**          1. The parameter list error flag is set on.             ** 02854000
.**          2. Error messages are generated.                        ** 02855000
.**         If the parameter list is valid, code is generated        ** 02856000
.**         in modified source text.                                 ** 02857000
.**                                                                  ** 02858000
.** EXIT: To mainline processing                                     ** 02859000
.**                                                                  ** 02860000
.** ROUTINES BRANCHED TO: 1. CHECK_REQUIRED&MUTUAL                   ** 02861000
.**                       2. CHECK_ARGUMENTS                         ** 02862000
.**                       3. FILL_IN_PARM_LIST                       ** 02863000
.**                       4. INVOKE_DYNAMIC_OUTPUT                   ** 02864000
.**                       5. RETURN_FIELDS                           ** 02865000
.**                                                                  ** 02866000
.********************************************************************** 02867000
.*                                                                      02868000
.LH0030A ANOP                               Entry point of routine.     02869000
.*                                                                      02870000
.*                                                                      02871000
.********************************************************************** 02872000
.** Verifies that required parameters are specified and that         ** 02873000
.** parameters with mutual exclusivity conditions are properly       ** 02874000
.** specified.                                                       ** 02875000
.********************************************************************** 02876000
.*                                                                      02877000
         AGO   .LH0040A                   Branch to                     02878000
.*                                        CHECK_REQUIRED&MUTUAL         02879000
.LH0040B ANOP                             Point of return from          02880000
.*                                        CHECK_REQUIRED&MUTUAL         02881000
.*                                                                      02882000
.*                                                                      02883000
.********************************************************************** 02884000
.** Verify keyword arguments                                         ** 02885000
.********************************************************************** 02886000
.*                                                                      02887000
         AGO   .LH0050A                   Branch to CHECK_ARGUMENTS     02888000
.LH0050B ANOP                             Point of return from          02889000
.*                                        CHECK_ARGUMENTS               02890000
.*                                                                      02891000
.*                                                                      02892000
.********************************************************************** 02893000
.** If the execute form parameter list is valid, branches to the     ** 02894000
.** routines to generate the code to fill in the parameter list      ** 02895000
.** for Dynamic OUTPUT, invoke Dynamic OUTPUT, and return the        ** 02896000
.** output fields from Dynamic OUTPUT.                               ** 02897000
.********************************************************************** 02898000
.*                                                                      02899000
.*                                                                      02900000
         AIF   (&ERRVAL EQ &PARMERR).LH0030Z                            02901000
.*                                                                      02902000
         AGO   .LH0060A                    Branch to FILL_IN_PARM_      02903000
.*                                         LIST routine                 02904000
.LH0060B ANOP                              Point at which to return     02905000
.*                                         from FILL_IN_PARM_LIST       02906000
.*                                         routine                      02907000
.*                                                                      02908000
         AGO    .LH0070A                   Branch to INVOKE_DYANMIC_    02909000
.*                                         OUTPUT routine               02910000
.LH0070B ANOP                              Point at which to return     02911000
.*                                         from INVOKE_DYNAMIC_OUTPUT   02912000
.*                                         routine                      02913000
.*                                                                      02914000
         AGO    .LH0080A                   Branch to RETURN_FIELDS      02915000
.*                                         routine                      02916000
.LH0080B ANOP                              Point at which to return     02917000
.*                                         from RETURN_FIELDS           02918000
.*                                         routine                      02919000
.*                                                                      02920000
.*                                                                      02921000
.********************************************************************** 02922000
.** Returns from this routine to the label following the branch      ** 02923000
.** to this routine.                                                 ** 02924000
.********************************************************************** 02925000
.*                                                                      02926000
.LH0030Z ANOP                                                           02927000
         AGO   .LH0030B                     Return to main routine.     02928000
.*                                                                      02929000
.*                                                                      02930000
.********************************************************************** 02931000
.**                                                                  ** 02932000
.** ROUTINE NAME: CHECK_REQUIRED&MUTUAL                              ** 02933000
.**                                                                  ** 02934000
.** FUNCTION: Checks execute macro form parameters that are          ** 02935000
.**           required or have mutual exclusivity conditions.        ** 02936000
.**                                                                  ** 02937000
.** ENTRY: From EXEC_FORM routine                                    ** 02938000
.**                                                                  ** 02939000
.** INPUT: NAME and SYSNAME keyword parameters.                      ** 02940000
.**                                                                  ** 02941000
.** OUTPUT: If invalid parameters are detected:                      ** 02942000
.**          1. The parameter list error flag is set on.             ** 02943000
.**          2. Error messages are generated.                        ** 02944000
.**                                                                  ** 02945000
.** EXIT: To EXEC_FORM routine                                       ** 02946000
.**                                                                  ** 02947000
.** ROUTINE CALLED: None                                             ** 02948000
.**                                                                  ** 02949000
.********************************************************************** 02950000
.*                                                                      02951000
.LH0040A ANOP                               Entry point of routine.     02952000
.*                                                                      02953000
.*                                                                      02954000
.********************************************************************** 02955000
.**  Positional parameters are not used in the execute form          ** 02956000
.**  invocation. Checks that they are not specified. If they are,    ** 02957000
.**  then generates the error message 010 and sets the parameter     ** 02958000
.**  list error flag on.                                             ** 02959000
.********************************************************************** 02960000
.*                                                                      02961000
         AIF   (0 EQ N'&SYSLIST).LH0041     Any positional parameters?  02962000
.*                                                                      02963000
.********************************************************************** 02964000
.** Generates the error message: AHA010 OUTADD ERROR:                ** 02965000
.** POSITIONAL PARAMETERS ARE NOT ALLOWED.                           ** 02966000
.********************************************************************** 02967000
.*                                                                      02968000
         MNOTE &ERRCODE,'&MSG010A'          YES, generate error msg.    02969000
         MNOTE '&BLANK'                                                 02970000
&PARMERR SETB  1                            Set error flag.             02971000
.*                                                                      02972000
.*                                                                      02973000
.********************************************************************** 02974000
.**  NAME and SYSNAME parameters are mutually exclusive. If both     ** 02975000
.**  are specified, generate error message 040 and set the           ** 02976000
.**  parameter list error flag on.                                   ** 02977000
.********************************************************************** 02978000
.*                                                                      02979000
.*                                                                      02980000
.LH0041  AIF   ((0 NE N'&NAME) AND                                     X02981000
               (0 NE N'&SYSNAME)).LH0041T                               02982000
         AGO   .LH0041E                                                 02983000
.*                                                                      02984000
.********************************************************************** 02985000
.**  Generates the error message: AHA040 OUTADD ERROR:  KEYWORD      ** 02986000
.**  PARAMETER 'SYSNAME' SPECIFIED, BUT MUTUALLY EXCLUSIVE WITH      ** 02987000
.**  THE 'NAME' KEYWORD.                                             ** 02988000
.********************************************************************** 02989000
.*                                                                      02990000
.LH0041T ANOP                                                           02991000
         MNOTE &ERRCODE,'&MSG040A'                                      02992000
         MNOTE &ERRCODE,'&MSG040B'                                      02993000
         MNOTE &ERRCODE,'&MSG040C'                                      02994000
         MNOTE '&BLANK'                                                 02995000
&PARMERR SETB  1                                                        02996000
         AGO   .LH0041B                                                 02997000
.*                                                                      02998000
.*                                                                      02999000
.********************************************************************** 03000000
.**  NAME or SYSNAME parameter must be specified. If neither are     ** 03001000
.**  specified, generate error message 030 and set the parameter     ** 03002000
.**  list error flag on.                                             ** 03003000
.********************************************************************** 03004000
.*                                                                      03005000
.LH0041E AIF   ((0 EQ N'&NAME) AND                                     X03006000
               (0 EQ N'&SYSNAME)).LH0042T                               03007000
         AGO   .LH0041B                                                 03008000
.*                                                                      03009000
.*                                                                      03010000
.********************************************************************** 03011000
.** Generates the error message: AHA030 OUTADD ERROR:                ** 03012000
.** KEYWORD PARAMETER 'NAME' OR 'SYSNAME' MUST BE SPECIIFED.         ** 03013000
.********************************************************************** 03014000
.*                                                                      03015000
.LH0042T MNOTE &ERRCODE,'&MSG030A.''NAME'' OR ''SYSNAME'''              03016000
         MNOTE &ERRCODE,'&MSG030B'                                      03017000
         MNOTE '&BLANK'                                                 03018000
&PARMERR SETB  1                                                        03019000
.*                                                                      03020000
.LH0041B ANOP                          End of IF - THEN - ELSE          03021000
.*                                                                      03022000
.*                                                                      03023000
.********************************************************************** 03024000
.**  The TEXTPTR parameter must be specified. If it is not           ** 03025000
.**  specified, generate error message 030 and set the parameter     ** 03026000
.**  list error flag on.                                             ** 03027000
.********************************************************************** 03028000
.*                                                                      03029000
         AIF   (0 EQ N'&TEXTPTR).LH0043T                                03030000
         AGO   .LH0040Z                                                 03031000
.*                                                                      03032000
.*                                                                      03033000
.********************************************************************** 03034000
.** Generates the error message: AHA030 OUTADD ERROR:                ** 03035000
.** KEYWORD PARAMETER TEXTPTR MUST BE SPECIIFED.                     ** 03036000
.********************************************************************** 03037000
.*                                                                      03038000
.LH0043T MNOTE &ERRCODE,'&MSG030A.TEXTPTR'                              03039000
         MNOTE &ERRCODE,'&MSG030B'                                      03040000
         MNOTE '&BLANK'                                                 03041000
&PARMERR SETB  1                                                        03042000
.*                                                                      03043000
.*                                                                      03044000
.********************************************************************** 03045000
.** Returns from the CHECK_REQUIRED&MUTUAL routine. Branches to      ** 03046000
.** the label just after the branch to this routine.                 ** 03047000
.********************************************************************** 03048000
.*                                                                      03049000
.LH0040Z ANOP                                                           03050000
         AGO   .LH0040B                                                 03051000
.*                                                                      03052000
.*                                                                      03053000
.********************************************************************** 03054000
.**                                                                  ** 03055000
.** ROUTINE NAME: CHECK_ARGUMENTS                                    ** 03056000
.**                                                                  ** 03057000
.** FUNCTION: Verifies that the parameter arguments are properly     ** 03058000
.**           specified.                                             ** 03059000
.**                                                                  ** 03060000
.** ENTRY: From EXEC_FORM                                            ** 03061000
.**                                                                  ** 03062000
.** INPUT: Keyword macro parameters (except MF)                      ** 03063000
.**                                                                  ** 03064000
.** OUTPUT: If invalid parameters are detected:                      ** 03065000
.**          1. The parameter list error flag is set on.             ** 03066000
.**          2. Error messages are generated.                        ** 03067000
.**                                                                  ** 03068000
.** EXIT: EXEC_FORM                                                  ** 03069000
.**                                                                  ** 03070000
.** ROUTINES BRANCHED TO: None                                       ** 03071000
.**                                                                  ** 03072000
.********************************************************************** 03073000
.*                                                                      03074000
.LH0050A ANOP                               Entry point of routine.     03075000
.*                                                                      03076000
.*                                                                      03077000
.********************************************************************** 03078000
.** Verifies the NAME key word parameter field has no more than 1    ** 03079000
.** value specified. Also verifies a register in the valid range is  ** 03080000
.** passed. If an error is detected generates error message 030      ** 03081000
.** and sets the parameter list error flag on.                       ** 03082000
.********************************************************************** 03083000
.*                                                                      03084000
         AIF   ((N'&NAME GT 1) OR                                      X03085000
               ('&NAME' EQ '()')).LH0050T                               03086000
         AGO   .LH0051                                                  03087000
.*                                                                      03088000
.********************************************************************** 03089000
.** Generates the error message: AHA020 OUTADD ERROR: KEYWORD        ** 03090000
.** PARAMETER 'NAME' SPECIFIED INCORRECTLY.                          ** 03091000
.********************************************************************** 03092000
.*                                                                      03093000
.LH0050T MNOTE &ERRCODE,'&MSG020A.''NAME''&MSG020B'                     03094000
         MNOTE &ERRCODE,'&MSG020C'                                      03095000
         MNOTE '&BLANK'                                                 03096000
&PARMERR SETB  1                                                        03097000
.*                                                                      03098000
.*                                                                      03099000
.********************************************************************** 03100000
.** Verifies the SYSNAME key word parameter field has no more than   ** 03101000
.** 1 value specified.  If it is specified and has more than one     ** 03102000
.** value, generates error message 020 and sets the parameter        ** 03103000
.** list error flag on.                                              ** 03104000
.********************************************************************** 03105000
.*                                                                      03106000
.LH0051  AIF   ((N'&SYSNAME GT 1) OR                                   X03107000
               ('&SYSNAME' EQ '()')).LH0051T                            03108000
         AGO   .LH0052                                                  03109000
.*                                                                      03110000
.********************************************************************** 03111000
.** Generates the error message: AHA020 OUTADD ERROR: KEYWORD        ** 03112000
.** PARAMETER SYSNAME SPECIFIED INCORRECTLY.                         ** 03113000
.********************************************************************** 03114000
.*                                                                      03115000
.LH0051T MNOTE &ERRCODE,'&MSG020A.SYSNAME&MSG020B'                      03116000
         MNOTE &ERRCODE,'&MSG020C'                                      03117000
         MNOTE '&BLANK'                                                 03118000
&PARMERR SETB  1                                                        03119000
.*                                                                      03120000
.*                                                                      03121000
.********************************************************************** 03122000
.** Verifies the TEXTPTR key word parameter field has 1 value, if    ** 03123000
.** specified.  If it is specified and has more than one value,      ** 03124000
.** generates error message 20 and sets the parameter list error     ** 03125000
.** flag on.                                                         ** 03126000
.********************************************************************** 03127000
.*                                                                      03128000
.LH0052  AIF   ((N'&TEXTPTR GT 1) OR                                   X03129000
               ('&TEXTPTR' EQ '()')).LH0052T                            03130000
         AGO   .LH0053                                                  03131000
.*                                                                      03132000
.********************************************************************** 03133000
.** Generates the error message: AHA020 OUTADD ERROR: KEYWORD        ** 03134000
.** PARAMETER TEXTPTR SPECIFIED INCORRECTLY.                         ** 03135000
.********************************************************************** 03136000
.*                                                                      03137000
.LH0052T MNOTE &ERRCODE,'&MSG020A.TEXTPTR&MSG020B'                      03138000
         MNOTE &ERRCODE,'&MSG020C'                                      03139000
         MNOTE '&BLANK'                                                 03140000
&PARMERR SETB  1                                                        03141000
.*                                                                      03142000
.*                                                                      03143000
.********************************************************************** 03144000
.** Verifies that the ENQ keyword parameter has a valid              ** 03145000
.** value, if it is specified.  Valid values are CONDITIONAL       @T1C 03145600
.** UNCONDITIONAL.                                                 @T1A 03146200
.** If an invalid value is specified, generates error message 020    ** 03147000
.** and sets the parameter list error flag on.                       ** 03148000
.********************************************************************** 03149000
.*                                                                      03150000
.LH0053  AIF   (0 EQ N'&ENQ).LH0054            Was ENQ specified?  @T1C 03151000
         AIF   (('CONDITIONAL' EQ '&ENQ') OR                           X03152000
               ('UNCONDITIONAL' EQ '&ENQ')).LH0054                 @T1C 03153000
.*                                                                      03154000
.********************************************************************** 03155000
.** Generates the error message: AHA020 OUTADD ERROR: KEYWORD        ** 03156000
.** PARAMETER ENQ SPECIFIED INCORRECTLY.                             ** 03157000
.********************************************************************** 03158000
.*                                                                      03159000
         MNOTE &ERRCODE,'&MSG020A.ENQ&MSG020B'                          03160000
         MNOTE &ERRCODE,'&MSG020C'                                      03161000
         MNOTE '&BLANK'                                                 03162000
&PARMERR SETB  1                                                        03163000
.*                                                                 @T1A 03163100
.*                                                                 @T1A 03163200
.******************************************************************@T1A 03163300
.** Verifies that the ONEUSE keyword parameter has a valid         @T1A 03163400
.** value, if it is specified.  Valid values are YES or NO.        @T1A 03163500
.** If an invalid value is specified, generates error message 020  @T1A 03163600
.** and sets the parameter list error flag on.                     @T1A 03163700
.***************************************************************** @T1A 03163800
.*                                                                 @T1A 03163900
.LH0054  AIF   (0 EQ N'&ONEUSE).LH0055       Was ONEUSE specified? @T1A 03164000
         AIF   ('NO' EQ '&ONEUSE').LH0055                          @01C 03164100
         AIF   ('YES' EQ '&ONEUSE').LH0054A                        @01A 03164200
.*                                                                 @T1A 03164300
.******************************************************************@T1A 03164400
.** Generates the error message: AHA020 OUTADD ERROR: KEYWORD      @T1A 03164500
.** PARAMETER ONEUSE SPECIFIED INCORRECTLY.                        @T1A 03164600
.***************************************************************** @T1A 03164700
.*                                                                 @T1A 03164800
         MNOTE &ERRCODE,'&MSG020A.ONEUSE&MSG020B'                  @T1A 03164900
         MNOTE &ERRCODE,'&MSG020C'                                 @T1A 03165000
         MNOTE '&BLANK'                                            @T1A 03165100
&PARMERR SETB  1                                                   @T1A 03165200
         AGO   .LH0055                                             @01A 03165300
.LH0054A ANOP                                                      @01A 03165400
&ONEUSON SETB  1                                                   @01A 03165500
.*                                                                 @T1A 03165600
.*                                                                 @T1A 03165700
.******************************************************************@T1A 03165800
.** Verifies that the REUSE keyword parameter has a valid          @T1A 03165900
.** value, if it is specified.  Valid values are YES or NO.        @T1A 03166000
.** If an invalid value is specified, generates error message 020  @T1A 03166100
.** and sets the parameter list error flag on.                     @T1A 03166200
.******************************************************************@T1A 03166300
.*                                                                 @T1A 03166400
.LH0055  AIF   (0 EQ N'&REUSE).LH0056         Was REUSE specified? @01A 03166500
         AIF   ('NO' EQ '&REUSE').LH0056                           @01C 03166600
         AIF   ('YES' EQ '&REUSE').LH0055A                         @01A 03166700
.*                                                                 @T1A 03166800
.******************************************************************@T1A 03166900
.** Generates the error message: AHA020 OUTADD ERROR: KEYWORD      @T1A 03167000
.** PARAMETER REUSE SPECIFIED INCORRECTLY.                         @T1A 03167100
.******************************************************************@T1A 03167200
.*                                                                 @T1A 03167300
         MNOTE &ERRCODE,'&MSG020A.REUSE&MSG020B'                   @T1A 03167400
         MNOTE &ERRCODE,'&MSG020C'                                 @T1A 03167500
         MNOTE '&BLANK'                                            @T1A 03167600
&PARMERR SETB  1                                                   @T1A 03167700
         AGO   .LH0050Z                                            @01A 03167800
.LH0055A ANOP                                                      @01A 03167900
&REUSEON SETB  1                                                   @01A 03168000
.*                                                                 @01A 03168100
.*                                                                 @01A 03168200
.******************************************************************@01A 03168300
.** Verifies that if either the ONEUSE or REUSE keyword were       @01A 03168400
.** specified as YES, then both were specified as YES.             @01A 03168500
.******************************************************************@01A 03168600
.*                                                                 @01A 03168700
.LH0056  AIF   (((&ONEUSON EQ 1) AND (&REUSEON EQ 0)) OR               X03168800
               ((&ONEUSON EQ 0) AND (&REUSEON EQ 1))).LH0057       @01A 03168900
         AGO   .LH0050Z                                            @01A 03169000
.*                                                                 @01A 03169100
.******************************************************************@01A 03169200
.** Generates the error message: AHA060 OUTADD ERROR: IF ONEUSE    @01A 03169300
.** OR REUSE SPECIFIED AS YES THEN BOTH MUST BE SPECIFIED AS YES   @01A 03169400
.******************************************************************@01A 03169500
.*                                                                 @01A 03169600
.LH0057  ANOP                                                      @01A 03169700
         MNOTE &ERRCODE,'&MSG060A'                                 @01A 03169800
         MNOTE &ERRCODE,'&MSG060B'                                 @01A 03169900
         MNOTE '&BLANK'                                            @01A 03170000
&PARMERR SETB  1                                                   @01A 03170100
.*                                                                      03170200
.*                                                                      03170300
.********************************************************************** 03170400
.** Returns from the CHECK_ARGUMENTS routine. Branches to the        ** 03170500
.** label just following the branch to this routine.                 ** 03170600
.********************************************************************** 03170700
.*                                                                      03170800
.LH0050Z ANOP                                                           03171000
         AGO   .LH0050B                                                 03172000
.*                                                                      03173000
.*                                                                      03174000
.********************************************************************** 03175000
.**                                                                  ** 03176000
.** PROCEDURE NAME: FILL_IN_PARM_LIST                                ** 03177000
.**                                                                  ** 03178000
.** DESCRIPTIVE NAME: Generates code to fill in the Dynamic OUTPUT   ** 03179000
.**                   parameter list as specified in the macro       ** 03180000
.**                   keywords.                                      ** 03181000
.**                                                                  ** 03182000
.** FUNCTION:   Generates code to:                                   ** 03183000
.**                                                                  ** 03184000
.**             1. Zero the parameter list.                          ** 03185000
.**             2. Fill in the parameter list constant fields.       ** 03186000
.**             3. Flll in the variable parameter list fields        ** 03187000
.**                as specified in the macro keywords.               ** 03188000
.**                                                                  ** 03189000
.**                                                                  ** 03190000
.** ENTRY: From EXEC_FORM                                            ** 03191000
.**                                                                  ** 03192000
.** INPUT: None                                                      ** 03193000
.**                                                                  ** 03194000
.** OUTPUT: Generates answer text assignment statements and          ** 03195000
.**         accompanying comments to fill in the parameter           ** 03196000
.**         list as specified in the macro invocation.               ** 03197000
.**                                                                  ** 03198000
.** EXIT: To EXEC_FORM                                               ** 03199000
.**                                                                  ** 03200000
.** ROUTINES BRANCHED TO: none                                       ** 03201000
.**                                                                  ** 03202000
.********************************************************************** 03203000
.*                                                                      03204000
.LH0060A ANOP                               Entry point of routine.     03205000
.*                                                                      03206000
.*                                                                      03207000
.********************************************************************** 03208000
.** If a label was specified on the macro invocation then            ** 03209000
.** generates an EQU for the label.                                  ** 03210000
.********************************************************************** 03211000
.*                                                                      03212000
         AIF   ('&LABEL' EQ '').SKIPLBL     Test if a label was        X03213000
                                            specified.                  03214000
&LABEL   DS    0H                      Label specified on macro        X03215000
                                       invocation                       03216000
.SKIPLBL ANOP                                                           03217000
.*                                                                      03218000
.*                                                                      03219000
.********************************************************************** 03220000
.** Generates code in modified source text to establish              ** 03221000
.** addressability to the parameter list.                            ** 03222000
.********************************************************************** 03223000
.*                                                                      03224000
         AIF   ('&MF(2)'(1,1) EQ '(').LH0061T IF register form parm     03225000
         AGO   .LH0061E                                                 03226000
.*                                                                      03227000
.LH0061T ANOP                                 THEN, register form       03228000
&REG     SETC  '&MF(2)'(2,K'&MF(2)-2)         Get register from         03229000
.*                                            within double parens.     03230000
.*                                            K is the count of         03231000
.*                                            characters in the parm    03232000
         LR    1,&REG                  Establishes addressability to    03233000
*                                      the parameter list specified     03234000
*                                      in the MF keyword                03235000
         AGO   .LH0061B                                                 03236000
.*                                                                      03237000
.LH0061E ANOP                                 ELSE, not register form   03238000
         LA    1,&MF(2)                Establishes addressability to    03239000
*                                      the parameter list specified     03240000
*                                      in the MF keyword                03241000
.LH0061B ANOP                                 End of IF - THEN - ELSE   03242000
.*                                                                      03243000
.*                                                                      03244000
.********************************************************************** 03245000
.** Generates code in modified source text to zero the parameter     ** 03246000
.** list                                                             ** 03247000
.********************************************************************** 03248000
.*                                                                      03249000
         XC    0(36,1),0(1)            Zeros the parameter list         03250000
.*                                                                      03251000
.*                                                                      03252000
.********************************************************************** 03253000
.** Generates code in modified source text to set the ID field       ** 03254000
.** in the parameter list.                                           ** 03255000
.********************************************************************** 03256000
.*                                                                      03257000
         MVI   4(1),C'D'               Initializes the parameter list   03258000
         MVI   5(1),C'O'               identifier to 'DOCN'             03259000
         MVI   6(1),C'C'                                                03260000
         MVI   7(1),C'N'                                                03261000
.*                                                                      03262000
.*                                                                      03263000
.********************************************************************** 03264000
.** Generates code in modified source text to set the version        ** 03265000
.** number in the parameter list.                                    ** 03266000
.********************************************************************** 03267000
.*                                                                      03268000
         MVI   8(1),1                  Initializes the version number   03269000
.*                                                                      03270000
.*                                                                      03271000
.********************************************************************** 03272000
.** Generates code in modified source text to set the parameter      ** 03273000
.** list length field in the parameter list.                         ** 03274000
.********************************************************************** 03275000
.*                                                                      03276000
         MVI   11(1),32                Initializes the parameter list   03277000
*                                      length field                     03278000
.*                                                                      03279000
.*                                                                      03280000
.********************************************************************** 03281000
.** Generates code in modified source text to set the add function   ** 03282000
.** flag on in the parameter list.                                   ** 03283000
.********************************************************************** 03284000
.*                                                                      03285000
         MVI   9(1),X'80'              Sets the function field to ADD   03286000
.*                                                                      03287000
.*                                                                      03288000
.********************************************************************** 03289000
.** Generates code in modified source text to assign the name field  ** 03290000
.** to the parameter list if the NAME macro keyword was specified    ** 03291000
.********************************************************************** 03292000
.*                                                                      03293000
         AIF   (0 EQ N'&NAME).LH0062B        Skip if &NAME is not       03294000
.*                                           specified                  03295000
         AIF   ('&NAME'(1,1) EQ '(').LH0062T IF register form parm      03296000
         AGO   .LH0062E                                                 03297000
.*                                                                      03298000
.LH0062T ANOP                                 THEN, register form       03299000
&REG     SETC  '&NAME'(2,K'&NAME-2)           Get register from         03300000
.*                                            within double parens.     03301000
.*                                            K is the count of         03302000
.*                                            characters in the parm    03303000
         MVC   12(8,1),0(&REG)         Gets the OUTPUT descriptor       03304000
*                                      name, as specified by the NAME   03305000
*                                      macro parameter                  03306000
         AGO   .LH0062B                                                 03307000
.*                                                                      03308000
.LH0062E ANOP                                 ELSE, not register form   03309000
         MVC   12(8,1),&NAME           Gets the OUTPUT descriptor       03310000
*                                      name, as specified by the NAME   03311000
*                                      macro parameter                  03312000
.LH0062B ANOP                                 End of IF - THEN - ELSE   03313000
.*                                                                      03314000
.*                                                                      03315000
.********************************************************************** 03316000
.** Generates code in modified source text to assign the text unit   ** 03317000
.** pointer to the parameter list as specified by the TEXTPTR        ** 03318000
.** keyword                                                          ** 03319000
.********************************************************************** 03320000
.*                                                                      03321000
         AIF   ('&TEXTPTR'(1,1) EQ '(').LH0063T IF register form parm   03322000
         AGO   .LH0063E                                                 03323000
.*                                                                      03324000
.LH0063T ANOP                                 THEN, register form       03325000
&REG     SETC  '&TEXTPTR'(2,K'&TEXTPTR-2)     Get register from         03326000
.*                                            within double parens.     03327000
.*                                            K is the count of         03328000
.*                                            characters in the parm    03329000
         ST    &REG,20(0,1)            Gets the text unit pointer       03330000
*                                      list address as specified by     03331000
*                                      the TEXTPTR macro parameter @P2C 03332000
         AGO   .LH0063B                                                 03333000
.*                                                                      03334000
.LH0063E ANOP                                 ELSE, not register form   03335000
         LA    0,&TEXTPTR              Gets the text unit pointer       03336000
         ST    0,20(0,1)               list address as specified by     03337000
*                                      the TEXTPTR macro parameter @P2C 03338000
.LH0063B ANOP                                 End of IF - THEN - ELSE   03339000
.*                                                                      03340000
.*                                                                      03341000
.********************************************************************** 03342000
.** Generates code in modified source text to set the conditional    ** 03343000
.** ENQ flag on if it was requested.                                 ** 03344000
.********************************************************************** 03345000
.*                                                                      03346000
         AIF   ('&ENQ' NE 'CONDITIONAL').LH0064T IF conditional ENQ     03347000
         OI    24(1),X'80'             Sets the conditional ENQ    @T1C 03348000
*                                      flag on as specified by the      03349000
*                                      ENQ macro parameter              03350000
.LH0064T ANOP                                                           03351000
.*                                                                 @T1A 03351100
.*                                                                 @T1A 03351200
.******************************************************************@T1A 03351300
.** Generates code in modified source text to set the ONEUSE       @T1A 03351400
.** flag on if it was requested.                                   @T1A 03351500
.******************************************************************@T1A 03351600
.*                                                                 @T1A 03351700
         AIF   ('&ONEUSE' NE 'YES').LH0065T IF ONEUSE is indicated @T1A 03351800
         OI    24(1),X'40'             Sets the ONEUSE flag bit on @T1A 03351900
*                                      as specified by the ONEUSE  @T1A 03352000
*                                      macro parameter             @T1A 03352100
.LH0065T ANOP                                                      @T1A 03352200
.*                                                                 @T1A 03352300
.*                                                                 @T1A 03352400
.******************************************************************@T1A 03352500
.** Generates code in modified source text to set the REUSE        @T1A 03352600
.** flag on if it was requested.                                   @T1A 03352700
.******************************************************************@T1A 03352800
.*                                                                 @T1A 03352900
         AIF   ('&REUSE' NE 'YES').LH0066T IF REUSE is indicated   @T1A 03353000
         OI    24(1),X'20'             Sets the REUSE flag bit on  @T1A 03353100
*                                      as specified by the REUSE   @T1A 03353200
*                                      macro parameter             @T1A 03353300
.LH0066T ANOP                                                      @T1A 03353400
.*                                                                      03353500
.*                                                                      03353600
.********************************************************************** 03354000
.**  Returns from the FILL_IN_PARM_LIST routine. Branches to the     ** 03355000
.**  label just after the branch to this routine.                    ** 03356000
.********************************************************************** 03357000
.*                                                                      03358000
.LH0066  ANOP                                                           03359000
         AGO   .LH0060B                     Return to EXEC_FORM.        03360000
.*                                                                      03361000
.********************************************************************** 03362000
.**                                                                  ** 03363000
.** PROCEDURE NAME: INVOKE_DYNAMIC_OUTPUT                            ** 03364000
.**                                                                  ** 03365000
.** FUNCTION: Generates code in modified source text to establish    ** 03366000
.**           linkage to the parameter list and to invoke Dynamic    ** 03367000
.**           OUTPUT.                                                ** 03368000
.**                                                                  ** 03369000
.**           1. The first 4 bytes of the list form declare          ** 03370000
.**              named by MF(2) are used as the pointer              ** 03371000
.**              to the SVC parameter list. The SVC parameter        ** 03372000
.**              list is the remaining portion of the                ** 03373000
.**              list form declare.                                  ** 03374000
.**                                                                  ** 03375000
.**              Generates code to set the pointer to the            ** 03376000
.**              SVC parameter list.                                 ** 03377000
.**                                                                  ** 03378000
.**           2. Generates code to set register 1 to point           ** 03379000
.**              to the pointer to the SVC parameter list.           ** 03380000
.**                                                                  ** 03381000
.**           3. Generates code to set register 1 to the             ** 03382000
.**              SVC function code '33'D.                            ** 03383000
.**                                                                  ** 03384000
.**           4. Generates code to invoke SVC 109.                   ** 03385000
.**                                                                  ** 03386000
.** ENTRY: From EXEC_FORM                                            ** 03387000
.**                                                                  ** 03388000
.** INPUT:  Second argument of MF parameter, parameter list name     ** 03389000
.**                                                                  ** 03390000
.** OUTPUT: Generates answer text assignment statements and          ** 03391000
.**         accompanying comments to establish linkage to the        ** 03392000
.**         parameter list and to invoke Dynamic OUTPUT.             ** 03393000
.**                                                                  ** 03394000
.** EXIT: To EXEC_FORM                                               ** 03395000
.**                                                                  ** 03396000
.** ROUTINES CALLED: None                                            ** 03397000
.**                                                                  ** 03398000
.********************************************************************** 03399000
.*                                                                      03400000
.LH0070A       ANOP                      Entry point of routine         03401000
.*                                                                      03402000
.*                                                                      03403000
.********************************************************************** 03404000
.** The first 4 bytes of the list form declare named by MF(2) are    ** 03405000
.** used as the pointer to the SVC parameter list. The SVC           ** 03406000
.** parameter list is the remaining portion of the list form         ** 03407000
.** declare.                                                         ** 03408000
.**                                                                  ** 03409000
.** Generates code to set the pointer to the SVC parameter list,     ** 03410000
.** and turn the pointer's high order bit on.                        ** 03411000
.**                                                                  ** 03412000
.********************************************************************** 03413000
.*                                                                      03414000
         LA    0,4                                                      03415000
         LR    15,1                                                     03416000
         AR    15,0                    Sets register 15 to the address  03417000
*                                      of the SVC parameter list        03418000
         ST    15,0(,1)                Sets the parameter list pointer  03419000
*                                      field to the address of the      03420000
*                                      SVC parameter list               03421000
         OI    0(1),X'80'              Indicates end of the input       03422000
*                                      parameter list                   03423000
.*                                                                      03424000
.*                                                                      03425000
.********************************************************************** 03426000
.** Generates code in modified source text to assign the SVC         ** 03427000
.** function code to register 15.                                    ** 03428000
.********************************************************************** 03429000
.*                                                                      03430000
         LA    15,33                   Sets the SVC 109 routing code    03431000
.*                                                                      03432000
.*                                                                      03433000
.*********************************************************************  03434000
.** Generate instruction to invoke the SVC                          **  03435000
.*********************************************************************  03436000
.*                                                                      03437000
         SVC   109                     Invokes Dynamic OUTPUT SVC       03438000
.*                                                                      03439000
.*                                                                      03440000
.********************************************************************** 03441000
.** Returns from the INVOKE_DYANMIC_OUTPUT routine. Branches to the  ** 03442000
.** label just after the branch to this routine                      ** 03443000
.********************************************************************** 03444000
.*                                                                      03445000
         AGO   .LH0070B                Return from INVOKE_DYNAMIC_      03446000
.*                                     OUTPUT                           03447000
.*                                                                      03448000
.*                                                                      03449000
.********************************************************************** 03450000
.**                                                                  ** 03451000
.** PROCEDURE NAME: RETURN_FIELDS                                    ** 03452000
.**                                                                  ** 03453000
.** FUNCTION: Generates code to fill in the Dynamic OUTPUT           ** 03454000
.**           return fields on return from the SVC.                  ** 03455000
.**                                                                  ** 03456000
.** ENTRY: From EXEC_FORM                                            ** 03457000
.**                                                                  ** 03458000
.** INPUT: Macro keywords: SYSNAME                                   ** 03459000
.**                                                                  ** 03460000
.** OUTPUT:   Generates code to fill in the Dynamic OUTPUT           ** 03461000
.**           return fields on return from the SVC.                  ** 03462000
.**                                                                  ** 03463000
.** EXIT: To EXEC_FORM                                               ** 03464000
.**                                                                  ** 03465000
.** ROUTINES BRANCHED TO: none                                       ** 03466000
.**                                                                  ** 03467000
.********************************************************************** 03468000
.*                                                                      03469000
.LH0080A ANOP                                  Entry point to routine   03470000
.*                                                                      03471000
.*                                                                      03472000
.********************************************************************** 03473000
.** Sets the macro variable &NAMEADR to the location of the          ** 03474000
.** name field in the parameter list.                                ** 03475000
.********************************************************************** 03476000
.*                                                                      03477000
         AIF   ('&MF(2)'(1,1) EQ '(').LH0081T IF register form parm     03478000
         AGO   .LH0081E                                                 03479000
.*                                                                      03480000
.LH0081T ANOP                                 THEN, register form       03481000
&REG     SETC  '&MF(2)'(2,K'&MF(2)-2)         Get register from         03482000
.*                                            within double parens.     03483000
.*                                            K is the count of         03484000
.*                                            characters in the parm    03485000
.*                                                                      03486000
&NAMEADR SETC  '12(&REG)'                     Sets D2(B2) address       03487000
.*                                            form for the name field   03488000
         AGO   .LH0081B                                                 03489000
.*                                                                      03490000
.LH0081E ANOP                                 ELSE, not register form   03491000
.*                                                                      03492000
&NAMEADR SETC  '&MF(2)+12'                    Sets symbolic address     03493000
.*                                            form for the name field   03494000
.LH0081B ANOP                                 End of IF - THEN - ELSE   03495000
.*                                                                      03496000
.*                                                                      03497000
.********************************************************************** 03498000
.** Generates code in modified source text to return the system      ** 03499000
.** generated name from  the parameter list if the SYSNAME macro     ** 03500000
.** parameter was specified.                                         ** 03501000
.********************************************************************** 03502000
.*                                                                      03503000
.LH0083  AIF   (0 EQ N'&SYSNAME).LH0084      Skip if &SYSNAME is not    03504000
.*                                           specified                  03505000
         AIF   ('&SYSNAME'(1,1) EQ '(').LH0083T IF register form parm   03506000
         AGO   .LH0083E                                                 03507000
.*                                                                      03508000
.LH0083T ANOP                                 THEN, register form       03509000
&REG     SETC  '&SYSNAME'(2,K'&SYSNAME-2)     Get register from         03510000
.*                                            within double parens.     03511000
.*                                            K is the count of         03512000
.*                                            characters in the parm    03513000
         MVC   0(8,&REG),&NAMEADR      Returns the system generated     03514000
*                                      OUTPUT descriptor name as        03515000
*                                      specified by the SYSNAME macro   03516000
*                                      parameter                        03517000
         AGO   .LH0083B                                                 03518000
.*                                                                      03519000
.LH0083E ANOP                                 ELSE, not register form   03520000
         MVC   &SYSNAME.(8),&NAMEADR   Returns the system generated     03521000
*                                      OUTPUT descriptor name as        03522000
*                                      specified by the SYSNAME macro   03523000
*                                      parameter                        03524000
.LH0083B ANOP                                 End of IF - THEN - ELSE   03525000
.*                                                                      03526000
.*                                                                      03527000
.********************************************************************** 03528000
.** Returns from the RETURN_FIELDS routine. Branches to the          ** 03529000
.** label just after the branch to this routine                      ** 03530000
.********************************************************************** 03531000
.*                                                                      03532000
.LH0084  ANOP                                                           03533000
         AGO   .LH0080B                Return from RETURN_FIELDS        03534000
.*                                     routine                          03535000
.*                                                                      03536000
         MEND                                                           03537000
**/                                                                     03538000
*%DOADD3: ;                                                             03539000
