*/* Start of Specifications for BLSRSASY *****************************/ 00050000
*/*                                                                  */ 00355800
*/* $MAC(BLSRSASY) COMP(SC132) PROD(HBB7703): Describe SA record     */ 00358700
*/*                                                                  */ 00361600
*/* PROPRIETARY STATEMENT:                                           */ 00361700
*/*                                                                  */ 00361800
*/*  LICENSED MATERIALS - PROPERTY OF IBM                            */ 00362100
*/*  THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     */ 00362200
*/*  5647-A01 (C) COPYRIGHT IBM CORP. 1988, 2000                     */ 00362300
*/*                                                                  */ 00362400
*/*  STATUS = HBB7703                                                */ 00362500
*/*                                                                  */ 00362600
*/* External classification: PI                                      */ 00362700
*/* End of external classification:                                  */ 00362800
*/*                                                                  */ 00362900
*/* ================================================================ */ 00363000
*/*                                                                  */ 00363100
*/* Descriptive Name: IPCS Storage Address Record                    */ 00363200
*/*   Acronym:    BLSRSASY                                           */ 00363300
*/* Macro Name: BLSRSASY                                             */ 00363400
*/* Dsect Name: defined by invoker                                   */ 00363500
*/* Component:  IPCS (SC132)                                         */ 00363600
*/*                                                                  */ 00364200
*/* Eye Catcher: SA                                                  */ 00364400
*/* Offset:      0                                                   */ 00364600
*/* Length:      2                                                   */ 00364800
*/*                                                                  */ 00365000
*/* STORAGE ATTRIBUTES:                                              */ 00365200
*/* Main Storage: Pageable                                           */ 00365400
*/* Virtual Storage: Yes                                             */ 00365600
*/* Auxiliary Storage: N/A                                           */ 00365800
*/* Subpool: N/A                                                     */ 00366000
*/* Key: 8                                                           */ 00366200
*/* Data Space: No                                                   */ 00366400
*/* Residency: LOC(ANY)                                              */ 00366600
*/* Size:                                                            */ 00366700
*/*   ABITS(31) - 256-3072 bytes                                     */ 00366800
*/*   ABITS(64) - 192-3008 bytes                                     */ 00366900
*/*                                                                  */ 00367200
*/* Created by: Invokers of the IPCS storage map service             */ 00367400
*/* Deleted by: Invokers of the IPCS storage map service             */ 00367600
*/* Pointed to by: XMSPSAR (macro BLSRXMSP)                          */ 00367800
*/* Serialization: None                                              */ 00368000
*/*                                                                  */ 00368100
*/* FUNCTION= Define the structure of a dump directory storage       */ 00368200
*/* address (SA) record.                                             */ 00368300
*/*                                                                  */ 00368400
*/* Method of Access:                                                */ 00368500
*/*   Assembler:                                                     */ 00368600
*/*     name BLSRSASY ABITS=<31|64>,  Default is 31                  */ 00368700
*/*                   DSECT=<YES|NO>  Default is YES                 */ 00368800
*/*                                                                  */ 00369000
*/*   PL/X:                                                          */ 00369200
*/*     BLSRSASY MF(LIST,name,<COMPLETE> scope-and-storage-class);   */ 00369400
*/*                                                                  */ 00370300
*/* ================================================================ */ 00379000
*/*                                                                  */ 00387700
*/* CHANGE ACTIVITY=                                                 */ 00387800
*/*                                                                  */ 00387900
*/*   Products=                                                      */ 00388000
*/* $L0= MVSIPCS,EIP1102,78001,PDE1: MVS IPCS initial release code   */ 00388100
*/* $L1= MAPMGMT,HIP2102,78300,PDE1: Improved storage map mgmt       */ 00388200
*/* $L2= IPCSENH,HBB3310,86346,PDG7: Storage map service             */ 00388300
*/*                                                                  */ 00388400
*/* ---------------------------------------------------------------- */ 00388600
*/*                                                                  */ 00388800
*/*   Hardware=                                                      */ 00389000
*/* $H1= 64BIT,HBB7703,98105,PDE1: Support 64-bit addressing         */ 00389200
*/*                                                                  */ 00389400
*/* ---------------------------------------------------------------- */ 00389600
*/*                                                                  */ 00389800
*/*   Design changes=                                                */ 00390000
*/* $D1= MACRO,HIP2102,79054,PDE1: Reduce size of listings           */ 00390200
*/* $D2= QUALITY,HIP2102,82026,PDE1: Improve comments, remarks       */ 00390400
*/*                                                                  */ 00390600
*/* ---------------------------------------------------------------- */ 00390800
*/*                                                                  */ 00391000
*/*   PTMs=                                                          */ 00391200
*/* $P1= PC40529,HBB3310,86346,PDG7: Macro needs to be bilingual     */ 00391400
*/* $P2= PC40306,HBB3310,87034,PDE1: Use control block models to     */ 00391600
*/*      supplement storage map processing.                          */ 00391800
*/* $P3= PEO2688,HBB4410,89296,PDAX: Add missing semicolon           */ 00392000
*/* $P4= PUX9999,HBB6605,97128,PDE1: Reduce scan overhead            */ 00392200
*/*                                                                  */ 00392400
*/* ---------------------------------------------------------------- */ 00392600
*/*                                                                  */ 00392800
*/*   Maintenance= none                                              */ 00393000
*/*                                                                  */ 00393200
*/*** End of Specifications for BLSRSASY ****************************** 00393400
         MACRO                                                          00393600
&P       BLSRSASY &DSECT=YES,&ABITS=31                             @H1C 00393800
         GBLA  &BLSABIT           ABIT                             @H1A 00394000
         GBLB  &ESASY             Blurb produced once in assembly  @L2A 00394200
         GBLC  &BLSADC            Data type                        @H1A 00394400
         BLSABITS ABITS=&ABITS.   Process ABITS option             @H1A 00394600
         IEZBITS ,                Define symbolic bits             @L2P 00395700
         AIF   ('&DSECT' EQ 'NO').L010 No DSECT statement          @L2P 00397300
&P       DSECT ,                  IPCS Storage Address Record      @L2P 00398900
         AGO   .L020              Define structure of record       @L2P 00400500
.L010    ANOP  ,                  No DSECT statement               @L2P 00402100
&P       DS    0D                 IPCS Storage Address Record      @L2P 00403700
.L020    ANOP  ,                  Define structure of record       @L2P 00405300
&P.000   DS    0C                 Begin BLSRSASY               #MD99125 00406900
&P.RID   DC    C'SA'              Record type==>SA                 @L2A 00408500
         DC    XL6'00'                                             @L2P 00410100
         AIF   (&ESASY).L030      Blurb produced once in assembly  @L2A 00411700
*-----------------------------------------------------------------      00413300
* A Storage Address record defines one storage map record, associating  00414900
* it with a contiguous block of storage in an address space.            00416500
*-----------------------------------------------------------------      00418100
.L030    ANOP  ,                  Blurb produced once in assembly  @L2P 00419700
&P.RDX   DC    F'0'               Data set index                   @L2P 00421300
&P.AS    BLSRDATS DSECT=NO        Address space identifier         @L2P 00422900
&P.LAD   DC    &BLSADC.           Logical address                  @H1C 00424500
&P.DT    BLSRDATT DSECT=NO        Storage characteristics          @L2A 00426100
&P.ELK   DS    0C                 End of logical key               @L2P 00427700
&P.LKL   EQU   &P.ELK-&P.000      Logical key length               @L2P 00429300
         DC    XL2'00'            Reserved                         @L2A 00430900
&P.F     BLSRDATC DSECT=NO,ABITS=&BLSABIT Storage characteristics  @H1C 00432500
         AIF   (&ESASY).L040      Blurb produced once in assembly  @L2P 00434100
*-----------------------------------------------------------------      00435700
* Scan results--Flags, return codes, and processing summary             00437300
*-----------------------------------------------------------------      00438900
.L040    ANOP  ,                  Blurb produced once in assembly  @L2P 00440500
&P.SF    DS    0XL8               Scan Flags                       @L2A 00442100
         DC    XL1'00'                                                  00443700
&P.SF1   EQU   BIT0               Scan started                     @L2A 00445300
&P.SF9   EQU   BIT1               Scan completed                   @L2A 00446900
&P.SFI   EQU   BIT2               Initial analysis error           @L2A 00448500
&P.SFS   EQU   BIT3               Storage required for diagnostic(s)   *00450100
                                                                   @L2A 00451700
&P.SFA   EQU   BIT4               Storage attributes unknown       @L2A 00453300
&P.SFM   EQU   BIT5               Use model - no scan exit         @P2A 00454100
&P.SFF   EQU   BIT6               Find routine exists              @H1A 00454200
&P.SFG   EQU   BIT7               Scan exit accepts ABITS(64) API  @H1A 00454300
         AIF   (&BLSABIT EQ 64).L041 ABITS=64                      @H1A 00454400
         DC    XL7'00'            Reserved                         @L2P 00454700
         AGO   .L042              Common code                      @H1A 00455000
.L041    ANOP  ,                  ABITS=64                         @H1A 00455300
         DC    XL3'00'            Reserved                         @H1A 00455600
.L042    ANOP  ,                  Common code                      @H1A 00455900
&P.GMT   DS    XL8                TOD clock value when scan was last   *00456500
                                  performed                        @L2A 00458100
&P.PGV   DC    CL8' '             Scan program name or model name  @P2C 00459700
&P.SRC   DC    FL1'0'             Scan result code--0=>Informational,  *00461300
                                  4=>Warning, 8=>Error, 12=>Serious    *00462900
                                                                   @L2A 00464500
         AIF   (&BLSABIT EQ 64).L044 ABITS=64                      @H1A 00464800
         DC    XL16'00'           Reserved                         @H1A 00465100
&P.RST   DC    AL1(&P.RST&BLSABIT) BLSRSASY subtype                @H1A 00465400
&P.RST31 EQU   0                  BLSRSASY subtype - ABITS=31      @H1A 00465700
&P.RST64 EQU   1                  BLSRSASY subtype - ABITS=64      @H1A 00466000
         DC    XL84'00'           Reserved                         @H1C 00466300
         AGO   .L046              Common code                      @H1A 00466600
.L044    ANOP  ,                  ABITS=64                         @H1A 00466900
&P.RST   DC    AL1(&P.RST&BLSABIT) BLSRSASY subtype                @H1A 00467200
&P.RST31 EQU   0                  BLSRSASY subtype - ABITS=31      @H1A 00467500
&P.RST64 EQU   1                  BLSRSASY subtype - ABITS=64      @H1A 00467800
         DC    XL20'00'           Reserved                         @H1A 00468100
.L046    AIF   (&ESASY).L050      Blurb produced once in assembly  @L2P 00468400
*-----------------------------------------------------------------      00469300
* Scan processing details--Length(0:2816) characters--structured by     00470900
* each scan exit to match its unique requirements                       00472500
*-----------------------------------------------------------------      00474100
&ESASY   SETB  1                  Blurb produced once in assembly  @L2P 00475700
.L050    ANOP  ,                  Blurb produced once in assembly  @L2P 00477300
&P.C     DS    0C                 Scan routine data                @L2P 00478900
&P.CL    DC    H'0'               Length of remark text            @L2P 00480500
&P.LTL   EQU   0                  Minimum remark text length       @L2P 00482100
&P.HTL   EQU   2816               Maximum remark text length       @L2A 00483700
&P.CT    DC    (&P.HTL)XL1'00'    Scan routine data                @L2P 00485300
&P.999   DS    0C                 End BLSRSASY                 #MD99125 00486900
&P.LRL   EQU   &P.CT-&P.000       Minimum record length            @L2P 00488500
&P.HRL   EQU   &P.999-&P.000      Maximum record length            @L2P 00490100
         MEND  ,                  End assembler macro BLSRSASY   @L2P*/ 00491700
*                                                                       00493300
*%BLSRSASY:                         /* Storage address records   @H1C*/ 00494900
*   MACRO KEYS(ABITS,BUFFER,MF);                                        00496500
*                                                                       00498100
*/* ================================================================ */ 00524000
*/* Define External Macro-Variables                                  */ 00550000
*/* ================================================================ */ 00600000
*                                                                       00750000
*   DECLARE                         /* EXTERNAL MACRO VARIABLES      */ 00800000
*     BLSABIT  FIXED EXTERNAL,      /* ABITS                     @H1A*/ 00808300
*     BLSADC   CHARACTER EXTERNAL,  /* Pointer data type         @H1A*/ 00816600
*     ELSRSASY CHARACTER EXTERNAL,  /* BLSRSASY GLOBAL DATA      @D1A*/ 00825000
*     EHBENDCHAR CHARACTER EXTERNAL, /* FINAL PUNCTUATION            */ 00850000
*     EHBBLRPENDESS CHARACTER EXTERNAL, /* DEFERRED MACRO REQUESTS   */ 00900000
*     EHBLVL1  CHARACTER EXTERNAL,  /* FIRST LEVEL NUMBER            */ 00950000
*     EHBLVL2  CHARACTER EXTERNAL,  /* SECOND LEVEL NUMBER           */ 01000000
*     EHBLVL3  CHARACTER EXTERNAL,  /* THIRD LEVEL NUMBER            */ 01050000
*     EHBMF1   CHARACTER EXTERNAL,  /* MACRO FORM                    */ 01100000
*     EHBMF2   CHARACTER EXTERNAL,  /* PREFIX CHARACTERS             */ 01150000
*     EHBMF3   CHARACTER EXTERNAL,  /* SCOPE/STORAGE CLASS           */ 01200000
*     EHBMF3A  CHARACTER EXTERNAL,  /* COMPLETE INITIALIZATION FLAG  */ 01250000
*     BLSRENDDECLARE CHARACTER EXTERNAL, /* DEFERRED DECLARATIONS    */ 01300000
*     EHBCOL1  FIXED EXTERNAL,      /* FIRST INDENTATION COLUMN      */ 01350000
*     EHBCOL2  FIXED EXTERNAL,      /* SECOND INDENTATION COLUMN     */ 01400000
*     EHBCOL3  FIXED EXTERNAL,      /* THIRD INDENTATION COLUMN      */ 01450000
*     EHBRC    FIXED EXTERNAL;      /* MACRO RETURN CODE             */ 01500000
*   DEACTIVATE ELSRSASY,BLSRENDDECLARE; /* Prevent accidents     @D2C*/ 01520000
*                                                                       01530000
*/* ================================================================ */ 01545000
*/* Define Internal Macro-Variables                                  */ 01560000
*/* ================================================================ */ 01580000
*                                                                       01600000
*   DECLARE                         /* INTERNAL MACRO VARIABLES      */ 01950000
*     CENDCHAR CHARACTER INTERNAL,  /* FINAL PUNCTUATION             */ 02000000
*     CLVL2    CHARACTER INTERNAL,  /* SECOND LEVEL NUMBER           */ 02050000
*     CLVL3    CHARACTER INTERNAL,  /* THIRD LEVEL NUMBER            */ 02100000
*     CMF1     CHARACTER INTERNAL,  /* MACRO FORM                    */ 02150000
*     CMF2     CHARACTER INTERNAL,  /* PREFIX CHARACTERS             */ 02200000
*     CMF3A    CHARACTER INTERNAL,  /* COMPLETE INITIALIZATION FLAG  */ 02250000
*     CQCOMPLETE CHARACTER INTERNAL, /* LITERAL                      */ 02300000
*     CQINITIAL CHARACTER INTERNAL, /* LITERAL                       */ 02350000
*     FCOL2    FIXED INTERNAL,      /* SECOND INDENTATION COLUMN     */ 02400000
*     FCOL3    FIXED INTERNAL,      /* THIRD INDENTATION COLUMN      */ 02450000
*     FRC      FIXED INTERNAL,      /* MACRO RETURN CODE             */ 02500000
*     F1       FIXED INTERNAL;      /* UTILITY VARIABLE              */ 02550000
*   DEACTIVATE CENDCHAR,CLVL2,CLVL3,CMF1,CMF2,CMF3A,CQCOMPLETE,         02600000
*       CQINITIAL,FCOL2,FCOL3,FRC,F1; /* Prevent accidents       @D2C*/ 02650000
*   CQINITIAL = ' INITIAL(';        /* LITERAL                       */ 03250000
*   CQCOMPLETE = 'COMPLETE';        /* LITERAL                       */ 03300000
*   ANSWER('?'||MACLABEL||'BLRMF('||MF||') FORMS(L,S);');               03700000
*   CENDCHAR = EHBENDCHAR;          /* FINAL PUNCTUATION             */ 03750000
*   EHBENDCHAR = ',';               /* FINAL PUNCTUATION             */ 03800000
*   CLVL2 = EHBLVL2;                /* SECOND LEVEL NUMBER           */ 03850000
*   CLVL3 = EHBLVL3;                /* THIRD LEVEL NUMBER            */ 03900000
*   CMF1 = EHBMF1;                  /* MACRO FORM                    */ 03950000
*   CMF2 = EHBMF2;                  /* PREFIX CHARACTERS             */ 04000000
*   CMF3A = EHBMF3A;                /* COMPLETE INITIALIZATION FLAG  */ 04050000
*   FCOL2 = EHBCOL2;                /* SECOND INDENTATION COLUMN     */ 04100000
*   FCOL3 = EHBCOL3;                /* THIRD INDENTATION COLUMN      */ 04150000
*   FRC = EHBRC;                    /* MACRO RETURN CODE             */ 04200000
*   ANSWER('?BLSABITS'||ABITS||';'); /* Process ABITS            @H1A*/ 04212500
*   IF BLSABIT = 64 THEN            /* ABITS(64)                 @H1A*/ 04225000
*                                                                       04237500
*/*   -------------------------------------------------------------- */ 04250000
*/*   Define constants for an ABITS=64 record that differ from the   */ 04262500
*/*   ones for ABITS=31 records.                                     */ 04275000
*/*   -------------------------------------------------------------- */ 04287500
*                                                                       04300000
*     BLSRENDDECLARE = BLSRENDDECLARE || CMF2 || /*              @H1C*/ 04312500
*         'LKL UNSIGNED BINARY CONSTANT(70),/*Logical key length*/' ||  04325000
*         CMF2 ||                                                       04337500
*         'LRL UNSIGNED BINARY CONSTANT(192),/*Minimum record length*/' 04350000
*         || CMF2 ||                                                    04362500
*         'HRL UNSIGNED BINARY CONSTANT(3008),/*Maximum record length*/'04375000
*       ;                                                               04387500
*   ELSE                            /* ABITS(31)                 @H1A*/ 04400000
*                                                                       04412500
*/*   -------------------------------------------------------------- */ 04425000
*/*   Define constants for an ABITS=31 record that differ from the   */ 04437500
*/*   ones for ABITS=64 records.                                     */ 04450000
*/*   -------------------------------------------------------------- */ 04462500
*                                                                       04475000
*     BLSRENDDECLARE = BLSRENDDECLARE || CMF2 ||                        04487500
*         'LKL UNSIGNED BINARY CONSTANT(66),/*Logical key length*/' ||  04500000
*         CMF2 ||                                                       04512500
*         'LRL UNSIGNED BINARY CONSTANT(256),/*Minimum record length*/' 04525000
*         || CMF2 ||                                                    04537500
*         'HRL UNSIGNED BINARY CONSTANT(3072),/*Maximum record length*/'04550000
*       ;                                                               04562500
*                                                                       04575000
*/* ================================================================ */ 04587500
*/* Define constants common to ABITS=31 and ABITS=64 records.        */ 04600000
*/* ================================================================ */ 04612500
*                                                                       04625000
*   BLSRENDDECLARE = BLSRENDDECLARE || CMF2 || /*                @H1C*/ 04637500
*       'LTL UNSIGNED BINARY CONSTANT(0),/*Minimum text length*/' ||    04650000
*       CMF2 ||                                                         04700000
*       'HTL UNSIGNED BINARY CONSTANT(2816),/*Maximum text length*/' || 04750000
*       CMF2 ||                                                         04800000
*'RST31 UNSIGNED BINARY CONSTANT(0),/*BLSRRASY subtype - ABITS(31)*/'   04850000
*       || CMF2 ||                                                      04900000
*'RST64 UNSIGNED BINARY CONSTANT(1),/*BLSRRASY subtype - ABITS(64)*/';  04950000
*   IF CMF1 = 'LIST' THEN           /* LIST FORM                     */ 05250000
*     DO;                           /* LIST FORM                     */ 05300000
*       ANSWER('?BLSR002;');                                            05350000
*       ANSWER('DECLARE/*BLSRSASY #MD99125*/') COLUMN(5); /*     @H1C*/ 05400000
*     END;                          /* LIST FORM                     */ 05800000
*   ELSE                            /* SUBLIST FORM                  */ 05850000
*     DO;                           /* SUBLIST FORM                  */ 05900000
*       F1 = INDEX(EHBBLRPENDESS,'BLSR002;');                           05950000
*       IF F1 = 0 THEN                                                  06000000
*         EHBBLRPENDESS = EHBBLRPENDESS || 'BLSR002;';                  06050000
*     END;                          /* SUBLIST FORM                  */ 06100000
*                                                                       06107100
*/* ================================================================ */ 06114200
*/* Define the structures of ABITS=31 and ABITS=64 records           */ 06121300
*/* beginning with the logical key of the records.                   */ 06128400
*/* ================================================================ */ 06135500
*                                                                       06142600
*   ANSWER(EHBLVL1||CMF2||' BOUNDARY(DWORD)'||EHBMF3||',/*BLSRSASY'||   06150000
*       MACLIST||' '||MACKEYS||'*/') COLUMN(EHBCOL1);                   06200000
*   ANSWER('?BLSURISY(SA);');       /*                           @P3C*/ 06250000
*   IF CMF1 = 'LIST' THEN           /* LIST FORM                     */ 06300000
*     IF INDEX(ELSRSASY,',BLURB') = 0 THEN /* PRODUCE BLURB      @D1A*/ 06350000
*       ANSWER('/*'||REPEAT('-',56)||' #MD99125*/ /* A Storage '||      06400000
*'address record identifies a block known to IPCS        */ /*'||REPEAT 06450000
*           ('-',65)||'*/') COLUMN(2); /*                        @H1C*/ 06500000
*   ANSWER(CLVL2||CMF2||'RDX UNSIGNED BINARY(32)') COLUMN(FCOL2);       06600000
*   IF CMF3A = CQCOMPLETE THEN                                          06650000
*     ANSWER(CQINITIAL||'0)');                                          06700000
*   ANSWER(',/*Data set index*/');  /*                           @D2C*/ 06750000
*   ANSWER('?BLSRDATS MF(SUBLIST,'||CMF2||'AS,'||CMF3A||','||CLVL2||    06800000
*       ');       ');               /* IPCS ADDRESS SPACE NAME   @P1C*/ 06850000
*   ANSWER(CLVL2||CMF2||'LAD '||BLSADC) COLUMN(FCOL2); /*        @H1C*/ 06900000
*   IF CMF3A = CQCOMPLETE THEN                                          06950000
*     IF BLSABIT = 31 THEN          /* ABITS(31)                 @H1A*/ 06970000
*       ANSWER(CQINITIAL||'0)');                                        06990000
*     ELSE                          /* ABITS(64)                 @H1A*/ 07010000
*       ANSWER(CQINITIAL||'''0000000000000000''X)');                    07030000
*   ANSWER(',/*Logical address of the area*/'); /*               @D2C*/ 07050000
*   ANSWER('?BLSRDATT MF(SUBLIST,'||CMF2||'DT,'||CMF3A||','||CLVL2||    07100000
*       ');       ');               /* IPCS DATA TYPE            @P1C*/ 07150000
*   ANSWER(CLVL2||CMF2||'ELK CHARACTER(0),/*End of logical key*/')      07200000
*       COLUMN(FCOL2);              /*                           @D2C*/ 07250000
*                                                                       07258300
*/* ================================================================ */ 07266600
*/* Continue with the body of the records.                           */ 07274900
*/* ================================================================ */ 07283200
*                                                                       07291500
*   ANSWER(CLVL2||'* BIT(16) BOUNDARY(HWORD)') COLUMN(FCOL2);           07300000
*   IF CMF3A = CQCOMPLETE THEN                                          07350000
*     ANSWER(CQINITIAL||'''00''X)');                                    07400000
*   ANSWER(',');                                                        07450000
*   ANSWER('?BLSRDATC MF(SUBLIST,'||CMF2||'F,'||CMF3A||','||CLVL2||     07487500
*       ') ABITS('||CHAR(BLSABIT)||');'); /* Storage characteristics    07525000
*                                                                @H1C*/ 07562500
*   IF CMF1 = 'LIST' THEN           /* LIST FORM                     */ 07600000
*     IF INDEX(ELSRSASY,',BLURB') = 0 THEN /* PRODUCE BLURB      @D1A*/ 07650000
*       ANSWER('/*'||REPEAT('-',65)||'*/ /* Scan results--Flags, return 07700000
*code, and processing summary         */ /*'||REPEAT('-',65)||'*/')     07750000
*           COLUMN(2);              /*                           @P1C*/ 07800000
*   IF BLSABIT = 31 THEN            /* ABITS(31)                 @H1A*/ 07825000
*     ANSWER(CLVL2||CMF2||'SF BIT(64) BOUNDARY(DWORD)') COLUMN(FCOL2);  07850000
*   ELSE                            /* ABITS(64)                 @H1A*/ 07875000
*     ANSWER(CLVL2||CMF2||'SF BIT(32) BOUNDARY(DWORD,5)') COLUMN(FCOL2) 07900000
*       ;                                                               07925000
*   IF CMF3A = CQCOMPLETE THEN                                          07950000
*     ANSWER(CQINITIAL||'''00''X)');                                    08000000
*   ANSWER(',/*Scan flags*/');      /*                           @D2C*/ 08037500
*   ANSWER(CLVL3||CMF2||'SF1 BIT(1),/*Scan started*/') COLUMN(FCOL2);   08075000
*                                   /*                           @D2C*/ 08112500
*   ANSWER(CLVL3||CMF2||'SF9 BIT(1),/*Scan completed*/') COLUMN(FCOL2); 08150000
*                                   /*                           @D2C*/ 08187500
*   ANSWER(CLVL3||CMF2||'SFI BIT(1),/*Initial analysis error*/') COLUMN 08225000
*       (FCOL2);                    /*                           @D2C*/ 08262500
*   ANSWER(CLVL3||CMF2||                                                08300000
*       'SFS BIT(1),/*Storage required for diagnostic(s)*/') COLUMN(    08328500
*       FCOL2);                     /*                           @D2C*/ 08357000
*   ANSWER(CLVL3||CMF2||'SFA BIT(1),/*Storage attributes unknown*/')    08385500
*       COLUMN(FCOL2);              /*                           @D2C*/ 08414000
*   ANSWER(CLVL3||CMF2||'SFM BIT(1),/*Use model - no scan exit*/')      08428200
*       COLUMN(FCOL2);              /*                           @P2A*/ 08442400
*   ANSWER(CLVL3||CMF2||'SFF BIT(1),/*Find routine exists*/') COLUMN(   08449500
*       FCOL2);                     /*                           @P4A*/ 08456600
*   ANSWER(CLVL3||CMF2||'SFG BIT(1),/*Scan exit expects ABITS(64) API*/'08461300
*       ) COLUMN(FCOL2);            /*                           @H1A*/ 08466000
*   IF BLSABIT = 31 THEN            /* ABITS(31)                 @H1A*/ 08470900
*     ANSWER(CLVL3||'* BIT(56),') COLUMN(FCOL2); /*              @L1C*/ 08478100
*   ELSE                            /* ABITS(64)                 @H1A*/ 08485300
*     ANSWER(CLVL3||'* BIT(24),') COLUMN(FCOL2); /*              @L1C*/ 08492500
*   ANSWER(CLVL2||CMF2||'GMT BIT(64) BOUNDARY(DWORD)') COLUMN(FCOL2);   08500000
*   IF CMF3A = CQCOMPLETE THEN                                          08550000
*     ANSWER(CQINITIAL||'''00''X)');                                    08600000
*   ANSWER(',/*TOD clock value when scan was last performed*/'); /*     08633300
*                                                                @D2C*/ 08666600
*   ANSWER(CLVL2||CMF2||'PGV CHARACTER(8) BOUNDARY(DWORD)') COLUMN(     08700000
*       FCOL2);                                                         08750000
*   IF CMF3A = CQCOMPLETE THEN                                          08800000
*     ANSWER(CQINITIAL||''' '')');                                      08850000
*   ANSWER(',/*Scan program name or model name*/'); /*           @P2C*/ 08900000
*   ANSWER(CLVL2||CMF2||'SRC UNSIGNED BINARY(8)') COLUMN(FCOL2);        08950000
*   IF CMF3A = CQCOMPLETE THEN                                          09000000
*     ANSWER(CQINITIAL||'0)');                                          09050000
*   ANSWER(',/*Scan result code--0=>Informational, 4=>Warning,          09100000
* 8=>Error, 12=>Serious*/');        /*                           @P1C*/ 09150000
*   IF BLSABIT = 31 THEN            /* ABITS(31)                 @H1A*/ 09155000
*                                                                       09160000
*/*   -------------------------------------------------------------- */ 09165000
*/*   Insert the record subtype byte at the same offset in ABITS=31  */ 09170000
*/*   records as it appears in ABITS=64 records.                     */ 09175000
*/*   -------------------------------------------------------------- */ 09180000
*                                                                       09185000
*     DO;                           /* ABITS(31)                 @H1A*/ 09190000
*       ANSWER(CLVL2||'*(16) BIT(8) BOUNDARY(BYTE)') /*          @H1A*/ 09195000
*           COLUMN(FCOL2);                                              09200000
*       IF CMF3A = CQCOMPLETE THEN  /*                           @H1P*/ 09205000
*         ANSWER(CQINITIAL||'(16)''00''X)'); /*                  @H1A*/ 09210000
*       ANSWER(',');                /*                           @H1P*/ 09215000
*       ANSWER(CLVL2||CMF2||'RST UNSIGNED BINARY(8)') COLUMN(FCOL2);    09220000
*                                   /* BLSRSASY subtype          @H1C*/ 09225000
*       IF CMF3A = CQCOMPLETE THEN  /*                           @H1P*/ 09230000
*         ANSWER(CQINITIAL||'0)');  /* BLSRSASY subtype              */ 09242500
*       ANSWER(',/*BLSRSASY subtype*/'); /*                      @H1A*/ 09255000
*       ANSWER(CLVL2||'*(84) BIT(8) BOUNDARY(BYTE)') /*          @H1A*/ 09260000
*           COLUMN(FCOL2);                                              09265000
*       IF CMF3A = CQCOMPLETE THEN  /*                           @H1P*/ 09270000
*         ANSWER(CQINITIAL||'(84)''00''X)'); /*                  @H1A*/ 09275000
*       ANSWER(',');                /*                           @H1P*/ 09280000
*     END;                          /* ABITS(31)                 @H1A*/ 09285000
*   ELSE                            /* ABITS(64)                 @H1A*/ 09290000
*                                                                       09295000
*/*   -------------------------------------------------------------- */ 09300000
*/*   Insert the record subtype byte at the same offset in ABITS=64  */ 09305000
*/*   records as it appears in ABITS=31 records.                     */ 09310000
*/*   -------------------------------------------------------------- */ 09315000
*                                                                       09320000
*     DO;                           /* ABITS(64)                 @H1A*/ 09325000
*       ANSWER(CLVL2||CMF2||'RST UNSIGNED BINARY(8)') COLUMN(FCOL2);    09330000
*                                   /* BLSRSASY subtype          @H1C*/ 09335000
*       IF CMF3A = CQCOMPLETE THEN  /*                           @H1P*/ 09340000
*         ANSWER(CQINITIAL||'1)');  /* BLSRSASY subtype              */ 09352500
*       ANSWER(',/*BLSRSASY subtype*/'); /*                      @H1A*/ 09365000
*       ANSWER(CLVL2||'*(20) BIT(8) BOUNDARY(BYTE)') /*          @H1A*/ 09370000
*           COLUMN(FCOL2);                                              09375000
*       IF CMF3A = CQCOMPLETE THEN  /*                           @H1P*/ 09380000
*         ANSWER(CQINITIAL||'(20)''00''X)'); /*                  @H1A*/ 09385000
*       ANSWER(',');                /*                           @H1P*/ 09390000
*     END;                          /* ABITS(64)                 @H1A*/ 09395000
*                                                                       09395600
*/* ================================================================ */ 09396200
*/* Allow for the scan routine associated with a structure to save   */ 09396800
*/* up to 2816 bytes of information regarding each instance of the   */ 09397400
*/* structure being scanned.                                         */ 09398000
*/* ================================================================ */ 09398600
*                                                                       09399200
*   IF CMF1 = 'LIST' THEN           /* LIST FORM                     */ 09400000
*     IF INDEX(ELSRSASY,',BLURB') = 0 THEN /* PRODUCE BLURB      @D1A*/ 09440000
*       DO;                         /* PRODUCE BLURB             @D1A*/ 09480000
*         ANSWER('/*'||REPEAT('-',65)||                                 09520000
*'*/ /* Scan processing details--LENGTH(0:2816) characters-'||          09560000
*'-structured   */ /* by each scan exit to match its unique '||         09600000
*             'requirements'||REPEAT(' ',14)||'*/ /*'||REPEAT('-',65)|| 09640000
*             '*/') COLUMN(2);      /*                           @P1C*/ 09680000
*         ELSRSASY = ELSRSASY || ',BLURB'; /* BLURB PRODUCED     @D1A*/ 09720000
*       END;                        /* PRODUCE BLURB             @D1A*/ 09760000
*   IF LENGTH(BUFFER) > 0 THEN                                          09800000
*     ANSWER('?BLRPRM(2816) MF(SUBLIST,'||CMF2||'C,'||CMF3A||','||CLVL2 09850000
*         ||');');                  /* VALIDATION RESULTS        @D1C*/ 09900000
*   ELSE                                                                09950000
*     ANSWER('?BLRPRM LGTH(0) MF(SUBLIST,'||CMF2||'C,'||CMF3A||','||    09990000
*         CLVL2||');');             /* VALIDATION RESULTS        @D1C*/ 10030000
*   ANSWER(CLVL2||CMF2||'999 CHARACTER(0)'||CENDCHAR||                  10070000
*       '/*BLSRSASY #MD99125*/') COLUMN(FCOL2); /*               @H1C*/ 10110000
*   IF CENDCHAR = ';' THEN                                              10150000
*     IF INDEX(EHBBLRPENDESS,'BLSR002;') > 0 THEN                       10200000
*       ANSWER('?BLSR002;');        /* PROCESS DEFERRED DECLARATIONS */ 10250000
*   ANSWER('?BLR003(BLSRSASY,'||CHAR(EHBRC)||');');                     10300000
*   RETURN CODE(EHBRC);                                                 10350000
*   %END BLSRSASY;                                                      10400000
