*/**** START OF SPECIFICATIONS **************************************** 00000100
*                                                                     * 00000200
*                                                                     * 00000300
*01* MACRO NAME:  IHABLDP                               -96/07/01-<1> * 00000400
*                                                                     * 00000500
*                                                                     * 00000600
*01* DESCRIPTIVE NAME:  Build Dump Parameter List Service             * 00000700
*                                                                     * 00000800
*01* PROPRIETARY STATEMENT:                                           * 00000900
*                                                                     * 00001000
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001100
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00001200
*     5655-068 (C) COPYRIGHT IBM CORP. 1993, 1994                     * 00001300
*                                                                     * 00001400
* STATUS= HBB5520                                                     * 00001500
*                                                                     * 00001600
*                                                                     * 00001700
*                                                                     * 00001800
*01* FUNCTION:                                                        * 00001900
*                                                                     * 00002000
*                                                                     * 00002100
*      NOTE - This macro has a CDPI classification of GUPI.           * 00002200
*                                                                     * 00002300
*      The IHABLDP macro builds the STRLIST parameter list that is    * 00002400
*      specified as input on the SDUMPX macro.  This service may be   * 00002500
*      enhanced in the future to support other parameter lists for    * 00002600
*      input to the SDUMPX macro.  This macro does initiate a dump    * 00002700
*      request.                                                       * 00002800
*                                                                     * 00002900
*                                                                     * 00003000
*      The TYPE parameter on the IHABLDP macro determines which       * 00003100
*      operation the macro will perform on the parameter list.        * 00003200
*                                                                     * 00003300
*                                                                     * 00003400
*      o   IHABLDP TYPE=INITIAL initializes the storage to binary     * 00003500
*          zeroes and generates an initialized header for the dump    * 00003600
*          parameter list.  The length of the dump parameter list     * 00003700
*          header is 24 bytes.                                        * 00003800
*                                                                     * 00003900
*      o   IHABLDP TYPE=STRUCTURE (for STRLIST) generates a structure * 00004000
*          entry in the dump parameter list. The length of this entry * 00004100
*          is 48 bytes.                                               * 00004200
*                                                                     * 00004300
*      o   IHABLDP TYPE=STRRNG (for STRLIST) generates a structure    * 00004400
*          range entry in the dump parameter list. The length of this * 00004500
*          entry is 12 bytes.                                         * 00004600
*                                                                     * 00004700
*      o   IHABLDP TYPE=STROPT (for STRLIST) generates a structure    * 00004800
*          option entry in the dump parameter list. The length of     * 00004900
*          this entry is 12 bytes.                                    * 00005000
*                                                                     * 00005100
*      o   IHABLDP TYPE=ENDLIST completes of the construction of the  * 00005200
*          dump parameter list.  No entries will be added to the dump * 00005300
*          parameter list.                                            * 00005400
*                                                                     * 00005500
*                                                                     * 00005600
*                                                                     * 00005700
*      The IHABLDP service builds the dump parameter list in a block  * 00005800
*      of storage that is passed in on the PARMAREA parameter.  Each  * 00005900
*      time the IHABLDP service is called, an entry of a fixed size   * 00006000
*      that depends on the TYPE option will be built in the dump      * 00006100
*      parameter list.                                                * 00006200
*                                                                     * 00006300
*      To determine the size of the block of storage needed for the   * 00006400
*      parameter list, total the number of bytes of storage needed    * 00006500
*      for each entry in the dump parameter list.  The length of each * 00006600
*      entry can be found in the above description.                   * 00006700
*                                                                     * 00006800
*      The minimum amount of storage that can be passed to IHABLDP is * 00006900
*      72 bytes.  This requirement implies that there must be room    * 00007000
*      for the header and one TYPE(STRUCTURE) entry.  If this is not  * 00007100
*      done, a return code of 8 and a reason code of 4 will be issued * 00007200
*      on the TYPE(INITIAL) invocation, all subsequent invocations    * 00007300
*      will fail, and the dump parameter list will contain nothing    * 00007400
*      but zeros.                                                     * 00007500
*                                                                     * 00007600
*      If the size is calculated incorrectly and as a result there is * 00007700
*      not enough room in the STRLIST parameter list to add a desired * 00007800
*      entry, a return code of 8 and a reason code of 4 will be       * 00007900
*      issued for that specific invocation.  Secondly, subsequent     * 00008000
*      IHABLDP invocations will not be permitted to add entries to    * 00008100
*      the STRLIST parameter list and will instead propagate the      * 00008200
*      return and reason code.  Lastly, the TYPE(ENDLIST) invocation  * 00008300
*      will set the total length of the STRLIST to 16 bytes less than * 00008400
*      the length of the block of storage used for the STRLIST        * 00008500
*      parameter list.  In this case, it will be SDUMPX's             * 00008600
*      responsibility to check that all entries are processed.        * 00008700
*                                                                     * 00008800
*      Another problem will exist if the starting range value of the  * 00008900
*      TYPE(STRRNG) entry is greater than the ending range value. If  * 00009000
*      such a case does exist, a return code of 8 and a reason code   * 00009100
*      of 8 will be issued and the TYPE(STRRNG) entry will not be     * 00009200
*      added to the dump parameter list.                              * 00009300
*                                                                     * 00009400
*      As a recommendation to the user of this service, all of the    * 00009500
*      TYPE(STRRNG) and TYPE(STROPT) entries for a requested          * 00009600
*      structure in a TYPE(STRUCTURE) entry should be grouped         * 00009700
*      together to avoid unneccessary usage of space in the parameter * 00009800
*      list.                                                          * 00009900
*                                                                     * 00010000
*      In order to use this macro correctly, the user should adhere   * 00010100
*      to the following guidelines.  Failure to do so may result in   * 00010200
*      unexpected errors or incorrect results:                        * 00010300
*                                                                     * 00010400
*                                                                     * 00010500
*      o   TYPE(INITIAL) must be specified before any other           * 00010600
*          invocations of IHABLDP.                                    * 00010700
*                                                                     * 00010800
*      o   TYPE(STRUCTURE) must be specified for each structure       * 00010900
*          desired in the dump and before any TYPE(STRRNG) or         * 00011000
*          TYPE(STROPT) entries for that structure.                   * 00011100
*                                                                     * 00011200
*      o   Once TYPE(STRUCTURE) is processed, you can specify one or  * 00011300
*          more TYPE(STRRNG) or TYPE(STROPT) to dump until all of the * 00011400
*          desired ranges for a requested structure are specified.    * 00011500
*          In addition, the macro allows prioritization of            * 00011600
*          information requested for a desired structure.  The STRRNG * 00011700
*          and STROPT types can be specified in any order, which      * 00011800
*          gives the user flexibility in requesting the most          * 00011900
*          important information to that user first.                  * 00012000
*                                                                     * 00012100
*      o   When all of the requested structures and their requested   * 00012200
*          ranges and options have been specified, the TYPE(ENDLIST)  * 00012300
*          invocation must be executed to complete the work of        * 00012400
*          building the parameter list.                               * 00012500
*                                                                     * 00012600
*      o   No actions should be taken on the built parameter list     * 00012700
*          once TYPE(ENDLIST) is executed.                            * 00012800
*                                                                     * 00012900
*                                                                     * 00013000
*                                                                     * 00013100
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00013200
*                                                                     * 00013300
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00013400
*                                                                     * 00013500
*01* ENVIRONMENT:                                                     * 00013600
*                                                                     * 00013700
*                                                                     * 00013800
*      Dispatchable unit mode: Task or SRB mode.                      * 00013900
*                                                                     * 00014000
*      Minimum authorization: Problem or Supervisor state.  Any PSW   * 00014100
*                        key.                                         * 00014200
*                                                                     * 00014300
*      AMODE:            31-bit.                                      * 00014400
*                                                                     * 00014500
*      ASC mode:         Primary or Access Register.                  * 00014600
*                                                                     * 00014700
*      Serialization:    Enabled or Disabled.                         * 00014800
*                                                                     * 00014900
*                                                                     * 00015000
*                                                                     * 00015100
*01* INPUT REGISTERS:  GR0-GR1     Reserved                           * 00015200
*                      GR2-GR13    Undefined                          * 00015300
*                      GR14-GR15   Reserved                           * 00015400
*                                                                     * 00015500
*                      AR0-AR1     Reserved                           * 00015600
*                      AR2-AR13    Undefined                          * 00015700
*                      AR14-AR15   Reserved                           * 00015800
*                                                                     * 00015900
*01* OUTPUT REGISTERS: GR0         Reason code                        * 00016000
*                      GR1         Unpredictable                      * 00016100
*                      GR2-GR13    Unchanged                          * 00016200
*                      GR14        Unpredictable                      * 00016300
*                      GR15        Return code                        * 00016400
*                                                                     * 00016500
*                      AR0-AR1     Unpredictable                      * 00016600
*                      AR2-AR13    Unchanged                          * 00016700
*                      AR14-AR15   Unpredictable                      * 00016800
*                                                                     * 00016900
*01* SYNTAX:                                                          * 00017000
*                                                                     * 00017100
*[xlabel]  IHABLDP     PARMAREA=xparmarea                             * 00017200
*                    ,TYPE=INITIAL                                   * 00017300
*                   |     ,PARMLENGTH=xparmlength                     * 00017400
*                    ,TYPE=STRUCTURE                                 * 00017500
*                   |     ,STRNAME=xstrname                           * 00017600
*                   |   [,CONTOKEN=xcontoken|NONE                  * 00017700
*                   |    ,CONNAME=xconname]                        * 00017800
*                    ,TYPE=STRRNG                                    * 00017900
*                   |    ,OBJECT=COCLASS                             * 00018000
*                   |    ,OBJECT=STGCLASS                            * 00018100
*                   |    ,OBJECT=LISTNUM                             * 00018200
*                   |    ,OBJECT=EMCONTROLS                          * 00018300
*                   |    ,DUMP=ALL                                   * 00018400
*                   |    ,DUMP=RANGE                                 * 00018500
*                   |         ,STARTVAL=xstartval                     * 00018600
*                   |        [,ENDVAL=xendval|NONE]                 * 00018700
*                   |    [,ADJUNCT=NO|CAPTURE|DIRECTIO]             * 00018800
*                   |    [,ENTRYDATA=NO|UNSERIALIZE|SERIALIZE]      * 00018900
*                   |    [,SUMMARY=NO|YES]                          * 00019000
*                    ,TYPE=STROPT                                    * 00019100
*                   |     ,OPTION=LOCKENTRIES|USERCNTLS|             * 00019200
*                   |              EVENTQS                           * 00019300
*                    ,TYPE=ENDLIST                                   * 00019400
*                    [,RETCODE=xretcode]                              * 00019500
*                    [,RSNCODE=xrsncode]                              * 00019600
*                                                                     * 00019700
*                                                                     * 00019800
*      Where:                                                         * 00019900
*                                                                     * 00020000
*                                                                     * 00020100
*      [xlabel]                                                       * 00020200
*          is an optional symbol, starting in column 1, that is the   * 00020300
*          name on the IHABLDP macro invocation.  The name must       * 00020400
*          conform to the rules for an ordinary assembler language    * 00020500
*          symbol.                                                    * 00020600
*          DEFAULT: No name.                                          * 00020700
*                                                                     * 00020800
*                                                                     * 00020900
*                                                                     * 00021000
*                                                                     * 00021100
*      PARMAREA=xparmarea                                             * 00021200
*          is a required input.  It is the name (RS-type), or address * 00021300
*          in register (2)-(12), of the block of storage to be used   * 00021400
*          for building the dump parameter list.  This block of       * 00021500
*          storage will eventually be passed in as input on the       * 00021600
*          SDUMPX macro.                                              * 00021700
*                                                                     * 00021800
*                                                                     * 00021900
*                                                                     * 00022000
*                                                                     * 00022100
*      TYPE=INITIAL|STRUCTURE|STRRNG|STROPT|ENDLIST                 * 00022200
*          is a required keyword input that specifies the type of     * 00022300
*          operation to be performed on the dump parameter list.      * 00022400
*                                                                     * 00022500
*                                                                     * 00022600
*          TYPE=INITIAL                                               * 00022700
*              initializes the storage to binary zeroes and generates * 00022800
*              an initialized header for the dump parameter list.     * 00022900
*              The length of the dump parameter list header is 24     * 00023000
*              bytes.                                                 * 00023100
*                                                                     * 00023200
*                                                                     * 00023300
*              PARMLENGTH=xparmlength                                 * 00023400
*                  is the name (RS-type), or address in register      * 00023500
*                  (2)-(12), of a required fullword input which       * 00023600
*                  specifies the length, in bytes, of the block of    * 00023700
*                  storage used for the dump parameter list.          * 00023800
*                                                                     * 00023900
*                                                                     * 00024000
*                                                                     * 00024100
*          TYPE=STRUCTURE                                             * 00024200
*              generates a structure entry in the STRLIST dump        * 00024300
*              parameter list. The length of this entry is 36 bytes.  * 00024400
*                                                                     * 00024500
*                                                                     * 00024600
*              STRNAME=xstrname                                       * 00024700
*                  is the name (RS-type), or address in register      * 00024800
*                  (2)-(12), of a required 16 character input         * 00024900
*                  variable which contains the name of the structure  * 00025000
*                  to be dumped.  The name must match a name in the   * 00025100
*                  SES policy.                                        * 00025200
*                                                                     * 00025300
*                                                                     * 00025400
*                                                                     * 00025500
*                                                                     * 00025600
*              The following is a set of mutually exclusive keys.     * 00025700
*              This set is optional; only one key may be specified.   * 00025800
*                                                                     * 00025900
*                                                                     * 00026000
*              [CONTOKEN=xcontoken|NONE                             * 00026100
*                  belongs to a set of mutually exclusive keys. It is * 00026200
*                  the name (RS-type), or address in register         * 00026300
*                  (2)-(12), of an optional 16 character input field  * 00026400
*                  that contains the connect token returned by the    * 00026500
*                  IXLCONN service. The CONTOKEN uniquely identifies  * 00026600
*                  the user's connection to a structure.  When this   * 00026700
*                  keyword is specified for a cache structure, the    * 00026800
*                  VECTORINDEX with which the indicated user has      * 00026900
*                  registered interest in each entry that is dumped,  * 00027000
*                  will be included in the dump along with the        * 00027100
*                  directory entry information.  When this keyword is * 00027200
*                  specified for a list structure,  it is ignored.    * 00027300
*                  DEFAULT: NONE                                      * 00027400
*                                                                     * 00027500
*              CONNAME=xconname]                                    * 00027600
*                  belongs to a set of mutually exclusive keys. It is * 00027700
*                  the name (RS-type), or address in register         * 00027800
*                  (2)-(12), of an optional 16 character input field  * 00027900
*                  that contains the the name of the connected user.  * 00028000
*                  When this keyword is specified for a cache         * 00028100
*                  structure, the VECTORINDEX with which the          * 00028200
*                  indicated user has registered interest in each     * 00028300
*                  entry that is dumped, will be included in the dump * 00028400
*                  along with the directory entry information.  When  * 00028500
*                  this keyword is specified for a list structure,    * 00028600
*                  it is ignored.                                     * 00028700
*                                                                     * 00028800
*                                                                     * 00028900
*                                                                     * 00029000
*              End of a set of mutually exclusive optional keys.      * 00029100
*              DEFAULT: CONTOKEN                                      * 00029200
*                                                                     * 00029300
*                                                                     * 00029400
*          TYPE=STRRNG                                                * 00029500
*              generates a structure range entry in the STRLIST dump  * 00029600
*              parameter list. The length of this entry is 12 bytes.  * 00029700
*                                                                     * 00029800
*                                                                     * 00029900
*              OBJECT=COCLASS|STGCLASS|LISTNUM|EMCONTROLS           * 00030000
*                  is a required keyword input which indicates what   * 00030100
*                  type of range should be dumped.                    * 00030200
*                                                                     * 00030300
*                                                                     * 00030400
*                  OBJECT=COCLASS                                     * 00030500
*                      specifies that the requested range is a range  * 00030600
*                      of cast-out classes. This keyword should only  * 00030700
*                      be used if the requested structure is a cache  * 00030800
*                      structure.  If the requested structure is not  * 00030900
*                      a cache structure, nothing will be dumped for  * 00031000
*                      this entry.                                    * 00031100
*                                                                     * 00031200
*                  OBJECT=STGCLASS                                    * 00031300
*                      specifies that the requested range is a range  * 00031400
*                      of storage classes. This keyword should only   * 00031500
*                      be used if the requested structure is a cache  * 00031600
*                      structure.  If the requested structure is not  * 00031700
*                      a cache structure, nothing will be dumped for  * 00031800
*                      this entry.                                    * 00031900
*                                                                     * 00032000
*                      NOTE - If a data entry appears in both a       * 00032100
*                      castout class and a storage class and both     * 00032200
*                      classes are requested to be dumped in two      * 00032300
*                      IHABLDP parameter list entries, the entry will * 00032400
*                      be dumped twice.                               * 00032500
*                                                                     * 00032600
*                  OBJECT=LISTNUM                                     * 00032700
*                      specifies that the requested range is a range  * 00032800
*                      of list numbers. This keyword should only be   * 00032900
*                      used if the requested structure is a list      * 00033000
*                      structure.  If the requested structure is not  * 00033100
*                      a list structure, nothing will be dumped for   * 00033200
*                      this entry.                                    * 00033300
*                                                                     * 00033400
*                  OBJECT=EMCONTROLS                                  * 00033500
*                      specifies that the requested range is a range  * 00033600
*                      of list numbers for which event monitoring     * 00033700
*                      controls should be dumped.  This keyword       * 00033800
*                      should only be used if the requested structure * 00033900
*                      is a list structure.  If the requested         * 00034000
*                      structure is not a list structure, nothing     * 00034100
*                      will be dumped for this entry.  This keyword   * 00034200
*                      is only supported for structures allocated in  * 00034300
*                      a CFLEVEL=4 or higher CF.                      * 00034400
*                                                                     * 00034500
*                                                                     * 00034600
*                                                                     * 00034700
*                                                                     * 00034800
*                                                                     * 00034900
*                                                                     * 00035000
*              DUMP=ALL|RANGE                                       * 00035100
*                  is a required keyword input that specifies the     * 00035200
*                  ranges to be dumped of a requested object.         * 00035300
*                                                                     * 00035400
*                                                                     * 00035500
*                  DUMP=ALL                                           * 00035600
*                      specifies that all values of the requested     * 00035700
*                      object will be dumped.  For example, when      * 00035800
*                      OBJECT(COCLASS) is specified with DUMP(ALL),   * 00035900
*                      all of the object controls and their           * 00036000
*                      associated entries in all of the cast-out      * 00036100
*                      classes will be dumped.  If SUMMARY is         * 00036200
*                      specified, none of the associated entries will * 00036300
*                      be dumped.  Only the object controls will be   * 00036400
*                      dumped in this instance.  For example, when    * 00036500
*                      OBJECT(COCLASS) DUMP(ALL) and SUMMARY(YES) are * 00036600
*                      specified, all of the object controls for all  * 00036700
*                      of the cast-out classes will be dumped and no  * 00036800
*                      entries will be dumped for any of the cast-out * 00036900
*                      classes.                                       * 00037000
*                                                                     * 00037100
*                  DUMP=RANGE                                         * 00037200
*                      specifies that a range of values of the        * 00037300
*                      requested object will be dumped.  For example, * 00037400
*                      when OBJECT(COCLASS) is specified with         * 00037500
*                      DUMP(RANGE), the object controls for the       * 00037600
*                      castout classes requested will be dumped as    * 00037700
*                      well as their associated entries.  If SUMMARY  * 00037800
*                      is specified, none of the associated entries   * 00037900
*                      will be dumped.  Only the object controls will * 00038000
*                      be dumped in this instance.  For example, when * 00038100
*                      OBJECT(COCLASS) DUMP(RANGE) and SUMMARY(YES)   * 00038200
*                      are specified, all of the object controls for  * 00038300
*                      the range of cast-out classes will be dumped   * 00038400
*                      and no entries will be dumped for any of these * 00038500
*                      cast-out classes.                              * 00038600
*                                                                     * 00038700
*                                                                     * 00038800
*                      STARTVAL=xstartval                             * 00038900
*                          is the name (RS-type), or address in       * 00039000
*                          register (2)-(12), of a required fullword  * 00039100
*                          input which specifies the starting range   * 00039200
*                          value.                                     * 00039300
*                                                                     * 00039400
*                                                                     * 00039500
*                                                                     * 00039600
*                                                                     * 00039700
*                      [ENDVAL=xendval|NONE]                        * 00039800
*                          is the name (RS-type), or address in       * 00039900
*                          register (2)-(12), of an optional fullword * 00040000
*                          input which specifies the ending range     * 00040100
*                          value. If ENDVAL is not specified or       * 00040200
*                          ENDVAL(NONE) is specified, only the value  * 00040300
*                          specified on STARTVAL will be dumped for   * 00040400
*                          this range.                                * 00040500
*                          DEFAULT: NONE                              * 00040600
*                                                                     * 00040700
*                                                                     * 00040800
*                                                                     * 00040900
*                                                                     * 00041000
*                                                                     * 00041100
*                                                                     * 00041200
*                                                                     * 00041300
*                                                                     * 00041400
*              [ADJUNCT=NO|CAPTURE|DIRECTIO]                        * 00041500
*                  is an optional keyword input which indicates       * 00041600
*                  whether adjunct data should be included in the     * 00041700
*                  dump for all entries within the specified range,   * 00041800
*                  and if included, when the adjunct data should be   * 00041900
*                  dumped.  This keyword is mutually exclusive with   * 00042000
*                  SUMMARY(YES).  This keyword cannot be used with    * 00042100
*                  OBJECT(EMCONTROLS).                                * 00042200
*                  DEFAULT: NO                                        * 00042300
*                                                                     * 00042400
*                                                                     * 00042500
*                  ADJUNCT=NO                                         * 00042600
*                      specifies that the adjunct data should not be  * 00042700
*                      dumped.                                        * 00042800
*                                                                     * 00042900
*                  ADJUNCT=CAPTURE                                    * 00043000
*                      specifies that the adjunct data should be      * 00043100
*                      captured along with the control entries.       * 00043200
*                                                                     * 00043300
*                  ADJUNCT=DIRECTIO                                   * 00043400
*                      specifies that the adjunct data should be      * 00043500
*                      dumped via direct I/O to the dump dataset      * 00043600
*                      after the controls are captured.               * 00043700
*                                                                     * 00043800
*                                                                     * 00043900
*                                                                     * 00044000
*                                                                     * 00044100
*                                                                     * 00044200
*                                                                     * 00044300
*              [ENTRYDATA=NO|UNSERIALIZE|SERIALIZE]                 * 00044400
*                  is an optional keyword input which indicates       * 00044500
*                  whether entry data should be included in the dump  * 00044600
*                  for all the entries within the specified range.    * 00044700
*                  This keyword is mutually exclusive with            * 00044800
*                  SUMMARY(YES).  This keyword cannot be used with    * 00044900
*                  OBJECT(EMCONTROLS).                                * 00045000
*                  DEFAULT: NO                                        * 00045100
*                                                                     * 00045200
*                                                                     * 00045300
*                  ENTRYDATA=NO                                       * 00045400
*                      specifies that the entry data should not be    * 00045500
*                      dumped.                                        * 00045600
*                                                                     * 00045700
*                  ENTRYDATA=UNSERIALIZE                              * 00045800
*                      specifies that the entry data should be dumped * 00045900
*                      unserialized.                                  * 00046000
*                                                                     * 00046100
*                  ENTRYDATA=SERIALIZE                                * 00046200
*                      specifies that the entry data should be dumped * 00046300
*                      serialized.                                    * 00046400
*                                                                     * 00046500
*                                                                     * 00046600
*                                                                     * 00046700
*                                                                     * 00046800
*                                                                     * 00046900
*                                                                     * 00047000
*              [SUMMARY=NO|YES]                                     * 00047100
*                  is an optional keyword input which indicates       * 00047200
*                  whether the dump should only include a summary of  * 00047300
*                  the requested object.  When this is requested, the * 00047400
*                  entry control information for the entries is       * 00047500
*                  excluded.  Only structure and class information    * 00047600
*                  will be included in the dump.  SUMMARY(YES) is     * 00047700
*                  mutually exclusive with the ADJUNCT and ENTRYDATA  * 00047800
*                  keywords.  This keyword cannot be used with        * 00047900
*                  OBJECT(EMCONTROLS).                                * 00048000
*                  DEFAULT: NO                                        * 00048100
*                                                                     * 00048200
*                                                                     * 00048300
*                  SUMMARY=NO                                         * 00048400
*                      specifies that a summary dump of the requested * 00048500
*                      object should not be taken.                    * 00048600
*                                                                     * 00048700
*                  SUMMARY=YES                                        * 00048800
*                      specifies that a summary dump of the requested * 00048900
*                      object should be taken.                        * 00049000
*                                                                     * 00049100
*                                                                     * 00049200
*                                                                     * 00049300
*                                                                     * 00049400
*                                                                     * 00049500
*          TYPE=STROPT                                                * 00049600
*              generates a structure option entry in the STRLIST dump * 00049700
*              parameter list. The length of this entry is 12 bytes.  * 00049800
*                                                                     * 00049900
*                                                                     * 00050000
*              OPTION=LOCKENTRIES|USERCNTLS|EVENTQS                 * 00050100
*                  is a required keyword input which indicates what   * 00050200
*                  option is desired in the dump .                    * 00050300
*                                                                     * 00050400
*                                                                     * 00050500
*                  OPTION=LOCKENTRIES                                 * 00050600
*                      specifies that the lock table entries          * 00050700
*                      associated with the requested structure should * 00050800
*                      be included in the dump.  This should only be  * 00050900
*                      specified when the structure is a list         * 00051000
*                      structure.                                     * 00051100
*                                                                     * 00051200
*                  OPTION=USERCNTLS                                   * 00051300
*                      specifies that the user attach controls should * 00051400
*                      be included in the dump.                       * 00051500
*                                                                     * 00051600
*                  OPTION=EVENTQS                                     * 00051700
*                      specifies that the user event queues should be * 00051800
*                      included in the dump.  This keyword is only    * 00051900
*                      supported for structures allocated in a        * 00052000
*                      CFLEVEL=4 or higher CF.                        * 00052100
*                                                                     * 00052200
*                                                                     * 00052300
*                                                                     * 00052400
*                                                                     * 00052500
*                                                                     * 00052600
*          TYPE=ENDLIST                                               * 00052700
*              specifies that the building of the dump parameter list * 00052800
*              is complete.  This must be specified when the building * 00052900
*              of the parameter list is complete.                     * 00053000
*                                                                     * 00053100
*                                                                     * 00053200
*                                                                     * 00053300
*                                                                     * 00053400
*                                                                     * 00053500
*                                                                     * 00053600
*      [RETCODE=xretcode]                                             * 00053700
*          is the name (RS-type) of an optional fullword output       * 00053800
*          variable, or register (2)-(12), that will contain the      * 00053900
*          return code.                                               * 00054000
*                                                                     * 00054100
*                                                                     * 00054200
*                                                                     * 00054300
*                                                                     * 00054400
*      [RSNCODE=xrsncode]                                             * 00054500
*          is the name (RS-type) of an optional fullword output       * 00054600
*          variable, or register (2)-(12), that will contain the      * 00054700
*          reason code.                                               * 00054800
*                                                                     * 00054900
*                                                                     * 00055000
*                                                                     * 00055100
*01* RETURN CODES:                                                    * 00055200
*                                                                     * 00055300
*                                                                     * 00055400
*       00        Successful completion.                              * 00055500
*                                                                     * 00055600
*       08        Function failed.                                    * 00055700
*                                                                     * 00055800
*                 HEX REASON  MEANING                                 * 00055900
*                 CODE                                                * 00056000
*                                                                     * 00056100
*                                                                     * 00056200
*                 04          Insufficient space in the dump          * 00056300
*                             parameter list to add the requested     * 00056400
*                             entry.                                  * 00056500
*                                                                     * 00056600
*                 08          Range entry was not added to the dump   * 00056700
*                             parameter list because the starting     * 00056800
*                             range value was greater than the ending * 00056900
*                             range value.                            * 00057000
*                                                                     * 00057100
*                                                                     * 00057200
*                                                                     * 00057300
*                                                                     * 00057400
*                                                                     * 00057500
*01* REASON CODES:                                                    * 00057600
*                                                                     * 00057700
*       Reason codes, as appropriate, are defined under their         * 00057800
*       corresponding return code.                                    * 00057900
*                                                                     * 00058000
*01* MODULE TYPE:  ASSEM MACRO                                        * 00058100
*                                                                     * 00058200
*02*   PROCESSOR:  ASSEM                                              * 00058300
*                                                                     * 00058400
*01* COMPONENT:  SCDMP                                                * 00058500
*                                                                     * 00058600
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00058700
*                                                                     * 00058800
*01* MACRO USAGE NOTES:                                               * 00058900
*                                                                     * 00059000
*                                                                     * 00059100
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00059200
*        global macro variable.  Any value other than 'NO' will       * 00059300
*        result in the macro expansion being printed.  The default is * 00059400
*        'YES'.  The following examples illustrate how the ZPRINT     * 00059500
*        variable should be set.                                      * 00059600
*                                                                     * 00059700
*                    GBLC &ZPRINT                                     * 00059800
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00059900
*                                                                     * 00060000
*    2.  EXAMPLE                                                      * 00060100
*                                                                     * 00060200
*        The  following  example  will build a STRLIST parameter list * 00060300
*        that  will  tell  SDUMPX  to  dump  three  structures  named * 00060400
*        CACHESTRUCTURE,    LISTSTRUCTURE1,    and    LISTSTRUCTURE2. * 00060500
*        CACHESTRUCTURE  is  a cache structure.  and will be included * 00060600
*        in  the  dump first.  The user registry information relating * 00060700
*        to  user cacheuser will be dumped along with the user attach * 00060800
*        controls.    Storage classes 3 through 7 and storage class 1 * 00060900
*        will be dumped.  The dump will include control data, adjunct * 00061000
*        data,  and  entry  data for each element within clases 3 - 7 * 00061100
*        and  1.   The adjunct data will be captured with the control * 00061200
*        data.    Serialization  will be held until the entry data is * 00061300
*        written  to  the dump data set regardless of what time limit * 00061400
*        was  specified  on the IXLCONN  macro.  The information will * 00061500
*        be  prioritized  such  that  the  &uacntls.   will be dumped * 00061600
*        first, followed by storage classes 3-7, and storage class 1. * 00061700
*                                                                     * 00061800
*        The  lock  table entries   will be dumped for the first list * 00061900
*        structure.  The dump will include information for all lists, * 00062000
*        but  the  control  data for each element will not be dumped. * 00062100
*        The information will be prioritized such that the lock table * 00062200
*        entries  will  be  dumped  after the information for all the * 00062300
*        lists.                                                       * 00062400
*                                                                     * 00062500
*        All  of  the  entry  data will be dumped for the second list * 00062600
*        structure.    The entry data will be dumped unserialized for * 00062700
*        all  of  the  lists.    Also,  the  time  limit  for holding * 00062800
*        serialization  that  was specified on the IXLCONN macro will * 00062900
*        be enforced while capturing the control data.                * 00063000
*                                                                     * 00063100
*        NOTES ON EXAMPLE                                             * 00063200
*                                                                     * 00063300
*                                                                     * 00063400
*        o   PARMLIST  is the name of the block of storage to be used * 00063500
*            as the STRLIST parameter list.                           * 00063600
*                                                                     * 00063700
*        o   PARM_LENGTH contains the length of the block of storage. * 00063800
*                                                                     * 00063900
*        o   STRUCTURE_A  is  a  16 character variable containing the * 00064000
*            name "CACHESTRUCTURE".                                   * 00064100
*                                                                     * 00064200
*        o   STRUCTURE_A_CONTOKEN   is   a   16   character  variable * 00064300
*            containing  the  contoken  for  the user's connection to * 00064400
*            CACHESTRUCTURE.                                          * 00064500
*                                                                     * 00064600
*        o   START1 is a variable that contains the number 3.         * 00064700
*                                                                     * 00064800
*        o   END1 is a variable that contains the number 7.           * 00064900
*                                                                     * 00065000
*        o   START2 is a variable that contains the number 1.         * 00065100
*                                                                     * 00065200
*        o   STRUCTURE_B  is  a  16 character variable containing the * 00065300
*            name "LISTSTRUCTURE1".                                   * 00065400
*                                                                     * 00065500
*        o   STRUCTURE_C  is  a  16 character variable containing the * 00065600
*            name "LISTSTRUCTURE2".                                   * 00065700
*                                                                     * 00065800
*                                                                     * 00065900
*           IHABLDP PARMAREA=PARMLIST,TYPE=INITIAL,                   * 00066000
*                   PARMLENGTH=PARM_LENGTH                            * 00066100
*           IHABLDP PARMAREA=PARMLIST,TYPE=STRUCTURE,                 * 00066200
*                   STRNAME=STRUCTURE_A,                              * 00066300
*                   CONTOKEN=STRUCTURE_A_CONTOKEN                     * 00066400
*           IHABLDP PARMAREA=PARMLIST,TYPE=STROPT,                    * 00066500
*                   OPTION=USERCNTLS                                  * 00066600
*           IHABLDP PARMAREA=PARMLIST,TYPE=STRRNG,                    * 00066700
*                   OBJECT=STGCLASS,                                  * 00066800
*                   DUMP=RANGE,STARTVAL=START1,ENDVAL=END1,           * 00066900
*                   ADJUNCT=CAPTURE,ENTRYDATA=SERIALIZE               * 00067000
*           IHABLDP PARMAREA=PARMLIST,TYPE=STRRNG,                    * 00067100
*                   OBJECT=STGCLASS,                                  * 00067200
*                   DUMP=RANGE,STARTVAL=START2,ADJUNCT=CAPTURE,       * 00067300
*                   ENTRYDATA=SERIALIZE                               * 00067400
*           IHABLDP PARMAREA=PARMLIST,TYPE=STRUCTURE,                 * 00067500
*                   STRNAME=STRUCTURE_B                               * 00067600
*           IHABLDP PARMAREA=PARMLIST,TYPE=STRRNG,                    * 00067700
*                   OBJECT=LISTNUM,                                   * 00067800
*                   DUMP=ALL,SUMMARY=YES                              * 00067900
*           IHABLDP PARMAREA=PARMLIST,TYPE=STROPT,                    * 00068000
*                   OPTION=LOCKENTRIES                                * 00068100
*           IHABLDP PARMAREA=PARMLIST,TYPE=STRUCTURE,                 * 00068200
*                   STRNAME=STRUCTURE_C                               * 00068300
*           IHABLDP PARMAREA=PARMLIST,TYPE=STRRNG,                    * 00068400
*                   OBJECT=LISTNUM,DUMP=ALL,                          * 00068500
*                   ENTRYDATA=UNSERIALIZE                             * 00068600
*           IHABLDP PARMAREA=PARMLIST,TYPE=ENDLIST                    * 00068700
*                                                                     * 00068800
*                                                                     * 00068900
*                                                                     * 00069000
*01* CHANGE ACTIVITY:                                                 * 00069100
*                                                                     * 00069200
*   Flag LineItem  FMID    Date   ID    Comment                       * 00069300
*                                                                     * 00069400
*    $L0=SYSLKD   HBB5510 910601 PD00LA:  SES Dumping support         * 00069500
*    $P1=PIG0308  HBB5510 910923 PD00LA:  Assembler version of        * 00069600
*                                         BLDDUMP does not support    * 00069700
*                                         RSECTs                      * 00069800
*    $L1=SYSLKD   HBB5510 920213 PD00LA:  STRTOKEN Support -          * 00069900
*                                         Documentation changes only  * 00070000
*    $P2=PIG0639  HBB5510 920813 PD00LA:  BLDDUMP does not compile if * 00070100
*                                         the PL/X control statements * 00070200
*                                         break over multiple lines   * 00070300
*    $D1=DIG0096  HBB5510 930520 PD00LA:  Change name of BLDDUMP to   * 00070400
*                                         IHABLDP                     * 00070500
*    $P3=PIG2050  HBB5510 930715 PD00LA:  Enhance ENDVAL keyword      * 00070600
*                                         description - Documentation * 00070700
*                                         changes only                * 00070800
*    $D2=DR20001  HBB6601 950907 PD00KV:  Split away from SC1CM       * 00070900
*    $01=OW24532  HBB5520 960701 PDHT:  Event monitoring controls and * 00071000
*                                         event queues support        * 00071100
****** END OF SPECIFICATIONS *****************************************/ 00071200
*/* TLINE 1 *********************************************************** 00071300
         MACRO                                                          00071400
&XLABEL  IHABLDP &PARMAREA=,&TYPE=,&PARMLENGTH=,&STRNAME=,&CONTOKEN=,  *00071500
               &CONNAME=,&OBJECT=,&DUMP=,&STARTVAL=,&ENDVAL=,&ADJUNCT=,*00071600
               &ENTRYDATA=,&SUMMARY=,&OPTION=,&RETCODE=,&RSNCODE=       00071700
.*                                                                      00071800
*                 MACDATE -96/07/01-<1>                                 00071900
.*                                                                      00072000
.*******************************************************************    00072100
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00072200
.*******************************************************************    00072300
                 GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                00072400
                 GBLC  &ZTEST      YES=TEST NO=NO TEST                  00072500
                 GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX          00072600
.*                                                                      00072700
                 GBLC  &ZIHABLDP   YES=MACRO USED AT LEAST ONCE         00072800
.*******************************************************************    00072900
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00073000
.*******************************************************************    00073100
                 LCLC  &ZMS        ERROR MESSAGE WORK AREA              00073200
                 LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS         00073300
                 LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED           00073400
                 LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR          00073500
                 LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE          00073600
                 LCLA  &ZAWRK      USED AS A WORK AREA                  00073700
                 LCLA  &ZASIZ      USED FOR SIZE OF VALUE               00073800
                 LCLA  &ZN         NUMERIC WORK VARIABLE                00073900
                 LCLC  &ZC         CHARACTER WORK VARIABLE              00074000
                 LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE          00074100
                 LCLA  &ZTLA       VALUE TOO LONG VARIABLE              00074200
                 LCLA  &ZMACRET    MACRO RETURN CODE                    00074300
&ZMACRET         SETA  0           ASSUME NO ERRORS                     00074400
.*                                                                      00074500
                 LCLC  &ZCSYSLIST(255)          NONXKEY, POS ARRAY      00074600
                 LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()           00074700
                 LCLA  &ZPLLEN     PARAMETER LIST LENGTH                00074800
                 LCLC  &ZENDBASEPL              End of base PL          00074900
.*******************************************************************    00075000
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00075100
.*******************************************************************    00075200
                 LCLC  &XPARMAREA  ++ NAME                              00075300
                 LCLC  &XTYPE      ++ VALUE                             00075400
                 LCLC  &XPARMLENGTH             ++ NAME                 00075500
                 LCLC  &XSTRNAME   ++ NAME                              00075600
                 LCLC  &XDUMMY1    ++ NAME                              00075700
                 LCLC  &XCONTOKEN  ++ NAME                              00075800
                 LCLC  &XCONNAME   ++ NAME                              00075900
                 LCLC  &XOBJECT    ++ VALUE                             00076000
                 LCLC  &XDUMP      ++ VALUE                             00076100
                 LCLC  &XSTARTVAL  ++ NAME                              00076200
                 LCLC  &XENDVAL    ++ NAME                              00076300
                 LCLC  &XADJUNCT   ++ VALUE                             00076400
                 LCLC  &XENTRYDATA              ++ VALUE                00076500
                 LCLC  &XSUMMARY   ++ VALUE                             00076600
                 LCLC  &XOPTION    ++ VALUE                             00076700
                 LCLC  &XRETCODE   ++ NAME                              00076800
                 LCLC  &XRSNCODE   ++ NAME                              00076900
.*******************************************************************    00077000
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00077100
.*******************************************************************    00077200
                 LCLC  &ZXPARMAREA              ++ INPUT NAME           00077300
                 LCLC  &ZXTYPE     ++ INPUT VALUE                       00077400
                 LCLC  &ZXPARMLENGTH            ++ INPUT NAME           00077500
                 LCLC  &ZXSTRNAME  ++ INPUT NAME                        00077600
                 LCLC  &ZXDUMMY1   ++ INPUT NAME                        00077700
                 LCLC  &ZXCONTOKEN              ++ INPUT NAME           00077800
                 LCLC  &ZXCONNAME  ++ INPUT NAME                        00077900
                 LCLC  &ZXOBJECT   ++ INPUT VALUE                       00078000
                 LCLC  &ZXDUMP     ++ INPUT VALUE                       00078100
                 LCLC  &ZXSTARTVAL              ++ INPUT NAME           00078200
                 LCLC  &ZXENDVAL   ++ INPUT NAME                        00078300
                 LCLC  &ZXADJUNCT  ++ INPUT VALUE                       00078400
                 LCLC  &ZXENTRYDATA             ++ INPUT VALUE          00078500
                 LCLC  &ZXSUMMARY  ++ INPUT VALUE                       00078600
                 LCLC  &ZXOPTION   ++ INPUT VALUE                       00078700
                 LCLC  &ZXRETCODE  ++ OUTPUT NAME                       00078800
                 LCLC  &ZXRSNCODE  ++ OUTPUT NAME                       00078900
.********************************************************************   00079000
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00079100
.********************************************************************   00079200
                 ACTR  10000                                            00079300
.*----------------------------------------------------------------***   00079400
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00079500
                 AIF   (N'&PARMAREA LE 1).ZG2A  CK NUM                  00079600
&ZMS             SETC  '"PARMAREA='             *KPOSA* MNOTE           00079700
&ZMS             SETC  '&ZMS.&PARMAREA"'                                00079800
&ZMS             SETC  '&ZMS "PARMAREA"'                                00079900
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00080000
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00080100
.ZG2A            ANOP  ,                                                00080200
.*-------------------------------------------------------------------   00080300
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00080400
&ZXPARMAREA      SETC  'INPUT'     SET IN/OUTPUT                        00080500
&XPARMAREA       SETC  '&PARMAREA(1)'           SET XVARIABLE           00080600
                 AIF   (N'&PARMAREA GT 1).ZG2B  MULTI PARMS             00080700
&XPARMAREA       SETC  '&PARMAREA'              SET XVARIABLE           00080800
.ZG2B            AIF   (K'&PARMAREA(1) GT 0).ZG2C                       00080900
&ZXPARMAREA      SETC  ''          RESET IN/OUTPUT                      00081000
&ZMS             SETC  ' '         *KRQDA*                              00081100
&ZMS             SETC  '&ZMS "PARMAREA" KEY AND ITS ARGUMENT'           00081200
                 MNOTE 8,' &ZMS ARE REQUIRED.'                          00081300
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00081400
.ZG2C            ANOP  ,                                                00081500
.*-------------------------------------------------------------------   00081600
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00081700
                 AIF   (K'&ZXPARMAREA LE 0).ZG2R  NOT I/O               00081800
                 AIF   ('&XPARMAREA'(1,1) NE '(').ZG2R                  00081900
&ZCGPR           SETC  '&XPARMAREA'(2,K'&XPARMAREA-2)                   00082000
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG2P                      00082100
                 AIF   (K'&ZCGPR GT 2).ZG2Q                             00082200
                 AIF   ('&ZCGPR' EQ '0').ZG2Q                           00082300
&ZCGPR           SETC  '&ZCGPR'(2,1)                                    00082400
                 AIF   (T'&ZCGPR NE 'N').ZG2Q   INVALID REG NAME        00082500
.ZG2P            ANOP  ,                                                00082600
                 AIF   (T'&ZCGPR NE 'N').ZG2R   NON NUMERIC             00082700
                 AIF   ('&ZCGPR' LT '2').ZG2Q                           00082800
                 AIF   ('&ZCGPR' LE '12').ZG2R                          00082900
.ZG2Q            ANOP  ,                                                00083000
&ZMS             SETC  '"PARMAREA='             *KGPRA* MNOTE           00083100
&ZMS             SETC  '&ZMS.&PARMAREA"'                                00083200
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'        00083300
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                 00083400
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00083500
.ZG2R            ANOP  ,                                                00083600
.*------------------------------------------------------------------    00083700
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00083800
&XTYPE           SETC  ''          INITIALIZE XVARIABLE                 00083900
.*-------------------------------------------------------------------   00084000
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00084100
.ZG6             ANOP  ,                                                00084200
                 AIF   (K'&TYPE(1) LE 0).ZG6A                           00084300
&ZTLC            SETC 'INITIAL'                                         00084400
                 AIF   ('&TYPE(1)' NE '&ZTLC').ZG10                     00084500
&XTYPE           SETC  'INITIAL'   SET KEYWORD                          00084600
                 AIF   (N'&TYPE LE 1).ZG6A      CK NUM                  00084700
&ZMS             SETC  '"TYPE='    *KPOSA* MNOTE                        00084800
&ZMS             SETC  '&ZMS.&TYPE"'                                    00084900
&ZMS             SETC  '&ZMS "TYPE"'                                    00085000
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00085100
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00085200
.ZG6A            ANOP  ,                                                00085300
.*------------------------------------------------------------------    00085400
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00085500
&ZCVAL           SETC ''           CLEAR ERROR KEY ACCUMULATOR          00085600
.ZG6A0           AIF   (K'&STRNAME LE 0).ZG6A1  OK                      00085700
&ZCVAL           SETC '&ZCVAL STRNAME'          INCORRECT KEY USED      00085800
.ZG6A1           AIF   (K'&CONTOKEN LE 0).ZG6A2  OK                     00085900
&ZCVAL           SETC '&ZCVAL CONTOKEN'         INCORRECT KEY USED      00086000
.ZG6A2           AIF   (K'&CONNAME LE 0).ZG6A3  OK                      00086100
&ZCVAL           SETC '&ZCVAL CONNAME'          INCORRECT KEY USED      00086200
.ZG6A3           AIF   (K'&OBJECT LE 0).ZG6A4   OK                      00086300
&ZCVAL           SETC '&ZCVAL OBJECT'           INCORRECT KEY USED      00086400
.ZG6A4           AIF   (K'&DUMP LE 0).ZG6A5     OK                      00086500
&ZCVAL           SETC '&ZCVAL DUMP'             INCORRECT KEY USED      00086600
.ZG6A5           AIF   (K'&STARTVAL LE 0).ZG6A6  OK                     00086700
&ZCVAL           SETC '&ZCVAL STARTVAL'         INCORRECT KEY USED      00086800
.ZG6A6           AIF   (K'&ENDVAL LE 0).ZG6A7   OK                      00086900
&ZCVAL           SETC '&ZCVAL ENDVAL'           INCORRECT KEY USED      00087000
.ZG6A7           AIF   (K'&ADJUNCT LE 0).ZG6A8  OK                      00087100
&ZCVAL           SETC '&ZCVAL ADJUNCT'          INCORRECT KEY USED      00087200
.ZG6A8           AIF   (K'&ENTRYDATA LE 0).ZG6A9  OK                    00087300
&ZCVAL           SETC '&ZCVAL ENTRYDATA'        INCORRECT KEY USED      00087400
.ZG6A9           AIF   (K'&SUMMARY LE 0).ZG6A10  OK                     00087500
&ZCVAL           SETC '&ZCVAL SUMMARY'          INCORRECT KEY USED      00087600
.ZG6A10          AIF   (K'&OPTION LE 0).ZG6A11  OK                      00087700
&ZCVAL           SETC '&ZCVAL OPTION'           INCORRECT KEY USED      00087800
.ZG6A11          AIF   (K'&ZCVAL LE 0).ZG6A12   OK                      00087900
&ZCVAL           SETC '&ZCVAL'(2,K'&ZCVAL-1)                            00088000
&ZMS             SETC  '"TYPE'     *KMEIA* MNOTE                        00088100
&ZMS             SETC  '&ZMS.=&TYPE"'                                   00088200
&ZMS             SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'             00088300
                 MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'             00088400
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00088500
.ZG6A12          ANOP  ,                                                00088600
.*----------------------------------------------------------------***   00088700
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00088800
                 AIF   (N'&PARMLENGTH LE 1).ZG8A  CK NUM                00088900
&ZMS             SETC  '"PARMLENGTH='           *KPOSA* MNOTE           00089000
&ZMS             SETC  '&ZMS.&PARMLENGTH"'                              00089100
&ZMS             SETC  '&ZMS "PARMLENGTH"'                              00089200
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00089300
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00089400
.ZG8A            ANOP  ,                                                00089500
.*-------------------------------------------------------------------   00089600
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00089700
&ZXPARMLENGTH    SETC  'INPUT'     SET IN/OUTPUT                        00089800
&XPARMLENGTH     SETC  '&PARMLENGTH(1)'         SET XVARIABLE           00089900
                 AIF   (N'&PARMLENGTH GT 1).ZG8B  MULTI PARMS           00090000
&XPARMLENGTH     SETC  '&PARMLENGTH'            SET XVARIABLE           00090100
.ZG8B            AIF   (K'&PARMLENGTH(1) GT 0).ZG8C                     00090200
&ZXPARMLENGTH    SETC  ''          RESET IN/OUTPUT                      00090300
&ZMS             SETC  ' '         *KRQDA*                              00090400
&ZMS             SETC  '&ZMS "PARMLENGTH" KEY AND ITS ARGUMENT'         00090500
                 MNOTE 8,' &ZMS ARE REQUIRED.'                          00090600
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00090700
.ZG8C            ANOP  ,                                                00090800
.*-------------------------------------------------------------------   00090900
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00091000
                 AIF   (K'&ZXPARMLENGTH LE 0).ZG8R  NOT I/O             00091100
                 AIF   ('&XPARMLENGTH'(1,1) NE '(').ZG8R                00091200
&ZCGPR           SETC  '&XPARMLENGTH'(2,K'&XPARMLENGTH-2)               00091300
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG8P                      00091400
                 AIF   (K'&ZCGPR GT 2).ZG8Q                             00091500
                 AIF   ('&ZCGPR' EQ '0').ZG8Q                           00091600
&ZCGPR           SETC  '&ZCGPR'(2,1)                                    00091700
                 AIF   (T'&ZCGPR NE 'N').ZG8Q   INVALID REG NAME        00091800
.ZG8P            ANOP  ,                                                00091900
                 AIF   (T'&ZCGPR NE 'N').ZG8R   NON NUMERIC             00092000
                 AIF   ('&ZCGPR' LT '2').ZG8Q                           00092100
                 AIF   ('&ZCGPR' LE '12').ZG8R                          00092200
.ZG8Q            ANOP  ,                                                00092300
&ZMS             SETC  '"PARMLENGTH='           *KGPRA* MNOTE           00092400
&ZMS             SETC  '&ZMS.&PARMLENGTH"'                              00092500
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'        00092600
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                 00092700
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00092800
.ZG8R            ANOP  ,                                                00092900
.*-------------------------------------------------------------------   00093000
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00093100
.ZG10            ANOP  ,                                                00093200
&ZTLC            SETC 'STRUCTURE'                                       00093300
                 AIF   ('&TYPE(1)' NE '&ZTLC').ZG18                     00093400
&XTYPE           SETC  'STRUCTURE'              SET KEYWORD             00093500
                 AIF   (N'&TYPE LE 1).ZG10A     CK NUM                  00093600
&ZMS             SETC  '"TYPE='    *KPOSA* MNOTE                        00093700
&ZMS             SETC  '&ZMS.&TYPE"'                                    00093800
&ZMS             SETC  '&ZMS "TYPE"'                                    00093900
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00094000
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00094100
.ZG10A           ANOP  ,                                                00094200
.*------------------------------------------------------------------    00094300
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00094400
&ZCVAL           SETC ''           CLEAR ERROR KEY ACCUMULATOR          00094500
.ZG10A0          AIF   (K'&PARMLENGTH LE 0).ZG10A1  OK                  00094600
&ZCVAL           SETC '&ZCVAL PARMLENGTH'       INCORRECT KEY USED      00094700
.ZG10A1          AIF   (K'&OBJECT LE 0).ZG10A2  OK                      00094800
&ZCVAL           SETC '&ZCVAL OBJECT'           INCORRECT KEY USED      00094900
.ZG10A2          AIF   (K'&DUMP LE 0).ZG10A3    OK                      00095000
&ZCVAL           SETC '&ZCVAL DUMP'             INCORRECT KEY USED      00095100
.ZG10A3          AIF   (K'&STARTVAL LE 0).ZG10A4  OK                    00095200
&ZCVAL           SETC '&ZCVAL STARTVAL'         INCORRECT KEY USED      00095300
.ZG10A4          AIF   (K'&ENDVAL LE 0).ZG10A5  OK                      00095400
&ZCVAL           SETC '&ZCVAL ENDVAL'           INCORRECT KEY USED      00095500
.ZG10A5          AIF   (K'&ADJUNCT LE 0).ZG10A6  OK                     00095600
&ZCVAL           SETC '&ZCVAL ADJUNCT'          INCORRECT KEY USED      00095700
.ZG10A6          AIF   (K'&ENTRYDATA LE 0).ZG10A7  OK                   00095800
&ZCVAL           SETC '&ZCVAL ENTRYDATA'        INCORRECT KEY USED      00095900
.ZG10A7          AIF   (K'&SUMMARY LE 0).ZG10A8  OK                     00096000
&ZCVAL           SETC '&ZCVAL SUMMARY'          INCORRECT KEY USED      00096100
.ZG10A8          AIF   (K'&OPTION LE 0).ZG10A9  OK                      00096200
&ZCVAL           SETC '&ZCVAL OPTION'           INCORRECT KEY USED      00096300
.ZG10A9          AIF   (K'&ZCVAL LE 0).ZG10A10  OK                      00096400
&ZCVAL           SETC '&ZCVAL'(2,K'&ZCVAL-1)                            00096500
&ZMS             SETC  '"TYPE'     *KMEIA* MNOTE                        00096600
&ZMS             SETC  '&ZMS.=&TYPE"'                                   00096700
&ZMS             SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'             00096800
                 MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'             00096900
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00097000
.ZG10A10         ANOP  ,                                                00097100
.*----------------------------------------------------------------***   00097200
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00097300
                 AIF   (N'&STRNAME LE 1).ZG12A  CK NUM                  00097400
&ZMS             SETC  '"STRNAME='              *KPOSA* MNOTE           00097500
&ZMS             SETC  '&ZMS.&STRNAME"'                                 00097600
&ZMS             SETC  '&ZMS "STRNAME"'                                 00097700
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00097800
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00097900
.ZG12A           ANOP  ,                                                00098000
.*-------------------------------------------------------------------   00098100
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00098200
&ZXSTRNAME       SETC  'INPUT'     SET IN/OUTPUT                        00098300
&XSTRNAME        SETC  '&STRNAME(1)'            SET XVARIABLE           00098400
                 AIF   (N'&STRNAME GT 1).ZG12B  MULTI PARMS             00098500
&XSTRNAME        SETC  '&STRNAME'  SET XVARIABLE                        00098600
.ZG12B           AIF   (K'&STRNAME(1) GT 0).ZG12C                       00098700
&ZXSTRNAME       SETC  ''          RESET IN/OUTPUT                      00098800
&ZMS             SETC  ' '         *KRQDA*                              00098900
&ZMS             SETC  '&ZMS "STRNAME" KEY AND ITS ARGUMENT'            00099000
                 MNOTE 8,' &ZMS ARE REQUIRED.'                          00099100
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00099200
.ZG12C           ANOP  ,                                                00099300
.*-------------------------------------------------------------------   00099400
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00099500
                 AIF   (K'&ZXSTRNAME LE 0).ZG12R  NOT I/O               00099600
                 AIF   ('&XSTRNAME'(1,1) NE '(').ZG12R                  00099700
&ZCGPR           SETC  '&XSTRNAME'(2,K'&XSTRNAME-2)                     00099800
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG12P                     00099900
                 AIF   (K'&ZCGPR GT 2).ZG12Q                            00100000
                 AIF   ('&ZCGPR' EQ '0').ZG12Q                          00100100
&ZCGPR           SETC  '&ZCGPR'(2,1)                                    00100200
                 AIF   (T'&ZCGPR NE 'N').ZG12Q  INVALID REG NAME        00100300
.ZG12P           ANOP  ,                                                00100400
                 AIF   (T'&ZCGPR NE 'N').ZG12R  NON NUMERIC             00100500
                 AIF   ('&ZCGPR' LT '2').ZG12Q                          00100600
                 AIF   ('&ZCGPR' LE '12').ZG12R                         00100700
.ZG12Q           ANOP  ,                                                00100800
&ZMS             SETC  '"STRNAME='              *KGPRA* MNOTE           00100900
&ZMS             SETC  '&ZMS.&STRNAME"'                                 00101000
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'        00101100
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                 00101200
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00101300
.ZG12R           ANOP  ,                                                00101400
.*----------------------------------------------------------------***   00101500
.***AG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00101600
&XDUMMY1         SETC  ''          INITIALIZE XVARIABLE                 00101700
                 AIF   (K'&CONTOKEN LE 0).ZG15C                         00101800
&ZXDUMMY1        SETC  'INPUT'     SET IN/OUTPUT                        00101900
&XDUMMY1         SETC  'CONTOKEN'  SET XVARIABLE                        00102000
&ZXCONTOKEN      SETC  'INPUT'     SET IN/OUTPUT                        00102100
&XCONTOKEN       SETC  '&CONTOKEN(1)'           SET XVARIABLE PARM      00102200
                 AIF   (N'&CONTOKEN GT 1).ZG15A  MULTIPLE PARMS         00102300
&XCONTOKEN       SETC  '&CONTOKEN'              SET XVARIABLE PARM      00102400
.ZG15A           AIF   (N'&CONTOKEN LE 1).ZG15B  CK NUM                 00102500
&ZMS             SETC  '"CONTOKEN='             *KPOSA* MNOTE           00102600
&ZMS             SETC  '&ZMS.&CONTOKEN"'                                00102700
&ZMS             SETC  '&ZMS "CONTOKEN"'                                00102800
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00102900
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00103000
.ZG15B           AIF   (K'&XCONTOKEN GT 0).ZG15C  ONE PARM              00103100
&ZXDUMMY1        SETC  ''          RESET IN/OUTPUT                      00103200
&ZXCONTOKEN      SETC  ''          RESET IN/OUTPUT                      00103300
&ZMS             SETC  'WHEN "STRUCTURE" IS SPECIFIED'  *KRQDA*         00103400
&ZMS             SETC  '&ZMS , "CONTOKEN" KEY AND ITS ARGUMENT'         00103500
                 MNOTE 8,' &ZMS ARE REQUIRED.'                          00103600
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00103700
.ZG15C           ANOP  ,                                                00103800
.*----------------------------------------------------------------***   00103900
.***AG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00104000
                 AIF   (K'&CONNAME LE 0).ZG16D  NO ME KEY               00104100
                 AIF   (N'&CONNAME LE 1).ZG16A  CK NUM                  00104200
&ZMS             SETC  '"CONNAME='              *KPOSA* MNOTE           00104300
&ZMS             SETC  '&ZMS.&CONNAME"'                                 00104400
&ZMS             SETC  '&ZMS "CONNAME"'                                 00104500
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00104600
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00104700
.ZG16A           AIF   (K'&XDUMMY1 LE 0).ZG16B                          00104800
&ZMS             SETC  '"CONNAME'  *KMEKA* MNOTE                        00104900
&ZMS             SETC  '&ZMS.=&CONNAME"'                                00105000
&ZMS             SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'            00105100
&ZMS             SETC  '&ZMS "&XDUMMY1"'                                00105200
                 MNOTE 8,' &ZMS KEY.'                                   00105300
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00105400
                 AGO   .ZG16D                                           00105500
.*                                                                      00105600
.ZG16B           ANOP  ,                                                00105700
&ZXDUMMY1        SETC  'INPUT'     SET IN/OUTPUT                        00105800
&XDUMMY1         SETC  'CONNAME'   SET XVARIABLE                        00105900
&ZXCONNAME       SETC  'INPUT'     SET IN/OUTPUT                        00106000
&XCONNAME        SETC  '&CONNAME(1)'            SET XVARIABLE PARM      00106100
                 AIF   (N'&CONNAME GT 1).ZG16C  MULTIPLE PARMS          00106200
&XCONNAME        SETC  '&CONNAME'  SET XVARIABLE PARM                   00106300
.ZG16C           AIF   (K'&XCONNAME GT 0).ZG16D  ONE PARM               00106400
&ZXDUMMY1        SETC  ''          RESET IN/OUTPUT                      00106500
&ZXCONNAME       SETC  ''          RESET IN/OUTPUT                      00106600
&ZMS             SETC  'WHEN "STRUCTURE" IS SPECIFIED'  *KRQDA*         00106700
&ZMS             SETC  '&ZMS , "CONNAME" KEY AND ITS ARGUMENT'          00106800
                 MNOTE 8,' &ZMS ARE REQUIRED.'                          00106900
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00107000
.ZG16D           ANOP  ,                                                00107100
.*------------------------------------------------------------------    00107200
.***AG.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED           00107300
                 AIF   (K'&XDUMMY1 GT 0).ZG17B                          00107400
&ZXDUMMY1        SETC  'INPUT'     SET IN/OUTPUT                        00107500
&XDUMMY1         SETC  'CONTOKEN'  SET DEFAULT                          00107600
&ZXCONTOKEN      SETC  'INPUT'     SET IN/OUTPUT                        00107700
&XCONTOKEN       SETC  'NONE'      SET DEFAULT PARM                     00107800
.ZG17B           ANOP  ,                                                00107900
.*-------------------------------------------------------------------   00108000
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE                 00108100
                 AIF   (K'&ZXCONNAME LE 0).ZG17R  NOT I/O               00108200
                 AIF   ('&XCONNAME' EQ 'NONE').ZG17R                    00108300
                 AIF   ('&XCONNAME'(1,1) NE '(').ZG17R                  00108400
&ZCGPR           SETC  '&XCONNAME'(2,K'&XCONNAME-2)                     00108500
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG17P                     00108600
                 AIF   (K'&ZCGPR GT 2).ZG17Q                            00108700
                 AIF   ('&ZCGPR' EQ '0').ZG17Q                          00108800
&ZCGPR           SETC  '&ZCGPR'(2,1)                                    00108900
                 AIF   (T'&ZCGPR NE 'N').ZG17Q  INVALID REG NAME        00109000
.ZG17P           ANOP  ,                                                00109100
                 AIF   (T'&ZCGPR NE 'N').ZG17R  NON NUMERIC             00109200
                 AIF   ('&ZCGPR' LT '2').ZG17Q                          00109300
                 AIF   ('&ZCGPR' LE '12').ZG17R                         00109400
.ZG17Q           ANOP  ,                                                00109500
&ZMS             SETC  '"CONNAME='              *KGPRA* MNOTE           00109600
&ZMS             SETC  '&ZMS.&CONNAME"'                                 00109700
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'        00109800
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                 00109900
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00110000
.ZG17R           ANOP  ,                                                00110100
.*-------------------------------------------------------------------   00110200
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00110300
.ZG15            AIF   ('&XDUMMY1' NE 'CONTOKEN').ZG16                  00110400
.*-------------------------------------------------------------------   00110500
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE                 00110600
                 AIF   (K'&ZXCONTOKEN LE 0).ZG15R  NOT I/O              00110700
                 AIF   ('&XCONTOKEN' EQ 'NONE').ZG15R                   00110800
                 AIF   ('&XCONTOKEN'(1,1) NE '(').ZG15R                 00110900
&ZCGPR           SETC  '&XCONTOKEN'(2,K'&XCONTOKEN-2)                   00111000
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG15P                     00111100
                 AIF   (K'&ZCGPR GT 2).ZG15Q                            00111200
                 AIF   ('&ZCGPR' EQ '0').ZG15Q                          00111300
&ZCGPR           SETC  '&ZCGPR'(2,1)                                    00111400
                 AIF   (T'&ZCGPR NE 'N').ZG15Q  INVALID REG NAME        00111500
.ZG15P           ANOP  ,                                                00111600
                 AIF   (T'&ZCGPR NE 'N').ZG15R  NON NUMERIC             00111700
                 AIF   ('&ZCGPR' LT '2').ZG15Q                          00111800
                 AIF   ('&ZCGPR' LE '12').ZG15R                         00111900
.ZG15Q           ANOP  ,                                                00112000
&ZMS             SETC  '"CONTOKEN='             *KGPRA* MNOTE           00112100
&ZMS             SETC  '&ZMS.&CONTOKEN"'                                00112200
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'        00112300
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                 00112400
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00112500
.ZG15R           ANOP  ,                                                00112600
.*-------------------------------------------------------------------   00112700
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00112800
.ZG16            AIF   ('&XDUMMY1' NE 'CONNAME').ZG17                   00112900
.*-------------------------------------------------------------------   00113000
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE                 00113100
                 AIF   (K'&ZXCONNAME LE 0).ZG16R  NOT I/O               00113200
                 AIF   ('&XCONNAME'(1,1) NE '(').ZG16R                  00113300
&ZCGPR           SETC  '&XCONNAME'(2,K'&XCONNAME-2)                     00113400
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG16P                     00113500
                 AIF   (K'&ZCGPR GT 2).ZG16Q                            00113600
                 AIF   ('&ZCGPR' EQ '0').ZG16Q                          00113700
&ZCGPR           SETC  '&ZCGPR'(2,1)                                    00113800
                 AIF   (T'&ZCGPR NE 'N').ZG16Q  INVALID REG NAME        00113900
.ZG16P           ANOP  ,                                                00114000
                 AIF   (T'&ZCGPR NE 'N').ZG16R  NON NUMERIC             00114100
                 AIF   ('&ZCGPR' LT '2').ZG16Q                          00114200
                 AIF   ('&ZCGPR' LE '12').ZG16R                         00114300
.ZG16Q           ANOP  ,                                                00114400
&ZMS             SETC  '"CONNAME='              *KGPRA* MNOTE           00114500
&ZMS             SETC  '&ZMS.&CONNAME"'                                 00114600
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'        00114700
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                 00114800
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00114900
.ZG16R           ANOP  ,                                                00115000
.*-------------------------------------------------------------------   00115100
.***AG.KMEKY15 NAME, OPT INPUT, ME KEYS -END                            00115200
.ZG17            ANOP  ,           END MUTUALLY EXCLUSIVE KEYS          00115300
.*-------------------------------------------------------------------   00115400
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00115500
.ZG18            ANOP  ,                                                00115600
&ZTLC            SETC 'STRRNG'                                          00115700
                 AIF   ('&TYPE(1)' NE '&ZTLC').ZG54                     00115800
&XTYPE           SETC  'STRRNG'    SET KEYWORD                          00115900
                 AIF   (N'&TYPE LE 1).ZG18A     CK NUM                  00116000
&ZMS             SETC  '"TYPE='    *KPOSA* MNOTE                        00116100
&ZMS             SETC  '&ZMS.&TYPE"'                                    00116200
&ZMS             SETC  '&ZMS "TYPE"'                                    00116300
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00116400
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00116500
.ZG18A           ANOP  ,                                                00116600
.*------------------------------------------------------------------    00116700
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00116800
&ZCVAL           SETC ''           CLEAR ERROR KEY ACCUMULATOR          00116900
.ZG18A0          AIF   (K'&PARMLENGTH LE 0).ZG18A1  OK                  00117000
&ZCVAL           SETC '&ZCVAL PARMLENGTH'       INCORRECT KEY USED      00117100
.ZG18A1          AIF   (K'&STRNAME LE 0).ZG18A2  OK                     00117200
&ZCVAL           SETC '&ZCVAL STRNAME'          INCORRECT KEY USED      00117300
.ZG18A2          AIF   (K'&CONTOKEN LE 0).ZG18A3  OK                    00117400
&ZCVAL           SETC '&ZCVAL CONTOKEN'         INCORRECT KEY USED      00117500
.ZG18A3          AIF   (K'&CONNAME LE 0).ZG18A4  OK                     00117600
&ZCVAL           SETC '&ZCVAL CONNAME'          INCORRECT KEY USED      00117700
.ZG18A4          AIF   (K'&OPTION LE 0).ZG18A5  OK                      00117800
&ZCVAL           SETC '&ZCVAL OPTION'           INCORRECT KEY USED      00117900
.ZG18A5          AIF   (K'&ZCVAL LE 0).ZG18A6   OK                      00118000
&ZCVAL           SETC '&ZCVAL'(2,K'&ZCVAL-1)                            00118100
&ZMS             SETC  '"TYPE'     *KMEIA* MNOTE                        00118200
&ZMS             SETC  '&ZMS.=&TYPE"'                                   00118300
&ZMS             SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'             00118400
                 MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'             00118500
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00118600
.ZG18A6          ANOP  ,                                                00118700
.*------------------------------------------------------------------    00118800
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00118900
&XOBJECT         SETC  ''          INITIALIZE XVARIABLE                 00119000
.*-------------------------------------------------------------------   00119100
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00119200
.ZG21            ANOP  ,                                                00119300
                 AIF   (K'&OBJECT(1) LE 0).ZG21A                        00119400
&ZTLC            SETC 'COCLASS'                                         00119500
                 AIF   ('&OBJECT(1)' NE '&ZTLC').ZG22                   00119600
&XOBJECT         SETC  'COCLASS'   SET KEYWORD                          00119700
                 AIF   (N'&OBJECT LE 1).ZG21A   CK NUM                  00119800
&ZMS             SETC  '"OBJECT='  *KPOSA* MNOTE                        00119900
&ZMS             SETC  '&ZMS.&OBJECT"'                                  00120000
&ZMS             SETC  '&ZMS "OBJECT"'                                  00120100
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00120200
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00120300
.ZG21A           ANOP  ,                                                00120400
.*-------------------------------------------------------------------   00120500
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00120600
.ZG22            ANOP  ,                                                00120700
&ZTLC            SETC 'STGCLASS'                                        00120800
                 AIF   ('&OBJECT(1)' NE '&ZTLC').ZG23                   00120900
&XOBJECT         SETC  'STGCLASS'  SET KEYWORD                          00121000
                 AIF   (N'&OBJECT LE 1).ZG22A   CK NUM                  00121100
&ZMS             SETC  '"OBJECT='  *KPOSA* MNOTE                        00121200
&ZMS             SETC  '&ZMS.&OBJECT"'                                  00121300
&ZMS             SETC  '&ZMS "OBJECT"'                                  00121400
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00121500
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00121600
.ZG22A           ANOP  ,                                                00121700
.*-------------------------------------------------------------------   00121800
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00121900
.ZG23            ANOP  ,                                                00122000
&ZTLC            SETC 'LISTNUM'                                         00122100
                 AIF   ('&OBJECT(1)' NE '&ZTLC').ZG24                   00122200
&XOBJECT         SETC  'LISTNUM'   SET KEYWORD                          00122300
                 AIF   (N'&OBJECT LE 1).ZG23A   CK NUM                  00122400
&ZMS             SETC  '"OBJECT='  *KPOSA* MNOTE                        00122500
&ZMS             SETC  '&ZMS.&OBJECT"'                                  00122600
&ZMS             SETC  '&ZMS "OBJECT"'                                  00122700
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00122800
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00122900
.ZG23A           ANOP  ,                                                00123000
.*-------------------------------------------------------------------   00123100
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00123200
.ZG24            ANOP  ,                                                00123300
&ZTLC            SETC 'EMCONTROLS'                                      00123400
                 AIF   ('&OBJECT(1)' NE '&ZTLC').ZG25                   00123500
&XOBJECT         SETC  'EMCONTROLS'             SET KEYWORD             00123600
                 AIF   (N'&OBJECT LE 1).ZG24A   CK NUM                  00123700
&ZMS             SETC  '"OBJECT='  *KPOSA* MNOTE                        00123800
&ZMS             SETC  '&ZMS.&OBJECT"'                                  00123900
&ZMS             SETC  '&ZMS "OBJECT"'                                  00124000
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00124100
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00124200
.ZG24A           ANOP  ,                                                00124300
.*------------------------------------------------------------------    00124400
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00124500
.ZG25            ANOP  ,                                                00124600
&ZXOBJECT        SETC  'INPUT'     SET IN/OUTPUT                        00124700
                 AIF   (K'&XOBJECT GT 0).ZG25E  VALID ARG               00124800
                 AIF   (T'&OBJECT EQ 'O').ZG25D  OMITTED                00124900
&ZASYSLNDX       SETA  0                                                00125000
.ZG25A           ANOP  ,           POSITIONAL MACRO KEY                 00125100
&ZASYSLNDX       SETA  &ZASYSLNDX+1                                     00125200
                 AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG25C                 00125300
&ZTLC            SETC 'OBJECT'                                          00125400
                 AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG25A        00125500
.ZG25B           ANOP  ,                                                00125600
&ZXOBJECT        SETC  ''          RESET IN/OUTPUT                      00125700
&ZMS             SETC  'THE "OBJECT" KEY'       *KOPTA* MNOTE           00125800
&ZMS             SETC  '&ZMS MUST CONTAIN ONE'                          00125900
                 MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                 00126000
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00126100
                 AGO   .ZG25E                                           00126200
.ZG25C           ANOP  ,                                                00126300
&ZXOBJECT        SETC  ''          RESET IN/OUTPUT                      00126400
&ZMS             SETC  '"OBJECT='  *KUKWA* MNOTE                        00126500
&ZMS             SETC  '&ZMS.&OBJECT"'                                  00126600
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '        00126700
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'              00126800
&ZMS             SETC  '&ZMS "COCLASS",'        VALID KEYWORD           00126900
&ZMS             SETC  '&ZMS "STGCLASS",'       VALID KEYWORD           00127000
&ZMS             SETC  '&ZMS "LISTNUM",'        VALID KEYWORD           00127100
&ZMS             SETC  '&ZMS OR "EMCONTROLS".'  VALID KEYWORD           00127200
                 MNOTE 8,' &ZMS '                                       00127300
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00127400
                 AGO   .ZG25E                                           00127500
.ZG25D           ANOP  ,                                                00127600
&XOBJECT         SETC  'COCLASS'   SET DEFAULT KEYWORD                  00127700
.ZG25E           ANOP  ,                                                00127800
.*------------------------------------------------------------------    00127900
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00128000
                 AIF   (K'&OBJECT(1) GT 0).ZG25F  PARM                  00128100
&XOBJECT         SETC  ''          ENSURE NULL KEYWORD                  00128200
&ZXOBJECT        SETC  ''          RESET IN/OUTPUT                      00128300
&ZMS             SETC  'THE'                                            00128400
&ZMS             SETC  '&ZMS "OBJECT" KEY AND ITS ARGUMENT'             00128500
&ZMS             SETC  '&ZMS ARE REQUIRED.'                             00128600
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'              00128700
&ZMS             SETC  '&ZMS "COCLASS",'        VALID KEYWORD           00128800
&ZMS             SETC  '&ZMS "STGCLASS",'       VALID KEYWORD           00128900
&ZMS             SETC  '&ZMS "LISTNUM",'        VALID KEYWORD           00129000
&ZMS             SETC  '&ZMS OR "EMCONTROLS".'  VALID KEYWORD           00129100
                 MNOTE 8,' &ZMS '                                       00129200
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00129300
.ZG25F           ANOP  ,                                                00129400
.*------------------------------------------------------------------    00129500
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00129600
&XDUMP           SETC  ''          INITIALIZE XVARIABLE                 00129700
.*-------------------------------------------------------------------   00129800
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00129900
.ZG28            ANOP  ,                                                00130000
                 AIF   (K'&DUMP(1) LE 0).ZG28A                          00130100
&ZTLC            SETC 'ALL'                                             00130200
                 AIF   ('&DUMP(1)' NE '&ZTLC').ZG29                     00130300
&XDUMP           SETC  'ALL'       SET KEYWORD                          00130400
                 AIF   (N'&DUMP LE 1).ZG28A     CK NUM                  00130500
&ZMS             SETC  '"DUMP='    *KPOSA* MNOTE                        00130600
&ZMS             SETC  '&ZMS.&DUMP"'                                    00130700
&ZMS             SETC  '&ZMS "DUMP"'                                    00130800
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00130900
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00131000
.ZG28A           ANOP  ,                                                00131100
.*------------------------------------------------------------------    00131200
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00131300
&ZCVAL           SETC ''           CLEAR ERROR KEY ACCUMULATOR          00131400
.ZG28A0          AIF   (K'&STARTVAL LE 0).ZG28A1  OK                    00131500
&ZCVAL           SETC '&ZCVAL STARTVAL'         INCORRECT KEY USED      00131600
.ZG28A1          AIF   (K'&ENDVAL LE 0).ZG28A2  OK                      00131700
&ZCVAL           SETC '&ZCVAL ENDVAL'           INCORRECT KEY USED      00131800
.ZG28A2          AIF   (K'&ZCVAL LE 0).ZG28A3   OK                      00131900
&ZCVAL           SETC '&ZCVAL'(2,K'&ZCVAL-1)                            00132000
&ZMS             SETC  '"DUMP'     *KMEIA* MNOTE                        00132100
&ZMS             SETC  '&ZMS.=&DUMP"'                                   00132200
&ZMS             SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'             00132300
                 MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'             00132400
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00132500
.ZG28A3          ANOP  ,                                                00132600
.*-------------------------------------------------------------------   00132700
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00132800
.ZG29            ANOP  ,                                                00132900
&ZTLC            SETC 'RANGE'                                           00133000
                 AIF   ('&DUMP(1)' NE '&ZTLC').ZG36                     00133100
&XDUMP           SETC  'RANGE'     SET KEYWORD                          00133200
                 AIF   (N'&DUMP LE 1).ZG29A     CK NUM                  00133300
&ZMS             SETC  '"DUMP='    *KPOSA* MNOTE                        00133400
&ZMS             SETC  '&ZMS.&DUMP"'                                    00133500
&ZMS             SETC  '&ZMS "DUMP"'                                    00133600
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00133700
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00133800
.ZG29A           ANOP  ,                                                00133900
.*----------------------------------------------------------------***   00134000
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00134100
                 AIF   (N'&STARTVAL LE 1).ZG31A  CK NUM                 00134200
&ZMS             SETC  '"STARTVAL='             *KPOSA* MNOTE           00134300
&ZMS             SETC  '&ZMS.&STARTVAL"'                                00134400
&ZMS             SETC  '&ZMS "STARTVAL"'                                00134500
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00134600
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00134700
.ZG31A           ANOP  ,                                                00134800
.*-------------------------------------------------------------------   00134900
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00135000
&ZXSTARTVAL      SETC  'INPUT'     SET IN/OUTPUT                        00135100
&XSTARTVAL       SETC  '&STARTVAL(1)'           SET XVARIABLE           00135200
                 AIF   (N'&STARTVAL GT 1).ZG31B  MULTI PARMS            00135300
&XSTARTVAL       SETC  '&STARTVAL'              SET XVARIABLE           00135400
.ZG31B           AIF   (K'&STARTVAL(1) GT 0).ZG31C                      00135500
&ZXSTARTVAL      SETC  ''          RESET IN/OUTPUT                      00135600
&ZMS             SETC  ' '         *KRQDA*                              00135700
&ZMS             SETC  '&ZMS "STARTVAL" KEY AND ITS ARGUMENT'           00135800
                 MNOTE 8,' &ZMS ARE REQUIRED.'                          00135900
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00136000
.ZG31C           ANOP  ,                                                00136100
.*-------------------------------------------------------------------   00136200
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00136300
                 AIF   (K'&ZXSTARTVAL LE 0).ZG31R  NOT I/O              00136400
                 AIF   ('&XSTARTVAL'(1,1) NE '(').ZG31R                 00136500
&ZCGPR           SETC  '&XSTARTVAL'(2,K'&XSTARTVAL-2)                   00136600
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG31P                     00136700
                 AIF   (K'&ZCGPR GT 2).ZG31Q                            00136800
                 AIF   ('&ZCGPR' EQ '0').ZG31Q                          00136900
&ZCGPR           SETC  '&ZCGPR'(2,1)                                    00137000
                 AIF   (T'&ZCGPR NE 'N').ZG31Q  INVALID REG NAME        00137100
.ZG31P           ANOP  ,                                                00137200
                 AIF   (T'&ZCGPR NE 'N').ZG31R  NON NUMERIC             00137300
                 AIF   ('&ZCGPR' LT '2').ZG31Q                          00137400
                 AIF   ('&ZCGPR' LE '12').ZG31R                         00137500
.ZG31Q           ANOP  ,                                                00137600
&ZMS             SETC  '"STARTVAL='             *KGPRA* MNOTE           00137700
&ZMS             SETC  '&ZMS.&STARTVAL"'                                00137800
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'        00137900
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                 00138000
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00138100
.ZG31R           ANOP  ,                                                00138200
.*----------------------------------------------------------------***   00138300
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00138400
                 AIF   (N'&ENDVAL LE 1).ZG34A   CK NUM                  00138500
&ZMS             SETC  '"ENDVAL='  *KPOSA* MNOTE                        00138600
&ZMS             SETC  '&ZMS.&ENDVAL"'                                  00138700
&ZMS             SETC  '&ZMS "ENDVAL"'                                  00138800
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00138900
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00139000
.ZG34A           ANOP  ,                                                00139100
.*-------------------------------------------------------------------   00139200
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00139300
&ZXENDVAL        SETC  'INPUT'     SET IN/OUTPUT                        00139400
&XENDVAL         SETC  'NONE'                                           00139500
                 AIF   (K'&ENDVAL(1) LE 0).ZG34B  PARM                  00139600
&XENDVAL         SETC  '&ENDVAL(1)'             SET XVARIABLE           00139700
                 AIF   (N'&ENDVAL GT 1).ZG34B   MULTI PARMS             00139800
&XENDVAL         SETC  '&ENDVAL'   SET XVARIABLE                        00139900
.ZG34B           ANOP  ,                                                00140000
.*-------------------------------------------------------------------   00140100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00140200
                 AIF   (K'&ZXENDVAL LE 0).ZG34R  NOT I/O                00140300
                 AIF   ('&XENDVAL' EQ 'NONE').ZG34R                     00140400
                 AIF   ('&XENDVAL'(1,1) NE '(').ZG34R                   00140500
&ZCGPR           SETC  '&XENDVAL'(2,K'&XENDVAL-2)                       00140600
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG34P                     00140700
                 AIF   (K'&ZCGPR GT 2).ZG34Q                            00140800
                 AIF   ('&ZCGPR' EQ '0').ZG34Q                          00140900
&ZCGPR           SETC  '&ZCGPR'(2,1)                                    00141000
                 AIF   (T'&ZCGPR NE 'N').ZG34Q  INVALID REG NAME        00141100
.ZG34P           ANOP  ,                                                00141200
                 AIF   (T'&ZCGPR NE 'N').ZG34R  NON NUMERIC             00141300
                 AIF   ('&ZCGPR' LT '2').ZG34Q                          00141400
                 AIF   ('&ZCGPR' LE '12').ZG34R                         00141500
.ZG34Q           ANOP  ,                                                00141600
&ZMS             SETC  '"ENDVAL='  *KGPRA* MNOTE                        00141700
&ZMS             SETC  '&ZMS.&ENDVAL"'                                  00141800
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'        00141900
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                 00142000
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00142100
.ZG34R           ANOP  ,                                                00142200
.*------------------------------------------------------------------    00142300
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00142400
.ZG36            ANOP  ,                                                00142500
&ZXDUMP          SETC  'INPUT'     SET IN/OUTPUT                        00142600
                 AIF   (K'&XDUMP GT 0).ZG36E    VALID ARG               00142700
                 AIF   (T'&DUMP EQ 'O').ZG36D   OMITTED                 00142800
&ZASYSLNDX       SETA  0                                                00142900
.ZG36A           ANOP  ,           POSITIONAL MACRO KEY                 00143000
&ZASYSLNDX       SETA  &ZASYSLNDX+1                                     00143100
                 AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG36C                 00143200
&ZTLC            SETC 'DUMP'                                            00143300
                 AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG36A        00143400
.ZG36B           ANOP  ,                                                00143500
&ZXDUMP          SETC  ''          RESET IN/OUTPUT                      00143600
&ZMS             SETC  'THE "DUMP" KEY'         *KOPTA* MNOTE           00143700
&ZMS             SETC  '&ZMS MUST CONTAIN ONE'                          00143800
                 MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                 00143900
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00144000
                 AGO   .ZG36E                                           00144100
.ZG36C           ANOP  ,                                                00144200
&ZXDUMP          SETC  ''          RESET IN/OUTPUT                      00144300
&ZMS             SETC  '"DUMP='    *KUKWA* MNOTE                        00144400
&ZMS             SETC  '&ZMS.&DUMP"'                                    00144500
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '        00144600
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'              00144700
&ZMS             SETC  '&ZMS "ALL"'             VALID KEYWORD           00144800
&ZMS             SETC  '&ZMS OR "RANGE".'       VALID KEYWORD           00144900
                 MNOTE 8,' &ZMS '                                       00145000
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00145100
                 AGO   .ZG36E                                           00145200
.ZG36D           ANOP  ,                                                00145300
&XDUMP           SETC  'ALL'       SET DEFAULT KEYWORD                  00145400
.ZG36E           ANOP  ,                                                00145500
.*------------------------------------------------------------------    00145600
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00145700
                 AIF   (K'&DUMP(1) GT 0).ZG36F  PARM                    00145800
&XDUMP           SETC  ''          ENSURE NULL KEYWORD                  00145900
&ZXDUMP          SETC  ''          RESET IN/OUTPUT                      00146000
&ZMS             SETC  'THE'                                            00146100
&ZMS             SETC  '&ZMS "DUMP" KEY AND ITS ARGUMENT'               00146200
&ZMS             SETC  '&ZMS ARE REQUIRED.'                             00146300
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'              00146400
&ZMS             SETC  '&ZMS "ALL"'             VALID KEYWORD           00146500
&ZMS             SETC  '&ZMS OR "RANGE".'       VALID KEYWORD           00146600
                 MNOTE 8,' &ZMS '                                       00146700
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00146800
.ZG36F           ANOP  ,                                                00146900
.*----------------------------------------------------------------***   00147000
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00147100
                 AIF   (N'&ADJUNCT LE 1).ZG38A  CK NUM                  00147200
&ZMS             SETC  '"ADJUNCT='              *KPOSA* MNOTE           00147300
&ZMS             SETC  '&ZMS.&ADJUNCT"'                                 00147400
&ZMS             SETC  '&ZMS "ADJUNCT"'                                 00147500
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00147600
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00147700
.ZG38A           ANOP  ,                                                00147800
.*-------------------------------------------------------------------   00147900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00148000
&XADJUNCT        SETC  ''          INITIALIZE XVARIABLE                 00148100
.ZG39A   AIF   ('&ADJUNCT(1)' NE 'NO').ZG40A                            00148200
&XADJUNCT        SETC  'NO'        SET KEYWORD                          00148300
.*-------------------------------------------------------------------   00148400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00148500
.ZG40A   AIF   ('&ADJUNCT(1)' NE 'CAPTURE').ZG41A                       00148600
&XADJUNCT        SETC  'CAPTURE'   SET KEYWORD                          00148700
.*-------------------------------------------------------------------   00148800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00148900
.ZG41A   AIF   ('&ADJUNCT(1)' NE 'DIRECTIO').ZG42A                      00149000
&XADJUNCT        SETC  'DIRECTIO'  SET KEYWORD                          00149100
.*-------------------------------------------------------------------   00149200
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00149300
.ZG42A           AIF   (K'&XADJUNCT GT 0).ZG42C  KEYWORD                00149400
                 AIF   (K'&ADJUNCT(1) LE 0).ZG42B                       00149500
&ZMS             SETC  '"ADJUNCT='              *KUKWA* MNOTE           00149600
&ZMS             SETC  '&ZMS.&ADJUNCT"'                                 00149700
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '        00149800
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'              00149900
&ZMS             SETC  '&ZMS "NO",'             VALID KEYWORD           00150000
&ZMS             SETC  '&ZMS "CAPTURE",'        VALID KEYWORD           00150100
&ZMS             SETC  '&ZMS OR "DIRECTIO".'    VALID KEYWORD           00150200
                 MNOTE 8,' &ZMS '                                       00150300
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00150400
.ZG42B           ANOP  ,                                                00150500
&XADJUNCT        SETC  'NO'        SET DEFAULT KEYWORD                  00150600
.ZG42C           ANOP  ,                                                00150700
&ZXADJUNCT       SETC  'INPUT'     SET IN/OUTPUT                        00150800
.*----------------------------------------------------------------***   00150900
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00151000
                 AIF   (N'&ENTRYDATA LE 1).ZG44A  CK NUM                00151100
&ZMS             SETC  '"ENTRYDATA='            *KPOSA* MNOTE           00151200
&ZMS             SETC  '&ZMS.&ENTRYDATA"'                               00151300
&ZMS             SETC  '&ZMS "ENTRYDATA"'                               00151400
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00151500
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00151600
.ZG44A           ANOP  ,                                                00151700
.*-------------------------------------------------------------------   00151800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00151900
&XENTRYDATA      SETC  ''          INITIALIZE XVARIABLE                 00152000
.ZG45A   AIF   ('&ENTRYDATA(1)' NE 'NO').ZG46A                          00152100
&XENTRYDATA      SETC  'NO'        SET KEYWORD                          00152200
.*-------------------------------------------------------------------   00152300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00152400
.ZG46A   AIF   ('&ENTRYDATA(1)' NE 'UNSERIALIZE').ZG47A                 00152500
&XENTRYDATA      SETC  'UNSERIALIZE'            SET KEYWORD             00152600
.*-------------------------------------------------------------------   00152700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00152800
.ZG47A   AIF   ('&ENTRYDATA(1)' NE 'SERIALIZE').ZG48A                   00152900
&XENTRYDATA      SETC  'SERIALIZE'              SET KEYWORD             00153000
.*-------------------------------------------------------------------   00153100
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00153200
.ZG48A           AIF   (K'&XENTRYDATA GT 0).ZG48C  KEYWORD              00153300
                 AIF   (K'&ENTRYDATA(1) LE 0).ZG48B                     00153400
&ZMS             SETC  '"ENTRYDATA='            *KUKWA* MNOTE           00153500
&ZMS             SETC  '&ZMS.&ENTRYDATA"'                               00153600
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '        00153700
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'              00153800
&ZMS             SETC  '&ZMS "NO",'             VALID KEYWORD           00153900
&ZMS             SETC  '&ZMS "UNSERIALIZE",'    VALID KEYWORD           00154000
&ZMS             SETC  '&ZMS OR "SERIALIZE".'   VALID KEYWORD           00154100
                 MNOTE 8,' &ZMS '                                       00154200
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00154300
.ZG48B           ANOP  ,                                                00154400
&XENTRYDATA      SETC  'NO'        SET DEFAULT KEYWORD                  00154500
.ZG48C           ANOP  ,                                                00154600
&ZXENTRYDATA     SETC  'INPUT'     SET IN/OUTPUT                        00154700
.*----------------------------------------------------------------***   00154800
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00154900
                 AIF   (N'&SUMMARY LE 1).ZG50A  CK NUM                  00155000
&ZMS             SETC  '"SUMMARY='              *KPOSA* MNOTE           00155100
&ZMS             SETC  '&ZMS.&SUMMARY"'                                 00155200
&ZMS             SETC  '&ZMS "SUMMARY"'                                 00155300
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00155400
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00155500
.ZG50A           ANOP  ,                                                00155600
.*-------------------------------------------------------------------   00155700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00155800
&XSUMMARY        SETC  ''          INITIALIZE XVARIABLE                 00155900
.ZG51A   AIF   ('&SUMMARY(1)' NE 'NO').ZG52A                            00156000
&XSUMMARY        SETC  'NO'        SET KEYWORD                          00156100
.*-------------------------------------------------------------------   00156200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00156300
.ZG52A   AIF   ('&SUMMARY(1)' NE 'YES').ZG53A                           00156400
&XSUMMARY        SETC  'YES'       SET KEYWORD                          00156500
.*-------------------------------------------------------------------   00156600
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00156700
.ZG53A           AIF   (K'&XSUMMARY GT 0).ZG53C  KEYWORD                00156800
                 AIF   (K'&SUMMARY(1) LE 0).ZG53B                       00156900
&ZMS             SETC  '"SUMMARY='              *KUKWA* MNOTE           00157000
&ZMS             SETC  '&ZMS.&SUMMARY"'                                 00157100
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '        00157200
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'              00157300
&ZMS             SETC  '&ZMS "NO"'              VALID KEYWORD           00157400
&ZMS             SETC  '&ZMS OR "YES".'         VALID KEYWORD           00157500
                 MNOTE 8,' &ZMS '                                       00157600
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00157700
.ZG53B           ANOP  ,                                                00157800
&XSUMMARY        SETC  'NO'        SET DEFAULT KEYWORD                  00157900
.ZG53C           ANOP  ,                                                00158000
&ZXSUMMARY       SETC  'INPUT'     SET IN/OUTPUT                        00158100
.*-------------------------------------------------------------------   00158200
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00158300
.ZG54            ANOP  ,                                                00158400
&ZTLC            SETC 'STROPT'                                          00158500
                 AIF   ('&TYPE(1)' NE '&ZTLC').ZG61                     00158600
&XTYPE           SETC  'STROPT'    SET KEYWORD                          00158700
                 AIF   (N'&TYPE LE 1).ZG54A     CK NUM                  00158800
&ZMS             SETC  '"TYPE='    *KPOSA* MNOTE                        00158900
&ZMS             SETC  '&ZMS.&TYPE"'                                    00159000
&ZMS             SETC  '&ZMS "TYPE"'                                    00159100
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00159200
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00159300
.ZG54A           ANOP  ,                                                00159400
.*------------------------------------------------------------------    00159500
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00159600
&ZCVAL           SETC ''           CLEAR ERROR KEY ACCUMULATOR          00159700
.ZG54A0          AIF   (K'&PARMLENGTH LE 0).ZG54A1  OK                  00159800
&ZCVAL           SETC '&ZCVAL PARMLENGTH'       INCORRECT KEY USED      00159900
.ZG54A1          AIF   (K'&STRNAME LE 0).ZG54A2  OK                     00160000
&ZCVAL           SETC '&ZCVAL STRNAME'          INCORRECT KEY USED      00160100
.ZG54A2          AIF   (K'&CONTOKEN LE 0).ZG54A3  OK                    00160200
&ZCVAL           SETC '&ZCVAL CONTOKEN'         INCORRECT KEY USED      00160300
.ZG54A3          AIF   (K'&CONNAME LE 0).ZG54A4  OK                     00160400
&ZCVAL           SETC '&ZCVAL CONNAME'          INCORRECT KEY USED      00160500
.ZG54A4          AIF   (K'&OBJECT LE 0).ZG54A5  OK                      00160600
&ZCVAL           SETC '&ZCVAL OBJECT'           INCORRECT KEY USED      00160700
.ZG54A5          AIF   (K'&DUMP LE 0).ZG54A6    OK                      00160800
&ZCVAL           SETC '&ZCVAL DUMP'             INCORRECT KEY USED      00160900
.ZG54A6          AIF   (K'&STARTVAL LE 0).ZG54A7  OK                    00161000
&ZCVAL           SETC '&ZCVAL STARTVAL'         INCORRECT KEY USED      00161100
.ZG54A7          AIF   (K'&ENDVAL LE 0).ZG54A8  OK                      00161200
&ZCVAL           SETC '&ZCVAL ENDVAL'           INCORRECT KEY USED      00161300
.ZG54A8          AIF   (K'&ADJUNCT LE 0).ZG54A9  OK                     00161400
&ZCVAL           SETC '&ZCVAL ADJUNCT'          INCORRECT KEY USED      00161500
.ZG54A9          AIF   (K'&ENTRYDATA LE 0).ZG54A10  OK                  00161600
&ZCVAL           SETC '&ZCVAL ENTRYDATA'        INCORRECT KEY USED      00161700
.ZG54A10         AIF   (K'&SUMMARY LE 0).ZG54A11  OK                    00161800
&ZCVAL           SETC '&ZCVAL SUMMARY'          INCORRECT KEY USED      00161900
.ZG54A11         AIF   (K'&ZCVAL LE 0).ZG54A12  OK                      00162000
&ZCVAL           SETC '&ZCVAL'(2,K'&ZCVAL-1)                            00162100
&ZMS             SETC  '"TYPE'     *KMEIA* MNOTE                        00162200
&ZMS             SETC  '&ZMS.=&TYPE"'                                   00162300
&ZMS             SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'             00162400
                 MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'             00162500
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00162600
.ZG54A12         ANOP  ,                                                00162700
.*----------------------------------------------------------------***   00162800
.***AG.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00162900
                 AIF   (N'&OPTION LE 1).ZG56A   CK NUM                  00163000
&ZMS             SETC  '"OPTION='  *KPOSA* MNOTE                        00163100
&ZMS             SETC  '&ZMS.&OPTION"'                                  00163200
&ZMS             SETC  '&ZMS "OPTION"'                                  00163300
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00163400
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00163500
.ZG56A           ANOP  ,                                                00163600
.*-------------------------------------------------------------------   00163700
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00163800
&XOPTION         SETC  ''          INITIALIZE XVARIABLE                 00163900
.ZG57A   AIF   ('&OPTION(1)' NE 'LOCKENTRIES').ZG58A                    00164000
&XOPTION         SETC  'LOCKENTRIES'            SET KEYWORD             00164100
.*-------------------------------------------------------------------   00164200
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00164300
.ZG58A   AIF   ('&OPTION(1)' NE 'USERCNTLS').ZG59A                      00164400
&XOPTION         SETC  'USERCNTLS'              SET KEYWORD             00164500
.*-------------------------------------------------------------------   00164600
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00164700
.ZG59A   AIF   ('&OPTION(1)' NE 'EVENTQS').ZG60A                        00164800
&XOPTION         SETC  'EVENTQS'   SET KEYWORD                          00164900
.*-------------------------------------------------------------------   00165000
.***AG.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00165100
.ZG60A           AIF   (K'&XOPTION GT 0).ZG60C  KEYWORD                 00165200
                 AIF   (K'&OPTION(1) LE 0).ZG60B                        00165300
&ZMS             SETC  '"OPTION='  *KUKWA* MNOTE                        00165400
&ZMS             SETC  '&ZMS.&OPTION"'                                  00165500
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '        00165600
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'              00165700
&ZMS             SETC  '&ZMS "LOCKENTRIES",'    VALID KEYWORD           00165800
&ZMS             SETC  '&ZMS "USERCNTLS",'      VALID KEYWORD           00165900
&ZMS             SETC  '&ZMS OR "EVENTQS".'     VALID KEYWORD           00166000
                 MNOTE 8,' &ZMS '                                       00166100
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00166200
.ZG60B           ANOP  ,                                                00166300
&XOPTION         SETC  'LOCKENTRIES'            SET DEFAULT KEYWORD     00166400
.ZG60C           ANOP  ,                                                00166500
&ZXOPTION        SETC  'INPUT'     SET IN/OUTPUT                        00166600
.*-------------------------------------------------------------------   00166700
.***AG.KKWRD04 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00166800
                 AIF   (K'&OPTION(1) GT 0).ZG60D  VALID                 00166900
&ZXOPTION        SETC  ''          RESET IN/OUTPUT                      00167000
&ZMS             SETC  'THE'                                            00167100
&ZMS             SETC  '&ZMS "OPTION" KEY AND ITS ARGUMENT'             00167200
&ZMS             SETC  '&ZMS ARE REQUIRED.'                             00167300
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'              00167400
&ZMS             SETC  '&ZMS "LOCKENTRIES",'    VALID KEYWORD           00167500
&ZMS             SETC  '&ZMS "USERCNTLS",'      VALID KEYWORD           00167600
&ZMS             SETC  '&ZMS OR "EVENTQS".'     VALID KEYWORD           00167700
                 MNOTE 8,' &ZMS '                                       00167800
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00167900
.ZG60D           ANOP  ,                                                00168000
.*-------------------------------------------------------------------   00168100
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00168200
.ZG61            ANOP  ,                                                00168300
&ZTLC            SETC 'ENDLIST'                                         00168400
                 AIF   ('&TYPE(1)' NE '&ZTLC').ZG62                     00168500
&XTYPE           SETC  'ENDLIST'   SET KEYWORD                          00168600
                 AIF   (N'&TYPE LE 1).ZG61A     CK NUM                  00168700
&ZMS             SETC  '"TYPE='    *KPOSA* MNOTE                        00168800
&ZMS             SETC  '&ZMS.&TYPE"'                                    00168900
&ZMS             SETC  '&ZMS "TYPE"'                                    00169000
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00169100
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00169200
.ZG61A           ANOP  ,                                                00169300
.*------------------------------------------------------------------    00169400
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00169500
&ZCVAL           SETC ''           CLEAR ERROR KEY ACCUMULATOR          00169600
.ZG61A0          AIF   (K'&PARMLENGTH LE 0).ZG61A1  OK                  00169700
&ZCVAL           SETC '&ZCVAL PARMLENGTH'       INCORRECT KEY USED      00169800
.ZG61A1          AIF   (K'&STRNAME LE 0).ZG61A2  OK                     00169900
&ZCVAL           SETC '&ZCVAL STRNAME'          INCORRECT KEY USED      00170000
.ZG61A2          AIF   (K'&CONTOKEN LE 0).ZG61A3  OK                    00170100
&ZCVAL           SETC '&ZCVAL CONTOKEN'         INCORRECT KEY USED      00170200
.ZG61A3          AIF   (K'&CONNAME LE 0).ZG61A4  OK                     00170300
&ZCVAL           SETC '&ZCVAL CONNAME'          INCORRECT KEY USED      00170400
.ZG61A4          AIF   (K'&OBJECT LE 0).ZG61A5  OK                      00170500
&ZCVAL           SETC '&ZCVAL OBJECT'           INCORRECT KEY USED      00170600
.ZG61A5          AIF   (K'&DUMP LE 0).ZG61A6    OK                      00170700
&ZCVAL           SETC '&ZCVAL DUMP'             INCORRECT KEY USED      00170800
.ZG61A6          AIF   (K'&STARTVAL LE 0).ZG61A7  OK                    00170900
&ZCVAL           SETC '&ZCVAL STARTVAL'         INCORRECT KEY USED      00171000
.ZG61A7          AIF   (K'&ENDVAL LE 0).ZG61A8  OK                      00171100
&ZCVAL           SETC '&ZCVAL ENDVAL'           INCORRECT KEY USED      00171200
.ZG61A8          AIF   (K'&ADJUNCT LE 0).ZG61A9  OK                     00171300
&ZCVAL           SETC '&ZCVAL ADJUNCT'          INCORRECT KEY USED      00171400
.ZG61A9          AIF   (K'&ENTRYDATA LE 0).ZG61A10  OK                  00171500
&ZCVAL           SETC '&ZCVAL ENTRYDATA'        INCORRECT KEY USED      00171600
.ZG61A10         AIF   (K'&SUMMARY LE 0).ZG61A11  OK                    00171700
&ZCVAL           SETC '&ZCVAL SUMMARY'          INCORRECT KEY USED      00171800
.ZG61A11         AIF   (K'&OPTION LE 0).ZG61A12  OK                     00171900
&ZCVAL           SETC '&ZCVAL OPTION'           INCORRECT KEY USED      00172000
.ZG61A12         AIF   (K'&ZCVAL LE 0).ZG61A13  OK                      00172100
&ZCVAL           SETC '&ZCVAL'(2,K'&ZCVAL-1)                            00172200
&ZMS             SETC  '"TYPE'     *KMEIA* MNOTE                        00172300
&ZMS             SETC  '&ZMS.=&TYPE"'                                   00172400
&ZMS             SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'             00172500
                 MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'             00172600
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00172700
.ZG61A13         ANOP  ,                                                00172800
.*------------------------------------------------------------------    00172900
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00173000
.ZG62            ANOP  ,                                                00173100
&ZXTYPE          SETC  'INPUT'     SET IN/OUTPUT                        00173200
                 AIF   (K'&XTYPE GT 0).ZG62E    VALID ARG               00173300
                 AIF   (T'&TYPE EQ 'O').ZG62D   OMITTED                 00173400
&ZASYSLNDX       SETA  0                                                00173500
.ZG62A           ANOP  ,           POSITIONAL MACRO KEY                 00173600
&ZASYSLNDX       SETA  &ZASYSLNDX+1                                     00173700
                 AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG62C                 00173800
&ZTLC            SETC 'TYPE'                                            00173900
                 AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG62A        00174000
.ZG62B           ANOP  ,                                                00174100
&ZXTYPE          SETC  ''          RESET IN/OUTPUT                      00174200
&ZMS             SETC  'THE "TYPE" KEY'         *KOPTA* MNOTE           00174300
&ZMS             SETC  '&ZMS MUST CONTAIN ONE'                          00174400
                 MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                 00174500
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00174600
                 AGO   .ZG62E                                           00174700
.ZG62C           ANOP  ,                                                00174800
&ZXTYPE          SETC  ''          RESET IN/OUTPUT                      00174900
&ZMS             SETC  '"TYPE='    *KUKWA* MNOTE                        00175000
&ZMS             SETC  '&ZMS.&TYPE"'                                    00175100
&ZMS             SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '        00175200
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'              00175300
&ZMS             SETC  '&ZMS "INITIAL",'        VALID KEYWORD           00175400
&ZMS             SETC  '&ZMS "STRUCTURE",'      VALID KEYWORD           00175500
&ZMS             SETC  '&ZMS "STRRNG",'         VALID KEYWORD           00175600
&ZMS             SETC  '&ZMS "STROPT",'         VALID KEYWORD           00175700
&ZMS             SETC  '&ZMS OR "ENDLIST".'     VALID KEYWORD           00175800
                 MNOTE 8,' &ZMS '                                       00175900
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00176000
                 AGO   .ZG62E                                           00176100
.ZG62D           ANOP  ,                                                00176200
&XTYPE           SETC  'INITIAL'   SET DEFAULT KEYWORD                  00176300
.ZG62E           ANOP  ,                                                00176400
.*------------------------------------------------------------------    00176500
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00176600
                 AIF   (K'&TYPE(1) GT 0).ZG62F  PARM                    00176700
&XTYPE           SETC  ''          ENSURE NULL KEYWORD                  00176800
&ZXTYPE          SETC  ''          RESET IN/OUTPUT                      00176900
&ZMS             SETC  'THE'                                            00177000
&ZMS             SETC  '&ZMS "TYPE" KEY AND ITS ARGUMENT'               00177100
&ZMS             SETC  '&ZMS ARE REQUIRED.'                             00177200
&ZMS             SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'              00177300
&ZMS             SETC  '&ZMS "INITIAL",'        VALID KEYWORD           00177400
&ZMS             SETC  '&ZMS "STRUCTURE",'      VALID KEYWORD           00177500
&ZMS             SETC  '&ZMS "STRRNG",'         VALID KEYWORD           00177600
&ZMS             SETC  '&ZMS "STROPT",'         VALID KEYWORD           00177700
&ZMS             SETC  '&ZMS OR "ENDLIST".'     VALID KEYWORD           00177800
                 MNOTE 8,' &ZMS '                                       00177900
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00178000
.ZG62F           ANOP  ,                                                00178100
.*----------------------------------------------------------------***   00178200
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00178300
                 AIF   (N'&RETCODE LE 1).ZG64A  CK NUM                  00178400
&ZMS             SETC  '"RETCODE='              *KPOSA* MNOTE           00178500
&ZMS             SETC  '&ZMS.&RETCODE"'                                 00178600
&ZMS             SETC  '&ZMS "RETCODE"'                                 00178700
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00178800
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00178900
.ZG64A           ANOP  ,                                                00179000
.*-------------------------------------------------------------------   00179100
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00179200
                 AIF   (K'&RETCODE(1) LE 0).ZG64C  NO PARM              00179300
&ZXRETCODE       SETC  'OUTPUT'    SET OUTPUT                           00179400
&XRETCODE        SETC  '&RETCODE(1)'            SET XVARIABLE           00179500
                 AIF   (N'&RETCODE GT 1).ZG64C                          00179600
&XRETCODE        SETC  '&RETCODE'  SET XVARIABLE                        00179700
.ZG64C           ANOP  ,                                                00179800
.*-------------------------------------------------------------------   00179900
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00180000
                 AIF   (K'&ZXRETCODE LE 0).ZG64R  NOT I/O               00180100
                 AIF   ('&XRETCODE'(1,1) NE '(').ZG64R                  00180200
&ZCGPR           SETC  '&XRETCODE'(2,K'&XRETCODE-2)                     00180300
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG64P                     00180400
                 AIF   (K'&ZCGPR GT 2).ZG64Q                            00180500
                 AIF   ('&ZCGPR' EQ '0').ZG64Q                          00180600
&ZCGPR           SETC  '&ZCGPR'(2,1)                                    00180700
                 AIF   (T'&ZCGPR NE 'N').ZG64Q  INVALID REG NAME        00180800
.ZG64P           ANOP  ,                                                00180900
                 AIF   (T'&ZCGPR NE 'N').ZG64R  NON NUMERIC             00181000
                 AIF   ('&ZCGPR' LT '2').ZG64Q                          00181100
                 AIF   ('&ZCGPR' LE '12').ZG64R                         00181200
.ZG64Q           ANOP  ,                                                00181300
&ZMS             SETC  '"RETCODE='              *KGPRA* MNOTE           00181400
&ZMS             SETC  '&ZMS.&RETCODE"'                                 00181500
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'        00181600
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                 00181700
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00181800
.ZG64R           ANOP  ,                                                00181900
.*----------------------------------------------------------------***   00182000
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00182100
                 AIF   (N'&RSNCODE LE 1).ZG67A  CK NUM                  00182200
&ZMS             SETC  '"RSNCODE='              *KPOSA* MNOTE           00182300
&ZMS             SETC  '&ZMS.&RSNCODE"'                                 00182400
&ZMS             SETC  '&ZMS "RSNCODE"'                                 00182500
                 MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'              00182600
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00182700
.ZG67A           ANOP  ,                                                00182800
.*-------------------------------------------------------------------   00182900
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00183000
                 AIF   (K'&RSNCODE(1) LE 0).ZG67C  NO PARM              00183100
&ZXRSNCODE       SETC  'OUTPUT'    SET OUTPUT                           00183200
&XRSNCODE        SETC  '&RSNCODE(1)'            SET XVARIABLE           00183300
                 AIF   (N'&RSNCODE GT 1).ZG67C                          00183400
&XRSNCODE        SETC  '&RSNCODE'  SET XVARIABLE                        00183500
.ZG67C           ANOP  ,                                                00183600
.*-------------------------------------------------------------------   00183700
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00183800
                 AIF   (K'&ZXRSNCODE LE 0).ZG67R  NOT I/O               00183900
                 AIF   ('&XRSNCODE'(1,1) NE '(').ZG67R                  00184000
&ZCGPR           SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                     00184100
                 AIF   ('&ZCGPR'(1,1) NE '0').ZG67P                     00184200
                 AIF   (K'&ZCGPR GT 2).ZG67Q                            00184300
                 AIF   ('&ZCGPR' EQ '0').ZG67Q                          00184400
&ZCGPR           SETC  '&ZCGPR'(2,1)                                    00184500
                 AIF   (T'&ZCGPR NE 'N').ZG67Q  INVALID REG NAME        00184600
.ZG67P           ANOP  ,                                                00184700
                 AIF   (T'&ZCGPR NE 'N').ZG67R  NON NUMERIC             00184800
                 AIF   ('&ZCGPR' LT '2').ZG67Q                          00184900
                 AIF   ('&ZCGPR' LE '12').ZG67R                         00185000
.ZG67Q           ANOP  ,                                                00185100
&ZMS             SETC  '"RSNCODE='              *KGPRA* MNOTE           00185200
&ZMS             SETC  '&ZMS.&RSNCODE"'                                 00185300
&ZMS             SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'        00185400
                 MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                 00185500
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00185600
.ZG67R           ANOP  ,                                                00185700
.******************************************************************     00185800
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00185900
.******************************************************************     00186000
                 ACTR  10000                                            00186100
.*----------------------------------------------------------------***   00186200
.***AH.P02 EXTRA POSITIONALS                                            00186300
                 AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS             00186400
                 AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL             00186500
                 AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL         00186600
                 AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL          00186700
.ZGLISTX1        ANOP  ,                                                00186800
&ZCVAL           SETC  ''          ERROR FIELD                          00186900
&ZAWRK           SETA  0           POSITIONAL NUMBER                    00187000
.ZGLIST2         ANOP  ,                                                00187100
&ZAWRK           SETA  &ZAWRK+1    NEXT POSITIONAL                      00187200
                 AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE             00187300
&ZCVAL           SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA                  00187400
                 AGO   .ZGLIST2                                         00187500
.*                                                                      00187600
.ZGLIST3         ANOP  ,                                                00187700
&ZCVAL           SETC '&ZCVAL'(2,K'&ZCVAL-1)    STRIP COMMA             00187800
&ZMS             SETC  'POSITIONAL ARGUMENT(S),'  *PPOSA* MNOTE         00187900
&ZMS             SETC  '&ZMS "&ZCVAL"'                                  00188000
&ZMS             SETC  '&ZMS CANNOT BE USED.'                           00188100
&ZMS             SETC  '&ZMS NO POSITIONAL ARGUMENTS'                   00188200
                 MNOTE 8,' &ZMS ARE ALLOWED.'                           00188300
&ZMACRET         SETA  8           SET MACRO ERROR RETURN CODE          00188400
.ZGLISTX         ANOP  ,                                                00188500
&ZASYSLNDX       SETA  0                                                00188600
.*******************************************************************    00188700
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00188800
.*******************************************************************    00188900
                 AIF   (&ZMACRET NE 0).ZLX2     ERROR DETECTED          00189000
.*******************************************************************    00189100
.***AE.01  START OF IHABLDP MACRO CODE                                  00189200
.*******************************************************************    00189300
                 LCLC  &M0M0001                 NAME                    00189400
&M0M0001         SETC  '&XLABEL'                SET NAME                00189500
                 AIF   (K'&XLABEL NE 0).XLAB2                           00189600
&M0M0001         SETC  'M00M&SYSNDX'            DEFAULT NAME            00189700
.*                                                                      00189800
.XLAB2           ANOP  ,                                                00189900
&M0M0001 DS    0H                             IHABLDP-1                 00190000
.*******************************************************************    00190100
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00190200
.*******************************************************************    00190300
              PUSH  PRINT                                               00190400
                 AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON       00190500
                 PRINT OFF         ++ PR01                              00190600
                 AGO   .ZPRNTXX                                         00190700
.ZPRINTX         PRINT ON                                               00190800
.ZPRNTXX         ANOP  ,                                                00190900
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00191000
.**------------------------------------------------------------------** 00191100
.**  Start of user macasm code                                       ** 00191200
.**------------------------------------------------------------------** 00191300
.*******************************************************************    00191400
.*                                                                 *    00191500
.*      Declarations for the mappings of the parameter list        *    00191600
.*      entries used by IHABLDP.  These will appear at the         *    00191700
.*      beginning of the first macro invocation                    *    00191800
.*                                                                 *    00191900
.*******************************************************************    00192000
         GBLC  &DODCL                   Variable for generating DSECTs  00192100
         GBLC  &SYSASCE                 Variable for SYSSTATE macro     00192200
         LCLC  &EXTEND                  Variable used to generate AR    00192300
*                                       instructions, if necessary      00192400
         LCLC  &BLDOP                   Operand variable                00192500
&EXTEND  SETC  ' '                      Initialize value to blank       00192600
         PUSH  PRINT                                                    00192700
         PRINT OFF                                                      00192800
         AIF   ('&DODCL' EQ 'DONE').SKP If DSECTs generated, branch     00192900
         IHASDSTR                                                       00193000
&DODCL   SETC  'DONE'                   Set variable to indicate that   00193100
*                                       the DSECTs have ben generated   00193200
.SKP     ANOP                           Branch around DSECTs            00193300
         SYSSTATE TEST                  Test to see if in AR mode       00193400
         AIF   ('&SYSASCE' EQ 'P').SKPAR If in primary, branch          00193500
&EXTEND  SETC  'E'                      Set AR intruction variable      00193600
.SKPAR   ANOP                                                           00193700
         POP   PRINT                                                    00193800
.*******************************************************************    00193900
.*                                                                 *    00194000
.* This section generates the necessary assembler code depending   *    00194100
.* on what type was specified by the user.                         *    00194200
.*                                                                 *    00194300
.*******************************************************************    00194400
         AIF   ('&XTYPE' EQ 'INITIAL').INIT     IF type = INITIAL       00194500
.*                                              branch to INIT          00194600
         AIF   ('&XTYPE' EQ 'STRUCTURE').STR    or IF type = STRUCTURE  00194700
.*                                              branch to STR           00194800
         AIF   ('&XTYPE' EQ 'STRRNG').STRNGE or IF type =               00194900
.*                                              STRRNG                  00195000
.*                                              branch to STRNGE        00195100
         AIF   ('&XTYPE' EQ 'STROPT').STROPT                            00195200
.*                                              or IF type =            00195300
.*                                              STROPT                  00195400
.*                                              branch to STRNGE        00195500
         AIF   ('&XTYPE' EQ 'ENDLIST').ENDLST   or IF type = ENDLIST    00195600
.*                                              branch to ENDLST        00195700
         AGO   .NOTYP                           otherwise do nothing    00195800
.*******************************************************************    00195900
.*                                                                 *    00196000
.* If type INITIAL is specified,                                   *    00196100
.*                                                                 *    00196200
.*   1) Initialize the block of storage passed in to IHABLDP       *    00196300
.*                                                                 *    00196400
.*   2) Check to see if there is enough room to put the header,    *    00196500
.*         the workarea, and one structure entry.                  *    00196600
.*       - if not, the return code is set to 8 and the reason code *    00196700
.*          is set to 4, if provided.                              *    00196800
.*                                                                 *    00196900
.*   3) If there is room, set the first 4 bytes in the dump        *    00197000
.*         parameter list to the address of IHABLDP's work         *    00197100
.*         variables which are found at the bottom of the dump     *    00197200
.*         parameter list.                                         *    00197300
.*                                                                 *    00197400
.*   4) If there is room, set SDSTR_NEXT_SPACE to the next         *    00197500
.*         available point in the dump parameter list.             *    00197600
.*                                                                 *    00197700
.*   5) Move return code and reason code to variables specified on *    00197800
.*      the macro invocation, if specified.                        *    00197900
.*                                                                 *    00198000
.*******************************************************************    00198100
.INIT    ANOP                           Generate IHABLDP INITIAL code   00198200
         SLR   1,1                      Clear register 1 for usage      00198300
         SLR   14,14                    Clear register 14 for usage     00198400
.*******************************************************************    00198500
.*                                                                 *    00198600
.*  Initialize the block of storage to binary zeroes               *    00198700
.*                                                                 *    00198800
.*******************************************************************    00198900
&BLDOP   SETC  '0(,'.'&XPARMAREA'(2,K'&XPARMAREA-2).')'                 00199000
         AIF   ('&XPARMAREA'(1,1) EQ '(' ).CINTPL                       00199100
&BLDOP   SETC  '&XPARMAREA'                                             00199200
.CINTPL  ANOP                                                           00199300
         LA&EXTEND 14,&BLDOP            Put address of block of         00199400
*                                       storage into register 14        00199500
&BLDOP   SETC  '0(,'.'&XPARMLENGTH'(2,K'&XPARMLENGTH-2).')'             00199600
         AIF   ('&XPARMLENGTH'(1,1) EQ '(' ).CINTL0                     00199700
&BLDOP   SETC  '&XPARMLENGTH'                                           00199800
.CINTL0  ANOP                                                           00199900
         L     15,&BLDOP                Put the length of the block of  00200000
*                                       storage into register 15        00200100
         MVCL  14,0                     Clear out the storage           00200200
.*******************************************************************    00200300
.*                                                                 *    00200400
.*  Check to see if the length of the block of storage is          *    00200500
.*  acceptable                                                     *    00200600
.*                                                                 *    00200700
.*******************************************************************    00200800
         LA    1,SDSTR_HEADER_LENGTH    Load the length of the dump     00200900
*                                       parameter list header into      00201000
*                                       register 1                      00201100
         LA    14,SDSTR_WORK_LENGTH     Load the length of the IHABLDP  00201200
*                                       work areas into register 14     00201300
         AR    1,14                     Add the lengths                 00201400
         LA    14,SDSTR_STRUCTURE_LENGTH Load the length of the IHABLDP 00201500
*                                       structure entry into reg. 14    00201600
         AR    1,14                     Add the length to the           00201700
*                                       previous sum                    00201800
&BLDOP   SETC  '0(,'.'&XPARMLENGTH'(2,K'&XPARMLENGTH-2).')'             00201900
         AIF   ('&XPARMLENGTH'(1,1) EQ '(' ).CINITL                     00202000
&BLDOP   SETC  '&XPARMLENGTH'                                           00202100
.CINITL  ANOP                                                           00202200
         C     1,&BLDOP                 Will the dump parameter list    00202300
*                                       header, IHABLDP's work areas    00202400
*                                       and one structure entry fit     00202500
*                                       into the input block of         00202600
*                                       storage?                        00202700
         BNH   I&SYSNDX                 If so, branch to type INITIAL   00202800
*                                       processing                      00202900
.*******************************************************************    00203000
.*                                                                 *    00203100
.*  Since there is not enough room in the dump parameter list,     *    00203200
.*  set the return code to 8 and the reason code to 4              *    00203300
.*                                                                 *    00203400
.*******************************************************************    00203500
         LA    15,FAIL                  Store return code 8 in reg 15   00203600
         LA    0,INSUFFICIENT_SPACE     Store reason code 4 in reg 0    00203700
         B     NI&SYSNDX                Branch around INITIAL           00203800
*                                       processing                      00203900
I&SYSNDX EQU   *                                                        00204000
.*******************************************************************    00204100
.*                                                                 *    00204200
.*  Since there is enough room in the dump parameter list,         *    00204300
.*  Calculate the address of the work variables and put that       *    00204400
.*  address into the dump parameter list header.                   *    00204500
.*                                                                 *    00204600
.*******************************************************************    00204700
&BLDOP   SETC  '0(,'.'&XPARMAREA'(2,K'&XPARMAREA-2).')'                 00204800
         AIF   ('&XPARMAREA'(1,1) EQ '(' ).CINTP1                       00204900
&BLDOP   SETC  '&XPARMAREA'                                             00205000
.CINTP1  ANOP                                                           00205100
         LA&EXTEND 1,&BLDOP             Put address of block of         00205200
*                                       storage into register 1         00205300
         LA    14,INIT_VERSION          Load version number             00205400
         ST    14,SDSTR_VERSION(,1)     Store the version number   @P1C 00205500
         LA&EXTEND 14,&BLDOP            Put address of the block of     00205600
*                                       storage into register 14        00205700
&BLDOP   SETC  '0(,'.'&XPARMLENGTH'(2,K'&XPARMLENGTH-2).')'             00205800
         AIF   ('&XPARMLENGTH'(1,1) EQ '(' ).CINTL2                     00205900
&BLDOP   SETC  '&XPARMLENGTH'                                           00206000
.CINTL2  ANOP                                                           00206100
         A     14,&BLDOP                Add the length of the block of  00206200
*                                       storage                         00206300
         LA    15,SDSTR_WORK_LENGTH     Load length of IHABLDP's work   00206400
*                                       areas into register 15          00206500
         SR    14,15                    Subtract to get the starting    00206600
*                                       address of the work areas       00206700
         ST    14,SDSTR_WORK_VAR_PTR(,1) Put the starting address of    00206800
*                                       IHABLDP's work variables into   00206900
*                                       the parameter list header @P1C  00207000
.*******************************************************************    00207100
.*                                                                 *    00207200
.*  Calculate the next available address a parameter list entry    *    00207300
.*  can be inserted and place that address in the first work area  *    00207400
.*  variable                                                       *    00207500
.*                                                                 *    00207600
.*******************************************************************    00207700
&BLDOP   SETC  '0(,'.'&XPARMAREA'(2,K'&XPARMAREA-2).')'                 00207800
         AIF   ('&XPARMAREA'(1,1) EQ '(' ).CINT2L                       00207900
&BLDOP   SETC  '&XPARMAREA'                                             00208000
.CINT2L  ANOP                                                           00208100
         LA&EXTEND 1,&BLDOP             Load the address of the start   00208200
*                                       of the parameter list           00208300
         LA    1,SDSTR_HEADER_LENGTH(1) Add the length of the           00208400
*                                       Header into register 1          00208500
         ST    1,SDSTR_NEXT_SPACE(,14)  Store into the next available   00208600
*                                       space variable            @P1C  00208700
.*******************************************************************    00208800
.*                                                                 *    00208900
.*  Set return code and reason code to zero in regs 15 and 0       *    00209000
.*  repectively                                                    *    00209100
.*                                                                 *    00209200
.*******************************************************************    00209300
         LA    15,SUCCESS               Store return code 0 in reg 15   00209400
         LA    0,NO_REASON              Store reason code 0 in reg 0    00209500
.*******************************************************************    00209600
.*                                                                 *    00209700
.*  Set return code and reason code, if either were                *    00209800
.*  specified on the macro invocation.                             *    00209900
.*                                                                 *    00210000
.*******************************************************************    00210100
NI&SYSNDX EQU   *                        End of type INITIAL processing 00210200
         AIF   ('&RETCODE' EQ '').SKPIRC                                00210300
&BLDOP   SETC  '0(,'.'&XRETCODE'(2,K'&XRETCODE-2).')'                   00210400
         AIF   ('&XRETCODE'(1,1) EQ '(' ).CNRCIN                        00210500
&BLDOP   SETC  '&XRETCODE'                                              00210600
.CNRCIN  ANOP                                                           00210700
         ST    15,&BLDOP                Store away return code          00210800
.SKPIRC  ANOP                           End return code processing      00210900
         AIF   ('&RSNCODE' EQ '').SKPIRS                                00211000
&BLDOP   SETC  '0(,'.'&XRSNCODE'(2,K'&XRSNCODE-2).')'                   00211100
         AIF   ('&XRSNCODE'(1,1) EQ '(' ).CNRSIN                        00211200
&BLDOP   SETC  '&XRSNCODE'                                              00211300
.CNRSIN  ANOP                                                           00211400
         ST    0,&BLDOP                 Store away reason code          00211500
.SKPIRS  ANOP                           End reason code processing      00211600
         AGO   .NOTYP                   Branch to end                   00211700
.*******************************************************************    00211800
.*                                                                 *    00211900
.* If type STRUCTURE is specified,                                 *    00212000
.*                                                                 *    00212100
.*   1) Check to see if the INITIAL invocation failed by checking  *    00212200
.*      to see if the workarea pointer is zero. If it is, set the  *    00212300
.*      return code to 8, the reason code to 4, and end this       *    00212400
.*      IHABLDP invocation.                                        *    00212500
.*                                                                 *    00212600
.*   2) Check to see if there is enough room to put the structure  *    00212700
.*         entry into the dump parameter list.                     *    00212800
.*       - if not, the return code is set to 8,the reason code     *    00212900
.*          is set to 4, set the next available space pointer      *    00213000
.*          point to itself, and end this IHABLDP invocation       *    00213100
.*                                                                 *    00213200
.*   3) If there is room, add the new structure entry and set      *    00213300
.*         the structure name, contoken, and structure flags       *    00213400
.*         with respect to the keywords specified on the macro     *    00213500
.*         invocation.                                             *    00213600
.*                                                                 *    00213700
.*   4) Set SDSTR_CUR_STR_PTR to the structure entry               *    00213800
.*                                                                 *    00213900
.*   5) Set SDSTR_NEXT_SPACE to the next available point           *    00214000
.*         in the dump parameter list.                             *    00214100
.*                                                                 *    00214200
.*   6) Move return code and reason code to variables specified on *    00214300
.*      the macro invocation, if specified.                        *    00214400
.*                                                                 *    00214500
.*******************************************************************    00214600
.STR     ANOP                           Generate IHABLDP STRUCTURE code 00214700
         SLR   1,1                      Clear register 1 for usage      00214800
         SLR   14,14                    Clear register 14 for usage     00214900
&BLDOP   SETC  '0(,'.'&XPARMAREA'(2,K'&XPARMAREA-2).')'                 00215000
         AIF   ('&XPARMAREA'(1,1) EQ '(' ).CSTRL1                       00215100
&BLDOP   SETC  '&XPARMAREA'                                             00215200
.CSTRL1  ANOP                                                           00215300
.*******************************************************************    00215400
.*                                                                 *    00215500
.*  Check to see if the work area pointer in the STRLIST           *    00215600
.*  parameter list is zero                                         *    00215700
.*                                                                 *    00215800
.*******************************************************************    00215900
         LA&EXTEND 1,&BLDOP             Put address of block of         00216000
*                                       storage into register 1         00216100
         L     1,SDSTR_WORK_VAR_PTR(,1) Put address of IHABLDP's work   00216200
*                                       variables into register 1 @P1C  00216300
         CR    1,14                     Is the header pointer zero?     00216400
         BE    SR&SYSNDX                If so, branch to error          00216500
.*******************************************************************    00216600
.*                                                                 *    00216700
.*  Check to see if the structure entry will fit into the STRLIST  *    00216800
.*  parameter list                                                 *    00216900
.*                                                                 *    00217000
.*******************************************************************    00217100
         L     14,SDSTR_NEXT_SPACE(,1)  Load the address of the next    00217200
*                                       available space into register   00217300
*                                       14                        @P1C  00217400
         N     1,=X'7FFFFFFF'           Turn the high order bit off on  00217500
*                                       work variable pointer           00217600
         N     14,=X'7FFFFFFF'          Turn the high order bit off on  00217700
*                                       next available pointer          00217800
         SR    1,14                     Calculate the amount of space   00217900
*                                       left in the parameter list      00218000
         LA    14,SDSTR_STRUCTURE_LENGTH Load the length of a structure 00218100
*                                       entry                           00218200
         CR    1,14                     Will the structure entry fit    00218300
*                                       into the dump parameter list?   00218400
         BNL  S&SYSNDX                  If so, branch to type STRUCTURE 00218500
*                                       processing                      00218600
.*******************************************************************    00218700
.*                                                                 *    00218800
.*  Since there is not enough room in the dump parameter list,     *    00218900
.*  set the return code to 8 and the reason code to 4              *    00219000
.*                                                                 *    00219100
.*******************************************************************    00219200
         LA&EXTEND 1,&BLDOP             Put address of block of         00219300
*                                       storage into register 1         00219400
         L     1,SDSTR_WORK_VAR_PTR(,1) Put address of IHABLDP's work   00219500
*                                       variables into register 14 @P1C 00219600
         LA    15,SDSTR_CUR_STR_PTR(,1) Load the address of the current 00219700
*                                       structure entry pointer in      00219800
*                                       reg 15.                    @P1C 00219900
         ST    15,SDSTR_NEXT_SPACE(,1)  Make the next available space   00220000
*                                       pointer point to range counter  00220100
*                                       pointer                    @P1C 00220200
SR&SYSNDX EQU   *                       Set return code and reason code 00220300
         LA    15,FAIL                  Store return code 8 in reg 15   00220400
         LA    0,INSUFFICIENT_SPACE     Store reason code 4 in reg 0    00220500
         B     SI&SYSNDX                Branch around type STRUCTURE    00220600
*                                       processing                      00220700
.*******************************************************************    00220800
.*                                                                 *    00220900
.*  Since there is room, add the structure entry to the parameter  *    00221000
.*  list and fill in the required and optional fields.  Also set   *    00221100
.*  second work variable to the structure entry just added to      *    00221200
.*  the dump parameter list                                        *    00221300
.*                                                                 *    00221400
.*******************************************************************    00221500
S&SYSNDX EQU   *                        Begin type STRUCTURE            00221600
*                                        processing                     00221700
         LA&EXTEND 1,&BLDOP             Put address of block of         00221800
*                                       storage into register 1         00221900
         L     1,SDSTR_WORK_VAR_PTR(,1) Put address of IHABLDP's work   00222000
*                                       variables into register 14 @P1C 00222100
         L     14,SDSTR_NEXT_SPACE(,1)  Load the address of the next    00222200
*                                       available space into register   00222300
*                                       14                         @P1C 00222400
         AIF   ('&SYSASCE' EQ 'P').SKPAR1 If in primary, branch         00222500
         CPYA  14,1                     Copy ALET from AR1 to AR14      00222600
.SKPAR1  ANOP                                                           00222700
&BLDOP   SETC  '0('.'&XSTRNAME'(2,K'&XSTRNAME-2).')'                    00222800
         AIF   ('&XSTRNAME'(1,1) EQ '(' ).CSTRNM                        00222900
&BLDOP   SETC  '&XSTRNAME'                                              00223000
.CSTRNM  ANOP                                                           00223100
         MVC   SDSTR_STRUCTURE_NAME(16,14),&BLDOP                       00223200
*                                       Move structure name into        00223300
*                                       entry                      @P1C 00223400
         AIF   ('&XCONNAME' EQ '').BYCONN                          @L1A 00223500
&BLDOP   SETC  '0('.'&XCONNAME'(2,K'&XCONNAME-2).')'               @L1A 00223600
         AIF   ('&XCONNAME'(1,1) EQ '(' ).CCONN                    @L1A 00223700
&BLDOP   SETC  '&XCONNAME'                                         @L1A 00223800
.CCONN   ANOP                                                      @L1A 00223900
         MVC   SDSTR_CONNAME(16,14),&BLDOP                         @L1A 00224000
*                                       Move conname into entry    @L1A 00224100
         OI    SDSTR_STRUCTURE_FLAGS(14),SDSTR_CONNAME_ENTRY            00224200
*                                       Indicates that a conname        00224300
*                                       was put into the structure      00224400
*                                       entry                      @L1A 00224500
         AGO   .BYCONT                                             @L1A 00224600
.BYCONN  ANOP                                                      @L1A 00224700
         AIF   ('&XCONTOKEN' EQ 'NONE').BYCONT                     @L1C 00224800
&BLDOP   SETC  '0('.'&XCONTOKEN'(2,K'&XCONTOKEN-2).')'                  00224900
         AIF   ('&XCONTOKEN'(1,1) EQ '(' ).CCONT                        00225000
&BLDOP   SETC  '&XCONTOKEN'                                             00225100
.CCONT   ANOP                                                           00225200
         MVC   SDSTR_CONTOKEN(16,14),&BLDOP                             00225300
*                                       Move contoken into entry   @P1C 00225400
.BYCONT  ANOP                                                      @L1C 00225500
         ST    14,SDSTR_CUR_STR_PTR(,1) Store the address of that       00225600
*                                       entry into the work area   @P1C 00225700
.*******************************************************************    00225800
.*                                                                 *    00225900
.*  Calculate the next available address a parameter list entry    *    00226000
.*  can be inserted and place that address in the first work area  *    00226100
.*  variable                                                       *    00226200
.*                                                                 *    00226300
.*******************************************************************    00226400
         LA    14,SDSTR_STRUCTURE_LENGTH(14)                            00226500
*                                       Add the length of the           00226600
*                                       structure entry                 00226700
         ST    14,SDSTR_NEXT_SPACE(,1)  Store into the next available   00226800
*                                       space variable             @P1C 00226900
.*******************************************************************    00227000
.*                                                                 *    00227100
.*  Set return code and reason code to zero in regs 15 and 0       *    00227200
.*  repectively                                                    *    00227300
.*                                                                 *    00227400
.*******************************************************************    00227500
         LA    15,SUCCESS               Store return code 0 in reg 15   00227600
         LA    0,NO_REASON              Store reason code 0 in reg 0    00227700
.*******************************************************************    00227800
.*                                                                 *    00227900
.*  Set return code and reason code, if either were                *    00228000
.*  specified on the macro invocation.                             *    00228100
.*                                                                 *    00228200
.*******************************************************************    00228300
SI&SYSNDX EQU   *                        End of type STRUCTURE          00228400
*                                        processing                     00228500
         AIF   ('&RETCODE' EQ '').SKPSRC                                00228600
&BLDOP   SETC  '0(,'.'&XRETCODE'(2,K'&XRETCODE-2).')'                   00228700
         AIF   ('&XRETCODE'(1,1) EQ '(' ).CNRCST                        00228800
&BLDOP   SETC  '&XRETCODE'                                              00228900
.CNRCST  ANOP                                                           00229000
         ST    15,&BLDOP                Store away return code          00229100
.SKPSRC  ANOP                           End return code processing      00229200
         AIF   ('&RSNCODE' EQ '').SKPSRS                                00229300
&BLDOP   SETC  '0(,'.'&XRSNCODE'(2,K'&XRSNCODE-2).')'                   00229400
         AIF   ('&XRSNCODE'(1,1) EQ '(' ).CNRSST                        00229500
&BLDOP   SETC  '&XRSNCODE'                                              00229600
.CNRSST  ANOP                                                           00229700
         ST    0,&BLDOP                 Store away reason code          00229800
.SKPSRS  ANOP                           End reason code processing      00229900
         AGO   .NOTYP                   Branch to end                   00230000
.*******************************************************************    00230100
.*                                                                 *    00230200
.* If type STRRNG is specified,                                    *    00230300
.*                                                                 *    00230400
.*   1) Check to see if the INITIAL invocation failed by checking  *    00230500
.*      to see if the workarea pointer is zero. If it is, set the  *    00230600
.*      return code to 8, the reason code to 4, and end this       *    00230700
.*      IHABLDP invocation.                                        *    00230800
.*                                                                 *    00230900
.*   2) Check to see if there is enough room to put the structure  *    00231000
.*         range entry into the dump parameter list.               *    00231100
.*       - if not, the return code is set to 8,the reason code     *    00231200
.*          is set to 4, set the next available space pointer      *    00231300
.*          point to itself, and end this IHABLDP invocation       *    00231400
.*                                                                 *    00231500
.*   3) If there is room, add the new structure range entry and    *    00231600
.*         set the range flags, the start of the specified range   *    00231700
.*         and the end of the specified range variables            *    00231800
.*         with respect to the keywords specified on the macro     *    00231900
.*         invocation.                                             *    00232000
.*                                                                 *    00232100
.*   4) Increment the range counter, pointed to by the             *    00232200
.*         SDSTR_CUR_STR_PTR, by one.                              *    00232300
.*                                                                 *    00232400
.*   5) Set SDSTR_NEXT_SPACE to the next available point           *    00232500
.*         in the dump parameter list.                             *    00232600
.*                                                                 *    00232700
.*   6) Move return code and reason code to variables specified on *    00232800
.*      the macro invocation, if specified.                        *    00232900
.*                                                                 *    00233000
.*******************************************************************    00233100
.STRNGE  ANOP                      Generate IHABLDP STRRNG code         00233200
         AIF   ('&XSUMMARY' EQ 'NO').BRERR                              00233300
         AIF   ('&XADJUNCT' NE 'NO').BRAER                              00233400
         AIF   ('&XENTRYDATA' EQ 'NO').BRERR                            00233500
&ZMS     SETC  'THE "ENTRYDATA" KEYWORD IS MUTUALLY'                    00233600
&ZMS     SETC  '&ZMS EXCLUSIVE WITH "SUMMARY=YES".'                     00233700
         MNOTE 8,'&ZMS.'                                                00233800
&ZMACRET SETA  8                                                        00233900
         AGO   .BRED                                                    00234000
.BRAER   ANOP                                                           00234100
         AIF   ('&XENTRYDATA' NE 'NO').BRDN                             00234200
&ZMS     SETC  'THE "ADJUNCT" KEYWORD IS MUTUALLY'                      00234300
&ZMS     SETC  '&ZMS EXCLUSIVE WITH "SUMMARY=YES".'                     00234400
         MNOTE 8,'&ZMS.'                                                00234500
&ZMACRET SETA  8                                                        00234600
         AGO   .BRED                                                    00234700
.BRDN    ANOP                                                           00234800
&ZMS     SETC  'THE "ADJUNCT" AND "ENTRYDATA" KEYWORDS ARE'             00234900
&ZMS     SETC  '&ZMS MUTUALLY EXCLUSIVE WITH "SUMMARY=YES".'            00235000
         MNOTE 8,'&ZMS.'                                                00235100
&ZMACRET SETA  8                                                        00235200
         AGO   .BRED                                                    00235300
.BRERR   ANOP                           END - Error processing          00235400
         SLR   1,1                      Clear register 1 for usage      00235500
         SLR   14,14                    Clear register 14 for usage     00235600
&BLDOP   SETC  '0(,'.'&XPARMAREA'(2,K'&XPARMAREA-2).')'                 00235700
         AIF   ('&XPARMAREA'(1,1) EQ '(' ).CRNGL1                       00235800
&BLDOP   SETC  '&XPARMAREA'                                             00235900
.CRNGL1  ANOP                                                           00236000
.*******************************************************************    00236100
.*                                                                 *    00236200
.*  Check to see if the work area pointer in the STRLIST           *    00236300
.*  parameter list is zero                                         *    00236400
.*                                                                 *    00236500
.*******************************************************************    00236600
         LA&EXTEND 1,&BLDOP             Put address of block of         00236700
*                                       storage into register 1         00236800
         L     1,SDSTR_WORK_VAR_PTR(,1) Put address of IHABLDP's work   00236900
*                                       variables into register 1 @P1C  00237000
         CR    1,14                     Is the header pointer zero?     00237100
         BE    RR&SYSNDX                If so, branch to error          00237200
.*******************************************************************    00237300
.*                                                                 *    00237400
.*  Check to see if the structure range entry will fit into the    *    00237500
.*  parameter list                                                 *    00237600
.*                                                                 *    00237700
.*******************************************************************    00237800
         L     14,SDSTR_NEXT_SPACE(,1)  Load the address of the next    00237900
*                                       available space into register   00238000
*                                       14                        @P1C  00238100
         N     1,=X'7FFFFFFF'           Turn the high order bit off on  00238200
*                                       work variable pointer           00238300
         N     14,=X'7FFFFFFF'          Turn the high order bit off on  00238400
*                                       next available pointer          00238500
         SR    1,14                     Calculate the amount of space   00238600
*                                       left in the parameter list      00238700
         LA    14,SDSTR_RANGE_LENGTH    Load the length of a structure  00238800
*                                       range entry                     00238900
         CR    1,14                     Will the range entry fit        00239000
*                                       into the dump parameter list?   00239100
         AIF  ('&XDUMP' EQ 'ALL').SKRGEC                                00239200
.*                                      If DUMP=ALL was specified,      00239300
.*                                      there is no need to do range    00239400
.*                                      validity processing so branch   00239500
.*                                      to code that skips over         00239600
.*                                      processing                      00239700
         AIF  ('&XENDVAL' EQ 'NONE').SKRGEC                             00239800
.*                                      If endval was not specified,    00239900
.*                                      there is no need to do range    00240000
.*                                      validity processing so branch   00240100
.*                                      to code that skips over         00240200
.*                                      processing                      00240300
         BNL  RV&SYSNDX                 If so, branch to type           00240400
*                                       STRRNG                          00240500
*                                       range validity checking         00240600
         AGO  .SERCK                                                    00240700
.SKRGEC  ANOP                           Don't do range validity check   00240800
         BNL  R&SYSNDX                  If so, branch to type           00240900
*                                       STRRNG                          00241000
*                                       processing                      00241100
.SERCK   ANOP                                                           00241200
.*******************************************************************    00241300
.*                                                                 *    00241400
.*  Since there is not enough room in the dump parameter list,     *    00241500
.*  set the return code to 8 and the reason code to 4              *    00241600
.*                                                                 *    00241700
.*******************************************************************    00241800
         LA&EXTEND 1,&BLDOP             Put address of block of         00241900
*                                       storage into register 1         00242000
         L     1,SDSTR_WORK_VAR_PTR(,1) Put address of IHABLDP's work   00242100
*                                       variables into register 14 @P1C 00242200
         LA    15,SDSTR_CUR_STR_PTR(,1) Load the address of the current 00242300
*                                       structure entry pointer in      00242400
*                                       reg 15.                    @P1C 00242500
         ST    15,SDSTR_NEXT_SPACE(,1)  Make the next available space   00242600
*                                       pointer point to range counter  00242700
*                                       pointer                    @P1C 00242800
RR&SYSNDX EQU   *                       Set return and reason codes     00242900
         LA    15,FAIL                  Store return code 8 in reg 15   00243000
         LA    0,INSUFFICIENT_SPACE     Store reason code 4 in reg 0    00243100
         B     RI&SYSNDX                Branch around type STRRNG       00243200
*                                       processing                      00243300
         AIF  ('&XDUMP' EQ 'ALL').SKRGE2                                00243400
.*                                       If DUMP=ALL was specified,     00243500
.*                                       there is no need to do range   00243600
.*                                       validity processing so branch  00243700
.*                                       to code that skips over        00243800
.*                                       processing                     00243900
         AIF   ('&XENDVAL' EQ 'NONE').SKRGE2                            00244000
.*                                       If endval was not specified,   00244100
.*                                       there is no need to do range   00244200
.*                                       validity processing so branch  00244300
.*                                       to code that skips over        00244400
.*                                       processing                     00244500
.*******************************************************************    00244600
.*                                                                 *    00244700
.*  Do the range validity checking here, if the starting range     *    00244800
.*  value is greater than the ending range value, set return code  *    00244900
.*  to 8 and the reason code to 8                                  *    00245000
.*                                                                 *    00245100
.*******************************************************************    00245200
RV&SYSNDX EQU   *                       Begin type STRRNG range         00245300
*                                       validity checking               00245400
&BLDOP   SETC  '0(,'.'&XSTARTVAL'(2,K'&XSTARTVAL-2).')'                 00245500
         AIF   ('&XSTARTVAL'(1,1) EQ '(' ).CSTAR1                       00245600
&BLDOP   SETC  '&XSTARTVAL'                                             00245700
.CSTAR1  ANOP                                                           00245800
         L     15,&BLDOP                Load reg 15 with start value    00245900
&BLDOP   SETC  '0(,'.'&XENDVAL'(2,K'&XENDVAL-2).')'                     00246000
         AIF   ('&XENDVAL'(1,1) EQ '(' ).CSTAR2                         00246100
&BLDOP   SETC  '&XENDVAL'                                               00246200
.CSTAR2  ANOP                                                           00246300
         L     0,&BLDOP                 Load reg 0 with end value       00246400
         CR    15,0                     Is the starting value less      00246500
*                                       than the ending value?          00246600
         BNH   RL&SYSNDX                If so, branch                   00246700
         LA    15,FAIL                  Store return code 8 in reg 15   00246800
         LA    0,INVALID_RANGE          Store reason code 8 in reg 0    00246900
         B     RI&SYSNDX                Branch around type STRRNG       00247000
*                                       processing                      00247100
RL&SYSNDX EQU *                         End range validity checking     00247200
.SKRGE2  ANOP                           Don't do range validity check   00247300
.*******************************************************************    00247400
.*                                                                 *    00247500
.*  Since there is room, add the structure range entry to the      *    00247600
.*  parameter list and fill in the required and optional fields.   *    00247700
.*                                                                 *    00247800
.*******************************************************************    00247900
R&SYSNDX EQU   *                        Begin type STRRNG               00248000
*                                        processing                     00248100
&BLDOP   SETC  '0(,'.'&XPARMAREA'(2,K'&XPARMAREA-2).')'                 00248200
         AIF   ('&XPARMAREA'(1,1) EQ '(' ).CRNGLA                       00248300
&BLDOP   SETC  '&XPARMAREA'                                             00248400
.CRNGLA  ANOP                                                           00248500
         LA&EXTEND 1,&BLDOP             Put address of block of         00248600
*                                       storage into register 1         00248700
         L     1,SDSTR_WORK_VAR_PTR(,1) Put address of IHABLDP's work   00248800
*                                       variables into register 14 @P1C 00248900
         L     14,SDSTR_NEXT_SPACE(,1)  Load the address of the next    00249000
*                                       available space into register   00249100
*                                       14                         @P1C 00249200
         AIF   ('&SYSASCE' EQ 'P').SKPAR2 If in primary, branch         00249300
         CPYA  14,1                     Copy ALET from AR1 to AR14      00249400
.SKPAR2  ANOP                                                           00249500
         AIF   ('&XOBJECT' EQ 'COCLASS').BCO                            00249600
         AIF   ('&XOBJECT' EQ 'STGCLASS').BST                           00249700
         AIF   ('&XOBJECT' EQ 'LISTNUM').BLH                            00249800
         AIF   ('&XOBJECT' EQ 'EMCONTROLS').BEMC                        00249900
         AGO   .BYOBJ                                                   00250000
.BCO     ANOP                                                           00250100
         OI    SDSTR_RANGE_FLAG3(14),SDSTR_OBJECT_COCLASS               00250200
*                                       Indicate cast-out class         00250300
*                                       object  @P1C                    00250400
         AGO   .BYOBJ                                                   00250500
.BST     ANOP                                                           00250600
         OI    SDSTR_RANGE_FLAG3(14),SDSTR_OBJECT_STGCLASS              00250700
*                                       Indicate storage class          00250800
*                                       object   @P1C                   00250900
         AGO   .BYOBJ                                                   00251000
.BLH     ANOP                                                           00251100
         OI    SDSTR_RANGE_FLAG3(14),SDSTR_OBJECT_LISTNUM               00251200
*                                       Indicate List number            00251300
*                                       object     @P1C                 00251400
         AGO   .BYOBJ                                              @01A 00251500
.BEMC    ANOP                                                      @01A 00251600
&ZCVAL   SETC ''           CLEAR ERROR KEY ACCUMULATOR             @01A 00251700
         AIF   (K'&ADJUNCT LE 0).BEMC1   OK                        @01A 00251800
&ZCVAL   SETC '&ZCVAL ADJUNCT'           INCORRECT KEY USED        @01A 00251900
.BEMC1   AIF   (K'&ENTRYDATA LE 0).BEMC2 OK                        @01A 00252000
&ZCVAL   SETC '&ZCVAL ENTRYDATA'         INCORRECT KEY USED        @01A 00252100
.BEMC2   AIF   (K'&SUMMARY LE 0).BEMC3   OK                        @01A 00252200
&ZCVAL   SETC '&ZCVAL SUMMARY'           INCORRECT KEY USED        @01A 00252300
.BEMC3   AIF   (K'&ZCVAL LE 0).BEMC4     OK                        @01A 00252400
&ZCVAL   SETC '&ZCVAL'(2,K'&ZCVAL-1)                               @01A 00252500
&ZMS     SETC  '"OBJECT'                                           @01A 00252600
&ZMS     SETC  '&ZMS.=&OBJECT"'                                    @01A 00252700
&ZMS     SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'                @01A 00252800
         MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'                @01A 00252900
&ZMACRET SETA  8           SET MACRO ERROR RETURN CODE             @01A 00253000
.BEMC4   ANOP                                                      @01A 00253100
         OI    SDSTR_RANGE_FLAG3(14),SDSTR_OBJECT_EMCONTROLS       @01A 00253200
*                                       Indicate event monitoring       00253300
*                                       control                    @01A 00253400
.BYOBJ   ANOP                                                           00253500
         AIF   ('&XADJUNCT' EQ 'CAPTURE').BCP                           00253600
         AIF   ('&XADJUNCT' EQ 'DIRECTIO').BIO                          00253700
         AGO   .BYADJ                                                   00253800
.BCP     ANOP                                                           00253900
         OI    SDSTR_RANGE_FLAG1(14),SDSTR_ADJUNCT_CAPTURE              00254000
*                                       Indicate capture phase     @P1C 00254100
         AGO   .BYADJ                                                   00254200
.BIO     ANOP                                                           00254300
         OI    SDSTR_RANGE_FLAG2(14),SDSTR_ADJUNCT_DIRECTIO             00254400
*                                      Indicate dump writing phase @P1C 00254500
.BYADJ   ANOP                                                           00254600
         AIF   ('&XENTRYDATA' EQ 'SERIALIZE').BSR                       00254700
         AIF   ('&XENTRYDATA' EQ 'UNSERIALIZE').BUS                     00254800
         AGO   .BYDATA                                                  00254900
.BSR     ANOP                                                           00255000
         OI    SDSTR_RANGE_FLAG2(14),SDSTR_EDATA_SERIALIZE              00255100
*                                       Indicate dump entry data        00255200
*                                       serialized                 @P1C 00255300
         AGO   .BYDATA                                                  00255400
.BUS     ANOP                                                           00255500
         OI    SDSTR_RANGE_FLAG2(14),SDSTR_EDATA_UNSERIALIZE            00255600
*                                       Indicate dump entry data        00255700
*                                       unserialized               @P1C 00255800
.BYDATA  ANOP                                                           00255900
         AIF   ('&XSUMMARY' NE 'YES').BYSUM                             00256000
         OI    SDSTR_RANGE_FLAG1(14),SDSTR_SUMMARY                      00256100
*                                       Indicate Summary dump      @P1C 00256200
.BYSUM   ANOP                                                           00256300
         AIF   ('&XDUMP' EQ 'ALL').BYDMP1                               00256400
&BLDOP   SETC  '0(,'.'&XSTARTVAL'(2,K'&XSTARTVAL-2).')'                 00256500
         AIF   ('&XSTARTVAL'(1,1) EQ '(' ).CSTART                       00256600
&BLDOP   SETC  '&XSTARTVAL'                                             00256700
.CSTART  ANOP                                                           00256800
         L     15,&BLDOP                Load reg 15 with start value    00256900
         ST    15,SDSTR_START_VALUE(,14)                                00257000
*                                       Store into the start range @P1C 00257100
         ST    15,SDSTR_END_VALUE(,14)  Store into the end range   @P1C 00257200
         AIF   ('&XENDVAL' EQ 'NONE').SKENDV                            00257300
&BLDOP   SETC  '0(,'.'&XENDVAL'(2,K'&XENDVAL-2).')'                     00257400
         AIF   ('&XENDVAL'(1,1) EQ '(' ).STEND                          00257500
&BLDOP   SETC  '&XENDVAL'                                               00257600
.STEND   ANOP                                                           00257700
         L     15,&BLDOP                Load reg 15 with end value      00257800
         ST    15,SDSTR_END_VALUE(,14)  Store into the end range   @P1C 00257900
.SKENDV  ANOP                           End return code processing      00258000
         AGO   .BYDMP2                                                  00258100
.BYDMP1  ANOP                                                           00258200
         OI    SDSTR_RANGE_FLAG3(14),SDSTR_DUMP_ALL                     00258300
*                                       Indicate Dump all ranges   @P1C 00258400
.BYDMP2  ANOP                                                           00258500
.*******************************************************************    00258600
.*                                                                 *    00258700
.*  Increment the range counter                                    *    00258800
.*                                                                 *    00258900
.*******************************************************************    00259000
         L     14,SDSTR_CUR_STR_PTR(,1) Load the address of the current 00259100
*                                       structue entry into reg 14 @P1C 00259200
         LA    15,1                     Load a one into reg 15          00259300
         AH    15,SDSTR_RANGE_CNTR(,14) Increment the current range     00259400
*                                       count                      @P1C 00259500
         STH   15,SDSTR_RANGE_CNTR(,14) Store new value into the range  00259600
*                                       counter                    @P1C 00259700
.*******************************************************************    00259800
.*                                                                 *    00259900
.*  Calculate the next available address a parameter list entry    *    00260000
.*  can be inserted and place that address in the first work area  *    00260100
.*  variable                                                       *    00260200
.*                                                                 *    00260300
.*******************************************************************    00260400
         L     14,SDSTR_NEXT_SPACE(,1)  Load the next available         00260500
*                                       space a parameter list entry    00260600
*                                       can be placed              @P1C 00260700
         LA    14,SDSTR_RANGE_LENGTH(14) Add the length of the          00260800
*                                       structure range entry           00260900
         ST    14,SDSTR_NEXT_SPACE(,1)  Store into the next available   00261000
*                                       space variable             @P1C 00261100
.*******************************************************************    00261200
.*                                                                 *    00261300
.*  Set return code and reason code to zero in regs 15 and 0       *    00261400
.*  repectively                                                    *    00261500
.*                                                                 *    00261600
.*******************************************************************    00261700
         LA    15,SUCCESS               Store return code 0 in reg 15   00261800
         LA    0,NO_REASON              Store reason code 0 in reg 0    00261900
.*******************************************************************    00262000
.*                                                                 *    00262100
.*  Set return code and reason code, if either were                *    00262200
.*  specified on the macro invocation.                             *    00262300
.*                                                                 *    00262400
.*******************************************************************    00262500
RI&SYSNDX EQU   *                        End of type STRANGE            00262600
*                                        processing                     00262700
         AIF   ('&RETCODE' EQ '').SKPRRC                                00262800
&BLDOP   SETC  '0(,'.'&XRETCODE'(2,K'&XRETCODE-2).')'                   00262900
         AIF   ('&XRETCODE'(1,1) EQ '(' ).CNRCRG                        00263000
&BLDOP   SETC  '&XRETCODE'                                              00263100
.CNRCRG  ANOP                                                           00263200
         ST    15,&BLDOP                Store away return code          00263300
.SKPRRC  ANOP                           End return code processing      00263400
         AIF   ('&RSNCODE' EQ '').SKPRRS                                00263500
&BLDOP   SETC  '0(,'.'&XRSNCODE'(2,K'&XRSNCODE-2).')'                   00263600
         AIF   ('&XRSNCODE'(1,1) EQ '(' ).CNRSRG                        00263700
&BLDOP   SETC  '&XRSNCODE'                                              00263800
.CNRSRG  ANOP                                                           00263900
         ST    0,&BLDOP                 Store away reason code          00264000
.SKPRRS  ANOP                           End reason code processing      00264100
.BRED    ANOP                           End if error message issued     00264200
         AGO   .NOTYP                   Branch to end                   00264300
.*******************************************************************    00264400
.*                                                                 *    00264500
.* If type STROPT is specified                                     *    00264600
.*                                                                 *    00264700
.*   1) Check to see if the INITIAL invocation failed by checking  *    00264800
.*      to see if the workarea pointer is zero. If it is, set the  *    00264900
.*      return code to 8, the reason code to 4, and end this       *    00265000
.*      IHABLDP invocation.                                        *    00265100
.*                                                                 *    00265200
.*   2) Check to see if there is enough room to put the structure  *    00265300
.*         range entry into the dump parameter list.               *    00265400
.*       - if not, the return code is set to 8,the reason code     *    00265500
.*          is set to 4, set the next available space pointer      *    00265600
.*          point to itself, and end this IHABLDP invocation       *    00265700
.*                                                                 *    00265800
.*   3) If there is room, add the new structure range entry and    *    00265900
.*         set the range flags, the start of the specified range   *    00266000
.*         and the end of the specified range variables            *    00266100
.*         with respect to the keywords specified on the macro     *    00266200
.*         invocation.                                             *    00266300
.*                                                                 *    00266400
.*   4) Increment the range counter, pointed to by the             *    00266500
.*         SDSTR_CUR_STR_PTR, by one.                              *    00266600
.*                                                                 *    00266700
.*   5) Set SDSTR_NEXT_SPACE to the next available point           *    00266800
.*         in the dump parameter list.                             *    00266900
.*                                                                 *    00267000
.*   6) Move return code and reason code to variables specified on *    00267100
.*      the macro invocation, if specified.                        *    00267200
.*                                                                 *    00267300
.*******************************************************************    00267400
.STROPT  ANOP                       Generate IHABLDP STROPT code        00267500
         SLR   1,1                      Clear register 1 for usage      00267600
         SLR   14,14                    Clear register 14 for usage     00267700
&BLDOP   SETC  '0(,'.'&XPARMAREA'(2,K'&XPARMAREA-2).')'                 00267800
         AIF   ('&XPARMAREA'(1,1) EQ '(' ).COPTL1                       00267900
&BLDOP   SETC  '&XPARMAREA'                                             00268000
.COPTL1  ANOP                                                           00268100
.*******************************************************************    00268200
.*                                                                 *    00268300
.*  Check to see if the work area pointer in the STRLIST           *    00268400
.*  parameter list is zero                                         *    00268500
.*                                                                 *    00268600
.*******************************************************************    00268700
         LA&EXTEND 1,&BLDOP             Put address of block of         00268800
*                                       storage into register 1         00268900
         L     1,SDSTR_WORK_VAR_PTR(,1) Put address of IHABLDP's work   00269000
*                                       variables into register 1  @P1C 00269100
         CR    1,14                     Is the header pointer zero?     00269200
         BE    OR&SYSNDX               If so, branch to error           00269300
.*******************************************************************    00269400
.*                                                                 *    00269500
.*  Check to see if the structure range entry will fit into the    *    00269600
.*  parameter list                                                 *    00269700
.*                                                                 *    00269800
.*******************************************************************    00269900
         L     14,SDSTR_NEXT_SPACE(,1)  Load the address of the next    00270000
*                                       available space into register   00270100
*                                       14                         @P1C 00270200
         N     1,=X'7FFFFFFF'           Turn the high order bit off on  00270300
*                                       work variable pointer           00270400
         N     14,=X'7FFFFFFF'          Turn the high order bit off on  00270500
*                                       next available pointer          00270600
         SR    1,14                     Calculate the amount of space   00270700
*                                       left in the parameter list      00270800
         LA    14,SDSTR_RANGE_LENGTH    Load the length of a structure  00270900
*                                       range entry                     00271000
         CR    1,14                     Will the option entry fit       00271100
*                                       into the dump parameter list?   00271200
         BNL  O&SYSNDX                  If so, branch to type           00271300
*                                       STROPT processing               00271400
.*******************************************************************    00271500
.*                                                                 *    00271600
.*  Since there is not enough room in the dump parameter list,     *    00271700
.*  set the return code to 8 and the reason code to 4              *    00271800
.*                                                                 *    00271900
.*******************************************************************    00272000
         LA&EXTEND 1,&BLDOP             Put address of block of         00272100
*                                       storage into register 1         00272200
         L     1,SDSTR_WORK_VAR_PTR(,1) Put address of IHABLDP's work   00272300
*                                       variables into register 14 @P1C 00272400
         LA    15,SDSTR_CUR_STR_PTR(,1) Load the address of the current 00272500
*                                       structure entry pointer in      00272600
*                                       reg 15.                    @P1C 00272700
         ST    15,SDSTR_NEXT_SPACE(,1)  Make the next available space   00272800
*                                       pointer point to range counter  00272900
*                                       pointer                    @P1C 00273000
OR&SYSNDX EQU   *                       Set return and reason codes     00273100
         LA    15,FAIL                  Store return code 8 in reg 15   00273200
         LA    0,INSUFFICIENT_SPACE     Store reason code 4 in reg 0    00273300
         B     OI&SYSNDX                Branch around type STROPT       00273400
*                                       processing                      00273500
.*******************************************************************    00273600
.*                                                                 *    00273700
.*  Since there is room, add the STROPT entry to the parameter *        00273800
.*  list and fill in the required and optional fields.             *    00273900
.*                                                                 *    00274000
.*******************************************************************    00274100
O&SYSNDX EQU   *                        Begin type STROPT               00274200
*                                        processing                     00274300
         LA&EXTEND 1,&BLDOP             Put address of block of         00274400
*                                       storage into register 1         00274500
         L     1,SDSTR_WORK_VAR_PTR(,1) Put address of IHABLDP's work   00274600
*                                       variables into register 14 @P1C 00274700
         L     14,SDSTR_NEXT_SPACE(,1)  Load the address of the next    00274800
*                                       available space into register   00274900
*                                       14                         @P1C 00275000
         AIF   ('&SYSASCE' EQ 'P').SKPAR3 If in primary, branch         00275100
         CPYA  14,1                     Copy ALET from AR1 to AR14      00275200
.SKPAR3  ANOP                                                           00275300
         AIF   ('&XOPTION' EQ 'LOCKENTRIES').LOCK1                      00275400
         AIF   ('&XOPTION' EQ 'USERCNTLS').USER1                        00275500
         AIF   ('&XOPTION' EQ 'EVENTQS').EVENT1                    @01A 00275600
.LOCK1   ANOP                                                           00275700
         OI    SDSTR_RANGE_FLAG3(14),SDSTR_LOCKENTRIES                  00275800
*                                      Indicate Lock entries       @P1C 00275900
         AGO   .OPTDN                                                   00276000
.USER1   ANOP                                                           00276100
         OI    SDSTR_RANGE_FLAG3(14),SDSTR_USERCNTLS                    00276200
*                                     Indicate User attached cntls @P1C 00276300
         AGO   .OPTDN                                                   00276400
.EVENT1  ANOP                                                      @01A 00276500
         OI    SDSTR_RANGE_FLAG3(14),SDSTR_EVENTQS                 @01A 00276600
*                                     Indicate User event queues   @01A 00276700
.OPTDN   ANOP                                                      @01A 00276800
.*******************************************************************    00276900
.*                                                                 *    00277000
.*  Increment the range counter                                    *    00277100
.*                                                                 *    00277200
.*******************************************************************    00277300
         L     14,SDSTR_CUR_STR_PTR(,1) Load the address of the current 00277400
*                                      structure entry into reg 14 @P1C 00277500
         LA    15,1                     Load a one into reg 15          00277600
         AH    15,SDSTR_RANGE_CNTR(,14) Increment the current range     00277700
*                                       count                      @P1C 00277800
         STH   15,SDSTR_RANGE_CNTR(,14) Store new value into the range  00277900
*                                       counter                    @P1C 00278000
.*******************************************************************    00278100
.*                                                                 *    00278200
.*  Calculate the next available address a parameter list entry    *    00278300
.*  can be inserted and place that address in the first work area  *    00278400
.*  variable                                                       *    00278500
.*                                                                 *    00278600
.*******************************************************************    00278700
         L     14,SDSTR_NEXT_SPACE(,1)  Load the next available         00278800
*                                       space a parameter list entry    00278900
*                                       can be placed              @P1C 00279000
         LA    14,SDSTR_RANGE_LENGTH(14) Add the length of the          00279100
*                                       structure range entry           00279200
         ST    14,SDSTR_NEXT_SPACE(,1)  Store into the next available   00279300
*                                       space variable             @P1C 00279400
.*******************************************************************    00279500
.*                                                                 *    00279600
.*  Set return code and reason code to zero in regs 15 and 0       *    00279700
.*  repectively                                                    *    00279800
.*                                                                 *    00279900
.*******************************************************************    00280000
         LA    15,SUCCESS               Store return code 0 in reg 15   00280100
         LA    0,NO_REASON              Store reason code 0 in reg 0    00280200
.*******************************************************************    00280300
.*                                                                 *    00280400
.*  Set return code and reason code, if either were                *    00280500
.*  specified on the macro invocation.                             *    00280600
.*                                                                 *    00280700
.*******************************************************************    00280800
OI&SYSNDX EQU   *                        End of type STROPT             00280900
*                                        processing                     00281000
         AIF   ('&RETCODE' EQ '').SKPORC                                00281100
&BLDOP   SETC  '0(,'.'&XRETCODE'(2,K'&XRETCODE-2).')'                   00281200
         AIF   ('&XRETCODE'(1,1) EQ '(' ).CNRCOP                        00281300
&BLDOP   SETC  '&XRETCODE'                                              00281400
.CNRCOP  ANOP                                                           00281500
         ST    15,&BLDOP                Store away return code          00281600
.SKPORC  ANOP                           End return code processing      00281700
         AIF   ('&RSNCODE' EQ '').SKPORS                                00281800
&BLDOP   SETC  '0(,'.'&XRSNCODE'(2,K'&XRSNCODE-2).')'                   00281900
         AIF   ('&XRSNCODE'(1,1) EQ '(' ).CNRSOP                        00282000
&BLDOP   SETC  '&XRSNCODE'                                              00282100
.CNRSOP  ANOP                                                           00282200
         ST    0,&BLDOP                 Store away reason code          00282300
.SKPORS  ANOP                           End reason code processing      00282400
         AGO   .NOTYP                   Branch to end                   00282500
.*******************************************************************    00282600
.*                                                                 *    00282700
.* If type ENDLIST is specified,                                   *    00282800
.*                                                                 *    00282900
.*   1) Check to see if the INITIAL invocation failed by checking  *    00283000
.*      to see if the workarea pointer is zero. If it is, set the  *    00283100
.*      return code to 8, the reason code to 4, and end this       *    00283200
.*      IHABLDP invocation.                                        *    00283300
.*                                                                 *    00283400
.*   2) Check to see if any of the invocations failed because of   *    00283500
.*      insufficient storage.  If so, set the return code to 8,    *    00283600
.*      set the reason code to 4, and set the header to the        *    00283700
.*      length of the entire block of storage minus 16 bytes.      *    00283800
.*                                                                 *    00283900
.*   3) If everything was successful, set the header to the total  *    00284000
.*      length of the dump parameter list.                         *    00284100
.*                                                                 *    00284200
.*******************************************************************    00284300
.ENDLST  ANOP                           Generate IHABLDP ENDLIST code   00284400
&BLDOP   SETC  '0(,'.'&XPARMAREA'(2,K'&XPARMAREA-2).')'                 00284500
         AIF   ('&XPARMAREA'(1,1) EQ '(' ).CONTEL                       00284600
&BLDOP   SETC  '&XPARMAREA'                                             00284700
.CONTEL  ANOP                                                           00284800
.*******************************************************************    00284900
.*                                                                 *    00285000
.*  Check to see if the work area pointer in the STRLIST           *    00285100
.*  parameter list is zero                                         *    00285200
.*                                                                 *    00285300
.*******************************************************************    00285400
         SLR  1,1                       Clear register 1                00285500
         SLR  14,14                     Clear register 14               00285600
         LA&EXTEND 1,&BLDOP             Put address of block of         00285700
*                                       storage into register 1         00285800
         L     1,SDSTR_WORK_VAR_PTR(,1) Put address of IHABLDP's work   00285900
*                                       variables into register 1  @P1C 00286000
         CR    1,14                     Is the header pointer zero?     00286100
         BE    ER&SYSNDX                If so, branch to error          00286200
.*******************************************************************    00286300
.*                                                                 *    00286400
.*  Check to see if any of the invocations failed due to           *    00286500
.*  insufficient space in the STRLIST parameter list               *    00286600
.*                                                                 *    00286700
.*******************************************************************    00286800
         L     14,SDSTR_NEXT_SPACE(,1)  Load the address of the next    00286900
*                                       available space into register   00287000
*                                       14                         @P1C 00287100
         N     1,=X'7FFFFFFF'           Turn the high order bit off on  00287200
*                                       work variable pointer           00287300
         N     14,=X'7FFFFFFF'          Turn the high order bit off on  00287400
*                                       next available pointer          00287500
         SR    1,14                     Calculate the total length of   00287600
*                                       the dump parameter list         00287700
         BNM   E&SYSNDX                 If the length is positive,      00287800
*                                       branch to successful ENDLIST    00287900
*                                       processing                      00288000
.*******************************************************************    00288100
.*                                                                 *    00288200
.*  Set the return code to 8, the reason code to 4, and the length *    00288300
.*  of the parameter list                                          *    00288400
.*                                                                 *    00288500
.*******************************************************************    00288600
         LA&EXTEND 1,&BLDOP             Put address of block of         00288700
*                                       storage into register 1         00288800
*                                       on register 1                   00288900
         L     14,SDSTR_WORK_VAR_PTR(,1) Put address of IHABLDP's work  00289000
*                                       variables into register 1  @P1C 00289100
         N     1,=X'7FFFFFFF'           Turn the high order bit off on  00289200
*                                       parameter list pointer          00289300
         N     14,=X'7FFFFFFF'          Turn the high order bit off on  00289400
*                                       work variable pointer           00289500
         SR    14,1                     Subtract to get total length of 00289600
*                                       parm list minus work areas      00289700
         ST    14,SDSTR_LENGTH(,1)      Store length in header of       00289800
*                                       parameter list             @P1C 00289900
ER&SYSNDX EQU   *                       Set return and reason codes     00290000
         LA    15,FAIL                  Store return code 8 in reg 15   00290100
         LA    0,INSUFFICIENT_SPACE     Store reason code 4 in reg 0    00290200
         B     EI&SYSNDX                Branch around normal processing 00290300
.*******************************************************************    00290400
.*                                                                 *    00290500
.*  Set the return code to 0, the reason code to 0, and the length *    00290600
.*  of the parameter list                                          *    00290700
.*                                                                 *    00290800
.*******************************************************************    00290900
E&SYSNDX EQU   *                        ENDLIST normal processing       00291000
         LA&EXTEND 1,&BLDOP             Put address of block of         00291100
*                                       storage into register 1         00291200
         L     1,SDSTR_WORK_VAR_PTR(,1) Put address of IHABLDP's work   00291300
*                                       variables into register 14 @P1C 00291400
         L     14,SDSTR_NEXT_SPACE(,1)  Load the address of the next    00291500
*                                       available space into register   00291600
*                                       14                         @P1C 00291700
         LA&EXTEND 1,&BLDOP             Put address of block of         00291800
*                                       storage into register 1         00291900
         N     1,=X'7FFFFFFF'           Turn the high order bit off on  00292000
*                                       parameter list pointer          00292100
         N     14,=X'7FFFFFFF'          Turn the high order bit off on  00292200
*                                       next available space pointer    00292300
         SR    14,1                     Subtract to get actual length   00292400
*                                       of the parameter list           00292500
         LA&EXTEND 1,&BLDOP             Put address of block of         00292600
*                                       storage into register 1         00292700
         ST    14,SDSTR_LENGTH(,1)      Store the length in the header  00292800
*                                       of the parameter list      @P1C 00292900
.*******************************************************************    00293000
.*                                                                 *    00293100
.*  Set return code and reason code to zero in regs 15 and 0       *    00293200
.*  repectively                                                    *    00293300
.*                                                                 *    00293400
.*******************************************************************    00293500
         LA    15,SUCCESS               Store return code 0 in reg 15   00293600
         LA    0,NO_REASON              Store reason code 0 in reg 0    00293700
.*******************************************************************    00293800
.*                                                                 *    00293900
.*  Set return code and reason code, if either were                *    00294000
.*  specified on the macro invocation.                             *    00294100
.*                                                                 *    00294200
.*******************************************************************    00294300
EI&SYSNDX EQU   *                        End of type ENDLIST            00294400
*                                        processing                     00294500
         AIF   ('&RETCODE' EQ '').SKPERC                                00294600
&BLDOP   SETC  '0(,'.'&XRETCODE'(2,K'&XRETCODE-2).')'                   00294700
         AIF   ('&XRETCODE'(1,1) EQ '(' ).CNRCEN                        00294800
&BLDOP   SETC  '&XRETCODE'                                              00294900
.CNRCEN  ANOP                                                           00295000
         ST    15,&BLDOP                Store away return code          00295100
.SKPERC  ANOP                           End return code processing      00295200
         AIF   ('&RSNCODE' EQ '').SKPERS                                00295300
&BLDOP   SETC  '0(,'.'&XRSNCODE'(2,K'&XRSNCODE-2).')'                   00295400
         AIF   ('&XRSNCODE'(1,1) EQ '(' ).CNRSEN                        00295500
&BLDOP   SETC  '&XRSNCODE'                                              00295600
.CNRSEN  ANOP                                                           00295700
         ST    0,&BLDOP                 Store away reason code          00295800
.SKPERS  ANOP                           End reason code processing      00295900
.NOTYP   ANOP                           end of inline macro generation  00296000
.**------------------------------------------------------------------** 00296100
.**  End of user macasm code                                         ** 00296200
.**------------------------------------------------------------------** 00296300
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00296400
.********************************************************************   00296500
.***AL.A01  INTERNAL ARRAY TO PRODUCE FORMATTED CODE                    00296600
.********************************************************************   00296700
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00296800
                      LCLA  &ZOPN1         INVOCATION INDEX             00296900
                      LCLC  &ZOPL(4095)    LABEL                        00297000
                      LCLC  &ZOPO(4095)    OPERATION                    00297100
                      LCLC  &ZOPV(4095)    VALUE                        00297200
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00297300
.*                                                                      00297400
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00297500
.*******************************************************************    00297600
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00297700
.*******************************************************************    00297800
                      ACTR  10000                                       00297900
.*                                                                      00298000
                      LCLA  &ZLC           COLUMN POSITION              00298100
                      LCLA  &ZOPX          LIST TABLE INDEX             00298200
                      LCLC  &ZLL           LABEL                        00298300
                      LCLC  &ZLOP          OPERATION                    00298400
                      LCLC  &ZLV           VALUE                        00298500
                      LCLC  &ZLD           DESCRIPTION                  00298600
.*                                                                      00298700
&ZOPX                 SETA  1                                           00298800
.*******************************************************************    00298900
.***AP.X01  FORMAT GENERATED CODE                                       00299000
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00299100
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00299200
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00299300
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00299400
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00299500
                      AIF   (K'&ZLD LE 0).ZL51                          00299600
&ZLC                  SETA  35             COMMENT COLUMN               00299700
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00299800
&ZLC                  SETA  33             COMMENT COLUMN               00299900
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00300000
&ZLV                  SETC  '&ZLV'.' '                                  00300100
                      AGO   .ZL31                                       00300200
.*                                                                      00300300
.ZL41                 ANOP  ,                                           00300400
&ZLV                  SETC  '&ZLV'.' '                                  00300500
.ZL51                 ANOP  ,                                           00300600
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00300700
.*                                                                      00300800
&ZLL     &ZLOP &ZLV                                                     00300900
.*                                                                      00301000
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00301100
                      AGO   .ZL21          CONTINUE LOOPING             00301200
.*                                                                      00301300
.ZLX1                 ANOP  ,                                           00301400
.*******************************************************************    00301500
.***AP.X02  END OF IHABLDP MACRO                                        00301600
&ZIHABLDP             SETC  'YES'          SET IHABLDP USED             00301700
         POP   PRINT                                                    00301800
*                                            IHABLDP-1                  00301900
         SPACE 1                                                        00302000
.ZLX2                 ANOP  ,                                           00302100
         MEND                                                           00302200
**********************************************************************/ 00302300
*/*PB.OC01 INVOKE MACRO---------------------------------------------*/  00302400
*%IHABLDP: MACRO KEYS(PARMAREA,TYPE,PARMLENGTH,STRNAME,CONTOKEN,        00302500
*                 CONNAME,OBJECT,DUMP,STARTVAL,ENDVAL,ADJUNCT,          00302600
*                 ENTRYDATA,SUMMARY,OPTION,RETCODE,RSNCODE);            00302700
*  ANS('?'||MACLABEL||' '||'IHABLDPP '||MACLIST||                       00302800
*         ' '||MACKEYS||';') COL(MACLMAR);                              00302900
*%END IHABLDP;                                                          00303000
