/****************************** MODULE HEADER ***********************/          
/*                                                                  */          
/* Module Name: GIMHC370                                            */          
/*                                                                  */          
/* SMP/E API Macro for C/370                                        */          
/*                                                                  */          
/* Copyright (c) International Business Machines                    */          
/*   Corporation 1997                                               */          
/********************************************************************/          
/*                                                                  */          
/* ---------------------------------------------------------------- */          
/* FLAG REASON  RELEASE   DATE   ORG  DESCRIPTION                   */          
/* ---- ------- ------- -------- ---  ----------------------------- */          
/* $L0= SV1001A  1A.00  06/10/96 KAK: GIMAPI SUPPORT                */          
/* $P1= PT20078  1A.00  08/15/96 KAK: CSI_ENTRY POINTER TYPE WRONG  */          
/* $L1= SVV001B  1B.00  10/14/96 DMM: API VERSION SUPPORT           */          
/*                                                                  */          
/********************************************************************/          
/*   CHANGE FLAG KEY: M@PNC                                         */          
/*   WHERE:                                                         */          
/*                                                                  */          
/* M= MULTIPLE    P= DCRS = D,E,F,G    N= 0-9,A-Z     C= A = ADD    */          
/*    FOR DELETE     RMPS = H,I,J,K    (USE '0' ONLY     C = CHANGE */          
/*    FLAGS ONLY     LINE = L,M,N,O     WHEN ELEMENT     P = COPY   */          
/*                   PTMS = P,Q,R,S     IS BEING         M = MOVE   */          
/*                   APARS = 0-9        CREATED)         D = DELETE */          
/********************************************************************/          
#define LEN_ETYPE        12                                                     
#define LEN_MSG          256                                                    
typedef _Packed struct QUERY_PARMS  /* Parameters for QUERY command */          
{                                                                               
  char    *csi;                     /* PTR to global CSI dataset    */          
  long    csilen;                   /* Length of data set name      */          
  char    *zone;                    /* PTR to list of zones         */          
  long    zonelen;                  /* Length of zone list          */          
  char    *entrytype;               /* PTR to list of entries       */          
  long    entrylen;                 /* Length of entry list         */          
  char    *subentrytype;            /* PTR to list of subentries    */          
  long    subentrylen;              /* Length of subentry list      */          
  char    *filter;                  /* PTR to query filter          */          
  long    filterlen;                /* Length of filter             */          
} QUERY_PARMS, * P_QUERY_PARMS;                                                 
                                                                                
typedef _Packed struct ENTRY_LIST   /* List of entry types          */          
{                                                                               
  _Packed struct ENTRY_LIST *next;  /* PTR to next item in linked   */          
                                    /*  list                        */          
  _Packed struct CSI_ENTRY  *entries;/* PTR to head of linked list  */          
                                    /*  of CSI_ENTRY sturctures     */          
                                    /*  listing the instances of    */          
                                    /*  this entry type             */          
  char              type[12];       /* Entry type                   */          
} ENTRY_LIST, * P_ENTRY_LIST;                                                   
                                                                                
typedef _Packed struct CSI_ENTRY    /* Description of a specific    */          
{                                   /*  entry                       */          
  _Packed struct CSI_ENTRY  *next;  /* PTR to next item in linked   */          
                                    /*  list                        */          
  _Packed struct SUBENTRY   *subentries;/* PTR to head of linked    */          
                                    /*  list of SUBENTRY structures */          
                                    /*  listing the subentry values */          
                                    /*  for this entry              */          
  char              entryname[8];   /* Name of entry                */          
  char              zonename[7];    /* Zone where entry was retrieved*/         
} CSI_ENTRY, * P_CSI_ENTRY;         /*                          @P1C*/          
                                                                                
typedef _Packed struct SUBENTRY     /* Contains subentry data       */          
{                                                                               
  _Packed struct SUBENTRY   *next;  /* PTR to next item in linked   */          
                                    /*  list                        */          
  void              *subentrydata;  /* PTR to head of linked list   */          
                                    /*  of data values for this     */          
                                    /*  subentry                    */          
  char              type[12];       /* Subentry type                */          
} SUBENTRY, * P_SUBENTRY;                                                       
                                                                                
typedef _Packed struct VER          /* Place holder for subentries  */          
{                                   /*  associated with ++VER       */          
                                    /*  records of a SYSMOD         */          
  _Packed struct VER        *next;  /* PTR to next item in linked   */          
                                    /*  list                        */          
  _Packed struct SUBENTRY   *verdata;/* PTR to head of linked list  */          
                                    /*  of subentries associated    */          
                                    /*  with a ++VER                */          
  char              vernum[3];      /* ++VER statement number       */          
} VER, * P_VER;                                                                 
                                                                                
typedef _Packed struct ITEM_LIST    /* Holds piece of subentry data */          
{                                                                               
  _Packed struct ITEM_LIST  *next;  /* PTR to next item in linked   */          
                                    /*  list                        */          
  long              datalen;        /* Number of characters of real */          
                                    /*  data                        */          
  char              *data;          /* PTR to storage containing    */          
                                    /*  data                        */          
} ITEM_LIST, * P_ITEM_LIST;                                                     
                                                                                
typedef _Packed struct API_VERSION  /* output structure for     @L1A*/          
{                                   /*  the VERSION command     @L1A*/          
  char apiver[2];                   /* current SMP/E version    @L1A*/          
  char apirel[2];                   /* current SMP/E release    @L1A*/          
  char apimod[2];                   /* current SMP/E mod. level @L1A*/          
  char apiptf[2];                   /* current SMP/E PTF level  @L1A*/          
} API_VERSION, *P_API_VERSION;      /*                          @L1A*/          
