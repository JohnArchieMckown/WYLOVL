*%IEALSQRY: MACRO KEYS(TOKEN,RETCODE);                                  00000100
*/**** START OF SPECIFICATIONS **************************************** 00000200
*                                                                     * 00000300
*                                                                     * 00000400
*01* MACRO NAME:  IEALSQRY                               -09/08/95-<> * 00000500
*                                                                     * 00000600
*                                                                     * 00000700
*01* DESCRIPTIVE NAME:  Linkage Stack Query                           * 00000800
*                                                                     * 00000900
*01* PROPRIETARY STATEMENT:                                           * 00001000
*                                                                     * 00001100
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001200
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00001300
*     5645-001 (C) COPYRIGHT IBM CORP. 1996                           * 00001400
*                                                                     * 00001500
* STATUS= HBB6601                                                     * 00001600
*                                                                     * 00001700
*                                                                     * 00001800
*                                                                     * 00001900
*01* FUNCTION:                                                        * 00002000
*                                                                     * 00002100
*      Determine the current position on the linkage stack relative   * 00002200
*      to the most recent recovery routine.                           * 00002300
*                                                                     * 00002400
*      Use the resulting value in the recovery routine when an error  * 00002500
*      has occurred to prime field SDWALSLV when retrying to have the * 00002600
*      linkage stack at time of retry match the current position,     * 00002700
*      subject to the processing described subsequently.              * 00002800
*                                                                     * 00002900
*      The returned position depends upon the current state of        * 00003000
*      execution and of activated recovery routines, as follows:      * 00003100
*                                                                     * 00003200
*                                                                     * 00003300
*      o   If there are any FRRs, the position is relative to the     * 00003400
*          time-of-set linkage stack level for that FRR.  Note that   * 00003500
*          if that FRR was activated specifying INLINE=YES, instead,  * 00003600
*          a return code of 8 is returned.                            * 00003700
*                                                                     * 00003800
*      o   If there are no FRRs, but the caller holds a lock or is in * 00003900
*          SRB mode, a return code of 8 is returned.                  * 00004000
*                                                                     * 00004100
*      o   If there are no FRRs, and the caller is unlocked and in    * 00004200
*          task mode, and there is at least one ESTAE-type recovery   * 00004300
*          routine ((E)STAE(X), FESTAE, (E)STAI, or ARR) in effect,   * 00004400
*          the following rules apply:                                 * 00004500
*                                                                     * 00004600
*                                                                     * 00004700
*          -   If the most recently activated recovery routine is a   * 00004800
*              STAE, STAI, or FESTAE, a return code of 8 is returned. * 00004900
*                                                                     * 00005000
*          -   If the most recently activated recovery routine is an  * 00005100
*              ARR, the position is relative to the linkage stack     * 00005200
*              level with which the ARR is associated.                * 00005300
*                                                                     * 00005400
*          -   If the most recently activated recovery routine is an  * 00005500
*              ESTAE(X) for the current RB, the position is relative  * 00005600
*              to the linkage stack level current at the time the     * 00005700
*              ESTAE(X) was activated.                                * 00005800
*                                                                     * 00005900
*          -   If the most recently activated recovery routine is an  * 00006000
*              ESTAI, the position is relative to the linkage stack   * 00006100
*              level current at the time the newest PRB that is older * 00006200
*              than the oldest non-PRB was created.  (or simply the   * 00006300
*              newest PRB if all the RBs are PRBs).                   * 00006400
*                                                                     * 00006500
*                                                                     * 00006600
*                                                                     * 00006700
*          For purposes of discussion, "intermediate" linkage stack   * 00006800
*          entries are those after the time-of-set linkage stack      * 00006900
*          entry through the linkage stack entry requested on retry.  * 00007000
*                                                                     * 00007100
*          In all of these cases, retry will only be allowed to the   * 00007200
*          specified linkage stack level if                           * 00007300
*                                                                     * 00007400
*                                                                     * 00007500
*          -   All intermediate linkage stack entries were created by * 00007600
*              BAKR (as opposed to a stacking PC); and                * 00007700
*                                                                     * 00007800
*          -   For unauthorized ESTAE-type recovery routine           * 00007900
*              processing, all intermediate linkage stack entries     * 00008000
*              indicate problem state and the same PSW key with which * 00008100
*              the ESTAE-type recovery routine was activated.         * 00008200
*              (Processing of an authorized ESTAE-type recovery       * 00008300
*              routine has no restriction in this area.)              * 00008400
*                                                                     * 00008500
*                                                                     * 00008600
*          If either of these conditions is not met, the linkage      * 00008700
*          stack level at retry will be the most recently created one * 00008800
*          for which both of the above are true.                      * 00008900
*                                                                     * 00009000
*          In no case will retry be to a linkage stack level that was * 00009100
*          activated for an RB other than the retry RB.  If that were * 00009200
*          requested, the linkage stack level at retry would be the   * 00009300
*          one created most recently by the retry RB that met the     * 00009400
*          above conditions as well.                                  * 00009500
*                                                                     * 00009600
*      o   If there are no FRRs, and the caller is unlocked and in    * 00009700
*          task mode, and there are no (E)STAE(X)s/FESTAEs for this   * 00009800
*          RB and there are no (E)STAIs or ARRs in effect, a return   * 00009900
*          code of 8 is returned.                                     * 00010000
*                                                                     * 00010100
*                                                                     * 00010200
*                                                                     * 00010300
*      The returned token should only be used when a return code of 0 * 00010400
*      is received.                                                   * 00010500
*                                                                     * 00010600
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00010700
*                                                                     * 00010800
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00010900
*                                                                     * 00011000
*01* ENVIRONMENT:                                                     * 00011100
*                                                                     * 00011200
*                                                                     * 00011300
*      Minimum authorization: Problem state. PSW key 8-15.            * 00011400
*                                                                     * 00011500
*      Dispatchable unit mode: Task or SRB mode.                      * 00011600
*                                                                     * 00011700
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00011800
*                                                                     * 00011900
*      AMODE:            24- or 31-bit.                               * 00012000
*                                                                     * 00012100
*      ASC mode:         Primary or Access Register.                  * 00012200
*                                                                     * 00012300
*      Interrupt status: Enabled or disabled for I/O and external     * 00012400
*                        interrupts.                                  * 00012500
*                                                                     * 00012600
*      Locks:                                                         * 00012700
*                                                                     * 00012800
*                        The caller may hold the local lock of the    * 00012900
*                        primary address space and may additionally   * 00013000
*                        hold the CMS lock.  The caller may hold the  * 00013100
*                        CPU lock.  No locks are required.  If the    * 00013200
*                        primary address space does not match the     * 00013300
*                        home address space, the caller must not hold * 00013400
*                        the local lock of the home address space.    * 00013500
*                                                                     * 00013600
*      Control parameters: Control parameters must be in the primary  * 00013700
*                        address space.                               * 00013800
*                                                                     * 00013900
*                                                                     * 00014000
*                                                                     * 00014100
*01* PROGRAMMING REQUIREMENTS:                                        * 00014200
*                                                                     * 00014300
*    None.                                                            * 00014400
*                                                                     * 00014500
*01* RESTRICTIONS:                                                    * 00014600
*                                                                     * 00014700
*    Do not call the IEALSQRY service if running as a Disabled        * 00014800
*    Interrupt Exit (DIE).                                            * 00014900
*                                                                     * 00015000
*01* INPUT REGISTER INFORMATION:                                      * 00015100
*                                                                     * 00015200
*    Before issuing the IEALSQRY macro, the caller does not have to   * 00015300
*    place any information into any general purpose register (GPR).   * 00015400
*                                                                     * 00015500
*    Before issuing the IEALSQRY macro, the caller does not have to   * 00015600
*    place any information into any access register (AR)              * 00015700
*                                                                     * 00015800
*01* OUTPUT REGISTER INFORMATION:                                     * 00015900
*                                                                     * 00016000
*    When control returns to the caller, the GPRs contain:            * 00016100
*                                                                     * 00016200
*                                                                     * 00016300
*    REGISTER  CONTENTS                                               * 00016400
*                                                                     * 00016500
*    0         Output token value. Copied to area specified by TOKEN  * 00016600
*              parameter.                                             * 00016700
*                                                                     * 00016800
*    1         Used as work registers by the system                   * 00016900
*                                                                     * 00017000
*    2-13      Unchanged                                              * 00017100
*                                                                     * 00017200
*    14        Used as a work register by the system                  * 00017300
*                                                                     * 00017400
*    15        Return code                                            * 00017500
*                                                                     * 00017600
*                                                                     * 00017700
*                                                                     * 00017800
*    When control returns to the caller, the ARs contain:             * 00017900
*                                                                     * 00018000
*                                                                     * 00018100
*    REGISTER  CONTENTS                                               * 00018200
*                                                                     * 00018300
*    0-1       Used as work registers by the system                   * 00018400
*                                                                     * 00018500
*    2-13      Unchanged                                              * 00018600
*                                                                     * 00018700
*    14-15     Used as work registers by the system                   * 00018800
*                                                                     * 00018900
*                                                                     * 00019000
*                                                                     * 00019100
*01* PERFORMANCE IMPLICATIONS:                                        * 00019200
*                                                                     * 00019300
*    None.                                                            * 00019400
*                                                                     * 00019500
*01* SYNTAX:                                                          * 00019600
*                                                                     * 00019700
*[xlabel]  IEALSQRY   [ TOKEN=xtoken]                                 * 00019800
*                     [,RETCODE=xretcode]                             * 00019900
*                                                                     * 00020000
*                                                                     * 00020100
*      Where:                                                         * 00020200
*                                                                     * 00020300
*                                                                     * 00020400
*      [xlabel]                                                       * 00020500
*          is an optional symbol, starting in column 1, that is the   * 00020600
*          name on the IEALSQRY macro invocation.  The name must      * 00020700
*          conform to the rules for an ordinary assembler language    * 00020800
*          symbol.                                                    * 00020900
*          DEFAULT: No name.                                          * 00021000
*                                                                     * 00021100
*                                                                     * 00021200
*                                                                     * 00021300
*                                                                     * 00021400
*      [TOKEN(xtoken)]                                                * 00021500
*          is the name (RS-type) (or address in register (1)-(12) ASM * 00021600
*          only) of an optional halfword output area that is to       * 00021700
*          contain a token indicating the position on the linkage     * 00021800
*          stack relative to the current recovery routine.  This      * 00021900
*          value can be placed into field SDWALSLV by a recovery      * 00022000
*          routine.  The default is to leave the value in GPR 0.      * 00022100
*                                                                     * 00022200
*                                                                     * 00022300
*                                                                     * 00022400
*                                                                     * 00022500
*      [RETCODE(xretcode)]                                            * 00022600
*          is the name (RS-type) of an optional fullword output       * 00022700
*          variable (or register (2)-(12) ASM only) into which the    * 00022800
*          return code is to be copied from GPR 15.                   * 00022900
*                                                                     * 00023000
*                                                                     * 00023100
*                                                                     * 00023200
*01* ABEND CODES:                                                     * 00023300
*                                                                     * 00023400
*                                                                     * 00023500
*       B78                                                           * 00023600
*                                                                     * 00023700
*                 The user will get this completion code if the user  * 00023800
*                 held the local lock of the home address space but   * 00023900
*                 was running enabled with the primary address space  * 00024000
*                 different than the home address space.              * 00024100
*                                                                     * 00024200
*                                                                     * 00024300
*                                                                     * 00024400
*01* RETURN CODES:                                                    * 00024500
*                                                                     * 00024600
*                                                                     * 00024700
*       0         Meaning: Successful completion.                     * 00024800
*                                                                     * 00024900
*                 Action: None required.                              * 00025000
*                                                                     * 00025100
*       4         Meaning: Warning.  A linkage stack entry was        * 00025200
*                 encountered that violates the authorization or      * 00025300
*                 stacking-PC conditions which are required for       * 00025400
*                 successful retry.                                   * 00025500
*                                                                     * 00025600
*                 Action:  Avoid using the token when retrying.  You  * 00025700
*                 cannot retry to the current linkage stack level.    * 00025800
*                                                                     * 00025900
*       8         Meaning: Warning. No recovery routine of the proper * 00026000
*                 type exists.  If in a state from which you cannot   * 00026100
*                 issue ESTAEX, no FRR exists.  If in a state from    * 00026200
*                 which you can issue ESTAEX, either no recovery      * 00026300
*                 routine exists or the most recently activated       * 00026400
*                 recovery routine is STAE, STAI, or FESTAE.          * 00026500
*                                                                     * 00026600
*                 Action:  Avoid using the token when retrying.  You  * 00026700
*                 cannot retry to the current linkage stack level.    * 00026800
*                                                                     * 00026900
*       12        Meaning: Internal error.                            * 00027000
*                                                                     * 00027100
*                 Action: Do not call IEALSQRY service when running   * 00027200
*                 as a Disabled Interrupt Exit (DIE) or when running  * 00027300
*                 on the interrupt handler linkage stack.  Avoid      * 00027400
*                 using the token when retrying.  You cannot retry to * 00027500
*                 the current linkage stack level.                    * 00027600
*                                                                     * 00027700
*       16        Meaning: IBM Error.                                 * 00027800
*                                                                     * 00027900
*                 Action: Report the problem to IBM.  Avoid using the * 00028000
*                 token when retrying.  You cannot retry to the       * 00028100
*                 current linkage stack level.                        * 00028200
*                                                                     * 00028300
*                                                                     * 00028400
*                                                                     * 00028500
*01* REASON CODES:  None.                                             * 00028600
*                                                                     * 00028700
*01* MODULE TYPE:  ASSEM-PL/AS MACRO                                  * 00028800
*                                                                     * 00028900
*02*   PROCESSOR:  ASSEM-PL/AS                                        * 00029000
*                                                                     * 00029100
*01* COMPONENT:  SCRTM                                                * 00029200
*                                                                     * 00029300
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00029400
*                                                                     * 00029500
*01* EXAMPLES:                                                        * 00029600
*                                                                     * 00029700
*               IEALSQRY TOKEN=MYTOKEN                                * 00029800
*       .                                                             * 00029900
*       .                                                             * 00030000
*      MYTOKEN  DS    H         Output TOKEN                          * 00030100
*                                                                     * 00030200
*                                                                     * 00030300
*01* MACRO USAGE NOTES:                                               * 00030400
*                                                                     * 00030500
*                                                                     * 00030600
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00030700
*        global macro variable.  Any value other than 'NO' will       * 00030800
*        result in the macro expansion being printed.  The default is * 00030900
*        'YES'.  The following examples illustrate how the ZPRINT     * 00031000
*        variable should be set.                                      * 00031100
*                                                                     * 00031200
*                    GBLC &ZPRINT                                     * 00031300
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00031400
*                                                                     * 00031500
*                                                                     * 00031600
*                                                                     * 00031700
*01* CHANGE ACTIVITY:                                                 * 00031800
*                                                                     * 00031900
*   Flag LineItem  FMID    Date   ID    Comment                       * 00032000
*                                                                     * 00032100
*    $L0=RTMLSAMG HBB5520 940201 PD00XB:  Linkage stack query macro   * 00032200
*    $L1=RTMLS    HBB5520 940201 PD00XB:  Linkage stack query macro   * 00032300
****** END OF SPECIFICATIONS *****************************************/ 00032400
*/********************************************************************* 00032500
         MACRO                                                          00032600
&XLABEL  IEALSQRY &TOKEN=,&RETCODE=                                     00032700
.*                                                                      00032800
*              MACDATE -09/08/95-<0>                                    00032900
.*                                                                      00033000
.*******************************************************************    00033100
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00033200
.*******************************************************************    00033300
              GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                   00033400
              GBLC  &ZTEST      YES=TEST NO=NO TEST                     00033500
              GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX             00033600
.*                                                                      00033700
              GBLC  &ZIEALSQRY  YES=MACRO USED AT LEAST ONCE            00033800
.*******************************************************************    00033900
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00034000
.*******************************************************************    00034100
              LCLC  &ZMS        ERROR MESSAGE WORK AREA                 00034200
              LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS            00034300
              LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED              00034400
              LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR             00034500
              LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE             00034600
              LCLA  &ZAWRK      USED AS A WORK AREA                     00034700
              LCLA  &ZASIZ      USED FOR SIZE OF VALUE                  00034800
              LCLA  &ZN         NUMERIC WORK VARIABLE                   00034900
              LCLC  &ZC         CHARACTER WORK VARIABLE                 00035000
              LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE             00035100
              LCLA  &ZTLA       VALUE TOO LONG VARIABLE                 00035200
              LCLA  &ZMACRET    MACRO RETURN CODE                       00035300
&ZMACRET      SETA  0           ASSUME NO ERRORS                        00035400
.*                                                                      00035500
              LCLC  &ZCSYSLIST(255)             NONXKEY, POS ARRAY      00035600
              LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()              00035700
              LCLA  &ZPLLEN     PARAMETER LIST LENGTH                   00035800
              LCLC  &ZENDBASEPL                 End of base PL          00035900
.********************************************************************   00036000
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00036100
.********************************************************************   00036200
              GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL                 00036300
              GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE          00036400
.*                                                                      00036500
              AIF   (K'&SYSASCE GT 0).ZSYS4     SYS STATE DEFINED       00036600
              AIF   (K'&SYSSPLV GT 0).ZSYS2     SP LEVEL DEFINED        00036700
              SPLEVEL  TEST                                             00036800
.ZSYS2        ANOP  ,                                                   00036900
              AIF   ('&SYSSPLV' EQ '1').ZSYS3   PRE SP 3.1              00037000
              AIF   ('&SYSSPLV' EQ '2').ZSYS3   PRE SP 3.1              00037100
              SYSSTATE TEST                                             00037200
              AGO   .ZSYS4                                              00037300
.ZSYS3        ANOP  ,                                                   00037400
&SYSASCE      SETC  'P'         ASSUME SYSSTATE PRIMARY                 00037500
.ZSYS4        ANOP  ,                                                   00037600
.*******************************************************************    00037700
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00037800
.*******************************************************************    00037900
              LCLC  &XTOKEN     ++ NAME                                 00038000
              LCLC  &XRETCODE   ++ NAME                                 00038100
.*******************************************************************    00038200
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00038300
.*******************************************************************    00038400
              LCLC  &ZXTOKEN    ++ OUTPUT NAME                          00038500
              LCLC  &ZXRETCODE  ++ OUTPUT NAME                          00038600
.********************************************************************   00038700
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00038800
.********************************************************************   00038900
              ACTR  10000                                               00039000
.*----------------------------------------------------------------***   00039100
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00039200
              AIF   (N'&TOKEN LE 1).ZG2A        CK NUM                  00039300
&ZMS          SETC  '"TOKEN='   *KPOSA* MNOTE                           00039400
&ZMS          SETC  '&ZMS.&TOKEN"'                                      00039500
&ZMS          SETC  '&ZMS "TOKEN"'                                      00039600
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00039700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00039800
.ZG2A         ANOP  ,                                                   00039900
.*-------------------------------------------------------------------   00040000
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00040100
              AIF   (K'&TOKEN(1) LE 0).ZG2C     NO PARM                 00040200
&ZXTOKEN      SETC  'OUTPUT'    SET OUTPUT                              00040300
&XTOKEN       SETC  '&TOKEN(1)'                 SET XVARIABLE           00040400
              AIF   (N'&TOKEN GT 1).ZG2C                                00040500
&XTOKEN       SETC  '&TOKEN'    SET XVARIABLE                           00040600
.ZG2C         ANOP  ,                                                   00040700
.*-------------------------------------------------------------------   00040800
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00040900
              AIF   (K'&ZXTOKEN LE 0).ZG2R      NOT I/O                 00041000
              AIF   ('&XTOKEN'(1,1) NE '(').ZG2R                        00041100
&ZCGPR        SETC  '&XTOKEN'(2,K'&XTOKEN-2)                            00041200
              AIF   ('&ZCGPR'(1,1) NE '0').ZG2P                         00041300
              AIF   (K'&ZCGPR GT 2).ZG2Q                                00041400
              AIF   ('&ZCGPR' EQ '0').ZG2Q                              00041500
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00041600
              AIF   (T'&ZCGPR NE 'N').ZG2Q      INVALID REG NAME        00041700
.ZG2P         ANOP  ,                                                   00041800
              AIF   (T'&ZCGPR NE 'N').ZG2R      NON NUMERIC             00041900
              AIF   ('&ZCGPR' LT '1').ZG2Q                              00042000
              AIF   ('&ZCGPR' LE '12').ZG2R                             00042100
.ZG2Q         ANOP  ,                                                   00042200
&ZMS          SETC  '"TOKEN='   *KGPRA* MNOTE                           00042300
&ZMS          SETC  '&ZMS.&TOKEN"'                                      00042400
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00042500
              MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                    00042600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00042700
.ZG2R         ANOP  ,                                                   00042800
.*----------------------------------------------------------------***   00042900
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00043000
              AIF   (N'&RETCODE LE 1).ZG5A      CK NUM                  00043100
&ZMS          SETC  '"RETCODE='                 *KPOSA* MNOTE           00043200
&ZMS          SETC  '&ZMS.&RETCODE"'                                    00043300
&ZMS          SETC  '&ZMS "RETCODE"'                                    00043400
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00043500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00043600
.ZG5A         ANOP  ,                                                   00043700
.*-------------------------------------------------------------------   00043800
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00043900
              AIF   (K'&RETCODE(1) LE 0).ZG5C   NO PARM                 00044000
&ZXRETCODE    SETC  'OUTPUT'    SET OUTPUT                              00044100
&XRETCODE     SETC  '&RETCODE(1)'               SET XVARIABLE           00044200
              AIF   (N'&RETCODE GT 1).ZG5C                              00044300
&XRETCODE     SETC  '&RETCODE'  SET XVARIABLE                           00044400
.ZG5C         ANOP  ,                                                   00044500
.*-------------------------------------------------------------------   00044600
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00044700
              AIF   (K'&ZXRETCODE LE 0).ZG5R    NOT I/O                 00044800
              AIF   ('&XRETCODE'(1,1) NE '(').ZG5R                      00044900
&ZCGPR        SETC  '&XRETCODE'(2,K'&XRETCODE-2)                        00045000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG5P                         00045100
              AIF   (K'&ZCGPR GT 2).ZG5Q                                00045200
              AIF   ('&ZCGPR' EQ '0').ZG5Q                              00045300
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00045400
              AIF   (T'&ZCGPR NE 'N').ZG5Q      INVALID REG NAME        00045500
.ZG5P         ANOP  ,                                                   00045600
              AIF   (T'&ZCGPR NE 'N').ZG5R      NON NUMERIC             00045700
              AIF   ('&ZCGPR' LT '2').ZG5Q                              00045800
              AIF   ('&ZCGPR' LE '12').ZG5R                             00045900
.ZG5Q         ANOP  ,                                                   00046000
&ZMS          SETC  '"RETCODE='                 *KGPRA* MNOTE           00046100
&ZMS          SETC  '&ZMS.&RETCODE"'                                    00046200
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00046300
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00046400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00046500
.ZG5R         ANOP  ,                                                   00046600
.******************************************************************     00046700
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00046800
.******************************************************************     00046900
              ACTR  10000                                               00047000
.*----------------------------------------------------------------***   00047100
.***AH.P02 EXTRA POSITIONALS                                            00047200
              AIF   (N'&SYSLIST LE 0).ZGLISTX   NO EXTRAS               00047300
              AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL                00047400
              AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL            00047500
              AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL             00047600
.ZGLISTX1     ANOP  ,                                                   00047700
&ZCVAL        SETC  ''          ERROR FIELD                             00047800
&ZAWRK        SETA  0           POSITIONAL NUMBER                       00047900
.ZGLIST2      ANOP  ,                                                   00048000
&ZAWRK        SETA  &ZAWRK+1    NEXT POSITIONAL                         00048100
              AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE                00048200
&ZCVAL        SETC '&ZCVAL,&SYSLIST(&ZAWRK)'    EXTRA                   00048300
              AGO   .ZGLIST2                                            00048400
.*                                                                      00048500
.ZGLIST3      ANOP  ,                                                   00048600
&ZCVAL        SETC '&ZCVAL'(2,K'&ZCVAL-1)       STRIP COMMA             00048700
&ZMS          SETC  'POSITIONAL ARGUMENT(S),'   *PPOSA* MNOTE           00048800
&ZMS          SETC  '&ZMS "&ZCVAL"'                                     00048900
&ZMS          SETC  '&ZMS CANNOT BE USED.'                              00049000
&ZMS          SETC  '&ZMS NO POSITIONAL ARGUMENTS'                      00049100
              MNOTE 8,' &ZMS ARE ALLOWED.'                              00049200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00049300
.ZGLISTX      ANOP  ,                                                   00049400
&ZASYSLNDX    SETA  0                                                   00049500
.*******************************************************************    00049600
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00049700
.*******************************************************************    00049800
              AIF   (&ZMACRET NE 0).ZLX2        ERROR DETECTED          00049900
.*******************************************************************    00050000
.***AE.01  START OF IEALSQRY MACRO CODE                                 00050100
.*******************************************************************    00050200
              LCLC  &M0M0001                 NAME                       00050300
&M0M0001      SETC  '&XLABEL'                SET NAME                   00050400
              AIF   (K'&XLABEL NE 0).XLAB2                              00050500
&M0M0001      SETC  'M00M&SYSNDX'            DEFAULT NAME               00050600
.*                                                                      00050700
.XLAB2        ANOP  ,                                                   00050800
&M0M0001 DS    0H                             IEALSQRY-0                00050900
.*******************************************************************    00051000
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00051100
.*******************************************************************    00051200
              PUSH  PRINT                                               00051300
              AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON          00051400
              PRINT OFF         ++ PR01                                 00051500
              AGO   .ZPRNTXX                                            00051600
.ZPRINTX      PRINT ON                                                  00051700
.ZPRNTXX      ANOP  ,                                                   00051800
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00051900
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00052000
.********************************************************************   00052100
.***AL.A01  INTERNAL ARRAY TO PRODUCE FORMATTED CODE                    00052200
.********************************************************************   00052300
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00052400
                      LCLA  &ZOPN1         INVOCATION INDEX             00052500
                      LCLC  &ZOPL(4095)    LABEL                        00052600
                      LCLC  &ZOPO(4095)    OPERATION                    00052700
                      LCLC  &ZOPV(4095)    VALUE                        00052800
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00052900
.*                                                                      00053000
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00053100
.*-------------------------------------------------------------------   00053200
&ZOPN1                SETA &ZOPN                                        00053300
.*******************************************************************    00053400
.***AO.X02  RETURN CODE PROCESSING                                      00053500
.*******************************************************************    00053600
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00053700
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00053800
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00053900
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00054000
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00054100
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00054200
&ZOPN                 SETA  &ZOPN+1                                     00054300
&ZOPL(&ZOPN)          SETC  ' '                                         00054400
&ZOPO(&ZOPN)          SETC  'ST'                                        00054500
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00054600
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00054700
                      AGO   .ZMRETX                                     00054800
.*                                                                      00054900
.ZMRET2               ANOP  ,                                           00055000
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00055100
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00055200
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00055300
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00055400
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00055500
&ZOPN                 SETA  &ZOPN+1                                     00055600
&ZOPL(&ZOPN)          SETC  ' '                                         00055700
&ZOPO(&ZOPN)          SETC  'LR'                                        00055800
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00055900
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00056000
.ZMRETX               ANOP  ,                                           00056100
.*******************************************************************    00056200
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00056300
.*******************************************************************    00056400
                      ACTR  10000                                       00056500
.*                                                                      00056600
                      LCLA  &ZLC           COLUMN POSITION              00056700
                      LCLA  &ZOPX          LIST TABLE INDEX             00056800
                      LCLC  &ZLL           LABEL                        00056900
                      LCLC  &ZLOP          OPERATION                    00057000
                      LCLC  &ZLV           VALUE                        00057100
                      LCLC  &ZLD           DESCRIPTION                  00057200
.*                                                                      00057300
&ZOPX                 SETA  1                                           00057400
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00057500
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00057600
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00057700
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00057800
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00057900
                      AIF   (K'&ZLD LE 0).ZL5                           00058000
&ZLC                  SETA  35             COMMENT COLUMN               00058100
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00058200
&ZLC                  SETA  33             COMMMENT COLUMN              00058300
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00058400
&ZLV                  SETC  '&ZLV'.' '                                  00058500
                      AGO   .ZL3                                        00058600
.*                                                                      00058700
.ZL4                  ANOP  ,                                           00058800
&ZLV                  SETC  '&ZLV'.' '                                  00058900
.ZL5                  ANOP  ,                                           00059000
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00059100
.*                                                                      00059200
&ZLL     &ZLOP &ZLV                                                     00059300
.*                                                                      00059400
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00059500
                      AGO   .ZL2           CONTINUE LOOPING             00059600
.*                                                                      00059700
.ZLX                  ANOP  ,                                           00059800
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00059900
           SLR   1,1                     No parameter information  @L1A 00060000
           L     14,16(0,0)              Get CVT address           @L1A 00060100
           L     14,772(14,0)            Get SFT address           @L1A 00060200
           L     14,436(14,0)            Get LX/EX for service rtn @L1A 00060300
           PC    0(14)                   PC to routine             @L1A 00060400
           AIF   ('&TOKEN' EQ '').TKN2                             @L1A 00060500
           AIF   ('&XTOKEN'(1,1) NE '(').TKN1                      @L1A 00060600
           STH   0,0&XTOKEN                                        @L1A 00060700
           AGO   .TKN2                                             @L1A 00060800
.TKN1      ANOP  ,                                                 @L1A 00060900
           STH   0,&XTOKEN                                         @L1A 00061000
.TKN2      ANOP  ,                                                 @L1A 00061100
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00061200
.*******************************************************************    00061300
.***AP.X01  FORMAT GENERATED CODE                                       00061400
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00061500
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00061600
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00061700
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00061800
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00061900
                      AIF   (K'&ZLD LE 0).ZL51                          00062000
&ZLC                  SETA  35             COMMENT COLUMN               00062100
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00062200
&ZLC                  SETA  33             COMMENT COLUMN               00062300
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00062400
&ZLV                  SETC  '&ZLV'.' '                                  00062500
                      AGO   .ZL31                                       00062600
.*                                                                      00062700
.ZL41                 ANOP  ,                                           00062800
&ZLV                  SETC  '&ZLV'.' '                                  00062900
.ZL51                 ANOP  ,                                           00063000
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00063100
.*                                                                      00063200
&ZLL     &ZLOP &ZLV                                                     00063300
.*                                                                      00063400
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00063500
                      AGO   .ZL21          CONTINUE LOOPING             00063600
.*                                                                      00063700
.ZLX1                 ANOP  ,                                           00063800
.*******************************************************************    00063900
.***AP.X02  END OF IEALSQRY MACRO                                       00064000
&ZIEALSQRY            SETC  'YES'          SET IEALSQRY USED            00064100
         POP   PRINT                                                    00064200
*                                            IEALSQRY-0                 00064300
         SPACE 1                                                        00064400
.ZLX2                 ANOP  ,                                           00064500
         MEND                                                           00064600
**********************************************************************/ 00064700
*/**** START OF SPECIFICATIONS **************************************** 00064800
*                                                                     * 00064900
*                                                                     * 00065000
*01* MACRO NAME:  IEALSQRY                               -09/08/95-<> * 00065100
*                                                                     * 00065200
*                                                                     * 00065300
*01* DESCRIPTIVE NAME:  Linkage Stack Query                           * 00065400
*                                                                     * 00065500
*01* PROPRIETARY STATEMENT:                                           * 00065600
*                                                                     * 00065700
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00065800
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00065900
*     5645-001 (C) COPYRIGHT IBM CORP. 1996                           * 00066000
*                                                                     * 00066100
* STATUS= HBB6601                                                     * 00066200
*                                                                     * 00066300
*                                                                     * 00066400
*                                                                     * 00066500
*01* FUNCTION:                                                        * 00066600
*       See the IEALSQRY macro prologue for details.                  * 00066700
*                                                                     * 00066800
*01* INPUT:                                                           * 00066900
*                                                                     * 00067000
*            ?IEALSQRY    [TOKEN(xtoken)]                             * 00067100
*                         [RETCODE(xretcode)]                         * 00067200
*                                                                     * 00067300
****** END OF SPECIFICATIONS *****************************************/ 00067400
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 00067500
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                00067600
*  ANS('/* ? IEALSQRY '||MACLIST||' ')                                  00067700
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00067800
*                                                                       00067900
*  DCL ZELO  FIXED;                                                     00068000
*  DCL ZECOL FIXED;                                                     00068100
*                                                                       00068200
*  ZELO=1;     /* STARTING COLUMN */                                    00068300
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00068400
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    00068500
*    IF ZECOL>0                                                         00068600
*      THEN                                                             00068700
*        DO;   /* PARENTHESIS FOUND */                                  00068800
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)||' ')                         00068900
*             NORESCAN COL(MACLMAR+5);                                  00069000
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   00069100
*        END;                                                           00069200
*      ELSE                                                             00069300
*        DO;   /* REMAINING KEYS */                                     00069400
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           00069500
*             NORESCAN COL(MACLMAR+5);                                  00069600
*          ZELO=LENGTH(MACKEYS)+1;                                      00069700
*        END;                                                           00069800
*  END;                                                                 00069900
*  ANS(' -09/08/95-0- */')                                              00070000
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00070100
*/********************************************************************/ 00070200
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00070300
*/********************************************************************/ 00070400
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00070500
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00070600
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00070700
*                                                                       00070800
*  DCL   ZIEALSQRY CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */ 00070900
*  DEACT ZIEALSQRY;                                                     00071000
*                                                                       00071100
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00071200
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00071300
*                                                                       00071400
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00071500
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00071600
*                                                                       00071700
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00071800
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00071900
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00072000
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00072100
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00072200
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00072300
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00072400
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00072500
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00072600
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00072700
*                                                                       00072800
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00072900
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00073000
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00073100
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00073200
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00073300
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00073400
*/*******************************************************************/  00073500
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00073600
*/*******************************************************************/  00073700
*  DCL XTOKEN;  DEACT XTOKEN;      /***PV.XVAR02 OUTPUT NAME */         00073800
*  DCL ZXTOKEN; DEACT ZXTOKEN;     /***INPUT/OUTPUT CONTROL */          00073900
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00074000
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00074100
*/********************************************************************/ 00074200
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00074300
*/********************************************************************/ 00074400
*  ZC='OFF';                                 /* DEFAULT FLAG OFF */     00074500
*/********************************************************************/ 00074600
*/***PD.P02 DEFAULT ECHO                                             */ 00074700
*/********************************************************************/ 00074800
*        ANS('/*DEFAULT(S): */')                                        00074900
*           NORESCAN COL(MACLMAR+5);                                    00075000
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00075100
*    THEN                                                               00075200
*      ANS('/* NONE. */')                                               00075300
*         NORESCAN COL(MACLMAR+5);                                      00075400
*/********************************************************************/ 00075500
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00075600
*/********************************************************************/ 00075700
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00075800
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00075900
*                                                                       00076000
*  IF SYSASCE=''                                                        00076100
*    THEN                                                               00076200
*      DO;                                                              00076300
*        IF SYSSPLV=''                                                  00076400
*          THEN                                                         00076500
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00076600
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00076700
*          THEN                                                         00076800
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00076900
*          ELSE                                                         00077000
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00077100
*      END;                                                             00077200
*/********************************************************************/ 00077300
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00077400
*/********************************************************************/ 00077500
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00077600
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00077700
*    THEN                                                               00077800
*      DO;                                                              00077900
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'|| /**PPOSP* MSG*/            00078000
*            ' "'||MACLIST||'"'||                                       00078100
*            ' CANNOT BE USED.'||                                       00078200
*            ' NO POSITIONAL ARGUMENTS'||                               00078300
*            ' ARE ALLOWED.';                                           00078400
*        ANS MSG('?IEALSQRY ---> '||ZMS);                               00078500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00078600
*        ZMACRET=8;                          /* MACRO ERROR */          00078700
*      END;                                                             00078800
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00078900
*  IF TOKEN='TOKEN' | TOKEN='()'             /*CHECK ENTRY*/            00079000
*    THEN                                                               00079100
*      DO;                                                              00079200
*        ZMS=' 8, THE "TOKEN" KEY'||         /**KOPTP* MSG*/            00079300
*            ' MUST CONTAIN ONE'||                                      00079400
*            ' (OR MORE) ARGUMENT(S).';                                 00079500
*        ANS MSG('?IEALSQRY ---> '||ZMS);                               00079600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00079700
*        ZMACRET=8;                          /* MACRO ERROR */          00079800
*      END;                                                             00079900
*  IF NUMBER(TOKEN)>1                        /* CHECK POSITIONALS */    00080000
*    THEN                                                               00080100
*      DO;                                                              00080200
*        ZMS=' 8, "TOKEN'||                  /**KPOSP* MSG*/            00080300
*            TOKEN||                                                    00080400
*            '" "TOKEN"'||                                              00080500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00080600
*        ANS MSG('?IEALSQRY ---> '||ZMS);                               00080700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00080800
*        ZMACRET=8;                          /* MACRO ERROR */          00080900
*      END;                                                             00081000
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00081100
*  IF TOKEN(1)^=''                           /* CHECK FOR NULL */       00081200
*    THEN                                                               00081300
*      DO;                                                              00081400
*        XTOKEN=TOKEN(1);                    /* SET XVARIABLE */        00081500
*        ZXTOKEN='OUTPUT';                   /* SET OUTPUT */           00081600
*      END;                                                             00081700
*  ELSE                                                                 00081800
*    IF ZXTOKEN^=''                                                     00081900
*      THEN                                                             00082000
*        ZXTOKEN='';                         /* RESET OUTPUT */         00082100
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00082200
*  IF RETCODE='RETCODE' | RETCODE='()'       /*CHECK ENTRY*/            00082300
*    THEN                                                               00082400
*      DO;                                                              00082500
*        ZMS=' 8, THE "RETCODE" KEY'||       /**KOPTP* MSG*/            00082600
*            ' MUST CONTAIN ONE'||                                      00082700
*            ' (OR MORE) ARGUMENT(S).';                                 00082800
*        ANS MSG('?IEALSQRY ---> '||ZMS);                               00082900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00083000
*        ZMACRET=8;                          /* MACRO ERROR */          00083100
*      END;                                                             00083200
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00083300
*    THEN                                                               00083400
*      DO;                                                              00083500
*        ZMS=' 8, "RETCODE'||                /**KPOSP* MSG*/            00083600
*            RETCODE||                                                  00083700
*            '" "RETCODE"'||                                            00083800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00083900
*        ANS MSG('?IEALSQRY ---> '||ZMS);                               00084000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00084100
*        ZMACRET=8;                          /* MACRO ERROR */          00084200
*      END;                                                             00084300
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00084400
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00084500
*    THEN                                                               00084600
*      DO;                                                              00084700
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00084800
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00084900
*      END;                                                             00085000
*  ELSE                                                                 00085100
*    IF ZXRETCODE^=''                                                   00085200
*      THEN                                                             00085300
*        ZXRETCODE='';                       /* RESET OUTPUT */         00085400
*/********************************************************************/ 00085500
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00085600
*/********************************************************************/ 00085700
*  IF ZMACRET = 0                                                       00085800
*    THEN                                                               00085900
*      DO;                                                              00086000
*/********************************************************************/ 00086100
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00086200
*/********************************************************************/ 00086300
*  ANS(MACCONC||'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);             00086400
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00086500
*    THEN                                                               00086600
*      ANS(MACCONC||'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);          00086700
*    ELSE                                                               00086800
*      ANS(MACCONC||'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);          00086900
*/********************************************************************/ 00087000
*/*PE.DO01 OUTER MACRO DO STATEMENT----------------------------------*/ 00087100
*  ANS('DO; /* IEALSQRY-0 */')                                          00087200
*      NORESCAN COL(MACLMAR);                                           00087300
*/*MCMPLS02 RFY 15*/                                                    00087400
*  ANS('RFY GPR15F RSTD;/*1a*/') NORESCAN COL(MACLMAR);                 00087500
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00087600
 DCL EHAMAPS CHAR EXTERNAL;                             /*       @L1A*/ 00087700
 IF INDEX(EHAMAPS,'XM@')=0 THEN                         /*       @L1A*/ 00087800
   EHAMAPS=EHAMAPS||'XM@,';                             /*       @L1A*/ 00087900
 IF INDEX(EHAREGS,'00F')=0 THEN                         /*       @L1A*/ 00088000
   EHAREGS=EHAREGS||'00F';                              /*       @L1A*/ 00088100
 IF INDEX(EHAREGS,'01F')=0 THEN                         /*       @L1A*/ 00088200
   EHAREGS=EHAREGS||'01F';                              /*       @L1A*/ 00088300
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00088400
*        ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);               00088500
*/*PI.A23 INVOKE FUNCTION--------------------------------------------*/ 00088600
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00088700
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00088800
 ANS('RFY GPR01F RSTD;') SKIP COL(5);                   /*       @L1A*/ 00088900
 ANS('GPR01F = 0;') SKIP COL(5);                        /*       @L1A*/ 00089000
 ANS('PC(XM@(110));') SKIP COL(5);                      /*       @L1A*/ 00089100
 ANS('RFY GPR01F UNRSTD;') SKIP COL(5);                 /*       @L1A*/ 00089200
 IF TOKEN ^= '' THEN                                    /*       @L1A*/ 00089300
 DO;                                                    /*       @L1A*/ 00089400
   ANS('RFY (GPR00F,GPR15F) RSTD;') SKIP COL(5);        /*       @L1A*/ 00089500
   ANS(XTOKEN || ' = GPR00F;')                                          00089600
        SKIP COL(5);                                    /*       @L1A*/ 00089700
   ANS('RFY (GPR00F,GPR15F) UNRSTD;') SKIP COL(5);      /* Ensure R15   00089800
           stays restricted until the processing of RETCODE      @L1A*/ 00089900
 END;                                                   /*       @L1A*/ 00090000
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00090100
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00090200
*              IF NUMBER(RETCODE)>0                                     00090300
*                THEN                                                   00090400
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00090500
*/*PO.L08 XRETCODE  RETURN CODE--------------------------------------*/ 00090600
*              IF NUMBER(RETCODE)>0                                     00090700
*                THEN                                                   00090800
*                    ANS(XRETCODE||                                     00090900
*                     '=GPR15F; /* SET RETURN CODE */')                 00091000
*                      NORESCAN COL(MACLMAR);                           00091100
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00091200
*              IF NUMBER(RETCODE)>0                                     00091300
*                THEN                                                   00091400
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00091500
*/*PO.L13 IEALSQRY USAGE INDICATOR-----------------------------------*/ 00091600
*  ZIEALSQRY='YES';                          /* SET IEALSQRY USED */    00091700
*/*PO.L14 END OF EXECUTABLE IEALSQRY-0 MACRO-------------------------*/ 00091800
*  ANS('END; /* IEALSQRY-0 */')                                         00091900
*      NORESCAN COL(MACLMAR);                                           00092000
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00092100
*  ANS(MACCONC||'LIST POP NOECHO;') NORESCAN COL(MACLMAR);              00092200
*/*PO.L17 END OF IEALSQRY MACRO--------------------------------------*/ 00092300
*  ANS(MACCONC||'SPACE;') NORESCAN COL(MACLMAR);                        00092400
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00092500
*/*******************************************************************/  00092600
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00092700
*/*******************************************************************/  00092800
*      END;                                                             00092900
*/*******************************************************************/  00093000
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00093100
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00093200
*/*******************************************************************/  00093300
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00093400
*    THEN                                                               00093500
*      DO;                                                              00093600
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00093700
*                                      DOUBLEWORD MULTIPLES        */   00093800
*/*******************************************************************/  00093900
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00094000
*/*******************************************************************/  00094100
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00094200
*          THEN                                                         00094300
*            DO;                                                        00094400
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00094500
*                THEN                                                   00094600
*                  DO;                                                  00094700
*                    ANS('?EPILOG                                       00094800
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00094900
*                    EHALIST=EHALIST||',AMG,';                          00095000
*                  END;                                                 00095100
*            END;                                                       00095200
*/*******************************************************************/  00095300
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00095400
*/*******************************************************************/  00095500
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00095600
*          THEN                                                         00095700
*            DO;                                                        00095800
*              IF ZPRMMAX>EHAMAXLEN                                     00095900
*                THEN                                                   00096000
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00096100
*            END;                                                       00096200
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00096300
*          ANS('?EPILOG STRING('''||ZPRM(ZI)||''');')                   00096400
*              COL(MACLMAR);                                            00096500
*        END;                                                           00096600
*      END;                                                             00096700
*/*-----------------------------------------------------------------*/  00096800
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00096900
*/*        BY ?EPILOG                                               */  00097000
*/*-----------------------------------------------------------------*/  00097100
*        IF INDEX(EHAREGS,'01P')=0                                      00097200
*          THEN                                                         00097300
*            EHAREGS=EHAREGS||'01P'; /* GPR01P                      */  00097400
*        IF INDEX(EHAREGS,'15F')=0                                      00097500
*          THEN                                                         00097600
*            EHAREGS=EHAREGS||'15F'; /* GPR15F                      */  00097700
*  RETURN CODE(ZMACRET);                                                00097800
*%END IEALSQRY;                                                         00097900
