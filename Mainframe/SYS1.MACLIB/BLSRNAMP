*/**  Start of Specifications for BLSRNAMP ***************************/ 00050000
*/*                                                                  */ 00100000
*/* $MAC(BLSRNAMP) COMP(SC132) PROD(HBB5510): Name parameter list    */ 00150000
*/*                                                                  */ 00157100
*/*  ACRONYM:    BLSRNAMP                                            */ 00164200
*/*  MACRO NAME: BLSRNAMP                                            */ 00171300
*/*  DSECT NAME: NAMP                                                */ 00178400
*/*  COMPONENT:  IPCS (SC132)                                        */ 00185500
*/*  DESCRIPTIVE NAME: IPCS NAME service parameter list              */ 00192600
*/*                                                                  */ 00200000
*/*   PROPRIETARY STATEMENT =                                        */ 00211100
*/*                                                                  */ 00222200
*/*    LICENSED MATERIALS - PROPERTY OF IBM                          */ 00233300
*/*    THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                   */ 00244400
*/*    5655-068 (C) COPYRIGHT IBM CORP. 1977, 1993                   */ 00255500
*/*    SEE COPYRIGHT INSTRUCTIONS                                    */ 00266600
*/*                                                                  */ 00277700
*/*    STATUS = HBB5510                                              */ 00288800
*/*                                                                  */ 00300000
*/* FUNCTION = This parameter list is used by IPCS exits and the     */ 00750000
*/* NAME Subcommand to request the NAME service to convert a STOKEN  */ 00800000
*/* or the real address of a data space ASTE to data space name and  */ 00850000
*/* the owning ASID.                                                 */ 00900000
*/*                                                                  */ 00950000
*/*  EXTERNAL CLASSIFICATION: GUPI                                   */ 01202200
*/*  END OF EXTERNAL CLASSIFICATION:                                 */ 01204400
*/*                                                                  */ 01206600
*/*  EYE CATCHER: NAMP                                               */ 01208800
*/*  OFFSET: 0                                                       */ 01211000
*/*  LENGTH: 4                                                       */ 01213200
*/*                                                                  */ 01215400
*/*  STORAGE ATTRIBUTES:                                             */ 01217600
*/*  SUBPOOL: 0 through 127, 251                                     */ 01223100
*/*  KEY: 8                                                          */ 01228600
*/*  DATA SPACE: No                                                  */ 01230800
*/*  RESIDENCY: LOC(ANY)                                             */ 01233000
*/*  SIZE:      100 bytes                                            */ 01235200
*/*  CREATED BY: IPCS exits that use the IPCS Name Service           */ 01237400
*/*  POINTED TO BY: N/A                                              */ 01239600
*/*  SERIALIZATION: N/A                                              */ 01241800
*/*                                                                  */ 01244000
*/* METHOD OF ACCESS:                                                */ 01246200
*/*                                                                  */ 01250000
*/* -  ASM = The assembler format takes the form                     */ 01255800
*/*                                                                  */ 01261600
*/*          LABEL  BLSRNAMP DSECT=YES                               */ 01267400
*/*                                NO                                */ 01273200
*/*                                                                  */ 01279000
*/*          The LABEL is used as the prefix for all the             */ 01284800
*/*          field names.  The label cannot exceed 4 characters.     */ 01290600
*/*          For example code 'NAMP   BLSRNAMP DSECT=YES'            */ 01296400
*/*                                                                  */ 01302200
*/*          DSECT=YES will cause a DSECT to be generated.           */ 01308000
*/*                    The initial values will be ignored.           */ 01313800
*/*                                                                  */ 01319600
*/*          DSECT=NO  will cause a set of initialized DCs           */ 01325400
*/*                    to be generated.                              */ 01331200
*/*                                                                  */ 01337000
*/* -   PLS = The macro can expand in a LIST or SUBLIST format.      */ 01342800
*/*                                                                  */ 01350000
*/*       Set macro variable EHBENDCHAR to comma or semicolon.       */ 01400000
*/*       Defaults to semicolon for LIST form and must be set        */ 01450000
*/*       for the SUBLIST form.  For example:                        */ 01500000
*/*                                                                  */ 01550000
*/*         %DCL EHBENDCHAR EXTERNAL CHAR                            */ 01600000
*/*         %EHBENDCHAR=','                                          */ 01650000
*/*                                                                  */ 01700000
*/*      LIST FORM    = ?BLSRNAMP MF(LIST,PREFIX,STORCLASS)          */ 01800000
*/*                                                                  */ 01850000
*/*      SUBLIST FORM = ?BLSRNAMP MF(SUBLIST,PREFIX,STORCLASS,LEVEL) */ 01900000
*/*                                                                  */ 01950000
*/*        MF                                                        */ 02000000
*/*       PARM  Meaning                                              */ 02050000
*/*       ----  ---------------------------------------------------  */ 02100000
*/*                                                                  */ 02150000
*/*        1    LIST or L for LIST form                              */ 02200000
*/*             SUBLIST or S for SUBLIST form                        */ 02250000
*/*                                                                  */ 02300000
*/*        2    PREFIX is from 1 to 4 alpha-numeric starting with    */ 02350000
*/*             an alpha character. e.g. 'NAMP'                      */ 02400000
*/*                                                                  */ 02450000
*/*        3    STORAGE CLASS and initialization attribute           */ 02500000
*/*             COMPLETE keyword will cause initial values to        */ 02550000
*/*             be generated.  Default storage class with COMPLETE   */ 02600000
*/*             is STATIC LOCAL.  Can specify BASED, DEFINED ...     */ 02650000
*/*                                                                  */ 02700000
*/*        4    Structure level number to start with.  This can      */ 02750000
*/*             only be specified on the SUBLIST form.               */ 02800000
*/*                                                                  */ 02850000
*/* ================================================================ */ 02900000
*/*                                                                  */ 03600000
*/* NOTES =                                                          */ 03650000
*/*   DEPENDENCIES = This macro requires external macro variables    */ 03700000
*/*   be declared in one of the two following ways:                  */ 03750000
*/*                                                                  */ 03800000
*/*   1. Use the BLSRPROC macro to generate the PROC statement and   */ 03850000
*/*      macro declares.                                             */ 03900000
*/*                                                                  */ 03950000
*/*   2. Use the BLSRMAC0 macro to generate only the declares.       */ 04000000
*/*                                                                  */ 04100000
*/*   CHARACTER CODE DEPENDENCIES = None                             */ 04150000
*/*   RESTRICTIONS = None                                            */ 04200000
*/*   REGISTER CONVENTIONS = None                                    */ 04250000
*/*                                                                  */ 04275000
*/* ================================================================ */ 04300000
*/*                                                                  */ 04325000
*/* CHANGE ACTIVITY =                                                */ 04350000
*/*                                                                  */ 04400000
*/*   Products =                                                     */ 04450000
*/* $L0= DATASPAC,HBB3310,86227,PDG7: NAME service support           */ 04500000
*/* $L1= DATASPAC,HBB3310,86167,PDG7: Same as L0, copied code        */ 04550000
*/* $L2= SUBSP,HBB5510,93124,PDE1: Subspace support                  */ 04575000
*/*      Also address asymmetry between assembler and PL/X mappings  */ 04580000
*/*      by giving the PFL1 flag byte the additional name FL1.       */ 04585000
*/*      Leave the PL/X coders with just one name, FL1, to use when  */ 04590000
*/*      referring to the byte.                                      */ 04595000
*/*                                                                  */ 04600000
*/*   Design changes =                                               */ 04611000
*/* $D1= DCR0017,JBB3311,88096,PDE4: Identify HIPERSPACES            */ 04618400
*/* $D2= DCR0031,JBB3313,88302,PDE4: Identify CADS                   */ 04625800
*/*                                                                  */ 04633200
*/*   PTMs =                                                         */ 04646500
*/* $P1= PC41172,HBB3310,87168,PDE1: Support suppression of message  */ 04659800
*/*      BLS18141I, the one that indicates that the translation      */ 04673100
*/*      was unsuccessful through no fault of the caller.            */ 04686400
*/*    = PIG2257,HBB5510,93207,PDE1: Update macro prolog for SHOWHDR */ 04690900
*/*      tool                                                        */ 04695400
*/*                                                                  */ 04700000
*/*   Maintenance =                                                  */ 04725000
*/*    = OY20848,JBB3311,89082,PDAX: Identify CADS - Common          */ 04750000
*/*      Addressable Data Space                                      */ 04775000
*/*                                                                  */ 04800000
*/** End of Specifications for BLSRNAMP ******************************* 04850000
         MACRO                                                          04900000
&P       BLSRNAMP &DSECT=YES                                       @L1C 04950000
         GBLB    &ENAMP           Blurb produced once in assembly  @L1C 05000000
         IEZBITS ,                Define symbolic bits             @L1P 05050000
         AIF   ('&DSECT' EQ 'NO').L010 No DSECT statement          @L1P 05100000
&P       DSECT ,                  IPCS name service parameter list @L1P 05150000
         AGO   .L020              Define structure of record       @L1P 05200000
.L010    ANOP  ,                  No DSECT statement               @L1P 05250000
         DS    0D                 Align on doubleword boundary     @L1P 05300000
&P       DS    0CL100             IPCS name service parameter list @L1C 05350000
.L020    ANOP  ,                  Define structure of record       @L1P 05400000
&P.000   DS    0C                 Begin BLSRNAMP               #MD93124 05450000
         AIF   (&ENAMP).L030      One blurb is enough              @L1C 05500000
&ENAMP   SETB  1                  Blurb produced once in assembly  @L1C 05550000
*-----------------------------------------------------------------      05600000
* A Name service (NAMP) parameter list contains fields for either a     05650000
* STOKEN or a real address of a data space ASTE as input.  Output       05700000
* data space and ASID information are placed in other fields.           05750000
*-----------------------------------------------------------------      05800000
.L030    ANOP  ,                  Blurb produced once in assembly  @L1P 05850000
&P.ID    DS    0CL5               Name service parameter identifier    *05900000
                                                                   @L1P 05950000
&P.IDC   DC    CL4'NAMP'          NAMP acronym                     @L1C 06000000
&P.IDL   DC    CL1'1'             NAMP level indicator             @L1P 06050000
&P.PFLG  DS    0BL3               Processing flags                 @L1C 06100000
&P.FL1   DS    0BL1               First byte of flags (name 1)     @L2A 06133300
&P.PFL1  DC    BL1'0'             First byte of flags (name 2)     @L2C 06166600
&P.FNOT  EQU   BIT0               No output requested              @L1C 06200000
&P.FAS   EQU   BIT1               STOKEN identified as an address      *06250000
                                  space                            @L1C 06300000
&P.FDS   EQU   BIT2               STOKEN identified as a data          *06350000
                                  space                            @L1C 06400000
&P.F141  EQU   BIT3               Suppress message BLS18141I       @P1A 06425000
&P.FHS   EQU   BIT4               STOKEN identified as a HIPER         *06433300
                                  space                            @D1A 06441600
&P.FCAD  EQU   BIT5               STOKEN identified as a common area   *06456200
                                  data space                       @D2A 06470800
&P.FSSP  EQU   BIT6               STOKEN identified as a subspace  @L2A 06478100
         DC    BL2'0'             Reserved                         @D2C 06485400
&P.MODN  DC    CL8' '             Name of module requesting the        *06500000
                                  service                          @L1C 06550000
&P.ASTE  DC    A(0)               Real address of a data space         *06600000
                                  ASTE                             @L1C 06650000
         DC    XL8'00'            Reserved                         @L1C 06675000
&P.STKN  DC    XL8'00'            The input STOKEN to be translated    *06700000
                                                                   @L1C 06750000
&P.ASID  DC    XL4'00'            The address space ASID or owning     *06800000
                                  ASID if the STOKEN is a data space   *06850000
                                                                   @L1C 06900000
         DC    XL8'00'            Reserved                         @L1C 06925000
&P.DSPN  DC    CL8' '             Data Space Name                  @L1C 06950000
         ORG   &P.DSPN            Overlay data space name          @L2A 06966600
&P.SSPN  DS    CL8' '             Subspace name                    @L2A 06983200
&P.OUTL  DC    F'0'               Length of contents of NAMPOUT field   07000000
&P.OUT   DC    CL40' '            Space addressable by the STOKEN in   *07050000
                                  standard IPCS display format          07100000
         DC    XL28'00'           Reserved                         @L1C 07150000
&P.999   DS    0C                 End BLSRNAMP                 #MD93124 07200000
         MEND  ,                  End assembler macro BLSRNAMP       */ 07250000
*                                                                       07275000
*%BLSRNAMP:                         /* NAME service parm list    @L1C*/ 07300000
*   MACRO KEYS(MF);                 /*                           @L1P*/ 07350000
*                                                                       07375000
*/*------------------------------------------------------------------*/ 07400000
*/* Define Macro-Variables                                           */ 07450000
*/*------------------------------------------------------------------*/ 07500000
*                                                                       07550000
*   DECLARE                         /* External macro variables  @L1P*/ 07600000
*     ELSRNAMP CHARACTER EXTERNAL,  /* BLSRNAMP global data      @L1C*/ 07650000
*     EHBENDCHAR CHARACTER EXTERNAL, /* Final punctuation        @L1P*/ 07700000
*     EHBBLRPENDESS CHARACTER EXTERNAL, /* Deferred macro requests      07750000
*                                                                @L1P*/ 07800000
*     EHBLVL1  CHARACTER EXTERNAL,  /* First level number        @L1P*/ 07850000
*     EHBLVL2  CHARACTER EXTERNAL,  /* Second level number       @L1P*/ 07900000
*     EHBLVL3  CHARACTER EXTERNAL,  /* Third level number        @L1P*/ 07950000
*     EHBLVL4  CHARACTER EXTERNAL,  /* Fourth level number       @L1P*/ 08000000
*     EHBMF1   CHARACTER EXTERNAL,  /* Macro form                @L1P*/ 08050000
*     EHBMF2   CHARACTER EXTERNAL,  /* Prefix characters         @L1P*/ 08100000
*     EHBMF3   CHARACTER EXTERNAL,  /* Scope/storage class       @L1P*/ 08150000
*     EHBMF3A  CHARACTER EXTERNAL,  /* Complete initialization flag     08200000
*                                                                @L1P*/ 08250000
*     BLSRENDDECLARE CHARACTER EXTERNAL, /* Deferred declarations       08300000
*                                                                @L1P*/ 08350000
*     EHBCOL1  FIXED EXTERNAL,      /* First indentation column  @L1P*/ 08400000
*     EHBCOL2  FIXED EXTERNAL,      /* Second indentation column @L1P*/ 08450000
*     EHBCOL3  FIXED EXTERNAL,      /* Third indentation column  @L1P*/ 08500000
*     EHBCOL4  FIXED EXTERNAL,      /* Fourth indentation column @L1P*/ 08550000
*     EHBCSECT CHARACTER EXTERNAL,  /* CSECT name                @L1P*/ 08600000
*     EHBRC    FIXED EXTERNAL;      /* Macro return code         @L1P*/ 08650000
*   DEACTIVATE ELSRNAMP,BLSRENDDECLARE; /* Prevent accidents     @L1C*/ 08700000
*   DECLARE                         /* Internal macro variables  @L1P*/ 08750000
*     CENDCHAR CHARACTER INTERNAL,  /* Final punctuation         @L1P*/ 08800000
*     CLVL2    CHARACTER INTERNAL,  /* Second level number       @L1P*/ 08850000
*     CLVL3    CHARACTER INTERNAL,  /* Third level number        @L1P*/ 08900000
*     CLVL4    CHARACTER INTERNAL,  /* Fourth level number       @L1P*/ 08950000
*     CMF1     CHARACTER INTERNAL,  /* Macro form                @L1P*/ 09000000
*     CMF2     CHARACTER INTERNAL,  /* Prefix characters         @L1P*/ 09050000
*     CMF3A    CHARACTER INTERNAL,  /* Complete initialization flag     09100000
*                                                                @L1P*/ 09150000
*     CQCOMPLETE CHARACTER INTERNAL, /* Literal                  @L1P*/ 09200000
*     CQINITIAL CHARACTER INTERNAL, /* Literal                   @L1P*/ 09250000
*     FCOL2    FIXED INTERNAL,      /* Second indentation column @L1P*/ 09300000
*     FCOL3    FIXED INTERNAL,      /* Third indentation column  @L1P*/ 09350000
*     FCOL4    FIXED INTERNAL,      /* Fourth indentation column @L1P*/ 09400000
*     FRC      FIXED INTERNAL,      /* Macro return code         @L1P*/ 09450000
*     F1       FIXED INTERNAL;      /* Utility variable          @L1P*/ 09500000
*   DEACTIVATE CENDCHAR,CLVL2,CLVL3,CLVL4,CMF1,CMF2,CMF3A,CQCOMPLETE,   09550000
*       CQINITIAL,FCOL2,FCOL3,FCOL4,FRC,F1; /* Prevent accidents @L1P*/ 09600000
*   CQINITIAL = ' INITIAL(';        /* Literal                   @L1P*/ 09650000
*   CQCOMPLETE = 'COMPLETE';        /* Literal                   @L1P*/ 09700000
*                                                                       09708300
*/*------------------------------------------------------------------*/ 09716600
*/* Invoke BLRMF (analyze the MF keyword and set global variables).  */ 09724900
*/*------------------------------------------------------------------*/ 09733200
*                                                                       09741500
*   ANSWER('?'||MACLABEL||'BLRMF('||MF||') FORMS(L,S);'); /*     @L1P*/ 09750000
*   FRC = EHBRC;                    /* Macro return code         @L1P*/ 09762500
*   IF FRC > 8 THEN                 /* BLRMF return code         @L1P*/ 09775000
*     GO TO EXITNAMP;               /* Error detected, exit      @L1P*/ 09787500
*   CENDCHAR = EHBENDCHAR;          /* Final punctuation         @L1P*/ 09800000
*   EHBENDCHAR = ',';               /* Final punctuation         @L1P*/ 09850000
*   CLVL2 = EHBLVL2;                /* Second level number       @L1P*/ 09900000
*   CLVL3 = EHBLVL3;                /* Third level number        @L1P*/ 09950000
*   CLVL4 = EHBLVL4;                /* Fourth level number       @L1P*/ 10000000
*   CMF1 = EHBMF1;                  /* Macro form                @L1P*/ 10050000
*   CMF2 = EHBMF2;                  /* Prefix characters         @L1P*/ 10100000
*   CMF3A = EHBMF3A;                /* Complete initialization flag     10150000
*                                                                @L1P*/ 10200000
*   FCOL2 = EHBCOL2;                /* Second indentation column @L1P*/ 10250000
*   FCOL3 = EHBCOL3;                /* Third indentation column  @L1P*/ 10300000
*   FCOL4 = EHBCOL4;                /* Fourth indentation column @L1P*/ 10350000
*   BLSRENDDECLARE = BLSRENDDECLARE || CMF2 ||                          10450000
*       'NAMP CHARACTER(5) CONSTANT(''NAMP1''),' ||                     10500000
*       '/*NAMP identifier constant used to fill in NAMPID.*/';         10550000
*                                                                       10558300
*/*------------------------------------------------------------------*/ 10566600
*/* Generate the main level declaration for the structure.           */ 10574900
*/*------------------------------------------------------------------*/ 10583200
*                                                                       10591500
*   IF CMF1 = 'LIST' THEN           /* List form                 @L1P*/ 10600000
*     ANSWER('DECLARE/*BLSRNAMP #MD93124*/') COLUMN(5); /*       @L2C*/ 10650000
*   ANSWER(EHBLVL1||CMF2||' BOUNDARY(WORD)'||EHBMF3||',/*BLSRNAMP'||    10700000
*       MACLIST||' '||MACKEYS||'*/') COLUMN(EHBCOL1);                   10750000
*   IF CMF1 = 'LIST' THEN           /* List form                 @L1P*/ 10800000
*     IF INDEX(ELSRNAMP,',BLURB') = 0 THEN /* Produce blurb      @L1P*/ 10850000
*       DO;                         /* Multiple answers for comment  */ 10900000
*         ANSWER('/*----------------------------------------------------10950000
*--------------*/ /* A NAME service (NAMP) parameter list contains field11000000
*s for either  */ /* a STOKEN or a real address of a data space ASTE as 11050000
*input. Output */ /* data space and ASID information are placed in other11100000
*fields.       */ /*----------------------------------------------------11150000
*--------------*/') COLUMN(2);      /*                           @L1P*/ 11200000
*         ELSRNAMP = ELSRNAMP || ',BLURB'; /* Blurb produced         */ 11250000
*       END;                        /* Multiple answers for comment  */ 11300000
*                                                                       11308300
*/*------------------------------------------------------------------*/ 11316600
*/* Generate text for the elements of the substructure.              */ 11324900
*/*------------------------------------------------------------------*/ 11333200
*                                                                       11341500
*   ANSWER(CLVL2||CMF2||'ID CHARACTER(5)') COLUMN(FCOL2); /*     @L1P*/ 11350000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 11400000
*     ANSWER(CQINITIAL||'''NAMP1'')');                                  11450000
*   ANSWER(',/*NAME service parameter list identifier*/');              11500000
*   ANSWER(CLVL3||CMF2||'IDC CHARACTER(4),/*NAMP acronym*/') COLUMN(    11550000
*       FCOL3);                                                         11600000
*   ANSWER(CLVL3||CMF2||'IDL CHARACTER(1),/*NAMP level indicator*/')    11650000
*       COLUMN(FCOL3);                                                  11700000
*                                                                       11712500
*/*--Flag bytes------------------------------------------------------*/ 11725000
*                                                                       11737500
*   ANSWER(CLVL2||CMF2||'PFLG BIT(24),/*Processing flags*/') COLUMN(    11750000
*       FCOL3);                     /*                           @L1P*/ 11800000
*   ANSWER(CLVL3||CMF2||'FL1 BIT(8)') COLUMN(FCOL3);                    11850000
*   IF CMF3A = CQCOMPLETE THEN      /* Initialization required?  @L1P*/ 11900000
*     ANSWER(CQINITIAL||'''00''X)'); /*                          @L1P*/ 11950000
*   ANSWER(',/*First flag byte*/'); /*                           @L1P*/ 12000000
*   ANSWER(CLVL4||CMF2||'FNOT BIT(1),/*No output requested*/') COLUMN(  12016600
*       FCOL4);                     /*                           @L1C*/ 12033200
*   ANSWER(CLVL4||CMF2||                                                12050000
*       'FAS BIT(1),/*STOKEN identified as an address space*/') COLUMN( 12100000
*       FCOL4);                     /*                           @L1C*/ 12150000
*   ANSWER(CLVL4||CMF2||                                                12200000
*       'FDS BIT(1),/*STOKEN identified as a data space*/') COLUMN(     12250000
*       FCOL4);                     /*                           @L1C*/ 12300000
*   ANSWER(CLVL4||CMF2||'F141 BIT(1),/*Suppress message BLS18141I*/')   12350000
*       COLUMN(FCOL4);              /*                           @P1A*/ 12400000
*   ANSWER(CLVL4||CMF2||                                                12430000
*       'FHS BIT(1),/*STOKEN identified as a hiper space*/') COLUMN(    12460000
*       FCOL4);                     /*                           @D1A*/ 12490000
*   ANSWER(CLVL4||CMF2||'FCAD BIT(1),/*STOKEN identified as a CADS*/')  12494000
*       COLUMN(FCOL4);              /*                           @D2A*/ 12498000
*   ANSWER(CLVL4||CMF2||                                                12502000
*       'FSSP BIT(1),/*STOKEN identified as a subspace*/') COLUMN(FCOL4 12514000
*       );                          /*                           @L2A*/ 12526000
*   ANSWER(CLVL4||'* BIT(1),/*Reserved*/') COLUMN(FCOL4); /*     @L2C*/ 12538000
*   ANSWER(CLVL3||'* BIT(16)') COLUMN(FCOL3);                           12550000
*   IF CMF3A = CQCOMPLETE THEN      /* Initialization required?  @L1P*/ 12600000
*     ANSWER(CQINITIAL||'''00''X)'); /*                          @L1P*/ 12650000
*   ANSWER(',/*Reserved*/');        /*                           @L1P*/ 12700000
*                                                                       12712500
*/*--Module name-----------------------------------------------------*/ 12725000
*                                                                       12737500
*   ANSWER(CLVL2||CMF2||'MODN CHARACTER(8)') COLUMN(FCOL2); /*   @L1P*/ 12750000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 12800000
*     IF LENGTH(EHBCSECT) >= 8 THEN /* CSECT name defined by BLRPROC    12850000
*                                                                @L1P*/ 12900000
*       ANSWER(CQINITIAL||QUOTE(EHBCSECT(1:8))||')'); /*         @L1P*/ 12950000
*     ELSE                          /* No token specified        @L1P*/ 13000000
*       ANSWER(CQINITIAL||'''        '')'); /* Default is blanks @L1P*/ 13050000
*   ANSWER(',/*Name of module requesting the service*/'); /*     @L1P*/ 13100000
*                                                                       13112500
*/*--Data space ASTE-------------------------------------------------*/ 13125000
*                                                                       13137500
*   ANSWER(CLVL2||CMF2||'ASTE POINTER(32)') COLUMN(FCOL2); /*    @L1C*/ 13150000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 13200000
*     ANSWER(CQINITIAL||'0)');      /*                           @L1C*/ 13250000
*   ANSWER(',/*Real address of a data space ASTE*/'); /*         @L1C*/ 13300000
*   ANSWER(CLVL2||'* BIT(64)') COLUMN(FCOL2); /*                 @L1C*/ 13320000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1C*/ 13330000
*     ANSWER(CQINITIAL||'''00''X)'); /*                          @L1C*/ 13340000
*   ANSWER(',/*Reserved*/');        /*                           @L1C*/ 13350000
*                                                                       13360000
*/*--STOKEN----------------------------------------------------------*/ 13370000
*                                                                       13380000
*   ANSWER(CLVL2||CMF2||'STKN BIT(64)') COLUMN(FCOL2); /*        @L1C*/ 13390000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 13400000
*     ANSWER(CQINITIAL||'''00''X)'); /*                          @L1C*/ 13446600
*   ANSWER(',/*The input STOKEN to be translated*/'); /*         @L1C*/ 13493200
*                                                                       13516600
*/*--ASID------------------------------------------------------------*/ 13540000
*                                                                       13560000
*   ANSWER(CLVL2||CMF2||'ASID BIT(32)') COLUMN(FCOL2); /*        @L1C*/ 13580000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 13600000
*     ANSWER(CQINITIAL||'''00''X)'); /*                          @L1C*/ 13650000
*   ANSWER(',/*The address space ASID or owning ASID if the STOKEN is a 13700000
*data space*/');                    /*                           @L1C*/ 13750000
*   ANSWER(CLVL2||'* BIT(64)') COLUMN(FCOL2); /*                 @L1C*/ 13761000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1C*/ 13766500
*     ANSWER(CQINITIAL||'''00''X)'); /*                          @L1C*/ 13772000
*   ANSWER(',/*Reserved*/');        /*                           @L1C*/ 13777500
*                                                                       13794000
*/*--Data space name or subspace name -------------------------------*/ 13808000
*                                                                       13822000
*   ANSWER(CLVL2||CMF2||'DSPN CHARACTER(8)') COLUMN(FCOL2); /*   @L1C*/ 13836000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 13850000
*     ANSWER(CQINITIAL||'''        '')'); /*                     @L1C*/ 13900000
*   ANSWER(',/*The data space name*/'); /*                       @L1C*/ 13950000
*   ANSWER(CLVL3||CMF2||'SSPN CHARACTER(8),/*Subspace name*/') COLUMN(  13956200
*       FCOL3);                     /*                           @L2A*/ 13962400
*                                                                       13968600
*/*--Output display area---------------------------------------------*/ 13975000
*                                                                       13987500
*   ANSWER(CLVL2||CMF2||'OUTL UNSIGNED BINARY(32)') COLUMN(FCOL2); /*   14000000
*                                                                @L1C*/ 14050000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 14100000
*     ANSWER(CQINITIAL||'0)');      /*                           @L1C*/ 14137500
*   ANSWER(',/*Length of contents of NAMPOUT field*/'); /*       @L1C*/ 14175000
*   ANSWER(CLVL2||CMF2||'OUT CHARACTER(40)') COLUMN(FCOL2); /*   @L1C*/ 14250000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 14300000
*     ANSWER(CQINITIAL||''' '')');  /*                           @L1C*/ 14350000
*   ANSWER(',/*Space addressable by the STOKEN in standard IPCS display 14385000
*format*/');                        /*                           @L1C*/ 14420000
*                                                                       14455000
*/*--Reserved space--------------------------------------------------*/ 14490000
*                                                                       14510000
*   ANSWER(CLVL2||'* BIT(224)') COLUMN(FCOL2); /*                @L1C*/ 14530000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 14550000
*     ANSWER(CQINITIAL||'''00''X)'); /*                          @L1P*/ 14600000
*   ANSWER(',/*Reserved*/');        /*                           @L1P*/ 14650000
*   ANSWER(CLVL2||CMF2||'999 CHARACTER(0)'||CENDCHAR||                  14700000
*       '/*BLSRNAMP #MD93124*/') COLUMN(FCOL2); /*               @L2C*/ 14750000
*   IF CENDCHAR = ';' THEN          /*                           @L1P*/ 14800000
*     ANSWER('?BLSR002;');          /* Process deferred declarations    14850000
*                                                                @L1P*/ 14900000
*   ANSWER('?BLR003(BLSRNAMP,'||CHAR(EHBRC)||');'); /*           @L1P*/ 14950000
*EXITNAMP:                                                              14975000
*   RETURN CODE(FRC);               /*                           @L1P*/ 15000000
*   %END BLSRNAMP;                                                      15050000
