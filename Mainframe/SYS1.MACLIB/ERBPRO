*%ERBPRO: MACRO KEYS(               /* Header for general mapping    */ 00001000
*             TYPE,                 /* Invoking SMF record type      */ 00002000
*             ATTRIBUT,             /* Attributes of the structure      00003002
*                                      produced by this macro (the      00004000
*                                      boundary attribute is appended   00005000
*                                      to it)                        */ 00006000
*             SUBSTR);              /* SUBSTR(YES) generates the        00007000
*                                      substructure only         @N1A*/ 00008000
*/*      Bilingual Mapping macro                                        00009000
         MACRO                                                          00010000
         ERBPRO &R                                                      00011000
*                                                                       00012000
**/  BLOCKANSWER SKIP COLUMN(2);                                        00013000
*'/* START OF SPECIFICATIONS ****************************************/' 00014000
*'/*01* PROPRIETARY STATEMENT=                                      */' 00015000
*    ENDANSWER;                                                         00016000
*/*                                                                     00017000
        ERBCOPY1 ,                                                      00018000
**/  BLOCKANSWER SKIP COLUMN(2);                                        00019000
*'      ?ERBCOPY1;                                                    ' 00020000
*'/*                                                                */' 00021000
*'/*01* DESCRIPTIVE_NAME: General mapping of RMF Product Section    */' 00022000
*'/*02*  ACRONYM:  PRO                                              */' 00023000
*'/*                                                                */' 00024000
*'/*01* MACRO-NAME:  ERBPRO                                         */' 00025000
*'/*                                                                */' 00026000
*'/*01* DSECT NAME:  SMFnnPRO, if record type specified             */' 00027000
*'/*                 RMFPRO  , if record type omitted               */' 00028000
*'/*                                                                */' 00029000
*'/*01* COMPONENT:  Resource Measurement Facility (27404)           */' 00030000
*'/*                                                                */' 00031000
*'/*01* EYE-CATCHER:  N/A                                           */' 00032000
*'/*02*  OFFSET:  N/A                                               */' 00033000
*'/*02*  LENGTH:  N/A                                               */' 00034000
*'/*                                                                */' 00035000
*'/*01* STORAGE ATTRIBUTES:                                         */' 00036000
*'/*02*  SUBPOOL:    same as SMF record mapping                     */' 00037000
*'/*02*  KEY:        same as SMF record mapping                     */' 00038000
*'/*02*  RESIDENCY:  same as SMF record mapping                     */' 00039000
*'/*02*  MAIN STORAGE:      N/A                                     */' 00040000
*'/*02*  AUXILIARY STORAGE: N/A                                     */' 00041000
*'/*02*  VIRTUAL STORAGE:   N/A                                     */' 00042000
*'/*                                                                */' 00043000
*'/*01* SIZE: 104 bytes - common section                        @C1C*/' 00044000
*'/*         + 16 bytes - split/reassembly control (static)     @C1C*/' 00045000
*'/*         +  4 bytes * SMFHDR extension triplet -            @C1C*/' 00046000
*'/*                      - split/reassembly (variable)         @C1C*/' 00047000
*'/*                                                                */' 00048000
*'/*01* CREATED BY: N/A                                             */' 00049000
*'/*                                                                */' 00050000
*'/*01* POINTED TO BY: N/A                                          */' 00051000
*'/*                                                                */' 00052000
*'/*01* SERIALIZATION:                                              */' 00053000
*'/*     Not provided                                               */' 00054000
*'/*                                                                */' 00055000
*'/*01* FUNCTION:                                                   */' 00056000
*'/*02*  This macro maps the RMF product section of RMFs            */' 00057000
*'/*     SMF records depending on the macro call.                   */' 00058000
*'/*     It is called by macro ERBSMF                               */' 00059000
*'/*                           ERBSMF70                             */' 00060000
*'/*                              :                                 */' 00061000
*'/*                           ERBSMF79                             */' 00062000
*'/*     NOTE:                                                      */' 00063003
*'/*      When this data section is build in a NON-RMF environment, */' 00063103
*'/*      all data are zero except:                             @G1A*/' 00063203
*'/*         SMF74PRD = product name, e.g. CRR instead of RMF   @G1A*/' 00063304
*'/*         SMF74IST = time (0hhmmssF),                        @G1A*/' 00063403
*'/*                    time when the record is processed       @G1A*/' 00063503
*'/*         SMF74DAT = date (0cyydddF),                        @G1A*/' 00063603
*'/*                    date when the record is processed       @G1A*/' 00063703
*'/*         SMF74SRL = SMF record level change number          @G1A*/' 00063805
*'/*         SMF74IET = 8 TOKEN, 8 bytes TOD value              @G1A*/' 00063905
*'/*                    TOD value when the record is processed  @G1A*/' 00064005
*'/*                                                                */' 00067803
*'/*01* METHOD OF ACCESS:                                           */' 00067903
*'/*02*  ASM:                                                       */' 00068003
*'/*      - ERBPRO                                                  */' 00068103
*'/*      - ERBPRO 70                                               */' 00068203
*'/*            :                                                   */' 00068300
*'/*      - ERBPRO 79                                               */' 00069000
*'/*                                                                */' 00070000
*'/*02*  PL/X:                                                      */' 00071000
*'/*      .question mark.ERBPRO ATTRIBUT(attributes)                */' 00072000
*'/*      .question mark.ERBPRO TYPE(70) ATTRIBUT(attributes)       */' 00073000
*'/*      :                                                         */' 00074000
*'/*      .question mark.ERBPRO TYPE(79) ATTRIBUT(attributes)       */' 00075000
*'/*                                                                */' 00076000
*'/*      where attributes are any acceptable PL/X attributes       */' 00077000
*'/*      for structure declarations.                               */' 00078000
*'/*                                                                */' 00079000
*'/*01* MODULE-TYPE: Bilingual mapping macro                        */' 00080000
*'/*                                                                */' 00081000
*'/*01* STATUS: HRM4440                                         @C1C*/' 00082000
*'/*                                                                */' 00083000
*'/*01* DELETED BY: N/A                                             */' 00084000
*'/*                                                                */' 00085000
*'/*01* FREQUENCY:  N/A                                             */' 00086000
*'/*                                                                */' 00087000
*'/*01* DEPENDENCIES: None                                          */' 00088000
*'/*                                                                */' 00089000
*'/*01* DISTRIBUTION LIBRARY: ARMFMAC1                          @B1A*/' 00090000
*'/*                                                                */' 00091000
*'/*01* CHANGE ACTIVITY:                                            */' 00092000
*'/* $N1=PP,HRM3102,,NEL: RMF 3.1 POST PROCESSOR ENHANCEMENTS       */' 00093000
*'/* $O1=4381SP,JRM3212,,SHR: 4381 - SUPPORT                    @O1A*/' 00094000
*'/* $O2=SOLVSP,JRM3212,,SHR: SOFTWARE LEVEL SUPPORT            @O2A*/' 00095000
*'/* $P1=3090,HRM3302,,HEN: 3090 - SUPPORT                      @P1A*/' 00096000
*'/* $P2=ES,HRM3302,,CIH: SP2.2 EXTENDED STORE                  @P2A*/' 00097000
*'/* $Q1=MISC,HRM3402,,WEY: CSA FIXED FRAMES COUNT INTERFACE    @Q1A*/' 00098000
*'/* $X0=OY11330,HRM4410,,WRC: PR/SM support                    @X0A*/' 00099000
*'/* SMF Record Change Level Support                        @YA28449*/' 00100000
*'/* $Z1=SERIAL,HRM4420,,WRC: Serial & switch                   @Z1A*/' 00101000
*'/* $B1=SYNC,HRM4430,,GBO: Synchronize Measurements            @B1A*/' 00102000
*'/* $C1=WLM,HRM4440,,HKH: WLM Support                          @C1A*/' 00103000
*'/* $C2=SPLIT,HRM4440,,SCD: Split/Reassembly                   @C2A*/' 00104000
*'/* $E1=CVT,HRM5530,,SUW: Report new product type OS/390 and       */' 00104200
*'/*         software level. Will be added with APAR OW15873        */' 00104400
*'/*         (OS/390 Release 1).                                @E1A*/' 00104600
*'/* $G1=CACHE,HRM6606,,THE: 256 device support                 @G1A*/' 00105007
*'/* $I1=BIT64,HRM7703,,GUB: 64 Bit real support                @I1A*/' 00105107
*'/*                                                                */' 00105207
*'/* END OF SPECIFICATIONS ******************************************/' 00106000
*    ENDANSWER;                     /*                                  00107000
         LCLC  &X                                                       00108000
         LCLC  &Y                                                       00109000
&X       SETC  T'&R                                                     00110000
         AIF   ('&X' EQ 'O').GNRL                                       00111000
         AIF   (&R LT 70).ERROR                                         00112000
         AIF   (&R GT 79).ERROR                                         00113000
&Y       SETC  'SMF'                                                    00114000
         AGO   .ASSEM                                                   00115000
.GNRL    ANOP                                                           00116000
&Y       SETC  'RMF'                                                    00117000
         AGO   .ASSEM                                                   00118000
         SPACE 3                                                        00119000
.ERROR   MNOTE 4,'&R INVALID RECORD TYPE SPECIFIED'                     00120000
.CONTB   ANOP                                                           00121000
         MEXIT                                                          00122000
.ASSEM   ANOP                                                           00123000
&Y&R.PRO DSECT                                                          00124000
&Y&R.MFV DS    CL2      RMF VERSION NUMBER, WITH INTRODUCTION OF   @O2C 00125000
*                       THE MVS SOFTWARE LEVEL THE FORMAT CHANGES  @O2A 00126000
*                       TO PACKED 'VRLF'                           @O2A 00127000
*                       ... V = VERSION NUMBER                     @O2A 00128000
*                       ... R = RELEASE NUMBER                     @O2A 00129000
*                       ... L = MODIFICATION LEVEL                 @O2A 00130000
&Y&R.PRD DS    CL8      PRODUCT NAME                                    00131000
&Y&R.IST DS    PL4      TOD MONITOR INTERVAL START: 0HHMMSSF            00132000
&Y&R.DAT DS    PL4      DATE MONITOR INTERVAL START: 00YYDDDF           00133000
&Y&R.INT DS    PL4      DURATION OF MONITOR INTERVAL: MMSSTTTF          00134000
*                                                                       00135000
&Y&R.MFL DS    XL2      RECORD MAINTENANCE INDICATION.                  00136000
*                       THIS FIELD HAS A DIFFERENT MEANING FOR...       00137000
*                       ...DIFFERENT SMF RECORD TYPES                   00138000
*                                                                       00139000
&Y&R.SAM DS    BL4      NUMBER OF SAMPLES                               00140000
&Y&R.RV2 DS    BL2      RESV                                            00141000
&Y&R.FLA DS    BL2      FLAGS                                           00142000
&Y&R.CNV EQU   X'80'    DATA CONVERT.FROM VER.2                         00143000
&Y&R.ISS EQU   X'40'    INVALID SAMPLES TO BE SKIPPED              @Q1A 00144000
&Y&R.M3R EQU   X'20'    Record was written by RMF Monitor III      @B1A 00145000
&Y&R.ISM EQU   X'10'    Interval was written under SMF control     @B1A 00146000
&Y&R.RLS DS    CL4      OS/VS2 RELEASE NUMBER IN EBCDIC                 00147000
&Y&R.CYC DS    PL4      CYCLE IN PACKED DECIMAL 000TTTTF                00148000
&Y&R.MVS DS    CL8      MVS or OS/390 software level (ACRONYM,     @E1C 00149501
*                       VERSION, RELEASE, MODIFICATION LEVEL)      @E1C 00150101
&Y&R.IML DS    XL1      RMF I/O MEASUREMENT LEVEL                  @O1A 00151000
*                       X'01' ... 308X PROCESSOR SERIES            @O1A 00152000
*                       X'02' ... 4381 PROCESSOR SERIES            @O1A 00153000
*                       X'03' ... 3090,9021,9121, or 9221               00154000
*                                 PROCESSOR SERIES                 @Z1C 00155000
&Y&R.PRF DS    BL1      PROCESSOR FLAGS                            @P2A 00156000
&Y&R.QES EQU   X'80'    Equipped with Expanded Storage             @P2A 00157000
&Y&R.CNE EQU   X'40'    Equipped with ESCON Channel                @Z1A 00158000
&Y&R.DRC EQU   X'20'    ESCON Director in configuration            @Z1A 00159000
&Y&R.EME EQU   X'10'    System in ESAME mode                       @I1A 00159107
&Y&R.PTN DS    BL1      PR/SM PARTITION NUMBER                     @Z1C 00160000
&Y&R.SRL DS    BL1      SMF RECORD CHANGE LEVEL                @YA28449 00161000
&Y&R.IET DS    CL8      Interval expiration time token             @B1A 00162000
&Y&R.LGO DS    CL8      Offset GMT to local time                   @C1A 00163000
&Y&R.RAO DS    BL4      Offset to reassembly area relative to      @C2A 00164000
*                       start of RMF product section               @C2A 00165000
&Y&R.RAL DS    BL2      Length of reassembly area. Length depends  @C2A 00166000
*                       on the record type/subtype but is fix for  @C2A 00167000
*                       a specific type/subtype                    @C2A 00168000
&Y&R.RAN DS    BL2      Number of reassembly area. Only 0 or 1 are @C2A 00169000
*                       valid. This field is used to indicate      @C2A 00170000
*                       whether a SMF record is a broken record    @C2A 00171000
*                       (0 = NOT broken, 1 = is a broken record).  @C2A 00172000
*                       Offset and length are only valid if        @C2A 00173000
*                       SMFxxRAN = 1. Reassembly area is only      @C2A 00174000
*                       present in broken records                  @C2A 00175000
&Y&R.OIL DS    BL2      Original interval length                   @C2A 00176000
*                       (as defined in the session option or by    @C2A 00177000
*                        SMF)                                      @C2A 00178000
&Y&R.SYN DS    BL2      SYNC value in seconds                      @C2A 00179000
&Y&R.GIE DS    CL8      Projected gathering interval end           @C2A 00180000
*                       (STCK format) GMT time                     @C2A 00181000
&Y&R.XNM DS    CL8      Sysplex name                               @C1A 00182000
*                       (as defined in ECVTSPLX)                   @C1A 00183000
&Y&R.SNM DS    CL8      System name for current system             @C1A 00184000
*                       (as defined in CVTSNAME)                   @C1A 00185000
&Y&R.RHD DSECT                                                          00186000
&Y&R.RBR DS    BL2      Total number of broken records build from  @C2A 00187000
*                       the original large record                  @C2A 00188000
&Y&R.RSQ DS    BL2      Sequence number of this broken record.     @C2A 00189000
*                       Every broken record build from the same    @C2A 00190000
*                       large record must have a unique sequence   @C2A 00191000
*                       number. Broken records with sequence       @C2A 00192000
*                       numbers from 1 to SMFxxRBR must exist      @C2A 00193000
&Y&R.RIO DS    BL4      Offset to first reassembly information     @C2A 00194000
*                       block relative to start of reassembly      @C2A 00195000
*                       area header                                @C2A 00196000
&Y&R.RIL DS    BL2      Length of reassembly information block     @C2A 00197000
&Y&R.RIN DS    BL2      Number of reassembly information blocks    @C2A 00198000
*                       (same as SMFxxTRN in header section)       @C2A 00199000
         DS    BL4      Reserved                                   @C2A 00200000
&Y&R.RBL DSECT                                                          00201000
&Y&R.RNN DS    BL2      Total number of sections in the original   @C2A 00202000
*                       large record. This field contains          @C2A 00203000
*                       information of how many sections of a      @C2A 00204000
*                       specific type were contained in the        @C2A 00205000
*                       original SMF record. This field is a copy  @C2A 00206000
*                       of the number field of the triplet in the  @C2A 00207000
*                       original (non broken) record               @C2A 00208000
&Y&R.RPP DS    BL2      Position of the first of one or more       @C2A 00209000
*                       consecutive section(s) described by this   @C2A 00210000
*                       block as in the original record. Values in @C2A 00211000
*                       the range of 1 to SMFxxRNN are valid for   @C2A 00212000
*                       correct processing. A value of 0 will skip @C2A 00213000
*                       processing of this information block. This @C2A 00214000
*                       field provides information where the       @C2A 00215000
*                       sections that are part of this broken      @C2A 00216000
*                       record were placed in the original record  @C2A 00217000
*                       before the split took place. The actual    @C2A 00218000
*                       number of consecutive sections contained   @C2A 00219000
*                       in this record is available from the       @C2A 00220000
*                       actual triplet in the header extension     @C2A 00221000
         MEND                                                           00222000
**/                                                                     00223000
*    DCL KEY1 CHAR;                 /* KEYWORD 1 PRINTED IN COMMENT  */ 00224000
*    DCL KEY2 CHAR;                 /* KEYWORD 2 PRINTED IN COMMENT  */ 00225000
*    DCL KEY3 CHAR;                 /* KEYWORD 3 PRINTED IN COM. @N1A*/ 00226000
*    DCL COMCOL FIXED;              /* Comment starting column   @O1A*/ 00227000
*    COMCOL = 37;                   /* Comment starts here       @O1A*/ 00228000
*    /* ANSWER BACK A COPY OF INVOKING STATEMENT                     */ 00229000
*    IF TYPE='' THEN DO;            /* IF NO RECORD TYPE WERE INPUT,    00230000
*                                      DO NOT PRINT KEYWORD          */ 00231000
*       KEY1 = '';                  /* KEYWORD 1 IS BLANKS           */ 00232000
*       P='RMF';                    /* PRODUCE                       */ 00233000
*       I='';                       /* GENERAL MAPPING               */ 00234000
*                    END;                                               00235000
*               ELSE DO;                                                00236000
*       KEY1 = 'TYPE';                                                  00237000
*       P='SMF';                                                        00238000
*       I=TYPE(2:3);                                                    00239000
*                    END;                                               00240000
*    IF  ATTRIBUT='' THEN           /* IF NO STRUCTURE ATTRIBUTES       00241000
*                                      WERE INPUT, DO NOT PRINT KEY     00242000
*                                      WORD                          */ 00243000
*        KEY2 = '';                 /* KEYWORD 2 IS BLANKS           */ 00244000
*    ELSE                                                               00245000
*        KEY2='ATTRIBUT';           /* PRINT KEYWORD NAME            */ 00246000
*    IF   SUBSTR='' THEN            /* IF NO SUBSTRUCTURE        @N1A*/ 00247000
*        KEY3 = '';                 /* KEYWORD 3 IS BLANKS       @N1A*/ 00248000
*    ELSE                                                      /*@N1A*/ 00249000
*        KEY3='SUBSTR';             /* PRINT KEYWORD NAME        @N1A*/ 00250000
*    ANS('/* ?'||MACLABEL||MACNAME||' '||MACLIST||                      00251000
*         KEY1||TYPE||' '||KEY2||ATTRIBUT||' '||KEY3||SUBSTR||' */'     00252000
*       ) SKIP;                                                         00253000
*    IF  SUBSTR='(YES)' THEN        /* IF SUBSTRUCTURE REQUESTED @N1A*/ 00254000
*        GOTO NOHDR;                /* SKIP HDR DECLARE          @N1A*/ 00255000
*    ANS(                           /* ANSWER DECLARE STATEMENT      */ 00256000
*        'DCL 1 '||P||I||'PRO'      /* GENERAL RMF PRODUCT SECTION   */ 00257000
*       ) COL(MACCOL);                                                  00258000
*    ANS(                           /* GEN.INPUT ATTRIB. OF THE STRUC*/ 00259000
*              ATTRIBUT(1)                                              00260000
*       ) COL(MACCOL+8);                                                00261000
*    ANS(                           /* GENERATE BOUNDARY ON FULLWORD */ 00262000
*        '        BDY(WORD),                                          ' 00263000
*       ) COL(MACCOL);              /* INTENDED FROM INVOKING COLUMN */ 00264000
*    NOHDR:                         /* START OF SUBSTRUCTURE     @N1A*/ 00265000
*    ANS(                                                               00266000
*        '     3 '||P||I||'MFV'                                         00267000
*       ) SKIP;                                                         00268000
*    ANS(                                                               00269000
*        '       CHAR(2),           /* RMF version number, with         00270000
*                                      introduction of the MVS          00271000
*                                      software level the format        00272000
*                                      changes to packed (VRLF),        00273000
*                                      ...V=version-number              00274000
*                                      ...R=release-number              00275000
*                                      ...L=modification-level  @O2C*/' 00276000
*       ) SKIP;                                                         00277000
*    ANS(                                                               00278000
*        '     3 '||P||I||'PRD'                                         00279000
*       ) SKIP;                                                         00280000
*    ANS(                                                               00281000
*        '       CHAR(8),           /* PRODUCT NAME                 */' 00282000
*       ) SKIP;                                                         00283000
*    ANS(                                                               00284000
*        '     3 '||P||I||'IST'                                         00285000
*       ) SKIP;                                                         00286000
*    ANS(                                                               00287000
*        '       CHAR(4),           /* TOD MONITOR INTERVAL             00288000
*                                      START: 0HHMMSSF              */' 00289000
*       ) SKIP;                                                         00290000
*    ANS(                                                               00291000
*        '     3 '||P||I||'DAT'                                         00292000
*       ) SKIP;                                                         00293000
*    ANS(                                                               00294000
*        '       CHAR(4),           /* DATE MONITOR INTERVAL            00295000
*                                      START: 00YYDDDF              */' 00296000
*       ) SKIP;                                                         00297000
*    ANS(                                                               00298000
*        '     3 '||P||I||'INT'                                         00299000
*       ) SKIP;                                                         00300000
*    ANS(                                                               00301000
*        '       CHAR(4),           /* DURATION OF MONITOR              00302000
*                                      INTERVAL: MMSSTTTF           */' 00303000
*       ) SKIP;                                                         00304000
*    ANS(                                                               00305000
*        '     3 '||P||I||'MFL  BIT(16),  /* RECORD MAINTENANCE         00306000
*                                      INDICATION. THIS FIELD HAS       00307000
*                                      A DIFFERENT MEANING FOR          00308000
*                                      DIFFERENT RECORD TYPES  */'      00309000
*       ) SKIP;                                                         00310000
*    ANS(                                                               00311000
*        '     3 '||P||I||'SAM'                                         00312000
*       ) SKIP;                                                         00313000
*    ANS(                                                               00314000
*        '       FIXED(32),         /* NUMBER OF SAMPLES            */' 00315000
*       ) SKIP;                                                         00316000
*    ANS(                                                               00317000
*        '     3 '||P||I||'RV2'                                         00318000
*       ) SKIP;                                                         00319000
*    ANS(                                                               00320000
*        '       FIXED(15),         /* RESERVED                     */' 00321000
*       ) SKIP;                                                         00322000
*    ANS(                                                               00323000
*        '     3 '||P||I||'FLA'                                         00324000
*       ) SKIP;                                                         00325000
*    ANS(                                                               00326000
*        '       BIT(16),           /* FLAGS.                       */' 00327000
*       ) SKIP;                                                         00328000
*    ANS(                                                               00329000
*        '        5 '||P||I||'CNV BIT(1),   /* DATA CONVERTED           00330000
*                                              FROM VERSION 2       */' 00331000
*       ) SKIP;                                                         00332000
*    ANS(                                                               00333000
*        '        5 '||P||I||'ISS BIT(1),   /* INVALID SAMPLES TO BE    00334000
*                                              SKIPPED          @Q1A*/' 00335000
*       ) SKIP;                                                         00336000
*    ANS(                                                               00337000
*        '        5 '||P||I||'M3R BIT(1),   /* Record was written by    00338000
*                                              RMF Monitor III  @B1A*/' 00339000
*       ) SKIP;                                                         00340000
*    ANS(                                                               00341000
*        '        5 '||P||I||'ISM BIT(1),   /* Interval was under SMF   00342000
*                                              control          @B1A*/' 00343000
*       ) SKIP;                                                         00344000
*    ANS(                                                               00345000
*        '     3 '||P||I||'RLS'                                         00346000
*       ) SKIP;                                                         00347000
*    ANS(                                                               00348000
*        '       CHAR(4),           /* OP SYS REL # & LEVEL NNLL    */' 00349000
*       ) SKIP;                                                         00350000
*    ANS(                                                               00351000
*        '     3 '||P||I||'CYC'                                         00352000
*       ) SKIP;                                                         00353000
*    ANS(                                                     /*@N1A*/  00354000
*        '       CHAR(4),           /*SAMPLING CYCLE LENGTH 000TTTTF*/' 00355000
*       ) SKIP;                                               /*@N1A*/  00356000
*    ANS('3 '||P||I||'MVS CHAR(8),') COL(MACCOL);             /* @O2A*/ 00357000
*    ANS('/* MVS or OS/390 software level  */') COL(COMCOL);  /* @E1C*/ 00358101
*    ANS('/* (ACRONYM, VERSION, RELEASE,   */') COL(COMCOL);  /* @E1A*/ 00358301
*    ANS('/* MODIFICATION LEVEL)       @E1C*/') COL(COMCOL);  /* @E1A*/ 00358501
*    ANS('3 '||P||I||'IML CHAR(1),') COL(MACCOL);             /* @O1A*/ 00359000
*    ANS('/* RMF I/O measurement level @O1A*/') COL(COMCOL);  /* @O1A*/ 00360000
*    ANS('/* X''01'' ... 308x processors @O1A*/') COL(COMCOL);/* @O1A*/ 00361000
*    ANS('/* X''02'' ... 4381 processors @O1A*/') COL(COMCOL);/* @O1A*/ 00362000
*    ANS('/* X''03'' ... 3090,9021,9121, or  */') COL(COMCOL);/* @Z1C*/ 00363000
*    ANS('/*             9221 Processor  @Z1C*/') COL(COMCOL);/* @Z1C*/ 00364000
*    ANS('3 '||P||I||'PRF BIT(8),') COL(MACCOL);              /* @P2A*/ 00365000
*    ANS('/* Processor flags             @P2A*/') COL(COMCOL);/* @P2A*/ 00366000
*    ANS('5 '||P||I||'QES BIT(1),') COL(MACCOL+2);            /* @P2A*/ 00367000
*    ANS('/* Equipped with Expanded Storage @P2A*/')                    00368000
*                                                 COL(COMCOL);/* @P2A*/ 00369000
*    ANS('5 '||P||I||'CNE BIT(1),') COL(MACCOL+2);            /* @Z1A*/ 00370000
*    ANS('/* Equipped with ESCON channel    @Z1A*/')                    00371000
*                                                 COL(COMCOL);/* @Z1A*/ 00372000
*    ANS('5 '||P||I||'DRC BIT(1),') COL(MACCOL+2);            /* @Z1A*/ 00373000
*    ANS('/* ESCON Director in config.      @Z1A*/')                    00374000
*                                                 COL(COMCOL);/* @Z1A*/ 00375000
*    ANS('5 '||P||I||'EME BIT(1),') COL(MACCOL+2);            /* @I1A*/ 00375107
*    ANS('/* System in ESAME mode           @I1A*/')                    00375207
*                                                 COL(COMCOL);/* @I1A*/ 00375307
*    ANS('3 '||P||I||'PTN CHAR(1),') COL(MACCOL);             /* @X0A*/ 00376000
*    ANS('/* PR/SM PARTITION NUMBER @Z1C*/') COL(COMCOL);     /* @Z1C*/ 00377000
*    ANS('3 '||P||I||'SRL FIXED(8),')  COL(MACCOL);        /*@YA28449*/ 00378000
*    ANS('/* SMF RECORD LEVELS  @YA28449*/') COL(COMCOL);  /*@YA28449*/ 00379000
*    ANS('3 '||P||I||'IET CHAR(8),')  COL(MACCOL);          /*   @C1C*/ 00380000
*    ANS('/* Interval expiration time token @B1A*/')                    00381000
*       COL(COMCOL);                                       /*    @B1A*/ 00382000
*    ANS('3 '||P||I||'LGO CHAR(8),')  COL(MACCOL);          /*   @C1A*/ 00383000
*    ANS('/* Offset GMT to local time @C1A*/')                          00384000
*       COL(COMCOL);                                       /*    @C1A*/ 00385000
*    ANS('3 '||P||I||'RAO FIXED(31),') COL(MACCOL);           /* @C2A*/ 00386000
*    ANS('/* Offset to reassembly area     */') COL(COMCOL);  /* @C2A*/ 00387000
*    ANS('/* relative to start of RMF      */') COL(COMCOL);  /* @C2A*/ 00388000
*    ANS('/* product section           @C2A*/') COL(COMCOL);  /* @C2A*/ 00389000
*    ANS('3 '||P||I||'RAL FIXED(15),') COL(MACCOL);           /* @C2A*/ 00390000
*    ANS('/* Length of reassembly area.    */') COL(COMCOL);  /* @C2A*/ 00391000
*    ANS('/* Area consists of a fixed      */') COL(COMCOL);  /* @C2A*/ 00392000
*    ANS('/* header and a variable number  */') COL(COMCOL);  /* @C2A*/ 00393000
*    ANS('/* of information blocks.        */') COL(COMCOL);  /* @C2A*/ 00394000
*    ANS('/* Length depends on the record  */') COL(COMCOL);  /* @C2A*/ 00395000
*    ANS('/* type/subtype, but is fix for  */') COL(COMCOL);  /* @C2A*/ 00396000
*    ANS('/* a specific type/subtype   @C2A*/') COL(COMCOL);  /* @C2A*/ 00397000
*    ANS('3 '||P||I||'RAN FIXED(15),') COL(MACCOL);           /* @C2A*/ 00398000
*    ANS('/* Number of reassembly area.    */') COL(COMCOL);  /* @C2A*/ 00399000
*    ANS('/* Only 0 or 1 are valid. This   */') COL(COMCOL);  /* @C2A*/ 00400000
*    ANS('/* field is used to indicate     */') COL(COMCOL);  /* @C2A*/ 00401000
*    ANS('/* whether a SMF record is a     */') COL(COMCOL);  /* @C2A*/ 00402000
*    ANS('/* broken record (0 = NOT broken */') COL(COMCOL);  /* @C2A*/ 00403000
*    ANS('/* 1 = is a broken record).      */') COL(COMCOL);  /* @C2A*/ 00404000
*    ANS('/* Offset and length are only    */') COL(COMCOL);  /* @C2A*/ 00405000
*    ANS('/* valid if SMFxxRAN = 1.        */') COL(COMCOL);  /* @C2A*/ 00406000
*    ANS('/* Reassembly area is only       */') COL(COMCOL);  /* @C2A*/ 00407000
*    ANS('/* present in broken records.    */') COL(COMCOL);  /* @C2A*/ 00408000
*    ANS('3 '||P||I||'OIL FIXED(15),') COL(MACCOL);           /* @C2A*/ 00409000
*    ANS('/* Original interval length      */') COL(COMCOL);  /* @C2A*/ 00410000
*    ANS('/* as defined in the session     */') COL(COMCOL);  /* @C2A*/ 00411000
*    ANS('/* or by SMF (in seconds)    @C2A*/') COL(COMCOL);  /* @C2A*/ 00412000
*    ANS('3 '||P||I||'SYN FIXED(15),') COL(MACCOL);           /* @C2A*/ 00413000
*    ANS('/* SYNC value in seconds     @C2A*/') COL(COMCOL);  /* @C2A*/ 00414000
*    ANS('3 '||P||I||'GIE CHAR(8),') COL(MACCOL);             /* @C2A*/ 00415000
*    ANS('/* Projected gathering interval  */') COL(COMCOL);  /* @C2A*/ 00416000
*    ANS('/* end (STCK format) GMT time    */') COL(COMCOL);  /* @C2A*/ 00417000
*    ANS('/*                           @C2A*/') COL(COMCOL);  /* @C2A*/ 00418000
*    ANS('3 '||P||I||'XNM CHAR(8),') COL(MACCOL);             /* @C1A*/ 00419000
*    ANS('/* Sysplex name as defined       */') COL(COMCOL);  /* @C1A*/ 00420000
*    ANS('/* in ECVTSPLX               @C1A*/') COL(COMCOL);  /* @C1A*/ 00421000
*    ANS('3 '||P||I||'SNM CHAR(8)')  COL(MACCOL);             /* @C1A*/ 00422000
*    ANS('/* System name for current       */') COL(COMCOL);  /* @C1A*/ 00423000
*    ANS('/* system as defined in          */') COL(COMCOL);  /* @C1A*/ 00424000
*    ANS('/* CVTSNAME                  @C1A*/') COL(COMCOL);  /* @C1A*/ 00425000
*                                                                       00426000
*    IF  SUBSTR(1) ^= 'YES' THEN DO;/* SKIP declares             @C2A*/ 00427000
*      ANS(';') SKIP;               /* End of previous structure @C2A*/ 00428000
*      ANS('DCL 1 '||P||I||'RHD')        COL(MACCOL);         /* @C2A*/ 00429000
*      ANS('BASED(ADDR('||P||I||'PRO)+'||P||I||'RAO),')       /* @C2A*/ 00430000
*                                        COL(MACCOL);         /* @C2A*/ 00431000
*      ANS('3 '||P||I||'RBR FIXED(15),') COL(MACCOL);         /* @C2A*/ 00432000
*      ANS('/* Total number of broken        */') COL(COMCOL);/* @C2A*/ 00433000
*      ANS('/* records build from the        */') COL(COMCOL);/* @C2A*/ 00434000
*      ANS('/* original large record     @C2A*/') COL(COMCOL);/* @C2A*/ 00435000
*      ANS('3 '||P||I||'RSQ FIXED(15),') COL(MACCOL);         /* @C2A*/ 00436000
*      ANS('/* Sequence number of this       */') COL(COMCOL);/* @C2A*/ 00437000
*      ANS('/* broken record. Every broken   */') COL(COMCOL);/* @C2A*/ 00438000
*      ANS('/* record build from the same    */') COL(COMCOL);/* @C2A*/ 00439000
*      ANS('/* large record must have a      */') COL(COMCOL);/* @C2A*/ 00440000
*      ANS('/* unique sequence number.       */') COL(COMCOL);/* @C2A*/ 00441000
*      ANS('/* Broken records with sequence  */') COL(COMCOL);/* @C2A*/ 00442000
*      ANS('/* numbers from 1 to SMFxxRBR    */') COL(COMCOL);/* @C2A*/ 00443000
*      ANS('/* must exist                @C2A*/') COL(COMCOL);/* @C2A*/ 00444000
*      ANS('3 '||P||I||'RIO FIXED(31),') COL(MACCOL);         /* @C2A*/ 00445000
*      ANS('/* Offset to first reassembly    */') COL(COMCOL);/* @C2A*/ 00446000
*      ANS('/* information block relative to */') COL(COMCOL);/* @C2A*/ 00447000
*      ANS('/* start of reassembly area      */') COL(COMCOL);/* @C2A*/ 00448000
*      ANS('/* header                    @C2A*/') COL(COMCOL);/* @C2A*/ 00449000
*      ANS('3 '||P||I||'RIL FIXED(15),') COL(MACCOL);         /* @C2A*/ 00450000
*      ANS('/* Length of reassembly          */') COL(COMCOL);/* @C2A*/ 00451000
*      ANS('/* information block         @C2A*/') COL(COMCOL);/* @C2A*/ 00452000
*      ANS('3 '||P||I||'RIN FIXED(15),') COL(MACCOL);         /* @C2A*/ 00453000
*      ANS('/* Number of reassembly          */') COL(COMCOL);/* @C2A*/ 00454000
*      ANS('/* information blocks (same as   */') COL(COMCOL);/* @C2A*/ 00455000
*      ANS('/* SMFxxTRN in header section)   */') COL(COMCOL);/* @C2A*/ 00456000
*      ANS('/*                           @C2A*/') COL(COMCOL);/* @C2A*/ 00457000
*      ANS('3  *            FIXED(31);') COL(MACCOL);         /* @C2A*/ 00458000
*      ANS('/* Reserved                  @C2A*/') COL(COMCOL);/* @C2A*/ 00459000
*                                                                       00460000
*      ANS('DCL 1 '||P||I||'RBL')        COL(MACCOL);         /* @C2A*/ 00461000
*      ANS('BASED(ADDR('||P||I||'RHD)+'||P||I||'RIO),')       /* @C2A*/ 00462000
*                                        COL(MACCOL);         /* @C2A*/ 00463000
*      ANS('3 '||P||I||'RNN FIXED(15),') COL(MACCOL);         /* @C2A*/ 00464000
*      ANS('/* Total number of sections in   */') COL(COMCOL);/* @C2A*/ 00465000
*      ANS('/* the original large record.    */') COL(COMCOL);/* @C2A*/ 00466000
*      ANS('/* This field contains           */') COL(COMCOL);/* @C2A*/ 00467000
*      ANS('/* information of how many       */') COL(COMCOL);/* @C2A*/ 00468000
*      ANS('/* sections of a specific type   */') COL(COMCOL);/* @C2A*/ 00469000
*      ANS('/* were contained in the         */') COL(COMCOL);/* @C2A*/ 00470000
*      ANS('/* original SMF record. This     */') COL(COMCOL);/* @C2A*/ 00471000
*      ANS('/* field is a copy of the number */') COL(COMCOL);/* @C2A*/ 00472000
*      ANS('/* field of the triplet in the   */') COL(COMCOL);/* @C2A*/ 00473000
*      ANS('/* original (non broken) record  */') COL(COMCOL);/* @C2A*/ 00474000
*      ANS('/*                           @C2A*/') COL(COMCOL);/* @C2A*/ 00475000
*      ANS('3 '||P||I||'RPP FIXED(15);') COL(MACCOL);         /* @C2A*/ 00476000
*      ANS('/* Position of the first of one  */') COL(COMCOL);/* @C2A*/ 00477000
*      ANS('/* or more consecutive sections  */') COL(COMCOL);/* @C2A*/ 00478000
*      ANS('/* described by this block as in */') COL(COMCOL);/* @C2A*/ 00479000
*      ANS('/* the original record. Values   */') COL(COMCOL);/* @C2A*/ 00480000
*      ANS('/* in the range of 1 to          */') COL(COMCOL);/* @C2A*/ 00481000
*      ANS('/* SMFxxRNN are valid for        */') COL(COMCOL);/* @C2A*/ 00482000
*      ANS('/* correct processing. A value   */') COL(COMCOL);/* @C2A*/ 00483000
*      ANS('/* of 0 will skip processing of  */') COL(COMCOL);/* @C2A*/ 00484000
*      ANS('/* this information block. This  */') COL(COMCOL);/* @C2A*/ 00485000
*      ANS('/* field provides information    */') COL(COMCOL);/* @C2A*/ 00486000
*      ANS('/* where the sections that are   */') COL(COMCOL);/* @C2A*/ 00487000
*      ANS('/* part of this broken record    */') COL(COMCOL);/* @C2A*/ 00488000
*      ANS('/* were placed in the original   */') COL(COMCOL);/* @C2A*/ 00489000
*      ANS('/* record before the split took  */') COL(COMCOL);/* @C2A*/ 00490000
*      ANS('/* place. The actual number of   */') COL(COMCOL);/* @C2A*/ 00491000
*      ANS('/* consecutive sections          */') COL(COMCOL);/* @C2A*/ 00492000
*      ANS('/* contained in this record is   */') COL(COMCOL);/* @C2A*/ 00493000
*      ANS('/* available from the actual     */') COL(COMCOL);/* @C2A*/ 00494000
*      ANS('/* triplet in the header         */') COL(COMCOL);/* @C2A*/ 00495000
*      ANS('/* extension                 @C2A*/') COL(COMCOL);/* @C2A*/ 00496000
*    END;                                                     /* @C2A*/ 00497000
*    ELSE ANS(',') SKIP;            /* Continue structure        @C2C*/ 00498000
*/************** END OF PL/AS PART ***********************************/ 00499000
*%END;                                                                  00500000
