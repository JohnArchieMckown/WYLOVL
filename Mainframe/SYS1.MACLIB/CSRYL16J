*                                                                       00050000
* %DCL CSRYL16J_INCLUDED CHAR EXT;                                      00100000
* %DEACTIVATE CSRYL16J_INCLUDED;                                        00150000
* %IF CSRYL16J_INCLUDED = '' %THEN                                      00200000
* %DO;                                                                  00250000
*/* Macro made bi-lingual on 99144. CBGEN compile date 98009         */ 00300000
*% /*                                                                   00350000
         MACRO                                                          00400000
         CSRYL16J &DSECT=YES,&LIST=YES,&TITLE=YES,&L16J=YES,           *00433300
               &L16J1=COND                                              00466600
         GBLC  &CSRYL16J_INCLUDED                                       00500000
         GBLC  &ZCBPRINT                                                00550000
&CSRYL16J_INCLUDED SETC 'YES'                                           00600000
         AIF   ('&LIST' EQ 'NONE').P0                                   00630000
         AIF   ('&TITLE' EQ 'NO').P5                                    00660000
 TITLE   'CSRYL16J  - Load 16 and Jump Area                          '  00690000
.P5      ANOP                                                           00720000
**/ CSRYL16J_1:;                                                        00750000
*/* START OF SPECIFICATIONS ******************************************* 00800000
*                                                                       00850000
*  **PROPRIETARY_STATEMENT********************************************  00900000
***01* PROPRIETARY STATEMENT=                                        *  00950000
*                                                                    *  01000000
*                                                                    *  01050000
*   LICENSED MATERIALS - PROPERTY OF IBM                             *  01100000
*   THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                      *  01150000
*   5647-A01 (C) COPYRIGHT IBM CORP. 1992,2000                       *  01200000
*                                                                    *  01300000
*   STATUS= HBB7703                                                  *  01350000
*                                                                    *  01400000
*  **END_OF_PROPRIETARY_STATEMENT*************************************  01450000
*                                                                       01462500
*01*  EXTERNAL CLASSIFICATION: PI                                       01475000
*01*  END OF EXTERNAL CLASSIFICATION:                                   01487500
*                                                                       01500000
*01* DESCRIPTIVE NAME:  Load 16 and Jump Area                           01550000
*02*  ACRONYM:  L16J                                                    01600000
*                                                                       01650000
*01* MACRO NAME:  CSRYL16J                                              01700000
*                                                                       01750000
*01* DSECT NAME:                                                        01800000
*     L16J   -- original parameter area                                 01833300
*     L16J1  -- use when 64-bit GPR updates are needed                  01866600
*                                                                       01900000
*01* COMPONENT:  Callable Services (SCCSR)                              01950000
*                                                                       02000000
*01* EYE-CATCHER:  NONE                                                 02050000
*                                                                       02100000
*01* STORAGE ATTRIBUTES:                                                02150000
*02*  SUBPOOL:  User-supplied                                           02200000
*02*  KEY:  User-supplied                                               02250000
*02*  RESIDENCY:  User-supplied                                         02300000
*                                                                       02350000
*01* SIZE:                                                              02400000
*           L16J  -- X'00A8' bytes                                      02433300
*           L16J1 -- X'0130' bytes                                      02466600
*                                                                       02500000
*01* CREATED BY:                                                        02550000
*     User of CSRL16J. Passed as a parameter to CSRL16J                 02600000
*                                                                       02650000
*01* POINTED TO BY:                                                     02700000
*     Parameter list passed to CSRL16J                                  02750000
*                                                                       02800000
*01* SERIALIZATION:                                                     02850000
*     None required                                                     02900000
*                                                                       02950000
*01* FUNCTION:                                                          03000000
*02* Maps the data passed into CSRL16J                                  03050000
*                                                                       03100000
*01* METHOD OF ACCESS:                                                  03150000
*02*  ASM:                                                              03200000
*      CSRYL16J                                                         03250000
*           DSECT=YES|NO  -- Request DSECT definition                   03300000
*           L16J=YES|NO   -- Request record mapping                     03350000
*                            USING on L16J                              03400000
*           L16J1=YES|NO  -- Request record mapping                     03416600
*                            USING on L16J1                             03433200
*     Default: DSECT=YES,L16J=YES                                       03450000
*02*  PL/X:                                                             03500000
*      %INCLUDE SYSLIB(CSRYL16J)                                        03550000
*                                                                       03600000
*01* DELETED BY:  User                                                  03650000
*                                                                       03700000
*01* FREQUENCY:  Created for parameter to CSRYL16J                      03750000
*                                                                       03800000
*01* DEPENDENCIES:  None                                                03850000
*                                                                       03900000
*01* DISTRIBUTION LIBRARY:  AMACLIB                                     03950000
*                                                                       04000000
*01* CHANGE ACTIVITY:                                                   04050000
*   $L0=POSIXCSR,HBB4430,911125,PD00XB: CSRL16J Parameter List          04100000
*   $L1=64BITCSR,HBB7703,971110,PD00XB: ESAME                           04125000
*                                                                       04150000
* END OF SPECIFICATIONS *********************************************/  04200000
*% /*                                                                   04250000
.P0      ANOP                                                           04275000
         AIF   ('&ZCBPRINT' EQ 'NO').P1                                 04300000
         AIF   ('&LIST' EQ 'YES').P2                                    04350000
.P1      ANOP                                                           04400000
         PUSH  PRINT                                                    04450000
         PRINT OFF                                                      04500000
.P2      ANOP                                                           04550000
         AIF   ('&L16J' EQ 'NO').L0002                                  04600000
         AIF   ('&DSECT' EQ 'YES').L0003                                04650000
         AIF   ('&L16J' NE 'YES').L0002                                 04700000
L16J     DS    0F        Start of area                                  04750000
         AGO   .L0004                                                   04800000
.L0003   ANOP                                                           04850000
L16J     DSECT           Start of area                                  04900000
.L0004   ANOP                                                           04950000
L16JVERSION DS 1FL4      Version -- Must be 0                           05000000
L16JLENGTH DS  1FL4      Initialize to L16J_LEN (ASM) or Length(L16J)  *05050000
                         (PL/X)                                         05100000
L16JSUBPOOL DS 1FL4      Subpool of storage to be freed                 05150000
L16JGRS  DS    0CL0064   General registers                              05200000
L16JGR   DS    1FL4      General register 0-15                          05250000
         ORG   L16JGRS+X'00000040'                                      05300000
L16JARS  DS    0CL0064   Access registers                               05350000
L16JAR   DS    1FL4      Access register 0-15                           05400000
         ORG   L16JARS+X'00000040'                                      05450000
L16JPSW  DS    0CL0008   PSW: the processing will use the address,     *05500000
                         Amode, ASC mode, CC, and program mask. For a  *05550000
                         supervisor state or PKM 0-7 or key 0-7        *05600000
                         caller, it will use the state and key from    *05650000
                         the PSW. Otherwise, it will set to caller key *05700000
                         and state.                                     05750000
L16JPSWBYTE0TO3 DS 1BL4  First 4 bytes                                  05810000
L16JPSWADDR DS 0AL4      Address and AMODE                              05855000
L16JPSWAMODE EQU X'80'   AMODE                                          05900000
         ORG   L16JPSW+X'00000008'                                      05950000
L16JFLAGS DS   0BL1      Flags                                          06000000
L16JPROCESSARS EQU X'80' If on, ARs will be processed. Otherwise not.  *06050000
                         If not processed, ARs 0, 1, 14, and 15 are    *06100000
                         unpredictable. ARs 2-13 are taken from the    *06150000
                         values present when the service is entered.    06200000
         ORG   L16JFLAGS+X'00000001'                                    06250000
L16JRSVD DS    1CL0003   Reserved                                       06300000
L16JAREATOFREE DS 1AL4   Address of area to free. If this is non-0 and *06350000
                         the length is non-0 then the area will be     *06400000
                         freed, using the subpool specified in         *06450000
                         L16JSubpool. This can be used to free the     *06500000
                         caller's entire dynamic area if so desired.   *06550000
                         When this option is specified, it is          *06600000
                         necessary that the area begin on a doubleword *06650000
                         boundary.                                      06700000
L16JLENGTHTOFREE DS 1FL4 Length of area to free, in bytes               06750000
         DS    1CL0008   Reserved. Must change version number in order *06800000
                         to use.                                        06850000
L16J_LEN EQU   *-L16J                                                   06900000
.L0002   ANOP                                                           06950000
         AIF   ('&L16J1' EQ 'NO').L0005                                 06950900
         AIF   ('&DSECT' EQ 'YES').L0006                                06951800
         AIF   ('&L16J1' NE 'YES').L0005                                06952700
L16J1    DS    0F        Use L16J1 as opposed to L16J when 64-bit GPR  *06953600
                         processing is needed                           06954500
         AGO   .L0007                                                   06955400
.L0006   ANOP                                                           06956300
L16J1    DSECT           Use L16J1 as opposed to L16J when 64-bit GPR  *06957200
                         processing is needed                           06958100
.L0007   ANOP                                                           06959000
L16J1VERSION DS 1FL4     Version -- Must be 1                           06959900
L16J1LENGTH DS 1FL4      Initialize to L16J1_LEN (ASM) or              *06960800
                         Length(L16J1) (PL/X)                           06961700
L16J1SUBPOOL DS 1FL4     Subpool of storage to be freed                 06962600
L16J1RSVD1 DS  1CL0064   Reserved. Must be zeroes.                      06963500
L16J1ARS DS    0CL0064   Access registers                               06964800
L16J1AR  DS    1FL4      Access register 0-15                           06966200
         ORG   L16J1ARS+X'00000040'                                     06967100
L16J1RSVD2 DS  1CL0008   Reserved. Must be zeroes                       06973100
L16J1FLAGS DS  0BL1      Flags                                          06979200
L16J1PROCESSARS EQU X'80' If on, ARs will be processed. Otherwise not. *06980600
                         If not processed, ARs 0, 1, 14, and 15 are    *06981500
                         unpredictable. ARs 2-13 are taken from the    *06982400
                         values present when the service is entered.    06983300
         ORG   L16J1FLAGS+X'00000001'                                   06984200
L16J1RSVD DS   1CL0003   Reserved. Must be zeroes.                      06985100
L16J1AREATOFREE DS 1AL4  Address of area to free. If this is non-0 and *06986000
                         the length is non-0 then the area will be     *06986900
                         freed, using the subpool specified in         *06987800
                         L16J1Subpool. This can be used to free the    *06988700
                         caller's entire dynamic area if so desired.   *06989600
                         When this option is specified, it is          *06990500
                         necessary that the area begin on a doubleword *06991400
                         boundary.                                      06992300
L16J1LENGTHTOFREE DS 1FL4 Length of area to free, in bytes              06993200
L16J1G64RS DS  0CL0128   64-bit GPRs                                    06994500
L16J1G64R DS   1CL0008   General register 0-15                          06995900
         ORG   L16J1G64RS+X'00000080'                                   06996800
L16J1PSWE DS   0CL0016   ESAME PSW: the processing will use the        *06996900
                         address, Amode, ASC mode, CC, and program     *06997000
                         mask. For a supervisor state or PKM 0-7 or    *06997100
                         key 0-7 caller, it will use the state and key *06997200
                         from the PSW. Otherwise, it will set to       *06997300
                         caller key and state.                          06997400
L16J1PSWEBYTE0TO3 DS 0BL4 First 4 bytes                                 06997500
L16J1PSWEBYTE0 DS 1BL1   First byte                                     06997600
L16J1PSWEBYTE1 DS 1BL1   Second byte                                    06997700
L16J1PSWEBYTE2 DS 1BL1   Third byte                                     06997800
L16J1PSWEBYTE3 DS 0BL1   Fourth byte                                    06997900
L16J1PSWEAMODE64 EQU X'01' Indicates AMODE 64 (with PSW bit 32 on      *06998000
                         also)                                          06998100
         ORG   L16J1PSWEBYTE0TO3+X'00000004'                            06998200
L16J1PSWEBYTE4TO7 DS 0BL4 Next 4 bytes                                  06998300
L16J1PSWEAMODE31 EQU X'80' Indicates AMODE 31                           06998400
         ORG   L16J1PSWEBYTE4TO7+X'00000004'                            06998500
L16J1PSWEADDR DS 1BL8    Instruction address                            06998600
L16J1_LEN EQU  *-L16J1                                                  06998700
.L0005   ANOP                                                           06998800
         AIF   ('&ZCBPRINT' EQ 'NO').P3                                 07000000
         AIF   ('&LIST' EQ 'YES').P4                                    07050000
.P3      ANOP                                                           07100000
         POP   PRINT                                                    07150000
.P4      ANOP                                                           07200000
.P_EXIT  ANOP                                                           07250000
         MEND                                                           07300000
**/ CSRYL16J_2:;                                                        07350000
* %CSRYL16J_INCLUDED = 'YES';                                           07400000
* %DCL ZCBPRINT CHAR EXT;                                               07450000
* %DEACTIVATE ZCBPRINT;                                                 07500000
* %DCL CSRYL16J_LIST CHAR EXT;                                          07550000
* %DEACTIVATE CSRYL16J_LIST;                                            07600000
* %IF CSRYL16J_LIST ^= 'NO' &                                           07650000
*    ZCBPRINT ^= 'NO' %THEN                                             07700000
*   %GOTO CSRYL16J_3;                                                   07750000
*   @LIST PUSH NOECHO;                                                  07800000
*   @LIST NOASSEMBLE NOECHO;                                            07850000
*   @LIST OFF C NOECHO;                                                 07900000
* %CSRYL16J_3:;                                                         07950000
*/* Start of PL/X Source                                             */ 08000000
*DCL 1 L16J BASED,         /* Start of area                          */ 08050000
*      3 L16JVersion FIXED(31), /* Version -- Must be 0              */ 08100000
*      3 L16JLength FIXED(31),  /* Initialize to L16J_LEN (ASM) or      08150000
*                                  Length(L16J) (PL/X)               */ 08200000
*      3 L16JSubpool Fixed(31),  /* Subpool of storage to be freed   */ 08250000
*      3 L16JGRs Char(64) Bdy(Word), /* General registers            */ 08300000
*        5 L16JGR(0:15) Fixed(31),   /* General register 0-15        */ 08350000
*      3 L16JARs Char(64) Bdy(Word), /* Access registers             */ 08400000
*        5 L16JAR(0:15) Fixed(31),   /* Access register 0-15         */ 08450000
*      3 L16JPSW Char(8) Bdy(Word), /* PSW: the processing will use the 08500000
*                             address, Amode, ASC mode, CC, and         08550000
*                             program mask. For                         08600000
*                             a supervisor state or PKM 0-7 or key 0-7  08650000
*                             caller, it will use the state and key     08700000
*                             from the PSW. Otherwise, it will set to   08750000
*                             caller key and state.                  */ 08800000
*        5 L16JPSWByte0to3 BIT(32), /* First 4 bytes                 */ 08850000
*        5 L16JPSWAddr Ptr(31),     /* Address and AMODE             */ 08900000
*          7 L16JPSWAmode Bit(1),   /* AMODE                         */ 08950000
*      3 L16JFlags Bit(8), /* Flags                                  */ 09000000
*        5 L16JProcessARs Bit(1),    /* If on, ARs will be              09050000
*            processed. Otherwise not. If not processed, ARs 0, 1, 14,  09100000
*            and 15 are unpredictable. ARs 2-13 are taken from the      09150000
*            values present when the service is entered.             */ 09200000
*      3 L16JRsvd Char(3), /* Reserved                               */ 09250000
*      3 L16JAreaToFree Ptr(31), /* Address of area to free.            09300000
*                      If this is non-0 and the length is non-0 then    09350000
*                      the area will be freed, using the subpool        09400000
*                      specified in L16JSubpool. This can be used to    09450000
*                      free the caller's entire dynamic area            09500000
*                      if so desired.                                   09550000
*                      When this option is specified, it is             09600000
*                      necessary that the area begin on a               09650000
*                      doubleword boundary.                          */ 09700000
*      3 L16JLengthToFree Fixed(31), /* Length of area to free,         09750000
*                                       in bytes                     */ 09800000
*      3 * Char(8),        /* Reserved. Must change version number in   09850000
*                             order to use.                          */ 09900000
*      3 * Char(0);        /*                                        */ 09950000
*DCL 1 L16J1 BASED,        /* Use L16J1 as opposed to L16J when         09951200
*                             64-bit GPR processing is needed    @L1A*/ 09952400
*      3 L16J1Version FIXED(31), /* Version -- Must be 1         @L1A*/ 09953600
*      3 L16J1Length FIXED(31), /* Initialize to L16J1_LEN (ASM) or     09954800
*                                  Length(L16J1) (PL/X)          @L1A*/ 09956000
*      3 L16J1Subpool Fixed(31), /* Subpool of storage to be freed      09957200
*                                                                @L1A*/ 09958400
*      3 L16J1Rsvd1 Char(64),    /* Reserved. Must be zeroes.    @L1A*/ 09959600
*      3 L16J1ARs Char(64) Bdy(Word), /* Access registers        @L1A*/ 09960800
*        5 L16J1AR(0:15) Fixed(31),  /* Access register 0-15     @L1A*/ 09962000
*      3 L16J1Rsvd2 CHAR(8),     /* Reserved. Must be zeroes     @L1A*/ 09968600
*      3 L16J1Flags Bit(8), /* Flags                             @L1A*/ 09975200
*        5 L16J1ProcessARs Bit(1),   /* If on, ARs will be              09976400
*            processed. Otherwise not. If not processed, ARs 0, 1, 14,  09977600
*            and 15 are unpredictable. ARs 2-13 are taken from the      09978800
*            values present when the service is entered.         @L1A*/ 09980000
*      3 L16J1Rsvd Char(3), /* Reserved. Must be zeroes.         @L1A*/ 09981200
*      3 L16J1AreaToFree Ptr(31), /* Address of area to free.           09982400
*                      If this is non-0 and the length is non-0 then    09983600
*                      the area will be freed, using the subpool        09984800
*                      specified in L16J1Subpool. This can be used to   09986000
*                      free the caller's entire dynamic area            09987200
*                      if so desired.                                   09988400
*                      When this option is specified, it is             09989600
*                      necessary that the area begin on a               09990800
*                      doubleword boundary.                      @L1A*/ 09992000
*      3 L16J1LengthToFree Fixed(31), /* Length of area to free,        09993200
*                                       in bytes                 @L1A*/ 09994400
*      3 L16J1G64Rs Char(128) Bdy(Word), /* 64-bit GPRs          @L1A*/ 09995600
*        5 L16J1G64R(0:15) CHAR(8),   /* General register 0-15   @L1A*/ 09996800
*      3 L16J1PSWE CHAR(16) Bdy(Word), /* ESAME PSW:                    09996900
*                             the processing will use                   09997000
*                             the address, Amode, ASC mode, CC, and     09997100
*                             program mask. For                         09997200
*                             a supervisor state or PKM 0-7 or key 0-7  09997300
*                             caller, it will use the state and key     09997400
*                             from the PSW. Otherwise, it will set to   09997500
*                             caller key and state.              @L1A*/ 09997600
*        5 L16J1PSWEByte0to3 BIT(32), /* First 4 bytes           @L1A*/ 09997700
*         6 L16J1PSWEByte0 BIT(8),    /* First byte              @L1A*/ 09997800
*         6 L16J1PSWEByte1 BIT(8),    /* Second byte             @L1A*/ 09997900
*         6 L16J1PSWEByte2 BIT(8),    /* Third byte              @L1A*/ 09998000
*         6 L16J1PSWEByte3 BIT(8),    /* Fourth byte             @L1A*/ 09998100
*          7 * Bit(7),               /*                          @L1A*/ 09998200
*          7 L16J1PSWEAmode64 Bit(1), /* Indicates AMODE 64             09998300
*                               (with PSW bit 32 on also)        @L1A*/ 09998400
*        5 L16J1PSWEByte4to7 BIT(32), /* Next 4 bytes            @L1A*/ 09998500
*          7 L16J1PSWEAmode31 Bit(1), /* Indicates AMODE 31      @L1A*/ 09998600
*        5 L16J1PSWEADDR BIT(64),    /* Instruction address      @L1A*/ 09998700
*      3 * Char(0);        /*                                    @L1A*/ 09998800
*/* End of PL/X Source                                               */ 10000000
* %IF CSRYL16J_LIST ^= 'NO' &                                           10050000
*    ZCBPRINT ^= 'NO' %THEN                                             10100000
*   %GOTO CSRYL16J_4;                                                   10150000
*   @LIST POP NOECHO;                                                   10200000
* %CSRYL16J_4:;                                                         10250000
* %END;                                                                 10300000
