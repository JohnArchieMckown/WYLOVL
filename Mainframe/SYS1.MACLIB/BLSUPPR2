*/**  Start of Specifications for BLSUPPR2 ***************************/ 00050000
*/*                                                                  */ 00100000
*/* $MAC(BLSUPPR2) COMP(SC132) PROD(JBB6602): Expanded print parmlist*/ 00150000
*/*                                                                  */ 00200000
*/*   PROPRIETARY STATEMENT =                                        */ 00208300
*/*                                                                  */ 00216600
*/*    LICENSED MATERIALS - PROPERTY OF IBM                          */ 00227000
*/*    THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                   */ 00237500
*/*    5645-001 (C) COPYRIGHT IBM CORP. 1986, 1996                   */ 00256200
*/*                                                                  */ 00275000
*/*    STATUS = JBB6602                                              */ 00287500
*/*                                                                  */ 00300000
*/* FUNCTION = Describe the type of printing function to perform.    */ 00350000
*/*                                                                  */ 00362500
*/*  EXTERNAL CLASSIFICATION: GUPI                                   */ 00375000
*/*  END OF EXTERNAL CLASSIFICATION:                                 */ 00387500
*/*                                                                  */ 00400000
*/* Acronym:    PPR2                                                 */ 00953700
*/* Descriptive Name: Expanded Print Parameter List                  */ 00957400
*/* Macro Name: BLSUPPR2                                             */ 00961100
*/* Dsect Name: Dynamic, supplied by user as BLSUPPR2 macro parm     */ 00964800
*/* Component:  IPCS (SC132)                                         */ 00968500
*/*                                                                  */ 00972200
*/* Eye Catcher: PPR2                                                */ 00975900
*/* Offset:      0                                                   */ 00979600
*/* Length:      4                                                   */ 00983300
*/*                                                                  */ 00987000
*/* Storage Attributes:                                              */ 00990700
*/*  Subpool: N/A                                                    */ 00996600
*/*  Key: 8 (IPCS), 0 (SNAP)                                         */ 01002500
*/*  Data Space: No                                                  */ 01008400
*/*  Residency: LOC(ANY)                                             */ 01014300
*/*  Size:      56 bytes                                             */ 01020300
*/*                                                                  */ 01024000
*/* Created by: Invokers of IPCS expanded print service              */ 01027700
*/* Pointed to by: N/A                                               */ 01031400
*/* Serialization: N/A                                               */ 01035100
*/*                                                                  */ 01038800
*/*                                                                  */ 01042500
*/*     METHOD OF ACCESS =                                           */ 01046200
*/*                                                                  */ 01050000
*/*      PLS = The macro can expand in a LIST or SUBLIST format.     */ 01100000
*/*                                                                  */ 01150000
*/*        Set macro variable EHBENDCHAR to comma or semicolon.      */ 01200000
*/*        Defaults to semicolon for LIST form and must be set       */ 01250000
*/*        for the SUBLIST form.  For example:                       */ 01300000
*/*                                                                  */ 01350000
*/*          %DCL EHBENDCHAR EXTERNAL CHAR                           */ 01400000
*/*          %EHBENDCHAR=','                                         */ 01450000
*/*                                                                  */ 01500000
*/*      LIST FORM    = ?BLSUPPR2 MF(LIST,PREFIX,STORCLASS)          */ 01600000
*/*                                                                  */ 01650000
*/*      SUBLIST FORM = ?BLSUPPR2 MF(SUBLIST,PREFIX,STORCLASS,LEVEL) */ 01700000
*/*                                                                  */ 01750000
*/*          MF                                                      */ 01800000
*/*         PARM  Meaning                                            */ 01850000
*/*         ----  -------------------------------------------------- */ 01900000
*/*                                                                  */ 01950000
*/*          1    LIST or L for LIST form                            */ 02000000
*/*               SUBLIST or S for SUBLIST form                      */ 02050000
*/*                                                                  */ 02100000
*/*          2    PREFIX is from 1 to 4 alpha-numeric starting with  */ 02150000
*/*               an alpha character. e.g. 'PPR2'                    */ 02200000
*/*                                                                  */ 02250000
*/*          3    STORAGE CLASS and initialization attribute.        */ 02300000
*/*               COMPLETE keyword will cause initial values to      */ 02350000
*/*               be generated.  Default storage class with COMPLETE */ 02400000
*/*               is STATIC LOCAL.  Can specify BASED, DEFINED ...   */ 02450000
*/*                                                                  */ 02500000
*/*          4    Structure level number to start with.  This can    */ 02550000
*/*               only be specified on the SUBLIST form.             */ 02600000
*/*                                                                  */ 02650000
*/*        Other keywords allow the user to specify the initialized  */ 02700000
*/*        state of the parameter list when the COMPLETE option      */ 02750000
*/*        is specified.                                             */ 02800000
*/*                                                                  */ 02850000
*/*         PARM       Meaning                                       */ 02900000
*/*         ---------- --------------------------------------------- */ 02950000
*/*                                                                  */ 03000000
*/*         BUF(x)     Specifies the buffer to be used by the print  */ 03050000
*/*                    service.  The ADDR(x) is used to intialize    */ 03100000
*/*                    the print buffer pointer field.  The only     */ 03150000
*/*                    time the buffer address can be specified is   */ 03200000
*/*                    when the buffer address is known at LOAD time.*/ 03250000
*/*                    You cannot specify ADPLBUFR with the BUF      */ 03300000
*/*                    parameter because the address of ADPLBUFR is  */ 03350000
*/*                    not known until execution time.               */ 03400000
*/*                    LENGTH(x) is used to initialize the buffer    */ 03450000
*/*                    length field.                                 */ 03500000
*/*                                                                  */ 03550000
*/*         OVIN(y)    Specifies the overflow indentation level      */ 03600000
*/*                    to be used.  If this parm is not specified,   */ 03650000
*/*                    a value of 2 is used.                         */ 03700000
*/*                                                                  */ 03750000
*/*         TOKN(z)    Specifies the token to be used to identify    */ 03800000
*/*                    a conditional header.  When cancelling a      */ 03850000
*/*                    conditional header, this token can be used    */ 03900000
*/*                    to guarantee that the correct conditional     */ 03950000
*/*                    header is cancelled.                          */ 04000000
*/*                                                                  */ 04050000
*/*         MODN(z)    Specifies the module which is calling the     */ 04100000
*/*                    Expanded Print service.  If the caller has    */ 04150000
*/*                    set external macro variable (EHBCSECT) to     */ 04200000
*/*                    contain the 8 character CSECT name, the       */ 04250000
*/*                    MODN field will default to EHBCSECT.          */ 04300000
*/*                    EHBCSECT is set by the BLRPROC macro.         */ 04350000
*/*                                                                  */ 04400000
*/*         OPTIONS(o) Specifies the option flags to be turned on.   */ 04450000
*/*                    The options allowed are the suffix            */ 04500000
*/*                    characters from the option flag fields.       */ 04550000
*/*                    For example, specify OPTIONS(MSG) to turn     */ 04600000
*/*                    on the PPR2MSG flag.  See option fields       */ 04650000
*/*                    for the complete list.                        */ 04700000
*/*                                                                  */ 04750000
*/*      ASM = The assembler format takes the form                   */ 04800000
*/*                                                                  */ 04850000
*/*            LABEL  BLSUPPR2 DSECT=YES                             */ 04900000
*/*                                  NO                              */ 04950000
*/*                                                                  */ 05000000
*/*            The LABEL is used as the prefix for all the           */ 05050000
*/*            field names.  The label cannot exceed 4 characters.   */ 05100000
*/*            For example code 'PPR2   BLSUPPR2 DSECT=YES'          */ 05150000
*/*                                                                  */ 05200000
*/*            DSECT=YES will cause a DSECT to be generated.         */ 05250000
*/*                      The initial values will be ignored.         */ 05300000
*/*                                                                  */ 05350000
*/*            DSECT=NO  will cause a set of initialized DCs         */ 05400000
*/*                      to be generated.                            */ 05450000
*/*                                                                  */ 05500000
*/*  NOTES =                                                         */ 05550000
*/*    DEPENDENCIES =                                                */ 05587500
*/*      The PL/X version of the macro requires that external macro  */ 05625000
*/*      variables be declared in one of the two following ways:     */ 05662500
*/*                                                                  */ 05700000
*/*       1. Use the BLSRPROC macro to generate the PROC statement   */ 05737500
*/*          and macro declares.                                     */ 05775000
*/*                                                                  */ 05793700
*/*       2. Use the BLSRMAC0 macro to generate only the declares.   */ 05812500
*/*                                                                  */ 05850000
*/* ================================================================ */ 06050000
*/*                                                                  */ 06200000
*/* CHANGE ACTIVITY=                                                 */ 06250000
*/*                                                                  */ 06300000
*/*   Products=                                                      */ 06350000
*/* $L0= SRVASADA,JBB2220,84139,PD31: Automatic SADMP analysis       */ 06400000
*/* $L1= SRVASADA,JBB2220,84108,PD31: Same as L0, copied code        */ 06450000
*/* $L2= SRVASADA,JBB2220,85081,PD31: Support old line width reports */ 06500000
*/*    = IPCSM  ,HBB4430,910327,PDE4: Withdrawn                      */ 06525000
*/* $L3= IPCSREUS,JBB6602,95177,PDE1: Dual case macro support        */ 06537500
*/*                                                                  */ 06550000
*/* ---------------------------------------------------------------- */ 06562500
*/*                                                                  */ 06575000
*/*   Design changes=                                                */ 06587500
*/*    = DKB0014,HBB4430,92008,PDE1: Remove IPCSM                    */ 06610000
*/*                                                                  */ 06632500
*/* ---------------------------------------------------------------- */ 06655000
*/*                                                                  */ 06677500
*/*   PTMs=                                                          */ 06700000
*/* $P1= PA20624,JBB2220,85283,PD31: Supply a default length for     */ 06716600
*/*      the assembler structure when DSECT=NO is specified.         */ 06733200
*/* $P2= PN70170,HBB5520,94027,PDE1: Correct prolog information      */ 06736500
*/*      used for data areas documentation                       @P2D*/ 06739800
*/*                                                                  */ 06743100
*/* ---------------------------------------------------------------- */ 06746400
*/*                                                                  */ 06750000
*/*   Maintenance= none                                              */ 06800000
*/*                                                                  */ 06850000
*/** End of Specifications for BLSUPPR2 ******************************  06900000
         MACRO                                                          06950000
&P       BLSUPPR2 &DSECT=YES                                            07000000
         GBLB    &EPPR2           Blurb produced once in assembly       07050000
         IEZBITS ,                Define symbolic bits             @L1P 07100000
         AIF   ('&DSECT' EQ 'NO').L010 No DSECT statement          @L1P 07150000
&P       DSECT ,                  IPCS print parameter list             07200000
         AGO   .L020              Define structure of record       @L1P 07250000
.L010    ANOP  ,                  No DSECT statement               @L1P 07300000
         DS    0D                 Align on doubleword boundary     @P1C 07333300
&P       DS    0CL56              IPCS print parameter list        @P1A 07366600
.L020    ANOP  ,                  Define structure of record       @L1P 07400000
&P.000   DS    0C                 Begin BLSUPPR2               #MD85283 07450000
         AIF   (&EPPR2).L030      Blurb produced once in assembly       07500000
*-----------------------------------------------------------------      07550000
* A print service parameter list (PPR2) defines the print options       07600000
* desired for the data in the print buffer.                             07650000
*-----------------------------------------------------------------      07700000
.L030    ANOP  ,                  Blurb produced once in assembly  @L1P 07750000
&P.ID    DS    0CL5               Control block identifier              07800000
&P.IDC   DC    CL4'PPR2'          Control block acronym                 07850000
&P.IDL   DC    CL1'1'             Control block level indicator         07900000
&P.PFLG  DS    0BL3               Processing flags                      07950000
&P.PFL1  DC    BL1'0'             First byte of flags                   08000000
&P.CNH   EQU   BIT0               Conditional header request            08050000
&P.OCOL  EQU   BIT1               Offset column by ADPLSCOL             08100000
&P.CCNH  EQU   BIT2               Cancel conditional header request     08150000
&P.TRUN  EQU   BIT3               Truncate output to 1 line             08200000
&P.MSG   EQU   BIT4               Print buffer contains a message       08250000
&P.EJEC  EQU   BIT5               Cause page eject                      08300000
&P.NL    EQU   BIT6               Treat X'15' as New Line request       08350000
&P.TERM  EQU   BIT7               Only send output to the terminal      08400000
&P.PFL2  DC    BL1'0'             Second byte of flags             @L2A 08450000
&P.PLW   EQU   BIT0               Use print file line width        @L2A 08500000
         DC    XL1'00'            Reserved                         @L2C 08550000
&P.BUF   DC    A(0)               Address of buffer containing the data*08600000
                                  to be printed                         08650000
&P.BUFL  DC    F'0'               Length of data in the buffer to be   *08700000
                                  printed                               08750000
&P.OVIN  DC    H'2'               Overflow indentation level            08800000
&P.TOKN  DC    CL8'        '      Token for identifying a conditional  *08850000
                                  header                                08900000
&P.MODN  DC    CL8'        '      Name of module requesting the        *08950000
                                  service                               09000000
         DC    XL22'00'           Reserved                              09050000
&P.999   DS    0C                 End BLSUPPR2                 #MD85283 09100000
         MEND  ,                  End assembler macro BLSUPPR2       */ 09150000
*                                                                       09200000
*%BLSUPPR2:                         /* Print parameter list          */ 09250000
*   MACRO KEYS(BUF,MF,OPTIONS,OVIN,TOKN,MODN);                          09300000
*                                                                       09350000
*/* ================================================================ */ 09400000
*/* Define Macro-Variables                                           */ 09450000
*/* ================================================================ */ 09500000
*                                                                       09550000
*   DECLARE                         /* External macro variables      */ 09600000
*     ELSUPPR2 CHARACTER EXTERNAL,  /* BLSUPPR2 global data          */ 09650000
*     EHBCSECT CHARACTER EXTERNAL,  /* CSECT name                @L1P*/ 09700000
*     EHBENDCHAR CHARACTER EXTERNAL, /* Final punctuation        @L1P*/ 09750000
*     EHBBLRPENDESS CHARACTER EXTERNAL, /* Deferred macro requests      09800000
*                                                                @L1P*/ 09850000
*     EHBLVL1  CHARACTER EXTERNAL,  /* First level number        @L1P*/ 09900000
*     EHBLVL2  CHARACTER EXTERNAL,  /* Second level number       @L1P*/ 09950000
*     EHBLVL3  CHARACTER EXTERNAL,  /* Third level number        @L1P*/ 10000000
*     EHBLVL4  CHARACTER EXTERNAL,  /* Fourth level number       @L1P*/ 10050000
*     EHBMF1   CHARACTER EXTERNAL,  /* Macro form                @L1P*/ 10100000
*     EHBMF2   CHARACTER EXTERNAL,  /* Prefix characters         @L1P*/ 10150000
*     EHBMF3   CHARACTER EXTERNAL,  /* Scope/storage class       @L1P*/ 10200000
*     EHBMF3A  CHARACTER EXTERNAL,  /* Complete initialization flag     10250000
*                                                                @L1P*/ 10300000
*     BLSRENDDECLARE CHARACTER EXTERNAL, /* Deferred declarations       10344400
*                                                                @L1P*/ 10388800
*     EHBCOL1  FIXED EXTERNAL,      /* First indentation column  @L1P*/ 10433200
*     EHBCOL2  FIXED EXTERNAL,      /* Second indentation column @L1P*/ 10477600
*     EHBCOL3  FIXED EXTERNAL,      /* Third indentation column  @L1P*/ 10522000
*     EHBCOL4  FIXED EXTERNAL,      /* Fourth indentation column @L1P*/ 10566400
*     EHBRC    FIXED EXTERNAL;      /* Macro return code         @L1P*/ 10610800
*   DEACTIVATE ELSUPPR2,BLSRENDDECLARE; /* Prevent accidents         */ 10655200
*   DECLARE                         /* Internal macro variables      */ 10700000
*     CENDCHAR CHARACTER INTERNAL,  /* Final punctuation         @L1P*/ 10750000
*     CLVL2    CHARACTER INTERNAL,  /* Second level number       @L1P*/ 10800000
*     CLVL3    CHARACTER INTERNAL,  /* Third level number        @L1P*/ 10850000
*     CLVL4    CHARACTER INTERNAL,  /* Fourth level number       @L1P*/ 10900000
*     CMF1     CHARACTER INTERNAL,  /* Macro form                @L1P*/ 10950000
*     CMF2     CHARACTER INTERNAL,  /* Prefix characters         @L1P*/ 11000000
*     CMF3A    CHARACTER INTERNAL,  /* Complete initialization flag     11050000
*                                                                @L1P*/ 11100000
*     COPTIONS CHARACTER INTERNAL,  /*                           @L3A*/ 11125000
*     CQCOMPLETE CHARACTER INTERNAL, /* Literal                  @L1P*/ 11150000
*     CQINITIAL CHARACTER INTERNAL, /* Literal                   @L1P*/ 11200000
*     C1       CHARACTER INTERNAL,  /* Utility                       */ 11250000
*     FCOL2    FIXED INTERNAL,      /* Second indentation column @L1P*/ 11300000
*     FCOL3    FIXED INTERNAL,      /* Third indentation column  @L1P*/ 11350000
*     FCOL4    FIXED INTERNAL,      /* Fourth indentation column @L1P*/ 11400000
*     FRC      FIXED INTERNAL,      /* Macro return code         @L1P*/ 11450000
*     F1       FIXED INTERNAL;      /* Utility variable          @L1P*/ 11500000
*   DEACTIVATE CENDCHAR,CLVL2,CLVL3,CLVL4,CMF1,CMF2,CMF3A,COPTIONS,     11530000
*       CQCOMPLETE,CQINITIAL,FCOL2,FCOL3,FCOL4,FRC,F1; /* Prevent       11560000
*                                      accidents                 @L3C*/ 11590000
*   COPTIONS = TRANSLATE(OPTIONS);  /*                           @L3A*/ 11620000
*   CQINITIAL = ' INITIAL(';        /* Literal                   @L1P*/ 11650000
*   CQCOMPLETE = 'COMPLETE';        /* Literal                   @L1P*/ 11700000
*   ANSWER('?'||MACLABEL||'BLRMF('||MF||') FORMS(L,S);'); /*     @L1P*/ 11750000
*   CENDCHAR = EHBENDCHAR;          /* Final punctuation         @L1P*/ 11800000
*   EHBENDCHAR = ',';               /* Final punctuation         @L1P*/ 11850000
*   CLVL2 = EHBLVL2;                /* Second level number       @L1P*/ 11900000
*   CLVL3 = EHBLVL3;                /* Third level number        @L1P*/ 11950000
*   CLVL4 = EHBLVL4;                /* Fourth level number       @L1P*/ 12000000
*   CMF1 = EHBMF1;                  /* Macro form                @L1P*/ 12050000
*   CMF2 = EHBMF2;                  /* Prefix characters         @L1P*/ 12100000
*   CMF3A = EHBMF3A;                /* Complete initialization flag     12150000
*                                                                @L1P*/ 12200000
*   FCOL2 = EHBCOL2;                /* Second indentation column @L1P*/ 12250000
*   FCOL3 = EHBCOL3;                /* Third indentation column  @L1P*/ 12300000
*   FCOL4 = EHBCOL4;                /* Fourth indentation column @L1P*/ 12350000
*   FRC = EHBRC;                    /* Macro return code         @L1P*/ 12400000
*   BLSRENDDECLARE = BLSRENDDECLARE || CMF2 ||                          12450000
*       'PPR2 CHAR(5) CONSTANT(''PPR21''),' ||                          12500000
*       '/*PPR2 identifier constant used to fill in PPR2ID */';         12550000
*   IF CMF1 = 'LIST' THEN           /* List form                 @L1P*/ 12600000
*     ANSWER('DECLARE/*BLSUPPR2 #MD95177*/') COLUMN(5); /*       @L3C*/ 12650000
*   ANSWER(EHBLVL1||CMF2||' BOUNDARY(WORD)'||EHBMF3||',/*BLSUPPR2'||    12700000
*       MACLIST||' '||MACKEYS||'*/') COLUMN(EHBCOL1);                   12750000
*   IF CMF1 = 'LIST' THEN           /* List form                 @L1P*/ 12800000
*     IF INDEX(ELSUPPR2,',BLURB') = 0 THEN /* Produce blurb          */ 12850000
*       DO;                         /* produce BLURB once        @L1P*/ 12900000
*         ANSWER('/*****************************************************12950000
****************/ /* Print Service parameter list (PPR2)                13000000
*              */ /*                                                    13050000
*              */ /* FUNCTION = A PPR2 is used to describe the print ser13100000
*vice          */ /*    functions that are to be performed on the data i13150000
*n the         */ /*    specified print buffer.                         13200000
*              */ /*                                                    13250000
*              */ /* CONTENTS = Major areas within this structure are:  13300000
*              */ /*   1. The address and length of a print buffer are r13350000
*equired       */ /*      parameters.  The specified length need not be 13400000
*the length    */ /*      of data in the print buffer.  The print servic13450000
*e will        */ ') COLUMN(2);                                         13500000
*         ANSWER('/*      not print trailing blanks.                    13550000
*              */ /*   2. The option flags need to be turned on for the 13600000
*desired       */ /*      options.  After a call to the print service, t13650000
*he flags      */ /*      need to be turned off.  The print service will13700000
* not modify   */ /*      the passed parameter list.                    13750000
*              */ /*   3. The overflow indentation level allows the user13800000
* to format    */ /*      long pieces of data and control the column pos13850000
*ition where   */ /*      succeeding lines will appear.                 13900000
*              */ /*****************************************************13950000
****************/ ') COLUMN(2);                                         14000000
*         ELSUPPR2 = ELSUPPR2 || ',BLURB'; /* Blurb produced         */ 14050000
*       END;                        /* produce BLURB once        @L1P*/ 14100000
*   ANSWER(CLVL2||CMF2||'ID CHAR(5)') COLUMN(FCOL2); /*          @L1P*/ 14150000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 14200000
*     ANSWER(CQINITIAL||CMF2||'PPR2)');                                 14250000
*   ANSWER(',/*Control block identifier*/');                            14300000
*   ANSWER(CLVL3||CMF2||'IDC CHARACTER(4),/*Control block acronym*/')   14350000
*       COLUMN(FCOL3);                                                  14400000
*   ANSWER(CLVL3||CMF2||'IDL CHARACTER(1),/*Control block level */')    14450000
*       COLUMN(FCOL3);                                                  14500000
*   ANSWER(CLVL2||CMF2||'PFLG BIT(24),/*Processing flags*/') COLUMN(    14550000
*       FCOL2);                                                         14600000
*   ANSWER(CLVL3||CMF2||'PFL1 BIT(8)') COLUMN(FCOL3); /*             */ 14650000
*   IF CMF3A = CQCOMPLETE THEN      /* Initialization required?  @L1P*/ 14700000
*     DO;                           /* Initialize                    */ 14750000
*       IF INDEX(COPTIONS,'CNH') > 0 THEN /* Conditional header  @L3C*/ 14800000
*         C1 = '1';                 /* Flag byte value               */ 14850000
*       ELSE                        /* No conditional header         */ 14900000
*         C1 = '0';                 /* Flag byte value               */ 14950000
*       IF INDEX(COPTIONS,'OCOL') > 0 THEN /* Data shifted       @L3C*/ 15000000
*         C1 = C1 || '1';           /* Flag byte value               */ 15050000
*       ELSE                        /* No data shift                 */ 15100000
*         C1 = C1 || '0';           /* Flag byte value               */ 15150000
*       IF INDEX(COPTIONS,'CCNH') > 0 THEN /* Cancel header      @L3C*/ 15200000
*         C1 = C1 || '1';           /* Flag byte value               */ 15250000
*       ELSE                        /* Retain header                 */ 15300000
*         C1 = C1 || '0';           /* Flag byte value               */ 15350000
*       IF INDEX(COPTIONS,'TRUN') > 0 THEN /* Truncation permitted      15383300
*                                                                @L3C*/ 15416600
*         C1 = C1 || '1';           /* Flag byte value               */ 15450000
*       ELSE                        /* Show all output               */ 15500000
*         C1 = C1 || '0';           /* Flag byte value               */ 15550000
*       IF INDEX(COPTIONS,'MSG') > 0 THEN /* MSGID               @L3C*/ 15600000
*         C1 = C1 || '1';           /* Flag byte value               */ 15650000
*       ELSE                        /* NOMSGID                       */ 15700000
*         C1 = C1 || '0';           /* Flag byte value               */ 15750000
*       IF INDEX(COPTIONS,'EJEC') > 0 THEN /* Page eject         @L3C*/ 15800000
*         C1 = C1 || '1';           /* Flag byte value               */ 15850000
*       ELSE                        /* Continue on same page         */ 15900000
*         C1 = C1 || '0';           /* Flag byte value               */ 15950000
*       IF INDEX(COPTIONS,'NL') > 0 THEN /* Page eject           @L3C*/ 16000000
*         C1 = C1 || '1';           /* Flag byte value               */ 16050000
*       ELSE                        /* Continue on same page         */ 16100000
*         C1 = C1 || '0';           /* Flag byte value               */ 16150000
*       IF INDEX(COPTIONS,'TERM') > 0 THEN /* Output to terminal only   16183300
*                                                                @L3C*/ 16216600
*         C1 = C1 || '1';           /* Flag byte value               */ 16250000
*       ELSE                        /* Continue on same page         */ 16300000
*         C1 = C1 || '0';           /* Flag byte value               */ 16350000
*       ANSWER(CQINITIAL||''''||C1||'''B)');                            16400000
*     END;                          /* Initialize                    */ 16450000
*   ANSWER(',/*First flag byte*/');                                     16500000
*   ANSWER(CLVL4||CMF2||'CNH  BIT(1),/*Conditional header request*/')   16550000
*       COLUMN(FCOL4);                                                  16600000
*   ANSWER(CLVL4||CMF2||'OCOL BIT(1),/*Shift data so that the starting  16650000
*column used is taken from ADPLSCOL*/') COLUMN(FCOL4);                  16700000
*   ANSWER(CLVL4||CMF2||'CCNH BIT(1),/*Cancel conditional header*/')    16750000
*       COLUMN(FCOL4);                                                  16800000
*   ANSWER(CLVL4||CMF2||'TRUN BIT(1),/*Truncate output at 1 line*/')    16850000
*       COLUMN(FCOL4);                                                  16900000
*   ANSWER(CLVL4||CMF2||'MSG BIT(1),'||'/*Print buffer contains a messag16950000
*e with a message identifier on the front*/') COLUMN(FCOL4);            17000000
*   ANSWER(CLVL4||CMF2||'EJEC BIT(1),/*Cause page eject*/') COLUMN(     17050000
*       FCOL4);                                                         17100000
*   ANSWER(CLVL4||CMF2||                                                17150000
*       'NL   BIT(1),/*Treat x''15'' as New Line Request*/') COLUMN(    17200000
*       FCOL4);                                                         17250000
*   ANSWER(CLVL4||CMF2||                                                17300000
*       'TERM BIT(1),/*Send output only to the terminal */') COLUMN(    17350000
*       FCOL4);                                                         17400000
*   ANSWER(CLVL3||CMF2||'PFL2 BIT(8)') COLUMN(FCOL3); /*             */ 17450000
*   IF CMF3A = CQCOMPLETE THEN      /* Initialization required?  @L2P*/ 17500000
*     DO;                           /* Initialize                @L2P*/ 17550000
*       IF INDEX(COPTIONS,'PLW') > 0 THEN /* Use print line width       17583300
*                                                                @L3C*/ 17616600
*         C1 = '1';                 /* Flag byte value           @L2P*/ 17650000
*       ELSE                        /* Use default line width        */ 17700000
*         C1 = '0';                 /* Flag byte value           @L2P*/ 17750000
*       C1 = C1 || '0000000';       /* Pad out reserved bits     @L2A*/ 17800000
*       ANSWER(CQINITIAL||''''||C1||'''B)'); /* Value of flag byte 2    17850000
*                                                                @L2P*/ 17900000
*     END;                          /* Initialize                @L2P*/ 17950000
*   ANSWER(',/*Second flag byte*/');                                    18000000
*   ANSWER(CLVL4||CMF2||'PLW  BIT(1),/*Use print line width*/') COLUMN( 18050000
*       FCOL4);                     /*                           @L2A*/ 18100000
*   ANSWER(CLVL4||'* BIT(7),/*Reserved */') COLUMN(FCOL4); /*    @L2A*/ 18150000
*   ANSWER(CLVL3||CMF2||'PFL3 BIT(8)') COLUMN(FCOL3);                   18250000
*   IF CMF3A = CQCOMPLETE THEN      /* Initialization required?  @L1P*/ 18300000
*     ANSWER(CQINITIAL||'''00''X)'); /*                          @L1P*/ 18350000
*   ANSWER(',/*Third flag byte*/');                                     18400000
*   ANSWER(CLVL2||CMF2||'BUF POINTER(32)') COLUMN(FCOL2);               18450000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 18500000
*     IF LENGTH(BUF(1)) > 0 THEN    /* Buffer specified              */ 18550000
*       ANSWER(CQINITIAL||'ADDR('||BUF(1)||'))');                       18600000
*     ELSE                          /* No buffer                     */ 18650000
*       ANSWER(CQINITIAL||'ZZZZNULL)');                                 18700000
*   ANSWER(',/*Address of print buffer*/');                             18750000
*   ANSWER(CLVL2||CMF2||'BUFL FIXED(32)') COLUMN(FCOL2);                18800000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 18850000
*     IF LENGTH(BUF(1)) > 0 THEN    /* Buffer specified              */ 18900000
*       ANSWER(CQINITIAL||'LENGTH('||BUF(1)||'))');                     18950000
*     ELSE                          /* No buffer                     */ 19000000
*       ANSWER(CQINITIAL||'ZZZZNULL)');                                 19050000
*   ANSWER(',/*Length of print buffer*/');                              19100000
*   ANSWER(CLVL2||CMF2||'OVIN FIXED(16)') COLUMN(FCOL2);                19150000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 19200000
*     IF LENGTH(OVIN(1)) > 0 THEN   /* Overflow indentation specified*/ 19250000
*       ANSWER(CQINITIAL||OVIN(1)||')');                                19300000
*     ELSE                          /* No overflow indentation       */ 19350000
*       ANSWER(CQINITIAL||'2)');                                        19400000
*   ANSWER(',/*Overflow line indentation level*/');                     19450000
*   ANSWER(CLVL2||CMF2||'TOKN CHAR(8)') COLUMN(FCOL2);                  19500000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 19550000
*     IF LENGTH(TOKN(1)) > 0 THEN   /* Token specified               */ 19600000
*       ANSWER(CQINITIAL||TOKN(1)||')');                                19650000
*     ELSE                          /* No token specified            */ 19700000
*       ANSWER(CQINITIAL||'''        '')');                             19750000
*   ANSWER(',/*Token for identifying a conditional header*/');          19800000
*   ANSWER(CLVL2||CMF2||'MODN CHAR(8)') COLUMN(FCOL2);                  19850000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 19900000
*     IF LENGTH(MODN(1)) > 0 THEN   /* Module name specified         */ 19950000
*       ANSWER(CQINITIAL||MODN(1)||')');                                20000000
*     ELSE                          /* No module name on macro stmt  */ 20050000
*       IF LENGTH(EHBCSECT) >= 8 THEN /* CSECT name defined by          20083300
*                                      BLRPROC                       */ 20116600
*         ANSWER(CQINITIAL||QUOTE(EHBCSECT(1:8))||')');                 20150000
*       ELSE                        /* No token specified            */ 20200000
*         ANSWER(CQINITIAL||'''        '')'); /* Default is blanks   */ 20250000
*   ANSWER(',/*Name of module requesting the service*/');               20300000
*   ANSWER(CLVL2||'* BIT(176)') COLUMN(FCOL2);                          20350000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 20400000
*     ANSWER(CQINITIAL||'''00''X)'); /*                          @L1P*/ 20450000
*   ANSWER(',/*Reserved*/');        /*                           @L1P*/ 20500000
*   ANSWER(CLVL2||CMF2||'999 CHARACTER(0)'||CENDCHAR||                  20550000
*       '/*BLSUPPR2 #MD95177*/') COLUMN(FCOL2); /*               @L3C*/ 20600000
*   IF CENDCHAR = ';' THEN          /*                           @L1P*/ 20650000
*     ANSWER('?BLSR002;');          /* Process deferred declarations    20700000
*                                                                @L1P*/ 20750000
*   ANSWER('?BLR003(BLSUPPR2,'||CHAR(EHBRC)||');');                     20800000
*   RETURN CODE(FRC);               /*                           @L1P*/ 20850000
*   %END BLSUPPR2;                                                      20900000
