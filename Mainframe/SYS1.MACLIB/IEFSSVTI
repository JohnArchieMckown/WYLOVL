*%IEFSSVTI: MACRO KEYS(TYPE,SSVTDATA,TABLEN,FUNCNAME,FUNCADDR,          00000100
*                 NUMFCODES,FCODES,SOURCE,ENTRYDATA,FUNCAMODE,          00000200
*                 MAXFCODES);                                           00000300
*/**** START OF SPECIFICATIONS **************************************** 00000400
*                                                                     * 00000500
*                                                                     * 00000600
*01* MACRO NAME:  IEFSSVTI                              -94/04/14-<1> * 00000700
*                                                                     * 00000800
*                                                                     * 00000900
*01* DESCRIPTIVE NAME:  Subsystem Vector Table Input Macro            * 00001000
*                                                                     * 00001100
*01* PROPRIETARY STATEMENT:                                           * 00001200
*                                                                     * 00001300
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001400
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00001500
*     5655-068 (C) COPYRIGHT IBM CORP. 1994                           * 00001600
*                                                                     * 00001700
* STATUS= HBB5520                                                     * 00001800
*                                                                     * 00001900
*                                                                     * 00002000
*                                                                     * 00002100
*01* FUNCTION:                                                        * 00002200
*                                                                     * 00002300
*      Use the IEFSSVTI macro to define the table of function         * 00002400
*      routines and function codes passed to IEFSSVT as input when    * 00002500
*      creating or modifying a subsystem vector table.                * 00002600
*                                                                     * 00002700
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00002800
*                                                                     * 00002900
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00003000
*                                                                     * 00003100
*01* ENVIRONMENT:                                                     * 00003200
*                                                                     * 00003300
*                                                                     * 00003400
*      Minimum authorization: Problem or Supervisor state.            * 00003500
*                                                                     * 00003600
*      Dispatchable unit mode: Task or SRB mode.                      * 00003700
*                                                                     * 00003800
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00003900
*                                                                     * 00004000
*      AMODE:            24- or 31-bit.                               * 00004100
*                                                                     * 00004200
*      ASC mode:         Primary, Secondary, or Access Register.      * 00004300
*                                                                     * 00004400
*      Interrupt status: Enabled or disabled for I/O and external     * 00004500
*                        interrupts.                                  * 00004600
*                                                                     * 00004700
*      Locks:            No locks held.  Since the IEFSSVTI macro     * 00004800
*                        expands in-line, it imposes no restrictions  * 00004900
*                        on locks held.  However, the IEFSSVT macro   * 00005000
*                        for which this macro creates input cannot be * 00005100
*                        invoked while holding locks.                 * 00005200
*                                                                     * 00005300
*      Control parameters: Control parameters must be in the primary  * 00005400
*                        address space.                               * 00005500
*                                                                     * 00005600
*                                                                     * 00005700
*                                                                     * 00005800
*01* PROGRAMMING REQUIREMENTS:                                        * 00005900
*                                                                     * 00006000
*    If subsystem function routines are being identified by address   * 00006100
*    using the FUNCADDR keyword, the invoking program must LOAD the   * 00006200
*    function routines or otherwise obtain their addresses before     * 00006300
*    invoking this macro.                                             * 00006400
*                                                                     * 00006500
*01* RESTRICTIONS:                                                    * 00006600
*                                                                     * 00006700
*    The table created by this macro cannot be used to invoke         * 00006800
*    IEFJSVEC to create subsystem vector tables.  It can only be used * 00006900
*    in conjunction with IEFSSVT.                                     * 00007000
*                                                                     * 00007100
*    The register form can only be used to specify macro keyword      * 00007200
*    variables in TYPE=SET invocations.                               * 00007300
*                                                                     * 00007400
*01* INPUT REGISTER INFORMATION:                                      * 00007500
*                                                                     * 00007600
*    There are no input register requirements for issuing the         * 00007700
*    IEFSSVTI macro.                                                  * 00007800
*                                                                     * 00007900
*01* OUTPUT REGISTER INFORMATION:                                     * 00008000
*                                                                     * 00008100
*    When control returns to the caller, the GPRs contain:            * 00008200
*                                                                     * 00008300
*                                                                     * 00008400
*    REGISTER  CONTENTS                                               * 00008500
*                                                                     * 00008600
*    0-1       Used as work registers by the system                   * 00008700
*                                                                     * 00008800
*    2-13      Unchanged                                              * 00008900
*                                                                     * 00009000
*    14-15     Used as work registers by the system                   * 00009100
*                                                                     * 00009200
*                                                                     * 00009300
*                                                                     * 00009400
*    When control returns to the caller, the ARs contain:             * 00009500
*                                                                     * 00009600
*                                                                     * 00009700
*    REGISTER  CONTENTS                                               * 00009800
*                                                                     * 00009900
*    0-15      Unchanged                                              * 00010000
*                                                                     * 00010100
*                                                                     * 00010200
*                                                                     * 00010300
*01* PERFORMANCE IMPLICATIONS:                                        * 00010400
*                                                                     * 00010500
*    None.                                                            * 00010600
*                                                                     * 00010700
*01* SYNTAX:                                                          * 00010800
*                                                                     * 00010900
*[xlabel]  IEFSSVTI    TYPE=LIST                                     * 00011000
*                     ,TYPE=INITIAL                                  * 00011100
*                    |     ,SSVTDATA=xssvtdata                        * 00011200
*                    |     ,TABLEN=xtablen                            * 00011300
*                     ,TYPE=ENTRY                                    * 00011400
*                    |   [,FUNCNAME=xfuncname                      * 00011500
*                    |    ,FUNCADDR=xfuncaddr]                     * 00011600
*                    |     ,NUMFCODES=xnumfcodes                      * 00011700
*                    |    [,FCODES=(xfcodes[,xfcodes...])|0]        * 00011800
*                     ,TYPE=FINAL                                    * 00011900
*                     ,TYPE=SET                                      * 00012000
*                    |     ,SSVTDATA=xssvtdata                        * 00012100
*                    |     ,SOURCE=xsource                            * 00012200
*                    |     ,ENTRYDATA=xentrydata                      * 00012300
*                    |   [,FUNCNAME=xfuncname                      * 00012400
*                    |    ,FUNCADDR=xfuncaddr                      * 00012500
*                    |        [,FUNCAMODE=HOB|31|24]]               * 00012600
*                    |    [,FCODES=(xfcodes[,xfcodes...])|0]        * 00012700
*                     ,TYPE=RESERVE                                  * 00012800
*                    |     ,SSVTDATA=xssvtdata                        * 00012900
*                    |    ,TABLEN=xtablen                            * 00013000
*                    |    ,MAXFCODES=xmaxfcodes                      * 00013100
*                     ,TYPE=COPY                                     * 00013200
*                          ,SSVTDATA=xssvtdata                        * 00013300
*                          ,SOURCE=xsource                            * 00013400
*                                                                     * 00013500
*                                                                     * 00013600
*      Where:                                                         * 00013700
*                                                                     * 00013800
*                                                                     * 00013900
*      [xlabel]                                                       * 00014000
*          is an optional symbol, starting in column 1, that is the   * 00014100
*          name on the IEFSSVTI macro invocation.  The name must      * 00014200
*          conform to the rules for an ordinary assembler language    * 00014300
*          symbol.                                                    * 00014400
*          DEFAULT: No name.                                          * 00014500
*                                                                     * 00014600
*                                                                     * 00014700
*                                                                     * 00014800
*                                                                     * 00014900
*       TYPE(LIST|INITIAL|ENTRY|FINAL|SET|RESERVE|COPY)             * 00015000
*          is a required keyword input that specifies the function of * 00015100
*          the macro invocation:                                      * 00015200
*                                                                     * 00015300
*                                                                     * 00015400
*          o   Begin a static table definition                        * 00015500
*                                                                     * 00015600
*          o   Define a function routine entry in a static table      * 00015700
*                                                                     * 00015800
*          o   End a static table definition                          * 00015900
*                                                                     * 00016000
*          o   Modify an entry in a table                             * 00016100
*                                                                     * 00016200
*          o   Reserve dynamic storage for a table                    * 00016300
*                                                                     * 00016400
*          o   Copy a table.                                          * 00016500
*                                                                     * 00016600
*                                                                     * 00016700
*                                                                     * 00016800
*                                                                     * 00016900
*           TYPE(LIST)                                                * 00017000
*              Produces a DSECT mapping the format of the function    * 00017100
*              routine input table.  A TYPE=LIST invocation is        * 00017200
*              required if TYPE=SET or TYPE=COPY is used in the       * 00017300
*              calling program.                                       * 00017400
*                                                                     * 00017500
*           TYPE(INITIAL)                                             * 00017600
*              Begins the definition of a static function routine     * 00017700
*              input table.  A set of IEFSSVTI invocations beginning  * 00017800
*              with TYPE=INITIAL, ending with TYPE=FINAL, and         * 00017900
*              including at least one TYPE=ENTRY defines a table in   * 00018000
*              static storage.  The combination of TYPE=INITIAL,      * 00018100
*              TYPE=ENTRY, and TYPE=FINAL is analogous to the list    * 00018200
*              form of other executable macros.                       * 00018300
*                                                                     * 00018400
*                                                                     * 00018500
*              SSVTDATA(xssvtdata)                                    * 00018600
*                  is a required input.  It is the name by which the  * 00018700
*                  input table being created will be referenced in    * 00018800
*                  the in-line code generated by IEFSSVTI.  This is   * 00018900
*                  the name that should be used on the SSVTDATA       * 00019000
*                  keyword of the IEFSSVT macro.                      * 00019100
*                                                                     * 00019200
*                                                                     * 00019300
*                                                                     * 00019400
*                                                                     * 00019500
*              TABLEN(xtablen)                                        * 00019600
*                  is a required input.  It is the name of a constant * 00019700
*                  to be generated by IEFSSVTI which will define the  * 00019800
*                  length of the storage required by the function     * 00019900
*                  routine input table.  The in-line code generated   * 00020000
*                  by IEFSSVTI will define an assembler equate or     * 00020100
*                  PL/X constant with the name supplied on the TABLEN * 00020200
*                  keyword and a value equal to the length of the     * 00020300
*                  table (in bytes).  This constant can be used with  * 00020400
*                  a TYPE=RESERVE request to reserve sufficient       * 00020500
*                  dynamic storage to copy the table for              * 00020600
*                  execution-time (TYPE=SET) modification.            * 00020700
*                                                                     * 00020800
*                                                                     * 00020900
*                                                                     * 00021000
*           TYPE(ENTRY)                                               * 00021100
*              Define a function routine entry in a static input      * 00021200
*              table.  A TYPE=INITIAL request must be specified       * 00021300
*              before any invocation specifying TYPE=ENTRY.           * 00021400
*                                                                     * 00021500
*                                                                     * 00021600
*              The following is a set of mutually exclusive keys.     * 00021700
*              This set is optional; only one key may be specified.   * 00021800
*                                                                     * 00021900
*                                                                     * 00022000
*              [FUNCNAME(xfuncname)                                 * 00022100
*                  belongs to a set of mutually exclusive keys. It    * 00022200
*                  is the name (RS-type) of an optional 8 character   * 00022300
*                  input that defines the name of the function        * 00022400
*                  routine.  The function routine name must:          * 00022500
*                                                                     * 00022600
*                                                                     * 00022700
*                  o   Consist of no more than 8 characters,          * 00022800
*                                                                     * 00022900
*                  o   Be composed of characters from the alphabetic, * 00023000
*                      national, or numeric character sets,           * 00023100
*                                                                     * 00023200
*                  o   Begin with a character from either the         * 00023300
*                      alphabetic or national character sets,         * 00023400
*                                                                     * 00023500
*                  o   Be left justified and, if necessary, be padded * 00023600
*                      to the right with blanks.                      * 00023700
*                                                                     * 00023800
*                                                                     * 00023900
*                                                                     * 00024000
*                  If FUNCNAME is not specified on a TYPE=ENTRY       * 00024100
*                  invocation, the function routine information must  * 00024200
*                  be provided on a subsequent TYPE=SET invocation.   * 00024300
*                                                                     * 00024400
*              FUNCADDR(xfuncaddr)]                                 * 00024500
*                  belongs to a set of mutually exclusive keys. It    * 00024600
*                  is the name (RS-type) of an optional  pointer      * 00024700
*                  input that contains the address of the function    * 00024800
*                  routine.  When specified on a TYPE=ENTRY           * 00024900
*                  invocation, the FUNCADDR key reserves space in the * 00025000
*                  function routine input table for the function      * 00025100
*                  routine address.  The actual address must be       * 00025200
*                  provided in a subsequent TYPE=SET invocation.      * 00025300
*                                                                     * 00025400
*                                                                     * 00025500
*                                                                     * 00025600
*              End of a set of mutually exclusive optional keys.      * 00025700
*              DEFAULT: FUNCNAME                                      * 00025800
*                                                                     * 00025900
*                                                                     * 00026000
*                                                                     * 00026100
*              NUMFCODES(xnumfcodes)                                  * 00026200
*                  is a required halfword input decimal value in the  * 00026300
*                  "1-255" range that defines the number of function  * 00026400
*                  codes supported by the associated function         * 00026500
*                  routine.                                           * 00026600
*                                                                     * 00026700
*                  Use the NUMFCODES keyword to reserve storage for   * 00026800
*                  function code information in a static table entry. * 00026900
*                  The number specified must be greater than or equal * 00027000
*                  to the number of function codes specified with the * 00027100
*                  FCODES keyword.                                    * 00027200
*                                                                     * 00027300
*                  If the actual number of function codes associated  * 00027400
*                  with the routine is not known at compile time,     * 00027500
*                  specify the maximum number of function codes       * 00027600
*                  expected, to reserve sufficient storage.  In this  * 00027700
*                  case, the actual function code information must be * 00027800
*                  provided by a subsequent TYPE=SET invocation       * 00027900
*                  specifying the FCODES key.                         * 00028000
*                                                                     * 00028100
*                                                                     * 00028200
*                                                                     * 00028300
*                                                                     * 00028400
*              [FCODES(xfcodes[,xfcodes...]|0)]                     * 00028500
*                                                                     * 00028600
*                xfcodes                                              * 00028700
*                  is a group of name(s) (RS-type) of an optional     * 00028800
*                  byte input(s) that defines the function code(s)    * 00028900
*                  supported by the associated function routine.      * 00029000
*                  Function code values must be between 1 and 255,    * 00029100
*                  inclusive.  In an assembler invocation, the        * 00029200
*                  function codes must be numeric values or assembler * 00029300
*                  equates.                                           * 00029400
*                                                                     * 00029500
*                  The same function code value cannot appear more    * 00029600
*                  than once within a set of IEFSSVTI invocations     * 00029700
*                  representing an input table.                       * 00029800
*                                                                     * 00029900
*                  If the FCODES key is not specified on a TYPE=ENTRY * 00030000
*                  invocation, the supported function codes must be   * 00030100
*                  specified on a subsequent TYPE=SET invocation.     * 00030200
*                  DEFAULT: 0                                         * 00030300
*                                                                     * 00030400
*                                                                     * 00030500
*                                                                     * 00030600
*           TYPE(FINAL)                                               * 00030700
*              Ends the definition of a static function routine input * 00030800
*              table.                                                 * 00030900
*                                                                     * 00031000
*           TYPE(SET)                                                 * 00031100
*              Modify a function routine entry in an existing input   * 00031200
*              table.  A TYPE=SET invocation is analogous to the      * 00031300
*              execute form of other executable macros.  It is        * 00031400
*              intended to be used to modify a table in dynamic       * 00031500
*              storage, but can be used to modify a static table in   * 00031600
*              non-reentrant programs.                                * 00031700
*                                                                     * 00031800
*              The SET operation destroys the contents of general     * 00031900
*              registers 0, 1, 14, and 15.                            * 00032000
*                                                                     * 00032100
*                                                                     * 00032200
*              SSVTDATA(xssvtdata)                                    * 00032300
*                  is a required input.  It is the name of the        * 00032400
*                  function routine input table to be modified.  The  * 00032500
*                  name must match the name of a table specified by   * 00032600
*                  the SSVTDATA key on an IEFSSVTI TYPE=INITIAL or    * 00032700
*                  TYPE=RESERVE macro invocation.                     * 00032800
*                                                                     * 00032900
*                                                                     * 00033000
*                                                                     * 00033100
*                                                                     * 00033200
*              SOURCE(xsource)                                        * 00033300
*                  is a required input.  It is the name of the        * 00033400
*                  original function routine input table from which   * 00033500
*                  the table to be modified (specified by the         * 00033600
*                  SSVTDATA key) was copied.  The name must match the * 00033700
*                  name of a table specified by the SSVTDATA key on   * 00033800
*                  an IEFSSVTI TYPE=INITIAL or TYPE=RESERVE macro     * 00033900
*                  invocation.  This information is used with the     * 00034000
*                  ENTRYDATA key to calculate the offset of the table * 00034100
*                  entry to be modified.                              * 00034200
*                                                                     * 00034300
*                  SOURCE and SSVTDATA can refer to the same table.   * 00034400
*                  This might be appropriate for modification of a    * 00034500
*                  static table created by a TYPE=INITIAL /           * 00034600
*                  TYPE=FINAL set of invocations, but can only be     * 00034700
*                  done in non-reentrant modules.                     * 00034800
*                                                                     * 00034900
*                                                                     * 00035000
*                                                                     * 00035100
*                                                                     * 00035200
*              ENTRYDATA(xentrydata)                                  * 00035300
*                  is the name (RS-type) (or address in register      * 00035400
*                  (2)-(12) ASM only) of a required fullword input    * 00035500
*                  specifying the index of the table entry to be      * 00035600
*                  modified.  It may be a variable, constant (not an  * 00035700
*                  assembler equate), or decimal value.               * 00035800
*                                                                     * 00035900
*                  If the value of the ENTRYDATA keyword is greater   * 00036000
*                  than the number of function routines described by  * 00036100
*                  the source table, the target table is unchanged.   * 00036200
*                  Since this is an execution time determination, the * 00036300
*                  macro cannot provide a warning in this case.       * 00036400
*                                                                     * 00036500
*                                                                     * 00036600
*                                                                     * 00036700
*                                                                     * 00036800
*              The following is a set of mutually exclusive keys.     * 00036900
*              This set is optional; only one key may be specified.   * 00037000
*                                                                     * 00037100
*                                                                     * 00037200
*                  Either FUNCNAME or FUNCADDR must be specified if   * 00037300
*                  the function routine name was not provided on the  * 00037400
*                  TYPE=ENTRY invocation corresponding to the entry   * 00037500
*                  being modified.  If neither FUNCNAME or FUNCADDR   * 00037600
*                  is specified, the function routine information     * 00037700
*                  (name or address) in the entry being modified is   * 00037800
*                  not changed.                                       * 00037900
*                                                                     * 00038000
*              [FUNCNAME(xfuncname)                                 * 00038100
*                  belongs to a set of mutually exclusive keys. It    * 00038200
*                  is the name (RS-type) of an optional 8 character   * 00038300
*                  input that defines the name of the function        * 00038400
*                  routine.  The function routine name must:          * 00038500
*                                                                     * 00038600
*                                                                     * 00038700
*                  o   Consist of no more than 8 characters,          * 00038800
*                                                                     * 00038900
*                  o   Be composed of characters from the alphabetic, * 00039000
*                      national, or numeric character sets,           * 00039100
*                                                                     * 00039200
*                  o   Begin with a character from either the         * 00039300
*                      alphabetic or national character sets,         * 00039400
*                                                                     * 00039500
*                  o   Be left justified and, if necessary, be padded * 00039600
*                      to the right with blanks.                      * 00039700
*                                                                     * 00039800
*                                                                     * 00039900
*                                                                     * 00040000
*              FUNCADDR(xfuncaddr)                                  * 00040100
*                  belongs to a set of mutually exclusive keys. It    * 00040200
*                  is the name (RS-type) of an optional  pointer      * 00040300
*                  input that contains the address of the function    * 00040400
*                  routine.  The high-order bit of the function       * 00040500
*                  routine address specified with the FUNCADDR key    * 00040600
*                  may be used to specify the function routine AMODE. * 00040700
*                  Setting the bit indicates that the routine is to   * 00040800
*                  receive control in AMODE 31; clearing it indicates * 00040900
*                  that the routine is to receive control in AMODE    * 00041000
*                  24.  (Since the LOAD service uses this convention, * 00041100
*                  addresses as returned by LOAD can be used as the   * 00041200
*                  argument of the FUNCADDR key.)  The FUNCAMODE key  * 00041300
*                  may also be used to indicate the AMODE of the      * 00041400
*                  function routine.                                  * 00041500
*                                                                     * 00041600
*                                                                     * 00041700
*                  [FUNCAMODE(HOB|31|24)]]                          * 00041800
*                      is an optional keyword input that specifies    * 00041900
*                      the AMODE of a function routine identified by  * 00042000
*                      address.  The SSI uses this information to     * 00042100
*                      determine the AMODE in which the function      * 00042200
*                      routine should receive control.                * 00042300
*                                                                     * 00042400
*                      If the FUNCAMODE key is not specified, the     * 00042500
*                      high-order bit of the address specified with   * 00042600
*                      the FUNCADDR key indicates the AMODE of the    * 00042700
*                      function routine.  If the high-order bit is    * 00042800
*                      on, the function routine will be treated as    * 00042900
*                      AMODE 31.                                      * 00043000
*                      DEFAULT: HOB                                   * 00043100
*                                                                     * 00043200
*                                                                     * 00043300
*                      HOB       The high-order bit of the function   * 00043400
*                                routine address indicates the AMODE  * 00043500
*                                in which the function routine is to  * 00043600
*                                receive control.                     * 00043700
*                                                                     * 00043800
*                      31        The function routine is to receive   * 00043900
*                                control in AMODE 31.                 * 00044000
*                                                                     * 00044100
*                      24        The function routine is to receive   * 00044200
*                                control in AMODE 24.                 * 00044300
*                                                                     * 00044400
*                                                                     * 00044500
*                                                                     * 00044600
*                                                                     * 00044700
*                                                                     * 00044800
*                                                                     * 00044900
*                                                                     * 00045000
*              End of a set of mutually exclusive optional keys.      * 00045100
*              DEFAULT: FUNCNAME                                      * 00045200
*                                                                     * 00045300
*                                                                     * 00045400
*                                                                     * 00045500
*              [FCODES(xfcodes[,xfcodes...]|0)]                     * 00045600
*                                                                     * 00045700
*                xfcodes                                              * 00045800
*                  is a group of name(s) (RS-type) of an optional     * 00045900
*                  byte input(s) that defines the function code(s)    * 00046000
*                  supported by the associated function routine.      * 00046100
*                  Function code values must be between 1 and 255,    * 00046200
*                  inclusive.  In an assembler invocation, the        * 00046300
*                  function codes must be numeric values or assembler * 00046400
*                  equates.  The same function code value cannot      * 00046500
*                  appear more than once within a set of IEFSSVTI     * 00046600
*                  invocations representing an input table.           * 00046700
*                                                                     * 00046800
*                  The FCODES key must be specified if the function   * 00046900
*                  code information was not provided on the           * 00047000
*                  TYPE=ENTRY invocation corresponding to the entry   * 00047100
*                  being modified.                                    * 00047200
*                                                                     * 00047300
*                  Function codes specified with TYPE=SET replace any * 00047400
*                  function codes specified on the original           * 00047500
*                  TYPE=ENTRY invocation.  If the FCODES keyword is   * 00047600
*                  not specified, the function code information in    * 00047700
*                  the entry being modified is unchanged.             * 00047800
*                                                                     * 00047900
*                  If the number of function codes specified with the * 00048000
*                  FCODES keyword is greater than the maximum number  * 00048100
*                  of function codes for which room was reserved in   * 00048200
*                  the table entry being modified, the function code  * 00048300
*                  information in the target entry is unchanged.      * 00048400
*                  Since this is an execution time determination, the * 00048500
*                  macro cannot provide a warning in this case.       * 00048600
*                  DEFAULT: 0                                         * 00048700
*                                                                     * 00048800
*                                                                     * 00048900
*                                                                     * 00049000
*           TYPE(RESERVE)                                             * 00049100
*              Reserve storage for a function routine input table.    * 00049200
*              Use this key to define the amount of dynamic storage   * 00049300
*              required to contain a copy of a static input table.    * 00049400
*              It creates a DS (assembler) or DCL (PL/X) instruction  * 00049500
*              that reserves the appropriate amount of dynamic        * 00049600
*              storage.  When coding in assembler, place the          * 00049700
*              TYPE=RESERVE macro invocation in a DSECT representing  * 00049800
*              the program's working storage.                         * 00049900
*                                                                     * 00050000
*                                                                     * 00050100
*              SSVTDATA(xssvtdata)                                    * 00050200
*                  is a required input.  It is the name of the        * 00050300
*                  function routine input table for which storage is  * 00050400
*                  to be reserved.                                    * 00050500
*                                                                     * 00050600
*                                                                     * 00050700
*                                                                     * 00050800
*                                                                     * 00050900
*              The following is a set of mutually exclusive keys.     * 00051000
*              This set is required; only one key must be specified.  * 00051100
*                                                                     * 00051200
*                                                                     * 00051300
*              TABLEN(xtablen)                                        * 00051400
*                  belongs to a set of mutually exclusive keys. It    * 00051500
*                  is an input.  It is the name of a constant         * 00051600
*                  (assembler equate) containing the length of the    * 00051700
*                  storage required by the function routine input     * 00051800
*                  table.  This should be the name of a constant      * 00051900
*                  specified by the TABLEN keyword on a previous      * 00052000
*                  TYPE=INITIAL invocation.  Use this keyword when    * 00052100
*                  reserving storage for a dynamic function routine   * 00052200
*                  input table that will be copied from another       * 00052300
*                  table.                                             * 00052400
*                                                                     * 00052500
*              MAXFCODES(xmaxfcodes)                                  * 00052600
*                  belongs to a set of mutually exclusive keys. It    * 00052700
*                  is an input.  It is the name of a PL/X constant,   * 00052800
*                  assembler equate, or decimal number specifying the * 00052900
*                  maximum number of function codes that will be      * 00053000
*                  supported by the entire function routine input     * 00053100
*                  table.  Use this key to reserve space for a        * 00053200
*                  dynamic input table when the specific function     * 00053300
*                  routines and function codes that will be supported * 00053400
*                  are not known at compile time.                     * 00053500
*                                                                     * 00053600
*                                                                     * 00053700
*                                                                     * 00053800
*              End of a set of mutually exclusive required keys.      * 00053900
*                                                                     * 00054000
*                                                                     * 00054100
*           TYPE(COPY)                                                * 00054200
*              Copy a function routine input table.  Use this key to  * 00054300
*              copy a static table to dynamic storage reserved with a * 00054400
*              TYPE=RESERVE invocation.                               * 00054500
*                                                                     * 00054600
*              The COPY operation destroys the contents of general    * 00054700
*              registers 0, 1, 14, and 15.                            * 00054800
*                                                                     * 00054900
*                                                                     * 00055000
*              SSVTDATA(xssvtdata)                                    * 00055100
*                  is a required input.  It is the name of the target * 00055200
*                  function routine input table (the destination for  * 00055300
*                  the copy).  The name must match the name of a      * 00055400
*                  table specified by the SSVTDATA key on a           * 00055500
*                  TYPE=RESERVE macro invocation.                     * 00055600
*                                                                     * 00055700
*              SOURCE(xsource)                                        * 00055800
*                  is a required input.  It is the name of the table  * 00055900
*                  to be copied.  The name must match the name of a   * 00056000
*                  table specified by the SSVTDATA key on an IEFSSVTI * 00056100
*                  TYPE=INITIAL or TYPE=RESERVE macro invocation.     * 00056200
*                                                                     * 00056300
*                                                                     * 00056400
*                                                                     * 00056500
*                                                                     * 00056600
*                                                                     * 00056700
*                                                                     * 00056800
*                                                                     * 00056900
*01* ABEND CODES:  None.                                              * 00057000
*                                                                     * 00057100
*01* RETURN CODES:  None.                                             * 00057200
*                                                                     * 00057300
*01* REASON CODES:  None.                                             * 00057400
*                                                                     * 00057500
*01* MODULE TYPE:  ASSEM-PL/AS MACRO                                  * 00057600
*                                                                     * 00057700
*02*   PROCESSOR:  ASSEM-PL/AS                                        * 00057800
*                                                                     * 00057900
*01* COMPONENT:  SC1B6                                                * 00058000
*                                                                     * 00058100
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00058200
*                                                                     * 00058300
*01* MACRO USAGE NOTES:                                               * 00058400
*                                                                     * 00058500
*                                                                     * 00058600
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00058700
*        global macro variable.  Any value other than 'NO' will       * 00058800
*        result in the macro expansion being printed.  The default is * 00058900
*        'YES'.  The following examples illustrate how the ZPRINT     * 00059000
*        variable should be set.                                      * 00059100
*                                                                     * 00059200
*                    GBLC &ZPRINT                                     * 00059300
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00059400
*                                                                     * 00059500
*    2.  A  set  of  IEFSSVTI invocations beginning with TYPE=INITIAL * 00059600
*        and  ending  with  TYPE=FINAL  may  contain some invocations * 00059700
*        specifying FUNCNAME and some specifying FUNCADDR.  The input * 00059800
*        table  does  not  have to identify all function routines the * 00059900
*        same way.                                                    * 00060000
*                                                                     * 00060100
*    3.  Usage scenarios                                              * 00060200
*                                                                     * 00060300
*                                                                     * 00060400
*        a.  All  information  known at compile time: create a static * 00060500
*            table using TYPE=INITIAL, TYPE=ENTRY, and TYPE=FINAL.    * 00060600
*                                                                     * 00060700
*        b.  Some information not known at compile time               * 00060800
*                                                                     * 00060900
*                                                                     * 00061000
*            o   Reentrant  programs:  create a static table, reserve * 00061100
*                storage  for  a dynamic table of the same size using * 00061200
*                TYPE=RESERVE,  copy  the static table to the dynamic * 00061300
*                table  using TYPE=COPY, and modify the dynamic table * 00061400
*                using TYPE=SET.                                      * 00061500
*                                                                     * 00061600
*            o   Non-reentrant  programs:  create  a static table and * 00061700
*                modify  it using TYPE=SET, or copy a static table to * 00061800
*                dynamic  storage  and modify the dynamic table using * 00061900
*                TYPE=SET.                                            * 00062000
*                                                                     * 00062100
*                                                                     * 00062200
*                                                                     * 00062300
*                                                                     * 00062400
*                                                                     * 00062500
*                                                                     * 00062600
*                                                                     * 00062700
*01* CHANGE ACTIVITY:                                                 * 00062800
*                                                                     * 00062900
*   Flag LineItem  FMID    Date   ID    Comment                       * 00063000
*                                                                     * 00063100
*    $L0=SSIDP    HBB5520 940210 PDBN:  Dynamic SSI                   * 00063200
*    $P1=PN70253  HBB5520 940310 PDBN:  Dynamic SSI                   * 00063300
*    $P2=PN70262  HBB5520 940310 PDBN:  Dynamic SSI                   * 00063400
*    $P3=PN70227  HBB5520 940310 PDBN:  Dynamic SSI                   * 00063500
*    $P4=PN70316  HBB5520 940414 PDBN:  Dynamic SSI                   * 00063600
*    $P5=PN70226  HBB5520 940414 PDBN:  Dynamic SSI                   * 00063700
****** END OF SPECIFICATIONS *****************************************/ 00063800
*/********************************************************************* 00063900
         MACRO                                                          00064000
&XLABEL  IEFSSVTI &TYPE=,&SSVTDATA=,&TABLEN=,&FUNCNAME=,&FUNCADDR=,    *00064100
               &NUMFCODES=,&FCODES=,&SOURCE=,&ENTRYDATA=,&FUNCAMODE=,  *00064200
               &MAXFCODES=                                              00064300
.*                                                                      00064400
*               MACDATE -94/04/14-<1>                                   00064500
.*                                                                      00064600
.*******************************************************************    00064700
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00064800
.*******************************************************************    00064900
               GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                  00065000
               GBLC  &ZTEST      YES=TEST NO=NO TEST                    00065100
               GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX            00065200
.*                                                                      00065300
               GBLC  &ZIEFSSVTI  YES=MACRO USED AT LEAST ONCE           00065400
.*******************************************************************    00065500
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00065600
.*******************************************************************    00065700
               LCLC  &ZMS        ERROR MESSAGE WORK AREA                00065800
               LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS           00065900
               LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED             00066000
               LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR            00066100
               LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE            00066200
               LCLA  &ZAWRK      USED AS A WORK AREA                    00066300
               LCLA  &ZASIZ      USED FOR SIZE OF VALUE                 00066400
               LCLA  &ZN         NUMERIC WORK VARIABLE                  00066500
               LCLC  &ZC         CHARACTER WORK VARIABLE                00066600
               LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE            00066700
               LCLA  &ZTLA       VALUE TOO LONG VARIABLE                00066800
               LCLA  &ZMACRET    MACRO RETURN CODE                      00066900
&ZMACRET       SETA  0           ASSUME NO ERRORS                       00067000
.*                                                                      00067100
               LCLC  &ZCSYSLIST(255)            NONXKEY, POS ARRAY      00067200
               LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()             00067300
               LCLA  &ZPLLEN     PARAMETER LIST LENGTH                  00067400
               LCLC  &ZENDBASEPL                End of base PL          00067500
.*******************************************************************    00067600
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00067700
.*******************************************************************    00067800
               LCLA  &ZI         INDEX FOR ARRAY                        00067900
               LCLA  &ZJ         INDEX FOR PARMS                        00068000
               LCLA  &ZK         INDEX FOR PARSE                        00068100
               LCLA  &ZLO        LOW RANGE VALUE                        00068200
               LCLA  &ZHI        HIGH RANGE VALUE                       00068300
               LCLC  &ZW         WORK AREA FOR PARM                     00068400
.*******************************************************************    00068500
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00068600
.*******************************************************************    00068700
               LCLC  &XTYPE      ++ VALUE                               00068800
               LCLC  &XSSVTDATA  ++ NAME                                00068900
               LCLC  &XTABLEN    ++ NAME                                00069000
               LCLC  &XFUNCRTN   ++ NAME                                00069100
               LCLC  &XFUNCNAME  ++ NAME                                00069200
               LCLC  &XFUNCADDR  ++ NAME                                00069300
               LCLC  &XNUMFCODES                ++ VALUE                00069400
               LCLC  &XFCODES(257)              ++ NAME                 00069500
               LCLC  &XSOURCE    ++ NAME                                00069600
               LCLC  &XENTRYDATA                ++ NAME                 00069700
               LCLC  &XFUNCAMODE                ++ VALUE                00069800
               LCLC  &XRESERVE_LEN              ++ NAME                 00069900
               LCLC  &XMAXFCODES                ++ NAME                 00070000
.*******************************************************************    00070100
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00070200
.*******************************************************************    00070300
               LCLC  &ZXTYPE     ++ INPUT VALUE                         00070400
               LCLC  &ZXSSVTDATA                ++ INPUT NAME           00070500
               LCLC  &ZXTABLEN   ++ INPUT NAME                          00070600
               LCLC  &ZXFUNCRTN  ++ INPUT NAME                          00070700
               LCLC  &ZXFUNCNAME                ++ INPUT NAME           00070800
               LCLC  &ZXFUNCADDR                ++ INPUT NAME           00070900
               LCLC  &ZXNUMFCODES               ++ INPUT VALUE          00071000
               LCLC  &ZXFCODES   ++ INPUT NAME                          00071100
               LCLC  &ZXSOURCE   ++ INPUT NAME                          00071200
               LCLC  &ZXENTRYDATA               ++ INPUT NAME           00071300
               LCLC  &ZXFUNCAMODE               ++ INPUT VALUE          00071400
               LCLC  &ZXRESERVE_LEN             ++ INPUT NAME           00071500
               LCLC  &ZXMAXFCODES               ++ INPUT NAME           00071600
.********************************************************************   00071700
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00071800
.********************************************************************   00071900
               ACTR  10000                                              00072000
.*------------------------------------------------------------------    00072100
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00072200
&XTYPE         SETC  ''          INITIALIZE XVARIABLE                   00072300
.*-------------------------------------------------------------------   00072400
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00072500
.ZG3           ANOP  ,                                                  00072600
               AIF   (K'&TYPE(1) LE 0).ZG3A                             00072700
&ZTLC          SETC 'LIST'                                              00072800
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG4                        00072900
&XTYPE         SETC  'LIST'      SET KEYWORD                            00073000
               AIF   (N'&TYPE LE 1).ZG3A        CK NUM                  00073100
&ZMS           SETC  '"TYPE='    *KPOSA* MNOTE                          00073200
&ZMS           SETC  '&ZMS.&TYPE"'                                      00073300
&ZMS           SETC  '&ZMS "TYPE"'                                      00073400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00073500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00073600
.ZG3A          ANOP  ,                                                  00073700
.*------------------------------------------------------------------    00073800
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00073900
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00074000
.ZG3A0         AIF   (K'&SSVTDATA LE 0).ZG3A1   OK                      00074100
&ZCVAL         SETC '&ZCVAL SSVTDATA'           INCORRECT KEY USED      00074200
.ZG3A1         AIF   (K'&TABLEN LE 0).ZG3A2     OK                      00074300
&ZCVAL         SETC '&ZCVAL TABLEN'             INCORRECT KEY USED      00074400
.ZG3A2         AIF   (K'&FUNCNAME LE 0).ZG3A3   OK                      00074500
&ZCVAL         SETC '&ZCVAL FUNCNAME'           INCORRECT KEY USED      00074600
.ZG3A3         AIF   (K'&FUNCADDR LE 0).ZG3A4   OK                      00074700
&ZCVAL         SETC '&ZCVAL FUNCADDR'           INCORRECT KEY USED      00074800
.ZG3A4         AIF   (K'&NUMFCODES LE 0).ZG3A5  OK                      00074900
&ZCVAL         SETC '&ZCVAL NUMFCODES'          INCORRECT KEY USED      00075000
.ZG3A5         AIF   (K'&FCODES LE 0).ZG3A6     OK                      00075100
&ZCVAL         SETC '&ZCVAL FCODES'             INCORRECT KEY USED      00075200
.ZG3A6         AIF   (K'&SOURCE LE 0).ZG3A7     OK                      00075300
&ZCVAL         SETC '&ZCVAL SOURCE'             INCORRECT KEY USED      00075400
.ZG3A7         AIF   (K'&ENTRYDATA LE 0).ZG3A8  OK                      00075500
&ZCVAL         SETC '&ZCVAL ENTRYDATA'          INCORRECT KEY USED      00075600
.ZG3A8         AIF   (K'&FUNCAMODE LE 0).ZG3A9  OK                      00075700
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          INCORRECT KEY USED      00075800
.ZG3A9         AIF   (K'&MAXFCODES LE 0).ZG3A10  OK                     00075900
&ZCVAL         SETC '&ZCVAL MAXFCODES'          INCORRECT KEY USED      00076000
.ZG3A10        AIF   (K'&ZCVAL LE 0).ZG3A11     OK                      00076100
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00076200
&ZMS           SETC  '"TYPE'     *KMEIA* MNOTE                          00076300
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00076400
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00076500
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00076600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00076700
.ZG3A11        ANOP  ,                                                  00076800
.*-------------------------------------------------------------------   00076900
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00077000
.ZG4           ANOP  ,                                                  00077100
&ZTLC          SETC 'INITIAL'                                           00077200
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG11                       00077300
&XTYPE         SETC  'INITIAL'   SET KEYWORD                            00077400
               AIF   (N'&TYPE LE 1).ZG4A        CK NUM                  00077500
&ZMS           SETC  '"TYPE='    *KPOSA* MNOTE                          00077600
&ZMS           SETC  '&ZMS.&TYPE"'                                      00077700
&ZMS           SETC  '&ZMS "TYPE"'                                      00077800
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00077900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00078000
.ZG4A          ANOP  ,                                                  00078100
.*------------------------------------------------------------------    00078200
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00078300
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00078400
.ZG4A0         AIF   (K'&FUNCNAME LE 0).ZG4A1   OK                      00078500
&ZCVAL         SETC '&ZCVAL FUNCNAME'           INCORRECT KEY USED      00078600
.ZG4A1         AIF   (K'&FUNCADDR LE 0).ZG4A2   OK                      00078700
&ZCVAL         SETC '&ZCVAL FUNCADDR'           INCORRECT KEY USED      00078800
.ZG4A2         AIF   (K'&NUMFCODES LE 0).ZG4A3  OK                      00078900
&ZCVAL         SETC '&ZCVAL NUMFCODES'          INCORRECT KEY USED      00079000
.ZG4A3         AIF   (K'&FCODES LE 0).ZG4A4     OK                      00079100
&ZCVAL         SETC '&ZCVAL FCODES'             INCORRECT KEY USED      00079200
.ZG4A4         AIF   (K'&SOURCE LE 0).ZG4A5     OK                      00079300
&ZCVAL         SETC '&ZCVAL SOURCE'             INCORRECT KEY USED      00079400
.ZG4A5         AIF   (K'&ENTRYDATA LE 0).ZG4A6  OK                      00079500
&ZCVAL         SETC '&ZCVAL ENTRYDATA'          INCORRECT KEY USED      00079600
.ZG4A6         AIF   (K'&FUNCAMODE LE 0).ZG4A7  OK                      00079700
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          INCORRECT KEY USED      00079800
.ZG4A7         AIF   (K'&MAXFCODES LE 0).ZG4A8  OK                      00079900
&ZCVAL         SETC '&ZCVAL MAXFCODES'          INCORRECT KEY USED      00080000
.ZG4A8         AIF   (K'&ZCVAL LE 0).ZG4A9      OK                      00080100
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00080200
&ZMS           SETC  '"TYPE'     *KMEIA* MNOTE                          00080300
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00080400
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00080500
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00080600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00080700
.ZG4A9         ANOP  ,                                                  00080800
.*----------------------------------------------------------------***   00080900
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00081000
               AIF   (N'&SSVTDATA LE 1).ZG6A    CK NUM                  00081100
&ZMS           SETC  '"SSVTDATA='               *KPOSA* MNOTE           00081200
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00081300
&ZMS           SETC  '&ZMS "SSVTDATA"'                                  00081400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00081500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00081600
.ZG6A          ANOP  ,                                                  00081700
.*-------------------------------------------------------------------   00081800
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00081900
&ZXSSVTDATA    SETC  'INPUT'     SET IN/OUTPUT                          00082000
&XSSVTDATA     SETC  '&SSVTDATA(1)'             SET XVARIABLE           00082100
               AIF   (N'&SSVTDATA GT 1).ZG6B    MULTI PARMS             00082200
&XSSVTDATA     SETC  '&SSVTDATA'                SET XVARIABLE           00082300
.ZG6B          AIF   (K'&SSVTDATA(1) GT 0).ZG6C                         00082400
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00082500
&ZMS           SETC  ' '         *KRQDA*                                00082600
&ZMS           SETC  '&ZMS "SSVTDATA" KEY AND ITS ARGUMENT'             00082700
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00082800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00082900
.ZG6C          ANOP  ,                                                  00083000
.*-------------------------------------------------------------------   00083100
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00083200
               AIF   (K'&ZXSSVTDATA LE 0).ZG6P  NOT I/O                 00083300
               AIF   ('&XSSVTDATA'(1,1) NE '(').ZG6P                    00083400
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00083500
&ZMS           SETC  '"SSVTDATA='               *KGPRA* MNOTE           00083600
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00083700
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00083800
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00083900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00084000
.ZG6P          ANOP  ,                                                  00084100
.*----------------------------------------------------------------***   00084200
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00084300
               AIF   (N'&TABLEN LE 1).ZG9A      CK NUM                  00084400
&ZMS           SETC  '"TABLEN='  *KPOSA* MNOTE                          00084500
&ZMS           SETC  '&ZMS.&TABLEN"'                                    00084600
&ZMS           SETC  '&ZMS "TABLEN"'                                    00084700
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00084800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00084900
.ZG9A          ANOP  ,                                                  00085000
.*-------------------------------------------------------------------   00085100
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00085200
&ZXTABLEN      SETC  'INPUT'     SET IN/OUTPUT                          00085300
&XTABLEN       SETC  '&TABLEN(1)'               SET XVARIABLE           00085400
               AIF   (N'&TABLEN GT 1).ZG9B      MULTI PARMS             00085500
&XTABLEN       SETC  '&TABLEN'   SET XVARIABLE                          00085600
.ZG9B          AIF   (K'&TABLEN(1) GT 0).ZG9C                           00085700
&ZXTABLEN      SETC  ''          RESET IN/OUTPUT                        00085800
&ZMS           SETC  ' '         *KRQDA*                                00085900
&ZMS           SETC  '&ZMS "TABLEN" KEY AND ITS ARGUMENT'               00086000
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00086100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00086200
.ZG9C          ANOP  ,                                                  00086300
.*-------------------------------------------------------------------   00086400
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00086500
               AIF   (K'&ZXTABLEN LE 0).ZG9P    NOT I/O                 00086600
               AIF   ('&XTABLEN'(1,1) NE '(').ZG9P                      00086700
&ZXTABLEN      SETC  ''          RESET IN/OUTPUT                        00086800
&ZMS           SETC  '"TABLEN='  *KGPRA* MNOTE                          00086900
&ZMS           SETC  '&ZMS.&TABLEN"'                                    00087000
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00087100
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00087200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00087300
.ZG9P          ANOP  ,                                                  00087400
.*-------------------------------------------------------------------   00087500
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00087600
.ZG11          ANOP  ,                                                  00087700
&ZTLC          SETC 'ENTRY'                                             00087800
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG22                       00087900
&XTYPE         SETC  'ENTRY'     SET KEYWORD                            00088000
               AIF   (N'&TYPE LE 1).ZG11A       CK NUM                  00088100
&ZMS           SETC  '"TYPE='    *KPOSA* MNOTE                          00088200
&ZMS           SETC  '&ZMS.&TYPE"'                                      00088300
&ZMS           SETC  '&ZMS "TYPE"'                                      00088400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00088500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00088600
.ZG11A         ANOP  ,                                                  00088700
.*------------------------------------------------------------------    00088800
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00088900
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00089000
.ZG11A0        AIF   (K'&SSVTDATA LE 0).ZG11A1  OK                      00089100
&ZCVAL         SETC '&ZCVAL SSVTDATA'           INCORRECT KEY USED      00089200
.ZG11A1        AIF   (K'&TABLEN LE 0).ZG11A2    OK                      00089300
&ZCVAL         SETC '&ZCVAL TABLEN'             INCORRECT KEY USED      00089400
.ZG11A2        AIF   (K'&SOURCE LE 0).ZG11A3    OK                      00089500
&ZCVAL         SETC '&ZCVAL SOURCE'             INCORRECT KEY USED      00089600
.ZG11A3        AIF   (K'&ENTRYDATA LE 0).ZG11A4  OK                     00089700
&ZCVAL         SETC '&ZCVAL ENTRYDATA'          INCORRECT KEY USED      00089800
.ZG11A4        AIF   (K'&FUNCAMODE LE 0).ZG11A5  OK                     00089900
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          INCORRECT KEY USED      00090000
.ZG11A5        AIF   (K'&MAXFCODES LE 0).ZG11A6  OK                     00090100
&ZCVAL         SETC '&ZCVAL MAXFCODES'          INCORRECT KEY USED      00090200
.ZG11A6        AIF   (K'&ZCVAL LE 0).ZG11A7     OK                      00090300
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00090400
&ZMS           SETC  '"TYPE'     *KMEIA* MNOTE                          00090500
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00090600
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00090700
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00090800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00090900
.ZG11A7        ANOP  ,                                                  00091000
.*----------------------------------------------------------------***   00091100
.***AG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00091200
&XFUNCRTN      SETC  ''          INITIALIZE XVARIABLE                   00091300
               AIF   (K'&FUNCNAME LE 0).ZG13C                           00091400
&ZXFUNCRTN     SETC  'INPUT'     SET IN/OUTPUT                          00091500
&XFUNCRTN      SETC  'FUNCNAME'  SET XVARIABLE                          00091600
&ZXFUNCNAME    SETC  'INPUT'     SET IN/OUTPUT                          00091700
&XFUNCNAME     SETC  '&FUNCNAME(1)'             SET XVARIABLE PARM      00091800
               AIF   (N'&FUNCNAME GT 1).ZG13A   MULTIPLE PARMS          00091900
&XFUNCNAME     SETC  '&FUNCNAME'                SET XVARIABLE PARM      00092000
.ZG13A         AIF   (N'&FUNCNAME LE 1).ZG13B   CK NUM                  00092100
&ZMS           SETC  '"FUNCNAME='               *KPOSA* MNOTE           00092200
&ZMS           SETC  '&ZMS.&FUNCNAME"'                                  00092300
&ZMS           SETC  '&ZMS "FUNCNAME"'                                  00092400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00092500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00092600
.ZG13B         AIF   (K'&XFUNCNAME GT 0).ZG13C  ONE PARM                00092700
&ZXFUNCRTN     SETC  ''          RESET IN/OUTPUT                        00092800
&ZXFUNCNAME    SETC  ''          RESET IN/OUTPUT                        00092900
&ZMS           SETC  'WHEN "ENTRY" IS SPECIFIED'  *KRQDA*               00093000
&ZMS           SETC  '&ZMS , "FUNCNAME" KEY AND ITS ARGUMENT'           00093100
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00093200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00093300
.ZG13C         ANOP  ,                                                  00093400
.*----------------------------------------------------------------***   00093500
.***AG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00093600
               AIF   (K'&FUNCADDR LE 0).ZG14D   NO ME KEY               00093700
               AIF   (N'&FUNCADDR LE 1).ZG14A   CK NUM                  00093800
&ZMS           SETC  '"FUNCADDR='               *KPOSA* MNOTE           00093900
&ZMS           SETC  '&ZMS.&FUNCADDR"'                                  00094000
&ZMS           SETC  '&ZMS "FUNCADDR"'                                  00094100
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00094200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00094300
.ZG14A         AIF   (K'&XFUNCRTN LE 0).ZG14B                           00094400
&ZMS           SETC  '"FUNCADDR'                *KMEKA* MNOTE           00094500
&ZMS           SETC  '&ZMS.=&FUNCADDR"'                                 00094600
&ZMS           SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'              00094700
&ZMS           SETC  '&ZMS "&XFUNCRTN"'                                 00094800
               MNOTE 8,' &ZMS KEY.'                                     00094900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00095000
               AGO   .ZG14D                                             00095100
.*                                                                      00095200
.ZG14B         ANOP  ,                                                  00095300
&ZXFUNCRTN     SETC  'INPUT'     SET IN/OUTPUT                          00095400
&XFUNCRTN      SETC  'FUNCADDR'  SET XVARIABLE                          00095500
&ZXFUNCADDR    SETC  'INPUT'     SET IN/OUTPUT                          00095600
&XFUNCADDR     SETC  '&FUNCADDR(1)'             SET XVARIABLE PARM      00095700
               AIF   (N'&FUNCADDR GT 1).ZG14C   MULTIPLE PARMS          00095800
&XFUNCADDR     SETC  '&FUNCADDR'                SET XVARIABLE PARM      00095900
.ZG14C         AIF   (K'&XFUNCADDR GT 0).ZG14D  ONE PARM                00096000
&ZXFUNCRTN     SETC  ''          RESET IN/OUTPUT                        00096100
&ZXFUNCADDR    SETC  ''          RESET IN/OUTPUT                        00096200
&ZMS           SETC  'WHEN "ENTRY" IS SPECIFIED'  *KRQDA*               00096300
&ZMS           SETC  '&ZMS , "FUNCADDR" KEY AND ITS ARGUMENT'           00096400
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00096500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00096600
.ZG14D         ANOP  ,                                                  00096700
.*------------------------------------------------------------------    00096800
.***AG.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED           00096900
               AIF   (K'&XFUNCRTN GT 0).ZG15B                           00097000
&ZXFUNCRTN     SETC  'INPUT'     SET IN/OUTPUT                          00097100
&XFUNCRTN      SETC  'FUNCNAME'  SET DEFAULT                            00097200
&ZXFUNCNAME    SETC  'INPUT'     SET IN/OUTPUT                          00097300
&XFUNCNAME     SETC  '0'         SET DEFAULT PARM                       00097400
.ZG15B         ANOP  ,                                                  00097500
.*-------------------------------------------------------------------   00097600
.***AG.KCK01 NAME, OPT INPUT, ME KEYS -GPR NOT ALLOWED                  00097700
               AIF   (K'&ZXFUNCADDR LE 0).ZG15P  NOT I/O                00097800
               AIF   ('&XFUNCADDR'(1,1) NE '(').ZG15P                   00097900
&ZXFUNCADDR    SETC  ''          RESET IN/OUTPUT                        00098000
&ZMS           SETC  '"FUNCADDR='               *KGPRA* MNOTE           00098100
&ZMS           SETC  '&ZMS.&FUNCADDR"'                                  00098200
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00098300
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00098400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00098500
.ZG15P         ANOP  ,                                                  00098600
.*-------------------------------------------------------------------   00098700
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00098800
.ZG13          AIF   ('&XFUNCRTN' NE 'FUNCNAME').ZG14                   00098900
.*-------------------------------------------------------------------   00099000
.***AG.KCK01 NAME, OPT INPUT, ME KEYS -GPR NOT ALLOWED                  00099100
               AIF   (K'&ZXFUNCNAME LE 0).ZG13P  NOT I/O                00099200
               AIF   ('&XFUNCNAME'(1,1) NE '(').ZG13P                   00099300
&ZXFUNCNAME    SETC  ''          RESET IN/OUTPUT                        00099400
&ZMS           SETC  '"FUNCNAME='               *KGPRA* MNOTE           00099500
&ZMS           SETC  '&ZMS.&FUNCNAME"'                                  00099600
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00099700
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00099800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00099900
.ZG13P         ANOP  ,                                                  00100000
.*-------------------------------------------------------------------   00100100
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00100200
.ZG14          AIF   ('&XFUNCRTN' NE 'FUNCADDR').ZG15                   00100300
.*-------------------------------------------------------------------   00100400
.***AG.KCK01 NAME, OPT INPUT, ME KEYS -GPR NOT ALLOWED                  00100500
               AIF   (K'&ZXFUNCADDR LE 0).ZG14P  NOT I/O                00100600
               AIF   ('&XFUNCADDR'(1,1) NE '(').ZG14P                   00100700
&ZXFUNCADDR    SETC  ''          RESET IN/OUTPUT                        00100800
&ZMS           SETC  '"FUNCADDR='               *KGPRA* MNOTE           00100900
&ZMS           SETC  '&ZMS.&FUNCADDR"'                                  00101000
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00101100
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00101200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00101300
.ZG14P         ANOP  ,                                                  00101400
.*-------------------------------------------------------------------   00101500
.***AG.KMEKY15 NAME, OPT INPUT, ME KEYS -END                            00101600
.ZG15          ANOP  ,           END MUTUALLY EXCLUSIVE KEYS            00101700
.*----------------------------------------------------------------***   00101800
.***AG.KXVAR05 VALUE, RQD INPUT, KEYS -XVARIABLE KEY                    00101900
               AIF   (N'&NUMFCODES LE 1).ZG17A  CK NUM                  00102000
&ZMS           SETC  '"NUMFCODES='              *KPOSA* MNOTE           00102100
&ZMS           SETC  '&ZMS.&NUMFCODES"'                                 00102200
&ZMS           SETC  '&ZMS "NUMFCODES"'                                 00102300
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00102400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00102500
.ZG17A         ANOP  ,                                                  00102600
.*-------------------------------------------------------------------   00102700
.***AG.KXVAR06 VALUE, RQD INPUT, KEYS -XVARIABLE                        00102800
&ZXNUMFCODES   SETC  'INPUT'     SET IN/OUTPUT                          00102900
&XNUMFCODES    SETC  '&NUMFCODES(1)'            SET XVARIABLE           00103000
               AIF   (N'&NUMFCODES GT 1).ZG17B  MULTI PARMS             00103100
&XNUMFCODES    SETC  '&NUMFCODES'               SET XVARIABLE           00103200
.ZG17B         AIF   (K'&NUMFCODES(1) GT 0).ZG17C                       00103300
&ZXNUMFCODES   SETC  ''          RESET IN/OUTPUT                        00103400
&ZMS           SETC  ' '         *KRQDA*                                00103500
&ZMS           SETC  '&ZMS "NUMFCODES" KEY AND ITS ARGUMENT'            00103600
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00103700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00103800
.ZG17C         ANOP  ,                                                  00103900
.*-------------------------------------------------------------------   00104000
.***AG.KCK01 VALUE, RQD INPUT, KEYS -GPR NOT ALLOWED                    00104100
               AIF   (K'&ZXNUMFCODES LE 0).ZG17P  NOT I/O               00104200
               AIF   ('&XNUMFCODES'(1,1) NE '(').ZG17P                  00104300
&ZXNUMFCODES   SETC  ''          RESET IN/OUTPUT                        00104400
&ZMS           SETC  '"NUMFCODES='              *KGPRA* MNOTE           00104500
&ZMS           SETC  '&ZMS.&NUMFCODES"'                                 00104600
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00104700
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00104800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00104900
.ZG17P         ANOP  ,                                                  00105000
.*-------------------------------------------------------------------   00105100
.***AG.KCK07 VALUE, RQD INPUT, KEYS -KMG RANGE                          00105200
               AIF   (K'&ZXNUMFCODES LE 0).ZG17T  NOT I/O               00105300
               AIF   ('&XNUMFCODES'(1,1) EQ '(').ZG17T  IN GPR          00105400
               AIF   (T'&XNUMFCODES NE 'N').ZG17S  NUMERIC ERR          00105500
&ZASIZ         SETA  &XNUMFCODES                CONVERT                 00105600
               AIF   (&ZASIZ LT 1).ZG17S        TOO LOW                 00105700
               AIF   (&ZASIZ LE 255).ZG17T      NOT HIGH                00105800
.ZG17S         ANOP  ,                                                  00105900
&ZXNUMFCODES   SETC  ''          RESET IN/OUTPUT                        00106000
&ZMS           SETC  '"NUMFCODES='              *KRNGA* MNOTE           00106100
&ZMS           SETC  '&ZMS.&NUMFCODES"'                                 00106200
&ZMS           SETC  '&ZMS THE RANGE IS "1-255"'                        00106300
               MNOTE 8,' &ZMS FOR ARGUMENT 1.'                          00106400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00106500
.ZG17T         ANOP  ,                                                  00106600
.*----------------------------------------------------------------***   00106700
.***AG.KXVAR15 NAME, OPT INPUT, KEYS -MULTIPLE ARGUMENTS                00106800
&ZXFCODES      SETC  'INPUT'     SET IN/OUTPUT                          00106900
&ZI            SETA  0           ARRAY INDEX                            00107000
&ZJ            SETA  0           PARM INDEX                             00107100
               AIF   (N'&FCODES LE 0).ZG20C     NO PARMS                00107200
.ZG20A         ANOP  ,           LOOP TO GET PARMS                      00107300
&ZJ            SETA  &ZJ+1       NEXT PARM                              00107400
               AIF   (&ZJ GT N'&FCODES).ZG20B   DONE                    00107500
               AIF   (K'&FCODES(&ZJ) LE 0).ZG20A  NULL                  00107600
&ZI            SETA  &ZI+1       NEXT ARRAY ENTRY                       00107700
&XFCODES(&ZI)  SETC  '&FCODES(&ZJ)'             SET ARRAY ENTRY         00107800
               AGO   .ZG20A                                             00107900
.*                                                                      00108000
.ZG20B         ANOP  ,                                                  00108100
&ZI            SETA  &ZI+1       NEXT ARRAY ENTRY                       00108200
&XFCODES(&ZI)  SETC  ''          NULL AT ARRAY END                      00108300
               AIF   (&ZI GT 1).ZG20D           PARMS                   00108400
.ZG20C         ANOP  ,                                                  00108500
&XFCODES(1)    SETC  '0'         SET DEFAULT                            00108600
&XFCODES(2)    SETC  ''          NULL AT ARRAY END                      00108700
.ZG20D         ANOP  ,                                                  00108800
.*-------------------------------------------------------------------   00108900
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00109000
.ZG22          ANOP  ,                                                  00109100
&ZTLC          SETC 'FINAL'                                             00109200
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG23                       00109300
&XTYPE         SETC  'FINAL'     SET KEYWORD                            00109400
               AIF   (N'&TYPE LE 1).ZG22A       CK NUM                  00109500
&ZMS           SETC  '"TYPE='    *KPOSA* MNOTE                          00109600
&ZMS           SETC  '&ZMS.&TYPE"'                                      00109700
&ZMS           SETC  '&ZMS "TYPE"'                                      00109800
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00109900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00110000
.ZG22A         ANOP  ,                                                  00110100
.*------------------------------------------------------------------    00110200
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00110300
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00110400
.ZG22A0        AIF   (K'&SSVTDATA LE 0).ZG22A1  OK                      00110500
&ZCVAL         SETC '&ZCVAL SSVTDATA'           INCORRECT KEY USED      00110600
.ZG22A1        AIF   (K'&TABLEN LE 0).ZG22A2    OK                      00110700
&ZCVAL         SETC '&ZCVAL TABLEN'             INCORRECT KEY USED      00110800
.ZG22A2        AIF   (K'&FUNCNAME LE 0).ZG22A3  OK                      00110900
&ZCVAL         SETC '&ZCVAL FUNCNAME'           INCORRECT KEY USED      00111000
.ZG22A3        AIF   (K'&FUNCADDR LE 0).ZG22A4  OK                      00111100
&ZCVAL         SETC '&ZCVAL FUNCADDR'           INCORRECT KEY USED      00111200
.ZG22A4        AIF   (K'&NUMFCODES LE 0).ZG22A5  OK                     00111300
&ZCVAL         SETC '&ZCVAL NUMFCODES'          INCORRECT KEY USED      00111400
.ZG22A5        AIF   (K'&FCODES LE 0).ZG22A6    OK                      00111500
&ZCVAL         SETC '&ZCVAL FCODES'             INCORRECT KEY USED      00111600
.ZG22A6        AIF   (K'&SOURCE LE 0).ZG22A7    OK                      00111700
&ZCVAL         SETC '&ZCVAL SOURCE'             INCORRECT KEY USED      00111800
.ZG22A7        AIF   (K'&ENTRYDATA LE 0).ZG22A8  OK                     00111900
&ZCVAL         SETC '&ZCVAL ENTRYDATA'          INCORRECT KEY USED      00112000
.ZG22A8        AIF   (K'&FUNCAMODE LE 0).ZG22A9  OK                     00112100
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          INCORRECT KEY USED      00112200
.ZG22A9        AIF   (K'&MAXFCODES LE 0).ZG22A10  OK                    00112300
&ZCVAL         SETC '&ZCVAL MAXFCODES'          INCORRECT KEY USED      00112400
.ZG22A10       AIF   (K'&ZCVAL LE 0).ZG22A11    OK                      00112500
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00112600
&ZMS           SETC  '"TYPE'     *KMEIA* MNOTE                          00112700
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00112800
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00112900
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00113000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00113100
.ZG22A11       ANOP  ,                                                  00113200
.*-------------------------------------------------------------------   00113300
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00113400
.ZG23          ANOP  ,                                                  00113500
&ZTLC          SETC 'SET'                                               00113600
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG46                       00113700
&XTYPE         SETC  'SET'       SET KEYWORD                            00113800
               AIF   (N'&TYPE LE 1).ZG23A       CK NUM                  00113900
&ZMS           SETC  '"TYPE='    *KPOSA* MNOTE                          00114000
&ZMS           SETC  '&ZMS.&TYPE"'                                      00114100
&ZMS           SETC  '&ZMS "TYPE"'                                      00114200
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00114300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00114400
.ZG23A         ANOP  ,                                                  00114500
.*------------------------------------------------------------------    00114600
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00114700
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00114800
.ZG23A0        AIF   (K'&TABLEN LE 0).ZG23A1    OK                      00114900
&ZCVAL         SETC '&ZCVAL TABLEN'             INCORRECT KEY USED      00115000
.ZG23A1        AIF   (K'&NUMFCODES LE 0).ZG23A2  OK                     00115100
&ZCVAL         SETC '&ZCVAL NUMFCODES'          INCORRECT KEY USED      00115200
.ZG23A2        AIF   (K'&MAXFCODES LE 0).ZG23A3  OK                     00115300
&ZCVAL         SETC '&ZCVAL MAXFCODES'          INCORRECT KEY USED      00115400
.ZG23A3        AIF   (K'&ZCVAL LE 0).ZG23A4     OK                      00115500
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00115600
&ZMS           SETC  '"TYPE'     *KMEIA* MNOTE                          00115700
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00115800
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00115900
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00116000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00116100
.ZG23A4        ANOP  ,                                                  00116200
.*----------------------------------------------------------------***   00116300
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00116400
               AIF   (N'&SSVTDATA LE 1).ZG25A   CK NUM                  00116500
&ZMS           SETC  '"SSVTDATA='               *KPOSA* MNOTE           00116600
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00116700
&ZMS           SETC  '&ZMS "SSVTDATA"'                                  00116800
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00116900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00117000
.ZG25A         ANOP  ,                                                  00117100
.*-------------------------------------------------------------------   00117200
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00117300
&ZXSSVTDATA    SETC  'INPUT'     SET IN/OUTPUT                          00117400
&XSSVTDATA     SETC  '&SSVTDATA(1)'             SET XVARIABLE           00117500
               AIF   (N'&SSVTDATA GT 1).ZG25B   MULTI PARMS             00117600
&XSSVTDATA     SETC  '&SSVTDATA'                SET XVARIABLE           00117700
.ZG25B         AIF   (K'&SSVTDATA(1) GT 0).ZG25C                        00117800
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00117900
&ZMS           SETC  ' '         *KRQDA*                                00118000
&ZMS           SETC  '&ZMS "SSVTDATA" KEY AND ITS ARGUMENT'             00118100
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00118200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00118300
.ZG25C         ANOP  ,                                                  00118400
.*-------------------------------------------------------------------   00118500
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00118600
               AIF   (K'&ZXSSVTDATA LE 0).ZG25P  NOT I/O                00118700
               AIF   ('&XSSVTDATA'(1,1) NE '(').ZG25P                   00118800
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00118900
&ZMS           SETC  '"SSVTDATA='               *KGPRA* MNOTE           00119000
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00119100
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00119200
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00119300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00119400
.ZG25P         ANOP  ,                                                  00119500
.*----------------------------------------------------------------***   00119600
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00119700
               AIF   (N'&SOURCE LE 1).ZG28A     CK NUM                  00119800
&ZMS           SETC  '"SOURCE='  *KPOSA* MNOTE                          00119900
&ZMS           SETC  '&ZMS.&SOURCE"'                                    00120000
&ZMS           SETC  '&ZMS "SOURCE"'                                    00120100
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00120200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00120300
.ZG28A         ANOP  ,                                                  00120400
.*-------------------------------------------------------------------   00120500
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00120600
&ZXSOURCE      SETC  'INPUT'     SET IN/OUTPUT                          00120700
&XSOURCE       SETC  '&SOURCE(1)'               SET XVARIABLE           00120800
               AIF   (N'&SOURCE GT 1).ZG28B     MULTI PARMS             00120900
&XSOURCE       SETC  '&SOURCE'   SET XVARIABLE                          00121000
.ZG28B         AIF   (K'&SOURCE(1) GT 0).ZG28C                          00121100
&ZXSOURCE      SETC  ''          RESET IN/OUTPUT                        00121200
&ZMS           SETC  ' '         *KRQDA*                                00121300
&ZMS           SETC  '&ZMS "SOURCE" KEY AND ITS ARGUMENT'               00121400
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00121500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00121600
.ZG28C         ANOP  ,                                                  00121700
.*-------------------------------------------------------------------   00121800
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00121900
               AIF   (K'&ZXSOURCE LE 0).ZG28P   NOT I/O                 00122000
               AIF   ('&XSOURCE'(1,1) NE '(').ZG28P                     00122100
&ZXSOURCE      SETC  ''          RESET IN/OUTPUT                        00122200
&ZMS           SETC  '"SOURCE='  *KGPRA* MNOTE                          00122300
&ZMS           SETC  '&ZMS.&SOURCE"'                                    00122400
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00122500
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00122600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00122700
.ZG28P         ANOP  ,                                                  00122800
.*----------------------------------------------------------------***   00122900
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00123000
               AIF   (N'&ENTRYDATA LE 1).ZG31A  CK NUM                  00123100
&ZMS           SETC  '"ENTRYDATA='              *KPOSA* MNOTE           00123200
&ZMS           SETC  '&ZMS.&ENTRYDATA"'                                 00123300
&ZMS           SETC  '&ZMS "ENTRYDATA"'                                 00123400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00123500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00123600
.ZG31A         ANOP  ,                                                  00123700
.*-------------------------------------------------------------------   00123800
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00123900
&ZXENTRYDATA   SETC  'INPUT'     SET IN/OUTPUT                          00124000
&XENTRYDATA    SETC  '&ENTRYDATA(1)'            SET XVARIABLE           00124100
               AIF   (N'&ENTRYDATA GT 1).ZG31B  MULTI PARMS             00124200
&XENTRYDATA    SETC  '&ENTRYDATA'               SET XVARIABLE           00124300
.ZG31B         AIF   (K'&ENTRYDATA(1) GT 0).ZG31C                       00124400
&ZXENTRYDATA   SETC  ''          RESET IN/OUTPUT                        00124500
&ZMS           SETC  ' '         *KRQDA*                                00124600
&ZMS           SETC  '&ZMS "ENTRYDATA" KEY AND ITS ARGUMENT'            00124700
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00124800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00124900
.ZG31C         ANOP  ,                                                  00125000
.*-------------------------------------------------------------------   00125100
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00125200
               AIF   (K'&ZXENTRYDATA LE 0).ZG31R  NOT I/O               00125300
               AIF   ('&XENTRYDATA'(1,1) NE '(').ZG31R                  00125400
&ZCGPR         SETC  '&XENTRYDATA'(2,K'&XENTRYDATA-2)                   00125500
               AIF   ('&ZCGPR'(1,1) NE '0').ZG31P                       00125600
               AIF   (K'&ZCGPR GT 2).ZG31Q                              00125700
               AIF   ('&ZCGPR' EQ '0').ZG31Q                            00125800
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00125900
               AIF   (T'&ZCGPR NE 'N').ZG31Q    INVALID REG NAME        00126000
.ZG31P         ANOP  ,                                                  00126100
               AIF   (T'&ZCGPR NE 'N').ZG31R    NON NUMERIC             00126200
               AIF   ('&ZCGPR' LT '2').ZG31Q                            00126300
               AIF   ('&ZCGPR' LE '12').ZG31R                           00126400
.ZG31Q         ANOP  ,                                                  00126500
&ZMS           SETC  '"ENTRYDATA='              *KGPRA* MNOTE           00126600
&ZMS           SETC  '&ZMS.&ENTRYDATA"'                                 00126700
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00126800
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                   00126900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00127000
.ZG31R         ANOP  ,                                                  00127100
.*----------------------------------------------------------------***   00127200
.***AG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00127300
&XFUNCRTN      SETC  ''          INITIALIZE XVARIABLE                   00127400
               AIF   (K'&FUNCNAME LE 0).ZG34C                           00127500
&ZXFUNCRTN     SETC  'INPUT'     SET IN/OUTPUT                          00127600
&XFUNCRTN      SETC  'FUNCNAME'  SET XVARIABLE                          00127700
&ZXFUNCNAME    SETC  'INPUT'     SET IN/OUTPUT                          00127800
&XFUNCNAME     SETC  '&FUNCNAME(1)'             SET XVARIABLE PARM      00127900
               AIF   (N'&FUNCNAME GT 1).ZG34A   MULTIPLE PARMS          00128000
&XFUNCNAME     SETC  '&FUNCNAME'                SET XVARIABLE PARM      00128100
.ZG34A         AIF   (N'&FUNCNAME LE 1).ZG34B   CK NUM                  00128200
&ZMS           SETC  '"FUNCNAME='               *KPOSA* MNOTE           00128300
&ZMS           SETC  '&ZMS.&FUNCNAME"'                                  00128400
&ZMS           SETC  '&ZMS "FUNCNAME"'                                  00128500
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00128600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00128700
.ZG34B         AIF   (K'&XFUNCNAME GT 0).ZG34C  ONE PARM                00128800
&ZXFUNCRTN     SETC  ''          RESET IN/OUTPUT                        00128900
&ZXFUNCNAME    SETC  ''          RESET IN/OUTPUT                        00129000
&ZMS           SETC  'WHEN "SET" IS SPECIFIED'  *KRQDA*                 00129100
&ZMS           SETC  '&ZMS , "FUNCNAME" KEY AND ITS ARGUMENT'           00129200
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00129300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00129400
.ZG34C         ANOP  ,                                                  00129500
.*----------------------------------------------------------------***   00129600
.***AG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00129700
               AIF   (K'&FUNCADDR LE 0).ZG35D   NO ME KEY               00129800
               AIF   (N'&FUNCADDR LE 1).ZG35A   CK NUM                  00129900
&ZMS           SETC  '"FUNCADDR='               *KPOSA* MNOTE           00130000
&ZMS           SETC  '&ZMS.&FUNCADDR"'                                  00130100
&ZMS           SETC  '&ZMS "FUNCADDR"'                                  00130200
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00130300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00130400
.ZG35A         AIF   (K'&XFUNCRTN LE 0).ZG35B                           00130500
&ZMS           SETC  '"FUNCADDR'                *KMEKA* MNOTE           00130600
&ZMS           SETC  '&ZMS.=&FUNCADDR"'                                 00130700
&ZMS           SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'              00130800
&ZMS           SETC  '&ZMS "&XFUNCRTN"'                                 00130900
               MNOTE 8,' &ZMS KEY.'                                     00131000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00131100
               AGO   .ZG35D                                             00131200
.*                                                                      00131300
.ZG35B         ANOP  ,                                                  00131400
&ZXFUNCRTN     SETC  'INPUT'     SET IN/OUTPUT                          00131500
&XFUNCRTN      SETC  'FUNCADDR'  SET XVARIABLE                          00131600
&ZXFUNCADDR    SETC  'INPUT'     SET IN/OUTPUT                          00131700
&XFUNCADDR     SETC  '&FUNCADDR(1)'             SET XVARIABLE PARM      00131800
               AIF   (N'&FUNCADDR GT 1).ZG35C   MULTIPLE PARMS          00131900
&XFUNCADDR     SETC  '&FUNCADDR'                SET XVARIABLE PARM      00132000
.ZG35C         AIF   (K'&XFUNCADDR GT 0).ZG35D  ONE PARM                00132100
&ZXFUNCRTN     SETC  ''          RESET IN/OUTPUT                        00132200
&ZXFUNCADDR    SETC  ''          RESET IN/OUTPUT                        00132300
&ZMS           SETC  'WHEN "SET" IS SPECIFIED'  *KRQDA*                 00132400
&ZMS           SETC  '&ZMS , "FUNCADDR" KEY AND ITS ARGUMENT'           00132500
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00132600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00132700
.ZG35D         ANOP  ,                                                  00132800
.*------------------------------------------------------------------    00132900
.***AG.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED           00133000
               AIF   (K'&XFUNCRTN GT 0).ZG42B                           00133100
&ZXFUNCRTN     SETC  'INPUT'     SET IN/OUTPUT                          00133200
&XFUNCRTN      SETC  'FUNCNAME'  SET DEFAULT                            00133300
&ZXFUNCNAME    SETC  'INPUT'     SET IN/OUTPUT                          00133400
&XFUNCNAME     SETC  '0'         SET DEFAULT PARM                       00133500
.ZG42B         ANOP  ,                                                  00133600
.*-------------------------------------------------------------------   00133700
.***AG.KCK01 NAME, OPT INPUT, ME KEYS -GPR NOT ALLOWED                  00133800
               AIF   (K'&ZXFUNCADDR LE 0).ZG42P  NOT I/O                00133900
               AIF   ('&XFUNCADDR'(1,1) NE '(').ZG42P                   00134000
&ZXFUNCADDR    SETC  ''          RESET IN/OUTPUT                        00134100
&ZMS           SETC  '"FUNCADDR='               *KGPRA* MNOTE           00134200
&ZMS           SETC  '&ZMS.&FUNCADDR"'                                  00134300
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00134400
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00134500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00134600
.ZG42P         ANOP  ,                                                  00134700
.*-------------------------------------------------------------------   00134800
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00134900
.ZG34          AIF   ('&XFUNCRTN' NE 'FUNCNAME').ZG35                   00135000
.*-------------------------------------------------------------------   00135100
.***AG.KMEKY14 NAME, OPT INPUT, ME KEYS -DISALLOWED KEYS                00135200
&ZCVAL         SETC ''           ERROR KEY FIELD                        00135300
.ZG34I0        AIF   (K'&FUNCAMODE LE 0).ZG34I1                         00135400
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          DISALLOWED KEY          00135500
.ZG34I1        AIF   (K'&ZCVAL LE 0).ZG34J      KEY                     00135600
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00135700
&ZMS           SETC  '"FUNCNAME'                *KMEIA* MNOTE           00135800
&ZMS           SETC  '&ZMS.=&FUNCNAME"'                                 00135900
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00136000
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00136100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00136200
.ZG34J         ANOP  ,                                                  00136300
.*-------------------------------------------------------------------   00136400
.***AG.KCK01 NAME, OPT INPUT, ME KEYS -GPR NOT ALLOWED                  00136500
               AIF   (K'&ZXFUNCNAME LE 0).ZG34P  NOT I/O                00136600
               AIF   ('&XFUNCNAME'(1,1) NE '(').ZG34P                   00136700
&ZXFUNCNAME    SETC  ''          RESET IN/OUTPUT                        00136800
&ZMS           SETC  '"FUNCNAME='               *KGPRA* MNOTE           00136900
&ZMS           SETC  '&ZMS.&FUNCNAME"'                                  00137000
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00137100
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00137200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00137300
.ZG34P         ANOP  ,                                                  00137400
.*-------------------------------------------------------------------   00137500
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00137600
.ZG35          AIF   ('&XFUNCRTN' NE 'FUNCADDR').ZG42                   00137700
.*-------------------------------------------------------------------   00137800
.***AG.KCK01 NAME, OPT INPUT, ME KEYS -GPR NOT ALLOWED                  00137900
               AIF   (K'&ZXFUNCADDR LE 0).ZG35P  NOT I/O                00138000
               AIF   ('&XFUNCADDR'(1,1) NE '(').ZG35P                   00138100
&ZXFUNCADDR    SETC  ''          RESET IN/OUTPUT                        00138200
&ZMS           SETC  '"FUNCADDR='               *KGPRA* MNOTE           00138300
&ZMS           SETC  '&ZMS.&FUNCADDR"'                                  00138400
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00138500
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00138600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00138700
.ZG35P         ANOP  ,                                                  00138800
.*----------------------------------------------------------------***   00138900
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00139000
               AIF   (N'&FUNCAMODE LE 1).ZG37A  CK NUM                  00139100
&ZMS           SETC  '"FUNCAMODE='              *KPOSA* MNOTE           00139200
&ZMS           SETC  '&ZMS.&FUNCAMODE"'                                 00139300
&ZMS           SETC  '&ZMS "FUNCAMODE"'                                 00139400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00139500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00139600
.ZG37A         ANOP  ,                                                  00139700
.*-------------------------------------------------------------------   00139800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00139900
&XFUNCAMODE    SETC  ''          INITIALIZE XVARIABLE                   00140000
.ZG38A   AIF   ('&FUNCAMODE(1)' NE 'HOB').ZG39A                         00140100
&XFUNCAMODE    SETC  'HOB'       SET KEYWORD                            00140200
.*-------------------------------------------------------------------   00140300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00140400
.ZG39A   AIF   ('&FUNCAMODE(1)' NE '31').ZG40A                          00140500
&XFUNCAMODE    SETC  '31'        SET KEYWORD                            00140600
.*-------------------------------------------------------------------   00140700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00140800
.ZG40A   AIF   ('&FUNCAMODE(1)' NE '24').ZG41A                          00140900
&XFUNCAMODE    SETC  '24'        SET KEYWORD                            00141000
.*-------------------------------------------------------------------   00141100
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00141200
.ZG41A         AIF   (K'&XFUNCAMODE GT 0).ZG41C  KEYWORD                00141300
               AIF   (K'&FUNCAMODE(1) LE 0).ZG41B                       00141400
&ZMS           SETC  '"FUNCAMODE='              *KUKWA* MNOTE           00141500
&ZMS           SETC  '&ZMS.&FUNCAMODE"'                                 00141600
&ZMS           SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '          00141700
&ZMS           SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                00141800
&ZMS           SETC  '&ZMS "HOB",'              VALID KEYWORD           00141900
&ZMS           SETC  '&ZMS "31",'               VALID KEYWORD           00142000
&ZMS           SETC  '&ZMS OR "24".'            VALID KEYWORD           00142100
               MNOTE 8,' &ZMS '                                         00142200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00142300
.ZG41B         ANOP  ,                                                  00142400
&XFUNCAMODE    SETC  'HOB'       SET DEFAULT KEYWORD                    00142500
.ZG41C         ANOP  ,                                                  00142600
&ZXFUNCAMODE   SETC  'INPUT'     SET IN/OUTPUT                          00142700
.*-------------------------------------------------------------------   00142800
.***AG.KMEKY15 NAME, OPT INPUT, ME KEYS -END                            00142900
.ZG42          ANOP  ,           END MUTUALLY EXCLUSIVE KEYS            00143000
.*----------------------------------------------------------------***   00143100
.***AG.KXVAR15 NAME, OPT INPUT, KEYS -MULTIPLE ARGUMENTS                00143200
&ZXFCODES      SETC  'INPUT'     SET IN/OUTPUT                          00143300
&ZI            SETA  0           ARRAY INDEX                            00143400
&ZJ            SETA  0           PARM INDEX                             00143500
               AIF   (N'&FCODES LE 0).ZG44C     NO PARMS                00143600
.ZG44A         ANOP  ,           LOOP TO GET PARMS                      00143700
&ZJ            SETA  &ZJ+1       NEXT PARM                              00143800
               AIF   (&ZJ GT N'&FCODES).ZG44B   DONE                    00143900
               AIF   (K'&FCODES(&ZJ) LE 0).ZG44A  NULL                  00144000
&ZI            SETA  &ZI+1       NEXT ARRAY ENTRY                       00144100
&XFCODES(&ZI)  SETC  '&FCODES(&ZJ)'             SET ARRAY ENTRY         00144200
               AGO   .ZG44A                                             00144300
.*                                                                      00144400
.ZG44B         ANOP  ,                                                  00144500
&ZI            SETA  &ZI+1       NEXT ARRAY ENTRY                       00144600
&XFCODES(&ZI)  SETC  ''          NULL AT ARRAY END                      00144700
               AIF   (&ZI GT 1).ZG44D           PARMS                   00144800
.ZG44C         ANOP  ,                                                  00144900
&XFCODES(1)    SETC  '0'         SET DEFAULT                            00145000
&XFCODES(2)    SETC  ''          NULL AT ARRAY END                      00145100
.ZG44D         ANOP  ,                                                  00145200
.*-------------------------------------------------------------------   00145300
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00145400
.ZG46          ANOP  ,                                                  00145500
&ZTLC          SETC 'RESERVE'                                           00145600
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG54                       00145700
&XTYPE         SETC  'RESERVE'   SET KEYWORD                            00145800
               AIF   (N'&TYPE LE 1).ZG46A       CK NUM                  00145900
&ZMS           SETC  '"TYPE='    *KPOSA* MNOTE                          00146000
&ZMS           SETC  '&ZMS.&TYPE"'                                      00146100
&ZMS           SETC  '&ZMS "TYPE"'                                      00146200
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00146300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00146400
.ZG46A         ANOP  ,                                                  00146500
.*------------------------------------------------------------------    00146600
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00146700
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00146800
.ZG46A0        AIF   (K'&FUNCNAME LE 0).ZG46A1  OK                      00146900
&ZCVAL         SETC '&ZCVAL FUNCNAME'           INCORRECT KEY USED      00147000
.ZG46A1        AIF   (K'&FUNCADDR LE 0).ZG46A2  OK                      00147100
&ZCVAL         SETC '&ZCVAL FUNCADDR'           INCORRECT KEY USED      00147200
.ZG46A2        AIF   (K'&NUMFCODES LE 0).ZG46A3  OK                     00147300
&ZCVAL         SETC '&ZCVAL NUMFCODES'          INCORRECT KEY USED      00147400
.ZG46A3        AIF   (K'&FCODES LE 0).ZG46A4    OK                      00147500
&ZCVAL         SETC '&ZCVAL FCODES'             INCORRECT KEY USED      00147600
.ZG46A4        AIF   (K'&SOURCE LE 0).ZG46A5    OK                      00147700
&ZCVAL         SETC '&ZCVAL SOURCE'             INCORRECT KEY USED      00147800
.ZG46A5        AIF   (K'&ENTRYDATA LE 0).ZG46A6  OK                     00147900
&ZCVAL         SETC '&ZCVAL ENTRYDATA'          INCORRECT KEY USED      00148000
.ZG46A6        AIF   (K'&FUNCAMODE LE 0).ZG46A7  OK                     00148100
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          INCORRECT KEY USED      00148200
.ZG46A7        AIF   (K'&ZCVAL LE 0).ZG46A8     OK                      00148300
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00148400
&ZMS           SETC  '"TYPE'     *KMEIA* MNOTE                          00148500
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00148600
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00148700
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00148800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00148900
.ZG46A8        ANOP  ,                                                  00149000
.*----------------------------------------------------------------***   00149100
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00149200
               AIF   (N'&SSVTDATA LE 1).ZG48A   CK NUM                  00149300
&ZMS           SETC  '"SSVTDATA='               *KPOSA* MNOTE           00149400
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00149500
&ZMS           SETC  '&ZMS "SSVTDATA"'                                  00149600
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00149700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00149800
.ZG48A         ANOP  ,                                                  00149900
.*-------------------------------------------------------------------   00150000
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00150100
&ZXSSVTDATA    SETC  'INPUT'     SET IN/OUTPUT                          00150200
&XSSVTDATA     SETC  '&SSVTDATA(1)'             SET XVARIABLE           00150300
               AIF   (N'&SSVTDATA GT 1).ZG48B   MULTI PARMS             00150400
&XSSVTDATA     SETC  '&SSVTDATA'                SET XVARIABLE           00150500
.ZG48B         AIF   (K'&SSVTDATA(1) GT 0).ZG48C                        00150600
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00150700
&ZMS           SETC  ' '         *KRQDA*                                00150800
&ZMS           SETC  '&ZMS "SSVTDATA" KEY AND ITS ARGUMENT'             00150900
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00151000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00151100
.ZG48C         ANOP  ,                                                  00151200
.*-------------------------------------------------------------------   00151300
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00151400
               AIF   (K'&ZXSSVTDATA LE 0).ZG48P  NOT I/O                00151500
               AIF   ('&XSSVTDATA'(1,1) NE '(').ZG48P                   00151600
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00151700
&ZMS           SETC  '"SSVTDATA='               *KGPRA* MNOTE           00151800
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00151900
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00152000
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00152100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00152200
.ZG48P         ANOP  ,                                                  00152300
.*----------------------------------------------------------------***   00152400
.***AG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00152500
&XRESERVE_LEN  SETC  ''          INITIALIZE XVARIABLE                   00152600
               AIF   (K'&TABLEN LE 0).ZG51C                             00152700
&ZXRESERVE_LEN                   SETC  'INPUT'  SET IN/OUTPUT           00152800
&XRESERVE_LEN  SETC  'TABLEN'    SET XVARIABLE                          00152900
&ZXTABLEN      SETC  'INPUT'     SET IN/OUTPUT                          00153000
&XTABLEN       SETC  '&TABLEN(1)'               SET XVARIABLE PARM      00153100
               AIF   (N'&TABLEN GT 1).ZG51A     MULTIPLE PARMS          00153200
&XTABLEN       SETC  '&TABLEN'   SET XVARIABLE PARM                     00153300
.ZG51A         AIF   (N'&TABLEN LE 1).ZG51B     CK NUM                  00153400
&ZMS           SETC  '"TABLEN='  *KPOSA* MNOTE                          00153500
&ZMS           SETC  '&ZMS.&TABLEN"'                                    00153600
&ZMS           SETC  '&ZMS "TABLEN"'                                    00153700
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00153800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00153900
.ZG51B         AIF   (K'&XTABLEN GT 0).ZG51C    ONE PARM                00154000
&ZXRESERVE_LEN                   SETC  ''       RESET IN/OUTPUT         00154100
&ZXTABLEN      SETC  ''          RESET IN/OUTPUT                        00154200
&ZMS           SETC  ' '         *KRQDA*                                00154300
&ZMS           SETC  '&ZMS "TABLEN" KEY AND ITS ARGUMENT'               00154400
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00154500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00154600
.ZG51C         ANOP  ,                                                  00154700
.*----------------------------------------------------------------***   00154800
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00154900
               AIF   (K'&MAXFCODES LE 0).ZG52D  NO ME KEY               00155000
               AIF   (N'&MAXFCODES LE 1).ZG52A  CK NUM                  00155100
&ZMS           SETC  '"MAXFCODES='              *KPOSA* MNOTE           00155200
&ZMS           SETC  '&ZMS.&MAXFCODES"'                                 00155300
&ZMS           SETC  '&ZMS "MAXFCODES"'                                 00155400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00155500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00155600
.ZG52A         AIF   (K'&XRESERVE_LEN LE 0).ZG52B                       00155700
&ZMS           SETC  '"MAXFCODES'               *KMEKA* MNOTE           00155800
&ZMS           SETC  '&ZMS.=&MAXFCODES"'                                00155900
&ZMS           SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'              00156000
&ZMS           SETC  '&ZMS "&XRESERVE_LEN"'                             00156100
               MNOTE 8,' &ZMS KEY.'                                     00156200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00156300
               AGO   .ZG52D                                             00156400
.*                                                                      00156500
.ZG52B         ANOP  ,                                                  00156600
&ZXRESERVE_LEN                   SETC  'INPUT'  SET IN/OUTPUT           00156700
&XRESERVE_LEN  SETC  'MAXFCODES'                SET XVARIABLE           00156800
&ZXMAXFCODES   SETC  'INPUT'     SET IN/OUTPUT                          00156900
&XMAXFCODES    SETC  '&MAXFCODES(1)'            SET XVARIABLE PARM      00157000
               AIF   (N'&MAXFCODES GT 1).ZG52C  MULTIPLE PARMS          00157100
&XMAXFCODES    SETC  '&MAXFCODES'               SET XVARIABLE PARM      00157200
.ZG52C         AIF   (K'&XMAXFCODES GT 0).ZG52D  ONE PARM               00157300
&ZXRESERVE_LEN                   SETC  ''       RESET IN/OUTPUT         00157400
&ZXMAXFCODES   SETC  ''          RESET IN/OUTPUT                        00157500
&ZMS           SETC  ' '         *KRQDA*                                00157600
&ZMS           SETC  '&ZMS "MAXFCODES" KEY AND ITS ARGUMENT'            00157700
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00157800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00157900
.ZG52D         ANOP  ,                                                  00158000
.*------------------------------------------------------------------    00158100
.***AG.KME4Y09 NAME, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED           00158200
               AIF   (K'&XRESERVE_LEN GT 0).ZG53B                       00158300
&ZXRESERVE_LEN                   SETC  ''       RESET IN/OUTPUT         00158400
&ZXTABLEN      SETC  ''          RESET IN/OUTPUT                        00158500
&XRESERVE_LEN  SETC  ''          ENSURE NULL                            00158600
&XTABLEN       SETC  ''          ENSURE NULL                            00158700
&ZMS           SETC  'ONE OF THE FOLLOWING'     *KMERA* MNOTE           00158800
&ZMS           SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'                00158900
&ZMS           SETC  '&ZMS REQUIRED:'                                   00159000
&ZMS           SETC  '&ZMS "TABLEN"'            VALID ME KEY            00159100
&ZMS           SETC  '&ZMS OR "MAXFCODES".'     VALID ME KEY            00159200
               MNOTE 8,' &ZMS '                                         00159300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00159400
.ZG53B         ANOP  ,                                                  00159500
.*-------------------------------------------------------------------   00159600
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00159700
.ZG51          AIF   ('&XRESERVE_LEN' NE 'TABLEN').ZG52                 00159800
.*-------------------------------------------------------------------   00159900
.***AG.KCK01 NAME, RQD INPUT, ME KEYS -GPR NOT ALLOWED                  00160000
               AIF   (K'&ZXTABLEN LE 0).ZG51P   NOT I/O                 00160100
               AIF   ('&XTABLEN'(1,1) NE '(').ZG51P                     00160200
&ZXTABLEN      SETC  ''          RESET IN/OUTPUT                        00160300
&ZMS           SETC  '"TABLEN='  *KGPRA* MNOTE                          00160400
&ZMS           SETC  '&ZMS.&TABLEN"'                                    00160500
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00160600
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00160700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00160800
.ZG51P         ANOP  ,                                                  00160900
.*-------------------------------------------------------------------   00161000
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00161100
.ZG52          AIF   ('&XRESERVE_LEN' NE 'MAXFCODES').ZG53              00161200
.*-------------------------------------------------------------------   00161300
.***AG.KCK01 NAME, RQD INPUT, ME KEYS -GPR NOT ALLOWED                  00161400
               AIF   (K'&ZXMAXFCODES LE 0).ZG52P  NOT I/O               00161500
               AIF   ('&XMAXFCODES'(1,1) NE '(').ZG52P                  00161600
&ZXMAXFCODES   SETC  ''          RESET IN/OUTPUT                        00161700
&ZMS           SETC  '"MAXFCODES='              *KGPRA* MNOTE           00161800
&ZMS           SETC  '&ZMS.&MAXFCODES"'                                 00161900
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00162000
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00162100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00162200
.ZG52P         ANOP  ,                                                  00162300
.*-------------------------------------------------------------------   00162400
.***AG.KMEKY15 NAME, RQD INPUT, ME KEYS -END                            00162500
.ZG53          ANOP  ,           END MUTUALLY EXCLUSIVE KEYS            00162600
.*-------------------------------------------------------------------   00162700
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00162800
.ZG54          ANOP  ,                                                  00162900
&ZTLC          SETC 'COPY'                                              00163000
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG59                       00163100
&XTYPE         SETC  'COPY'      SET KEYWORD                            00163200
               AIF   (N'&TYPE LE 1).ZG54A       CK NUM                  00163300
&ZMS           SETC  '"TYPE='    *KPOSA* MNOTE                          00163400
&ZMS           SETC  '&ZMS.&TYPE"'                                      00163500
&ZMS           SETC  '&ZMS "TYPE"'                                      00163600
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00163700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00163800
.ZG54A         ANOP  ,                                                  00163900
.*------------------------------------------------------------------    00164000
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00164100
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00164200
.ZG54A0        AIF   (K'&TABLEN LE 0).ZG54A1    OK                      00164300
&ZCVAL         SETC '&ZCVAL TABLEN'             INCORRECT KEY USED      00164400
.ZG54A1        AIF   (K'&FUNCNAME LE 0).ZG54A2  OK                      00164500
&ZCVAL         SETC '&ZCVAL FUNCNAME'           INCORRECT KEY USED      00164600
.ZG54A2        AIF   (K'&FUNCADDR LE 0).ZG54A3  OK                      00164700
&ZCVAL         SETC '&ZCVAL FUNCADDR'           INCORRECT KEY USED      00164800
.ZG54A3        AIF   (K'&NUMFCODES LE 0).ZG54A4  OK                     00164900
&ZCVAL         SETC '&ZCVAL NUMFCODES'          INCORRECT KEY USED      00165000
.ZG54A4        AIF   (K'&FCODES LE 0).ZG54A5    OK                      00165100
&ZCVAL         SETC '&ZCVAL FCODES'             INCORRECT KEY USED      00165200
.ZG54A5        AIF   (K'&ENTRYDATA LE 0).ZG54A6  OK                     00165300
&ZCVAL         SETC '&ZCVAL ENTRYDATA'          INCORRECT KEY USED      00165400
.ZG54A6        AIF   (K'&FUNCAMODE LE 0).ZG54A7  OK                     00165500
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          INCORRECT KEY USED      00165600
.ZG54A7        AIF   (K'&MAXFCODES LE 0).ZG54A8  OK                     00165700
&ZCVAL         SETC '&ZCVAL MAXFCODES'          INCORRECT KEY USED      00165800
.ZG54A8        AIF   (K'&ZCVAL LE 0).ZG54A9     OK                      00165900
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00166000
&ZMS           SETC  '"TYPE'     *KMEIA* MNOTE                          00166100
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00166200
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00166300
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00166400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00166500
.ZG54A9        ANOP  ,                                                  00166600
.*----------------------------------------------------------------***   00166700
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00166800
               AIF   (N'&SSVTDATA LE 1).ZG56A   CK NUM                  00166900
&ZMS           SETC  '"SSVTDATA='               *KPOSA* MNOTE           00167000
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00167100
&ZMS           SETC  '&ZMS "SSVTDATA"'                                  00167200
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00167300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00167400
.ZG56A         ANOP  ,                                                  00167500
.*-------------------------------------------------------------------   00167600
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00167700
&ZXSSVTDATA    SETC  'INPUT'     SET IN/OUTPUT                          00167800
&XSSVTDATA     SETC  '&SSVTDATA(1)'             SET XVARIABLE           00167900
               AIF   (N'&SSVTDATA GT 1).ZG56B   MULTI PARMS             00168000
&XSSVTDATA     SETC  '&SSVTDATA'                SET XVARIABLE           00168100
.ZG56B         AIF   (K'&SSVTDATA(1) GT 0).ZG56C                        00168200
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00168300
&ZMS           SETC  ' '         *KRQDA*                                00168400
&ZMS           SETC  '&ZMS "SSVTDATA" KEY AND ITS ARGUMENT'             00168500
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00168600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00168700
.ZG56C         ANOP  ,                                                  00168800
.*-------------------------------------------------------------------   00168900
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00169000
               AIF   (K'&ZXSSVTDATA LE 0).ZG56P  NOT I/O                00169100
               AIF   ('&XSSVTDATA'(1,1) NE '(').ZG56P                   00169200
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00169300
&ZMS           SETC  '"SSVTDATA='               *KGPRA* MNOTE           00169400
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00169500
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00169600
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00169700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00169800
.ZG56P         ANOP  ,                                                  00169900
.*----------------------------------------------------------------***   00170000
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00170100
               AIF   (N'&SOURCE LE 1).ZG57A     CK NUM                  00170200
&ZMS           SETC  '"SOURCE='  *KPOSA* MNOTE                          00170300
&ZMS           SETC  '&ZMS.&SOURCE"'                                    00170400
&ZMS           SETC  '&ZMS "SOURCE"'                                    00170500
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00170600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00170700
.ZG57A         ANOP  ,                                                  00170800
.*-------------------------------------------------------------------   00170900
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00171000
&ZXSOURCE      SETC  'INPUT'     SET IN/OUTPUT                          00171100
&XSOURCE       SETC  '&SOURCE(1)'               SET XVARIABLE           00171200
               AIF   (N'&SOURCE GT 1).ZG57B     MULTI PARMS             00171300
&XSOURCE       SETC  '&SOURCE'   SET XVARIABLE                          00171400
.ZG57B         AIF   (K'&SOURCE(1) GT 0).ZG57C                          00171500
&ZXSOURCE      SETC  ''          RESET IN/OUTPUT                        00171600
&ZMS           SETC  ' '         *KRQDA*                                00171700
&ZMS           SETC  '&ZMS "SOURCE" KEY AND ITS ARGUMENT'               00171800
               MNOTE 8,' &ZMS ARE REQUIRED.'                            00171900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00172000
.ZG57C         ANOP  ,                                                  00172100
.*-------------------------------------------------------------------   00172200
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00172300
               AIF   (K'&ZXSOURCE LE 0).ZG57P   NOT I/O                 00172400
               AIF   ('&XSOURCE'(1,1) NE '(').ZG57P                     00172500
&ZXSOURCE      SETC  ''          RESET IN/OUTPUT                        00172600
&ZMS           SETC  '"SOURCE='  *KGPRA* MNOTE                          00172700
&ZMS           SETC  '&ZMS.&SOURCE"'                                    00172800
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00172900
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00173000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00173100
.ZG57P         ANOP  ,                                                  00173200
.*------------------------------------------------------------------    00173300
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00173400
.ZG59          ANOP  ,                                                  00173500
&ZXTYPE        SETC  'INPUT'     SET IN/OUTPUT                          00173600
               AIF   (K'&XTYPE GT 0).ZG59E      VALID ARG               00173700
               AIF   (T'&TYPE EQ 'O').ZG59D     OMITTED                 00173800
&ZASYSLNDX     SETA  0                                                  00173900
.ZG59A         ANOP  ,           POSITIONAL MACRO KEY                   00174000
&ZASYSLNDX     SETA  &ZASYSLNDX+1                                       00174100
               AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG59C                   00174200
&ZTLC          SETC 'TYPE'                                              00174300
               AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG59A          00174400
.ZG59B         ANOP  ,                                                  00174500
&ZXTYPE        SETC  ''          RESET IN/OUTPUT                        00174600
&ZMS           SETC  'THE "TYPE" KEY'           *KOPTA* MNOTE           00174700
&ZMS           SETC  '&ZMS MUST CONTAIN ONE'                            00174800
               MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                   00174900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00175000
               AGO   .ZG59E                                             00175100
.ZG59C         ANOP  ,                                                  00175200
&ZXTYPE        SETC  ''          RESET IN/OUTPUT                        00175300
&ZMS           SETC  '"TYPE='    *KUKWA* MNOTE                          00175400
&ZMS           SETC  '&ZMS.&TYPE"'                                      00175500
&ZMS           SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '          00175600
&ZMS           SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                00175700
&ZMS           SETC  '&ZMS "LIST",'             VALID KEYWORD           00175800
&ZMS           SETC  '&ZMS "INITIAL",'          VALID KEYWORD           00175900
&ZMS           SETC  '&ZMS "ENTRY",'            VALID KEYWORD           00176000
&ZMS           SETC  '&ZMS "FINAL",'            VALID KEYWORD           00176100
&ZMS           SETC  '&ZMS "SET",'              VALID KEYWORD           00176200
&ZMS           SETC  '&ZMS "RESERVE",'          VALID KEYWORD           00176300
&ZMS           SETC  '&ZMS OR "COPY".'          VALID KEYWORD           00176400
               MNOTE 8,' &ZMS '                                         00176500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00176600
               AGO   .ZG59E                                             00176700
.ZG59D         ANOP  ,                                                  00176800
&XTYPE         SETC  'LIST'      SET DEFAULT KEYWORD                    00176900
.ZG59E         ANOP  ,                                                  00177000
.*------------------------------------------------------------------    00177100
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00177200
               AIF   (K'&TYPE(1) GT 0).ZG59F    PARM                    00177300
&XTYPE         SETC  ''          ENSURE NULL KEYWORD                    00177400
&ZXTYPE        SETC  ''          RESET IN/OUTPUT                        00177500
&ZMS           SETC  'THE'                                              00177600
&ZMS           SETC  '&ZMS "TYPE" KEY AND ITS ARGUMENT'                 00177700
&ZMS           SETC  '&ZMS ARE REQUIRED.'                               00177800
&ZMS           SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                00177900
&ZMS           SETC  '&ZMS "LIST",'             VALID KEYWORD           00178000
&ZMS           SETC  '&ZMS "INITIAL",'          VALID KEYWORD           00178100
&ZMS           SETC  '&ZMS "ENTRY",'            VALID KEYWORD           00178200
&ZMS           SETC  '&ZMS "FINAL",'            VALID KEYWORD           00178300
&ZMS           SETC  '&ZMS "SET",'              VALID KEYWORD           00178400
&ZMS           SETC  '&ZMS "RESERVE",'          VALID KEYWORD           00178500
&ZMS           SETC  '&ZMS OR "COPY".'          VALID KEYWORD           00178600
               MNOTE 8,' &ZMS '                                         00178700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00178800
.ZG59F         ANOP  ,                                                  00178900
.******************************************************************     00179000
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00179100
.******************************************************************     00179200
               ACTR  10000                                              00179300
.*----------------------------------------------------------------***   00179400
.***AH.P02 EXTRA POSITIONALS                                            00179500
               AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS               00179600
&ZCVAL         SETC  ''          ERROR FIELD                            00179700
&ZAWRK         SETA  0           POSITIONAL NUMBER                      00179800
.ZGLIST2       ANOP  ,                                                  00179900
&ZAWRK         SETA  &ZAWRK+1    NEXT POSITIONAL                        00180000
               AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE               00180100
&ZCVAL         SETC '&ZCVAL,&SYSLIST(&ZAWRK)'   EXTRA                   00180200
               AGO   .ZGLIST2                                           00180300
.*                                                                      00180400
.ZGLIST3       ANOP  ,                                                  00180500
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)      STRIP COMMA             00180600
&ZMS           SETC  'POSITIONAL ARGUMENT(S),'  *PPOSA* MNOTE           00180700
&ZMS           SETC  '&ZMS "&ZCVAL"'                                    00180800
&ZMS           SETC  '&ZMS CANNOT BE USED.'                             00180900
&ZMS           SETC  '&ZMS NO POSITIONAL ARGUMENTS'                     00181000
               MNOTE 8,' &ZMS ARE ALLOWED.'                             00181100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00181200
.ZGLISTX       ANOP  ,                                                  00181300
&ZASYSLNDX     SETA  0                                                  00181400
.*******************************************************************    00181500
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00181600
.*******************************************************************    00181700
               AIF   (&ZMACRET NE 0).ZLX2       ERROR DETECTED          00181800
.*******************************************************************    00181900
.***AE.01  START OF IEFSSVTI MACRO CODE                                 00182000
.*******************************************************************    00182100
               LCLC  &M0M0001                 NAME                      00182200
&M0M0001       SETC  '&XLABEL'                SET NAME                  00182300
               AIF   (K'&XLABEL NE 0).XLAB2                             00182400
&M0M0001       SETC  'M00M&SYSNDX'            DEFAULT NAME              00182500
.*                                                                      00182600
.XLAB2         ANOP  ,                                                  00182700
&M0M0001 DS    0B                             IEFSSVTI-1                00182800
.*******************************************************************    00182900
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00183000
.*******************************************************************    00183100
              PUSH  PRINT                                               00183200
               AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON         00183300
               PRINT OFF         ++ PR01                                00183400
               AGO   .ZPRNTXX                                           00183500
.ZPRINTX       PRINT ON                                                 00183600
.ZPRNTXX       ANOP  ,                                                  00183700
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00183800
.********************************************************************** 00183900
.*  External macro variables                                            00184000
.********************************************************************** 00184100
         GBLB  &IEFSSVTI_MAPPING_DONE    Flag used to determine        +00184200
                                         when to define table maps      00184300
         GBLB  &IEFSSVTI_INITIAL_SEEN   Flag to tell if we             +00184400
                                         are in an INITIAL/FINAL group  00184500
         GBLB  &IEFSSVTI_ENTRY_SEEN     Flag to remember if a          +00184600
                                         TYPE=ENTRY is coded            00184700
         GBLA  &IEFSSVTI_#FRTN          Number of function routines    +00184800
                                         in a table                     00184900
         GBLC  &IEFSSVTI_TABLE_NAME     Remember name of table          00185000
         GBLA  &IEFSSVTI_TABLE_LENGTH   Length of table                 00185100
         GBLC  &IEFSSVTI_#FRTN_NAME     Remembers name of variable     +00185200
                                         for number of function        +00185300
                                         routines between invocations   00185400
         GBLC  &IEFSSVTI_TABLEN_NAME    Remembers name of table length +00185500
                                         variable between invocations   00185600
.********************************************************************** 00185700
.*  Internal macro variables                                            00185800
.********************************************************************** 00185900
         LCLA  &IEFSSVTI_HEADLEN        Length of table header          00186000
         LCLA  &IEFSSVTI_ENTRY_HEADLEN  Length of table entry header    00186100
         LCLA  &FCODINDX                Index over function code list   00186200
         LCLC  &TABLEN_STRING           String containing expression   +00186300
                                          for length of table           00186400
         LCLC  &WORKC                   Work string (character)         00186500
         LCLA  &WORKA                   Work string (arithmetic)        00186600
         LCLA  &ZELO                    Index for invocation echo       00186700
         LCLA  &ZECOL                   Index for invocation echo       00186800
.*                                                                      00186900
&IEFSSVTI_HEADLEN SETA 12               Length of table header          00187000
&IEFSSVTI_ENTRY_HEADLEN SETA 12         Length of table entry header    00187100
.********************************************************************** 00187200
.*  Perform TYPE-specific actions                                       00187300
.********************************************************************** 00187400
         AIF   ('&XTYPE' EQ 'LIST').TYPELIST                            00187500
         AIF   ('&XTYPE' EQ 'INITIAL').TYPEINITIAL                      00187600
         AIF   ('&XTYPE' EQ 'ENTRY').TYPEENTRY                          00187700
         AIF   ('&XTYPE' EQ 'FINAL').TYPEFINAL                          00187800
         AIF   ('&XTYPE' EQ 'SET').TYPESET                              00187900
         AIF   ('&XTYPE' EQ 'RESERVE').TYPERESERVE                      00188000
         AIF   ('&XTYPE' EQ 'COPY').TYPECOPY                            00188100
.TYPELIST  ANOP                                                         00188200
.********************************************************************** 00188300
.*  Generate table mappings if necessary                                00188400
.********************************************************************** 00188500
         AIF   (&IEFSSVTI_MAPPING_DONE EQ 1).NOMAP                      00188600
.********************************************************************** 00188700
.*  Save LIST status and suppress listing of mappings                   00188800
.********************************************************************** 00188900
         PUSH  PRINT                                                    00189000
         PRINT OFF                                                      00189100
.********************************************************************** 00189200
.*  Map table header                                                    00189300
.********************************************************************** 00189400
VTI_HEADER  DSECT                                                       00189500
               DS    0F                                                 00189600
VTIH_ID        DS    CL4                                                00189700
VTIH_TABLEN    DS    H                                                  00189800
VTIH_VERSION   DS    H                                                  00189900
VTIH_NUM_FRTNS DS    H                                                  00190000
               DS    CL2                                                00190100
VTIH_FROUTINE_DATA  EQU   *                                             00190200
*                                                                       00190300
.********************************************************************** 00190400
.*  Map table entry                                                     00190500
.********************************************************************** 00190600
VTI_ENTRY   DSECT                                                       00190700
VTIE_HEADER    DS    0F                                                 00190800
VTIE_FUNCNAME  DS    0CL8                                               00190900
               DS    CL4                                                00191000
VTIE_FUNCADDR  DS    CL4                                                00191100
VTIE_MAX_NUM_FCODES DS    H                                             00191200
VTIE_NUM_FCODES     DS    H                                             00191300
VTIE_FCODES    EQU   *                                                  00191400
*                                                                       00191500
.********************************************************************** 00191600
.*  Restore LIST status and indicate mappings generated                 00191700
.********************************************************************** 00191800
         POP   PRINT                                                    00191900
&IEFSSVTI_MAPPING_DONE    SETB  1                                       00192000
.*                                                                      00192100
.NOMAP   ANOP                                                           00192200
         AGO   .IEFSSVTIEND                                             00192300
.TYPEINITIAL   ANOP                                                     00192400
.********************************************************************** 00192500
.*  Check for invocation errors                                    @P5A 00192600
.********************************************************************** 00192700
         AIF   (&IEFSSVTI_INITIAL_SEEN EQ 0).INITIALIZETABLE       @P5A 00192800
         MNOTE 8,'ONLY ONE TYPE=INITIAL PERMITTED IN STATIC TABLE' @P5A 00192900
&ZMACRET SETA  8                                                   @P5A 00193000
         AGO   .INITIALEND                                         @P5A 00193100
.*                                                                      00193200
.INITIALIZETABLE ANOP                                                   00193300
.********************************************************************** 00193400
.*  Initialize table values                                             00193500
.********************************************************************** 00193600
&IEFSSVTI_INITIAL_SEEN    SETB  1                                       00193700
&IEFSSVTI_#FRTN           SETA  0                                       00193800
&IEFSSVTI_TABLE_NAME      SETC  '&XSSVTDATA'                            00193900
&IEFSSVTI_#FRTN_NAME      SETC  '&XSSVTDATA'.'_#FRTN'                   00194000
&IEFSSVTI_TABLEN_NAME     SETC  '&XTABLEN'                              00194100
&IEFSSVTI_TABLE_LENGTH    SETA  &IEFSSVTI_HEADLEN                       00194200
.********************************************************************** 00194300
.*  Begin table mapping                                                 00194400
.********************************************************************** 00194500
            CNOP  0,4                                                   00194600
            B     &IEFSSVTI_TABLE_NAME._END  Branch around table        00194700
&XSSVTDATA  DS    0F                                                    00194800
            DC    CL4'VTIT'                                             00194900
            DC    AL2(&IEFSSVTI_TABLEN_NAME)                            00195000
            DC    XL2'0001'                                             00195100
            DC    AL2(&IEFSSVTI_#FRTN_NAME)                             00195200
            DC    XL2'0000'                                             00195300
.INITIALEND ANOP                                                   @P5A 00195400
         AGO   .IEFSSVTIEND                                             00195500
.*                                                                      00195600
.TYPEENTRY     ANOP                                                     00195700
&IEFSSVTI_ENTRY_SEEN      SETB  1                                       00195800
.********************************************************************** 00195900
.*  Check for invocation errors                                         00196000
.********************************************************************** 00196100
         AIF   (&IEFSSVTI_INITIAL_SEEN EQ 1).CHECKNUMFCODES             00196200
         MNOTE 8,'TYPE=INITIAL MUST PRECEDE TYPE=ENTRY'                 00196300
&ZMACRET SETA  8                                                        00196400
.*                                                                      00196500
.CHECKNUMFCODES  ANOP                                                   00196600
         AIF   (N'&FCODES LE &XNUMFCODES).CHECKENTRYRETCODE             00196700
&WORKC   SETC  'NUMFCODES MUST BE GREATER THAN OR EQUAL TO NUMBER OF '  00196800
&WORKC   SETC  '&WORKC'.'FUNCTION CODES SPECIFIED WITH FCODES'          00196900
         MNOTE 8,' &WORKC'                                              00197000
&ZMACRET SETA  8                                                        00197100
.*                                                                      00197200
.CHECKENTRYRETCODE  ANOP                                                00197300
         AIF   (&ZMACRET NE 0).NOENTRY                                  00197400
.********************************************************************** 00197500
.*  Generate table entry                                                00197600
.********************************************************************** 00197700
         AIF   (N'&FUNCNAME LE 0).NOFUNCNAME                            00197800
         DC    CL8'&XFUNCNAME'                                          00197900
         AGO   .ENTRYFCODES                                        @P2A 00198000
.NOFUNCNAME  ANOP                                                       00198100
         DC    XL8'0000000000000000'                                    00198200
.ENTRYFCODES ANOP                                                  @P2A 00198300
         DC    AL2(&XNUMFCODES)                                         00198400
&WORKA   SETA  N'&FCODES                                                00198500
         DC    AL2(&WORKA)                                              00198600
.* Loop over function codes specified                                   00198700
&FCODINDX  SETA  1                                                      00198800
.CODELOOP  ANOP                                                         00198900
         AIF   (&FCODINDX GT N'&FCODES).CODELOOPDONE                    00199000
         DC    AL1(&FCODES(&FCODINDX))                                  00199100
&FCODINDX  SETA  &FCODINDX+1                                            00199200
         AGO   .CODELOOP                                                00199300
.CODELOOPDONE  ANOP                                                     00199400
.* If max number of codes greater than actual, pad to reserve room      00199500
         AIF   (N'&FCODES GE &XNUMFCODES).NOPAD                         00199600
&FCODINDX  SETA  1                                                      00199700
.PADLOOP ANOP                                                           00199800
         AIF   (&FCODINDX GT &XNUMFCODES-N'&FCODES).PADDONE             00199900
         DC    XL1'00'                                                  00200000
&FCODINDX  SETA  &FCODINDX+1                                            00200100
         AGO   .PADLOOP                                                 00200200
.PADDONE ANOP                                                           00200300
.NOPAD   ANOP                                                           00200400
.********************************************************************** 00200500
.*  Update table values                                                 00200600
.********************************************************************** 00200700
&IEFSSVTI_#FRTN  SETA  &IEFSSVTI_#FRTN+1                                00200800
&IEFSSVTI_TABLE_LENGTH  SETA  &IEFSSVTI_TABLE_LENGTH+&IEFSSVTI_ENTRY_HE+00200900
               ADLEN+&XNUMFCODES                                        00201000
.NOENTRY ANOP                                                           00201100
         AGO   .IEFSSVTIEND                                             00201200
.TYPEFINAL     ANOP                                                     00201300
.********************************************************************** 00201400
.*  Check for invocation errors                                         00201500
.********************************************************************** 00201600
         AIF   (&IEFSSVTI_INITIAL_SEEN EQ 1).CHECKENTRYSEEN             00201700
         MNOTE 8,'TYPE=INITIAL MUST PRECEDE TYPE=FINAL'                 00201800
&ZMACRET SETA  8                                                        00201900
.*                                                                      00202000
.CHECKENTRYSEEN  ANOP                                                   00202100
         AIF   (&IEFSSVTI_ENTRY_SEEN EQ 1).FINALTABLEVALUES             00202200
         MNOTE 8,' TABLE MUST INCLUDE AT LEAST ONE TYPE=ENTRY'          00202300
&ZMACRET SETA  8                                                        00202400
.*                                                                      00202500
.FINALTABLEVALUES  ANOP                                                 00202600
.********************************************************************** 00202700
.*  Update table values                                                 00202800
.********************************************************************** 00202900
&IEFSSVTI_INITIAL_SEEN  SETB  0                                         00203000
&IEFSSVTI_ENTRY_SEEN    SETB  0                                         00203100
         AIF   (&ZMACRET NE 0).NOFINAL                                  00203200
.********************************************************************** 00203300
.*  Terminate table and generate necessary constants                    00203400
.********************************************************************** 00203500
&IEFSSVTI_TABLEN_NAME EQU  &IEFSSVTI_TABLE_LENGTH                       00203600
&IEFSSVTI_#FRTN_NAME  EQU  &IEFSSVTI_#FRTN                              00203700
&IEFSSVTI_TABLE_NAME._END  DS    0F                                     00203800
.NOFINAL ANOP                                                           00203900
         AGO   .IEFSSVTIEND                                             00204000
.TYPESET       ANOP                                                     00204100
.********************************************************************** 00204200
.*  Check for invocation errors                                         00204300
.********************************************************************** 00204400
         AIF   (&IEFSSVTI_INITIAL_SEEN EQ 0).PROCESSSET                 00204500
         MNOTE 8,'TYPE=SET CANNOT BE USED WITHIN STATIC TABLE'          00204600
&ZMACRET SETA  8                                                        00204700
.*                                                                      00204800
.PROCESSSET  ANOP                                                       00204900
         AIF   (&ZMACRET NE 0).NOSET                                    00205000
.********************************************************************** 00205100
.*  Locate target entry                                                 00205200
.********************************************************************** 00205300
         CNOP  0,4                                                      00205400
         LA    1,&XSOURCE                                               00205500
         SR    15,15                                                    00205600
         ICM   15,3,VTIH_NUM_FRTNS-VTI_HEADER(1)                        00205700
         AIF   ('&XENTRYDATA'(1,1) NE '(').EDATANOTREG                  00205800
&WORKC   SETC  '&XENTRYDATA'(2,K'&XENTRYDATA-2)                         00205900
         LR    0,&WORKC                                                 00206000
         AGO   .EDATACOMPARE                                            00206100
.EDATANOTREG   ANOP                                                     00206200
&WORKC   SETC  '&XENTRYDATA'(1,1)                                       00206300
         AIF   (T'&WORKC NE 'N').EDATANOTNUM                            00206400
         LA    0,&XENTRYDATA                                            00206500
         AGO   .EDATACOMPARE                                            00206600
.EDATANOTNUM   ANOP                                                     00206700
         L     0,&XENTRYDATA                                            00206800
.EDATACOMPARE  ANOP                                                     00206900
         CR    15,0                                                     00207000
         BL    VTINOSET&SYSNDX                                          00207100
         LA    1,VTIH_FROUTINE_DATA-VTI_HEADER(1)                       00207200
         USING VTI_ENTRY,1                                              00207300
         LA    15,1                                                     00207400
VTIEDLST&SYSNDX  DS  0H                                                 00207500
         CR    15,0                                                     00207600
         BE    VTIEDLEND&SYSNDX                                         00207700
         SR    14,14                                                    00207800
         ICM   14,3,VTIE_MAX_NUM_FCODES                                 00207900
         AR    1,14                                                     00208000
&WORKC   SETC  '&IEFSSVTI_ENTRY_HEADLEN'.'(1)'                          00208100
         LA    1,&WORKC                                                 00208200
         LA    15,1(15)                                                 00208300
         B     VTIEDLST&SYSNDX                                          00208400
VTIEDLEND&SYSNDX  DS  0H                                                00208500
         DROP  1                                                        00208600
         LA    15,&XSOURCE                                              00208700
         SR    1,15                                                     00208800
         LA    15,&XSSVTDATA                                            00208900
         AR    1,15                                                     00209000
         USING VTI_ENTRY,1                                              00209100
.********************************************************************** 00209200
.*  Set function routine data (name or address), if requested           00209300
.********************************************************************** 00209400
         AIF   (N'&FUNCNAME LE 0).SETNOFUNCNAME                         00209500
         MVC   VTIE_FUNCNAME(8),&XFUNCNAME                              00209600
         AGO   .SETFCODE                                                00209700
.SETNOFUNCNAME  ANOP                                                    00209800
         AIF   (N'&FUNCADDR LE 0).SETNOFUNCADDR                         00209900
         MVC   VTIE_FUNCNAME(4),=X'00000000'                            00210000
         MVC   VTIE_FUNCADDR(4),&XFUNCADDR                              00210100
         AIF   (N'&FUNCAMODE LE 0).SETNOAMODE                           00210200
         AIF   ('&XFUNCAMODE' EQ '24').SETAMODE24                       00210300
         OC    VTIE_FUNCADDR(4),=X'80000000'                            00210400
         AGO   .SETFCODE                                                00210500
.SETAMODE24     ANOP                                                    00210600
         NC    VTIE_FUNCADDR(4),=X'7FFFFFFF'                            00210700
         AGO   .SETFCODE                                                00210800
.SETNOAMODE     ANOP                                                    00210900
.SETNOFUNCADDR  ANOP                                                    00211000
.SETFCODE       ANOP                                                    00211100
.********************************************************************** 00211200
.*  Set function code data, if requested                                00211300
.********************************************************************** 00211400
         AIF   (N'&FCODES LE 0).SETNOFCODEDATA                          00211500
&WORKA   SETA  N'&FCODES                                                00211600
         LA    15,&WORKA                                                00211700
         SR    0,0                                                      00211800
         ICM   0,3,VTIE_MAX_NUM_FCODES                                  00211900
         CR    15,0                                                     00212000
         BH    VTINOFCODE&SYSNDX                                        00212100
&FCODINDX  SETA  1                                                      00212200
.SETCODELOOP  ANOP                                                      00212300
         AIF   (&FCODINDX GT N'&FCODES).SETCODELOOPDONE                 00212400
         MVI   VTIE_FCODES+(&FCODINDX-1)*1,&FCODES(&FCODINDX)           00212500
&FCODINDX  SETA  &FCODINDX+1                                            00212600
         AGO   .SETCODELOOP                                             00212700
.SETCODELOOPDONE  ANOP                                                  00212800
         STCM  15,3,VTIE_NUM_FCODES                                @P1A 00212900
VTINOFCODE&SYSNDX  DS  0H                                               00213000
.SETNOFCODEDATA  ANOP                                                   00213100
         DROP  1                                                        00213200
VTINOSET&SYSNDX  DS  0H                                                 00213300
.NOSET   ANOP                                                           00213400
         AGO   .IEFSSVTIEND                                             00213500
.TYPERESERVE   ANOP                                                     00213600
.********************************************************************** 00213700
.*  Check for invocation errors                                         00213800
.********************************************************************** 00213900
         AIF   (&IEFSSVTI_INITIAL_SEEN EQ 0).PROCESSRESERVE             00214000
         MNOTE 8,'TYPE=RESERVE CANNOT BE USED WITHIN STATIC TABLE'      00214100
&ZMACRET SETA  8                                                        00214200
.*                                                                      00214300
.PROCESSRESERVE  ANOP                                                   00214400
         AIF   (&ZMACRET NE 0).NORESERVE                                00214500
.********************************************************************** 00214600
.*  Generate instructions to reserve storage.  If MAXFCODES was         00214700
.*  specified, reserve the maximum amount of storage assuming one       00214800
.*  function routine per 1-byte function code.                          00214900
.********************************************************************** 00215000
         AIF   (N'&TABLEN LE 0).MAXFCODES                               00215100
&XSSVTDATA DS  CL(&XTABLEN)                                             00215200
         AGO   .RESERVEDONE                                             00215300
.MAXFCODES     ANOP                                                     00215400
.* Reserve maximum needed storage                                       00215500
&WORKC   SETC  '&IEFSSVTI_HEADLEN'.'+'.'&XMAXFCODES'.'*'                00215600
&WORKC   SETC  '&WORKC'.'('.'&IEFSSVTI_ENTRY_HEADLEN'.'+1*1)'           00215700
&XSSVTDATA DS  CL(&WORKC)                                               00215800
.RESERVEDONE   ANOP                                                     00215900
.NORESERVE     ANOP                                                     00216000
         AGO   .IEFSSVTIEND                                             00216100
.TYPECOPY      ANOP                                                     00216200
.********************************************************************** 00216300
.*  Check for invocation errors                                         00216400
.********************************************************************** 00216500
         AIF   (&IEFSSVTI_INITIAL_SEEN EQ 0).PROCESSCOPY                00216600
         MNOTE 8,'TYPE=COPY CANNOT BE USED WITHIN STATIC TABLE'         00216700
&ZMACRET SETA  8                                                        00216800
.*                                                                      00216900
.PROCESSCOPY   ANOP                                                     00217000
         AIF   (&ZMACRET NE 0).NOCOPY                                   00217100
.********************************************************************** 00217200
.*  Generate executable code to copy table using MVCL                   00217300
.********************************************************************** 00217400
         CNOP  0,4                                                      00217500
         LA    14,&XSOURCE                                              00217600
         SR    15,15                                                    00217700
         ICM   15,3,VTIH_TABLEN-VTI_HEADER(14)                          00217800
         LA    0,&XSSVTDATA                                             00217900
         LR    1,15                                                     00218000
         MVCL  0,14                                                     00218100
.NOCOPY        ANOP                                                     00218200
         AGO   .IEFSSVTIEND                                             00218300
.IEFSSVTIEND   ANOP                                                     00218400
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00218500
.********************************************************************   00218600
.***AL.A01  INTERNAL ARRAY TO PRODUCE FORMATTED CODE                    00218700
.********************************************************************   00218800
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00218900
                      LCLA  &ZOPN1         INVOCATION INDEX             00219000
                      LCLC  &ZOPL(4095)    LABEL                        00219100
                      LCLC  &ZOPO(4095)    OPERATION                    00219200
                      LCLC  &ZOPV(4095)    VALUE                        00219300
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00219400
.*                                                                      00219500
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00219600
.*******************************************************************    00219700
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00219800
.*******************************************************************    00219900
                      ACTR  10000                                       00220000
.*                                                                      00220100
                      LCLA  &ZLC           COLUMN POSITION              00220200
                      LCLA  &ZOPX          LIST TABLE INDEX             00220300
                      LCLC  &ZLL           LABEL                        00220400
                      LCLC  &ZLOP          OPERATION                    00220500
                      LCLC  &ZLV           VALUE                        00220600
                      LCLC  &ZLD           DESCRIPTION                  00220700
.*                                                                      00220800
&ZOPX                 SETA  1                                           00220900
.*******************************************************************    00221000
.***AP.X01  FORMAT GENERATED CODE                                       00221100
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00221200
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00221300
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00221400
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00221500
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00221600
                      AIF   (K'&ZLD LE 0).ZL51                          00221700
&ZLC                  SETA  35             COMMENT COLUMN               00221800
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00221900
&ZLC                  SETA  33             COMMENT COLUMN               00222000
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00222100
&ZLV                  SETC  '&ZLV'.' '                                  00222200
                      AGO   .ZL31                                       00222300
.*                                                                      00222400
.ZL41                 ANOP  ,                                           00222500
&ZLV                  SETC  '&ZLV'.' '                                  00222600
.ZL51                 ANOP  ,                                           00222700
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00222800
.*                                                                      00222900
&ZLL     &ZLOP &ZLV                                                     00223000
.*                                                                      00223100
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00223200
                      AGO   .ZL21          CONTINUE LOOPING             00223300
.*                                                                      00223400
.ZLX1                 ANOP  ,                                           00223500
.*******************************************************************    00223600
.***AP.X02  END OF IEFSSVTI MACRO                                       00223700
&ZIEFSSVTI            SETC  'YES'          SET IEFSSVTI USED            00223800
         POP   PRINT                                                    00223900
*                                            IEFSSVTI-1                 00224000
         SPACE 1                                                        00224100
.ZLX2                 ANOP  ,                                           00224200
         MEND                                                           00224300
**********************************************************************/ 00224400
*/**** START OF SPECIFICATIONS **************************************** 00224500
*                                                                     * 00224600
*                                                                     * 00224700
*01* MACRO NAME:  IEFSSVTI                              -94/04/14-<1> * 00224800
*                                                                     * 00224900
*                                                                     * 00225000
*01* DESCRIPTIVE NAME:  Subsystem Vector Table Input Macro            * 00225100
*                                                                     * 00225200
*01* PROPRIETARY STATEMENT:                                           * 00225300
*                                                                     * 00225400
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00225500
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00225600
*     5655-068 (C) COPYRIGHT IBM CORP. 1994                           * 00225700
*                                                                     * 00225800
* STATUS= HBB5520                                                     * 00225900
*                                                                     * 00226000
*                                                                     * 00226100
*                                                                     * 00226200
*01* FUNCTION:                                                        * 00226300
*       See the IEFSSVTI macro prologue for details.                  * 00226400
*                                                                     * 00226500
*01* INPUT:                                                           * 00226600
*                                                                     * 00226700
*            ?IEFSSVTI    TYPE(LIST)                                 * 00226800
*                         TYPE(INITIAL)                              * 00226900
*                        |     SSVTDATA(xssvtdata)                    * 00227000
*                        |     TABLEN(xtablen)                        * 00227100
*                         TYPE(ENTRY)                                * 00227200
*                        |   [FUNCNAME(xfuncname)                  * 00227300
*                        |    FUNCADDR(xfuncaddr)]                 * 00227400
*                        |     NUMFCODES(xnumfcodes)                  * 00227500
*                        |    [FCODES(xfcodes[,xfcodes...]|0)]      * 00227600
*                         TYPE(FINAL)                                * 00227700
*                         TYPE(SET)                                  * 00227800
*                        |     SSVTDATA(xssvtdata)                    * 00227900
*                        |     SOURCE(xsource)                        * 00228000
*                        |     ENTRYDATA(xentrydata)                  * 00228100
*                        |   [FUNCNAME(xfuncname)                  * 00228200
*                        |    FUNCADDR(xfuncaddr)                  * 00228300
*                        |        [FUNCAMODE(HOB|31|24)]]           * 00228400
*                        |    [FCODES(xfcodes[,xfcodes...]|0)]      * 00228500
*                         TYPE(RESERVE)                              * 00228600
*                        |     SSVTDATA(xssvtdata)                    * 00228700
*                        |    TABLEN(xtablen)                        * 00228800
*                        |    MAXFCODES(xmaxfcodes)                  * 00228900
*                         TYPE(COPY)                                 * 00229000
*                              SSVTDATA(xssvtdata)                    * 00229100
*                              SOURCE(xsource)                        * 00229200
*                                                                     * 00229300
****** END OF SPECIFICATIONS *****************************************/ 00229400
*/********************************************************************/ 00229500
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00229600
*/********************************************************************/ 00229700
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00229800
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00229900
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00230000
*                                                                       00230100
*  DCL   ZIEFSSVTI CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */ 00230200
*  DEACT ZIEFSSVTI;                                                     00230300
*                                                                       00230400
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00230500
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00230600
*                                                                       00230700
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00230800
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00230900
*                                                                       00231000
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00231100
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00231200
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00231300
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00231400
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00231500
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00231600
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00231700
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00231800
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00231900
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00232000
*                                                                       00232100
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00232200
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00232300
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00232400
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00232500
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00232600
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00232700
*/*******************************************************************/  00232800
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00232900
*/*******************************************************************/  00233000
*  DCL XTYPE;  DEACT XTYPE;        /***PV.XVAR02 INPUT VALUE */         00233100
*  DCL ZXTYPE; DEACT ZXTYPE;       /***INPUT/OUTPUT CONTROL */          00233200
*  DCL XSSVTDATA;  DEACT XSSVTDATA;  /***PV.XVAR02 INPUT NAME */        00233300
*  DCL ZXSSVTDATA; DEACT ZXSSVTDATA;  /***INPUT/OUTPUT CONTROL */       00233400
*  DCL XTABLEN;  DEACT XTABLEN;    /***PV.XVAR02 INPUT NAME */          00233500
*  DCL ZXTABLEN; DEACT ZXTABLEN;   /***INPUT/OUTPUT CONTROL */          00233600
*  DCL XFUNCRTN;  DEACT XFUNCRTN;  /***PV.XVAR02 INPUT NAME */          00233700
*  DCL ZXFUNCRTN; DEACT ZXFUNCRTN;  /***INPUT/OUTPUT CONTROL */         00233800
*  DCL XFUNCNAME;  DEACT XFUNCNAME;  /***PV.XVAR02 INPUT NAME */        00233900
*  DCL ZXFUNCNAME; DEACT ZXFUNCNAME;  /***INPUT/OUTPUT CONTROL */       00234000
*  DCL XFUNCADDR;  DEACT XFUNCADDR;  /***PV.XVAR02 INPUT NAME */        00234100
*  DCL ZXFUNCADDR; DEACT ZXFUNCADDR;  /***INPUT/OUTPUT CONTROL */       00234200
*  DCL   XNUMFCODES;               /***PV.XVAR03 INPUT VALUE */         00234300
*  DEACT XNUMFCODES;               /***PV.XVAR03 INPUT VALUE */         00234400
*  DCL   ZXNUMFCODES;              /***INPUT/OUTPUT CONTROL */          00234500
*  DEACT ZXNUMFCODES;              /***INPUT/OUTPUT CONTROL */          00234600
*  DCL XFCODES(255) CHAR;          /***PV.XVAR04 INPUT NAME ARRAY */    00234700
*  DCL ZXFCODES; DEACT ZXFCODES;   /***INPUT/OUTPUT CONTROL */          00234800
*  DCL XSOURCE;  DEACT XSOURCE;    /***PV.XVAR02 INPUT NAME */          00234900
*  DCL ZXSOURCE; DEACT ZXSOURCE;   /***INPUT/OUTPUT CONTROL */          00235000
*  DCL   XENTRYDATA;               /***PV.XVAR03 INPUT NAME */          00235100
*  DEACT XENTRYDATA;               /***PV.XVAR03 INPUT NAME */          00235200
*  DCL   ZXENTRYDATA;              /***INPUT/OUTPUT CONTROL */          00235300
*  DEACT ZXENTRYDATA;              /***INPUT/OUTPUT CONTROL */          00235400
*  DCL   XFUNCAMODE;               /***PV.XVAR03 INPUT VALUE */         00235500
*  DEACT XFUNCAMODE;               /***PV.XVAR03 INPUT VALUE */         00235600
*  DCL   ZXFUNCAMODE;              /***INPUT/OUTPUT CONTROL */          00235700
*  DEACT ZXFUNCAMODE;              /***INPUT/OUTPUT CONTROL */          00235800
*  DCL   XRESERVE_LEN;             /***PV.XVAR03 INPUT NAME */          00235900
*  DEACT XRESERVE_LEN;             /***PV.XVAR03 INPUT NAME */          00236000
*  DCL   ZXRESERVE_LEN;            /***INPUT/OUTPUT CONTROL */          00236100
*  DEACT ZXRESERVE_LEN;            /***INPUT/OUTPUT CONTROL */          00236200
*  DCL   XMAXFCODES;               /***PV.XVAR03 INPUT NAME */          00236300
*  DEACT XMAXFCODES;               /***PV.XVAR03 INPUT NAME */          00236400
*  DCL   ZXMAXFCODES;              /***INPUT/OUTPUT CONTROL */          00236500
*  DEACT ZXMAXFCODES;              /***INPUT/OUTPUT CONTROL */          00236600
*/********************************************************************/ 00236700
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00236800
*/********************************************************************/ 00236900
*  ZC='OFF';                                 /* DEFAULT FLAG OFF */     00237000
*/********************************************************************/ 00237100
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00237200
*/********************************************************************/ 00237300
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00237400
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00237500
*    THEN                                                               00237600
*      DO;                                                              00237700
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'|| /**PPOSP* MSG*/            00237800
*            ' "'||MACLIST||'"'||                                       00237900
*            ' CANNOT BE USED.'||                                       00238000
*            ' NO POSITIONAL ARGUMENTS'||                               00238100
*            ' ARE ALLOWED.';                                           00238200
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00238300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00238400
*        ZMACRET=8;                          /* MACRO ERROR */          00238500
*      END;                                                             00238600
*/*PG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00238700
*  XTYPE='';                                                            00238800
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00238900
*  IF TYPE(1)='LIST'                         /* CHECK FOR KEYWORD */    00239000
*     | TYPE(1)=''                           /* CHECK FOR NULL */       00239100
*    THEN                                                               00239200
*      DO;                                                              00239300
*        XTYPE='LIST';                       /* SET XVARIABLE */        00239400
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00239500
*          THEN                                                         00239600
*            DO;                                                        00239700
*              ZMS=' 8, "TYPE'||             /**KPOSP* MSG*/            00239800
*                  TYPE||                                               00239900
*                  '" "TYPE"'||                                         00240000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00240100
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00240200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00240300
*              ZMACRET=8;                    /* MACRO ERROR */          00240400
*            END;                                                       00240500
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00240600
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00240700
*        IF SSVTDATA^=''                     /* CHECK FOR KEY */        00240800
*          THEN                                                         00240900
*            ZCVAL=ZCVAL||',SSVTDATA';       /* INCORRECT KEY USED */   00241000
*        IF TABLEN^=''                       /* CHECK FOR KEY */        00241100
*          THEN                                                         00241200
*            ZCVAL=ZCVAL||',TABLEN';         /* INCORRECT KEY USED */   00241300
*        IF FUNCNAME^=''                     /* CHECK FOR KEY */        00241400
*          THEN                                                         00241500
*            ZCVAL=ZCVAL||',FUNCNAME';       /* INCORRECT KEY USED */   00241600
*        IF FUNCADDR^=''                     /* CHECK FOR KEY */        00241700
*          THEN                                                         00241800
*            ZCVAL=ZCVAL||',FUNCADDR';       /* INCORRECT KEY USED */   00241900
*        IF NUMFCODES^=''                    /* CHECK FOR KEY */        00242000
*          THEN                                                         00242100
*            ZCVAL=ZCVAL||',NUMFCODES';      /* INCORRECT KEY USED */   00242200
*        IF FCODES^=''                       /* CHECK FOR KEY */        00242300
*          THEN                                                         00242400
*            ZCVAL=ZCVAL||',FCODES';         /* INCORRECT KEY USED */   00242500
*        IF SOURCE^=''                       /* CHECK FOR KEY */        00242600
*          THEN                                                         00242700
*            ZCVAL=ZCVAL||',SOURCE';         /* INCORRECT KEY USED */   00242800
*        IF ENTRYDATA^=''                    /* CHECK FOR KEY */        00242900
*          THEN                                                         00243000
*            ZCVAL=ZCVAL||',ENTRYDATA';      /* INCORRECT KEY USED */   00243100
*        IF FUNCAMODE^=''                    /* CHECK FOR KEY */        00243200
*          THEN                                                         00243300
*            ZCVAL=ZCVAL||',FUNCAMODE';      /* INCORRECT KEY USED */   00243400
*        IF MAXFCODES^=''                    /* CHECK FOR KEY */        00243500
*          THEN                                                         00243600
*            ZCVAL=ZCVAL||',MAXFCODES';      /* INCORRECT KEY USED */   00243700
*        IF ZCVAL^=''                                                   00243800
*          THEN                                                         00243900
*            DO;                             /* INCORRECT KEYS USED */  00244000
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00244100
*              ZMS=' 8, "TYPE'||             /**KMEIP* MSG*/            00244200
*                  TYPE||'"'||                                          00244300
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00244400
*                  ' FOLLOWING KEY(S) "'||                              00244500
*                  ZCVAL||'".';                                         00244600
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00244700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00244800
*              ZMACRET=8;                    /* MACRO ERROR */          00244900
*            END;                                                       00245000
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00245100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00245200
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00245300
*  IF TYPE(1)='INITIAL'                      /* CHECK FOR KEYWORD */    00245400
*    THEN                                                               00245500
*      DO;                                                              00245600
*        XTYPE='INITIAL';                    /* SET XVARIABLE */        00245700
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00245800
*          THEN                                                         00245900
*            DO;                                                        00246000
*              ZMS=' 8, "TYPE'||             /**KPOSP* MSG*/            00246100
*                  TYPE||                                               00246200
*                  '" "TYPE"'||                                         00246300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00246400
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00246500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00246600
*              ZMACRET=8;                    /* MACRO ERROR */          00246700
*            END;                                                       00246800
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00246900
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00247000
*        IF FUNCNAME^=''                     /* CHECK FOR KEY */        00247100
*          THEN                                                         00247200
*            ZCVAL=ZCVAL||',FUNCNAME';       /* INCORRECT KEY USED */   00247300
*        IF FUNCADDR^=''                     /* CHECK FOR KEY */        00247400
*          THEN                                                         00247500
*            ZCVAL=ZCVAL||',FUNCADDR';       /* INCORRECT KEY USED */   00247600
*        IF NUMFCODES^=''                    /* CHECK FOR KEY */        00247700
*          THEN                                                         00247800
*            ZCVAL=ZCVAL||',NUMFCODES';      /* INCORRECT KEY USED */   00247900
*        IF FCODES^=''                       /* CHECK FOR KEY */        00248000
*          THEN                                                         00248100
*            ZCVAL=ZCVAL||',FCODES';         /* INCORRECT KEY USED */   00248200
*        IF SOURCE^=''                       /* CHECK FOR KEY */        00248300
*          THEN                                                         00248400
*            ZCVAL=ZCVAL||',SOURCE';         /* INCORRECT KEY USED */   00248500
*        IF ENTRYDATA^=''                    /* CHECK FOR KEY */        00248600
*          THEN                                                         00248700
*            ZCVAL=ZCVAL||',ENTRYDATA';      /* INCORRECT KEY USED */   00248800
*        IF FUNCAMODE^=''                    /* CHECK FOR KEY */        00248900
*          THEN                                                         00249000
*            ZCVAL=ZCVAL||',FUNCAMODE';      /* INCORRECT KEY USED */   00249100
*        IF MAXFCODES^=''                    /* CHECK FOR KEY */        00249200
*          THEN                                                         00249300
*            ZCVAL=ZCVAL||',MAXFCODES';      /* INCORRECT KEY USED */   00249400
*        IF ZCVAL^=''                                                   00249500
*          THEN                                                         00249600
*            DO;                             /* INCORRECT KEYS USED */  00249700
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00249800
*              ZMS=' 8, "TYPE'||             /**KMEIP* MSG*/            00249900
*                  TYPE||'"'||                                          00250000
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00250100
*                  ' FOLLOWING KEY(S) "'||                              00250200
*                  ZCVAL||'".';                                         00250300
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00250400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00250500
*              ZMACRET=8;                    /* MACRO ERROR */          00250600
*            END;                                                       00250700
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00250800
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00250900
*    THEN                                                               00251000
*      DO;                                                              00251100
*        ZMS=' 8, "SSVTDATA'||               /**KPOSP* MSG*/            00251200
*            SSVTDATA||                                                 00251300
*            '" "SSVTDATA"'||                                           00251400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00251500
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00251600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00251700
*        ZMACRET=8;                          /* MACRO ERROR */          00251800
*      END;                                                             00251900
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00252000
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00252100
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00252200
*   THEN                                                                00252300
*    DO;                                     /* KEY IS REQUIRED */      00252400
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00252500
*        ZMS=' 8,  '||                                                  00252600
*            ' "SSVTDATA" KEY AND ITS ARGUMENT'||                       00252700
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00252800
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00252900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00253000
*        ZMACRET=8;                          /* MACRO ERROR */          00253100
*    END;                                                               00253200
*  ELSE                                                                 00253300
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00253400
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00253500
*  IF NUMBER(TABLEN)>1                       /* CHECK POSITIONALS */    00253600
*    THEN                                                               00253700
*      DO;                                                              00253800
*        ZMS=' 8, "TABLEN'||                 /**KPOSP* MSG*/            00253900
*            TABLEN||                                                   00254000
*            '" "TABLEN"'||                                             00254100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00254200
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00254300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00254400
*        ZMACRET=8;                          /* MACRO ERROR */          00254500
*      END;                                                             00254600
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00254700
*  XTABLEN=TABLEN(1);                        /* SET XVARIABLE */        00254800
*  IF TABLEN(1)=''                           /* CHECK FOR NULL */       00254900
*   THEN                                                                00255000
*    DO;                                     /* KEY IS REQUIRED */      00255100
*        ZXTABLEN='';                        /* RESET IN/OUTPUT */      00255200
*        ZMS=' 8,  '||                                                  00255300
*            ' "TABLEN" KEY AND ITS ARGUMENT'||                         00255400
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00255500
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00255600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00255700
*        ZMACRET=8;                          /* MACRO ERROR */          00255800
*    END;                                                               00255900
*  ELSE                                                                 00256000
*    ZXTABLEN='INPUT';                       /* SET IN/OUTPUT */        00256100
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00256200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00256300
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00256400
*  IF TYPE(1)='ENTRY'                        /* CHECK FOR KEYWORD */    00256500
*    THEN                                                               00256600
*      DO;                                                              00256700
*        XTYPE='ENTRY';                      /* SET XVARIABLE */        00256800
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00256900
*          THEN                                                         00257000
*            DO;                                                        00257100
*              ZMS=' 8, "TYPE'||             /**KPOSP* MSG*/            00257200
*                  TYPE||                                               00257300
*                  '" "TYPE"'||                                         00257400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00257500
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00257600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00257700
*              ZMACRET=8;                    /* MACRO ERROR */          00257800
*            END;                                                       00257900
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00258000
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00258100
*        IF SSVTDATA^=''                     /* CHECK FOR KEY */        00258200
*          THEN                                                         00258300
*            ZCVAL=ZCVAL||',SSVTDATA';       /* INCORRECT KEY USED */   00258400
*        IF TABLEN^=''                       /* CHECK FOR KEY */        00258500
*          THEN                                                         00258600
*            ZCVAL=ZCVAL||',TABLEN';         /* INCORRECT KEY USED */   00258700
*        IF SOURCE^=''                       /* CHECK FOR KEY */        00258800
*          THEN                                                         00258900
*            ZCVAL=ZCVAL||',SOURCE';         /* INCORRECT KEY USED */   00259000
*        IF ENTRYDATA^=''                    /* CHECK FOR KEY */        00259100
*          THEN                                                         00259200
*            ZCVAL=ZCVAL||',ENTRYDATA';      /* INCORRECT KEY USED */   00259300
*        IF FUNCAMODE^=''                    /* CHECK FOR KEY */        00259400
*          THEN                                                         00259500
*            ZCVAL=ZCVAL||',FUNCAMODE';      /* INCORRECT KEY USED */   00259600
*        IF MAXFCODES^=''                    /* CHECK FOR KEY */        00259700
*          THEN                                                         00259800
*            ZCVAL=ZCVAL||',MAXFCODES';      /* INCORRECT KEY USED */   00259900
*        IF ZCVAL^=''                                                   00260000
*          THEN                                                         00260100
*            DO;                             /* INCORRECT KEYS USED */  00260200
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00260300
*              ZMS=' 8, "TYPE'||             /**KMEIP* MSG*/            00260400
*                  TYPE||'"'||                                          00260500
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00260600
*                  ' FOLLOWING KEY(S) "'||                              00260700
*                  ZCVAL||'".';                                         00260800
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00260900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00261000
*              ZMACRET=8;                    /* MACRO ERROR */          00261100
*            END;                                                       00261200
*/*PG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00261300
*  XFUNCRTN='';                              /* RESET XVARIABLE */      00261400
*  IF FUNCNAME^=''                           /* CHECK ME KEY */         00261500
*    THEN                                                               00261600
*      DO;                                   /* VALID ME KEY */         00261700
*        IF NUMBER(FUNCNAME)>1               /* CHECK SUBLISTS */       00261800
*          THEN                                                         00261900
*            DO;                                                        00262000
*              ZMS=' 8, "FUNCNAME'||         /**KPOSP* MSG*/            00262100
*                  FUNCNAME||                                           00262200
*                  '" "FUNCNAME"'||                                     00262300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00262400
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00262500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00262600
*              ZMACRET=8;                    /* MACRO ERROR */          00262700
*            END;                                                       00262800
*        XFUNCRTN='FUNCNAME';                /* SET XVARIABLE */        00262900
*        XFUNCNAME=FUNCNAME(1);              /* SET XVARIABLE */        00263000
*        ZXFUNCRTN='INPUT';                  /* SET IN/OUTPUT */        00263100
*        ZXFUNCNAME='INPUT';                 /* SET IN/OUTPUT */        00263200
*        IF FUNCNAME(1)=''                   /* CHECK ME KEY */         00263300
*          THEN                                                         00263400
*            DO;                                                        00263500
*              ZXFUNCRTN='';                 /* RESET IN/OUTPUT */      00263600
*              ZXFUNCNAME='';                /* RESET IN/OUTPUT */      00263700
*              ZMS=' 8, THE "FUNCNAME" KEY'|| /**KOPTP* MSG*/           00263800
*                  ' MUST CONTAIN ONE'||                                00263900
*                  ' (OR MORE) ARGUMENT(S).';                           00264000
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00264100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00264200
*              ZMACRET=8;                    /* MACRO ERROR */          00264300
*           END;                                                        00264400
*      END;                                                             00264500
*/*PG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00264600
*  IF FUNCADDR^=''                           /* CHECK ME KEY */         00264700
*    THEN                                                               00264800
*      DO;                                                              00264900
*        IF NUMBER(FUNCADDR)>1               /* CHECK SUBLISTS */       00265000
*          THEN                                                         00265100
*            DO;                                                        00265200
*              ZMS=' 8, "FUNCADDR'||         /**KPOSP* MSG*/            00265300
*                  FUNCADDR||                                           00265400
*                  '" "FUNCADDR"'||                                     00265500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00265600
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00265700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00265800
*              ZMACRET=8;                    /* MACRO ERROR */          00265900
*            END;                                                       00266000
*        IF XFUNCRTN=''                      /* CHECK XVARIABLE */      00266100
*          THEN                                                         00266200
*            DO;                             /* VALID ME KEY */         00266300
*              XFUNCRTN='FUNCADDR';          /* SET XVAR1 */            00266400
*              XFUNCADDR=FUNCADDR(1);        /* SET XVAR2 */            00266500
*              ZXFUNCRTN='INPUT';            /* SET IN/OUTPUT */        00266600
*              ZXFUNCADDR='INPUT';           /* SET IN/OUTPUT */        00266700
*              IF FUNCADDR(1)=''             /* CHECK ME KEY */         00266800
*                THEN                                                   00266900
*                  DO;                                                  00267000
*                    ZXFUNCRTN='';           /* RESET IN/OUTPUT */      00267100
*                    ZXFUNCADDR='';          /* RESET IN/OUTPUT */      00267200
*                    ZMS=' 8, THE "FUNCADDR" KEY'|| /**KOPTP* MSG*/     00267300
*                        ' MUST CONTAIN ONE'||                          00267400
*                        ' (OR MORE) ARGUMENT(S).';                     00267500
*                    ANS MSG('?IEFSSVTI ---> '||ZMS);                   00267600
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    00267700
*                    ZMACRET=8;              /* MACRO ERROR */          00267800
*                  END;                                                 00267900
*            END;                                                       00268000
*          ELSE                                                         00268100
*            DO;                                                        00268200
*              ZMS=' 8, "FUNCADDR'||         /**KMEKP* MSG*/            00268300
*                  FUNCADDR||'"'||                                      00268400
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'||                00268500
*                  XFUNCRTN||                                           00268600
*                  '" KEY.';                                            00268700
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00268800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00268900
*              ZMACRET=8;                    /* MACRO ERROR */          00269000
*            END;                                                       00269100
*      END;                                                             00269200
*/*PG.KMEKY06 NAME, OPT INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 00269300
*  IF XFUNCRTN=''                            /* CHECK XVARIABLE */      00269400
*    THEN                                                               00269500
*      DO;                                                              00269600
*        XFUNCRTN='FUNCNAME';                /* SET DEFAULT */          00269700
*        XFUNCNAME='0';                      /* SET DEFAULT */          00269800
*        ZXFUNCRTN='INPUT';                  /* SET IN/OUTPUT */        00269900
*        ZXFUNCNAME='INPUT';                 /* SET IN/OUTPUT */        00270000
*      END;                                                             00270100
*/*PG.KXVAR01 VALUE, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00270200
*  IF NUMBER(NUMFCODES)>1                    /* CHECK POSITIONALS */    00270300
*    THEN                                                               00270400
*      DO;                                                              00270500
*        ZMS=' 8, "NUMFCODES'||              /**KPOSP* MSG*/            00270600
*            NUMFCODES||                                                00270700
*            '" "NUMFCODES"'||                                          00270800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00270900
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00271000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00271100
*        ZMACRET=8;                          /* MACRO ERROR */          00271200
*      END;                                                             00271300
*/*PG.KXVAR03 VALUE, RQD INPUT, KEYS -XVARIABLE----------------------*/ 00271400
*  XNUMFCODES=NUMFCODES(1);                  /* SET XVARIABLE */        00271500
*  IF NUMFCODES(1)=''                        /* CHECK FOR NULL */       00271600
*   THEN                                                                00271700
*    DO;                                     /* KEY IS REQUIRED */      00271800
*        ZXNUMFCODES='';                     /* RESET IN/OUTPUT */      00271900
*        ZMS=' 8,  '||                                                  00272000
*            ' "NUMFCODES" KEY AND ITS ARGUMENT'||                      00272100
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00272200
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00272300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00272400
*        ZMACRET=8;                          /* MACRO ERROR */          00272500
*    END;                                                               00272600
*  ELSE                                                                 00272700
*    ZXNUMFCODES='INPUT';                    /* SET IN/OUTPUT */        00272800
*/*PG.KCK05 VALUE, RQD INPUT, KEYS -RANGE----------------------------*/ 00272900
*  IF ZXNUMFCODES^=''                        /* NOT IN/OUTPUT */        00273000
*    THEN                                                               00273100
*      DO;                                                              00273200
*        ZCVAL='';                           /* ERROR FLAG */           00273300
*        DO ZL=1 TO LENGTH(XNUMFCODES);      /* MUST BE NUMBER */       00273400
*          IF XNUMFCODES(ZL:ZL)<'0' |        /* MUST BE NUMERIC */      00273500
*             XNUMFCODES(ZL:ZL)>'9'          /* MUST BE NUMERIC */      00273600
*            THEN                                                       00273700
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00273800
*        END;                                                           00273900
*        IF ZCVAL=''                                                    00274000
*          THEN                                                         00274100
*            IF LENGTH(XNUMFCODES)<LENGTH(CHAR(1)) |                    00274200
*              LENGTH(XNUMFCODES)>LENGTH(CHAR(255))                     00274300
*              THEN                                                     00274400
*                ZCVAL='RANGE';              /* RANGE ERROR */          00274500
*        IF ZCVAL=''                                                    00274600
*          THEN                                                         00274700
*            IF LENGTH(XNUMFCODES)=LENGTH(CHAR(1))                      00274800
*              THEN                                                     00274900
*                IF XNUMFCODES<CHAR(1)       /*LOW*/                    00275000
*                  THEN                                                 00275100
*                    ZCVAL='RANGE';          /* RANGE ERROR */          00275200
*        IF ZCVAL=''                                                    00275300
*          THEN                                                         00275400
*            IF LENGTH(XNUMFCODES)=LENGTH(CHAR(255))                    00275500
*              THEN                                                     00275600
*                IF XNUMFCODES>CHAR(255)     /*HIGH*/                   00275700
*                  THEN                                                 00275800
*                    ZCVAL='RANGE';          /* RANGE ERROR */          00275900
*        IF ZCVAL^=''                                                   00276000
*          THEN                                                         00276100
*            DO;                             /* RANGE ERROR */          00276200
*              ZXNUMFCODES='';               /* RESET IN/OUTPUT */      00276300
*              ZMS=' 8, "NUMFCODES '||       /**KRNGP* MSG*/            00276400
*                  NUMFCODES||                                          00276500
*                  '" THE RANGE IS "1-255"'||                           00276600
*                  ' FOR ARGUMENT 1.';                                  00276700
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00276800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00276900
*              ZMACRET=8;                    /* MACRO ERROR */          00277000
*            END;                                                       00277100
*      END;                                                             00277200
*/*PG.KXVAR17 NAME, OPT INPUT, KEYS -MULTIPLE ARGUMENTS--------------*/ 00277300
*  ZXFCODES='INPUT';                         /* SET IN/OUTPUT */        00277400
*  XFCODES(1)='0';                           /* SET DEFAULT */          00277500
*  XFCODES(2)='';                            /* NULL AT ARRAY END */    00277600
*  ZI=0;                                     /* XVARIABLE ARRAY INDEX*/ 00277700
*  IF NUMBER(FCODES)>0                       /* CHECK FOR PARMS */      00277800
*    THEN                                                               00277900
*      DO ZJ=1 TO NUMBER(FCODES);            /* CHECK PARMS */          00278000
*        IF FCODES(ZJ)^=''                   /* CHECK FOR NULL */       00278100
*          THEN                                                         00278200
*            DO;                             /* SELECT NON-NULL PARMS*/ 00278300
*              ZI=ZI+1;                      /* NEXT ARRAY ENTRY */     00278400
*              XFCODES(ZI)=                                             00278500
*                  FCODES(ZJ);               /* GET PARM */             00278600
*              XFCODES(ZI+1)='';             /* NULL AT END */          00278700
*            END;                                                       00278800
*      END;                                                             00278900
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00279000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00279100
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00279200
*  IF TYPE(1)='FINAL'                        /* CHECK FOR KEYWORD */    00279300
*    THEN                                                               00279400
*      DO;                                                              00279500
*        XTYPE='FINAL';                      /* SET XVARIABLE */        00279600
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00279700
*          THEN                                                         00279800
*            DO;                                                        00279900
*              ZMS=' 8, "TYPE'||             /**KPOSP* MSG*/            00280000
*                  TYPE||                                               00280100
*                  '" "TYPE"'||                                         00280200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00280300
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00280400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00280500
*              ZMACRET=8;                    /* MACRO ERROR */          00280600
*            END;                                                       00280700
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00280800
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00280900
*        IF SSVTDATA^=''                     /* CHECK FOR KEY */        00281000
*          THEN                                                         00281100
*            ZCVAL=ZCVAL||',SSVTDATA';       /* INCORRECT KEY USED */   00281200
*        IF TABLEN^=''                       /* CHECK FOR KEY */        00281300
*          THEN                                                         00281400
*            ZCVAL=ZCVAL||',TABLEN';         /* INCORRECT KEY USED */   00281500
*        IF FUNCNAME^=''                     /* CHECK FOR KEY */        00281600
*          THEN                                                         00281700
*            ZCVAL=ZCVAL||',FUNCNAME';       /* INCORRECT KEY USED */   00281800
*        IF FUNCADDR^=''                     /* CHECK FOR KEY */        00281900
*          THEN                                                         00282000
*            ZCVAL=ZCVAL||',FUNCADDR';       /* INCORRECT KEY USED */   00282100
*        IF NUMFCODES^=''                    /* CHECK FOR KEY */        00282200
*          THEN                                                         00282300
*            ZCVAL=ZCVAL||',NUMFCODES';      /* INCORRECT KEY USED */   00282400
*        IF FCODES^=''                       /* CHECK FOR KEY */        00282500
*          THEN                                                         00282600
*            ZCVAL=ZCVAL||',FCODES';         /* INCORRECT KEY USED */   00282700
*        IF SOURCE^=''                       /* CHECK FOR KEY */        00282800
*          THEN                                                         00282900
*            ZCVAL=ZCVAL||',SOURCE';         /* INCORRECT KEY USED */   00283000
*        IF ENTRYDATA^=''                    /* CHECK FOR KEY */        00283100
*          THEN                                                         00283200
*            ZCVAL=ZCVAL||',ENTRYDATA';      /* INCORRECT KEY USED */   00283300
*        IF FUNCAMODE^=''                    /* CHECK FOR KEY */        00283400
*          THEN                                                         00283500
*            ZCVAL=ZCVAL||',FUNCAMODE';      /* INCORRECT KEY USED */   00283600
*        IF MAXFCODES^=''                    /* CHECK FOR KEY */        00283700
*          THEN                                                         00283800
*            ZCVAL=ZCVAL||',MAXFCODES';      /* INCORRECT KEY USED */   00283900
*        IF ZCVAL^=''                                                   00284000
*          THEN                                                         00284100
*            DO;                             /* INCORRECT KEYS USED */  00284200
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00284300
*              ZMS=' 8, "TYPE'||             /**KMEIP* MSG*/            00284400
*                  TYPE||'"'||                                          00284500
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00284600
*                  ' FOLLOWING KEY(S) "'||                              00284700
*                  ZCVAL||'".';                                         00284800
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00284900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00285000
*              ZMACRET=8;                    /* MACRO ERROR */          00285100
*            END;                                                       00285200
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00285300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00285400
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00285500
*  IF TYPE(1)='SET'                          /* CHECK FOR KEYWORD */    00285600
*    THEN                                                               00285700
*      DO;                                                              00285800
*        XTYPE='SET';                        /* SET XVARIABLE */        00285900
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00286000
*          THEN                                                         00286100
*            DO;                                                        00286200
*              ZMS=' 8, "TYPE'||             /**KPOSP* MSG*/            00286300
*                  TYPE||                                               00286400
*                  '" "TYPE"'||                                         00286500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00286600
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00286700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00286800
*              ZMACRET=8;                    /* MACRO ERROR */          00286900
*            END;                                                       00287000
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00287100
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00287200
*        IF TABLEN^=''                       /* CHECK FOR KEY */        00287300
*          THEN                                                         00287400
*            ZCVAL=ZCVAL||',TABLEN';         /* INCORRECT KEY USED */   00287500
*        IF NUMFCODES^=''                    /* CHECK FOR KEY */        00287600
*          THEN                                                         00287700
*            ZCVAL=ZCVAL||',NUMFCODES';      /* INCORRECT KEY USED */   00287800
*        IF MAXFCODES^=''                    /* CHECK FOR KEY */        00287900
*          THEN                                                         00288000
*            ZCVAL=ZCVAL||',MAXFCODES';      /* INCORRECT KEY USED */   00288100
*        IF ZCVAL^=''                                                   00288200
*          THEN                                                         00288300
*            DO;                             /* INCORRECT KEYS USED */  00288400
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00288500
*              ZMS=' 8, "TYPE'||             /**KMEIP* MSG*/            00288600
*                  TYPE||'"'||                                          00288700
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00288800
*                  ' FOLLOWING KEY(S) "'||                              00288900
*                  ZCVAL||'".';                                         00289000
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00289100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00289200
*              ZMACRET=8;                    /* MACRO ERROR */          00289300
*            END;                                                       00289400
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00289500
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00289600
*    THEN                                                               00289700
*      DO;                                                              00289800
*        ZMS=' 8, "SSVTDATA'||               /**KPOSP* MSG*/            00289900
*            SSVTDATA||                                                 00290000
*            '" "SSVTDATA"'||                                           00290100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00290200
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00290300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00290400
*        ZMACRET=8;                          /* MACRO ERROR */          00290500
*      END;                                                             00290600
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00290700
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00290800
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00290900
*   THEN                                                                00291000
*    DO;                                     /* KEY IS REQUIRED */      00291100
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00291200
*        ZMS=' 8,  '||                                                  00291300
*            ' "SSVTDATA" KEY AND ITS ARGUMENT'||                       00291400
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00291500
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00291600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00291700
*        ZMACRET=8;                          /* MACRO ERROR */          00291800
*    END;                                                               00291900
*  ELSE                                                                 00292000
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00292100
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00292200
*  IF NUMBER(SOURCE)>1                       /* CHECK POSITIONALS */    00292300
*    THEN                                                               00292400
*      DO;                                                              00292500
*        ZMS=' 8, "SOURCE'||                 /**KPOSP* MSG*/            00292600
*            SOURCE||                                                   00292700
*            '" "SOURCE"'||                                             00292800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00292900
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00293000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00293100
*        ZMACRET=8;                          /* MACRO ERROR */          00293200
*      END;                                                             00293300
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00293400
*  XSOURCE=SOURCE(1);                        /* SET XVARIABLE */        00293500
*  IF SOURCE(1)=''                           /* CHECK FOR NULL */       00293600
*   THEN                                                                00293700
*    DO;                                     /* KEY IS REQUIRED */      00293800
*        ZXSOURCE='';                        /* RESET IN/OUTPUT */      00293900
*        ZMS=' 8,  '||                                                  00294000
*            ' "SOURCE" KEY AND ITS ARGUMENT'||                         00294100
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00294200
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00294300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00294400
*        ZMACRET=8;                          /* MACRO ERROR */          00294500
*    END;                                                               00294600
*  ELSE                                                                 00294700
*    ZXSOURCE='INPUT';                       /* SET IN/OUTPUT */        00294800
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00294900
*  IF NUMBER(ENTRYDATA)>1                    /* CHECK POSITIONALS */    00295000
*    THEN                                                               00295100
*      DO;                                                              00295200
*        ZMS=' 8, "ENTRYDATA'||              /**KPOSP* MSG*/            00295300
*            ENTRYDATA||                                                00295400
*            '" "ENTRYDATA"'||                                          00295500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00295600
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00295700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00295800
*        ZMACRET=8;                          /* MACRO ERROR */          00295900
*      END;                                                             00296000
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00296100
*  XENTRYDATA=ENTRYDATA(1);                  /* SET XVARIABLE */        00296200
*  IF ENTRYDATA(1)=''                        /* CHECK FOR NULL */       00296300
*   THEN                                                                00296400
*    DO;                                     /* KEY IS REQUIRED */      00296500
*        ZXENTRYDATA='';                     /* RESET IN/OUTPUT */      00296600
*        ZMS=' 8,  '||                                                  00296700
*            ' "ENTRYDATA" KEY AND ITS ARGUMENT'||                      00296800
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00296900
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00297000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00297100
*        ZMACRET=8;                          /* MACRO ERROR */          00297200
*    END;                                                               00297300
*  ELSE                                                                 00297400
*    ZXENTRYDATA='INPUT';                    /* SET IN/OUTPUT */        00297500
*/*PG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00297600
*  XFUNCRTN='';                              /* RESET XVARIABLE */      00297700
*  IF FUNCNAME^=''                           /* CHECK ME KEY */         00297800
*    THEN                                                               00297900
*      DO;                                   /* VALID ME KEY */         00298000
*        IF NUMBER(FUNCNAME)>1               /* CHECK SUBLISTS */       00298100
*          THEN                                                         00298200
*            DO;                                                        00298300
*              ZMS=' 8, "FUNCNAME'||         /**KPOSP* MSG*/            00298400
*                  FUNCNAME||                                           00298500
*                  '" "FUNCNAME"'||                                     00298600
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00298700
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00298800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00298900
*              ZMACRET=8;                    /* MACRO ERROR */          00299000
*            END;                                                       00299100
*        XFUNCRTN='FUNCNAME';                /* SET XVARIABLE */        00299200
*        XFUNCNAME=FUNCNAME(1);              /* SET XVARIABLE */        00299300
*        ZXFUNCRTN='INPUT';                  /* SET IN/OUTPUT */        00299400
*        ZXFUNCNAME='INPUT';                 /* SET IN/OUTPUT */        00299500
*        IF FUNCNAME(1)=''                   /* CHECK ME KEY */         00299600
*          THEN                                                         00299700
*            DO;                                                        00299800
*              ZXFUNCRTN='';                 /* RESET IN/OUTPUT */      00299900
*              ZXFUNCNAME='';                /* RESET IN/OUTPUT */      00300000
*              ZMS=' 8, THE "FUNCNAME" KEY'|| /**KOPTP* MSG*/           00300100
*                  ' MUST CONTAIN ONE'||                                00300200
*                  ' (OR MORE) ARGUMENT(S).';                           00300300
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00300400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00300500
*              ZMACRET=8;                    /* MACRO ERROR */          00300600
*           END;                                                        00300700
*      END;                                                             00300800
*/*PG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00300900
*  IF FUNCADDR^=''                           /* CHECK ME KEY */         00301000
*    THEN                                                               00301100
*      DO;                                                              00301200
*        IF NUMBER(FUNCADDR)>1               /* CHECK SUBLISTS */       00301300
*          THEN                                                         00301400
*            DO;                                                        00301500
*              ZMS=' 8, "FUNCADDR'||         /**KPOSP* MSG*/            00301600
*                  FUNCADDR||                                           00301700
*                  '" "FUNCADDR"'||                                     00301800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00301900
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00302000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00302100
*              ZMACRET=8;                    /* MACRO ERROR */          00302200
*            END;                                                       00302300
*        IF XFUNCRTN=''                      /* CHECK XVARIABLE */      00302400
*          THEN                                                         00302500
*            DO;                             /* VALID ME KEY */         00302600
*              XFUNCRTN='FUNCADDR';          /* SET XVAR1 */            00302700
*              XFUNCADDR=FUNCADDR(1);        /* SET XVAR2 */            00302800
*              ZXFUNCRTN='INPUT';            /* SET IN/OUTPUT */        00302900
*              ZXFUNCADDR='INPUT';           /* SET IN/OUTPUT */        00303000
*              IF FUNCADDR(1)=''             /* CHECK ME KEY */         00303100
*                THEN                                                   00303200
*                  DO;                                                  00303300
*                    ZXFUNCRTN='';           /* RESET IN/OUTPUT */      00303400
*                    ZXFUNCADDR='';          /* RESET IN/OUTPUT */      00303500
*                    ZMS=' 8, THE "FUNCADDR" KEY'|| /**KOPTP* MSG*/     00303600
*                        ' MUST CONTAIN ONE'||                          00303700
*                        ' (OR MORE) ARGUMENT(S).';                     00303800
*                    ANS MSG('?IEFSSVTI ---> '||ZMS);                   00303900
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    00304000
*                    ZMACRET=8;              /* MACRO ERROR */          00304100
*                  END;                                                 00304200
*            END;                                                       00304300
*          ELSE                                                         00304400
*            DO;                                                        00304500
*              ZMS=' 8, "FUNCADDR'||         /**KMEKP* MSG*/            00304600
*                  FUNCADDR||'"'||                                      00304700
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'||                00304800
*                  XFUNCRTN||                                           00304900
*                  '" KEY.';                                            00305000
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00305100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00305200
*              ZMACRET=8;                    /* MACRO ERROR */          00305300
*            END;                                                       00305400
*      END;                                                             00305500
*/*PG.KMEKY06 NAME, OPT INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 00305600
*  IF XFUNCRTN=''                            /* CHECK XVARIABLE */      00305700
*    THEN                                                               00305800
*      DO;                                                              00305900
*        XFUNCRTN='FUNCNAME';                /* SET DEFAULT */          00306000
*        XFUNCNAME='0';                      /* SET DEFAULT */          00306100
*        ZXFUNCRTN='INPUT';                  /* SET IN/OUTPUT */        00306200
*        ZXFUNCNAME='INPUT';                 /* SET IN/OUTPUT */        00306300
*      END;                                                             00306400
*/*PG.KMEKY12 NAME, OPT INPUT, ME KEYS -DISALLOWED KEYS--------------*/ 00306500
*  IF XFUNCRTN='FUNCNAME'                    /* CHECK FOR ME KEY */     00306600
*    THEN                                                               00306700
*      DO;                                   /*DISALLOWED KEYS CHECK */ 00306800
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00306900
*        IF FUNCAMODE^=''                    /* CHECK KEY */            00307000
*          THEN                                                         00307100
*            ZCVAL=ZCVAL||',FUNCAMODE';      /* INCORRECT KEY USED */   00307200
*        IF ZCVAL^=''                                                   00307300
*          THEN                                                         00307400
*            DO;                             /* INCORRECT KEYS USED */  00307500
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00307600
*              ZMS=' 8, "FUNCNAME'||         /**KMEIP* MSG*/            00307700
*                  '"'||                                                00307800
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00307900
*                  ' FOLLOWING KEY(S) "'||                              00308000
*                  ZCVAL||'".';                                         00308100
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00308200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00308300
*              ZMACRET=8;                    /* MACRO ERROR */          00308400
*            END;                                                       00308500
*      END;                                                             00308600
*/*PG.KMEKY11 NAME, OPT INPUT, ME KEYS -START------------------------*/ 00308700
*  IF XFUNCRTN='FUNCADDR'                    /* CHECK FOR ME KEY */     00308800
*    THEN                                                               00308900
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        00309000
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00309100
*  IF FUNCAMODE='FUNCAMODE'                  /* CHECK ENTRY */          00309200
*    THEN                                                               00309300
*      DO;                                                              00309400
*        ZMS=' 8, THE "FUNCAMODE" KEY'||     /**KOPTP* MSG*/            00309500
*            ' MUST CONTAIN ONE'||                                      00309600
*            ' (OR MORE) ARGUMENT(S).';                                 00309700
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00309800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00309900
*        ZMACRET=8;                          /* MACRO ERROR */          00310000
*      END;                                                             00310100
*  IF NUMBER(FUNCAMODE)>1                    /* CHECK POSITIONALS */    00310200
*    THEN                                                               00310300
*      DO;                                                              00310400
*        ZMS=' 8, "FUNCAMODE'||              /**KPOSP* MSG*/            00310500
*            FUNCAMODE||                                                00310600
*            '" "FUNCAMODE"'||                                          00310700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00310800
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00310900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00311000
*        ZMACRET=8;                          /* MACRO ERROR */          00311100
*      END;                                                             00311200
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00311300
*  XFUNCAMODE='';                            /* RESET XVARIABLE */      00311400
*  IF FUNCAMODE(1) = 'HOB'                                              00311500
*    THEN                                                               00311600
*      XFUNCAMODE = 'HOB';                   /* SET XVARIABLE */        00311700
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00311800
*  IF FUNCAMODE(1) = '31'                                               00311900
*    THEN                                                               00312000
*      XFUNCAMODE = '31';                    /* SET XVARIABLE */        00312100
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00312200
*  IF FUNCAMODE(1) = '24'                                               00312300
*    THEN                                                               00312400
*      XFUNCAMODE = '24';                    /* SET XVARIABLE */        00312500
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00312600
*  ZXFUNCAMODE='INPUT';                      /* SET IN/OUTPUT */        00312700
*  IF XFUNCAMODE=''                          /* CHECK FOR KEYWORD */    00312800
*    THEN                                                               00312900
*      DO;                                   /* KEYWORD NOT ENTERED */  00313000
*        XFUNCAMODE='HOB';                   /* SET DEFAULT */          00313100
*        IF FUNCAMODE(1)^=''                                            00313200
*          THEN                                                         00313300
*            DO;                                                        00313400
*              ZXFUNCAMODE='';               /* RESET IN/OUTPUT */      00313500
*              ZMS=' 8, "FUNCAMODE'||        /**KUKWP* MSG*/            00313600
*                  FUNCAMODE||'"'||                                     00313700
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00313800
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00313900
*                  ' "HOB",'||               /* VALID KEYWORD */        00314000
*                  ' "31",'||                /* VALID KEYWORD */        00314100
*                  ' OR "24".';              /* VALID KEYWORD */        00314200
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00314300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00314400
*              ZMACRET=8;                    /* MACRO ERROR */          00314500
*            END;                                                       00314600
*      END;                                                             00314700
*/*PG.KMEKY13 NAME, OPT INPUT, ME KEYS -END--------------------------*/ 00314800
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          00314900
*/*PG.KXVAR17 NAME, OPT INPUT, KEYS -MULTIPLE ARGUMENTS--------------*/ 00315000
*  ZXFCODES='INPUT';                         /* SET IN/OUTPUT */        00315100
*  XFCODES(1)='0';                           /* SET DEFAULT */          00315200
*  XFCODES(2)='';                            /* NULL AT ARRAY END */    00315300
*  ZI=0;                                     /* XVARIABLE ARRAY INDEX*/ 00315400
*  IF NUMBER(FCODES)>0                       /* CHECK FOR PARMS */      00315500
*    THEN                                                               00315600
*      DO ZJ=1 TO NUMBER(FCODES);            /* CHECK PARMS */          00315700
*        IF FCODES(ZJ)^=''                   /* CHECK FOR NULL */       00315800
*          THEN                                                         00315900
*            DO;                             /* SELECT NON-NULL PARMS*/ 00316000
*              ZI=ZI+1;                      /* NEXT ARRAY ENTRY */     00316100
*              XFCODES(ZI)=                                             00316200
*                  FCODES(ZJ);               /* GET PARM */             00316300
*              XFCODES(ZI+1)='';             /* NULL AT END */          00316400
*            END;                                                       00316500
*      END;                                                             00316600
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00316700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00316800
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00316900
*  IF TYPE(1)='RESERVE'                      /* CHECK FOR KEYWORD */    00317000
*    THEN                                                               00317100
*      DO;                                                              00317200
*        XTYPE='RESERVE';                    /* SET XVARIABLE */        00317300
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00317400
*          THEN                                                         00317500
*            DO;                                                        00317600
*              ZMS=' 8, "TYPE'||             /**KPOSP* MSG*/            00317700
*                  TYPE||                                               00317800
*                  '" "TYPE"'||                                         00317900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00318000
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00318100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00318200
*              ZMACRET=8;                    /* MACRO ERROR */          00318300
*            END;                                                       00318400
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00318500
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00318600
*        IF FUNCNAME^=''                     /* CHECK FOR KEY */        00318700
*          THEN                                                         00318800
*            ZCVAL=ZCVAL||',FUNCNAME';       /* INCORRECT KEY USED */   00318900
*        IF FUNCADDR^=''                     /* CHECK FOR KEY */        00319000
*          THEN                                                         00319100
*            ZCVAL=ZCVAL||',FUNCADDR';       /* INCORRECT KEY USED */   00319200
*        IF NUMFCODES^=''                    /* CHECK FOR KEY */        00319300
*          THEN                                                         00319400
*            ZCVAL=ZCVAL||',NUMFCODES';      /* INCORRECT KEY USED */   00319500
*        IF FCODES^=''                       /* CHECK FOR KEY */        00319600
*          THEN                                                         00319700
*            ZCVAL=ZCVAL||',FCODES';         /* INCORRECT KEY USED */   00319800
*        IF SOURCE^=''                       /* CHECK FOR KEY */        00319900
*          THEN                                                         00320000
*            ZCVAL=ZCVAL||',SOURCE';         /* INCORRECT KEY USED */   00320100
*        IF ENTRYDATA^=''                    /* CHECK FOR KEY */        00320200
*          THEN                                                         00320300
*            ZCVAL=ZCVAL||',ENTRYDATA';      /* INCORRECT KEY USED */   00320400
*        IF FUNCAMODE^=''                    /* CHECK FOR KEY */        00320500
*          THEN                                                         00320600
*            ZCVAL=ZCVAL||',FUNCAMODE';      /* INCORRECT KEY USED */   00320700
*        IF ZCVAL^=''                                                   00320800
*          THEN                                                         00320900
*            DO;                             /* INCORRECT KEYS USED */  00321000
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00321100
*              ZMS=' 8, "TYPE'||             /**KMEIP* MSG*/            00321200
*                  TYPE||'"'||                                          00321300
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00321400
*                  ' FOLLOWING KEY(S) "'||                              00321500
*                  ZCVAL||'".';                                         00321600
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00321700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00321800
*              ZMACRET=8;                    /* MACRO ERROR */          00321900
*            END;                                                       00322000
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00322100
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00322200
*    THEN                                                               00322300
*      DO;                                                              00322400
*        ZMS=' 8, "SSVTDATA'||               /**KPOSP* MSG*/            00322500
*            SSVTDATA||                                                 00322600
*            '" "SSVTDATA"'||                                           00322700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00322800
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00322900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00323000
*        ZMACRET=8;                          /* MACRO ERROR */          00323100
*      END;                                                             00323200
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00323300
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00323400
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00323500
*   THEN                                                                00323600
*    DO;                                     /* KEY IS REQUIRED */      00323700
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00323800
*        ZMS=' 8,  '||                                                  00323900
*            ' "SSVTDATA" KEY AND ITS ARGUMENT'||                       00324000
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00324100
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00324200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00324300
*        ZMACRET=8;                          /* MACRO ERROR */          00324400
*    END;                                                               00324500
*  ELSE                                                                 00324600
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00324700
*/*PG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00324800
*  XRESERVE_LEN='';                          /* RESET XVARIABLE */      00324900
*  IF TABLEN^=''                             /* CHECK ME KEY */         00325000
*    THEN                                                               00325100
*      DO;                                   /* VALID ME KEY */         00325200
*        IF NUMBER(TABLEN)>1                 /* CHECK SUBLISTS */       00325300
*          THEN                                                         00325400
*            DO;                                                        00325500
*              ZMS=' 8, "TABLEN'||           /**KPOSP* MSG*/            00325600
*                  TABLEN||                                             00325700
*                  '" "TABLEN"'||                                       00325800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00325900
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00326000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00326100
*              ZMACRET=8;                    /* MACRO ERROR */          00326200
*            END;                                                       00326300
*        XRESERVE_LEN='TABLEN';              /* SET XVARIABLE */        00326400
*        XTABLEN=TABLEN(1);                  /* SET XVARIABLE */        00326500
*        ZXRESERVE_LEN='INPUT';              /* SET IN/OUTPUT */        00326600
*        ZXTABLEN='INPUT';                   /* SET IN/OUTPUT */        00326700
*        IF TABLEN(1)=''                     /* CHECK ME KEY */         00326800
*          THEN                                                         00326900
*            DO;                                                        00327000
*              ZXRESERVE_LEN='';             /* RESET IN/OUTPUT */      00327100
*              ZXTABLEN='';                  /* RESET IN/OUTPUT */      00327200
*              ZMS=' 8,  '||                                            00327300
*                  ' "TABLEN" KEY AND ITS ARGUMENT'||                   00327400
*                  ' ARE REQUIRED.';         /**KRQDP* MSG*/            00327500
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00327600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00327700
*              ZMACRET=8;                    /* MACRO ERROR */          00327800
*           END;                                                        00327900
*      END;                                                             00328000
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00328100
*  IF MAXFCODES^=''                          /* CHECK ME KEY */         00328200
*    THEN                                                               00328300
*      DO;                                                              00328400
*        IF NUMBER(MAXFCODES)>1              /* CHECK SUBLISTS */       00328500
*          THEN                                                         00328600
*            DO;                                                        00328700
*              ZMS=' 8, "MAXFCODES'||        /**KPOSP* MSG*/            00328800
*                  MAXFCODES||                                          00328900
*                  '" "MAXFCODES"'||                                    00329000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00329100
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00329200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00329300
*              ZMACRET=8;                    /* MACRO ERROR */          00329400
*            END;                                                       00329500
*        IF XRESERVE_LEN=''                  /* CHECK XVARIABLE */      00329600
*          THEN                                                         00329700
*            DO;                             /* VALID ME KEY */         00329800
*              XRESERVE_LEN='MAXFCODES';     /* SET XVAR1 */            00329900
*              XMAXFCODES=MAXFCODES(1);      /* SET XVAR2 */            00330000
*              ZXRESERVE_LEN='INPUT';        /* SET IN/OUTPUT */        00330100
*              ZXMAXFCODES='INPUT';          /* SET IN/OUTPUT */        00330200
*              IF MAXFCODES(1)=''            /* CHECK ME KEY */         00330300
*                THEN                                                   00330400
*                  DO;                                                  00330500
*                    ZXRESERVE_LEN='';       /* RESET IN/OUTPUT */      00330600
*                    ZXMAXFCODES='';         /* RESET IN/OUTPUT */      00330700
*                    ZMS=' 8,  '||                                      00330800
*                        ' "MAXFCODES" KEY AND ITS ARGUMENT'||          00330900
*                        ' ARE REQUIRED.';   /**KRQDP* MSG*/            00331000
*                    ANS MSG('?IEFSSVTI ---> '||ZMS);                   00331100
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    00331200
*                    ZMACRET=8;              /* MACRO ERROR */          00331300
*                  END;                                                 00331400
*            END;                                                       00331500
*          ELSE                                                         00331600
*            DO;                                                        00331700
*              ZMS=' 8, "MAXFCODES'||        /**KMEKP* MSG*/            00331800
*                  MAXFCODES||'"'||                                     00331900
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'||                00332000
*                  XRESERVE_LEN||                                       00332100
*                  '" KEY.';                                            00332200
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00332300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00332400
*              ZMACRET=8;                    /* MACRO ERROR */          00332500
*            END;                                                       00332600
*      END;                                                             00332700
*/*PG.KMEKY08 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 00332800
*  IF XRESERVE_LEN=''                        /* CHECK XVARIABLE */      00332900
*    THEN                                                               00333000
*      DO;                                                              00333100
*        XRESERVE_LEN='TABLEN';              /* SET DEFAULT */          00333200
*        XTABLEN='0';                        /* SET DEFAULT */          00333300
*        ZXRESERVE_LEN='';                   /* RESET IN/OUTPUT */      00333400
*        ZXTABLEN='';                        /* RESET IN/OUTPUT */      00333500
*        ZMS=' 8, ONE OF THE FOLLOWING'||    /**KMERP* MSG*/            00333600
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'||                          00333700
*            ' REQUIRED:'||                                             00333800
*            ' "TABLEN"'||                   /* VALID ME KEY */         00333900
*            ' OR "MAXFCODES".';             /* VALID ME KEY */         00334000
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00334100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00334200
*        ZMACRET=8;                          /* MACRO ERROR */          00334300
*      END;                                                             00334400
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00334500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00334600
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00334700
*  IF TYPE(1)='COPY'                         /* CHECK FOR KEYWORD */    00334800
*    THEN                                                               00334900
*      DO;                                                              00335000
*        XTYPE='COPY';                       /* SET XVARIABLE */        00335100
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00335200
*          THEN                                                         00335300
*            DO;                                                        00335400
*              ZMS=' 8, "TYPE'||             /**KPOSP* MSG*/            00335500
*                  TYPE||                                               00335600
*                  '" "TYPE"'||                                         00335700
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00335800
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00335900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00336000
*              ZMACRET=8;                    /* MACRO ERROR */          00336100
*            END;                                                       00336200
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00336300
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00336400
*        IF TABLEN^=''                       /* CHECK FOR KEY */        00336500
*          THEN                                                         00336600
*            ZCVAL=ZCVAL||',TABLEN';         /* INCORRECT KEY USED */   00336700
*        IF FUNCNAME^=''                     /* CHECK FOR KEY */        00336800
*          THEN                                                         00336900
*            ZCVAL=ZCVAL||',FUNCNAME';       /* INCORRECT KEY USED */   00337000
*        IF FUNCADDR^=''                     /* CHECK FOR KEY */        00337100
*          THEN                                                         00337200
*            ZCVAL=ZCVAL||',FUNCADDR';       /* INCORRECT KEY USED */   00337300
*        IF NUMFCODES^=''                    /* CHECK FOR KEY */        00337400
*          THEN                                                         00337500
*            ZCVAL=ZCVAL||',NUMFCODES';      /* INCORRECT KEY USED */   00337600
*        IF FCODES^=''                       /* CHECK FOR KEY */        00337700
*          THEN                                                         00337800
*            ZCVAL=ZCVAL||',FCODES';         /* INCORRECT KEY USED */   00337900
*        IF ENTRYDATA^=''                    /* CHECK FOR KEY */        00338000
*          THEN                                                         00338100
*            ZCVAL=ZCVAL||',ENTRYDATA';      /* INCORRECT KEY USED */   00338200
*        IF FUNCAMODE^=''                    /* CHECK FOR KEY */        00338300
*          THEN                                                         00338400
*            ZCVAL=ZCVAL||',FUNCAMODE';      /* INCORRECT KEY USED */   00338500
*        IF MAXFCODES^=''                    /* CHECK FOR KEY */        00338600
*          THEN                                                         00338700
*            ZCVAL=ZCVAL||',MAXFCODES';      /* INCORRECT KEY USED */   00338800
*        IF ZCVAL^=''                                                   00338900
*          THEN                                                         00339000
*            DO;                             /* INCORRECT KEYS USED */  00339100
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00339200
*              ZMS=' 8, "TYPE'||             /**KMEIP* MSG*/            00339300
*                  TYPE||'"'||                                          00339400
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00339500
*                  ' FOLLOWING KEY(S) "'||                              00339600
*                  ZCVAL||'".';                                         00339700
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00339800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00339900
*              ZMACRET=8;                    /* MACRO ERROR */          00340000
*            END;                                                       00340100
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00340200
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00340300
*    THEN                                                               00340400
*      DO;                                                              00340500
*        ZMS=' 8, "SSVTDATA'||               /**KPOSP* MSG*/            00340600
*            SSVTDATA||                                                 00340700
*            '" "SSVTDATA"'||                                           00340800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00340900
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00341000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00341100
*        ZMACRET=8;                          /* MACRO ERROR */          00341200
*      END;                                                             00341300
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00341400
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00341500
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00341600
*   THEN                                                                00341700
*    DO;                                     /* KEY IS REQUIRED */      00341800
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00341900
*        ZMS=' 8,  '||                                                  00342000
*            ' "SSVTDATA" KEY AND ITS ARGUMENT'||                       00342100
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00342200
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00342300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00342400
*        ZMACRET=8;                          /* MACRO ERROR */          00342500
*    END;                                                               00342600
*  ELSE                                                                 00342700
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00342800
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00342900
*  IF NUMBER(SOURCE)>1                       /* CHECK POSITIONALS */    00343000
*    THEN                                                               00343100
*      DO;                                                              00343200
*        ZMS=' 8, "SOURCE'||                 /**KPOSP* MSG*/            00343300
*            SOURCE||                                                   00343400
*            '" "SOURCE"'||                                             00343500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00343600
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00343700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00343800
*        ZMACRET=8;                          /* MACRO ERROR */          00343900
*      END;                                                             00344000
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00344100
*  XSOURCE=SOURCE(1);                        /* SET XVARIABLE */        00344200
*  IF SOURCE(1)=''                           /* CHECK FOR NULL */       00344300
*   THEN                                                                00344400
*    DO;                                     /* KEY IS REQUIRED */      00344500
*        ZXSOURCE='';                        /* RESET IN/OUTPUT */      00344600
*        ZMS=' 8,  '||                                                  00344700
*            ' "SOURCE" KEY AND ITS ARGUMENT'||                         00344800
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00344900
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00345000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00345100
*        ZMACRET=8;                          /* MACRO ERROR */          00345200
*    END;                                                               00345300
*  ELSE                                                                 00345400
*    ZXSOURCE='INPUT';                       /* SET IN/OUTPUT */        00345500
*/*PG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00345600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00345700
*/*PG.KKCTL06 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00345800
*  IF TYPE='TYPE'                                                       00345900
*    | TYPE='()'                             /*CHECK ENTRY*/            00346000
*     THEN                                                              00346100
*       DO;                                                             00346200
*              ZMS=' 8, THE "TYPE" KEY'||    /**KOPTP* MSG*/            00346300
*                  ' MUST CONTAIN ONE'||                                00346400
*                  ' (OR MORE) ARGUMENT(S).';                           00346500
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00346600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00346700
*              ZMACRET=8;                    /* MACRO ERROR */          00346800
*       END;                                                            00346900
*  ELSE                                                                 00347000
*    DO;                                                                00347100
*      ZXTYPE='INPUT';                       /* SET IN/OUTPUT */        00347200
*      IF XTYPE=''                           /* CHECK FOR KEYWORD */    00347300
*        THEN                                                           00347400
*          DO;                               /* KEYWORD NOT ENTERED */  00347500
*            XTYPE='LIST';                   /* SET DEFAULT */          00347600
*            IF TYPE(1)^=''                  /* CHECK FOR KEYWORD */    00347700
*              THEN                                                     00347800
*                DO;                                                    00347900
*                  ZXTYPE='';                /* RESET IN/OUTPUT */      00348000
*              ZMS=' 8, "TYPE'||             /**KUKWP* MSG*/            00348100
*                  TYPE||'"'||                                          00348200
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00348300
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00348400
*                  ' "LIST",'||              /* VALID KEYWORD */        00348500
*                  ' "INITIAL",'||           /* VALID KEYWORD */        00348600
*                  ' "ENTRY",'||             /* VALID KEYWORD */        00348700
*                  ' "FINAL",'||             /* VALID KEYWORD */        00348800
*                  ' "SET",'||               /* VALID KEYWORD */        00348900
*                  ' "RESERVE",'||           /* VALID KEYWORD */        00349000
*                  ' OR "COPY".';            /* VALID KEYWORD */        00349100
*              ANS MSG('?IEFSSVTI ---> '||ZMS);                         00349200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00349300
*              ZMACRET=8;                    /* MACRO ERROR */          00349400
*                END;                                                   00349500
*          END;                                                         00349600
*    END;                                                               00349700
*/*PG.KKCTL07 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00349800
*  IF TYPE(1)=''                             /* CHECK FOR KEYWORD */    00349900
*    THEN                                                               00350000
*      DO;                                                              00350100
*        ZXTYPE='';                          /* RESET IN/OUTPUT */      00350200
*        ZMS=' 8, THE'||                     /**KRKWP* MSG*/            00350300
*            ' "TYPE" KEY AND ITS ARGUMENT'||                           00350400
*            ' ARE REQUIRED.'||                                         00350500
*            ' VALID KEYWORD CHOICE(S) ARE:'||                          00350600
*            ' "LIST",'||                    /* VALID KEYWORD */        00350700
*            ' "INITIAL",'||                 /* VALID KEYWORD */        00350800
*            ' "ENTRY",'||                   /* VALID KEYWORD */        00350900
*            ' "FINAL",'||                   /* VALID KEYWORD */        00351000
*            ' "SET",'||                     /* VALID KEYWORD */        00351100
*            ' "RESERVE",'||                 /* VALID KEYWORD */        00351200
*            ' OR "COPY".';                  /* VALID KEYWORD */        00351300
*        ANS MSG('?IEFSSVTI ---> '||ZMS);                               00351400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00351500
*        ZMACRET=8;                          /* MACRO ERROR */          00351600
*      END;                                                             00351700
*/********************************************************************/ 00351800
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00351900
*/********************************************************************/ 00352000
*  IF ZMACRET = 0                                                       00352100
*    THEN                                                               00352200
*      DO;                                                              00352300
*/********************************************************************/ 00352400
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00352500
*/********************************************************************/ 00352600
*  ANS(MACCONC||'LIST PUSH;') NORESCAN COL(MACLMAR);                    00352700
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00352800
*    THEN                                                               00352900
*      ANS(MACCONC||'LIST OFF;') NORESCAN COL(MACLMAR);                 00353000
*    ELSE                                                               00353100
*      ANS(MACCONC||'LIST ON;')  NORESCAN COL(MACLMAR);                 00353200
*/********************************************************************/ 00353300
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00353400
*/********************************************************************/ 00353500
*/* External macro variables                                         */ 00353600
*/********************************************************************/ 00353700
*DCL IEFSSVTI_MAPPING_DONE FIXED EXT;    /* Flag used to determine      00353800
*                                      when to define table maps     */ 00353900
*DCL IEFSSVTI_INITIAL_SEEN FIXED EXT;  /* Flag to tell if we            00354000
*                                      are in an INITIAL/FINAL group */ 00354100
*DCL IEFSSVTI_ENTRY_SEEN FIXED EXT; /* Flag to remember if a            00354200
*                                      TYPE=ENTRY is coded           */ 00354300
*DCL IEFSSVTI_#FRTN FIXED EXT;      /* Number of function routines      00354400
*                                      in a table                    */ 00354500
*DCL IEFSSVTI_TABLE_LENGTH FIXED EXT; /* Length of table             */ 00354600
*DCL IEFSSVTI_#FRTN_NAME CHAR EXT;  /* Remembers name of variable       00354700
*                                      for number of function           00354800
*                                      routines between invocations  */ 00354900
*DCL IEFSSVTI_TABLEN_NAME CHAR EXT; /* Remembers name of table length   00355000
*                                      variable between invocations  */ 00355100
*DCL EHAREGS CHAR EXT;              /* EPILOG register declaration      00355200
*                                      control variable              */ 00355300
*/********************************************************************/ 00355400
*/* Internal macro variables                                         */ 00355500
*/********************************************************************/ 00355600
*DCL IEFSSVTI_HEADLEN FIXED;        /* Length of table header        */ 00355700
*DCL IEFSSVTI_ENTRY_HEADLEN FIXED;  /* Length of table entry header  */ 00355800
*DCL FCODINDX FIXED;                /* Index over function code list */ 00355900
*DCL TABLEN_STRING CHAR;            /* String containing expression     00356000
*                                      for length of table           */ 00356100
*DCL ZELO  FIXED;                   /* Index for invocation echo     */ 00356200
*DCL ZECOL FIXED;                   /* Index for invocation echo     */ 00356300
*                                                                       00356400
*IEFSSVTI_HEADLEN = 12;             /* Length of table header        */ 00356500
*IEFSSVTI_ENTRY_HEADLEN = 12;       /* Length of table entry header  */ 00356600
*                                                                       00356700
*/********************************************************************/ 00356800
*/* Perform TYPE-specific actions                                    */ 00356900
*/********************************************************************/ 00357000
*SELECT(XTYPE);                     /* Type-specific actions         */ 00357100
*  WHEN ('LIST')                    /* TYPE=LIST                     */ 00357200
*/********************************************************************/ 00357300
*/* Generate table mappings if necessary                             */ 00357400
*/********************************************************************/ 00357500
*    IF (IEFSSVTI_MAPPING_DONE = 0) THEN  /* First TYPE=LIST            00357600
*                                      invocation                    */ 00357700
*      DO;                          /* Map table and entries         */ 00357800
*/********************************************************************/ 00357900
*/* Save LIST status and suppress listing of mappings                */ 00358000
*/********************************************************************/ 00358100
*        ANS('@LIST PUSH NOECHO;') COL(MACLMAR) NOSCAN;                 00358200
*        ANS('@LIST OFF NOECHO;') COL(MACLMAR) NOSCAN;                  00358300
*/********************************************************************/ 00358400
*/* Map table header                                                 */ 00358500
*/********************************************************************/ 00358600
*        ANS('DCL 1 VTI_HEADER BASED,') COL(MACLMAR) NOSCAN;            00358700
*        ANS('3 VTIH_ID CHAR(4),') COL(MACLMAR+6) NOSCAN;               00358800
*        ANS('3 VTIH_TABLEN FIXED(15),') COL(MACLMAR+6) NOSCAN;         00358900
*        ANS('3 VTIH_VERSION FIXED(15),') COL(MACLMAR+6) NOSCAN;        00359000
*        ANS('3 VTIH_NUM_FRTNS FIXED(15),') COL(MACLMAR+6) NOSCAN;      00359100
*        ANS('3 *             CHAR(2),') COL(MACLMAR+6) NOSCAN;         00359200
*        ANS('3 VTIH_FROUTINE_DATA CHAR(*);') COL(MACLMAR+6) NOSCAN;    00359300
*/********************************************************************/ 00359400
*/* Map table entry                                                  */ 00359500
*/********************************************************************/ 00359600
*        ANS('DCL 1 VTI_ENTRY BASED,') COL(MACLMAR) NOSCAN;             00359700
*        ANS('3 VTIE_HEADER,') COL(MACLMAR+6) NOSCAN;                   00359800
*        ANS('5 VTIE_FUNCNAME CHAR(8),') COL(MACLMAR+8) NOSCAN;         00359900
*        ANS('7 *                  CHAR(4),') COL(MACLMAR+10) NOSCAN;   00360000
*        ANS('7 VTIE_FUNCADDR CHAR(4),') COL(MACLMAR+10) NOSCAN;        00360100
*        ANS('5 VTIE_MAX_NUM_FCODES FIXED(15),') COL(MACLMAR+8) NOSCAN; 00360200
*        ANS('5 VTIE_NUM_FCODES FIXED(15),') COL(MACLMAR+8) NOSCAN;     00360300
*        ANS('3 VTIE_FCODES(*) FIXED(8);') COL(MACLMAR+6) NOSCAN;       00360400
*/********************************************************************/ 00360500
*/* Restore LIST status and indicate mappings generated              */ 00360600
*/********************************************************************/ 00360700
*        ANS('@LIST POP NOECHO;') COL(MACLMAR) NOSCAN;                  00360800
*        IEFSSVTI_MAPPING_DONE = 1; /* Indicate mappings done        */ 00360900
*      END;                         /* Map table and entries         */ 00361000
*  WHEN ('INITIAL')                 /* TYPE=INITIAL                  */ 00361100
*    DO;                            /* WHEN(INITIAL)                 */ 00361200
*/********************************************************************/ 00361300
*/* Check for invocation errors                                      */ 00361400
*/********************************************************************/ 00361500
*      IF (IEFSSVTI_INITIAL_SEEN = 1) THEN  /* Multiple INITIALs @P5A*/ 00361600
*        DO;                       /* Issue error message        @P5A*/ 00361700
*          ZMS=' 8, ONLY ONE TYPE=INITIAL PERMITTED IN STATIC TABLE';   00361800
*                                  /*                            @P5A*/ 00361900
*          ANS MSG('?IEFSSVTI ---> '||ZMS);  /*                  @P5A*/ 00362000
*          ANS(COMMENT(ZMS)) COL(MACLMAR);  /*                   @P5A*/ 00362100
*          ZMACRET=8;              /* Macro error                @P5A*/ 00362200
*        END;                      /* Issue error message        @P5A*/ 00362300
*      IF (ZMACRET = 0) THEN       /* If no errors               @P5A*/ 00362400
*        DO;                       /* Initialize table           @P5A*/ 00362500
*/********************************************************************/ 00362600
*/* Initialize table values                                          */ 00362700
*/********************************************************************/ 00362800
*          IEFSSVTI_INITIAL_SEEN = 1; /* Indicate TYPE=INITIAL coded */ 00362900
*          IEFSSVTI_#FRTN = 0;                                          00363000
*          IEFSSVTI_#FRTN_NAME = XSSVTDATA || '_#FRTN';                 00363100
*          IEFSSVTI_TABLEN_NAME = XTABLEN; /* Save length               00363200
*                                     variable name                  */ 00363300
*          IEFSSVTI_TABLE_LENGTH = IEFSSVTI_HEADLEN;                    00363400
*/********************************************************************/ 00363500
*/* Begin table mapping                                              */ 00363600
*/********************************************************************/ 00363700
*          ANS('DCL 1 ' || XSSVTDATA || ' STATIC,')                     00363800
*              COL(MACLMAR) NOSCAN;                                     00363900
*          ANS('3 * CHAR(4) INIT(' || QUOTE('VTIT') || '),')            00364000
*              COL(MACLMAR+6) NOSCAN;                                   00364100
*          ANS('3 * FIXED(15) INIT(' || IEFSSVTI_TABLEN_NAME || '),')   00364200
*              COL(MACLMAR+6) NOSCAN;                                   00364300
*          ANS('3 * FIXED(15) INIT(1),') COL(MACLMAR+6) NOSCAN;         00364400
*          ANS('3 * FIXED(15) INIT(' || IEFSSVTI_#FRTN_NAME || '),')    00364500
*              COL(MACLMAR+6) NOSCAN;                                   00364600
*          ANS('3 * CHAR(2) INIT(' || QUOTE('0000') || 'X),')           00364700
*              COL(MACLMAR+6) NOSCAN;                                   00364800
*        END;                      /* Initialize table           @P5A*/ 00364900
*    END;                          /* WHEN(INITIAL)                  */ 00365000
*  WHEN ('ENTRY')                  /* TYPE=ENTRY                     */ 00365100
*    DO;                           /* WHEN(ENTRY)                    */ 00365200
*      IEFSSVTI_ENTRY_SEEN = 1;    /* Indicate TYPE=ENTRY coded      */ 00365300
*/********************************************************************/ 00365400
*/* Check for invocation errors                                      */ 00365500
*/********************************************************************/ 00365600
*      IF (IEFSSVTI_INITIAL_SEEN = 0) THEN  /* ENTRY w/o INITIAL     */ 00365700
*        DO;                       /* Issue error message            */ 00365800
*          ZMS=' 8, TYPE=INITIAL MUST PRECEDE TYPE=ENTRY';              00365900
*          ANS MSG('?IEFSSVTI ---> '||ZMS);                             00366000
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00366100
*          ZMACRET=8;              /* Macro error                    */ 00366200
*        END;                      /* Issue error message            */ 00366300
*      IF (NUMBER(FCODES) > FIXED(XNUMFCODES))                          00366400
*          THEN                    /* NUMFCODES and FCODES              00366500
*                                     inconsistent                   */ 00366600
*        DO;                       /* Issue error message            */ 00366700
*          ZMS=' 8, NUMFCODES MUST BE GREATER THAN OR EQUAL TO ';       00366800
*          ZMS=ZMS || 'NUMBER OF FUNCTION CODES SPECIFIED WITH ';       00366900
*          ZMS=ZMS || 'FCODES';                                         00367000
*          ANS MSG('?IEFSSVTI ---> '||ZMS);                             00367100
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00367200
*          ZMACRET=8;              /* Macro error                    */ 00367300
*        END;                      /* Issue error message            */ 00367400
*      IF (ZMACRET = 0) THEN       /* No errors, generate code       */ 00367500
*        DO;                       /* Generate TYPE=ENTRY code       */ 00367600
*/********************************************************************/ 00367700
*/* Generate table entry                                             */ 00367800
*/********************************************************************/ 00367900
*          IF (NUMBER(FUNCNAME) > 0) THEN  /* FUNCNAME specified     */ 00368000
*            ANS('3 * CHAR(8) INIT(' || XFUNCNAME || '),')              00368100
*                COL(MACLMAR+6) NOSCAN;                                 00368200
*          ELSE                     /* FUNCADDR or neither specified */ 00368300
*            ANS('3 * CHAR(8) INIT(' ||                                 00368400
*                QUOTE('0000000000000000') || 'X),')                    00368500
*                COL(MACLMAR+6) NOSCAN;                                 00368600
*          ANS('3 * FIXED(15) INIT(' || XNUMFCODES || ') BDY(BYTE),')   00368700
*                COL(MACLMAR+6) NOSCAN;                                 00368800
*          ANS('3 * FIXED(15) INIT(' || CHAR(NUMBER(FCODES)) ||         00368900
*                ') BDY(BYTE),') COL(MACLMAR+6) NOSCAN;                 00369000
*          DO FCODINDX = 1 TO NUMBER(FCODES);  /* Loop over codes    */ 00369100
*            ANS('3 * FIXED(8) INIT(' || FCODES(FCODINDX) || '),')      00369200
*                COL(MACLMAR+6) NOSCAN;                                 00369300
*          END;                     /* DO FCODINDX                   */ 00369400
*          IF (NUMBER(FCODES) < FIXED(XNUMFCODES)) THEN  /* Max         00369500
*                                      greater than actual           */ 00369600
*            DO FCODINDX = 1 TO (FIXED(XNUMFCODES) - NUMBER(FCODES));   00369700
*                                   /* Pad to reserve room           */ 00369800
*              ANS('3 * FIXED(8) INIT(' || QUOTE('00') || 'X),')        00369900
*                  COL(MACLMAR+6) NOSCAN;                               00370000
*            END;                   /* Pad to reserve room           */ 00370100
*/********************************************************************/ 00370200
*/* Update table values                                              */ 00370300
*/********************************************************************/ 00370400
*          IEFSSVTI_#FRTN = IEFSSVTI_#FRTN + 1;                         00370500
*          IEFSSVTI_TABLE_LENGTH = IEFSSVTI_TABLE_LENGTH +              00370600
*              IEFSSVTI_ENTRY_HEADLEN + FIXED(XNUMFCODES) * 1;          00370700
*        END;                      /* Generate TYPE=ENTRY code       */ 00370800
*    END;                          /* WHEN(ENTRY)                    */ 00370900
*  WHEN ('FINAL')                  /* TYPE=FINAL                     */ 00371000
*    DO;                           /* WHEN(FINAL)                    */ 00371100
*/********************************************************************/ 00371200
*/* Check for invocation errors                                      */ 00371300
*/********************************************************************/ 00371400
*      IF (IEFSSVTI_INITIAL_SEEN = 0) THEN  /* FINAL w/o INITIAL     */ 00371500
*        DO;                       /* Issue error message            */ 00371600
*          ZMS=' 8, TYPE=INITIAL MUST PRECEDE TYPE=FINAL';              00371700
*          ANS MSG('?IEFSSVTI ---> '||ZMS);                             00371800
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00371900
*          ZMACRET=8;              /* Macro error                    */ 00372000
*        END;                      /* Issue error message            */ 00372100
*      IF (IEFSSVTI_ENTRY_SEEN = 0) THEN  /* FINAL w/o ENTRY         */ 00372200
*        DO;                       /* Issue error message            */ 00372300
*          ZMS=' 8, TABLE MUST INCLUDE AT LEAST ONE TYPE=ENTRY';        00372400
*          ANS MSG('?IEFSSVTI ---> '||ZMS);                             00372500
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00372600
*          ZMACRET=8;              /* Macro error                    */ 00372700
*        END;                      /* Issue error message            */ 00372800
*/********************************************************************/ 00372900
*/* Update table values                                              */ 00373000
*/********************************************************************/ 00373100
*      IEFSSVTI_INITIAL_SEEN = 0;  /* Indicate INITIAL/FINAL set        00373200
*                                     finished                       */ 00373300
*      IEFSSVTI_ENTRY_SEEN = 0;    /* Indicate INITIAL/FINAL set        00373400
*                                     finished                       */ 00373500
*      IF (ZMACRET = 0) THEN       /* No errors, generate code       */ 00373600
*        DO;                       /* Generate TYPE=FINAL code       */ 00373700
*/********************************************************************/ 00373800
*/* Terminate table and generate necessary constant declares         */ 00373900
*/********************************************************************/ 00374000
*          ANS('3 * CHAR(0);') COL(MACLMAR+6) NOSCAN;                   00374100
*                                                                       00374200
*          ANS('DCL ' || IEFSSVTI_TABLEN_NAME || ' FIXED(31)            00374300
*              CONSTANT(' || CHAR(IEFSSVTI_TABLE_LENGTH) || ');')       00374400
*              COL(MACLMAR) NOSCAN;                                     00374500
*                                                                       00374600
*          ANS('DCL ' || IEFSSVTI_#FRTN_NAME || ' FIXED(31)             00374700
*              CONSTANT(' || CHAR(IEFSSVTI_#FRTN) || ');')              00374800
*              COL(MACLMAR) NOSCAN;                                     00374900
*        END;                      /* Generate TYPE=FINAL code       */ 00375000
*    END;                          /* WHEN(FINAL)                    */ 00375100
*  WHEN ('SET')                    /* TYPE=SET                       */ 00375200
*    DO;                           /* WHEN(SET)                      */ 00375300
*/********************************************************************/ 00375400
*/* Check for invocation errors                                      */ 00375500
*/********************************************************************/ 00375600
*      IF (IEFSSVTI_INITIAL_SEEN = 1) THEN  /* SET in static table   */ 00375700
*        DO;                       /* Issue error message            */ 00375800
*          ZMS=' 8, TYPE=SET CANNOT BE USED WITHIN STATIC TABLE';       00375900
*          ANS MSG('?IEFSSVTI ---> '||ZMS);                             00376000
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00376100
*          ZMACRET=8;              /* Macro error                    */ 00376200
*        END;                      /* Issue error message            */ 00376300
*      IF (ZMACRET = 0) THEN                                            00376400
*        DO;                       /* Process request                */ 00376500
*/********************************************************************/ 00376600
*/* Echo invocation                                                  */ 00376700
*/********************************************************************/ 00376800
*          ANS('/* ? IEFSSVTI '||MACLIST||' ') NOSCAN COL(MACLMAR+5);   00376900
*                                                                       00377000
*          ZELO=1; /* STARTING COLUMN */                                00377100
*          DO WHILE ZELO<=LENGTH(MACKEYS); /* PARENTHSIS SCAN */        00377200
*            ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');            00377300
*            IF ZECOL>0                                                 00377400
*              THEN                                                     00377500
*                DO;               /* PARENTHESIS FOUND */              00377600
*                  ANS(MACKEYS(ZELO:ZELO+ZECOL-1)||' ')                 00377700
*                     NORESCAN COL(MACLMAR+5);                          00377800
*                  ZELO=ZELO+ZECOL; /* NEXT PORTION */                  00377900
*                END;                                                   00378000
*              ELSE                                                     00378100
*                DO;               /* REMAINING KEYS */                 00378200
*                  ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                   00378300
*                     NORESCAN COL(MACLMAR+5);                          00378400
*                  ZELO=LENGTH(MACKEYS)+1;                              00378500
*                END;                                                   00378600
*          END;                                                         00378700
*          ANS(' -02/10/94-1- */') NOSCAN COL(MACLMAR+5); /* END ECHO */00378800
*/********************************************************************/ 00378900
*/* Locate target entry                                              */ 00379000
*/********************************************************************/ 00379100
*          ANS('DO;') COL(MACCOL) NOSCAN;                               00379200
*          ANS('RFY GPR01P RSTD;') COL(MACCOL+2) NOSCAN;                00379300
*          ANS('GPR01P = ADDR(' || XSOURCE || ');')                     00379400
*              COL(MACCOL+2) NOSCAN;                                    00379500
*          ANS('IF (' || XENTRYDATA ||                                  00379600
*              ' <= GPR01P->VTIH_NUM_FRTNS) THEN')                      00379700
*              COL(MACCOL+2) NOSCAN;                                    00379800
*          ANS('DO;') COL(MACCOL+4) NOSCAN;                             00379900
*          ANS('GPR01P = ADDR(GPR01P->VTIH_FROUTINE_DATA);')            00380000
*              COL(MACCOL+6) NOSCAN;                                    00380100
*          ANS('RFY VTI_ENTRY BASED(GPR01P);') COL(MACCOL+6) NOSCAN;    00380200
*          ANS('RFY GPR15F RSTD;') COL(MACCOL+6) NOSCAN;                00380300
*          ANS('GPR15F = 1;') COL(MACCOL+6) NOSCAN;                     00380400
*          ANS('DO WHILE (GPR15F < ' || XENTRYDATA || ');')             00380500
*              COL(MACCOL+6) NOSCAN;                                    00380600
*          ANS('GPR01P = GPR01P + LENGTH(VTIE_HEADER) + ' ||            00380700
*              'VTIE_MAX_NUM_FCODES * 1;') COL(MACCOL+8) NOSCAN;        00380800
*          ANS('GPR15F = GPR15F + 1;') COL(MACCOL+8) NOSCAN;            00380900
*          ANS('END;') COL(MACCOL+6) NOSCAN;                            00381000
*          ANS('RFY GPR15F UNRSTD;') COL(MACCOL+6) NOSCAN;              00381100
*          ANS('GPR01P = ADDR(' || XSSVTDATA || ') + ' ||               00381200
*              'GPR01P - ADDR(' || XSOURCE || ');')                     00381300
*              COL(MACCOL+6) NOSCAN;                                    00381400
*/********************************************************************/ 00381500
*/* Set function routine data (name or address), if requested        */ 00381600
*/********************************************************************/ 00381700
*          IF (NUMBER(FUNCNAME) > 0) THEN /* FUNCNAME specified      */ 00381800
*            ANS('VTIE_FUNCNAME = ' || XFUNCNAME || ';')                00381900
*                COL(MACLMAR+6) NOSCAN;                                 00382000
*          IF (NUMBER(FUNCADDR) > 0) THEN /* FUNCADDR specified      */ 00382100
*            DO;                   /* FUNCADDR specified             */ 00382200
*              ANS('VTIE_FUNCNAME = ' || QUOTE('00') || 'X;')           00382300
*                  COL(MACLMAR+6) NOSCAN;                               00382400
*              ANS('VTIE_FUNCADDR = ' || XFUNCADDR || ';')              00382500
*                  COL(MACLMAR+6) NOSCAN;                               00382600
*              IF (NUMBER(FUNCAMODE) > 0) THEN                          00382700
*                IF (XFUNCAMODE = '31') THEN                            00382800
*                  ANS('VTIE_FUNCADDR = VTIE_FUNCADDR | ' ||            00382900
*                      QUOTE('80000000') || 'X;')                       00383000
*                      COL(MACLMAR+6) NOSCAN;                           00383100
*                ELSE              /* XFUNCAMODE = 24                */ 00383200
*                  ANS('VTIE_FUNCADDR = VTIE_FUNCADDR & ' ||            00383300
*                      QUOTE('7FFFFFFF') || 'X;')                       00383400
*                      COL(MACLMAR+6) NOSCAN;                           00383500
*            END;                  /* FUNCADDR specified             */ 00383600
*/********************************************************************/ 00383700
*/* Set function code data, if requested                             */ 00383800
*/********************************************************************/ 00383900
*          IF (NUMBER(FCODES) > 0) THEN                                 00384000
*            DO;                   /* Set function code data         */ 00384100
*              ANS('IF (' || CHAR(NUMBER(FCODES)) ||                    00384200
*                  ' <= VTIE_MAX_NUM_FCODES) THEN')                     00384300
*                  COL(MACLMAR+6) NOSCAN;                               00384400
*              ANS('DO;') COL(MACCOL+8) NOSCAN;                         00384500
*              DO FCODINDX = 1 TO NUMBER(FCODES);                       00384600
*                ANS('VTIE_FCODES(' || CHAR(FCODINDX) || ') = ' ||      00384700
*                    FCODES(FCODINDX) || ';') COL(MACCOL+10) NOSCAN;    00384800
*              END;                                                     00384900
*              ANS('VTIE_NUM_FCODES = ' || CHAR(NUMBER(FCODES)) ||      00385000
*                  ';');           /*                            @P1A*/ 00385100
*              ANS('END;') COL(MACCOL+8) NOSCAN;                        00385200
*            END;                  /* Set function code data         */ 00385300
*          ANS('RFY VTI_ENTRY BASED;') COL(MACCOL+6) NOSCAN;            00385400
*          ANS('END;') COL(MACCOL+4) NOSCAN;                            00385500
*          ANS('RFY GPR01P UNRSTD;') COL(MACCOL+2) NOSCAN;              00385600
*          ANS('END;') COL(MACCOL) NOSCAN;                              00385700
*        END;                      /* Process request                */ 00385800
*    END;                          /* WHEN(SET)                      */ 00385900
*  WHEN ('RESERVE')                /* TYPE=RESERVE                   */ 00386000
*    DO;                           /* WHEN(RESERVE)                  */ 00386100
*/********************************************************************/ 00386200
*/* Check for invocation errors                                      */ 00386300
*/********************************************************************/ 00386400
*      IF (IEFSSVTI_INITIAL_SEEN = 1) THEN  /* RESERVE in static        00386500
*                                     table                          */ 00386600
*        DO;                       /* Issue error message            */ 00386700
*          ZMS=' 8, TYPE=RESERVE CANNOT BE USED WITHIN STATIC TABLE';   00386800
*          ANS MSG('?IEFSSVTI ---> '||ZMS);                             00386900
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00387000
*          ZMACRET=8;              /* Macro error                    */ 00387100
*        END;                      /* Issue error message            */ 00387200
*      IF (ZMACRET = 0) THEN                                            00387300
*        DO;                       /* Process request                */ 00387400
*/********************************************************************/ 00387500
*/* Generate declare to reserve storage.  If MAXFCODES was           */ 00387600
*/* specified, reserve the maximum amount of storage assuming one    */ 00387700
*/* function routine per 1-byte function code.                       */ 00387800
*/********************************************************************/ 00387900
*          IF (NUMBER(TABLEN) > 0) THEN /* TABLEN specified          */ 00388000
*            ANS('DCL ' || XSSVTDATA || ' CHAR(' || XTABLEN || ');')    00388100
*                COL(MACLMAR) NOSCAN;                                   00388200
*          ELSE                    /* MAXFCODES specified            */ 00388300
*            DO;                   /* Reserve maximum needed storage */ 00388400
*              TABLEN_STRING = CHAR(IEFSSVTI_HEADLEN) || '+' ||         00388500
*                  XMAXFCODES || '*(' ||                                00388600
*                  CHAR(IEFSSVTI_ENTRY_HEADLEN) || '+1*1)';             00388700
*              ANS('DCL ' || XSSVTDATA || ' CHAR(' ||                   00388800
*                  TABLEN_STRING || ');') COL(MACLMAR) NOSCAN;          00388900
*            END;                  /* Reserve maximum needed storage */ 00389000
*        END;                      /* Process request                */ 00389100
*    END;                          /* WHEN(RESERVE)                  */ 00389200
*  WHEN ('COPY')                   /* TYPE=COPY                      */ 00389300
*    DO;                           /* WHEN(COPY)                     */ 00389400
*/********************************************************************/ 00389500
*/* Check for invocation errors                                      */ 00389600
*/********************************************************************/ 00389700
*      IF (IEFSSVTI_INITIAL_SEEN = 1) THEN  /* COPY in static table  */ 00389800
*        DO;                       /* Issue error message            */ 00389900
*          ZMS=' 8, TYPE=COPY CANNOT BE USED WITHIN STATIC TABLE';      00390000
*          ANS MSG('?IEFSSVTI ---> '||ZMS);                             00390100
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00390200
*          ZMACRET=8;              /* Macro error                    */ 00390300
*        END;                      /* Issue error message            */ 00390400
*      IF (ZMACRET = 0) THEN                                            00390500
*        DO;                       /* Process request                */ 00390600
*/********************************************************************/ 00390700
*/* Echo invocation                                                  */ 00390800
*/********************************************************************/ 00390900
*          ANS('/* ? IEFSSVTI '||MACLIST||' ') NOSCAN COL(MACLMAR+5);   00391000
*                                                                       00391100
*          ZELO=1; /* STARTING COLUMN */                                00391200
*          DO WHILE ZELO<=LENGTH(MACKEYS); /* PARENTHSIS SCAN */        00391300
*            ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');            00391400
*            IF ZECOL>0                                                 00391500
*              THEN                                                     00391600
*                DO;               /* PARENTHESIS FOUND */              00391700
*                  ANS(MACKEYS(ZELO:ZELO+ZECOL-1)||' ')                 00391800
*                     NORESCAN COL(MACLMAR+5);                          00391900
*                  ZELO=ZELO+ZECOL; /* NEXT PORTION */                  00392000
*                END;                                                   00392100
*              ELSE                                                     00392200
*                DO;               /* REMAINING KEYS */                 00392300
*                  ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                   00392400
*                     NORESCAN COL(MACLMAR+5);                          00392500
*                  ZELO=LENGTH(MACKEYS)+1;                              00392600
*                END;                                                   00392700
*          END;                                                         00392800
*          ANS(' -02/10/94-1- */') NOSCAN COL(MACLMAR+5); /* END ECHO */00392900
*/********************************************************************/ 00393000
*/* Generate executable code to copy table using MVCL                */ 00393100
*/********************************************************************/ 00393200
*          ANS('DO;') COL(MACCOL) NOSCAN;                               00393300
*          ANS('RFY (GPR00P, GPR01F, GPR14P, GPR15F) RSTD;')            00393400
*              COL(MACCOL+2) NOSCAN;                                    00393500
*          ANS('GPR14P = ADDR(' || XSOURCE || ');')                     00393600
*              COL(MACCOL+2) NOSCAN;                                    00393700
*          ANS('GPR15F = GPR14P-> VTIH_TABLEN;')                        00393800
*              COL(MACCOL+2) NOSCAN;                                    00393900
*          ANS('GPR00P = ADDR(' || XSSVTDATA || ');')                   00394000
*              COL(MACCOL+2) NOSCAN;                                    00394100
*          ANS('GPR01F = GPR15F;')                                      00394200
*              COL(MACCOL+2) NOSCAN;                                    00394300
*          ANS('MVCL(GPR00P, GPR14P);')                                 00394400
*              COL(MACCOL+2) NOSCAN;                                    00394500
*          ANS('RFY (GPR00P, GPR01F, GPR14P, GPR15F) UNRSTD;')          00394600
*              COL(MACCOL+2) NOSCAN;                                    00394700
*          ANS('END;') COL(MACCOL) NOSCAN;                              00394800
*        END;                      /* Process request                */ 00394900
*    END;                          /* WHEN(COPY)                     */ 00395000
*  OTHERWISE                       /* Invalid request - shouldn't       00395100
*                                     happen                         */ 00395200
*    DO;                           /* Issue error message            */ 00395300
*      ZMS=' 8, INVALID TYPE PARAMETER';                                00395400
*      ANS MSG('?IEFSSVTI ---> '||ZMS);                                 00395500
*      ANS(COMMENT(ZMS)) COL(MACLMAR);                                  00395600
*      ZMACRET=8;                  /* Macro error                    */ 00395700
*    END;                          /* Issue error message            */ 00395800
*END;                              /* Type-specific actions          */ 00395900
*/*------------------------------------------------------------------*/ 00396000
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED    */ 00396100
*/*        BY ?EPILOG                                                */ 00396200
*/*------------------------------------------------------------------*/ 00396300
*IF INDEX(EHAREGS,'00P')=0 THEN                                         00396400
*  EHAREGS=EHAREGS||'00P';          /* GPR00P                        */ 00396500
*IF INDEX(EHAREGS,'01F')=0 THEN                                         00396600
*  EHAREGS=EHAREGS||'01F';          /* GPR01F                        */ 00396700
*IF INDEX(EHAREGS,'01P')=0 THEN                                         00396800
*  EHAREGS=EHAREGS||'01P';          /* GPR01P                        */ 00396900
*IF INDEX(EHAREGS,'14P')=0 THEN                                         00397000
*  EHAREGS=EHAREGS||'14P';          /* GPR14P                        */ 00397100
*IF INDEX(EHAREGS,'15F')=0 THEN                                         00397200
*  EHAREGS=EHAREGS||'15F';          /* GPR15F                        */ 00397300
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00397400
*/*PO.L13 IEFSSVTI USAGE INDICATOR-----------------------------------*/ 00397500
*  ZIEFSSVTI='YES';                          /* SET IEFSSVTI USED */    00397600
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00397700
*  ANS(MACCONC||'LIST POP;') NORESCAN COL(MACLMAR);                     00397800
*/*PO.L17 END OF IEFSSVTI MACRO--------------------------------------*/ 00397900
*  ANS(MACCONC||'SPACE;') NORESCAN COL(MACLMAR);                        00398000
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00398100
*/*******************************************************************/  00398200
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00398300
*/*******************************************************************/  00398400
*      END;                                                             00398500
*  RETURN CODE(ZMACRET);                                                00398600
*%END IEFSSVTI;                                                         00398700
