**********************************************************************  00050000
**                                                                   *  00100000
**  $MAC(IEWBFDA) COMP(DF108):                                       *  00150000
**                                                                   *  00200000
**   MACRO NAME: IEWBFDA                                             *  00250000
**                                                                   *  00300000
**   DESCRIPTION: System Interface to The Fast Data Access           *  00350000
**                Module.                                            *  00400000
**                                                                   *  00450000
**   STATUS: VERSION 2 RELEASE 10                              @P0C  *  00500000
**                                                                   *  00550000
*    COPYRIGHT:                                                      *  00600000
*                                                                    *  00650000
*PROPRIETARY V3 STATEMENT                                            *  00700000
*LICENSED MATERIALS - PROPERTY OF IBM                                *  00750000
*"RESTRICTED MATERIALS OF IBM"                                       *  00800000
*5695-DF1                                                            *  00850000
*(C) COPYRIGHT 1993,1995  IBM CORP.                                  *  00900000
*END PROPRIETARY V3 STATEMENT                                        *  00950000
**                                                                   *  01050000
**   FUNCTION:                                                       *  01100000
**       This macro provides a system interface to the               *  01150000
**       fast data access API module.                                *  01200000
**                                                                   *  01250000
**                                                                   *  01300000
**   PROCESSING:                                                     *  01350000
**                                                                   *  01400000
**   LOGIC:                                                          *  01450000
**                                                                   *  01500000
**     -  Produce a comment block of all parameters.                 *  01534600
**     -  Insure no positional parameters were specified.            *  01569200
**     -  Validate keywords.                                         *  01603800
**     -  Determine if this is the first or a subsequent call        *  01638400
**     -  If first, generate code to load and branch to IEWBFDAT     *  01673000
**     -  If a subsequent call                                       *  01707600
**      -  Generate code to branch to IEWBFDAT                       *  01742200
**      -  Upon return from IEWBFDAT:                                *  01776800
**      -  If HOLD=YES, ignore DELETE and keep IEWBFDAT in storage   *  01811400
**      -  If HOLD=NO                                                *  01846000
**       -  If DELETE=YES, delete IEWBFDAT from storage              *  01880600
**       -  Else keep IEWBFDAT in storage                            *  01915200
**                                                                   *  01950000
**     ERROR PROCESSING:                                             *  02000000
**                                                                   *  02050000
**       The macro checks:                                           *  02100000
**                                                                   *  02150000
**       -   that no positional parameters are specified             *  02200000
**       -   that all keywords are given only one argument           *  02250000
**       -   that all required keywords are specified                *  02300000
**                                                                   *  02350000
**       If any of the above checks fail, the macro issues a         *  02400000
**       message and a return code of 8.  Processing continues, if   *  02450000
**       possible, so that all syntax errors can be found in one     *  02500000
**       assembly.                                                   *  02550000
**                                                                   *  02600000
**                                                                   *  02650000
**   NOTES:                                                          *  02700000
**                                                                   *  02750000
**     DEPENDENCIES: NONE                                            *  02800000
**                                                                   *  02850000
**                                                                   *  02900000
**     RESTRICTIONS: NONE                                            *  02950000
**                                                                   *  03000000
**   MACRO:                                                          *  03050000
**                                                                   *  03100000
**     PROCESSOR: ASSEMBLER H                                        *  03150000
**     DISTRIBUTION LIBRARY: AMACLIB                                 *  03200000
**     ATTRIBUTES: NONE                                              *  03250000
**                                                                   *  03300000
**-------------------------------------------------------------------*  03350000
**                                                                   *  03400000
**     PURPOSE:                                                      *  03450000
**         Extract data from a program object                        *  03500000
**                                                                   *  03550000
**     LINKAGE:                                                      *  03600000
**                                                                   *  03650000
** <label> IEWBFDA   ENTRYPNT=iewbfdat_module_entry_point            *  03683300
**                   ,MTOKEN=token_issued_by_this_API                *  03716600
**                   ,RETCODE=return_code                            *  03750000
**                   ,RSNCODE=reason_code                            *  03800000
**                   { ,EPTOKEN=program_entry_point_token |          *  03850000
**                    {,DDNAME=ddname                                *  03900000
**                     ,MEMBER=primary_or_alias_name }    |          *  03950000
**                    {,DCBPTR=dcb_pointer                           *  04000000
**                     ,DEPTR=directory_entry_pointer}     }>        *  04050000
**                   ,CLASS=class_name                               *  04100000
**                   <,SECTION=section_name>                         *  04150000
**                   ,AREA=output_buffer                             *  04200000
**                   ,CURSOR=cursor_relative_to_record               *  04250000
**                   ,COUNT=number_of_records_returned               *  04300000
**                   ,HOLD=hold_resources_indicator                  *  04350000
**                   <,DELETE=delete_module_indicator>               *  04375000
**                   <,LOADFAIL=recovery_routine_if_load_fails>      *  04400000
**                   <,SYSTEMDCB=system_dcb_indicator>        @02A   *  04412500
**                   <,MF={S|L|{E,(3-12),label)}}}>                  *  04425000
**                                                                   *  04450000
**                                                                   *  04500000
**   NOTES:                                                          *  04550000
**   =====                                                           *  04600000
**                                                                   *  04650000
**        A) In the following context, the acronym "API" has the     *  04700000
**           extended meaning of Fast Data Access Application        *  04750000
**           Programming Interface.                                  *  04800000
**                                                                   *  04850000
**        B) Registers specified for keyword arguments               *  04900000
**           must be enclosed in parentheses.                        *  04950000
**                                                                   *  05000000
**        C) In the following variable descriptions, the "varying"   *  05050000
**           attribute for character strings means that the          *  05100000
**           strings must be preceded by a two-byte length field.    *  05150000
**                                                                   *  05200000
**                                                                   *  05250000
**     ENTRYPNT=iewbfdat_module_entry_point                          *  05253300
**                                                                   *  05256600
**         Specifies the name (RX-type address or register (3)-(12)) *  05259900
**         of a 4-byte variable which contains the entry point       *  05263200
**         address of the IEWBFDAT module.  If the entry point is    *  05266500
**         known prior to the invocation of this macro, then         *  05269800
**         this variable should contain such value.  Otherwise this  *  05273100
**         variable should be set to bynary zeroes so that the macro *  05276400
**         can determine the entry point.                            *  05279700
**                                                                   *  05283000
**         NOTE:  This parameter must not be modified in subsequent  *  05286300
**                calls to the API, once this macro or the caller    *  05289600
**                has determined a valid entry point.                *  05292900
**                                                                   *  05296200
**     MTOKEN = token_issued_by_this_API                             *  05300000
**                                                                   *  05350000
**         Specifies the name (RX-type address or register (3)-(12)) *  05400000
**         of a 4-byte variable which contains the Module Token      *  05450000
**         established by the API.                                   *  05500000
**                                                                   *  05550000
**         NOTE:  This parameter must be set to binary zeroes before *  05600000
**                the first invocation of the API.                   *  05650000
**                This parameter must not be modified in subsequent  *  05683300
**                calls to the API.                                  *  05716600
**                                                                   *  05750000
**     RETCODE = return_code                                         *  05800000
**                                                                   *  05850000
**         Specifies the name of a full-word hexadecimal string      *  05900000
**         which will receive the API's reason code.                 *  05950000
**                                                                   *  06000000
**                                                                   *  06050000
**     RSNCODE = reason_code                                         *  06100000
**                                                                   *  06150000
**         Specifies the name of a full-word integer variable        *  06200000
**         which will receive the API's completion code.             *  06250000
**                                                                   *  06300000
**                                                                   *  06350000
**     EPTOKEN = program_entry_point_token                           *  06400000
**                                                                   *  06450000
**         Specifies the name (RX-type address or register (3)-(12)) *  06500000
**         of an 8-byte variable which contains the EPTOKEN          *  06550000
**         determined by means of the CSVQUERY macro.  The EPTOKEN   *  06600000
**         is used to locate the correct copy of a module in a PDSE  *  06650000
**         library when the module has already been loaded into      *  06700000
**         virtual storage by the API.                               *  06750000
**                                                                   *  06800000
**         NOTE:  This parameter is mutually exclusive with          *  06850000
**         ====   DDNAME, MEMBER, DCBPTR, and DEPTR                  *  06900000
**                                                                   *  06950000
**                                                                   *  07000000
**     DDNAME = ddname                                               *  07050000
**                                                                   *  07100000
**         Specifies the name (RX-type address or register (3)-(12)) *  07150000
**         of an 8-byte varying character string which contains the  *  07200000
**         DDNAME associated with the the data set to be accessed.   *  07250000
**                                                                   *  07300000
**         NOTES:                                                    *  07350000
**         =====                                                     *  07400000
**               A) This parameter is mutually exclusive with        *  07450000
**                  EPTOKEN, DCBPTR, and DEPTR.                      *  07500000
**                                                                   *  07550000
**               B) It requires the MEMBER parameter.                *  07600000
**                                                                   *  07650000
**                                                                   *  07700000
**     MEMBER = primary_or_alias_name                                *  07750000
**                                                                   *  07800000
**         Specifies the name (RX-type address or register (3)-(12)) *  07850000
**         of an 8-byte varying character string which contains the  *  07900000
**         member name or alias of the library member to be          *  07950000
**         accessed.                                                 *  08000000
**                                                                   *  08050000
**         NOTES:                                                    *  08100000
**         =====                                                     *  08150000
**               A) This parameter is mutually exclusive with        *  08200000
**                  EPTOKEN, DCBPTR, and DEPTR.                      *  08250000
**                                                                   *  08300000
**               B) It requires the DDNAME parameter.                *  08350000
**                                                                   *  08400000
**               C) A member name must not be specified in           *  08450000
**                  JCL allocation of the data set identified by     *  08500000
**                  DDNAME.                                          *  08550000
**                                                                   *  08600000
**                                                                   *  08650000
**     DCBPTR = dcb_pointer                                          *  08700000
**                                                                   *  08750000
**         Specifies the name (RX-type address or register (3)-(12)) *  08800000
**         of a four-byte pointer variable containing the address of *  08850000
**         a DCB which represents a PDSE program object library.     *  08900000
**                                                                   *  08950000
**         NOTES:                                                    *  09000000
**         =====                                                     *  09050000
**               A) This parameter is mutually exclusive with        *  09100000
**                  EPTOKEN, DDNAME, and MEMBER.                     *  09150000
**                                                                   *  09200000
**               B) It requires the DEPTR parameter.                 *  09250000
**                                                                   *  09300000
**               C) The DCB it represents must be OPENed prior to    *  09350000
**                  the invocation of the API.  The DCB parameters   *  09400000
**                  at the time of OPEN must be:  DSORG=PO,MACRF=(R) *  09450000
**                                                                   *  09500000
**                                                                   *  09550000
**     DEPTR = directory_entry_pointer                               *  09600000
**                                                                   *  09650000
**         Specifies the name (RX-type address or register (3)-(12)) *  09700000
**         of a four-byte pointer variable which contains the        *  09750000
**         address of a single directory entry, which in turn        *  09800000
**         represents the program object library member to be        *  09850000
**         processed.                                                *  09900000
**                                                                   *  09950000
**         NOTES:                                                    *  10000000
**         =====                                                     *  10050000
**               A) This parameter is mutually exclusive with        *  10100000
**                  EPTOKEN, DDNAME, and MEMBER.                     *  10150000
**                                                                   *  10200000
**               B) It requires the DCBPTR parameter.                *  10250000
**                                                                   *  10300000
**               C) The format of the directory entry represented    *  10350000
**                  by this parameter is that returned by the        *  10400000
**                  BLDL macro.                                      *  10450000
**                                                                   *  10500000
**                                                                   *  10550000
**     CLASS = class_name                                            *  10600000
**                                                                   *  10650000
**         Specifies the name (RX-type address or register (3)-(12)) *  10700000
**         of an 16-byte varying character string which contains the *  10750000
**         class name of the required data.  The class can be        *  10800000
**         any of the Program Management Binder class names.         *  10850000
**                                                                   *  10900000
**                                                                   *  10950000
**     SECTION = section_name                                        *  11000000
**                                                                   *  11050000
**         Specifies the name (RX-type address or register (3)-(12)) *  11100000
**         of a 1024-byte varying character string which contains    *  11150000
**         the name of the section to be accessed.                   *  11200000
**                                                                   *  11250000
**         NOTE:  This is an optional parameter and will default     *  11300000
**         ====   to a concatenation of all sections in the          *  11350000
**                specified class.                                   *  11400000
**                                                                   *  11450000
**                                                                   *  11500000
**     AREA = output_buffer                                          *  11550000
**                                                                   *  11600000
**         Specifies the name (RX-type address or register (3)-(12)) *  11650000
**         of a standard buffer which will receive the data.         *  11700000
**         The format of the buffer is the same as that required     *  11750000
**         by the Program Management Binder API, GETData.            *  11800000
**                                                                   *  11850000
**                                                                   *  11900000
**     CURSOR = cursor_relative_to_record                            *  11950000
**                                                                   *  12000000
**         Specifies the name of a full-word integer variable        *  12050000
**         which indicates the position, relative to record,         *  12100000
**         where the API should begin processing.                    *  12150000
**                                                                   *  12200000
**         NOTE:                                                     *  12250000
**         ====                                                      *  12300000
**             A) CURSOR is relative to records within a             *  12350000
**                specific section.  If no section name              *  12400000
**                was specified on the first invocation,             *  12450000
**                upon return this variable will indicate            *  12500000
**                the record position relative to the last           *  12550000
**                section processed by the API.                      *  12600000
**                                                                   *  12650000
**             B) A processing error may occur if this value         *  12700000
**                is modified by the caller on subsequent            *  12750000
**                calls to obtain the same kind of data.             *  12800000
**                The request for more data will only be             *  12850000
**                honored if the modified CURSOR value falls         *  12900000
**                within the range of records contained by           *  12950000
**                the last section processed.  If this condition     *  13000000
**                is not met, the RETURN and REASON codes will       *  13050000
**                reflect the error.                                 *  13100000
**                                                                   *  13150000
**                                                                   *  13200000
**     COUNT = number_of_records_returned                            *  13250000
**                                                                   *  13300000
**         Specifies the name of a full-word integer variable        *  13350000
**         which will receive the number of record entries           *  13400000
**         returned by the API in the provided AREA (output_         *  13450000
**         buffer)                                                   *  13500000
**                                                                   *  13550000
**                                                                   *  13600000
**     HOLD = hold_resources_indicator                               *  13650000
**                                                                   *  13700000
**         Specifies the name (RX-type address or register (3)-(12)) *  13750000
**         of a 1-byte character field.                              *  13800000
**         It indicates whether or not more requests for data from   *  13850000
**         the same module will follow.                              *  13900000
**                                                                   *  13925000
**         Yes and No must be specified as "Y" and "N",              *  13950000
**         respectively.  There is no default value.                 *  13983300
**                                                                   *  14016600
**         If Yes is specified, all obtained resources will be       *  14050000
**         kept in order to satisfy subsequent requests for more     *  14100000
**         data.                                                     *  14150000
**                                                                   *  14200000
**     DELETE = delete_module_indicator                              *  14201500
**                                                                   *  14203000
**         Specifies the name (RX-type address or register (3)-(12)) *  14204500
**         of a 1-byte character field.                              *  14206000
**         It indicates whether or not the IEWBFDAT module should be *  14207500
**         deleted from storage by this macro upon return from       *  14209000
**         such module.                                              *  14210500
**                                                                   *  14212000
**         Yes and No must be specified as "Y" and "N",              *  14213500
**         respectively.  This in an optional value and the default  *  14215000
**         value is 'Y'.                                             *  14216500
**                                                                   *  14218000
**         The relation to the HOLD parameter is as follows:         *  14219500
**                                                                   *  14221000
**         If HOLD=YES, ignore DELETE and keep IEWBFDAT in storage   *  14222500
**         If HOLD=NO                                                *  14224000
**          If DELETE=YES, delete IEWBFDAT from storage              *  14225500
**          Else keep IEWBFDAT in storage                            *  14227000
**                                                                   *  14228500
**     LOADFAIL = recovery_routine_if_load_fails                     *  14230000
**                                                                   *  14231500
**         Specifies the name (RX-type address or register (3)-(12)) *  14233000
**         of a four-byte pointer variable which contains the        *  14234500
**         address of a user-defined routine that would take         *  14236000
**         execution control should the LOAD macro fail while        *  14237500
**         attempting to load the IEWBFDAT module.                   *  14239000
**                                                                   *  14240500
**         If no value is specified and the LOAD macro fails, the    *  14242000
**         user's task will terminate abnormally.                    *  14243500
**                                                                   *  14245000
**         NOTE:  This is an optional parameter.                     *  14246500
**         ====                                                      *  14248000
**                                                                   *  14250000
**     SYSTEMDCB = system_dcb_indicator                 11@02A       *  14253800
**                                                                   *  14257600
**         Specifies the name (RX-type address or register (3)-(12)) *  14261400
**         of a 1-byte character field.                              *  14265200
**         It indicates whether the user has passed a system dcb     *  14269000
**         in the DCB parameter.                                     *  14272800
**                                                                   *  14276600
**         Yes and No must be specified as "Y" and "N",              *  14280400
**         respectively.  There is no default value.                 *  14284200
**                                                                   *  14288000
**         If Yes is specified, the user must be authorized.         *  14291800
**                                                                   *  14295600
**     MF= {S|                                                       *  14300000
**          L|                                                       *  14350000
**          {(E,{(2-12)|label}}}                                     *  14400000
**                                                                   *  14450000
**         First argument - keyword "S", "L", "E"                    *  14500000
**                          or default to "S" when MF is ommitted    *  14550000
**                                                                   *  14600000
**         Second argument, if MF=E - regs 2-12 or RX-Type Address   *  14650000
**         NOTE that reg1 is not allowed as this second argument.    *  14700000
**                                                                   *  14750000
**                                                                   *  14800000
**         The MF (Macro Form) keyword specifies how the macro       *  14850000
**         should generate its code.                                 *  14900000
**         Invalid keyword checking, based on function specified,    *  14950000
**         is done for all macro formats.                            *  15000000
**                                                                   *  15050000
**         S, the Standard form, will check for all required         *  15100000
**         and invalid keywords.  This form generates                *  15150000
**         a complete inline expansion of the parameter list.        *  15200000
**         Control is then transferred to the Fast Data Access       *  15250000
**         API routine.                                              *  15300000
**         The Standard form  is for programs that are not           *  15350000
**         re-entrant, or for programs that do not change values     *  15400000
**         in the parameter list.                                    *  15450000
**                                                                   *  15500000
**         L  specifies the List form of the macro. This form        *  15550000
**         generates a remote parameter list.  Registers are         *  15600000
**         invalid arguments for MF=L format since executable code   *  15650000
**         generation does not occur, only adcons are generated.     *  15700000
**         If a register is specified, and adcon of zero is          *  15750000
**         generated.                                                *  15800000
**                                                                   *  15850000
**         E  specifies the Execute form of the macro.  This form    *  15900000
**         updates the remote parameter list (MF=L) and transfers    *  15950000
**         control to the Fast Data Access API routine.              *  16000000
**         A second parameter is required.                           *  16050000
**                                                                   *  16100000
**         The second parameter for MF=E format is the address of    *  16150000
**         the plist created by the MF=L IEWBFDA invocation.  This   *  16200000
**         parameter must be specified as either a RX type of address*  16250000
**         (possibly the label from MF=L macro invocation) or a      *  16300000
**         register enclosed in parentheses.                         *  16350000
**                                                                   *  16400000
**                                                                   *  16450000
** ----------------------------------------------------------------  *  16500000
**                                                                   *  16550000
**   EXIT NORMAL:                                                    *  16600000
**                                                                   *  16650000
**     RETURN CODE: 0                                                *  16700000
**                                                                   *  16750000
**   EXIT ERRORS:                                                    *  16800000
**                                                                   *  16850000
**     RETURN CODE: 8                                                *  16900000
**                                                                   *  16950000
**       REASON CODE: NONE                                           *  17000000
**        MESSAGE:                                                   *  17050000
**                    NO POSITIONAL ARGUMENTS ARE ALLOWED ON THIS    *  17100000
**                    MACRO.                                         *  17150000
**                                                                   *  17200000
**       REASON CODE: NONE                                           *  17250000
**        MESSAGE:                                                   *  17300000
**                    KEYWORD MF MUST BE "S", "L", "E", OR           *  17350000
**                    OMITTED.  VALUE "value" IS INVALID.  THIS      *  17400000
**                    VALUE WILL BE IGONORED FOR SYNTAX CHECKING.    *  17450000
**                                                                   *  17500000
**       REASON CODE: NONE                                           *  17550000
**        MESSAGE:                                                   *  17600000
**                    KEYWORD "MF=S" MUST HAVE EXACTLY 1 ARGUMENT    *  17650000
**                    WHEN SPECIFIED. "args_specified" ARGUMENTS     *  17700000
**                    WERE SPECIFIED.                                *  17750000
**                                                                   *  17800000
**       REASON CODE: NONE                                           *  17850000
**        MESSAGE:                                                   *  17900000
**                    KEYWORD "MF=L" MUST HAVE EXACTLY 1 ARGUMENT    *  17950000
**                    WHEN SPECIFIED. "args_specified" ARGUMENTS     *  18000000
**                    WERE SPECIFIED.                                *  18050000
**                                                                   *  18100000
**       REASON CODE: NONE                                           *  18150000
**        MESSAGE:                                                   *  18200000
**                    KEYWORD "MF=E" MUST HAVE 2 ARGUMENTS.          *  18250000
**                    "args_specified"  ARGUMENT(S) WERE SPECIFIED.  *  18300000
**                                                                   *  18350000
**       REASON CODE: NONE                                           *  18400000
**        MESSAGE:                                                   *  18450000
**                    THE SECOND ARGUMENT OF KEYWORD "MF=(E,..."     *  18500000
**                    WAS NOT SPECIFIED, BUT IT IS REQUIRED.         *  18550000
**                                                                   *  18600000
**       REASON CODE: NONE                                           *  18650000
**        MESSAGE:                                                   *  18700000
**                    THE SECOND ARGUMENT OF KEYWORD "MF=(E,..."     *  18750000
**                    MAY NOT BE REGISTER 1.                         *  18800000
**                                                                   *  18850000
**       REASON CODE: NONE                                           *  18900000
**        MESSAGE:                                                   *  18950000
**                    ONLY ONE VALUE MAY BE SPECIFIED FOR KEYWORD    *  19000000
**                    "parm_name", BUT "values_specified" ARGUMENTS  *  19050000
**                    WERE FOUND.                                    *  19100000
**                                                                   *  19150000
**       REASON CODE: NONE                                           *  19200000
**        MESSAGE:                                                   *  19250000
**                    "parm_name" IS A REQUIRED PARAMETER BUT NO     *  19300000
**                    ARGUMENT WAS PROVIDED.                         *  19350000
**                                                                   *  19400000
**       REASON CODE: NONE                                           *  19450000
**        MESSAGE:                                                   *  19500000
**                    "EPTOKEN" WAS SPECIFIED AND THEREFORE YOU      *  19550000
**                    CANNOT SPECIFY "DDNAME", "MEMBER", "DCBPTR",   *  19600000
**                    OR "DEPTR"                                     *  19650000
**                                                                   *  19700000
**       REASON CODE: NONE                                           *  19750000
**        MESSAGE:                                                   *  19800000
**                                                                   *  19850000
**                    YOU MUST SPECIFY 1) "EPTOKEN", 2) "DDNAME" AND *  19900000
**                    "MEMBER", OR 3) "DCBPTR" AND "DEPTR"           *  19950000
**                                                                   *  20000000
**   EXTERNAL REFERENCES:                                            *  20050000
**                                                                   *  20100000
**     MACROS:                                                       *  20150000
**       NONE                                                        *  20200000
**                                                                   *  20250000
**   CHANGE ACTIVITY:                                                *  20300000
** $L1=PM2ITER4,HDZ11C0,940915,SJPLSML: Base code                    *  20350000
** $01=OW17155, HDZ11C0,951122,SJPLSML: COMPUWARE's fixes       @01A *  20366600
** $02=OW30712, HDZ11D0,980123,SJPLELA: SYSTEMDCB               @02A *  20374900
** $P0=K160769, HDZ11F0,991116,STLMD  : UPDATE PROLOG           @P0A *  20379000
** $03=OW44717, HDZ11F0,000531,SJPLELA: fix parm list alloc     @03A *  20380990
** $04=OW46856, HDZ11F0,001215,SJPLELA: turn on hi-order bit in @04A *  20388190
**                                      last item in parm list  @04A *  20393180
**********************************************************************  20400000
         MACRO                                                          20450000
&LABN IEWBFDA  &ENTRYPNT=,                                             X20483300
               &MTOKEN=,                                               X20516600
               &RETCODE=,                                              X20550000
               &RSNCODE=,                                              X20600000
               &EPTOKEN=,                                              X20650000
               &DDNAME=,                                               X20700000
               &MEMBER=,                                               X20750000
               &DCBPTR=,                                               X20800000
               &DEPTR=,                                                X20850000
               &CLASS=,                                                X20900000
               &SECTION=,                                              X20950000
               &AREA=,                                                 X21000000
               &CURSOR=,                                               X21050000
               &COUNT=,                                                X21100000
               &HOLD=,                                                 X21150000
               &SYSTEMDCB=,                                     @02A   X21158300
               &DELETE=,                                               X21166600
               &LOADFAIL=,                                             X21183200
               &MF=                                                     21200000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  21250000
.* SETUP VARIABLES USED THROUGHOUT MACRO                                21300000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  21350000
         LCLA  &I                  LOOP INDEX                           21400000
         LCLA  &IMAX               MAXIMUM NUMBER OF PARAMETERS         21450000
         LCLC  &FAIL               EXIT MACRO IF FAIL FLAG SET          21500000
         LCLC  &INVOC              INVOC=YES IF MF=S OR MF=E            21550000
         LCLC  &COMPLET            INVOC=YES IF MF=S OR MF=E            21600000
         LCLC  &PLISTN             PARAMETER LIST LABEL FOR MF=E        21650000
         LCLC  &PLHOLD             PARAMETER LIST HOLD LABEL OFFSET     21700000
         LCLC  &PLDEL              PARAMETER LIST DELETE LABEL OFFSET   21733300
&IMAX    SETA  18                  FOR LOOPING MF PARM EXCLUDED @02C    21766600
&FAIL    SETC  'NO'                INIT FAIL FLAG AS NO                 21800000
&INVOK   SETC  'YES'               INVOKE IEWBFDAT                      21850000
&COMPLET SETC  'YES'               DEFAULT, REQUIRED PARMS CHECKED      21900000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  21950000
.* VERIFY THE MACRO LABEL, &LABN.  IF BLANK, THEN CREATE A RANDOM ONE.  21954500
.* IT WILL BE USED LATER AS AN ADDRESSING BASE FOR THE PARMLIST.        21959000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  21963500
          LCLC  &MCLBL                                                  21968000
&MCLBL    SETC  '&LABN'                                                 21972500
&LABLEN   SETA  K'&LABN                                                 21977000
          AIF  ('&LABLEN' NE '0').MACLABOK                              21981500
&MCLBL    SETC  'IEWF&SYSNDX'                                           21986000
.MACLABOK ANOP                                                          21990500
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  21995000
.* CHECK FOR POSITIONAL ARGUMENTS                                       22000000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  22050000
         AIF   (N'&SYSLIST EQ 0).NOPOS ANY NON-KEYWORD ARGUMENTS ?      22100000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            22150000
         MNOTE 8,'NO POSITIONAL ARGUMENTS ARE ALLOWED ON THIS MACRO.'   22200000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  22250000
.* VARIABLES USED FOR KEYWORD MF CHECKING                               22300000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  22350000
.NOPOS   LCLC  &MF1                FIRST MF PARAMETER                   22400000
         LCLA  &MFARGS             NUMBER OF MF ARGUMENTS SPECIFIED     22450000
         LCLC  &MF2E               MF=E 2ND PARAM MF=(E,X               22500000
         LCLC  &MF2E1              MF=E SECOND PAREN, MF=(E,(           22550000
&MF1     SETC  '&MF(1)'            GET MF IF SPECIFIED                  22600000
         AIF   ('&MF1' NE '').MFSET                                     22650000
&MF1     SETC  'S'                     DEFAULT TO 'S' IF NOT SPECIFIED  22700000
&MFARGS  SETA  1                   NUMBER OF MF PARAMETERS              22750000
         AGO   .CHKMF                                                   22800000
.MFSET   ANOP                                                           22850000
&MFARGS  SETA  N'&MF               NUMBER OF MF PARAMETERS              22900000
.* CHECK MF KEYWORD, DEFAULTS TO MF=S                                   22950000
.CHKMF   AIF   ('&MF1' EQ 'S').MFS,    GO CHECK MF=S                   X23000000
               ('&MF1' EQ 'L').MFL,    GO CHECK MF=L                   X23050000
               ('&MF1' EQ 'E').MFE     GO CHECK MF=E                    23100000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  23150000
.* MF=?   INVALID MF VALUE SPECIFIED                                    23200000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  23250000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            23300000
         MNOTE 8,'KEYWORD "MF" MUST BE "S", "L", "E", OR OMITTED.  VALUX23350000
               E "&MF1" IS INVALID. THIS VALUE WILL BE IGNORED FOR SYNTX23400000
               AX CHECKING.'                                            23450000
&MF1     SETC  'S'                     USE MF=S TO DO SYNTAX CHECKING   23500000
         AGO   .ENDMF                  DONE MF KEYWORD CHECKING         23550000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  23600000
.* MF=S   WAS SPECIFIED OR ALLOWED TO DEFAULT                           23650000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  23700000
.MFS     ANOP                                                           23750000
         AIF   (&MFARGS EQ 1).MFSOK                                     23800000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            23850000
         MNOTE 8,'KEYWORD "MF=S" MUST HAVE EXACTLY 1 ARGUMENT WHEN SPECX23900000
               IFIED. "&MFARGS" ARGUMENTS WERE SPECIFIED.'              23950000
.MFSOK   ANOP                                                           24000000
&PLISTN  SETC  '&MCLBL'                                                 24037500
&PLHOLD  SETC  '&MCLBL'.'+56'                                           24075000
&PLDEL   SETC  '&MCLBL'.'+64'          @03C                             24112500
         AGO   .ENDMF                  DONE MF KEYWORD CHECKING         24150000
.*                                                                      24200000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  24250000
.* MF=L  WAS SPECIFIED                                                  24300000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  24350000
.MFL     ANOP                                                           24400000
&COMPLET SETC  'NO'                    PARAMETER CHECKING NOT REQUIRED  24450000
&INVOC   SETC  'NO'                    MF=L SO DON'T INVOKE             24500000
         AIF   (&MFARGS EQ 1).ENDMF                                     24550000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            24600000
         MNOTE 8,'KEYWORD "MF=L" MUST HAVE EXACTLY 1 ARGUMENT,  "&MFARGX24650000
               S" ARGUMENT(S) WERE SPECIFIED.'                          24700000
         AGO   .ENDMF                  DONE MF KEYWORD CHECKING         24750000
.*                                                                      24800000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  24850000
.* MF=(E,...  WAS SPECIFIED                                             24900000
.* CHECK FOR VALID PARAMETERS                                           24950000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  25000000
.MFE     ANOP                                                           25050000
         AIF   (&MFARGS EQ 2).COMOK                                     25100000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            25150000
         MNOTE 8,'KEYWORD "MF=E" MUST HAVE 2 ARGUMENTS, "&MFARGS" ARGUMX25200000
               ENT(S) WERE SPECIFIED.'                                  25250000
.COMOK   ANOP                      COMPLETE SPECIFIED OR DEFAULTED TO   25300000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  25350000
.* SECOND MF=(E,... PARAMETER MAY BE EITHER                             25400000
.* "(2-12) PLIST ADDRESS REGISTER                                       25450000
.* "label"    VARIABLE CONTAINING ADDRESS OF PLIST OR LABEL FROM MF=L   25500000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  25550000
&MF2E    SETC  '&MF(2)'                                                 25600000
         AIF   ('&MF2E' NE '').MF2EOK                                   25650000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            25700000
         MNOTE 8,'THE SECOND ARGUMENT OF KEYWORD "MF=(E,..." WAS NOT SPX25750000
                ECIFIED, BUT IT IS REQUIRED.'                           25800000
         AGO   .ENDMF                                                   25850000
.MF2EOK  ANOP                                                           25900000
&MF2E1   SETC  '&MF(2)'(1,1)      GET FIRST CHARACTER FOR PAREN CHECK   25950000
.* CHECK 2ND MF=E ARGUMENT - {(reg)|label} - REG1 NOT ALLOWED           26000000
.* BECAUSE IT GETS DESTROYED BY THE MACROS WE INVOKE HERE               26050000
         AIF   ('&MF2E' NE '(1)').MFE2CHK                               26100000
         MNOTE 8,'THE SECOND ARGUMENT OF KEYWORD "MF(E,..." MAY NOT BE X26150000
               REGISTER 1.'                                             26200000
&FAIL    SETC  'YES'                   REMEMBER UNSUCCESSFUL            26250000
         AGO   .ENDMF                                                   26300000
.*       IS = (reg)  ?                                                  26350000
.MFE2CHK AIF   ('&MF2E1' NE '(').GENLA                                  26400000
.*       REMOVE PARENS WHEN DO LR                                       26450000
&PLISTN  SETC   '52(,'.'&MF(2,1)'.')'                                   26500000
&MCLBL   LR    1,&MF(2,1)                                               26550000
&COMPLET SETC  'NO'                    PARAMETER CHECKING NOT REQUIRED  26600000
         AGO   .ENDMF              MF CHECKING DONE                     26650000
.*       ELSE IS VARIABLE/LABEL                                         26700000
.GENLA   ANOP                                                           26750000
&PLISTN  SETC   '&MF2E'                                                 26800000
&PLHOLD  SETC   '&MF2E'.'+56'                                           26833300
&PLDEL   SETC   '&MF2E'.'+64'                      @03C                 26866600
&MCLBL   LA    1,&MF2E                                                  26908300
.ENDMF   ANOP                                                           26950000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  27000000
.* CREATE STATIC VARIABLES FOR USE AS ARRAY INDICES,                    27050000
.* ONE FOR EVERY ALLOWED PARAMETER                                      27100000
.* ALL ARRAYS AND CHARACTER STRINGS IN THIS MACRO WILL USE THIS         27150000
.* SAME ORDER                                                           27200000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  27250000
.*                                                                      27300000
&IENTRYPNT        SETA    1                                             27341600
&IMTOKEN          SETA    2                                             27383200
&IRETCODE         SETA    3                                             27424800
&IRSNCODE         SETA    4                                             27466400
&IEPTOKEN         SETA    5                                             27508000
&IDDNAME          SETA    6                                             27549600
&IMEMBER          SETA    7                                             27591200
&IDCBPTR          SETA    8                                             27632800
&IDEPTR           SETA    9                                             27674400
&ICLASS           SETA    10                                            27716000
&ISECTION         SETA    11                                            27757600
&IAREA            SETA    12                                            27799200
&ICURSOR          SETA    13                                            27840800
&ICOUNT           SETA    14                                            27882400
&IHOLD            SETA    15                                            27924000
&ISYSTEMDCB       SETA    16                                    @02A    27955500
&IDELETE          SETA    17                                    @02C    27987000
&ILOADFAIL        SETA    18                                    @02C    28018500
.*                                                                      28050000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  28100000
.*  SET &PARMNAM ARRAY ELEMENTS TO EQUAL KEYWORD NAME                   28150000
.*  TO BE USED MAINLY IN MNOTE ERROR MESSAGES FOR MSG CLARITY           28200000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  28250000
.*                                                                      28300000
         LCLC    &PARMNAME(18)                                  @02C    28350000
.*                                                                      28400000
&PARMNAME(&IENTRYPNT)       SETC    '"ENTRYPNT"'                        28425000
&PARMNAME(&IMTOKEN)         SETC    '"MTOKEN"'                          28450000
&PARMNAME(&IRETCODE)        SETC    '"RETCODE"'                         28500000
&PARMNAME(&IRSNCODE)        SETC    '"RSNCODE"'                         28550000
&PARMNAME(&IEPTOKEN)        SETC    '"EPTOKEN"'                         28600000
&PARMNAME(&IDDNAME)         SETC    '"DDNAME"'                          28650000
&PARMNAME(&IMEMBER)         SETC    '"MEMBER"'                          28700000
&PARMNAME(&IDCBPTR)         SETC    '"DCBPTR"'                          28750000
&PARMNAME(&IDEPTR)          SETC    '"DEPTR"'                           28800000
&PARMNAME(&ICLASS)          SETC    '"CLASS"'                           28850000
&PARMNAME(&ISECTION)        SETC    '"SECTION"'                         28900000
&PARMNAME(&IAREA)           SETC    '"AREA"'                            28950000
&PARMNAME(&ICURSOR)         SETC    '"CURSOR"'                          29000000
&PARMNAME(&ICOUNT)          SETC    '"COUNT"'                           29050000
&PARMNAME(&IHOLD)           SETC    '"HOLD"'                            29100000
&PARMNAME(&ISYSTEMDCB)      SETC    '"SYSTEMDCB"'               @02A    29108300
&PARMNAME(&IDELETE)         SETC    '"DELETE"'                          29116600
&PARMNAME(&ILOADFAIL)       SETC    '"LOADFAIL"'                        29133200
.*                                                                      29150000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  29200000
.*  SET &ARGVAL ARRAY ELEMENTS TO VALUE OF EACH ARGUMENT IF SPECIFIED.  29250000
.*  IF THE ARGUMENT WAS SPECIFIED IN PARENS, THESE WILL BE RETAINED     29300000
.*  IN THE &ARGVAL ELEMENT. PARENS DENOTE REGISTERS.                    29350000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  29400000
.*                                                                      29450000
         LCLC  &ARGVAL(18)                                      @02C    29500000
.*                                                                      29550000
&ARGVAL(&IMTOKEN)           SETC    '&MTOKEN'                           29600000
&ARGVAL(&IENTRYPNT)         SETC    '&ENTRYPNT'                         29625000
&ARGVAL(&IRETCODE)          SETC    '&RETCODE'                          29650000
&ARGVAL(&IRSNCODE)          SETC    '&RSNCODE'                          29700000
&ARGVAL(&IEPTOKEN)          SETC    '&EPTOKEN'                          29750000
&ARGVAL(&IDDNAME)           SETC    '&DDNAME'                           29800000
&ARGVAL(&IMEMBER)           SETC    '&MEMBER'                           29850000
&ARGVAL(&IDCBPTR)           SETC    '&DCBPTR'                           29900000
&ARGVAL(&IDEPTR)            SETC    '&DEPTR'                            29950000
&ARGVAL(&ICLASS)            SETC    '&CLASS'                            30000000
&ARGVAL(&ISECTION)          SETC    '&SECTION'                          30050000
&ARGVAL(&IAREA)             SETC    '&AREA'                             30100000
&ARGVAL(&ICURSOR)           SETC    '&CURSOR'                           30150000
&ARGVAL(&ICOUNT)            SETC    '&COUNT'                            30200000
&ARGVAL(&IHOLD)             SETC    '&HOLD'                             30250000
&ARGVAL(&ISYSTEMDCB)        SETC    '&SYSTEMDCB'                @02A    30258300
&ARGVAL(&IDELETE)           SETC    '&DELETE'                           30266600
&ARGVAL(&ILOADFAIL)         SETC    '&LOADFAIL'                         30283200
.*                                                                      30300000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  30350000
.*  SET &ARGNUM ARRAY ELEMENTS TO THE NUMBER OF PARAMETERS              30400000
.*  SPECIFIED FOR EACH KEYWORD. EXPECTED VALUES ARE 1 OR ZERO.          30450000
.*  USED IN LOOP1 TO VERIFY THAT EITHER 0 OR 1 PARAMETER WAS            30500000
.*  SPECIFIED FOR EACH KEYWORD.                                         30550000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  30600000
.*                                                                      30650000
         LCLA  &ARGNUM(18)                                      @02C    30700000
.*                                                                      30750000
&ARGNUM(&IENTRYPNT)         SETA N'&ENTRYPNT                            30775000
&ARGNUM(&IMTOKEN)           SETA N'&MTOKEN                              30800000
&ARGNUM(&IRETCODE)          SETA N'&RETCODE                             30850000
&ARGNUM(&IRSNCODE)          SETA N'&RSNCODE                             30900000
&ARGNUM(&IEPTOKEN)          SETA N'&EPTOKEN                             30950000
&ARGNUM(&IDDNAME)           SETA N'&DDNAME                              31000000
&ARGNUM(&IMEMBER)           SETA N'&MEMBER                              31050000
&ARGNUM(&IDCBPTR)           SETA N'&DCBPTR                              31100000
&ARGNUM(&IDEPTR)            SETA N'&DEPTR                               31150000
&ARGNUM(&ICLASS)            SETA N'&CLASS                               31200000
&ARGNUM(&ISECTION)          SETA N'&SECTION                             31250000
&ARGNUM(&IAREA)             SETA N'&AREA                                31300000
&ARGNUM(&ICURSOR)           SETA N'&CURSOR                              31350000
&ARGNUM(&ICOUNT)            SETA N'&COUNT                               31400000
&ARGNUM(&IHOLD)             SETA N'&HOLD                                31450000
&ARGNUM(&ISYSTEMDCB)        SETA N'&SYSTEMDCB                   @02A    31458300
&ARGNUM(&IDELETE)           SETA N'&DELETE                              31466600
&ARGNUM(&ILOADFAIL)         SETA N'&LOADFAIL                            31483200
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  31500000
.*  SET &ARGTYPE ARRAY TO BLANKS.                                       31550000
.*                                                                      31600000
.*  IN LOOP1 WE'LL SET THEM TO 'X' OR 'R', DEPENDING ON THE             31650000
.*  ATTRIBUTES WE FIND OUT (RX-TYPE ARGUMENT OR REGISTER ARGUMENT)      31700000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  31750000
.*                                                                      31800000
         LCLC  &ARGTYPE(18)                                     @02C    31850000
.*                                                                      31900000
&ARGTYPE(&IENTRYPNT)        SETC ' '                                    31925000
&ARGTYPE(&IMTOKEN)          SETC ' '                                    31950000
&ARGTYPE(&IRETCODE)         SETC ' '                                    32000000
&ARGTYPE(&IRSNCODE)         SETC ' '                                    32050000
&ARGTYPE(&IEPTOKEN)         SETC ' '                                    32100000
&ARGTYPE(&IDDNAME)          SETC ' '                                    32150000
&ARGTYPE(&IMEMBER)          SETC ' '                                    32200000
&ARGTYPE(&IDCBPTR)          SETC ' '                                    32250000
&ARGTYPE(&IDEPTR)           SETC ' '                                    32300000
&ARGTYPE(&ICLASS)           SETC ' '                                    32350000
&ARGTYPE(&ISECTION)         SETC ' '                                    32400000
&ARGTYPE(&IAREA)            SETC ' '                                    32450000
&ARGTYPE(&ICURSOR)          SETC ' '                                    32500000
&ARGTYPE(&ICOUNT)           SETC ' '                                    32550000
&ARGTYPE(&IHOLD)            SETC ' '                                    32600000
&ARGTYPE(&ISYSTEMDCB)       SETC ' '                            @02A    32608300
&ARGTYPE(&IDELETE)          SETC ' '                                    32616600
&ARGTYPE(&ILOADFAIL)        SETC ' '                                    32633200
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  32650000
.*  SET &ARGREQ ARRAY ELEMENTS TO THE TYPE OF EACH PARAMETER.           32700000
.*                                                                      32750000
.*  A PARAMETER CAN BE REQUIRED OR OPTIONAL  (R | O)                    32800000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  32850000
.*                                                                      32900000
         LCLC  &ARGREQ(18)                                      @02C    32950000
.*                                                                      33000000
&ARGREQ(&IENTRYPNT)         SETC 'R'                                    33025000
&ARGREQ(&IMTOKEN)           SETC 'R'                                    33050000
&ARGREQ(&IRETCODE)          SETC 'R'                                    33100000
&ARGREQ(&IRSNCODE)          SETC 'R'                                    33150000
&ARGREQ(&IEPTOKEN)          SETC 'O'                                    33200000
&ARGREQ(&IDDNAME)           SETC 'O'                                    33250000
&ARGREQ(&IMEMBER)           SETC 'O'                                    33300000
&ARGREQ(&IDCBPTR)           SETC 'O'                                    33350000
&ARGREQ(&IDEPTR)            SETC 'O'                                    33400000
&ARGREQ(&ICLASS)            SETC 'R'                                    33450000
&ARGREQ(&ISECTION)          SETC 'O'                                    33500000
&ARGREQ(&IAREA)             SETC 'R'                                    33550000
&ARGREQ(&ICURSOR)           SETC 'R'                                    33600000
&ARGREQ(&ICOUNT)            SETC 'R'                                    33650000
&ARGREQ(&IHOLD)             SETC 'R'                                    33700000
&ARGREQ(&ISYSTEMDCB)        SETC 'O'                            @02A    33708300
&ARGREQ(&IDELETE)           SETC 'O'                                    33716600
&ARGREQ(&ILOADFAIL)         SETC 'O'                                    33733200
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  33750000
.*  SET &OFFSET ARRAY ELEMENTS TO PLIST LABEL VALUE                     33800000
.*  USED IN LOOP3 FOR ST, STC, OI, NI AND MVI INSTRUCTIONS.             33850000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  33900000
.*                                                                      33950000
         LCLA  &OFFSET(18)                                      @02C    34000000
.*                                                                      34050000
&OFFSET(&IENTRYPNT)         SETA  0                                     34091600
&OFFSET(&IMTOKEN)           SETA  4                                     34133200
&OFFSET(&IRETCODE)          SETA  8                                     34174800
&OFFSET(&IRSNCODE)          SETA  12                                    34216400
&OFFSET(&IEPTOKEN)          SETA  16                                    34258000
&OFFSET(&IDDNAME)           SETA  20                                    34299600
&OFFSET(&IMEMBER)           SETA  24                                    34341200
&OFFSET(&IDCBPTR)           SETA  28                                    34382800
&OFFSET(&IDEPTR)            SETA  32                                    34424400
&OFFSET(&ICLASS)            SETA  36                                    34466000
&OFFSET(&ISECTION)          SETA  40                                    34507600
&OFFSET(&IAREA)             SETA  44                                    34549200
&OFFSET(&ICURSOR)           SETA  48                                    34590800
&OFFSET(&ICOUNT)            SETA  52                                    34632400
&OFFSET(&IHOLD)             SETA  56                                    34674000
&OFFSET(&ISYSTEMDCB)        SETA  60                            @02A    34705500
&OFFSET(&IDELETE)           SETA  64                                    34737000
&OFFSET(&ILOADFAIL)         SETA  68                                    34768500
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  34800000
.* CREATE STATIC ARRAY TO CONTAIN PLIST FIELD COMMENTS                  34850000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  34900000
         LCLC  &FIELDNAM(18)                                    @02C    34950000
.*                                                                      35000000
&FIELDNAM(&IENTRYPNT) SETC 'IEWBFDAT_module_entry_ptr'                  35025000
&FIELDNAM(&IMTOKEN)   SETC 'Token_Issued_by_API'                        35050000
&FIELDNAM(&IRETCODE)  SETC 'Return_Code'                                35100000
&FIELDNAM(&IRSNCODE)  SETC 'Reason_Code'                                35150000
&FIELDNAM(&IEPTOKEN)  SETC 'Program_Entry_Point_Token'                  35200000
&FIELDNAM(&IDDNAME)   SETC 'DDNAME'                                     35250000
&FIELDNAM(&IMEMBER)   SETC 'Primary_or_Alias_Name'                      35300000
&FIELDNAM(&IDCBPTR)   SETC 'DCB_Pointer'                                35350000
&FIELDNAM(&IDEPTR)    SETC 'Directory_Entry_Pointer'                    35400000
&FIELDNAM(&ICLASS)    SETC 'Class_Name'                                 35450000
&FIELDNAM(&ISECTION)  SETC 'Section_Name'                               35500000
&FIELDNAM(&IAREA)     SETC 'Output_Buffer'                              35550000
&FIELDNAM(&ICURSOR)   SETC 'Cursor_Relative_to_Record'                  35600000
&FIELDNAM(&ICOUNT)    SETC 'Number_of_Records_Returned'                 35650000
&FIELDNAM(&IHOLD)     SETC 'Hold_Resources_Indicator'                   35700000
&FIELDNAM(&ISYSTEMDCB) SETC 'System_DCB'                        @02A    35708300
&FIELDNAM(&IDELETE)   SETC 'Delete_Module_Indicator'                    35716600
&FIELDNAM(&ILOADFAIL) SETC 'Recovery_Rtn_if_LOAD_fails'                 35733200
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  35750000
.*                                                                      35800000
.*  LOOP 1  - "PRESENCE AND ERROR MESSAGE LOOP"                         35850000
.*                                                                      35900000
.*  - CHECK ALL SPECIFIED KEYWORDS                                      35950000
.*                                                                      36000000
.*  - SET &FAIL FLAG IF ANY KEYWORD ERRORS                              36050000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  36100000
.*                                                                      36150000
.LOOP1   ANOP                                                           36200000
.*                                                                      36250000
         LCLA  &ARGLEN           LENGTH OF EACH KEYWORD ARGUMENT        36300000
&I       SETA  0                                                        36350000
.RELOOP1 ANOP                                                           36400000
&I       SETA  &I+1                                                     36450000
.* ARE WE DONE?                                                         36500000
         AIF   ('&I' GT '&IMAX').ENDLOP1                EXIT LOOP 1     36550000
.* DETERMINE IF KEYWORD SPECIFIED                                       36600000
         AIF   ('&ARGVAL(&I)' NE '').CHKPARM                            36650000
.* KEYWORD NOT REQUIRED BECAUSE THIS MF=E                               36700000
         AIF   ('&MF1' EQ 'E').RELOOP1                                  36750000
.* CHECK NUMBER OF KEYWORD ARGUMENTS SPECIFIED                          36800000
.CHKPARM AIF   ('&ARGNUM(&I)' EQ '1').CHKREG    IF ONE ARGUMENT         36850000
         AIF   ('&ARGNUM(&I)' EQ '0').CHKREQ    IF NO  ARGUMENT         36900000
&FAIL    SETC  'YES'                         IF MORE THAN ONE ARGUMENT  36950000
.*                                                                      37000000
         MNOTE 8,'ONLY ONE VALUE MAY BE SPECIFIED FOR KEYWORD &PARAMNAMX37050000
               (&I), BUT &ARGNUM(&I) VALUES WERE FOUND.'                37100000
         AGO   .RELOOP1                                                 37150000
.* IF NO ARGUMENT WAS SPECIFIED FOR A SPECIFIC KEYWORD, MAKE SURE       37200000
.* IT IS NOT ONE OF THE REQUIRED PARAMETERS                             37250000
.*                                                                      37300000
.* IF IT'S REQUIRED BUT WAS NOT SPECIFIED, THEN ISSUE ERROR MSG         37310000
.CHKREQ  AIF   ('&ARGREQ(&I)' EQ 'R').ERRMSG                            37320000
.* IF OPTIONAL, SEE IF IT IS PARAMETER FOR WHICH WE CAN SET A DEFAULT   37330000
.*       AIF   (&I EQ &IDELETE).SETDEL                                  37340000
.* SET THE DEFAULT VALUE FOR THE DELETE PARM, WHICH IS 'Y'              37350000
.* .SETDEL   ANOP                                                       37360000
.* &ARGVAL(&IDELETE)  SETC  'Y'                                         37370000
         AGO   .RELOOP1                                                 37380000
.ERRMSG  ANOP                                                           37390000
&FAIL    SETC  'YES'                                                    37400000
         MNOTE 8,''&PARMNAME(&I)' IS A REQUIRED PARAMETER BUT NO ARGUMEX37450000
               NT WAS PROVIDED.'                                        37500000
         AGO   .RELOOP1                                                 37550000
.* CHECK FOR REGISTER ARGUMENT                                          37600000
.* ARGUMENT IS IN A REGISTER IF FIRST CHAR IS '(' AND LAST              37650000
.*                                                    CHAR IS ')'       37700000
.CHKREG  ANOP                                                           37750000
.*                                                                      37800000
&ARGLEN  SETA  K'&ARGVAL(&I)                                            37850000
         AIF   ('&ARGVAL(&I)'(1,1) NE '(').SETRX                        37900000
         AIF   ('&ARGVAL(&I)'(&ARGLEN,1) NE ')').SETRX                  37950000
.*    SET ARGUMENT TYPE TO 'R' FOR REGISTER                             38000000
.SETR    ANOP                                                           38050000
&ARGTYPE(&I) SETC  'R'                                                  38100000
         AGO   .RELOOP1                                                 38150000
.*                                                                      38200000
.* ASSUME RX TYPE OF ARGUMENT                                           38250000
.*                                                                      38300000
.SETRX   ANOP                                                           38350000
&ARGTYPE(&I) SETC  'X'                                                  38400000
         AGO   .RELOOP1                                                 38450000
.ENDLOP1 ANOP                                                           38500000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  38550000
.* CHECK MUTUALLY EXCLUSIVE KEYS:                                       38600000
.*                                                                      38650000
.* WAS THE EPTOKEN SPECIFIED?                                           38700000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  38750000
.CHK1    ANOP                                                           38800000
         AIF   ('&EPTOKEN' EQ '').CHK2                                  38850000
.* EPTOKEN WAS SPECIFIED, THEREFORE DDNAME, MEMBER, DCBPTR AND          38900000
.* DEPTR MUST BE BLANK                                                  38950000
         AIF   (('&DDNAME' EQ '') AND ('&MEMBER' EQ '') AND            X39000000
               ('&DCBPTR' EQ '') AND ('&DEPTR' EQ '')).EXCLUS           39050000
&FAIL    SETC  'YES'                                                    39100000
         MNOTE 8,'"EPTOKEN" WAS SPECIFIED, AND THEREFORE YOU CANNOT SPEX39150000
               CIFY "DDNAME" , "MEMBER" , "DCBPTR", OR "DEPTR"'         39200000
         AGO   .EXCLUS                                                  39250000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  39300000
.* EPTOKEN WAS NOT SPECIFIED                                            39350000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  39400000
.CHK2    ANOP                                                           39450000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  39500000
.* THE DDNAME/MEMBER PAIR WAS SPECIFIED -- LEAVE LOOP                   39550000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  39600000
         AIF   (('&DDNAME' NE '') AND ('&MEMBER' NE '') AND            X39650000
               ('&DCBPTR' EQ '') AND ('&DEPTR' EQ '')).EXCLUS           39700000
.*                                                                      39750000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  39800000
.* THE DCBPTR/DEPTR PAIR WAS SPECIFIED -- LEAVE LOOP                    39850000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  39900000
         AIF   (('&DCBPTR' NE '') AND ('&DEPTR' NE '') AND             X39950000
               ('&DDNAME' EQ '') AND ('&MEMBER' EQ '')).EXCLUS          40000000
.*                                                                      40050000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  40100000
.* THE DDNAME OR THE MEMBER IS BLANK -- IS THIS THE MF=E FORM?          40150000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  40200000
         AIF   (('&DDNAME' EQ '') OR ('&MEMBER' EQ '')).CHK3            40250000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  40300000
.* THE DCBPTR OR THE DEPTR IS BLANK -- IS THIS THE MF=E FORM?           40350000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  40400000
         AIF   (('&DCBPTR' EQ '') OR ('&DEPTR' EQ '')).CHK3             40450000
.* KEYWORD NOT REQUIRED BECAUSE THIS MF=E                               40500000
.CHK3    AIF   ('&MF1' EQ 'E').EXCLUS                                   40550000
&FAIL    SETC  'YES'                                                    40600000
         MNOTE 8,'YOU MUST SPECIFY 1) "EPTOKEN", 2) "DDNAME" AND "MEMBEX40650000
               R", OR  3) "DCBPTR" AND "DEPTR"'                         40700000
.EXCLUS  ANOP                                                           40750000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  40800000
.* IEWBFDA  MACRO KEYWORD VALIDITY CHECKING DONE.                       40850000
.* IF ERRORS EXIST EXIT. ELSE CONTINUE AND ALL OTHER ERROR              40900000
.* MESSAGES WILL BE FROM THE ASSEMBLER.                                 40950000
.*                                                                      41000000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  41050000
         AIF   ('&FAIL' EQ 'YES').ENDMAC                                41100000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  41150000
.*  GEN BRANCH CODE FOR MF=S OR MF=E, GEN PLIST HEADER FOR MF=S OR MF=L 41200000
.*  GEN FUNC CODE                                                       41250000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  41300000
.GEN     ANOP                  START GENERATING CODE                    41350000
.*                                                                      41400000
         AIF   ('&MF1' EQ 'E').GENEND     =E                            41450000
.* HANDLE MF = S                                                        41500000
         AIF   ('&MF1' EQ 'L').GENLL      =L                            41550000
.* HANDLE MF = L                                                        41600000
         AIF   ('&MF1' EQ 'S').GENLS      =S                            41650000
.* PRODUCE MF=L EXPANSION                                               41700000
.GENLL   CNOP  0,4                         WORD ALIGNMENT               41750000
&MCLBL   DS    0F                                                       41800000
         AGO   .GENEND                                                  41850000
.* PRODUCE MF=S EXPANSION                                               41900000
.GENLS   CNOP  0,4                                                      41950000
         BAS   1,*+76                      BRANCH AROUND PARM LIST@03C  42029990
&MCLBL   DC    18A(0)                      RESERVE STRG FOR PARMs@03C   42059980
.GENEND  ANOP                                                           42100000
.*                                                                      42150000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  42200000
.*                                                                      42250000
.*  LOOP 2 - "BUILD INLINE PLIST LOOP"                                  42300000
.*                                                                      42350000
.*  -  DONE FOR MF=L                                                    42400000
.*  -  ENTERED IF NO PREVIOUS KEYWORD ERRORS                            42450000
.*  -  ISSUE DC ALn(0) FOR KEYWORDS THAT DO NOT EXIST                   42500000
.*  -  ISSUE DC ASSEMBLER STATEMENT FOR KEYWORDS THAT EXIST AND         42550000
.*     ARE &ARGTYPE (ARGUMENT TYPES SETUP IN LOOP1) OF :                42600000
.*        'X' - RX TYPE, ASSUMED TO BE NON-EXTERNAL                     42650000
.*                                                                      42700000
.*  -  ISSUE DC AL(HOLD_VALUE+X'80000000') FOR LAST PARM, HOLD          42750000
.*    OR                                                                42800000
.*  -  ISSUE DC AL(X'80000000') FOR HOLD, IF NO HOLD VALUE WAS PASSED   42850000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  42900000
.*                                                                      42950000
         LCLA  &FILLCNT  USED FOR FORMATTING FIELD NAMES                43000000
&FILLCNT SETA  0                                                        43050000
         LCLA  &STARTP   START PARM, USED FOR FORMATTING FIELD NAMES    43100000
&STARTN  SETA  25                                                       43150000
         AIF   (('&MF1' EQ 'E') OR ('&MF1' EQ 'S')).LOOP3               43200000
         LCLC  &BLANKS   USED TO PUSH FIELD NAMES TO THE RIGHT          43250000
&BLANKS  SETC '                                                    '    43300000
         LCLC  &FILLER   USED TO PUSH FIELD NAMES TO THE RIGHT          43350000
&I       SETA  0                                                        43400000
.RELOOP2 ANOP                                                           43450000
&I       SETA  &I+1                                                     43500000
         AIF   ('&I' GT '&ILOADFAIL').ENDLOP2       EXIT LOOP 2         43550000
.*                                                                      43600000
.* CALCULATE FILLER IN ORDER TO FORMAT FIELD NAMES NEATLY               43650000
&FILLCNT SETA  (&STARTN-K'&ARGVAL(&I))                                  43700000
&FILLER  SETC  '&BLANKS'(1,&FILLCNT)                                    43750000
&FILLCNT2 SETA  (&STARTN-(K'&ARGVAL(&I)+12))                            43800000
&FILLER2  SETC  '&BLANKS'(1,&FILLCNT2)                                  43850000
&FILLCNT3 SETA  14                                                      43900000
&FILLER3  SETC  '&BLANKS'(1,&FILLCNT3)                                  43950000
&FILLCNT4 SETA  (&STARTN-3)                                             44000000
&FILLER4  SETC  '&BLANKS'(1,&FILLCNT4)                                  44050000
.*                                                                      44100000
.* HANDLE ARGUMENT TYPE OF RX ADDRESS 'X'                               44150000
.*                                                                      44200000
         AIF   ('&ARGTYPE(&I)' NE 'X').DOREST                           44250000
         AIF   ('&I' EQ '&ISYSTEMDCB').H3                       @02A    44287500
         AIF   (('&I' EQ '&IDELETE') OR ('&I' EQ '&ILOADFAIL')).H4      44325000
         DC    A(&ARGVAL(&I))&FILLER.&FIELDNAM(&I)                      44350000
         AGO   .RELOOP2                                                 44400000
.H3      AIF   ('&ARGVAL(&I)' EQ '').H5                                 44450000
         DC    A(&ARGVAL(&I)+X'80000000')&FILLER2.&FIELDNAM(&I)         44500000
         AGO   .RELOOP2                                                 44522200
.H4      AIF   ('&ARGVAL(&I)' EQ '').H6                                 44544400
         DC    A(&ARGVAL(&I))&FILLER.&FIELDNAM(&I)                      44566600
         AGO   .RELOOP2                                                 44588800
.H5      DC    A(X'80000000')&FILLER3.&FIELDNAM(&I)                     44611000
         AGO   .RELOOP2                                                 44633200
.H6      DC    AL4(0)&FILLER4.&FIELDNAM(&I)                             44655400
         AGO   .RELOOP2                                                 44677600
.*                                                                      44700000
.* ELSE ARGUMENT WAS NOT SPECIFIED OR IF WAS FOR MF=S & MF=L            44750000
.* WILL BE HANDLED BY CODE GENNED IN LOOP3                              44800000
.*                                                                      44850000
.DOREST  AIF   (('&I' EQ '&ILOADFAIL') OR ('&I' EQ '&IDELETE')).H7      44862500
         DC    AL4(0)&FILLER4.&FIELDNAM(&I)                             44875000
         AGO   .RELOOP2                                                 44887500
.H7      AIF   ('&I' EQ '&LOADFAIL').H8                                 44900000
         DC    AL4(0)&FILLER4.&FIELDNAM(&I)                             44912500
         AGO   .RELOOP2                                                 44925000
.H8      ANOP                                                           44937500
         AGO   .RELOOP2                                                 44950000
.*                                                                      45000000
.ENDLOP2 ANOP                                                           45050000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  45100000
.*  LOOP 3 - "FILL IN PLIST LOOP"                                       45150000
.*                                                                      45200000
.*  -  FOR MF=E OR MF=S                                                 45250000
.*  -  HANDLE REMOTE PLIST (MF=E) AND IN-LINE PLIST (MF=S)              45300000
.*  -  ENTERED IF NO PREVIOUS KEYWORD ERRORS                            45350000
.*  -  MOVE KEYWORD ADDRESSES OR VALUES INTO PLIST                      45400000
.*                                                                      45450000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  45500000
.*                                                                      45550000
.LOOP3   AIF   ('&MF1' EQ 'L').ENDLOP3                                  45600000
&I       SETA  0                                                        45650000
.RELOOP3 ANOP                                                           45700000
&I       SETA  &I+1                                                     45750000
         AIF   ('&I' GT '&ILOADFAIL').ENDLOP3       EXIT LOOP 3         45800000
.*                                                                      45850000
.* HANDLE ARGUMENT TYPE OF REGISTER 'R'                                 45900000
.*                                                                      45950000
.*                                                                      46000000
         AIF   ('&ARGTYPE(&I)' NE 'R').DOX3                             46050000
         ST    &ARGVAL(&I),&OFFSET(&I)(0,1)                             46100000
.*                                                        3@04D         46219990
.H1      AGO   .RELOOP3                                                 46300000
.*                                                                      46400000
.* HANDLE ARGUMENT TYPE OF RX ADDRESS                                   46450000
.*                                                                      46500000
.*                                                                      46550000
.DOX3    AIF   ('&ARGTYPE(&I)' NE 'X').RELOOP3                          46600000
.*       AIF   ('&MF1' EQ 'S').RELOOP3                                  46650000
         LA    15,&ARGVAL(&I)                                           46700000
         ST    15,&OFFSET(&I)(0,1)                                      46750000
.*                                                        3@04D         46869990
.H2      AGO   .RELOOP3                                                 46950000
.*                                                                      47050000
.*                                                                      47100000
.ENDLOP3 ANOP                                                           47150000
.* SET HIGH ORDER BIT IN LAST PARAMETER                          @04A   47157990
         OI    60(1),X'80'                                       @04A   47165980
&LOADFD2 SETC  '(2)'                                                    47175000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  47200000
.*  END THE MACRO IF WE HAVE TO, AFTER ALL THE TESTS                    47250000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  47300000
.CHKINVO ANOP                                                           47350000
         AIF   ('&FAIL' EQ 'YES').ENDMAC                                47400000
         AIF   ('&INVOC' EQ 'NO').ENDMAC                                47450000
.*                                                                      47500000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  47550000
.*  GENERATE OUR CALL SEQUENCE FOR THE IEWBFDAT MODULE:                 47600000
.*                                                                      47650000
.*    L    ENTRYPNT                                                     47700000
.*    TEST ENTRYPNT                                                     47750000
.*    IF ZER0                                                           47800000
.*      LOAD IEWBFDAT MODULE INTO VIRTUAL STORAGE                       47850000
.*     ELSE                                                             47900000
.*      L  15,ENTRYPNT  (ADDRESS OF LOADED IEWBFDAT)                    47950000
.*    ENDIF                                                             48000000
.*    BASSM 14,15                                                       48050000
.*                                                                      48100000
.*    TEST HOLD                                                         48150000
.*    IF HOLD=Y THEN DO NOT DELETE IEWBFDAT MODULE                      48172200
.*    IF HOLD=N THEN                                                    48194400
.*      IF DELETE WAS NOT SPECIFIED OR DELETE IS YES                    48216600
.*        DELETE IEWBFDAT MODULE (FROM VIRTUAL STORAGE)                 48238800
.*        ZERO OUT ENTRYPNT                                             48261000
.*      ENDIF                                                           48283200
.*      IF DELETE IS NO                                                 48305400
.*        THEN DO NOT DELETE IEWBFDAT MODULE                            48327600
.*    ENDIF                                                             48350000
.*                                                                      48400000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  48450000
         L     14,0(0,1)          LOAD ADDR OF API'S PARM LIST          48500000
         L     0,0(0,14)          LOAD API'S ENTRYPNT                   48550000
         LTR   0,0                IF ZERO, LOAD THE API INTO STORAGE    48600000
         BNZ   IEWA&SYSNDX                                              48650000
         LR    14,1               SAVE PARM LIST ADDR IN R14            48675000
         L     0,&OFFSET(&ILOADFAIL)(0,14) LOAD RECOVERY ROUT PARM @01C 48700000
         LTR   0,0                IF ZERO, LOAD WITH NO RECOVERY        48725000
         BNZ   IEWB&SYSNDX                                              48750000
         MNOTE  '         LOAD  EP=IEWBFDAT'                            48775000
         LOAD  EP=IEWBFDAT                                              48800000
         B     IEWC&SYSNDX                                              48825000
         MNOTE  '         LOAD  EP=IEWBFDAT,ERRET=&LOADFD2'             48850000
IEWB&SYSNDX LR    2,0                                             @01C  48875000
            LOAD  EP=IEWBFDAT,ERRET=&LOADFD2                            48900000
IEWC&SYSNDX LR    1,14            RESTORE PARM LIST ADDR TO R1          48925000
         L     14,0(0,1)          LOAD ADDR OF THE ENTRYPNT PARM        48950000
         ST    0,0(0,14)          STORE ADDR OF IEWBFDAT IN ENTRYPNT    48975000
IEWA&SYSNDX LR 15,0               LOAD ADDR OF IEWBFDAT INTO R15        49000000
         O     15,=X'80000000'    SET AMODE=31 FOR IEWBFDAT       @01A  49033300
.BRNCH   BASSM 14,15              BRANCH TO IEWBFDAT MODULE             49066600
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  49100000
.*                                                                      49150000
.*    PROCESS THE HOLD AND DELETE PARAMETERS                            49200000
.*                                                                      49450000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  49500000
         L     15,&PLHOLD         LOAD THE HOLD PARM                    49522200
         CLI   0(15),C'Y'         IF HOLD=Y                             49544400
         BE    IEWD&SYSNDX        THEN DO NOT DELETE                    49566600
         L     15,&PLDEL          LOAD THE DELETE PARM                  49588800
         LTR   15,15              TEST FOR VALUE                        49611000
         BZ    IEWE&SYSNDX        IF PARM NOT SPECIFIED THEN DELETE     49633200
         CLI   0(15),C'N'         IF DELETE=N                           49655400
         BE    IEWD&SYSNDX        THEN DO NOT DELETE                    49677600
         MNOTE  '         DELETE EP=IEWBFDAT'                           49700000
IEWE&SYSNDX DELETE EP=IEWBFDAT    ELSE DELETE THE MODULE                49750000
         L     15,&PLISTN         R15 NOW CONTAINS THE ENTRYPNT VALUE   49800000
         XC    0(4,15),0(15)      ZERO OUT THE ENTRYPNT VALUE           49850000
IEWD&SYSNDX CNOP 0,4                                                    49900000
.*                                                                      49950000
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  50000000
.*                                                                      50050000
.ENDMAC  ANOP                                                           50100000
.*                                                                      50150000
         MEND                                                           50200000
