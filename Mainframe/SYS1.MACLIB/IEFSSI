*%IEFSSI: MACRO KEYS(PLISTVER,SUBNAME,REQUEST,CONSNAME,INITRTN,         00000100
*                 INITPARM,INITPLEN,INTOKEN,COMMAND,REQDSUB,OUTTOKEN,   00000200
*                 SUBDATA1,SUBDATA2,WORKAREA,WORKASP,RETCODE,RSNCODE,   00000300
*                 COM,MF);                                              00000400
*/**** START OF SPECIFICATIONS **************************************** 00000500
*                                                                     * 00000600
*                                                                     * 00000700
*01* MACRO NAME:  IEFSSI                                -05/05/94-<1> * 00000800
*                                                                     * 00000900
*                                                                     * 00001000
*01* DESCRIPTIVE NAME:  Dynamic Subsystem Interface Macro             * 00001100
*                                                                     * 00001200
*01* PROPRIETARY STATEMENT:                                           * 00001300
*                                                                     * 00001400
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001500
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00001600
*     5655-068 (C) COPYRIGHT IBM CORP. 1994                           * 00001700
*     SEE COPYRIGHT INSTRUCTIONS                                      * 00001800
*                                                                     * 00001900
* STATUS= HBB5520                                                     * 00002000
*                                                                     * 00002100
*                                                                     * 00002200
*                                                                     * 00002300
*01* FUNCTION:                                                        * 00002400
*                                                                     * 00002500
*      Use the IEFSSI macro to dynamically control a subsystem.       * 00002600
*                                                                     * 00002700
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00002800
*                                                                     * 00002900
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00003000
*                                                                     * 00003100
*01* ENVIRONMENT:                                                     * 00003200
*                                                                     * 00003300
*                                                                     * 00003400
*      Minimum authorization: No authorization is required to use the * 00003500
*                        QUERY service.  All other services require   * 00003600
*                        one of the following:                        * 00003700
*                                                                     * 00003800
*                                                                     * 00003900
*                        o   Supervisor state                         * 00004000
*                                                                     * 00004100
*                        o   Any system PSW key                       * 00004200
*                                                                     * 00004300
*                        o   PSW key mask permitting use of any       * 00004400
*                            system key                               * 00004500
*                                                                     * 00004600
*                        o   APF authorization.                       * 00004700
*                                                                     * 00004800
*                                                                     * 00004900
*                                                                     * 00005000
*      Dispatchable unit mode: Task mode.                             * 00005100
*                                                                     * 00005200
*      Cross Memory Mode: PASN=HASN=SASN.                             * 00005300
*                                                                     * 00005400
*      AMODE:            24- or 31-bit.                               * 00005500
*                                                                     * 00005600
*      ASC mode:         Primary or Access Register.                  * 00005700
*                                                                     * 00005800
*      Interrupt status: Enabled for I/O and external interrupts.     * 00005900
*                                                                     * 00006000
*      Locks:            No locks held.                               * 00006100
*                                                                     * 00006200
*      Control parameters: Control parameters must be in the primary  * 00006300
*                        address space.                               * 00006400
*                                                                     * 00006500
*                                                                     * 00006600
*                                                                     * 00006700
*01* PROGRAMMING REQUIREMENTS:                                        * 00006800
*                                                                     * 00006900
*    Before issuing the IEFSSI macro the caller must have included    * 00007000
*    the following system control blocks:                             * 00007100
*                                                                     * 00007200
*                                                                     * 00007300
*    o   CVT (mapped by macro CVT)                                    * 00007400
*                                                                     * 00007500
*    o   JESCT (mapped by macro IEFJESCT)                             * 00007600
*                                                                     * 00007700
*                                                                     * 00007800
*                                                                     * 00007900
*    If using this macro in a reentrant routine, the list form of the * 00008000
*    macro must be coded in order to use the execute form.            * 00008100
*                                                                     * 00008200
*    In a PL/X routine, the caller must invoke the ?EPILOG macro.     * 00008300
*                                                                     * 00008400
*    The caller must include the IEFJSRC macro to define the Dynamic  * 00008500
*    SSI return and reason codes.                                     * 00008600
*                                                                     * 00008700
*    If issuing a QUERY request, the caller must include the IEFJSQRY * 00008800
*    macro to map the QUERY output.                                   * 00008900
*                                                                     * 00009000
*    To use the ACTIVATE or SWAP services, the subsystem must have    * 00009100
*    created at least 1 SSI-managed vector table using the IEFSSVT    * 00009200
*    macro.                                                           * 00009300
*                                                                     * 00009400
*01* RESTRICTIONS:                                                    * 00009500
*                                                                     * 00009600
*    The caller may not have an EUT FRR established.                  * 00009700
*                                                                     * 00009800
*01* INPUT REGISTER INFORMATION:                                      * 00009900
*                                                                     * 00010000
*    There are no input register requirements for issuing the IEFSSI  * 00010100
*    macro.                                                           * 00010200
*                                                                     * 00010300
*01* OUTPUT REGISTER INFORMATION:                                     * 00010400
*                                                                     * 00010500
*    When control returns to the caller, the GPRs contain:            * 00010600
*                                                                     * 00010700
*                                                                     * 00010800
*    REGISTER  CONTENTS                                               * 00010900
*                                                                     * 00011000
*    0         Reason code                                            * 00011100
*                                                                     * 00011200
*    1         Used as work register by the system                    * 00011300
*                                                                     * 00011400
*    2-13      Unchanged                                              * 00011500
*                                                                     * 00011600
*    14        Used as work register by the system                    * 00011700
*                                                                     * 00011800
*    15        Return code                                            * 00011900
*                                                                     * 00012000
*                                                                     * 00012100
*                                                                     * 00012200
*    When control returns to the caller, the ARs contain:             * 00012300
*                                                                     * 00012400
*                                                                     * 00012500
*    REGISTER  CONTENTS                                               * 00012600
*                                                                     * 00012700
*    0-1       Used as work registers by the system                   * 00012800
*                                                                     * 00012900
*    2-13      Unchanged                                              * 00013000
*                                                                     * 00013100
*    14-15     Used as work registers by the system                   * 00013200
*                                                                     * 00013300
*                                                                     * 00013400
*                                                                     * 00013500
*01* PERFORMANCE IMPLICATIONS:                                        * 00013600
*                                                                     * 00013700
*    None.                                                            * 00013800
*                                                                     * 00013900
*01* SYNTAX:                                                          * 00014000
*                                                                     * 00014100
*[xlabel]  IEFSSI   [ PLISTVER=xplistver|IMPLIED_VERSION]           * 00014200
*                    ,SUBNAME=xsubname                                * 00014300
*                   ,REQUEST=ADD                                     * 00014400
*                  |    [,CONSNAME=xconsname|0]                     * 00014500
*                  |    [,INITRTN=xinitrtn|NO_INITRTN               * 00014600
*                  |        [,INITPARM=xinitparm|NO_INITPARM        * 00014700
*                  |             ,INITPLEN=xinitplen]]                * 00014800
*                   ,REQUEST=ACTIVATE                                * 00014900
*                  |    [,INTOKEN=xintoken|NO_INPUT_TOKEN]          * 00015000
*                   ,REQUEST=OPTIONS                                 * 00015100
*                  |    [,COMMAND=NO|YES]                           * 00015200
*                  |    [,REQDSUB=MSTR|PRI]                         * 00015300
*                   ,REQUEST=DEACTIVATE                              * 00015400
*                  |    [,OUTTOKEN=xouttoken]                         * 00015500
*                   ,REQUEST=SWAP                                    * 00015600
*                  |    [,INTOKEN=xintoken|NO_INPUT_TOKEN]          * 00015700
*                  |    [,OUTTOKEN=xouttoken]                         * 00015800
*                   ,REQUEST=PUT                                     * 00015900
*                  |    ,SUBDATA1=xsubdata1                          * 00016000
*                  |    ,SUBDATA2=xsubdata2                          * 00016100
*                   ,REQUEST=GET                                     * 00016200
*                  |    ,SUBDATA1=[xsubdata1]                        * 00016300
*                  |    ,SUBDATA2=[xsubdata2]                        * 00016400
*                   ,REQUEST=QUERY                                   * 00016500
*                        ,WORKAREA=xworkarea                          * 00016600
*                       [,WORKASP=xworkasp|0]                       * 00016700
*                   [,RETCODE=xretcode]                               * 00016800
*                   [,RSNCODE=xrsncode]                               * 00016900
*                   [,COM=xcom|NULL]                                * 00017000
*                  [,MF=S]                                           * 00017100
*                  [,MF=(L,xmfctrl,xmfattr|0D)]                    * 00017200
*                  [,MF=(E,xmfctrl,COMPLETE)]                      * 00017300
*                                                                     * 00017400
*                                                                     * 00017500
*      Where:                                                         * 00017600
*                                                                     * 00017700
*                                                                     * 00017800
*      [xlabel]                                                       * 00017900
*          is an optional symbol, starting in column 1, that is the   * 00018000
*          name on the IEFSSI macro invocation.  The name must        * 00018100
*          conform to the rules for an ordinary assembler language    * 00018200
*          symbol.                                                    * 00018300
*          DEFAULT: No name.                                          * 00018400
*                                                                     * 00018500
*                                                                     * 00018600
*                                                                     * 00018700
*                                                                     * 00018800
*      [PLISTVER(xplistver|IMPLIED_VERSION)]                        * 00018900
*          is an optional byte input decimal value in the "1-1" range * 00019000
*          that specifies the macro version.  PLISTVER is the only    * 00019100
*          key allowed on the list form of MF and determines which    * 00019200
*          parameter list is generated.  Note that MAX may be         * 00019300
*          specified instead of a number, and the parameter list will * 00019400
*          be of the largest size currently supported. This size may  * 00019500
*          grow from release to release (thus possibly affecting the  * 00019600
*          amount of storage needed by your program).  If your        * 00019700
*          program can tolerate this, IBM recommends that you always  * 00019800
*          specify MAX when creating the list form parameter list as  * 00019900
*          that will ensure that the list form parameter list is      * 00020000
*          always long enough to hold whatever parameters might be    * 00020100
*          specified on the execute form.                             * 00020200
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00020300
*          default is the lowest version which allows all of the      * 00020400
*          parameters specified on the invocation to be processed.    * 00020500
*                                                                     * 00020600
*                                                                     * 00020700
*                                                                     * 00020800
*                                                                     * 00020900
*      SUBNAME(xsubname)                                              * 00021000
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00021100
*          only) of a required 4 character input containing the       * 00021200
*          subsystem name.  The subsystem name may contain any EBCDIC * 00021300
*          characters other than blank ('40'x) or null ('00'x).       * 00021400
*                                                                     * 00021500
*          NOTE:  If the subsystem will be started, its name must     * 00021600
*                 meet the requirements for the name of a started     * 00021700
*                 task.                                               * 00021800
*                                                                     * 00021900
*                                                                     * 00022000
*          If the length of the subsystem name is less than 4         * 00022100
*          characters, it must be padded to the right with blanks or  * 00022200
*          nulls.                                                     * 00022300
*                                                                     * 00022400
*          For REQUEST=QUERY, the name may contain the wildcard       * 00022500
*          characters '*' and '?' to request information about        * 00022600
*          multiple subsystems.  The wildcard characters have the     * 00022700
*          following meanings:                                        * 00022800
*                                                                     * 00022900
*                                                                     * 00023000
*          o   '*' matches 0 or more characters                       * 00023100
*                                                                     * 00023200
*          o   '?' matches exactly 1 character.                       * 00023300
*                                                                     * 00023400
*                                                                     * 00023500
*          A SUBNAME value of '!PRI' can be used to indicate that     * 00023600
*          information is to be returned for the primary subsystem.   * 00023700
*          A value of '*' can be used to indicate that information is * 00023800
*          to be returned for all subsystems.                         * 00023900
*                                                                     * 00024000
*                                                                     * 00024100
*                                                                     * 00024200
*                                                                     * 00024300
*       REQUEST(ADD|ACTIVATE|OPTIONS|DEACTIVATE|SWAP|PUT|GET|QUERY) * 00024400
*                                                                     * 00024500
*          is a required keyword input that specifies the action to   * 00024600
*          be performed.                                              * 00024700
*                                                                     * 00024800
*                                                                     * 00024900
*           REQUEST(ADD)                                              * 00025000
*              Use the ADD request to dynamically define a subsystem  * 00025100
*              to the system.                                         * 00025200
*                                                                     * 00025300
*              Only subsystems that have been defined using the       * 00025400
*              keyword format IEFSSNxx parmlib member, the IEFSSI     * 00025500
*              REQUEST=ADD macro, or the SETSSI ADD system command    * 00025600
*              can use the following SSI services.                    * 00025700
*                                                                     * 00025800
*                                                                     * 00025900
*              o   Macros                                             * 00026000
*                                                                     * 00026100
*                                                                     * 00026200
*                  IEFSSI REQUEST=ACTIVATE     Activate subsystem     * 00026300
*                                                                     * 00026400
*                  IEFSSI REQUEST=DEACTIVATE   Deactivate subsystem   * 00026500
*                                                                     * 00026600
*                  IEFSSI REQUEST=OPTIONS      Define subsystem       * 00026700
*                                              options                * 00026800
*                                                                     * 00026900
*                  IEFSSI REQUEST=SWAP         Exchange subsystem     * 00027000
*                                              vector tables          * 00027100
*                                                                     * 00027200
*                  IEFSSI REQUEST=GET          Get data               * 00027300
*                                                                     * 00027400
*                  IEFSSI REQUEST=PUT          Put data               * 00027500
*                                                                     * 00027600
*                  IEFSSVT                     Process subsystem      * 00027700
*                                              vector tables          * 00027800
*                                                                     * 00027900
*                                                                     * 00028000
*                                                                     * 00028100
*              o   System commands                                    * 00028200
*                                                                     * 00028300
*                                                                     * 00028400
*                  SETSSI ACTIVATE             Activate subsystem     * 00028500
*                                                                     * 00028600
*                  SETSSI DEACTIVATE           Deactivate subsystem   * 00028700
*                                                                     * 00028800
*                                                                     * 00028900
*                                                                     * 00029000
*                                                                     * 00029100
*                                                                     * 00029200
*                                                                     * 00029300
*              [CONSNAME(xconsname|0)]                              * 00029400
*                  is the name (RS-type) (or address in register      * 00029500
*                  (2)-(12) ASM only) of an optional 8 character      * 00029600
*                  input specifying the name of the console to which  * 00029700
*                  any messages issued by the SSI as part of          * 00029800
*                  initialization processing are to be written.  This * 00029900
*                  console name will also be passed to the routine    * 00030000
*                  named on the INITRTN keyword if it is specified.   * 00030100
*                                                                     * 00030200
*                  If CONSNAME is not specified, the SSI will issue   * 00030300
*                  messages to the master console.                    * 00030400
*                  DEFAULT: 0                                         * 00030500
*                                                                     * 00030600
*                                                                     * 00030700
*                                                                     * 00030800
*                                                                     * 00030900
*              [INITRTN(xinitrtn|NO_INITRTN)                        * 00031000
*                  is the name (RS-type) (or address in register      * 00031100
*                  (2)-(12) ASM only) of an optional 8 character      * 00031200
*                  input that specifies the name of a subsystem       * 00031300
*                  initialization routine.  The routine:              * 00031400
*                                                                     * 00031500
*                                                                     * 00031600
*                  o   Receives control in supervisor state key 0.    * 00031700
*                                                                     * 00031800
*                  o   Runs in the caller's address space.            * 00031900
*                                                                     * 00032000
*                  o   Must be accessible through the link list or    * 00032100
*                      link pack area.                                * 00032200
*                                                                     * 00032300
*                                                                     * 00032400
*                                                                     * 00032500
*                  Any initialization routine name that is less than  * 00032600
*                  8 characters must be padded to the right with      * 00032700
*                  blanks.                                            * 00032800
*                  DEFAULT: NO_INITRTN                                * 00032900
*                                                                     * 00033000
*                                                                     * 00033100
*                  [INITPARM(xinitparm|NO_INITPARM)                 * 00033200
*                      is the name (RS-type) (or address in register  * 00033300
*                      (2)-(12) ASM only) of an optional 60 character * 00033400
*                      input that contains a parameter string that is * 00033500
*                      passed to the subsystem initialization         * 00033600
*                      routine.  The parameter string is of variable  * 00033700
*                      length, from 1 to 60 characters.  The INITPLEN * 00033800
*                      keyword specifies the actual length of the     * 00033900
*                      passed parameter.  The INITPARM keyword is     * 00034000
*                      only applicable if the INITRTN keyword is      * 00034100
*                      specified.                                     * 00034200
*                      DEFAULT: NO_INITPARM                           * 00034300
*                                                                     * 00034400
*                                                                     * 00034500
*                      INITPLEN(xinitplen)]]                          * 00034600
*                          is the name (RS-type) (or address in       * 00034700
*                          register (2)-(12) ASM only) of a required  * 00034800
*                          fullword input that contains the length of * 00034900
*                          the parameter string to be passed to the   * 00035000
*                          subsystem initialization routine.  The     * 00035100
*                          INITPLEN keyword must be specified if the  * 00035200
*                          INITPARM keyword is specified.  The length * 00035300
*                          must be between 1 and 60 characters        * 00035400
*                          inclusive, or the subsystem initialization * 00035500
*                          routine will not be invoked.               * 00035600
*                                                                     * 00035700
*                                                                     * 00035800
*                                                                     * 00035900
*                                                                     * 00036000
*                                                                     * 00036100
*                                                                     * 00036200
*                                                                     * 00036300
*           REQUEST(ACTIVATE)                                         * 00036400
*              The ACTIVATE request is used to dynamically activate a * 00036500
*              subsystem so that its function routines are available  * 00036600
*              to process function requests.  The subsystem that      * 00036700
*              issues the IEFSSI REQUEST=ACTIVATE macro must do the   * 00036800
*              following before invoking the macro:                   * 00036900
*                                                                     * 00037000
*                                                                     * 00037100
*              o   Be defined to the system.                          * 00037200
*                                                                     * 00037300
*              o   Ensure that a subsystem vector table has been      * 00037400
*                  built using the IEFSSVT CREATE service.            * 00037500
*                                                                     * 00037600
*                                                                     * 00037700
*                                                                     * 00037800
*              The ACTIVATE request may also be used to reactivate a  * 00037900
*              subsystem that has been deactivated.  The reactivation * 00038000
*              may be done with the same subsystem vector table that  * 00038100
*              has been previously deactivated or with a new          * 00038200
*              subsystem vector table.                                * 00038300
*                                                                     * 00038400
*                                                                     * 00038500
*              [INTOKEN(xintoken|NO_INPUT_TOKEN)]                   * 00038600
*                  is the name (RS-type) (or address in register      * 00038700
*                  (2)-(12) ASM only) of an optional 32 bit input     * 00038800
*                  that specifies the token representing the          * 00038900
*                  subsystem vector table to be used in activating    * 00039000
*                  the subsystem.  The function routines associated   * 00039100
*                  with the subsystem vector table will be made       * 00039200
*                  available for processing requests.  The token must * 00039300
*                  be one that was returned by the IEFSSVT create     * 00039400
*                  service, an IEFSSI REQUEST=DEACTIVATE macro        * 00039500
*                  request, or an IEFSSI REQUEST=SWAP request.        * 00039600
*                                                                     * 00039700
*                  If the INTOKEN keyword is omitted, a subsystem     * 00039800
*                  vector table will be chosen as follows:            * 00039900
*                                                                     * 00040000
*                                                                     * 00040100
*                  1.  The most recently active SSI-managed vector    * 00040200
*                      table                                          * 00040300
*                                                                     * 00040400
*                  2.  If no remaining vector table has ever been     * 00040500
*                      activated, the last SSI-managed vector table   * 00040600
*                      created.                                       * 00040700
*                                                                     * 00040800
*                                                                     * 00040900
*                  An SSI-managed vector table is a vector table      * 00041000
*                  created with the IEFSSVT CREATE service.           * 00041100
*                  DEFAULT: NO_INPUT_TOKEN                            * 00041200
*                                                                     * 00041300
*                                                                     * 00041400
*                                                                     * 00041500
*           REQUEST(OPTIONS)                                          * 00041600
*              The OPTIONS request is used to define a set of         * 00041700
*              optional subsystem characteristics.  The following     * 00041800
*              subsystem options are set using this macro:            * 00041900
*                                                                     * 00042000
*                                                                     * 00042100
*              o   Whether the subsystem responds to SETSSI system    * 00042200
*                  commands                                           * 00042300
*                                                                     * 00042400
*              o   The subsystem (MSTR or primary) under which the    * 00042500
*                  invoking subsystem will start.                     * 00042600
*                                                                     * 00042700
*                                                                     * 00042800
*                                                                     * 00042900
*              These optional characteristics cannot be set with an   * 00043000
*              IEFSSNxx parmlib entry or by the SETSSI system         * 00043100
*              command.                                               * 00043200
*                                                                     * 00043300
*              If the OPTIONS service is invoked multiple times for a * 00043400
*              single subsystem, the most recent invocation           * 00043500
*              determines the resulting characteristics.  The         * 00043600
*              defaults listed for the keywords below apply to the    * 00043700
*              first invocation.  If a keyword is not specified on a  * 00043800
*              subsequent invocation, the corresponding subsystem     * 00043900
*              characteristic retains the value assigned by the last  * 00044000
*              invocation that specified the keyword.                 * 00044100
*                                                                     * 00044200
*                                                                     * 00044300
*              [COMMAND(NO|YES)]                                    * 00044400
*                  is an optional keyword input that specifies        * 00044500
*                  whether the subsystem responds to the following    * 00044600
*                  system commands:                                   * 00044700
*                                                                     * 00044800
*                                                                     * 00044900
*                  o   SETSSI ACTIVATE                                * 00045000
*                                                                     * 00045100
*                  o   SETSSI DEACTIVATE                              * 00045200
*                                                                     * 00045300
*                                                                     * 00045400
*                                                                     * 00045500
*                  A COMMAND option of YES should be specified only   * 00045600
*                  if the subsystem can tolerate the processing       * 00045700
*                  associated with each command.                      * 00045800
*                  DEFAULT: NO                                        * 00045900
*                                                                     * 00046000
*                                                                     * 00046100
*                  NO        The subsystem does not allow SETSSI      * 00046200
*                            commands.                                * 00046300
*                                                                     * 00046400
*                  YES       The subsystem allows SETSSI commands.    * 00046500
*                                                                     * 00046600
*                                                                     * 00046700
*                                                                     * 00046800
*                                                                     * 00046900
*                                                                     * 00047000
*                                                                     * 00047100
*              [REQDSUB(MSTR|PRI)]                                  * 00047200
*                  is an optional keyword input specifying whether a  * 00047300
*                  START 'subsystem' command will cause the subsystem * 00047400
*                  to start under control of the MSTR subsystem or    * 00047500
*                  the primary subsystem (JES).                       * 00047600
*                                                                     * 00047700
*                  When the procedure name on a START command matches * 00047800
*                  a defined subsystem name, the procedure being      * 00047900
*                  started is recognized as a subsystem.  If the      * 00048000
*                  START command does not specify the SUB= keyword,   * 00048100
*                  the subsystem will be started under control of the * 00048200
*                  subsystem identified by the REQDSUB keyword.       * 00048300
*                  DEFAULT: MSTR                                      * 00048400
*                                                                     * 00048500
*                                                                     * 00048600
*                  MSTR      The subsystem specified does not require * 00048700
*                            the services of the primary subsystem,   * 00048800
*                            and will start under the MSTR subsystem. * 00048900
*                                                                     * 00049000
*                  PRI       The subsystem specified requires the     * 00049100
*                            services of the primary subsystem and    * 00049200
*                            must start under its control.  If a      * 00049300
*                            START 'subsystem' command is issued      * 00049400
*                            before the primary subsystem is          * 00049500
*                            available, the START command will fail.  * 00049600
*                                                                     * 00049700
*                                                                     * 00049800
*                                                                     * 00049900
*                                                                     * 00050000
*                                                                     * 00050100
*           REQUEST(DEACTIVATE)                                       * 00050200
*              Use the DEACTIVATE request to deactivate a subsystem.  * 00050300
*              This stops any new function requests from being passed * 00050400
*              to the subsystem's function routines.                  * 00050500
*                                                                     * 00050600
*              After being deactivated, a subsystem may reactivate    * 00050700
*              itself using the same or a different subsystem vector  * 00050800
*              table.                                                 * 00050900
*                                                                     * 00051000
*                                                                     * 00051100
*              [OUTTOKEN(xouttoken)]                                  * 00051200
*                  is the name (RS-type) (or address in register      * 00051300
*                  (2)-(12) ASM only) of an optional 32 bit output    * 00051400
*                  where the token representing the subsystem vector  * 00051500
*                  table to be deactivated will be returned.          * 00051600
*                                                                     * 00051700
*                  This token may be used in a subsequent ACTIVATE    * 00051800
*                  request to reactivate the subsystem using the same * 00051900
*                  subsystem vector table.                            * 00052000
*                                                                     * 00052100
*                                                                     * 00052200
*                                                                     * 00052300
*           REQUEST(SWAP)                                             * 00052400
*              Use the SWAP request to replace the subsystem vector   * 00052500
*              table currently being used to route function requests  * 00052600
*              with a new one, as an atomic operation.  This has the  * 00052700
*              effect of deactivating the current subsystem vector    * 00052800
*              table and immediately reactivating the subsystem with  * 00052900
*              a new subsystem vector table.  At all times during the * 00053000
*              execution of the SWAP request, the subsystem will be   * 00053100
*              able to respond to function requests, assuming it was  * 00053200
*              initially active.                                      * 00053300
*                                                                     * 00053400
*              Once a SWAP request has been used to switch subsystem  * 00053500
*              vector tables, it is possible for a subsequent SWAP    * 00053600
*              request to be used to switch the subsystem vector      * 00053700
*              table again, in effect restoring the old function      * 00053800
*              routines.                                              * 00053900
*                                                                     * 00054000
*              A SWAP request targeting an inactive subsystem will be * 00054100
*              treated as an ACTIVATE request but will receive return * 00054200
*              code IEFSSI_WARNING (4).                               * 00054300
*                                                                     * 00054400
*                                                                     * 00054500
*              [INTOKEN(xintoken|NO_INPUT_TOKEN)]                   * 00054600
*                  is the name (RS-type) (or address in register      * 00054700
*                  (2)-(12) ASM only) of an optional 32 bit input     * 00054800
*                  that specifies the token representing the          * 00054900
*                  subsystem vector table to be used in activating    * 00055000
*                  the subsystem.  The function routines associated   * 00055100
*                  with the subsystem vector table will immediately   * 00055200
*                  be made available for processing requests.  The    * 00055300
*                  token must be one that was returned by the IEFSSVT * 00055400
*                  create service, an IEFSSI REQUEST=DEACTIVATE macro * 00055500
*                  request, or a previous IEFSSI REQUEST=SWAP         * 00055600
*                  request.  If INTOKEN is omitted, the inactive      * 00055700
*                  SSI-managed vector table will be used, provided    * 00055800
*                  that the subsystem has one.  (An SSI-managed       * 00055900
*                  vector table is a vector table created with the    * 00056000
*                  IEFSSVT CREATE service).                           * 00056100
*                  DEFAULT: NO_INPUT_TOKEN                            * 00056200
*                                                                     * 00056300
*                                                                     * 00056400
*                                                                     * 00056500
*                                                                     * 00056600
*              [OUTTOKEN(xouttoken)]                                  * 00056700
*                  is the name (RS-type) (or address in register      * 00056800
*                  (2)-(12) ASM only) of an optional 32 bit output    * 00056900
*                  where the token of the subsystem vector table to   * 00057000
*                  be deactivated will be returned.                   * 00057100
*                                                                     * 00057200
*                  This token may be used in a subsequent SWAP        * 00057300
*                  request to reactivate the subsystem using the same * 00057400
*                  subsystem vector table.                            * 00057500
*                                                                     * 00057600
*                                                                     * 00057700
*                                                                     * 00057800
*           REQUEST(PUT)                                              * 00057900
*              Use the PUT request to store subsystem-defined data    * 00058000
*              for the subsystem.  Two non-contiguous fullword fields * 00058100
*              are available for subsystem data.  A typical use for   * 00058200
*              these fields is to anchor subsystem specific control   * 00058300
*              blocks.                                                * 00058400
*                                                                     * 00058500
*                                                                     * 00058600
*              The following is a group of keys.  At least one must   * 00058700
*              be specified.                                          * 00058800
*                                                                     * 00058900
*                                                                     * 00059000
*              SUBDATA1(xsubdata1)                                    * 00059100
*                  is the name (RS-type) (or address in register      * 00059200
*                  (2)-(12) ASM only) of a 4 character input area     * 00059300
*                  containing the first 4 bytes of subsystem-specific * 00059400
*                  information.                                       * 00059500
*                                                                     * 00059600
*              SUBDATA2(xsubdata2)                                    * 00059700
*                  is the name (RS-type) (or address in register      * 00059800
*                  (2)-(12) ASM only) of a 4 character input area     * 00059900
*                  containing the second 4 bytes of                   * 00060000
*                  subsystem-specific information.                    * 00060100
*                                                                     * 00060200
*                                                                     * 00060300
*                                                                     * 00060400
*              End of group of keys.                                  * 00060500
*                                                                     * 00060600
*                                                                     * 00060700
*           REQUEST(GET)                                              * 00060800
*              Use the GET request to retrieve subsystem-defined data * 00060900
*              previously stored using IEFSSI REQUEST=PUT.            * 00061000
*                                                                     * 00061100
*                                                                     * 00061200
*              The following is a group of keys.  At least one must   * 00061300
*              be specified.                                          * 00061400
*                                                                     * 00061500
*                                                                     * 00061600
*              SUBDATA1([xsubdata1])                                  * 00061700
*                  is the name (RS-type) (or address in register      * 00061800
*                  (2)-(12) ASM only) of a 4 character output area to * 00061900
*                  return the first 4 bytes of subsystem-specific     * 00062000
*                  information identified by the SUBDATA1 keyword on  * 00062100
*                  a previous IEFSSI REQUEST=PUT request.             * 00062200
*                                                                     * 00062300
*              SUBDATA2([xsubdata2])                                  * 00062400
*                  is the name (RS-type) (or address in register      * 00062500
*                  (2)-(12) ASM only) of a 4 character output area to * 00062600
*                  return the second 4 bytes of subsystem-specific    * 00062700
*                  information identified by the SUBDATA2 keyword on  * 00062800
*                  a previous IEFSSI REQUEST=PUT request.             * 00062900
*                                                                     * 00063000
*                                                                     * 00063100
*                                                                     * 00063200
*              End of group of keys.                                  * 00063300
*                                                                     * 00063400
*                                                                     * 00063500
*           REQUEST(QUERY)                                            * 00063600
*              Use the QUERY request to obtain information about a    * 00063700
*              currently defined subsystem.  Information for any      * 00063800
*              subsystem can be obtained by specifying the            * 00063900
*              subsystem's name in the SUBNAME parameter.             * 00064000
*              Information for the primary subsystem can be obtained  * 00064100
*              by specifying a SUBNAME value of '!PRI'.  The          * 00064200
*              following information is returned:                     * 00064300
*                                                                     * 00064400
*                                                                     * 00064500
*              o   Subsystem status (active or inactive)              * 00064600
*                                                                     * 00064700
*              o   Whether the subsystem is dynamic                   * 00064800
*                                                                     * 00064900
*              o   Whether the subsystem responds to SETSSI commands  * 00065000
*                                                                     * 00065100
*              o   The list of function codes supported by all        * 00065200
*                  SSI-managed vector tables associated with the      * 00065300
*                  subsystem, or by the currently active vector table * 00065400
*                  if the subsystem has no SSI-managed vector tables. * 00065500
*                                                                     * 00065600
*                                                                     * 00065700
*              The output from this request is mapped by macro        * 00065800
*              IEFJSQRY.                                              * 00065900
*                                                                     * 00066000
*              The QUERY request can be used to obtain information    * 00066100
*              for multiple subsystems by using wildcard characters   * 00066200
*              as described for the SUBNAME keyword.  Subsystems will * 00066300
*              be listed in broadcast order (the order in which they  * 00066400
*              receive a broadcast SSI request).                      * 00066500
*                                                                     * 00066600
*                                                                     * 00066700
*              WORKAREA(xworkarea)                                    * 00066800
*                  is the name (RS-type) (or address in register      * 00066900
*                  (2)-(12) ASM only) of a required  pointer output   * 00067000
*                  that will contain the address of the subsystem     * 00067100
*                  information returned by the QUERY request.  The    * 00067200
*                  output area is mapped by macro IEFJSQRY.  The      * 00067300
*                  length of the output area is contained in field    * 00067400
*                  JQRYLEN of the mapping.                            * 00067500
*                                                                     * 00067600
*                                                                     * 00067700
*                                                                     * 00067800
*                                                                     * 00067900
*              [WORKASP(xworkasp|0)]                                * 00068000
*                  is the name (RS-type) (or address in register      * 00068100
*                  (2)-(12) ASM only) of an optional byte input       * 00068200
*                  specifying the subpool used by the SSI to obtain a * 00068300
*                  work area for the returned subsystem information.  * 00068400
*                  The caller is responsible for freeing this work    * 00068500
*                  area.  It is recommended that a job- or            * 00068600
*                  task-related subpool be used.  In the event that   * 00068700
*                  the caller does not free the returned area, this   * 00068800
*                  will allow the associated storage to be freed by   * 00068900
*                  the system at job or task termination.  If WORKASP * 00069000
*                  is not specified, the caller's subpool zero will   * 00069100
*                  be used.  Storage for the query information will   * 00069200
*                  be obtained above the 16M line if the specified    * 00069300
*                  subpool permits; AMODE 24 callers must switch into * 00069400
*                  AMODE 31 to address this storage.                  * 00069500
*                                                                     * 00069600
*                  Unauthorized callers may request storage only in   * 00069700
*                  unauthorized subpools (0-127, 131, or 132).        * 00069800
*                  DEFAULT: 0                                         * 00069900
*                                                                     * 00070000
*                                                                     * 00070100
*                                                                     * 00070200
*                                                                     * 00070300
*                                                                     * 00070400
*                                                                     * 00070500
*                                                                     * 00070600
*                                                                     * 00070700
*      [RETCODE(xretcode)]                                            * 00070800
*          is the name (RS-type) of an optional fullword output       * 00070900
*          variable (or register (2)-(12) ASM only) into which the    * 00071000
*          return code is to be copied from GPR 15.                   * 00071100
*                                                                     * 00071200
*                                                                     * 00071300
*                                                                     * 00071400
*                                                                     * 00071500
*      [RSNCODE(xrsncode)]                                            * 00071600
*          is the name (RS-type) of an optional fullword output       * 00071700
*          variable (or register (2)-(12) ASM only) into which the    * 00071800
*          reason code is to be copied from GPR 0.                    * 00071900
*                                                                     * 00072000
*                                                                     * 00072100
*                                                                     * 00072200
*                                                                     * 00072300
*      [COM(xcom|NULL)]                                             * 00072400
*          is an optional character input  that will appear in the    * 00072500
*          block comment before the macro invocation echo. It can be  * 00072600
*          used to comment the macro invocation.  The comment string  * 00072700
*          must be enclosed in quotes if it contains any lower case   * 00072800
*          characters.                                                * 00072900
*          DEFAULT: NULL                                              * 00073000
*                                                                     * 00073100
*                                                                     * 00073200
*                                                                     * 00073300
*                                                                     * 00073400
*      [MF(S|L|E)]                                                  * 00073500
*          is an optional keyword input which specifies the macro     * 00073600
*          form.                                                      * 00073700
*          DEFAULT: S                                                 * 00073800
*                                                                     * 00073900
*                                                                     * 00074000
*          [MF(S)]                                                    * 00074100
*              specifies the standard form of the macro.  The "S"     * 00074200
*              form generates code to put the parameters into the     * 00074300
*              parameter list and invoke the desired service.  Full   * 00074400
*              checking for required macro keys is done along with    * 00074500
*              supplying defaults for omitted optional parameters.    * 00074600
*              The ?EPILOG macro must be invoked at the end of the    * 00074700
*              module.                                                * 00074800
*                                                                     * 00074900
*              For assembly language code modules, the "S" form       * 00075000
*              generates code to put the parameters into an in-line   * 00075100
*              parameter list and invoke the desired service.  Full   * 00075200
*              checking for required macro keys is done along with    * 00075300
*              supplying defaults for omitted optional parameters.    * 00075400
*                                                                     * 00075500
*          [MF(L,xmfctrl,xmfattr|BDY(DWORD))]                       * 00075600
*              specifies the list form of the macro.  The "L" form    * 00075700
*              defines an area to be used for the parameter list.     * 00075800
*              Only the PLISTVER key may be specified on the          * 00075900
*              invocation.  All other macro parameters are flagged as * 00076000
*              errors.  If PLISTVER is not specified, the original    * 00076100
*              parameter list definition is used.                     * 00076200
*                                                                     * 00076300
*            ,xmfctrl                                                 * 00076400
*              is a required input.  It is the name of a storage area * 00076500
*              for the parameter list.                                * 00076600
*                                                                     * 00076700
*            ,xmfattr|BDY(DWORD)                                    * 00076800
*              is an optional 60 character input string that varies   * 00076900
*              from 1 to 60 characters. It can contain any value that * 00077000
*              is valid on an assembler DS pseudo-op                  * 00077100
*              (assembler-only). You can use this parameter to force  * 00077200
*              boundary alignment of the parameter list.              * 00077300
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/AS, which * 00077400
*              forces the parameter list to a doubleword boundary.    * 00077500
*                                                                     * 00077600
*          [MF(E,xmfctrl,COMPLETE)]                                 * 00077700
*              specifies the execute form of the macro.  The "E" form * 00077800
*              generates code to put the parameters into the          * 00077900
*              parameter list specified by xmfctrl and provides full  * 00078000
*              syntax checking with default setting.                  * 00078100
*                                                                     * 00078200
*            ,xmfctrl                                                 * 00078300
*              is a required input.  It is the name (RS-type) (or     * 00078400
*              address in register (1)-(12) ASM only) of a storage    * 00078500
*              area for the parameter list.                           * 00078600
*                                                                     * 00078700
*            ,COMPLETE                                              * 00078800
*              is an optional keyword input which specifies the       * 00078900
*              degree of macro parameter syntax checking.             * 00079000
*              DEFAULT: COMPLETE                                      * 00079100
*                                                                     * 00079200
*                                                                     * 00079300
*              COMPLETE   Checking for required macro keys is done    * 00079400
*                        and defaults are supplied for omitted        * 00079500
*                        optional parameters.                         * 00079600
*                                                                     * 00079700
*                                                                     * 00079800
*                                                                     * 00079900
*                                                                     * 00080000
*                                                                     * 00080100
*                                                                     * 00080200
*                                                                     * 00080300
*01* ABEND CODES:                                                     * 00080400
*                                                                     * 00080500
*                                                                     * 00080600
*       8C5       Refer to MVS/ESA System Codes for an explanation    * 00080700
*                 and programmer responses.                           * 00080800
*                                                                     * 00080900
*                                                                     * 00081000
*                                                                     * 00081100
*01* RETURN CODES:                                                    * 00081200
*                                                                     * 00081300
*                                                                     * 00081400
*                 Return codes are documented in mapping macro        * 00081500
*                 IEFJSRC.                                            * 00081600
*                                                                     * 00081700
*                                                                     * 00081800
*                                                                     * 00081900
*01* REASON CODES:                                                    * 00082000
*                                                                     * 00082100
*       Reason codes are documented in mapping macro IEFJSRC.         * 00082200
*                                                                     * 00082300
*01* MODULE TYPE:  ASSEM-PL/AS MACRO                                  * 00082400
*                                                                     * 00082500
*02*   PROCESSOR:  ASSEM-PL/AS                                        * 00082600
*                                                                     * 00082700
*01* COMPONENT:  SC1B6                                                * 00082800
*                                                                     * 00082900
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00083000
*                                                                     * 00083100
*01* MACRO USAGE NOTES:                                               * 00083200
*                                                                     * 00083300
*                                                                     * 00083400
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00083500
*        global macro variable.  Any value other than 'NO' will       * 00083600
*        result in the macro expansion being printed.  The default is * 00083700
*        'YES'.  The following examples illustrate how the ZPRINT     * 00083800
*        variable should be set.                                      * 00083900
*                                                                     * 00084000
*                    GBLC &ZPRINT                                     * 00084100
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00084200
*                                                                     * 00084300
*                                                                     * 00084400
*    2.  All  keys currently contained in the IEFSSI macro correspond * 00084500
*        to  version 1.  If you specify PLISTVER, use a value of 1 or * 00084600
*        MAX.                                                         * 00084700
*                                                                     * 00084800
*                                                                     * 00084900
*                                                                     * 00085000
*                                                                     * 00085100
*01* CHANGE ACTIVITY:                                                 * 00085200
*                                                                     * 00085300
*   Flag LineItem  FMID    Date   ID    Comment                       * 00085400
*                                                                     * 00085500
*    $L0=SSIDP    HBB5520 931109 PDBN:  Dynamic SSI                   * 00085600
*    $D1=DN70009  HBB5520 940210 PDBN:  Dynamic SSI                   * 00085700
*    $P1=PN70105  HBB5520 940210 PDBN:  Dynamic SSI                   * 00085800
*    $D2=DN70027  HBB5520 940310 PDBN:  Dynamic SSI                   * 00085900
*    $D3=DN70025  HBB5520 940414 PDBN:  Dynamic SSI                   * 00086000
*    $D4=DN70037  HBB5520 940505 PDBN:  Dynamic SSI                   * 00086100
*    $P2=PN70937  HBB5520 940908 PDBN:  Dynamic SSI                   * 00086200
****** END OF SPECIFICATIONS *****************************************/ 00086300
*/********************************************************************* 00086400
         MACRO                                                          00086500
&XLABEL  IEFSSI &PLISTVER=,&SUBNAME=,&REQUEST=,&CONSNAME=,&INITRTN=,   *00086600
               &INITPARM=,&INITPLEN=,&INTOKEN=,&COMMAND=,&REQDSUB=,    *00086700
               &OUTTOKEN=,&SUBDATA1=,&SUBDATA2=,&WORKAREA=,&WORKASP=,  *00086800
               &RETCODE=,&RSNCODE=,&COM=,&MF=                           00086900
.*                                                                      00087000
*                MACDATE -05/05/94-<1>                                  00087100
.*                                                                      00087200
.*******************************************************************    00087300
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00087400
.*******************************************************************    00087500
                GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                 00087600
                GBLC  &ZTEST      YES=TEST NO=NO TEST                   00087700
                GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX           00087800
.*                                                                      00087900
                GBLC  &ZIEFSSI    YES=MACRO USED AT LEAST ONCE          00088000
.*******************************************************************    00088100
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00088200
.*******************************************************************    00088300
                LCLC  &ZMS        ERROR MESSAGE WORK AREA               00088400
                LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS          00088500
                LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED            00088600
                LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR           00088700
                LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE           00088800
                LCLA  &ZAWRK      USED AS A WORK AREA                   00088900
                LCLA  &ZASIZ      USED FOR SIZE OF VALUE                00089000
                LCLA  &ZN         NUMERIC WORK VARIABLE                 00089100
                LCLC  &ZC         CHARACTER WORK VARIABLE               00089200
                LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE           00089300
                LCLA  &ZTLA       VALUE TOO LONG VARIABLE               00089400
                LCLA  &ZMACRET    MACRO RETURN CODE                     00089500
&ZMACRET        SETA  0           ASSUME NO ERRORS                      00089600
.*                                                                      00089700
                LCLC  &ZCSYSLIST(255)           NONXKEY, POS ARRAY      00089800
                LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()            00089900
                LCLA  &ZPLLEN     PARAMETER LIST LENGTH                 00090000
                LCLC  &ZENDBASEPL               End of base PL          00090100
                LCLA  &ZPLWORKA   PARAMETER LIST LENGTH                 00090200
.*******************************************************************    00090300
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00090400
.*******************************************************************    00090500
                LCLA  &ZI         INDEX FOR ARRAY                       00090600
                LCLA  &ZJ         INDEX FOR PARMS                       00090700
                LCLA  &ZK         INDEX FOR PARSE                       00090800
                LCLA  &ZLO        LOW RANGE VALUE                       00090900
                LCLA  &ZHI        HIGH RANGE VALUE                      00091000
                LCLC  &ZW         WORK AREA FOR PARM                    00091100
.********************************************************************   00091200
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00091300
.********************************************************************   00091400
                GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL               00091500
                GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE        00091600
.*                                                                      00091700
                AIF   (K'&SYSASCE GT 0).ZSYS4   SYS STATE DEFINED       00091800
                AIF   (K'&SYSSPLV GT 0).ZSYS2   SP LEVEL DEFINED        00091900
                SPLEVEL  TEST                                           00092000
.ZSYS2          ANOP  ,                                                 00092100
                AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1             00092200
                AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1             00092300
                SYSSTATE TEST                                           00092400
                AGO   .ZSYS4                                            00092500
.ZSYS3          ANOP  ,                                                 00092600
&SYSASCE        SETC  'P'         ASSUME SYSSTATE PRIMARY               00092700
.ZSYS4          ANOP  ,                                                 00092800
.*******************************************************************    00092900
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00093000
.*******************************************************************    00093100
                LCLA  &XPLISTVER  ++ VALUE                              00093200
                LCLC  &XSUBNAME   ++ NAME                               00093300
                LCLC  &XREQUEST   ++ VALUE                              00093400
                LCLC  &XCONSNAME  ++ NAME                               00093500
                LCLC  &XINITRTN   ++ NAME                               00093600
                LCLC  &XINITPARM  ++ NAME                               00093700
                LCLC  &XINITPLEN  ++ NAME                               00093800
                LCLC  &XINTOKEN   ++ NAME                               00093900
                LCLC  &XCOMMAND   ++ VALUE                              00094000
                LCLC  &XREQDSUB   ++ VALUE                              00094100
                LCLC  &XOUTTOKEN  ++ NAME                               00094200
                LCLC  &XSUBDATA1  ++ NAME                               00094300
                LCLC  &XSUBDATA2  ++ NAME                               00094400
                LCLC  &XWORKAREA  ++ NAME                               00094500
                LCLC  &XWORKASP   ++ NAME                               00094600
                LCLC  &XRETCODE   ++ NAME                               00094700
                LCLC  &XRSNCODE   ++ NAME                               00094800
                LCLC  &XCOM       ++ VALUE                              00094900
                LCLC  &XMF        ++ VALUE                              00095000
                LCLC  &XMFCTRL    ++ NAME                               00095100
                LCLC  &XMFATTR    ++ VALUE                              00095200
                LCLC  &XMFSCK     ++ VALUE                              00095300
.*******************************************************************    00095400
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00095500
.*******************************************************************    00095600
                LCLC  &ZXPLISTVER               ++ INPUT VALUE          00095700
                LCLC  &ZXSUBNAME  ++ INPUT NAME                         00095800
                LCLC  &ZXREQUEST  ++ INPUT VALUE                        00095900
                LCLC  &ZXCONSNAME               ++ INPUT NAME           00096000
                LCLC  &ZXINITRTN  ++ INPUT NAME                         00096100
                LCLC  &ZXINITPARM               ++ INPUT NAME           00096200
                LCLC  &ZXINITPLEN               ++ INPUT NAME           00096300
                LCLC  &ZXINTOKEN  ++ INPUT NAME                         00096400
                LCLC  &ZXCOMMAND  ++ INPUT VALUE                        00096500
                LCLC  &ZXREQDSUB  ++ INPUT VALUE                        00096600
                LCLC  &ZXOUTTOKEN               ++ OUTPUT NAME          00096700
                LCLC  &ZXSUBDATA1               ++ INPUT NAME           00096800
                LCLC  &ZXSUBDATA2               ++ INPUT NAME           00096900
                LCLC  &ZXWORKAREA               ++ OUTPUT NAME          00097000
                LCLC  &ZXWORKASP  ++ INPUT NAME                         00097100
                LCLC  &ZXRETCODE  ++ OUTPUT NAME                        00097200
                LCLC  &ZXRSNCODE  ++ OUTPUT NAME                        00097300
                LCLC  &ZXCOM      ++ INPUT VALUE                        00097400
                LCLC  &ZXMF       ++ INPUT VALUE                        00097500
                LCLC  &ZXMFCTRL   ++ INPUT NAME                         00097600
                LCLC  &ZXMFATTR   ++ INPUT VALUE                        00097700
                LCLC  &ZXMFSCK    ++ INPUT VALUE                        00097800
.********************************************************************   00097900
.***AC.PLV01  PROCESS PLISTVER                                      *   00098000
.********************************************************************   00098100
&XPLISTVER      SETA  1                                                 00098200
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00098300
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00098400
&XPLISTVER      SETA  1                                                 00098500
.ZPLV0          ANOP  ,                                                 00098600
.*                                                                      00098700
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00098800
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00098900
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00099000
.*-------------------------------------------------------------------   00099100
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00099200
&ZMS            SETC  '"PLISTVER='         *KPOSA* MNOTE                00099300
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00099400
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00099500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00099600
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00099700
                AGO   .ZPVCK2                                           00099800
.ZPVCK3         ANOP  ,                                                 00099900
.*-------------------------------------------------------------------   00100000
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00100100
&ZMS            SETC  '"PLISTVER='         *KGPRA* MNOTE                00100200
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00100300
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00100400
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00100500
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00100600
                AGO   .ZPVCKE                                           00100700
.ZPVCK2         ANOP  ,                                                 00100800
.*-------------------------------------------------------------------   00100900
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00101000
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00101100
&ZMS            SETC  'PLISTVER='          *KVALA* MNOTE                00101200
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00101300
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00101400
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00101500
                MNOTE 8,' &ZMS IS REQUIRED.'                            00101600
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00101700
                AGO   .ZPVCK5                                           00101800
.ZPVCK4         ANOP  ,                                                 00101900
&XPLISTVER      SETA  &PLISTVER(1)                                      00102000
.ZPVCK5         ANOP  ,                                                 00102100
.*-------------------------------------------------------------------   00102200
&ZCVAL          SETC  '&PLISTVER(1)'                                    00102300
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00102400
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00102500
                AIF   (&XPLISTVER LT 1).ZPVCK6  TOO LOW                 00102600
                AIF   (&XPLISTVER LE 1).ZPVCKE  NOT HIGH                00102700
.ZPVCK6         ANOP   ,                                                00102800
&ZMS            SETC  '"PLISTVER='         *KRNGA* MNOTE                00102900
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00103000
&ZMS            SETC  '&ZMS THE RANGE IS "1-1"'                         00103100
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00103200
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00103300
.ZPVCKE         ANOP   ,                                                00103400
.********************************************************************   00103500
.***AG.MF01 PROCESS MF MACRO FORMS                                      00103600
.********************************************************************   00103700
                ACTR  10000                                             00103800
.*------------------------------------------------------------------    00103900
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00104000
&XMF            SETC  ''          INITIALIZE XVARIABLE                  00104100
.*-------------------------------------------------------------------   00104200
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00104300
.ZG77           ANOP  ,                                                 00104400
&ZTLC           SETC 'S'                                                00104500
                AIF   ('&MF(1)' NE '&ZTLC').ZG78                        00104600
&XMF            SETC  'S'         SET KEYWORD                           00104700
                AIF   (N'&MF LE 1).ZG77A        CK NUM                  00104800
&ZMS            SETC  '"MF='      *KPOSA* MNOTE                         00104900
&ZMS            SETC  '&ZMS.&MF"'                                       00105000
&ZMS            SETC  '&ZMS "MF"'                                       00105100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00105200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00105300
.ZG77A          ANOP  ,                                                 00105400
.*-------------------------------------------------------------------   00105500
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00105600
.ZG78           ANOP  ,                                                 00105700
&ZTLC           SETC 'L'                                                00105800
                AIF   ('&MF(1)' NE '&ZTLC').ZG85                        00105900
&XMF            SETC  'L'         SET KEYWORD                           00106000
                AIF   (N'&MF LE 3).ZG78A        CK NUM                  00106100
&ZMS            SETC  '"MF='      *KPOSA* MNOTE                         00106200
&ZMS            SETC  '&ZMS.&MF"'                                       00106300
&ZMS            SETC  '&ZMS "MF"'                                       00106400
                MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'              00106500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00106600
.ZG78A          ANOP  ,                                                 00106700
.*-------------------------------------------------------------------   00106800
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00106900
                AIF   (N'&SYSLIST NE 0).ZG78B   POSITIONALS?            00107000
                AIF   ('&SUBNAME' NE '').ZG78B  KEYS?                   00107100
                AIF   ('&REQUEST' NE '').ZG78B  KEYS?                   00107200
                AIF   ('&CONSNAME' NE '').ZG78B  KEYS?                  00107300
                AIF   ('&INITRTN' NE '').ZG78B  KEYS?                   00107400
                AIF   ('&INITPARM' NE '').ZG78B  KEYS?                  00107500
                AIF   ('&INITPLEN' NE '').ZG78B  KEYS?                  00107600
                AIF   ('&INTOKEN' NE '').ZG78B  KEYS?                   00107700
                AIF   ('&COMMAND' NE '').ZG78B  KEYS?                   00107800
                AIF   ('&REQDSUB' NE '').ZG78B  KEYS?                   00107900
                AIF   ('&OUTTOKEN' NE '').ZG78B  KEYS?                  00108000
                AIF   ('&SUBDATA1' NE '').ZG78B  KEYS?                  00108100
                AIF   ('&SUBDATA2' NE '').ZG78B  KEYS?                  00108200
                AIF   ('&WORKAREA' NE '').ZG78B  KEYS?                  00108300
                AIF   ('&WORKASP' NE '').ZG78B  KEYS?                   00108400
                AIF   ('&RETCODE' NE '').ZG78B  KEYS?                   00108500
                AIF   ('&RSNCODE' NE '').ZG78B  KEYS?                   00108600
                AIF   ('&COM' NE '').ZG78B      KEYS?                   00108700
                AGO    .ZG78C     INVOCATION OKAY                       00108800
.ZG78B          ANOP  ,                                                 00108900
&ZMS            SETC  'THE "L" FORM OF "MF"'    *MFLA* MNOTE            00109000
&ZMS            SETC  '&ZMS CAN ONLY HAVE'                              00109100
&ZMS            SETC  '&ZMS THE "PLISTVER" KEY'                         00109200
                MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'            00109300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00109400
.ZG78C          ANOP  ,                                                 00109500
.*-------------------------------------------------------------------   00109600
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00109700
&ZXMFCTRL       SETC  'INPUT'     SET IN/OUTPUT                         00109800
&XMFCTRL        SETC  '&MF(2,1)'  SET XVARIABLE                         00109900
                AIF   (N'&MF(2) GT 1).ZG80B     MULTI PARMS             00110000
&XMFCTRL        SETC  '&MF(2)'    SET XVARIABLE                         00110100
.ZG80B          AIF   (K'&MF(2) GT 0).ZG80C                             00110200
&ZXMFCTRL       SETC  ''          RESET IN/OUTPUT                       00110300
&ZMS            SETC  'WHEN "L" IS SPECIFIED'   *KRQDA*                 00110400
&ZMS            SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'               00110500
                MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                      00110600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00110700
.ZG80C          ANOP  ,                                                 00110800
.*-------------------------------------------------------------------   00110900
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00111000
                AIF   (K'&ZXMFCTRL LE 0).ZG80P  NOT I/O                 00111100
                AIF   ('&XMFCTRL'(1,1) NE '(').ZG80P                    00111200
&ZXMFCTRL       SETC  ''          RESET IN/OUTPUT                       00111300
&ZMS            SETC  '"MF='      *KGPRA* MNOTE                         00111400
&ZMS            SETC  '&ZMS.&MF"'                                       00111500
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00111600
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'                 00111700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00111800
.ZG80P          ANOP  ,                                                 00111900
.*-------------------------------------------------------------------   00112000
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00112100
&ZXMFATTR       SETC  'INPUT'     SET IN/OUTPUT                         00112200
&XMFATTR        SETC  '0D'                                              00112300
                AIF   (K'&MF(3) LE 0).ZG83B     PARM                    00112400
&XMFATTR        SETC  '&MF(3,1)'  SET XVARIABLE                         00112500
                AIF   (N'&MF(3) GT 1).ZG83B     MULTI PARMS             00112600
&XMFATTR        SETC  '&MF(3)'    SET XVARIABLE                         00112700
.ZG83B          ANOP  ,                                                 00112800
.*-------------------------------------------------------------------   00112900
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00113000
                AIF   (K'&ZXMFATTR LE 0).ZG83P  NOT I/O                 00113100
                AIF   ('&XMFATTR'(1,1) NE '(').ZG83P                    00113200
&ZXMFATTR       SETC  ''          RESET IN/OUTPUT                       00113300
&ZMS            SETC  '"MF='      *KGPRA* MNOTE                         00113400
&ZMS            SETC  '&ZMS.&MF"'                                       00113500
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00113600
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'                 00113700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00113800
.ZG83P          ANOP  ,                                                 00113900
.*-------------------------------------------------------------------   00114000
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00114100
                AIF   (K'&ZXMFATTR LE 0).ZG83S  NOT I/O                 00114200
                AIF   (K'&XMFATTR LE 60).ZG83S  LNG OK                  00114300
&ZXMFATTR       SETC  ''          RESET IN/OUTPUT                       00114400
&ZMS            SETC  '"MF='      *KLNGA* MNOTE                         00114500
&ZMS            SETC  '&ZMS.&MF"'                                       00114600
&ZMS            SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'             00114700
                MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'                00114800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00114900
.ZG83S          ANOP  ,                                                 00115000
.*-------------------------------------------------------------------   00115100
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00115200
.ZG85           ANOP  ,                                                 00115300
&ZTLC           SETC 'E'                                                00115400
                AIF   ('&MF(1)' NE '&ZTLC').ZG93                        00115500
&XMF            SETC  'E'         SET KEYWORD                           00115600
                AIF   (N'&MF LE 3).ZG85A        CK NUM                  00115700
&ZMS            SETC  '"MF='      *KPOSA* MNOTE                         00115800
&ZMS            SETC  '&ZMS.&MF"'                                       00115900
&ZMS            SETC  '&ZMS "MF"'                                       00116000
                MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'              00116100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00116200
.ZG85A          ANOP  ,                                                 00116300
.*-------------------------------------------------------------------   00116400
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00116500
&ZXMFCTRL       SETC  'INPUT'     SET IN/OUTPUT                         00116600
&XMFCTRL        SETC  '&MF(2,1)'  SET XVARIABLE                         00116700
                AIF   (N'&MF(2) GT 1).ZG87B     MULTI PARMS             00116800
&XMFCTRL        SETC  '&MF(2)'    SET XVARIABLE                         00116900
.ZG87B          AIF   (K'&MF(2) GT 0).ZG87C                             00117000
&ZXMFCTRL       SETC  ''          RESET IN/OUTPUT                       00117100
&ZMS            SETC  'WHEN "E" IS SPECIFIED'   *KRQDA*                 00117200
&ZMS            SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'               00117300
                MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                      00117400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00117500
.ZG87C          ANOP  ,                                                 00117600
.*-------------------------------------------------------------------   00117700
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00117800
                AIF   (K'&ZXMFCTRL LE 0).ZG87R  NOT I/O                 00117900
                AIF   ('&XMFCTRL'(1,1) NE '(').ZG87R                    00118000
&ZCGPR          SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                        00118100
                AIF   ('&ZCGPR'(1,1) NE '0').ZG87P                      00118200
                AIF   (K'&ZCGPR GT 2).ZG87Q                             00118300
                AIF   ('&ZCGPR' EQ '0').ZG87Q                           00118400
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00118500
                AIF   (T'&ZCGPR NE 'N').ZG87Q   INVALID REG NAME        00118600
.ZG87P          ANOP  ,                                                 00118700
                AIF   (T'&ZCGPR NE 'N').ZG87R   NON NUMERIC             00118800
                AIF   ('&ZCGPR' LT '1').ZG87Q                           00118900
                AIF   ('&ZCGPR' LE '12').ZG87R                          00119000
.ZG87Q          ANOP  ,                                                 00119100
&ZMS            SETC  '"MF='      *KGPRA* MNOTE                         00119200
&ZMS            SETC  '&ZMS.&MF"'                                       00119300
&ZMS            SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'         00119400
                MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                  00119500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00119600
.ZG87R          ANOP  ,                                                 00119700
.*-------------------------------------------------------------------   00119800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00119900
&XMFSCK         SETC  ''          INITIALIZE XVARIABLE                  00120000
.ZG91A   AIF   ('&MF(3)' NE 'COMPLETE').ZG92A                           00120100
&XMFSCK         SETC  'COMPLETE'  SET KEYWORD                           00120200
.*-------------------------------------------------------------------   00120300
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00120400
.ZG92A          AIF   (K'&XMFSCK GT 0).ZG92C    KEYWORD                 00120500
                AIF   (K'&MF(3) LE 0).ZG92B                             00120600
&ZMS            SETC  '"MF='      *KUKWA* MNOTE                         00120700
&ZMS            SETC  '&ZMS.&MF"'                                       00120800
&ZMS            SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '         00120900
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00121000
&ZMS            SETC  '&ZMS "COMPLETE".'        VALID KEYWORD           00121100
                MNOTE 8,' &ZMS '                                        00121200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00121300
.ZG92B          ANOP  ,                                                 00121400
&XMFSCK         SETC  'COMPLETE'  SET DEFAULT KEYWORD                   00121500
.ZG92C          ANOP  ,                                                 00121600
&ZXMFSCK        SETC  'INPUT'     SET IN/OUTPUT                         00121700
.*------------------------------------------------------------------    00121800
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00121900
.ZG93           ANOP  ,                                                 00122000
&ZXMF           SETC  'INPUT'     SET IN/OUTPUT                         00122100
                AIF   (K'&XMF GT 0).ZG93E       VALID ARG               00122200
                AIF   (T'&MF EQ 'O').ZG93D      OMITTED                 00122300
&ZASYSLNDX      SETA  0                                                 00122400
.ZG93A          ANOP  ,           POSITIONAL MACRO KEY                  00122500
&ZASYSLNDX      SETA  &ZASYSLNDX+1                                      00122600
                AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG93C                  00122700
&ZTLC           SETC 'MF'                                               00122800
                AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG93A         00122900
.ZG93B          ANOP  ,                                                 00123000
&ZXMF           SETC  ''          RESET IN/OUTPUT                       00123100
&ZMS            SETC  'THE "MF" KEY'            *KOPTA* MNOTE           00123200
&ZMS            SETC  '&ZMS MUST CONTAIN ONE'                           00123300
                MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                  00123400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00123500
                AGO   .ZG93E                                            00123600
.ZG93C          ANOP  ,                                                 00123700
&ZXMF           SETC  ''          RESET IN/OUTPUT                       00123800
&ZMS            SETC  '"MF='      *KUKWA* MNOTE                         00123900
&ZMS            SETC  '&ZMS.&MF"'                                       00124000
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00124100
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00124200
&ZMS            SETC  '&ZMS "S",'               VALID KEYWORD           00124300
&ZMS            SETC  '&ZMS "L",'               VALID KEYWORD           00124400
&ZMS            SETC  '&ZMS OR "E".'            VALID KEYWORD           00124500
                MNOTE 8,' &ZMS '                                        00124600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00124700
                AGO   .ZG93E                                            00124800
.ZG93D          ANOP  ,                                                 00124900
&XMF            SETC  'S'         SET DEFAULT KEYWORD                   00125000
&XMFSCK         SETC  'COMPLETE'  COMPLETE CHECKING                     00125100
.ZG93E          ANOP  ,                                                 00125200
.********************************************************************   00125300
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00125400
.********************************************************************   00125500
                ACTR  10000                                             00125600
.*-------------------------------------------------------------------   00125700
.***AG.MF03 MF=(SLE)                                                    00125800
                AIF   ('&XMF' EQ 'L').ZGMFX                             00125900
.*----------------------------------------------------------------***   00126000
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00126100
                AIF   (N'&SUBNAME LE 1).ZG5A    CK NUM                  00126200
&ZMS            SETC  '"SUBNAME='               *KPOSA* MNOTE           00126300
&ZMS            SETC  '&ZMS.&SUBNAME"'                                  00126400
&ZMS            SETC  '&ZMS "SUBNAME"'                                  00126500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00126600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00126700
.ZG5A           ANOP  ,                                                 00126800
.*-------------------------------------------------------------------   00126900
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00127000
&ZXSUBNAME      SETC  'INPUT'     SET IN/OUTPUT                         00127100
&XSUBNAME       SETC  '&SUBNAME(1)'             SET XVARIABLE           00127200
                AIF   (N'&SUBNAME GT 1).ZG5B    MULTI PARMS             00127300
&XSUBNAME       SETC  '&SUBNAME'  SET XVARIABLE                         00127400
.ZG5B           AIF   (K'&SUBNAME(1) GT 0).ZG5C                         00127500
&ZXSUBNAME      SETC  ''          RESET IN/OUTPUT                       00127600
&ZMS            SETC  ' '         *KRQDA*                               00127700
&ZMS            SETC  '&ZMS "SUBNAME" KEY AND ITS ARGUMENT'             00127800
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00127900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00128000
.ZG5C           ANOP  ,                                                 00128100
.*-------------------------------------------------------------------   00128200
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00128300
                AIF   (K'&ZXSUBNAME LE 0).ZG5R  NOT I/O                 00128400
                AIF   ('&XSUBNAME'(1,1) NE '(').ZG5R                    00128500
&ZCGPR          SETC  '&XSUBNAME'(2,K'&XSUBNAME-2)                      00128600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG5P                       00128700
                AIF   (K'&ZCGPR GT 2).ZG5Q                              00128800
                AIF   ('&ZCGPR' EQ '0').ZG5Q                            00128900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00129000
                AIF   (T'&ZCGPR NE 'N').ZG5Q    INVALID REG NAME        00129100
.ZG5P           ANOP  ,                                                 00129200
                AIF   (T'&ZCGPR NE 'N').ZG5R    NON NUMERIC             00129300
                AIF   ('&ZCGPR' LT '2').ZG5Q                            00129400
                AIF   ('&ZCGPR' LE '12').ZG5R                           00129500
.ZG5Q           ANOP  ,                                                 00129600
&ZMS            SETC  '"SUBNAME='               *KGPRA* MNOTE           00129700
&ZMS            SETC  '&ZMS.&SUBNAME"'                                  00129800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00129900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00130000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00130100
.ZG5R           ANOP  ,                                                 00130200
.*------------------------------------------------------------------    00130300
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00130400
&XREQUEST       SETC  ''          INITIALIZE XVARIABLE                  00130500
.*-------------------------------------------------------------------   00130600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00130700
.ZG9            ANOP  ,                                                 00130800
                AIF   (K'&REQUEST(1) LE 0).ZG9A                         00130900
&ZTLC           SETC 'ADD'                                              00131000
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG22                   00131100
&XREQUEST       SETC  'ADD'       SET KEYWORD                           00131200
                AIF   (N'&REQUEST LE 1).ZG9A    CK NUM                  00131300
&ZMS            SETC  '"REQUEST='               *KPOSA* MNOTE           00131400
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00131500
&ZMS            SETC  '&ZMS "REQUEST"'                                  00131600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00131700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00131800
.ZG9A           ANOP  ,                                                 00131900
.*------------------------------------------------------------------    00132000
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00132100
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00132200
.ZG9A0          AIF   (K'&INTOKEN LE 0).ZG9A1   OK                      00132300
&ZCVAL          SETC '&ZCVAL INTOKEN'           INCORRECT KEY USED      00132400
.ZG9A1          AIF   (K'&COMMAND LE 0).ZG9A2   OK                      00132500
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00132600
.ZG9A2          AIF   (K'&REQDSUB LE 0).ZG9A3   OK                      00132700
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00132800
.ZG9A3          AIF   (K'&OUTTOKEN LE 0).ZG9A4  OK                      00132900
&ZCVAL          SETC '&ZCVAL OUTTOKEN'          INCORRECT KEY USED      00133000
.ZG9A4          AIF   (K'&SUBDATA1 LE 0).ZG9A5  OK                      00133100
&ZCVAL          SETC '&ZCVAL SUBDATA1'          INCORRECT KEY USED      00133200
.ZG9A5          AIF   (K'&SUBDATA2 LE 0).ZG9A6  OK                      00133300
&ZCVAL          SETC '&ZCVAL SUBDATA2'          INCORRECT KEY USED      00133400
.ZG9A6          AIF   (K'&WORKAREA LE 0).ZG9A7  OK                      00133500
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00133600
.ZG9A7          AIF   (K'&WORKASP LE 0).ZG9A8   OK                      00133700
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00133800
.ZG9A8          AIF   (K'&ZCVAL LE 0).ZG9A9     OK                      00133900
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00134000
&ZMS            SETC  '"REQUEST'  *KMEIA* MNOTE                         00134100
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00134200
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00134300
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00134400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00134500
.ZG9A9          ANOP  ,                                                 00134600
.*----------------------------------------------------------------***   00134700
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00134800
                AIF   (N'&CONSNAME LE 1).ZG11A  CK NUM                  00134900
&ZMS            SETC  '"CONSNAME='              *KPOSA* MNOTE           00135000
&ZMS            SETC  '&ZMS.&CONSNAME"'                                 00135100
&ZMS            SETC  '&ZMS "CONSNAME"'                                 00135200
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00135300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00135400
.ZG11A          ANOP  ,                                                 00135500
.*-------------------------------------------------------------------   00135600
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00135700
&ZXCONSNAME     SETC  'INPUT'     SET IN/OUTPUT                         00135800
&XCONSNAME      SETC  '0'                                               00135900
                AIF   (K'&CONSNAME(1) LE 0).ZG11B  PARM                 00136000
&XCONSNAME      SETC  '&CONSNAME(1)'            SET XVARIABLE           00136100
                AIF   (N'&CONSNAME GT 1).ZG11B  MULTI PARMS             00136200
&XCONSNAME      SETC  '&CONSNAME'               SET XVARIABLE           00136300
.ZG11B          ANOP  ,                                                 00136400
.*-------------------------------------------------------------------   00136500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00136600
                AIF   (K'&ZXCONSNAME LE 0).ZG11R  NOT I/O               00136700
                AIF   ('&XCONSNAME'(1,1) NE '(').ZG11R                  00136800
&ZCGPR          SETC  '&XCONSNAME'(2,K'&XCONSNAME-2)                    00136900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG11P                      00137000
                AIF   (K'&ZCGPR GT 2).ZG11Q                             00137100
                AIF   ('&ZCGPR' EQ '0').ZG11Q                           00137200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00137300
                AIF   (T'&ZCGPR NE 'N').ZG11Q   INVALID REG NAME        00137400
.ZG11P          ANOP  ,                                                 00137500
                AIF   (T'&ZCGPR NE 'N').ZG11R   NON NUMERIC             00137600
                AIF   ('&ZCGPR' LT '2').ZG11Q                           00137700
                AIF   ('&ZCGPR' LE '12').ZG11R                          00137800
.ZG11Q          ANOP  ,                                                 00137900
&ZMS            SETC  '"CONSNAME='              *KGPRA* MNOTE           00138000
&ZMS            SETC  '&ZMS.&CONSNAME"'                                 00138100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00138200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00138300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00138400
.ZG11R          ANOP  ,                                                 00138500
.*----------------------------------------------------------------***   00138600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00138700
                AIF   (N'&INITRTN LE 1).ZG14A   CK NUM                  00138800
&ZMS            SETC  '"INITRTN='               *KPOSA* MNOTE           00138900
&ZMS            SETC  '&ZMS.&INITRTN"'                                  00139000
&ZMS            SETC  '&ZMS "INITRTN"'                                  00139100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00139200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00139300
.ZG14A          ANOP  ,                                                 00139400
.*-------------------------------------------------------------------   00139500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00139600
&ZXINITRTN      SETC  'INPUT'     SET IN/OUTPUT                         00139700
&XINITRTN       SETC  'NO_INITRTN'                                      00139800
                AIF   (K'&INITRTN(1) LE 0).ZG14B  PARM                  00139900
&XINITRTN       SETC  '&INITRTN(1)'             SET XVARIABLE           00140000
                AIF   (N'&INITRTN GT 1).ZG14B   MULTI PARMS             00140100
&XINITRTN       SETC  '&INITRTN'  SET XVARIABLE                         00140200
.ZG14B          ANOP  ,                                                 00140300
.*-------------------------------------------------------------------   00140400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00140500
                AIF   (K'&ZXINITRTN LE 0).ZG14R  NOT I/O                00140600
                AIF   ('&XINITRTN' EQ 'NO_INITRTN').ZG14R               00140700
                AIF   ('&XINITRTN'(1,1) NE '(').ZG14R                   00140800
&ZCGPR          SETC  '&XINITRTN'(2,K'&XINITRTN-2)                      00140900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG14P                      00141000
                AIF   (K'&ZCGPR GT 2).ZG14Q                             00141100
                AIF   ('&ZCGPR' EQ '0').ZG14Q                           00141200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00141300
                AIF   (T'&ZCGPR NE 'N').ZG14Q   INVALID REG NAME        00141400
.ZG14P          ANOP  ,                                                 00141500
                AIF   (T'&ZCGPR NE 'N').ZG14R   NON NUMERIC             00141600
                AIF   ('&ZCGPR' LT '2').ZG14Q                           00141700
                AIF   ('&ZCGPR' LE '12').ZG14R                          00141800
.ZG14Q          ANOP  ,                                                 00141900
&ZMS            SETC  '"INITRTN='               *KGPRA* MNOTE           00142000
&ZMS            SETC  '&ZMS.&INITRTN"'                                  00142100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00142200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00142300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00142400
.ZG14R          ANOP  ,                                                 00142500
.*----------------------------------------------------------------***   00142600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00142700
                AIF   (N'&INITPARM LE 1).ZG16A  CK NUM                  00142800
&ZMS            SETC  '"INITPARM='              *KPOSA* MNOTE           00142900
&ZMS            SETC  '&ZMS.&INITPARM"'                                 00143000
&ZMS            SETC  '&ZMS "INITPARM"'                                 00143100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00143200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00143300
.ZG16A          ANOP  ,                                                 00143400
.*-------------------------------------------------------------------   00143500
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00143600
&XINITPARM      SETC  'NO_INITPARM'             SET DEFAULT             00143700
                AIF   (K'&INITPARM(1) LE 0).ZG16C  PARM                 00143800
&XINITPARM      SETC  '&INITPARM(1)'            SET XVARIABLE           00143900
                AIF   (N'&INITPARM GT 1).ZG16B  MULTI PARMS             00144000
&XINITPARM      SETC  '&INITPARM'               SET XVARIABLE           00144100
.ZG16B          AIF   (K'&INITRTN(1) GT 0).ZG16C  KEY                   00144200
&ZMS            SETC  '"INITPARM'               *KDEPA* MNOTE           00144300
&ZMS            SETC  '&ZMS.=&INITPARM"'                                00144400
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00144500
&ZMS            SETC  '&ZMS '                                           00144600
&ZMS            SETC  '&ZMS "INITRTN"'                                  00144700
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00144800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00144900
.ZG16C          ANOP  ,                                                 00145000
&ZXINITPARM     SETC  'INPUT'     SET IN/OUTPUT                         00145100
.*-------------------------------------------------------------------   00145200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00145300
                AIF   (K'&ZXINITPARM LE 0).ZG16R  NOT I/O               00145400
                AIF   ('&XINITPARM' EQ 'NO_INITPARM').ZG16R             00145500
                AIF   ('&XINITPARM'(1,1) NE '(').ZG16R                  00145600
&ZCGPR          SETC  '&XINITPARM'(2,K'&XINITPARM-2)                    00145700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG16P                      00145800
                AIF   (K'&ZCGPR GT 2).ZG16Q                             00145900
                AIF   ('&ZCGPR' EQ '0').ZG16Q                           00146000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00146100
                AIF   (T'&ZCGPR NE 'N').ZG16Q   INVALID REG NAME        00146200
.ZG16P          ANOP  ,                                                 00146300
                AIF   (T'&ZCGPR NE 'N').ZG16R   NON NUMERIC             00146400
                AIF   ('&ZCGPR' LT '2').ZG16Q                           00146500
                AIF   ('&ZCGPR' LE '12').ZG16R                          00146600
.ZG16Q          ANOP  ,                                                 00146700
&ZMS            SETC  '"INITPARM='              *KGPRA* MNOTE           00146800
&ZMS            SETC  '&ZMS.&INITPARM"'                                 00146900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00147000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00147100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00147200
.ZG16R          ANOP  ,                                                 00147300
.*----------------------------------------------------------------***   00147400
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00147500
                AIF   (N'&INITPLEN LE 1).ZG18A  CK NUM                  00147600
&ZMS            SETC  '"INITPLEN='              *KPOSA* MNOTE           00147700
&ZMS            SETC  '&ZMS.&INITPLEN"'                                 00147800
&ZMS            SETC  '&ZMS "INITPLEN"'                                 00147900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00148000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00148100
.ZG18A          ANOP  ,                                                 00148200
.*-------------------------------------------------------------------   00148300
.***AG.KXVAR09 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00148400
&ZXINITPLEN     SETC  'INPUT'     SET IN/OUTPUT                         00148500
&XINITPLEN      SETC  '&INITPLEN(1)'            SET XVARIABLE           00148600
                AIF   (N'&INITPLEN GT 1).ZG18B  MULTI PARMS             00148700
&XINITPLEN      SETC  '&INITPLEN'               SET XVARIABLE           00148800
.ZG18B          AIF   (K'&INITPARM(1) GT 0).ZG18C  KEY                  00148900
                AIF   (K'&INITPLEN(1) LE 0).ZG18D  PARM                 00149000
&ZMS            SETC  '"INITPLEN'               *KDEPA* MNOTE           00149100
&ZMS            SETC  '&ZMS.=&INITPLEN"'                                00149200
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00149300
&ZMS            SETC  '&ZMS '                                           00149400
&ZMS            SETC  '&ZMS "INITPARM"'                                 00149500
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00149600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00149700
                AGO   .ZG18E                                            00149800
.*                                                                      00149900
.ZG18C          AIF   (K'&INITPLEN(1) GT 0).ZG18E  PARM                 00150000
&ZXINITPLEN     SETC  ''          RESET IN/OUTPUT                       00150100
&ZMS            SETC  'WHEN "INITPARM" IS SPECIFIED'  *KRQDA*           00150200
&ZMS            SETC  '&ZMS , "INITPLEN" KEY AND ITS ARGUMENT'          00150300
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00150400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00150500
.ZG18D          ANOP  ,                                                 00150600
&XINITPLEN      SETC  '0'         SET DEFAULT                           00150700
.ZG18E          ANOP  ,                                                 00150800
.*-------------------------------------------------------------------   00150900
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00151000
                AIF   (K'&ZXINITPLEN LE 0).ZG18R  NOT I/O               00151100
                AIF   ('&XINITPLEN'(1,1) NE '(').ZG18R                  00151200
&ZCGPR          SETC  '&XINITPLEN'(2,K'&XINITPLEN-2)                    00151300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG18P                      00151400
                AIF   (K'&ZCGPR GT 2).ZG18Q                             00151500
                AIF   ('&ZCGPR' EQ '0').ZG18Q                           00151600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00151700
                AIF   (T'&ZCGPR NE 'N').ZG18Q   INVALID REG NAME        00151800
.ZG18P          ANOP  ,                                                 00151900
                AIF   (T'&ZCGPR NE 'N').ZG18R   NON NUMERIC             00152000
                AIF   ('&ZCGPR' LT '2').ZG18Q                           00152100
                AIF   ('&ZCGPR' LE '12').ZG18R                          00152200
.ZG18Q          ANOP  ,                                                 00152300
&ZMS            SETC  '"INITPLEN='              *KGPRA* MNOTE           00152400
&ZMS            SETC  '&ZMS.&INITPLEN"'                                 00152500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00152600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00152700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00152800
.ZG18R          ANOP  ,                                                 00152900
.*-------------------------------------------------------------------   00153000
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00153100
.ZG22           ANOP  ,                                                 00153200
&ZTLC           SETC 'ACTIVATE'                                         00153300
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG26                   00153400
&XREQUEST       SETC  'ACTIVATE'  SET KEYWORD                           00153500
                AIF   (N'&REQUEST LE 1).ZG22A   CK NUM                  00153600
&ZMS            SETC  '"REQUEST='               *KPOSA* MNOTE           00153700
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00153800
&ZMS            SETC  '&ZMS "REQUEST"'                                  00153900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00154000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00154100
.ZG22A          ANOP  ,                                                 00154200
.*------------------------------------------------------------------    00154300
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00154400
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00154500
.ZG22A0         AIF   (K'&CONSNAME LE 0).ZG22A1  OK                     00154600
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00154700
.ZG22A1         AIF   (K'&INITRTN LE 0).ZG22A2  OK                      00154800
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00154900
.ZG22A2         AIF   (K'&INITPARM LE 0).ZG22A3  OK                     00155000
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00155100
.ZG22A3         AIF   (K'&INITPLEN LE 0).ZG22A4  OK                     00155200
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00155300
.ZG22A4         AIF   (K'&COMMAND LE 0).ZG22A5  OK                      00155400
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00155500
.ZG22A5         AIF   (K'&REQDSUB LE 0).ZG22A6  OK                      00155600
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00155700
.ZG22A6         AIF   (K'&OUTTOKEN LE 0).ZG22A7  OK                     00155800
&ZCVAL          SETC '&ZCVAL OUTTOKEN'          INCORRECT KEY USED      00155900
.ZG22A7         AIF   (K'&SUBDATA1 LE 0).ZG22A8  OK                     00156000
&ZCVAL          SETC '&ZCVAL SUBDATA1'          INCORRECT KEY USED      00156100
.ZG22A8         AIF   (K'&SUBDATA2 LE 0).ZG22A9  OK                     00156200
&ZCVAL          SETC '&ZCVAL SUBDATA2'          INCORRECT KEY USED      00156300
.ZG22A9         AIF   (K'&WORKAREA LE 0).ZG22A10  OK                    00156400
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00156500
.ZG22A10        AIF   (K'&WORKASP LE 0).ZG22A11  OK                     00156600
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00156700
.ZG22A11        AIF   (K'&ZCVAL LE 0).ZG22A12   OK                      00156800
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00156900
&ZMS            SETC  '"REQUEST'  *KMEIA* MNOTE                         00157000
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00157100
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00157200
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00157300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00157400
.ZG22A12        ANOP  ,                                                 00157500
.*----------------------------------------------------------------***   00157600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00157700
                AIF   (N'&INTOKEN LE 1).ZG24A   CK NUM                  00157800
&ZMS            SETC  '"INTOKEN='               *KPOSA* MNOTE           00157900
&ZMS            SETC  '&ZMS.&INTOKEN"'                                  00158000
&ZMS            SETC  '&ZMS "INTOKEN"'                                  00158100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00158200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00158300
.ZG24A          ANOP  ,                                                 00158400
.*-------------------------------------------------------------------   00158500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00158600
&ZXINTOKEN      SETC  'INPUT'     SET IN/OUTPUT                         00158700
&XINTOKEN       SETC  'NO_INPUT_TOKEN'                                  00158800
                AIF   (K'&INTOKEN(1) LE 0).ZG24B  PARM                  00158900
&XINTOKEN       SETC  '&INTOKEN(1)'             SET XVARIABLE           00159000
                AIF   (N'&INTOKEN GT 1).ZG24B   MULTI PARMS             00159100
&XINTOKEN       SETC  '&INTOKEN'  SET XVARIABLE                         00159200
.ZG24B          ANOP  ,                                                 00159300
.*-------------------------------------------------------------------   00159400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00159500
                AIF   (K'&ZXINTOKEN LE 0).ZG24R  NOT I/O                00159600
                AIF   ('&XINTOKEN' EQ 'NO_INPUT_TOKEN').ZG24R           00159700
                AIF   ('&XINTOKEN'(1,1) NE '(').ZG24R                   00159800
&ZCGPR          SETC  '&XINTOKEN'(2,K'&XINTOKEN-2)                      00159900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG24P                      00160000
                AIF   (K'&ZCGPR GT 2).ZG24Q                             00160100
                AIF   ('&ZCGPR' EQ '0').ZG24Q                           00160200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00160300
                AIF   (T'&ZCGPR NE 'N').ZG24Q   INVALID REG NAME        00160400
.ZG24P          ANOP  ,                                                 00160500
                AIF   (T'&ZCGPR NE 'N').ZG24R   NON NUMERIC             00160600
                AIF   ('&ZCGPR' LT '2').ZG24Q                           00160700
                AIF   ('&ZCGPR' LE '12').ZG24R                          00160800
.ZG24Q          ANOP  ,                                                 00160900
&ZMS            SETC  '"INTOKEN='               *KGPRA* MNOTE           00161000
&ZMS            SETC  '&ZMS.&INTOKEN"'                                  00161100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00161200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00161300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00161400
.ZG24R          ANOP  ,                                                 00161500
.*-------------------------------------------------------------------   00161600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00161700
.ZG26           ANOP  ,                                                 00161800
&ZTLC           SETC 'OPTIONS'                                          00161900
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG37                   00162000
&XREQUEST       SETC  'OPTIONS'   SET KEYWORD                           00162100
                AIF   (N'&REQUEST LE 1).ZG26A   CK NUM                  00162200
&ZMS            SETC  '"REQUEST='               *KPOSA* MNOTE           00162300
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00162400
&ZMS            SETC  '&ZMS "REQUEST"'                                  00162500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00162600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00162700
.ZG26A          ANOP  ,                                                 00162800
.*------------------------------------------------------------------    00162900
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00163000
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00163100
.ZG26A0         AIF   (K'&CONSNAME LE 0).ZG26A1  OK                     00163200
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00163300
.ZG26A1         AIF   (K'&INITRTN LE 0).ZG26A2  OK                      00163400
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00163500
.ZG26A2         AIF   (K'&INITPARM LE 0).ZG26A3  OK                     00163600
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00163700
.ZG26A3         AIF   (K'&INITPLEN LE 0).ZG26A4  OK                     00163800
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00163900
.ZG26A4         AIF   (K'&INTOKEN LE 0).ZG26A5  OK                      00164000
&ZCVAL          SETC '&ZCVAL INTOKEN'           INCORRECT KEY USED      00164100
.ZG26A5         AIF   (K'&OUTTOKEN LE 0).ZG26A6  OK                     00164200
&ZCVAL          SETC '&ZCVAL OUTTOKEN'          INCORRECT KEY USED      00164300
.ZG26A6         AIF   (K'&SUBDATA1 LE 0).ZG26A7  OK                     00164400
&ZCVAL          SETC '&ZCVAL SUBDATA1'          INCORRECT KEY USED      00164500
.ZG26A7         AIF   (K'&SUBDATA2 LE 0).ZG26A8  OK                     00164600
&ZCVAL          SETC '&ZCVAL SUBDATA2'          INCORRECT KEY USED      00164700
.ZG26A8         AIF   (K'&WORKAREA LE 0).ZG26A9  OK                     00164800
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00164900
.ZG26A9         AIF   (K'&WORKASP LE 0).ZG26A10  OK                     00165000
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00165100
.ZG26A10        AIF   (K'&ZCVAL LE 0).ZG26A11   OK                      00165200
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00165300
&ZMS            SETC  '"REQUEST'  *KMEIA* MNOTE                         00165400
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00165500
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00165600
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00165700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00165800
.ZG26A11        ANOP  ,                                                 00165900
.*----------------------------------------------------------------***   00166000
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00166100
                AIF   (N'&COMMAND LE 1).ZG28A   CK NUM                  00166200
&ZMS            SETC  '"COMMAND='               *KPOSA* MNOTE           00166300
&ZMS            SETC  '&ZMS.&COMMAND"'                                  00166400
&ZMS            SETC  '&ZMS "COMMAND"'                                  00166500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00166600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00166700
.ZG28A          ANOP  ,                                                 00166800
.*-------------------------------------------------------------------   00166900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00167000
&XCOMMAND       SETC  ''          INITIALIZE XVARIABLE                  00167100
.ZG29A   AIF   ('&COMMAND(1)' NE 'NO').ZG30A                            00167200
&XCOMMAND       SETC  'NO'        SET KEYWORD                           00167300
.*-------------------------------------------------------------------   00167400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00167500
.ZG30A   AIF   ('&COMMAND(1)' NE 'YES').ZG31A                           00167600
&XCOMMAND       SETC  'YES'       SET KEYWORD                           00167700
.*-------------------------------------------------------------------   00167800
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00167900
.ZG31A          AIF   (K'&XCOMMAND GT 0).ZG31C  KEYWORD                 00168000
                AIF   (K'&COMMAND(1) LE 0).ZG31B                        00168100
&ZMS            SETC  '"COMMAND='               *KUKWA* MNOTE           00168200
&ZMS            SETC  '&ZMS.&COMMAND"'                                  00168300
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00168400
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00168500
&ZMS            SETC  '&ZMS "NO"'               VALID KEYWORD           00168600
&ZMS            SETC  '&ZMS OR "YES".'          VALID KEYWORD           00168700
                MNOTE 8,' &ZMS '                                        00168800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00168900
.ZG31B          ANOP  ,                                                 00169000
&XCOMMAND       SETC  'NO'        SET DEFAULT KEYWORD                   00169100
.ZG31C          ANOP  ,                                                 00169200
&ZXCOMMAND      SETC  'INPUT'     SET IN/OUTPUT                         00169300
.*----------------------------------------------------------------***   00169400
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00169500
                AIF   (N'&REQDSUB LE 1).ZG33A   CK NUM                  00169600
&ZMS            SETC  '"REQDSUB='               *KPOSA* MNOTE           00169700
&ZMS            SETC  '&ZMS.&REQDSUB"'                                  00169800
&ZMS            SETC  '&ZMS "REQDSUB"'                                  00169900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00170000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00170100
.ZG33A          ANOP  ,                                                 00170200
.*-------------------------------------------------------------------   00170300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00170400
&XREQDSUB       SETC  ''          INITIALIZE XVARIABLE                  00170500
.ZG34A   AIF   ('&REQDSUB(1)' NE 'MSTR').ZG35A                          00170600
&XREQDSUB       SETC  'MSTR'      SET KEYWORD                           00170700
.*-------------------------------------------------------------------   00170800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00170900
.ZG35A   AIF   ('&REQDSUB(1)' NE 'PRI').ZG36A                           00171000
&XREQDSUB       SETC  'PRI'       SET KEYWORD                           00171100
.*-------------------------------------------------------------------   00171200
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00171300
.ZG36A          AIF   (K'&XREQDSUB GT 0).ZG36C  KEYWORD                 00171400
                AIF   (K'&REQDSUB(1) LE 0).ZG36B                        00171500
&ZMS            SETC  '"REQDSUB='               *KUKWA* MNOTE           00171600
&ZMS            SETC  '&ZMS.&REQDSUB"'                                  00171700
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00171800
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00171900
&ZMS            SETC  '&ZMS "MSTR"'             VALID KEYWORD           00172000
&ZMS            SETC  '&ZMS OR "PRI".'          VALID KEYWORD           00172100
                MNOTE 8,' &ZMS '                                        00172200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00172300
.ZG36B          ANOP  ,                                                 00172400
&XREQDSUB       SETC  'MSTR'      SET DEFAULT KEYWORD                   00172500
.ZG36C          ANOP  ,                                                 00172600
&ZXREQDSUB      SETC  'INPUT'     SET IN/OUTPUT                         00172700
.*-------------------------------------------------------------------   00172800
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00172900
.ZG37           ANOP  ,                                                 00173000
&ZTLC           SETC 'DEACTIVATE'                                       00173100
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG41                   00173200
&XREQUEST       SETC  'DEACTIVATE'              SET KEYWORD             00173300
                AIF   (N'&REQUEST LE 1).ZG37A   CK NUM                  00173400
&ZMS            SETC  '"REQUEST='               *KPOSA* MNOTE           00173500
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00173600
&ZMS            SETC  '&ZMS "REQUEST"'                                  00173700
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00173800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00173900
.ZG37A          ANOP  ,                                                 00174000
.*------------------------------------------------------------------    00174100
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00174200
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00174300
.ZG37A0         AIF   (K'&CONSNAME LE 0).ZG37A1  OK                     00174400
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00174500
.ZG37A1         AIF   (K'&INITRTN LE 0).ZG37A2  OK                      00174600
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00174700
.ZG37A2         AIF   (K'&INITPARM LE 0).ZG37A3  OK                     00174800
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00174900
.ZG37A3         AIF   (K'&INITPLEN LE 0).ZG37A4  OK                     00175000
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00175100
.ZG37A4         AIF   (K'&INTOKEN LE 0).ZG37A5  OK                      00175200
&ZCVAL          SETC '&ZCVAL INTOKEN'           INCORRECT KEY USED      00175300
.ZG37A5         AIF   (K'&COMMAND LE 0).ZG37A6  OK                      00175400
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00175500
.ZG37A6         AIF   (K'&REQDSUB LE 0).ZG37A7  OK                      00175600
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00175700
.ZG37A7         AIF   (K'&SUBDATA1 LE 0).ZG37A8  OK                     00175800
&ZCVAL          SETC '&ZCVAL SUBDATA1'          INCORRECT KEY USED      00175900
.ZG37A8         AIF   (K'&SUBDATA2 LE 0).ZG37A9  OK                     00176000
&ZCVAL          SETC '&ZCVAL SUBDATA2'          INCORRECT KEY USED      00176100
.ZG37A9         AIF   (K'&WORKAREA LE 0).ZG37A10  OK                    00176200
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00176300
.ZG37A10        AIF   (K'&WORKASP LE 0).ZG37A11  OK                     00176400
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00176500
.ZG37A11        AIF   (K'&ZCVAL LE 0).ZG37A12   OK                      00176600
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00176700
&ZMS            SETC  '"REQUEST'  *KMEIA* MNOTE                         00176800
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00176900
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00177000
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00177100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00177200
.ZG37A12        ANOP  ,                                                 00177300
.*----------------------------------------------------------------***   00177400
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00177500
                AIF   (N'&OUTTOKEN LE 1).ZG39A  CK NUM                  00177600
&ZMS            SETC  '"OUTTOKEN='              *KPOSA* MNOTE           00177700
&ZMS            SETC  '&ZMS.&OUTTOKEN"'                                 00177800
&ZMS            SETC  '&ZMS "OUTTOKEN"'                                 00177900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00178000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00178100
.ZG39A          ANOP  ,                                                 00178200
.*-------------------------------------------------------------------   00178300
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00178400
                AIF   (K'&OUTTOKEN(1) LE 0).ZG39C  NO PARM              00178500
&ZXOUTTOKEN     SETC  'OUTPUT'    SET OUTPUT                            00178600
&XOUTTOKEN      SETC  '&OUTTOKEN(1)'            SET XVARIABLE           00178700
                AIF   (N'&OUTTOKEN GT 1).ZG39C                          00178800
&XOUTTOKEN      SETC  '&OUTTOKEN'               SET XVARIABLE           00178900
.ZG39C          ANOP  ,                                                 00179000
.*-------------------------------------------------------------------   00179100
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00179200
                AIF   (K'&ZXOUTTOKEN LE 0).ZG39R  NOT I/O               00179300
                AIF   ('&XOUTTOKEN'(1,1) NE '(').ZG39R                  00179400
&ZCGPR          SETC  '&XOUTTOKEN'(2,K'&XOUTTOKEN-2)                    00179500
                AIF   ('&ZCGPR'(1,1) NE '0').ZG39P                      00179600
                AIF   (K'&ZCGPR GT 2).ZG39Q                             00179700
                AIF   ('&ZCGPR' EQ '0').ZG39Q                           00179800
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00179900
                AIF   (T'&ZCGPR NE 'N').ZG39Q   INVALID REG NAME        00180000
.ZG39P          ANOP  ,                                                 00180100
                AIF   (T'&ZCGPR NE 'N').ZG39R   NON NUMERIC             00180200
                AIF   ('&ZCGPR' LT '2').ZG39Q                           00180300
                AIF   ('&ZCGPR' LE '12').ZG39R                          00180400
.ZG39Q          ANOP  ,                                                 00180500
&ZMS            SETC  '"OUTTOKEN='              *KGPRA* MNOTE           00180600
&ZMS            SETC  '&ZMS.&OUTTOKEN"'                                 00180700
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00180800
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00180900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00181000
.ZG39R          ANOP  ,                                                 00181100
.*-------------------------------------------------------------------   00181200
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00181300
.ZG41           ANOP  ,                                                 00181400
&ZTLC           SETC 'SWAP'                                             00181500
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG48                   00181600
&XREQUEST       SETC  'SWAP'      SET KEYWORD                           00181700
                AIF   (N'&REQUEST LE 1).ZG41A   CK NUM                  00181800
&ZMS            SETC  '"REQUEST='               *KPOSA* MNOTE           00181900
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00182000
&ZMS            SETC  '&ZMS "REQUEST"'                                  00182100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00182200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00182300
.ZG41A          ANOP  ,                                                 00182400
.*------------------------------------------------------------------    00182500
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00182600
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00182700
.ZG41A0         AIF   (K'&CONSNAME LE 0).ZG41A1  OK                     00182800
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00182900
.ZG41A1         AIF   (K'&INITRTN LE 0).ZG41A2  OK                      00183000
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00183100
.ZG41A2         AIF   (K'&INITPARM LE 0).ZG41A3  OK                     00183200
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00183300
.ZG41A3         AIF   (K'&INITPLEN LE 0).ZG41A4  OK                     00183400
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00183500
.ZG41A4         AIF   (K'&COMMAND LE 0).ZG41A5  OK                      00183600
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00183700
.ZG41A5         AIF   (K'&REQDSUB LE 0).ZG41A6  OK                      00183800
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00183900
.ZG41A6         AIF   (K'&SUBDATA1 LE 0).ZG41A7  OK                     00184000
&ZCVAL          SETC '&ZCVAL SUBDATA1'          INCORRECT KEY USED      00184100
.ZG41A7         AIF   (K'&SUBDATA2 LE 0).ZG41A8  OK                     00184200
&ZCVAL          SETC '&ZCVAL SUBDATA2'          INCORRECT KEY USED      00184300
.ZG41A8         AIF   (K'&WORKAREA LE 0).ZG41A9  OK                     00184400
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00184500
.ZG41A9         AIF   (K'&WORKASP LE 0).ZG41A10  OK                     00184600
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00184700
.ZG41A10        AIF   (K'&ZCVAL LE 0).ZG41A11   OK                      00184800
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00184900
&ZMS            SETC  '"REQUEST'  *KMEIA* MNOTE                         00185000
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00185100
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00185200
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00185300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00185400
.ZG41A11        ANOP  ,                                                 00185500
.*----------------------------------------------------------------***   00185600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00185700
                AIF   (N'&INTOKEN LE 1).ZG43A   CK NUM                  00185800
&ZMS            SETC  '"INTOKEN='               *KPOSA* MNOTE           00185900
&ZMS            SETC  '&ZMS.&INTOKEN"'                                  00186000
&ZMS            SETC  '&ZMS "INTOKEN"'                                  00186100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00186200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00186300
.ZG43A          ANOP  ,                                                 00186400
.*-------------------------------------------------------------------   00186500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00186600
&ZXINTOKEN      SETC  'INPUT'     SET IN/OUTPUT                         00186700
&XINTOKEN       SETC  'NO_INPUT_TOKEN'                                  00186800
                AIF   (K'&INTOKEN(1) LE 0).ZG43B  PARM                  00186900
&XINTOKEN       SETC  '&INTOKEN(1)'             SET XVARIABLE           00187000
                AIF   (N'&INTOKEN GT 1).ZG43B   MULTI PARMS             00187100
&XINTOKEN       SETC  '&INTOKEN'  SET XVARIABLE                         00187200
.ZG43B          ANOP  ,                                                 00187300
.*-------------------------------------------------------------------   00187400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00187500
                AIF   (K'&ZXINTOKEN LE 0).ZG43R  NOT I/O                00187600
                AIF   ('&XINTOKEN' EQ 'NO_INPUT_TOKEN').ZG43R           00187700
                AIF   ('&XINTOKEN'(1,1) NE '(').ZG43R                   00187800
&ZCGPR          SETC  '&XINTOKEN'(2,K'&XINTOKEN-2)                      00187900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG43P                      00188000
                AIF   (K'&ZCGPR GT 2).ZG43Q                             00188100
                AIF   ('&ZCGPR' EQ '0').ZG43Q                           00188200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00188300
                AIF   (T'&ZCGPR NE 'N').ZG43Q   INVALID REG NAME        00188400
.ZG43P          ANOP  ,                                                 00188500
                AIF   (T'&ZCGPR NE 'N').ZG43R   NON NUMERIC             00188600
                AIF   ('&ZCGPR' LT '2').ZG43Q                           00188700
                AIF   ('&ZCGPR' LE '12').ZG43R                          00188800
.ZG43Q          ANOP  ,                                                 00188900
&ZMS            SETC  '"INTOKEN='               *KGPRA* MNOTE           00189000
&ZMS            SETC  '&ZMS.&INTOKEN"'                                  00189100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00189200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00189300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00189400
.ZG43R          ANOP  ,                                                 00189500
.*----------------------------------------------------------------***   00189600
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00189700
                AIF   (N'&OUTTOKEN LE 1).ZG46A  CK NUM                  00189800
&ZMS            SETC  '"OUTTOKEN='              *KPOSA* MNOTE           00189900
&ZMS            SETC  '&ZMS.&OUTTOKEN"'                                 00190000
&ZMS            SETC  '&ZMS "OUTTOKEN"'                                 00190100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00190200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00190300
.ZG46A          ANOP  ,                                                 00190400
.*-------------------------------------------------------------------   00190500
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00190600
                AIF   (K'&OUTTOKEN(1) LE 0).ZG46C  NO PARM              00190700
&ZXOUTTOKEN     SETC  'OUTPUT'    SET OUTPUT                            00190800
&XOUTTOKEN      SETC  '&OUTTOKEN(1)'            SET XVARIABLE           00190900
                AIF   (N'&OUTTOKEN GT 1).ZG46C                          00191000
&XOUTTOKEN      SETC  '&OUTTOKEN'               SET XVARIABLE           00191100
.ZG46C          ANOP  ,                                                 00191200
.*-------------------------------------------------------------------   00191300
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00191400
                AIF   (K'&ZXOUTTOKEN LE 0).ZG46R  NOT I/O               00191500
                AIF   ('&XOUTTOKEN'(1,1) NE '(').ZG46R                  00191600
&ZCGPR          SETC  '&XOUTTOKEN'(2,K'&XOUTTOKEN-2)                    00191700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG46P                      00191800
                AIF   (K'&ZCGPR GT 2).ZG46Q                             00191900
                AIF   ('&ZCGPR' EQ '0').ZG46Q                           00192000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00192100
                AIF   (T'&ZCGPR NE 'N').ZG46Q   INVALID REG NAME        00192200
.ZG46P          ANOP  ,                                                 00192300
                AIF   (T'&ZCGPR NE 'N').ZG46R   NON NUMERIC             00192400
                AIF   ('&ZCGPR' LT '2').ZG46Q                           00192500
                AIF   ('&ZCGPR' LE '12').ZG46R                          00192600
.ZG46Q          ANOP  ,                                                 00192700
&ZMS            SETC  '"OUTTOKEN='              *KGPRA* MNOTE           00192800
&ZMS            SETC  '&ZMS.&OUTTOKEN"'                                 00192900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00193000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00193100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00193200
.ZG46R          ANOP  ,                                                 00193300
.*-------------------------------------------------------------------   00193400
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00193500
.ZG48           ANOP  ,                                                 00193600
&ZTLC           SETC 'PUT'                                              00193700
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG53                   00193800
&XREQUEST       SETC  'PUT'       SET KEYWORD                           00193900
                AIF   (N'&REQUEST LE 1).ZG48A   CK NUM                  00194000
&ZMS            SETC  '"REQUEST='               *KPOSA* MNOTE           00194100
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00194200
&ZMS            SETC  '&ZMS "REQUEST"'                                  00194300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00194400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00194500
.ZG48A          ANOP  ,                                                 00194600
.*------------------------------------------------------------------    00194700
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00194800
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00194900
.ZG48A0         AIF   (K'&CONSNAME LE 0).ZG48A1  OK                     00195000
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00195100
.ZG48A1         AIF   (K'&INITRTN LE 0).ZG48A2  OK                      00195200
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00195300
.ZG48A2         AIF   (K'&INITPARM LE 0).ZG48A3  OK                     00195400
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00195500
.ZG48A3         AIF   (K'&INITPLEN LE 0).ZG48A4  OK                     00195600
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00195700
.ZG48A4         AIF   (K'&INTOKEN LE 0).ZG48A5  OK                      00195800
&ZCVAL          SETC '&ZCVAL INTOKEN'           INCORRECT KEY USED      00195900
.ZG48A5         AIF   (K'&COMMAND LE 0).ZG48A6  OK                      00196000
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00196100
.ZG48A6         AIF   (K'&REQDSUB LE 0).ZG48A7  OK                      00196200
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00196300
.ZG48A7         AIF   (K'&OUTTOKEN LE 0).ZG48A8  OK                     00196400
&ZCVAL          SETC '&ZCVAL OUTTOKEN'          INCORRECT KEY USED      00196500
.ZG48A8         AIF   (K'&WORKAREA LE 0).ZG48A9  OK                     00196600
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00196700
.ZG48A9         AIF   (K'&WORKASP LE 0).ZG48A10  OK                     00196800
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00196900
.ZG48A10        AIF   (K'&ZCVAL LE 0).ZG48A11   OK                      00197000
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00197100
&ZMS            SETC  '"REQUEST'  *KMEIA* MNOTE                         00197200
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00197300
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00197400
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00197500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00197600
.ZG48A11        ANOP  ,                                                 00197700
.*----------------------------------------------------------------***   00197800
.***AG.KMGRP05 NAME,  INPUT, ME GROUP -XVARIABLE KEY                    00197900
                AIF   (N'&SUBDATA1 LE 1).ZG50A  CK NUM                  00198000
&ZMS            SETC  '"SUBDATA1='              *KPOSA* MNOTE           00198100
&ZMS            SETC  '&ZMS.&SUBDATA1"'                                 00198200
&ZMS            SETC  '&ZMS "SUBDATA1"'                                 00198300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00198400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00198500
.ZG50A          ANOP  ,                                                 00198600
.*-------------------------------------------------------------------   00198700
.***AG.KMGRP06 NAME,  INPUT, ME GROUP -XVARIABLE                        00198800
&ZXSUBDATA1     SETC  'INPUT'     SET IN/OUTPUT                         00198900
&XSUBDATA1      SETC  '&SUBDATA1(1)'            SET XVARIABLE           00199000
                AIF   (N'&SUBDATA1 GT 1).ZG50B  MULTIPLE PARMS          00199100
&XSUBDATA1      SETC  '&SUBDATA1'               SET XVARIABLE           00199200
.ZG50B          AIF   (K'&SUBDATA1(1) GT 0).ZG50C                       00199300
&ZXSUBDATA1     SETC  ''          RESET IN/OUTPUT                       00199400
.ZG50C          ANOP  ,                                                 00199500
.*-------------------------------------------------------------------   00199600
.***AG.KCK02 NAME,  INPUT, ME GROUP -GPR OUT OF RANGE                   00199700
                AIF   (K'&ZXSUBDATA1 LE 0).ZG50R  NOT I/O               00199800
                AIF   ('&XSUBDATA1'(1,1) NE '(').ZG50R                  00199900
&ZCGPR          SETC  '&XSUBDATA1'(2,K'&XSUBDATA1-2)                    00200000
                AIF   ('&ZCGPR'(1,1) NE '0').ZG50P                      00200100
                AIF   (K'&ZCGPR GT 2).ZG50Q                             00200200
                AIF   ('&ZCGPR' EQ '0').ZG50Q                           00200300
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00200400
                AIF   (T'&ZCGPR NE 'N').ZG50Q   INVALID REG NAME        00200500
.ZG50P          ANOP  ,                                                 00200600
                AIF   (T'&ZCGPR NE 'N').ZG50R   NON NUMERIC             00200700
                AIF   ('&ZCGPR' LT '2').ZG50Q                           00200800
                AIF   ('&ZCGPR' LE '12').ZG50R                          00200900
.ZG50Q          ANOP  ,                                                 00201000
&ZMS            SETC  '"SUBDATA1='              *KGPRA* MNOTE           00201100
&ZMS            SETC  '&ZMS.&SUBDATA1"'                                 00201200
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00201300
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00201400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00201500
.ZG50R          ANOP  ,                                                 00201600
.*----------------------------------------------------------------***   00201700
.***AG.KMGRP05 NAME,  INPUT, ME GROUP -XVARIABLE KEY                    00201800
                AIF   (N'&SUBDATA2 LE 1).ZG51A  CK NUM                  00201900
&ZMS            SETC  '"SUBDATA2='              *KPOSA* MNOTE           00202000
&ZMS            SETC  '&ZMS.&SUBDATA2"'                                 00202100
&ZMS            SETC  '&ZMS "SUBDATA2"'                                 00202200
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00202300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00202400
.ZG51A          ANOP  ,                                                 00202500
.*-------------------------------------------------------------------   00202600
.***AG.KMGRP06 NAME,  INPUT, ME GROUP -XVARIABLE                        00202700
&ZXSUBDATA2     SETC  'INPUT'     SET IN/OUTPUT                         00202800
&XSUBDATA2      SETC  '&SUBDATA2(1)'            SET XVARIABLE           00202900
                AIF   (N'&SUBDATA2 GT 1).ZG51B  MULTIPLE PARMS          00203000
&XSUBDATA2      SETC  '&SUBDATA2'               SET XVARIABLE           00203100
.ZG51B          AIF   (K'&SUBDATA2(1) GT 0).ZG51C                       00203200
&ZXSUBDATA2     SETC  ''          RESET IN/OUTPUT                       00203300
.ZG51C          ANOP  ,                                                 00203400
.*-------------------------------------------------------------------   00203500
.***AG.KCK02 NAME,  INPUT, ME GROUP -GPR OUT OF RANGE                   00203600
                AIF   (K'&ZXSUBDATA2 LE 0).ZG51R  NOT I/O               00203700
                AIF   ('&XSUBDATA2'(1,1) NE '(').ZG51R                  00203800
&ZCGPR          SETC  '&XSUBDATA2'(2,K'&XSUBDATA2-2)                    00203900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG51P                      00204000
                AIF   (K'&ZCGPR GT 2).ZG51Q                             00204100
                AIF   ('&ZCGPR' EQ '0').ZG51Q                           00204200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00204300
                AIF   (T'&ZCGPR NE 'N').ZG51Q   INVALID REG NAME        00204400
.ZG51P          ANOP  ,                                                 00204500
                AIF   (T'&ZCGPR NE 'N').ZG51R   NON NUMERIC             00204600
                AIF   ('&ZCGPR' LT '2').ZG51Q                           00204700
                AIF   ('&ZCGPR' LE '12').ZG51R                          00204800
.ZG51Q          ANOP  ,                                                 00204900
&ZMS            SETC  '"SUBDATA2='              *KGPRA* MNOTE           00205000
&ZMS            SETC  '&ZMS.&SUBDATA2"'                                 00205100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00205200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00205300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00205400
.ZG51R          ANOP  ,                                                 00205500
.*-------------------------------------------------------------------   00205600
.***AG.KMGRP11 NAME,  INPUT, ME GROUP -AT LEAST ONE SPECIFIED           00205700
&ZCVAL          SETC ''           ERROR KEY FIELD                       00205800
                AIF   (K'&XSUBDATA1 GT 0).ZG52J                         00205900
&ZCVAL          SETC '&ZCVAL,SUBDATA1'          NOT USED KEY            00206000
                AIF   (K'&XSUBDATA2 GT 0).ZG52J                         00206100
&ZCVAL          SETC '&ZCVAL,SUBDATA2'          NOT USED KEY            00206200
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00206300
&ZMS            SETC  'ONE OR MORE OF THE'      *MGRPA* MNOTE           00206400
&ZMS            SETC  '&ZMS FOLLOWING KEY(S) IS REQUIRED: '             00206500
&ZMS            SETC  '&ZMS "SUBDATA1",'                                00206600
                MNOTE 8,' &ZMS " SUBDATA2".'                            00206700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00206800
.ZG52J          ANOP  ,                                                 00206900
.ZG52K          ANOP  ,                                                 00207000
.*-------------------------------------------------------------------   00207100
.***AG.KCK02 NAME,  INPUT, ME GROUP -GPR OUT OF RANGE                   00207200
                AIF   (K'&ZXSUBDATA2 LE 0).ZG52R  NOT I/O               00207300
                AIF   ('&XSUBDATA2'(1,1) NE '(').ZG52R                  00207400
&ZCGPR          SETC  '&XSUBDATA2'(2,K'&XSUBDATA2-2)                    00207500
                AIF   ('&ZCGPR'(1,1) NE '0').ZG52P                      00207600
                AIF   (K'&ZCGPR GT 2).ZG52Q                             00207700
                AIF   ('&ZCGPR' EQ '0').ZG52Q                           00207800
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00207900
                AIF   (T'&ZCGPR NE 'N').ZG52Q   INVALID REG NAME        00208000
.ZG52P          ANOP  ,                                                 00208100
                AIF   (T'&ZCGPR NE 'N').ZG52R   NON NUMERIC             00208200
                AIF   ('&ZCGPR' LT '2').ZG52Q                           00208300
                AIF   ('&ZCGPR' LE '12').ZG52R                          00208400
.ZG52Q          ANOP  ,                                                 00208500
&ZMS            SETC  '"SUBDATA2='              *KGPRA* MNOTE           00208600
&ZMS            SETC  '&ZMS.&SUBDATA2"'                                 00208700
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00208800
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00208900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00209000
.ZG52R          ANOP  ,                                                 00209100
.*-------------------------------------------------------------------   00209200
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00209300
.ZG53           ANOP  ,                                                 00209400
&ZTLC           SETC 'GET'                                              00209500
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG58                   00209600
&XREQUEST       SETC  'GET'       SET KEYWORD                           00209700
                AIF   (N'&REQUEST LE 1).ZG53A   CK NUM                  00209800
&ZMS            SETC  '"REQUEST='               *KPOSA* MNOTE           00209900
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00210000
&ZMS            SETC  '&ZMS "REQUEST"'                                  00210100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00210200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00210300
.ZG53A          ANOP  ,                                                 00210400
.*------------------------------------------------------------------    00210500
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00210600
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00210700
.ZG53A0         AIF   (K'&CONSNAME LE 0).ZG53A1  OK                     00210800
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00210900
.ZG53A1         AIF   (K'&INITRTN LE 0).ZG53A2  OK                      00211000
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00211100
.ZG53A2         AIF   (K'&INITPARM LE 0).ZG53A3  OK                     00211200
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00211300
.ZG53A3         AIF   (K'&INITPLEN LE 0).ZG53A4  OK                     00211400
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00211500
.ZG53A4         AIF   (K'&INTOKEN LE 0).ZG53A5  OK                      00211600
&ZCVAL          SETC '&ZCVAL INTOKEN'           INCORRECT KEY USED      00211700
.ZG53A5         AIF   (K'&COMMAND LE 0).ZG53A6  OK                      00211800
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00211900
.ZG53A6         AIF   (K'&REQDSUB LE 0).ZG53A7  OK                      00212000
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00212100
.ZG53A7         AIF   (K'&OUTTOKEN LE 0).ZG53A8  OK                     00212200
&ZCVAL          SETC '&ZCVAL OUTTOKEN'          INCORRECT KEY USED      00212300
.ZG53A8         AIF   (K'&WORKAREA LE 0).ZG53A9  OK                     00212400
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00212500
.ZG53A9         AIF   (K'&WORKASP LE 0).ZG53A10  OK                     00212600
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00212700
.ZG53A10        AIF   (K'&ZCVAL LE 0).ZG53A11   OK                      00212800
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00212900
&ZMS            SETC  '"REQUEST'  *KMEIA* MNOTE                         00213000
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00213100
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00213200
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00213300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00213400
.ZG53A11        ANOP  ,                                                 00213500
.*----------------------------------------------------------------***   00213600
.***AG.KMGRP05 NAME,  OUTPUT, ME GROUP -XVARIABLE KEY                   00213700
                AIF   (N'&SUBDATA1 LE 1).ZG55A  CK NUM                  00213800
&ZMS            SETC  '"SUBDATA1='              *KPOSA* MNOTE           00213900
&ZMS            SETC  '&ZMS.&SUBDATA1"'                                 00214000
&ZMS            SETC  '&ZMS "SUBDATA1"'                                 00214100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00214200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00214300
.ZG55A          ANOP  ,                                                 00214400
.*-------------------------------------------------------------------   00214500
.***AG.KMGRP06 NAME,  OUTPUT, ME GROUP -XVARIABLE                       00214600
&ZXSUBDATA1     SETC  'OUTPUT'    SET IN/OUTPUT                         00214700
&XSUBDATA1      SETC  '&SUBDATA1(1)'            SET XVARIABLE           00214800
                AIF   (N'&SUBDATA1 GT 1).ZG55B  MULTIPLE PARMS          00214900
&XSUBDATA1      SETC  '&SUBDATA1'               SET XVARIABLE           00215000
.ZG55B          AIF   (K'&SUBDATA1(1) GT 0).ZG55C                       00215100
&ZXSUBDATA1     SETC  ''          RESET IN/OUTPUT                       00215200
.ZG55C          ANOP  ,                                                 00215300
.*-------------------------------------------------------------------   00215400
.***AG.KCK02 NAME,  OUTPUT, ME GROUP -GPR OUT OF RANGE                  00215500
                AIF   (K'&ZXSUBDATA1 LE 0).ZG55R  NOT I/O               00215600
                AIF   ('&XSUBDATA1'(1,1) NE '(').ZG55R                  00215700
&ZCGPR          SETC  '&XSUBDATA1'(2,K'&XSUBDATA1-2)                    00215800
                AIF   ('&ZCGPR'(1,1) NE '0').ZG55P                      00215900
                AIF   (K'&ZCGPR GT 2).ZG55Q                             00216000
                AIF   ('&ZCGPR' EQ '0').ZG55Q                           00216100
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00216200
                AIF   (T'&ZCGPR NE 'N').ZG55Q   INVALID REG NAME        00216300
.ZG55P          ANOP  ,                                                 00216400
                AIF   (T'&ZCGPR NE 'N').ZG55R   NON NUMERIC             00216500
                AIF   ('&ZCGPR' LT '2').ZG55Q                           00216600
                AIF   ('&ZCGPR' LE '12').ZG55R                          00216700
.ZG55Q          ANOP  ,                                                 00216800
&ZMS            SETC  '"SUBDATA1='              *KGPRA* MNOTE           00216900
&ZMS            SETC  '&ZMS.&SUBDATA1"'                                 00217000
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00217100
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00217200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00217300
.ZG55R          ANOP  ,                                                 00217400
.*----------------------------------------------------------------***   00217500
.***AG.KMGRP05 NAME,  OUTPUT, ME GROUP -XVARIABLE KEY                   00217600
                AIF   (N'&SUBDATA2 LE 1).ZG56A  CK NUM                  00217700
&ZMS            SETC  '"SUBDATA2='              *KPOSA* MNOTE           00217800
&ZMS            SETC  '&ZMS.&SUBDATA2"'                                 00217900
&ZMS            SETC  '&ZMS "SUBDATA2"'                                 00218000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00218100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00218200
.ZG56A          ANOP  ,                                                 00218300
.*-------------------------------------------------------------------   00218400
.***AG.KMGRP06 NAME,  OUTPUT, ME GROUP -XVARIABLE                       00218500
&ZXSUBDATA2     SETC  'OUTPUT'    SET IN/OUTPUT                         00218600
&XSUBDATA2      SETC  '&SUBDATA2(1)'            SET XVARIABLE           00218700
                AIF   (N'&SUBDATA2 GT 1).ZG56B  MULTIPLE PARMS          00218800
&XSUBDATA2      SETC  '&SUBDATA2'               SET XVARIABLE           00218900
.ZG56B          AIF   (K'&SUBDATA2(1) GT 0).ZG56C                       00219000
&ZXSUBDATA2     SETC  ''          RESET IN/OUTPUT                       00219100
.ZG56C          ANOP  ,                                                 00219200
.*-------------------------------------------------------------------   00219300
.***AG.KCK02 NAME,  OUTPUT, ME GROUP -GPR OUT OF RANGE                  00219400
                AIF   (K'&ZXSUBDATA2 LE 0).ZG56R  NOT I/O               00219500
                AIF   ('&XSUBDATA2'(1,1) NE '(').ZG56R                  00219600
&ZCGPR          SETC  '&XSUBDATA2'(2,K'&XSUBDATA2-2)                    00219700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG56P                      00219800
                AIF   (K'&ZCGPR GT 2).ZG56Q                             00219900
                AIF   ('&ZCGPR' EQ '0').ZG56Q                           00220000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00220100
                AIF   (T'&ZCGPR NE 'N').ZG56Q   INVALID REG NAME        00220200
.ZG56P          ANOP  ,                                                 00220300
                AIF   (T'&ZCGPR NE 'N').ZG56R   NON NUMERIC             00220400
                AIF   ('&ZCGPR' LT '2').ZG56Q                           00220500
                AIF   ('&ZCGPR' LE '12').ZG56R                          00220600
.ZG56Q          ANOP  ,                                                 00220700
&ZMS            SETC  '"SUBDATA2='              *KGPRA* MNOTE           00220800
&ZMS            SETC  '&ZMS.&SUBDATA2"'                                 00220900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00221000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00221100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00221200
.ZG56R          ANOP  ,                                                 00221300
.*-------------------------------------------------------------------   00221400
.***AG.KMGRP11 NAME,  OUTPUT, ME GROUP -AT LEAST ONE SPECIFIED          00221500
&ZCVAL          SETC ''           ERROR KEY FIELD                       00221600
                AIF   (K'&XSUBDATA1 GT 0).ZG57J                         00221700
&ZCVAL          SETC '&ZCVAL,SUBDATA1'          NOT USED KEY            00221800
                AIF   (K'&XSUBDATA2 GT 0).ZG57J                         00221900
&ZCVAL          SETC '&ZCVAL,SUBDATA2'          NOT USED KEY            00222000
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00222100
&ZMS            SETC  'ONE OR MORE OF THE'      *MGRPA* MNOTE           00222200
&ZMS            SETC  '&ZMS FOLLOWING KEY(S) IS REQUIRED: '             00222300
&ZMS            SETC  '&ZMS "SUBDATA1",'                                00222400
                MNOTE 8,' &ZMS " SUBDATA2".'                            00222500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00222600
.ZG57J          ANOP  ,                                                 00222700
.ZG57K          ANOP  ,                                                 00222800
.*-------------------------------------------------------------------   00222900
.***AG.KCK02 NAME,  OUTPUT, ME GROUP -GPR OUT OF RANGE                  00223000
                AIF   (K'&ZXSUBDATA2 LE 0).ZG57R  NOT I/O               00223100
                AIF   ('&XSUBDATA2'(1,1) NE '(').ZG57R                  00223200
&ZCGPR          SETC  '&XSUBDATA2'(2,K'&XSUBDATA2-2)                    00223300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG57P                      00223400
                AIF   (K'&ZCGPR GT 2).ZG57Q                             00223500
                AIF   ('&ZCGPR' EQ '0').ZG57Q                           00223600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00223700
                AIF   (T'&ZCGPR NE 'N').ZG57Q   INVALID REG NAME        00223800
.ZG57P          ANOP  ,                                                 00223900
                AIF   (T'&ZCGPR NE 'N').ZG57R   NON NUMERIC             00224000
                AIF   ('&ZCGPR' LT '2').ZG57Q                           00224100
                AIF   ('&ZCGPR' LE '12').ZG57R                          00224200
.ZG57Q          ANOP  ,                                                 00224300
&ZMS            SETC  '"SUBDATA2='              *KGPRA* MNOTE           00224400
&ZMS            SETC  '&ZMS.&SUBDATA2"'                                 00224500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00224600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00224700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00224800
.ZG57R          ANOP  ,                                                 00224900
.*-------------------------------------------------------------------   00225000
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00225100
.ZG58           ANOP  ,                                                 00225200
&ZTLC           SETC 'QUERY'                                            00225300
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG65                   00225400
&XREQUEST       SETC  'QUERY'     SET KEYWORD                           00225500
                AIF   (N'&REQUEST LE 1).ZG58A   CK NUM                  00225600
&ZMS            SETC  '"REQUEST='               *KPOSA* MNOTE           00225700
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00225800
&ZMS            SETC  '&ZMS "REQUEST"'                                  00225900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00226000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00226100
.ZG58A          ANOP  ,                                                 00226200
.*------------------------------------------------------------------    00226300
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00226400
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00226500
.ZG58A0         AIF   (K'&CONSNAME LE 0).ZG58A1  OK                     00226600
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00226700
.ZG58A1         AIF   (K'&INITRTN LE 0).ZG58A2  OK                      00226800
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00226900
.ZG58A2         AIF   (K'&INITPARM LE 0).ZG58A3  OK                     00227000
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00227100
.ZG58A3         AIF   (K'&INITPLEN LE 0).ZG58A4  OK                     00227200
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00227300
.ZG58A4         AIF   (K'&INTOKEN LE 0).ZG58A5  OK                      00227400
&ZCVAL          SETC '&ZCVAL INTOKEN'           INCORRECT KEY USED      00227500
.ZG58A5         AIF   (K'&COMMAND LE 0).ZG58A6  OK                      00227600
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00227700
.ZG58A6         AIF   (K'&REQDSUB LE 0).ZG58A7  OK                      00227800
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00227900
.ZG58A7         AIF   (K'&OUTTOKEN LE 0).ZG58A8  OK                     00228000
&ZCVAL          SETC '&ZCVAL OUTTOKEN'          INCORRECT KEY USED      00228100
.ZG58A8         AIF   (K'&SUBDATA1 LE 0).ZG58A9  OK                     00228200
&ZCVAL          SETC '&ZCVAL SUBDATA1'          INCORRECT KEY USED      00228300
.ZG58A9         AIF   (K'&SUBDATA2 LE 0).ZG58A10  OK                    00228400
&ZCVAL          SETC '&ZCVAL SUBDATA2'          INCORRECT KEY USED      00228500
.ZG58A10        AIF   (K'&ZCVAL LE 0).ZG58A11   OK                      00228600
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00228700
&ZMS            SETC  '"REQUEST'  *KMEIA* MNOTE                         00228800
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00228900
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00229000
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00229100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00229200
.ZG58A11        ANOP  ,                                                 00229300
.*----------------------------------------------------------------***   00229400
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY                    00229500
                AIF   (N'&WORKAREA LE 1).ZG60A  CK NUM                  00229600
&ZMS            SETC  '"WORKAREA='              *KPOSA* MNOTE           00229700
&ZMS            SETC  '&ZMS.&WORKAREA"'                                 00229800
&ZMS            SETC  '&ZMS "WORKAREA"'                                 00229900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00230000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00230100
.ZG60A          ANOP  ,                                                 00230200
.*-------------------------------------------------------------------   00230300
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE                        00230400
&ZXWORKAREA     SETC  'OUTPUT'    SET IN/OUTPUT                         00230500
&XWORKAREA      SETC  '&WORKAREA(1)'            SET XVARIABLE           00230600
                AIF   (N'&WORKAREA GT 1).ZG60B  MULTI PARMS             00230700
&XWORKAREA      SETC  '&WORKAREA'               SET XVARIABLE           00230800
.ZG60B          AIF   (K'&WORKAREA(1) GT 0).ZG60C                       00230900
&ZXWORKAREA     SETC  ''          RESET IN/OUTPUT                       00231000
&ZMS            SETC  ' '         *KRQDA*                               00231100
&ZMS            SETC  '&ZMS "WORKAREA" KEY AND ITS ARGUMENT'            00231200
                MNOTE 8,' &ZMS ARE REQUIRED.'                           00231300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00231400
.ZG60C          ANOP  ,                                                 00231500
.*-------------------------------------------------------------------   00231600
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE                   00231700
                AIF   (K'&ZXWORKAREA LE 0).ZG60R  NOT I/O               00231800
                AIF   ('&XWORKAREA'(1,1) NE '(').ZG60R                  00231900
&ZCGPR          SETC  '&XWORKAREA'(2,K'&XWORKAREA-2)                    00232000
                AIF   ('&ZCGPR'(1,1) NE '0').ZG60P                      00232100
                AIF   (K'&ZCGPR GT 2).ZG60Q                             00232200
                AIF   ('&ZCGPR' EQ '0').ZG60Q                           00232300
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00232400
                AIF   (T'&ZCGPR NE 'N').ZG60Q   INVALID REG NAME        00232500
.ZG60P          ANOP  ,                                                 00232600
                AIF   (T'&ZCGPR NE 'N').ZG60R   NON NUMERIC             00232700
                AIF   ('&ZCGPR' LT '2').ZG60Q                           00232800
                AIF   ('&ZCGPR' LE '12').ZG60R                          00232900
.ZG60Q          ANOP  ,                                                 00233000
&ZMS            SETC  '"WORKAREA='              *KGPRA* MNOTE           00233100
&ZMS            SETC  '&ZMS.&WORKAREA"'                                 00233200
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00233300
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00233400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00233500
.ZG60R          ANOP  ,                                                 00233600
.*----------------------------------------------------------------***   00233700
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00233800
                AIF   (N'&WORKASP LE 1).ZG63A   CK NUM                  00233900
&ZMS            SETC  '"WORKASP='               *KPOSA* MNOTE           00234000
&ZMS            SETC  '&ZMS.&WORKASP"'                                  00234100
&ZMS            SETC  '&ZMS "WORKASP"'                                  00234200
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00234300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00234400
.ZG63A          ANOP  ,                                                 00234500
.*-------------------------------------------------------------------   00234600
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00234700
&ZXWORKASP      SETC  'INPUT'     SET IN/OUTPUT                         00234800
&XWORKASP       SETC  '0'                                               00234900
                AIF   (K'&WORKASP(1) LE 0).ZG63B  PARM                  00235000
&XWORKASP       SETC  '&WORKASP(1)'             SET XVARIABLE           00235100
                AIF   (N'&WORKASP GT 1).ZG63B   MULTI PARMS             00235200
&XWORKASP       SETC  '&WORKASP'  SET XVARIABLE                         00235300
.ZG63B          ANOP  ,                                                 00235400
.*-------------------------------------------------------------------   00235500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00235600
                AIF   (K'&ZXWORKASP LE 0).ZG63R  NOT I/O                00235700
                AIF   ('&XWORKASP'(1,1) NE '(').ZG63R                   00235800
&ZCGPR          SETC  '&XWORKASP'(2,K'&XWORKASP-2)                      00235900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG63P                      00236000
                AIF   (K'&ZCGPR GT 2).ZG63Q                             00236100
                AIF   ('&ZCGPR' EQ '0').ZG63Q                           00236200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00236300
                AIF   (T'&ZCGPR NE 'N').ZG63Q   INVALID REG NAME        00236400
.ZG63P          ANOP  ,                                                 00236500
                AIF   (T'&ZCGPR NE 'N').ZG63R   NON NUMERIC             00236600
                AIF   ('&ZCGPR' LT '2').ZG63Q                           00236700
                AIF   ('&ZCGPR' LE '12').ZG63R                          00236800
.ZG63Q          ANOP  ,                                                 00236900
&ZMS            SETC  '"WORKASP='               *KGPRA* MNOTE           00237000
&ZMS            SETC  '&ZMS.&WORKASP"'                                  00237100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00237200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00237300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00237400
.ZG63R          ANOP  ,                                                 00237500
.*------------------------------------------------------------------    00237600
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00237700
.ZG65           ANOP  ,                                                 00237800
&ZXREQUEST      SETC  'INPUT'     SET IN/OUTPUT                         00237900
                AIF   (K'&XREQUEST GT 0).ZG65E  VALID ARG               00238000
                AIF   (T'&REQUEST EQ 'O').ZG65D  OMITTED                00238100
&ZASYSLNDX      SETA  0                                                 00238200
.ZG65A          ANOP  ,           POSITIONAL MACRO KEY                  00238300
&ZASYSLNDX      SETA  &ZASYSLNDX+1                                      00238400
                AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG65C                  00238500
&ZTLC           SETC 'REQUEST'                                          00238600
                AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG65A         00238700
.ZG65B          ANOP  ,                                                 00238800
&ZXREQUEST      SETC  ''          RESET IN/OUTPUT                       00238900
&ZMS            SETC  'THE "REQUEST" KEY'       *KOPTA* MNOTE           00239000
&ZMS            SETC  '&ZMS MUST CONTAIN ONE'                           00239100
                MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                  00239200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00239300
                AGO   .ZG65E                                            00239400
.ZG65C          ANOP  ,                                                 00239500
&ZXREQUEST      SETC  ''          RESET IN/OUTPUT                       00239600
&ZMS            SETC  '"REQUEST='               *KUKWA* MNOTE           00239700
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00239800
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00239900
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00240000
&ZMS            SETC  '&ZMS "ADD",'             VALID KEYWORD           00240100
&ZMS            SETC  '&ZMS "ACTIVATE",'        VALID KEYWORD           00240200
&ZMS            SETC  '&ZMS "OPTIONS",'         VALID KEYWORD           00240300
&ZMS            SETC  '&ZMS "DEACTIVATE",'      VALID KEYWORD           00240400
&ZMS            SETC  '&ZMS "SWAP",'            VALID KEYWORD           00240500
&ZMS            SETC  '&ZMS "PUT",'             VALID KEYWORD           00240600
&ZMS            SETC  '&ZMS "GET",'             VALID KEYWORD           00240700
&ZMS            SETC  '&ZMS OR "QUERY".'        VALID KEYWORD           00240800
                MNOTE 8,' &ZMS '                                        00240900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00241000
                AGO   .ZG65E                                            00241100
.ZG65D          ANOP  ,                                                 00241200
&XREQUEST       SETC  'ADD'       SET DEFAULT KEYWORD                   00241300
.ZG65E          ANOP  ,                                                 00241400
.*------------------------------------------------------------------    00241500
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00241600
                AIF   (K'&REQUEST(1) GT 0).ZG65F  PARM                  00241700
&XREQUEST       SETC  ''          ENSURE NULL KEYWORD                   00241800
&ZXREQUEST      SETC  ''          RESET IN/OUTPUT                       00241900
&ZMS            SETC  'THE'                                             00242000
&ZMS            SETC  '&ZMS "REQUEST" KEY AND ITS ARGUMENT'             00242100
&ZMS            SETC  '&ZMS ARE REQUIRED.'                              00242200
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00242300
&ZMS            SETC  '&ZMS "ADD",'             VALID KEYWORD           00242400
&ZMS            SETC  '&ZMS "ACTIVATE",'        VALID KEYWORD           00242500
&ZMS            SETC  '&ZMS "OPTIONS",'         VALID KEYWORD           00242600
&ZMS            SETC  '&ZMS "DEACTIVATE",'      VALID KEYWORD           00242700
&ZMS            SETC  '&ZMS "SWAP",'            VALID KEYWORD           00242800
&ZMS            SETC  '&ZMS "PUT",'             VALID KEYWORD           00242900
&ZMS            SETC  '&ZMS "GET",'             VALID KEYWORD           00243000
&ZMS            SETC  '&ZMS OR "QUERY".'        VALID KEYWORD           00243100
                MNOTE 8,' &ZMS '                                        00243200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00243300
.ZG65F          ANOP  ,                                                 00243400
.*----------------------------------------------------------------***   00243500
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00243600
                AIF   (N'&RETCODE LE 1).ZG67A   CK NUM                  00243700
&ZMS            SETC  '"RETCODE='               *KPOSA* MNOTE           00243800
&ZMS            SETC  '&ZMS.&RETCODE"'                                  00243900
&ZMS            SETC  '&ZMS "RETCODE"'                                  00244000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00244100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00244200
.ZG67A          ANOP  ,                                                 00244300
.*-------------------------------------------------------------------   00244400
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00244500
                AIF   (K'&RETCODE(1) LE 0).ZG67C  NO PARM               00244600
&ZXRETCODE      SETC  'OUTPUT'    SET OUTPUT                            00244700
&XRETCODE       SETC  '&RETCODE(1)'             SET XVARIABLE           00244800
                AIF   (N'&RETCODE GT 1).ZG67C                           00244900
&XRETCODE       SETC  '&RETCODE'  SET XVARIABLE                         00245000
.ZG67C          ANOP  ,                                                 00245100
.*-------------------------------------------------------------------   00245200
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00245300
                AIF   (K'&ZXRETCODE LE 0).ZG67R  NOT I/O                00245400
                AIF   ('&XRETCODE'(1,1) NE '(').ZG67R                   00245500
&ZCGPR          SETC  '&XRETCODE'(2,K'&XRETCODE-2)                      00245600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG67P                      00245700
                AIF   (K'&ZCGPR GT 2).ZG67Q                             00245800
                AIF   ('&ZCGPR' EQ '0').ZG67Q                           00245900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00246000
                AIF   (T'&ZCGPR NE 'N').ZG67Q   INVALID REG NAME        00246100
.ZG67P          ANOP  ,                                                 00246200
                AIF   (T'&ZCGPR NE 'N').ZG67R   NON NUMERIC             00246300
                AIF   ('&ZCGPR' LT '2').ZG67Q                           00246400
                AIF   ('&ZCGPR' LE '12').ZG67R                          00246500
.ZG67Q          ANOP  ,                                                 00246600
&ZMS            SETC  '"RETCODE='               *KGPRA* MNOTE           00246700
&ZMS            SETC  '&ZMS.&RETCODE"'                                  00246800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00246900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00247000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00247100
.ZG67R          ANOP  ,                                                 00247200
.*----------------------------------------------------------------***   00247300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00247400
                AIF   (N'&RSNCODE LE 1).ZG70A   CK NUM                  00247500
&ZMS            SETC  '"RSNCODE='               *KPOSA* MNOTE           00247600
&ZMS            SETC  '&ZMS.&RSNCODE"'                                  00247700
&ZMS            SETC  '&ZMS "RSNCODE"'                                  00247800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00247900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00248000
.ZG70A          ANOP  ,                                                 00248100
.*-------------------------------------------------------------------   00248200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00248300
                AIF   (K'&RSNCODE(1) LE 0).ZG70C  NO PARM               00248400
&ZXRSNCODE      SETC  'OUTPUT'    SET OUTPUT                            00248500
&XRSNCODE       SETC  '&RSNCODE(1)'             SET XVARIABLE           00248600
                AIF   (N'&RSNCODE GT 1).ZG70C                           00248700
&XRSNCODE       SETC  '&RSNCODE'  SET XVARIABLE                         00248800
.ZG70C          ANOP  ,                                                 00248900
.*-------------------------------------------------------------------   00249000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00249100
                AIF   (K'&ZXRSNCODE LE 0).ZG70R  NOT I/O                00249200
                AIF   ('&XRSNCODE'(1,1) NE '(').ZG70R                   00249300
&ZCGPR          SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                      00249400
                AIF   ('&ZCGPR'(1,1) NE '0').ZG70P                      00249500
                AIF   (K'&ZCGPR GT 2).ZG70Q                             00249600
                AIF   ('&ZCGPR' EQ '0').ZG70Q                           00249700
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00249800
                AIF   (T'&ZCGPR NE 'N').ZG70Q   INVALID REG NAME        00249900
.ZG70P          ANOP  ,                                                 00250000
                AIF   (T'&ZCGPR NE 'N').ZG70R   NON NUMERIC             00250100
                AIF   ('&ZCGPR' LT '2').ZG70Q                           00250200
                AIF   ('&ZCGPR' LE '12').ZG70R                          00250300
.ZG70Q          ANOP  ,                                                 00250400
&ZMS            SETC  '"RSNCODE='               *KGPRA* MNOTE           00250500
&ZMS            SETC  '&ZMS.&RSNCODE"'                                  00250600
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00250700
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00250800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00250900
.ZG70R          ANOP  ,                                                 00251000
.*----------------------------------------------------------------***   00251100
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00251200
                AIF   (N'&COM LE 1).ZG73A       CK NUM                  00251300
&ZMS            SETC  '"COM='     *KPOSA* MNOTE                         00251400
&ZMS            SETC  '&ZMS.&COM"'                                      00251500
&ZMS            SETC  '&ZMS "COM"'                                      00251600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00251700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00251800
.ZG73A          ANOP  ,                                                 00251900
.*-------------------------------------------------------------------   00252000
.***AG.KXVAR13 VALUE, OPT INPUT, KEYS -XVARIABLE                        00252100
&ZXCOM          SETC  'INPUT'     SET IN/OUTPUT                         00252200
&XCOM           SETC  'NULL'                                            00252300
                AIF   (K'&COM(1) LE 0).ZG73B    PARM                    00252400
&XCOM           SETC  '&COM(1)'   SET XVARIABLE                         00252500
                AIF   (N'&COM GT 1).ZG73B       MULTI PARMS             00252600
&XCOM           SETC  '&COM'      SET XVARIABLE                         00252700
.ZG73B          ANOP  ,                                                 00252800
.*-------------------------------------------------------------------   00252900
.***AG.KCK01 VALUE, OPT INPUT, KEYS -GPR NOT ALLOWED                    00253000
                AIF   (K'&ZXCOM LE 0).ZG73P     NOT I/O                 00253100
                AIF   ('&XCOM' EQ 'NULL').ZG73P                         00253200
                AIF   ('&XCOM'(1,1) NE '(').ZG73P                       00253300
&ZXCOM          SETC  ''          RESET IN/OUTPUT                       00253400
&ZMS            SETC  '"COM='     *KGPRA* MNOTE                         00253500
&ZMS            SETC  '&ZMS.&COM"'                                      00253600
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00253700
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00253800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00253900
.ZG73P          ANOP  ,                                                 00254000
.*-------------------------------------------------------------------   00254100
.***AG.KCK03 VALUE, OPT INPUT, KEYS -CHARACTER LENGTH                   00254200
                AIF   (K'&ZXCOM LE 0).ZG73S     NOT I/O                 00254300
                AIF   ('&XCOM' EQ 'NULL').ZG73S                         00254400
                AIF   (K'&XCOM LE 256).ZG73S    LNG OK                  00254500
&ZXCOM          SETC  ''          RESET IN/OUTPUT                       00254600
&ZMS            SETC  '"COM='     *KLNGA* MNOTE                         00254700
&ZMS            SETC  '&ZMS.&COM"'                                      00254800
&ZMS            SETC  '&ZMS ARGUMENT 1 EXCEEDS THE MAXIMUM'             00254900
                MNOTE 8,' &ZMS LENGTH OF 256 CHARACTERS.'               00255000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00255100
.ZG73S          ANOP  ,                                                 00255200
.******************************************************************     00255300
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00255400
.******************************************************************     00255500
                ACTR  10000                                             00255600
.*----------------------------------------------------------------***   00255700
.***AH.P02 EXTRA POSITIONALS                                            00255800
                AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS              00255900
&ZCVAL          SETC  ''          ERROR FIELD                           00256000
&ZAWRK          SETA  0           POSITIONAL NUMBER                     00256100
.ZGLIST2        ANOP  ,                                                 00256200
&ZAWRK          SETA  &ZAWRK+1    NEXT POSITIONAL                       00256300
                AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE              00256400
&ZCVAL          SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA                   00256500
                AGO   .ZGLIST2                                          00256600
.*                                                                      00256700
.ZGLIST3        ANOP  ,                                                 00256800
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)     STRIP COMMA             00256900
&ZMS            SETC  'POSITIONAL ARGUMENT(S),'  *PPOSA* MNOTE          00257000
&ZMS            SETC  '&ZMS "&ZCVAL"'                                   00257100
&ZMS            SETC  '&ZMS CANNOT BE USED.'                            00257200
&ZMS            SETC  '&ZMS NO POSITIONAL ARGUMENTS'                    00257300
                MNOTE 8,' &ZMS ARE ALLOWED.'                            00257400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00257500
.ZGLISTX        ANOP  ,                                                 00257600
&ZASYSLNDX      SETA  0                                                 00257700
.*-------------------------------------------------------------------   00257800
.***AG.MF04 MF=(SLE)                                                    00257900
.ZGMFX          ANOP  ,           END OF FULL SYNTAX CHECK              00258000
.*******************************************************************    00258100
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00258200
.*******************************************************************    00258300
                AIF   (&ZMACRET NE 0).ZLX2      ERROR DETECTED          00258400
.*******************************************************************    00258500
.***AE.01  START OF IEFSSI MACRO CODE                                   00258600
.*******************************************************************    00258700
                LCLC  &M0M0001                 NAME                     00258800
&M0M0001        SETC  '&XLABEL'                SET NAME                 00258900
                AIF   (K'&XLABEL NE 0).XLAB2                            00259000
&M0M0001        SETC  'M00M&SYSNDX'            DEFAULT NAME             00259100
.*                                                                      00259200
.XLAB2          ANOP  ,                                                 00259300
&M0M0001 DS    0H                             IEFSSI-1                  00259400
.*******************************************************************    00259500
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00259600
.*******************************************************************    00259700
              PUSH  PRINT                                               00259800
                AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON        00259900
                PRINT OFF         ++ PR01                               00260000
                AGO   .ZPRNTXX                                          00260100
.ZPRINTX        PRINT ON                                                00260200
.ZPRNTXX        ANOP  ,                                                 00260300
.********************************************************************   00260400
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00260500
.********************************************************************   00260600
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00260700
                      LCLA  &ZOPN1         INVOCATION INDEX             00260800
                      LCLC  &ZOPL(4095)    LABEL                        00260900
                      LCLC  &ZOPO(4095)    OPERATION                    00261000
                      LCLC  &ZOPV(4095)    VALUE                        00261100
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00261200
.*                                                                      00261300
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00261400
.******************************************************************     00261500
.***AL.L10 IEFSSI FMT=LIST MF=S|L PARAMETERS                            00261600
.******************************************************************     00261700
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     00261800
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     00261900
&XMFCTRL              SETC  '#Z'.'&SYSNDX'(1,4).'A'                     00262000
&XMFATTR              SETC  '0D'                                        00262100
.*                                                                      00262200
&ZOPN                 SETA  &ZOPN+1                                     00262300
&ZOPL(&ZOPN)          SETC  ' '                                         00262400
&ZOPO(&ZOPN)          SETC  'B'                                         00262500
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'                                00262600
&ZOPD(&ZOPN)          SETC  '++ IEFSSI ARG PARMS'                       00262700
.*                                                                      00262800
&ZOPN                 SETA  &ZOPN+1                                     00262900
&ZOPL(&ZOPN)          SETC  ' '                                         00263000
&ZOPO(&ZOPN)          SETC  'SPACE'                                     00263100
&ZOPV(&ZOPN)          SETC  '1'                                         00263200
&ZOPD(&ZOPN)          SETC  ' '                                         00263300
.*                                                                      00263400
.ZLMFSL2              ANOP  ,                                           00263500
.*-------------------------------------------------------------------   00263600
.***AM.L01  IEFSSI FMT=LIST PARAMETERS                                  00263700
&ZOPN                 SETA &ZOPN+1                                      00263800
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00263900
&ZOPO(&ZOPN)          SETC 'DS'                                         00264000
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00264100
&ZOPD(&ZOPN)          SETC '++ IEFSSI PARM LIST'                        00264200
.*-------------------------------------------------------------------   00264300
.***AM.L09  XSSI_PLIST_ID CL4                                           00264400
&ZOPN                 SETA &ZOPN+1                                      00264500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSSI_PLIST_ID'                    00264600
&ZOPO(&ZOPN)          SETC 'DS'                                         00264700
&ZOPV(&ZOPN)          SETC 'CL4'                                        00264800
&ZOPD(&ZOPN)          SETC '++ CONSTANT  XSSI_PLIST_ID'                 00264900
.*-------------------------------------------------------------------   00265000
.***AM.L09  XPLISTLEN XL2                                               00265100
&ZOPN                 SETA &ZOPN+1                                      00265200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'                        00265300
&ZOPO(&ZOPN)          SETC 'DS'                                         00265400
&ZOPV(&ZOPN)          SETC 'XL2'                                        00265500
&ZOPD(&ZOPN)          SETC '++ INPUT  XPLISTLEN'                        00265600
.*-------------------------------------------------------------------   00265700
.***AM.L02 XVERSION XL1                                                 00265800
&ZOPN                 SETA &ZOPN+1                                      00265900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00266000
&ZOPO(&ZOPN)          SETC 'DS'                                         00266100
&ZOPV(&ZOPN)          SETC 'XL1'                                        00266200
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00266300
.*-------------------------------------------------------------------   00266400
.***AM.L09  XRSV0001 CL1                                                00266500
&ZOPN                 SETA &ZOPN+1                                      00266600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0001'                         00266700
&ZOPO(&ZOPN)          SETC 'DS'                                         00266800
&ZOPV(&ZOPN)          SETC 'CL1'                                        00266900
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0001'                      00267000
.*-------------------------------------------------------------------   00267100
.***AM.L09  XSUBNAME CL4                                                00267200
&ZOPN                 SETA &ZOPN+1                                      00267300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSUBNAME'                         00267400
&ZOPO(&ZOPN)          SETC 'DS'                                         00267500
&ZOPV(&ZOPN)          SETC 'CL4'                                        00267600
&ZOPD(&ZOPN)          SETC '++ &ZXSUBNAME  XSUBNAME'                    00267700
.*-------------------------------------------------------------------   00267800
.***AM.L09  XRSV0002 CL4                                                00267900
&ZOPN                 SETA &ZOPN+1                                      00268000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0002'                         00268100
&ZOPO(&ZOPN)          SETC 'DS'                                         00268200
&ZOPV(&ZOPN)          SETC 'CL4'                                        00268300
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0002'                      00268400
.*-------------------------------------------------------------------   00268500
.***AM.L03 XREQUEST_TYPE BL.16                                          00268600
&ZOPN                 SETA &ZOPN+1                                      00268700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQUEST_TYPE'                    00268800
&ZOPO(&ZOPN)          SETC 'DS'                                         00268900
&ZOPV(&ZOPN)          SETC 'BL.16'                                      00269000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00269100
.*                                                                      00269200
&ZOPN                 SETA  &ZOPN+1                                     00269300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_ADD'                    00269400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00269500
&ZOPV(&ZOPN)          SETC  'B''1000000000000000'''                     00269600
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00269700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ADD'                          00269800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00269900
.*                                                                      00270000
&ZOPN                 SETA  &ZOPN+1                                     00270100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_ACTIVATE'               00270200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00270300
&ZOPV(&ZOPN)          SETC  'B''0100000000000000'''                     00270400
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00270500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ACTIVATE'                     00270600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00270700
.*                                                                      00270800
&ZOPN                 SETA  &ZOPN+1                                     00270900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_DEACTIVATE'             00271000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00271100
&ZOPV(&ZOPN)          SETC  'B''0010000000000000'''                     00271200
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00271300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).DEACTIVATE'                   00271400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00271500
.*                                                                      00271600
&ZOPN                 SETA  &ZOPN+1                                     00271700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_SWAP'                   00271800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00271900
&ZOPV(&ZOPN)          SETC  'B''0000100000000000'''                     00272000
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00272100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SWAP'                         00272200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00272300
.*                                                                      00272400
&ZOPN                 SETA  &ZOPN+1                                     00272500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_OPTIONS'                00272600
&ZOPO(&ZOPN)          SETC  'EQU'                                       00272700
&ZOPV(&ZOPN)          SETC  'B''0000010000000000'''                     00272800
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00272900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).OPTIONS'                      00273000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00273100
.*                                                                      00273200
&ZOPN                 SETA  &ZOPN+1                                     00273300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_PUT'                    00273400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00273500
&ZOPV(&ZOPN)          SETC  'B''0000001000000000'''                     00273600
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00273700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).PUT'                          00273800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00273900
.*                                                                      00274000
&ZOPN                 SETA  &ZOPN+1                                     00274100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_GET'                    00274200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00274300
&ZOPV(&ZOPN)          SETC  'B''0000000100000000'''                     00274400
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00274500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).GET'                          00274600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00274700
.*                                                                      00274800
&ZOPN                 SETA  &ZOPN+1                                     00274900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_QUERY'                  00275000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00275100
&ZOPV(&ZOPN)          SETC  'B''0000000010000000'''                     00275200
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00275300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).QUERY'                        00275400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00275500
.*-------------------------------------------------------------------   00275600
.***AM.L03 XMISC_FLAGS BL.16                                            00275700
&ZOPN                 SETA &ZOPN+1                                      00275800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMISC_FLAGS'                      00275900
&ZOPO(&ZOPN)          SETC 'DS'                                         00276000
&ZOPV(&ZOPN)          SETC 'BL.16'                                      00276100
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00276200
.*                                                                      00276300
&ZOPN                 SETA  &ZOPN+1                                     00276400
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_REQDSUB'                 00276500
&ZOPO(&ZOPN)          SETC  'EQU'                                       00276600
&ZOPV(&ZOPN)          SETC  'B''1000000000000000'''                     00276700
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00276800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).REQDSUB'                      00276900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00277000
.*                                                                      00277100
&ZOPN                 SETA  &ZOPN+1                                     00277200
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_COMMAND'                 00277300
&ZOPO(&ZOPN)          SETC  'EQU'                                       00277400
&ZOPV(&ZOPN)          SETC  'B''0100000000000000'''                     00277500
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00277600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).COMMAND'                      00277700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00277800
.*                                                                      00277900
&ZOPN                 SETA  &ZOPN+1                                     00278000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_SUBDATA1'                00278100
&ZOPO(&ZOPN)          SETC  'EQU'                                       00278200
&ZOPV(&ZOPN)          SETC  'B''0010000000000000'''                     00278300
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00278400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SUBDATA1'                     00278500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00278600
.*                                                                      00278700
&ZOPN                 SETA  &ZOPN+1                                     00278800
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_SUBDATA2'                00278900
&ZOPO(&ZOPN)          SETC  'EQU'                                       00279000
&ZOPV(&ZOPN)          SETC  'B''0001000000000000'''                     00279100
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00279200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SUBDATA2'                     00279300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00279400
.*                                                                      00279500
&ZOPN                 SETA  &ZOPN+1                                     00279600
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQDSUB_MSTR'                   00279700
&ZOPO(&ZOPN)          SETC  'EQU'                                       00279800
&ZOPV(&ZOPN)          SETC  'B''0000001000000000'''                     00279900
&ZOPD(&ZOPN)          SETC  '++ XREQDSUB.'                              00280000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).MSTR'                         00280100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00280200
.*                                                                      00280300
&ZOPN                 SETA  &ZOPN+1                                     00280400
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XCOMMAND_YES'                    00280500
&ZOPO(&ZOPN)          SETC  'EQU'                                       00280600
&ZOPV(&ZOPN)          SETC  'B''0000000100000000'''                     00280700
&ZOPD(&ZOPN)          SETC  '++ XCOMMAND.'                              00280800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          00280900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00281000
.*-------------------------------------------------------------------   00281100
.***AM.L09  XCONSNAME CL8                                               00281200
&ZOPN                 SETA &ZOPN+1                                      00281300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCONSNAME'                        00281400
&ZOPO(&ZOPN)          SETC 'DS'                                         00281500
&ZOPV(&ZOPN)          SETC 'CL8'                                        00281600
&ZOPD(&ZOPN)          SETC '++ &ZXCONSNAME  XCONSNAME'                  00281700
.*-------------------------------------------------------------------   00281800
.***AM.L09  XINITRTN CL8                                                00281900
&ZOPN                 SETA &ZOPN+1                                      00282000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XINITRTN'                         00282100
&ZOPO(&ZOPN)          SETC 'DS'                                         00282200
&ZOPV(&ZOPN)          SETC 'CL8'                                        00282300
&ZOPD(&ZOPN)          SETC '++ &ZXINITRTN  XINITRTN'                    00282400
.*-------------------------------------------------------------------   00282500
.***AM.L09 ADDR XINITPARM A                                             00282600
&ZOPN                 SETA &ZOPN+1                                      00282700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XINITPARM_ADDR'                   00282800
&ZOPO(&ZOPN)          SETC 'DS'                                         00282900
&ZOPV(&ZOPN)          SETC 'A'                                          00283000
&ZOPD(&ZOPN)          SETC '++ &ZXINITPARM ADDR XINITPARM'              00283100
.*-------------------------------------------------------------------   00283200
.***AM.L09  XINITPLEN F                                                 00283300
&ZOPN                 SETA &ZOPN+1                                      00283400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XINITPLEN'                        00283500
&ZOPO(&ZOPN)          SETC 'DS'                                         00283600
&ZOPV(&ZOPN)          SETC 'F'                                          00283700
&ZOPD(&ZOPN)          SETC '++ &ZXINITPLEN  XINITPLEN'                  00283800
.*-------------------------------------------------------------------   00283900
.***AM.L09  XRSV0007 CL8                                                00284000
&ZOPN                 SETA &ZOPN+1                                      00284100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0007'                         00284200
&ZOPO(&ZOPN)          SETC 'DS'                                         00284300
&ZOPV(&ZOPN)          SETC 'CL8'                                        00284400
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0007'                      00284500
.*-------------------------------------------------------------------   00284600
.***AM.L09  XINTOKEN BL.32                                              00284700
&ZOPN                 SETA &ZOPN+1                                      00284800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XINTOKEN'                         00284900
&ZOPO(&ZOPN)          SETC 'DS'                                         00285000
&ZOPV(&ZOPN)          SETC 'BL.32'                                      00285100
&ZOPD(&ZOPN)          SETC '++ &ZXINTOKEN  XINTOKEN'                    00285200
.*-------------------------------------------------------------------   00285300
.***AM.L09  XWORKASP XL1                                                00285400
&ZOPN                 SETA &ZOPN+1                                      00285500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XWORKASP'                         00285600
&ZOPO(&ZOPN)          SETC 'DS'                                         00285700
&ZOPV(&ZOPN)          SETC 'XL1'                                        00285800
&ZOPD(&ZOPN)          SETC '++ &ZXWORKASP  XWORKASP'                    00285900
.*-------------------------------------------------------------------   00286000
.***AM.L09  XRSV0004 CL3                                                00286100
&ZOPN                 SETA &ZOPN+1                                      00286200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0004'                         00286300
&ZOPO(&ZOPN)          SETC 'DS'                                         00286400
&ZOPV(&ZOPN)          SETC 'CL3'                                        00286500
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0004'                      00286600
.*-------------------------------------------------------------------   00286700
.***AM.L09  XRSV0008 CL20                                               00286800
&ZOPN                 SETA &ZOPN+1                                      00286900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0008'                         00287000
&ZOPO(&ZOPN)          SETC 'DS'                                         00287100
&ZOPV(&ZOPN)          SETC 'CL20'                                       00287200
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0008'                      00287300
.*-------------------------------------------------------------------   00287400
.***AM.L09  XRSV0005 CL4                                                00287500
&ZOPN                 SETA &ZOPN+1                                      00287600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0005'                         00287700
&ZOPO(&ZOPN)          SETC 'DS'                                         00287800
&ZOPV(&ZOPN)          SETC 'CL4'                                        00287900
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0005'                      00288000
.*-------------------------------------------------------------------   00288100
.***AM.L09  XOUTTOKEN BL.32                                             00288200
&ZOPN                 SETA &ZOPN+1                                      00288300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XOUTTOKEN'                        00288400
&ZOPO(&ZOPN)          SETC 'DS'                                         00288500
&ZOPV(&ZOPN)          SETC 'BL.32'                                      00288600
&ZOPD(&ZOPN)          SETC '++ &ZXOUTTOKEN  XOUTTOKEN'                  00288700
.*-------------------------------------------------------------------   00288800
.***AM.L09  XWORKAREA A                                                 00288900
&ZOPN                 SETA &ZOPN+1                                      00289000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XWORKAREA'                        00289100
&ZOPO(&ZOPN)          SETC 'DS'                                         00289200
&ZOPV(&ZOPN)          SETC 'A'                                          00289300
&ZOPD(&ZOPN)          SETC '++ &ZXWORKAREA  XWORKAREA'                  00289400
.*-------------------------------------------------------------------   00289500
.***AM.L09  XSUBDATA1 CL4                                               00289600
&ZOPN                 SETA &ZOPN+1                                      00289700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSUBDATA1'                        00289800
&ZOPO(&ZOPN)          SETC 'DS'                                         00289900
&ZOPV(&ZOPN)          SETC 'CL4'                                        00290000
&ZOPD(&ZOPN)          SETC '++ &ZXSUBDATA1  XSUBDATA1'                  00290100
.*-------------------------------------------------------------------   00290200
.***AM.L09  XSUBDATA2 CL4                                               00290300
&ZOPN                 SETA &ZOPN+1                                      00290400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSUBDATA2'                        00290500
&ZOPO(&ZOPN)          SETC 'DS'                                         00290600
&ZOPV(&ZOPN)          SETC 'CL4'                                        00290700
&ZOPD(&ZOPN)          SETC '++ &ZXSUBDATA2  XSUBDATA2'                  00290800
.*-------------------------------------------------------------------   00290900
.***AM.L09  XRSV0006 CL4                                                00291000
&ZOPN                 SETA &ZOPN+1                                      00291100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0006'                         00291200
&ZOPO(&ZOPN)          SETC 'DS'                                         00291300
&ZOPV(&ZOPN)          SETC 'CL4'                                        00291400
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0006'                      00291500
.*-------------------------------------------------------------------   00291600
.***AM.L09  XPLISTPTR F                                                 00291700
&ZOPN                 SETA &ZOPN+1                                      00291800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTPTR'                        00291900
&ZOPO(&ZOPN)          SETC 'DS'                                         00292000
&ZOPV(&ZOPN)          SETC 'A'                                          00292100
&ZOPD(&ZOPN)          SETC '++ INPUT  XPLISTPTR'                        00292200
.*-------------------------------------------------------------------   00292300
.***AM.L10 END OF IEFSSI LIST PARAMETERS                                00292400
&ZOPN                 SETA &ZOPN+1                                      00292500
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00292600
&ZOPO(&ZOPN)          SETC 'EQU'                                        00292700
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00292800
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00292900
.*                                                                      00293000
&ZOPN                 SETA &ZOPN+1                                      00293100
&ZOPL(&ZOPN)          SETC ' '                                          00293200
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00293300
&ZOPV(&ZOPN)          SETC '1'                                          00293400
&ZOPD(&ZOPN)          SETC ' '                                          00293500
.*-------------------------------------------------------------------   00293600
.***AL.L12 IEFSSI FMT=LIST MF=S|L PARAMETERS                            00293700
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         00293800
.*                                                                      00293900
&ZOPN                 SETA  &ZOPN+1                                     00294000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                00294100
&ZOPO(&ZOPN)          SETC  'DC'                                        00294200
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   00294300
&ZOPD(&ZOPN)          SETC  '++ IEFSSI ARG PARMS'                       00294400
.*                                                                      00294500
.ZLMFSLX              ANOP  ,                                           00294600
.*-------------------------------------------------------------------   00294700
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00294800
&ZPLLEN               SETA 108                                          00294900
.*                                                                      00295000
.******************************************************************     00295100
.***AI.L01 IEFSSI FMT=LIST FILL IN PARAMETER AREA                       00295200
.******************************************************************     00295300
                      ACTR  10000                                       00295400
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00295500
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00295600
&ZCVAL                SETC  'LAE'          XAX MODE                     00295700
.ZIMFXA               ANOP ,                                            00295800
.*                                                                      00295900
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00296000
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00296100
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00296200
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00296300
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00296400
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00296500
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00296600
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00296700
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00296800
&ZOPN                 SETA  &ZOPN+1                                     00296900
&ZOPL(&ZOPN)          SETC  ' '                                         00297000
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00297100
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00297200
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00297300
                      AGO   .ZIMFNX                                     00297400
.*                                                                      00297500
.ZIMFN2               ANOP ,                                            00297600
&ZOPN                 SETA  &ZOPN+1                                     00297700
&ZOPL(&ZOPN)          SETC  ' '                                         00297800
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00297900
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00298000
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00298100
.ZIMFNX               ANOP ,                                            00298200
.********************************************************************   00298300
.***AI.L02 IEFSSI FMT=LIST INITIALIZE PARAMETER AREA                    00298400
.********************************************************************   00298500
.***AI.L03 MF=(SLE)                                                     00298600
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00298700
.*                                                                      00298800
&ZOPN                 SETA  &ZOPN+1                                     00298900
&ZOPL(&ZOPN)          SETC  ' '                                         00299000
&ZOPO(&ZOPN)          SETC  'XC'                                        00299100
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00299200
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00299300
.ZIMFLX               ANOP  ,                                           00299400
.*-------------------------------------------------------------------   00299500
.***AI.L60 XSSI_PLIST_ID CL4                                            00299600
&ZOPN                 SETA  &ZOPN+1                                     00299700
&ZOPL(&ZOPN)          SETC  ' '                                         00299800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00299900
&ZOPV(&ZOPN)          SETC  '0(4,1),=CL4''SIPL'''                       00300000
&ZOPD(&ZOPN)          SETC  '++ CL4 CONSTANT'                           00300100
.*-------------------------------------------------------------------   00300200
.***AI.L04 XPLISTLEN XL2                                                00300300
&ZOPN                 SETA  &ZOPN+1                                     00300400
&ZOPL(&ZOPN)          SETC  ' '                                         00300500
&ZOPO(&ZOPN)          SETC  'MVC'                                       00300600
&ZOPV(&ZOPN)          SETC  '4(2,1),=AL2(&ZPLLEN)'                      00300700
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'                    00300800
.*-------------------------------------------------------------------   00300900
.***AI.L04B XVERSION XL1                                                00301000
                      AIF   (&XPLISTVER EQ 0).ZIMFVX                    00301100
&ZOPN                 SETA  &ZOPN+1                                     00301200
&ZOPL(&ZOPN)          SETC  ' '                                         00301300
&ZOPO(&ZOPN)          SETC  'MVI'                                       00301400
&ZOPV(&ZOPN)          SETC  '6(1),&XPLISTVER'                           00301500
&ZOPD(&ZOPN)          SETC  '++ INPUT XVERSION XL1'                     00301600
.ZIMFVX               ANOP  ,                                           00301700
.*-------------------------------------------------------------------   00301800
.***AI.L25  XSUBNAME CL4                                                00301900
                      AIF   ('&ZXSUBNAME' EQ '').ZI5E  NOT USED         00302000
                      AIF   ('&ZXSUBNAME' EQ 'OUTPUT').ZI5E             00302100
&ZCGPR                SETC  '&XSUBNAME'                                 00302200
.*                                                                      00302300
                      AIF   ('&XSUBNAME'(1,1) NE '(').ZI5B              00302400
&ZCGPR   SETC  '0('.'&XSUBNAME'(2,K'&XSUBNAME-2).')'                    00302500
.ZI5B                 ANOP  ,                                           00302600
.*                                                                      00302700
&ZOPN                 SETA  &ZOPN+1                                     00302800
&ZOPL(&ZOPN)          SETC  ' '                                         00302900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00303000
&ZOPV(&ZOPN)          SETC  '8(4,1),&ZCGPR'                             00303100
&ZOPD(&ZOPN)          SETC  '++ &ZXSUBNAME XSUBNAME CL4'                00303200
.*                                                                      00303300
.ZI5E                 ANOP  ,                                           00303400
.*-------------------------------------------------------------------   00303500
.***AI.L05 XREQUEST_TYPE BL2                                            00303600
&ZW                   SETC  ''                                          00303700
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00303800
.*-------------------------------------------------------------------   00303900
.***AI.L08 XREQUEST_TYPE "ADD"                                          00304000
.***      BL2'1XXXXXXXXXXXXXXX'                                         00304100
         AIF   ('&XREQUEST' NE 'ADD').ZI8A                              00304200
&ZW                   SETC  '&ZW.1'                                     00304300
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00304400
                      AGO   .ZI8C                                       00304500
.*                                                                      00304600
.ZI8A                 ANOP  ,                                           00304700
&ZW                   SETC  '&ZW.0'                                     00304800
.ZI8C                 ANOP  ,                                           00304900
.*-------------------------------------------------------------------   00305000
.***AI.L08 XREQUEST_TYPE "ACTIVATE"                                     00305100
.***      BL2'X1XXXXXXXXXXXXXX'                                         00305200
         AIF   ('&XREQUEST' NE 'ACTIVATE').ZI9A                         00305300
&ZW                   SETC  '&ZW.1'                                     00305400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00305500
                      AGO   .ZI9C                                       00305600
.*                                                                      00305700
.ZI9A                 ANOP  ,                                           00305800
&ZW                   SETC  '&ZW.0'                                     00305900
.ZI9C                 ANOP  ,                                           00306000
.*-------------------------------------------------------------------   00306100
.***AI.L08 XREQUEST_TYPE "DEACTIVATE"                                   00306200
.***      BL2'XX1XXXXXXXXXXXXX'                                         00306300
         AIF   ('&XREQUEST' NE 'DEACTIVATE').ZI10A                      00306400
&ZW                   SETC  '&ZW.1'                                     00306500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00306600
                      AGO   .ZI10C                                      00306700
.*                                                                      00306800
.ZI10A                ANOP  ,                                           00306900
&ZW                   SETC  '&ZW.0'                                     00307000
.ZI10C                ANOP  ,                                           00307100
.*-------------------------------------------------------------------   00307200
.***AI.L08 XREQUEST_TYPE "SWAP"                                         00307300
.***      BL2'XXXX1XXXXXXXXXXX'                                         00307400
         AIF   ('&XREQUEST' NE 'SWAP').ZI11A                            00307500
&ZW                   SETC  '&ZW.01'                                    00307600
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00307700
                      AGO   .ZI11C                                      00307800
.*                                                                      00307900
.ZI11A                ANOP  ,                                           00308000
&ZW                   SETC  '&ZW.00'                                    00308100
.ZI11C                ANOP  ,                                           00308200
.*-------------------------------------------------------------------   00308300
.***AI.L08 XREQUEST_TYPE "OPTIONS"                                      00308400
.***      BL2'XXXXX1XXXXXXXXXX'                                         00308500
         AIF   ('&XREQUEST' NE 'OPTIONS').ZI12A                         00308600
&ZW                   SETC  '&ZW.1'                                     00308700
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00308800
                      AGO   .ZI12C                                      00308900
.*                                                                      00309000
.ZI12A                ANOP  ,                                           00309100
&ZW                   SETC  '&ZW.0'                                     00309200
.ZI12C                ANOP  ,                                           00309300
.*-------------------------------------------------------------------   00309400
.***AI.L08 XREQUEST_TYPE "PUT"                                          00309500
.***      BL2'XXXXXX1XXXXXXXXX'                                         00309600
         AIF   ('&XREQUEST' NE 'PUT').ZI13A                             00309700
&ZW                   SETC  '&ZW.1'                                     00309800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00309900
                      AGO   .ZI13C                                      00310000
.*                                                                      00310100
.ZI13A                ANOP  ,                                           00310200
&ZW                   SETC  '&ZW.0'                                     00310300
.ZI13C                ANOP  ,                                           00310400
.*-------------------------------------------------------------------   00310500
.***AI.L08 XREQUEST_TYPE "GET"                                          00310600
.***      BL2'XXXXXXX1XXXXXXXX'                                         00310700
         AIF   ('&XREQUEST' NE 'GET').ZI14A                             00310800
&ZW                   SETC  '&ZW.1'                                     00310900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00311000
                      AGO   .ZI14C                                      00311100
.*                                                                      00311200
.ZI14A                ANOP  ,                                           00311300
&ZW                   SETC  '&ZW.0'                                     00311400
.ZI14C                ANOP  ,                                           00311500
.*-------------------------------------------------------------------   00311600
.***AI.L08 XREQUEST_TYPE "QUERY"                                        00311700
.***      BL2'XXXXXXXX1XXXXXXX'                                         00311800
         AIF   ('&XREQUEST' NE 'QUERY').ZI15A                           00311900
&ZW                   SETC  '&ZW.10000000'                              00312000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00312100
                      AGO   .ZI15C                                      00312200
.*                                                                      00312300
.ZI15A                ANOP  ,                                           00312400
&ZW                   SETC  '&ZW.00000000'                              00312500
.ZI15C                ANOP  ,                                           00312600
.*-------------------------------------------------------------------   00312700
.***AI.L10 XREQUEST_TYPE BL2                                            00312800
                      AIF   ('&ZCLNG' NE 'YES').ZI15E  ALL ZERO BITS    00312900
&ZOPN                 SETA  &ZOPN+1                                     00313000
&ZOPL(&ZOPN)          SETC  ' '                                         00313100
&ZOPO(&ZOPN)          SETC  'OC'                                        00313200
&ZOPV(&ZOPN)          SETC  '16(2,1),=BL2''&ZW'''                       00313300
&ZOPD(&ZOPN)          SETC  '++ INPUT BL2'                              00313400
.ZI15E                ANOP  ,                                           00313500
.*-------------------------------------------------------------------   00313600
.***AI.L05 XMISC_FLAGS BL2                                              00313700
&ZW                   SETC  ''                                          00313800
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00313900
.*-------------------------------------------------------------------   00314000
.***AI.L08 XMISC_FLAGS "REQDSUB"                                        00314100
.***      BL2'1XXXXXXXXXXXXXXX'                                         00314200
         AIF   ('&REQDSUB' EQ '').ZI17A                                 00314300
&ZW                   SETC  '&ZW.1'                                     00314400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00314500
                      AGO   .ZI17C                                      00314600
.*                                                                      00314700
.ZI17A                ANOP  ,                                           00314800
&ZW                   SETC  '&ZW.0'                                     00314900
.ZI17C                ANOP  ,                                           00315000
.*-------------------------------------------------------------------   00315100
.***AI.L08 XMISC_FLAGS "COMMAND"                                        00315200
.***      BL2'X1XXXXXXXXXXXXXX'                                         00315300
         AIF   ('&COMMAND' EQ '').ZI18A                                 00315400
&ZW                   SETC  '&ZW.1'                                     00315500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00315600
                      AGO   .ZI18C                                      00315700
.*                                                                      00315800
.ZI18A                ANOP  ,                                           00315900
&ZW                   SETC  '&ZW.0'                                     00316000
.ZI18C                ANOP  ,                                           00316100
.*-------------------------------------------------------------------   00316200
.***AI.L08 XMISC_FLAGS "SUBDATA1"                                       00316300
.***      BL2'XX1XXXXXXXXXXXXX'                                         00316400
         AIF   ('&SUBDATA1' EQ '').ZI19A                                00316500
&ZW                   SETC  '&ZW.1'                                     00316600
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00316700
                      AGO   .ZI19C                                      00316800
.*                                                                      00316900
.ZI19A                ANOP  ,                                           00317000
&ZW                   SETC  '&ZW.0'                                     00317100
.ZI19C                ANOP  ,                                           00317200
.*-------------------------------------------------------------------   00317300
.***AI.L08 XMISC_FLAGS "SUBDATA2"                                       00317400
.***      BL2'XXX1XXXXXXXXXXXX'                                         00317500
         AIF   ('&SUBDATA2' EQ '').ZI20A                                00317600
&ZW                   SETC  '&ZW.1'                                     00317700
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00317800
                      AGO   .ZI20C                                      00317900
.*                                                                      00318000
.ZI20A                ANOP  ,                                           00318100
&ZW                   SETC  '&ZW.0'                                     00318200
.ZI20C                ANOP  ,                                           00318300
.*-------------------------------------------------------------------   00318400
.***AI.L08 XMISC_FLAGS "MSTR"                                           00318500
.***      BL2'XXXXXX1XXXXXXXXX'                                         00318600
         AIF   ('&XREQDSUB' NE 'MSTR').ZI21A                            00318700
&ZW                   SETC  '&ZW.001'                                   00318800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00318900
                      AGO   .ZI21C                                      00319000
.*                                                                      00319100
.ZI21A                ANOP  ,                                           00319200
&ZW                   SETC  '&ZW.000'                                   00319300
.ZI21C                ANOP  ,                                           00319400
.*-------------------------------------------------------------------   00319500
.***AI.L08 XMISC_FLAGS "YES"                                            00319600
.***      BL2'XXXXXXX1XXXXXXXX'                                         00319700
         AIF   ('&XCOMMAND' NE 'YES').ZI22A                             00319800
&ZW                   SETC  '&ZW.100000000'                             00319900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00320000
                      AGO   .ZI22C                                      00320100
.*                                                                      00320200
.ZI22A                ANOP  ,                                           00320300
&ZW                   SETC  '&ZW.000000000'                             00320400
.ZI22C                ANOP  ,                                           00320500
.*-------------------------------------------------------------------   00320600
.***AI.L10 XMISC_FLAGS BL2                                              00320700
                      AIF   ('&ZCLNG' NE 'YES').ZI22E  ALL ZERO BITS    00320800
&ZOPN                 SETA  &ZOPN+1                                     00320900
&ZOPL(&ZOPN)          SETC  ' '                                         00321000
&ZOPO(&ZOPN)          SETC  'OC'                                        00321100
&ZOPV(&ZOPN)          SETC  '18(2,1),=BL2''&ZW'''                       00321200
&ZOPD(&ZOPN)          SETC  '++ INPUT BL2'                              00321300
.ZI22E                ANOP  ,                                           00321400
.*-------------------------------------------------------------------   00321500
.***AI.L25  XCONSNAME CL8                                               00321600
                      AIF   ('&ZXCONSNAME' EQ '').ZI23E  NOT USED       00321700
                      AIF   ('&ZXCONSNAME' EQ 'OUTPUT').ZI23E           00321800
&ZCGPR                SETC  '&XCONSNAME'                                00321900
                      AIF   ('&XCONSNAME' EQ '0').ZI23E                 00322000
.*                                                                      00322100
                      AIF   ('&XCONSNAME'(1,1) NE '(').ZI23B            00322200
&ZCGPR   SETC  '0('.'&XCONSNAME'(2,K'&XCONSNAME-2).')'                  00322300
                      AGO   .ZI23D                                      00322400
.ZI23B                ANOP  ,                                           00322500
.*                                                                      00322600
                      AIF   ('&CONSNAME(1)' EQ '').ZI23I  OMITTED       00322700
&ZC                   SETC  '0'                                         00322800
                      AIF   ('&XCONSNAME' NE '&ZC').ZI23C               00322900
.ZI23I                ANOP  ,                                           00323000
&ZCGPR                SETC  '=CL8''&XCONSNAME'''                        00323100
.ZI23C                ANOP  ,                                           00323200
.*                                                                      00323300
.ZI23D                ANOP  ,                                           00323400
.*                                                                      00323500
&ZOPN                 SETA  &ZOPN+1                                     00323600
&ZOPL(&ZOPN)          SETC  ' '                                         00323700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00323800
&ZOPV(&ZOPN)          SETC  '20(8,1),&ZCGPR'                            00323900
&ZOPD(&ZOPN)          SETC  '++ &ZXCONSNAME XCONSNAME CL8'              00324000
.*                                                                      00324100
.ZI23E                ANOP  ,                                           00324200
.*-------------------------------------------------------------------   00324300
.***AI.L18  XINITRTN CL8                                                00324400
                      AIF   ('&XINITRTN' NE 'NO_INITRTN').ZI24          00324500
&ZXINITRTN            SETC  ''             RESET INPUT/OUTPUT           00324600
.ZI24                 ANOP  ,                                           00324700
.*-------------------------------------------------------------------   00324800
.***AI.L25  XINITRTN CL8                                                00324900
                      AIF   ('&ZXINITRTN' EQ '').ZI24E  NOT USED        00325000
                      AIF   ('&ZXINITRTN' EQ 'OUTPUT').ZI24E            00325100
&ZCGPR                SETC  '&XINITRTN'                                 00325200
.*                                                                      00325300
                      AIF   ('&XINITRTN'(1,1) NE '(').ZI24B             00325400
&ZCGPR   SETC  '0('.'&XINITRTN'(2,K'&XINITRTN-2).')'                    00325500
.ZI24B                ANOP  ,                                           00325600
.*                                                                      00325700
&ZOPN                 SETA  &ZOPN+1                                     00325800
&ZOPL(&ZOPN)          SETC  ' '                                         00325900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00326000
&ZOPV(&ZOPN)          SETC  '28(8,1),&ZCGPR'                            00326100
&ZOPD(&ZOPN)          SETC  '++ &ZXINITRTN XINITRTN CL8'                00326200
.*                                                                      00326300
.ZI24E                ANOP  ,                                           00326400
.*-------------------------------------------------------------------   00326500
.***AI.L18 ADDR XINITPARM A                                             00326600
                      AIF   ('&XINITPARM' NE 'NO_INITPARM').ZI25        00326700
&ZXINITPARM           SETC  ''             RESET INPUT/OUTPUT           00326800
.ZI25                 ANOP  ,                                           00326900
.*-------------------------------------------------------------------   00327000
.***AI.L19 ADDR XINITPARM A                                             00327100
                      AIF   ('&ZXINITPARM' EQ '').ZI25H  NOT USED       00327200
&ZCLNG                SETC  '&XINITPARM'                                00327300
&ZCGPR                SETC  '14'                                        00327400
         AIF   ('&XINITPARM'(1,1) EQ '(').ZI25F  IN GPR                 00327500
.*                                                                      00327600
&ZOPN                 SETA  &ZOPN+1                                     00327700
&ZOPL(&ZOPN)          SETC  ' '                                         00327800
&ZOPO(&ZOPN)          SETC  'LA'                                        00327900
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00328000
&ZOPD(&ZOPN)          SETC  '++ &ZXINITPARM XINITPARM A'                00328100
.*                                                                      00328200
                      AGO   .ZI25G                                      00328300
.*                                                                      00328400
.ZI25F                ANOP  ,                                           00328500
&ZCGPR   SETC  '&XINITPARM'(2,K'&XINITPARM-2)                           00328600
.*                                                                      00328700
.ZI25G                ANOP  ,                                           00328800
.*                                                                      00328900
&ZOPN                 SETA  &ZOPN+1                                     00329000
&ZOPL(&ZOPN)          SETC  ' '                                         00329100
&ZOPO(&ZOPN)          SETC  'ST'                                        00329200
&ZOPV(&ZOPN)          SETC  '&ZCGPR,36(,1)'                             00329300
&ZOPD(&ZOPN)          SETC  '++ &ZXINITPARM XINITPARM A'                00329400
.*                                                                      00329500
.ZI25H                ANOP  ,                                           00329600
.*-------------------------------------------------------------------   00329700
.***AI.L25  XINITPLEN F                                                 00329800
                      AIF   ('&ZXINITPLEN' EQ '').ZI26E  NOT USED       00329900
                      AIF   ('&ZXINITPLEN' EQ 'OUTPUT').ZI26E           00330000
&ZCGPR                SETC  '&XINITPLEN'                                00330100
.*                                                                      00330200
                      AIF   ('&XINITPLEN'(1,1) NE '(').ZI26B            00330300
&ZCGPR   SETC  '0('.'&XINITPLEN'(2,K'&XINITPLEN-2).')'                  00330400
                      AGO   .ZI26D                                      00330500
.ZI26B                ANOP  ,                                           00330600
.*                                                                      00330700
&ZC                   SETC  '&XINITPLEN'(1,1)                           00330800
                      AIF   (T'&ZC NE 'N').ZI26D                        00330900
&ZC                   SETC  '&XINITPLEN'                                00331000
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI26D               00331100
&ZCGPR                SETC  '=FL4''&XINITPLEN'''                        00331200
.*                                                                      00331300
.ZI26D                ANOP  ,                                           00331400
.*                                                                      00331500
&ZOPN                 SETA  &ZOPN+1                                     00331600
&ZOPL(&ZOPN)          SETC  ' '                                         00331700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00331800
&ZOPV(&ZOPN)          SETC  '40(4,1),&ZCGPR'                            00331900
&ZOPD(&ZOPN)          SETC  '++ &ZXINITPLEN XINITPLEN F'                00332000
.*                                                                      00332100
.ZI26E                ANOP  ,                                           00332200
.*-------------------------------------------------------------------   00332300
.***AI.L18  XINTOKEN XL4                                                00332400
                      AIF   ('&XINTOKEN' NE 'NO_INPUT_TOKEN').ZI28      00332500
&ZXINTOKEN            SETC  ''             RESET INPUT/OUTPUT           00332600
.ZI28                 ANOP  ,                                           00332700
.*-------------------------------------------------------------------   00332800
.***AI.L25  XINTOKEN XL4                                                00332900
                      AIF   ('&ZXINTOKEN' EQ '').ZI28E  NOT USED        00333000
                      AIF   ('&ZXINTOKEN' EQ 'OUTPUT').ZI28E            00333100
&ZCGPR                SETC  '&XINTOKEN'                                 00333200
.*                                                                      00333300
                      AIF   ('&XINTOKEN'(1,1) NE '(').ZI28B             00333400
&ZCGPR   SETC  '0('.'&XINTOKEN'(2,K'&XINTOKEN-2).')'                    00333500
                      AGO   .ZI28D                                      00333600
.ZI28B                ANOP  ,                                           00333700
.*                                                                      00333800
&ZC                   SETC  '&XINTOKEN'(1,1)                            00333900
                      AIF   (T'&ZC NE 'N').ZI28D                        00334000
&ZC                   SETC  '&XINTOKEN'                                 00334100
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI28D               00334200
&ZCGPR                SETC  '=BL4''&XINTOKEN'''                         00334300
.*                                                                      00334400
.ZI28D                ANOP  ,                                           00334500
.*                                                                      00334600
&ZOPN                 SETA  &ZOPN+1                                     00334700
&ZOPL(&ZOPN)          SETC  ' '                                         00334800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00334900
&ZOPV(&ZOPN)          SETC  '52(4,1),&ZCGPR'                            00335000
&ZOPD(&ZOPN)          SETC  '++ &ZXINTOKEN XINTOKEN XL4'                00335100
.*                                                                      00335200
.ZI28E                ANOP  ,                                           00335300
.*-------------------------------------------------------------------   00335400
.***AI.L25  XWORKASP XL1                                                00335500
                      AIF   ('&ZXWORKASP' EQ '').ZI29E  NOT USED        00335600
                      AIF   ('&ZXWORKASP' EQ 'OUTPUT').ZI29E            00335700
&ZCGPR                SETC  '&XWORKASP'                                 00335800
                      AIF   ('&XWORKASP' EQ '0').ZI29E                  00335900
.*                                                                      00336000
                      AIF   ('&XWORKASP'(1,1) NE '(').ZI29B             00336100
&ZCGPR   SETC  '0('.'&XWORKASP'(2,K'&XWORKASP-2).')'                    00336200
                      AGO   .ZI29D                                      00336300
.ZI29B                ANOP  ,                                           00336400
.*                                                                      00336500
&ZC                   SETC  '&XWORKASP'(1,1)                            00336600
                      AIF   (T'&ZC NE 'N').ZI29D                        00336700
&ZC                   SETC  '&XWORKASP'                                 00336800
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI29D               00336900
&ZCGPR                SETC  '=AL1(&XWORKASP)'                           00337000
.*                                                                      00337100
.ZI29D                ANOP  ,                                           00337200
.*                                                                      00337300
&ZOPN                 SETA  &ZOPN+1                                     00337400
&ZOPL(&ZOPN)          SETC  ' '                                         00337500
&ZOPO(&ZOPN)          SETC  'MVC'                                       00337600
&ZOPV(&ZOPN)          SETC  '56(1,1),&ZCGPR'                            00337700
&ZOPD(&ZOPN)          SETC  '++ &ZXWORKASP XWORKASP XL1'                00337800
.*                                                                      00337900
.ZI29E                ANOP  ,                                           00338000
.*-------------------------------------------------------------------   00338100
.***AI.L25  XSUBDATA1 CL4                                               00338200
                      AIF   ('&ZXSUBDATA1' EQ '').ZI35E  NOT USED       00338300
                      AIF   ('&ZXSUBDATA1' EQ 'OUTPUT').ZI35E           00338400
&ZCGPR                SETC  '&XSUBDATA1'                                00338500
.*                                                                      00338600
                      AIF   ('&XSUBDATA1'(1,1) NE '(').ZI35B            00338700
&ZCGPR   SETC  '0('.'&XSUBDATA1'(2,K'&XSUBDATA1-2).')'                  00338800
.ZI35B                ANOP  ,                                           00338900
.*                                                                      00339000
&ZOPN                 SETA  &ZOPN+1                                     00339100
&ZOPL(&ZOPN)          SETC  ' '                                         00339200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00339300
&ZOPV(&ZOPN)          SETC  '92(4,1),&ZCGPR'                            00339400
&ZOPD(&ZOPN)          SETC  '++ &ZXSUBDATA1 XSUBDATA1 CL4'              00339500
.*                                                                      00339600
.ZI35E                ANOP  ,                                           00339700
.*-------------------------------------------------------------------   00339800
.***AI.L25  XSUBDATA2 CL4                                               00339900
                      AIF   ('&ZXSUBDATA2' EQ '').ZI36E  NOT USED       00340000
                      AIF   ('&ZXSUBDATA2' EQ 'OUTPUT').ZI36E           00340100
&ZCGPR                SETC  '&XSUBDATA2'                                00340200
.*                                                                      00340300
                      AIF   ('&XSUBDATA2'(1,1) NE '(').ZI36B            00340400
&ZCGPR   SETC  '0('.'&XSUBDATA2'(2,K'&XSUBDATA2-2).')'                  00340500
.ZI36B                ANOP  ,                                           00340600
.*                                                                      00340700
&ZOPN                 SETA  &ZOPN+1                                     00340800
&ZOPL(&ZOPN)          SETC  ' '                                         00340900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00341000
&ZOPV(&ZOPN)          SETC  '96(4,1),&ZCGPR'                            00341100
&ZOPD(&ZOPN)          SETC  '++ &ZXSUBDATA2 XSUBDATA2 CL4'              00341200
.*                                                                      00341300
.ZI36E                ANOP  ,                                           00341400
.*-------------------------------------------------------------------   00341500
.***AI.C01 RESTORE ADDR OF PARM LIST PTR                                00341600
.*                                                                      00341700
&ZOPN                 SETA  &ZOPN+1                                     00341800
&ZOPL(&ZOPN)          SETC  ' '                                         00341900
&ZOPO(&ZOPN)          SETC  'ST'                                        00342000
&ZOPV(&ZOPN)          SETC  '1,104(,1)'                                 00342100
&ZOPD(&ZOPN)          SETC  '++ STORE ADDR OF PARM LIST'                00342200
.*                                                                      00342300
&ZOPN                 SETA  &ZOPN+1                                     00342400
&ZOPL(&ZOPN)          SETC  ' '                                         00342500
&ZOPO(&ZOPN)          SETC  'LA'                                        00342600
&ZOPV(&ZOPN)          SETC  '1,104(,1)'                                 00342700
&ZOPD(&ZOPN)          SETC  '++ LOAD ADDR OF PARM LIST PTR INTO R1'     00342800
.*-------------------------------------------------------------------   00342900
&ZOPN1                SETA &ZOPN                                        00343000
.*******************************************************************    00343100
.***  PROCESS IEFSSI OUTPUT PARAMETERS                                  00343200
.*******************************************************************    00343300
                      ACTR  10000                                       00343400
.OUTKEYSP             ANOP  ,                                           00343500
.*                                                                      00343600
&ZOPN                 SETA  &ZOPN+1                                     00343700
&ZOPL(&ZOPN)          SETC  ' '                                         00343800
&ZOPO(&ZOPN)          SETC  'L'                                         00343900
&ZOPV(&ZOPN)          SETC  '1,0(,1)'                                   00344000
&ZOPD(&ZOPN)          SETC  '++ RESTORE ADDR OF PARM LIST'              00344100
.*                                                                      00344200
.NOOUTKEY             ANOP  ,                                           00344300
.*------------------------------------------------------------------    00344400
.***AO.LVER01                                                           00344500
                      AIF  (&XPLISTVER LT 1).ZO33Z  PLVER               00344600
.*------------------------------------------------------------------    00344700
.***AO.L02 XOUTTOKEN XL4                                                00344800
         AIF   ('&ZXOUTTOKEN' EQ 'OUTPUT').ZO33A  OUTPUT                00344900
         AIF   ('&ZXOUTTOKEN' NE 'INOUT').ZO33C  INOUT                  00345000
.ZO33A    AIF   ('&XOUTTOKEN'(1,1) NE '(').ZO33B  ADDR IN GPR           00345100
&ZCGPR   SETC  '&XOUTTOKEN'(2,K'&XOUTTOKEN-2)                           00345200
&ZOPN                 SETA  &ZOPN+1                                     00345300
&ZOPL(&ZOPN)          SETC  ' '                                         00345400
&ZOPO(&ZOPN)          SETC  'MVC'                                       00345500
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),84(1)'                         00345600
&ZOPD(&ZOPN)          SETC  '++ XOUTTOKEN XL4'                          00345700
                      AGO   .ZO33C                                      00345800
.*                                                                      00345900
.ZO33B                ANOP  ,                                           00346000
&ZAWRK   SETA  K'&XOUTTOKEN                                             00346100
         AIF   ('&XOUTTOKEN'(&ZAWRK,1) NE ')').ZO33G                    00346200
&ZN      SETA  2                                                        00346300
.ZO33H    ANOP                                                          00346400
         AIF   (&ZN GE &ZAWRK).ZO33G                                    00346500
         AIF   ('&XOUTTOKEN'(&ZN,1) NE '(').ZO33I                       00346600
&ZC      SETC  '&XOUTTOKEN'(1,&ZN).'4'.','                              00346700
&ZC      SETC  '&ZC'.'&XOUTTOKEN'(&ZN+1,&ZAWRK-&ZN).',84(1)'            00346800
         AGO   .ZO33J                                                   00346900
.ZO33I    ANOP                                                          00347000
&ZN      SETA  &ZN+1                                                    00347100
         AGO   .ZO33H                                                   00347200
.ZO33G    ANOP                                                          00347300
&ZC      SETC  '&XOUTTOKEN.(4),84(1)'                                   00347400
.ZO33J    ANOP                                                          00347500
&ZOPN                 SETA  &ZOPN+1                                     00347600
&ZOPL(&ZOPN)          SETC  ' '                                         00347700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00347800
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00347900
&ZOPD(&ZOPN)          SETC  '++ XOUTTOKEN XL4'                          00348000
.ZO33C                ANOP  ,                                           00348100
.*------------------------------------------------------------------    00348200
.***AO.LVER02                                                           00348300
.ZO33Z                ANOP  ,                                           00348400
.*------------------------------------------------------------------    00348500
.***AO.LVER01                                                           00348600
                      AIF  (&XPLISTVER LT 1).ZO34Z  PLVER               00348700
.*------------------------------------------------------------------    00348800
.***AO.L02 XWORKAREA A                                                  00348900
         AIF   ('&ZXWORKAREA' EQ 'OUTPUT').ZO34A  OUTPUT                00349000
         AIF   ('&ZXWORKAREA' NE 'INOUT').ZO34C  INOUT                  00349100
.ZO34A    AIF   ('&XWORKAREA'(1,1) NE '(').ZO34B  ADDR IN GPR           00349200
&ZCGPR   SETC  '&XWORKAREA'(2,K'&XWORKAREA-2)                           00349300
&ZOPN                 SETA  &ZOPN+1                                     00349400
&ZOPL(&ZOPN)          SETC  ' '                                         00349500
&ZOPO(&ZOPN)          SETC  'MVC'                                       00349600
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),88(1)'                         00349700
&ZOPD(&ZOPN)          SETC  '++ XWORKAREA A'                            00349800
                      AGO   .ZO34C                                      00349900
.*                                                                      00350000
.ZO34B                ANOP  ,                                           00350100
&ZAWRK   SETA  K'&XWORKAREA                                             00350200
         AIF   ('&XWORKAREA'(&ZAWRK,1) NE ')').ZO34G                    00350300
&ZN      SETA  2                                                        00350400
.ZO34H    ANOP                                                          00350500
         AIF   (&ZN GE &ZAWRK).ZO34G                                    00350600
         AIF   ('&XWORKAREA'(&ZN,1) NE '(').ZO34I                       00350700
&ZC      SETC  '&XWORKAREA'(1,&ZN).'4'.','                              00350800
&ZC      SETC  '&ZC'.'&XWORKAREA'(&ZN+1,&ZAWRK-&ZN).',88(1)'            00350900
         AGO   .ZO34J                                                   00351000
.ZO34I    ANOP                                                          00351100
&ZN      SETA  &ZN+1                                                    00351200
         AGO   .ZO34H                                                   00351300
.ZO34G    ANOP                                                          00351400
&ZC      SETC  '&XWORKAREA.(4),88(1)'                                   00351500
.ZO34J    ANOP                                                          00351600
&ZOPN                 SETA  &ZOPN+1                                     00351700
&ZOPL(&ZOPN)          SETC  ' '                                         00351800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00351900
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00352000
&ZOPD(&ZOPN)          SETC  '++ XWORKAREA A'                            00352100
.ZO34C                ANOP  ,                                           00352200
.*------------------------------------------------------------------    00352300
.***AO.LVER02                                                           00352400
.ZO34Z                ANOP  ,                                           00352500
.*------------------------------------------------------------------    00352600
.***AO.LVER01                                                           00352700
                      AIF  (&XPLISTVER LT 1).ZO35Z  PLVER               00352800
.*------------------------------------------------------------------    00352900
.***AO.L02 XSUBDATA1 CL4                                                00353000
         AIF   ('&ZXSUBDATA1' EQ 'OUTPUT').ZO35A  OUTPUT                00353100
         AIF   ('&ZXSUBDATA1' NE 'INOUT').ZO35C  INOUT                  00353200
.ZO35A    AIF   ('&XSUBDATA1'(1,1) NE '(').ZO35B  ADDR IN GPR           00353300
&ZCGPR   SETC  '&XSUBDATA1'(2,K'&XSUBDATA1-2)                           00353400
&ZOPN                 SETA  &ZOPN+1                                     00353500
&ZOPL(&ZOPN)          SETC  ' '                                         00353600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00353700
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),92(1)'                         00353800
&ZOPD(&ZOPN)          SETC  '++ XSUBDATA1 CL4'                          00353900
                      AGO   .ZO35C                                      00354000
.*                                                                      00354100
.ZO35B                ANOP  ,                                           00354200
&ZAWRK   SETA  K'&XSUBDATA1                                             00354300
         AIF   ('&XSUBDATA1'(&ZAWRK,1) NE ')').ZO35G                    00354400
&ZN      SETA  2                                                        00354500
.ZO35H    ANOP                                                          00354600
         AIF   (&ZN GE &ZAWRK).ZO35G                                    00354700
         AIF   ('&XSUBDATA1'(&ZN,1) NE '(').ZO35I                       00354800
&ZC      SETC  '&XSUBDATA1'(1,&ZN).'4'.','                              00354900
&ZC      SETC  '&ZC'.'&XSUBDATA1'(&ZN+1,&ZAWRK-&ZN).',92(1)'            00355000
         AGO   .ZO35J                                                   00355100
.ZO35I    ANOP                                                          00355200
&ZN      SETA  &ZN+1                                                    00355300
         AGO   .ZO35H                                                   00355400
.ZO35G    ANOP                                                          00355500
&ZC      SETC  '&XSUBDATA1.(4),92(1)'                                   00355600
.ZO35J    ANOP                                                          00355700
&ZOPN                 SETA  &ZOPN+1                                     00355800
&ZOPL(&ZOPN)          SETC  ' '                                         00355900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00356000
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00356100
&ZOPD(&ZOPN)          SETC  '++ XSUBDATA1 CL4'                          00356200
.ZO35C                ANOP  ,                                           00356300
.*------------------------------------------------------------------    00356400
.***AO.LVER02                                                           00356500
.ZO35Z                ANOP  ,                                           00356600
.*------------------------------------------------------------------    00356700
.***AO.LVER01                                                           00356800
                      AIF  (&XPLISTVER LT 1).ZO36Z  PLVER               00356900
.*------------------------------------------------------------------    00357000
.***AO.L02 XSUBDATA2 CL4                                                00357100
         AIF   ('&ZXSUBDATA2' EQ 'OUTPUT').ZO36A  OUTPUT                00357200
         AIF   ('&ZXSUBDATA2' NE 'INOUT').ZO36C  INOUT                  00357300
.ZO36A    AIF   ('&XSUBDATA2'(1,1) NE '(').ZO36B  ADDR IN GPR           00357400
&ZCGPR   SETC  '&XSUBDATA2'(2,K'&XSUBDATA2-2)                           00357500
&ZOPN                 SETA  &ZOPN+1                                     00357600
&ZOPL(&ZOPN)          SETC  ' '                                         00357700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00357800
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),96(1)'                         00357900
&ZOPD(&ZOPN)          SETC  '++ XSUBDATA2 CL4'                          00358000
                      AGO   .ZO36C                                      00358100
.*                                                                      00358200
.ZO36B                ANOP  ,                                           00358300
&ZAWRK   SETA  K'&XSUBDATA2                                             00358400
         AIF   ('&XSUBDATA2'(&ZAWRK,1) NE ')').ZO36G                    00358500
&ZN      SETA  2                                                        00358600
.ZO36H    ANOP                                                          00358700
         AIF   (&ZN GE &ZAWRK).ZO36G                                    00358800
         AIF   ('&XSUBDATA2'(&ZN,1) NE '(').ZO36I                       00358900
&ZC      SETC  '&XSUBDATA2'(1,&ZN).'4'.','                              00359000
&ZC      SETC  '&ZC'.'&XSUBDATA2'(&ZN+1,&ZAWRK-&ZN).',96(1)'            00359100
         AGO   .ZO36J                                                   00359200
.ZO36I    ANOP                                                          00359300
&ZN      SETA  &ZN+1                                                    00359400
         AGO   .ZO36H                                                   00359500
.ZO36G    ANOP                                                          00359600
&ZC      SETC  '&XSUBDATA2.(4),96(1)'                                   00359700
.ZO36J    ANOP                                                          00359800
&ZOPN                 SETA  &ZOPN+1                                     00359900
&ZOPL(&ZOPN)          SETC  ' '                                         00360000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00360100
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00360200
&ZOPD(&ZOPN)          SETC  '++ XSUBDATA2 CL4'                          00360300
.ZO36C                ANOP  ,                                           00360400
.*------------------------------------------------------------------    00360500
.***AO.LVER02                                                           00360600
.ZO36Z                ANOP  ,                                           00360700
.*******************************************************************    00360800
.***AO.X02  RETURN CODE PROCESSING                                      00360900
.*******************************************************************    00361000
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00361100
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00361200
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00361300
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00361400
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00361500
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00361600
&ZOPN                 SETA  &ZOPN+1                                     00361700
&ZOPL(&ZOPN)          SETC  ' '                                         00361800
&ZOPO(&ZOPN)          SETC  'ST'                                        00361900
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00362000
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00362100
                      AGO   .ZMRETX                                     00362200
.*                                                                      00362300
.ZMRET2               ANOP  ,                                           00362400
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00362500
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00362600
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00362700
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00362800
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00362900
&ZOPN                 SETA  &ZOPN+1                                     00363000
&ZOPL(&ZOPN)          SETC  ' '                                         00363100
&ZOPO(&ZOPN)          SETC  'LR'                                        00363200
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00363300
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00363400
.ZMRETX               ANOP  ,                                           00363500
.*******************************************************************    00363600
.***AO.X03  REASON CODE PROCESSING                                      00363700
.*******************************************************************    00363800
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    00363900
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            00364000
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              00364100
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             00364200
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              00364300
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             00364400
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                00364500
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 00364600
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                00364700
&ZOPN                 SETA  &ZOPN+1                                     00364800
&ZOPL(&ZOPN)          SETC  ' '                                         00364900
&ZOPO(&ZOPN)          SETC  'ST'                                        00365000
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               00365100
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00365200
                      AGO   .ZMRSNX                                     00365300
.*                                                                      00365400
.ZMRSN2               ANOP  ,                                           00365500
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                00365600
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 00365700
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                00365800
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 00365900
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                00366000
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   00366100
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    00366200
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   00366300
&ZOPN                 SETA  &ZOPN+1                                     00366400
&ZOPL(&ZOPN)          SETC  ' '                                         00366500
&ZOPO(&ZOPN)          SETC  'LR'                                        00366600
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  00366700
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00366800
.ZMRSNX               ANOP  ,                                           00366900
.*******************************************************************    00367000
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00367100
.*******************************************************************    00367200
.ZMFLX                ANOP  ,              MF=L PROCESSING              00367300
.*******************************************************************    00367400
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00367500
.*******************************************************************    00367600
                      ACTR  10000                                       00367700
.*                                                                      00367800
                      LCLA  &ZLC           COLUMN POSITION              00367900
                      LCLA  &ZOPX          LIST TABLE INDEX             00368000
                      LCLC  &ZLL           LABEL                        00368100
                      LCLC  &ZLOP          OPERATION                    00368200
                      LCLC  &ZLV           VALUE                        00368300
                      LCLC  &ZLD           DESCRIPTION                  00368400
.*                                                                      00368500
&ZOPX                 SETA  1                                           00368600
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00368700
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00368800
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00368900
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00369000
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00369100
                      AIF   (K'&ZLD LE 0).ZL5                           00369200
&ZLC                  SETA  35             COMMENT COLUMN               00369300
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00369400
&ZLC                  SETA  33             COMMMENT COLUMN              00369500
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00369600
&ZLV                  SETC  '&ZLV'.' '                                  00369700
                      AGO   .ZL3                                        00369800
.*                                                                      00369900
.ZL4                  ANOP  ,                                           00370000
&ZLV                  SETC  '&ZLV'.' '                                  00370100
.ZL5                  ANOP  ,                                           00370200
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00370300
.*                                                                      00370400
&ZLL     &ZLOP &ZLV                                                     00370500
.*                                                                      00370600
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00370700
                      AGO   .ZL2           CONTINUE LOOPING             00370800
.*                                                                      00370900
.ZLX                  ANOP  ,                                           00371000
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00371100
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00371200
.********************************************************************** 00371300
.* If this is an OPTIONS request, ensure that at least one of the  @P1A 00371400
.* associated keys was specified.   (AMG can't do this.)           @P1A 00371500
.********************************************************************** 00371600
         AIF   ('&XREQUEST' NE 'OPTIONS').INVOKE                        00371700
         AIF   (N'&COMMAND GT 0).INVOKE                                 00371800
         AIF   (N'&REQDSUB GT 0).INVOKE                                 00371900
&ZMS     SETC  'ONE OR MORE OF THE'                                     00372000
&ZMS     SETC  '&ZMS FOLLOWING KEY(S) IS REQUIRED: '                    00372100
&ZMS     SETC  '&ZMS "REQDSUB",'                                        00372200
         MNOTE 8,' &ZMS " COMMAND".'                                    00372300
&ZMACRET SETA  8                       SET MACRO ERROR RETURN CODE      00372400
.INVOKE  ANOP                                                           00372500
.********************************************************************** 00372600
.* Invoke IEFSSI service                                                00372700
.********************************************************************** 00372800
         LA    15,16                                                    00372900
         L     15,0(15)                CVT address                      00373000
         USING CVT,15                                                   00373100
         TM    CVTDCB,CVTOSEXT         Test if CVT release level       +00373200
                                         available                 @P2A 00373300
         BNO   #NSSI&SYSNDX            Service not available       @P2A 00373400
         TM    CVTOSLV1,CVTH5520       Test if 5.2.0 or above      @P2A 00373500
         BNO   #NSSI&SYSNDX            Service not available       @P2A 00373600
         L     15,CVTJESCT             JESCT address                    00373700
         USING JESCT,15                                                 00373800
         L     15,JESCTEXT             JESCT pageable extension         00373900
         USING JESPEXT,15                                               00374000
         L     15,JESSSIPC             IEFSSI PC number                 00374100
         DROP  15                                                       00374200
         LTR   15,15                   Test whether service available   00374300
         BZ    #NSSI&SYSNDX                                             00374400
         PC    0(15)                   Process service request          00374500
         B     #SSI&SYSNDX                                              00374600
#NSSI&SYSNDX  DS  0H                                                    00374700
         LA    15,IEFSSI_UNAVAILABLE   Indicate service not available   00374800
#SSI&SYSNDX   DS  0H                                                    00374900
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00375000
.ZLINKX               ANOP  ,                                           00375100
.*******************************************************************    00375200
.***AP.X01  FORMAT GENERATED CODE                                       00375300
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00375400
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00375500
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00375600
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00375700
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00375800
                      AIF   (K'&ZLD LE 0).ZL51                          00375900
&ZLC                  SETA  35             COMMENT COLUMN               00376000
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00376100
&ZLC                  SETA  33             COMMENT COLUMN               00376200
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00376300
&ZLV                  SETC  '&ZLV'.' '                                  00376400
                      AGO   .ZL31                                       00376500
.*                                                                      00376600
.ZL41                 ANOP  ,                                           00376700
&ZLV                  SETC  '&ZLV'.' '                                  00376800
.ZL51                 ANOP  ,                                           00376900
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00377000
.*                                                                      00377100
&ZLL     &ZLOP &ZLV                                                     00377200
.*                                                                      00377300
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00377400
                      AGO   .ZL21          CONTINUE LOOPING             00377500
.*                                                                      00377600
.ZLX1                 ANOP  ,                                           00377700
.*******************************************************************    00377800
.***AP.X02  END OF IEFSSI MACRO                                         00377900
&ZIEFSSI              SETC  'YES'          SET IEFSSI USED              00378000
         POP   PRINT                                                    00378100
*                                            IEFSSI-1                   00378200
         SPACE 1                                                        00378300
.ZLX2                 ANOP  ,                                           00378400
         MEND                                                           00378500
**********************************************************************/ 00378600
*/**** START OF SPECIFICATIONS **************************************** 00378700
*                                                                     * 00378800
*                                                                     * 00378900
*01* MACRO NAME:  IEFSSI                                -05/05/94-<1> * 00379000
*                                                                     * 00379100
*                                                                     * 00379200
*01* DESCRIPTIVE NAME:  Dynamic Subsystem Interface Macro             * 00379300
*                                                                     * 00379400
*01* PROPRIETARY STATEMENT:                                           * 00379500
*                                                                     * 00379600
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00379700
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00379800
*     5655-068 (C) COPYRIGHT IBM CORP. 1994                           * 00379900
*     SEE COPYRIGHT INSTRUCTIONS                                      * 00380000
*                                                                     * 00380100
* STATUS= HBB5520                                                     * 00380200
*                                                                     * 00380300
*                                                                     * 00380400
*                                                                     * 00380500
*01* FUNCTION:                                                        * 00380600
*       See the IEFSSI macro prologue for details.                    * 00380700
*                                                                     * 00380800
*01* INPUT:                                                           * 00380900
*                                                                     * 00381000
*            ?IEFSSI    [PLISTVER                                     * 00381100
*                                 (xplistver|IMPLIED_VERSION)]      * 00381200
*                        SUBNAME(xsubname)                            * 00381300
*                       REQUEST(ADD)                                 * 00381400
*                      |    [CONSNAME(xconsname|0)]                 * 00381500
*                      |    [INITRTN(xinitrtn|NO_INITRTN)           * 00381600
*                      |        [INITPARM(xinitparm|NO_INITPARM)    * 00381700
*                      |             INITPLEN(xinitplen)]]            * 00381800
*                       REQUEST(ACTIVATE)                            * 00381900
*                      |    [INTOKEN(xintoken|NO_INPUT_TOKEN)]      * 00382000
*                       REQUEST(OPTIONS)                             * 00382100
*                      |    [COMMAND(NO|YES)]                       * 00382200
*                      |    [REQDSUB(MSTR|PRI)]                     * 00382300
*                       REQUEST(DEACTIVATE)                          * 00382400
*                      |    [OUTTOKEN(xouttoken)]                     * 00382500
*                       REQUEST(SWAP)                                * 00382600
*                      |    [INTOKEN(xintoken|NO_INPUT_TOKEN)]      * 00382700
*                      |    [OUTTOKEN(xouttoken)]                     * 00382800
*                       REQUEST(PUT)                                 * 00382900
*                      |    SUBDATA1(xsubdata1)                      * 00383000
*                      |    SUBDATA2(xsubdata2)                      * 00383100
*                       REQUEST(GET)                                 * 00383200
*                      |    SUBDATA1([xsubdata1])                    * 00383300
*                      |    SUBDATA2([xsubdata2])                    * 00383400
*                       REQUEST(QUERY)                               * 00383500
*                            WORKAREA(xworkarea)                      * 00383600
*                           [WORKASP(xworkasp|0)]                   * 00383700
*                       [RETCODE(xretcode)]                           * 00383800
*                       [RSNCODE(xrsncode)]                           * 00383900
*                       [COM(xcom|NULL)]                            * 00384000
*                      [MF(S)]                                       * 00384100
*                      [MF(L,xmfctrl,xmfattr|BDY(DWORD))]          * 00384200
*                      [MF(E,xmfctrl,COMPLETE)]                    * 00384300
*                                                                     * 00384400
****** END OF SPECIFICATIONS *****************************************/ 00384500
*/*PB.ECHO02 ECHO MACRO COMMENT--------------------------------------*/ 00384600
*  IF COM^=''                                                           00384700
*    THEN                                                               00384800
*      DO;                                                              00384900
*        IF INDEX(COM(1),'''')=1                                        00385000
*          THEN                                                         00385100
*            ANS('/* '||COM(1,2:LENGTH                                  00385200
*                     (COM(1))-1)||'*/')                                00385300
*            NORESCAN COL(MACLMAR+5);  /* COMMENT ECHO */               00385400
*          ELSE                                                         00385500
*            ANS('/* '||COM(1)||'*/')                                   00385600
*            NORESCAN COL(MACLMAR+5);  /* COMMENT ECHO */               00385700
*        ANS('@SPACE;')                                                 00385800
*            NORESCAN COL(MACLMAR);  /* COMMENT ECHO */                 00385900
*      END;                                                             00386000
*/*PB.ECHO03 START OF MACRO INVOCATION ECHO--------------------------*/ 00386100
*  ANS('/* ? IEFSSI '||MACLIST||' ')                                    00386200
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00386300
*                                                                       00386400
*  DCL ZELO  FIXED;                                                     00386500
*  DCL ZECOL FIXED;                                                     00386600
*                                                                       00386700
*  ZELO=1;     /* STARTING COLUMN */                                    00386800
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00386900
*    IF INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),'COM(') =1 |                00387000
*       INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),' COM(')=1 |                00387100
*       INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),'COM(') =1 |                00387200
*       INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),' COM(')=1                  00387300
*      THEN                                                             00387400
*        DO;   /* CLOSING PARENTHESIS */                                00387500
*          ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');              00387600
*          IF ZECOL>0                                                   00387700
*            THEN                                                       00387800
*              ZELO=ZELO+ZECOL;    /* SKIP TEXT */                      00387900
*            ELSE                                                       00388000
*              ZELO=LENGTH(MACKEYS)+1;  /* NO CLOSING ")" */            00388100
*        END;                                                           00388200
*      ELSE                                                             00388300
*        DO;                                                            00388400
*          ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');              00388500
*          IF ZECOL>0                                                   00388600
*            THEN                                                       00388700
*              DO;                 /* PARENTHESIS FOUND */              00388800
*                ANS(MACKEYS(ZELO:ZELO+ZECOL-1)||' ')                   00388900
*                   NORESCAN COL(MACLMAR+5);                            00389000
*                ZELO=ZELO+ZECOL;  /* NEXT PORTION */                   00389100
*              END;                                                     00389200
*            ELSE                                                       00389300
*              DO;                 /* REMAINING KEYS */                 00389400
*                ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                     00389500
*                   NORESCAN COL(MACLMAR+5);                            00389600
*                ZELO=LENGTH(MACKEYS)+1;                                00389700
*              END;                                                     00389800
*        END;                                                           00389900
*  END;                                                                 00390000
*/*PB.ECHO05 END OF MACRO INVOCATION ECHO----------------------------*/ 00390100
*  ANS(' -05/05/94-1- */')                                              00390200
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00390300
*/********************************************************************/ 00390400
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00390500
*/********************************************************************/ 00390600
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00390700
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00390800
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00390900
*                                                                       00391000
*  DCL   ZIEFSSI CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */   00391100
*  DEACT ZIEFSSI;                                                       00391200
*                                                                       00391300
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00391400
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00391500
*                                                                       00391600
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00391700
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00391800
*                                                                       00391900
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00392000
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00392100
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00392200
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00392300
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00392400
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00392500
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00392600
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00392700
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00392800
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00392900
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00393000
*                                                                       00393100
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00393200
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00393300
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00393400
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00393500
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00393600
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00393700
*/*******************************************************************/  00393800
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00393900
*/*******************************************************************/  00394000
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00394100
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00394200
*  DCL XSUBNAME;  DEACT XSUBNAME;  /***PV.XVAR02 INPUT NAME */          00394300
*  DCL ZXSUBNAME; DEACT ZXSUBNAME;  /***INPUT/OUTPUT CONTROL */         00394400
*  DCL XREQUEST;  DEACT XREQUEST;  /***PV.XVAR02 INPUT VALUE */         00394500
*  DCL ZXREQUEST; DEACT ZXREQUEST;  /***INPUT/OUTPUT CONTROL */         00394600
*  DCL XCONSNAME;  DEACT XCONSNAME;  /***PV.XVAR02 INPUT NAME */        00394700
*  DCL ZXCONSNAME; DEACT ZXCONSNAME;  /***INPUT/OUTPUT CONTROL */       00394800
*  DCL XINITRTN;  DEACT XINITRTN;  /***PV.XVAR02 INPUT NAME */          00394900
*  DCL ZXINITRTN; DEACT ZXINITRTN;  /***INPUT/OUTPUT CONTROL */         00395000
*  DCL XINITPARM;  DEACT XINITPARM;  /***PV.XVAR02 INPUT NAME */        00395100
*  DCL ZXINITPARM; DEACT ZXINITPARM;  /***INPUT/OUTPUT CONTROL */       00395200
*  DCL XINITPLEN;  DEACT XINITPLEN;  /***PV.XVAR02 INPUT NAME */        00395300
*  DCL ZXINITPLEN; DEACT ZXINITPLEN;  /***INPUT/OUTPUT CONTROL */       00395400
*  DCL XINTOKEN;  DEACT XINTOKEN;  /***PV.XVAR02 INPUT NAME */          00395500
*  DCL ZXINTOKEN; DEACT ZXINTOKEN;  /***INPUT/OUTPUT CONTROL */         00395600
*  DCL XCOMMAND;  DEACT XCOMMAND;  /***PV.XVAR02 INPUT VALUE */         00395700
*  DCL ZXCOMMAND; DEACT ZXCOMMAND;  /***INPUT/OUTPUT CONTROL */         00395800
*  DCL XREQDSUB;  DEACT XREQDSUB;  /***PV.XVAR02 INPUT VALUE */         00395900
*  DCL ZXREQDSUB; DEACT ZXREQDSUB;  /***INPUT/OUTPUT CONTROL */         00396000
*  DCL XOUTTOKEN;  DEACT XOUTTOKEN;  /***PV.XVAR02 OUTPUT NAME */       00396100
*  DCL ZXOUTTOKEN; DEACT ZXOUTTOKEN;  /***INPUT/OUTPUT CONTROL */       00396200
*  DCL XSUBDATA1;  DEACT XSUBDATA1;  /***PV.XVAR02 INPUT NAME */        00396300
*  DCL ZXSUBDATA1; DEACT ZXSUBDATA1;  /***INPUT/OUTPUT CONTROL */       00396400
*  DCL XSUBDATA2;  DEACT XSUBDATA2;  /***PV.XVAR02 INPUT NAME */        00396500
*  DCL ZXSUBDATA2; DEACT ZXSUBDATA2;  /***INPUT/OUTPUT CONTROL */       00396600
*  DCL XWORKAREA;  DEACT XWORKAREA;  /***PV.XVAR02 OUTPUT NAME */       00396700
*  DCL ZXWORKAREA; DEACT ZXWORKAREA;  /***INPUT/OUTPUT CONTROL */       00396800
*  DCL XWORKASP;  DEACT XWORKASP;  /***PV.XVAR02 INPUT NAME */          00396900
*  DCL ZXWORKASP; DEACT ZXWORKASP;  /***INPUT/OUTPUT CONTROL */         00397000
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00397100
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00397200
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         00397300
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         00397400
*  DCL XCOM;  DEACT XCOM;          /***PV.XVAR02 INPUT VALUE */         00397500
*  DCL ZXCOM; DEACT ZXCOM;         /***INPUT/OUTPUT CONTROL */          00397600
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00397700
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00397800
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00397900
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00398000
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00398100
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00398200
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00398300
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00398400
*/********************************************************************/ 00398500
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00398600
*/********************************************************************/ 00398700
*  IF PLISTVER(1) = 'MAX' THEN                                          00398800
*    XPLISTVER=1;                                                       00398900
*  ELSE                                                                 00399000
*    XPLISTVER=1;                                                       00399100
*  IF PLISTVER^=''                                                      00399200
*     & PLISTVER(1)^='IMPLIED_VERSION'                                  00399300
*     & PLISTVER(1)^='MAX'                                              00399400
*    THEN                                                               00399500
*      DO;                                                              00399600
*        IF FIXED(PLISTVER(1))>=XPLISTVER                               00399700
*          THEN                                                         00399800
*              XPLISTVER=FIXED(PLISTVER(1));                            00399900
*          ELSE                                                         00400000
*            DO;                                                        00400100
*              ZMS=' 8, PLISTVER='||         /**KVALP* MSG*/            00400200
*                    PLISTVER(1)||                                      00400300
*                  ', BUT PLISTVER OF '||                               00400400
*                    CHAR(XPLISTVER)||                                  00400500
*                  ' IS REQUIRED.';                                     00400600
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00400700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00400800
*              ZMACRET=8;                    /* MACRO ERROR */          00400900
*            END;                                                       00401000
*                                                                       00401100
*        IF PLISTVER='PLISTVER' | PLISTVER='()'  /*CHCK ENTRY*/         00401200
*          THEN                                                         00401300
*            DO;                                                        00401400
*              ZMS=' 8, THE "PLISTVER" KEY'|| /**KOPTP* MSG*/           00401500
*                  ' MUST CONTAIN ONE'||                                00401600
*                  ' (OR MORE) ARGUMENT(S).';                           00401700
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00401800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00401900
*              ZMACRET=8;                    /* MACRO ERROR */          00402000
*            END;                                                       00402100
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00402200
*          THEN                                                         00402300
*            DO;                                                        00402400
*              ZMS=' 8, "PLISTVER'||         /**KPOSP* MSG*/            00402500
*                  PLISTVER||                                           00402600
*                  '" "PLISTVER"'||                                     00402700
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00402800
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00402900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00403000
*              ZMACRET=8;                    /* MACRO ERROR */          00403100
*            END;                                                       00403200
*                                                                       00403300
*        ZCVAL='';                           /* ERROR FLAG */           00403400
*        ZC=PLISTVER(1);                                                00403500
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00403600
*          IF ZC(ZL:ZL)<'0' |                /* MUST BE NUMERIC */      00403700
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00403800
*            THEN                                                       00403900
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00404000
*        END;                                                           00404100
*        IF ZCVAL=''                                                    00404200
*          THEN                                                         00404300
*            DO;                             /* CHECK RANGE LIMITS */   00404400
*              IF XPLISTVER<1 |              /* LOW LIMIT */            00404500
*                 XPLISTVER>1                /* HIGH LIMIT */           00404600
*                THEN                                                   00404700
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00404800
*            END;                                                       00404900
*        IF ZCVAL^=''                                                   00405000
*          THEN                                                         00405100
*            DO;                             /* RANGE ERROR */          00405200
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00405300
*              ZMS=' 8, "PLISTVER '||        /**KRNGP* MSG*/            00405400
*                  PLISTVER||                                           00405500
*                  '" THE RANGE IS "1-1"'||                             00405600
*                  ' FOR ARGUMENT 1.';                                  00405700
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00405800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00405900
*              ZMACRET=8;                    /* MACRO ERROR */          00406000
*            END;                                                       00406100
*      END;                                                             00406200
*                                                                       00406300
*/********************************************************************/ 00406400
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00406500
*/********************************************************************/ 00406600
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00406700
*  XMF='';                                                              00406800
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00406900
*  IF MF(1)='S'                              /* CHECK FOR KEYWORD */    00407000
*    THEN                                                               00407100
*      DO;                                                              00407200
*        XMF='S';                            /* SET XVARIABLE */        00407300
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    00407400
*          THEN                                                         00407500
*            DO;                                                        00407600
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00407700
*                  MF||                                                 00407800
*                  '" "MF"'||                                           00407900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00408000
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00408100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00408200
*              ZMACRET=8;                    /* MACRO ERROR */          00408300
*            END;                                                       00408400
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00408500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00408600
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00408700
*  IF MF(1)='L'                              /* CHECK FOR KEYWORD */    00408800
*    THEN                                                               00408900
*      DO;                                                              00409000
*        XMF='L';                            /* SET XVARIABLE */        00409100
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00409200
*          THEN                                                         00409300
*            DO;                                                        00409400
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00409500
*                  MF||                                                 00409600
*                  '" "MF"'||                                           00409700
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00409800
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00409900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00410000
*              ZMACRET=8;                    /* MACRO ERROR */          00410100
*            END;                                                       00410200
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00410300
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00410400
*        IF PLISTVER ^= ''                                              00410500
*          THEN                                                         00410600
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00410700
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN |                            00410800
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00410900
*          THEN                                                         00411000
*            DO;                                                        00411100
*              ZMS=' 8, THE "L" FORM OF "MF"'|| /**MFLP* MSG*/          00411200
*                  ' CAN ONLY HAVE'||                                   00411300
*                  ' THE "PLISTVER" KEY'||                              00411400
*                  ' SPECIFIED ON THE INVOCATION.';                     00411500
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00411600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00411700
*              ZMACRET=8;                    /* MACRO ERROR */          00411800
*            END;                                                       00411900
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00412000
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00412100
*  IF MF(2)=''                               /* CHECK FOR NULL */       00412200
*   THEN                                                                00412300
*    DO;                                     /* KEY IS REQUIRED */      00412400
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00412500
*        ZMS=' 8, WHEN "L" IS SPECIFIED'||                              00412600
*            ' FOR THE "MF" KEY, POSITIONAL'||                          00412700
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00412800
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00412900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00413000
*        ZMACRET=8;                          /* MACRO ERROR */          00413100
*    END;                                                               00413200
*  ELSE                                                                 00413300
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00413400
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00413500
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00413600
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00413700
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00413800
*    THEN                                                               00413900
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00414000
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00414100
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00414200
*     LENGTH(XMFATTR)>60                                                00414300
*    THEN                                                               00414400
*      DO;                                                              00414500
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00414600
*        ZMS=' 8, "MF'||                     /**KLNGP* MSG*/            00414700
*            MF||                                                       00414800
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'||                       00414900
*            ' LENGTH OF 60 CHARACTERS. ';                              00415000
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00415100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00415200
*        ZMACRET=8;                          /* MACRO ERROR */          00415300
*      END;                                                             00415400
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00415500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00415600
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00415700
*  IF MF(1)='E'                              /* CHECK FOR KEYWORD */    00415800
*    THEN                                                               00415900
*      DO;                                                              00416000
*        XMF='E';                            /* SET XVARIABLE */        00416100
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00416200
*          THEN                                                         00416300
*            DO;                                                        00416400
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00416500
*                  MF||                                                 00416600
*                  '" "MF"'||                                           00416700
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00416800
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00416900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00417000
*              ZMACRET=8;                    /* MACRO ERROR */          00417100
*            END;                                                       00417200
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00417300
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00417400
*  IF MF(2)=''                               /* CHECK FOR NULL */       00417500
*   THEN                                                                00417600
*    DO;                                     /* KEY IS REQUIRED */      00417700
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00417800
*        ZMS=' 8, WHEN "E" IS SPECIFIED'||                              00417900
*            ' FOR THE "MF" KEY, POSITIONAL'||                          00418000
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00418100
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00418200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00418300
*        ZMACRET=8;                          /* MACRO ERROR */          00418400
*    END;                                                               00418500
*  ELSE                                                                 00418600
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00418700
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00418800
*  XMFSCK='';                                /* RESET XVARIABLE */      00418900
*  IF MF(3) = 'COMPLETE'                                                00419000
*    THEN                                                               00419100
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00419200
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00419300
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00419400
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00419500
*    THEN                                                               00419600
*      DO;                                   /* KEYWORD NOT ENTERED */  00419700
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00419800
*        IF MF(3)^=''                                                   00419900
*          THEN                                                         00420000
*            DO;                                                        00420100
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00420200
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/            00420300
*                  MF||'"'||                                            00420400
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '||              00420500
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00420600
*                  ' "COMPLETE".';           /* VALID KEYWORD */        00420700
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00420800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00420900
*              ZMACRET=8;                    /* MACRO ERROR */          00421000
*            END;                                                       00421100
*      END;                                                             00421200
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00421300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00421400
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00421500
*  IF MF='MF'                                                           00421600
*    | MF='()'                               /*CHECK ENTRY*/            00421700
*     THEN                                                              00421800
*       DO;                                                             00421900
*              ZMS=' 8, THE "MF" KEY'||      /**KOPTP* MSG*/            00422000
*                  ' MUST CONTAIN ONE'||                                00422100
*                  ' (OR MORE) ARGUMENT(S).';                           00422200
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00422300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00422400
*              ZMACRET=8;                    /* MACRO ERROR */          00422500
*       END;                                                            00422600
*  ELSE                                                                 00422700
*    DO;                                                                00422800
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00422900
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00423000
*        THEN                                                           00423100
*          DO;                               /* KEYWORD NOT ENTERED */  00423200
*            XMF='S';                        /* SET DEFAULT */          00423300
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    00423400
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00423500
*              THEN                                                     00423600
*                DO;                                                    00423700
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00423800
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/            00423900
*                  MF||'"'||                                            00424000
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00424100
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00424200
*                  ' "S",'||                 /* VALID KEYWORD */        00424300
*                  ' "L",'||                 /* VALID KEYWORD */        00424400
*                  ' OR "E".';               /* VALID KEYWORD */        00424500
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00424600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00424700
*              ZMACRET=8;                    /* MACRO ERROR */          00424800
*                END;                                                   00424900
*          END;                                                         00425000
*    END;                                                               00425100
*/********************************************************************/ 00425200
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00425300
*/********************************************************************/ 00425400
*  IF PLISTVER=''                                                       00425500
*     | PLISTVER(1)='IMPLIED_VERSION'                                   00425600
*    THEN                                                               00425700
*      ZC='ON';                              /* DEFAULT FLAG ON */      00425800
*    ELSE                                                               00425900
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00426000
*/********************************************************************/ 00426100
*/***PD.P02 DEFAULT ECHO                                             */ 00426200
*/********************************************************************/ 00426300
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00426400
*  IF XMF^='L'                                                          00426500
*    THEN                                                               00426600
*      DO;                                   /* FULL SYNTAX CHECK */    00426700
*        ANS('/*DEFAULT(S): */')                                        00426800
*           NORESCAN COL(MACLMAR+5);                                    00426900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00427000
*  IF PLISTVER=''                                                       00427100
*    THEN                                                               00427200
*      ANS('/* PLISTVER('||                                             00427300
*          CHAR(XPLISTVER)||                                            00427400
*          ')*/')                                                       00427500
*          NORESCAN COL(MACLMAR+5);                                     00427600
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00427700
*  IF REQUEST(1)='ADD' |                     /* CHECK FOR KEYWORD */    00427800
*     REQUEST(1)=''                          /* CHECK FOR NULL */       00427900
*    THEN                                                               00428000
*      DO;                                                              00428100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00428200
*  XCONSNAME='';                                                        00428300
*  IF CONSNAME(1)=''                                                    00428400
*    THEN                                                               00428500
*      DO;                                                              00428600
*        XCONSNAME='0';                      /* SET DEFAULT */          00428700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00428800
*      END;                                                             00428900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00429000
*  IF XCONSNAME^=''                                                     00429100
*    THEN                                                               00429200
*      ANS('/* CONSNAME('||                                             00429300
*          XCONSNAME||                                                  00429400
*          ')*/')                                                       00429500
*          NORESCAN COL(MACLMAR+5);                                     00429600
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00429700
*  XINITRTN='';                                                         00429800
*  IF INITRTN(1)=''                                                     00429900
*    THEN                                                               00430000
*      DO;                                                              00430100
*        XINITRTN='NO_INITRTN';              /* SET DEFAULT */          00430200
*        ZC='ON';                            /* DEFAULT FLAG ON */      00430300
*      END;                                                             00430400
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00430500
*  IF XINITRTN^=''                                                      00430600
*    THEN                                                               00430700
*      ANS('/* INITRTN('||                                              00430800
*          XINITRTN||                                                   00430900
*          ')*/')                                                       00431000
*          NORESCAN COL(MACLMAR+5);                                     00431100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00431200
*  XINITPARM='';                                                        00431300
*  IF INITPARM(1)=''                                                    00431400
*    THEN                                                               00431500
*      DO;                                                              00431600
*        XINITPARM='NO_INITPARM';            /* SET DEFAULT */          00431700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00431800
*      END;                                                             00431900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00432000
*  IF XINITPARM^=''                                                     00432100
*    THEN                                                               00432200
*      ANS('/* INITPARM('||                                             00432300
*          XINITPARM||                                                  00432400
*          ')*/')                                                       00432500
*          NORESCAN COL(MACLMAR+5);                                     00432600
*/*PD.KXVAR01 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 00432700
*  XINITPLEN='';                                                        00432800
*  IF INITPLEN(1)=''                                                    00432900
*    THEN                                                               00433000
*      DO;                                                              00433100
*        XINITPLEN='0';                      /* SET DEFAULT */          00433200
*        ZC='ON';                            /* DEFAULT FLAG ON */      00433300
*      END;                                                             00433400
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00433500
*  IF XINITPLEN^=''                                                     00433600
*    THEN                                                               00433700
*      ANS('/* INITPLEN('||                                             00433800
*          XINITPLEN||                                                  00433900
*          ')*/')                                                       00434000
*          NORESCAN COL(MACLMAR+5);                                     00434100
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00434200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00434300
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00434400
*  IF REQUEST(1)='ACTIVATE'                  /* CHECK FOR KEYWORD */    00434500
*    THEN                                                               00434600
*      DO;                                                              00434700
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00434800
*  XINTOKEN='';                                                         00434900
*  IF INTOKEN(1)=''                                                     00435000
*    THEN                                                               00435100
*      DO;                                                              00435200
*        XINTOKEN='NO_INPUT_TOKEN';          /* SET DEFAULT */          00435300
*        ZC='ON';                            /* DEFAULT FLAG ON */      00435400
*      END;                                                             00435500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00435600
*  IF XINTOKEN^=''                                                      00435700
*    THEN                                                               00435800
*      ANS('/* INTOKEN('||                                              00435900
*          XINTOKEN||                                                   00436000
*          ')*/')                                                       00436100
*          NORESCAN COL(MACLMAR+5);                                     00436200
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00436300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00436400
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00436500
*  IF REQUEST(1)='OPTIONS'                   /* CHECK FOR KEYWORD */    00436600
*    THEN                                                               00436700
*      DO;                                                              00436800
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00436900
*  XCOMMAND='NO';                            /* RESET XVARIABLE */      00437000
*  IF COMMAND(1)=''                                                     00437100
*    THEN                                                               00437200
*        ZC='ON';                            /* DEFAULT FLAG ON */      00437300
*  IF COMMAND(1)='NO'                                                   00437400
*    THEN                                                               00437500
*        XCOMMAND='';                        /* SET XVARIABLE */        00437600
*  IF COMMAND(1)='YES'                                                  00437700
*    THEN                                                               00437800
*        XCOMMAND='';                        /* SET XVARIABLE */        00437900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00438000
*  IF XCOMMAND^=''                                                      00438100
*    THEN                                                               00438200
*      ANS('/* COMMAND('||                                              00438300
*          XCOMMAND||                                                   00438400
*          ')*/')                                                       00438500
*          NORESCAN COL(MACLMAR+5);                                     00438600
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00438700
*  XREQDSUB='MSTR';                          /* RESET XVARIABLE */      00438800
*  IF REQDSUB(1)=''                                                     00438900
*    THEN                                                               00439000
*        ZC='ON';                            /* DEFAULT FLAG ON */      00439100
*  IF REQDSUB(1)='MSTR'                                                 00439200
*    THEN                                                               00439300
*        XREQDSUB='';                        /* SET XVARIABLE */        00439400
*  IF REQDSUB(1)='PRI'                                                  00439500
*    THEN                                                               00439600
*        XREQDSUB='';                        /* SET XVARIABLE */        00439700
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00439800
*  IF XREQDSUB^=''                                                      00439900
*    THEN                                                               00440000
*      ANS('/* REQDSUB('||                                              00440100
*          XREQDSUB||                                                   00440200
*          ')*/')                                                       00440300
*          NORESCAN COL(MACLMAR+5);                                     00440400
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00440500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00440600
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00440700
*  IF REQUEST(1)='SWAP'                      /* CHECK FOR KEYWORD */    00440800
*    THEN                                                               00440900
*      DO;                                                              00441000
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00441100
*  XINTOKEN='';                                                         00441200
*  IF INTOKEN(1)=''                                                     00441300
*    THEN                                                               00441400
*      DO;                                                              00441500
*        XINTOKEN='NO_INPUT_TOKEN';          /* SET DEFAULT */          00441600
*        ZC='ON';                            /* DEFAULT FLAG ON */      00441700
*      END;                                                             00441800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00441900
*  IF XINTOKEN^=''                                                      00442000
*    THEN                                                               00442100
*      ANS('/* INTOKEN('||                                              00442200
*          XINTOKEN||                                                   00442300
*          ')*/')                                                       00442400
*          NORESCAN COL(MACLMAR+5);                                     00442500
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00442600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00442700
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00442800
*  IF REQUEST(1)='QUERY'                     /* CHECK FOR KEYWORD */    00442900
*    THEN                                                               00443000
*      DO;                                                              00443100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00443200
*  XWORKASP='';                                                         00443300
*  IF WORKASP(1)=''                                                     00443400
*    THEN                                                               00443500
*      DO;                                                              00443600
*        XWORKASP='0';                       /* SET DEFAULT */          00443700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00443800
*      END;                                                             00443900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00444000
*  IF XWORKASP^=''                                                      00444100
*    THEN                                                               00444200
*      ANS('/* WORKASP('||                                              00444300
*          XWORKASP||                                                   00444400
*          ')*/')                                                       00444500
*          NORESCAN COL(MACLMAR+5);                                     00444600
*/*PD.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00444700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00444800
*/*PD.KXVAR01 VALUE, OPT INPUT, KEYS -XVARIABLE----------------------*/ 00444900
*  XCOM='';                                                             00445000
*  IF COM(1)=''                                                         00445100
*    THEN                                                               00445200
*      DO;                                                              00445300
*        XCOM=' ';                           /* SET DEFAULT */          00445400
*        ZC='ON';                            /* DEFAULT FLAG ON */      00445500
*      END;                                                             00445600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00445700
*  IF XCOM^=''                                                          00445800
*    THEN                                                               00445900
*      ANS('/* COM('||                                                  00446000
*          XCOM||                                                       00446100
*          ')*/')                                                       00446200
*          NORESCAN COL(MACLMAR+5);                                     00446300
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00446400
*    THEN                                                               00446500
*      ANS('/* NONE. */')                                               00446600
*         NORESCAN COL(MACLMAR+5);                                      00446700
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00446800
*      END;                                                             00446900
*/********************************************************************/ 00447000
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00447100
*/********************************************************************/ 00447200
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00447300
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00447400
*                                                                       00447500
*  IF SYSASCE=''                                                        00447600
*    THEN                                                               00447700
*      DO;                                                              00447800
*        IF SYSSPLV=''                                                  00447900
*          THEN                                                         00448000
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00448100
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00448200
*          THEN                                                         00448300
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00448400
*          ELSE                                                         00448500
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00448600
*      END;                                                             00448700
*/********************************************************************/ 00448800
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00448900
*/********************************************************************/ 00449000
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00449100
*  IF XMF^='L'                                                          00449200
*    THEN                                                               00449300
*      DO;                                   /* FULL SYNTAX CHECK */    00449400
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00449500
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00449600
*    THEN                                                               00449700
*      DO;                                                              00449800
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'|| /**PPOSP* MSG*/            00449900
*            ' "'||MACLIST||'"'||                                       00450000
*            ' CANNOT BE USED.'||                                       00450100
*            ' NO POSITIONAL ARGUMENTS'||                               00450200
*            ' ARE ALLOWED.';                                           00450300
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00450400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00450500
*        ZMACRET=8;                          /* MACRO ERROR */          00450600
*      END;                                                             00450700
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00450800
*  IF NUMBER(SUBNAME)>1                      /* CHECK POSITIONALS */    00450900
*    THEN                                                               00451000
*      DO;                                                              00451100
*        ZMS=' 8, "SUBNAME'||                /**KPOSP* MSG*/            00451200
*            SUBNAME||                                                  00451300
*            '" "SUBNAME"'||                                            00451400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00451500
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00451600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00451700
*        ZMACRET=8;                          /* MACRO ERROR */          00451800
*      END;                                                             00451900
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00452000
*  XSUBNAME=SUBNAME(1);                      /* SET XVARIABLE */        00452100
*  IF SUBNAME(1)=''                          /* CHECK FOR NULL */       00452200
*   THEN                                                                00452300
*    DO;                                     /* KEY IS REQUIRED */      00452400
*        ZXSUBNAME='';                       /* RESET IN/OUTPUT */      00452500
*        ZMS=' 8,  '||                                                  00452600
*            ' "SUBNAME" KEY AND ITS ARGUMENT'||                        00452700
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00452800
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00452900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00453000
*        ZMACRET=8;                          /* MACRO ERROR */          00453100
*    END;                                                               00453200
*  ELSE                                                                 00453300
*    ZXSUBNAME='INPUT';                      /* SET IN/OUTPUT */        00453400
*/*PG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00453500
*  XREQUEST='';                                                         00453600
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00453700
*  IF REQUEST(1)='ADD'                       /* CHECK FOR KEYWORD */    00453800
*     | REQUEST(1)=''                        /* CHECK FOR NULL */       00453900
*    THEN                                                               00454000
*      DO;                                                              00454100
*        XREQUEST='ADD';                     /* SET XVARIABLE */        00454200
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00454300
*          THEN                                                         00454400
*            DO;                                                        00454500
*              ZMS=' 8, "REQUEST'||          /**KPOSP* MSG*/            00454600
*                  REQUEST||                                            00454700
*                  '" "REQUEST"'||                                      00454800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00454900
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00455000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00455100
*              ZMACRET=8;                    /* MACRO ERROR */          00455200
*            END;                                                       00455300
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00455400
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00455500
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00455600
*          THEN                                                         00455700
*            ZCVAL=ZCVAL||',INTOKEN';        /* INCORRECT KEY USED */   00455800
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00455900
*          THEN                                                         00456000
*            ZCVAL=ZCVAL||',COMMAND';        /* INCORRECT KEY USED */   00456100
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00456200
*          THEN                                                         00456300
*            ZCVAL=ZCVAL||',REQDSUB';        /* INCORRECT KEY USED */   00456400
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00456500
*          THEN                                                         00456600
*            ZCVAL=ZCVAL||',OUTTOKEN';       /* INCORRECT KEY USED */   00456700
*        IF SUBDATA1^=''                     /* CHECK FOR KEY */        00456800
*          THEN                                                         00456900
*            ZCVAL=ZCVAL||',SUBDATA1';       /* INCORRECT KEY USED */   00457000
*        IF SUBDATA2^=''                     /* CHECK FOR KEY */        00457100
*          THEN                                                         00457200
*            ZCVAL=ZCVAL||',SUBDATA2';       /* INCORRECT KEY USED */   00457300
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00457400
*          THEN                                                         00457500
*            ZCVAL=ZCVAL||',WORKAREA';       /* INCORRECT KEY USED */   00457600
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00457700
*          THEN                                                         00457800
*            ZCVAL=ZCVAL||',WORKASP';        /* INCORRECT KEY USED */   00457900
*        IF ZCVAL^=''                                                   00458000
*          THEN                                                         00458100
*            DO;                             /* INCORRECT KEYS USED */  00458200
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00458300
*              ZMS=' 8, "REQUEST'||          /**KMEIP* MSG*/            00458400
*                  REQUEST||'"'||                                       00458500
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00458600
*                  ' FOLLOWING KEY(S) "'||                              00458700
*                  ZCVAL||'".';                                         00458800
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00458900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00459000
*              ZMACRET=8;                    /* MACRO ERROR */          00459100
*            END;                                                       00459200
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00459300
*  IF CONSNAME='CONSNAME' | CONSNAME='()'    /*CHECK ENTRY*/            00459400
*    THEN                                                               00459500
*      DO;                                                              00459600
*        ZMS=' 8, THE "CONSNAME" KEY'||      /**KOPTP* MSG*/            00459700
*            ' MUST CONTAIN ONE'||                                      00459800
*            ' (OR MORE) ARGUMENT(S).';                                 00459900
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00460000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00460100
*        ZMACRET=8;                          /* MACRO ERROR */          00460200
*      END;                                                             00460300
*  IF NUMBER(CONSNAME)>1                     /* CHECK POSITIONALS */    00460400
*    THEN                                                               00460500
*      DO;                                                              00460600
*        ZMS=' 8, "CONSNAME'||               /**KPOSP* MSG*/            00460700
*            CONSNAME||                                                 00460800
*            '" "CONSNAME"'||                                           00460900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00461000
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00461100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00461200
*        ZMACRET=8;                          /* MACRO ERROR */          00461300
*      END;                                                             00461400
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00461500
*  ZXCONSNAME='INPUT';                       /* SET IN/OUTPUT */        00461600
*  XCONSNAME='0';                            /* SET DEFAULT */          00461700
*  IF CONSNAME(1)^=''                        /* CHECK FOR NULL */       00461800
*    THEN                                                               00461900
*      XCONSNAME=CONSNAME(1);                /* SET XVARIABLE */        00462000
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00462100
*  IF INITRTN='INITRTN' | INITRTN='()'       /*CHECK ENTRY*/            00462200
*    THEN                                                               00462300
*      DO;                                                              00462400
*        ZMS=' 8, THE "INITRTN" KEY'||       /**KOPTP* MSG*/            00462500
*            ' MUST CONTAIN ONE'||                                      00462600
*            ' (OR MORE) ARGUMENT(S).';                                 00462700
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00462800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00462900
*        ZMACRET=8;                          /* MACRO ERROR */          00463000
*      END;                                                             00463100
*  IF NUMBER(INITRTN)>1                      /* CHECK POSITIONALS */    00463200
*    THEN                                                               00463300
*      DO;                                                              00463400
*        ZMS=' 8, "INITRTN'||                /**KPOSP* MSG*/            00463500
*            INITRTN||                                                  00463600
*            '" "INITRTN"'||                                            00463700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00463800
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00463900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00464000
*        ZMACRET=8;                          /* MACRO ERROR */          00464100
*      END;                                                             00464200
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00464300
*  ZXINITRTN='INPUT';                        /* SET IN/OUTPUT */        00464400
*  XINITRTN='NO_INITRTN';                    /* SET DEFAULT */          00464500
*  IF INITRTN(1)^=''                         /* CHECK FOR NULL */       00464600
*    THEN                                                               00464700
*      XINITRTN=INITRTN(1);                  /* SET XVARIABLE */        00464800
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00464900
*  IF INITPARM='INITPARM' | INITPARM='()'    /*CHECK ENTRY*/            00465000
*    THEN                                                               00465100
*      DO;                                                              00465200
*        ZMS=' 8, THE "INITPARM" KEY'||      /**KOPTP* MSG*/            00465300
*            ' MUST CONTAIN ONE'||                                      00465400
*            ' (OR MORE) ARGUMENT(S).';                                 00465500
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00465600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00465700
*        ZMACRET=8;                          /* MACRO ERROR */          00465800
*      END;                                                             00465900
*  IF NUMBER(INITPARM)>1                     /* CHECK POSITIONALS */    00466000
*    THEN                                                               00466100
*      DO;                                                              00466200
*        ZMS=' 8, "INITPARM'||               /**KPOSP* MSG*/            00466300
*            INITPARM||                                                 00466400
*            '" "INITPARM"'||                                           00466500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00466600
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00466700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00466800
*        ZMACRET=8;                          /* MACRO ERROR */          00466900
*      END;                                                             00467000
*/*PG.KXVAR19 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00467100
*  ZXINITPARM='INPUT';                       /* SET IN/OUTPUT */        00467200
*  XINITPARM='NO_INITPARM';                  /* SET DEFAULT */          00467300
*  IF INITPARM(1)^=''                        /* CHECK FOR PARMS */      00467400
*    THEN                                                               00467500
*      XINITPARM=INITPARM(1);                /* SET XVARIABLE */        00467600
*  IF INITRTN(1)='' &                        /* CHECK FOR KEY */        00467700
*     INITPARM(1)^=''                        /* CHECK FOR PARMS */      00467800
*    THEN                                                               00467900
*      DO;                                                              00468000
*        ZMS=' 8, "INITPARM'||               /**KDEPP* MSG*/            00468100
*            INITPARM||'"'||                                            00468200
*            ' CAN ONLY BE SPECIFIED IF'||                              00468300
*            ' '||                                                      00468400
*            ' "INITRTN"'||                                             00468500
*            ' IS ALSO SPECIFIED.';                                     00468600
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00468700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00468800
*        ZMACRET=8;                          /* MACRO ERROR */          00468900
*      END;                                                             00469000
*/*PG.KXVAR01 NAME, OPT RQD INPUT, KEYS -EXCESSIVE ARGUMENTS---------*/ 00469100
*  IF NUMBER(INITPLEN)>1                     /* CHECK POSITIONALS */    00469200
*    THEN                                                               00469300
*      DO;                                                              00469400
*        ZMS=' 8, "INITPLEN'||               /**KPOSP* MSG*/            00469500
*            INITPLEN||                                                 00469600
*            '" "INITPLEN"'||                                           00469700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00469800
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00469900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00470000
*        ZMACRET=8;                          /* MACRO ERROR */          00470100
*      END;                                                             00470200
*/*PG.KXVAR07 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 00470300
*  ZXINITPLEN='INPUT';                       /* SET IN/OUTPUT*/         00470400
*  XINITPLEN=INITPLEN(1);                    /* SET XVARIABLE */        00470500
*  IF INITPARM(1)=''                         /* CHECK KEY */            00470600
*    THEN                                                               00470700
*      DO;                                                              00470800
*        IF INITPLEN(1)=''                   /* CHECK PARM */           00470900
*          THEN                                                         00471000
*            ZXINITPLEN='';                  /* RESET IN/OUTPUT*/       00471100
*          ELSE                                                         00471200
*            DO;                                                        00471300
*            ZMS=' 8, "INITPLEN'||           /**KDEPP* MSG*/            00471400
*                INITPLEN||'"'||                                        00471500
*                ' CAN ONLY BE SPECIFIED IF'||                          00471600
*                ' '||                                                  00471700
*                ' "INITPARM"'||                                        00471800
*                ' IS ALSO SPECIFIED.';                                 00471900
*            ANS MSG('?IEFSSI ---> '||ZMS);                             00472000
*            ANS(COMMENT(ZMS)) COL(MACLMAR);                            00472100
*            ZMACRET=8;                      /* MACRO ERROR */          00472200
*            END;                                                       00472300
*      END;                                                             00472400
*    ELSE                                                               00472500
*      IF INITPLEN(1)=''                     /* CHECK PARM */           00472600
*        THEN                                                           00472700
*          DO;                                                          00472800
*            ZXINITPLEN='';                  /* RESET IN/OUTPUT*/       00472900
*            ZMS=' 8, WHEN "INITPARM" IS SPECIFIED'||                   00473000
*                ' , "INITPLEN" KEY AND ITS ARGUMENT'||                 00473100
*                ' ARE REQUIRED.';           /**KRQDP* MSG*/            00473200
*            ANS MSG('?IEFSSI ---> '||ZMS);                             00473300
*            ANS(COMMENT(ZMS)) COL(MACLMAR);                            00473400
*            ZMACRET=8;                      /* MACRO ERROR */          00473500
*          END;                                                         00473600
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00473700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00473800
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00473900
*  IF REQUEST(1)='ACTIVATE'                  /* CHECK FOR KEYWORD */    00474000
*    THEN                                                               00474100
*      DO;                                                              00474200
*        XREQUEST='ACTIVATE';                /* SET XVARIABLE */        00474300
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00474400
*          THEN                                                         00474500
*            DO;                                                        00474600
*              ZMS=' 8, "REQUEST'||          /**KPOSP* MSG*/            00474700
*                  REQUEST||                                            00474800
*                  '" "REQUEST"'||                                      00474900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00475000
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00475100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00475200
*              ZMACRET=8;                    /* MACRO ERROR */          00475300
*            END;                                                       00475400
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00475500
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00475600
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00475700
*          THEN                                                         00475800
*            ZCVAL=ZCVAL||',CONSNAME';       /* INCORRECT KEY USED */   00475900
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00476000
*          THEN                                                         00476100
*            ZCVAL=ZCVAL||',INITRTN';        /* INCORRECT KEY USED */   00476200
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00476300
*          THEN                                                         00476400
*            ZCVAL=ZCVAL||',INITPARM';       /* INCORRECT KEY USED */   00476500
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00476600
*          THEN                                                         00476700
*            ZCVAL=ZCVAL||',INITPLEN';       /* INCORRECT KEY USED */   00476800
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00476900
*          THEN                                                         00477000
*            ZCVAL=ZCVAL||',COMMAND';        /* INCORRECT KEY USED */   00477100
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00477200
*          THEN                                                         00477300
*            ZCVAL=ZCVAL||',REQDSUB';        /* INCORRECT KEY USED */   00477400
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00477500
*          THEN                                                         00477600
*            ZCVAL=ZCVAL||',OUTTOKEN';       /* INCORRECT KEY USED */   00477700
*        IF SUBDATA1^=''                     /* CHECK FOR KEY */        00477800
*          THEN                                                         00477900
*            ZCVAL=ZCVAL||',SUBDATA1';       /* INCORRECT KEY USED */   00478000
*        IF SUBDATA2^=''                     /* CHECK FOR KEY */        00478100
*          THEN                                                         00478200
*            ZCVAL=ZCVAL||',SUBDATA2';       /* INCORRECT KEY USED */   00478300
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00478400
*          THEN                                                         00478500
*            ZCVAL=ZCVAL||',WORKAREA';       /* INCORRECT KEY USED */   00478600
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00478700
*          THEN                                                         00478800
*            ZCVAL=ZCVAL||',WORKASP';        /* INCORRECT KEY USED */   00478900
*        IF ZCVAL^=''                                                   00479000
*          THEN                                                         00479100
*            DO;                             /* INCORRECT KEYS USED */  00479200
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00479300
*              ZMS=' 8, "REQUEST'||          /**KMEIP* MSG*/            00479400
*                  REQUEST||'"'||                                       00479500
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00479600
*                  ' FOLLOWING KEY(S) "'||                              00479700
*                  ZCVAL||'".';                                         00479800
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00479900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00480000
*              ZMACRET=8;                    /* MACRO ERROR */          00480100
*            END;                                                       00480200
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00480300
*  IF INTOKEN='INTOKEN' | INTOKEN='()'       /*CHECK ENTRY*/            00480400
*    THEN                                                               00480500
*      DO;                                                              00480600
*        ZMS=' 8, THE "INTOKEN" KEY'||       /**KOPTP* MSG*/            00480700
*            ' MUST CONTAIN ONE'||                                      00480800
*            ' (OR MORE) ARGUMENT(S).';                                 00480900
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00481000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00481100
*        ZMACRET=8;                          /* MACRO ERROR */          00481200
*      END;                                                             00481300
*  IF NUMBER(INTOKEN)>1                      /* CHECK POSITIONALS */    00481400
*    THEN                                                               00481500
*      DO;                                                              00481600
*        ZMS=' 8, "INTOKEN'||                /**KPOSP* MSG*/            00481700
*            INTOKEN||                                                  00481800
*            '" "INTOKEN"'||                                            00481900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00482000
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00482100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00482200
*        ZMACRET=8;                          /* MACRO ERROR */          00482300
*      END;                                                             00482400
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00482500
*  ZXINTOKEN='INPUT';                        /* SET IN/OUTPUT */        00482600
*  XINTOKEN='NO_INPUT_TOKEN';                /* SET DEFAULT */          00482700
*  IF INTOKEN(1)^=''                         /* CHECK FOR NULL */       00482800
*    THEN                                                               00482900
*      XINTOKEN=INTOKEN(1);                  /* SET XVARIABLE */        00483000
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00483100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00483200
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00483300
*  IF REQUEST(1)='OPTIONS'                   /* CHECK FOR KEYWORD */    00483400
*    THEN                                                               00483500
*      DO;                                                              00483600
*        XREQUEST='OPTIONS';                 /* SET XVARIABLE */        00483700
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00483800
*          THEN                                                         00483900
*            DO;                                                        00484000
*              ZMS=' 8, "REQUEST'||          /**KPOSP* MSG*/            00484100
*                  REQUEST||                                            00484200
*                  '" "REQUEST"'||                                      00484300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00484400
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00484500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00484600
*              ZMACRET=8;                    /* MACRO ERROR */          00484700
*            END;                                                       00484800
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00484900
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00485000
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00485100
*          THEN                                                         00485200
*            ZCVAL=ZCVAL||',CONSNAME';       /* INCORRECT KEY USED */   00485300
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00485400
*          THEN                                                         00485500
*            ZCVAL=ZCVAL||',INITRTN';        /* INCORRECT KEY USED */   00485600
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00485700
*          THEN                                                         00485800
*            ZCVAL=ZCVAL||',INITPARM';       /* INCORRECT KEY USED */   00485900
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00486000
*          THEN                                                         00486100
*            ZCVAL=ZCVAL||',INITPLEN';       /* INCORRECT KEY USED */   00486200
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00486300
*          THEN                                                         00486400
*            ZCVAL=ZCVAL||',INTOKEN';        /* INCORRECT KEY USED */   00486500
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00486600
*          THEN                                                         00486700
*            ZCVAL=ZCVAL||',OUTTOKEN';       /* INCORRECT KEY USED */   00486800
*        IF SUBDATA1^=''                     /* CHECK FOR KEY */        00486900
*          THEN                                                         00487000
*            ZCVAL=ZCVAL||',SUBDATA1';       /* INCORRECT KEY USED */   00487100
*        IF SUBDATA2^=''                     /* CHECK FOR KEY */        00487200
*          THEN                                                         00487300
*            ZCVAL=ZCVAL||',SUBDATA2';       /* INCORRECT KEY USED */   00487400
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00487500
*          THEN                                                         00487600
*            ZCVAL=ZCVAL||',WORKAREA';       /* INCORRECT KEY USED */   00487700
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00487800
*          THEN                                                         00487900
*            ZCVAL=ZCVAL||',WORKASP';        /* INCORRECT KEY USED */   00488000
*        IF ZCVAL^=''                                                   00488100
*          THEN                                                         00488200
*            DO;                             /* INCORRECT KEYS USED */  00488300
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00488400
*              ZMS=' 8, "REQUEST'||          /**KMEIP* MSG*/            00488500
*                  REQUEST||'"'||                                       00488600
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00488700
*                  ' FOLLOWING KEY(S) "'||                              00488800
*                  ZCVAL||'".';                                         00488900
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00489000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00489100
*              ZMACRET=8;                    /* MACRO ERROR */          00489200
*            END;                                                       00489300
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00489400
*  IF COMMAND='COMMAND'                      /* CHECK ENTRY */          00489500
*    THEN                                                               00489600
*      DO;                                                              00489700
*        ZMS=' 8, THE "COMMAND" KEY'||       /**KOPTP* MSG*/            00489800
*            ' MUST CONTAIN ONE'||                                      00489900
*            ' (OR MORE) ARGUMENT(S).';                                 00490000
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00490100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00490200
*        ZMACRET=8;                          /* MACRO ERROR */          00490300
*      END;                                                             00490400
*  IF NUMBER(COMMAND)>1                      /* CHECK POSITIONALS */    00490500
*    THEN                                                               00490600
*      DO;                                                              00490700
*        ZMS=' 8, "COMMAND'||                /**KPOSP* MSG*/            00490800
*            COMMAND||                                                  00490900
*            '" "COMMAND"'||                                            00491000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00491100
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00491200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00491300
*        ZMACRET=8;                          /* MACRO ERROR */          00491400
*      END;                                                             00491500
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00491600
*  XCOMMAND='';                              /* RESET XVARIABLE */      00491700
*  IF COMMAND(1) = 'NO'                                                 00491800
*    THEN                                                               00491900
*      XCOMMAND = 'NO';                      /* SET XVARIABLE */        00492000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00492100
*  IF COMMAND(1) = 'YES'                                                00492200
*    THEN                                                               00492300
*      XCOMMAND = 'YES';                     /* SET XVARIABLE */        00492400
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00492500
*  ZXCOMMAND='INPUT';                        /* SET IN/OUTPUT */        00492600
*  IF XCOMMAND=''                            /* CHECK FOR KEYWORD */    00492700
*    THEN                                                               00492800
*      DO;                                   /* KEYWORD NOT ENTERED */  00492900
*        XCOMMAND='NO';                      /* SET DEFAULT */          00493000
*        IF COMMAND(1)^=''                                              00493100
*          THEN                                                         00493200
*            DO;                                                        00493300
*              ZXCOMMAND='';                 /* RESET IN/OUTPUT */      00493400
*              ZMS=' 8, "COMMAND'||          /**KUKWP* MSG*/            00493500
*                  COMMAND||'"'||                                       00493600
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00493700
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00493800
*                  ' "NO"'||                 /* VALID KEYWORD */        00493900
*                  ' OR "YES".';             /* VALID KEYWORD */        00494000
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00494100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00494200
*              ZMACRET=8;                    /* MACRO ERROR */          00494300
*            END;                                                       00494400
*      END;                                                             00494500
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00494600
*  IF REQDSUB='REQDSUB'                      /* CHECK ENTRY */          00494700
*    THEN                                                               00494800
*      DO;                                                              00494900
*        ZMS=' 8, THE "REQDSUB" KEY'||       /**KOPTP* MSG*/            00495000
*            ' MUST CONTAIN ONE'||                                      00495100
*            ' (OR MORE) ARGUMENT(S).';                                 00495200
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00495300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00495400
*        ZMACRET=8;                          /* MACRO ERROR */          00495500
*      END;                                                             00495600
*  IF NUMBER(REQDSUB)>1                      /* CHECK POSITIONALS */    00495700
*    THEN                                                               00495800
*      DO;                                                              00495900
*        ZMS=' 8, "REQDSUB'||                /**KPOSP* MSG*/            00496000
*            REQDSUB||                                                  00496100
*            '" "REQDSUB"'||                                            00496200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00496300
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00496400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00496500
*        ZMACRET=8;                          /* MACRO ERROR */          00496600
*      END;                                                             00496700
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00496800
*  XREQDSUB='';                              /* RESET XVARIABLE */      00496900
*  IF REQDSUB(1) = 'MSTR'                                               00497000
*    THEN                                                               00497100
*      XREQDSUB = 'MSTR';                    /* SET XVARIABLE */        00497200
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00497300
*  IF REQDSUB(1) = 'PRI'                                                00497400
*    THEN                                                               00497500
*      XREQDSUB = 'PRI';                     /* SET XVARIABLE */        00497600
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00497700
*  ZXREQDSUB='INPUT';                        /* SET IN/OUTPUT */        00497800
*  IF XREQDSUB=''                            /* CHECK FOR KEYWORD */    00497900
*    THEN                                                               00498000
*      DO;                                   /* KEYWORD NOT ENTERED */  00498100
*        XREQDSUB='MSTR';                    /* SET DEFAULT */          00498200
*        IF REQDSUB(1)^=''                                              00498300
*          THEN                                                         00498400
*            DO;                                                        00498500
*              ZXREQDSUB='';                 /* RESET IN/OUTPUT */      00498600
*              ZMS=' 8, "REQDSUB'||          /**KUKWP* MSG*/            00498700
*                  REQDSUB||'"'||                                       00498800
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00498900
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00499000
*                  ' "MSTR"'||               /* VALID KEYWORD */        00499100
*                  ' OR "PRI".';             /* VALID KEYWORD */        00499200
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00499300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00499400
*              ZMACRET=8;                    /* MACRO ERROR */          00499500
*            END;                                                       00499600
*      END;                                                             00499700
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00499800
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00499900
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00500000
*  IF REQUEST(1)='DEACTIVATE'                /* CHECK FOR KEYWORD */    00500100
*    THEN                                                               00500200
*      DO;                                                              00500300
*        XREQUEST='DEACTIVATE';              /* SET XVARIABLE */        00500400
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00500500
*          THEN                                                         00500600
*            DO;                                                        00500700
*              ZMS=' 8, "REQUEST'||          /**KPOSP* MSG*/            00500800
*                  REQUEST||                                            00500900
*                  '" "REQUEST"'||                                      00501000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00501100
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00501200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00501300
*              ZMACRET=8;                    /* MACRO ERROR */          00501400
*            END;                                                       00501500
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00501600
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00501700
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00501800
*          THEN                                                         00501900
*            ZCVAL=ZCVAL||',CONSNAME';       /* INCORRECT KEY USED */   00502000
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00502100
*          THEN                                                         00502200
*            ZCVAL=ZCVAL||',INITRTN';        /* INCORRECT KEY USED */   00502300
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00502400
*          THEN                                                         00502500
*            ZCVAL=ZCVAL||',INITPARM';       /* INCORRECT KEY USED */   00502600
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00502700
*          THEN                                                         00502800
*            ZCVAL=ZCVAL||',INITPLEN';       /* INCORRECT KEY USED */   00502900
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00503000
*          THEN                                                         00503100
*            ZCVAL=ZCVAL||',INTOKEN';        /* INCORRECT KEY USED */   00503200
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00503300
*          THEN                                                         00503400
*            ZCVAL=ZCVAL||',COMMAND';        /* INCORRECT KEY USED */   00503500
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00503600
*          THEN                                                         00503700
*            ZCVAL=ZCVAL||',REQDSUB';        /* INCORRECT KEY USED */   00503800
*        IF SUBDATA1^=''                     /* CHECK FOR KEY */        00503900
*          THEN                                                         00504000
*            ZCVAL=ZCVAL||',SUBDATA1';       /* INCORRECT KEY USED */   00504100
*        IF SUBDATA2^=''                     /* CHECK FOR KEY */        00504200
*          THEN                                                         00504300
*            ZCVAL=ZCVAL||',SUBDATA2';       /* INCORRECT KEY USED */   00504400
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00504500
*          THEN                                                         00504600
*            ZCVAL=ZCVAL||',WORKAREA';       /* INCORRECT KEY USED */   00504700
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00504800
*          THEN                                                         00504900
*            ZCVAL=ZCVAL||',WORKASP';        /* INCORRECT KEY USED */   00505000
*        IF ZCVAL^=''                                                   00505100
*          THEN                                                         00505200
*            DO;                             /* INCORRECT KEYS USED */  00505300
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00505400
*              ZMS=' 8, "REQUEST'||          /**KMEIP* MSG*/            00505500
*                  REQUEST||'"'||                                       00505600
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00505700
*                  ' FOLLOWING KEY(S) "'||                              00505800
*                  ZCVAL||'".';                                         00505900
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00506000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00506100
*              ZMACRET=8;                    /* MACRO ERROR */          00506200
*            END;                                                       00506300
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00506400
*  IF OUTTOKEN='OUTTOKEN' | OUTTOKEN='()'    /*CHECK ENTRY*/            00506500
*    THEN                                                               00506600
*      DO;                                                              00506700
*        ZMS=' 8, THE "OUTTOKEN" KEY'||      /**KOPTP* MSG*/            00506800
*            ' MUST CONTAIN ONE'||                                      00506900
*            ' (OR MORE) ARGUMENT(S).';                                 00507000
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00507100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00507200
*        ZMACRET=8;                          /* MACRO ERROR */          00507300
*      END;                                                             00507400
*  IF NUMBER(OUTTOKEN)>1                     /* CHECK POSITIONALS */    00507500
*    THEN                                                               00507600
*      DO;                                                              00507700
*        ZMS=' 8, "OUTTOKEN'||               /**KPOSP* MSG*/            00507800
*            OUTTOKEN||                                                 00507900
*            '" "OUTTOKEN"'||                                           00508000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00508100
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00508200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00508300
*        ZMACRET=8;                          /* MACRO ERROR */          00508400
*      END;                                                             00508500
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00508600
*  IF OUTTOKEN(1)^=''                        /* CHECK FOR NULL */       00508700
*    THEN                                                               00508800
*      DO;                                                              00508900
*        XOUTTOKEN=OUTTOKEN(1);              /* SET XVARIABLE */        00509000
*        ZXOUTTOKEN='OUTPUT';                /* SET OUTPUT */           00509100
*      END;                                                             00509200
*  ELSE                                                                 00509300
*    IF ZXOUTTOKEN^=''                                                  00509400
*      THEN                                                             00509500
*        ZXOUTTOKEN='';                      /* RESET OUTPUT */         00509600
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00509700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00509800
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00509900
*  IF REQUEST(1)='SWAP'                      /* CHECK FOR KEYWORD */    00510000
*    THEN                                                               00510100
*      DO;                                                              00510200
*        XREQUEST='SWAP';                    /* SET XVARIABLE */        00510300
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00510400
*          THEN                                                         00510500
*            DO;                                                        00510600
*              ZMS=' 8, "REQUEST'||          /**KPOSP* MSG*/            00510700
*                  REQUEST||                                            00510800
*                  '" "REQUEST"'||                                      00510900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00511000
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00511100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00511200
*              ZMACRET=8;                    /* MACRO ERROR */          00511300
*            END;                                                       00511400
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00511500
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00511600
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00511700
*          THEN                                                         00511800
*            ZCVAL=ZCVAL||',CONSNAME';       /* INCORRECT KEY USED */   00511900
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00512000
*          THEN                                                         00512100
*            ZCVAL=ZCVAL||',INITRTN';        /* INCORRECT KEY USED */   00512200
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00512300
*          THEN                                                         00512400
*            ZCVAL=ZCVAL||',INITPARM';       /* INCORRECT KEY USED */   00512500
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00512600
*          THEN                                                         00512700
*            ZCVAL=ZCVAL||',INITPLEN';       /* INCORRECT KEY USED */   00512800
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00512900
*          THEN                                                         00513000
*            ZCVAL=ZCVAL||',COMMAND';        /* INCORRECT KEY USED */   00513100
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00513200
*          THEN                                                         00513300
*            ZCVAL=ZCVAL||',REQDSUB';        /* INCORRECT KEY USED */   00513400
*        IF SUBDATA1^=''                     /* CHECK FOR KEY */        00513500
*          THEN                                                         00513600
*            ZCVAL=ZCVAL||',SUBDATA1';       /* INCORRECT KEY USED */   00513700
*        IF SUBDATA2^=''                     /* CHECK FOR KEY */        00513800
*          THEN                                                         00513900
*            ZCVAL=ZCVAL||',SUBDATA2';       /* INCORRECT KEY USED */   00514000
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00514100
*          THEN                                                         00514200
*            ZCVAL=ZCVAL||',WORKAREA';       /* INCORRECT KEY USED */   00514300
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00514400
*          THEN                                                         00514500
*            ZCVAL=ZCVAL||',WORKASP';        /* INCORRECT KEY USED */   00514600
*        IF ZCVAL^=''                                                   00514700
*          THEN                                                         00514800
*            DO;                             /* INCORRECT KEYS USED */  00514900
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00515000
*              ZMS=' 8, "REQUEST'||          /**KMEIP* MSG*/            00515100
*                  REQUEST||'"'||                                       00515200
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00515300
*                  ' FOLLOWING KEY(S) "'||                              00515400
*                  ZCVAL||'".';                                         00515500
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00515600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00515700
*              ZMACRET=8;                    /* MACRO ERROR */          00515800
*            END;                                                       00515900
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00516000
*  IF INTOKEN='INTOKEN' | INTOKEN='()'       /*CHECK ENTRY*/            00516100
*    THEN                                                               00516200
*      DO;                                                              00516300
*        ZMS=' 8, THE "INTOKEN" KEY'||       /**KOPTP* MSG*/            00516400
*            ' MUST CONTAIN ONE'||                                      00516500
*            ' (OR MORE) ARGUMENT(S).';                                 00516600
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00516700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00516800
*        ZMACRET=8;                          /* MACRO ERROR */          00516900
*      END;                                                             00517000
*  IF NUMBER(INTOKEN)>1                      /* CHECK POSITIONALS */    00517100
*    THEN                                                               00517200
*      DO;                                                              00517300
*        ZMS=' 8, "INTOKEN'||                /**KPOSP* MSG*/            00517400
*            INTOKEN||                                                  00517500
*            '" "INTOKEN"'||                                            00517600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00517700
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00517800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00517900
*        ZMACRET=8;                          /* MACRO ERROR */          00518000
*      END;                                                             00518100
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00518200
*  ZXINTOKEN='INPUT';                        /* SET IN/OUTPUT */        00518300
*  XINTOKEN='NO_INPUT_TOKEN';                /* SET DEFAULT */          00518400
*  IF INTOKEN(1)^=''                         /* CHECK FOR NULL */       00518500
*    THEN                                                               00518600
*      XINTOKEN=INTOKEN(1);                  /* SET XVARIABLE */        00518700
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00518800
*  IF OUTTOKEN='OUTTOKEN' | OUTTOKEN='()'    /*CHECK ENTRY*/            00518900
*    THEN                                                               00519000
*      DO;                                                              00519100
*        ZMS=' 8, THE "OUTTOKEN" KEY'||      /**KOPTP* MSG*/            00519200
*            ' MUST CONTAIN ONE'||                                      00519300
*            ' (OR MORE) ARGUMENT(S).';                                 00519400
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00519500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00519600
*        ZMACRET=8;                          /* MACRO ERROR */          00519700
*      END;                                                             00519800
*  IF NUMBER(OUTTOKEN)>1                     /* CHECK POSITIONALS */    00519900
*    THEN                                                               00520000
*      DO;                                                              00520100
*        ZMS=' 8, "OUTTOKEN'||               /**KPOSP* MSG*/            00520200
*            OUTTOKEN||                                                 00520300
*            '" "OUTTOKEN"'||                                           00520400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00520500
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00520600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00520700
*        ZMACRET=8;                          /* MACRO ERROR */          00520800
*      END;                                                             00520900
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00521000
*  IF OUTTOKEN(1)^=''                        /* CHECK FOR NULL */       00521100
*    THEN                                                               00521200
*      DO;                                                              00521300
*        XOUTTOKEN=OUTTOKEN(1);              /* SET XVARIABLE */        00521400
*        ZXOUTTOKEN='OUTPUT';                /* SET OUTPUT */           00521500
*      END;                                                             00521600
*  ELSE                                                                 00521700
*    IF ZXOUTTOKEN^=''                                                  00521800
*      THEN                                                             00521900
*        ZXOUTTOKEN='';                      /* RESET OUTPUT */         00522000
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00522100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00522200
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00522300
*  IF REQUEST(1)='PUT'                       /* CHECK FOR KEYWORD */    00522400
*    THEN                                                               00522500
*      DO;                                                              00522600
*        XREQUEST='PUT';                     /* SET XVARIABLE */        00522700
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00522800
*          THEN                                                         00522900
*            DO;                                                        00523000
*              ZMS=' 8, "REQUEST'||          /**KPOSP* MSG*/            00523100
*                  REQUEST||                                            00523200
*                  '" "REQUEST"'||                                      00523300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00523400
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00523500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00523600
*              ZMACRET=8;                    /* MACRO ERROR */          00523700
*            END;                                                       00523800
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00523900
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00524000
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00524100
*          THEN                                                         00524200
*            ZCVAL=ZCVAL||',CONSNAME';       /* INCORRECT KEY USED */   00524300
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00524400
*          THEN                                                         00524500
*            ZCVAL=ZCVAL||',INITRTN';        /* INCORRECT KEY USED */   00524600
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00524700
*          THEN                                                         00524800
*            ZCVAL=ZCVAL||',INITPARM';       /* INCORRECT KEY USED */   00524900
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00525000
*          THEN                                                         00525100
*            ZCVAL=ZCVAL||',INITPLEN';       /* INCORRECT KEY USED */   00525200
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00525300
*          THEN                                                         00525400
*            ZCVAL=ZCVAL||',INTOKEN';        /* INCORRECT KEY USED */   00525500
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00525600
*          THEN                                                         00525700
*            ZCVAL=ZCVAL||',COMMAND';        /* INCORRECT KEY USED */   00525800
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00525900
*          THEN                                                         00526000
*            ZCVAL=ZCVAL||',REQDSUB';        /* INCORRECT KEY USED */   00526100
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00526200
*          THEN                                                         00526300
*            ZCVAL=ZCVAL||',OUTTOKEN';       /* INCORRECT KEY USED */   00526400
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00526500
*          THEN                                                         00526600
*            ZCVAL=ZCVAL||',WORKAREA';       /* INCORRECT KEY USED */   00526700
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00526800
*          THEN                                                         00526900
*            ZCVAL=ZCVAL||',WORKASP';        /* INCORRECT KEY USED */   00527000
*        IF ZCVAL^=''                                                   00527100
*          THEN                                                         00527200
*            DO;                             /* INCORRECT KEYS USED */  00527300
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00527400
*              ZMS=' 8, "REQUEST'||          /**KMEIP* MSG*/            00527500
*                  REQUEST||'"'||                                       00527600
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00527700
*                  ' FOLLOWING KEY(S) "'||                              00527800
*                  ZCVAL||'".';                                         00527900
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00528000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00528100
*              ZMACRET=8;                    /* MACRO ERROR */          00528200
*            END;                                                       00528300
*/*PG.KMGRP01 NAME,  INPUT, ME GROUP -EXCESSIVE ARGUMENTS ---------- */ 00528400
*  IF SUBDATA1='SUBDATA1'                    /* CHECK ENTRY */          00528500
*    THEN                                                               00528600
*      DO;                                                              00528700
*        ZMS=' 8, THE "SUBDATA1" KEY'||      /**KOPTP* MSG*/            00528800
*            ' MUST CONTAIN ONE'||                                      00528900
*            ' (OR MORE) ARGUMENT(S).';                                 00529000
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00529100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00529200
*        ZMACRET=8;                          /* MACRO ERROR */          00529300
*      END;                                                             00529400
*  IF NUMBER(SUBDATA1)>1                     /* CHECK POSITIONALS */    00529500
*    THEN                                                               00529600
*      DO;                                                              00529700
*        ZMS=' 8, "SUBDATA1'||               /**KPOSP* MSG*/            00529800
*            SUBDATA1||                                                 00529900
*            '" "SUBDATA1"'||                                           00530000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00530100
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00530200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00530300
*        ZMACRET=8;                          /* MACRO ERROR */          00530400
*      END;                                                             00530500
*/*PG.KMGRP03 NAME,  INPUT, ME GROUP -XVARIABLE -------------------- */ 00530600
*  ZXSUBDATA1='INPUT';                       /* SET IN/OUTPUT */        00530700
*  XSUBDATA1=SUBDATA1(1);                    /* SET XVARIABLE */        00530800
*  IF SUBDATA1(1)=''                         /* CHECK FOR NULL */       00530900
*    THEN                                                               00531000
*        ZXSUBDATA1='';                      /* RESET IN/OUTPUT */      00531100
*/*PG.KMGRP01 NAME,  INPUT, ME GROUP -EXCESSIVE ARGUMENTS ---------- */ 00531200
*  IF SUBDATA2='SUBDATA2'                    /* CHECK ENTRY */          00531300
*    THEN                                                               00531400
*      DO;                                                              00531500
*        ZMS=' 8, THE "SUBDATA2" KEY'||      /**KOPTP* MSG*/            00531600
*            ' MUST CONTAIN ONE'||                                      00531700
*            ' (OR MORE) ARGUMENT(S).';                                 00531800
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00531900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00532000
*        ZMACRET=8;                          /* MACRO ERROR */          00532100
*      END;                                                             00532200
*  IF NUMBER(SUBDATA2)>1                     /* CHECK POSITIONALS */    00532300
*    THEN                                                               00532400
*      DO;                                                              00532500
*        ZMS=' 8, "SUBDATA2'||               /**KPOSP* MSG*/            00532600
*            SUBDATA2||                                                 00532700
*            '" "SUBDATA2"'||                                           00532800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00532900
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00533000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00533100
*        ZMACRET=8;                          /* MACRO ERROR */          00533200
*      END;                                                             00533300
*/*PG.KMGRP03 NAME,  INPUT, ME GROUP -XVARIABLE -------------------- */ 00533400
*  ZXSUBDATA2='INPUT';                       /* SET IN/OUTPUT */        00533500
*  XSUBDATA2=SUBDATA2(1);                    /* SET XVARIABLE */        00533600
*  IF SUBDATA2(1)=''                         /* CHECK FOR NULL */       00533700
*    THEN                                                               00533800
*        ZXSUBDATA2='';                      /* RESET IN/OUTPUT */      00533900
*/*PG.KMGRP11 NAME,  INPUT, ME GROUP -AT LEAST ONE SPECIFIED ------- */ 00534000
*  IF SUBDATA1='' &                                                     00534100
*     SUBDATA2=''                                                       00534200
*    THEN                                                               00534300
*      DO;                                   /* SPECIFY GROUP */        00534400
*        ZMS=' 8, ONE OR MORE OF THE'||      /**MGRPP* MSG*/            00534500
*            ' FOLLOWING KEY(S) IS REQUIRED: "'||                       00534600
*            'SUBDATA1,'||                                              00534700
*            ' SUBDATA2'||'".';                                         00534800
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00534900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00535000
*        ZMACRET=8;                          /* MACRO ERROR */          00535100
*      END;                                                             00535200
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00535300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00535400
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00535500
*  IF REQUEST(1)='GET'                       /* CHECK FOR KEYWORD */    00535600
*    THEN                                                               00535700
*      DO;                                                              00535800
*        XREQUEST='GET';                     /* SET XVARIABLE */        00535900
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00536000
*          THEN                                                         00536100
*            DO;                                                        00536200
*              ZMS=' 8, "REQUEST'||          /**KPOSP* MSG*/            00536300
*                  REQUEST||                                            00536400
*                  '" "REQUEST"'||                                      00536500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00536600
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00536700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00536800
*              ZMACRET=8;                    /* MACRO ERROR */          00536900
*            END;                                                       00537000
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00537100
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00537200
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00537300
*          THEN                                                         00537400
*            ZCVAL=ZCVAL||',CONSNAME';       /* INCORRECT KEY USED */   00537500
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00537600
*          THEN                                                         00537700
*            ZCVAL=ZCVAL||',INITRTN';        /* INCORRECT KEY USED */   00537800
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00537900
*          THEN                                                         00538000
*            ZCVAL=ZCVAL||',INITPARM';       /* INCORRECT KEY USED */   00538100
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00538200
*          THEN                                                         00538300
*            ZCVAL=ZCVAL||',INITPLEN';       /* INCORRECT KEY USED */   00538400
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00538500
*          THEN                                                         00538600
*            ZCVAL=ZCVAL||',INTOKEN';        /* INCORRECT KEY USED */   00538700
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00538800
*          THEN                                                         00538900
*            ZCVAL=ZCVAL||',COMMAND';        /* INCORRECT KEY USED */   00539000
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00539100
*          THEN                                                         00539200
*            ZCVAL=ZCVAL||',REQDSUB';        /* INCORRECT KEY USED */   00539300
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00539400
*          THEN                                                         00539500
*            ZCVAL=ZCVAL||',OUTTOKEN';       /* INCORRECT KEY USED */   00539600
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00539700
*          THEN                                                         00539800
*            ZCVAL=ZCVAL||',WORKAREA';       /* INCORRECT KEY USED */   00539900
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00540000
*          THEN                                                         00540100
*            ZCVAL=ZCVAL||',WORKASP';        /* INCORRECT KEY USED */   00540200
*        IF ZCVAL^=''                                                   00540300
*          THEN                                                         00540400
*            DO;                             /* INCORRECT KEYS USED */  00540500
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00540600
*              ZMS=' 8, "REQUEST'||          /**KMEIP* MSG*/            00540700
*                  REQUEST||'"'||                                       00540800
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00540900
*                  ' FOLLOWING KEY(S) "'||                              00541000
*                  ZCVAL||'".';                                         00541100
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00541200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00541300
*              ZMACRET=8;                    /* MACRO ERROR */          00541400
*            END;                                                       00541500
*/*PG.KMGRP01 NAME,  OUTPUT, ME GROUP -EXCESSIVE ARGUMENTS --------- */ 00541600
*  IF SUBDATA1='SUBDATA1'                    /* CHECK ENTRY */          00541700
*    THEN                                                               00541800
*      DO;                                                              00541900
*        ZMS=' 8, THE "SUBDATA1" KEY'||      /**KOPTP* MSG*/            00542000
*            ' MUST CONTAIN ONE'||                                      00542100
*            ' (OR MORE) ARGUMENT(S).';                                 00542200
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00542300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00542400
*        ZMACRET=8;                          /* MACRO ERROR */          00542500
*      END;                                                             00542600
*  IF NUMBER(SUBDATA1)>1                     /* CHECK POSITIONALS */    00542700
*    THEN                                                               00542800
*      DO;                                                              00542900
*        ZMS=' 8, "SUBDATA1'||               /**KPOSP* MSG*/            00543000
*            SUBDATA1||                                                 00543100
*            '" "SUBDATA1"'||                                           00543200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00543300
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00543400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00543500
*        ZMACRET=8;                          /* MACRO ERROR */          00543600
*      END;                                                             00543700
*/*PG.KMGRP03 NAME,  OUTPUT, ME GROUP -XVARIABLE ------------------- */ 00543800
*  ZXSUBDATA1='OUTPUT';                      /* SET IN/OUTPUT */        00543900
*  XSUBDATA1=SUBDATA1(1);                    /* SET XVARIABLE */        00544000
*  IF SUBDATA1(1)=''                         /* CHECK FOR NULL */       00544100
*    THEN                                                               00544200
*        ZXSUBDATA1='';                      /* RESET IN/OUTPUT */      00544300
*/*PG.KMGRP01 NAME,  OUTPUT, ME GROUP -EXCESSIVE ARGUMENTS --------- */ 00544400
*  IF SUBDATA2='SUBDATA2'                    /* CHECK ENTRY */          00544500
*    THEN                                                               00544600
*      DO;                                                              00544700
*        ZMS=' 8, THE "SUBDATA2" KEY'||      /**KOPTP* MSG*/            00544800
*            ' MUST CONTAIN ONE'||                                      00544900
*            ' (OR MORE) ARGUMENT(S).';                                 00545000
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00545100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00545200
*        ZMACRET=8;                          /* MACRO ERROR */          00545300
*      END;                                                             00545400
*  IF NUMBER(SUBDATA2)>1                     /* CHECK POSITIONALS */    00545500
*    THEN                                                               00545600
*      DO;                                                              00545700
*        ZMS=' 8, "SUBDATA2'||               /**KPOSP* MSG*/            00545800
*            SUBDATA2||                                                 00545900
*            '" "SUBDATA2"'||                                           00546000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00546100
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00546200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00546300
*        ZMACRET=8;                          /* MACRO ERROR */          00546400
*      END;                                                             00546500
*/*PG.KMGRP03 NAME,  OUTPUT, ME GROUP -XVARIABLE ------------------- */ 00546600
*  ZXSUBDATA2='OUTPUT';                      /* SET IN/OUTPUT */        00546700
*  XSUBDATA2=SUBDATA2(1);                    /* SET XVARIABLE */        00546800
*  IF SUBDATA2(1)=''                         /* CHECK FOR NULL */       00546900
*    THEN                                                               00547000
*        ZXSUBDATA2='';                      /* RESET IN/OUTPUT */      00547100
*/*PG.KMGRP11 NAME,  OUTPUT, ME GROUP -AT LEAST ONE SPECIFIED ------ */ 00547200
*  IF SUBDATA1='' &                                                     00547300
*     SUBDATA2=''                                                       00547400
*    THEN                                                               00547500
*      DO;                                   /* SPECIFY GROUP */        00547600
*        ZMS=' 8, ONE OR MORE OF THE'||      /**MGRPP* MSG*/            00547700
*            ' FOLLOWING KEY(S) IS REQUIRED: "'||                       00547800
*            'SUBDATA1,'||                                              00547900
*            ' SUBDATA2'||'".';                                         00548000
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00548100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00548200
*        ZMACRET=8;                          /* MACRO ERROR */          00548300
*      END;                                                             00548400
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00548500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00548600
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00548700
*  IF REQUEST(1)='QUERY'                     /* CHECK FOR KEYWORD */    00548800
*    THEN                                                               00548900
*      DO;                                                              00549000
*        XREQUEST='QUERY';                   /* SET XVARIABLE */        00549100
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00549200
*          THEN                                                         00549300
*            DO;                                                        00549400
*              ZMS=' 8, "REQUEST'||          /**KPOSP* MSG*/            00549500
*                  REQUEST||                                            00549600
*                  '" "REQUEST"'||                                      00549700
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00549800
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00549900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00550000
*              ZMACRET=8;                    /* MACRO ERROR */          00550100
*            END;                                                       00550200
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00550300
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00550400
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00550500
*          THEN                                                         00550600
*            ZCVAL=ZCVAL||',CONSNAME';       /* INCORRECT KEY USED */   00550700
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00550800
*          THEN                                                         00550900
*            ZCVAL=ZCVAL||',INITRTN';        /* INCORRECT KEY USED */   00551000
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00551100
*          THEN                                                         00551200
*            ZCVAL=ZCVAL||',INITPARM';       /* INCORRECT KEY USED */   00551300
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00551400
*          THEN                                                         00551500
*            ZCVAL=ZCVAL||',INITPLEN';       /* INCORRECT KEY USED */   00551600
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00551700
*          THEN                                                         00551800
*            ZCVAL=ZCVAL||',INTOKEN';        /* INCORRECT KEY USED */   00551900
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00552000
*          THEN                                                         00552100
*            ZCVAL=ZCVAL||',COMMAND';        /* INCORRECT KEY USED */   00552200
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00552300
*          THEN                                                         00552400
*            ZCVAL=ZCVAL||',REQDSUB';        /* INCORRECT KEY USED */   00552500
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00552600
*          THEN                                                         00552700
*            ZCVAL=ZCVAL||',OUTTOKEN';       /* INCORRECT KEY USED */   00552800
*        IF SUBDATA1^=''                     /* CHECK FOR KEY */        00552900
*          THEN                                                         00553000
*            ZCVAL=ZCVAL||',SUBDATA1';       /* INCORRECT KEY USED */   00553100
*        IF SUBDATA2^=''                     /* CHECK FOR KEY */        00553200
*          THEN                                                         00553300
*            ZCVAL=ZCVAL||',SUBDATA2';       /* INCORRECT KEY USED */   00553400
*        IF ZCVAL^=''                                                   00553500
*          THEN                                                         00553600
*            DO;                             /* INCORRECT KEYS USED */  00553700
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00553800
*              ZMS=' 8, "REQUEST'||          /**KMEIP* MSG*/            00553900
*                  REQUEST||'"'||                                       00554000
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00554100
*                  ' FOLLOWING KEY(S) "'||                              00554200
*                  ZCVAL||'".';                                         00554300
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00554400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00554500
*              ZMACRET=8;                    /* MACRO ERROR */          00554600
*            END;                                                       00554700
*/*PG.KXVAR01 NAME, RQD OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00554800
*  IF NUMBER(WORKAREA)>1                     /* CHECK POSITIONALS */    00554900
*    THEN                                                               00555000
*      DO;                                                              00555100
*        ZMS=' 8, "WORKAREA'||               /**KPOSP* MSG*/            00555200
*            WORKAREA||                                                 00555300
*            '" "WORKAREA"'||                                           00555400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00555500
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00555600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00555700
*        ZMACRET=8;                          /* MACRO ERROR */          00555800
*      END;                                                             00555900
*/*PG.KXVAR03 NAME, RQD OUTPUT, KEYS -XVARIABLE----------------------*/ 00556000
*  XWORKAREA=WORKAREA(1);                    /* SET XVARIABLE */        00556100
*  IF WORKAREA(1)=''                         /* CHECK FOR NULL */       00556200
*   THEN                                                                00556300
*    DO;                                     /* KEY IS REQUIRED */      00556400
*        ZXWORKAREA='';                      /* RESET IN/OUTPUT */      00556500
*        ZMS=' 8,  '||                                                  00556600
*            ' "WORKAREA" KEY AND ITS ARGUMENT'||                       00556700
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00556800
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00556900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00557000
*        ZMACRET=8;                          /* MACRO ERROR */          00557100
*    END;                                                               00557200
*  ELSE                                                                 00557300
*    ZXWORKAREA='OUTPUT';                    /* SET IN/OUTPUT */        00557400
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00557500
*  IF WORKASP='WORKASP' | WORKASP='()'       /*CHECK ENTRY*/            00557600
*    THEN                                                               00557700
*      DO;                                                              00557800
*        ZMS=' 8, THE "WORKASP" KEY'||       /**KOPTP* MSG*/            00557900
*            ' MUST CONTAIN ONE'||                                      00558000
*            ' (OR MORE) ARGUMENT(S).';                                 00558100
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00558200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00558300
*        ZMACRET=8;                          /* MACRO ERROR */          00558400
*      END;                                                             00558500
*  IF NUMBER(WORKASP)>1                      /* CHECK POSITIONALS */    00558600
*    THEN                                                               00558700
*      DO;                                                              00558800
*        ZMS=' 8, "WORKASP'||                /**KPOSP* MSG*/            00558900
*            WORKASP||                                                  00559000
*            '" "WORKASP"'||                                            00559100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00559200
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00559300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00559400
*        ZMACRET=8;                          /* MACRO ERROR */          00559500
*      END;                                                             00559600
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00559700
*  ZXWORKASP='INPUT';                        /* SET IN/OUTPUT */        00559800
*  XWORKASP='0';                             /* SET DEFAULT */          00559900
*  IF WORKASP(1)^=''                         /* CHECK FOR NULL */       00560000
*    THEN                                                               00560100
*      XWORKASP=WORKASP(1);                  /* SET XVARIABLE */        00560200
*/*PG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00560300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00560400
*/*PG.KKCTL06 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00560500
*  IF REQUEST='REQUEST'                                                 00560600
*    | REQUEST='()'                          /*CHECK ENTRY*/            00560700
*     THEN                                                              00560800
*       DO;                                                             00560900
*              ZMS=' 8, THE "REQUEST" KEY'|| /**KOPTP* MSG*/            00561000
*                  ' MUST CONTAIN ONE'||                                00561100
*                  ' (OR MORE) ARGUMENT(S).';                           00561200
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00561300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00561400
*              ZMACRET=8;                    /* MACRO ERROR */          00561500
*       END;                                                            00561600
*  ELSE                                                                 00561700
*    DO;                                                                00561800
*      ZXREQUEST='INPUT';                    /* SET IN/OUTPUT */        00561900
*      IF XREQUEST=''                        /* CHECK FOR KEYWORD */    00562000
*        THEN                                                           00562100
*          DO;                               /* KEYWORD NOT ENTERED */  00562200
*            XREQUEST='ADD';                 /* SET DEFAULT */          00562300
*            IF REQUEST(1)^=''               /* CHECK FOR KEYWORD */    00562400
*              THEN                                                     00562500
*                DO;                                                    00562600
*                  ZXREQUEST='';             /* RESET IN/OUTPUT */      00562700
*              ZMS=' 8, "REQUEST'||          /**KUKWP* MSG*/            00562800
*                  REQUEST||'"'||                                       00562900
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00563000
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00563100
*                  ' "ADD",'||               /* VALID KEYWORD */        00563200
*                  ' "ACTIVATE",'||          /* VALID KEYWORD */        00563300
*                  ' "OPTIONS",'||           /* VALID KEYWORD */        00563400
*                  ' "DEACTIVATE",'||        /* VALID KEYWORD */        00563500
*                  ' "SWAP",'||              /* VALID KEYWORD */        00563600
*                  ' "PUT",'||               /* VALID KEYWORD */        00563700
*                  ' "GET",'||               /* VALID KEYWORD */        00563800
*                  ' OR "QUERY".';           /* VALID KEYWORD */        00563900
*              ANS MSG('?IEFSSI ---> '||ZMS);                           00564000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00564100
*              ZMACRET=8;                    /* MACRO ERROR */          00564200
*                END;                                                   00564300
*          END;                                                         00564400
*    END;                                                               00564500
*/*PG.KKCTL07 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00564600
*  IF REQUEST(1)=''                          /* CHECK FOR KEYWORD */    00564700
*    THEN                                                               00564800
*      DO;                                                              00564900
*        ZXREQUEST='';                       /* RESET IN/OUTPUT */      00565000
*        ZMS=' 8, THE'||                     /**KRKWP* MSG*/            00565100
*            ' "REQUEST" KEY AND ITS ARGUMENT'||                        00565200
*            ' ARE REQUIRED.'||                                         00565300
*            ' VALID KEYWORD CHOICE(S) ARE:'||                          00565400
*            ' "ADD",'||                     /* VALID KEYWORD */        00565500
*            ' "ACTIVATE",'||                /* VALID KEYWORD */        00565600
*            ' "OPTIONS",'||                 /* VALID KEYWORD */        00565700
*            ' "DEACTIVATE",'||              /* VALID KEYWORD */        00565800
*            ' "SWAP",'||                    /* VALID KEYWORD */        00565900
*            ' "PUT",'||                     /* VALID KEYWORD */        00566000
*            ' "GET",'||                     /* VALID KEYWORD */        00566100
*            ' OR "QUERY".';                 /* VALID KEYWORD */        00566200
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00566300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00566400
*        ZMACRET=8;                          /* MACRO ERROR */          00566500
*      END;                                                             00566600
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00566700
*  IF RETCODE='RETCODE' | RETCODE='()'       /*CHECK ENTRY*/            00566800
*    THEN                                                               00566900
*      DO;                                                              00567000
*        ZMS=' 8, THE "RETCODE" KEY'||       /**KOPTP* MSG*/            00567100
*            ' MUST CONTAIN ONE'||                                      00567200
*            ' (OR MORE) ARGUMENT(S).';                                 00567300
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00567400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00567500
*        ZMACRET=8;                          /* MACRO ERROR */          00567600
*      END;                                                             00567700
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00567800
*    THEN                                                               00567900
*      DO;                                                              00568000
*        ZMS=' 8, "RETCODE'||                /**KPOSP* MSG*/            00568100
*            RETCODE||                                                  00568200
*            '" "RETCODE"'||                                            00568300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00568400
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00568500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00568600
*        ZMACRET=8;                          /* MACRO ERROR */          00568700
*      END;                                                             00568800
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00568900
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00569000
*    THEN                                                               00569100
*      DO;                                                              00569200
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00569300
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00569400
*      END;                                                             00569500
*  ELSE                                                                 00569600
*    IF ZXRETCODE^=''                                                   00569700
*      THEN                                                             00569800
*        ZXRETCODE='';                       /* RESET OUTPUT */         00569900
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00570000
*  IF RSNCODE='RSNCODE' | RSNCODE='()'       /*CHECK ENTRY*/            00570100
*    THEN                                                               00570200
*      DO;                                                              00570300
*        ZMS=' 8, THE "RSNCODE" KEY'||       /**KOPTP* MSG*/            00570400
*            ' MUST CONTAIN ONE'||                                      00570500
*            ' (OR MORE) ARGUMENT(S).';                                 00570600
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00570700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00570800
*        ZMACRET=8;                          /* MACRO ERROR */          00570900
*      END;                                                             00571000
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    00571100
*    THEN                                                               00571200
*      DO;                                                              00571300
*        ZMS=' 8, "RSNCODE'||                /**KPOSP* MSG*/            00571400
*            RSNCODE||                                                  00571500
*            '" "RSNCODE"'||                                            00571600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00571700
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00571800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00571900
*        ZMACRET=8;                          /* MACRO ERROR */          00572000
*      END;                                                             00572100
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00572200
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       00572300
*    THEN                                                               00572400
*      DO;                                                              00572500
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        00572600
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           00572700
*      END;                                                             00572800
*  ELSE                                                                 00572900
*    IF ZXRSNCODE^=''                                                   00573000
*      THEN                                                             00573100
*        ZXRSNCODE='';                       /* RESET OUTPUT */         00573200
*/*PG.KXVAR01 VALUE, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00573300
*  IF COM='COM' | COM='()'                   /*CHECK ENTRY*/            00573400
*    THEN                                                               00573500
*      DO;                                                              00573600
*        ZMS=' 8, THE "COM" KEY'||           /**KOPTP* MSG*/            00573700
*            ' MUST CONTAIN ONE'||                                      00573800
*            ' (OR MORE) ARGUMENT(S).';                                 00573900
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00574000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00574100
*        ZMACRET=8;                          /* MACRO ERROR */          00574200
*      END;                                                             00574300
*  IF NUMBER(COM)>1                          /* CHECK POSITIONALS */    00574400
*    THEN                                                               00574500
*      DO;                                                              00574600
*        ZMS=' 8, "COM'||                    /**KPOSP* MSG*/            00574700
*            COM||                                                      00574800
*            '" "COM"'||                                                00574900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00575000
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00575100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00575200
*        ZMACRET=8;                          /* MACRO ERROR */          00575300
*      END;                                                             00575400
*/*PG.KXVAR13 VALUE, OPT INPUT, KEYS -XVARIABLE----------------------*/ 00575500
*  ZXCOM='INPUT';                            /* SET IN/OUTPUT */        00575600
*  XCOM='NULL';                              /* SET DEFAULT */          00575700
*  IF COM(1)^=''                             /* CHECK FOR NULL */       00575800
*    THEN                                                               00575900
*      XCOM=COM(1);                          /* SET XVARIABLE */        00576000
*/*PG.KCK01 VALUE, OPT INPUT, KEYS -CHARACTER LENGTH-----------------*/ 00576100
*  IF ZXCOM^='' &                            /* NOT IN/OUTPUT */        00576200
*     XCOM^='NULL' &                         /* NOT STAR DEFAULT */     00576300
*     LENGTH(XCOM)>256                                                  00576400
*    THEN                                                               00576500
*      DO;                                                              00576600
*        ZXCOM='';                           /* RESET IN/OUTPUT */      00576700
*        ZMS=' 8, "COM'||                    /**KLNGP* MSG*/            00576800
*            COM||                                                      00576900
*            '" ARGUMENT 1 EXCEEDS THE MAXIMUM'||                       00577000
*            ' LENGTH OF 256 CHARACTERS. ';                             00577100
*        ANS MSG('?IEFSSI ---> '||ZMS);                                 00577200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00577300
*        ZMACRET=8;                          /* MACRO ERROR */          00577400
*      END;                                                             00577500
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00577600
*      END;                                  /* END COMPLETE CHECKING*/ 00577700
*/********************************************************************/ 00577800
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00577900
*/********************************************************************/ 00578000
*  IF ZMACRET = 0                                                       00578100
*    THEN                                                               00578200
*      DO;                                                              00578300
*/********************************************************************/ 00578400
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00578500
*/********************************************************************/ 00578600
*  ANS(MACCONC||'LIST PUSH;') NORESCAN COL(MACLMAR);                    00578700
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00578800
*    THEN                                                               00578900
*      ANS(MACCONC||'LIST OFF;') NORESCAN COL(MACLMAR);                 00579000
*    ELSE                                                               00579100
*      ANS(MACCONC||'LIST ON;')  NORESCAN COL(MACLMAR);                 00579200
*/********************************************************************/ 00579300
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00579400
*  IF XMF^='L'                                                          00579500
*    THEN                                                               00579600
*      ANS('DO; /* IEFSSI-PLISTVER */')                                 00579700
*          NORESCAN COL(MACLMAR);                                       00579800
*/*PL.LL01 ?IEFSSI MF=L PARAMETER LIST-------------------------------*/ 00579900
*  IF XMF='L'                                                           00580000
*    THEN                                                               00580100
*      DO;                                                              00580200
*        ANS('DCL 1 '||XMFCTRL||' '||XMFATTR||', '||                    00580300
*            '/* ?IEFSSI PARM LIST*/')                                  00580400
*            NORESCAN COL(MACLMAR);                                     00580500
*/*PL.LL13  XSSI_PLIST_ID CHAR(4) CONSTANT---------------------------*/ 00580600
*        ANS('2 '||XMFCTRL||                                            00580700
*            '_XSSI_PLIST_ID CHAR(4), '||                               00580800
*            '/* '||ZXSSI_PLIST_ID||' XSSI_PLIST_ID */')                00580900
*            NORESCAN COL(MACLMAR+2);                                   00581000
*/*PL.LL02  XPLISTLEN FIXED(16) BDY(BYTE) INPUT----------------------*/ 00581100
*        ANS('2 '||XMFCTRL||                                            00581200
*            '_XPLISTLEN FIXED(16) BDY(BYTE), '||                       00581300
*            '/* INPUT XPLISTLEN*/')                                    00581400
*            NORESCAN COL(MACLMAR+2);                                   00581500
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00581600
*        ANS('2 '||XMFCTRL||                                            00581700
*            '_XVERSION FIXED(8), '||                                   00581800
*            '/* INPUT XVERSION*/')                                     00581900
*            NORESCAN COL(MACLMAR+2);                                   00582000
*/*PL.LL13  XRSV0001 CHAR(1) RESERVED--------------------------------*/ 00582100
*        ANS('2 '||XMFCTRL||                                            00582200
*            '_XRSV0001 CHAR(1), '||                                    00582300
*            '/* RESERVED */')                                          00582400
*            NORESCAN COL(MACLMAR+2);                                   00582500
*/*PL.LL13  XSUBNAME CHAR(4) INPUT-----------------------------------*/ 00582600
*        ANS('2 '||XMFCTRL||                                            00582700
*            '_XSUBNAME CHAR(4), '||                                    00582800
*            '/* '||ZXSUBNAME||' XSUBNAME */')                          00582900
*            NORESCAN COL(MACLMAR+2);                                   00583000
*/*PL.LL13  XRSV0002 CHAR(4) RESERVED--------------------------------*/ 00583100
*        ANS('2 '||XMFCTRL||                                            00583200
*            '_XRSV0002 CHAR(4), '||                                    00583300
*            '/* RESERVED */')                                          00583400
*            NORESCAN COL(MACLMAR+2);                                   00583500
*/*PL.LL04  XREQUEST_TYPE BIT(16) FIELD_LABEL------------------------*/ 00583600
*        ANS('2 '||XMFCTRL||                                            00583700
*            '_XREQUEST_TYPE BIT(16), '||                               00583800
*            '/* FIELD_LABEL */')                                       00583900
*            NORESCAN COL(MACLMAR+2);                                   00584000
*/*PL.LL09 BIT 1XXXXXXXXXXXXXXX--------------------------------------*/ 00584100
*          ANS('3 '||XMFCTRL||                                          00584200
*              '_XREQUEST_ADD BIT(1), '||                               00584300
*              '/* BIT */')                                             00584400
*              NORESCAN COL(MACLMAR+2);                                 00584500
*/*PL.LL09 BIT X1XXXXXXXXXXXXXX--------------------------------------*/ 00584600
*          ANS('3 '||XMFCTRL||                                          00584700
*              '_XREQUEST_ACTIVATE BIT(1), '||                          00584800
*              '/* BIT */')                                             00584900
*              NORESCAN COL(MACLMAR+2);                                 00585000
*/*PL.LL09 BIT XX1XXXXXXXXXXXXX--------------------------------------*/ 00585100
*          ANS('3 '||XMFCTRL||                                          00585200
*              '_XREQUEST_DEACTIVATE BIT(1), '||                        00585300
*              '/* BIT */')                                             00585400
*              NORESCAN COL(MACLMAR+2);                                 00585500
*/*PL.LL06 RESERVED BIT----------------------------------------------*/ 00585600
*          ANS('3 '||XMFCTRL||                                          00585700
*              '_XREQUEST_TYPE_RSVD1 BIT(1), '||                        00585800
*              '/* BIT */')                                             00585900
*              NORESCAN COL(MACLMAR+2);                                 00586000
*/*PL.LL09 BIT XXXX1XXXXXXXXXXX--------------------------------------*/ 00586100
*          ANS('3 '||XMFCTRL||                                          00586200
*              '_XREQUEST_SWAP BIT(1), '||                              00586300
*              '/* BIT */')                                             00586400
*              NORESCAN COL(MACLMAR+2);                                 00586500
*/*PL.LL09 BIT XXXXX1XXXXXXXXXX--------------------------------------*/ 00586600
*          ANS('3 '||XMFCTRL||                                          00586700
*              '_XREQUEST_OPTIONS BIT(1), '||                           00586800
*              '/* BIT */')                                             00586900
*              NORESCAN COL(MACLMAR+2);                                 00587000
*/*PL.LL09 BIT XXXXXX1XXXXXXXXX--------------------------------------*/ 00587100
*          ANS('3 '||XMFCTRL||                                          00587200
*              '_XREQUEST_PUT BIT(1), '||                               00587300
*              '/* BIT */')                                             00587400
*              NORESCAN COL(MACLMAR+2);                                 00587500
*/*PL.LL09 BIT XXXXXXX1XXXXXXXX--------------------------------------*/ 00587600
*          ANS('3 '||XMFCTRL||                                          00587700
*              '_XREQUEST_GET BIT(1), '||                               00587800
*              '/* BIT */')                                             00587900
*              NORESCAN COL(MACLMAR+2);                                 00588000
*/*PL.LL09 BIT XXXXXXXX1XXXXXXX--------------------------------------*/ 00588100
*          ANS('3 '||XMFCTRL||                                          00588200
*              '_XREQUEST_QUERY BIT(1), '||                             00588300
*              '/* BIT */')                                             00588400
*              NORESCAN COL(MACLMAR+2);                                 00588500
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00588600
*          ANS('3 '||XMFCTRL||                                          00588700
*              '_XREQUEST_TYPE_RSVD2 BIT(7), '||                        00588800
*              '/* BIT */')                                             00588900
*              NORESCAN COL(MACLMAR+2);                                 00589000
*/*PL.LL04  XMISC_FLAGS BIT(16) FIELD_LABEL--------------------------*/ 00589100
*        ANS('2 '||XMFCTRL||                                            00589200
*            '_XMISC_FLAGS BIT(16), '||                                 00589300
*            '/* FIELD_LABEL */')                                       00589400
*            NORESCAN COL(MACLMAR+2);                                   00589500
*/*PL.LL09 BIT 1XXXXXXXXXXXXXXX--------------------------------------*/ 00589600
*          ANS('3 '||XMFCTRL||                                          00589700
*              '_KEYUSED_REQDSUB BIT(1), '||                            00589800
*              '/* BIT */')                                             00589900
*              NORESCAN COL(MACLMAR+2);                                 00590000
*/*PL.LL09 BIT X1XXXXXXXXXXXXXX--------------------------------------*/ 00590100
*          ANS('3 '||XMFCTRL||                                          00590200
*              '_KEYUSED_COMMAND BIT(1), '||                            00590300
*              '/* BIT */')                                             00590400
*              NORESCAN COL(MACLMAR+2);                                 00590500
*/*PL.LL09 BIT XX1XXXXXXXXXXXXX--------------------------------------*/ 00590600
*          ANS('3 '||XMFCTRL||                                          00590700
*              '_KEYUSED_SUBDATA1 BIT(1), '||                           00590800
*              '/* BIT */')                                             00590900
*              NORESCAN COL(MACLMAR+2);                                 00591000
*/*PL.LL09 BIT XXX1XXXXXXXXXXXX--------------------------------------*/ 00591100
*          ANS('3 '||XMFCTRL||                                          00591200
*              '_KEYUSED_SUBDATA2 BIT(1), '||                           00591300
*              '/* BIT */')                                             00591400
*              NORESCAN COL(MACLMAR+2);                                 00591500
*/*PL.LL06 RESERVED BIT----------------------------------------------*/ 00591600
*          ANS('3 '||XMFCTRL||                                          00591700
*              '_XMISC_FLAGS_RSVD1 BIT(2), '||                          00591800
*              '/* BIT */')                                             00591900
*              NORESCAN COL(MACLMAR+2);                                 00592000
*/*PL.LL09 BIT XXXXXX1XXXXXXXXX--------------------------------------*/ 00592100
*          ANS('3 '||XMFCTRL||                                          00592200
*              '_XREQDSUB_MSTR BIT(1), '||                              00592300
*              '/* BIT */')                                             00592400
*              NORESCAN COL(MACLMAR+2);                                 00592500
*/*PL.LL09 BIT XXXXXXX1XXXXXXXX--------------------------------------*/ 00592600
*          ANS('3 '||XMFCTRL||                                          00592700
*              '_XCOMMAND_YES BIT(1), '||                               00592800
*              '/* BIT */')                                             00592900
*              NORESCAN COL(MACLMAR+2);                                 00593000
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00593100
*          ANS('3 '||XMFCTRL||                                          00593200
*              '_XMISC_FLAGS_RSVD2 BIT(8), '||                          00593300
*              '/* BIT */')                                             00593400
*              NORESCAN COL(MACLMAR+2);                                 00593500
*/*PL.LL13  XCONSNAME CHAR(8) INPUT----------------------------------*/ 00593600
*        ANS('2 '||XMFCTRL||                                            00593700
*            '_XCONSNAME CHAR(8), '||                                   00593800
*            '/* '||ZXCONSNAME||' XCONSNAME */')                        00593900
*            NORESCAN COL(MACLMAR+2);                                   00594000
*/*PL.LL13  XINITRTN CHAR(8) INPUT-----------------------------------*/ 00594100
*        ANS('2 '||XMFCTRL||                                            00594200
*            '_XINITRTN CHAR(8), '||                                    00594300
*            '/* '||ZXINITRTN||' XINITRTN */')                          00594400
*            NORESCAN COL(MACLMAR+2);                                   00594500
*/*PL.LL13 ADDR XINITPARM PTR(31) INPUT ADDR-------------------------*/ 00594600
*        ANS('2 '||XMFCTRL||                                            00594700
*            '_XINITPARM_ADDR PTR(31), '||                              00594800
*            '/* '||ZXINITPARM_ADDR||' XINITPARM_ADDR */')              00594900
*            NORESCAN COL(MACLMAR+2);                                   00595000
*/*PL.LL13  XINITPLEN FIXED(31) INPUT--------------------------------*/ 00595100
*        ANS('2 '||XMFCTRL||                                            00595200
*            '_XINITPLEN FIXED(31), '||                                 00595300
*            '/* '||ZXINITPLEN||' XINITPLEN */')                        00595400
*            NORESCAN COL(MACLMAR+2);                                   00595500
*/*PL.LL13  XRSV0007 CHAR(8) RESERVED--------------------------------*/ 00595600
*        ANS('2 '||XMFCTRL||                                            00595700
*            '_XRSV0007 CHAR(8), '||                                    00595800
*            '/* RESERVED */')                                          00595900
*            NORESCAN COL(MACLMAR+2);                                   00596000
*/*PL.LL13  XINTOKEN BIT(32) INPUT-----------------------------------*/ 00596100
*        ANS('2 '||XMFCTRL||                                            00596200
*            '_XINTOKEN BIT(32), '||                                    00596300
*            '/* '||ZXINTOKEN||' XINTOKEN */')                          00596400
*            NORESCAN COL(MACLMAR+2);                                   00596500
*/*PL.LL13  XWORKASP FIXED(8) INPUT----------------------------------*/ 00596600
*        ANS('2 '||XMFCTRL||                                            00596700
*            '_XWORKASP FIXED(8), '||                                   00596800
*            '/* '||ZXWORKASP||' XWORKASP */')                          00596900
*            NORESCAN COL(MACLMAR+2);                                   00597000
*/*PL.LL13  XRSV0004 CHAR(3) RESERVED--------------------------------*/ 00597100
*        ANS('2 '||XMFCTRL||                                            00597200
*            '_XRSV0004 CHAR(3), '||                                    00597300
*            '/* RESERVED */')                                          00597400
*            NORESCAN COL(MACLMAR+2);                                   00597500
*/*PL.LL13  XRSV0008 CHAR(20) RESERVED-------------------------------*/ 00597600
*        ANS('2 '||XMFCTRL||                                            00597700
*            '_XRSV0008 CHAR(20), '||                                   00597800
*            '/* RESERVED */')                                          00597900
*            NORESCAN COL(MACLMAR+2);                                   00598000
*/*PL.LL13  XRSV0005 CHAR(4) RESERVED--------------------------------*/ 00598100
*        ANS('2 '||XMFCTRL||                                            00598200
*            '_XRSV0005 CHAR(4), '||                                    00598300
*            '/* RESERVED */')                                          00598400
*            NORESCAN COL(MACLMAR+2);                                   00598500
*/*PL.LL13  XOUTTOKEN BIT(32) OUTPUT---------------------------------*/ 00598600
*        ANS('2 '||XMFCTRL||                                            00598700
*            '_XOUTTOKEN BIT(32), '||                                   00598800
*            '/* '||ZXOUTTOKEN||' XOUTTOKEN */')                        00598900
*            NORESCAN COL(MACLMAR+2);                                   00599000
*/*PL.LL13  XWORKAREA PTR(31) OUTPUT---------------------------------*/ 00599100
*        ANS('2 '||XMFCTRL||                                            00599200
*            '_XWORKAREA PTR(31), '||                                   00599300
*            '/* '||ZXWORKAREA||' XWORKAREA */')                        00599400
*            NORESCAN COL(MACLMAR+2);                                   00599500
*/*PL.LL13  XSUBDATA1 CHAR(4) INPUT----------------------------------*/ 00599600
*        ANS('2 '||XMFCTRL||                                            00599700
*            '_XSUBDATA1 CHAR(4), '||                                   00599800
*            '/* '||ZXSUBDATA1||' XSUBDATA1 */')                        00599900
*            NORESCAN COL(MACLMAR+2);                                   00600000
*/*PL.LL13  XSUBDATA2 CHAR(4) INPUT----------------------------------*/ 00600100
*        ANS('2 '||XMFCTRL||                                            00600200
*            '_XSUBDATA2 CHAR(4), '||                                   00600300
*            '/* '||ZXSUBDATA2||' XSUBDATA2 */')                        00600400
*            NORESCAN COL(MACLMAR+2);                                   00600500
*/*PL.LL13  XRSV0006 CHAR(4) RESERVED--------------------------------*/ 00600600
*        ANS('2 '||XMFCTRL||                                            00600700
*            '_XRSV0006 CHAR(4), '||                                    00600800
*            '/* RESERVED */')                                          00600900
*            NORESCAN COL(MACLMAR+2);                                   00601000
*/*PL.LL13  XPLISTPTR FIXED(31) INPUT--------------------------------*/ 00601100
*        ANS('2 '||XMFCTRL||                                            00601200
*            '_XPLISTPTR PTR(31), '||                                   00601300
*            '/* '||ZXPLISTPTR||' XPLISTPTR */')                        00601400
*            NORESCAN COL(MACLMAR+2);                                   00601500
*/*PL.LL18 ----------------------------------------------------------*/ 00601600
*        ANS('2 * CHAR(0);')                                            00601700
*            NORESCAN COL(MACLMAR+2);                                   00601800
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00601900
*      END;                                                             00602000
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00602100
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00602200
*  DEACT ZPRMLINE;                                                      00602300
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00602400
*  DEACT ZNDX;                                                          00602500
*  ZNDX=MACINDEX(1:4);         /* MACINDEX LAST THREE DIGITS        */  00602600
*  DCL XVERSION CHAR;                                                   00602700
*  DEACT XVERSION;                                                      00602800
*/*PL.L02 ?IEFSSI PARAMETER LIST-------------------------------------*/ 00602900
*  IF XMF^='L'                                                          00603000
*    THEN                                                               00603100
*      DO;                                                              00603200
*/*PL.L03 ?IEFSSI PARAMETER LIST-------------------------------------*/ 00603300
*        IF XMF='S'                                                     00603400
*          THEN                                                         00603500
*            XMFCTRL='#ZPLIST';                                         00603600
*/*PL.L04 ?IEFSSI PARAMETER LIST-------------------------------------*/ 00603700
*        ZPRMLINE='DCL 1 #Z'||ZNDX||' DEF('||XMFCTRL||'),'||            00603800
*                 ' /* ?IEFSSI PARM LIST*/';                            00603900
*/*PL.L08  XSSI_PLIST_ID CHAR(4) CONSTANT----------------------------*/ 00604000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00604100
*                 '_XSSI_PLIST_ID CHAR(4), '||                          00604200
*                 '/* '||ZXSSI_PLIST_ID||' XSSI_PLIST_ID */';           00604300
*/*PL.L05  XPLISTLEN FIXED(16) BDY(BYTE) INPUT-----------------------*/ 00604400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00604500
*                 '_XPLISTLEN FIXED(16) BDY(BYTE), '||                  00604600
*                 '/* INPUT XPLISTLEN*/';                               00604700
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00604800
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00604900
*                 '_XVERSION FIXED(8), '||                              00605000
*                 '/* INPUT XVERSION*/';                                00605100
*/*PL.L08  XRSV0001 CHAR(1) RESERVED---------------------------------*/ 00605200
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00605300
*                 '_XRSV0001 CHAR(1), '||                               00605400
*                 '/* RESERVED */';                                     00605500
*/*PL.L08  XSUBNAME CHAR(4) INPUT------------------------------------*/ 00605600
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00605700
*                 '_XSUBNAME CHAR(4), '||                               00605800
*                 '/* '||ZXSUBNAME||' XSUBNAME */';                     00605900
*/*PL.L08  XRSV0002 CHAR(4) RESERVED---------------------------------*/ 00606000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00606100
*                 '_XRSV0002 CHAR(4), '||                               00606200
*                 '/* RESERVED */';                                     00606300
*/*PL.L08  XREQUEST_TYPE BIT(16) FIELD_LABEL-------------------------*/ 00606400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00606500
*                 '_XREQUEST_TYPE BIT(16), '||                          00606600
*                 '/* FIELD_LABEL */';                                  00606700
*/*PL.L08  XMISC_FLAGS BIT(16) FIELD_LABEL---------------------------*/ 00606800
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00606900
*                 '_XMISC_FLAGS BIT(16), '||                            00607000
*                 '/* FIELD_LABEL */';                                  00607100
*/*PL.L08  XCONSNAME CHAR(8) INPUT-----------------------------------*/ 00607200
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00607300
*                 '_XCONSNAME CHAR(8), '||                              00607400
*                 '/* '||ZXCONSNAME||' XCONSNAME */';                   00607500
*/*PL.L08  XINITRTN CHAR(8) INPUT------------------------------------*/ 00607600
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00607700
*                 '_XINITRTN CHAR(8), '||                               00607800
*                 '/* '||ZXINITRTN||' XINITRTN */';                     00607900
*/*PL.L08 ADDR XINITPARM PTR(31) INPUT ADDR--------------------------*/ 00608000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00608100
*                 '_XINITPARM_ADDR PTR(31), '||                         00608200
*                 '/* '||ZXINITPARM_ADDR||' XINITPARM_ADDR */';         00608300
*/*PL.L08  XINITPLEN FIXED(31) INPUT---------------------------------*/ 00608400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00608500
*                 '_XINITPLEN FIXED(31), '||                            00608600
*                 '/* '||ZXINITPLEN||' XINITPLEN */';                   00608700
*/*PL.L08  XRSV0007 CHAR(8) RESERVED---------------------------------*/ 00608800
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00608900
*                 '_XRSV0007 CHAR(8), '||                               00609000
*                 '/* RESERVED */';                                     00609100
*/*PL.L08  XINTOKEN BIT(32) INPUT------------------------------------*/ 00609200
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00609300
*                 '_XINTOKEN BIT(32), '||                               00609400
*                 '/* '||ZXINTOKEN||' XINTOKEN */';                     00609500
*/*PL.L08  XWORKASP FIXED(8) INPUT-----------------------------------*/ 00609600
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00609700
*                 '_XWORKASP FIXED(8), '||                              00609800
*                 '/* '||ZXWORKASP||' XWORKASP */';                     00609900
*/*PL.L08  XRSV0004 CHAR(3) RESERVED---------------------------------*/ 00610000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00610100
*                 '_XRSV0004 CHAR(3), '||                               00610200
*                 '/* RESERVED */';                                     00610300
*/*PL.L08  XRSV0008 CHAR(20) RESERVED--------------------------------*/ 00610400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00610500
*                 '_XRSV0008 CHAR(20), '||                              00610600
*                 '/* RESERVED */';                                     00610700
*/*PL.L08  XRSV0005 CHAR(4) RESERVED---------------------------------*/ 00610800
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00610900
*                 '_XRSV0005 CHAR(4), '||                               00611000
*                 '/* RESERVED */';                                     00611100
*/*PL.L08  XOUTTOKEN BIT(32) OUTPUT----------------------------------*/ 00611200
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00611300
*                 '_XOUTTOKEN BIT(32), '||                              00611400
*                 '/* '||ZXOUTTOKEN||' XOUTTOKEN */';                   00611500
*/*PL.L08  XWORKAREA PTR(31) OUTPUT----------------------------------*/ 00611600
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00611700
*                 '_XWORKAREA PTR(31), '||                              00611800
*                 '/* '||ZXWORKAREA||' XWORKAREA */';                   00611900
*/*PL.L09  XSUBDATA1 CHAR(4) INPUT-----------------------------------*/ 00612000
*        ZPRMNUM=ZPRMNUM+1;                                             00612100
*        ZPRM(ZPRMNUM)=ZPRMLINE||' 2 #Z'||ZNDX||                        00612200
*            '_XSUBDATA1 CHAR(4), '||                                   00612300
*            '/* '||ZXSUBDATA1||' XSUBDATA1 */';                        00612400
*        ZPRMLINE='';                                                   00612500
*/*PL.L08  XSUBDATA2 CHAR(4) INPUT-----------------------------------*/ 00612600
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00612700
*                 '_XSUBDATA2 CHAR(4), '||                              00612800
*                 '/* '||ZXSUBDATA2||' XSUBDATA2 */';                   00612900
*/*PL.L08  XRSV0006 CHAR(4) RESERVED---------------------------------*/ 00613000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00613100
*                 '_XRSV0006 CHAR(4), '||                               00613200
*                 '/* RESERVED */';                                     00613300
*/*PL.L08  XPLISTPTR FIXED(31) INPUT---------------------------------*/ 00613400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00613500
*                 '_XPLISTPTR FIXED(31), '||                            00613600
*                 '/* '||ZXPLISTPTR||' XPLISTPTR */';                   00613700
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00613800
*        ZPRMNUM=ZPRMNUM+1;                                             00613900
*        ZPRM(ZPRMNUM)=ZPRMLINE||' 2 * CHAR(0);';                       00614000
*        IF XPLISTVER^=1                                                00614100
*           & XMF^='S'                                                  00614200
*          THEN                                                         00614300
*            DO;                                                        00614400
*              ZPRMNUM=ZPRMNUM+1;                                       00614500
*              ZPRM(ZPRMNUM)=                                           00614600
*               'DCL #Z'||ZNDX||'_LENCHECK FIXED(32) CONSTANT('||       00614700
*               'LENGTH('||XMFCTRL||')-LENGTH(#Z'||ZNDX||'));'||        00614800
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'||            00614900
*               ' IS LONG ENOUGH */';                                   00615000
*            END;                                                       00615100
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00615200
*        ZPLLEN=108;                                                    00615300
*        IF ZPRMMAX<ZPLLEN                                              00615400
*           & XMF^='E'                                                  00615500
*          THEN                                                         00615600
*            ZPRMMAX=ZPLLEN;                                            00615700
*/*PL.L13 -----------------------------------------------------------*/ 00615800
*      END;                                                             00615900
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00616000
*  IF XMF^='L'                                                          00616100
*    THEN                                                               00616200
*      DO;                                                              00616300
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00616400
*            ANS('#Z'||ZNDX||'=''''B;'||                                00616500
*                '/* CLEAR PARAMETER AREA */')                          00616600
*                NORESCAN COL(MACLMAR);                                 00616700
*/*PI.L28 XSSI_PLIST_ID  CHAR(4)-------------------------------------*/ 00616800
*        ANS('#Z'||ZNDX||'_XSSI_PLIST_ID=''SIPL'';'||                   00616900
*            '/* XSSI_PLIST_ID CHAR(4) CONSTANT */')                    00617000
*            NORESCAN COL(MACLMAR);                                     00617100
*/*PI.L05C XPLISTLEN FIXED(16)---------------------------------------*/ 00617200
*        ANS('#Z'||ZNDX||'_XPLISTLEN=LENGTH(#Z'||ZNDX||');'||           00617300
*            '/* XPLISTLEN FIXED(16) */')                               00617400
*            NORESCAN COL(MACLMAR);                                     00617500
*/*PI.L05B XVERSION FIXED(8)-----------------------------------------*/ 00617600
*        IF XPLISTVER^=0                                                00617700
*          THEN                                                         00617800
*            ANS('#Z'||ZNDX||'_XVERSION='||CHAR(XPLISTVER)||'; '||      00617900
*                '/* XVERSION FIXED(8) */')                             00618000
*                NORESCAN COL(MACLMAR);                                 00618100
*/*PI.L21 XSUBNAME NAME CHAR(4)--------------------------------------*/ 00618200
*        IF ZXSUBNAME='INPUT' |                                         00618300
*           ZXSUBNAME='INOUT'                                           00618400
*          THEN                                                         00618500
*            ANS('#Z'||ZNDX||'_XSUBNAME='||                             00618600
*                XSUBNAME||';'||                                        00618700
*                '/* XSUBNAME CHAR(4) */')                              00618800
*                NORESCAN COL(MACLMAR);                                 00618900
*/*PI.L06 XREQUEST_TYPE BIT(16)--------------------------------------*/ 00619000
*        ZW='';                                                         00619100
*        ZMS='';                                                        00619200
*/*PI.L07 XREQUEST_TYPE BIT(16) 1XXXXXXXXXXXXXXX---------------------*/ 00619300
*        IF XREQUEST='ADD'                                              00619400
*          THEN                                                         00619500
*            ZW=ZW||'1';                                                00619600
*          ELSE                                                         00619700
*            ZW=ZW||'0';                                                00619800
*/*PI.L07 XREQUEST_TYPE BIT(16) X1XXXXXXXXXXXXXX---------------------*/ 00619900
*        IF XREQUEST='ACTIVATE'                                         00620000
*          THEN                                                         00620100
*            ZW=ZW||'1';                                                00620200
*          ELSE                                                         00620300
*            ZW=ZW||'0';                                                00620400
*/*PI.L07 XREQUEST_TYPE BIT(16) XX1XXXXXXXXXXXXX---------------------*/ 00620500
*        IF XREQUEST='DEACTIVATE'                                       00620600
*          THEN                                                         00620700
*            ZW=ZW||'1';                                                00620800
*          ELSE                                                         00620900
*            ZW=ZW||'0';                                                00621000
*/*PI.L07 XREQUEST_TYPE BIT(16) XXXX1XXXXXXXXXXX---------------------*/ 00621100
*        IF XREQUEST='SWAP'                                             00621200
*          THEN                                                         00621300
*            ZW=ZW||'01';                                               00621400
*          ELSE                                                         00621500
*            ZW=ZW||'00';                                               00621600
*/*PI.L07 XREQUEST_TYPE BIT(16) XXXXX1XXXXXXXXXX---------------------*/ 00621700
*        IF XREQUEST='OPTIONS'                                          00621800
*          THEN                                                         00621900
*            ZW=ZW||'1';                                                00622000
*          ELSE                                                         00622100
*            ZW=ZW||'0';                                                00622200
*/*PI.L07 XREQUEST_TYPE BIT(16) XXXXXX1XXXXXXXXX---------------------*/ 00622300
*        IF XREQUEST='PUT'                                              00622400
*          THEN                                                         00622500
*            ZW=ZW||'1';                                                00622600
*          ELSE                                                         00622700
*            ZW=ZW||'0';                                                00622800
*/*PI.L07 XREQUEST_TYPE BIT(16) XXXXXXX1XXXXXXXX---------------------*/ 00622900
*        IF XREQUEST='GET'                                              00623000
*          THEN                                                         00623100
*            ZW=ZW||'1';                                                00623200
*          ELSE                                                         00623300
*            ZW=ZW||'0';                                                00623400
*/*PI.L07 XREQUEST_TYPE BIT(16) XXXXXXXX1XXXXXXX---------------------*/ 00623500
*        IF XREQUEST='QUERY'                                            00623600
*          THEN                                                         00623700
*            ZW=ZW||'10000000';                                         00623800
*          ELSE                                                         00623900
*            ZW=ZW||'00000000';                                         00624000
*/*PI.L09 XREQUEST_TYPE BIT(16)--------------------------------------*/ 00624100
*        IF INDEX(ZW,'1')^=0                                            00624200
*          THEN                                                         00624300
*            ANS('#Z'||ZNDX||'_XREQUEST_TYPE='||                        00624400
*                '#Z'||ZNDX||'_XREQUEST_TYPE | '||                      00624500
*                ''''||ZW||'''B; '||                                    00624600
*                '/* BIT(16) */')                                       00624700
*                NORESCAN COL(MACLMAR);                                 00624800
*/*PI.L06 XMISC_FLAGS BIT(16)----------------------------------------*/ 00624900
*        ZW='';                                                         00625000
*        ZMS='';                                                        00625100
*/*PI.L07 XMISC_FLAGS BIT(16) 1XXXXXXXXXXXXXXX-----------------------*/ 00625200
*        IF REQDSUB^=''                                                 00625300
*          THEN                                                         00625400
*            ZW=ZW||'1';                                                00625500
*          ELSE                                                         00625600
*            ZW=ZW||'0';                                                00625700
*/*PI.L07 XMISC_FLAGS BIT(16) X1XXXXXXXXXXXXXX-----------------------*/ 00625800
*        IF COMMAND^=''                                                 00625900
*          THEN                                                         00626000
*            ZW=ZW||'1';                                                00626100
*          ELSE                                                         00626200
*            ZW=ZW||'0';                                                00626300
*/*PI.L07 XMISC_FLAGS BIT(16) XX1XXXXXXXXXXXXX-----------------------*/ 00626400
*        IF SUBDATA1^=''                                                00626500
*          THEN                                                         00626600
*            ZW=ZW||'1';                                                00626700
*          ELSE                                                         00626800
*            ZW=ZW||'0';                                                00626900
*/*PI.L07 XMISC_FLAGS BIT(16) XXX1XXXXXXXXXXXX-----------------------*/ 00627000
*        IF SUBDATA2^=''                                                00627100
*          THEN                                                         00627200
*            ZW=ZW||'1';                                                00627300
*          ELSE                                                         00627400
*            ZW=ZW||'0';                                                00627500
*/*PI.L07 XMISC_FLAGS BIT(16) XXXXXX1XXXXXXXXX-----------------------*/ 00627600
*        IF XREQDSUB='MSTR'                                             00627700
*          THEN                                                         00627800
*            ZW=ZW||'001';                                              00627900
*          ELSE                                                         00628000
*            ZW=ZW||'000';                                              00628100
*/*PI.L07 XMISC_FLAGS BIT(16) XXXXXXX1XXXXXXXX-----------------------*/ 00628200
*        IF XCOMMAND='YES'                                              00628300
*          THEN                                                         00628400
*            ZW=ZW||'100000000';                                        00628500
*          ELSE                                                         00628600
*            ZW=ZW||'000000000';                                        00628700
*/*PI.L09 XMISC_FLAGS BIT(16)----------------------------------------*/ 00628800
*        IF INDEX(ZW,'1')^=0                                            00628900
*          THEN                                                         00629000
*            ANS('#Z'||ZNDX||'_XMISC_FLAGS='||                          00629100
*                '#Z'||ZNDX||'_XMISC_FLAGS | '||                        00629200
*                ''''||ZW||'''B; '||                                    00629300
*                '/* BIT(16) */')                                       00629400
*                NORESCAN COL(MACLMAR);                                 00629500
*/*PI.L21 XCONSNAME NAME CHAR(8)-------------------------------------*/ 00629600
*        IF ZXCONSNAME='INPUT' |                                        00629700
*           ZXCONSNAME='INOUT'                                          00629800
*          THEN                                                         00629900
*            IF XCONSNAME^='0'                                          00630000
*              THEN                                                     00630100
*                ANS('#Z'||ZNDX||'_XCONSNAME='||                        00630200
*                    XCONSNAME||';'||                                   00630300
*                    '/* XCONSNAME CHAR(8) */')                         00630400
*                    NORESCAN COL(MACLMAR);                             00630500
*/*PI.L14 CHECK FOR * AS THE CHAR(8) ARGUMENT------------------------*/ 00630600
*        IF XINITRTN='NO_INITRTN'                                       00630700
*          THEN                                                         00630800
*            ZXINITRTN='';                   /* RESET INPUT/INOUT */    00630900
*/*PI.L21 XINITRTN NAME CHAR(8)--------------------------------------*/ 00631000
*        IF ZXINITRTN='INPUT' |                                         00631100
*           ZXINITRTN='INOUT'                                           00631200
*          THEN                                                         00631300
*            ANS('#Z'||ZNDX||'_XINITRTN='||                             00631400
*                XINITRTN||';'||                                        00631500
*                '/* XINITRTN CHAR(8) */')                              00631600
*                NORESCAN COL(MACLMAR);                                 00631700
*/*PI.L14 CHECK FOR * AS THE CHAR(60) ARGUMENT-----------------------*/ 00631800
*        IF XINITPARM='NO_INITPARM'                                     00631900
*          THEN                                                         00632000
*            ZXINITPARM='';                  /* RESET INPUT/INOUT */    00632100
*/*PI.L15 ADDR(XINITPARM) CHAR(60)-----------------------------------*/ 00632200
*        IF ZXINITPARM^=''                                              00632300
*          THEN                                                         00632400
*            ANS('#Z'||ZNDX||'_XINITPARM_ADDR='||                       00632500
*                'ADDR('||XINITPARM||');'||                             00632600
*                '/* ADDR XINITPARM CHAR(60) */')                       00632700
*                NORESCAN COL(MACLMAR);                                 00632800
*/*PI.L17 XINITPLEN FIXED(31)----------------------------------------*/ 00632900
*        IF ZXINITPLEN='INPUT' |                                        00633000
*           ZXINITPLEN='INOUT'                                          00633100
*          THEN                                                         00633200
*            ANS('#Z'||ZNDX||'_XINITPLEN='||                            00633300
*                XINITPLEN||';'||                                       00633400
*                '/* XINITPLEN FIXED(31) */')                           00633500
*                NORESCAN COL(MACLMAR);                                 00633600
*/*PI.L14 CHECK FOR * AS THE BIT(32) ARGUMENT------------------------*/ 00633700
*        IF XINTOKEN='NO_INPUT_TOKEN'                                   00633800
*          THEN                                                         00633900
*            ZXINTOKEN='';                   /* RESET INPUT/INOUT */    00634000
*/*PI.L19 XINTOKEN NAME BIT(32)--------------------------------------*/ 00634100
*        IF ZXINTOKEN='INPUT' |                                         00634200
*           ZXINTOKEN='INOUT'                                           00634300
*          THEN                                                         00634400
*            IF (XINTOKEN(1:1)^='0' &                                   00634500
*               XINTOKEN(1:1)^='1')                                     00634600
*              THEN                                                     00634700
*                ANS('#Z'||ZNDX||'_XINTOKEN='||                         00634800
*                    XINTOKEN||';'||                                    00634900
*                    '/* XINTOKEN BIT(32) */')                          00635000
*                    NORESCAN COL(MACLMAR);                             00635100
*              ELSE                                                     00635200
*                ANS('#Z'||ZNDX||'_XINTOKEN='||                         00635300
*                    ''''||XINTOKEN||'''B;'||                           00635400
*                    '/* XINTOKEN BIT(32) */')                          00635500
*                    NORESCAN COL(MACLMAR);                             00635600
*/*PI.L17 XWORKASP FIXED(8)------------------------------------------*/ 00635700
*        IF ZXWORKASP='INPUT' |                                         00635800
*           ZXWORKASP='INOUT'                                           00635900
*          THEN                                                         00636000
*            IF XWORKASP^='0'                                           00636100
*              THEN                                                     00636200
*                ANS('#Z'||ZNDX||'_XWORKASP='||                         00636300
*                    XWORKASP||';'||                                    00636400
*                    '/* XWORKASP FIXED(8) */')                         00636500
*                    NORESCAN COL(MACLMAR);                             00636600
*/*PI.L21 XSUBDATA1 NAME CHAR(4)-------------------------------------*/ 00636700
*        IF ZXSUBDATA1='INPUT' |                                        00636800
*           ZXSUBDATA1='INOUT'                                          00636900
*          THEN                                                         00637000
*            ANS('#Z'||ZNDX||'_XSUBDATA1='||                            00637100
*                XSUBDATA1||';'||                                       00637200
*                '/* XSUBDATA1 CHAR(4) */')                             00637300
*                NORESCAN COL(MACLMAR);                                 00637400
*/*PI.L21 XSUBDATA2 NAME CHAR(4)-------------------------------------*/ 00637500
*        IF ZXSUBDATA2='INPUT' |                                        00637600
*           ZXSUBDATA2='INOUT'                                          00637700
*          THEN                                                         00637800
*            ANS('#Z'||ZNDX||'_XSUBDATA2='||                            00637900
*                XSUBDATA2||';'||                                       00638000
*                '/* XSUBDATA2 CHAR(4) */')                             00638100
*                NORESCAN COL(MACLMAR);                                 00638200
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00638300
*              IF NUMBER(RSNCODE)>0                                     00638400
*                THEN                                                   00638500
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       00638600
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00638700
*              ANS('#Z'||ZNDX||'_XPLISTPTR=ADDR(#Z'||ZNDX||');'||       00638800
*                  '/* STORE PARM LIST ADDR */')                        00638900
*                  NORESCAN COL(MACLMAR);                               00639000
*              ANS('GPR01P=ADDR(#Z'||ZNDX||'_XPLISTPTR);'||             00639100
*                  '/* LOAD PARM LIST ADDR INTO R1*/')                  00639200
*                  NORESCAN COL(MACLMAR);                               00639300
*              IF SYSASCE^='P'                                          00639400
*                THEN                                                   00639500
*                  ANS('SAR(GPR01P,ALET(#Z'||ZNDX||'));'||              00639600
*                      '/* PARAMETER LIST AR */')                       00639700
*                      NORESCAN COL(MACLMAR);                           00639800
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00639900
*/********************************************************************/ 00640000
*/* If this is an OPTIONS request, ensure that at least one of   @P1A*/ 00640100
*/* the associated keys was specified.   (AMG can't do this.)    @P1A*/ 00640200
*/********************************************************************/ 00640300
*IF (XREQUEST = 'OPTIONS' & (REQDSUB = '' & COMMAND='')) THEN           00640400
*  DO;                              /* Issue error message           */ 00640500
*    ZMS=' 8, ONE OR MORE OF THE FOLLOWING KEY(S) IS REQUIRED: ' ||     00640600
*        '"REQDSUB, COMMAND"';                                          00640700
*    ANS MSG('?IEFSSVTI ---> '||ZMS);                                   00640800
*    ANS(COMMENT(ZMS)) COL(MACLMAR);                                    00640900
*    ZMACRET=8;                     /* Macro error                   */ 00641000
*  END;                             /* Issue error message           */ 00641100
*/********************************************************************/ 00641200
*/* Invoke IEFSSI service routine                                    */ 00641300
*/********************************************************************/ 00641400
*DCL EHAMAPS CHAR EXT;              /*                           @P2A*/ 00641500
*IF INDEX(EHAMAPS,'XM@')=0 THEN                                         00641600
*    EHAMAPS=EHAMAPS||'XM@,';       /*                           @P2A*/ 00641700
*                                                                       00641800
*ANS('RFY GPR15F RSTD;') NOSCAN COL(MACCOL+2);                          00641900
*ANS('IF ((XM@CVT->CVTOSEXT) & (XM@CVT->CVTH5520)) THEN')               00642000
*    NOSCAN COL(MACCOL+2);          /*                           @P2A*/ 00642100
*ANS('/* Test whether service available */') NOSCAN COL(37); /*  @P2A*/ 00642200
*ANS('IF (XM@CVT->CVTJESCT->JESCTEXT->JESSSIPC ^= 0) THEN')             00642300
*   NOSCAN COL(MACCOL+4);           /*                           @P2C*/ 00642400
*ANS('/* Test whether service available */') NOSCAN COL(37);            00642500
*                                                                       00642600
*ANS('PC(XM@CVT->CVTJESCT->JESCTEXT->JESSSIPC);')                       00642700
*    NOSCAN COL(MACCOL+6);          /*                           @P2C*/ 00642800
*ANS('/* Process service request */') NOSCAN COL(37);                   00642900
*                                                                       00643000
*ANS('ELSE') NOSCAN COL(MACCOL+4);                                      00643100
*ANS('/* Service not available */') NOSCAN COL(37);                     00643200
*                                                                       00643300
*ANS('GPR15F = IEFSSI_UNAVAILABLE;') NOSCAN COL(MACCOL+6);              00643400
*ANS('/* Indicate service not available */') NOSCAN COL(37);            00643500
*                                                                       00643600
*ANS('ELSE') NOSCAN COL(MACCOL+2);  /*                           @P2A*/ 00643700
*ANS('/* Service not available */') NOSCAN COL(37);  /*          @P2A*/ 00643800
*                                                                       00643900
*ANS('GPR15F = IEFSSI_UNAVAILABLE;') NOSCAN COL(MACCOL+4);  /*   @P2A*/ 00644000
*ANS('/* Indicate service not available */') NOSCAN COL(37);  /* @P2A*/ 00644100
*ANS('RFY GPR15F UNRSTD;') NOSCAN COL(MACCOL+2);                        00644200
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00644300
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00644400
*              IF NUMBER(RETCODE)>0                                     00644500
*                THEN                                                   00644600
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00644700
*/*PO.L04 XOUTTOKEN BIT(32)------------------------------------------*/ 00644800
*              IF ZXOUTTOKEN='OUTPUT' |                                 00644900
*                 ZXOUTTOKEN='INOUT'                                    00645000
*                THEN                                                   00645100
*                  ANS(XOUTTOKEN||                                      00645200
*                      '=#Z'||ZNDX||'_XOUTTOKEN;'||                     00645300
*                      '/* XOUTTOKEN BIT(32) */')                       00645400
*                      NORESCAN COL(MACLMAR);                           00645500
*/*PO.L02 XWORKAREA PTR(31)------------------------------------------*/ 00645600
*              IF ZXWORKAREA='OUTPUT' |                                 00645700
*                 ZXWORKAREA='INOUT'                                    00645800
*                THEN                                                   00645900
*                  ANS(XWORKAREA||                                      00646000
*                      '=#Z'||ZNDX||'_XWORKAREA;'||                     00646100
*                      '/* XWORKAREA PTR(31) */')                       00646200
*                      NORESCAN COL(MACLMAR);                           00646300
*/*PO.L05 XSUBDATA1 CHAR(4)------------------------------------------*/ 00646400
*              IF ZXSUBDATA1='OUTPUT' |                                 00646500
*                 ZXSUBDATA1='INOUT'                                    00646600
*                THEN                                                   00646700
*                  ANS(XSUBDATA1||                                      00646800
*                      '=#Z'||ZNDX||'_XSUBDATA1;'||                     00646900
*                      '/* XSUBDATA1 CHAR(4) */')                       00647000
*                      NORESCAN COL(MACLMAR);                           00647100
*/*PO.L05 XSUBDATA2 CHAR(4)------------------------------------------*/ 00647200
*              IF ZXSUBDATA2='OUTPUT' |                                 00647300
*                 ZXSUBDATA2='INOUT'                                    00647400
*                THEN                                                   00647500
*                  ANS(XSUBDATA2||                                      00647600
*                      '=#Z'||ZNDX||'_XSUBDATA2;'||                     00647700
*                      '/* XSUBDATA2 CHAR(4) */')                       00647800
*                      NORESCAN COL(MACLMAR);                           00647900
*/*PO.L08 XRETCODE CHAR(4) RETURN CODE-------------------------------*/ 00648000
*              IF NUMBER(RETCODE)>0                                     00648100
*                THEN                                                   00648200
*                    ANS(XRETCODE||                                     00648300
*                     '=GPR15F; /* SET RETURN CODE */')                 00648400
*                      NORESCAN COL(MACLMAR);                           00648500
*/*PO.L09 XRSNCODE CHAR(4) REASON CODE-------------------------------*/ 00648600
*              IF NUMBER(RSNCODE)>0                                     00648700
*                THEN                                                   00648800
*                    ANS(XRSNCODE||                                     00648900
*                     '=GPR00F; /* SET REASON CODE */')                 00649000
*                      NORESCAN COL(MACLMAR);                           00649100
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00649200
*              IF NUMBER(RSNCODE)>0                                     00649300
*                THEN                                                   00649400
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         00649500
*              IF NUMBER(RETCODE)>0                                     00649600
*                THEN                                                   00649700
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00649800
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00649900
*      END;                                                             00650000
*/*PO.L13 IEFSSI USAGE INDICATOR-------------------------------------*/ 00650100
*  ZIEFSSI='YES';                            /* SET IEFSSI USED */      00650200
*/*PO.L15 END OF EXECUTABLE IEFSSI-PLISTVER MACRO--------------------*/ 00650300
*  IF XMF^='L'                                                          00650400
*    THEN                                                               00650500
*      ANS('END; /* IEFSSI-PLISTVER */')                                00650600
*          NORESCAN COL(MACLMAR);                                       00650700
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00650800
*  ANS(MACCONC||'LIST POP;') NORESCAN COL(MACLMAR);                     00650900
*/*PO.L17 END OF IEFSSI MACRO----------------------------------------*/ 00651000
*  ANS(MACCONC||'SPACE;') NORESCAN COL(MACLMAR);                        00651100
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00651200
*/*******************************************************************/  00651300
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00651400
*/*******************************************************************/  00651500
*      END;                                                             00651600
*/*******************************************************************/  00651700
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00651800
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00651900
*/*******************************************************************/  00652000
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00652100
*    THEN                                                               00652200
*      DO;                                                              00652300
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00652400
*                                      DOUBLEWORD MULTIPLES        */   00652500
*/*******************************************************************/  00652600
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00652700
*/*******************************************************************/  00652800
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00652900
*          THEN                                                         00653000
*            DO;                                                        00653100
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00653200
*                THEN                                                   00653300
*                  DO;                                                  00653400
*                    ANS('?EPILOG                                       00653500
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00653600
*                    EHALIST=EHALIST||',AMG,';                          00653700
*                  END;                                                 00653800
*            END;                                                       00653900
*/*******************************************************************/  00654000
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00654100
*/*******************************************************************/  00654200
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00654300
*          THEN                                                         00654400
*            DO;                                                        00654500
*              IF ZPRMMAX>EHAMAXLEN                                     00654600
*                THEN                                                   00654700
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00654800
*            END;                                                       00654900
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00655000
*          ANS('?EPILOG STRING('''||ZPRM(ZI)||''');')                   00655100
*              COL(MACLMAR);                                            00655200
*        END;                                                           00655300
*      END;                                                             00655400
*/*-----------------------------------------------------------------*/  00655500
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00655600
*/*        BY ?EPILOG                                               */  00655700
*/*-----------------------------------------------------------------*/  00655800
*        IF INDEX(EHAREGS,'01P')=0                                      00655900
*          THEN                                                         00656000
*            EHAREGS=EHAREGS||'01P'; /* GPR01P                      */  00656100
*        IF INDEX(EHAREGS,'00F')=0                                      00656200
*          & NUMBER(RSNCODE)>0                                          00656300
*          THEN                                                         00656400
*            EHAREGS=EHAREGS||'00F'; /* GPR00F                      */  00656500
*        IF INDEX(EHAREGS,'15F')=0                                      00656600
*          THEN                                                         00656700
*            EHAREGS=EHAREGS||'15F'; /* GPR15F                      */  00656800
*  RETURN CODE(ZMACRET);                                                00656900
*%END IEFSSI;                                                           00657000
