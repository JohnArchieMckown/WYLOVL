*                                                                       00100000
* %DCL IGVGQAT_INCLUDED CHAR EXT;                                       00105200
* %DEACTIVATE IGVGQAT_INCLUDED;                                         00110400
* %IF IGVGQAT_INCLUDED = '' %THEN                                       00115600
* %DO;                                                                  00120800
*/* Macro made bi-lingual on 92210. CBGEN compile date 92093         */ 00126000
*% /*                                                                   00131200
         MACRO                                                          00136400
         IGVGQAT &DSECT=YES,&LIST=YES,&GQATITBL=YES,&GQAT=COND,        *00141600
               &GQATENT=COND                                            00146800
         GBLC  &IGVGQAT_INCLUDED                                        00152000
         GBLC  &ZCBPRINT                                                00157200
&IGVGQAT_INCLUDED SETC 'YES'                                            00162400
 TITLE   '&SYSECT  IGVGQAT - GQE Queue Anchor Table                    *00167600
                    '                                                   00172800
**/ IGVGQAT_1:;                                                         00178000
*/* START OF SPECIFICATIONS ******************************************* 00183200
*                                                                       00188400
*01* MACRO-NAME:  IGVGQAT                                               00193600
*                                                                       00200000
*01* DESCRIPTIVE NAME:  GQE Queue Anchor Table                          00250000
*                                                                       00300000
*02*    ACRONYM:  GQAT                                                  00350000
*                                                                       00400000
*01* DSECT-NAME:                                                        00466600
*     GQATITBL                                                          00474900
*     GQAT                                                              00483200
*     GQATENT                                                           00491500
*                                                                    */ 00500000
*/*01* PROPRIETARY STATEMENT=                                        */ 00550000
*/***PROPRIETARY_STATEMENT********************************************/ 00600000
*/*                                                                  */ 00650000
*/*                                                                  */ 00700000
*/* LICENSED MATERIALS - PROPERTY OF IBM                             */ 00750000
*/* THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                      */ 00800000
*/* 5695-047 (C) COPYRIGHT IBM CORP. 1981, 1992                      */ 00850000
*/* SEE COPYRIGHT INSTRUCTIONS                                       */ 00900000
*/*                                                                  */ 00950000
*/* STATUS= HBB4430                                                  */ 01000000
*/*                                                                  */ 01050000
*/***END_OF_PROPRIETARY_STATEMENT*************************************/ 01100000
*/*                                                                     01150000
*                                                                       01200000
*01* COMPONENT:  Virtual Storage Manager (SC1CH)                        01250000
*                                                                       01300000
*01* EYE-CATCHER:  GQAT                                                 01350000
*02*    OFFSET:  0                                                      01400000
*02*    LENGTH:  4                                                      01450000
*                                                                       01500000
*01* STORAGE ATTRIBUTES:                                                01550000
*02*    SUBPOOL:  245                                                   01600000
*02*    KEY:  0                                                         01650000
*02*    RESIDENCY:  Above 16M line                                      01700000
*                                                                       01750000
*01* Method of access:                                                  01762500
*02*    ASM: IGVGQAT GQATITBL=YES,GQATI=YES,GQATENT=YES                 01768700
*02*    PL/AS: Declare GQATPtr Ptr(31)                                  01775000
*                                                                       01787500
*01* CREATED BY:                                                        01800000
*  IEAIPL04 & IEAVNP08 build GQAT index tables and GQATs.               01850000
*  When the system is fully initialized, a GQAT index table exists      01900000
*  that describes 2G, and there exists GQAT table entries for           01950000
*  all of SQA and CSA.                                                  02000000
*                                                                       02050000
*01* Pointed to by:                                                     02100000
*02*  GQAT Index Table is pointed to by GDAGQAT_Index.                  02150000
*02*  GQATs are pointed to by entries in the GQAT index table.          02200000
*                                                                       02250000
*01* Function =                                                         02300000
*02*   This macro contains a map of the GQAT and the GQAT Index         02350000
*      Table. These two mappings provide the basis for the              02400000
*      two-table lookup scheme that VSM uses to keep track of GQEs.     02450000
*      (There is 1 GQE for every GETMAINed piece of common storage.)    02500000
*      These tables enable VSM to take a virtual address (e.g., the     02550000
*      virtual address passed by a FREEMAIN invocation) and find the    02600000
*      GQE that represents the storage at that address.                 02650000
*                                                                       02800000
*02*   Each entry in the GQAT index table points to a GQAT. There       02801800
*      are no null entries in the GQAT index table. However, a GQAT     02803600
*      index table entry may point to the "dummy GQAT", which is a      02805400
*      GQAT all of whose entries point to the GQE that describes 0      02807200
*      bytes at address 0. (This GQE is called the dummy GQE.)          02809000
*                                                                       02810800
*02*   Each entry in a GQAT points to a queue of GQEs. (An entry of     02812600
*      0 indicates an empty queue.) Each 64K portion of virtual         02814400
*      storage has its own entry in a GQAT. Storage that is in use      02816200
*      within a 64K chunk is described by a queue of GQEs pointed to    02818000
*      by the GQAT entry for that 64K chunk. The GQEs on this queue     02819800
*      are in LIFO order.  The GQE queues end with a GQE_NEXT field     02821000
*      of 0.                                                            02822200
*                                                                       02823400
*02*   There are 256 entries in the GQAT index table, and the table     02825200
*      can map all of storage (2G). Thus, each entry in the GQAT        02827000
*      represents 8M of storage (because 2G/256 = 8M). Each GQAT        02828800
*      index table entry points to a GQAT, so GQATs must also           02830600
*      represent 8M of storage. GQATs have 128 entries, so each         02832400
*      entry represents 64K of virtual storage. The smallest            02834200
*      possible GETMAIN is 8 bytes, so the maximum number of GQEs       02836000
*      per GQAT entry is 8K, or 8,192 (because 64K/8=8K).               02837800
*                                                                       02839600
*01* SIZE:                                                              02876000
*      GQATITBL -- X'0400' bytes                                        02906900
*      GQAT     -- X'0204' bytes                                        02937800
*      GQATENT  -- X'0004' bytes                                        02968700
*                                                                       03000000
*01* Storage Estimate =                                                 03050000
*  GQAT Index Table: 1 per system.                                      03100000
*  GQAT:             1 per 8M of common area storage.                   03150000
*                                                                       03200000
*01* Serialization =                                                    03206200
*02*  When writing to the GQAT, VSM uses the VSMFIX lock.               03212400
*     The only time the GQAT index table is updated is during           03218600
*     initialization, so no serialization is needed.                    03224800
*                                                                       03231000
*02*  When monitor programs read the GQAT, it would be best to do       03237200
*     so with no serialization.  (This is because holding the lock      03243400
*     could impact system performance.)  Note that this means that      03250400
*     the GQE pointed to by a GQAT entry could be freemained while      03257400
*     being read.  The GQE may also be put on the queue of free         03264400
*     GQEs while being read.  Monitors will need to handle this         03271400
*     (e.g., a recovery routine could catch the reference to a          03278400
*     freemained GQE, and encountering a GQE on the free queue          03285400
*     could be taken as the end of the queue being run.)                03293000
*                                                                       03296500
*                                                                       03300000
*01* Notes =                                                            03350000
*      The GQEs are in LIFO order, i.e., they are not sorted by         03350100
*      address.  This helps performance because most Getmains for       03350200
*      storage area "X" are immediately followed by a Freemain for      03350300
*      storage area "X".                                                03350400
*                                                                       03350500
*      The GQAT and GQAT index table are very similar to (and were      03350600
*      adapted from) the two-table lookup scheme implimented by AQATs   03350700
*      and the AQAT index table.                                        03350800
*                                                                       03350900
*  +----------------------------------------------------------------    03351400
*  |                                                                    03352100
*  | The picture below gives an example of how the GQAT index table     03352800
*  | might be laid out.  The entry numbers are guesses.  In a real      03353500
*  | system, the numbers will be different, but the order will be the   03354200
*  | same.  Note that the GQAT index table has no null entries.         03354900
*  |                                                                    03355600
*  +----------------------------------------------------------------    03356300
*              +-------------+                                          03357000
*              |             |                                          03357700
*              |  GQAT Index |                                          03358400
*              |    Table    |                                          03359100
*              | -    -    - |                                          03359800
*          +-  |   Entry 255 | ------+                                  03360500
* Extended |   |        .    |       |                                  03361200
* Private  |   |        .    |       +--> Dummy GQAT (see note 1)       03361900
* Area     |   |        .    |       |                                  03362600
*          +-  |   Entry 026 | ------+                                  03363300
*              |             |                                          03364000
*          +-  |   Entry 025 |-----> ECSA GQAT (See note 2)             03364700
*          |   |   Entry 024 |-----> ECSA GQAT (See note 2)             03365400
* Extended |   |        .    |                                          03366100
* CSA      |   |        .    |                                          03366800
*          |   |        .    |                                          03367500
*          |   |   Entry 020 |-----> ECSA GQAT (See note 2)             03368200
*          +-  |   Entry 019 |-----> ECSA GQAT (See note 2)             03368900
*              |             |                                          03369600
*          +-  |   Entry 018 |--+                                       03370300
* Extended |   |        .       |                                       03371000
* LPA      |   |        .    |  +--> Dummy GQAT (see note 1)            03371700
*          |   |        .    |  |                                       03372400
*          +-  |   Entry 015 |--+                                       03373100
*              |             |                                          03373800
*          +-  |   Entry 014 |-----> ESQA GQAT (See note 2)             03374500
*          |   |   Entry 013 |-----> ESQA GQAT (See note 2)             03375200
* Extended |   |        .    |                                          03375900
* SQA      |   |        .    |                                          03376600
*          |   |        .    |                                          03377300
*          |   |   Entry 008 |-----> ESQA GQAT (See note 2)             03378000
*          +-  |   Entry 007 |-----> ESQA GQAT (See note 2)             03378700
*              |             |                                          03379400
*          +-  |   Entry 006 |--+                                       03380100
* Extended |   |        .    |  |                                       03380800
* Nucleus  |   |        .    |  +--> Dummy GQAT (see note 1)            03381500
*          |   |        .    |  |                                       03382200
*          +-  |   Entry 002 |--+                                       03382900
*              |             |                                          03383600
*              |   Entry 001 |-----> Nuc/SQA/LPA/CSA/PVT GQAT           03384300
*              |   Entry 000 |-----> Nuc/SQA/LPA/CSA/PVT GQAT           03385000
*              +-------------+                                          03385700
*                                                                       03386400
* Note 1) A dummy GQAT is a GQAT all of whose entries point to          03387100
*         the GQE that describes 0 bytes at address 0.  This GQE        03387800
*         is called the dummy GQE.                                      03388500
* Note 2) A non-dummy GQAT is a GQAT that describes common              03389200
*         storage that can be obtained by Getmain.  An entry            03389900
*         in a non-dummy GQAT can contain any of the following:         03390600
*         -*- Pointer to a valid GQE                                    03391300
*         -*- Pointer to the dummy GQE                                  03392000
*         -*- Zero (see note 3)                                         03392700
* Note 3) The GQAT entry that describes addresses 0 thru 64K will       03393400
*         never be zero.                                                03394100
*                                                                       03800000
* *************                                                         03850000
*                                                                       03900000
*  GQAT index tables represent storage as follows:                      03950000
*  (All numbers are decimal)                                            04000000
*                                                                       04050000
*  Entry #    Address Range described                                   04100000
*  -------    -----------------------                                   04150000
*  255         2040M thru 2048M-1 (2G-1)                                04200000
*  254         2032M thru 2040M-1                                       04250000
*   .         .        .                                                04300000
*   .         .        .                                                04350000
*   .         .        .                                                04400000
*  002         16M thru 24M-1                                           04450000
*  001         08M thru 16M-1                                           04500000
*  000         00M thru 08M-1                                           04550000
*                                                                       04600000
*  GQATs work the same way, except they are more granular - each        04650000
*  entry represents only 64K.                                           04700000
*                                                                       04750000
* *************                                                         04800000
*                                                                       04850000
*  The figure below depicts a virtual address, and shows which bits of  04900000
*  a virtual address participate in the process of mapping a virtual    04950000
*  address to a GQE.  Bits marked 'i' are used as an index into the     05000000
*  GQAT index table.  Bits marked 'g' are used as an index into the     05050000
*  GQAT.  Bits marked '.' are not used.                                 05100000
*                                                                       05150000
*          +--------------------------------------------+               05200000
*          | .iii iiii  iggg gggg  .... ....  .... .... |               05250000
*          +--------------------------------------------+               05300000
*                                                                       05350000
* *************                                                         05400000
*                                                                       05450000
*  When allocated storage spans an 8M boundary, the AQAT index table    05500000
*  entries for both 8M pieces are non-zero.  (this is because AQAT      05550000
*  allocation bits must be turned on for some pages in both 8M pieces,  05600000
*  so an AQAT must be created for each 8M piece.)  This is not true     05650000
*  for GQAT index tables - there is no reason to create more than 1     05700000
*  GQAT, even when we are allocating storage that spans 8M boundaries.  05750000
*                                                                       05800000
* CHANGE ACTIVITY =                                                     05850000
*        $L0=TCSAU  ,HBB4430,911101,PDF5:  Track CSA/SQA use by Job     05900000
*        $L1=TCSAU  ,HBB4430,920108,PDF5:  Support SHOWHDR, add         05916600
*                    comments.                                          05933200
*        $D1=DKB0027,HBB4430,920318,PDXB:  Make CBs bilingual           05941600
*        $P1=PKB1770,HBB4430,920318,PDF5:  "Start of specifications"    05944400
*                    line has "*" in col 72, which prevents assembly.   05947200
*        $P2=PKB4159,HBB4430,920921,PDLO:  Fix prolog documentation.    05948600
*                                                                       05950000
* END OF SPECIFICATIONS ********************************************/   06000000
*% /*                                                                   06050000
         AIF   ('&ZCBPRINT' EQ 'NO').P1                                 06100000
         AIF   ('&LIST' EQ 'YES').P2                                    06150000
.P1      ANOP                                                           06200000
         PUSH  PRINT                                                    06250000
         PRINT OFF                                                      06300000
.P2      ANOP                                                           06350000
*                                                                       06400000
*    *****************************************************************  06450000
*    *                                                               *  06500000
*    * GQAT Index Table: Given a virtual address, we want to find the*  06550000
*    * GQE that represents storage at that address. The first step in*  06600000
*    * this process is to locate the proper GQAT. Using bits 1 thru 8*  06650000
*    * of the virtual address as an index into GQATITbl gives the    *  06700000
*    * address of the proper GQAT.                                   *  06750000
*    *                                                               *  06800000
*    *****************************************************************  06850000
*                                                                       06900000
*                                                                       06950000
         AIF   ('&GQATITBL' EQ 'NO').L0002                              07000000
         AIF   ('&DSECT' EQ 'YES').L0003                                07050000
         AIF   ('&GQATITBL' NE 'YES').L0002                             07100000
GQATITBL DS    0F                                                       07150000
         AGO   .L0004                                                   07200000
.L0003   ANOP                                                           07250000
GQATITBL DSECT ,                                                        07300000
.L0004   ANOP                                                           07350000
GQATINDX DS    1AL4      Address of GQAT table                          07400000
         ORG   GQATITBL+X'00000400'                                     07450000
GQATITBL_LEN EQU *-GQATITBL                                             07500000
.L0002   ANOP                                                           07550000
*                                                                       07600000
*    *****************************************************************  07650000
*    *                                                               *  07700000
*    * GQE Queue Anchor Table: Given a virtual address, we want to   *  07750000
*    * find the GQE that represents storage at that address. The     *  07800000
*    * second step in this process is to locate the proper GQE queue.*  07850000
*    * Using bits 9 thru 15 of the virtual address as an index into  *  07900000
*    * GQATNtry gives the address of the proper GQE queue. (The queue*  07950000
*    * must then be searched for the proper GQE.)                    *  08000000
*    *                                                               *  08050000
*    *****************************************************************  08100000
*                                                                       08150000
*                                                                       08200000
         AIF   ('&GQAT' EQ 'NO').L0005                                  08250000
         AIF   ('&DSECT' EQ 'YES').L0006                                08300000
         AIF   ('&GQAT' NE 'YES').L0005                                 08350000
GQAT     DS    0F                                                       08400000
         AGO   .L0007                                                   08450000
.L0006   ANOP                                                           08500000
GQAT     DSECT ,                                                        08550000
.L0007   ANOP                                                           08600000
GQATID   DS    1CL0004   Control block identifier                       08650000
GQATARRAY DS   0CL0512   Array of 128 elements                          08700000
GQATNTRY DS    1CL0004   Each cell of this array contains a pointer to *08750000
                         a queue of GQEs.                               08800000
         ORG   GQAT+X'00000204'                                         08850000
GQAT_LEN EQU   *-GQAT                                                   08900000
.L0005   ANOP                                                           08950000
*                                                                       09000000
*    *****************************************************************  09050000
*    *                                                               *  09100000
*    * GQE Queue Anchor Table Entry.                                 *  09150000
*    *                                                               *  09200000
*    *****************************************************************  09250000
*                                                                       09300000
*                                                                       09350000
         AIF   ('&GQATENT' EQ 'NO').L0008                               09400000
         AIF   ('&DSECT' EQ 'YES').L0009                                09450000
         AIF   ('&GQATENT' NE 'YES').L0008                              09500000
GQATENT  DS    0F                                                       09550000
         AGO   .L000A                                                   09600000
.L0009   ANOP                                                           09650000
GQATENT  DSECT ,                                                        09700000
.L000A   ANOP                                                           09750000
GQATGQE  DS    1AL4      Address of the first GQE in a GQE queue. All  *09800000
                         GQEs on this LIFO queue describe storage      *09850000
                         whose start address is within the 64K area    *09900000
                         represented by the GQAT entry.                 09950000
GQATENT_LEN EQU *-GQATENT                                               10000000
.L0008   ANOP                                                           10050000
         AIF   ('&ZCBPRINT' EQ 'NO').P3                                 10100000
         AIF   ('&LIST' EQ 'YES').P4                                    10150000
.P3      ANOP                                                           10200000
         POP   PRINT                                                    10250000
.P4      ANOP                                                           10300000
.P_EXIT  ANOP                                                           10350000
         MEND                                                           10400000
**/ IGVGQAT_2:;                                                         10450000
* %IGVGQAT_INCLUDED = 'YES';                                            10500000
* %DCL ZCBPRINT CHAR EXT;                                               10550000
* %DEACTIVATE ZCBPRINT;                                                 10600000
* %DCL IGVGQAT_LIST CHAR EXT;                                           10650000
* %DEACTIVATE IGVGQAT_LIST;                                             10700000
* %IF IGVGQAT_LIST ^= 'NO' &                                            10750000
*    ZCBPRINT ^= 'NO' %THEN                                             10800000
*   %GOTO IGVGQAT_3;                                                    10850000
*   @LIST PUSH NOECHO;                                                  10900000
*   @LIST NOASSEMBLE NOECHO;                                            10950000
*   @LIST OFF C NOECHO;                                                 11000000
* %IGVGQAT_3:;                                                          11050000
*/* Start of PL/X Source                                             */ 11100000
*                                                                       11150000
*       /* GQAT Index Table:                                            11200000
*          Given a virtual address, we want to find the GQE that        11250000
*          represents storage at that address.  The first step in       11300000
*          this process is to locate the proper GQAT.  Using bits       11350000
*          1 thru 8 of the virtual address as an index into GQATITbl    11400000
*          gives the address of the proper GQAT.                        11450000
*                                                                    */ 11500000
*DCL 1 GQATITbl(0:255) BASED,                                           11550000
*      3 GQATIndx PTR(31);    /* Address of GQAT table               */ 11600000
*                                                                       11650000
*       /*  GQE Queue Anchor Table:                                     11700000
*          Given a virtual address, we want to find the GQE that        11750000
*          represents storage at that address.  The second step in      11800000
*          this process is to locate the proper GQE queue.  Using bits  11850000
*          9 thru 15 of the virtual address as an index into GQATNtry   11900000
*          gives the address of the proper GQE queue.  (The queue must  11950000
*          then be searched for the proper GQE.)                        12000000
*                                                                    */ 12050000
*DCL 1 GQAT BASED BDY(WORD),                                            12100000
*      3 GQATID CHAR(4),      /* Control block identifier            */ 12150000
*      3 GQATArray,           /* Array of 128 elements               */ 12200000
*        5 GQATNtry(0:127) CHAR(LENGTH(GQATENT)) Bdy(Word); /* Each     12250000
*                                cell of this array contains            12300000
*                                a pointer to a queue of GQEs.          12350000
*                                                                    */ 12400000
*                                                                       12450000
*       /*  GQE Queue Anchor Table Entry.                            */ 12500000
*DCL 1 GQATEnt BASED(GQATPtr),                                          12550000
*       3 GQATGQE PTR(31) BDY(WORD); /* Address of the first GQE in a   12600000
*                                GQE queue.  All GQEs on this           12650000
*                                LIFO queue describe storage            12700000
*                                whose start address is within the 64K  12750000
*                                area represented by the GQAT entry.    12800000
*                                                                    */ 12850000
*/* End of PL/X Source                                               */ 12900000
* %IF IGVGQAT_LIST ^= 'NO' &                                            12950000
*    ZCBPRINT ^= 'NO' %THEN                                             13000000
*   %GOTO IGVGQAT_4;                                                    13050000
*   @LIST POP NOECHO;                                                   13100000
* %IGVGQAT_4:;                                                          13150000
* %END;                                                                 13200000
