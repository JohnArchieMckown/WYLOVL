*%IEFSSVT: MACRO KEYS(PLISTVER,SUBNAME,REQUEST,SSVTDATA,OUTTOKEN,       00000100
*                 SUBPOOL,MAXENTRIES,LOADTOGLOBAL,ERRFUNCT,INTOKEN,     00000200
*                 RETCODE,RSNCODE,COM,MF);                              00000300
*/**** START OF SPECIFICATIONS **************************************** 00000400
*                                                                     * 00000500
*                                                                     * 00000600
*01* MACRO NAME:  IEFSSVT                               -04/14/94-<1> * 00000700
*                                                                     * 00000800
*                                                                     * 00000900
*01* DESCRIPTIVE NAME:  Subsystem Vector Table Service Macro          * 00001000
*                                                                     * 00001100
*01* PROPRIETARY STATEMENT:                                           * 00001200
*                                                                     * 00001300
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001400
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00001500
*     5655-068 (C) COPYRIGHT IBM CORP. 1994                           * 00001600
*     SEE COPYRIGHT INSTRUCTIONS                                      * 00001700
*                                                                     * 00001800
* STATUS= HBB5520                                                     * 00001900
*                                                                     * 00002000
*                                                                     * 00002100
*                                                                     * 00002200
*01* FUNCTION:                                                        * 00002300
*                                                                     * 00002400
*      Use the IEFSSVT macro to build and modify subsystem vector     * 00002500
*      tables.                                                        * 00002600
*                                                                     * 00002700
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00002800
*                                                                     * 00002900
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00003000
*                                                                     * 00003100
*01* ENVIRONMENT:                                                     * 00003200
*                                                                     * 00003300
*                                                                     * 00003400
*      Minimum authorization: All services require one of the         * 00003500
*                        following:                                   * 00003600
*                                                                     * 00003700
*                                                                     * 00003800
*                        o   Supervisor state                         * 00003900
*                                                                     * 00004000
*                        o   Any system PSW key                       * 00004100
*                                                                     * 00004200
*                        o   PSW key mask permitting use of any       * 00004300
*                            system key                               * 00004400
*                                                                     * 00004500
*                        o   APF authorization.                       * 00004600
*                                                                     * 00004700
*                                                                     * 00004800
*                                                                     * 00004900
*      Dispatchable unit mode: Task mode.                             * 00005000
*                                                                     * 00005100
*      Cross Memory Mode: PASN=HASN=SASN.                             * 00005200
*                                                                     * 00005300
*      AMODE:            24- or 31-bit.                               * 00005400
*                                                                     * 00005500
*      ASC mode:         Primary or Access Register.                  * 00005600
*                                                                     * 00005700
*      Interrupt status: Enabled for I/O and external interrupts.     * 00005800
*                                                                     * 00005900
*      Locks:            No locks held.                               * 00006000
*                                                                     * 00006100
*      Control parameters: Control parameters must be in the primary  * 00006200
*                        address space.                               * 00006300
*                                                                     * 00006400
*                                                                     * 00006500
*                                                                     * 00006600
*01* PROGRAMMING REQUIREMENTS:                                        * 00006700
*                                                                     * 00006800
*    Before issuing the IEFSSVT macro the caller must have included   * 00006900
*    the following system control blocks:                             * 00007000
*                                                                     * 00007100
*                                                                     * 00007200
*    o   CVT (mapped by macro CVT)                                    * 00007300
*                                                                     * 00007400
*    o   JESCT (mapped by macro IEFJESCT)                             * 00007500
*                                                                     * 00007600
*                                                                     * 00007700
*                                                                     * 00007800
*    If using this macro in a reentrant routine, the list form of the * 00007900
*    macro must be coded in order to use the execute form.            * 00008000
*                                                                     * 00008100
*    In a PL/X routine, the caller must invoke the ?EPILOG macro.     * 00008200
*                                                                     * 00008300
*    The caller must include the IEFJSRC macro to define the Dynamic  * 00008400
*    SSI return and reason codes.                                     * 00008500
*                                                                     * 00008600
*01* RESTRICTIONS:                                                    * 00008700
*                                                                     * 00008800
*    The caller may not have an EUT FRR established.                  * 00008900
*                                                                     * 00009000
*    The services provided by IEFSSVT are available only to dynamic   * 00009100
*    subsystems, i.e., those defined to the SSI by one of the         * 00009200
*    following mechanisms:                                            * 00009300
*                                                                     * 00009400
*                                                                     * 00009500
*    o   Keyword-format IEFSSNxx parmlib member entry                 * 00009600
*                                                                     * 00009700
*    o   IEFSSI REQUEST=ADD macro                                     * 00009800
*                                                                     * 00009900
*    o   SETSSI ADD command                                           * 00010000
*                                                                     * 00010100
*                                                                     * 00010200
*                                                                     * 00010300
*01* INPUT REGISTER INFORMATION:                                      * 00010400
*                                                                     * 00010500
*    There are no input register requirements for issuing the IEFSSVT * 00010600
*    macro.                                                           * 00010700
*                                                                     * 00010800
*01* OUTPUT REGISTER INFORMATION:                                     * 00010900
*                                                                     * 00011000
*    When control returns to the caller, the GPRs contain:            * 00011100
*                                                                     * 00011200
*                                                                     * 00011300
*    REGISTER  CONTENTS                                               * 00011400
*                                                                     * 00011500
*    0         Reason code                                            * 00011600
*                                                                     * 00011700
*    1         Used as work register by the system                    * 00011800
*                                                                     * 00011900
*    2-13      Unchanged                                              * 00012000
*                                                                     * 00012100
*    14        Used as work register by the system.                   * 00012200
*                                                                     * 00012300
*    15        Return code                                            * 00012400
*                                                                     * 00012500
*                                                                     * 00012600
*                                                                     * 00012700
*    When control returns to the caller, the ARs contain:             * 00012800
*                                                                     * 00012900
*                                                                     * 00013000
*    REGISTER  CONTENTS                                               * 00013100
*                                                                     * 00013200
*    0-1       Used as work registers by the system.                  * 00013300
*                                                                     * 00013400
*    2-13      Unchanged                                              * 00013500
*                                                                     * 00013600
*    14-15     Used as work registers by the system.                  * 00013700
*                                                                     * 00013800
*                                                                     * 00013900
*                                                                     * 00014000
*01* PERFORMANCE IMPLICATIONS:                                        * 00014100
*                                                                     * 00014200
*    None.                                                            * 00014300
*                                                                     * 00014400
*01* SYNTAX:                                                          * 00014500
*                                                                     * 00014600
*[xlabel]  IEFSSVT   [ PLISTVER                                       * 00014700
*                               =xplistver|IMPLIED_VERSION]         * 00014800
*                     ,SUBNAME=xsubname                               * 00014900
*                    ,REQUEST=CREATE                                 * 00015000
*                   |     ,SSVTDATA=xssvtdata                         * 00015100
*                   |     ,OUTTOKEN=xouttoken                         * 00015200
*                   |    [,SUBPOOL=xsubpool|241]                    * 00015300
*                   |     ,MAXENTRIES=xmaxentries                     * 00015400
*                   |    [,LOADTOGLOBAL=NO|YES]                     * 00015500
*                   |    [,ERRFUNCT=xerrfunct]                        * 00015600
*                    ,REQUEST=DISABLE                                * 00015700
*                   |     ,SSVTDATA=xssvtdata                         * 00015800
*                   |    [,INTOKEN=xintoken|NULL]                   * 00015900
*                    ,REQUEST=ENABLE                                 * 00016000
*                   |     ,SSVTDATA=xssvtdata                         * 00016100
*                   |    [,INTOKEN=xintoken|NULL]                   * 00016200
*                   |    [,LOADTOGLOBAL=NO|YES]                     * 00016300
*                   |    [,ERRFUNCT=xerrfunct]                        * 00016400
*                    ,REQUEST=EXCHANGE                               * 00016500
*                         ,SSVTDATA=xssvtdata                         * 00016600
*                        [,INTOKEN=xintoken|NULL]                   * 00016700
*                        [,LOADTOGLOBAL=NO|YES]                     * 00016800
*                        [,ERRFUNCT=xerrfunct]                        * 00016900
*                    [,RETCODE=xretcode]                              * 00017000
*                    [,RSNCODE=xrsncode]                              * 00017100
*                    [,COM=xcom|NULL]                               * 00017200
*                   [,MF=S]                                          * 00017300
*                   [,MF=(L,xmfctrl,xmfattr|0D)]                   * 00017400
*                   [,MF=(E,xmfctrl,COMPLETE)]                     * 00017500
*                                                                     * 00017600
*                                                                     * 00017700
*      Where:                                                         * 00017800
*                                                                     * 00017900
*                                                                     * 00018000
*      [xlabel]                                                       * 00018100
*          is an optional symbol, starting in column 1, that is the   * 00018200
*          name on the IEFSSVT macro invocation.  The name must       * 00018300
*          conform to the rules for an ordinary assembler language    * 00018400
*          symbol.                                                    * 00018500
*          DEFAULT: No name.                                          * 00018600
*                                                                     * 00018700
*                                                                     * 00018800
*                                                                     * 00018900
*                                                                     * 00019000
*      [PLISTVER(xplistver|IMPLIED_VERSION)]                        * 00019100
*          is an optional byte input decimal value in the "1-1" range * 00019200
*          that specifies the macro version.  PLISTVER is the only    * 00019300
*          key allowed on the list form of MF and determines which    * 00019400
*          parameter list is generated.  Note that MAX may be         * 00019500
*          specified instead of a number, and the parameter list will * 00019600
*          be of the largest size currently supported. This size may  * 00019700
*          grow from release to release (thus possibly affecting the  * 00019800
*          amount of storage needed by your program).  If your        * 00019900
*          program can tolerate this, IBM recommends that you always  * 00020000
*          specify MAX when creating the list form parameter list as  * 00020100
*          that will ensure that the list form parameter list is      * 00020200
*          always long enough to hold whatever parameters might be    * 00020300
*          specified on the execute form.                             * 00020400
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00020500
*          default is the lowest version which allows all of the      * 00020600
*          parameters specified on the invocation to be processed.    * 00020700
*                                                                     * 00020800
*                                                                     * 00020900
*                                                                     * 00021000
*                                                                     * 00021100
*      SUBNAME(xsubname)                                              * 00021200
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00021300
*          only) of a required 4 character input containing the       * 00021400
*          subsystem name.  It must be the name of a subsystem that   * 00021500
*          has been previously defined to the system using SSI        * 00021600
*          services.                                                  * 00021700
*                                                                     * 00021800
*          If the length of the subsystem name is less than 4         * 00021900
*          characters, it must be padded to the right with blanks or  * 00022000
*          nulls.                                                     * 00022100
*                                                                     * 00022200
*                                                                     * 00022300
*                                                                     * 00022400
*                                                                     * 00022500
*       REQUEST(CREATE|DISABLE|ENABLE|EXCHANGE)                     * 00022600
*          is a required keyword input that specifies the action to   * 00022700
*          be performed.                                              * 00022800
*                                                                     * 00022900
*                                                                     * 00023000
*           REQUEST(CREATE)                                           * 00023100
*              Use the CREATE request to cause a new subsystem vector * 00023200
*              table to be built and initialized.                     * 00023300
*                                                                     * 00023400
*              Vector tables created through this service will be     * 00023500
*              located in storage above the 16M line if the requested * 00023600
*              subpool permits.                                       * 00023700
*                                                                     * 00023800
*                                                                     * 00023900
*              SSVTDATA(xssvtdata)                                    * 00024000
*                  is a required input.  It is the name (RS-type) of  * 00024100
*                  the function routine input table relating the      * 00024200
*                  function codes to be supported by the vector table * 00024300
*                  and the function routines that respond to them.    * 00024400
*                  The table is built using the IEFSSVTI macro.  This * 00024500
*                  field should contain the name specified by the     * 00024600
*                  IEFSSVTI SSVTDATA key.                             * 00024700
*                                                                     * 00024800
*                                                                     * 00024900
*                                                                     * 00025000
*                                                                     * 00025100
*              OUTTOKEN(xouttoken)                                    * 00025200
*                  is the name (RS-type) (or address in register      * 00025300
*                  (2)-(12) ASM only) of a required 32 bit output     * 00025400
*                  where the token representing the new subsystem     * 00025500
*                  vector table will be returned.  The token is used  * 00025600
*                  to identify the vector table, for example when     * 00025700
*                  activating the subsystem using the IEFSSI          * 00025800
*                  REQUEST=ACTIVATE macro.                            * 00025900
*                                                                     * 00026000
*                                                                     * 00026100
*                                                                     * 00026200
*                                                                     * 00026300
*              [SUBPOOL(xsubpool|241)]                              * 00026400
*                  is the name (RS-type) (or address in register      * 00026500
*                  (2)-(12) ASM only) of an optional byte input       * 00026600
*                  containing the subpool number in which the         * 00026700
*                  subsystem vector table is to be built.  The        * 00026800
*                  subpool must represent common storage.             * 00026900
*                  DEFAULT: 241                                       * 00027000
*                                                                     * 00027100
*                                                                     * 00027200
*                                                                     * 00027300
*                                                                     * 00027400
*              MAXENTRIES(xmaxentries)                                * 00027500
*                  is the name (RS-type) (or address in register      * 00027600
*                  (2)-(12) ASM only) of a required halfword input    * 00027700
*                  that defines the maximum number of function        * 00027800
*                  routine entries that can be contained by the       * 00027900
*                  vector table.  The maximum number must:            * 00028000
*                                                                     * 00028100
*                                                                     * 00028200
*                  o   Be greater than or equal to 1 and less than or * 00028300
*                      equal to 255.                                  * 00028400
*                                                                     * 00028500
*                  o   Be greater than or equal to number of function * 00028600
*                      routines defined in the input table created    * 00028700
*                      with the IEFSSVTI macro.                       * 00028800
*                                                                     * 00028900
*                  o   Contain the maximum number of function routine * 00029000
*                      entries the calling subsystem will require     * 00029100
*                      throughout the life of the subsystem vector    * 00029200
*                      table.                                         * 00029300
*                                                                     * 00029400
*                                                                     * 00029500
*                                                                     * 00029600
*                                                                     * 00029700
*                                                                     * 00029800
*                                                                     * 00029900
*              [LOADTOGLOBAL(NO|YES)]                               * 00030000
*                  is an optional keyword input that indicates that   * 00030100
*                  the function routines are to be loaded to global   * 00030200
*                  storage.  Use this keyword when the function       * 00030300
*                  routines are specified by name in the function     * 00030400
*                  routine input table created using IEFSSVTI and do  * 00030500
*                  not reside in the link pack area.  This keyword is * 00030600
*                  ignored for input function routines that are       * 00030700
*                  specified by address rather than name.             * 00030800
*                                                                     * 00030900
*                  If LOADTOGLOBAL=YES, the SSI will issue a LOAD for * 00031000
*                  the named function routine with the following      * 00031100
*                  parameters:                                        * 00031200
*                                                                     * 00031300
*                                                                     * 00031400
*                      EOM=YES                                        * 00031500
*                                                                     * 00031600
*                      LSEARCH=NO                                     * 00031700
*                                                                     * 00031800
*                      GLOBAL=(YES,P)                                 * 00031900
*                                                                     * 00032000
*                                                                     * 00032100
*                  DEFAULT: NO                                        * 00032200
*                                                                     * 00032300
*                                                                     * 00032400
*                  NO        Load to global is not necessary for the  * 00032500
*                            function routines.                       * 00032600
*                                                                     * 00032700
*                  YES       Load to global is necessary for the      * 00032800
*                            function routines.                       * 00032900
*                                                                     * 00033000
*                                                                     * 00033100
*                                                                     * 00033200
*                                                                     * 00033300
*                                                                     * 00033400
*                                                                     * 00033500
*              [ERRFUNCT(xerrfunct)]                                  * 00033600
*                  is the name (RS-type) (or address in register      * 00033700
*                  (2)-(12) ASM only) of an optional 8 character      * 00033800
*                  output that receives the function routine name     * 00033900
*                  being processed when an error occurred.  Check     * 00034000
*                  this output field if you receive return code       * 00034100
*                  IEFSSVT_LOAD_ERROR (decimal 20) from the IEFSSVT   * 00034200
*                  CREATE request.                                    * 00034300
*                                                                     * 00034400
*                                                                     * 00034500
*                                                                     * 00034600
*           REQUEST(DISABLE)                                          * 00034700
*              Use the DISABLE request to deactivate specific         * 00034800
*              function codes.                                        * 00034900
*                                                                     * 00035000
*                                                                     * 00035100
*              SSVTDATA(xssvtdata)                                    * 00035200
*                  is a required input.  It is the name (RS-type) of  * 00035300
*                  the function routine input table identifying the   * 00035400
*                  function codes to be disabled.  The table is built * 00035500
*                  using the IEFSSVTI macro.  This field should       * 00035600
*                  contain the name specified by the IEFSSVTI         * 00035700
*                  SSVTDATA key.                                      * 00035800
*                                                                     * 00035900
*                  For a DISABLE request, the function routine names  * 00036000
*                  or addresses in the input table are ignored.  Only * 00036100
*                  the function code information is used.             * 00036200
*                                                                     * 00036300
*                                                                     * 00036400
*                                                                     * 00036500
*                                                                     * 00036600
*              [INTOKEN(xintoken|NULL)]                             * 00036700
*                  is the name (RS-type) (or address in register      * 00036800
*                  (2)-(12) ASM only) of an optional 32 bit input     * 00036900
*                  that specifies the token of the target subsystem   * 00037000
*                  vector table.                                      * 00037100
*                  DEFAULT: NULL                                      * 00037200
*                                                                     * 00037300
*                                                                     * 00037400
*                                                                     * 00037500
*           REQUEST(ENABLE)                                           * 00037600
*              Use the ENABLE request to activate new function codes  * 00037700
*              or to reactivate function codes that have been         * 00037800
*              previously disabled.  New function codes can be        * 00037900
*              enabled only if the vector table has enough empty      * 00038000
*              function routine slots to contain any function         * 00038100
*              routines not already represented in the table.         * 00038200
*                                                                     * 00038300
*                                                                     * 00038400
*              SSVTDATA(xssvtdata)                                    * 00038500
*                  is a required input.  It is the name (RS-type) of  * 00038600
*                  the function routine input table identifying the   * 00038700
*                  new function codes to be supported by the vector   * 00038800
*                  table and the function routines that respond to    * 00038900
*                  them.  The table is built using the IEFSSVTI       * 00039000
*                  macro.  This field should contain the name         * 00039100
*                  specified by the IEFSSVTI SSVTDATA key.            * 00039200
*                                                                     * 00039300
*                                                                     * 00039400
*                                                                     * 00039500
*                                                                     * 00039600
*              [INTOKEN(xintoken|NULL)]                             * 00039700
*                  is the name (RS-type) (or address in register      * 00039800
*                  (2)-(12) ASM only) of an optional 32 bit input     * 00039900
*                  that specifies the token of the target subsystem   * 00040000
*                  vector table.                                      * 00040100
*                  DEFAULT: NULL                                      * 00040200
*                                                                     * 00040300
*                                                                     * 00040400
*                                                                     * 00040500
*                                                                     * 00040600
*              [LOADTOGLOBAL(NO|YES)]                               * 00040700
*                  is an optional keyword input that indicates that   * 00040800
*                  the function routines are to be loaded to global   * 00040900
*                  storage.  Use this keyword when the function       * 00041000
*                  routines are specified by name in the function     * 00041100
*                  routine input table created using IEFSSVTI and do  * 00041200
*                  not reside in the link pack area.  This keyword is * 00041300
*                  ignored for input function routines that are       * 00041400
*                  specified by address rather than name.             * 00041500
*                                                                     * 00041600
*                  If LOADTOGLOBAL=YES, the SSI will issue a LOAD for * 00041700
*                  the named function routine with the following      * 00041800
*                  parameters:                                        * 00041900
*                                                                     * 00042000
*                                                                     * 00042100
*                      EOM=YES                                        * 00042200
*                                                                     * 00042300
*                      LSEARCH=NO                                     * 00042400
*                                                                     * 00042500
*                      GLOBAL=(YES,P)                                 * 00042600
*                                                                     * 00042700
*                                                                     * 00042800
*                  DEFAULT: NO                                        * 00042900
*                                                                     * 00043000
*                                                                     * 00043100
*                  NO        Load to global is not necessary for the  * 00043200
*                            function routines.                       * 00043300
*                                                                     * 00043400
*                  YES       Load to global is necessary for the      * 00043500
*                            function routines.                       * 00043600
*                                                                     * 00043700
*                                                                     * 00043800
*                                                                     * 00043900
*                                                                     * 00044000
*                                                                     * 00044100
*                                                                     * 00044200
*              [ERRFUNCT(xerrfunct)]                                  * 00044300
*                  is the name (RS-type) (or address in register      * 00044400
*                  (2)-(12) ASM only) of an optional 8 character      * 00044500
*                  output that receives the function routine name     * 00044600
*                  being processed when an error occurred.  Check     * 00044700
*                  this output field if you get a return code         * 00044800
*                  IEFSSVT_LOAD_ERROR (decimal 20) from the macro.    * 00044900
*                                                                     * 00045000
*                                                                     * 00045100
*                                                                     * 00045200
*           REQUEST(EXCHANGE)                                         * 00045300
*              Use the EXCHANGE request to identify new function      * 00045400
*              routines to respond to a set of function codes.        * 00045500
*                                                                     * 00045600
*                                                                     * 00045700
*              SSVTDATA(xssvtdata)                                    * 00045800
*                  is a required input.  It is the name (RS-type) of  * 00045900
*                  the function routine input table identifying the   * 00046000
*                  function codes affected by the exchange request    * 00046100
*                  and the new function routines that are to support  * 00046200
*                  them.  The table is built using the IEFSSVTI       * 00046300
*                  macro.  This field should contain the name         * 00046400
*                  specified by the IEFSSVTI SSVTDATA key.            * 00046500
*                                                                     * 00046600
*                                                                     * 00046700
*                                                                     * 00046800
*                                                                     * 00046900
*              [INTOKEN(xintoken|NULL)]                             * 00047000
*                  is the name (RS-type) (or address in register      * 00047100
*                  (2)-(12) ASM only) of an optional 32 bit input     * 00047200
*                  that specifies the token of the target subsystem   * 00047300
*                  vector table.                                      * 00047400
*                  DEFAULT: NULL                                      * 00047500
*                                                                     * 00047600
*                                                                     * 00047700
*                                                                     * 00047800
*                                                                     * 00047900
*              [LOADTOGLOBAL(NO|YES)]                               * 00048000
*                  is an optional keyword input that indicates that   * 00048100
*                  the function routines are to be loaded to global   * 00048200
*                  storage.  Use this keyword when the function       * 00048300
*                  routines are specified by name in the function     * 00048400
*                  routine input table created using IEFSSVTI and do  * 00048500
*                  not reside in the link pack area.  This keyword is * 00048600
*                  ignored for input function routines that are       * 00048700
*                  specified by address rather than name.             * 00048800
*                                                                     * 00048900
*                  If LOADTOGLOBAL=YES, the SSI will issue a LOAD for * 00049000
*                  the named function routine with the following      * 00049100
*                  parameters:                                        * 00049200
*                                                                     * 00049300
*                                                                     * 00049400
*                      EOM=YES                                        * 00049500
*                                                                     * 00049600
*                      LSEARCH=NO                                     * 00049700
*                                                                     * 00049800
*                      GLOBAL=(YES,P)                                 * 00049900
*                                                                     * 00050000
*                                                                     * 00050100
*                  DEFAULT: NO                                        * 00050200
*                                                                     * 00050300
*                                                                     * 00050400
*                  NO        Load to global is not necessary for the  * 00050500
*                            function routines.                       * 00050600
*                                                                     * 00050700
*                  YES       Load to global is necessary for the      * 00050800
*                            function routines.                       * 00050900
*                                                                     * 00051000
*                                                                     * 00051100
*                                                                     * 00051200
*                                                                     * 00051300
*                                                                     * 00051400
*                                                                     * 00051500
*              [ERRFUNCT(xerrfunct)]                                  * 00051600
*                  is the name (RS-type) (or address in register      * 00051700
*                  (2)-(12) ASM only) of an optional 8 character      * 00051800
*                  output that receives the function routine name     * 00051900
*                  being processed when an error occurred.  Check     * 00052000
*                  this output field if you receive return code       * 00052100
*                  IEFSSVT_LOAD_ERROR (decimal 20) from the IEFSSVT   * 00052200
*                  EXCHANGE request.                                  * 00052300
*                                                                     * 00052400
*                                                                     * 00052500
*                                                                     * 00052600
*                                                                     * 00052700
*                                                                     * 00052800
*                                                                     * 00052900
*                                                                     * 00053000
*                                                                     * 00053100
*      [RETCODE(xretcode)]                                            * 00053200
*          is the name (RS-type) of an optional fullword output       * 00053300
*          variable (or register (2)-(12) ASM only) into which the    * 00053400
*          return code is to be copied from GPR 15.                   * 00053500
*                                                                     * 00053600
*                                                                     * 00053700
*                                                                     * 00053800
*                                                                     * 00053900
*      [RSNCODE(xrsncode)]                                            * 00054000
*          is the name (RS-type) of an optional fullword output       * 00054100
*          variable (or register (2)-(12) ASM only) into which the    * 00054200
*          reason code is to be copied from GPR 0.                    * 00054300
*                                                                     * 00054400
*                                                                     * 00054500
*                                                                     * 00054600
*                                                                     * 00054700
*      [COM(xcom|NULL)]                                             * 00054800
*          is an optional character input  that will appear in the    * 00054900
*          block comment before the macro invocation echo. It can be  * 00055000
*          used to comment the macro invocation.  The comment string  * 00055100
*          must be enclosed in quotes if it contains any lower case   * 00055200
*          characters.                                                * 00055300
*          DEFAULT: NULL                                              * 00055400
*                                                                     * 00055500
*                                                                     * 00055600
*                                                                     * 00055700
*                                                                     * 00055800
*      [MF(S|L|E)]                                                  * 00055900
*          is an optional keyword input which specifies the macro     * 00056000
*          form.                                                      * 00056100
*          DEFAULT: S                                                 * 00056200
*                                                                     * 00056300
*                                                                     * 00056400
*          [MF(S)]                                                    * 00056500
*              specifies the standard form of the macro.  The "S"     * 00056600
*              form generates code to put the parameters into the     * 00056700
*              parameter list and invoke the desired service.  Full   * 00056800
*              checking for required macro keys is done along with    * 00056900
*              supplying defaults for omitted optional parameters.    * 00057000
*              The ?EPILOG macro must be invoked at the end of the    * 00057100
*              module.                                                * 00057200
*                                                                     * 00057300
*              For assembly language code modules, the "S" form       * 00057400
*              generates code to put the parameters into an in-line   * 00057500
*              parameter list and invoke the desired service.  Full   * 00057600
*              checking for required macro keys is done along with    * 00057700
*              supplying defaults for omitted optional parameters.    * 00057800
*                                                                     * 00057900
*          [MF(L,xmfctrl,xmfattr|BDY(DWORD))]                       * 00058000
*              specifies the list form of the macro.  The "L" form    * 00058100
*              defines an area to be used for the parameter list.     * 00058200
*              Only the PLISTVER key may be specified on the          * 00058300
*              invocation.  All other macro parameters are flagged as * 00058400
*              errors.  If PLISTVER is not specified, the original    * 00058500
*              parameter list definition is used.                     * 00058600
*                                                                     * 00058700
*            ,xmfctrl                                                 * 00058800
*              is a required input.  It is the name of a storage area * 00058900
*              for the parameter list.                                * 00059000
*                                                                     * 00059100
*            ,xmfattr|BDY(DWORD)                                    * 00059200
*              is an optional 60 character input string that varies   * 00059300
*              from 1 to 60 characters. It can contain any value that * 00059400
*              is valid on an assembler DS pseudo-op                  * 00059500
*              (assembler-only). You can use this parameter to force  * 00059600
*              boundary alignment of the parameter list.              * 00059700
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/AS, which * 00059800
*              forces the parameter list to a doubleword boundary.    * 00059900
*                                                                     * 00060000
*          [MF(E,xmfctrl,COMPLETE)]                                 * 00060100
*              specifies the execute form of the macro.  The "E" form * 00060200
*              generates code to put the parameters into the          * 00060300
*              parameter list specified by xmfctrl and provides full  * 00060400
*              syntax checking with default setting.                  * 00060500
*                                                                     * 00060600
*            ,xmfctrl                                                 * 00060700
*              is a required input.  It is the name (RS-type) (or     * 00060800
*              address in register (1)-(12) ASM only) of a storage    * 00060900
*              area for the parameter list.                           * 00061000
*                                                                     * 00061100
*            ,COMPLETE                                              * 00061200
*              is an optional keyword input which specifies the       * 00061300
*              degree of macro parameter syntax checking.             * 00061400
*              DEFAULT: COMPLETE                                      * 00061500
*                                                                     * 00061600
*                                                                     * 00061700
*              COMPLETE   Checking for required macro keys is done    * 00061800
*                        and defaults are supplied for omitted        * 00061900
*                        optional parameters.                         * 00062000
*                                                                     * 00062100
*                                                                     * 00062200
*                                                                     * 00062300
*                                                                     * 00062400
*                                                                     * 00062500
*                                                                     * 00062600
*                                                                     * 00062700
*01* ABEND CODES:                                                     * 00062800
*                                                                     * 00062900
*                                                                     * 00063000
*       8C5       Refer to MVS/ESA System Codes for an explanation    * 00063100
*                 and programmer responses.                           * 00063200
*                                                                     * 00063300
*                                                                     * 00063400
*                                                                     * 00063500
*01* RETURN CODES:                                                    * 00063600
*                                                                     * 00063700
*                                                                     * 00063800
*                 Return codes are documented in mapping macro        * 00063900
*                 IEFJSRC.                                            * 00064000
*                                                                     * 00064100
*                                                                     * 00064200
*                                                                     * 00064300
*01* REASON CODES:                                                    * 00064400
*                                                                     * 00064500
*       Reason codes are documented in mapping macro IEFJSRC.         * 00064600
*                                                                     * 00064700
*01* MODULE TYPE:  ASSEM-PL/AS MACRO                                  * 00064800
*                                                                     * 00064900
*02*   PROCESSOR:  ASSEM-PL/AS                                        * 00065000
*                                                                     * 00065100
*01* COMPONENT:  SC1B6                                                * 00065200
*                                                                     * 00065300
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00065400
*                                                                     * 00065500
*01* MACRO USAGE NOTES:                                               * 00065600
*                                                                     * 00065700
*                                                                     * 00065800
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00065900
*        global macro variable.  Any value other than 'NO' will       * 00066000
*        result in the macro expansion being printed.  The default is * 00066100
*        'YES'.  The following examples illustrate how the ZPRINT     * 00066200
*        variable should be set.                                      * 00066300
*                                                                     * 00066400
*                    GBLC &ZPRINT                                     * 00066500
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00066600
*                                                                     * 00066700
*                                                                     * 00066800
*    2.  All keys currently contained in the IEFSSVT macro correspond * 00066900
*        to  version 1.  If you specify PLISTVER, use a value of 1 or * 00067000
*        MAX.                                                         * 00067100
*                                                                     * 00067200
*                                                                     * 00067300
*                                                                     * 00067400
*                                                                     * 00067500
*01* CHANGE ACTIVITY:                                                 * 00067600
*                                                                     * 00067700
*   Flag LineItem  FMID    Date   ID    Comment                       * 00067800
*                                                                     * 00067900
*    $L0=SSIDP    HBB5520 940210 PDBN:  Dynamic SSI                   * 00068000
*    $P1=PN70258  HBB5520 940310 PDBN:  Dynamic SSI                   * 00068100
*    $D1=DN70027  HBB5520 940414 PDBN:  Dynamic SSI                   * 00068200
*    $D2=DN70025  HBB5520 940414 PDBN:  Dynamic SSI                   * 00068300
*    $P2=PN70937  HBB5520 940908 PDBN:  Dynamic SSI                   * 00068400
****** END OF SPECIFICATIONS *****************************************/ 00068500
*/********************************************************************* 00068600
         MACRO                                                          00068700
&XLABEL  IEFSSVT &PLISTVER=,&SUBNAME=,&REQUEST=,&SSVTDATA=,&OUTTOKEN=, *00068800
               &SUBPOOL=,&MAXENTRIES=,&LOADTOGLOBAL=,&ERRFUNCT=,       *00068900
               &INTOKEN=,&RETCODE=,&RSNCODE=,&COM=,&MF=                 00069000
.*                                                                      00069100
*                  MACDATE -04/14/94-<1>                                00069200
.*                                                                      00069300
.*******************************************************************    00069400
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00069500
.*******************************************************************    00069600
                  GBLC  &ZPRINT     YES=PRINT NO=NO PRINT               00069700
                  GBLC  &ZTEST      YES=TEST NO=NO TEST                 00069800
                  GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX         00069900
.*                                                                      00070000
                  GBLC  &ZIEFSSVT   YES=MACRO USED AT LEAST ONCE        00070100
.*******************************************************************    00070200
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00070300
.*******************************************************************    00070400
                  LCLC  &ZMS        ERROR MESSAGE WORK AREA             00070500
                  LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS        00070600
                  LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED          00070700
                  LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR         00070800
                  LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE         00070900
                  LCLA  &ZAWRK      USED AS A WORK AREA                 00071000
                  LCLA  &ZASIZ      USED FOR SIZE OF VALUE              00071100
                  LCLA  &ZN         NUMERIC WORK VARIABLE               00071200
                  LCLC  &ZC         CHARACTER WORK VARIABLE             00071300
                  LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE         00071400
                  LCLA  &ZTLA       VALUE TOO LONG VARIABLE             00071500
                  LCLA  &ZMACRET    MACRO RETURN CODE                   00071600
&ZMACRET          SETA  0           ASSUME NO ERRORS                    00071700
.*                                                                      00071800
                  LCLC  &ZCSYSLIST(255)         NONXKEY, POS ARRAY      00071900
                  LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()          00072000
                  LCLA  &ZPLLEN     PARAMETER LIST LENGTH               00072100
                  LCLC  &ZENDBASEPL             End of base PL          00072200
                  LCLA  &ZPLWORKA   PARAMETER LIST LENGTH               00072300
.*******************************************************************    00072400
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00072500
.*******************************************************************    00072600
                  LCLA  &ZI         INDEX FOR ARRAY                     00072700
                  LCLA  &ZJ         INDEX FOR PARMS                     00072800
                  LCLA  &ZK         INDEX FOR PARSE                     00072900
                  LCLA  &ZLO        LOW RANGE VALUE                     00073000
                  LCLA  &ZHI        HIGH RANGE VALUE                    00073100
                  LCLC  &ZW         WORK AREA FOR PARM                  00073200
.********************************************************************   00073300
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00073400
.********************************************************************   00073500
                  GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL             00073600
                  GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE      00073700
.*                                                                      00073800
                  AIF   (K'&SYSASCE GT 0).ZSYS4  SYS STATE DEFINED      00073900
                  AIF   (K'&SYSSPLV GT 0).ZSYS2  SP LEVEL DEFINED       00074000
                  SPLEVEL  TEST                                         00074100
.ZSYS2            ANOP  ,                                               00074200
                  AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1           00074300
                  AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1           00074400
                  SYSSTATE TEST                                         00074500
                  AGO   .ZSYS4                                          00074600
.ZSYS3            ANOP  ,                                               00074700
&SYSASCE          SETC  'P'         ASSUME SYSSTATE PRIMARY             00074800
.ZSYS4            ANOP  ,                                               00074900
.*******************************************************************    00075000
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00075100
.*******************************************************************    00075200
                  LCLA  &XPLISTVER  ++ VALUE                            00075300
                  LCLC  &XSUBNAME   ++ NAME                             00075400
                  LCLC  &XREQUEST   ++ VALUE                            00075500
                  LCLC  &XSSVTDATA  ++ NAME                             00075600
                  LCLC  &XOUTTOKEN  ++ NAME                             00075700
                  LCLC  &XSUBPOOL   ++ NAME                             00075800
                  LCLC  &XMAXENTRIES            ++ NAME                 00075900
                  LCLC  &XLOADTOGLOBAL          ++ VALUE                00076000
                  LCLC  &XERRFUNCT  ++ NAME                             00076100
                  LCLC  &XINTOKEN   ++ NAME                             00076200
                  LCLC  &XRETCODE   ++ NAME                             00076300
                  LCLC  &XRSNCODE   ++ NAME                             00076400
                  LCLC  &XCOM       ++ VALUE                            00076500
                  LCLC  &XMF        ++ VALUE                            00076600
                  LCLC  &XMFCTRL    ++ NAME                             00076700
                  LCLC  &XMFATTR    ++ VALUE                            00076800
                  LCLC  &XMFSCK     ++ VALUE                            00076900
.*******************************************************************    00077000
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00077100
.*******************************************************************    00077200
                  LCLC  &ZXPLISTVER             ++ INPUT VALUE          00077300
                  LCLC  &ZXSUBNAME  ++ INPUT NAME                       00077400
                  LCLC  &ZXREQUEST  ++ INPUT VALUE                      00077500
                  LCLC  &ZXSSVTDATA             ++ INPUT NAME           00077600
                  LCLC  &ZXOUTTOKEN             ++ OUTPUT NAME          00077700
                  LCLC  &ZXSUBPOOL  ++ INPUT NAME                       00077800
                  LCLC  &ZXMAXENTRIES           ++ INPUT NAME           00077900
                  LCLC  &ZXLOADTOGLOBAL         ++ INPUT VALUE          00078000
                  LCLC  &ZXERRFUNCT             ++ OUTPUT NAME          00078100
                  LCLC  &ZXINTOKEN  ++ INPUT NAME                       00078200
                  LCLC  &ZXRETCODE  ++ OUTPUT NAME                      00078300
                  LCLC  &ZXRSNCODE  ++ OUTPUT NAME                      00078400
                  LCLC  &ZXCOM      ++ INPUT VALUE                      00078500
                  LCLC  &ZXMF       ++ INPUT VALUE                      00078600
                  LCLC  &ZXMFCTRL   ++ INPUT NAME                       00078700
                  LCLC  &ZXMFATTR   ++ INPUT VALUE                      00078800
                  LCLC  &ZXMFSCK    ++ INPUT VALUE                      00078900
.********************************************************************   00079000
.***AC.PLV01  PROCESS PLISTVER                                      *   00079100
.********************************************************************   00079200
&XPLISTVER      SETA  1                                                 00079300
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00079400
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00079500
&XPLISTVER      SETA  1                                                 00079600
.ZPLV0          ANOP  ,                                                 00079700
.*                                                                      00079800
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00079900
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00080000
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00080100
.*-------------------------------------------------------------------   00080200
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00080300
&ZMS            SETC  '"PLISTVER='         *KPOSA* MNOTE                00080400
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00080500
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00080600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00080700
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00080800
                AGO   .ZPVCK2                                           00080900
.ZPVCK3         ANOP  ,                                                 00081000
.*-------------------------------------------------------------------   00081100
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00081200
&ZMS            SETC  '"PLISTVER='         *KGPRA* MNOTE                00081300
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00081400
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00081500
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00081600
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00081700
                AGO   .ZPVCKE                                           00081800
.ZPVCK2         ANOP  ,                                                 00081900
.*-------------------------------------------------------------------   00082000
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00082100
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00082200
&ZMS            SETC  'PLISTVER='          *KVALA* MNOTE                00082300
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00082400
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00082500
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00082600
                MNOTE 8,' &ZMS IS REQUIRED.'                            00082700
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00082800
                AGO   .ZPVCK5                                           00082900
.ZPVCK4         ANOP  ,                                                 00083000
&XPLISTVER      SETA  &PLISTVER(1)                                      00083100
.ZPVCK5         ANOP  ,                                                 00083200
.*-------------------------------------------------------------------   00083300
&ZCVAL          SETC  '&PLISTVER(1)'                                    00083400
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00083500
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00083600
                AIF   (&XPLISTVER LT 1).ZPVCK6  TOO LOW                 00083700
                AIF   (&XPLISTVER LE 1).ZPVCKE  NOT HIGH                00083800
.ZPVCK6         ANOP   ,                                                00083900
&ZMS            SETC  '"PLISTVER='         *KRNGA* MNOTE                00084000
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00084100
&ZMS            SETC  '&ZMS THE RANGE IS "1-1"'                         00084200
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00084300
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00084400
.ZPVCKE         ANOP   ,                                                00084500
.********************************************************************   00084600
.***AG.MF01 PROCESS MF MACRO FORMS                                      00084700
.********************************************************************   00084800
                  ACTR  10000                                           00084900
.*------------------------------------------------------------------    00085000
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00085100
&XMF              SETC  ''          INITIALIZE XVARIABLE                00085200
.*-------------------------------------------------------------------   00085300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00085400
.ZG79             ANOP  ,                                               00085500
&ZTLC             SETC 'S'                                              00085600
                  AIF   ('&MF(1)' NE '&ZTLC').ZG80                      00085700
&XMF              SETC  'S'         SET KEYWORD                         00085800
                  AIF   (N'&MF LE 1).ZG79A      CK NUM                  00085900
&ZMS              SETC  '"MF='      *KPOSA* MNOTE                       00086000
&ZMS              SETC  '&ZMS.&MF"'                                     00086100
&ZMS              SETC  '&ZMS "MF"'                                     00086200
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00086300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00086400
.ZG79A            ANOP  ,                                               00086500
.*-------------------------------------------------------------------   00086600
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00086700
.ZG80             ANOP  ,                                               00086800
&ZTLC             SETC 'L'                                              00086900
                  AIF   ('&MF(1)' NE '&ZTLC').ZG87                      00087000
&XMF              SETC  'L'         SET KEYWORD                         00087100
                  AIF   (N'&MF LE 3).ZG80A      CK NUM                  00087200
&ZMS              SETC  '"MF='      *KPOSA* MNOTE                       00087300
&ZMS              SETC  '&ZMS.&MF"'                                     00087400
&ZMS              SETC  '&ZMS "MF"'                                     00087500
                  MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'            00087600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00087700
.ZG80A            ANOP  ,                                               00087800
.*-------------------------------------------------------------------   00087900
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00088000
                  AIF   (N'&SYSLIST NE 0).ZG80B  POSITIONALS?           00088100
                  AIF   ('&SUBNAME' NE '').ZG80B  KEYS?                 00088200
                  AIF   ('&REQUEST' NE '').ZG80B  KEYS?                 00088300
                  AIF   ('&SSVTDATA' NE '').ZG80B  KEYS?                00088400
                  AIF   ('&OUTTOKEN' NE '').ZG80B  KEYS?                00088500
                  AIF   ('&SUBPOOL' NE '').ZG80B  KEYS?                 00088600
                  AIF   ('&MAXENTRIES' NE '').ZG80B  KEYS?              00088700
                  AIF   ('&LOADTOGLOBAL' NE '').ZG80B  KEYS?            00088800
                  AIF   ('&ERRFUNCT' NE '').ZG80B  KEYS?                00088900
                  AIF   ('&INTOKEN' NE '').ZG80B  KEYS?                 00089000
                  AIF   ('&RETCODE' NE '').ZG80B  KEYS?                 00089100
                  AIF   ('&RSNCODE' NE '').ZG80B  KEYS?                 00089200
                  AIF   ('&COM' NE '').ZG80B    KEYS?                   00089300
                  AGO    .ZG80C     INVOCATION OKAY                     00089400
.ZG80B            ANOP  ,                                               00089500
&ZMS              SETC  'THE "L" FORM OF "MF"'  *MFLA* MNOTE            00089600
&ZMS              SETC  '&ZMS CAN ONLY HAVE'                            00089700
&ZMS              SETC  '&ZMS THE "PLISTVER" KEY'                       00089800
                  MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'          00089900
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00090000
.ZG80C            ANOP  ,                                               00090100
.*-------------------------------------------------------------------   00090200
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00090300
&ZXMFCTRL         SETC  'INPUT'     SET IN/OUTPUT                       00090400
&XMFCTRL          SETC  '&MF(2,1)'  SET XVARIABLE                       00090500
                  AIF   (N'&MF(2) GT 1).ZG82B   MULTI PARMS             00090600
&XMFCTRL          SETC  '&MF(2)'    SET XVARIABLE                       00090700
.ZG82B            AIF   (K'&MF(2) GT 0).ZG82C                           00090800
&ZXMFCTRL         SETC  ''          RESET IN/OUTPUT                     00090900
&ZMS              SETC  'WHEN "L" IS SPECIFIED'  *KRQDA*                00091000
&ZMS              SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'             00091100
                  MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                    00091200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00091300
.ZG82C            ANOP  ,                                               00091400
.*-------------------------------------------------------------------   00091500
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00091600
                  AIF   (K'&ZXMFCTRL LE 0).ZG82P  NOT I/O               00091700
                  AIF   ('&XMFCTRL'(1,1) NE '(').ZG82P                  00091800
&ZXMFCTRL         SETC  ''          RESET IN/OUTPUT                     00091900
&ZMS              SETC  '"MF='      *KGPRA* MNOTE                       00092000
&ZMS              SETC  '&ZMS.&MF"'                                     00092100
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00092200
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'               00092300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00092400
.ZG82P            ANOP  ,                                               00092500
.*-------------------------------------------------------------------   00092600
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00092700
&ZXMFATTR         SETC  'INPUT'     SET IN/OUTPUT                       00092800
&XMFATTR          SETC  '0D'                                            00092900
                  AIF   (K'&MF(3) LE 0).ZG85B   PARM                    00093000
&XMFATTR          SETC  '&MF(3,1)'  SET XVARIABLE                       00093100
                  AIF   (N'&MF(3) GT 1).ZG85B   MULTI PARMS             00093200
&XMFATTR          SETC  '&MF(3)'    SET XVARIABLE                       00093300
.ZG85B            ANOP  ,                                               00093400
.*-------------------------------------------------------------------   00093500
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00093600
                  AIF   (K'&ZXMFATTR LE 0).ZG85P  NOT I/O               00093700
                  AIF   ('&XMFATTR'(1,1) NE '(').ZG85P                  00093800
&ZXMFATTR         SETC  ''          RESET IN/OUTPUT                     00093900
&ZMS              SETC  '"MF='      *KGPRA* MNOTE                       00094000
&ZMS              SETC  '&ZMS.&MF"'                                     00094100
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00094200
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'               00094300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00094400
.ZG85P            ANOP  ,                                               00094500
.*-------------------------------------------------------------------   00094600
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00094700
                  AIF   (K'&ZXMFATTR LE 0).ZG85S  NOT I/O               00094800
                  AIF   (K'&XMFATTR LE 60).ZG85S  LNG OK                00094900
&ZXMFATTR         SETC  ''          RESET IN/OUTPUT                     00095000
&ZMS              SETC  '"MF='      *KLNGA* MNOTE                       00095100
&ZMS              SETC  '&ZMS.&MF"'                                     00095200
&ZMS              SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'           00095300
                  MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'              00095400
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00095500
.ZG85S            ANOP  ,                                               00095600
.*-------------------------------------------------------------------   00095700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00095800
.ZG87             ANOP  ,                                               00095900
&ZTLC             SETC 'E'                                              00096000
                  AIF   ('&MF(1)' NE '&ZTLC').ZG95                      00096100
&XMF              SETC  'E'         SET KEYWORD                         00096200
                  AIF   (N'&MF LE 3).ZG87A      CK NUM                  00096300
&ZMS              SETC  '"MF='      *KPOSA* MNOTE                       00096400
&ZMS              SETC  '&ZMS.&MF"'                                     00096500
&ZMS              SETC  '&ZMS "MF"'                                     00096600
                  MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'            00096700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00096800
.ZG87A            ANOP  ,                                               00096900
.*-------------------------------------------------------------------   00097000
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00097100
&ZXMFCTRL         SETC  'INPUT'     SET IN/OUTPUT                       00097200
&XMFCTRL          SETC  '&MF(2,1)'  SET XVARIABLE                       00097300
                  AIF   (N'&MF(2) GT 1).ZG89B   MULTI PARMS             00097400
&XMFCTRL          SETC  '&MF(2)'    SET XVARIABLE                       00097500
.ZG89B            AIF   (K'&MF(2) GT 0).ZG89C                           00097600
&ZXMFCTRL         SETC  ''          RESET IN/OUTPUT                     00097700
&ZMS              SETC  'WHEN "E" IS SPECIFIED'  *KRQDA*                00097800
&ZMS              SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'             00097900
                  MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                    00098000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00098100
.ZG89C            ANOP  ,                                               00098200
.*-------------------------------------------------------------------   00098300
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00098400
                  AIF   (K'&ZXMFCTRL LE 0).ZG89R  NOT I/O               00098500
                  AIF   ('&XMFCTRL'(1,1) NE '(').ZG89R                  00098600
&ZCGPR            SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                      00098700
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG89P                    00098800
                  AIF   (K'&ZCGPR GT 2).ZG89Q                           00098900
                  AIF   ('&ZCGPR' EQ '0').ZG89Q                         00099000
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00099100
                  AIF   (T'&ZCGPR NE 'N').ZG89Q  INVALID REG NAME       00099200
.ZG89P            ANOP  ,                                               00099300
                  AIF   (T'&ZCGPR NE 'N').ZG89R  NON NUMERIC            00099400
                  AIF   ('&ZCGPR' LT '1').ZG89Q                         00099500
                  AIF   ('&ZCGPR' LE '12').ZG89R                        00099600
.ZG89Q            ANOP  ,                                               00099700
&ZMS              SETC  '"MF='      *KGPRA* MNOTE                       00099800
&ZMS              SETC  '&ZMS.&MF"'                                     00099900
&ZMS              SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'       00100000
                  MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                00100100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00100200
.ZG89R            ANOP  ,                                               00100300
.*-------------------------------------------------------------------   00100400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00100500
&XMFSCK           SETC  ''          INITIALIZE XVARIABLE                00100600
.ZG93A   AIF   ('&MF(3)' NE 'COMPLETE').ZG94A                           00100700
&XMFSCK           SETC  'COMPLETE'  SET KEYWORD                         00100800
.*-------------------------------------------------------------------   00100900
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00101000
.ZG94A            AIF   (K'&XMFSCK GT 0).ZG94C  KEYWORD                 00101100
                  AIF   (K'&MF(3) LE 0).ZG94B                           00101200
&ZMS              SETC  '"MF='      *KUKWA* MNOTE                       00101300
&ZMS              SETC  '&ZMS.&MF"'                                     00101400
&ZMS              SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '       00101500
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00101600
&ZMS              SETC  '&ZMS "COMPLETE".'      VALID KEYWORD           00101700
                  MNOTE 8,' &ZMS '                                      00101800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00101900
.ZG94B            ANOP  ,                                               00102000
&XMFSCK           SETC  'COMPLETE'  SET DEFAULT KEYWORD                 00102100
.ZG94C            ANOP  ,                                               00102200
&ZXMFSCK          SETC  'INPUT'     SET IN/OUTPUT                       00102300
.*------------------------------------------------------------------    00102400
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00102500
.ZG95             ANOP  ,                                               00102600
&ZXMF             SETC  'INPUT'     SET IN/OUTPUT                       00102700
                  AIF   (K'&XMF GT 0).ZG95E     VALID ARG               00102800
                  AIF   (T'&MF EQ 'O').ZG95D    OMITTED                 00102900
&ZASYSLNDX        SETA  0                                               00103000
.ZG95A            ANOP  ,           POSITIONAL MACRO KEY                00103100
&ZASYSLNDX        SETA  &ZASYSLNDX+1                                    00103200
                  AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG95C                00103300
&ZTLC             SETC 'MF'                                             00103400
                  AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG95A       00103500
.ZG95B            ANOP  ,                                               00103600
&ZXMF             SETC  ''          RESET IN/OUTPUT                     00103700
&ZMS              SETC  'THE "MF" KEY'          *KOPTA* MNOTE           00103800
&ZMS              SETC  '&ZMS MUST CONTAIN ONE'                         00103900
                  MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                00104000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00104100
                  AGO   .ZG95E                                          00104200
.ZG95C            ANOP  ,                                               00104300
&ZXMF             SETC  ''          RESET IN/OUTPUT                     00104400
&ZMS              SETC  '"MF='      *KUKWA* MNOTE                       00104500
&ZMS              SETC  '&ZMS.&MF"'                                     00104600
&ZMS              SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '       00104700
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00104800
&ZMS              SETC  '&ZMS "S",'             VALID KEYWORD           00104900
&ZMS              SETC  '&ZMS "L",'             VALID KEYWORD           00105000
&ZMS              SETC  '&ZMS OR "E".'          VALID KEYWORD           00105100
                  MNOTE 8,' &ZMS '                                      00105200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00105300
                  AGO   .ZG95E                                          00105400
.ZG95D            ANOP  ,                                               00105500
&XMF              SETC  'S'         SET DEFAULT KEYWORD                 00105600
&XMFSCK           SETC  'COMPLETE'  COMPLETE CHECKING                   00105700
.ZG95E            ANOP  ,                                               00105800
.********************************************************************   00105900
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00106000
.********************************************************************   00106100
                  ACTR  10000                                           00106200
.*-------------------------------------------------------------------   00106300
.***AG.MF03 MF=(SLE)                                                    00106400
                  AIF   ('&XMF' EQ 'L').ZGMFX                           00106500
.*----------------------------------------------------------------***   00106600
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00106700
                  AIF   (N'&SUBNAME LE 1).ZG5A  CK NUM                  00106800
&ZMS              SETC  '"SUBNAME='             *KPOSA* MNOTE           00106900
&ZMS              SETC  '&ZMS.&SUBNAME"'                                00107000
&ZMS              SETC  '&ZMS "SUBNAME"'                                00107100
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00107200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00107300
.ZG5A             ANOP  ,                                               00107400
.*-------------------------------------------------------------------   00107500
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00107600
&ZXSUBNAME        SETC  'INPUT'     SET IN/OUTPUT                       00107700
&XSUBNAME         SETC  '&SUBNAME(1)'           SET XVARIABLE           00107800
                  AIF   (N'&SUBNAME GT 1).ZG5B  MULTI PARMS             00107900
&XSUBNAME         SETC  '&SUBNAME'  SET XVARIABLE                       00108000
.ZG5B             AIF   (K'&SUBNAME(1) GT 0).ZG5C                       00108100
&ZXSUBNAME        SETC  ''          RESET IN/OUTPUT                     00108200
&ZMS              SETC  ' '         *KRQDA*                             00108300
&ZMS              SETC  '&ZMS "SUBNAME" KEY AND ITS ARGUMENT'           00108400
                  MNOTE 8,' &ZMS ARE REQUIRED.'                         00108500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00108600
.ZG5C             ANOP  ,                                               00108700
.*-------------------------------------------------------------------   00108800
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00108900
                  AIF   (K'&ZXSUBNAME LE 0).ZG5R  NOT I/O               00109000
                  AIF   ('&XSUBNAME'(1,1) NE '(').ZG5R                  00109100
&ZCGPR            SETC  '&XSUBNAME'(2,K'&XSUBNAME-2)                    00109200
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG5P                     00109300
                  AIF   (K'&ZCGPR GT 2).ZG5Q                            00109400
                  AIF   ('&ZCGPR' EQ '0').ZG5Q                          00109500
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00109600
                  AIF   (T'&ZCGPR NE 'N').ZG5Q  INVALID REG NAME        00109700
.ZG5P             ANOP  ,                                               00109800
                  AIF   (T'&ZCGPR NE 'N').ZG5R  NON NUMERIC             00109900
                  AIF   ('&ZCGPR' LT '2').ZG5Q                          00110000
                  AIF   ('&ZCGPR' LE '12').ZG5R                         00110100
.ZG5Q             ANOP  ,                                               00110200
&ZMS              SETC  '"SUBNAME='             *KGPRA* MNOTE           00110300
&ZMS              SETC  '&ZMS.&SUBNAME"'                                00110400
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00110500
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00110600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00110700
.ZG5R             ANOP  ,                                               00110800
.*------------------------------------------------------------------    00110900
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00111000
&XREQUEST         SETC  ''          INITIALIZE XVARIABLE                00111100
.*-------------------------------------------------------------------   00111200
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00111300
.ZG9              ANOP  ,                                               00111400
                  AIF   (K'&REQUEST(1) LE 0).ZG9A                       00111500
&ZTLC             SETC 'CREATE'                                         00111600
                  AIF   ('&REQUEST(1)' NE '&ZTLC').ZG30                 00111700
&XREQUEST         SETC  'CREATE'    SET KEYWORD                         00111800
                  AIF   (N'&REQUEST LE 1).ZG9A  CK NUM                  00111900
&ZMS              SETC  '"REQUEST='             *KPOSA* MNOTE           00112000
&ZMS              SETC  '&ZMS.&REQUEST"'                                00112100
&ZMS              SETC  '&ZMS "REQUEST"'                                00112200
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00112300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00112400
.ZG9A             ANOP  ,                                               00112500
.*------------------------------------------------------------------    00112600
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00112700
&ZCVAL            SETC ''           CLEAR ERROR KEY ACCUMULATOR         00112800
.ZG9A0            AIF   (K'&INTOKEN LE 0).ZG9A1  OK                     00112900
&ZCVAL            SETC '&ZCVAL INTOKEN'         INCORRECT KEY USED      00113000
.ZG9A1            AIF   (K'&ZCVAL LE 0).ZG9A2   OK                      00113100
&ZCVAL            SETC '&ZCVAL'(2,K'&ZCVAL-1)                           00113200
&ZMS              SETC  '"REQUEST'  *KMEIA* MNOTE                       00113300
&ZMS              SETC  '&ZMS.=&REQUEST"'                               00113400
&ZMS              SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'            00113500
                  MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'            00113600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00113700
.ZG9A2            ANOP  ,                                               00113800
.*----------------------------------------------------------------***   00113900
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00114000
                  AIF   (N'&SSVTDATA LE 1).ZG11A  CK NUM                00114100
&ZMS              SETC  '"SSVTDATA='            *KPOSA* MNOTE           00114200
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00114300
&ZMS              SETC  '&ZMS "SSVTDATA"'                               00114400
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00114500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00114600
.ZG11A            ANOP  ,                                               00114700
.*-------------------------------------------------------------------   00114800
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00114900
&ZXSSVTDATA       SETC  'INPUT'     SET IN/OUTPUT                       00115000
&XSSVTDATA        SETC  '&SSVTDATA(1)'          SET XVARIABLE           00115100
                  AIF   (N'&SSVTDATA GT 1).ZG11B  MULTI PARMS           00115200
&XSSVTDATA        SETC  '&SSVTDATA'             SET XVARIABLE           00115300
.ZG11B            AIF   (K'&SSVTDATA(1) GT 0).ZG11C                     00115400
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00115500
&ZMS              SETC  ' '         *KRQDA*                             00115600
&ZMS              SETC  '&ZMS "SSVTDATA" KEY AND ITS ARGUMENT'          00115700
                  MNOTE 8,' &ZMS ARE REQUIRED.'                         00115800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00115900
.ZG11C            ANOP  ,                                               00116000
.*-------------------------------------------------------------------   00116100
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00116200
                  AIF   (K'&ZXSSVTDATA LE 0).ZG11P  NOT I/O             00116300
                  AIF   ('&XSSVTDATA'(1,1) NE '(').ZG11P                00116400
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00116500
&ZMS              SETC  '"SSVTDATA='            *KGPRA* MNOTE           00116600
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00116700
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00116800
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'               00116900
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00117000
.ZG11P            ANOP  ,                                               00117100
.*----------------------------------------------------------------***   00117200
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY                    00117300
                  AIF   (N'&OUTTOKEN LE 1).ZG14A  CK NUM                00117400
&ZMS              SETC  '"OUTTOKEN='            *KPOSA* MNOTE           00117500
&ZMS              SETC  '&ZMS.&OUTTOKEN"'                               00117600
&ZMS              SETC  '&ZMS "OUTTOKEN"'                               00117700
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00117800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00117900
.ZG14A            ANOP  ,                                               00118000
.*-------------------------------------------------------------------   00118100
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE                        00118200
&ZXOUTTOKEN       SETC  'OUTPUT'    SET IN/OUTPUT                       00118300
&XOUTTOKEN        SETC  '&OUTTOKEN(1)'          SET XVARIABLE           00118400
                  AIF   (N'&OUTTOKEN GT 1).ZG14B  MULTI PARMS           00118500
&XOUTTOKEN        SETC  '&OUTTOKEN'             SET XVARIABLE           00118600
.ZG14B            AIF   (K'&OUTTOKEN(1) GT 0).ZG14C                     00118700
&ZXOUTTOKEN       SETC  ''          RESET IN/OUTPUT                     00118800
&ZMS              SETC  ' '         *KRQDA*                             00118900
&ZMS              SETC  '&ZMS "OUTTOKEN" KEY AND ITS ARGUMENT'          00119000
                  MNOTE 8,' &ZMS ARE REQUIRED.'                         00119100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00119200
.ZG14C            ANOP  ,                                               00119300
.*-------------------------------------------------------------------   00119400
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE                   00119500
                  AIF   (K'&ZXOUTTOKEN LE 0).ZG14R  NOT I/O             00119600
                  AIF   ('&XOUTTOKEN'(1,1) NE '(').ZG14R                00119700
&ZCGPR            SETC  '&XOUTTOKEN'(2,K'&XOUTTOKEN-2)                  00119800
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG14P                    00119900
                  AIF   (K'&ZCGPR GT 2).ZG14Q                           00120000
                  AIF   ('&ZCGPR' EQ '0').ZG14Q                         00120100
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00120200
                  AIF   (T'&ZCGPR NE 'N').ZG14Q  INVALID REG NAME       00120300
.ZG14P            ANOP  ,                                               00120400
                  AIF   (T'&ZCGPR NE 'N').ZG14R  NON NUMERIC            00120500
                  AIF   ('&ZCGPR' LT '2').ZG14Q                         00120600
                  AIF   ('&ZCGPR' LE '12').ZG14R                        00120700
.ZG14Q            ANOP  ,                                               00120800
&ZMS              SETC  '"OUTTOKEN='            *KGPRA* MNOTE           00120900
&ZMS              SETC  '&ZMS.&OUTTOKEN"'                               00121000
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00121100
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00121200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00121300
.ZG14R            ANOP  ,                                               00121400
.*----------------------------------------------------------------***   00121500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00121600
                  AIF   (N'&SUBPOOL LE 1).ZG17A  CK NUM                 00121700
&ZMS              SETC  '"SUBPOOL='             *KPOSA* MNOTE           00121800
&ZMS              SETC  '&ZMS.&SUBPOOL"'                                00121900
&ZMS              SETC  '&ZMS "SUBPOOL"'                                00122000
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00122100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00122200
.ZG17A            ANOP  ,                                               00122300
.*-------------------------------------------------------------------   00122400
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00122500
&ZXSUBPOOL        SETC  'INPUT'     SET IN/OUTPUT                       00122600
&XSUBPOOL         SETC  '241'                                           00122700
                  AIF   (K'&SUBPOOL(1) LE 0).ZG17B  PARM                00122800
&XSUBPOOL         SETC  '&SUBPOOL(1)'           SET XVARIABLE           00122900
                  AIF   (N'&SUBPOOL GT 1).ZG17B  MULTI PARMS            00123000
&XSUBPOOL         SETC  '&SUBPOOL'  SET XVARIABLE                       00123100
.ZG17B            ANOP  ,                                               00123200
.*-------------------------------------------------------------------   00123300
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00123400
                  AIF   (K'&ZXSUBPOOL LE 0).ZG17R  NOT I/O              00123500
                  AIF   ('&XSUBPOOL'(1,1) NE '(').ZG17R                 00123600
&ZCGPR            SETC  '&XSUBPOOL'(2,K'&XSUBPOOL-2)                    00123700
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG17P                    00123800
                  AIF   (K'&ZCGPR GT 2).ZG17Q                           00123900
                  AIF   ('&ZCGPR' EQ '0').ZG17Q                         00124000
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00124100
                  AIF   (T'&ZCGPR NE 'N').ZG17Q  INVALID REG NAME       00124200
.ZG17P            ANOP  ,                                               00124300
                  AIF   (T'&ZCGPR NE 'N').ZG17R  NON NUMERIC            00124400
                  AIF   ('&ZCGPR' LT '2').ZG17Q                         00124500
                  AIF   ('&ZCGPR' LE '12').ZG17R                        00124600
.ZG17Q            ANOP  ,                                               00124700
&ZMS              SETC  '"SUBPOOL='             *KGPRA* MNOTE           00124800
&ZMS              SETC  '&ZMS.&SUBPOOL"'                                00124900
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00125000
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00125100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00125200
.ZG17R            ANOP  ,                                               00125300
.*----------------------------------------------------------------***   00125400
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00125500
                  AIF   (N'&MAXENTRIES LE 1).ZG20A  CK NUM              00125600
&ZMS              SETC  '"MAXENTRIES='          *KPOSA* MNOTE           00125700
&ZMS              SETC  '&ZMS.&MAXENTRIES"'                             00125800
&ZMS              SETC  '&ZMS "MAXENTRIES"'                             00125900
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00126000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00126100
.ZG20A            ANOP  ,                                               00126200
.*-------------------------------------------------------------------   00126300
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00126400
&ZXMAXENTRIES     SETC  'INPUT'     SET IN/OUTPUT                       00126500
&XMAXENTRIES      SETC  '&MAXENTRIES(1)'        SET XVARIABLE           00126600
                  AIF   (N'&MAXENTRIES GT 1).ZG20B  MULTI PARMS         00126700
&XMAXENTRIES      SETC  '&MAXENTRIES'           SET XVARIABLE           00126800
.ZG20B            AIF   (K'&MAXENTRIES(1) GT 0).ZG20C                   00126900
&ZXMAXENTRIES     SETC  ''          RESET IN/OUTPUT                     00127000
&ZMS              SETC  ' '         *KRQDA*                             00127100
&ZMS              SETC  '&ZMS "MAXENTRIES" KEY AND ITS ARGUMENT'        00127200
                  MNOTE 8,' &ZMS ARE REQUIRED.'                         00127300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00127400
.ZG20C            ANOP  ,                                               00127500
.*-------------------------------------------------------------------   00127600
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00127700
                  AIF   (K'&ZXMAXENTRIES LE 0).ZG20R  NOT I/O           00127800
                  AIF   ('&XMAXENTRIES'(1,1) NE '(').ZG20R              00127900
&ZCGPR            SETC  '&XMAXENTRIES'(2,K'&XMAXENTRIES-2)              00128000
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG20P                    00128100
                  AIF   (K'&ZCGPR GT 2).ZG20Q                           00128200
                  AIF   ('&ZCGPR' EQ '0').ZG20Q                         00128300
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00128400
                  AIF   (T'&ZCGPR NE 'N').ZG20Q  INVALID REG NAME       00128500
.ZG20P            ANOP  ,                                               00128600
                  AIF   (T'&ZCGPR NE 'N').ZG20R  NON NUMERIC            00128700
                  AIF   ('&ZCGPR' LT '2').ZG20Q                         00128800
                  AIF   ('&ZCGPR' LE '12').ZG20R                        00128900
.ZG20Q            ANOP  ,                                               00129000
&ZMS              SETC  '"MAXENTRIES='          *KGPRA* MNOTE           00129100
&ZMS              SETC  '&ZMS.&MAXENTRIES"'                             00129200
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00129300
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00129400
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00129500
.ZG20R            ANOP  ,                                               00129600
.*----------------------------------------------------------------***   00129700
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00129800
                  AIF   (N'&LOADTOGLOBAL LE 1).ZG23A  CK NUM            00129900
&ZMS              SETC  '"LOADTOGLOBAL='        *KPOSA* MNOTE           00130000
&ZMS              SETC  '&ZMS.&LOADTOGLOBAL"'                           00130100
&ZMS              SETC  '&ZMS "LOADTOGLOBAL"'                           00130200
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00130300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00130400
.ZG23A            ANOP  ,                                               00130500
.*-------------------------------------------------------------------   00130600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00130700
&XLOADTOGLOBAL    SETC  ''          INITIALIZE XVARIABLE                00130800
.ZG24A   AIF   ('&LOADTOGLOBAL(1)' NE 'NO').ZG25A                       00130900
&XLOADTOGLOBAL    SETC  'NO'        SET KEYWORD                         00131000
.*-------------------------------------------------------------------   00131100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00131200
.ZG25A   AIF   ('&LOADTOGLOBAL(1)' NE 'YES').ZG26A                      00131300
&XLOADTOGLOBAL    SETC  'YES'       SET KEYWORD                         00131400
.*-------------------------------------------------------------------   00131500
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00131600
.ZG26A            AIF   (K'&XLOADTOGLOBAL GT 0).ZG26C  KEYWORD          00131700
                  AIF   (K'&LOADTOGLOBAL(1) LE 0).ZG26B                 00131800
&ZMS              SETC  '"LOADTOGLOBAL='        *KUKWA* MNOTE           00131900
&ZMS              SETC  '&ZMS.&LOADTOGLOBAL"'                           00132000
&ZMS              SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '       00132100
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00132200
&ZMS              SETC  '&ZMS "NO"'             VALID KEYWORD           00132300
&ZMS              SETC  '&ZMS OR "YES".'        VALID KEYWORD           00132400
                  MNOTE 8,' &ZMS '                                      00132500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00132600
.ZG26B            ANOP  ,                                               00132700
&XLOADTOGLOBAL    SETC  'NO'        SET DEFAULT KEYWORD                 00132800
.ZG26C            ANOP  ,                                               00132900
&ZXLOADTOGLOBAL   SETC  'INPUT'     SET IN/OUTPUT                       00133000
.*----------------------------------------------------------------***   00133100
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00133200
                  AIF   (N'&ERRFUNCT LE 1).ZG28A  CK NUM                00133300
&ZMS              SETC  '"ERRFUNCT='            *KPOSA* MNOTE           00133400
&ZMS              SETC  '&ZMS.&ERRFUNCT"'                               00133500
&ZMS              SETC  '&ZMS "ERRFUNCT"'                               00133600
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00133700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00133800
.ZG28A            ANOP  ,                                               00133900
.*-------------------------------------------------------------------   00134000
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00134100
                  AIF   (K'&ERRFUNCT(1) LE 0).ZG28C  NO PARM            00134200
&ZXERRFUNCT       SETC  'OUTPUT'    SET OUTPUT                          00134300
&XERRFUNCT        SETC  '&ERRFUNCT(1)'          SET XVARIABLE           00134400
                  AIF   (N'&ERRFUNCT GT 1).ZG28C                        00134500
&XERRFUNCT        SETC  '&ERRFUNCT'             SET XVARIABLE           00134600
.ZG28C            ANOP  ,                                               00134700
.*-------------------------------------------------------------------   00134800
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00134900
                  AIF   (K'&ZXERRFUNCT LE 0).ZG28R  NOT I/O             00135000
                  AIF   ('&XERRFUNCT'(1,1) NE '(').ZG28R                00135100
&ZCGPR            SETC  '&XERRFUNCT'(2,K'&XERRFUNCT-2)                  00135200
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG28P                    00135300
                  AIF   (K'&ZCGPR GT 2).ZG28Q                           00135400
                  AIF   ('&ZCGPR' EQ '0').ZG28Q                         00135500
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00135600
                  AIF   (T'&ZCGPR NE 'N').ZG28Q  INVALID REG NAME       00135700
.ZG28P            ANOP  ,                                               00135800
                  AIF   (T'&ZCGPR NE 'N').ZG28R  NON NUMERIC            00135900
                  AIF   ('&ZCGPR' LT '2').ZG28Q                         00136000
                  AIF   ('&ZCGPR' LE '12').ZG28R                        00136100
.ZG28Q            ANOP  ,                                               00136200
&ZMS              SETC  '"ERRFUNCT='            *KGPRA* MNOTE           00136300
&ZMS              SETC  '&ZMS.&ERRFUNCT"'                               00136400
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00136500
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00136600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00136700
.ZG28R            ANOP  ,                                               00136800
.*-------------------------------------------------------------------   00136900
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00137000
.ZG30             ANOP  ,                                               00137100
&ZTLC             SETC 'DISABLE'                                        00137200
                  AIF   ('&REQUEST(1)' NE '&ZTLC').ZG37                 00137300
&XREQUEST         SETC  'DISABLE'   SET KEYWORD                         00137400
                  AIF   (N'&REQUEST LE 1).ZG30A  CK NUM                 00137500
&ZMS              SETC  '"REQUEST='             *KPOSA* MNOTE           00137600
&ZMS              SETC  '&ZMS.&REQUEST"'                                00137700
&ZMS              SETC  '&ZMS "REQUEST"'                                00137800
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00137900
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00138000
.ZG30A            ANOP  ,                                               00138100
.*------------------------------------------------------------------    00138200
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00138300
&ZCVAL            SETC ''           CLEAR ERROR KEY ACCUMULATOR         00138400
.ZG30A0           AIF   (K'&OUTTOKEN LE 0).ZG30A1  OK                   00138500
&ZCVAL            SETC '&ZCVAL OUTTOKEN'        INCORRECT KEY USED      00138600
.ZG30A1           AIF   (K'&SUBPOOL LE 0).ZG30A2  OK                    00138700
&ZCVAL            SETC '&ZCVAL SUBPOOL'         INCORRECT KEY USED      00138800
.ZG30A2           AIF   (K'&MAXENTRIES LE 0).ZG30A3  OK                 00138900
&ZCVAL            SETC '&ZCVAL MAXENTRIES'      INCORRECT KEY USED      00139000
.ZG30A3           AIF   (K'&LOADTOGLOBAL LE 0).ZG30A4  OK               00139100
&ZCVAL            SETC '&ZCVAL LOADTOGLOBAL'    INCORRECT KEY USED      00139200
.ZG30A4           AIF   (K'&ERRFUNCT LE 0).ZG30A5  OK                   00139300
&ZCVAL            SETC '&ZCVAL ERRFUNCT'        INCORRECT KEY USED      00139400
.ZG30A5           AIF   (K'&ZCVAL LE 0).ZG30A6  OK                      00139500
&ZCVAL            SETC '&ZCVAL'(2,K'&ZCVAL-1)                           00139600
&ZMS              SETC  '"REQUEST'  *KMEIA* MNOTE                       00139700
&ZMS              SETC  '&ZMS.=&REQUEST"'                               00139800
&ZMS              SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'            00139900
                  MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'            00140000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00140100
.ZG30A6           ANOP  ,                                               00140200
.*----------------------------------------------------------------***   00140300
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00140400
                  AIF   (N'&SSVTDATA LE 1).ZG32A  CK NUM                00140500
&ZMS              SETC  '"SSVTDATA='            *KPOSA* MNOTE           00140600
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00140700
&ZMS              SETC  '&ZMS "SSVTDATA"'                               00140800
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00140900
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00141000
.ZG32A            ANOP  ,                                               00141100
.*-------------------------------------------------------------------   00141200
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00141300
&ZXSSVTDATA       SETC  'INPUT'     SET IN/OUTPUT                       00141400
&XSSVTDATA        SETC  '&SSVTDATA(1)'          SET XVARIABLE           00141500
                  AIF   (N'&SSVTDATA GT 1).ZG32B  MULTI PARMS           00141600
&XSSVTDATA        SETC  '&SSVTDATA'             SET XVARIABLE           00141700
.ZG32B            AIF   (K'&SSVTDATA(1) GT 0).ZG32C                     00141800
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00141900
&ZMS              SETC  ' '         *KRQDA*                             00142000
&ZMS              SETC  '&ZMS "SSVTDATA" KEY AND ITS ARGUMENT'          00142100
                  MNOTE 8,' &ZMS ARE REQUIRED.'                         00142200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00142300
.ZG32C            ANOP  ,                                               00142400
.*-------------------------------------------------------------------   00142500
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00142600
                  AIF   (K'&ZXSSVTDATA LE 0).ZG32P  NOT I/O             00142700
                  AIF   ('&XSSVTDATA'(1,1) NE '(').ZG32P                00142800
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00142900
&ZMS              SETC  '"SSVTDATA='            *KGPRA* MNOTE           00143000
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00143100
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00143200
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'               00143300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00143400
.ZG32P            ANOP  ,                                               00143500
.*----------------------------------------------------------------***   00143600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00143700
                  AIF   (N'&INTOKEN LE 1).ZG35A  CK NUM                 00143800
&ZMS              SETC  '"INTOKEN='             *KPOSA* MNOTE           00143900
&ZMS              SETC  '&ZMS.&INTOKEN"'                                00144000
&ZMS              SETC  '&ZMS "INTOKEN"'                                00144100
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00144200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00144300
.ZG35A            ANOP  ,                                               00144400
.*-------------------------------------------------------------------   00144500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00144600
&ZXINTOKEN        SETC  'INPUT'     SET IN/OUTPUT                       00144700
&XINTOKEN         SETC  'NULL'                                          00144800
                  AIF   (K'&INTOKEN(1) LE 0).ZG35B  PARM                00144900
&XINTOKEN         SETC  '&INTOKEN(1)'           SET XVARIABLE           00145000
                  AIF   (N'&INTOKEN GT 1).ZG35B  MULTI PARMS            00145100
&XINTOKEN         SETC  '&INTOKEN'  SET XVARIABLE                       00145200
.ZG35B            ANOP  ,                                               00145300
.*-------------------------------------------------------------------   00145400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00145500
                  AIF   (K'&ZXINTOKEN LE 0).ZG35R  NOT I/O              00145600
                  AIF   ('&XINTOKEN' EQ 'NULL').ZG35R                   00145700
                  AIF   ('&XINTOKEN'(1,1) NE '(').ZG35R                 00145800
&ZCGPR            SETC  '&XINTOKEN'(2,K'&XINTOKEN-2)                    00145900
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG35P                    00146000
                  AIF   (K'&ZCGPR GT 2).ZG35Q                           00146100
                  AIF   ('&ZCGPR' EQ '0').ZG35Q                         00146200
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00146300
                  AIF   (T'&ZCGPR NE 'N').ZG35Q  INVALID REG NAME       00146400
.ZG35P            ANOP  ,                                               00146500
                  AIF   (T'&ZCGPR NE 'N').ZG35R  NON NUMERIC            00146600
                  AIF   ('&ZCGPR' LT '2').ZG35Q                         00146700
                  AIF   ('&ZCGPR' LE '12').ZG35R                        00146800
.ZG35Q            ANOP  ,                                               00146900
&ZMS              SETC  '"INTOKEN='             *KGPRA* MNOTE           00147000
&ZMS              SETC  '&ZMS.&INTOKEN"'                                00147100
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00147200
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00147300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00147400
.ZG35R            ANOP  ,                                               00147500
.*-------------------------------------------------------------------   00147600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00147700
.ZG37             ANOP  ,                                               00147800
&ZTLC             SETC 'ENABLE'                                         00147900
                  AIF   ('&REQUEST(1)' NE '&ZTLC').ZG52                 00148000
&XREQUEST         SETC  'ENABLE'    SET KEYWORD                         00148100
                  AIF   (N'&REQUEST LE 1).ZG37A  CK NUM                 00148200
&ZMS              SETC  '"REQUEST='             *KPOSA* MNOTE           00148300
&ZMS              SETC  '&ZMS.&REQUEST"'                                00148400
&ZMS              SETC  '&ZMS "REQUEST"'                                00148500
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00148600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00148700
.ZG37A            ANOP  ,                                               00148800
.*------------------------------------------------------------------    00148900
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00149000
&ZCVAL            SETC ''           CLEAR ERROR KEY ACCUMULATOR         00149100
.ZG37A0           AIF   (K'&OUTTOKEN LE 0).ZG37A1  OK                   00149200
&ZCVAL            SETC '&ZCVAL OUTTOKEN'        INCORRECT KEY USED      00149300
.ZG37A1           AIF   (K'&SUBPOOL LE 0).ZG37A2  OK                    00149400
&ZCVAL            SETC '&ZCVAL SUBPOOL'         INCORRECT KEY USED      00149500
.ZG37A2           AIF   (K'&MAXENTRIES LE 0).ZG37A3  OK                 00149600
&ZCVAL            SETC '&ZCVAL MAXENTRIES'      INCORRECT KEY USED      00149700
.ZG37A3           AIF   (K'&ZCVAL LE 0).ZG37A4  OK                      00149800
&ZCVAL            SETC '&ZCVAL'(2,K'&ZCVAL-1)                           00149900
&ZMS              SETC  '"REQUEST'  *KMEIA* MNOTE                       00150000
&ZMS              SETC  '&ZMS.=&REQUEST"'                               00150100
&ZMS              SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'            00150200
                  MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'            00150300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00150400
.ZG37A4           ANOP  ,                                               00150500
.*----------------------------------------------------------------***   00150600
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00150700
                  AIF   (N'&SSVTDATA LE 1).ZG39A  CK NUM                00150800
&ZMS              SETC  '"SSVTDATA='            *KPOSA* MNOTE           00150900
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00151000
&ZMS              SETC  '&ZMS "SSVTDATA"'                               00151100
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00151200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00151300
.ZG39A            ANOP  ,                                               00151400
.*-------------------------------------------------------------------   00151500
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00151600
&ZXSSVTDATA       SETC  'INPUT'     SET IN/OUTPUT                       00151700
&XSSVTDATA        SETC  '&SSVTDATA(1)'          SET XVARIABLE           00151800
                  AIF   (N'&SSVTDATA GT 1).ZG39B  MULTI PARMS           00151900
&XSSVTDATA        SETC  '&SSVTDATA'             SET XVARIABLE           00152000
.ZG39B            AIF   (K'&SSVTDATA(1) GT 0).ZG39C                     00152100
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00152200
&ZMS              SETC  ' '         *KRQDA*                             00152300
&ZMS              SETC  '&ZMS "SSVTDATA" KEY AND ITS ARGUMENT'          00152400
                  MNOTE 8,' &ZMS ARE REQUIRED.'                         00152500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00152600
.ZG39C            ANOP  ,                                               00152700
.*-------------------------------------------------------------------   00152800
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00152900
                  AIF   (K'&ZXSSVTDATA LE 0).ZG39P  NOT I/O             00153000
                  AIF   ('&XSSVTDATA'(1,1) NE '(').ZG39P                00153100
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00153200
&ZMS              SETC  '"SSVTDATA='            *KGPRA* MNOTE           00153300
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00153400
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00153500
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'               00153600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00153700
.ZG39P            ANOP  ,                                               00153800
.*----------------------------------------------------------------***   00153900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00154000
                  AIF   (N'&INTOKEN LE 1).ZG42A  CK NUM                 00154100
&ZMS              SETC  '"INTOKEN='             *KPOSA* MNOTE           00154200
&ZMS              SETC  '&ZMS.&INTOKEN"'                                00154300
&ZMS              SETC  '&ZMS "INTOKEN"'                                00154400
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00154500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00154600
.ZG42A            ANOP  ,                                               00154700
.*-------------------------------------------------------------------   00154800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00154900
&ZXINTOKEN        SETC  'INPUT'     SET IN/OUTPUT                       00155000
&XINTOKEN         SETC  'NULL'                                          00155100
                  AIF   (K'&INTOKEN(1) LE 0).ZG42B  PARM                00155200
&XINTOKEN         SETC  '&INTOKEN(1)'           SET XVARIABLE           00155300
                  AIF   (N'&INTOKEN GT 1).ZG42B  MULTI PARMS            00155400
&XINTOKEN         SETC  '&INTOKEN'  SET XVARIABLE                       00155500
.ZG42B            ANOP  ,                                               00155600
.*-------------------------------------------------------------------   00155700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00155800
                  AIF   (K'&ZXINTOKEN LE 0).ZG42R  NOT I/O              00155900
                  AIF   ('&XINTOKEN' EQ 'NULL').ZG42R                   00156000
                  AIF   ('&XINTOKEN'(1,1) NE '(').ZG42R                 00156100
&ZCGPR            SETC  '&XINTOKEN'(2,K'&XINTOKEN-2)                    00156200
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG42P                    00156300
                  AIF   (K'&ZCGPR GT 2).ZG42Q                           00156400
                  AIF   ('&ZCGPR' EQ '0').ZG42Q                         00156500
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00156600
                  AIF   (T'&ZCGPR NE 'N').ZG42Q  INVALID REG NAME       00156700
.ZG42P            ANOP  ,                                               00156800
                  AIF   (T'&ZCGPR NE 'N').ZG42R  NON NUMERIC            00156900
                  AIF   ('&ZCGPR' LT '2').ZG42Q                         00157000
                  AIF   ('&ZCGPR' LE '12').ZG42R                        00157100
.ZG42Q            ANOP  ,                                               00157200
&ZMS              SETC  '"INTOKEN='             *KGPRA* MNOTE           00157300
&ZMS              SETC  '&ZMS.&INTOKEN"'                                00157400
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00157500
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00157600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00157700
.ZG42R            ANOP  ,                                               00157800
.*----------------------------------------------------------------***   00157900
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00158000
                  AIF   (N'&LOADTOGLOBAL LE 1).ZG45A  CK NUM            00158100
&ZMS              SETC  '"LOADTOGLOBAL='        *KPOSA* MNOTE           00158200
&ZMS              SETC  '&ZMS.&LOADTOGLOBAL"'                           00158300
&ZMS              SETC  '&ZMS "LOADTOGLOBAL"'                           00158400
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00158500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00158600
.ZG45A            ANOP  ,                                               00158700
.*-------------------------------------------------------------------   00158800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00158900
&XLOADTOGLOBAL    SETC  ''          INITIALIZE XVARIABLE                00159000
.ZG46A   AIF   ('&LOADTOGLOBAL(1)' NE 'NO').ZG47A                       00159100
&XLOADTOGLOBAL    SETC  'NO'        SET KEYWORD                         00159200
.*-------------------------------------------------------------------   00159300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00159400
.ZG47A   AIF   ('&LOADTOGLOBAL(1)' NE 'YES').ZG48A                      00159500
&XLOADTOGLOBAL    SETC  'YES'       SET KEYWORD                         00159600
.*-------------------------------------------------------------------   00159700
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00159800
.ZG48A            AIF   (K'&XLOADTOGLOBAL GT 0).ZG48C  KEYWORD          00159900
                  AIF   (K'&LOADTOGLOBAL(1) LE 0).ZG48B                 00160000
&ZMS              SETC  '"LOADTOGLOBAL='        *KUKWA* MNOTE           00160100
&ZMS              SETC  '&ZMS.&LOADTOGLOBAL"'                           00160200
&ZMS              SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '       00160300
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00160400
&ZMS              SETC  '&ZMS "NO"'             VALID KEYWORD           00160500
&ZMS              SETC  '&ZMS OR "YES".'        VALID KEYWORD           00160600
                  MNOTE 8,' &ZMS '                                      00160700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00160800
.ZG48B            ANOP  ,                                               00160900
&XLOADTOGLOBAL    SETC  'NO'        SET DEFAULT KEYWORD                 00161000
.ZG48C            ANOP  ,                                               00161100
&ZXLOADTOGLOBAL   SETC  'INPUT'     SET IN/OUTPUT                       00161200
.*----------------------------------------------------------------***   00161300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00161400
                  AIF   (N'&ERRFUNCT LE 1).ZG50A  CK NUM                00161500
&ZMS              SETC  '"ERRFUNCT='            *KPOSA* MNOTE           00161600
&ZMS              SETC  '&ZMS.&ERRFUNCT"'                               00161700
&ZMS              SETC  '&ZMS "ERRFUNCT"'                               00161800
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00161900
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00162000
.ZG50A            ANOP  ,                                               00162100
.*-------------------------------------------------------------------   00162200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00162300
                  AIF   (K'&ERRFUNCT(1) LE 0).ZG50C  NO PARM            00162400
&ZXERRFUNCT       SETC  'OUTPUT'    SET OUTPUT                          00162500
&XERRFUNCT        SETC  '&ERRFUNCT(1)'          SET XVARIABLE           00162600
                  AIF   (N'&ERRFUNCT GT 1).ZG50C                        00162700
&XERRFUNCT        SETC  '&ERRFUNCT'             SET XVARIABLE           00162800
.ZG50C            ANOP  ,                                               00162900
.*-------------------------------------------------------------------   00163000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00163100
                  AIF   (K'&ZXERRFUNCT LE 0).ZG50R  NOT I/O             00163200
                  AIF   ('&XERRFUNCT'(1,1) NE '(').ZG50R                00163300
&ZCGPR            SETC  '&XERRFUNCT'(2,K'&XERRFUNCT-2)                  00163400
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG50P                    00163500
                  AIF   (K'&ZCGPR GT 2).ZG50Q                           00163600
                  AIF   ('&ZCGPR' EQ '0').ZG50Q                         00163700
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00163800
                  AIF   (T'&ZCGPR NE 'N').ZG50Q  INVALID REG NAME       00163900
.ZG50P            ANOP  ,                                               00164000
                  AIF   (T'&ZCGPR NE 'N').ZG50R  NON NUMERIC            00164100
                  AIF   ('&ZCGPR' LT '2').ZG50Q                         00164200
                  AIF   ('&ZCGPR' LE '12').ZG50R                        00164300
.ZG50Q            ANOP  ,                                               00164400
&ZMS              SETC  '"ERRFUNCT='            *KGPRA* MNOTE           00164500
&ZMS              SETC  '&ZMS.&ERRFUNCT"'                               00164600
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00164700
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00164800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00164900
.ZG50R            ANOP  ,                                               00165000
.*-------------------------------------------------------------------   00165100
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00165200
.ZG52             ANOP  ,                                               00165300
&ZTLC             SETC 'EXCHANGE'                                       00165400
                  AIF   ('&REQUEST(1)' NE '&ZTLC').ZG67                 00165500
&XREQUEST         SETC  'EXCHANGE'  SET KEYWORD                         00165600
                  AIF   (N'&REQUEST LE 1).ZG52A  CK NUM                 00165700
&ZMS              SETC  '"REQUEST='             *KPOSA* MNOTE           00165800
&ZMS              SETC  '&ZMS.&REQUEST"'                                00165900
&ZMS              SETC  '&ZMS "REQUEST"'                                00166000
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00166100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00166200
.ZG52A            ANOP  ,                                               00166300
.*------------------------------------------------------------------    00166400
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00166500
&ZCVAL            SETC ''           CLEAR ERROR KEY ACCUMULATOR         00166600
.ZG52A0           AIF   (K'&OUTTOKEN LE 0).ZG52A1  OK                   00166700
&ZCVAL            SETC '&ZCVAL OUTTOKEN'        INCORRECT KEY USED      00166800
.ZG52A1           AIF   (K'&SUBPOOL LE 0).ZG52A2  OK                    00166900
&ZCVAL            SETC '&ZCVAL SUBPOOL'         INCORRECT KEY USED      00167000
.ZG52A2           AIF   (K'&MAXENTRIES LE 0).ZG52A3  OK                 00167100
&ZCVAL            SETC '&ZCVAL MAXENTRIES'      INCORRECT KEY USED      00167200
.ZG52A3           AIF   (K'&ZCVAL LE 0).ZG52A4  OK                      00167300
&ZCVAL            SETC '&ZCVAL'(2,K'&ZCVAL-1)                           00167400
&ZMS              SETC  '"REQUEST'  *KMEIA* MNOTE                       00167500
&ZMS              SETC  '&ZMS.=&REQUEST"'                               00167600
&ZMS              SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'            00167700
                  MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'            00167800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00167900
.ZG52A4           ANOP  ,                                               00168000
.*----------------------------------------------------------------***   00168100
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00168200
                  AIF   (N'&SSVTDATA LE 1).ZG54A  CK NUM                00168300
&ZMS              SETC  '"SSVTDATA='            *KPOSA* MNOTE           00168400
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00168500
&ZMS              SETC  '&ZMS "SSVTDATA"'                               00168600
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00168700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00168800
.ZG54A            ANOP  ,                                               00168900
.*-------------------------------------------------------------------   00169000
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00169100
&ZXSSVTDATA       SETC  'INPUT'     SET IN/OUTPUT                       00169200
&XSSVTDATA        SETC  '&SSVTDATA(1)'          SET XVARIABLE           00169300
                  AIF   (N'&SSVTDATA GT 1).ZG54B  MULTI PARMS           00169400
&XSSVTDATA        SETC  '&SSVTDATA'             SET XVARIABLE           00169500
.ZG54B            AIF   (K'&SSVTDATA(1) GT 0).ZG54C                     00169600
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00169700
&ZMS              SETC  ' '         *KRQDA*                             00169800
&ZMS              SETC  '&ZMS "SSVTDATA" KEY AND ITS ARGUMENT'          00169900
                  MNOTE 8,' &ZMS ARE REQUIRED.'                         00170000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00170100
.ZG54C            ANOP  ,                                               00170200
.*-------------------------------------------------------------------   00170300
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00170400
                  AIF   (K'&ZXSSVTDATA LE 0).ZG54P  NOT I/O             00170500
                  AIF   ('&XSSVTDATA'(1,1) NE '(').ZG54P                00170600
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00170700
&ZMS              SETC  '"SSVTDATA='            *KGPRA* MNOTE           00170800
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00170900
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00171000
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'               00171100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00171200
.ZG54P            ANOP  ,                                               00171300
.*----------------------------------------------------------------***   00171400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00171500
                  AIF   (N'&INTOKEN LE 1).ZG57A  CK NUM                 00171600
&ZMS              SETC  '"INTOKEN='             *KPOSA* MNOTE           00171700
&ZMS              SETC  '&ZMS.&INTOKEN"'                                00171800
&ZMS              SETC  '&ZMS "INTOKEN"'                                00171900
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00172000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00172100
.ZG57A            ANOP  ,                                               00172200
.*-------------------------------------------------------------------   00172300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00172400
&ZXINTOKEN        SETC  'INPUT'     SET IN/OUTPUT                       00172500
&XINTOKEN         SETC  'NULL'                                          00172600
                  AIF   (K'&INTOKEN(1) LE 0).ZG57B  PARM                00172700
&XINTOKEN         SETC  '&INTOKEN(1)'           SET XVARIABLE           00172800
                  AIF   (N'&INTOKEN GT 1).ZG57B  MULTI PARMS            00172900
&XINTOKEN         SETC  '&INTOKEN'  SET XVARIABLE                       00173000
.ZG57B            ANOP  ,                                               00173100
.*-------------------------------------------------------------------   00173200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00173300
                  AIF   (K'&ZXINTOKEN LE 0).ZG57R  NOT I/O              00173400
                  AIF   ('&XINTOKEN' EQ 'NULL').ZG57R                   00173500
                  AIF   ('&XINTOKEN'(1,1) NE '(').ZG57R                 00173600
&ZCGPR            SETC  '&XINTOKEN'(2,K'&XINTOKEN-2)                    00173700
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG57P                    00173800
                  AIF   (K'&ZCGPR GT 2).ZG57Q                           00173900
                  AIF   ('&ZCGPR' EQ '0').ZG57Q                         00174000
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00174100
                  AIF   (T'&ZCGPR NE 'N').ZG57Q  INVALID REG NAME       00174200
.ZG57P            ANOP  ,                                               00174300
                  AIF   (T'&ZCGPR NE 'N').ZG57R  NON NUMERIC            00174400
                  AIF   ('&ZCGPR' LT '2').ZG57Q                         00174500
                  AIF   ('&ZCGPR' LE '12').ZG57R                        00174600
.ZG57Q            ANOP  ,                                               00174700
&ZMS              SETC  '"INTOKEN='             *KGPRA* MNOTE           00174800
&ZMS              SETC  '&ZMS.&INTOKEN"'                                00174900
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00175000
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00175100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00175200
.ZG57R            ANOP  ,                                               00175300
.*----------------------------------------------------------------***   00175400
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00175500
                  AIF   (N'&LOADTOGLOBAL LE 1).ZG60A  CK NUM            00175600
&ZMS              SETC  '"LOADTOGLOBAL='        *KPOSA* MNOTE           00175700
&ZMS              SETC  '&ZMS.&LOADTOGLOBAL"'                           00175800
&ZMS              SETC  '&ZMS "LOADTOGLOBAL"'                           00175900
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00176000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00176100
.ZG60A            ANOP  ,                                               00176200
.*-------------------------------------------------------------------   00176300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00176400
&XLOADTOGLOBAL    SETC  ''          INITIALIZE XVARIABLE                00176500
.ZG61A   AIF   ('&LOADTOGLOBAL(1)' NE 'NO').ZG62A                       00176600
&XLOADTOGLOBAL    SETC  'NO'        SET KEYWORD                         00176700
.*-------------------------------------------------------------------   00176800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00176900
.ZG62A   AIF   ('&LOADTOGLOBAL(1)' NE 'YES').ZG63A                      00177000
&XLOADTOGLOBAL    SETC  'YES'       SET KEYWORD                         00177100
.*-------------------------------------------------------------------   00177200
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00177300
.ZG63A            AIF   (K'&XLOADTOGLOBAL GT 0).ZG63C  KEYWORD          00177400
                  AIF   (K'&LOADTOGLOBAL(1) LE 0).ZG63B                 00177500
&ZMS              SETC  '"LOADTOGLOBAL='        *KUKWA* MNOTE           00177600
&ZMS              SETC  '&ZMS.&LOADTOGLOBAL"'                           00177700
&ZMS              SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '       00177800
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00177900
&ZMS              SETC  '&ZMS "NO"'             VALID KEYWORD           00178000
&ZMS              SETC  '&ZMS OR "YES".'        VALID KEYWORD           00178100
                  MNOTE 8,' &ZMS '                                      00178200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00178300
.ZG63B            ANOP  ,                                               00178400
&XLOADTOGLOBAL    SETC  'NO'        SET DEFAULT KEYWORD                 00178500
.ZG63C            ANOP  ,                                               00178600
&ZXLOADTOGLOBAL   SETC  'INPUT'     SET IN/OUTPUT                       00178700
.*----------------------------------------------------------------***   00178800
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00178900
                  AIF   (N'&ERRFUNCT LE 1).ZG65A  CK NUM                00179000
&ZMS              SETC  '"ERRFUNCT='            *KPOSA* MNOTE           00179100
&ZMS              SETC  '&ZMS.&ERRFUNCT"'                               00179200
&ZMS              SETC  '&ZMS "ERRFUNCT"'                               00179300
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00179400
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00179500
.ZG65A            ANOP  ,                                               00179600
.*-------------------------------------------------------------------   00179700
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00179800
                  AIF   (K'&ERRFUNCT(1) LE 0).ZG65C  NO PARM            00179900
&ZXERRFUNCT       SETC  'OUTPUT'    SET OUTPUT                          00180000
&XERRFUNCT        SETC  '&ERRFUNCT(1)'          SET XVARIABLE           00180100
                  AIF   (N'&ERRFUNCT GT 1).ZG65C                        00180200
&XERRFUNCT        SETC  '&ERRFUNCT'             SET XVARIABLE           00180300
.ZG65C            ANOP  ,                                               00180400
.*-------------------------------------------------------------------   00180500
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00180600
                  AIF   (K'&ZXERRFUNCT LE 0).ZG65R  NOT I/O             00180700
                  AIF   ('&XERRFUNCT'(1,1) NE '(').ZG65R                00180800
&ZCGPR            SETC  '&XERRFUNCT'(2,K'&XERRFUNCT-2)                  00180900
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG65P                    00181000
                  AIF   (K'&ZCGPR GT 2).ZG65Q                           00181100
                  AIF   ('&ZCGPR' EQ '0').ZG65Q                         00181200
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00181300
                  AIF   (T'&ZCGPR NE 'N').ZG65Q  INVALID REG NAME       00181400
.ZG65P            ANOP  ,                                               00181500
                  AIF   (T'&ZCGPR NE 'N').ZG65R  NON NUMERIC            00181600
                  AIF   ('&ZCGPR' LT '2').ZG65Q                         00181700
                  AIF   ('&ZCGPR' LE '12').ZG65R                        00181800
.ZG65Q            ANOP  ,                                               00181900
&ZMS              SETC  '"ERRFUNCT='            *KGPRA* MNOTE           00182000
&ZMS              SETC  '&ZMS.&ERRFUNCT"'                               00182100
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00182200
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00182300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00182400
.ZG65R            ANOP  ,                                               00182500
.*------------------------------------------------------------------    00182600
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00182700
.ZG67             ANOP  ,                                               00182800
&ZXREQUEST        SETC  'INPUT'     SET IN/OUTPUT                       00182900
                  AIF   (K'&XREQUEST GT 0).ZG67E  VALID ARG             00183000
                  AIF   (T'&REQUEST EQ 'O').ZG67D  OMITTED              00183100
&ZASYSLNDX        SETA  0                                               00183200
.ZG67A            ANOP  ,           POSITIONAL MACRO KEY                00183300
&ZASYSLNDX        SETA  &ZASYSLNDX+1                                    00183400
                  AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG67C                00183500
&ZTLC             SETC 'REQUEST'                                        00183600
                  AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG67A       00183700
.ZG67B            ANOP  ,                                               00183800
&ZXREQUEST        SETC  ''          RESET IN/OUTPUT                     00183900
&ZMS              SETC  'THE "REQUEST" KEY'     *KOPTA* MNOTE           00184000
&ZMS              SETC  '&ZMS MUST CONTAIN ONE'                         00184100
                  MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                00184200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00184300
                  AGO   .ZG67E                                          00184400
.ZG67C            ANOP  ,                                               00184500
&ZXREQUEST        SETC  ''          RESET IN/OUTPUT                     00184600
&ZMS              SETC  '"REQUEST='             *KUKWA* MNOTE           00184700
&ZMS              SETC  '&ZMS.&REQUEST"'                                00184800
&ZMS              SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '       00184900
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00185000
&ZMS              SETC  '&ZMS "CREATE",'        VALID KEYWORD           00185100
&ZMS              SETC  '&ZMS "DISABLE",'       VALID KEYWORD           00185200
&ZMS              SETC  '&ZMS "ENABLE",'        VALID KEYWORD           00185300
&ZMS              SETC  '&ZMS OR "EXCHANGE".'   VALID KEYWORD           00185400
                  MNOTE 8,' &ZMS '                                      00185500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00185600
                  AGO   .ZG67E                                          00185700
.ZG67D            ANOP  ,                                               00185800
&XREQUEST         SETC  'CREATE'    SET DEFAULT KEYWORD                 00185900
.ZG67E            ANOP  ,                                               00186000
.*------------------------------------------------------------------    00186100
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00186200
                  AIF   (K'&REQUEST(1) GT 0).ZG67F  PARM                00186300
&XREQUEST         SETC  ''          ENSURE NULL KEYWORD                 00186400
&ZXREQUEST        SETC  ''          RESET IN/OUTPUT                     00186500
&ZMS              SETC  'THE'                                           00186600
&ZMS              SETC  '&ZMS "REQUEST" KEY AND ITS ARGUMENT'           00186700
&ZMS              SETC  '&ZMS ARE REQUIRED.'                            00186800
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00186900
&ZMS              SETC  '&ZMS "CREATE",'        VALID KEYWORD           00187000
&ZMS              SETC  '&ZMS "DISABLE",'       VALID KEYWORD           00187100
&ZMS              SETC  '&ZMS "ENABLE",'        VALID KEYWORD           00187200
&ZMS              SETC  '&ZMS OR "EXCHANGE".'   VALID KEYWORD           00187300
                  MNOTE 8,' &ZMS '                                      00187400
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00187500
.ZG67F            ANOP  ,                                               00187600
.*----------------------------------------------------------------***   00187700
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00187800
                  AIF   (N'&RETCODE LE 1).ZG69A  CK NUM                 00187900
&ZMS              SETC  '"RETCODE='             *KPOSA* MNOTE           00188000
&ZMS              SETC  '&ZMS.&RETCODE"'                                00188100
&ZMS              SETC  '&ZMS "RETCODE"'                                00188200
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00188300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00188400
.ZG69A            ANOP  ,                                               00188500
.*-------------------------------------------------------------------   00188600
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00188700
                  AIF   (K'&RETCODE(1) LE 0).ZG69C  NO PARM             00188800
&ZXRETCODE        SETC  'OUTPUT'    SET OUTPUT                          00188900
&XRETCODE         SETC  '&RETCODE(1)'           SET XVARIABLE           00189000
                  AIF   (N'&RETCODE GT 1).ZG69C                         00189100
&XRETCODE         SETC  '&RETCODE'  SET XVARIABLE                       00189200
.ZG69C            ANOP  ,                                               00189300
.*-------------------------------------------------------------------   00189400
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00189500
                  AIF   (K'&ZXRETCODE LE 0).ZG69R  NOT I/O              00189600
                  AIF   ('&XRETCODE'(1,1) NE '(').ZG69R                 00189700
&ZCGPR            SETC  '&XRETCODE'(2,K'&XRETCODE-2)                    00189800
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG69P                    00189900
                  AIF   (K'&ZCGPR GT 2).ZG69Q                           00190000
                  AIF   ('&ZCGPR' EQ '0').ZG69Q                         00190100
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00190200
                  AIF   (T'&ZCGPR NE 'N').ZG69Q  INVALID REG NAME       00190300
.ZG69P            ANOP  ,                                               00190400
                  AIF   (T'&ZCGPR NE 'N').ZG69R  NON NUMERIC            00190500
                  AIF   ('&ZCGPR' LT '2').ZG69Q                         00190600
                  AIF   ('&ZCGPR' LE '12').ZG69R                        00190700
.ZG69Q            ANOP  ,                                               00190800
&ZMS              SETC  '"RETCODE='             *KGPRA* MNOTE           00190900
&ZMS              SETC  '&ZMS.&RETCODE"'                                00191000
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00191100
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00191200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00191300
.ZG69R            ANOP  ,                                               00191400
.*----------------------------------------------------------------***   00191500
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00191600
                  AIF   (N'&RSNCODE LE 1).ZG72A  CK NUM                 00191700
&ZMS              SETC  '"RSNCODE='             *KPOSA* MNOTE           00191800
&ZMS              SETC  '&ZMS.&RSNCODE"'                                00191900
&ZMS              SETC  '&ZMS "RSNCODE"'                                00192000
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00192100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00192200
.ZG72A            ANOP  ,                                               00192300
.*-------------------------------------------------------------------   00192400
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00192500
                  AIF   (K'&RSNCODE(1) LE 0).ZG72C  NO PARM             00192600
&ZXRSNCODE        SETC  'OUTPUT'    SET OUTPUT                          00192700
&XRSNCODE         SETC  '&RSNCODE(1)'           SET XVARIABLE           00192800
                  AIF   (N'&RSNCODE GT 1).ZG72C                         00192900
&XRSNCODE         SETC  '&RSNCODE'  SET XVARIABLE                       00193000
.ZG72C            ANOP  ,                                               00193100
.*-------------------------------------------------------------------   00193200
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00193300
                  AIF   (K'&ZXRSNCODE LE 0).ZG72R  NOT I/O              00193400
                  AIF   ('&XRSNCODE'(1,1) NE '(').ZG72R                 00193500
&ZCGPR            SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                    00193600
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG72P                    00193700
                  AIF   (K'&ZCGPR GT 2).ZG72Q                           00193800
                  AIF   ('&ZCGPR' EQ '0').ZG72Q                         00193900
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00194000
                  AIF   (T'&ZCGPR NE 'N').ZG72Q  INVALID REG NAME       00194100
.ZG72P            ANOP  ,                                               00194200
                  AIF   (T'&ZCGPR NE 'N').ZG72R  NON NUMERIC            00194300
                  AIF   ('&ZCGPR' LT '2').ZG72Q                         00194400
                  AIF   ('&ZCGPR' LE '12').ZG72R                        00194500
.ZG72Q            ANOP  ,                                               00194600
&ZMS              SETC  '"RSNCODE='             *KGPRA* MNOTE           00194700
&ZMS              SETC  '&ZMS.&RSNCODE"'                                00194800
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00194900
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00195000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00195100
.ZG72R            ANOP  ,                                               00195200
.*----------------------------------------------------------------***   00195300
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00195400
                  AIF   (N'&COM LE 1).ZG75A     CK NUM                  00195500
&ZMS              SETC  '"COM='     *KPOSA* MNOTE                       00195600
&ZMS              SETC  '&ZMS.&COM"'                                    00195700
&ZMS              SETC  '&ZMS "COM"'                                    00195800
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00195900
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00196000
.ZG75A            ANOP  ,                                               00196100
.*-------------------------------------------------------------------   00196200
.***AG.KXVAR13 VALUE, OPT INPUT, KEYS -XVARIABLE                        00196300
&ZXCOM            SETC  'INPUT'     SET IN/OUTPUT                       00196400
&XCOM             SETC  'NULL'                                          00196500
                  AIF   (K'&COM(1) LE 0).ZG75B  PARM                    00196600
&XCOM             SETC  '&COM(1)'   SET XVARIABLE                       00196700
                  AIF   (N'&COM GT 1).ZG75B     MULTI PARMS             00196800
&XCOM             SETC  '&COM'      SET XVARIABLE                       00196900
.ZG75B            ANOP  ,                                               00197000
.*-------------------------------------------------------------------   00197100
.***AG.KCK01 VALUE, OPT INPUT, KEYS -GPR NOT ALLOWED                    00197200
                  AIF   (K'&ZXCOM LE 0).ZG75P   NOT I/O                 00197300
                  AIF   ('&XCOM' EQ 'NULL').ZG75P                       00197400
                  AIF   ('&XCOM'(1,1) NE '(').ZG75P                     00197500
&ZXCOM            SETC  ''          RESET IN/OUTPUT                     00197600
&ZMS              SETC  '"COM='     *KGPRA* MNOTE                       00197700
&ZMS              SETC  '&ZMS.&COM"'                                    00197800
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00197900
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'               00198000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00198100
.ZG75P            ANOP  ,                                               00198200
.*-------------------------------------------------------------------   00198300
.***AG.KCK03 VALUE, OPT INPUT, KEYS -CHARACTER LENGTH                   00198400
                  AIF   (K'&ZXCOM LE 0).ZG75S   NOT I/O                 00198500
                  AIF   ('&XCOM' EQ 'NULL').ZG75S                       00198600
                  AIF   (K'&XCOM LE 256).ZG75S  LNG OK                  00198700
&ZXCOM            SETC  ''          RESET IN/OUTPUT                     00198800
&ZMS              SETC  '"COM='     *KLNGA* MNOTE                       00198900
&ZMS              SETC  '&ZMS.&COM"'                                    00199000
&ZMS              SETC  '&ZMS ARGUMENT 1 EXCEEDS THE MAXIMUM'           00199100
                  MNOTE 8,' &ZMS LENGTH OF 256 CHARACTERS.'             00199200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00199300
.ZG75S            ANOP  ,                                               00199400
.******************************************************************     00199500
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00199600
.******************************************************************     00199700
                  ACTR  10000                                           00199800
.*----------------------------------------------------------------***   00199900
.***AH.P02 EXTRA POSITIONALS                                            00200000
                  AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS            00200100
&ZCVAL            SETC  ''          ERROR FIELD                         00200200
&ZAWRK            SETA  0           POSITIONAL NUMBER                   00200300
.ZGLIST2          ANOP  ,                                               00200400
&ZAWRK            SETA  &ZAWRK+1    NEXT POSITIONAL                     00200500
                  AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE            00200600
&ZCVAL            SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA                 00200700
                  AGO   .ZGLIST2                                        00200800
.*                                                                      00200900
.ZGLIST3          ANOP  ,                                               00201000
&ZCVAL            SETC '&ZCVAL'(2,K'&ZCVAL-1)   STRIP COMMA             00201100
&ZMS              SETC  'POSITIONAL ARGUMENT(S),'  *PPOSA* MNOTE        00201200
&ZMS              SETC  '&ZMS "&ZCVAL"'                                 00201300
&ZMS              SETC  '&ZMS CANNOT BE USED.'                          00201400
&ZMS              SETC  '&ZMS NO POSITIONAL ARGUMENTS'                  00201500
                  MNOTE 8,' &ZMS ARE ALLOWED.'                          00201600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00201700
.ZGLISTX          ANOP  ,                                               00201800
&ZASYSLNDX        SETA  0                                               00201900
.*-------------------------------------------------------------------   00202000
.***AG.MF04 MF=(SLE)                                                    00202100
.ZGMFX            ANOP  ,           END OF FULL SYNTAX CHECK            00202200
.*******************************************************************    00202300
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00202400
.*******************************************************************    00202500
                  AIF   (&ZMACRET NE 0).ZLX2    ERROR DETECTED          00202600
.*******************************************************************    00202700
.***AE.01  START OF IEFSSVT MACRO CODE                                  00202800
.*******************************************************************    00202900
                  LCLC  &M0M0001                 NAME                   00203000
&M0M0001          SETC  '&XLABEL'                SET NAME               00203100
                  AIF   (K'&XLABEL NE 0).XLAB2                          00203200
&M0M0001          SETC  'M00M&SYSNDX'            DEFAULT NAME           00203300
.*                                                                      00203400
.XLAB2            ANOP  ,                                               00203500
&M0M0001 DS    0H                             IEFSSVT-1                 00203600
.*******************************************************************    00203700
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00203800
.*******************************************************************    00203900
              PUSH  PRINT                                               00204000
                  AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON      00204100
                  PRINT OFF         ++ PR01                             00204200
                  AGO   .ZPRNTXX                                        00204300
.ZPRINTX          PRINT ON                                              00204400
.ZPRNTXX          ANOP  ,                                               00204500
.********************************************************************   00204600
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00204700
.********************************************************************   00204800
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00204900
                      LCLA  &ZOPN1         INVOCATION INDEX             00205000
                      LCLC  &ZOPL(4095)    LABEL                        00205100
                      LCLC  &ZOPO(4095)    OPERATION                    00205200
                      LCLC  &ZOPV(4095)    VALUE                        00205300
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00205400
.*                                                                      00205500
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00205600
.******************************************************************     00205700
.***AL.L10 IEFSSVT FMT=LIST MF=S|L PARAMETERS                           00205800
.******************************************************************     00205900
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     00206000
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     00206100
&XMFCTRL              SETC  '#Z'.'&SYSNDX'(1,4).'A'                     00206200
&XMFATTR              SETC  '0D'                                        00206300
.*                                                                      00206400
&ZOPN                 SETA  &ZOPN+1                                     00206500
&ZOPL(&ZOPN)          SETC  ' '                                         00206600
&ZOPO(&ZOPN)          SETC  'B'                                         00206700
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'                                00206800
&ZOPD(&ZOPN)          SETC  '++ IEFSSVT ARG PARMS'                      00206900
.*                                                                      00207000
&ZOPN                 SETA  &ZOPN+1                                     00207100
&ZOPL(&ZOPN)          SETC  ' '                                         00207200
&ZOPO(&ZOPN)          SETC  'SPACE'                                     00207300
&ZOPV(&ZOPN)          SETC  '1'                                         00207400
&ZOPD(&ZOPN)          SETC  ' '                                         00207500
.*                                                                      00207600
.ZLMFSL2              ANOP  ,                                           00207700
.*-------------------------------------------------------------------   00207800
.***AM.L01  IEFSSVT FMT=LIST PARAMETERS                                 00207900
&ZOPN                 SETA &ZOPN+1                                      00208000
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00208100
&ZOPO(&ZOPN)          SETC 'DS'                                         00208200
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00208300
&ZOPD(&ZOPN)          SETC '++ IEFSSVT PARM LIST'                       00208400
.*-------------------------------------------------------------------   00208500
.***AM.L09  XVT_PLIST_ID CL4                                            00208600
&ZOPN                 SETA &ZOPN+1                                      00208700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVT_PLIST_ID'                     00208800
&ZOPO(&ZOPN)          SETC 'DS'                                         00208900
&ZOPV(&ZOPN)          SETC 'CL4'                                        00209000
&ZOPD(&ZOPN)          SETC '++ CONSTANT  XVT_PLIST_ID'                  00209100
.*-------------------------------------------------------------------   00209200
.***AM.L09  XPLISTLEN XL2                                               00209300
&ZOPN                 SETA &ZOPN+1                                      00209400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'                        00209500
&ZOPO(&ZOPN)          SETC 'DS'                                         00209600
&ZOPV(&ZOPN)          SETC 'XL2'                                        00209700
&ZOPD(&ZOPN)          SETC '++ INPUT  XPLISTLEN'                        00209800
.*-------------------------------------------------------------------   00209900
.***AM.L02 XVERSION XL1                                                 00210000
&ZOPN                 SETA &ZOPN+1                                      00210100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00210200
&ZOPO(&ZOPN)          SETC 'DS'                                         00210300
&ZOPV(&ZOPN)          SETC 'XL1'                                        00210400
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00210500
.*-------------------------------------------------------------------   00210600
.***AM.L09  XRSV0001 CL1                                                00210700
&ZOPN                 SETA &ZOPN+1                                      00210800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0001'                         00210900
&ZOPO(&ZOPN)          SETC 'DS'                                         00211000
&ZOPV(&ZOPN)          SETC 'CL1'                                        00211100
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0001'                      00211200
.*-------------------------------------------------------------------   00211300
.***AM.L09  XSUBNAME CL4                                                00211400
&ZOPN                 SETA &ZOPN+1                                      00211500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSUBNAME'                         00211600
&ZOPO(&ZOPN)          SETC 'DS'                                         00211700
&ZOPV(&ZOPN)          SETC 'CL4'                                        00211800
&ZOPD(&ZOPN)          SETC '++ &ZXSUBNAME  XSUBNAME'                    00211900
.*-------------------------------------------------------------------   00212000
.***AM.L09  XRSV0002 CL4                                                00212100
&ZOPN                 SETA &ZOPN+1                                      00212200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0002'                         00212300
&ZOPO(&ZOPN)          SETC 'DS'                                         00212400
&ZOPV(&ZOPN)          SETC 'CL4'                                        00212500
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0002'                      00212600
.*-------------------------------------------------------------------   00212700
.***AM.L03 XREQUEST_TYPE BL.8                                           00212800
&ZOPN                 SETA &ZOPN+1                                      00212900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQUEST_TYPE'                    00213000
&ZOPO(&ZOPN)          SETC 'DS'                                         00213100
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00213200
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00213300
.*                                                                      00213400
&ZOPN                 SETA  &ZOPN+1                                     00213500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_CREATE'                 00213600
&ZOPO(&ZOPN)          SETC  'EQU'                                       00213700
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00213800
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00213900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).CREATE'                       00214000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00214100
.*                                                                      00214200
&ZOPN                 SETA  &ZOPN+1                                     00214300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_DISABLE'                00214400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00214500
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             00214600
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00214700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).DISABLE'                      00214800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00214900
.*                                                                      00215000
&ZOPN                 SETA  &ZOPN+1                                     00215100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_ENABLE'                 00215200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00215300
&ZOPV(&ZOPN)          SETC  'B''00100000'''                             00215400
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00215500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ENABLE'                       00215600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00215700
.*                                                                      00215800
&ZOPN                 SETA  &ZOPN+1                                     00215900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_EXCHANGE'               00216000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00216100
&ZOPV(&ZOPN)          SETC  'B''00010000'''                             00216200
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00216300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).EXCHANGE'                     00216400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00216500
.*-------------------------------------------------------------------   00216600
.***AM.L09  XRSV0003 CL1                                                00216700
&ZOPN                 SETA &ZOPN+1                                      00216800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0003'                         00216900
&ZOPO(&ZOPN)          SETC 'DS'                                         00217000
&ZOPV(&ZOPN)          SETC 'CL1'                                        00217100
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0003'                      00217200
.*-------------------------------------------------------------------   00217300
.***AM.L03 XMISC_FLAGS BL.8                                             00217400
&ZOPN                 SETA &ZOPN+1                                      00217500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMISC_FLAGS'                      00217600
&ZOPO(&ZOPN)          SETC 'DS'                                         00217700
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00217800
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00217900
.*                                                                      00218000
&ZOPN                 SETA  &ZOPN+1                                     00218100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XLOADTOGLOBAL_YES'               00218200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00218300
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00218400
&ZOPD(&ZOPN)          SETC  '++ XLOADTOGLOBAL.'                         00218500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          00218600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00218700
.*-------------------------------------------------------------------   00218800
.***AM.L09  XRSV0004 CL1                                                00218900
&ZOPN                 SETA &ZOPN+1                                      00219000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0004'                         00219100
&ZOPO(&ZOPN)          SETC 'DS'                                         00219200
&ZOPV(&ZOPN)          SETC 'CL1'                                        00219300
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0004'                      00219400
.*-------------------------------------------------------------------   00219500
.***AM.L09  XSSVTDATA A                                                 00219600
&ZOPN                 SETA &ZOPN+1                                      00219700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSSVTDATA'                        00219800
&ZOPO(&ZOPN)          SETC 'DS'                                         00219900
&ZOPV(&ZOPN)          SETC 'A'                                          00220000
&ZOPD(&ZOPN)          SETC '++ &ZXSSVTDATA  XSSVTDATA'                  00220100
.*-------------------------------------------------------------------   00220200
.***AM.L09  XMAXENTRIES XL2                                             00220300
&ZOPN                 SETA &ZOPN+1                                      00220400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMAXENTRIES'                      00220500
&ZOPO(&ZOPN)          SETC 'DS'                                         00220600
&ZOPV(&ZOPN)          SETC 'XL2'                                        00220700
&ZOPD(&ZOPN)          SETC '++ &ZXMAXENTRIES  XMAXENTRIES'              00220800
.*-------------------------------------------------------------------   00220900
.***AM.L09  XSUBPOOL XL1                                                00221000
&ZOPN                 SETA &ZOPN+1                                      00221100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSUBPOOL'                         00221200
&ZOPO(&ZOPN)          SETC 'DS'                                         00221300
&ZOPV(&ZOPN)          SETC 'XL1'                                        00221400
&ZOPD(&ZOPN)          SETC '++ &ZXSUBPOOL  XSUBPOOL'                    00221500
.*-------------------------------------------------------------------   00221600
.***AM.L09  XRSV0005 CL1                                                00221700
&ZOPN                 SETA &ZOPN+1                                      00221800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0005'                         00221900
&ZOPO(&ZOPN)          SETC 'DS'                                         00222000
&ZOPV(&ZOPN)          SETC 'CL1'                                        00222100
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0005'                      00222200
.*-------------------------------------------------------------------   00222300
.***AM.L09  XINTOKEN BL.32                                              00222400
&ZOPN                 SETA &ZOPN+1                                      00222500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XINTOKEN'                         00222600
&ZOPO(&ZOPN)          SETC 'DS'                                         00222700
&ZOPV(&ZOPN)          SETC 'BL.32'                                      00222800
&ZOPD(&ZOPN)          SETC '++ &ZXINTOKEN  XINTOKEN'                    00222900
.*-------------------------------------------------------------------   00223000
.***AM.L09  XRSV0008 CL20                                               00223100
&ZOPN                 SETA &ZOPN+1                                      00223200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0008'                         00223300
&ZOPO(&ZOPN)          SETC 'DS'                                         00223400
&ZOPV(&ZOPN)          SETC 'CL20'                                       00223500
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0008'                      00223600
.*-------------------------------------------------------------------   00223700
.***AM.L09  XRSV0006 CL4                                                00223800
&ZOPN                 SETA &ZOPN+1                                      00223900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0006'                         00224000
&ZOPO(&ZOPN)          SETC 'DS'                                         00224100
&ZOPV(&ZOPN)          SETC 'CL4'                                        00224200
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0006'                      00224300
.*-------------------------------------------------------------------   00224400
.***AM.L09  XOUTTOKEN BL.32                                             00224500
&ZOPN                 SETA &ZOPN+1                                      00224600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XOUTTOKEN'                        00224700
&ZOPO(&ZOPN)          SETC 'DS'                                         00224800
&ZOPV(&ZOPN)          SETC 'BL.32'                                      00224900
&ZOPD(&ZOPN)          SETC '++ &ZXOUTTOKEN  XOUTTOKEN'                  00225000
.*-------------------------------------------------------------------   00225100
.***AM.L09  XERRFUNCT CL8                                               00225200
&ZOPN                 SETA &ZOPN+1                                      00225300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XERRFUNCT'                        00225400
&ZOPO(&ZOPN)          SETC 'DS'                                         00225500
&ZOPV(&ZOPN)          SETC 'CL8'                                        00225600
&ZOPD(&ZOPN)          SETC '++ &ZXERRFUNCT  XERRFUNCT'                  00225700
.*-------------------------------------------------------------------   00225800
.***AM.L09  XRSV0007 CL4                                                00225900
&ZOPN                 SETA &ZOPN+1                                      00226000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0007'                         00226100
&ZOPO(&ZOPN)          SETC 'DS'                                         00226200
&ZOPV(&ZOPN)          SETC 'CL4'                                        00226300
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0007'                      00226400
.*-------------------------------------------------------------------   00226500
.***AM.L09  XPLISTPTR F                                                 00226600
&ZOPN                 SETA &ZOPN+1                                      00226700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTPTR'                        00226800
&ZOPO(&ZOPN)          SETC 'DS'                                         00226900
&ZOPV(&ZOPN)          SETC 'A'                                          00227000
&ZOPD(&ZOPN)          SETC '++ INPUT  XPLISTPTR'                        00227100
.*-------------------------------------------------------------------   00227200
.***AM.L10 END OF IEFSSVT LIST PARAMETERS                               00227300
&ZOPN                 SETA &ZOPN+1                                      00227400
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00227500
&ZOPO(&ZOPN)          SETC 'EQU'                                        00227600
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00227700
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00227800
.*                                                                      00227900
&ZOPN                 SETA &ZOPN+1                                      00228000
&ZOPL(&ZOPN)          SETC ' '                                          00228100
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00228200
&ZOPV(&ZOPN)          SETC '1'                                          00228300
&ZOPD(&ZOPN)          SETC ' '                                          00228400
.*-------------------------------------------------------------------   00228500
.***AL.L12 IEFSSVT FMT=LIST MF=S|L PARAMETERS                           00228600
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         00228700
.*                                                                      00228800
&ZOPN                 SETA  &ZOPN+1                                     00228900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                00229000
&ZOPO(&ZOPN)          SETC  'DC'                                        00229100
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   00229200
&ZOPD(&ZOPN)          SETC  '++ IEFSSVT ARG PARMS'                      00229300
.*                                                                      00229400
.ZLMFSLX              ANOP  ,                                           00229500
.*-------------------------------------------------------------------   00229600
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00229700
&ZPLLEN               SETA 76                                           00229800
.*                                                                      00229900
.******************************************************************     00230000
.***AI.L01 IEFSSVT FMT=LIST FILL IN PARAMETER AREA                      00230100
.******************************************************************     00230200
                      ACTR  10000                                       00230300
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00230400
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00230500
&ZCVAL                SETC  'LAE'          XAX MODE                     00230600
.ZIMFXA               ANOP ,                                            00230700
.*                                                                      00230800
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00230900
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00231000
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00231100
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00231200
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00231300
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00231400
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00231500
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00231600
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00231700
&ZOPN                 SETA  &ZOPN+1                                     00231800
&ZOPL(&ZOPN)          SETC  ' '                                         00231900
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00232000
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00232100
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00232200
                      AGO   .ZIMFNX                                     00232300
.*                                                                      00232400
.ZIMFN2               ANOP ,                                            00232500
&ZOPN                 SETA  &ZOPN+1                                     00232600
&ZOPL(&ZOPN)          SETC  ' '                                         00232700
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00232800
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00232900
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00233000
.ZIMFNX               ANOP ,                                            00233100
.********************************************************************   00233200
.***AI.L02 IEFSSVT FMT=LIST INITIALIZE PARAMETER AREA                   00233300
.********************************************************************   00233400
.***AI.L03 MF=(SLE)                                                     00233500
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00233600
.*                                                                      00233700
&ZOPN                 SETA  &ZOPN+1                                     00233800
&ZOPL(&ZOPN)          SETC  ' '                                         00233900
&ZOPO(&ZOPN)          SETC  'XC'                                        00234000
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00234100
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00234200
.ZIMFLX               ANOP  ,                                           00234300
.*-------------------------------------------------------------------   00234400
.***AI.L60 XVT_PLIST_ID CL4                                             00234500
&ZOPN                 SETA  &ZOPN+1                                     00234600
&ZOPL(&ZOPN)          SETC  ' '                                         00234700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00234800
&ZOPV(&ZOPN)          SETC  '0(4,1),=CL4''VTPL'''                       00234900
&ZOPD(&ZOPN)          SETC  '++ CL4 CONSTANT'                           00235000
.*-------------------------------------------------------------------   00235100
.***AI.L04 XPLISTLEN XL2                                                00235200
&ZOPN                 SETA  &ZOPN+1                                     00235300
&ZOPL(&ZOPN)          SETC  ' '                                         00235400
&ZOPO(&ZOPN)          SETC  'MVC'                                       00235500
&ZOPV(&ZOPN)          SETC  '4(2,1),=AL2(&ZPLLEN)'                      00235600
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'                    00235700
.*-------------------------------------------------------------------   00235800
.***AI.L04B XVERSION XL1                                                00235900
                      AIF   (&XPLISTVER EQ 0).ZIMFVX                    00236000
&ZOPN                 SETA  &ZOPN+1                                     00236100
&ZOPL(&ZOPN)          SETC  ' '                                         00236200
&ZOPO(&ZOPN)          SETC  'MVI'                                       00236300
&ZOPV(&ZOPN)          SETC  '6(1),&XPLISTVER'                           00236400
&ZOPD(&ZOPN)          SETC  '++ INPUT XVERSION XL1'                     00236500
.ZIMFVX               ANOP  ,                                           00236600
.*-------------------------------------------------------------------   00236700
.***AI.L25  XSUBNAME CL4                                                00236800
                      AIF   ('&ZXSUBNAME' EQ '').ZI5E  NOT USED         00236900
                      AIF   ('&ZXSUBNAME' EQ 'OUTPUT').ZI5E             00237000
&ZCGPR                SETC  '&XSUBNAME'                                 00237100
.*                                                                      00237200
                      AIF   ('&XSUBNAME'(1,1) NE '(').ZI5B              00237300
&ZCGPR   SETC  '0('.'&XSUBNAME'(2,K'&XSUBNAME-2).')'                    00237400
.ZI5B                 ANOP  ,                                           00237500
.*                                                                      00237600
&ZOPN                 SETA  &ZOPN+1                                     00237700
&ZOPL(&ZOPN)          SETC  ' '                                         00237800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00237900
&ZOPV(&ZOPN)          SETC  '8(4,1),&ZCGPR'                             00238000
&ZOPD(&ZOPN)          SETC  '++ &ZXSUBNAME XSUBNAME CL4'                00238100
.*                                                                      00238200
.ZI5E                 ANOP  ,                                           00238300
.*-------------------------------------------------------------------   00238400
.***AI.L05 XREQUEST_TYPE BL1                                            00238500
&ZW                   SETC  ''                                          00238600
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00238700
.*-------------------------------------------------------------------   00238800
.***AI.L08 XREQUEST_TYPE "CREATE"                                       00238900
.***      BL1'1XXXXXXX'                                                 00239000
         AIF   ('&XREQUEST' NE 'CREATE').ZI8A                           00239100
&ZW                   SETC  '&ZW.1'                                     00239200
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00239300
                      AGO   .ZI8C                                       00239400
.*                                                                      00239500
.ZI8A                 ANOP  ,                                           00239600
&ZW                   SETC  '&ZW.0'                                     00239700
.ZI8C                 ANOP  ,                                           00239800
.*-------------------------------------------------------------------   00239900
.***AI.L08 XREQUEST_TYPE "DISABLE"                                      00240000
.***      BL1'X1XXXXXX'                                                 00240100
         AIF   ('&XREQUEST' NE 'DISABLE').ZI9A                          00240200
&ZW                   SETC  '&ZW.1'                                     00240300
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00240400
                      AGO   .ZI9C                                       00240500
.*                                                                      00240600
.ZI9A                 ANOP  ,                                           00240700
&ZW                   SETC  '&ZW.0'                                     00240800
.ZI9C                 ANOP  ,                                           00240900
.*-------------------------------------------------------------------   00241000
.***AI.L08 XREQUEST_TYPE "ENABLE"                                       00241100
.***      BL1'XX1XXXXX'                                                 00241200
         AIF   ('&XREQUEST' NE 'ENABLE').ZI10A                          00241300
&ZW                   SETC  '&ZW.1'                                     00241400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00241500
                      AGO   .ZI10C                                      00241600
.*                                                                      00241700
.ZI10A                ANOP  ,                                           00241800
&ZW                   SETC  '&ZW.0'                                     00241900
.ZI10C                ANOP  ,                                           00242000
.*-------------------------------------------------------------------   00242100
.***AI.L08 XREQUEST_TYPE "EXCHANGE"                                     00242200
.***      BL1'XXX1XXXX'                                                 00242300
         AIF   ('&XREQUEST' NE 'EXCHANGE').ZI11A                        00242400
&ZW                   SETC  '&ZW.10000'                                 00242500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00242600
                      AGO   .ZI11C                                      00242700
.*                                                                      00242800
.ZI11A                ANOP  ,                                           00242900
&ZW                   SETC  '&ZW.00000'                                 00243000
.ZI11C                ANOP  ,                                           00243100
.*-------------------------------------------------------------------   00243200
.***AI.L11 XREQUEST_TYPE BL1                                            00243300
                      AIF   ('&ZCLNG' NE 'YES').ZI11E  ALL ZERO BITS    00243400
&ZOPN                 SETA  &ZOPN+1                                     00243500
&ZOPL(&ZOPN)          SETC  ' '                                         00243600
&ZOPO(&ZOPN)          SETC  'OI'                                        00243700
&ZOPV(&ZOPN)          SETC  '16(1),B''&ZW'''                            00243800
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00243900
.ZI11E                ANOP  ,                                           00244000
.*-------------------------------------------------------------------   00244100
.***AI.L05 XMISC_FLAGS BL1                                              00244200
&ZW                   SETC  ''                                          00244300
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00244400
.*-------------------------------------------------------------------   00244500
.***AI.L08 XMISC_FLAGS "YES"                                            00244600
.***      BL1'1XXXXXXX'                                                 00244700
         AIF   ('&XLOADTOGLOBAL' NE 'YES').ZI14A                        00244800
&ZW                   SETC  '&ZW.10000000'                              00244900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00245000
                      AGO   .ZI14C                                      00245100
.*                                                                      00245200
.ZI14A                ANOP  ,                                           00245300
&ZW                   SETC  '&ZW.00000000'                              00245400
.ZI14C                ANOP  ,                                           00245500
.*-------------------------------------------------------------------   00245600
.***AI.L11 XMISC_FLAGS BL1                                              00245700
                      AIF   ('&ZCLNG' NE 'YES').ZI14E  ALL ZERO BITS    00245800
&ZOPN                 SETA  &ZOPN+1                                     00245900
&ZOPL(&ZOPN)          SETC  ' '                                         00246000
&ZOPO(&ZOPN)          SETC  'OI'                                        00246100
&ZOPV(&ZOPN)          SETC  '18(1),B''&ZW'''                            00246200
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00246300
.ZI14E                ANOP  ,                                           00246400
.*-------------------------------------------------------------------   00246500
.***AI.L19  XSSVTDATA A                                                 00246600
                      AIF   ('&ZXSSVTDATA' EQ '').ZI16H  NOT USED       00246700
&ZCLNG                SETC  '&XSSVTDATA'                                00246800
&ZCGPR                SETC  '14'                                        00246900
.*                                                                      00247000
&ZOPN                 SETA  &ZOPN+1                                     00247100
&ZOPL(&ZOPN)          SETC  ' '                                         00247200
&ZOPO(&ZOPN)          SETC  'LA'                                        00247300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00247400
&ZOPD(&ZOPN)          SETC  '++ &ZXSSVTDATA XSSVTDATA A'                00247500
.*                                                                      00247600
&ZOPN                 SETA  &ZOPN+1                                     00247700
&ZOPL(&ZOPN)          SETC  ' '                                         00247800
&ZOPO(&ZOPN)          SETC  'ST'                                        00247900
&ZOPV(&ZOPN)          SETC  '&ZCGPR,20(,1)'                             00248000
&ZOPD(&ZOPN)          SETC  '++ &ZXSSVTDATA XSSVTDATA A'                00248100
.*                                                                      00248200
.ZI16H                ANOP  ,                                           00248300
.*-------------------------------------------------------------------   00248400
.***AI.L25  XMAXENTRIES XL2                                             00248500
                      AIF   ('&ZXMAXENTRIES' EQ '').ZI17E  NOT USED     00248600
                      AIF   ('&ZXMAXENTRIES' EQ 'OUTPUT').ZI17E         00248700
&ZCGPR                SETC  '&XMAXENTRIES'                              00248800
.*                                                                      00248900
                      AIF   ('&XMAXENTRIES'(1,1) NE '(').ZI17B          00249000
&ZCGPR   SETC  '0('.'&XMAXENTRIES'(2,K'&XMAXENTRIES-2).')'              00249100
                      AGO   .ZI17D                                      00249200
.ZI17B                ANOP  ,                                           00249300
.*                                                                      00249400
&ZC                   SETC  '&XMAXENTRIES'(1,1)                         00249500
                      AIF   (T'&ZC NE 'N').ZI17D                        00249600
&ZC                   SETC  '&XMAXENTRIES'                              00249700
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI17D               00249800
&ZCGPR                SETC  '=FL2''&XMAXENTRIES'''                      00249900
.*                                                                      00250000
.ZI17D                ANOP  ,                                           00250100
.*                                                                      00250200
&ZOPN                 SETA  &ZOPN+1                                     00250300
&ZOPL(&ZOPN)          SETC  ' '                                         00250400
&ZOPO(&ZOPN)          SETC  'MVC'                                       00250500
&ZOPV(&ZOPN)          SETC  '24(2,1),&ZCGPR'                            00250600
&ZOPD(&ZOPN)          SETC  '++ &ZXMAXENTRIES XMAXENTRIES XL2'          00250700
.*                                                                      00250800
.ZI17E                ANOP  ,                                           00250900
.*-------------------------------------------------------------------   00251000
.***AI.L25  XSUBPOOL XL1                                                00251100
                      AIF   ('&ZXSUBPOOL' EQ '').ZI18E  NOT USED        00251200
                      AIF   ('&ZXSUBPOOL' EQ 'OUTPUT').ZI18E            00251300
&ZCGPR                SETC  '&XSUBPOOL'                                 00251400
.*                                                                      00251500
                      AIF   ('&XSUBPOOL'(1,1) NE '(').ZI18B             00251600
&ZCGPR   SETC  '0('.'&XSUBPOOL'(2,K'&XSUBPOOL-2).')'                    00251700
                      AGO   .ZI18D                                      00251800
.ZI18B                ANOP  ,                                           00251900
.*                                                                      00252000
&ZC                   SETC  '&XSUBPOOL'(1,1)                            00252100
                      AIF   (T'&ZC NE 'N').ZI18D                        00252200
&ZC                   SETC  '&XSUBPOOL'                                 00252300
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI18D               00252400
&ZCGPR                SETC  '=AL1(&XSUBPOOL)'                           00252500
.*                                                                      00252600
.ZI18D                ANOP  ,                                           00252700
.*                                                                      00252800
&ZOPN                 SETA  &ZOPN+1                                     00252900
&ZOPL(&ZOPN)          SETC  ' '                                         00253000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00253100
&ZOPV(&ZOPN)          SETC  '26(1,1),&ZCGPR'                            00253200
&ZOPD(&ZOPN)          SETC  '++ &ZXSUBPOOL XSUBPOOL XL1'                00253300
.*                                                                      00253400
.ZI18E                ANOP  ,                                           00253500
.*-------------------------------------------------------------------   00253600
.***AI.L18  XINTOKEN XL4                                                00253700
                      AIF   ('&XINTOKEN' NE 'NULL').ZI20                00253800
&ZXINTOKEN            SETC  ''             RESET INPUT/OUTPUT           00253900
.ZI20                 ANOP  ,                                           00254000
.*-------------------------------------------------------------------   00254100
.***AI.L25  XINTOKEN XL4                                                00254200
                      AIF   ('&ZXINTOKEN' EQ '').ZI20E  NOT USED        00254300
                      AIF   ('&ZXINTOKEN' EQ 'OUTPUT').ZI20E            00254400
&ZCGPR                SETC  '&XINTOKEN'                                 00254500
.*                                                                      00254600
                      AIF   ('&XINTOKEN'(1,1) NE '(').ZI20B             00254700
&ZCGPR   SETC  '0('.'&XINTOKEN'(2,K'&XINTOKEN-2).')'                    00254800
                      AGO   .ZI20D                                      00254900
.ZI20B                ANOP  ,                                           00255000
.*                                                                      00255100
&ZC                   SETC  '&XINTOKEN'(1,1)                            00255200
                      AIF   (T'&ZC NE 'N').ZI20D                        00255300
&ZC                   SETC  '&XINTOKEN'                                 00255400
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI20D               00255500
&ZCGPR                SETC  '=BL4''&XINTOKEN'''                         00255600
.*                                                                      00255700
.ZI20D                ANOP  ,                                           00255800
.*                                                                      00255900
&ZOPN                 SETA  &ZOPN+1                                     00256000
&ZOPL(&ZOPN)          SETC  ' '                                         00256100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00256200
&ZOPV(&ZOPN)          SETC  '28(4,1),&ZCGPR'                            00256300
&ZOPD(&ZOPN)          SETC  '++ &ZXINTOKEN XINTOKEN XL4'                00256400
.*                                                                      00256500
.ZI20E                ANOP  ,                                           00256600
.*-------------------------------------------------------------------   00256700
.***AI.C01 RESTORE ADDR OF PARM LIST PTR                                00256800
.*                                                                      00256900
&ZOPN                 SETA  &ZOPN+1                                     00257000
&ZOPL(&ZOPN)          SETC  ' '                                         00257100
&ZOPO(&ZOPN)          SETC  'ST'                                        00257200
&ZOPV(&ZOPN)          SETC  '1,72(,1)'                                  00257300
&ZOPD(&ZOPN)          SETC  '++ STORE ADDR OF PARM LIST'                00257400
.*                                                                      00257500
&ZOPN                 SETA  &ZOPN+1                                     00257600
&ZOPL(&ZOPN)          SETC  ' '                                         00257700
&ZOPO(&ZOPN)          SETC  'LA'                                        00257800
&ZOPV(&ZOPN)          SETC  '1,72(,1)'                                  00257900
&ZOPD(&ZOPN)          SETC  '++ LOAD ADDR OF PARM LIST PTR INTO R1'     00258000
.*-------------------------------------------------------------------   00258100
&ZOPN1                SETA &ZOPN                                        00258200
.*******************************************************************    00258300
.***  PROCESS IEFSSVT OUTPUT PARAMETERS                                 00258400
.*******************************************************************    00258500
                      ACTR  10000                                       00258600
.OUTKEYSP             ANOP  ,                                           00258700
.*                                                                      00258800
&ZOPN                 SETA  &ZOPN+1                                     00258900
&ZOPL(&ZOPN)          SETC  ' '                                         00259000
&ZOPO(&ZOPN)          SETC  'L'                                         00259100
&ZOPV(&ZOPN)          SETC  '1,0(,1)'                                   00259200
&ZOPD(&ZOPN)          SETC  '++ RESTORE ADDR OF PARM LIST'              00259300
.*                                                                      00259400
.NOOUTKEY             ANOP  ,                                           00259500
.*------------------------------------------------------------------    00259600
.***AO.LVER01                                                           00259700
                      AIF  (&XPLISTVER LT 1).ZO23Z  PLVER               00259800
.*------------------------------------------------------------------    00259900
.***AO.L02 XOUTTOKEN XL4                                                00260000
         AIF   ('&ZXOUTTOKEN' EQ 'OUTPUT').ZO23A  OUTPUT                00260100
         AIF   ('&ZXOUTTOKEN' NE 'INOUT').ZO23C  INOUT                  00260200
.ZO23A    AIF   ('&XOUTTOKEN'(1,1) NE '(').ZO23B  ADDR IN GPR           00260300
&ZCGPR   SETC  '&XOUTTOKEN'(2,K'&XOUTTOKEN-2)                           00260400
&ZOPN                 SETA  &ZOPN+1                                     00260500
&ZOPL(&ZOPN)          SETC  ' '                                         00260600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00260700
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),56(1)'                         00260800
&ZOPD(&ZOPN)          SETC  '++ XOUTTOKEN XL4'                          00260900
                      AGO   .ZO23C                                      00261000
.*                                                                      00261100
.ZO23B                ANOP  ,                                           00261200
&ZAWRK   SETA  K'&XOUTTOKEN                                             00261300
         AIF   ('&XOUTTOKEN'(&ZAWRK,1) NE ')').ZO23G                    00261400
&ZN      SETA  2                                                        00261500
.ZO23H    ANOP                                                          00261600
         AIF   (&ZN GE &ZAWRK).ZO23G                                    00261700
         AIF   ('&XOUTTOKEN'(&ZN,1) NE '(').ZO23I                       00261800
&ZC      SETC  '&XOUTTOKEN'(1,&ZN).'4'.','                              00261900
&ZC      SETC  '&ZC'.'&XOUTTOKEN'(&ZN+1,&ZAWRK-&ZN).',56(1)'            00262000
         AGO   .ZO23J                                                   00262100
.ZO23I    ANOP                                                          00262200
&ZN      SETA  &ZN+1                                                    00262300
         AGO   .ZO23H                                                   00262400
.ZO23G    ANOP                                                          00262500
&ZC      SETC  '&XOUTTOKEN.(4),56(1)'                                   00262600
.ZO23J    ANOP                                                          00262700
&ZOPN                 SETA  &ZOPN+1                                     00262800
&ZOPL(&ZOPN)          SETC  ' '                                         00262900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00263000
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00263100
&ZOPD(&ZOPN)          SETC  '++ XOUTTOKEN XL4'                          00263200
.ZO23C                ANOP  ,                                           00263300
.*------------------------------------------------------------------    00263400
.***AO.LVER02                                                           00263500
.ZO23Z                ANOP  ,                                           00263600
.*------------------------------------------------------------------    00263700
.***AO.LVER01                                                           00263800
                      AIF  (&XPLISTVER LT 1).ZO24Z  PLVER               00263900
.*------------------------------------------------------------------    00264000
.***AO.L02 XERRFUNCT CL8                                                00264100
         AIF   ('&ZXERRFUNCT' EQ 'OUTPUT').ZO24A  OUTPUT                00264200
         AIF   ('&ZXERRFUNCT' NE 'INOUT').ZO24C  INOUT                  00264300
.ZO24A    AIF   ('&XERRFUNCT'(1,1) NE '(').ZO24B  ADDR IN GPR           00264400
&ZCGPR   SETC  '&XERRFUNCT'(2,K'&XERRFUNCT-2)                           00264500
&ZOPN                 SETA  &ZOPN+1                                     00264600
&ZOPL(&ZOPN)          SETC  ' '                                         00264700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00264800
&ZOPV(&ZOPN)          SETC  '0(8,&ZCGPR),60(1)'                         00264900
&ZOPD(&ZOPN)          SETC  '++ XERRFUNCT CL8'                          00265000
                      AGO   .ZO24C                                      00265100
.*                                                                      00265200
.ZO24B                ANOP  ,                                           00265300
&ZAWRK   SETA  K'&XERRFUNCT                                             00265400
         AIF   ('&XERRFUNCT'(&ZAWRK,1) NE ')').ZO24G                    00265500
&ZN      SETA  2                                                        00265600
.ZO24H    ANOP                                                          00265700
         AIF   (&ZN GE &ZAWRK).ZO24G                                    00265800
         AIF   ('&XERRFUNCT'(&ZN,1) NE '(').ZO24I                       00265900
&ZC      SETC  '&XERRFUNCT'(1,&ZN).'8'.','                              00266000
&ZC      SETC  '&ZC'.'&XERRFUNCT'(&ZN+1,&ZAWRK-&ZN).',60(1)'            00266100
         AGO   .ZO24J                                                   00266200
.ZO24I    ANOP                                                          00266300
&ZN      SETA  &ZN+1                                                    00266400
         AGO   .ZO24H                                                   00266500
.ZO24G    ANOP                                                          00266600
&ZC      SETC  '&XERRFUNCT.(8),60(1)'                                   00266700
.ZO24J    ANOP                                                          00266800
&ZOPN                 SETA  &ZOPN+1                                     00266900
&ZOPL(&ZOPN)          SETC  ' '                                         00267000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00267100
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00267200
&ZOPD(&ZOPN)          SETC  '++ XERRFUNCT CL8'                          00267300
.ZO24C                ANOP  ,                                           00267400
.*------------------------------------------------------------------    00267500
.***AO.LVER02                                                           00267600
.ZO24Z                ANOP  ,                                           00267700
.*******************************************************************    00267800
.***AO.X02  RETURN CODE PROCESSING                                      00267900
.*******************************************************************    00268000
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00268100
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00268200
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00268300
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00268400
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00268500
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00268600
&ZOPN                 SETA  &ZOPN+1                                     00268700
&ZOPL(&ZOPN)          SETC  ' '                                         00268800
&ZOPO(&ZOPN)          SETC  'ST'                                        00268900
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00269000
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00269100
                      AGO   .ZMRETX                                     00269200
.*                                                                      00269300
.ZMRET2               ANOP  ,                                           00269400
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00269500
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00269600
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00269700
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00269800
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00269900
&ZOPN                 SETA  &ZOPN+1                                     00270000
&ZOPL(&ZOPN)          SETC  ' '                                         00270100
&ZOPO(&ZOPN)          SETC  'LR'                                        00270200
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00270300
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00270400
.ZMRETX               ANOP  ,                                           00270500
.*******************************************************************    00270600
.***AO.X03  REASON CODE PROCESSING                                      00270700
.*******************************************************************    00270800
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    00270900
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            00271000
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              00271100
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             00271200
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              00271300
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             00271400
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                00271500
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 00271600
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                00271700
&ZOPN                 SETA  &ZOPN+1                                     00271800
&ZOPL(&ZOPN)          SETC  ' '                                         00271900
&ZOPO(&ZOPN)          SETC  'ST'                                        00272000
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               00272100
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00272200
                      AGO   .ZMRSNX                                     00272300
.*                                                                      00272400
.ZMRSN2               ANOP  ,                                           00272500
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                00272600
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 00272700
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                00272800
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 00272900
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                00273000
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   00273100
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    00273200
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   00273300
&ZOPN                 SETA  &ZOPN+1                                     00273400
&ZOPL(&ZOPN)          SETC  ' '                                         00273500
&ZOPO(&ZOPN)          SETC  'LR'                                        00273600
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  00273700
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00273800
.ZMRSNX               ANOP  ,                                           00273900
.*******************************************************************    00274000
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00274100
.*******************************************************************    00274200
.ZMFLX                ANOP  ,              MF=L PROCESSING              00274300
.*******************************************************************    00274400
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00274500
.*******************************************************************    00274600
                      ACTR  10000                                       00274700
.*                                                                      00274800
                      LCLA  &ZLC           COLUMN POSITION              00274900
                      LCLA  &ZOPX          LIST TABLE INDEX             00275000
                      LCLC  &ZLL           LABEL                        00275100
                      LCLC  &ZLOP          OPERATION                    00275200
                      LCLC  &ZLV           VALUE                        00275300
                      LCLC  &ZLD           DESCRIPTION                  00275400
.*                                                                      00275500
&ZOPX                 SETA  1                                           00275600
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00275700
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00275800
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00275900
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00276000
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00276100
                      AIF   (K'&ZLD LE 0).ZL5                           00276200
&ZLC                  SETA  35             COMMENT COLUMN               00276300
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00276400
&ZLC                  SETA  33             COMMMENT COLUMN              00276500
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00276600
&ZLV                  SETC  '&ZLV'.' '                                  00276700
                      AGO   .ZL3                                        00276800
.*                                                                      00276900
.ZL4                  ANOP  ,                                           00277000
&ZLV                  SETC  '&ZLV'.' '                                  00277100
.ZL5                  ANOP  ,                                           00277200
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00277300
.*                                                                      00277400
&ZLL     &ZLOP &ZLV                                                     00277500
.*                                                                      00277600
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00277700
                      AGO   .ZL2           CONTINUE LOOPING             00277800
.*                                                                      00277900
.ZLX                  ANOP  ,                                           00278000
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00278100
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00278200
.********************************************************************** 00278300
.* Invoke IEFSSVT service routine                                       00278400
.********************************************************************** 00278500
         LA    15,16                                                    00278600
         L     15,0(15)                CVT address                      00278700
         USING CVT,15                                                   00278800
         TM    CVTDCB,CVTOSEXT         Test if CVT release level       +00278900
                                         available                 @P2A 00279000
         BNO   #NSSI&SYSNDX            Service not available       @P2A 00279100
         TM    CVTOSLV1,CVTH5520       Test if 5.2.0 or above      @P2A 00279200
         BNO   #NSSI&SYSNDX            Service not available       @P2A 00279300
         L     15,CVTJESCT             JESCT address                    00279400
         USING JESCT,15                                                 00279500
         L     15,JESCTEXT             JESCT pageable extension         00279600
         USING JESPEXT,15                                               00279700
         L     15,JESVTPC              IEFSSVT PC number                00279800
         DROP  15                                                       00279900
         LTR   15,15                   Test whether service available   00280000
         BZ    #NSSI&SYSNDX                                             00280100
         PC    0(15)                   Process service request          00280200
         B     #SSI&SYSNDX                                              00280300
#NSSI&SYSNDX  DS  0H                                                    00280400
         LA    15,IEFSSVT_UNAVAILABLE  Indicate service not available   00280500
#SSI&SYSNDX   DS  0H                                                    00280600
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00280700
.ZLINKX               ANOP  ,                                           00280800
.*******************************************************************    00280900
.***AP.X01  FORMAT GENERATED CODE                                       00281000
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00281100
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00281200
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00281300
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00281400
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00281500
                      AIF   (K'&ZLD LE 0).ZL51                          00281600
&ZLC                  SETA  35             COMMENT COLUMN               00281700
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00281800
&ZLC                  SETA  33             COMMENT COLUMN               00281900
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00282000
&ZLV                  SETC  '&ZLV'.' '                                  00282100
                      AGO   .ZL31                                       00282200
.*                                                                      00282300
.ZL41                 ANOP  ,                                           00282400
&ZLV                  SETC  '&ZLV'.' '                                  00282500
.ZL51                 ANOP  ,                                           00282600
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00282700
.*                                                                      00282800
&ZLL     &ZLOP &ZLV                                                     00282900
.*                                                                      00283000
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00283100
                      AGO   .ZL21          CONTINUE LOOPING             00283200
.*                                                                      00283300
.ZLX1                 ANOP  ,                                           00283400
.*******************************************************************    00283500
.***AP.X02  END OF IEFSSVT MACRO                                        00283600
&ZIEFSSVT             SETC  'YES'          SET IEFSSVT USED             00283700
         POP   PRINT                                                    00283800
*                                            IEFSSVT-1                  00283900
         SPACE 1                                                        00284000
.ZLX2                 ANOP  ,                                           00284100
         MEND                                                           00284200
**********************************************************************/ 00284300
*/**** START OF SPECIFICATIONS **************************************** 00284400
*                                                                     * 00284500
*                                                                     * 00284600
*01* MACRO NAME:  IEFSSVT                               -04/14/94-<1> * 00284700
*                                                                     * 00284800
*                                                                     * 00284900
*01* DESCRIPTIVE NAME:  Subsystem Vector Table Service Macro          * 00285000
*                                                                     * 00285100
*01* PROPRIETARY STATEMENT:                                           * 00285200
*                                                                     * 00285300
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00285400
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00285500
*     5655-068 (C) COPYRIGHT IBM CORP. 1994                           * 00285600
*     SEE COPYRIGHT INSTRUCTIONS                                      * 00285700
*                                                                     * 00285800
* STATUS= HBB5520                                                     * 00285900
*                                                                     * 00286000
*                                                                     * 00286100
*                                                                     * 00286200
*01* FUNCTION:                                                        * 00286300
*       See the IEFSSVT macro prologue for details.                   * 00286400
*                                                                     * 00286500
*01* INPUT:                                                           * 00286600
*                                                                     * 00286700
*            ?IEFSSVT    [PLISTVER                                    * 00286800
*                                  (xplistver|IMPLIED_VERSION)]     * 00286900
*                         SUBNAME(xsubname)                           * 00287000
*                        REQUEST(CREATE)                             * 00287100
*                       |     SSVTDATA(xssvtdata)                     * 00287200
*                       |     OUTTOKEN(xouttoken)                     * 00287300
*                       |    [SUBPOOL(xsubpool|241)]                * 00287400
*                       |     MAXENTRIES(xmaxentries)                 * 00287500
*                       |    [LOADTOGLOBAL(NO|YES)]                 * 00287600
*                       |    [ERRFUNCT(xerrfunct)]                    * 00287700
*                        REQUEST(DISABLE)                            * 00287800
*                       |     SSVTDATA(xssvtdata)                     * 00287900
*                       |    [INTOKEN(xintoken|NULL)]               * 00288000
*                        REQUEST(ENABLE)                             * 00288100
*                       |     SSVTDATA(xssvtdata)                     * 00288200
*                       |    [INTOKEN(xintoken|NULL)]               * 00288300
*                       |    [LOADTOGLOBAL(NO|YES)]                 * 00288400
*                       |    [ERRFUNCT(xerrfunct)]                    * 00288500
*                        REQUEST(EXCHANGE)                           * 00288600
*                             SSVTDATA(xssvtdata)                     * 00288700
*                            [INTOKEN(xintoken|NULL)]               * 00288800
*                            [LOADTOGLOBAL(NO|YES)]                 * 00288900
*                            [ERRFUNCT(xerrfunct)]                    * 00289000
*                        [RETCODE(xretcode)]                          * 00289100
*                        [RSNCODE(xrsncode)]                          * 00289200
*                        [COM(xcom|NULL)]                           * 00289300
*                       [MF(S)]                                      * 00289400
*                       [MF(L,xmfctrl,xmfattr|BDY(DWORD))]         * 00289500
*                       [MF(E,xmfctrl,COMPLETE)]                   * 00289600
*                                                                     * 00289700
****** END OF SPECIFICATIONS *****************************************/ 00289800
*/*PB.ECHO02 ECHO MACRO COMMENT--------------------------------------*/ 00289900
*  IF COM^=''                                                           00290000
*    THEN                                                               00290100
*      DO;                                                              00290200
*        IF INDEX(COM(1),'''')=1                                        00290300
*          THEN                                                         00290400
*            ANS('/* '||COM(1,2:LENGTH                                  00290500
*                     (COM(1))-1)||'*/')                                00290600
*            NORESCAN COL(MACLMAR+5);  /* COMMENT ECHO */               00290700
*          ELSE                                                         00290800
*            ANS('/* '||COM(1)||'*/')                                   00290900
*            NORESCAN COL(MACLMAR+5);  /* COMMENT ECHO */               00291000
*        ANS('@SPACE;')                                                 00291100
*            NORESCAN COL(MACLMAR);  /* COMMENT ECHO */                 00291200
*      END;                                                             00291300
*/*PB.ECHO03 START OF MACRO INVOCATION ECHO--------------------------*/ 00291400
*  ANS('/* ? IEFSSVT '||MACLIST||' ')                                   00291500
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00291600
*                                                                       00291700
*  DCL ZELO  FIXED;                                                     00291800
*  DCL ZECOL FIXED;                                                     00291900
*                                                                       00292000
*  ZELO=1;     /* STARTING COLUMN */                                    00292100
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00292200
*    IF INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),'COM(') =1 |                00292300
*       INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),' COM(')=1 |                00292400
*       INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),'COM(') =1 |                00292500
*       INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),' COM(')=1                  00292600
*      THEN                                                             00292700
*        DO;   /* CLOSING PARENTHESIS */                                00292800
*          ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');              00292900
*          IF ZECOL>0                                                   00293000
*            THEN                                                       00293100
*              ZELO=ZELO+ZECOL;    /* SKIP TEXT */                      00293200
*            ELSE                                                       00293300
*              ZELO=LENGTH(MACKEYS)+1;  /* NO CLOSING ")" */            00293400
*        END;                                                           00293500
*      ELSE                                                             00293600
*        DO;                                                            00293700
*          ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');              00293800
*          IF ZECOL>0                                                   00293900
*            THEN                                                       00294000
*              DO;                 /* PARENTHESIS FOUND */              00294100
*                ANS(MACKEYS(ZELO:ZELO+ZECOL-1)||' ')                   00294200
*                   NORESCAN COL(MACLMAR+5);                            00294300
*                ZELO=ZELO+ZECOL;  /* NEXT PORTION */                   00294400
*              END;                                                     00294500
*            ELSE                                                       00294600
*              DO;                 /* REMAINING KEYS */                 00294700
*                ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                     00294800
*                   NORESCAN COL(MACLMAR+5);                            00294900
*                ZELO=LENGTH(MACKEYS)+1;                                00295000
*              END;                                                     00295100
*        END;                                                           00295200
*  END;                                                                 00295300
*/*PB.ECHO05 END OF MACRO INVOCATION ECHO----------------------------*/ 00295400
*  ANS(' -04/14/94-1- */')                                              00295500
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00295600
*/********************************************************************/ 00295700
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00295800
*/********************************************************************/ 00295900
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00296000
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00296100
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00296200
*                                                                       00296300
*  DCL   ZIEFSSVT CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */  00296400
*  DEACT ZIEFSSVT;                                                      00296500
*                                                                       00296600
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00296700
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00296800
*                                                                       00296900
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00297000
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00297100
*                                                                       00297200
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00297300
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00297400
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00297500
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00297600
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00297700
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00297800
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00297900
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00298000
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00298100
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00298200
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00298300
*                                                                       00298400
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00298500
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00298600
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00298700
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00298800
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00298900
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00299000
*/*******************************************************************/  00299100
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00299200
*/*******************************************************************/  00299300
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00299400
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00299500
*  DCL XSUBNAME;  DEACT XSUBNAME;  /***PV.XVAR02 INPUT NAME */          00299600
*  DCL ZXSUBNAME; DEACT ZXSUBNAME;  /***INPUT/OUTPUT CONTROL */         00299700
*  DCL XREQUEST;  DEACT XREQUEST;  /***PV.XVAR02 INPUT VALUE */         00299800
*  DCL ZXREQUEST; DEACT ZXREQUEST;  /***INPUT/OUTPUT CONTROL */         00299900
*  DCL XSSVTDATA;  DEACT XSSVTDATA;  /***PV.XVAR02 INPUT NAME */        00300000
*  DCL ZXSSVTDATA; DEACT ZXSSVTDATA;  /***INPUT/OUTPUT CONTROL */       00300100
*  DCL XOUTTOKEN;  DEACT XOUTTOKEN;  /***PV.XVAR02 OUTPUT NAME */       00300200
*  DCL ZXOUTTOKEN; DEACT ZXOUTTOKEN;  /***INPUT/OUTPUT CONTROL */       00300300
*  DCL XSUBPOOL;  DEACT XSUBPOOL;  /***PV.XVAR02 INPUT NAME */          00300400
*  DCL ZXSUBPOOL; DEACT ZXSUBPOOL;  /***INPUT/OUTPUT CONTROL */         00300500
*  DCL   XMAXENTRIES;              /***PV.XVAR03 INPUT NAME */          00300600
*  DEACT XMAXENTRIES;              /***PV.XVAR03 INPUT NAME */          00300700
*  DCL   ZXMAXENTRIES;             /***INPUT/OUTPUT CONTROL */          00300800
*  DEACT ZXMAXENTRIES;             /***INPUT/OUTPUT CONTROL */          00300900
*  DCL   XLOADTOGLOBAL;            /***PV.XVAR03 INPUT VALUE */         00301000
*  DEACT XLOADTOGLOBAL;            /***PV.XVAR03 INPUT VALUE */         00301100
*  DCL   ZXLOADTOGLOBAL;           /***INPUT/OUTPUT CONTROL */          00301200
*  DEACT ZXLOADTOGLOBAL;           /***INPUT/OUTPUT CONTROL */          00301300
*  DCL XERRFUNCT;  DEACT XERRFUNCT;  /***PV.XVAR02 OUTPUT NAME */       00301400
*  DCL ZXERRFUNCT; DEACT ZXERRFUNCT;  /***INPUT/OUTPUT CONTROL */       00301500
*  DCL XINTOKEN;  DEACT XINTOKEN;  /***PV.XVAR02 INPUT NAME */          00301600
*  DCL ZXINTOKEN; DEACT ZXINTOKEN;  /***INPUT/OUTPUT CONTROL */         00301700
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00301800
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00301900
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         00302000
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         00302100
*  DCL XCOM;  DEACT XCOM;          /***PV.XVAR02 INPUT VALUE */         00302200
*  DCL ZXCOM; DEACT ZXCOM;         /***INPUT/OUTPUT CONTROL */          00302300
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00302400
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00302500
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00302600
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00302700
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00302800
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00302900
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00303000
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00303100
*/********************************************************************/ 00303200
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00303300
*/********************************************************************/ 00303400
*  IF PLISTVER(1) = 'MAX' THEN                                          00303500
*    XPLISTVER=1;                                                       00303600
*  ELSE                                                                 00303700
*    XPLISTVER=1;                                                       00303800
*  IF PLISTVER^=''                                                      00303900
*     & PLISTVER(1)^='IMPLIED_VERSION'                                  00304000
*     & PLISTVER(1)^='MAX'                                              00304100
*    THEN                                                               00304200
*      DO;                                                              00304300
*        IF FIXED(PLISTVER(1))>=XPLISTVER                               00304400
*          THEN                                                         00304500
*              XPLISTVER=FIXED(PLISTVER(1));                            00304600
*          ELSE                                                         00304700
*            DO;                                                        00304800
*              ZMS=' 8, PLISTVER='||         /**KVALP* MSG*/            00304900
*                    PLISTVER(1)||                                      00305000
*                  ', BUT PLISTVER OF '||                               00305100
*                    CHAR(XPLISTVER)||                                  00305200
*                  ' IS REQUIRED.';                                     00305300
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00305400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00305500
*              ZMACRET=8;                    /* MACRO ERROR */          00305600
*            END;                                                       00305700
*                                                                       00305800
*        IF PLISTVER='PLISTVER' | PLISTVER='()'  /*CHCK ENTRY*/         00305900
*          THEN                                                         00306000
*            DO;                                                        00306100
*              ZMS=' 8, THE "PLISTVER" KEY'|| /**KOPTP* MSG*/           00306200
*                  ' MUST CONTAIN ONE'||                                00306300
*                  ' (OR MORE) ARGUMENT(S).';                           00306400
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00306500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00306600
*              ZMACRET=8;                    /* MACRO ERROR */          00306700
*            END;                                                       00306800
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00306900
*          THEN                                                         00307000
*            DO;                                                        00307100
*              ZMS=' 8, "PLISTVER'||         /**KPOSP* MSG*/            00307200
*                  PLISTVER||                                           00307300
*                  '" "PLISTVER"'||                                     00307400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00307500
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00307600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00307700
*              ZMACRET=8;                    /* MACRO ERROR */          00307800
*            END;                                                       00307900
*                                                                       00308000
*        ZCVAL='';                           /* ERROR FLAG */           00308100
*        ZC=PLISTVER(1);                                                00308200
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00308300
*          IF ZC(ZL:ZL)<'0' |                /* MUST BE NUMERIC */      00308400
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00308500
*            THEN                                                       00308600
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00308700
*        END;                                                           00308800
*        IF ZCVAL=''                                                    00308900
*          THEN                                                         00309000
*            DO;                             /* CHECK RANGE LIMITS */   00309100
*              IF XPLISTVER<1 |              /* LOW LIMIT */            00309200
*                 XPLISTVER>1                /* HIGH LIMIT */           00309300
*                THEN                                                   00309400
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00309500
*            END;                                                       00309600
*        IF ZCVAL^=''                                                   00309700
*          THEN                                                         00309800
*            DO;                             /* RANGE ERROR */          00309900
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00310000
*              ZMS=' 8, "PLISTVER '||        /**KRNGP* MSG*/            00310100
*                  PLISTVER||                                           00310200
*                  '" THE RANGE IS "1-1"'||                             00310300
*                  ' FOR ARGUMENT 1.';                                  00310400
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00310500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00310600
*              ZMACRET=8;                    /* MACRO ERROR */          00310700
*            END;                                                       00310800
*      END;                                                             00310900
*                                                                       00311000
*/********************************************************************/ 00311100
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00311200
*/********************************************************************/ 00311300
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00311400
*  XMF='';                                                              00311500
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00311600
*  IF MF(1)='S'                              /* CHECK FOR KEYWORD */    00311700
*    THEN                                                               00311800
*      DO;                                                              00311900
*        XMF='S';                            /* SET XVARIABLE */        00312000
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    00312100
*          THEN                                                         00312200
*            DO;                                                        00312300
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00312400
*                  MF||                                                 00312500
*                  '" "MF"'||                                           00312600
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00312700
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00312800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00312900
*              ZMACRET=8;                    /* MACRO ERROR */          00313000
*            END;                                                       00313100
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00313200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00313300
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00313400
*  IF MF(1)='L'                              /* CHECK FOR KEYWORD */    00313500
*    THEN                                                               00313600
*      DO;                                                              00313700
*        XMF='L';                            /* SET XVARIABLE */        00313800
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00313900
*          THEN                                                         00314000
*            DO;                                                        00314100
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00314200
*                  MF||                                                 00314300
*                  '" "MF"'||                                           00314400
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00314500
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00314600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00314700
*              ZMACRET=8;                    /* MACRO ERROR */          00314800
*            END;                                                       00314900
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00315000
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00315100
*        IF PLISTVER ^= ''                                              00315200
*          THEN                                                         00315300
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00315400
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN |                            00315500
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00315600
*          THEN                                                         00315700
*            DO;                                                        00315800
*              ZMS=' 8, THE "L" FORM OF "MF"'|| /**MFLP* MSG*/          00315900
*                  ' CAN ONLY HAVE'||                                   00316000
*                  ' THE "PLISTVER" KEY'||                              00316100
*                  ' SPECIFIED ON THE INVOCATION.';                     00316200
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00316300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00316400
*              ZMACRET=8;                    /* MACRO ERROR */          00316500
*            END;                                                       00316600
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00316700
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00316800
*  IF MF(2)=''                               /* CHECK FOR NULL */       00316900
*   THEN                                                                00317000
*    DO;                                     /* KEY IS REQUIRED */      00317100
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00317200
*        ZMS=' 8, WHEN "L" IS SPECIFIED'||                              00317300
*            ' FOR THE "MF" KEY, POSITIONAL'||                          00317400
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00317500
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00317600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00317700
*        ZMACRET=8;                          /* MACRO ERROR */          00317800
*    END;                                                               00317900
*  ELSE                                                                 00318000
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00318100
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00318200
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00318300
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00318400
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00318500
*    THEN                                                               00318600
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00318700
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00318800
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00318900
*     LENGTH(XMFATTR)>60                                                00319000
*    THEN                                                               00319100
*      DO;                                                              00319200
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00319300
*        ZMS=' 8, "MF'||                     /**KLNGP* MSG*/            00319400
*            MF||                                                       00319500
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'||                       00319600
*            ' LENGTH OF 60 CHARACTERS. ';                              00319700
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00319800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00319900
*        ZMACRET=8;                          /* MACRO ERROR */          00320000
*      END;                                                             00320100
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00320200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00320300
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00320400
*  IF MF(1)='E'                              /* CHECK FOR KEYWORD */    00320500
*    THEN                                                               00320600
*      DO;                                                              00320700
*        XMF='E';                            /* SET XVARIABLE */        00320800
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00320900
*          THEN                                                         00321000
*            DO;                                                        00321100
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00321200
*                  MF||                                                 00321300
*                  '" "MF"'||                                           00321400
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00321500
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00321600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00321700
*              ZMACRET=8;                    /* MACRO ERROR */          00321800
*            END;                                                       00321900
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00322000
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00322100
*  IF MF(2)=''                               /* CHECK FOR NULL */       00322200
*   THEN                                                                00322300
*    DO;                                     /* KEY IS REQUIRED */      00322400
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00322500
*        ZMS=' 8, WHEN "E" IS SPECIFIED'||                              00322600
*            ' FOR THE "MF" KEY, POSITIONAL'||                          00322700
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00322800
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00322900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00323000
*        ZMACRET=8;                          /* MACRO ERROR */          00323100
*    END;                                                               00323200
*  ELSE                                                                 00323300
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00323400
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00323500
*  XMFSCK='';                                /* RESET XVARIABLE */      00323600
*  IF MF(3) = 'COMPLETE'                                                00323700
*    THEN                                                               00323800
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00323900
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00324000
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00324100
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00324200
*    THEN                                                               00324300
*      DO;                                   /* KEYWORD NOT ENTERED */  00324400
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00324500
*        IF MF(3)^=''                                                   00324600
*          THEN                                                         00324700
*            DO;                                                        00324800
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00324900
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/            00325000
*                  MF||'"'||                                            00325100
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '||              00325200
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00325300
*                  ' "COMPLETE".';           /* VALID KEYWORD */        00325400
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00325500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00325600
*              ZMACRET=8;                    /* MACRO ERROR */          00325700
*            END;                                                       00325800
*      END;                                                             00325900
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00326000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00326100
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00326200
*  IF MF='MF'                                                           00326300
*    | MF='()'                               /*CHECK ENTRY*/            00326400
*     THEN                                                              00326500
*       DO;                                                             00326600
*              ZMS=' 8, THE "MF" KEY'||      /**KOPTP* MSG*/            00326700
*                  ' MUST CONTAIN ONE'||                                00326800
*                  ' (OR MORE) ARGUMENT(S).';                           00326900
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00327000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00327100
*              ZMACRET=8;                    /* MACRO ERROR */          00327200
*       END;                                                            00327300
*  ELSE                                                                 00327400
*    DO;                                                                00327500
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00327600
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00327700
*        THEN                                                           00327800
*          DO;                               /* KEYWORD NOT ENTERED */  00327900
*            XMF='S';                        /* SET DEFAULT */          00328000
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    00328100
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00328200
*              THEN                                                     00328300
*                DO;                                                    00328400
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00328500
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/            00328600
*                  MF||'"'||                                            00328700
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00328800
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00328900
*                  ' "S",'||                 /* VALID KEYWORD */        00329000
*                  ' "L",'||                 /* VALID KEYWORD */        00329100
*                  ' OR "E".';               /* VALID KEYWORD */        00329200
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00329300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00329400
*              ZMACRET=8;                    /* MACRO ERROR */          00329500
*                END;                                                   00329600
*          END;                                                         00329700
*    END;                                                               00329800
*/********************************************************************/ 00329900
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00330000
*/********************************************************************/ 00330100
*  IF PLISTVER=''                                                       00330200
*     | PLISTVER(1)='IMPLIED_VERSION'                                   00330300
*    THEN                                                               00330400
*      ZC='ON';                              /* DEFAULT FLAG ON */      00330500
*    ELSE                                                               00330600
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00330700
*/********************************************************************/ 00330800
*/***PD.P02 DEFAULT ECHO                                             */ 00330900
*/********************************************************************/ 00331000
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00331100
*  IF XMF^='L'                                                          00331200
*    THEN                                                               00331300
*      DO;                                   /* FULL SYNTAX CHECK */    00331400
*        ANS('/*DEFAULT(S): */')                                        00331500
*           NORESCAN COL(MACLMAR+5);                                    00331600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00331700
*  IF PLISTVER=''                                                       00331800
*    THEN                                                               00331900
*      ANS('/* PLISTVER('||                                             00332000
*          CHAR(XPLISTVER)||                                            00332100
*          ')*/')                                                       00332200
*          NORESCAN COL(MACLMAR+5);                                     00332300
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00332400
*  IF REQUEST(1)='CREATE' |                  /* CHECK FOR KEYWORD */    00332500
*     REQUEST(1)=''                          /* CHECK FOR NULL */       00332600
*    THEN                                                               00332700
*      DO;                                                              00332800
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00332900
*  XSUBPOOL='';                                                         00333000
*  IF SUBPOOL(1)=''                                                     00333100
*    THEN                                                               00333200
*      DO;                                                              00333300
*        XSUBPOOL='241';                     /* SET DEFAULT */          00333400
*        ZC='ON';                            /* DEFAULT FLAG ON */      00333500
*      END;                                                             00333600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00333700
*  IF XSUBPOOL^=''                                                      00333800
*    THEN                                                               00333900
*      ANS('/* SUBPOOL('||                                              00334000
*          XSUBPOOL||                                                   00334100
*          ')*/')                                                       00334200
*          NORESCAN COL(MACLMAR+5);                                     00334300
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00334400
*  XLOADTOGLOBAL='NO';                       /* RESET XVARIABLE */      00334500
*  IF LOADTOGLOBAL(1)=''                                                00334600
*    THEN                                                               00334700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00334800
*  IF LOADTOGLOBAL(1)='NO'                                              00334900
*    THEN                                                               00335000
*        XLOADTOGLOBAL='';                   /* SET XVARIABLE */        00335100
*  IF LOADTOGLOBAL(1)='YES'                                             00335200
*    THEN                                                               00335300
*        XLOADTOGLOBAL='';                   /* SET XVARIABLE */        00335400
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00335500
*  IF XLOADTOGLOBAL^=''                                                 00335600
*    THEN                                                               00335700
*      ANS('/* LOADTOGLOBAL('||                                         00335800
*          XLOADTOGLOBAL||                                              00335900
*          ')*/')                                                       00336000
*          NORESCAN COL(MACLMAR+5);                                     00336100
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00336200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00336300
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00336400
*  IF REQUEST(1)='DISABLE'                   /* CHECK FOR KEYWORD */    00336500
*    THEN                                                               00336600
*      DO;                                                              00336700
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00336800
*  XINTOKEN='';                                                         00336900
*  IF INTOKEN(1)=''                                                     00337000
*    THEN                                                               00337100
*      DO;                                                              00337200
*        XINTOKEN='0';                       /* SET DEFAULT */          00337300
*        ZC='ON';                            /* DEFAULT FLAG ON */      00337400
*      END;                                                             00337500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00337600
*  IF XINTOKEN^=''                                                      00337700
*    THEN                                                               00337800
*      ANS('/* INTOKEN('||                                              00337900
*          XINTOKEN||                                                   00338000
*          ')*/')                                                       00338100
*          NORESCAN COL(MACLMAR+5);                                     00338200
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00338300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00338400
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00338500
*  IF REQUEST(1)='ENABLE'                    /* CHECK FOR KEYWORD */    00338600
*    THEN                                                               00338700
*      DO;                                                              00338800
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00338900
*  XINTOKEN='';                                                         00339000
*  IF INTOKEN(1)=''                                                     00339100
*    THEN                                                               00339200
*      DO;                                                              00339300
*        XINTOKEN='0';                       /* SET DEFAULT */          00339400
*        ZC='ON';                            /* DEFAULT FLAG ON */      00339500
*      END;                                                             00339600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00339700
*  IF XINTOKEN^=''                                                      00339800
*    THEN                                                               00339900
*      ANS('/* INTOKEN('||                                              00340000
*          XINTOKEN||                                                   00340100
*          ')*/')                                                       00340200
*          NORESCAN COL(MACLMAR+5);                                     00340300
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00340400
*  XLOADTOGLOBAL='NO';                       /* RESET XVARIABLE */      00340500
*  IF LOADTOGLOBAL(1)=''                                                00340600
*    THEN                                                               00340700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00340800
*  IF LOADTOGLOBAL(1)='NO'                                              00340900
*    THEN                                                               00341000
*        XLOADTOGLOBAL='';                   /* SET XVARIABLE */        00341100
*  IF LOADTOGLOBAL(1)='YES'                                             00341200
*    THEN                                                               00341300
*        XLOADTOGLOBAL='';                   /* SET XVARIABLE */        00341400
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00341500
*  IF XLOADTOGLOBAL^=''                                                 00341600
*    THEN                                                               00341700
*      ANS('/* LOADTOGLOBAL('||                                         00341800
*          XLOADTOGLOBAL||                                              00341900
*          ')*/')                                                       00342000
*          NORESCAN COL(MACLMAR+5);                                     00342100
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00342200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00342300
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00342400
*  IF REQUEST(1)='EXCHANGE'                  /* CHECK FOR KEYWORD */    00342500
*    THEN                                                               00342600
*      DO;                                                              00342700
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00342800
*  XINTOKEN='';                                                         00342900
*  IF INTOKEN(1)=''                                                     00343000
*    THEN                                                               00343100
*      DO;                                                              00343200
*        XINTOKEN='0';                       /* SET DEFAULT */          00343300
*        ZC='ON';                            /* DEFAULT FLAG ON */      00343400
*      END;                                                             00343500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00343600
*  IF XINTOKEN^=''                                                      00343700
*    THEN                                                               00343800
*      ANS('/* INTOKEN('||                                              00343900
*          XINTOKEN||                                                   00344000
*          ')*/')                                                       00344100
*          NORESCAN COL(MACLMAR+5);                                     00344200
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00344300
*  XLOADTOGLOBAL='NO';                       /* RESET XVARIABLE */      00344400
*  IF LOADTOGLOBAL(1)=''                                                00344500
*    THEN                                                               00344600
*        ZC='ON';                            /* DEFAULT FLAG ON */      00344700
*  IF LOADTOGLOBAL(1)='NO'                                              00344800
*    THEN                                                               00344900
*        XLOADTOGLOBAL='';                   /* SET XVARIABLE */        00345000
*  IF LOADTOGLOBAL(1)='YES'                                             00345100
*    THEN                                                               00345200
*        XLOADTOGLOBAL='';                   /* SET XVARIABLE */        00345300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00345400
*  IF XLOADTOGLOBAL^=''                                                 00345500
*    THEN                                                               00345600
*      ANS('/* LOADTOGLOBAL('||                                         00345700
*          XLOADTOGLOBAL||                                              00345800
*          ')*/')                                                       00345900
*          NORESCAN COL(MACLMAR+5);                                     00346000
*/*PD.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00346100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00346200
*/*PD.KXVAR01 VALUE, OPT INPUT, KEYS -XVARIABLE----------------------*/ 00346300
*  XCOM='';                                                             00346400
*  IF COM(1)=''                                                         00346500
*    THEN                                                               00346600
*      DO;                                                              00346700
*        XCOM=' ';                           /* SET DEFAULT */          00346800
*        ZC='ON';                            /* DEFAULT FLAG ON */      00346900
*      END;                                                             00347000
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00347100
*  IF XCOM^=''                                                          00347200
*    THEN                                                               00347300
*      ANS('/* COM('||                                                  00347400
*          XCOM||                                                       00347500
*          ')*/')                                                       00347600
*          NORESCAN COL(MACLMAR+5);                                     00347700
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00347800
*    THEN                                                               00347900
*      ANS('/* NONE. */')                                               00348000
*         NORESCAN COL(MACLMAR+5);                                      00348100
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00348200
*      END;                                                             00348300
*/********************************************************************/ 00348400
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00348500
*/********************************************************************/ 00348600
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00348700
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00348800
*                                                                       00348900
*  IF SYSASCE=''                                                        00349000
*    THEN                                                               00349100
*      DO;                                                              00349200
*        IF SYSSPLV=''                                                  00349300
*          THEN                                                         00349400
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00349500
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00349600
*          THEN                                                         00349700
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00349800
*          ELSE                                                         00349900
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00350000
*      END;                                                             00350100
*/********************************************************************/ 00350200
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00350300
*/********************************************************************/ 00350400
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00350500
*  IF XMF^='L'                                                          00350600
*    THEN                                                               00350700
*      DO;                                   /* FULL SYNTAX CHECK */    00350800
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00350900
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00351000
*    THEN                                                               00351100
*      DO;                                                              00351200
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'|| /**PPOSP* MSG*/            00351300
*            ' "'||MACLIST||'"'||                                       00351400
*            ' CANNOT BE USED.'||                                       00351500
*            ' NO POSITIONAL ARGUMENTS'||                               00351600
*            ' ARE ALLOWED.';                                           00351700
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00351800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00351900
*        ZMACRET=8;                          /* MACRO ERROR */          00352000
*      END;                                                             00352100
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00352200
*  IF NUMBER(SUBNAME)>1                      /* CHECK POSITIONALS */    00352300
*    THEN                                                               00352400
*      DO;                                                              00352500
*        ZMS=' 8, "SUBNAME'||                /**KPOSP* MSG*/            00352600
*            SUBNAME||                                                  00352700
*            '" "SUBNAME"'||                                            00352800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00352900
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00353000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00353100
*        ZMACRET=8;                          /* MACRO ERROR */          00353200
*      END;                                                             00353300
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00353400
*  XSUBNAME=SUBNAME(1);                      /* SET XVARIABLE */        00353500
*  IF SUBNAME(1)=''                          /* CHECK FOR NULL */       00353600
*   THEN                                                                00353700
*    DO;                                     /* KEY IS REQUIRED */      00353800
*        ZXSUBNAME='';                       /* RESET IN/OUTPUT */      00353900
*        ZMS=' 8,  '||                                                  00354000
*            ' "SUBNAME" KEY AND ITS ARGUMENT'||                        00354100
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00354200
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00354300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00354400
*        ZMACRET=8;                          /* MACRO ERROR */          00354500
*    END;                                                               00354600
*  ELSE                                                                 00354700
*    ZXSUBNAME='INPUT';                      /* SET IN/OUTPUT */        00354800
*/*PG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00354900
*  XREQUEST='';                                                         00355000
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00355100
*  IF REQUEST(1)='CREATE'                    /* CHECK FOR KEYWORD */    00355200
*     | REQUEST(1)=''                        /* CHECK FOR NULL */       00355300
*    THEN                                                               00355400
*      DO;                                                              00355500
*        XREQUEST='CREATE';                  /* SET XVARIABLE */        00355600
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00355700
*          THEN                                                         00355800
*            DO;                                                        00355900
*              ZMS=' 8, "REQUEST'||          /**KPOSP* MSG*/            00356000
*                  REQUEST||                                            00356100
*                  '" "REQUEST"'||                                      00356200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00356300
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00356400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00356500
*              ZMACRET=8;                    /* MACRO ERROR */          00356600
*            END;                                                       00356700
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00356800
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00356900
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00357000
*          THEN                                                         00357100
*            ZCVAL=ZCVAL||',INTOKEN';        /* INCORRECT KEY USED */   00357200
*        IF ZCVAL^=''                                                   00357300
*          THEN                                                         00357400
*            DO;                             /* INCORRECT KEYS USED */  00357500
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00357600
*              ZMS=' 8, "REQUEST'||          /**KMEIP* MSG*/            00357700
*                  REQUEST||'"'||                                       00357800
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00357900
*                  ' FOLLOWING KEY(S) "'||                              00358000
*                  ZCVAL||'".';                                         00358100
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00358200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00358300
*              ZMACRET=8;                    /* MACRO ERROR */          00358400
*            END;                                                       00358500
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00358600
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00358700
*    THEN                                                               00358800
*      DO;                                                              00358900
*        ZMS=' 8, "SSVTDATA'||               /**KPOSP* MSG*/            00359000
*            SSVTDATA||                                                 00359100
*            '" "SSVTDATA"'||                                           00359200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00359300
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00359400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00359500
*        ZMACRET=8;                          /* MACRO ERROR */          00359600
*      END;                                                             00359700
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00359800
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00359900
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00360000
*   THEN                                                                00360100
*    DO;                                     /* KEY IS REQUIRED */      00360200
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00360300
*        ZMS=' 8,  '||                                                  00360400
*            ' "SSVTDATA" KEY AND ITS ARGUMENT'||                       00360500
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00360600
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00360700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00360800
*        ZMACRET=8;                          /* MACRO ERROR */          00360900
*    END;                                                               00361000
*  ELSE                                                                 00361100
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00361200
*/*PG.KXVAR01 NAME, RQD OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00361300
*  IF NUMBER(OUTTOKEN)>1                     /* CHECK POSITIONALS */    00361400
*    THEN                                                               00361500
*      DO;                                                              00361600
*        ZMS=' 8, "OUTTOKEN'||               /**KPOSP* MSG*/            00361700
*            OUTTOKEN||                                                 00361800
*            '" "OUTTOKEN"'||                                           00361900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00362000
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00362100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00362200
*        ZMACRET=8;                          /* MACRO ERROR */          00362300
*      END;                                                             00362400
*/*PG.KXVAR03 NAME, RQD OUTPUT, KEYS -XVARIABLE----------------------*/ 00362500
*  XOUTTOKEN=OUTTOKEN(1);                    /* SET XVARIABLE */        00362600
*  IF OUTTOKEN(1)=''                         /* CHECK FOR NULL */       00362700
*   THEN                                                                00362800
*    DO;                                     /* KEY IS REQUIRED */      00362900
*        ZXOUTTOKEN='';                      /* RESET IN/OUTPUT */      00363000
*        ZMS=' 8,  '||                                                  00363100
*            ' "OUTTOKEN" KEY AND ITS ARGUMENT'||                       00363200
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00363300
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00363400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00363500
*        ZMACRET=8;                          /* MACRO ERROR */          00363600
*    END;                                                               00363700
*  ELSE                                                                 00363800
*    ZXOUTTOKEN='OUTPUT';                    /* SET IN/OUTPUT */        00363900
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00364000
*  IF SUBPOOL='SUBPOOL' | SUBPOOL='()'       /*CHECK ENTRY*/            00364100
*    THEN                                                               00364200
*      DO;                                                              00364300
*        ZMS=' 8, THE "SUBPOOL" KEY'||       /**KOPTP* MSG*/            00364400
*            ' MUST CONTAIN ONE'||                                      00364500
*            ' (OR MORE) ARGUMENT(S).';                                 00364600
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00364700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00364800
*        ZMACRET=8;                          /* MACRO ERROR */          00364900
*      END;                                                             00365000
*  IF NUMBER(SUBPOOL)>1                      /* CHECK POSITIONALS */    00365100
*    THEN                                                               00365200
*      DO;                                                              00365300
*        ZMS=' 8, "SUBPOOL'||                /**KPOSP* MSG*/            00365400
*            SUBPOOL||                                                  00365500
*            '" "SUBPOOL"'||                                            00365600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00365700
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00365800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00365900
*        ZMACRET=8;                          /* MACRO ERROR */          00366000
*      END;                                                             00366100
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00366200
*  ZXSUBPOOL='INPUT';                        /* SET IN/OUTPUT */        00366300
*  XSUBPOOL='241';                           /* SET DEFAULT */          00366400
*  IF SUBPOOL(1)^=''                         /* CHECK FOR NULL */       00366500
*    THEN                                                               00366600
*      XSUBPOOL=SUBPOOL(1);                  /* SET XVARIABLE */        00366700
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00366800
*  IF NUMBER(MAXENTRIES)>1                   /* CHECK POSITIONALS */    00366900
*    THEN                                                               00367000
*      DO;                                                              00367100
*        ZMS=' 8, "MAXENTRIES'||             /**KPOSP* MSG*/            00367200
*            MAXENTRIES||                                               00367300
*            '" "MAXENTRIES"'||                                         00367400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00367500
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00367600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00367700
*        ZMACRET=8;                          /* MACRO ERROR */          00367800
*      END;                                                             00367900
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00368000
*  XMAXENTRIES=MAXENTRIES(1);                /* SET XVARIABLE */        00368100
*  IF MAXENTRIES(1)=''                       /* CHECK FOR NULL */       00368200
*   THEN                                                                00368300
*    DO;                                     /* KEY IS REQUIRED */      00368400
*        ZXMAXENTRIES='';                    /* RESET IN/OUTPUT */      00368500
*        ZMS=' 8,  '||                                                  00368600
*            ' "MAXENTRIES" KEY AND ITS ARGUMENT'||                     00368700
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00368800
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00368900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00369000
*        ZMACRET=8;                          /* MACRO ERROR */          00369100
*    END;                                                               00369200
*  ELSE                                                                 00369300
*    ZXMAXENTRIES='INPUT';                   /* SET IN/OUTPUT */        00369400
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00369500
*  IF LOADTOGLOBAL='LOADTOGLOBAL'            /* CHECK ENTRY */          00369600
*    THEN                                                               00369700
*      DO;                                                              00369800
*        ZMS=' 8, THE "LOADTOGLOBAL" KEY'||  /**KOPTP* MSG*/            00369900
*            ' MUST CONTAIN ONE'||                                      00370000
*            ' (OR MORE) ARGUMENT(S).';                                 00370100
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00370200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00370300
*        ZMACRET=8;                          /* MACRO ERROR */          00370400
*      END;                                                             00370500
*  IF NUMBER(LOADTOGLOBAL)>1                 /* CHECK POSITIONALS */    00370600
*    THEN                                                               00370700
*      DO;                                                              00370800
*        ZMS=' 8, "LOADTOGLOBAL'||           /**KPOSP* MSG*/            00370900
*            LOADTOGLOBAL||                                             00371000
*            '" "LOADTOGLOBAL"'||                                       00371100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00371200
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00371300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00371400
*        ZMACRET=8;                          /* MACRO ERROR */          00371500
*      END;                                                             00371600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00371700
*  XLOADTOGLOBAL='';                         /* RESET XVARIABLE */      00371800
*  IF LOADTOGLOBAL(1) = 'NO'                                            00371900
*    THEN                                                               00372000
*      XLOADTOGLOBAL = 'NO';                 /* SET XVARIABLE */        00372100
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00372200
*  IF LOADTOGLOBAL(1) = 'YES'                                           00372300
*    THEN                                                               00372400
*      XLOADTOGLOBAL = 'YES';                /* SET XVARIABLE */        00372500
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00372600
*  ZXLOADTOGLOBAL='INPUT';                   /* SET IN/OUTPUT */        00372700
*  IF XLOADTOGLOBAL=''                       /* CHECK FOR KEYWORD */    00372800
*    THEN                                                               00372900
*      DO;                                   /* KEYWORD NOT ENTERED */  00373000
*        XLOADTOGLOBAL='NO';                 /* SET DEFAULT */          00373100
*        IF LOADTOGLOBAL(1)^=''                                         00373200
*          THEN                                                         00373300
*            DO;                                                        00373400
*              ZXLOADTOGLOBAL='';            /* RESET IN/OUTPUT */      00373500
*              ZMS=' 8, "LOADTOGLOBAL'||     /**KUKWP* MSG*/            00373600
*                  LOADTOGLOBAL||'"'||                                  00373700
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00373800
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00373900
*                  ' "NO"'||                 /* VALID KEYWORD */        00374000
*                  ' OR "YES".';             /* VALID KEYWORD */        00374100
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00374200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00374300
*              ZMACRET=8;                    /* MACRO ERROR */          00374400
*            END;                                                       00374500
*      END;                                                             00374600
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00374700
*  IF ERRFUNCT='ERRFUNCT' | ERRFUNCT='()'    /*CHECK ENTRY*/            00374800
*    THEN                                                               00374900
*      DO;                                                              00375000
*        ZMS=' 8, THE "ERRFUNCT" KEY'||      /**KOPTP* MSG*/            00375100
*            ' MUST CONTAIN ONE'||                                      00375200
*            ' (OR MORE) ARGUMENT(S).';                                 00375300
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00375400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00375500
*        ZMACRET=8;                          /* MACRO ERROR */          00375600
*      END;                                                             00375700
*  IF NUMBER(ERRFUNCT)>1                     /* CHECK POSITIONALS */    00375800
*    THEN                                                               00375900
*      DO;                                                              00376000
*        ZMS=' 8, "ERRFUNCT'||               /**KPOSP* MSG*/            00376100
*            ERRFUNCT||                                                 00376200
*            '" "ERRFUNCT"'||                                           00376300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00376400
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00376500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00376600
*        ZMACRET=8;                          /* MACRO ERROR */          00376700
*      END;                                                             00376800
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00376900
*  IF ERRFUNCT(1)^=''                        /* CHECK FOR NULL */       00377000
*    THEN                                                               00377100
*      DO;                                                              00377200
*        XERRFUNCT=ERRFUNCT(1);              /* SET XVARIABLE */        00377300
*        ZXERRFUNCT='OUTPUT';                /* SET OUTPUT */           00377400
*      END;                                                             00377500
*  ELSE                                                                 00377600
*    IF ZXERRFUNCT^=''                                                  00377700
*      THEN                                                             00377800
*        ZXERRFUNCT='';                      /* RESET OUTPUT */         00377900
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00378000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00378100
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00378200
*  IF REQUEST(1)='DISABLE'                   /* CHECK FOR KEYWORD */    00378300
*    THEN                                                               00378400
*      DO;                                                              00378500
*        XREQUEST='DISABLE';                 /* SET XVARIABLE */        00378600
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00378700
*          THEN                                                         00378800
*            DO;                                                        00378900
*              ZMS=' 8, "REQUEST'||          /**KPOSP* MSG*/            00379000
*                  REQUEST||                                            00379100
*                  '" "REQUEST"'||                                      00379200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00379300
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00379400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00379500
*              ZMACRET=8;                    /* MACRO ERROR */          00379600
*            END;                                                       00379700
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00379800
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00379900
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00380000
*          THEN                                                         00380100
*            ZCVAL=ZCVAL||',OUTTOKEN';       /* INCORRECT KEY USED */   00380200
*        IF SUBPOOL^=''                      /* CHECK FOR KEY */        00380300
*          THEN                                                         00380400
*            ZCVAL=ZCVAL||',SUBPOOL';        /* INCORRECT KEY USED */   00380500
*        IF MAXENTRIES^=''                   /* CHECK FOR KEY */        00380600
*          THEN                                                         00380700
*            ZCVAL=ZCVAL||',MAXENTRIES';     /* INCORRECT KEY USED */   00380800
*        IF LOADTOGLOBAL^=''                 /* CHECK FOR KEY */        00380900
*          THEN                                                         00381000
*            ZCVAL=ZCVAL||',LOADTOGLOBAL';   /* INCORRECT KEY USED */   00381100
*        IF ERRFUNCT^=''                     /* CHECK FOR KEY */        00381200
*          THEN                                                         00381300
*            ZCVAL=ZCVAL||',ERRFUNCT';       /* INCORRECT KEY USED */   00381400
*        IF ZCVAL^=''                                                   00381500
*          THEN                                                         00381600
*            DO;                             /* INCORRECT KEYS USED */  00381700
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00381800
*              ZMS=' 8, "REQUEST'||          /**KMEIP* MSG*/            00381900
*                  REQUEST||'"'||                                       00382000
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00382100
*                  ' FOLLOWING KEY(S) "'||                              00382200
*                  ZCVAL||'".';                                         00382300
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00382400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00382500
*              ZMACRET=8;                    /* MACRO ERROR */          00382600
*            END;                                                       00382700
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00382800
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00382900
*    THEN                                                               00383000
*      DO;                                                              00383100
*        ZMS=' 8, "SSVTDATA'||               /**KPOSP* MSG*/            00383200
*            SSVTDATA||                                                 00383300
*            '" "SSVTDATA"'||                                           00383400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00383500
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00383600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00383700
*        ZMACRET=8;                          /* MACRO ERROR */          00383800
*      END;                                                             00383900
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00384000
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00384100
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00384200
*   THEN                                                                00384300
*    DO;                                     /* KEY IS REQUIRED */      00384400
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00384500
*        ZMS=' 8,  '||                                                  00384600
*            ' "SSVTDATA" KEY AND ITS ARGUMENT'||                       00384700
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00384800
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00384900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00385000
*        ZMACRET=8;                          /* MACRO ERROR */          00385100
*    END;                                                               00385200
*  ELSE                                                                 00385300
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00385400
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00385500
*  IF INTOKEN='INTOKEN' | INTOKEN='()'       /*CHECK ENTRY*/            00385600
*    THEN                                                               00385700
*      DO;                                                              00385800
*        ZMS=' 8, THE "INTOKEN" KEY'||       /**KOPTP* MSG*/            00385900
*            ' MUST CONTAIN ONE'||                                      00386000
*            ' (OR MORE) ARGUMENT(S).';                                 00386100
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00386200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00386300
*        ZMACRET=8;                          /* MACRO ERROR */          00386400
*      END;                                                             00386500
*  IF NUMBER(INTOKEN)>1                      /* CHECK POSITIONALS */    00386600
*    THEN                                                               00386700
*      DO;                                                              00386800
*        ZMS=' 8, "INTOKEN'||                /**KPOSP* MSG*/            00386900
*            INTOKEN||                                                  00387000
*            '" "INTOKEN"'||                                            00387100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00387200
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00387300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00387400
*        ZMACRET=8;                          /* MACRO ERROR */          00387500
*      END;                                                             00387600
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00387700
*  ZXINTOKEN='INPUT';                        /* SET IN/OUTPUT */        00387800
*  XINTOKEN='NULL';                          /* SET DEFAULT */          00387900
*  IF INTOKEN(1)^=''                         /* CHECK FOR NULL */       00388000
*    THEN                                                               00388100
*      XINTOKEN=INTOKEN(1);                  /* SET XVARIABLE */        00388200
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00388300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00388400
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00388500
*  IF REQUEST(1)='ENABLE'                    /* CHECK FOR KEYWORD */    00388600
*    THEN                                                               00388700
*      DO;                                                              00388800
*        XREQUEST='ENABLE';                  /* SET XVARIABLE */        00388900
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00389000
*          THEN                                                         00389100
*            DO;                                                        00389200
*              ZMS=' 8, "REQUEST'||          /**KPOSP* MSG*/            00389300
*                  REQUEST||                                            00389400
*                  '" "REQUEST"'||                                      00389500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00389600
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00389700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00389800
*              ZMACRET=8;                    /* MACRO ERROR */          00389900
*            END;                                                       00390000
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00390100
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00390200
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00390300
*          THEN                                                         00390400
*            ZCVAL=ZCVAL||',OUTTOKEN';       /* INCORRECT KEY USED */   00390500
*        IF SUBPOOL^=''                      /* CHECK FOR KEY */        00390600
*          THEN                                                         00390700
*            ZCVAL=ZCVAL||',SUBPOOL';        /* INCORRECT KEY USED */   00390800
*        IF MAXENTRIES^=''                   /* CHECK FOR KEY */        00390900
*          THEN                                                         00391000
*            ZCVAL=ZCVAL||',MAXENTRIES';     /* INCORRECT KEY USED */   00391100
*        IF ZCVAL^=''                                                   00391200
*          THEN                                                         00391300
*            DO;                             /* INCORRECT KEYS USED */  00391400
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00391500
*              ZMS=' 8, "REQUEST'||          /**KMEIP* MSG*/            00391600
*                  REQUEST||'"'||                                       00391700
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00391800
*                  ' FOLLOWING KEY(S) "'||                              00391900
*                  ZCVAL||'".';                                         00392000
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00392100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00392200
*              ZMACRET=8;                    /* MACRO ERROR */          00392300
*            END;                                                       00392400
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00392500
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00392600
*    THEN                                                               00392700
*      DO;                                                              00392800
*        ZMS=' 8, "SSVTDATA'||               /**KPOSP* MSG*/            00392900
*            SSVTDATA||                                                 00393000
*            '" "SSVTDATA"'||                                           00393100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00393200
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00393300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00393400
*        ZMACRET=8;                          /* MACRO ERROR */          00393500
*      END;                                                             00393600
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00393700
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00393800
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00393900
*   THEN                                                                00394000
*    DO;                                     /* KEY IS REQUIRED */      00394100
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00394200
*        ZMS=' 8,  '||                                                  00394300
*            ' "SSVTDATA" KEY AND ITS ARGUMENT'||                       00394400
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00394500
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00394600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00394700
*        ZMACRET=8;                          /* MACRO ERROR */          00394800
*    END;                                                               00394900
*  ELSE                                                                 00395000
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00395100
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00395200
*  IF INTOKEN='INTOKEN' | INTOKEN='()'       /*CHECK ENTRY*/            00395300
*    THEN                                                               00395400
*      DO;                                                              00395500
*        ZMS=' 8, THE "INTOKEN" KEY'||       /**KOPTP* MSG*/            00395600
*            ' MUST CONTAIN ONE'||                                      00395700
*            ' (OR MORE) ARGUMENT(S).';                                 00395800
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00395900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00396000
*        ZMACRET=8;                          /* MACRO ERROR */          00396100
*      END;                                                             00396200
*  IF NUMBER(INTOKEN)>1                      /* CHECK POSITIONALS */    00396300
*    THEN                                                               00396400
*      DO;                                                              00396500
*        ZMS=' 8, "INTOKEN'||                /**KPOSP* MSG*/            00396600
*            INTOKEN||                                                  00396700
*            '" "INTOKEN"'||                                            00396800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00396900
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00397000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00397100
*        ZMACRET=8;                          /* MACRO ERROR */          00397200
*      END;                                                             00397300
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00397400
*  ZXINTOKEN='INPUT';                        /* SET IN/OUTPUT */        00397500
*  XINTOKEN='NULL';                          /* SET DEFAULT */          00397600
*  IF INTOKEN(1)^=''                         /* CHECK FOR NULL */       00397700
*    THEN                                                               00397800
*      XINTOKEN=INTOKEN(1);                  /* SET XVARIABLE */        00397900
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00398000
*  IF LOADTOGLOBAL='LOADTOGLOBAL'            /* CHECK ENTRY */          00398100
*    THEN                                                               00398200
*      DO;                                                              00398300
*        ZMS=' 8, THE "LOADTOGLOBAL" KEY'||  /**KOPTP* MSG*/            00398400
*            ' MUST CONTAIN ONE'||                                      00398500
*            ' (OR MORE) ARGUMENT(S).';                                 00398600
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00398700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00398800
*        ZMACRET=8;                          /* MACRO ERROR */          00398900
*      END;                                                             00399000
*  IF NUMBER(LOADTOGLOBAL)>1                 /* CHECK POSITIONALS */    00399100
*    THEN                                                               00399200
*      DO;                                                              00399300
*        ZMS=' 8, "LOADTOGLOBAL'||           /**KPOSP* MSG*/            00399400
*            LOADTOGLOBAL||                                             00399500
*            '" "LOADTOGLOBAL"'||                                       00399600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00399700
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00399800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00399900
*        ZMACRET=8;                          /* MACRO ERROR */          00400000
*      END;                                                             00400100
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00400200
*  XLOADTOGLOBAL='';                         /* RESET XVARIABLE */      00400300
*  IF LOADTOGLOBAL(1) = 'NO'                                            00400400
*    THEN                                                               00400500
*      XLOADTOGLOBAL = 'NO';                 /* SET XVARIABLE */        00400600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00400700
*  IF LOADTOGLOBAL(1) = 'YES'                                           00400800
*    THEN                                                               00400900
*      XLOADTOGLOBAL = 'YES';                /* SET XVARIABLE */        00401000
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00401100
*  ZXLOADTOGLOBAL='INPUT';                   /* SET IN/OUTPUT */        00401200
*  IF XLOADTOGLOBAL=''                       /* CHECK FOR KEYWORD */    00401300
*    THEN                                                               00401400
*      DO;                                   /* KEYWORD NOT ENTERED */  00401500
*        XLOADTOGLOBAL='NO';                 /* SET DEFAULT */          00401600
*        IF LOADTOGLOBAL(1)^=''                                         00401700
*          THEN                                                         00401800
*            DO;                                                        00401900
*              ZXLOADTOGLOBAL='';            /* RESET IN/OUTPUT */      00402000
*              ZMS=' 8, "LOADTOGLOBAL'||     /**KUKWP* MSG*/            00402100
*                  LOADTOGLOBAL||'"'||                                  00402200
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00402300
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00402400
*                  ' "NO"'||                 /* VALID KEYWORD */        00402500
*                  ' OR "YES".';             /* VALID KEYWORD */        00402600
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00402700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00402800
*              ZMACRET=8;                    /* MACRO ERROR */          00402900
*            END;                                                       00403000
*      END;                                                             00403100
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00403200
*  IF ERRFUNCT='ERRFUNCT' | ERRFUNCT='()'    /*CHECK ENTRY*/            00403300
*    THEN                                                               00403400
*      DO;                                                              00403500
*        ZMS=' 8, THE "ERRFUNCT" KEY'||      /**KOPTP* MSG*/            00403600
*            ' MUST CONTAIN ONE'||                                      00403700
*            ' (OR MORE) ARGUMENT(S).';                                 00403800
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00403900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00404000
*        ZMACRET=8;                          /* MACRO ERROR */          00404100
*      END;                                                             00404200
*  IF NUMBER(ERRFUNCT)>1                     /* CHECK POSITIONALS */    00404300
*    THEN                                                               00404400
*      DO;                                                              00404500
*        ZMS=' 8, "ERRFUNCT'||               /**KPOSP* MSG*/            00404600
*            ERRFUNCT||                                                 00404700
*            '" "ERRFUNCT"'||                                           00404800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00404900
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00405000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00405100
*        ZMACRET=8;                          /* MACRO ERROR */          00405200
*      END;                                                             00405300
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00405400
*  IF ERRFUNCT(1)^=''                        /* CHECK FOR NULL */       00405500
*    THEN                                                               00405600
*      DO;                                                              00405700
*        XERRFUNCT=ERRFUNCT(1);              /* SET XVARIABLE */        00405800
*        ZXERRFUNCT='OUTPUT';                /* SET OUTPUT */           00405900
*      END;                                                             00406000
*  ELSE                                                                 00406100
*    IF ZXERRFUNCT^=''                                                  00406200
*      THEN                                                             00406300
*        ZXERRFUNCT='';                      /* RESET OUTPUT */         00406400
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00406500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00406600
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00406700
*  IF REQUEST(1)='EXCHANGE'                  /* CHECK FOR KEYWORD */    00406800
*    THEN                                                               00406900
*      DO;                                                              00407000
*        XREQUEST='EXCHANGE';                /* SET XVARIABLE */        00407100
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00407200
*          THEN                                                         00407300
*            DO;                                                        00407400
*              ZMS=' 8, "REQUEST'||          /**KPOSP* MSG*/            00407500
*                  REQUEST||                                            00407600
*                  '" "REQUEST"'||                                      00407700
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00407800
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00407900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00408000
*              ZMACRET=8;                    /* MACRO ERROR */          00408100
*            END;                                                       00408200
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00408300
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00408400
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00408500
*          THEN                                                         00408600
*            ZCVAL=ZCVAL||',OUTTOKEN';       /* INCORRECT KEY USED */   00408700
*        IF SUBPOOL^=''                      /* CHECK FOR KEY */        00408800
*          THEN                                                         00408900
*            ZCVAL=ZCVAL||',SUBPOOL';        /* INCORRECT KEY USED */   00409000
*        IF MAXENTRIES^=''                   /* CHECK FOR KEY */        00409100
*          THEN                                                         00409200
*            ZCVAL=ZCVAL||',MAXENTRIES';     /* INCORRECT KEY USED */   00409300
*        IF ZCVAL^=''                                                   00409400
*          THEN                                                         00409500
*            DO;                             /* INCORRECT KEYS USED */  00409600
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00409700
*              ZMS=' 8, "REQUEST'||          /**KMEIP* MSG*/            00409800
*                  REQUEST||'"'||                                       00409900
*                  ' DOES NOT ALLOW THE USE OF THE'||                   00410000
*                  ' FOLLOWING KEY(S) "'||                              00410100
*                  ZCVAL||'".';                                         00410200
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00410300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00410400
*              ZMACRET=8;                    /* MACRO ERROR */          00410500
*            END;                                                       00410600
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00410700
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00410800
*    THEN                                                               00410900
*      DO;                                                              00411000
*        ZMS=' 8, "SSVTDATA'||               /**KPOSP* MSG*/            00411100
*            SSVTDATA||                                                 00411200
*            '" "SSVTDATA"'||                                           00411300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00411400
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00411500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00411600
*        ZMACRET=8;                          /* MACRO ERROR */          00411700
*      END;                                                             00411800
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00411900
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00412000
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00412100
*   THEN                                                                00412200
*    DO;                                     /* KEY IS REQUIRED */      00412300
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00412400
*        ZMS=' 8,  '||                                                  00412500
*            ' "SSVTDATA" KEY AND ITS ARGUMENT'||                       00412600
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00412700
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00412800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00412900
*        ZMACRET=8;                          /* MACRO ERROR */          00413000
*    END;                                                               00413100
*  ELSE                                                                 00413200
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00413300
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00413400
*  IF INTOKEN='INTOKEN' | INTOKEN='()'       /*CHECK ENTRY*/            00413500
*    THEN                                                               00413600
*      DO;                                                              00413700
*        ZMS=' 8, THE "INTOKEN" KEY'||       /**KOPTP* MSG*/            00413800
*            ' MUST CONTAIN ONE'||                                      00413900
*            ' (OR MORE) ARGUMENT(S).';                                 00414000
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00414100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00414200
*        ZMACRET=8;                          /* MACRO ERROR */          00414300
*      END;                                                             00414400
*  IF NUMBER(INTOKEN)>1                      /* CHECK POSITIONALS */    00414500
*    THEN                                                               00414600
*      DO;                                                              00414700
*        ZMS=' 8, "INTOKEN'||                /**KPOSP* MSG*/            00414800
*            INTOKEN||                                                  00414900
*            '" "INTOKEN"'||                                            00415000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00415100
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00415200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00415300
*        ZMACRET=8;                          /* MACRO ERROR */          00415400
*      END;                                                             00415500
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00415600
*  ZXINTOKEN='INPUT';                        /* SET IN/OUTPUT */        00415700
*  XINTOKEN='NULL';                          /* SET DEFAULT */          00415800
*  IF INTOKEN(1)^=''                         /* CHECK FOR NULL */       00415900
*    THEN                                                               00416000
*      XINTOKEN=INTOKEN(1);                  /* SET XVARIABLE */        00416100
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00416200
*  IF LOADTOGLOBAL='LOADTOGLOBAL'            /* CHECK ENTRY */          00416300
*    THEN                                                               00416400
*      DO;                                                              00416500
*        ZMS=' 8, THE "LOADTOGLOBAL" KEY'||  /**KOPTP* MSG*/            00416600
*            ' MUST CONTAIN ONE'||                                      00416700
*            ' (OR MORE) ARGUMENT(S).';                                 00416800
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00416900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00417000
*        ZMACRET=8;                          /* MACRO ERROR */          00417100
*      END;                                                             00417200
*  IF NUMBER(LOADTOGLOBAL)>1                 /* CHECK POSITIONALS */    00417300
*    THEN                                                               00417400
*      DO;                                                              00417500
*        ZMS=' 8, "LOADTOGLOBAL'||           /**KPOSP* MSG*/            00417600
*            LOADTOGLOBAL||                                             00417700
*            '" "LOADTOGLOBAL"'||                                       00417800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00417900
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00418000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00418100
*        ZMACRET=8;                          /* MACRO ERROR */          00418200
*      END;                                                             00418300
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00418400
*  XLOADTOGLOBAL='';                         /* RESET XVARIABLE */      00418500
*  IF LOADTOGLOBAL(1) = 'NO'                                            00418600
*    THEN                                                               00418700
*      XLOADTOGLOBAL = 'NO';                 /* SET XVARIABLE */        00418800
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00418900
*  IF LOADTOGLOBAL(1) = 'YES'                                           00419000
*    THEN                                                               00419100
*      XLOADTOGLOBAL = 'YES';                /* SET XVARIABLE */        00419200
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00419300
*  ZXLOADTOGLOBAL='INPUT';                   /* SET IN/OUTPUT */        00419400
*  IF XLOADTOGLOBAL=''                       /* CHECK FOR KEYWORD */    00419500
*    THEN                                                               00419600
*      DO;                                   /* KEYWORD NOT ENTERED */  00419700
*        XLOADTOGLOBAL='NO';                 /* SET DEFAULT */          00419800
*        IF LOADTOGLOBAL(1)^=''                                         00419900
*          THEN                                                         00420000
*            DO;                                                        00420100
*              ZXLOADTOGLOBAL='';            /* RESET IN/OUTPUT */      00420200
*              ZMS=' 8, "LOADTOGLOBAL'||     /**KUKWP* MSG*/            00420300
*                  LOADTOGLOBAL||'"'||                                  00420400
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00420500
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00420600
*                  ' "NO"'||                 /* VALID KEYWORD */        00420700
*                  ' OR "YES".';             /* VALID KEYWORD */        00420800
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00420900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00421000
*              ZMACRET=8;                    /* MACRO ERROR */          00421100
*            END;                                                       00421200
*      END;                                                             00421300
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00421400
*  IF ERRFUNCT='ERRFUNCT' | ERRFUNCT='()'    /*CHECK ENTRY*/            00421500
*    THEN                                                               00421600
*      DO;                                                              00421700
*        ZMS=' 8, THE "ERRFUNCT" KEY'||      /**KOPTP* MSG*/            00421800
*            ' MUST CONTAIN ONE'||                                      00421900
*            ' (OR MORE) ARGUMENT(S).';                                 00422000
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00422100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00422200
*        ZMACRET=8;                          /* MACRO ERROR */          00422300
*      END;                                                             00422400
*  IF NUMBER(ERRFUNCT)>1                     /* CHECK POSITIONALS */    00422500
*    THEN                                                               00422600
*      DO;                                                              00422700
*        ZMS=' 8, "ERRFUNCT'||               /**KPOSP* MSG*/            00422800
*            ERRFUNCT||                                                 00422900
*            '" "ERRFUNCT"'||                                           00423000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00423100
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00423200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00423300
*        ZMACRET=8;                          /* MACRO ERROR */          00423400
*      END;                                                             00423500
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00423600
*  IF ERRFUNCT(1)^=''                        /* CHECK FOR NULL */       00423700
*    THEN                                                               00423800
*      DO;                                                              00423900
*        XERRFUNCT=ERRFUNCT(1);              /* SET XVARIABLE */        00424000
*        ZXERRFUNCT='OUTPUT';                /* SET OUTPUT */           00424100
*      END;                                                             00424200
*  ELSE                                                                 00424300
*    IF ZXERRFUNCT^=''                                                  00424400
*      THEN                                                             00424500
*        ZXERRFUNCT='';                      /* RESET OUTPUT */         00424600
*/*PG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00424700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00424800
*/*PG.KKCTL06 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00424900
*  IF REQUEST='REQUEST'                                                 00425000
*    | REQUEST='()'                          /*CHECK ENTRY*/            00425100
*     THEN                                                              00425200
*       DO;                                                             00425300
*              ZMS=' 8, THE "REQUEST" KEY'|| /**KOPTP* MSG*/            00425400
*                  ' MUST CONTAIN ONE'||                                00425500
*                  ' (OR MORE) ARGUMENT(S).';                           00425600
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00425700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00425800
*              ZMACRET=8;                    /* MACRO ERROR */          00425900
*       END;                                                            00426000
*  ELSE                                                                 00426100
*    DO;                                                                00426200
*      ZXREQUEST='INPUT';                    /* SET IN/OUTPUT */        00426300
*      IF XREQUEST=''                        /* CHECK FOR KEYWORD */    00426400
*        THEN                                                           00426500
*          DO;                               /* KEYWORD NOT ENTERED */  00426600
*            XREQUEST='CREATE';              /* SET DEFAULT */          00426700
*            IF REQUEST(1)^=''               /* CHECK FOR KEYWORD */    00426800
*              THEN                                                     00426900
*                DO;                                                    00427000
*                  ZXREQUEST='';             /* RESET IN/OUTPUT */      00427100
*              ZMS=' 8, "REQUEST'||          /**KUKWP* MSG*/            00427200
*                  REQUEST||'"'||                                       00427300
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00427400
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00427500
*                  ' "CREATE",'||            /* VALID KEYWORD */        00427600
*                  ' "DISABLE",'||           /* VALID KEYWORD */        00427700
*                  ' "ENABLE",'||            /* VALID KEYWORD */        00427800
*                  ' OR "EXCHANGE".';        /* VALID KEYWORD */        00427900
*              ANS MSG('?IEFSSVT ---> '||ZMS);                          00428000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00428100
*              ZMACRET=8;                    /* MACRO ERROR */          00428200
*                END;                                                   00428300
*          END;                                                         00428400
*    END;                                                               00428500
*/*PG.KKCTL07 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00428600
*  IF REQUEST(1)=''                          /* CHECK FOR KEYWORD */    00428700
*    THEN                                                               00428800
*      DO;                                                              00428900
*        ZXREQUEST='';                       /* RESET IN/OUTPUT */      00429000
*        ZMS=' 8, THE'||                     /**KRKWP* MSG*/            00429100
*            ' "REQUEST" KEY AND ITS ARGUMENT'||                        00429200
*            ' ARE REQUIRED.'||                                         00429300
*            ' VALID KEYWORD CHOICE(S) ARE:'||                          00429400
*            ' "CREATE",'||                  /* VALID KEYWORD */        00429500
*            ' "DISABLE",'||                 /* VALID KEYWORD */        00429600
*            ' "ENABLE",'||                  /* VALID KEYWORD */        00429700
*            ' OR "EXCHANGE".';              /* VALID KEYWORD */        00429800
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00429900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00430000
*        ZMACRET=8;                          /* MACRO ERROR */          00430100
*      END;                                                             00430200
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00430300
*  IF RETCODE='RETCODE' | RETCODE='()'       /*CHECK ENTRY*/            00430400
*    THEN                                                               00430500
*      DO;                                                              00430600
*        ZMS=' 8, THE "RETCODE" KEY'||       /**KOPTP* MSG*/            00430700
*            ' MUST CONTAIN ONE'||                                      00430800
*            ' (OR MORE) ARGUMENT(S).';                                 00430900
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00431000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00431100
*        ZMACRET=8;                          /* MACRO ERROR */          00431200
*      END;                                                             00431300
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00431400
*    THEN                                                               00431500
*      DO;                                                              00431600
*        ZMS=' 8, "RETCODE'||                /**KPOSP* MSG*/            00431700
*            RETCODE||                                                  00431800
*            '" "RETCODE"'||                                            00431900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00432000
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00432100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00432200
*        ZMACRET=8;                          /* MACRO ERROR */          00432300
*      END;                                                             00432400
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00432500
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00432600
*    THEN                                                               00432700
*      DO;                                                              00432800
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00432900
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00433000
*      END;                                                             00433100
*  ELSE                                                                 00433200
*    IF ZXRETCODE^=''                                                   00433300
*      THEN                                                             00433400
*        ZXRETCODE='';                       /* RESET OUTPUT */         00433500
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00433600
*  IF RSNCODE='RSNCODE' | RSNCODE='()'       /*CHECK ENTRY*/            00433700
*    THEN                                                               00433800
*      DO;                                                              00433900
*        ZMS=' 8, THE "RSNCODE" KEY'||       /**KOPTP* MSG*/            00434000
*            ' MUST CONTAIN ONE'||                                      00434100
*            ' (OR MORE) ARGUMENT(S).';                                 00434200
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00434300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00434400
*        ZMACRET=8;                          /* MACRO ERROR */          00434500
*      END;                                                             00434600
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    00434700
*    THEN                                                               00434800
*      DO;                                                              00434900
*        ZMS=' 8, "RSNCODE'||                /**KPOSP* MSG*/            00435000
*            RSNCODE||                                                  00435100
*            '" "RSNCODE"'||                                            00435200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00435300
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00435400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00435500
*        ZMACRET=8;                          /* MACRO ERROR */          00435600
*      END;                                                             00435700
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00435800
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       00435900
*    THEN                                                               00436000
*      DO;                                                              00436100
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        00436200
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           00436300
*      END;                                                             00436400
*  ELSE                                                                 00436500
*    IF ZXRSNCODE^=''                                                   00436600
*      THEN                                                             00436700
*        ZXRSNCODE='';                       /* RESET OUTPUT */         00436800
*/*PG.KXVAR01 VALUE, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00436900
*  IF COM='COM' | COM='()'                   /*CHECK ENTRY*/            00437000
*    THEN                                                               00437100
*      DO;                                                              00437200
*        ZMS=' 8, THE "COM" KEY'||           /**KOPTP* MSG*/            00437300
*            ' MUST CONTAIN ONE'||                                      00437400
*            ' (OR MORE) ARGUMENT(S).';                                 00437500
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00437600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00437700
*        ZMACRET=8;                          /* MACRO ERROR */          00437800
*      END;                                                             00437900
*  IF NUMBER(COM)>1                          /* CHECK POSITIONALS */    00438000
*    THEN                                                               00438100
*      DO;                                                              00438200
*        ZMS=' 8, "COM'||                    /**KPOSP* MSG*/            00438300
*            COM||                                                      00438400
*            '" "COM"'||                                                00438500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00438600
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00438700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00438800
*        ZMACRET=8;                          /* MACRO ERROR */          00438900
*      END;                                                             00439000
*/*PG.KXVAR13 VALUE, OPT INPUT, KEYS -XVARIABLE----------------------*/ 00439100
*  ZXCOM='INPUT';                            /* SET IN/OUTPUT */        00439200
*  XCOM='NULL';                              /* SET DEFAULT */          00439300
*  IF COM(1)^=''                             /* CHECK FOR NULL */       00439400
*    THEN                                                               00439500
*      XCOM=COM(1);                          /* SET XVARIABLE */        00439600
*/*PG.KCK01 VALUE, OPT INPUT, KEYS -CHARACTER LENGTH-----------------*/ 00439700
*  IF ZXCOM^='' &                            /* NOT IN/OUTPUT */        00439800
*     XCOM^='NULL' &                         /* NOT STAR DEFAULT */     00439900
*     LENGTH(XCOM)>256                                                  00440000
*    THEN                                                               00440100
*      DO;                                                              00440200
*        ZXCOM='';                           /* RESET IN/OUTPUT */      00440300
*        ZMS=' 8, "COM'||                    /**KLNGP* MSG*/            00440400
*            COM||                                                      00440500
*            '" ARGUMENT 1 EXCEEDS THE MAXIMUM'||                       00440600
*            ' LENGTH OF 256 CHARACTERS. ';                             00440700
*        ANS MSG('?IEFSSVT ---> '||ZMS);                                00440800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00440900
*        ZMACRET=8;                          /* MACRO ERROR */          00441000
*      END;                                                             00441100
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00441200
*      END;                                  /* END COMPLETE CHECKING*/ 00441300
*/********************************************************************/ 00441400
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00441500
*/********************************************************************/ 00441600
*  IF ZMACRET = 0                                                       00441700
*    THEN                                                               00441800
*      DO;                                                              00441900
*/********************************************************************/ 00442000
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00442100
*/********************************************************************/ 00442200
*  ANS(MACCONC||'LIST PUSH;') NORESCAN COL(MACLMAR);                    00442300
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00442400
*    THEN                                                               00442500
*      ANS(MACCONC||'LIST OFF;') NORESCAN COL(MACLMAR);                 00442600
*    ELSE                                                               00442700
*      ANS(MACCONC||'LIST ON;')  NORESCAN COL(MACLMAR);                 00442800
*/********************************************************************/ 00442900
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00443000
*  IF XMF^='L'                                                          00443100
*    THEN                                                               00443200
*      ANS('DO; /* IEFSSVT-PLISTVER */')                                00443300
*          NORESCAN COL(MACLMAR);                                       00443400
*/*PL.LL01 ?IEFSSVT MF=L PARAMETER LIST------------------------------*/ 00443500
*  IF XMF='L'                                                           00443600
*    THEN                                                               00443700
*      DO;                                                              00443800
*        ANS('DCL 1 '||XMFCTRL||' '||XMFATTR||', '||                    00443900
*            '/* ?IEFSSVT PARM LIST*/')                                 00444000
*            NORESCAN COL(MACLMAR);                                     00444100
*/*PL.LL13  XVT_PLIST_ID CHAR(4) CONSTANT----------------------------*/ 00444200
*        ANS('2 '||XMFCTRL||                                            00444300
*            '_XVT_PLIST_ID CHAR(4), '||                                00444400
*            '/* '||ZXVT_PLIST_ID||' XVT_PLIST_ID */')                  00444500
*            NORESCAN COL(MACLMAR+2);                                   00444600
*/*PL.LL02  XPLISTLEN FIXED(16) BDY(BYTE) INPUT----------------------*/ 00444700
*        ANS('2 '||XMFCTRL||                                            00444800
*            '_XPLISTLEN FIXED(16) BDY(BYTE), '||                       00444900
*            '/* INPUT XPLISTLEN*/')                                    00445000
*            NORESCAN COL(MACLMAR+2);                                   00445100
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00445200
*        ANS('2 '||XMFCTRL||                                            00445300
*            '_XVERSION FIXED(8), '||                                   00445400
*            '/* INPUT XVERSION*/')                                     00445500
*            NORESCAN COL(MACLMAR+2);                                   00445600
*/*PL.LL13  XRSV0001 CHAR(1) RESERVED--------------------------------*/ 00445700
*        ANS('2 '||XMFCTRL||                                            00445800
*            '_XRSV0001 CHAR(1), '||                                    00445900
*            '/* RESERVED */')                                          00446000
*            NORESCAN COL(MACLMAR+2);                                   00446100
*/*PL.LL13  XSUBNAME CHAR(4) INPUT-----------------------------------*/ 00446200
*        ANS('2 '||XMFCTRL||                                            00446300
*            '_XSUBNAME CHAR(4), '||                                    00446400
*            '/* '||ZXSUBNAME||' XSUBNAME */')                          00446500
*            NORESCAN COL(MACLMAR+2);                                   00446600
*/*PL.LL13  XRSV0002 CHAR(4) RESERVED--------------------------------*/ 00446700
*        ANS('2 '||XMFCTRL||                                            00446800
*            '_XRSV0002 CHAR(4), '||                                    00446900
*            '/* RESERVED */')                                          00447000
*            NORESCAN COL(MACLMAR+2);                                   00447100
*/*PL.LL04  XREQUEST_TYPE BIT(8) FIELD_LABEL-------------------------*/ 00447200
*        ANS('2 '||XMFCTRL||                                            00447300
*            '_XREQUEST_TYPE BIT(8), '||                                00447400
*            '/* FIELD_LABEL */')                                       00447500
*            NORESCAN COL(MACLMAR+2);                                   00447600
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00447700
*          ANS('3 '||XMFCTRL||                                          00447800
*              '_XREQUEST_CREATE BIT(1), '||                            00447900
*              '/* BIT */')                                             00448000
*              NORESCAN COL(MACLMAR+2);                                 00448100
*/*PL.LL09 BIT X1XXXXXX----------------------------------------------*/ 00448200
*          ANS('3 '||XMFCTRL||                                          00448300
*              '_XREQUEST_DISABLE BIT(1), '||                           00448400
*              '/* BIT */')                                             00448500
*              NORESCAN COL(MACLMAR+2);                                 00448600
*/*PL.LL09 BIT XX1XXXXX----------------------------------------------*/ 00448700
*          ANS('3 '||XMFCTRL||                                          00448800
*              '_XREQUEST_ENABLE BIT(1), '||                            00448900
*              '/* BIT */')                                             00449000
*              NORESCAN COL(MACLMAR+2);                                 00449100
*/*PL.LL09 BIT XXX1XXXX----------------------------------------------*/ 00449200
*          ANS('3 '||XMFCTRL||                                          00449300
*              '_XREQUEST_EXCHANGE BIT(1), '||                          00449400
*              '/* BIT */')                                             00449500
*              NORESCAN COL(MACLMAR+2);                                 00449600
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00449700
*          ANS('3 '||XMFCTRL||                                          00449800
*              '_XREQUEST_TYPE_RSVD1 BIT(4), '||                        00449900
*              '/* BIT */')                                             00450000
*              NORESCAN COL(MACLMAR+2);                                 00450100
*/*PL.LL13  XRSV0003 CHAR(1) RESERVED--------------------------------*/ 00450200
*        ANS('2 '||XMFCTRL||                                            00450300
*            '_XRSV0003 CHAR(1), '||                                    00450400
*            '/* RESERVED */')                                          00450500
*            NORESCAN COL(MACLMAR+2);                                   00450600
*/*PL.LL04  XMISC_FLAGS BIT(8) FIELD_LABEL---------------------------*/ 00450700
*        ANS('2 '||XMFCTRL||                                            00450800
*            '_XMISC_FLAGS BIT(8), '||                                  00450900
*            '/* FIELD_LABEL */')                                       00451000
*            NORESCAN COL(MACLMAR+2);                                   00451100
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00451200
*          ANS('3 '||XMFCTRL||                                          00451300
*              '_XLOADTOGLOBAL_YES BIT(1), '||                          00451400
*              '/* BIT */')                                             00451500
*              NORESCAN COL(MACLMAR+2);                                 00451600
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00451700
*          ANS('3 '||XMFCTRL||                                          00451800
*              '_XMISC_FLAGS_RSVD1 BIT(7), '||                          00451900
*              '/* BIT */')                                             00452000
*              NORESCAN COL(MACLMAR+2);                                 00452100
*/*PL.LL13  XRSV0004 CHAR(1) RESERVED--------------------------------*/ 00452200
*        ANS('2 '||XMFCTRL||                                            00452300
*            '_XRSV0004 CHAR(1), '||                                    00452400
*            '/* RESERVED */')                                          00452500
*            NORESCAN COL(MACLMAR+2);                                   00452600
*/*PL.LL13  XSSVTDATA PTR(31) INPUT NAME-----------------------------*/ 00452700
*        ANS('2 '||XMFCTRL||                                            00452800
*            '_XSSVTDATA PTR(31), '||                                   00452900
*            '/* '||ZXSSVTDATA||' XSSVTDATA */')                        00453000
*            NORESCAN COL(MACLMAR+2);                                   00453100
*/*PL.LL13  XMAXENTRIES FIXED(15) INPUT------------------------------*/ 00453200
*        ANS('2 '||XMFCTRL||                                            00453300
*            '_XMAXENTRIES FIXED(15), '||                               00453400
*            '/* '||ZXMAXENTRIES||' XMAXENTRIES */')                    00453500
*            NORESCAN COL(MACLMAR+2);                                   00453600
*/*PL.LL13  XSUBPOOL FIXED(8) INPUT----------------------------------*/ 00453700
*        ANS('2 '||XMFCTRL||                                            00453800
*            '_XSUBPOOL FIXED(8), '||                                   00453900
*            '/* '||ZXSUBPOOL||' XSUBPOOL */')                          00454000
*            NORESCAN COL(MACLMAR+2);                                   00454100
*/*PL.LL13  XRSV0005 CHAR(1) RESERVED--------------------------------*/ 00454200
*        ANS('2 '||XMFCTRL||                                            00454300
*            '_XRSV0005 CHAR(1), '||                                    00454400
*            '/* RESERVED */')                                          00454500
*            NORESCAN COL(MACLMAR+2);                                   00454600
*/*PL.LL13  XINTOKEN BIT(32) INPUT-----------------------------------*/ 00454700
*        ANS('2 '||XMFCTRL||                                            00454800
*            '_XINTOKEN BIT(32), '||                                    00454900
*            '/* '||ZXINTOKEN||' XINTOKEN */')                          00455000
*            NORESCAN COL(MACLMAR+2);                                   00455100
*/*PL.LL13  XRSV0008 CHAR(20) RESERVED-------------------------------*/ 00455200
*        ANS('2 '||XMFCTRL||                                            00455300
*            '_XRSV0008 CHAR(20), '||                                   00455400
*            '/* RESERVED */')                                          00455500
*            NORESCAN COL(MACLMAR+2);                                   00455600
*/*PL.LL13  XRSV0006 CHAR(4) RESERVED--------------------------------*/ 00455700
*        ANS('2 '||XMFCTRL||                                            00455800
*            '_XRSV0006 CHAR(4), '||                                    00455900
*            '/* RESERVED */')                                          00456000
*            NORESCAN COL(MACLMAR+2);                                   00456100
*/*PL.LL13  XOUTTOKEN BIT(32) OUTPUT---------------------------------*/ 00456200
*        ANS('2 '||XMFCTRL||                                            00456300
*            '_XOUTTOKEN BIT(32), '||                                   00456400
*            '/* '||ZXOUTTOKEN||' XOUTTOKEN */')                        00456500
*            NORESCAN COL(MACLMAR+2);                                   00456600
*/*PL.LL13  XERRFUNCT CHAR(8) OUTPUT---------------------------------*/ 00456700
*        ANS('2 '||XMFCTRL||                                            00456800
*            '_XERRFUNCT CHAR(8), '||                                   00456900
*            '/* '||ZXERRFUNCT||' XERRFUNCT */')                        00457000
*            NORESCAN COL(MACLMAR+2);                                   00457100
*/*PL.LL13  XRSV0007 CHAR(4) RESERVED--------------------------------*/ 00457200
*        ANS('2 '||XMFCTRL||                                            00457300
*            '_XRSV0007 CHAR(4), '||                                    00457400
*            '/* RESERVED */')                                          00457500
*            NORESCAN COL(MACLMAR+2);                                   00457600
*/*PL.LL13  XPLISTPTR FIXED(31) INPUT--------------------------------*/ 00457700
*        ANS('2 '||XMFCTRL||                                            00457800
*            '_XPLISTPTR PTR(31), '||                                   00457900
*            '/* '||ZXPLISTPTR||' XPLISTPTR */')                        00458000
*            NORESCAN COL(MACLMAR+2);                                   00458100
*/*PL.LL18 ----------------------------------------------------------*/ 00458200
*        ANS('2 * CHAR(0);')                                            00458300
*            NORESCAN COL(MACLMAR+2);                                   00458400
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00458500
*      END;                                                             00458600
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00458700
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00458800
*  DEACT ZPRMLINE;                                                      00458900
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00459000
*  DEACT ZNDX;                                                          00459100
*  ZNDX=MACINDEX(1:4);         /* MACINDEX LAST THREE DIGITS        */  00459200
*  DCL XVERSION CHAR;                                                   00459300
*  DEACT XVERSION;                                                      00459400
*/*PL.L02 ?IEFSSVT PARAMETER LIST------------------------------------*/ 00459500
*  IF XMF^='L'                                                          00459600
*    THEN                                                               00459700
*      DO;                                                              00459800
*/*PL.L03 ?IEFSSVT PARAMETER LIST------------------------------------*/ 00459900
*        IF XMF='S'                                                     00460000
*          THEN                                                         00460100
*            XMFCTRL='#ZPLIST';                                         00460200
*/*PL.L04 ?IEFSSVT PARAMETER LIST------------------------------------*/ 00460300
*        ZPRMLINE='DCL 1 #Z'||ZNDX||' DEF('||XMFCTRL||'),'||            00460400
*                 ' /* ?IEFSSVT PARM LIST*/';                           00460500
*/*PL.L08  XVT_PLIST_ID CHAR(4) CONSTANT-----------------------------*/ 00460600
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00460700
*                 '_XVT_PLIST_ID CHAR(4), '||                           00460800
*                 '/* '||ZXVT_PLIST_ID||' XVT_PLIST_ID */';             00460900
*/*PL.L05  XPLISTLEN FIXED(16) BDY(BYTE) INPUT-----------------------*/ 00461000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00461100
*                 '_XPLISTLEN FIXED(16) BDY(BYTE), '||                  00461200
*                 '/* INPUT XPLISTLEN*/';                               00461300
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00461400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00461500
*                 '_XVERSION FIXED(8), '||                              00461600
*                 '/* INPUT XVERSION*/';                                00461700
*/*PL.L08  XRSV0001 CHAR(1) RESERVED---------------------------------*/ 00461800
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00461900
*                 '_XRSV0001 CHAR(1), '||                               00462000
*                 '/* RESERVED */';                                     00462100
*/*PL.L08  XSUBNAME CHAR(4) INPUT------------------------------------*/ 00462200
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00462300
*                 '_XSUBNAME CHAR(4), '||                               00462400
*                 '/* '||ZXSUBNAME||' XSUBNAME */';                     00462500
*/*PL.L08  XRSV0002 CHAR(4) RESERVED---------------------------------*/ 00462600
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00462700
*                 '_XRSV0002 CHAR(4), '||                               00462800
*                 '/* RESERVED */';                                     00462900
*/*PL.L08  XREQUEST_TYPE BIT(8) FIELD_LABEL--------------------------*/ 00463000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00463100
*                 '_XREQUEST_TYPE BIT(8), '||                           00463200
*                 '/* FIELD_LABEL */';                                  00463300
*/*PL.L08  XRSV0003 CHAR(1) RESERVED---------------------------------*/ 00463400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00463500
*                 '_XRSV0003 CHAR(1), '||                               00463600
*                 '/* RESERVED */';                                     00463700
*/*PL.L08  XMISC_FLAGS BIT(8) FIELD_LABEL----------------------------*/ 00463800
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00463900
*                 '_XMISC_FLAGS BIT(8), '||                             00464000
*                 '/* FIELD_LABEL */';                                  00464100
*/*PL.L08  XRSV0004 CHAR(1) RESERVED---------------------------------*/ 00464200
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00464300
*                 '_XRSV0004 CHAR(1), '||                               00464400
*                 '/* RESERVED */';                                     00464500
*/*PL.L08  XSSVTDATA PTR(31) INPUT NAME------------------------------*/ 00464600
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00464700
*                 '_XSSVTDATA PTR(31), '||                              00464800
*                 '/* '||ZXSSVTDATA||' XSSVTDATA */';                   00464900
*/*PL.L08  XMAXENTRIES FIXED(15) INPUT-------------------------------*/ 00465000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00465100
*                 '_XMAXENTRIES FIXED(15), '||                          00465200
*                 '/* '||ZXMAXENTRIES||' XMAXENTRIES */';               00465300
*/*PL.L08  XSUBPOOL FIXED(8) INPUT-----------------------------------*/ 00465400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00465500
*                 '_XSUBPOOL FIXED(8), '||                              00465600
*                 '/* '||ZXSUBPOOL||' XSUBPOOL */';                     00465700
*/*PL.L08  XRSV0005 CHAR(1) RESERVED---------------------------------*/ 00465800
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00465900
*                 '_XRSV0005 CHAR(1), '||                               00466000
*                 '/* RESERVED */';                                     00466100
*/*PL.L08  XINTOKEN BIT(32) INPUT------------------------------------*/ 00466200
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00466300
*                 '_XINTOKEN BIT(32), '||                               00466400
*                 '/* '||ZXINTOKEN||' XINTOKEN */';                     00466500
*/*PL.L08  XRSV0008 CHAR(20) RESERVED--------------------------------*/ 00466600
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00466700
*                 '_XRSV0008 CHAR(20), '||                              00466800
*                 '/* RESERVED */';                                     00466900
*/*PL.L08  XRSV0006 CHAR(4) RESERVED---------------------------------*/ 00467000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00467100
*                 '_XRSV0006 CHAR(4), '||                               00467200
*                 '/* RESERVED */';                                     00467300
*/*PL.L08  XOUTTOKEN BIT(32) OUTPUT----------------------------------*/ 00467400
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00467500
*                 '_XOUTTOKEN BIT(32), '||                              00467600
*                 '/* '||ZXOUTTOKEN||' XOUTTOKEN */';                   00467700
*/*PL.L08  XERRFUNCT CHAR(8) OUTPUT----------------------------------*/ 00467800
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00467900
*                 '_XERRFUNCT CHAR(8), '||                              00468000
*                 '/* '||ZXERRFUNCT||' XERRFUNCT */';                   00468100
*/*PL.L08  XRSV0007 CHAR(4) RESERVED---------------------------------*/ 00468200
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00468300
*                 '_XRSV0007 CHAR(4), '||                               00468400
*                 '/* RESERVED */';                                     00468500
*/*PL.L09  XPLISTPTR FIXED(31) INPUT---------------------------------*/ 00468600
*        ZPRMNUM=ZPRMNUM+1;                                             00468700
*        ZPRM(ZPRMNUM)=ZPRMLINE||' 2 #Z'||ZNDX||                        00468800
*            '_XPLISTPTR FIXED(31), '||                                 00468900
*            '/* '||ZXPLISTPTR||' XPLISTPTR */';                        00469000
*        ZPRMLINE='';                                                   00469100
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00469200
*        ZPRMNUM=ZPRMNUM+1;                                             00469300
*        ZPRM(ZPRMNUM)=ZPRMLINE||' 2 * CHAR(0);';                       00469400
*        IF XPLISTVER^=1                                                00469500
*           & XMF^='S'                                                  00469600
*          THEN                                                         00469700
*            DO;                                                        00469800
*              ZPRMNUM=ZPRMNUM+1;                                       00469900
*              ZPRM(ZPRMNUM)=                                           00470000
*               'DCL #Z'||ZNDX||'_LENCHECK FIXED(32) CONSTANT('||       00470100
*               'LENGTH('||XMFCTRL||')-LENGTH(#Z'||ZNDX||'));'||        00470200
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'||            00470300
*               ' IS LONG ENOUGH */';                                   00470400
*            END;                                                       00470500
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00470600
*        ZPLLEN=76;                                                     00470700
*        IF ZPRMMAX<ZPLLEN                                              00470800
*           & XMF^='E'                                                  00470900
*          THEN                                                         00471000
*            ZPRMMAX=ZPLLEN;                                            00471100
*/*PL.L13 -----------------------------------------------------------*/ 00471200
*      END;                                                             00471300
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00471400
*  IF XMF^='L'                                                          00471500
*    THEN                                                               00471600
*      DO;                                                              00471700
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00471800
*            ANS('#Z'||ZNDX||'=''''B;'||                                00471900
*                '/* CLEAR PARAMETER AREA */')                          00472000
*                NORESCAN COL(MACLMAR);                                 00472100
*/*PI.L28 XVT_PLIST_ID  CHAR(4)--------------------------------------*/ 00472200
*        ANS('#Z'||ZNDX||'_XVT_PLIST_ID=''VTPL'';'||                    00472300
*            '/* XVT_PLIST_ID CHAR(4) CONSTANT */')                     00472400
*            NORESCAN COL(MACLMAR);                                     00472500
*/*PI.L05C XPLISTLEN FIXED(16)---------------------------------------*/ 00472600
*        ANS('#Z'||ZNDX||'_XPLISTLEN=LENGTH(#Z'||ZNDX||');'||           00472700
*            '/* XPLISTLEN FIXED(16) */')                               00472800
*            NORESCAN COL(MACLMAR);                                     00472900
*/*PI.L05B XVERSION FIXED(8)-----------------------------------------*/ 00473000
*        IF XPLISTVER^=0                                                00473100
*          THEN                                                         00473200
*            ANS('#Z'||ZNDX||'_XVERSION='||CHAR(XPLISTVER)||'; '||      00473300
*                '/* XVERSION FIXED(8) */')                             00473400
*                NORESCAN COL(MACLMAR);                                 00473500
*/*PI.L21 XSUBNAME NAME CHAR(4)--------------------------------------*/ 00473600
*        IF ZXSUBNAME='INPUT' |                                         00473700
*           ZXSUBNAME='INOUT'                                           00473800
*          THEN                                                         00473900
*            ANS('#Z'||ZNDX||'_XSUBNAME='||                             00474000
*                XSUBNAME||';'||                                        00474100
*                '/* XSUBNAME CHAR(4) */')                              00474200
*                NORESCAN COL(MACLMAR);                                 00474300
*/*PI.L06 XREQUEST_TYPE BIT(8)---------------------------------------*/ 00474400
*        ZW='';                                                         00474500
*        ZMS='';                                                        00474600
*/*PI.L07 XREQUEST_TYPE BIT(8) 1XXXXXXX------------------------------*/ 00474700
*        IF XREQUEST='CREATE'                                           00474800
*          THEN                                                         00474900
*            ZW=ZW||'1';                                                00475000
*          ELSE                                                         00475100
*            ZW=ZW||'0';                                                00475200
*/*PI.L07 XREQUEST_TYPE BIT(8) X1XXXXXX------------------------------*/ 00475300
*        IF XREQUEST='DISABLE'                                          00475400
*          THEN                                                         00475500
*            ZW=ZW||'1';                                                00475600
*          ELSE                                                         00475700
*            ZW=ZW||'0';                                                00475800
*/*PI.L07 XREQUEST_TYPE BIT(8) XX1XXXXX------------------------------*/ 00475900
*        IF XREQUEST='ENABLE'                                           00476000
*          THEN                                                         00476100
*            ZW=ZW||'1';                                                00476200
*          ELSE                                                         00476300
*            ZW=ZW||'0';                                                00476400
*/*PI.L07 XREQUEST_TYPE BIT(8) XXX1XXXX------------------------------*/ 00476500
*        IF XREQUEST='EXCHANGE'                                         00476600
*          THEN                                                         00476700
*            ZW=ZW||'10000';                                            00476800
*          ELSE                                                         00476900
*            ZW=ZW||'00000';                                            00477000
*/*PI.L09 XREQUEST_TYPE BIT(8)---------------------------------------*/ 00477100
*        IF INDEX(ZW,'1')^=0                                            00477200
*          THEN                                                         00477300
*            ANS('#Z'||ZNDX||'_XREQUEST_TYPE='||                        00477400
*                '#Z'||ZNDX||'_XREQUEST_TYPE | '||                      00477500
*                ''''||ZW||'''B; '||                                    00477600
*                '/* BIT(8) */')                                        00477700
*                NORESCAN COL(MACLMAR);                                 00477800
*/*PI.L06 XMISC_FLAGS BIT(8)-----------------------------------------*/ 00477900
*        ZW='';                                                         00478000
*        ZMS='';                                                        00478100
*/*PI.L07 XMISC_FLAGS BIT(8) 1XXXXXXX--------------------------------*/ 00478200
*        IF XLOADTOGLOBAL='YES'                                         00478300
*          THEN                                                         00478400
*            ZW=ZW||'10000000';                                         00478500
*          ELSE                                                         00478600
*            ZW=ZW||'00000000';                                         00478700
*/*PI.L09 XMISC_FLAGS BIT(8)-----------------------------------------*/ 00478800
*        IF INDEX(ZW,'1')^=0                                            00478900
*          THEN                                                         00479000
*            ANS('#Z'||ZNDX||'_XMISC_FLAGS='||                          00479100
*                '#Z'||ZNDX||'_XMISC_FLAGS | '||                        00479200
*                ''''||ZW||'''B; '||                                    00479300
*                '/* BIT(8) */')                                        00479400
*                NORESCAN COL(MACLMAR);                                 00479500
*/*PI.L23 XSSVTDATA NAME---------------------------------------------*/ 00479600
*        IF ZXSSVTDATA^=''                                              00479700
*          THEN                                                         00479800
*            ANS('#Z'||ZNDX||'_XSSVTDATA='||                            00479900
*                'ADDR('||XSSVTDATA||');'||                             00480000
*                '/* XSSVTDATA NAME */')                                00480100
*                NORESCAN COL(MACLMAR);                                 00480200
*/*PI.L17 XMAXENTRIES FIXED(15)--------------------------------------*/ 00480300
*        IF ZXMAXENTRIES='INPUT' |                                      00480400
*           ZXMAXENTRIES='INOUT'                                        00480500
*          THEN                                                         00480600
*            ANS('#Z'||ZNDX||'_XMAXENTRIES='||                          00480700
*                XMAXENTRIES||';'||                                     00480800
*                '/* XMAXENTRIES FIXED(15) */')                         00480900
*                NORESCAN COL(MACLMAR);                                 00481000
*/*PI.L17 XSUBPOOL FIXED(8)------------------------------------------*/ 00481100
*        IF ZXSUBPOOL='INPUT' |                                         00481200
*           ZXSUBPOOL='INOUT'                                           00481300
*          THEN                                                         00481400
*            ANS('#Z'||ZNDX||'_XSUBPOOL='||                             00481500
*                XSUBPOOL||';'||                                        00481600
*                '/* XSUBPOOL FIXED(8) */')                             00481700
*                NORESCAN COL(MACLMAR);                                 00481800
*/*PI.L14 CHECK FOR * AS THE BIT(32) ARGUMENT------------------------*/ 00481900
*        IF XINTOKEN='NULL'                                             00482000
*          THEN                                                         00482100
*            ZXINTOKEN='';                   /* RESET INPUT/INOUT */    00482200
*/*PI.L19 XINTOKEN NAME BIT(32)--------------------------------------*/ 00482300
*        IF ZXINTOKEN='INPUT' |                                         00482400
*           ZXINTOKEN='INOUT'                                           00482500
*          THEN                                                         00482600
*            IF (XINTOKEN(1:1)^='0' &                                   00482700
*               XINTOKEN(1:1)^='1')                                     00482800
*              THEN                                                     00482900
*                ANS('#Z'||ZNDX||'_XINTOKEN='||                         00483000
*                    XINTOKEN||';'||                                    00483100
*                    '/* XINTOKEN BIT(32) */')                          00483200
*                    NORESCAN COL(MACLMAR);                             00483300
*              ELSE                                                     00483400
*                ANS('#Z'||ZNDX||'_XINTOKEN='||                         00483500
*                    ''''||XINTOKEN||'''B;'||                           00483600
*                    '/* XINTOKEN BIT(32) */')                          00483700
*                    NORESCAN COL(MACLMAR);                             00483800
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00483900
*              IF NUMBER(RSNCODE)>0                                     00484000
*                THEN                                                   00484100
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       00484200
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00484300
*              ANS('#Z'||ZNDX||'_XPLISTPTR=ADDR(#Z'||ZNDX||');'||       00484400
*                  '/* STORE PARM LIST ADDR */')                        00484500
*                  NORESCAN COL(MACLMAR);                               00484600
*              ANS('GPR01P=ADDR(#Z'||ZNDX||'_XPLISTPTR);'||             00484700
*                  '/* LOAD PARM LIST ADDR INTO R1*/')                  00484800
*                  NORESCAN COL(MACLMAR);                               00484900
*              IF SYSASCE^='P'                                          00485000
*                THEN                                                   00485100
*                  ANS('SAR(GPR01P,ALET(#Z'||ZNDX||'));'||              00485200
*                      '/* PARAMETER LIST AR */')                       00485300
*                      NORESCAN COL(MACLMAR);                           00485400
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00485500
*/********************************************************************/ 00485600
*/* Invoke IEFSSVT service routine                                   */ 00485700
*/********************************************************************/ 00485800
*DCL EHAMAPS CHAR EXT;              /*                           @P2A*/ 00485900
*IF INDEX(EHAMAPS,'XM@')=0 THEN                                         00486000
*    EHAMAPS=EHAMAPS||'XM@,';       /*                           @P2A*/ 00486100
*                                                                       00486200
*ANS('RFY GPR15F RSTD;') NOSCAN COL(MACCOL+2);                          00486300
*ANS('IF ((XM@CVT->CVTOSEXT) & (XM@CVT->CVTH5520)) THEN')               00486400
*    NOSCAN COL(MACCOL+2);          /*                           @P2A*/ 00486500
*ANS('/* Test whether service available */') NOSCAN COL(37); /*  @P2A*/ 00486600
*ANS('IF (XM@CVT->CVTJESCT->JESCTEXT->JESVTPC ^= 0) THEN')              00486700
*    NOSCAN COL(MACCOL+4);          /*                           @P2C*/ 00486800
*ANS('/* Test whether service available */') NOSCAN COL(37);            00486900
*                                                                       00487000
*ANS('PC(XM@CVT->CVTJESCT->JESCTEXT->JESVTPC);')                        00487100
*    NOSCAN COL(MACCOL+6);          /*                           @P2C*/ 00487200
*ANS('/* Process service request */') NOSCAN COL(37);                   00487300
*                                                                       00487400
*ANS('ELSE') NOSCAN COL(MACCOL+4);                                      00487500
*ANS('/* Service not available */') NOSCAN COL(37);                     00487600
*                                                                       00487700
*ANS('GPR15F = IEFSSVT_UNAVAILABLE;') NOSCAN COL(MACCOL+6);             00487800
*ANS('/* Indicate service not available */') NOSCAN COL(37);            00487900
*                                                                       00488000
*ANS('ELSE') NOSCAN COL(MACCOL+2);  /*                           @P2A*/ 00488100
*ANS('/* Service not available */') NOSCAN COL(37);  /*          @P2A*/ 00488200
*                                                                       00488300
*ANS('GPR15F = IEFSSVT_UNAVAILABLE;') NOSCAN COL(MACCOL+4); /*   @P2A*/ 00488400
*ANS('/* Indicate service not available */') NOSCAN COL(37);  /* @P2A*/ 00488500
*ANS('RFY GPR15F UNRSTD;') NOSCAN COL(MACCOL+2);                        00488600
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00488700
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00488800
*              IF NUMBER(RETCODE)>0                                     00488900
*                THEN                                                   00489000
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00489100
*/*PO.L04 XOUTTOKEN BIT(32)------------------------------------------*/ 00489200
*              IF ZXOUTTOKEN='OUTPUT' |                                 00489300
*                 ZXOUTTOKEN='INOUT'                                    00489400
*                THEN                                                   00489500
*                  ANS(XOUTTOKEN||                                      00489600
*                      '=#Z'||ZNDX||'_XOUTTOKEN;'||                     00489700
*                      '/* XOUTTOKEN BIT(32) */')                       00489800
*                      NORESCAN COL(MACLMAR);                           00489900
*/*PO.L05 XERRFUNCT CHAR(8)------------------------------------------*/ 00490000
*              IF ZXERRFUNCT='OUTPUT' |                                 00490100
*                 ZXERRFUNCT='INOUT'                                    00490200
*                THEN                                                   00490300
*                  ANS(XERRFUNCT||                                      00490400
*                      '=#Z'||ZNDX||'_XERRFUNCT;'||                     00490500
*                      '/* XERRFUNCT CHAR(8) */')                       00490600
*                      NORESCAN COL(MACLMAR);                           00490700
*/*PO.L08 XRETCODE CHAR(8) RETURN CODE-------------------------------*/ 00490800
*              IF NUMBER(RETCODE)>0                                     00490900
*                THEN                                                   00491000
*                    ANS(XRETCODE||                                     00491100
*                     '=GPR15F; /* SET RETURN CODE */')                 00491200
*                      NORESCAN COL(MACLMAR);                           00491300
*/*PO.L09 XRSNCODE CHAR(8) REASON CODE-------------------------------*/ 00491400
*              IF NUMBER(RSNCODE)>0                                     00491500
*                THEN                                                   00491600
*                    ANS(XRSNCODE||                                     00491700
*                     '=GPR00F; /* SET REASON CODE */')                 00491800
*                      NORESCAN COL(MACLMAR);                           00491900
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00492000
*              IF NUMBER(RSNCODE)>0                                     00492100
*                THEN                                                   00492200
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         00492300
*              IF NUMBER(RETCODE)>0                                     00492400
*                THEN                                                   00492500
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00492600
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00492700
*      END;                                                             00492800
*/*PO.L13 IEFSSVT USAGE INDICATOR------------------------------------*/ 00492900
*  ZIEFSSVT='YES';                           /* SET IEFSSVT USED */     00493000
*/*PO.L15 END OF EXECUTABLE IEFSSVT-PLISTVER MACRO-------------------*/ 00493100
*  IF XMF^='L'                                                          00493200
*    THEN                                                               00493300
*      ANS('END; /* IEFSSVT-PLISTVER */')                               00493400
*          NORESCAN COL(MACLMAR);                                       00493500
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00493600
*  ANS(MACCONC||'LIST POP;') NORESCAN COL(MACLMAR);                     00493700
*/*PO.L17 END OF IEFSSVT MACRO---------------------------------------*/ 00493800
*  ANS(MACCONC||'SPACE;') NORESCAN COL(MACLMAR);                        00493900
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00494000
*/*******************************************************************/  00494100
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00494200
*/*******************************************************************/  00494300
*      END;                                                             00494400
*/*******************************************************************/  00494500
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00494600
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00494700
*/*******************************************************************/  00494800
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00494900
*    THEN                                                               00495000
*      DO;                                                              00495100
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00495200
*                                      DOUBLEWORD MULTIPLES        */   00495300
*/*******************************************************************/  00495400
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00495500
*/*******************************************************************/  00495600
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00495700
*          THEN                                                         00495800
*            DO;                                                        00495900
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00496000
*                THEN                                                   00496100
*                  DO;                                                  00496200
*                    ANS('?EPILOG                                       00496300
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00496400
*                    EHALIST=EHALIST||',AMG,';                          00496500
*                  END;                                                 00496600
*            END;                                                       00496700
*/*******************************************************************/  00496800
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00496900
*/*******************************************************************/  00497000
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00497100
*          THEN                                                         00497200
*            DO;                                                        00497300
*              IF ZPRMMAX>EHAMAXLEN                                     00497400
*                THEN                                                   00497500
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00497600
*            END;                                                       00497700
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00497800
*          ANS('?EPILOG STRING('''||ZPRM(ZI)||''');')                   00497900
*              COL(MACLMAR);                                            00498000
*        END;                                                           00498100
*      END;                                                             00498200
*/*-----------------------------------------------------------------*/  00498300
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00498400
*/*        BY ?EPILOG                                               */  00498500
*/*-----------------------------------------------------------------*/  00498600
*        IF INDEX(EHAREGS,'01P')=0                                      00498700
*          THEN                                                         00498800
*            EHAREGS=EHAREGS||'01P'; /* GPR01P                      */  00498900
*        IF INDEX(EHAREGS,'00F')=0                                      00499000
*          & NUMBER(RSNCODE)>0                                          00499100
*          THEN                                                         00499200
*            EHAREGS=EHAREGS||'00F'; /* GPR00F                      */  00499300
*        IF INDEX(EHAREGS,'15F')=0                                      00499400
*          THEN                                                         00499500
*            EHAREGS=EHAREGS||'15F'; /* GPR15F                      */  00499600
*  RETURN CODE(ZMACRET);                                                00499700
*%END IEFSSVT;                                                          00499800
