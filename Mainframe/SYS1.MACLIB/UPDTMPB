*/***START OF SPECIFICATIONS******************************************/ 00050000
*/* $MAC(UPDTMPB) COMP(SCMMS) PROD(HBB4410): MMS Build MPB token     */ 00100000
*/*                                           macro                  */ 00150000
*/*01* MACRO NAME       =   UPDTMPB                              @L1C*/ 00200000
*/*                                                                  */ 00250000
*/*01* DESCRIPTIVE NAME =   MMS - (MVS Message Service) Build        */ 00300000
*/*                         MPB Token Macro                          */ 00350000
*/*                                                                  */ 00400000
*/*    PROPRIETARY STATEMENT =                                       */ 00450000
*/*                                                                  */ 00500000
*/*    LICENSED MATERIALS - PROPERTY OF IBM                          */ 00650000
*/*    THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                   */ 00662500
*/*    5695-047 (C) COPYRIGHT IBM CORP. 1990                         */ 00675000
*/*    SEE COPYRIGHT INSTRUCTIONS.                                   */ 00687500
*/*                                                                  */ 00700000
*/*    STATUS           =  HBB4410                                   */ 00750000
*/*                                                                  */ 00800000
*/*01  FUNCTION      =  This macro generates executable in-line      */ 00850000
*/*                     assembler code to add or change one          */ 00900000
*/*                     substitution block in the variable data area */ 00950000
*/*                     of a Message Parameter Block (MPB).          */ 01000000
*/*                     The offset of the new or changed substitution*/ 01050000
*/*                     block from the start of the MPB is returned  */ 01100000
*/*                     in a field specified by the user.            */ 01150000
*/*                                                                  */ 01200000
*/*01* OPERATION     =  This macro is invoked with details of the    */ 01250000
*/*                     storage allocated for the MPB and information*/ 01300000
*/*                     regarding the substitution block that is to  */ 01350000
*/*                     be added or updated.                         */ 01400000
*/*                                                                  */ 01450000
*/*                     When updating an existing substitution       */ 01500000
*/*                     block, UPDTMPB will truncate the new     @L1C*/ 01550000
*/*                     substitution data if it is longer than the   */ 01600000
*/*                     existing data and will pad it with blanks    */ 01650000
*/*                     if it is shorter.                            */ 01700000
*/*                                                                  */ 01750000
*/*                     Upon return from the build token function,   */ 01800000
*/*                     registers 2-13 are preserved, register 15    */ 01850000
*/*                     contains the return code and register 0      */ 01900000
*/*                     contains the reason code. Registers 1 and    */ 01950000
*/*                     14 are unpredictable.                        */ 02000000
*/*                                                                  */ 02050000
*/*01* INVOCATION    =                                               */ 02100000
*/*                                                                  */ 02150000
*/*      MACRO SYNTAX                                                */ 02200000
*/*                                                                  */ 02250000
*/*      < > Optional Parameter                                      */ 02300000
*/*       |  Alternative Item                                        */ 02350000
*/*                                                                  */ 02400000
*/*      UPDTMPB    MPBPTR=mpb address                               */ 02450000
*/*                ,MPBLEN=mpb length                                */ 02500000
*/*                ,SUBOOFST=new/changed block offset                */ 02550000
*/*                <,SUBCOFST=existing block offset >                */ 02600000
*/*                ,TOKEN=token name                                 */ 02650000
*/*                <,TOKLEN=token length >                           */ 02700000
*/*                ,TOKTYPE=token type                               */ 02750000
*/*                ,SUBSDATA=substitution data                       */ 02800000
*/*                <,SUBSLEN=length of substitution data >       @L1C*/ 02850000
*/*                                                                  */ 02900000
*/*                                                                  */ 02950000
*/*      MPBPTR  : RX-type address or register (2) - (12).           */ 03000000
*/*                Specifies a fullword, or register, containing the */ 03050000
*/*                address of the Message Parameter Block to be      */ 03100000
*/*                modified.                                         */ 03150000
*/*      MPBLEN  : RX-type address or register (2) - (12).           */ 03200000
*/*                Specifies a fullword, or register, containing the */ 03250000
*/*                length of the area addressed by MPBPTR.           */ 03300000
*/*      SUBOOFST: RX-type address or register (2) - (12).           */ 03350000
*/*                Specifies a fullword, or register, where the      */ 03400000
*/*                macro is to return the value of the offset from   */ 03450000
*/*                the start of the MPB to the new or changed        */ 03500000
*/*                substitution block.                               */ 03550000
*/*      SUBCOFST: RX-type address or register (2) - (12).           */ 03600000
*/*                Specifies a fullword, or register, containing the */ 03650000
*/*                offset from the start of the MPB to the existing  */ 03700000
*/*                substitution block which is to be updated.        */ 03750000
*/*                If this parameter is omitted then the macro will  */ 03800000
*/*                build a new substitution block.                   */ 03850000
*/*      TOKEN     RX-type address or register (2) - (12).           */ 03900000
*/*                Specifies an area, or register pointing to an     */ 03950000
*/*                area, containing the name of the substitution     */ 04000000
*/*                token.                                            */ 04050000
*/*      TOKLEN  : RX-type address or register (2) - (12).           */ 04100000
*/*                Specifies a fullword, or register, containing the */ 04150000
*/*                length of the TOKEN field. If not specified, it   */ 04200000
*/*                will default to the assembled length of the TOKEN */ 04250000
*/*                parameter. Must be specified if register notation */ 04300000
*/*                is used for the TOKEN parameter.                  */ 04350000
*/*      TOKTYPE : RX-type address or register (2) - (12).           */ 04400000
*/*                Specifies an area, or register pointing to an     */ 04450000
*/*                area, containing the 1-byte token type. This      */ 04500000
*/*                field may have the following values and meanings: */ 04550000
*/*                      C'0' - text                                 */ 04600000
*/*                      C'1' - date                                 */ 04650000
*/*                      C'2' - time                                 */ 04700000
*/*                      C'3' - day                                  */ 04750000
*/*      SUBSDATA  RX-type address or register (2) - (12).           */ 04800000
*/*                Specifies an area, or register pointing to an     */ 04850000
*/*                area, containing the substitution data.           */ 04900000
*/*      SUBSLEN   RX-type address or register (2) - (12).           */ 04950000
*/*                Specifies a fullword, or register, containing the */ 05000000
*/*                length of the SUBSDATA field. If omitted, it will */ 05050000
*/*                default to the assembled length of the SUBSDATA   */ 05100000
*/*                parameter. Must be specified if register notation */ 05150000
*/*                is used for the SUBSDATA parameter.               */ 05200000
*/*                                                                  */ 05250000
*/*01* USAGE         =  MVS Message Service caller                   */ 05300000
*/*                                                                  */ 05350000
*/*01* AUTHORIZATION      = ANY                                      */ 05358300
*/*                                                                  */ 05366600
*/*01* DISPATCHABLE UNIT MODE = TASK, SRB                            */ 05369300
*/*                                                                  */ 05372000
*/*01* CROSS-MEMORY MODE  = PASN not equal HASN is supported         */ 05374900
*/*                                                                  */ 05383200
*/*01* AMODE              = ANY                                      */ 05391500
*/*                                                                  */ 05399800
*/*01* ASC MODE           = PRIMARY                                  */ 05402500
*/*                                                                  */ 05405200
*/*01* SERIALIZATION      = None                                     */ 05408100
*/*                                                                  */ 05416400
*/*01* CONTROL PARAMETERS = None                                     */ 05424700
*/*                                                                  */ 05433000
*/*01* DEPENDENCIES  =                                               */ 05441300
*/*                     The invoking module must include the CNLMMPB */ 05450000
*/*                     mapping macro.                               */ 05500000
*/*                                                                  */ 05550000
*/*01* RETURN CODES  =  Normal                                       */ 05600000
*/*                       -     R15 = 0 and R0 = 0                   */ 05650000
*/*                     Severe                                       */ 05700000
*/*                       - Insufficient storage in MPB              */ 05750000
*/*                             R15 = 12 and R0 = 51                 */ 05800000
*/*                       - TOKLEN is zero or negative               */ 05850000
*/*                             R15 = 12 and R0 = 53                 */ 05900000
*/*                       - SUBSLEN is negative                      */ 05950000
*/*                             R15 = 12 and R0 = 54                 */ 06000000
*/*                       - TOKTYPE value is invalid                 */ 06050000
*/*                             R15 = 12 and R0 = 55                 */ 06100000
*/*                       - SUBCOFST is invalid (not within MPBVDAT) */ 06150000
*/*                             R15 = 12 and R0 = 56                 */ 06200000
*/*                       - MPB Acronym is invalid                   */ 06250000
*/*                             R15 = 12 and R0 = 59                 */ 06300000
*/*                                                                  */ 06350000
*/*01* MODULE TYPE   =  ASSEMBLER MACRO                              */ 06400000
*/*                                                                  */ 06450000
*/*01* COMPONENT     =  SCMMS                                        */ 06500000
*/*                                                                  */ 06550000
*/*01* DISTRIBUTION LIBRARY = AMACLIB                                */ 06600000
*/*                                                                  */ 06650000
*/*01* CHANGE ACTIVITY  =                                            */ 06700000
*/*                                                                  */ 06750000
*/* Code Reason   FMID    Date  Origin  Comments                     */ 06800000
*/* ---- ------- ------- ------ ------  ---------------------------- */ 06850000
*/* $L0= MMS     HBB4410 890401 STOW:   Original Code                */ 06883300
*/* $L1= MMS     HBB4410 890627 PDDH:   Retrofit for SP4.1.0         */ 06916600
*/*                                                                  */ 06950000
*/*                                                                  */ 07000000
*/*01* MESSAGES      =                                               */ 07050000
*/*                                                                  */ 07100000
*/*     The UPDTMPB macro will issue the following MNOTEs            */ 07150000
*/*     upon detection of syntax errors:                             */ 07200000
*/*                                                                  */ 07250000
*/*      ERROR = (severity 4)                                        */ 07300000
*/*        POSITIONAL PARAMETER "xxxxxxxx" IS INVALID                */ 07350000
*/*                                                                  */ 07400000
*/*      ERROR = (severity 12)                                       */ 07450000
*/*        MPBPTR OPERAND IS INVALID OR MISSING, NO TEXT IS          */ 07500000
*/*               GENERATED.                                         */ 07550000
*/*        MPBLEN OPERAND IS INVALID OR MISSING, NO TEXT IS          */ 07600000
*/*               GENERATED.                                         */ 07650000
*/*        SUBOOFST OPERAND IS INVALID OR MISSING, NO TEXT IS        */ 07700000
*/*               GENERATED.                                         */ 07750000
*/*        SUBCOFST OPERAND IS INVALID, NO TEXT IS GENERATED.        */ 07800000
*/*        TOKLEN OPERAND IS INVALID OR MISSING, NO TEXT IS          */ 07850000
*/*               GENERATED.                                         */ 07900000
*/*        TOKTYPE OPERAND IS INVALID OR MISSING, NO TEXT IS         */ 07950000
*/*               GENERATED.                                         */ 08000000
*/*        TOKEN OPERAND IS INVALID OR MISSING, NO TEXT IS           */ 08050000
*/*               GENERATED.                                         */ 08100000
*/*        SUBSLEN OPERAND IS INVALID OR MISSING, NO TEXT IS         */ 08150000
*/*               GENERATED.                                         */ 08200000
*/*        SUBSDATA OPERAND IS INVALID OR MISSING, NO TEXT IS        */ 08250000
*/*               GENERATED.                                         */ 08300000
*/*                                                                  */ 08350000
*/*                                                                  */ 08400000
*/***END OF SPECIFICATIONS********************************************/ 08450000
* %/*                                                                   08500000
         MACRO                                                          08550000
&LABEL   UPDTMPB &MPBPTR=,                                             -08600000
               &MPBLEN=,                                               -08650000
               &SUBOOFST=,                                             -08700000
               &SUBCOFST=,                                             -08750000
               &TOKEN=,                                                -08800000
               &TOKLEN=,                                               -08850000
               &TOKTYPE=,                                              -08900000
               &SUBSDATA=,                                             -08950000
               &SUBSLEN=                                                09000000
.********************************************************************** 09050000
.*                                                                    * 09100000
.*      DECLARE LOCAL VARIABLES                                       * 09150000
.*                                                                    * 09200000
.********************************************************************** 09250000
        LCLB  &ERROR        ERROR FLAG                                  09300000
        LCLA  &TOKENL       MAXIMUM TOKEN LENGTH                        09350000
        LCLC  &GNAME        INTERNAL LABEL                              09400000
        LCLC  &NOTEXT       MNOTE PHRASE 'NO TEXT IS GENERATED.'        09450000
        LCLC  &ERRMSG1      MNOTE PHRASE                                09500000
        LCLC  &ERRMSG2      MNOTE PHRASE                                09550000
        LCLC  &MPB_ACRONYM  MPB ACRONYM                                 09600000
.********************************************************************** 09650000
.*                                                                    * 09700000
.*      INITIALIZE MACRO VARIABLES                                    * 09750000
.*                                                                    * 09800000
.********************************************************************** 09850000
&ERRMSG1      SETC  'OPERAND IS INVALID OR MISSING,'                    09900000
&ERRMSG2      SETC  'OPERAND IS INVALID,'                               09950000
&NOTEXT       SETC  'NO TEXT IS GENERATED.'                             10000000
&GNAME        SETC  'CNL'.'&SYSNDX'     SET LABEL NAME                  10050000
&MPB_ACRONYM  SETC  'MPB '              MPB ACRONYM                     10100000
.*                                                                      10150000
.********************************************************************** 10200000
.*             CHECK VALIDITY OF MACRO OPERANDS                       * 10250000
.********************************************************************** 10300000
.*                                                                      10350000
         AIF   (N'&SYSLIST EQ 0).CKPTR  TOO MANY POSITIONAL PARMS       10400000
         MNOTE 4,'POSITIONAL PARAMETER "&SYSLIST(1)" IS INVALID'        10450000
.CKPTR   ANOP                                                           10500000
         AIF   (N'&MPBPTR EQ 1).CKLEN      IS MPBPTR SPECIFIED ?        10550000
         MNOTE 12,'MPBPTR &ERRMSG1 &NOTEXT'                             10600000
&ERROR   SETB  1                                                        10650000
.CKLEN   AIF   (N'&MPBLEN EQ 1).CKOFST     IS MPBLEN SPECIFIED ?        10700000
         MNOTE 12,'MPBLEN &ERRMSG1 &NOTEXT'                             10750000
&ERROR   SETB  1                                                        10800000
.CKOFST  AIF   (N'&SUBOOFST EQ 1).CKCFST   IS SUBOOFST SPECIFIED ?      10850000
         MNOTE 12,'SUBOOFST &ERRMSG1 &NOTEXT'                           10900000
&ERROR   SETB  1                                                        10950000
.CKCFST  ANOP                                                           11000000
         AIF   (N'&SUBCOFST LT 2).CKTOKL   IS SUBCOFST SPECIFIED ?      11050000
         MNOTE 12,'SUBCOFST &ERRMSG2 &NOTEXT'                           11100000
&ERROR   SETB  1                                                        11150000
.CKTOKL  AIF   (N'&TOKLEN EQ 1).CKTOKT     IS TOKLEN SPECIFIED ?        11200000
         AIF   (N'&TOKLEN EQ 0 AND '&TOKEN'(1,1) NE '(').CKTOKT         11250000
.*              << TOKLEN MAY BE OMITTED IF TOKEN NOT = REGISTER >>     11300000
         MNOTE 12,'TOKLEN &ERRMSG1 &NOTEXT'                             11350000
&ERROR   SETB  1                                                        11400000
.CKTOKT  AIF   (N'&TOKTYPE EQ 1).CKTOKEN                                11450000
         MNOTE 12,'TOKTYPE &ERRMSG1 &NOTEXT'                            11500000
&ERROR   SETB  1                                                        11550000
.CKTOKEN AIF   (N'&TOKEN EQ 1).CKSLEN                                   11600000
         MNOTE 12,'TOKEN &ERRMSG1 &NOTEXT'                              11650000
&ERROR   SETB  1                                                        11700000
.CKSLEN  AIF   (N'&SUBSLEN EQ 1).CKSDATA                                11750000
         AIF   (N'&SUBSLEN EQ 0 AND '&SUBSDATA'(1,1) NE '(').CKSDATA    11800000
.*              << SUBSLEN MAY BE OMITTED IF SUBSDATA NOT = REGISTER >> 11850000
         MNOTE 12,'SUBSLEN &ERRMSG1 &NOTEXT'                            11900000
&ERROR   SETB  1                                                        11950000
.CKSDATA  AIF   (N'&SUBSDATA EQ 1).CHECKER                              12000000
         MNOTE 12,'SUBSDATA &ERRMSG1 &NOTEXT'                           12050000
&ERROR   SETB  1                                                        12100000
.CHECKER AIF   (&ERROR EQ 0).GENCODE                                    12150000
         MEXIT                                                          12200000
.********************************************************************** 12250000
.* GENERATE ASSEMBLER CODE IF NO SYNTAX ERROR                         * 12300000
.********************************************************************** 12350000
.GENCODE ANOP                                                           12400000
         SPACE 1                                                        12450000
*--------------------- UPDTMPB START ---------------------------------  12500000
&LABEL   DS    0H                        HALF WORD ALIGNMENT            12550000
.********************************************************************** 12600000
.* GET MPBLEN                                                         * 12650000
.********************************************************************** 12700000
         AIF   (N'&SUBCOFST GT 0).GETMPB                                12750000
         AIF   ('&MPBLEN'(1,1) EQ '(').GLENR                            12800000
         L     14,&MPBLEN                R14 = MPBLEN                   12850000
         AGO   .GETMPB                                                  12900000
.GLENR   LR    14,&MPBLEN(1)             R14 = MPBLEN                   12950000
.********************************************************************** 13000000
.* GET MPBPTR                                                         * 13050000
.********************************************************************** 13100000
.GETMPB  AIF   ('&MPBPTR'(1,1) EQ '(').GPTRR1                           13150000
         L     15,&MPBPTR                R15 -> MPB                     13200000
         AGO   .CKMPB                                                   13250000
.GPTRR1  LR    15,&MPBPTR(1)             R15 -> MPB                     13300000
.********************************************************************** 13350000
.*  CHECK MPB ACRONYM                                                 * 13400000
.********************************************************************** 13450000
.CKMPB   CLC   MPBACRN-MPB(L'MPBACRN,15),=C'&MPB_ACRONYM'               13500000
         BNE   &GNAME.E                  BRANCH IF INVALID MPB ACRONYM  13550000
.********************************************************************** 13600000
.*  LOAD SUBSLEN                                                      * 13650000
.********************************************************************** 13700000
.GSLEN   AIF   (N'&SUBSLEN GT 0).GSLEN2   SUBSLEN WAS SPECIFIED         13750000
         LA    0,L'&SUBSDATA             R0 = SUBSLEN DEFAULT VALUE     13800000
         AGO   .CHKLEN2                                                 13850000
.GSLEN2  AIF   ('&SUBSLEN'(1,1) EQ '(').GSLENR                          13900000
         L     0,&SUBSLEN                R0  = SUBSLEN                  13950000
.GSLEN4  LTR   0,0                                                      14000000
         AGO   .CHKLEN                                                  14050000
.GSLENR  LTR   0,&SUBSLEN(1)             R0  = SUBSLEN                  14100000
.********************************************************************** 14150000
.* CHECK MPBLEN IF SUBCOSFT IS NOT SPECIFIED                          * 14200000
.********************************************************************** 14250000
.CHKLEN  BM    &GNAME.C                  BRANCH IF SUBSLEN IS NEGATIVE  14300000
.CHKLEN2 AIF   (N'&SUBCOFST GT 0).SKCLEN                                14350000
         LR    1,0                       VERIFY THAT                    14400000
         LA    1,MPBSUB-MPBSB(,1)          MPBLEN > SUBSLEN             14450000
         AL    1,MPBSIZE-MPB(,15)                   + MPBSIZE           14500000
         CLR   1,14                                 + LENGTH OF MPBSUB  14550000
         BH    &GNAME.A                  BRANCH IF MPB IS TOO SMALL     14600000
         LR    1,0                       R1 = SUBSLEN                   14650000
.********************************************************************** 14700000
.* CALCULATE MPBVDATL AND MPBSBCNT                                    * 14750000
.********************************************************************** 14800000
         AL    1,MPBVDATL-MPB(,15)       MPBVDATL =                     14850000
         LA    1,MPBSUB-MPBSB(,1)          MPBVDATL + MPBSUB + SUBSLEN  14900000
         ST    1,MPBVDATL-MPB(,15)                                      14950000
         LR    14,15                     MPBMSG = MPBPTR + MPBOFFST     15000000
         AL    14,MPBOFFST-MPB(,15)      R14 -> MPBMSG                  15050000
         L     1,MPBSBCNT-MPBMSG(,14)    MPBSBCNT = MPBSBCNT + 1        15100000
         LA    1,1(,1)                                                  15150000
         ST    1,MPBSBCNT-MPBMSG(,14)                                   15200000
         LR    14,15                     R14 -> MPB                     15250000
         AL    15,MPBSIZE-MPB(,15)       R15 -> MPBSB                   15300000
.********************************************************************** 15350000
.* CALCULATE THE MPBSIZE                                              * 15400000
.********************************************************************** 15450000
         L     1,MPBVDATL-MPB(,14)                                      15500000
         AL    1,MPBOFFST-MPB(,14)       MPBSIZE = MPBOFFST +           15550000
         ST    1,MPBSIZE-MPB(,14)                  MPBVDATL             15600000
.********************************************************************** 15650000
.* SAVE MPBSUBL                                                       * 15700000
.********************************************************************** 15750000
         XC    0(MPBSUB-MPBSB,15),0(15)  INIT MPBSB TO ZERO             15800000
         ST    0,MPBSUBL-MPBSB(,15)      MPBSUBL = SUBSLEN              15850000
         AGO   .GTOKL                                                   15900000
.********************************************************************** 15950000
.* CALCULATE THE ADDRESS OF MPBSB IF SUBCOFST IS SPECIFIED AND IS     * 16000000
.* WITHIN THE MPBVDAT AREA                                            * 16050000
.********************************************************************** 16100000
.SKCLEN  AIF   ('&SUBCOFST'(1,1) EQ '(').GC1R                           16150000
         L     1,&SUBCOFST               R1 = SUBCOFST                  16200000
         AGO   .COFST0                                                  16250000
.GC1R    LR    1,&SUBCOFST(1)            R1 = SUBCOFST                  16300000
.COFST0  LA    14,MPBVDAT-MPB            R14 = OFFSET OF MPBVDAT        16350000
         CLR   1,14                                                     16400000
         BL    &GNAME.F                  SUBCOFST IS TOO LOW            16450000
         AL    14,MPBVDATL-MPB(,15)      R14 = OFFSET OF END OF MPBVDAT 16500000
         CLR   1,14                                                     16550000
         BNL   &GNAME.F                  SUBCOFST IS TOO HIGH           16600000
         ALR   15,1                      R15 -> MPBSB                   16650000
.********************************************************************** 16700000
.* GET TOKLEN AND IF IT IS LONGER THAN 16 THEN SET IT TO 16           * 16750000
.********************************************************************** 16800000
.GTOKL   AIF   (N'&TOKLEN GT 0).GTOKL2   TOKLEN WAS SPECIFIED           16850000
         LA    14,L'&TOKEN               R14 = TOKEN DEFAULT VALUE      16900000
         AGO   .MTOKEN2                                                 16950000
.GTOKL2  AIF   ('&TOKLEN'(1,1) EQ '(').GTOKLR                           17000000
         L     14,&TOKLEN                R14  = TOKLEN                  17050000
         AGO   .MTOKEN                                                  17100000
.GTOKLR  LR    14,&TOKLEN(1)             R14  = TOKLEN                  17150000
.MTOKEN  LTR   14,14                     TEST TOKLEN                    17200000
         BNP   &GNAME.B                  BRANCH IF TOKEN IS INVALID     17250000
.MTOKEN2 LA    1,L'MPBTOKN               R1 = LENGTH OF MPBTOKN         17300000
         CLR   14,1                      IF TOKLEN IS LONGER THAN 16    17350000
         BNH   &GNAME.H                     THEN                        17400000
         LR    14,1                            SET TOKLEN TO 16         17450000
.********************************************************************** 17500000
.* INITIALIZE THE MPBTOKN WITH BLANK AND MOVE TOKEN TO MPBTOKN        * 17550000
.********************************************************************** 17600000
&GNAME.H ST    14,MPBTOKNL-MPBSB(,15)    MPBTOKNL = TOKLEN              17650000
         MVI   MPBTOKN-MPBSB(15),C' '    INITIALIZE MPBTOKN TO BLANK    17700000
         MVC   MPBTOKN-MPBSB+1(L'MPBTOKN-1,15),MPBTOKN-MPBSB(15)        17750000
.********************************************************************** 17800000
.* GET TOKEN                                                          * 17850000
.********************************************************************** 17900000
.GTOK    AIF   ('&TOKEN'(1,1) EQ '(').GTOKR                             17950000
         LA    1,&TOKEN                  R1 -> TOKEN                    18000000
         AGO   .MVTOK                                                   18050000
.GTOKR   LR    1,&TOKEN(1)               R1 -> TOKEN                    18100000
.MVTOK   BCTR  14,0                      DECREMENT ONE FOR EXECUTE      18150000
         EX    14,&GNAME.T               MPBTOKN(1:TOKLEN) = TOKEN      18200000
.********************************************************************** 18250000
.* GET TOKTYPE                                                        * 18300000
.********************************************************************** 18350000
         AIF   ('&TOKTYPE'(1,1) EQ '(').GTYPER                          18400000
         MVC   MPBSBTYP-MPBSB(L'MPBSBTYP,15),&TOKTYPE                   18450000
         AGO   .CKTYPE                                                  18500000
.GTYPER  MVC   MPBSBTYP-MPBSB(L'MPBSBTYP,15),0&TOKTYPE                  18550000
.CKTYPE  CLI   MPBSBTYP-MPBSB(15),C'0'   VALIDITY CHECK TOKTYPE ...     18600000
         BL    &GNAME.D                                                 18650000
         CLI   MPBSBTYP-MPBSB(15),C'3'                                  18700000
         BH    &GNAME.D                                                 18750000
.********************************************************************** 18800000
.* GET SUBSDATA                                                       * 18850000
.********************************************************************** 18900000
         AIF   ('&SUBSDATA'(1,1) EQ '(').GSDATAR                        18950000
         LA    1,&SUBSDATA               R1 -> SUBSDATA                 19000000
         AGO   .MSDATAC                                                 19050000
.GSDATAR LR    1,&SUBSDATA(1)            R1 -> SUBSDATA                 19100000
.********************************************************************** 19150000
.* IF SUBCOFST IS SPECIFIED AND MPBSUBL IS LONGER THAN SUBSLEN        * 19200000
.*    THEN INITIALIZE SUBSDATA WITH BLANK                             * 19250000
.********************************************************************** 19300000
.MSDATAC AIF   (N'&SUBCOFST EQ 0).MSDATA                                19350000
         L     14,MPBSUBL-MPBSB(,15)     LOAD MPBSUBL                   19400000
         LTR   14,14                     IF MPBSUBL IS ZERO             19450000
         BZ    &GNAME.N                     THEN SKIP INITIALIZATION    19500000
.********************************************************************** 19550000
.* IF SUBSLEN IS SHORTER THAN MPBSUBL THEN INITIALIZE MPBSUB TO BLANK * 19600000
.* BREFORE COPYING SUBSDATA TO MPBSUB                                 * 19650000
.********************************************************************** 19700000
         MVI   MPBSUB-MPBSB(15),C' '     INIT THE FIRST BYTE OF         19750000
         BCTR  14,0                           MPBSUB TO BLANK           19800000
         BCTR  14,0                      DECREMENT TWO FOR EXECUTE      19850000
         EX    14,&GNAME.I               INITIALIZE MPBSUB TO BLANK     19900000
         L     14,MPBSUBL-MPBSB(,15)     RE-LOAD MPBSUBL                19950000
         CLR   0,14                      BRANCH IF SUBSLEN IS LOWER     20000000
         BL    &GNAME.M                               THAN MPBSUBL      20050000
         LR    0,14                      R14 = MIN(MPBSUBL,SUBSLEN)     20100000
&GNAME.M DS    0H                                                       20150000
.********************************************************************** 20200000
.* COPY SUBSDATA TO MPBSUB                                            * 20250000
.********************************************************************** 20300000
.MSDATA  ANOP                                                           20350000
         LTR   14,0                      R14 = MIN(MPBSUBL,SUBSLEN)     20400000
         BZ    &GNAME.N                  SKIP IF THE MIN LENGTH IS 0    20450000
         BCTR  14,0                      DECREMENT ONE FOR EXECUTE      20500000
         EX    14,&GNAME.S               MPBSUB(1:SUBSLEN) = SUBSDATA   20550000
&GNAME.N DS    0H                                                       20600000
.********************************************************************** 20650000
.*  IF THE SUBOOFST AND SUBCOFST PARAMETERS WERE NOT THE SAME, THEN   * 20700000
.*  SET SUBOOFST                                                      * 20750000
.********************************************************************** 20800000
         AIF   ('&SUBOOFST' EQ '&SUBCOFST').SETRC                       20850000
         AIF   ('&MPBPTR'(1,1) EQ '(').GPTRR2                           20900000
         SL    15,&MPBPTR                SUBOOFST = MPBSB - MPB         20950000
         AGO   .GOOFST                                                  21000000
.GPTRR2  SLR   15,&MPBPTR(1)             SUBOOFST = MPBSB - MPB         21050000
.GOOFST  AIF   ('&SUBOOFST'(1,1) EQ '(').GCPTRR                         21100000
         ST    15,&SUBOOFST              SAVE SUBOOFST                  21150000
         AGO   .SETRC                                                   21200000
.GCPTRR  LR    &SUBOOFST(1),15           SAVE SUBOOFST                  21250000
.SETRC   XR    15,15                     SET RETURN CODE AND            21300000
         XR    0,0                           REASON CODE TO ZERO        21350000
         B     &GNAME.X                  EXIT                           21400000
         AIF   (N'&SUBCOFST EQ 0).SKIPI                                 21450000
&GNAME.I MVC   MPBSUB-MPBSB+1(0,15),MPBSUB-MPBSB(15) CLEAR MPBSUB       21500000
.SKIPI   ANOP                                                           21550000
&GNAME.S MVC   MPBSUB-MPBSB(0,15),0(1)   COPY MPBSDATA                  21600000
&GNAME.T MVC   MPBTOKN-MPBSB(0,15),0(1)  COPY TOKEN                     21650000
.********************************************************************** 21700000
.* SET APPROPRIATE RETURN CODE AND REASON CODE                        * 21750000
.********************************************************************** 21800000
         AIF   (N'&SUBCOFST GT 0).SKIPA                                 21850000
&GNAME.A LA    0,51                      MPB IS TOO SMALL               21900000
         B     &GNAME.R                  EXIT                           21950000
.SKIPA   AIF   (N'&TOKLEN EQ 0).SKIPB    TOKLEN WAS NOT SPECIFIED       22000000
&GNAME.B LA    0,53                      INVALID TOKLEN                 22050000
         B     &GNAME.R                  EXIT                           22100000
.SKIPB   ANOP                                                           22150000
&GNAME.C LA    0,54                      INVALID SUBSLEN                22200000
         B     &GNAME.R                  EXIT                           22250000
&GNAME.D LA    0,55                      INVALID TOKTYPE                22300000
         B     &GNAME.R                  EXIT                           22350000
&GNAME.E LA    0,59                      INVALID MPB ACRONYM            22400000
         AIF   (N'&SUBCOFST EQ 0).SKIPC                                 22450000
         B     &GNAME.R                  EXIT                           22500000
&GNAME.F LA    0,56                      INVALID SUBCOFST               22550000
.SKIPC   ANOP                                                           22600000
&GNAME.R LA    15,12                     SET RETURN CODE TO SEVERE      22650000
&GNAME.X DS    0H                        EXIT UPDTMPB                   22700000
*--------------------- UPDTMPB END -----------------------------------  22750000
         SPACE 1                                                        22800000
         MEND                                                           22850000
* */ UPDTMPB: MACRO                                                     22900000
* KEYS(MPBPTR,MPBLEN,SUBOOFST,SUBCOFST,TOKEN,TOKLEN,TOKTYPE,            22950000
*      SUBSLEN,SUBSDATA);                                               23000000
*          ANS('?'||MACLABEL||'UPDTMPBP '||MACLIST||MACKEYS||';');      23050000
*%     END UPDTMPB;                                                     23100000
