*% /*                                                                   00100000
         MACRO -- IAZXCTKN - MVS client token compare macro             00200000
&LABEL   IAZXCTKN &CTOKENA=,       First CTOKEN to be compared         C00300000
               &CTOKENB=           Second CTOKEN to be compared         00400000
.*                                                                    * 00500000
.* **PROPRIETARY STATEMENT********************************************* 00510000
.*                                                                    * 00520000
.*   LICENSED MATERIALS-PROPERTY OF IBM                               * 00530000
.*   THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                      * 00540000
.*   5647-A01 (C) COPYRIGHT IBM CORP 1998, 2000                       * 00550000
.*                                                                    * 00560000
.*   STATUS:  HBB7703                                                 * 00570000
.*                                                                    * 00580000
.* **END-OF-PROPRIETARY-STATEMENT************************************** 00590000
.********************************************************************** 00600000
.*                                                                    * 00700000
.*01* MACRO NAME:  IAZXCTKN                                   @R05LOPI* 00800000
.*                                                                    * 00900000
.*01* DESCRIPTIVE NAME: Client token compare service                  * 01000000
.*                                                                    * 01100000
.*01*  FUNCTION:                                                      * 02200000
.*                                                                    * 02300000
.*        IAZXCTKN compares two client tokens and determines          * 02400000
.*        whether they are equal, or if one is less than the          * 02500000
.*        other.                                                      * 02600000
.*                                                                    * 02700000
.*     Register Information                                           * 02800000
.*                                                                    * 02900000
.*                                                                    * 03000000
.*     o   Input registers                                            * 03100000
.*                                                                    * 03200000
.*         Before issuing the IAZXCTKN macro, the caller does not     * 03300000
.*         have to place any information into any register unless     * 03400000
.*         using it in register notation for a particular parameter,  * 03500000
.*         or using it as a base register.                            * 03600000
.*                                                                    * 03700000
.*     o   Output registers                                           * 03800000
.*                                                                    * 03900000
.*         R15 - Return code                                          * 04000000
.*                                                                    * 04100000
.*01* EXTERNAL CLASSIFICATION:  PSPI                                  * 04200000
.*01* END OF EXTERNAL CLASSIFICATION:                                 * 04300000
.*                                                                    * 04400000
.*                                                                    * 04500000
.*01* SYNTAX:                                                         * 04600000
.*                                                                    * 04700000
.*        IAZXCTKN CTOKENA=ctokena,                                   * 04800000
.*                 CTOKENB=ctokenb                                    * 04900000
.*                                                                    * 05000000
.*        Each parameter is either:                                   * 05100000
.*                                                                    * 05200000
.*             - A symbol defined as an 80 byte CTOKEN area, or       * 05300000
.*             - (x) where x is a register containing the address     * 05400000
.*               of an 80 byte CTOKEN area.  Any register except      * 05500000
.*               0, 1, 14, or 15 can be used.                         * 05600000
.*                                                                    * 05700000
.*01*  RETURN CODES:                                                  * 05800000
.*                                                                    * 05900000
.*         0 - CTOKENA and CTOKENB contain the same significant       * 06000000
.*             information.                                           * 06100000
.*         4 - CTOKENA and CTOKENB contain different significant      * 06200000
.*             information and CTOKENA's sort information is less     * 06300000
.*             than CTOKENB's sort information.                       * 06400000
.*         8 - CTOKENA and CTOKENB contain different significant      * 06500000
.*             information and CTOKENB's sort information is less     * 06600000
.*             than CTOKENA's sort information.                       * 06700000
.*         12 - CTOKENA and CTOKENB contain different significant     * 06800000
.*              information and at least one of these ctokens         * 06900000
.*              contains no sort information.                         * 07000000
.*         16 - CTOKENA and CTOKENB contain different significant     * 07100000
.*              information but the sort information in the two       * 07200000
.*              ctokens is equal.  This indicates a "collision"       * 07300000
.*              of the two ctokens.                                   * 07400000
.*                                                                    * 07500000
.********************************************************************** 07600000
.*                                                                    * 07700000
.*  CHANGE ACTIVITY:                                                  * 07800000
.*                                                                    * 07900000
.*  A000000-999999  Created for OS/390 HBB6605                 @R05LOPI 08000000
.********************************************************************** 08100000
.*                                                                      08200000
.*************************************************************          08300000
.*       Make system generated labels for later              *          08400000
.*************************************************************          08500000
.*                                                                      08600000
&TOKMTCH SETC 'CTM&SYSNDX'        Label for token match                 08700000
&ENDCODE SETC 'CTE&SYSNDX'        Label for end of macro code           08800000
&TESTCHR SETC 'TSCH&SYSNDX'       Label for comparing a character       08900000
&BITLOOP SETC 'BTLP&SYSNDX'       Label for the top of the loop         09000000
&NEXTBIT SETC 'NXBT&SYSNDX'       Label for iterating the loop          09100000
&MATCH   SETC 'MTCH&SYSNDX'       Label for match                       09200000
&DIFF    SETC 'DIFF&SYSNDX'       Label for different ctokens           09300000
&NOSORT  SETC 'NSOR&SYSNDX'       Label for no match & no sort          09400000
&ALOW    SETC 'ALOW&SYSNDX'       Label for CTOKENA low                 09500000
&BLOW    SETC 'BLOW&SYSNDX'       Label for CTOKENB low                 09600000
&MACEND  SETC 'MCEN&SYSNDX'       Label for end of macro code           09700000
.*                                                                      09800000
.*************************************************************          09900000
.*       Check that all required parameters are specified    *          10000000
.*************************************************************          10100000
.*                                                                      10200000
         AIF   ('&CTOKENA' EQ '').CTKAMIS                               10300000
         AIF   ('&CTOKENB' EQ '').CTKBMIS                               10400000
         AGO   .ALLSPEC                                                 10500000
.CTKAMIS ANOP                                                           10600000
         MNOTE 8,'IAZXCTKN -- CTOKENA missing'                          10700000
         AGO   .MACDONE                                                 10800000
.CTKBMIS ANOP                                                           10900000
         MNOTE 8,'IAZXCTKN -- CTOKENB missing'                          11000000
         AGO   .MACDONE                                                 11100000
.*                                                                      11200000
.*************************************************************          11300000
.*       Check CTOKEN parameters for register usage.         *          11400000
.*************************************************************          11500000
.*                                                                      11600000
.ALLSPEC ANOP                                                           11700000
.*                                                                      11800000
.*-----------------------------------------------------------*          11900000
.*       CTOKENA                                             *          12000000
.*-----------------------------------------------------------*          12100000
.*                                                                      12200000
         AIF   ('&CTOKENA'(1,1) NE '(').CTKASYM                         12300000
.*                                                                      12400000
&LOADAOP SETC  '0(,&CTOKENA(1))'  Set operand to 0(,register)           12500000
         AIF   ('&LOADAOP' NE '0' AND                                  C12600000
                '&LOADAOP' NE 'R0' AND                                 C12700000
                '&LOADAOP' NE '1' AND                                  C12800000
                '&LOADAOP' NE 'R1' AND                                 C12900000
                '&LOADAOP' NE '14' AND                                 C13000000
                '&LOADAOP' NE 'R14' AND                                C13100000
                '&LOADAOP' NE '15' AND                                 C13200000
                '&LOADAOP' NE 'R15').CTKAEND  Reg ok, done with parm    13300000
         MNOTE 8,'IAZXCTKN -- Illegal register for CTOKENA'             13400000
         AGO   .MACDONE           Leave macro                           13500000
.*                                                                      13600000
.CTKASYM ANOP                                                           13700000
.*                                                                      13800000
&LOADAOP SETC  '&CTOKENA'         Set operand to symbol name            13900000
.*                                                                      14000000
.CTKAEND ANOP                                                           14100000
.*                                                                      14200000
.*-----------------------------------------------------------*          14300000
.*       CTOKENB                                             *          14400000
.*-----------------------------------------------------------*          14500000
.*                                                                      14600000
         AIF   ('&CTOKENB'(1,1) NE '(').CTKBSYM                         14700000
.*                                                                      14800000
&LOADBOP SETC  '0(,&CTOKENB(1))'    Set operand to 0(,register)         14900000
         AIF   ('&LOADBOP' NE '0' AND                                  C15000000
                '&LOADBOP' NE 'R0' AND                                 C15100000
                '&LOADBOP' NE '1' AND                                  C15200000
                '&LOADBOP' NE 'R1' AND                                 C15300000
                '&LOADBOP' NE '14' AND                                 C15400000
                '&LOADBOP' NE 'R14' AND                                C15500000
                '&LOADBOP' NE '15' AND                                 C15600000
                '&LOADBOP' NE 'R15').CTKBEND  Reg ok, done with parm    15700000
         MNOTE 8,'IAZXCTKN -- Illegal register for CTOKENB'             15800000
         AGO   .MACDONE           Leave macro                           15900000
.*                                                                      16000000
.CTKBSYM ANOP                                                           16100000
.*                                                                      16200000
&LOADBOP SETC  '&CTOKENB'         Set operand to symbol name            16300000
.*                                                                      16400000
.CTKBEND ANOP                                                           16500000
.*                                                                      16600000
         LAE   14,&LOADAOP        Get the address of CTOKENA            16700000
         LAE   15,&LOADBOP        Get the address of CTOKENB            16800000
.*                                                                      16900000
TKA      USING CTOKEN,14          Addressability                        17000000
TKB      USING CTOKEN,15          Addressability                        17100000
.*                                                                      17200000
.*-----------------------------------------------------------*          17300000
.*       See if the ctokens are actually equal.  If so,      *          17400000
.*       just exit with a "match" return code.  Otherwise    *          17500000
.*       pull the bits and bytes apart.                      *          17600000
.*-----------------------------------------------------------*          17700000
         CLC   0(CTKNSIZE,14),0(15)  Are they equal?                    17800000
         BE    &MATCH             Yes, set the matching return code     17900000
.*                                                                      18000000
.*-----------------------------------------------------------*          18100000
.*       For each bit on in both bit maps, compare the       *          18200000
.*       corresponding bytes in the JES dependent areas.     *          18300000
.*-----------------------------------------------------------*          18400000
.*                                                                      18500000
         LM    0,1,TKA.CTKNBMAP   Get A's bit map                       18600000
         N     0,TKB.CTKNBMAP     Eliminate bits that are not common    18700000
         N     1,TKB.CTKNBMAP+4     between bit maps                    18800000
         LAE   14,TKA.CTKNJESD    Get A's JES dependent area            18900000
         LAE   15,TKB.CTKNJESD    Get B's JES dependent area            19000000
         DROP  TKA                CTOKENA                               19100000
         DROP  TKB                CTOKENB                               19200000
&BITLOOP LTR   0,0                Do we care about current bit?         19300000
         BM    &TESTCHR           Yes, check the corresponding char     19400000
         BP    &NEXTBIT           No, but R0 still has more to go       19500000
         LTR   1,1                Does R1 have more to go?              19600000
         BNZ   &NEXTBIT           Yes, shift everything                 19700000
         B     &MATCH             No, the tokens match          OW38010 19750000
&TESTCHR CLC   0(1,14),0(15)      Corresponding bytes match?            19800000
         BNE   &DIFF              No, leave the loop                    19900000
&NEXTBIT SLDL  0,1                Shift bit map left 1 bit              20000000
         LA    14,1(,14)          Bump A to the next byte               20100000
         LA    15,1(,15)          Bump B to the next byte               20200000
         B     &BITLOOP           Iterate loop                          20300000
.*                                                                      20400000
&DIFF    LAE   14,&LOADAOP        Get the address of CTOKENA            20500000
         LAE   15,&LOADBOP        Get the address of CTOKENB            20600000
TKA      USING CTOKEN,14          Addressability                        20700000
TKB      USING CTOKEN,15          Addressability                        20800000
         OC    TKA.CTKNSORT,TKA.CTKNSORT  Does A have a sort key?       20900000
         BZ    &NOSORT            No, don't look at ordering            21000000
         OC    TKB.CTKNSORT,TKB.CTKNSORT  Does B have a sort key?       21100000
         BZ    &NOSORT            No, don't look at ordering            21200000
         CLC   TKA.CTKNSORT,TKB.CTKNSORT  Is A < B?                     21300000
         BL    &ALOW              Yes, set return code as such          21400000
         BH    &BLOW              A > B, set return code as such        21500000
         DROP  TKA                CTOKENA                               21600000
         DROP  TKB                CTOKENB                               21700000
         LA    15,16              Set "collision" return code           21800000
         B     &MACEND            Skip over other return codes          21900000
&NOSORT  LA    15,12              Set "not equal and no sort key" rc    22000000
         B     &MACEND            Skip over other return codes          22100000
&BLOW    LA    15,8               Set "B low" return code               22200000
         B     &MACEND            Skip over other return codes          22300000
&ALOW    LA    15,4               Set "A low" return code               22400000
         B     &MACEND            Skip over other return codes          22500000
&MATCH   SR    15,15              Set "match" return code               22600000
&MACEND  DS    0H                                                       22700000
.MACDONE ANOP                                                           22800000
         SPACE 1                                                        22900000
         MEND                                                           23000000
**/                                                                     23100000
* IAZXCTKN:                                                             23200000
* MACRO                                                                 23300000
*    KEYS(CTOKENA,CTOKENB,RTNCODE);                                     23400000
*    ANS('?'||MACLABEL||'IAZPCTKN '||MACLIST||MACKEYS||';');            23500000
*                                                                       23600000
*%END IAZXCTKN;                                                         99999999
