*/***START OF SPECIFICATIONS******************************************/ 00050000
*/* $MAC(TRANMSG) COMP(SCMMS) PROD(HBB4410): MMS Message Translate   */ 00100000
*/*                                           macro                  */ 00150000
*/*                                                                  */ 00200000
*/*01* MACRO NAME       =   TRANMSG                                  */ 00250000
*/*                                                                  */ 00300000
*/*01* DESCRIPTIVE NAME =   MMS - (MVS Message Service) Message      */ 00350000
*/*                         Translate Macro                          */ 00400000
*/*                                                                  */ 00450000
*/*    PROPRIETARY STATEMENT =                                       */ 00500000
*/*                                                                  */ 00550000
*/*    LICENSED MATERIALS - PROPERTY OF IBM                          */ 00700000
*/*    THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                   */ 00712500
*/*    5695-047 (C) COPYRIGHT IBM CORP. 1990                         */ 00725000
*/*    SEE COPYRIGHT INSTRUCTIONS.                                   */ 00737500
*/*                                                                  */ 00750000
*/*    STATUS           =  HBB4410                                   */ 00800000
*/*                                                                  */ 00812500
*/*01* EXTERNAL CLASSIFICATION: GUPI                                 */ 00825000
*/*01* END OF EXTERNAL CLASSIFICATION:                               */ 00837500
*/*                                                                  */ 00850000
*/*01* FUNCTION      =  This macro generates executable in-line      */ 00900000
*/*                     assembler code to call the MMS Message       */ 00950000
*/*                     Translate function to translate the          */ 01000000
*/*                     message(s) referenced by the Message Input/  */ 01050000
*/*                     Output block (MIO).                          */ 01100000
*/*                                                                  */ 01150000
*/*01* OPERATION     =  This macro receives the MIO or all the       */ 01200000
*/*                     required parameters to build the MIO in an   */ 01250000
*/*                     area allocated by the invoker.               */ 01300000
*/*                                                                  */ 01350000
*/*                     TRANMSG generates code to support        @D1C*/ 01383300
*/*                     bimodal addressing and check the MMS     @D1A*/ 01416600
*/*                     availability, build the MIO if necessary,    */ 01450000
*/*                     and call the message translate function.     */ 01500000
*/*                                                                  */ 01550000
*/*01* INVOCATION    =                                               */ 01900000
*/*                                                                  */ 01950000
*/*      MACRO SYNTAX                                                */ 02000000
*/*                                                                  */ 02050000
*/*      < > Optional Parameter                                      */ 02100000
*/*       |  Alternative Item                                        */ 02150000
*/*                                                                  */ 02200000
*/*      TRANMSG    MIO=mio                                          */ 02250000
*/*               < ,MIOL=length of MIO                              */ 02300000
*/*                 ,INBUF=(list,number of list entries)             */ 02350000
*/*                 ,OUTBUF=output buffer address                    */ 02400000
*/*                 ,OUTBUFL=output buffer length                    */ 02450000
*/*                 ,LANGCODE=language code        >                 */ 02500000
*/*                                                                  */ 02550000
*/*      MIO     : RX-type address or register (2) - (12).           */ 02600000
*/*                Specifies an area, or register pointing to an     */ 02650000
*/*                area, containing the Message Input/Output block.  */ 02700000
*/*      MIOL    : RX-type address or register (2) - (12).           */ 02750000
*/*                Specifies a fullword, or register, containing the */ 02800000
*/*                length of the MIO area.                           */ 02850000
*/*      INBUF                                                       */ 02900000
*/*        List  : RX-type address or register (2) - (12).           */ 02950000
*/*                Specifies an area, or register pointing to an     */ 03000000
*/*                area, that consists of a list of fullword         */ 03050000
*/*                addresses. Each address points to a message that  */ 03100000
*/*                is to be translated.                              */ 03150000
*/*        Number: RX-type address or register (2) - (12).           */ 03200000
*/*                Specifies a fullword, or register, containing the */ 03250000
*/*                number of addresses in the list.                  */ 03300000
*/*      OUTBUF  : RX-type address or register (2) - (12).           */ 03350000
*/*                Specifies a fullword, or register, containing the */ 03400000
*/*                address of the area where the translate function  */ 03450000
*/*                is to return the translated messages.             */ 03500000
*/*      OUTBUFL : RX-type address or register (2) - (12).           */ 03550000
*/*                Specifies a fullword, or register, containing the */ 03600000
*/*                length of the OUTBUF area.                        */ 03650000
*/*      LANGCODE: RX-type address or register (2) - (12).           */ 03700000
*/*                Specifies a 3-byte area, or register pointing to  */ 03750000
*/*                such an area, containing the code of the language */ 03800000
*/*                into which the messages are to be translated.     */ 03850000
*/*                                                                  */ 03900000
*/*                                                                  */ 03950000
*/*01* USAGE         =  MVS Message Service caller                   */ 04000000
*/*                                                                  */ 04050000
*/*01* AUTHORIZATION      = ANY                                      */ 04066600
*/*                                                                  */ 04083200
*/*01* DISPATCHABLE UNIT MODE = TASK, SRB                            */ 04088700
*/*                                                                  */ 04094200
*/*01* CROSS-MEMORY MODE  = PASN not equal HASN is supported         */ 04099800
*/*                                                                  */ 04116400
*/*01* AMODE              = ANY                                      */ 04133000
*/*                                                                  */ 04149600
*/*01* ASC MODE           = PRIMARY                                  */ 04155100
*/*                                                                  */ 04160600
*/*01* SERIALIZATION      = None                                     */ 04166200
*/*                                                                  */ 04182800
*/*01* CONTROL PARAMETERS = None                                     */ 04199400
*/*                                                                  */ 04216000
*/*01* DEPENDENCIES  =                                               */ 04232600
*/*                     The caller must provide a standard       @D1C*/ 04255000
*/*                     register save area pointing by R13.      @D1A*/ 04277400
*/*                     The invoking module must include the     @01C*/ 04300000
*/*                     CNLMMIO and CNLMMCA mapping macros.      @01C*/ 04350000
*/*                                                                  */ 04400000
*/*01* RETURN CODES  =  Normal                                       */ 04450000
*/*                       -     R15 = 0 and R0 = 0                   */ 04500000
*/*                     Severe                                       */ 04550000
*/*                       - MMS is not available                     */ 04600000
*/*                             R15 = 12 and R0 = 23                 */ 04650000
*/*                       - MIO is too small                         */ 04700000
*/*                             R15 = 12 and R0 = 57                 */ 04750000
*/*                       - Invalid value in number of list entries  */ 04800000
*/*                             R15 = 12 and R0 = 58                 */ 04850000
*/*                                                                  */ 04900000
*/*01* MODULE TYPE   =  ASSEMBLER MACRO                              */ 04950000
*/*                                                                  */ 05000000
*/*01* COMPONENT     =  SCMMS                                        */ 05050000
*/*                                                                  */ 05100000
*/*01* DISTRIBUTION LIBRARY = AMACLIB                                */ 05150000
*/*                                                                  */ 05200000
*/*01* CHANGE ACTIVITY  =                                            */ 05250000
*/*                                                                  */ 05300000
*/* Code Reason   FMID    Date  Origin  Comments                     */ 05350000
*/* ---- ------- ------- ------ ------  ---------------------------- */ 05400000
*/* $L0= MMS     HBB4410 890401 STOW:   Original Code                */ 05450000
*/* $L1= MMS     HBB4410 890627 PDDH:   Retrofit to SP4.1.0          */ 05475000
*/* $D1= DCR263  HBB4410 890911 STOW:   Bimodal Addressing       @D1A*/ 05483300
*/*                                     Support                  @D1A*/ 05491600
*/* $P1= PEO3715 HBB4410 900226 PDDH:   Correct program call         */ 05495800
*/* $01= OY52904 HBB4410 920501 PDBT:   Remove requirement to        */ 05497200
*/*                                     map the CVT and SCVT         */ 05498600
*/* $02= OW06471 HBB4430 940801 PDCF:   Save addressing mode in      */ 05499000
*/*                                     register slot in save area   */ 05499400
*/*                                                                  */ 05500000
*/*01* MESSAGES      =                                               */ 05600000
*/*                                                                  */ 05650000
*/*     The TRANMSG macro will issue the following MNOTEs            */ 05700000
*/*     upon detection of syntax errors:                             */ 05750000
*/*                                                                  */ 05800000
*/*      ERROR = (severity 4)                                        */ 05850000
*/*        POSITIONAL PARAMETER "xxxxxxxx" IS INVALID                */ 05900000
*/*                                                                  */ 05950000
*/*      ERROR = (severity 12)                                       */ 06000000
*/*        MIO OPERAND MUST BE SPECIFIED, NO TEXT IS GENERATED.      */ 06050000
*/*        INBUF=&INBUF MUST HAVE TWO OPERANDS, NO TEXT IS GENERATED.*/ 06100000
*/*        MIO=&MIO IS INVALID, NO TEXT IS GENERATED.                */ 06150000
*/*        MIOL=&MIOL IS INVALID, NO TEXT IS GENERATED.              */ 06200000
*/*        MIOL OPERAND IS MISSING, NO TEXT IS GENERATED.            */ 06250000
*/*        OUTBUF=&OUTBUF IS INVALID, NO TEXT IS GENERATED.          */ 06300000
*/*        OUTBUF OPERAND IS MISSING, NO TEXT IS GENERATED.          */ 06350000
*/*        OUTBUFL=&OUTBUFL IS INVALID, NO TEXT IS GENERATED.        */ 06400000
*/*        OUTBUFL OPERAND IS MISSING, NO TEXT IS GENERATED.         */ 06450000
*/*        LANGCODE=&LANGCODE IS INVALID, NO TEXT IS GENERATED.      */ 06500000
*/*        LANGCODE OPERAND IS MISSING, NO TEXT IS GENERATED.        */ 06550000
*/*                                                                  */ 06600000
*/*                                                                  */ 06650000
*/***END OF SPECIFICATIONS********************************************/ 06700000
* %/*                                                                   06750000
         MACRO                                                          06800000
&LABEL   TRANMSG &MIO=,                                                -06850000
               &MIOL=,                                                 -06900000
               &INBUF=,                                                -06950000
               &OUTBUF=,                                               -07000000
               &OUTBUFL=,                                              -07050000
               &LANGCODE=                                               07100000
.********************************************************************** 07150000
.*                                                                    * 07200000
.*      DECLARE LOCAL VARIABLES                                       * 07250000
.*                                                                    * 07300000
.********************************************************************** 07350000
        LCLB  &ERROR        ERROR FLAG                                  07400000
        LCLC  &MIOACRONYM   MIO ACRONYM                            @L1C 07450000
        LCLC  &MCAACRONYM   MCA ACRONYM                            @L1C 07500000
        LCLC  &GNAME        LABEL                                       07550000
        LCLC  &NOTEXT       MNOTE PHRASE 'NO TEXT IS GENERATED.'        07600000
        LCLA  &VARS         NUMBER OF OPERANDS                          07650000
        LCLA  &NMIOL        NUMBER OF PARAMETERS IN MIOL                07700000
        LCLA  &NINBUF       NUMBER OF PARAMETERS IN INBUF               07750000
        LCLA  &NOBUF        NUMBER OF PARAMETERS IN OUTBUF              07800000
        LCLA  &NOBUFL       NUMBER OF PARAMETERS IN OUTBUFL             07850000
        LCLA  &NLANG        NUMBER OF PARAMETERS IN LANGCODE            07900000
.********************************************************************** 07950000
.*                                                                    * 08000000
.*      INITIALIZE MACRO VARIABLES                                    * 08050000
.*                                                                    * 08100000
.********************************************************************** 08150000
&NOTEXT       SETC  'NO TEXT IS GENERATED.'                             08200000
&MCAACRONYM   SETC  'MCA '                                         @L1C 08250000
&MIOACRONYM   SETC  'MIO '                                         @L1C 08300000
&GNAME        SETC  'CNL'.'&SYSNDX'     SET LABEL NAME                  08350000
.*                                                                      08400000
.********************************************************************** 08450000
.*             CHECK VALIDITY OF MACRO OPERANDS                       * 08500000
.********************************************************************** 08550000
.*                                                                      08600000
         AIF   (N'&SYSLIST EQ 0).CKMIO1 TOO MANY POSITIONAL PARMS       08650000
         MNOTE 4,'POSITIONAL PARAMETER "&SYSLIST(1)" IS INVALID'        08700000
.CKMIO1  ANOP                                                           08750000
         AIF   (N'&MIO NE 0).CKMIO2     IS MIO SPECIFIED ?              08800000
         MNOTE 12,'MIO OPERAND MUST BE SPECIFIED, &NOTEXT'              08850000
         MEXIT                                                          08900000
.CKMIO2  AIF   (N'&MIO LT 2).CKMIOL     TOO MUCH OPERANDS IN MIO ?      08950000
         MNOTE 12,'MIO=&MIO IS INVALID, &NOTEXT'                        09000000
&ERROR   SETB  1                                                        09050000
.CKMIOL  ANOP                          TOO MUCH OPERANDS IN MIOL ?      09100000
&NMIOL   SETA  N'&MIOL                                                  09150000
         AIF   (&NMIOL LT 2).CKINBUF                                    09200000
&NMIOL   SETA  1                                                        09250000
         MNOTE 12,'MIOL=&MIOL IS INVALID, &NOTEXT'                      09300000
&ERROR   SETB  1                                                        09350000
.CKINBUF ANOP                          TOO MUCH OPERANDS IN INBUF ?     09400000
&NINBUF  SETA  N'&INBUF                                                 09450000
         AIF  (&NINBUF EQ 2 OR &NINBUF EQ 0).CKOBUF                     09500000
&NINBUF  SETA  2                                                        09550000
         MNOTE 12,'INBUF=&INBUF MUST HAVE TWO OPERANDS, &NOTEXT'        09600000
&ERROR   SETB  1                                                        09650000
.CKOBUF  ANOP                          TOO MUCH OPERANDS IN OUTBUF ?    09700000
&NOBUF   SETA  N'&OUTBUF                                                09750000
         AIF  (&NOBUF LT 2).CKOBUFL                                     09800000
&NOBUF   SETA  1                                                        09850000
         MNOTE 12,'OUTBUF=&OUTBUF IS INVALID, &NOTEXT'                  09900000
&ERROR   SETB  1                                                        09950000
.CKOBUFL ANOP                          TOO MUCH OPERANDS IN OUTBUFL ?   10000000
&NOBUFL  SETA  N'&OUTBUFL                                               10050000
         AIF  (&NOBUFL LT 2).CKLANG                                     10100000
&NOBUFL  SETA  1                                                        10150000
         MNOTE 12,'OUTBUFL=&OUTBUFL IS INVALID, &NOTEXT'                10200000
&ERROR   SETB  1                                                        10250000
.CKLANG  ANOP                          TOO MUCH OPERANDS IN LANGCODE ?  10300000
&NLANG   SETA  N'&LANGCODE                                              10350000
         AIF  (&NLANG LT 2).OPTION                                      10400000
&NLANG   SETA  1                                                        10450000
         MNOTE 12,'LANGCODE=&LANGCODE IS INVALID, &NOTEXT'              10500000
&ERROR   SETB  1                                                        10550000
.OPTION  ANOP                                                           10600000
&VARS    SETA  &NMIOL+&NINBUF+&NOBUF+&NOBUFL+&NLANG                     10650000
         AIF   (&VARS EQ 0 OR &VARS EQ 6).CHECKER                       10700000
&ERROR   SETB  1                                                        10750000
         AIF   (N'&MIOL NE 0).MSINBUF                                   10800000
         MNOTE 12,'MIOL OPERAND IS MISSING, &NOTEXT'                    10850000
.MSINBUF AIF   (N'&INBUF EQ 2).MSOUBUF                                  10900000
         MNOTE 12,'INBUF OPERAND IS MISSING, &NOTEXT'                   10950000
.MSOUBUF AIF  (N'&OUTBUF NE 0).MSOUBFL                                  11000000
         MNOTE 12,'OUTBUF OPERAND IS MISSING, &NOTEXT'                  11050000
.MSOUBFL AIF  (N'&OUTBUFL NE 0).MSLANG                                  11100000
         MNOTE 12,'OUTBUFL OPERAND IS MISSING, &NOTEXT'                 11150000
.MSLANG  AIF  (N'&LANGCODE NE 0).CHECKER                                11200000
         MNOTE 12,'LANGCODE OPERAND IS MISSING, &NOTEXT'                11250000
.CHECKER ANOP                                                           11300000
         AIF  (&ERROR EQ 0).GENCODE                                     11350000
         MEXIT                                                          11400000
.********************************************************************** 11450000
.* GENERATE ASSEMBLER CODE IF NO SYNTAX ERROR                         * 11500000
.********************************************************************** 11550000
.GENCODE ANOP                                                           11600000
         SPACE 1                                                        11650000
*--------------------- TRANMSG START ---------------------------------  11700000
&LABEL   DS    0H                                                       11750000
.******************************************************************@D1A 11755500
.* SAVE CALLER'S ADDRESSING MODE AND SET TO 31 BIT ADDRESSING      @D1A 11761000
.******************************************************************@D1A 11766500
         LA    15,&GNAME.S               LOAD EXECUTION ADDRESS    @D1A 11772000
         O     15,=X'80000000'           SET TO 31 BIT ADDRESSING  @D1A 11777500
         BASSM 14,15                     ACTIVATE 31 BIT ADDRESSING@D1A 11783000
         B     &GNAME.M                  EXIT TO TRANMSG CALLER    @D1A 11788500
&GNAME.S ST    14,12(,13)                SAVE RETURN ADDRESS       @02C 11794200
.********************************************************************** 11800000
.* LOCATE MCA AND VERIFY MMS IS AVAILABLE AND MCA IS VALID            * 11850000
.********************************************************************** 11900000
         L     14,16(0,0)                   LOAD CVT ADDRESS            11950000
         L     14,200(,14)                  LOAD SCVT ADDRESS      @01C 12000000
         L     14,56(,14)                   LOAD MCA ADDRESS       @01C 12050000
         LTR   14,14                                                    12100000
         BZ    &GNAME.B                     DOES MCA EXIST ?            12150000
         TM    MCAFLAGS-MCA(14),MCAAVAIL    BRANCH IF MMS               12200000
         BNO   &GNAME.B                         IS NOT AVAILABLE        12250000
         CLC   MCAACRN-MCA(L'MCAACRN,14),=C'&MCAACRONYM'           @L1C 12300000
         BNE   &GNAME.B                     BRANCH IF INVALID ACRONYM   12350000
.********************************************************************** 12400000
.* VERIFY THE MIOL IS LARGE ENOUGH FOR THE TRANSLATE SERVICE          * 12450000
.********************************************************************** 12500000
         AIF   (&VARS EQ 0).GMIO                                        12550000
         AIF   ('&INBUF(2)'(1,1) EQ '(').RNUM                           12600000
         L     0,&INBUF(2)                  LOAD MESSAGE ENTRIES NUMBER 12650000
         LTR   0,0                                                      12700000
         AGO   .GETLEN                                                  12750000
.RNUM    ANOP                                                           12800000
         LTR   0,&INBUF(2,1)                LOAD NUMBER OF ENTRIES      12850000
.GETLEN  ANOP                                                           12900000
         BNP   &GNAME.A                     BRANCH IF ZERO OR NEGATIVE  12950000
         LA    15,MIOMSGL                   LOAD LENG OF MESSAGE ENTRY  13000000
         MR    14,0                                                     13050000
         LA    14,MIOVDAT-MIO               R14 = MIOVDAT +             13100000
         ALR   15,14                              (MIOMSGL * NUM)       13150000
.GMIOL   AIF   ('&MIOL'(1,1) EQ '(').GMIOLR                             13200000
         L     1,&MIOL                      R1 = MIO LENGTH             13250000
         AGO   .CHECKLN                                                 13300000
.GMIOLR  ANOP                                                           13350000
         LR    1,&MIOL(1)                   R1 = MIO LENGTH             13400000
.CHECKLN ANOP                                                           13450000
         CR    1,15                         TEST THE LENGTH OF MIO      13500000
         BL    &GNAME.C                     BRANCH IF MIO IS TOO SMALL  13550000
.********************************************************************** 13600000
.* GET THE MIO ADDRESS                                                * 13650000
.********************************************************************** 13700000
.GMIO    AIF   ('&MIO'(1,1) EQ '(').GMIOR                               13750000
         LA    1,&MIO                       R1 -> MIO                   13800000
         AGO   .GINIT                                                   13850000
.GMIOR   LR    1,&MIO(1)                    R1 -> MIO                   13900000
.GINIT   AIF   (&VARS EQ 0).SKPLOOP   SKIP IF ONLY MIO IS SPECIFIED     13950000
.********************************************************************** 14000000
.* INITIALIZE MIO FIXED PORTION                                       * 14050000
.********************************************************************** 14100000
         XC    0(MIOVDAT-MIO,1),0(1)        CLEAR MIO FIXED PORTION     14150000
         MVC   MIOACRN-MIO(L'MIOACRN,1),=C'&MIOACRONYM'            @L1C 14200000
         MVI   MIOVRSN-MIO(1),$MIO_VERSION                              14250000
         ST    15,MIOSIZE-MIO(,1)           SAVE MIOSIZE                14300000
         SLR   15,14                        R15 = VARIABLE AREA LENGTH  14350000
         ST    15,MIOVDATL-MIO(,1)          SAVE MIOVDATL               14400000
.********************************************************************** 14450000
.* MIOLANG = LANGCODE                                                 * 14500000
.********************************************************************** 14550000
         AIF   ('&LANGCODE'(1,1) EQ '(').GLANGR                         14600000
         MVC   MIOLANG-MIO(L'MIOLANG,1),&LANGCODE   MIOLANG = LANGCODE  14650000
         AGO   .GOUTBUF                                                 14700000
.GLANGR  MVC   MIOLANG-MIO(L'MIOLANG,1),0&LANGCODE  MIOLANG = LANGCODE  14750000
.********************************************************************** 14800000
.* SET MIOBFPTR = OUTBUF                                              * 14850000
.********************************************************************** 14900000
.GOUTBUF AIF   ('&OUTBUF'(1,1) EQ '(').GOUTBUFR                         14950000
         MVC   MIOBFPTR-MIO(4,1),&OUTBUF    SAVE OUTPUT BUFFER ADDRESS  15000000
         AGO   .GOUTBFL                                                 15050000
.GOUTBUFR ANOP                                                          15100000
         ST    &OUTBUF(1),MIOBFPTR-MIO(,1)  SAVE OUTPUT BUFFER ADDRESS  15150000
.********************************************************************** 15200000
.* SET MIOBFSIZ = OUTBUFL                                             * 15250000
.********************************************************************** 15300000
.GOUTBFL AIF   ('&OUTBUFL'(1,1) EQ '(').GOUTBLR                         15350000
         MVC   MIOBFSIZ-MIO(L'MIOBFSIZ,1),&OUTBUFL  STORE OUTBUF SIZE   15400000
         AGO   .GINFBFN                                                 15450000
.GOUTBLR ST    &OUTBUFL(1),MIOBFSIZ-MIO(,1)  STORE OUTBUF SIZE          15500000
.GINFBFN ANOP                                                           15550000
.********************************************************************** 15600000
.* INITIALIZE THE REST OF MIO FIXED PORTION                           * 15650000
.********************************************************************** 15700000
         LA    15,1                         SET THE 1ST MESSAGE NUMBER  15750000
         ST    15,MIOXLATE-MIO(,1)          TO BE TRANSLATED TO ONE     15800000
         MVI   MIOMID-MIO(1),C' '           INIT MIOMID TO SPACES       15850000
         MVC   MIOMID-MIO+1(L'MIOMID-1,1),MIOMID-MIO(1)                 15900000
         ST    14,MIOOFFST-MIO(,1)          OFFSET OF THE FIRST MESSAGE 15950000
         ST    0,MIOMSGNO-MIO(,1)           STORE NUMBER OF MESSAGES    16000000
         LA    15,MIOVDAT-MIO(,1)           R15-> FIRST MIO MSG AREA    16050000
         AIF   ('&INBUF(1)'(1,1) EQ '(').RINBUF                         16100000
         LA    14,&INBUF(1)                 R14-> INPUT LIST OF MESSAGE 16150000
         AGO   .IMIOMSG                                                 16200000
.RINBUF  ANOP                                                           16250000
         LR    14,&INBUF(1,1)               R14-> INPUT LIST OF MESSAGE 16300000
.********************************************************************** 16350000
.* INITIALIZE MIOMSG SECTION                                          * 16400000
.********************************************************************** 16450000
.IMIOMSG ANOP                                                           16500000
*                                                 ADDRESSES             16550000
&GNAME.L DS    0H                                                       16600000
         XC    0(MIOMSGL,15),0(15)          CLEAR MESSAGE ENTRY AREA    16650000
         MVC   MIOINPTP-MIOMSG(4,15),0(14)  SAVE INPUT MESSAGE ADDRESS  16700000
         MVI   MIOINFL-MIOMSG(15),MIOXLATF  TURN ON TRANSLATE FLAG      16750000
         LA    15,MIOMSGL(,15)              R15 -> NEXT MESSAGE ENTRY   16800000
         LA    14,4(,14)                    LOOP UNTIL ALL THE MESSAGE  16850000
         BCT   0,&GNAME.L                      ENTRIES ARE INITIALIZED  16900000
.SKPLOOP ANOP                                                           16950000
         MVI   MIOFLAGS-MIO(1),MIOUXLAT     REQUEST TRANSLATION         17000000
         B     &GNAME.D                     BRANCH TO INVOKE PC ROUTINE 17050000
.********************************************************************** 17100000
.* SET ERROR RETURN CODE AND REASON CODE                              * 17150000
.********************************************************************** 17200000
&GNAME.A LA    0,58                         INVALID NUM OF LIST ENTRIES 17250000
         B     &GNAME.E                                                 17300000
&GNAME.B LA    0,23                         MMS IS NOT AVAILABLE        17350000
         AIF   (&VARS EQ 0).GENPC                                       17400000
         B     &GNAME.E                                                 17450000
&GNAME.C LA    0,57                         MIO IS TOO SMALL            17500000
.GENPC   ANOP                                                           17550000
&GNAME.E LA    15,12                        SET SEVERE RETURN CODE      17600000
         B     &GNAME.X                     - AND EXIT                  17650000
.********************************************************************** 17700000
.* INVOKE TRANMSG PC ROUTINE                                          * 17750000
.********************************************************************** 17800000
&GNAME.D DS    0H                                                 @L1C  17850000
         AIF   (&VARS EQ 0).PCNO                                        18000000
         L     14,16(0,0)                   OBTAIN CVT ADDRESS          18050000
         L     14,200(,14)                  ADDRESS OF SCVT        @01C 18100000
         L     14,56(,14)                   ADDRESS OF MCA         @01C 18150000
.PCNO    ANOP                                                           18200000
         L     14,MCATPCNO-MCA(,14)         OBTAIN PC NUMBER      @P1A  18250000
         PC    0(14)                        PC TO TRANMSG ROUTINE       18300000
&GNAME.X DS    0H                                                       18500000
         L     14,12(,13)                   LOAD EXIT ADDRESS     @02C  18510000
         BSM   0,14                         RESTORE CALLER'S      @D1A  18520000
*                                             ADDRESSING MODE     @D1A  18530000
&GNAME.M DS    0H                                                 @D1A  18540000
*--------------------- TRANMSG END -----------------------------------  18550000
         SPACE 1                                                        18600000
         MEND                                                           18650000
* */ TRANMSG: MACRO                                                     18700000
* KEYS(MIO,INBUF,MIOL,OUTBUF,OUTBUFL,LANGCODE);                         18750000
*          ANS('?'||MACLABEL||'TRANMSGP '||MACLIST||MACKEYS||';');      18800000
*%     END TRANMSG;                                                     18850000
