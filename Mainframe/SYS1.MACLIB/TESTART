*/*  START OF SPECIFICATIONS ****************************************** 00050000
*                                                                       00100000
*01*  MACRO NAME: TESTART                                               00150000
*                                                                       00200000
*01*  COPYRIGHT                                                         00250000
*                                                                       00300000
*      5685-001                                                         00350000
*      THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                      00400000
*      (C) COPYRIGHT IBM CORP. 1988                                     00450000
*      LICENSED MATERIALS - PROPERTY OF IBM                             00500000
*                                                                       00550000
*01*  STATUS: HBB3310                                                   00600000
*                                                                       00650000
*01*  FUNCTION:                                                         00700000
*                                                                       00725000
*        Provide the TAR instruction function and interface with the    00750000
*        TESTART service routine (IEAVXTAR) when required.              00800000
*                                                                       00850000
*                                                                       00900000
*02*    OPERATION:                                                      00903300
*                                                                       00906600
*        TESTART generates an inline TAR instruction, and when          00909900
*        condition 0, 1, or 2  results, sets a corresponding            00913200
*        return code (inline) in register 15 of x'00', x'04',           00916500
*        or x'08', (described below) respectively.                      00919800
*        When the TAR instruction results in condition code 3,          00923100
*        a stacking PC is issued to cause entry to the IEAVXTAR         00926400
*        service routine. IEAVXTAR determines whether the               00929700
*        specified ALET is 1, an invalid ALET, or a valid ALET          00933000
*        other than 1, and sets a return code in register 15            00936300
*        (described below).                                             00939600
*                                                                       00942900
*                                                                       00946200
*01* SYNTAX:                                                            00950000
*                                                                       01000000
*        (BAL):                                                         01016600
*                                                                       01033200
*        TESTART   ALET=(access_register)                               01050000
*                  ,EAX=(general_register)                              01100000
*                  ,CADS=YES|NO                                         01125000
*                                                                       01150000
*                                                                       01200000
*        (PL/AS):                                                       01208300
*                                                                       01216600
*        ?TESTART   ALET(access_register)                               01224900
*                   EAX(general_register)                               01233200
*                   CADS(YES|NO)                                        01237300
*                                                                       01241500
*        where:                                                         01250000
*                                                                       01300000
*                  ALET                                                 01333300
*                  (access_register)                                    01366600
*                  specifies an access register 0 through 15 that       01400000
*                  contains the ALET to be tested.                      01450000
*                                                                       01500000
*                  EAX                                                  01533300
*                  (general register)                                   01566600
*                  specifies a general register 0 through 14 that       01600000
*                  contains the EAX to be used in the test, in bit      01650000
*                  positions 0-15.                                      01700000
*                                                                       01750000
*                  CADS                                                 01766600
*                  YES specifies to distinguish betwwen CADS ALETs on   01783200
*                  the PASN Acess List and all other ALETS on the       01799800
*                  PASN list.                                           01816400
*                                                                       01833000
*        Both ALET and EAX are required and there are no default        01849600
*        values.  The user is required to set up both registers prior   01866200
*        to invocation of the TESTART macro.                            01882800
*        CADS is optional and the default is NO.                        01899400
*                                                                       01916000
*                                                                       01932600
*                                                                       01950000
*                                                                       02000000
*01*  RETURN-CODES:                                                     02003500
*                                                                       02007000
*        x'00' - The specified ALET is 0.                               02010500
*        x'04' - The specified ALET represents a valid entry on the     02014000
*                workunit access list.                                  02017500
*        x'08' - The specified ALET represents a valid entry on the     02021000
*                PASN access list.                                      02024500
*        x'0C' - The specified ALET is 1.                               02028000
*        x'10' - The specified ALET/EAX will result in invalid ART      02031500
*                exceptions.                                            02035000
*        x'14' - An unexpected error occurred in the service routine,   02038500
*                IEAVXTAR.                                              02042000
*        x'18' - The specified ALET represents a valid CADS ALET.       02043700
*                                                                       02045500
*01*  COMPONENT: SCXMS (PC/AUTH)                                        02050000
*                                                                       02100000
*                                                                       02107100
*01*  MODULE TYPE: MACRO                                                02114200
*                                                                       02121300
*02*    PROCESSOR: ASSEMBLER, PL/AS (BILINGUAL)                         02128400
*                                                                       02135500
*                                                                       02142600
*01*  MACLIB: AMACLIB                                                   02150000
*                                                                       02200000
*01*  CHANGE ACTIVITY:                                                  02250000
*   $D0=DCR0277  HBB3310  870831  PD162M: TESTART macro                 02300000
*   $L1=CADSA    HBB5510  930304  PD16H5: CADs ALET support             02325000
*                                                                       02350000
**** END OF SPECIFICATIONS ***************************************** */ 02400000
*/*                                                                     02500000
         MACRO                                                          02550000
&LABL    TESTART &ALET=,                ALET to be used                X02600000
               &EAX=,                   EAX to be used             @L1AX02633300
               &CADS=                   CADS ALET to be checked         02666600
.*                                                                      02700000
.*                                                                      02725000
.*********************************************************************  02750000
.*       Declare arithmetic variables                                *  02800000
.*********************************************************************  02850000
.*                                                                      02900000
.*                                                                      02925000
         LCLC  &OSFT                    Offset into SFT for TESTART     02950000
         LCLC  &EXIT                                                    03000000
         LCLB  &CADSFLG                 Flag to indicate CADS      @L1A 03016600
.*                                      keyword soecified.              03033200
         LCLB  &ERRFLG                  Error flag to stop code         03050000
.*                                      generation                      03100000
&ERRFLG  SETB  0                        Initialize to no errors         03150000
&CADSFLG SETB  0                        Initialize to zero.        @L1A 03175000
&OSFT    SETC  '224'                    Slot number (57-1) * 4          03200000
&OSFT2   SETC  '400'                    Slot number (101-1) * 4    @L1A 03216600
.*                                      for IEAVXRT1 routine            03233200
&EXIT    SETC  'IHB'.'&SYSNDX'.'K'      Exit label                      03250000
.*                                                                      03266600
.*                                                                      03283200
.*********************************************************************  03300000
.*    Put out BAL MACDATE comment line regardless of errors          *  03350000
.*********************************************************************  03400000
.*                                                                      03450000
.*                                                                      03500000
*        MACDATE = 03/04/93                                        @L1C 03550000
.*                                                                      03600000
.*                                                                      03650000
.*********************************************************************  03700000
.*       Ensure no positional parameters were specified              *  03720000
.*********************************************************************  03740000
.*                                                                      03760000
.*                                                                      03780000
         AIF   (N'&SYSLIST GE 1).TOOMANY If any positional parameters   03800000
.*                                      were specified, issue MNOTE     03820000
.*                                                                      03840000
.*                                                                      03860000
.*********************************************************************  03880000
.*       Validate ALET keyword                                       *  03900000
.*********************************************************************  03950000
.*                                                                      04000000
.*                                                                      04025000
.CHKALET ANOP                                                           04037500
         AIF   ('&ALET' EQ '').NOALET   If ALET is not specified,       04050000
.*                                      issue MNOTE                     04100000
         AIF   ('&ALET'(1,1) NE '(').NOTREG1 If ALET not specified in   04150000
.*                                      a reg, issue MNOTE              04200000
         AIF   (N'&ALET GT 1).MULTALE   If more than one ALET register  04237500
.*                                      specified, issue MNOTE          04287500
.*                                                                      04350000
.*                                                                      04375000
.*********************************************************************  04400000
.*       Validate EAX keyword                                        *  04450000
.*********************************************************************  04500000
.*                                                                      04550000
.*                                                                      04575000
.CHKEAX  ANOP                                                           04600000
         AIF   ('&EAX' EQ '').NOEAX     If EAX is not specified,        04650000
.*                                      issue MNOTE                     04700000
         AIF   ('&EAX'(1,1) NE '(').NOTREG2 If EAX is not in a reg,     04750000
.*                                      issue MNOTE                     04800000
         AIF   (N'&EAX GT 1).MULTEAX    If more than one EAX register   04837500
.*                                      specified, issue MNOTE          04887500
         AIF   (T'&EAX NE 'N').CHKCADS  IF EAX is not a self defining   04950000
.*                                      number, cannot validate value   05000000
.*                                      specified, so continue          05050000
         AIF   (&EAX(1) EQ 15).EAXIN15  If the EAX was specified in     05100000
.*                                      reg 15, issue MNOTE             05150000
.*                                                                      05152200
.*                                                                      05154400
.*********************************************************************  05156600
.*       Validate CADS keyword                                       *  05158800
.*********************************************************************  05161000
.*                                                                      05163200
.*                                                                      05165400
.CHKCADS ANOP                                                      @L1A 05167600
         AIF   ('&CADS' EQ '').CHKERR   CADS is not specified,     @L1A 05169800
.*                                      continue                        05172000
         AIF   ('&CADS' EQ 'NO').CHKERR Value OK, continue.        @L1A 05174200
         AIF   ('&CADS' NE 'YES').CADSERR If invalid value, then   @L1A 05176400
.*                                      issue an MNOTE.                 05178600
&CADSFLG SETB  1                        CADS=YES specified.        @L1A 05180800
         LR    1,&EAX(1)            Get EAX to be tested           @L1A 05183000
         EAR   0,&ALET(1)           Get ALET to be tested          @L1A 05185200
         L     14,16(0,0)           Get CVT address                @L1A 05187400
         L     14,772(14,0)         Get System Function Table addr @L1A 05189600
         L     14,&OSFT2.(14,0)     Get LX/EX for IEAVXTR1 routine @L1A 05191800
         PC    0(14)                PC TO TESTART SERVICE ROUTINE  @L1A 05194000
         MEXIT                                                     @L1A 05196200
.*                                                                      05200000
.*                                                                      05225000
.*********************************************************************  05250000
.*       Issue TAR instruction and interrogate condition code        *  05300000
.*********************************************************************  05350000
.*                                                                      05400000
.*                                                                      05425000
.CHKERR  ANOP                                                           05450000
         AIF   (&ERRFLG EQ 0).GENCODE Generate code if no errors found  05500000
         MEXIT                                                          05550000
.GENCODE ANOP                                                           05600000
&LABL    DS    0H                                                       05650000
         TAR   &ALET(1),&EAX(1)     ISSUE TAR TO SET CONDITION CODE     05700000
         LA    15,4(0,0)                                                05750000
         BC    4,&EXIT              DONE IF CONDITION CODE 1            05800000
         LA    15,0(0,0)                                                05850000
         BC    8,&EXIT              DONE IF CONDITION CODE 0            05900000
         LA    15,8(0,0)                                                05950000
         BC    2,&EXIT              DONE IF CONDITION CODE 2            06000000
*                                   ON CONDITION CODE 3, INVOKE         06050000
*                                   TESTART SERVICE                     06100000
         LR    1,&EAX(1)            GET EAX TO BE TESTED BY SERVICE     06150000
         EAR   0,&ALET(1)           GET ALET TO BE TESTED BY SERVICE    06200000
.*                                                                      06250000
.*                                                                      06275000
.*********************************************************************  06300000
.*    Generate PC linkage to TESTART service routine                 *  06350000
.*********************************************************************  06400000
.*                                                                      06450000
.*                                                                      06475000
         L     14,16(0,0)           GET CVT ADDRESS                     06500000
         L     14,772(14,0)         GET SYSTEM FUNCTION TABLE ADDRESS   06550000
         L     14,&OSFT.(14,0)      GET LX/EX FOR TESTART SERVICE       06600000
         PC    0(14)                PC TO TESTART SERVICE ROUTINE       06650000
&EXIT    DS    0H                                                       06700000
         MEXIT                                                          06750000
.*                                                                      06800000
.*                                                                      07000000
.*********************************************************************  07008300
.*    Error messages                                                 *  07016600
.*********************************************************************  07024900
.*                                                                      07033200
.*                                                                      07041500
.TOOMANY ANOP                                                           07091500
         MNOTE 8,' EXCESSIVE POSITIONAL PARAMETERS WERE SPECIFIED.'     07141500
&ERRFLG  SETB  1                        Set error indicator             07200000
         AGO   .CHKALET                                                 07208300
.NOALET  ANOP                                                           07216600
         MNOTE 8,' ALET KEYWORD IS MISSING OR ITS VALUE IS NOT SPECIFIEX07224900
               D.'                                                      07233200
&ERRFLG  SETB  1                        Set error indicator             07241500
         AGO   .CHKEAX                                                  07250000
.NOTREG1 ANOP                                                           07300000
         MNOTE 8,' ALET REQUIRES AN ACCESS REGISTER OPERAND, ENCLOSED IX07333300
               N PARENTHESES.'                                          07366600
&ERRFLG  SETB  1                        Set error indicator             07400000
         AGO   .CHKEAX                                                  07450000
.MULTALE ANOP                                                           07500000
         MNOTE 8,' ALET PARAMETER CONTAINS TOO MANY SUBLISTS.'          07550000
&ERRFLG  SETB  1                        Set error indicator             07650000
         AGO   .CHKEAX                                                  07700000
.NOEAX   ANOP                                                           07750000
         MNOTE 8,' EAX KEYWORD IS MISSING OR ITS VALUE IS NOT SPECIFIEDX07800000
               .'                                                       07850000
         MEXIT                                                          07900000
.NOTREG2 ANOP                                                           07950000
         MNOTE 8,' EAX REQUIRES A REGISTER OPERAND, ENCLOSED IN PARENTHX07983300
               ESES.'                                                   08016600
         MEXIT                                                          08050000
.MULTEAX ANOP                                                           08100000
         MNOTE 8,' EAX PARAMETER CONTAINS TOO MANY SUBLISTS.'           08150000
         MEXIT                                                          08250000
.CADSERR ANOP                                                      @L1A 08262500
         MNOTE 8,' CADS PARAMETER MUST BE EITHER YES OR NO.'       @L1A 08275000
         MEXIT                                                     @L1A 08287500
.EAXIN15 ANOP                                                           08300000
         MNOTE 8,' EAX MUST USE REGISTER 0 THROUGH 14.'                 08350000
         MEND                                                           08450000
*                                                                    */ 08500000
*%TESTART:                                                              08550000
*   MACRO KEYS(ALET,                /* Input ALET access register    */ 08600000
*       EAX,                        /* Input EAX, bits 0-15 in GPR   */ 08633300
*       CADS);                      /* Input CADS                @L1A*/ 08666600
*                                                                       08700000
*   /*****************************************************************/ 08750000
*   /*                                                               */ 08800000
*   /* Define external macro variables                               */ 08850000
*   /*                                                               */ 08900000
*   /*****************************************************************/ 08950000
*                                                                       09000000
*   DECLARE                                                             09050000
*     EHAREGS CHARACTER EXT;        /* Contains declared register       09100000
*                                      numbers                       */ 09150000
*                                                                       09200000
*   /*****************************************************************/ 09250000
*   /*                                                               */ 09300000
*   /* Define internal macro variables                               */ 09350000
*   /*                                                               */ 09400000
*   /*****************************************************************/ 09450000
*                                                                       09500000
*   DCL                                                                 09550000
*     EM(6) CHARACTER;              /* Error messages - defined  @L1C*/ 09600000
*   DCL                                                                 09650000
*     ERR FIXED;                    /* Error severity value          */ 09700000
*   DCL                                                                 09750000
*     ERRMSG CHARACTER;             /* Error message to print        */ 09800000
*   DCL                                                                 09850000
*     IHBERR FIXED;                 /* Highest error level              09900000
*                                      encountered                   */ 09950000
*   DCL                                                                 10000000
*     INCMNT FIXED;                 /* Indent value for error           10050000
*                                      comments                      */ 10100000
*   DCL                                                                 10150000
*     IVDOCMT CHARACTER;            /* Comment for DO and END           10200000
*                                      statements                    */ 10250000
*   DCL                                                                 10300000
*     MPREFIX CHARACTER;            /* Error message prefix          */ 10350000
*                                                                       10400000
*   DCL                                                                 10410000
*     CADSFLG FIXED;                /* Flag indicating CADS=YES was     10420000
*                                      specified.                @L1A*/ 10430000
*                                                                       10440000
*   /*****************************************************************/ 10450000
*   /*                                                               */ 10500000
*   /* Initialize internal macro variables                           */ 10550000
*   /*                                                               */ 10600000
*   /*****************************************************************/ 10650000
*                                                                       10700000
*   CADSFLG = 0;                    /* Initialize flag.          @L1A*/ 10725000
*   ERR=8;                          /* Error severity                */ 10750000
*   IHBERR=0;                       /* Indicate NO ERROR condition   */ 10800000
*   INCMNT=MACLMAR;                 /* Indent for error comments     */ 10850000
*   IVDOCMT='?TESTART '||MACLIST||' '||MACKEYS||' '||'03/04/93';/*      10900000
*                                      Set up DO - END comment   @L1C*/ 10950000
*   MPREFIX='?TESTART --> ';        /* Error messages prefix         */ 11000000
*                                                                       11050000
*   /*****************************************************************/ 11100000
*   /*                                                               */ 11150000
*   /* Processing will continue as far as possible when an error     */ 11200000
*   /* occurs                                                        */ 11250000
*   /*                                                               */ 11300000
*   /*****************************************************************/ 11350000
*                                                                       11400000
*   EM(1)='EXCESSIVE POSITIONAL PARAMETERS WERE SPECIFIED';             11450000
*   EM(2)=                          /* keyword                       */ 11500000
*       ' PARAMETER REQUIRES A VALUE';                                  11550000
*   EM(3)=                          /* keyword                       */ 11600000
*       ' PARAMETER CONTAINS TOO MANY SUBLISTS';                        11650000
*   EM(4)=                          /* keyword                       */ 11700000
*       ' IS REQUIRED, BUT IS NOT SUPPLIED';                            11750000
*   EM(5)='TOO MANY ERRORS ENCOUNTERED; NO CODE GENERATED';             11800000
*   EM(6)='PARAMETER MUST BE EITHER YES OR NO';               /* @L1A*/ 11825000
*                                                                       11850000
*   /*****************************************************************/ 11900000
*   /*                                                               */ 11950000
*   /* Set up the macro invocation comment                           */ 12000000
*   /*                                                               */ 12050000
*   /*****************************************************************/ 12100000
*                                                                       12150000
*   ANS(MACLABEL) NORESCAN COL(MACLMAR);/* Put out the labels        */ 12200000
*   ANS('BEGIN;') COL(2);           /* Put out 'BEGIN'               */ 12250000
*   ANS(COMMENT(IVDOCMT));          /* List macro parameters         */ 12300000
*                                                                       12350000
*   /*****************************************************************/ 12400000
*   /*                                                               */ 12450000
*   /* Process the maclist                                           */ 12500000
*   /*                                                               */ 12550000
*   /*****************************************************************/ 12600000
*                                                                       12650000
*   IF NUMBER(MACLIST)^=0 THEN      /* Too many arguments in MACLIST?*/ 12700000
*     DO;                           /* Yes -                         */ 12750000
*       IHBERR=ERR;                 /* Indicate error                */ 12800000
*       ERRMSG=MPREFIX||EM(1);      /* Build message                 */ 12850000
*       ANS MSG(ERRMSG) NORESCAN;   /* Issue message                 */ 12900000
*       ANS(COMMENT(ERRMSG)) COL(INCMNT);/* Generate comment         */ 12950000
*     END;                                                              13000000
*                                                                       13050000
*   /*****************************************************************/ 13100000
*   /*                                                               */ 13150000
*   /* Validate the ALET keyword                                     */ 13200000
*   /*                                                               */ 13250000
*   /*****************************************************************/ 13300000
*                                                                       13350000
*   IF(ALET='') THEN                /* If ALET was not specified, the   13400000
*                                      invocation is invalid         */ 13450000
*     DO;                                                               13500000
*       IHBERR=ERR;                 /* Indicate Error                */ 13550000
*       ERRMSG=MPREFIX||'ALET'||EM(4);/* Build message               */ 13600000
*       ANS MSG(ERRMSG) NORESCAN;   /* Issue message                 */ 13650000
*       ANS(COMMENT(ERRMSG)) COL(INCMNT);/* Generate comment         */ 13700000
*     END;                                                              13750000
*   ELSE                                                                13800000
*     DO;                                                               13850000
*       IF(NUMBER(ALET)>1) THEN     /* If there are to many sublists,   13900000
*                                      the invocation is invalid     */ 13950000
*         DO;                                                           14000000
*           IHBERR=ERR;             /* Indicate Error                */ 14050000
*           ERRMSG=MPREFIX||'ALET'||EM(3);/* Build msg               */ 14100000
*           ANS MSG(ERRMSG) NORESCAN;/* Issue msg                    */ 14150000
*           ANS(COMMENT(ERRMSG)) COL(INCMNT);/* Generate comment     */ 14200000
*         END;                                                          14250000
*       ELSE                                                            14300000
*         DO;                                                           14350000
*           IF ALET(1)='' THEN      /* If there are no ALET             14400000
*                                      arguments, the invocation is     14450000
*                                      invalid                       */ 14500000
*             DO;                                                       14550000
*               IHBERR=ERR;         /* Indicate Error                */ 14600000
*               ERRMSG=MPREFIX||'ALET'||EM(2);/* Build message       */ 14650000
*               ANS MSG(ERRMSG) NORESCAN;/* Issue message            */ 14700000
*               ANS(COMMENT(ERRMSG)) COL(INCMNT);/* Generate comment */ 14750000
*             END;                                                      14800000
*         END;                                                          14850000
*     END;                                                              14900000
*                                                                       14950000
*   /*****************************************************************/ 15000000
*   /*                                                               */ 15050000
*   /* Validate the EAX keyword                                      */ 15100000
*   /*                                                               */ 15150000
*   /*****************************************************************/ 15200000
*                                                                       15250000
*   IF(EAX='') THEN                 /* If EAX was not specified, the    15300000
*                                      invocation is invalid         */ 15350000
*     DO;                                                               15400000
*       IHBERR=ERR;                 /* Indicate Error                */ 15450000
*       ERRMSG=MPREFIX||'EAX'||EM(4);/* Build message                */ 15500000
*       ANS MSG(ERRMSG) NORESCAN;   /* Issue message                 */ 15550000
*       ANS(COMMENT(ERRMSG)) COL(INCMNT);/* Generate comment         */ 15600000
*     END;                                                              15650000
*   ELSE                                                                15700000
*     DO;                                                               15750000
*       IF(NUMBER(EAX)>1) THEN      /* If there are to many sublists,   15800000
*                                      the invocation is invalid     */ 15850000
*         DO;                                                           15900000
*           IHBERR=ERR;             /* Indicate Error                */ 15950000
*           ERRMSG=MPREFIX||'EAX'||EM(3);/* Build msg                */ 16000000
*           ANS MSG(ERRMSG) NORESCAN;/* Issue msg                    */ 16050000
*           ANS(COMMENT(ERRMSG)) COL(INCMNT);/* Generate comment     */ 16100000
*         END;                                                          16150000
*       ELSE                                                            16200000
*         DO;                                                           16250000
*           IF EAX(1)='' THEN       /* If there are no EAX arguments,   16300000
*                                      the invocation is invalid     */ 16350000
*             DO;                                                       16400000
*               IHBERR=ERR;         /* Indicate Error                */ 16450000
*               ERRMSG=MPREFIX||'EAX'||EM(2);/* Build message        */ 16500000
*               ANS MSG(ERRMSG) NORESCAN;/* Issue message            */ 16550000
*               ANS(COMMENT(ERRMSG)) COL(INCMNT);/* Generate comment */ 16600000
*             END;                                                      16650000
*         END;                                                          16700000
*     END;                                                              16750000
*                                                                       16800000
*   /*****************************************************************/ 16850000
*   /*                                                               */ 16900000
*   /* Validate the CADS keyword                                     */ 16901300
*   /*                                                               */ 16902600
*   /*****************************************************************/ 16903900
*                                                                       16905200
*   IF(CADS^='') THEN                /* If CADS was specified, the      16906500
*                                      invocation is invalid     @L1A*/ 16907800
*     DO;                                                     /* @L1A*/ 16909100
*       IF(NUMBER(CADS)>1) THEN      /* If there are to many sublists,  16910400
*                                      the invocation is invalid @L1A*/ 16911700
*         DO;                                                 /* @L1A*/ 16913000
*           IHBERR=ERR;             /* Indicate Error            @L1A*/ 16914300
*           ERRMSG=MPREFIX||'EAX'||EM(3);/* Build msg            @L1A*/ 16915600
*           ANS MSG(ERRMSG) NORESCAN;/* Issue msg                @L1A*/ 16916900
*           ANS(COMMENT(ERRMSG)) COL(INCMNT);/* Generate comment @L1A*/ 16918200
*         END;                                                /* @L1A*/ 16919500
*       ELSE                        /* Only a single value       @L1A*/ 16920800
*         DO;                                                 /* @L1A*/ 16922100
*           IF CADS(1)^='NO' THEN   /* Continue value checking   @L1A*/ 16923400
*             DO;                                             /* @L1A*/ 16924700
*               IF CADS(1)='YES' THEN /*                         @L1A*/ 16926000
*                 DO;                                         /* @L1A*/ 16927300
*                   CADSFLG = 1;    /* Set CADSFLG               @L1A*/ 16928600
*                 END;                                        /* @L1A*/ 16929900
*               ELSE                /* Value is invalid          @L1A*/ 16931200
*                 DO;                                         /* @L1A*/ 16932500
*                   IHBERR=ERR;     /* Indicate Error            @L1A*/ 16933800
*                   ERRMSG=MPREFIX||'EAX'||EM(6);/* Build msg    @L1A*/ 16935100
*                   ANS MSG(ERRMSG) NORESCAN;/* Issue message    @L1A*/ 16936400
*                   ANS(COMMENT(ERRMSG)) COL(INCMNT);/* Generate        16937700
*                                      comment                   @L1A*/ 16939000
*                 END;              /* End - value invalid       @L1A*/ 16940300
*             END;                  /* End - value not 'NO'      @L1A*/ 16941600
*         END;                      /* End - single value        @L1A*/ 16942900
*     END;                          /* End - non-blank value     @L1A*/ 16944200
*                                                                       16945500
*   /*****************************************************************/ 16946800
*   /*                                                               */ 16948100
*   /* If there were no errors, generate the assembler TESTART       */ 16950000
*   /* invocation                                                    */ 17000000
*   /*                                                               */ 17050000
*   /*****************************************************************/ 17100000
*                                                                       17150000
*   IF IHBERR=0 THEN                /* If there were no invocation      17200000
*                                      errors, generate the code     */ 17250000
*     DO;                                                               17300000
*       ANS(('RFY (GPR00P,GPR01P,GPR14P,GPR15P) RSTD; ')||COMMENT(      17350000
*           'Restrict general purpose registers')) COL(2) SKIP(1)       17400000
*           NORESCAN;               /* Restrict required registers   */ 17450000
*       IF CADSFLG = 1 THEN         /* Was CADS=YES specified?   @L1A*/ 17461500
*         DO;                       /* Yes.                      @L1A*/ 17473000
*           ANS(('GEN (TESTART ALET=('||ALET(1)||'),EAX=('||EAX(1)||    17484500
*           '),CADS='||CADS(1)||')')||                                  17496000
*           COMMENT('Generate the assembler TESTART MACRO')) COL(2)     17507500
*           SKIP(1) NORESCAN;       /* Generate the assembler TESTART   17519000
*                                      invocation                @L1A*/ 17530500
*         END;                      /*                           @L1A*/ 17542000
*       ELSE                        /* CADS=YES not specified    @L1A*/ 17553500
*         DO;                                                 /* @L1A*/ 17565000
*           ANS(('GEN (TESTART ALET=('||ALET(1)||'),EAX=('||EAX(1)||')) 17576500
*           ')||COMMENT('Generate the assembler TESTART macro')) COL(2) 17588000
*           SKIP(1) NORESCAN;       /* Generate the assembler TESTART   17600000
*                                      invocation                    */ 17650000
*         END;                      /*                           @L1A*/ 17675000
*       ANS('REFS('||ALET(1)||','||EAX(1)||');') COL(2) SKIP(1)         17700000
*           NORESCAN;               /* Generate the REFS statement   */ 17750000
*       ANS(('RFY (GPR00P,GPR01P,GPR14P,GPR15P) UNRSTD; ')||COMMENT(    17800000
*           'Free general purpose registers')) COL(2) SKIP(1) NORESCAN; 17850000
*                                   /* Free registers                */ 17900000
*     END;                                                              17950000
*   ELSE                                                                18000000
*     DO;                                                               18050000
*       ERRMSG=MPREFIX||EM(5);      /* Build message                 */ 18100000
*       ANS MSG(ERRMSG) NORESCAN;   /* Issue message                 */ 18150000
*       ANS(COMMENT(ERRMSG)) COL(INCMNT); /* Generate comment        */ 18200000
*     END;                                                              18250000
*                                                                       18300000
*   /*****************************************************************/ 18350000
*   /*                                                               */ 18400000
*   /* Set up the END statement and comment                          */ 18450000
*   /*                                                               */ 18500000
*   /*****************************************************************/ 18550000
*                                                                       18600000
*   ANS('END; ') COL(2);            /* Put out 'END'                 */ 18650000
*   ANS(COMMENT(IVDOCMT));          /* List macro parameters         */ 18700000
*                                                                       18750000
*   /*****************************************************************/ 18800000
*   /*                                                               */ 18850000
*   /* Make sure EPILOG generates the used registers                 */ 18900000
*   /*                                                               */ 18950000
*   /*****************************************************************/ 19000000
*                                                                       19050000
*   IF INDEX(EHAREGS,'00P')=0 THEN  /* If register 0 not defined,       19100000
*                                      define it                     */ 19150000
*     EHAREGS=EHAREGS||'00P';       /* Define register 0             */ 19200000
*   IF INDEX(EHAREGS,'01P')=0 THEN  /* If register 1 not defined,       19250000
*                                      define it                     */ 19300000
*     EHAREGS=EHAREGS||'01P';       /* Define register 1             */ 19350000
*   IF INDEX(EHAREGS,'14P')=0 THEN  /* If register 14 not defined,      19400000
*                                      define it                     */ 19450000
*     EHAREGS=EHAREGS||'14P';       /* Define register 14            */ 19500000
*   IF INDEX(EHAREGS,'15P')=0 THEN  /* If register 15 not defined,      19550000
*                                      define it                     */ 19600000
*     EHAREGS=EHAREGS||'15P';       /* Define register 15            */ 19650000
*                                                                       19700000
*   /*****************************************************************/ 19750000
*   /*                                                               */ 19800000
*   /* Return to the macro processor                                 */ 19850000
*   /*                                                               */ 19900000
*   /*****************************************************************/ 19950000
*                                                                       20000000
*   RETURN CODE(IHBERR);            /* Return with return code       */ 20050000
*   %END TESTART;                                                       20100000
