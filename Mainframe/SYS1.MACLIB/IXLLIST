*/**** START OF SPECIFICATIONS **************************************** 00000100
*                                                                     * 00000200
*                                                                     * 00000300
*01* MACRO NAME:  IXLLIST                               -03/20/01-<3> * 00000400
*                                                                     * 00000500
*                                                                     * 00000600
*01* DESCRIPTIVE NAME:  XES List Structure Services                   * 00000700
*                                                                     * 00000800
*01* PROPRIETARY STATEMENT:                                           * 00000900
*                                                                     * 00001000
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001100
*     5647-A01 (C) COPYRIGHT IBM CORP. 1993, 1999                     * 00001200
*                                                                     * 00001300
* STATUS= HBB6608                                                     * 00001400
*                                                                     * 00001500
*                                                                     * 00001600
*                                                                     * 00001700
*01* FUNCTION:                                                        * 00001800
*                                                                     * 00001900
*                                                                     * 00002000
*      The IXLLIST macro provides operations to atomically read,      * 00002100
*      write, move, and delete single entries from/to/within a        * 00002200
*      coupling facility list structure.  Operations to read or       * 00002300
*      delete multiple list entries, perform locking functions,       * 00002400
*      monitor list state changes, and read and write list controls   * 00002500
*      are also provided.                                             * 00002600
*                                                                     * 00002700
*      The list structure is accessed as a set of linked lists where  * 00002800
*      each list is comprised of some number of list entries.  The    * 00002900
*      number of lists is determined via programming interface when   * 00003000
*      the structure is allocated, and is static for the duration of  * 00003100
*      the structure.  IXLLIST facilitates designating the head or    * 00003200
*      tail of any particular list as the source, target, or starting * 00003300
*      point for various list operations.                             * 00003400
*                                                                     * 00003500
*      List entries are comprised of list entry data and/or list      * 00003600
*      adjunct data.  When a non-zero ELEMENTRATIO is specified on    * 00003700
*      IXLCONN then list entries may contain entry data.  The         * 00003800
*      presence or absence of entry data for a given list entry is    * 00003900
*      determined when the entry is created or written.  The          * 00004000
*      existence of adjunct data for all entries in a structure is    * 00004100
*      determined when the structure is allocated.  The areas         * 00004200
*      containing the entry data and adjunct data are referred to as  * 00004300
*      the data area and adjunct area, respectively.                  * 00004400
*                                                                     * 00004500
*      List entry data, when present, is comprised of 1 to 255        * 00004600
*      elements.  The size of an element and the maximum number of    * 00004700
*      elements in an entry is specified when the structure is        * 00004800
*      allocated.  The number of elements in an entry is established  * 00004900
*      when the entry is initially written and may be changed on      * 00005000
*      subsequent writes.  List adjunct data is always 64 bytes in    * 00005100
*      length.                                                        * 00005200
*                                                                     * 00005300
*      Users allocate list entries by invoking IXLLIST to "create" an * 00005400
*      entry.  Individual entries must reside on one linked list, and * 00005500
*      cannot reside on more than one list at a time.  An allocated   * 00005600
*      list entry has a structure assigned entry identifier which is  * 00005700
*      unique within the structure and can be used for subsequent     * 00005800
*      reference or access to that entry.  Structure allocation       * 00005900
*      allows an option to support user defined entry names, which    * 00006000
*      the structure will enforce as unique within the structure on   * 00006100
*      create requests.  Entry names may also be used for subsequent  * 00006200
*      entry reference and access.  Structure allocation also allows  * 00006300
*      optional entry key support, which functions as a mechanism for * 00006400
*      designating relative positions within a specified list other   * 00006500
*      than the list head or tail.  Entry name and entry key support  * 00006600
*      are mutually exclusive options.  A non-optional entry          * 00006700
*      characteristic is the entry version number.  Users determine   * 00006800
*      the version number to be assigned to each entry, and most list * 00006900
*      entry operations permit the setting, incrementing,             * 00007000
*      decrementing, and/or testing of the version number.  A list    * 00007100
*      operation can read from or write to either or both of the      * 00007200
*      entry data area and adjunct area.                              * 00007300
*                                                                     * 00007400
*      A "list cursor" is maintained for each linked list.  This list * 00007500
*      cursor is a list entry identifier corresponding to one of the  * 00007600
*      entries on the linked list.  If the list cursor is not         * 00007700
*      initialized it has a value of all binary zeros.  Many list     * 00007800
*      entry operations permit setting or updating the list cursor,   * 00007900
*      or allow the list cursor to be used in locating a list entry.  * 00008000
*                                                                     * 00008100
*      A list structure may also be allocated to include a lock table * 00008200
*      as part of the structure.  The lock table is comprised of a    * 00008300
*      set of exclusive locks which can be manipulated either         * 00008400
*      independently of or in conjunction with list entry and adjunct * 00008500
*      data.  Locking operations include the setting, resetting, and  * 00008600
*      testing of a specified lock.  List entry and adjunct data      * 00008700
*      operations can be affected by the state of a specified lock.   * 00008800
*      The purpose and scope of each lock is entirely user defined.   * 00008900
*                                                                     * 00009000
*      A connection may optionally have a list notification vector    * 00009100
*      allocated on the attached host CPC.  The notification vector   * 00009200
*      may be used to monitor list state changes from the empty to    * 00009300
*      non-empty state, and vice-versa, for any list in the           * 00009400
*      structure.                                                     * 00009500
*                                                                     * 00009600
*      Similarly,  the notification vector may be used to monitor the * 00009700
*      connector's event queue for state changes from the empty to    * 00009800
*      non-empty state, and vice versa.  The event queue is used to   * 00009900
*      contain event monitor controls (EMCs) for sublists which the   * 00010000
*      user is monitoring and which have become nonempty.  The event  * 00010100
*      queue transitions from empty to nonempty when a monitored      * 00010200
*      sublist becomes nonempty,  causing the event monitor controls  * 00010300
*      associated with the sublist to be queued to the user's event   * 00010400
*      queue.  The event queue transitions from nonempty to empty     * 00010500
*      when the last event monitor controls object is removed from    * 00010600
*      the event queue as a result of either:                         * 00010700
*                                                                     * 00010800
*                                                                     * 00010900
*      o   the event monitor controls being dequeued from the event   * 00011000
*          queue by the user                                          * 00011100
*                                                                     * 00011200
*      o   the event monitor controls being withdrawn from the event  * 00011300
*          queue as a result of the corresponding sublist becoming    * 00011400
*          empty                                                      * 00011500
*                                                                     * 00011600
*      o   the user deregistering monitoring interest in the          * 00011700
*          corresponding sublist.                                     * 00011800
*                                                                     * 00011900
*                                                                     * 00012000
*                                                                     * 00012100
*      Event queue monitoring should be used in conjunction with      * 00012200
*      sublist monitoring.                                            * 00012300
*                                                                     * 00012400
*      MVS provides a facility,  the IXLVECTR service, for optimized  * 00012500
*      testing of list transitions and/or event queue transitions     * 00012600
*      from empty to non-empty,  by interrogating the status of       * 00012700
*      individual entries in the notification vector which have been  * 00012800
*      associated with a particular list or the user's event queue.   * 00012900
*                                                                     * 00013000
*      Refer to the IXLCONN service description for additional        * 00013100
*      information regarding the allocation of and connection to a    * 00013200
*      list structure.                                                * 00013300
*                                                                     * 00013400
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00013500
*                                                                     * 00013600
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00013700
*                                                                     * 00013800
*01* ENVIRONMENT:                                                     * 00013900
*                                                                     * 00014000
*                                                                     * 00014100
*      Minimum authorization: Supervisor state and PSW key 0-7.       * 00014200
*                                                                     * 00014300
*      Dispatchable unit mode: Task or SRB mode.                      * 00014400
*                                                                     * 00014500
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00014600
*                                                                     * 00014700
*                        The current primary address space must be    * 00014800
*                        the same as the primary address space at the * 00014900
*                        time the connection service, IXLCONN, was    * 00015000
*                        issued for the structure.  This address      * 00015100
*                        space is referred to as the connector's      * 00015200
*                        address space.                               * 00015300
*                                                                     * 00015400
*                        The requestor's address space refers to the  * 00015500
*                        home address space of the unit of work which * 00015600
*                        is issuing the IXLLIST request.  The         * 00015700
*                        requestor's address space may or may not be  * 00015800
*                        the same as the connector's address space.   * 00015900
*                                                                     * 00016000
*      AMODE:            31-bit.                                      * 00016100
*                                                                     * 00016200
*      ASC mode:         Primary or Access Register.                  * 00016300
*                                                                     * 00016400
*      Interrupt status: Enabled or disabled for I/O and external     * 00016500
*                        interrupts.                                  * 00016600
*                                                                     * 00016700
*      Locks:            Disabled callers must be legally disabled by * 00016800
*                        holding the CPU lock and cannot hold other   * 00016900
*                        disabled locks (invocation by DIE routines   * 00017000
*                        is not supported).  Enabled callers must not * 00017100
*                        hold any locks.  When MODE=SYNCSUSPEND is    * 00017200
*                        specified the caller must be enabled.        * 00017300
*                                                                     * 00017400
*      Control parameters:                                            * 00017500
*                                                                     * 00017600
*                                                                     * 00017700
*                        1.  The caller's parameter list must be      * 00017800
*                            addressable in the caller's primary      * 00017900
*                            address space.                           * 00018000
*                                                                     * 00018100
*                        2.  If the caller is running in Access       * 00018200
*                            Register ASC mode and specifies a macro  * 00018300
*                            parameter using explicit register        * 00018400
*                            notation the access register             * 00018500
*                            corresponding to the general register    * 00018600
*                            must appropriately qualify the general   * 00018700
*                            register.                                * 00018800
*                                                                     * 00018900
*                        3.  The virtual storage areas specified by   * 00019000
*                            the ADJAREA, ANSAREA,  and MOSVECTOR     * 00019100
*                            keywords must be addressable in the      * 00019200
*                            caller's primary address space or from   * 00019300
*                            the caller's PASN access list.           * 00019400
*                                                                     * 00019500
*                        4.  All other virtual storage areas          * 00019600
*                            specified on the invocation may be       * 00019700
*                            addressable in the caller's primary,     * 00019800
*                            secondary, or home address spaces, from  * 00019900
*                            the PASN access list, or from the DU     * 00020000
*                            access list.                             * 00020100
*                                                                     * 00020200
*                                                                     * 00020300
*                                                                     * 00020400
*                                                                     * 00020500
*                                                                     * 00020600
*01* PROGRAMMING REQUIREMENTS:                                        * 00020700
*                                                                     * 00020800
*                                                                     * 00020900
*    1.  Access Register mode invokers must specify SYSSTATE          * 00021000
*        ASCENV=AR prior to invoking this macro.                      * 00021100
*                                                                     * 00021200
*                                                                     * 00021300
*                                                                     * 00021400
*01* RESTRICTIONS:                                                    * 00021500
*                                                                     * 00021600
*                                                                     * 00021700
*    1.  If the caller is disabled then the parameter list and all    * 00021800
*        storage areas addressed by macro parameters must reside in   * 00021900
*        either non-pageable or disabled reference storage.           * 00022000
*                                                                     * 00022100
*    2.  The caller may not be running as a Disabled Interrupt Exit   * 00022200
*        (DIE).                                                       * 00022300
*                                                                     * 00022400
*                                                                     * 00022500
*                                                                     * 00022600
*01* INPUT REGISTER INFORMATION:                                      * 00022700
*                                                                     * 00022800
*    Before issuing the IXLLIST macro, the caller does not have to    * 00022900
*    place any information into any register or AR unless using it in * 00023000
*    register notation for a particular parameter, or using it as a   * 00023100
*    base register.                                                   * 00023200
*                                                                     * 00023300
*01* OUTPUT REGISTER INFORMATION:                                     * 00023400
*                                                                     * 00023500
*    When control returns to the caller, the GPRs contain:            * 00023600
*                                                                     * 00023700
*                                                                     * 00023800
*    REGISTER  CONTENTS                                               * 00023900
*                                                                     * 00024000
*    0         Reason code                                            * 00024100
*                                                                     * 00024200
*    1         Used as work registers by the system                   * 00024300
*                                                                     * 00024400
*    2-13      Unchanged                                              * 00024500
*                                                                     * 00024600
*    14        Used as work registers by the system.                  * 00024700
*                                                                     * 00024800
*    15        Return code                                            * 00024900
*                                                                     * 00025000
*                                                                     * 00025100
*                                                                     * 00025200
*    When control returns to the caller, the ARs contain:             * 00025300
*                                                                     * 00025400
*                                                                     * 00025500
*    REGISTER  CONTENTS                                               * 00025600
*                                                                     * 00025700
*    0-1       Used as work registers by the system                   * 00025800
*                                                                     * 00025900
*    2-13      Unchanged                                              * 00026000
*                                                                     * 00026100
*    14-15     Used as work registers by the system.                  * 00026200
*                                                                     * 00026300
*                                                                     * 00026400
*                                                                     * 00026500
*01* PERFORMANCE IMPLICATIONS:                                        * 00026600
*                                                                     * 00026700
*    None.                                                            * 00026800
*                                                                     * 00026900
*01* SYNTAX:                                                          * 00027000
*                                                                     * 00027100
*[xlabel]  IXLLIST    REQUEST=READ                                   * 00027200
*                    ,REQUEST=READ_LIST                              * 00027300
*                   |     ,TYPE=ENTDATA|ADJDATA|ECONTROLS             * 00027400
*                    ,REQUEST=READ_MULT                              * 00027500
*                   |     ,TYPE=ENTDATA|ADJDATA|ECONTROLS             * 00027600
*                   |   [,RESTOKEN                                   * 00027700
*                   |   |           =xrestoken|NO_RESTOKEN          * 00027800
*                   |    ,EXTRESTOKEN=xextrestoken|NO_EXTRESTOKEN] * 00027900
*                    ,REQUEST=READ_LCONTROLS                         * 00028000
*                    ,REQUEST=READ_EQCONTROLS                        * 00028100
*                    ,REQUEST=READ_EMCONTROLS                        * 00028200
*                    ,REQUEST=DEQ_EVENTQ                             * 00028300
*                    ,REQUEST=WRITE                                  * 00028400
*                   |    [,ENTRYTYPE=ANY|OLD|NEW]                   * 00028500
*                   |    [,ELEMNUM=xelemnum|NO_ELEMNUM]             * 00028600
*                    ,REQUEST=WRITE_LCONTROLS                        * 00028700
*                   |    [,LISTLIMIT=xlistlimit|NO_LISTLIMIT]       * 00028800
*                   |    [,LISTDESC=xlistdesc|NO_LISTDESC]          * 00028900
*                   |    [,LISTKEY=xlistkey|NO_LISTKEY]             * 00029000
*                   |    [,MAXLISTKEY=xmaxlistkey|NO_MAXLISTKEY]    * 00029100
*                   |    [,SETCURSOR=HEAD|TAIL]                     * 00029200
*                    ,REQUEST=MOVE                                   * 00029300
*                   |     ,MOVETOLIST=xmovetolist                     * 00029400
*                   |    [,MOVETOKEY=xmovetokey|NO_MOVETOKEY]       * 00029500
*                   |    [,MOVETOPOS=HEAD|TAIL]                     * 00029600
*                   |   [,DATAOPER=NONE]                             * 00029700
*                   |   [,DATAOPER=READ]                             * 00029800
*                   |   [,DATAOPER=WRITE                             * 00029900
*                   |        [,ENTRYTYPE=ANY|OLD]                   * 00030000
*                   |        [,ELEMNUM=xelemnum|NO_ELEMNUM]]        * 00030100
*                    ,REQUEST=DELETE                                 * 00030200
*                   |   [,DATAOPER=NONE]                             * 00030300
*                   |   [,DATAOPER=READ]                             * 00030400
*                    ,REQUEST=DELETE_MULT                            * 00030500
*                   |   [,RESTOKEN                                   * 00030600
*                   |   |           =xrestoken|NO_RESTOKEN          * 00030700
*                   |    ,EXTRESTOKEN=xextrestoken|NO_EXTRESTOKEN] * 00030800
*                    ,REQUEST=DELETE_ENTRYLIST                       * 00030900
*                   |     ,LISTTYPE=IDLIST|NAMELIST                 * 00031000
*                   |    [,FIRSTELEM=xfirstelem|1]                  * 00031100
*                   |     ,LASTELEM=xlastelem                         * 00031200
*                    ,REQUEST=MONITOR_LIST                           * 00031300
*                   |    ,ACTION=START                               * 00031400
*                   |   |     ,VECTORINDEX=xvectorindex               * 00031500
*                   |   |    [,DRIVEEXIT=YES|NO]                    * 00031600
*                   |    ,ACTION=STOP                                * 00031700
*                    ,REQUEST=MONITOR_EVENTQ                         * 00031800
*                   |    ,ACTION=START                               * 00031900
*                   |   |     ,VECTORINDEX=xvectorindex               * 00032000
*                   |   |    [,DRIVEEXIT=YES|NO]                    * 00032100
*                   |    ,ACTION=STOP                                * 00032200
*                    ,REQUEST=MONITOR_SUBLIST                        * 00032300
*                   |    ,ACTION=START                               * 00032400
*                   |   |     ,UNC=xunc                               * 00032500
*                   |    ,ACTION=STOP                                * 00032600
*                    ,REQUEST=MONITOR_SUBLISTS                       * 00032700
*                   |     ,STARTINDEX=xstartindex                     * 00032800
*                   |     ,ENDINDEX=xendindex                         * 00032900
*                   |     ,MOSVECTOR=xmosvector                       * 00033000
*                    ,REQUEST=LOCK                                   * 00033100
*                     ,CONTOKEN=xcontoken                             * 00033200
*                    [,REQID=xreqid|NO_REQID]                       * 00033300
*                   [,BUFLIST=xbuflist                             * 00033400
*                   |   [,BUFADDRTYPE=VIRTUAL                        * 00033500
*                   |   |   [,PAGEABLE=YES                           * 00033600
*                   |   |   |    [,BUFSTGKEY                          * 00033700
*                   |   |   |                =xbufstgkey|CALLERS_KEY * 00033800
*                   |   |   |                ]]                      * 00033900
*                   |   |   [,PAGEABLE=NO]                           * 00034000
*                   |   |    [,BUFALET=xbufalet|NO_BUFALET]]        * 00034100
*                   |   [,BUFADDRTYPE=REAL]                          * 00034200
*                   |    [,BUFNUM=xbufnum|NO_BUFNUM]                * 00034300
*                   |    [,BUFINCRNUM=xbufincrnum|NO_BUFINCRNUM]    * 00034400
*                    ,BUFFER=xbuffer                               * 00034500
*                       [,PAGEABLE=YES                               * 00034600
*                       |    [,BUFSTGKEY=xbufstgkey|CALLERS_KEY]]   * 00034700
*                       [,PAGEABLE=NO]                               * 00034800
*                        [,BUFSIZE=xbufsize|NO_BUFSIZE]]            * 00034900
*                    [,ADJAREA=xadjarea|NO_ADJAREA]                 * 00035000
*                    [,LISTNUM=xlistnum|NO_LISTNUM                  * 00035100
*                        [,LISTPOS=HEAD|TAIL]                       * 00035200
*                        [,ENTRYKEY=xentrykey|NO_ENTRYKEY           * 00035300
*                            [,KEYREQTYPE=EQUAL|LESSOREQUAL|         * 00035400
*                                          GREATEROREQUAL]]          * 00035500
*                        [,AUTHCOMP=xauthcomp|NO_AUTHCOMP           * 00035600
*                            [,AUTHCOMPTYPE=EQUAL|LESSOREQUAL]]     * 00035700
*                        [,NEWAUTH=xnewauth|NO_NEWAUTH]]            * 00035800
*                    [,ENTRYID=xentryid|NO_ENTRYID]                 * 00035900
*                    [,ENTRYNAME=xentryname|NO_ENTRYNAME]           * 00036000
*                    [,LOCBYCURSOR]                                   * 00036100
*                   [,UPDATECURSOR=NO]                               * 00036200
*                   [,UPDATECURSOR=YES                               * 00036300
*                        [,CURSORUPDTYPE=NEXT|NEXTCOND|CURRENT|      * 00036400
*                                         CURRENTCOND]]              * 00036500
*                    [,LISTDIR=TOTAIL|TOHEAD]                       * 00036600
*                   [,LISTKEYTYPE=NOLISTKEY]                         * 00036700
*                   [,LISTKEYTYPE=MOVE                               * 00036800
*                   |    [,LISTKEYINC=xlistkeyinc|NO_LISTKEYINC]]   * 00036900
*                   [,LISTKEYTYPE=CREATE                             * 00037000
*                   |    [,LISTKEYINC=xlistkeyinc|NO_LISTKEYINC]]   * 00037100
*                   [,LISTKEYTYPE=ANY                                * 00037200
*                        [,LISTKEYINC=xlistkeyinc|NO_LISTKEYINC]]   * 00037300
*                    [,KEYCOMP=xkeycomp|NO_KEYCOMP]                 * 00037400
*                    [,VERSCOMP=xverscomp|NO_VERSCOMP               * 00037500
*                        [,VERSCOMPTYPE=EQUAL|LESSOREQUAL]]         * 00037600
*                   [,VERSUPDATE=NONE]                               * 00037700
*                   [,VERSUPDATE=INC]                                * 00037800
*                   [,VERSUPDATE=DEC]                                * 00037900
*                   [,VERSUPDATE=SET                                 * 00038000
*                         ,NEWVERS=xnewvers]                          * 00038100
*                    [,LOCKINDEX=xlockindex|NO_LOCKINDEX            * 00038200
*                        ,LOCKOPER=SET                               * 00038300
*                       |    [,LOCKMODE=UNCOND|COND]                * 00038400
*                       |    [,LOCKDATA=xlockdata|NO_LOCKDATA]      * 00038500
*                        ,LOCKOPER=RESET                             * 00038600
*                        ,LOCKOPER=NOTHELD                           * 00038700
*                       |    [,LOCKMODE=UNCOND|COND]                * 00038800
*                        ,LOCKOPER=HELDBY                            * 00038900
*                        ,LOCKOPER=TEST                              * 00039000
*                        ,LOCKOPER=READNEXT                          * 00039100
*                        [,LOCKCOMP=xlockcomp|NO_LOCKCOMP]]         * 00039200
*                   [,MODE=SYNCSUSPEND]                              * 00039300
*                   [,MODE=SYNCECB                                   * 00039400
*                   |     ,REQECB=xreqecb]                            * 00039500
*                   [,MODE=SYNCEXIT                                  * 00039600
*                   |    [,REQDATA=xreqdata|NO_REQDATA]]            * 00039700
*                   [,MODE=SYNCTOKEN                                 * 00039800
*                   |     ,REQTOKEN=xreqtoken]                        * 00039900
*                   [,MODE=ASYNCECB                                  * 00040000
*                   |     ,REQECB=xreqecb]                            * 00040100
*                   [,MODE=ASYNCEXIT                                 * 00040200
*                   |    [,REQDATA=xreqdata|NO_REQDATA]]            * 00040300
*                   [,MODE=ASYNCTOKEN                                * 00040400
*                   |     ,REQTOKEN=xreqtoken]                        * 00040500
*                   [,MODE=ASYNCNORESPONSE]                          * 00040600
*                    [,ANSAREA=xansarea|NO_ANSAREA                  * 00040700
*                         ,ANSLEN=xanslen]                            * 00040800
*                    [,RETCODE=xretcode]                              * 00040900
*                    [,RSNCODE=xrsncode]                              * 00041000
*                    [,PLISTVER=xplistver|IMPLIED_VERSION]          * 00041100
*                   [,MF=S]                                          * 00041200
*                   [,MF=(L,xmfctrl,xmfattr|0D)]                   * 00041300
*                   [,MF=(E,xmfctrl,COMPLETE)]                     * 00041400
*                                                                     * 00041500
*                                                                     * 00041600
*      Where:                                                         * 00041700
*                                                                     * 00041800
*                                                                     * 00041900
*      [xlabel]                                                       * 00042000
*          is an optional symbol, starting in column 1, that is the   * 00042100
*          name on the IXLLIST macro invocation.  The name must       * 00042200
*          conform to the rules for an ordinary assembler language    * 00042300
*          symbol.                                                    * 00042400
*          DEFAULT: No name.                                          * 00042500
*                                                                     * 00042600
*                                                                     * 00042700
*                                                                     * 00042800
*                                                                     * 00042900
*      REQUEST=READ|READ_LIST|READ_MULT|READ_LCONTROLS|READ_EQCONTRO * 00043000
*          LS|READ_EMCONTROLS|DEQ_EVENTQ|WRITE|WRITE_LCONTROLS|MOVE|D * 00043100
*          ELETE|DELETE_MULT|DELETE_ENTRYLIST|MONITOR_LIST|MONITOR_EV * 00043200
*          ENTQ|MONITOR_SUBLIST|...                                  * 00043300
*          is a required keyword input that specifies the type of     * 00043400
*          operation to be performed on the structure.                * 00043500
*                                                                     * 00043600
*                                                                     * 00043700
*          REQUEST=READ                                               * 00043800
*              Read single list entry.  Requests that the entry data  * 00043900
*              and/or adjunct data and/or list entry controls for the * 00044000
*              designated entry be read.                              * 00044100
*                                                                     * 00044200
*              Entry data is to be read into the storage area         * 00044300
*              specified by BUFFER or the buffers specified by        * 00044400
*              BUFLIST.  Adjunct data is to be read into the storage  * 00044500
*              area specified by ADJAREA.  The absence of BUFFER,     * 00044600
*              BUFLIST, and ADJAREA indicates the request is only     * 00044700
*              interested in obtaining the list entry controls in the * 00044800
*              answer area specified by ANSAREA.                      * 00044900
*                                                                     * 00045000
*              In addition, if LOCKINDEX is specified, the lock entry * 00045100
*              designated by LOCKINDEX will be operated on as         * 00045200
*              specified by the LOCKOPER keyword.                     * 00045300
*                                                                     * 00045400
*              When the request completes successfully the list entry * 00045500
*              controls, the number of entries or elements residing   * 00045600
*              on the list, and the total number of allocated entries * 00045700
*              in the structure are returned in the answer area       * 00045800
*              specified by ANSAREA.                                  * 00045900
*                                                                     * 00046000
*              CONTOKEN and at least one of LISTNUM, ENTRYID,         * 00046100
*              ENTRYNAME, and LOCBYCURSOR are required.               * 00046200
*                                                                     * 00046300
*          REQUEST=READ_LIST                                          * 00046400
*              Read list entries.  Requests that the entry data,      * 00046500
*              adjunct data, list entry controls, or any combination  * 00046600
*              of these for the entries on the list containing the    * 00046700
*              designated entry be read into the storage area         * 00046800
*              specified by BUFFER or the buffers specified by        * 00046900
*              BUFLIST.                                               * 00047000
*                                                                     * 00047100
*              When adjunct data is requested the adjunct data for    * 00047200
*              the first entry processed is returned in the storage   * 00047300
*              area specified by ADJAREA.  The adjunct data for all   * 00047400
*              other entries is returned in the BUFFER area or the    * 00047500
*              BUFLIST buffers.  When list entry controls are         * 00047600
*              requested the entry controls for the first entry       * 00047700
*              processed is returned in the answer area specified by  * 00047800
*              ANSAREA.  The entry controls for all other entries is  * 00047900
*              returned in the BUFFER area or the BUFLIST buffers.    * 00048000
*                                                                     * 00048100
*              Processing begins with the designated entry and        * 00048200
*              proceeds sequentially along the list in the direction  * 00048300
*              specified by LISTDIR until the head or tail of the     * 00048400
*              list is reached.                                       * 00048500
*                                                                     * 00048600
*              Specifying LISTNUM causes list number verification for * 00048700
*              the designated starting list entry to precede          * 00048800
*              processing of any list entries.  Specifying AUTHCOMP   * 00048900
*              causes list authority verification for the designated  * 00049000
*              list to precede processing of any list entries.        * 00049100
*              VERSCOMP may be used to restrict processing to those   * 00049200
*              entries with a version number matching that specified. * 00049300
*              The absence of LISTNUM and VERSCOMP indicates no list  * 00049400
*              number or version number criteria is to be applied     * 00049500
*              when selecting entries to be processed.                * 00049600
*                                                                     * 00049700
*              When the request completes successfully the number of  * 00049800
*              entries for which entry data, adjunct data, or list    * 00049900
*              entry controls was read is returned in the answer area * 00050000
*              specified by ANSAREA.                                  * 00050100
*                                                                     * 00050200
*              CONTOKEN and TYPE are required, as is one of BUFFER or * 00050300
*              BUFLIST and at least one of LISTNUM, ENTRYID,          * 00050400
*              ENTRYNAME, and LOCBYCURSOR.  When TYPE=ADJDATA is      * 00050500
*              specified ADJAREA is also required.                    * 00050600
*                                                                     * 00050700
*              A READ_LIST request may complete prematurely due to    * 00050800
*              exhaustion of the storage specified by BUFFER or       * 00050900
*              BUFLIST, or if coupling facility model dependent       * 00051000
*              timeout criteria is exceeded.  In this event           * 00051100
*              indicative return and reason codes are provided, the   * 00051200
*              number of entries for which data has been returned is  * 00051300
*              provided in ANSAREA, and the list entry controls for   * 00051400
*              the next appropriate entry in the list sequence to be  * 00051500
*              processed is returned in ANSAREA.  These list entry    * 00051600
*              controls may be specified as input on a subsequent     * 00051700
*              READ_LIST request to resume processing with the        * 00051800
*              appropriate list entry.  Note, however, that the       * 00051900
*              disposition of this list entry may have changed after  * 00052000
*              completion of the first READ_LIST request and before   * 00052100
*              the invocation of the resuming READ_LIST request.  For * 00052200
*              example, the list entry may have been deleted or moved * 00052300
*              to a different list in the structure.                  * 00052400
*                                                                     * 00052500
*              Resumed requests are processed identically to and must * 00052600
*              meet the same interface requirements as non-resumed    * 00052700
*              requests.  For example, BUFFER area and BUFLIST buffer * 00052800
*              boundary and length requirements are unchanged, and a  * 00052900
*              resumed request may in turn experience premature       * 00053000
*              completion.                                            * 00053100
*                                                                     * 00053200
*                                                                     * 00053300
*                                                                     * 00053400
*              TYPE=ENTDATA|ADJDATA|ECONTROLS                         * 00053500
*                  is a required group of keyword input(s) that       * 00053600
*                  specifies the type of information to be read.  Any * 00053700
*                  combination of the three values may be specified.  * 00053800
*                                                                     * 00053900
*                                                                     * 00054000
*                                                                     * 00054100
*                  TYPE=ENTDATA                                       * 00054200
*                      Indicates that the entry data is to be read.   * 00054300
*                                                                     * 00054400
*                                                                     * 00054500
*                  TYPE=ADJDATA                                       * 00054600
*                      Indicates that the adjunct data is to be read. * 00054700
*                                                                     * 00054800
*                                                                     * 00054900
*                  TYPE=ECONTROLS                                     * 00055000
*                      Indicates that list entry control information  * 00055100
*                      is to be read.                                 * 00055200
*                                                                     * 00055300
*                                                                     * 00055400
*                                                                     * 00055500
*                                                                     * 00055600
*                                                                     * 00055700
*                                                                     * 00055800
*          REQUEST=READ_MULT                                          * 00055900
*              Read multiple entries.  Requests that the entry data,  * 00056000
*              the associated adjunct data, or the list entry         * 00056100
*              controls for all allocated entries that meet the       * 00056200
*              criteria specified by LISTNUM and/or VERSCOMP be read  * 00056300
*              into the storage area specified by BUFFER or the       * 00056400
*              buffers specified by BUFLIST.                          * 00056500
*                                                                     * 00056600
*              Specifying LISTNUM and AUTHCOMP causes list authority  * 00056700
*              verification for the designated list to precede        * 00056800
*              processing of any list entries.  The absence of        * 00056900
*              LISTNUM and VERSCOMP indicates all allocated entries   * 00057000
*              are to be processed.  The order of entry processing is * 00057100
*              unpredictable.                                         * 00057200
*                                                                     * 00057300
*              When adjunct data is requested the adjunct data for    * 00057400
*              the first entry processed is returned in the storage   * 00057500
*              area specified by ADJAREA.  The adjunct data for all   * 00057600
*              other entries is returned in the BUFFER area or the    * 00057700
*              BUFLIST buffers.  When list entry controls are         * 00057800
*              requested the entry controls for the first entry       * 00057900
*              processed is returned in the answer area specified by  * 00058000
*              ANSAREA.  The entry controls for all other entries is  * 00058100
*              returned in the BUFFER area or the BUFLIST buffers.    * 00058200
*                                                                     * 00058300
*              When the request completes successfully the number of  * 00058400
*              entries for which entry data, adjunct data, or list    * 00058500
*              entry controls was read is returned in the answer area * 00058600
*              specified by ANSAREA.                                  * 00058700
*                                                                     * 00058800
*              CONTOKEN and TYPE are required, as is one of BUFFER or * 00058900
*              BUFLIST.  When TYPE=ADJDATA is specified ADJAREA is    * 00059000
*              also required.                                         * 00059100
*                                                                     * 00059200
*              A READ_MULT request may complete prematurely due to    * 00059300
*              exhaustion of the storage specified by BUFFER or       * 00059400
*              BUFLIST, or if coupling facility model dependent       * 00059500
*              timeout criteria is exceeded.  In this event           * 00059600
*              indicative return and reason codes are provided, and   * 00059700
*              the number of entries for which data has been returned * 00059800
*              and a restart token is provided in ANSAREA.  The       * 00059900
*              restart token may be specified as input on a           * 00060000
*              subsequent READ_MULT request to resume processing with * 00060100
*              the appropriate list entry.                            * 00060200
*                                                                     * 00060300
*              Except for designation of the starting point, resumed  * 00060400
*              requests are processed identically to and must meet    * 00060500
*              the same interface requirements as non-resumed         * 00060600
*              requests.  For example, BUFFER area and BUFLIST buffer * 00060700
*              boundary and length requirements are unchanged, and a  * 00060800
*              resumed request may in turn experience premature       * 00060900
*              completion.                                            * 00061000
*                                                                     * 00061100
*                                                                     * 00061200
*                                                                     * 00061300
*              TYPE=ENTDATA|ADJDATA|ECONTROLS                         * 00061400
*                  is a required group of keyword input(s) that       * 00061500
*                  specifies the type of information to be read.  Any * 00061600
*                  combination of the three values may be specified.  * 00061700
*                                                                     * 00061800
*                                                                     * 00061900
*                                                                     * 00062000
*                  TYPE=ENTDATA                                       * 00062100
*                      Indicates that the entry data is to be read.   * 00062200
*                                                                     * 00062300
*                                                                     * 00062400
*                  TYPE=ADJDATA                                       * 00062500
*                      Indicates that the adjunct data is to be read. * 00062600
*                                                                     * 00062700
*                                                                     * 00062800
*                  TYPE=ECONTROLS                                     * 00062900
*                      Indicates that list entry control information  * 00063000
*                      is to be read.                                 * 00063100
*                                                                     * 00063200
*                                                                     * 00063300
*                                                                     * 00063400
*                                                                     * 00063500
*                                                                     * 00063600
*                                                                     * 00063700
*              The following is a set of mutually exclusive keys.     * 00063800
*              This set is optional; only one key may be specified.   * 00063900
*                                                                     * 00064000
*                                                                     * 00064100
*                  The RESTOKEN and EXTRESTOKEN keywords are input    * 00064200
*                  fields that name a restart token specifying an     * 00064300
*                  appropriate coupling facility indicator for        * 00064400
*                  resuming requests that complete prematurely.       * 00064500
*                                                                     * 00064600
*                  Specifying an input restart token initialized to   * 00064700
*                  all zeros causes the request to consider all       * 00064800
*                  entries as unprocessed.  Specifying an input       * 00064900
*                  restart token other than one returned from a       * 00065000
*                  previous invocation of the request and not fully   * 00065100
*                  initialized to all zeros will produce              * 00065200
*                  unpredictable request results.                     * 00065300
*                                                                     * 00065400
*                  A restart token is returned in the answer area     * 00065500
*                  specified by ANSAREA when the request completes    * 00065600
*                  prematurely, and may be specified on a subsequent  * 00065700
*                  READ_MULT request to resume the request at an      * 00065800
*                  appropriate point.                                 * 00065900
*                                                                     * 00066000
*                  Requestors who specify IXLCONN ALLOWAUTO=YES must  * 00066100
*                  use the 16-byte extended restart token             * 00066200
*                  (EXTRESTOKEN).  Users who specify IXLCONN          * 00066300
*                  ALLOWAUTO=NO must use the standard 8-byte restart  * 00066400
*                  tokens (RESTOKEN).                                 * 00066500
*                                                                     * 00066600
*              [RESTOKEN=xrestoken|NO_RESTOKEN                      * 00066700
*                  belongs to a set of mutually exclusive keys. It is * 00066800
*                  the name (RS-type), or address in register         * 00066900
*                  (2)-(12), of an optional 8 character input field   * 00067000
*                  that contains a restart token specifying an        * 00067100
*                  appropriate coupling facility indicator for        * 00067200
*                  resuming requests that complete prematurely.       * 00067300
*                                                                     * 00067400
*                  A restart token is returned in the LAARESTOKEN     * 00067500
*                  field of the answer area specified by ANSAREA when * 00067600
*                  the request completes prematurely.                 * 00067700
*                                                                     * 00067800
*                  DEFAULT: NO_RESTOKEN                               * 00067900
*                                                                     * 00068000
*              EXTRESTOKEN=xextrestoken|NO_EXTRESTOKEN]             * 00068100
*                  belongs to a set of mutually exclusive keys. It is * 00068200
*                  the name (RS-type), or address in register         * 00068300
*                  (2)-(12), of an optional 16 character input field  * 00068400
*                  that contains an extended restart token specifying * 00068500
*                  an appropriate coupling facility indicator for     * 00068600
*                  resuming requests that complete prematurely.       * 00068700
*                                                                     * 00068800
*                  A restart token is returned in the LAAEXTRESTOKEN  * 00068900
*                  field of the answer area specified by ANSAREA when * 00069000
*                  the request completes prematurely.                 * 00069100
*                                                                     * 00069200
*                  DEFAULT: NO_EXTRESTOKEN                            * 00069300
*                                                                     * 00069400
*                                                                     * 00069500
*                                                                     * 00069600
*              End of a set of mutually exclusive optional keys.      * 00069700
*              DEFAULT: RESTOKEN                                      * 00069800
*                                                                     * 00069900
*                                                                     * 00070000
*          REQUEST=READ_LCONTROLS                                     * 00070100
*              Read list controls.  Requests that control information * 00070200
*              for the list specified by LISTNUM be returned.         * 00070300
*                                                                     * 00070400
*              Information returned in the answer area specified by   * 00070500
*              ANSAREA consists of the total number of entries or     * 00070600
*              elements currently on the list, the maximum number of  * 00070700
*              entries or elements allowed to reside on the list, the * 00070800
*              number of list transitions from the empty to the       * 00070900
*              non-empty state, the user-defined list description and * 00071000
*              list authority, and the number of list monitoring      * 00071100
*              information entries returned.  In addition, the list   * 00071200
*              monitoring information for the list is returned in the * 00071300
*              storage specified by BUFFER or the buffers specified   * 00071400
*              by BUFLIST.  Refer to the IXLYLMI mapping macro for    * 00071500
*              the format of the returned list monitoring             * 00071600
*              information.                                           * 00071700
*                                                                     * 00071800
*              CONTOKEN and LISTNUM are required, as is one of BUFFER * 00071900
*              or BUFLIST.                                            * 00072000
*                                                                     * 00072100
*          REQUEST=READ_EQCONTROLS                                    * 00072200
*              Read event queue controls.  Requests that control      * 00072300
*              information for the requesting user's event queue be   * 00072400
*              returned.                                              * 00072500
*                                                                     * 00072600
*              This request type is valid only when the structure is  * 00072700
*              allocated in a CFLEVEL=3 or higher CF.                 * 00072800
*                                                                     * 00072900
*              Information returned in the answer area specified by   * 00073000
*              ANSAREA consists of the total number of EMCs currently * 00073100
*              on the event queue, the number of times that the event * 00073200
*              queue has transitioned from the empty to the non-empty * 00073300
*              state, the vector index number which is being used to  * 00073400
*              monitor the event queue,  and an indication of whether * 00073500
*              or not the user's list transition exit is to be driven * 00073600
*              for event queue transitions from the empty to          * 00073700
*              non-empty state.                                       * 00073800
*                                                                     * 00073900
*              CONTOKEN is a required keyword.                        * 00074000
*                                                                     * 00074100
*          REQUEST=READ_EMCONTROLS                                    * 00074200
*              Read event monitor controls.  Requests that control    * 00074300
*              information for the requesting user's registered       * 00074400
*              interest in monitoring a particular sublist            * 00074500
*              (designated by LISTNUM and ENTRYKEY) be returned.      * 00074600
*                                                                     * 00074700
*              This request type is valid only when the structure is  * 00074800
*              allocated in a CFLEVEL=3 or higher CF.  The structure  * 00074900
*              must support keyed list entries.                       * 00075000
*                                                                     * 00075100
*              Information returned in the answer area specified by   * 00075200
*              ANSAREA includes the user notification controls (UNC), * 00075300
*              the list number and entry key of the sublist for which * 00075400
*              event monitor controls were read, and an indication of * 00075500
*              whether or not the EMC is currently queued to the      * 00075600
*              user's event queue.                                    * 00075700
*                                                                     * 00075800
*              CONTOKEN, LISTNUM,  and ENTRYKEY are required.         * 00075900
*                                                                     * 00076000
*          REQUEST=DEQ_EVENTQ                                         * 00076100
*              Dequeue event queue EMCs.  Requests that event monitor * 00076200
*              controls be dequeued from the requesting user's event  * 00076300
*              queue.  The contents of the dequeued EMCs are returned * 00076400
*              in the specified BUFFER or BUFLIST area.  Each         * 00076500
*              individual EMC is mapped by the IXLYEMC mapping macro. * 00076600
*              Note that neither the EMCs nor the sublist monitoring  * 00076700
*              interest which they represent is deleted by this       * 00076800
*              request.  Sublist monitoring remains active until it   * 00076900
*              is stopped via a subsequent MONITOR_SUBLIST            * 00077000
*              ACTION=STOP request.                                   * 00077100
*                                                                     * 00077200
*              This request type is valid only when the structure is  * 00077300
*              allocated in a CFLEVEL=3 or higher CF.                 * 00077400
*                                                                     * 00077500
*              The DEQ_EVENTQ request may complete prematurely, that  * 00077600
*              is, without having dequeued all of the EMCs from the   * 00077700
*              user's event queue.  In such a case,  the user is      * 00077800
*              expected to process the EMCs which were returned on    * 00077900
*              the current request and then re-issue the DEQ_EVENTQ   * 00078000
*              request to continue the process of dequeueing the      * 00078100
*              remaining EMCs from the user's event queue.            * 00078200
*                                                                     * 00078300
*              Information returned in the answer area specified by   * 00078400
*              ANSAREA consists of the number of EMCs which were      * 00078500
*              returned,  and the number of EMCs which still remain   * 00078600
*              on the user's event queue.                             * 00078700
*                                                                     * 00078800
*              CONTOKEN, and one of BUFFER or BUFLIST are required.   * 00078900
*                                                                     * 00079000
*          REQUEST=WRITE                                              * 00079100
*              Write single list entry.  Requests that the contents   * 00079200
*              of the storage area specified by BUFFER or the buffers * 00079300
*              specified by BUFLIST, and/or the storage area          * 00079400
*              specified by ADJAREA be written to the designated list * 00079500
*              entry.                                                 * 00079600
*                                                                     * 00079700
*              In some cases this request type results in the         * 00079800
*              creation of a new list entry.  In the event a list     * 00079900
*              entry is created, then:                                * 00080000
*                                                                     * 00080100
*                                                                     * 00080200
*              o   If the structure supports named entries then the   * 00080300
*                  name specified by ENTRYNAME is assigned as the     * 00080400
*                  entry name.                                        * 00080500
*                                                                     * 00080600
*              o   If the structure supports entry data and BUFFER    * 00080700
*                  and BUFLIST are not specified, then the created    * 00080800
*                  entry does not contain any entry data.             * 00080900
*                                                                     * 00081000
*              o   If the structure supports adjunct data and ADJDATA * 00081100
*                  is not specified, then the created entry contains  * 00081200
*                  binary zeros for adjunct data.                     * 00081300
*                                                                     * 00081400
*              o   If the structure supports keyed entries then a key * 00081500
*                  is assigned the newly created entry as follows:    * 00081600
*                                                                     * 00081700
*                                                                     * 00081800
*                  -   If ENTRYKEY was specified then the new entry   * 00081900
*                      is assigned the ENTRYKEY value.                * 00082000
*                                                                     * 00082100
*                  -   If ENTRYKEY was not specified and LISTPOS=HEAD * 00082200
*                      is indicated, the new entry is assigned a key  * 00082300
*                      value of all binary zeros.                     * 00082400
*                                                                     * 00082500
*                  -   If ENTRYKEY was not specified and LISTPOS=TAIL * 00082600
*                      is indicated, the new entry is assigned a key  * 00082700
*                      value of all binary ones.                      * 00082800
*                                                                     * 00082900
*                                                                     * 00083000
*                                                                     * 00083100
*                                                                     * 00083200
*                                                                     * 00083300
*              The size of an existing entry may be altered by        * 00083400
*              specifying an ELEMNUM value which is different than    * 00083500
*              the ELEMNUM value used when the entry was created.     * 00083600
*              When the amount of space indicated by ELEMNUM is       * 00083700
*              greater than the amount of data specified for BUFFER   * 00083800
*              or BUFLIST then the entry will be padded with zeros.   * 00083900
*              When the amount of space indicated by ELEMNUM is less  * 00084000
*              than the amount of data specified fo BUFFER or BUFLIST * 00084100
*              then the input data will be truncated.                 * 00084200
*                                                                     * 00084300
*              In addition, if LOCKINDEX is specified, the lock entry * 00084400
*              designated by LOCKINDEX will be operated on as         * 00084500
*              specified by the LOCKOPER keyword.                     * 00084600
*                                                                     * 00084700
*              When the request completes successfully the list entry * 00084800
*              controls, the number of entries or elements residing   * 00084900
*              on the list, and the total number of allocated entries * 00085000
*              in the structure are returned in the answer area       * 00085100
*              specified by ANSAREA.                                  * 00085200
*                                                                     * 00085300
*              Required keywords are CONTOKEN and at least one of     * 00085400
*              LISTNUM, ENTRYID, ENTRYNAME, and LOCBYCURSOR.  When    * 00085500
*              BUFFER or BUFLIST is specified then ELEMNUM is also    * 00085600
*              required.                                              * 00085700
*                                                                     * 00085800
*                                                                     * 00085900
*              [ENTRYTYPE=ANY|OLD|NEW]                              * 00086000
*                  is an optional keyword input that specifies the    * 00086100
*                  disposition of the entry to be written.            * 00086200
*                                                                     * 00086300
*                  DEFAULT: ANY                                       * 00086400
*                                                                     * 00086500
*                                                                     * 00086600
*                  ENTRYTYPE=ANY                                      * 00086700
*                      Requests that if the designated list entry     * 00086800
*                      exists then it's entry data and/or adjunct     * 00086900
*                      data are to be replaced.  If the list entry    * 00087000
*                      does not exist, then a new entry is to be      * 00087100
*                      created.                                       * 00087200
*                                                                     * 00087300
*                      If the entry is designated by keyed position   * 00087400
*                      (i.e., LISTNUM and ENTRYKEY are specified and  * 00087500
*                      ENTRYID is not), then if any such keyed entry  * 00087600
*                      exists an update is performed and no entry is  * 00087700
*                      created.                                       * 00087800
*                                                                     * 00087900
*                      If the structure supports named list entries   * 00088000
*                      then ENTRYNAME must be specified.              * 00088100
*                                                                     * 00088200
*                                                                     * 00088300
*                  ENTRYTYPE=OLD                                      * 00088400
*                      Requests that the data entry and/or adjunct    * 00088500
*                      area contents of an existing list entry be     * 00088600
*                      replaced.  The designated entry must already   * 00088700
*                      exist.                                         * 00088800
*                                                                     * 00088900
*                                                                     * 00089000
*                  ENTRYTYPE=NEW                                      * 00089100
*                      Requests that a new list entry be created.     * 00089200
*                                                                     * 00089300
*                      If the structure supports named list entries   * 00089400
*                      then ENTRYNAME must be specified.  If a list   * 00089500
*                      entry already exists with the specified name   * 00089600
*                      then the request is failed.  If the structure  * 00089700
*                      supports keyed list entries a new list entry   * 00089800
*                      is created even when a list entry with the     * 00089900
*                      same key value resides on the specified list.  * 00090000
*                                                                     * 00090100
*                                                                     * 00090200
*                                                                     * 00090300
*                                                                     * 00090400
*                                                                     * 00090500
*                                                                     * 00090600
*              [ELEMNUM=xelemnum|NO_ELEMNUM]                        * 00090700
*                  is the name (RS-type), or address in register      * 00090800
*                  (2)-(12), of an optional byte input specifying the * 00090900
*                  number of elements in the entry data of a list     * 00091000
*                  entry being written.                               * 00091100
*                                                                     * 00091200
*                  If the list entry already exists and the number of * 00091300
*                  elements specified by ELEMNUM is greater than the  * 00091400
*                  number of elements currently in the entry then the * 00091500
*                  entry will be expanded to the new size.            * 00091600
*                  Similarly, if the list entry already exists and    * 00091700
*                  the number of elements specified by ELEMNUM is     * 00091800
*                  less than the number of elements currently in the  * 00091900
*                  entry then the entry will be contracted to the new * 00092000
*                  size.  If an ELEMNUM value of zero is specified    * 00092100
*                  the list entry will not contain any entry data.    * 00092200
*                                                                     * 00092300
*                  For structures allocated on CFLEVEL=0 coupling     * 00092400
*                  facilities ELEMNUM values must be in the range of  * 00092500
*                  0 to 16.  For structures allocated on coupling     * 00092600
*                  facilities with a CFLEVEL greater than zero        * 00092700
*                  ELEMNUM values must be in the range of 0 to 255.   * 00092800
*                  ELEMNUM must also be less than or equal to the     * 00092900
*                  value returned in the connect answer area          * 00093000
*                  CONALISTMAXELEMNUM field from the IXLCONN          * 00093100
*                  invocation.                                        * 00093200
*                                                                     * 00093300
*                  The ELEMNUM keyword is required for WRITE requests * 00093400
*                  when BUFFER or BUFLIST is specified.               * 00093500
*                                                                     * 00093600
*                  DEFAULT: NO_ELEMNUM                                * 00093700
*                                                                     * 00093800
*                                                                     * 00093900
*                                                                     * 00094000
*          REQUEST=WRITE_LCONTROLS                                    * 00094100
*              Write list controls.  Requests that one or more of the * 00094200
*              list controls for the list specified by LISTNUM be     * 00094300
*              updated.  The list controls which may be updated       * 00094400
*              include the following:                                 * 00094500
*                                                                     * 00094600
*                                                                     * 00094700
*              o   List authority (NEWAUTH)                           * 00094800
*                                                                     * 00094900
*              o   List limit bounding the number of entries or       * 00095000
*                  elements which may reside on the list (LISTLIMIT)  * 00095100
*                                                                     * 00095200
*              o   List description (LISTDESC)                        * 00095300
*                                                                     * 00095400
*              o   List key (LISTKEY)                                 * 00095500
*                                                                     * 00095600
*              o   Maximum list key (MAXLISTKEY)                      * 00095700
*                                                                     * 00095800
*              o   List cursor and list cursor direction (SETCURSOR)  * 00095900
*                                                                     * 00096000
*                                                                     * 00096100
*                                                                     * 00096200
*              CONTOKEN and LISTNUM are required.                     * 00096300
*                                                                     * 00096400
*                                                                     * 00096500
*              [LISTLIMIT=xlistlimit|NO_LISTLIMIT]                  * 00096600
*                  is the name (RS-type), or address in register      * 00096700
*                  (2)-(12), of an optional fullword input specifying * 00096800
*                  the list limit bounding the number of entries or   * 00096900
*                  elements that may reside on the list.  If          * 00097000
*                  LISTLIMIT is not specified the list limit for the  * 00097100
*                  designated list will remain unchanged.             * 00097200
*                                                                     * 00097300
*                  Note: The default list limit for all lists when    * 00097400
*                  the structure is allocated is the total number of  * 00097500
*                  list entries or elements in the structure.         * 00097600
*                                                                     * 00097700
*                  When an IXLALTER is processed for a list           * 00097800
*                  structure, if the list limit for a list is equal   * 00097900
*                  to the default value then it will be automatically * 00098000
*                  adjusted to the new number of entries or elements. * 00098100
*                  If a list limit is not equal to the default value  * 00098200
*                  then the alter process will not adjust it and it   * 00098300
*                  is the responsibility of the user, if desired, to  * 00098400
*                  set a new limit taking into account the current    * 00098500
*                  entry and element counts for the altered           * 00098600
*                  structure.                                         * 00098700
*                  DEFAULT: NO_LISTLIMIT                              * 00098800
*                                                                     * 00098900
*                                                                     * 00099000
*                                                                     * 00099100
*                                                                     * 00099200
*              [LISTDESC=xlistdesc|NO_LISTDESC]                     * 00099300
*                  is the name (RS-type), or address in register      * 00099400
*                  (2)-(12), of an optional 32 character input        * 00099500
*                  specifying the user defined description to be      * 00099600
*                  associated with the list.  If LISTDESC is not      * 00099700
*                  specified the user description for the designated  * 00099800
*                  list will remain unchanged.                        * 00099900
*                                                                     * 00100000
*                  Note: The default list description for all lists   * 00100100
*                  when the structure is allocated is binary zeros.   * 00100200
*                  DEFAULT: NO_LISTDESC                               * 00100300
*                                                                     * 00100400
*                                                                     * 00100500
*                                                                     * 00100600
*                                                                     * 00100700
*              [LISTKEY=xlistkey|NO_LISTKEY]                        * 00100800
*                  is the name (RS-type), or address in register      * 00100900
*                  (2)-(12), of an optional 16 character input        * 00101000
*                  specifying the list key to be associated with the  * 00101100
*                  list.  This list key value may be assigned to list * 00101200
*                  entries when they are created or moved.            * 00101300
*                                                                     * 00101400
*                  If LISTKEY is not specified the list key for the   * 00101500
*                  designated list will remain unchanged.  LISTKEY is * 00101600
*                  ignored when the structure does not support keyed  * 00101700
*                  entries.                                           * 00101800
*                                                                     * 00101900
*                  Note: The default list key for all lists when the  * 00102000
*                  structure is allocated is binary zeros.            * 00102100
*                                                                     * 00102200
*                  The LISTKEY keyword is only meaningful for list    * 00102300
*                  structures allocated on level 1 or greater         * 00102400
*                  coupling facilities.                               * 00102500
*                  DEFAULT: NO_LISTKEY                                * 00102600
*                                                                     * 00102700
*                                                                     * 00102800
*                                                                     * 00102900
*                                                                     * 00103000
*              [MAXLISTKEY=xmaxlistkey|NO_MAXLISTKEY]               * 00103100
*                  is the name (RS-type), or address in register      * 00103200
*                  (2)-(12), of an optional 16 character input        * 00103300
*                  specifying the maximum list key value to be        * 00103400
*                  associated with the list.  This value specifies an * 00103500
*                  upper bound for the list key value.                * 00103600
*                                                                     * 00103700
*                  If MAXLISTKEY is not specified the maximum list    * 00103800
*                  key for the designated list will remain unchanged. * 00103900
*                  MAXLISTKEY is ignored when the structure does not  * 00104000
*                  support keyed entries.                             * 00104100
*                                                                     * 00104200
*                  Note: The default maximum list key for all lists   * 00104300
*                  when the structure is allocated is binary zeros.   * 00104400
*                                                                     * 00104500
*                  The MAXLISTKEY keyword is only meaningful for list * 00104600
*                  structures allocated on level 1 or greater         * 00104700
*                  coupling facilities.                               * 00104800
*                  DEFAULT: NO_MAXLISTKEY                             * 00104900
*                                                                     * 00105000
*                                                                     * 00105100
*                                                                     * 00105200
*                                                                     * 00105300
*              [SETCURSOR=HEAD|TAIL]                                * 00105400
*                  is an optional keyword input which indicates that  * 00105500
*                  the list cursor and the list cursor direction are  * 00105600
*                  to be set.                                         * 00105700
*                                                                     * 00105800
*                  The list cursor direction is only used when        * 00105900
*                  UPDATECURSOR=YES and CURSORUPDTYPE=NEXTCOND are    * 00106000
*                  specifed.                                          * 00106100
*                                                                     * 00106200
*                  When SETCURSOR is not specified the list cursor    * 00106300
*                  and list cursor direction are not changed.         * 00106400
*                                                                     * 00106500
*                  Note: The default list cursor for all lists when   * 00106600
*                  the structure is allocated is binary zeros.  The   * 00106700
*                  default list cursor direction for all lists when   * 00106800
*                  the structure is allocated is a head-to-tail       * 00106900
*                  direction.                                         * 00107000
*                                                                     * 00107100
*                  The SETCURSOR keyword is only meaningful for list  * 00107200
*                  structures allocated on level 1 or greater         * 00107300
*                  coupling facilities.                               * 00107400
*                                                                     * 00107500
*                  DEFAULT: HEAD                                      * 00107600
*                                                                     * 00107700
*                                                                     * 00107800
*                  SETCURSOR=HEAD                                     * 00107900
*                      Indicates that the list cursor is to be set to * 00108000
*                      the entry identifier for the first entry on    * 00108100
*                      the list and the list cursor direction is to   * 00108200
*                      be set in a head-to-tail direction.  If the    * 00108300
*                      list is empty then the list cursor will be     * 00108400
*                      reset to binary zeros.                         * 00108500
*                                                                     * 00108600
*                                                                     * 00108700
*                  SETCURSOR=TAIL                                     * 00108800
*                      Indicates that the list cursor is to be set to * 00108900
*                      the entry identifier for the last entry on the * 00109000
*                      list and the list cursor direction is to be    * 00109100
*                      set in a tail-to-head direction.  If the list  * 00109200
*                      is empty then the list cursor will be reset to * 00109300
*                      binary zeros.                                  * 00109400
*                                                                     * 00109500
*                                                                     * 00109600
*                                                                     * 00109700
*                                                                     * 00109800
*                                                                     * 00109900
*          REQUEST=MOVE                                               * 00110000
*              Move single list entry.  Requests that the designated  * 00110100
*              list entry be removed from the list on which it        * 00110200
*              resides and placed at the position specified by the    * 00110300
*              MOVETOLIST, MOVETOKEY, and/or MOVETOPOS keywords.      * 00110400
*                                                                     * 00110500
*              In addition, if LOCKINDEX is specified, the lock entry * 00110600
*              designated by LOCKINDEX will be operated on as         * 00110700
*              specified by the LOCKOPER keyword.                     * 00110800
*                                                                     * 00110900
*              When the request completes successfully the list entry * 00111000
*              controls, the number of entries or elements residing   * 00111100
*              on the target list, and the total number of allocated  * 00111200
*              entries in the structure are returned in the answer    * 00111300
*              area specified by ANSAREA.                             * 00111400
*                                                                     * 00111500
*              Required keywords are CONTOKEN, MOVETOLIST, and at     * 00111600
*              least one of LISTNUM, ENTRYID, ENTRYNAME, and          * 00111700
*              LOCBYCURSOR.  See the DATAOPER options below for       * 00111800
*              additional required keywords.                          * 00111900
*                                                                     * 00112000
*                                                                     * 00112100
*              MOVETOLIST=xmovetolist                                 * 00112200
*                  is the name (RS-type), or address in register      * 00112300
*                  (2)-(12), of a required fullword input that        * 00112400
*                  specifies the number of the target list to which   * 00112500
*                  the entry is to be moved, or perhaps, if           * 00112600
*                  DATAOPER=WRITE and ENTRYTYPE=ANY are specified,    * 00112700
*                  onto which an entry is to be created.              * 00112800
*                                                                     * 00112900
*                  If the structure does not support keyed entries,   * 00113000
*                  then the resultant target position will be the     * 00113100
*                  head or tail of this list, as indicated by         * 00113200
*                  MOVETOPOS.  If the structure supports keyed        * 00113300
*                  entries and MOVETOKEY is specified, then the       * 00113400
*                  resultant target position is the keyed position on * 00113500
*                  this list specified by MOVETOKEY and MOVETOPOS.    * 00113600
*                  If the structure supports keyed entries but        * 00113700
*                  MOVETOKEY is not specified, then the resultant     * 00113800
*                  target position on this list is determined as      * 00113900
*                  follows:                                           * 00114000
*                                                                     * 00114100
*                                                                     * 00114200
*                  o   If the entry already exists then the entry key * 00114300
*                      remains unchanged and, in conjunction with     * 00114400
*                      MOVETOPOS, identifies the target position.     * 00114500
*                                                                     * 00114600
*                  o   If an entry is created and ENTRYKEY was        * 00114700
*                      specified, then ENTRYKEY and MOVETOPOS         * 00114800
*                      identify the target position.                  * 00114900
*                                                                     * 00115000
*                  o   If an entry is created and ENTRYKEY was not    * 00115100
*                      specified, then the target position is the     * 00115200
*                      head or tail of the list, as specified by      * 00115300
*                      MOVETOPOS.                                     * 00115400
*                                                                     * 00115500
*                                                                     * 00115600
*                                                                     * 00115700
*                                                                     * 00115800
*                                                                     * 00115900
*                                                                     * 00116000
*              [MOVETOKEY=xmovetokey|NO_MOVETOKEY]                  * 00116100
*                  is the name (RS-type), or address in register      * 00116200
*                  (2)-(12), of an optional 16 character input that   * 00116300
*                  partially designates the keyed position on the     * 00116400
*                  list specified by MOVETOLIST.                      * 00116500
*                                                                     * 00116600
*                  If there exists a sublist of one or more entries   * 00116700
*                  with a matching key on the list then the target    * 00116800
*                  position is the head or tail of the sublist, as    * 00116900
*                  specified by MOVETOPOS.  If all existing list      * 00117000
*                  entries have a key greater than that specified by  * 00117100
*                  MOVETOKEY then the target position is at the head  * 00117200
*                  of the list.  Similarly, if the specified          * 00117300
*                  MOVETOKEY exceeds all the list entry keys then the * 00117400
*                  target position is at the tail of the list.  If    * 00117500
*                  none of the list entries has a matching key, and   * 00117600
*                  MOVETOKEY is neither the greatest nor least among  * 00117700
*                  the list entry keys, then the target position is   * 00117800
*                  according to appropriate key sequence for the      * 00117900
*                  list.                                              * 00118000
*                                                                     * 00118100
*                  If MOVETOKEY is not specified then the moved       * 00118200
*                  entry's resultant key (and hence the target list   * 00118300
*                  keyed position) is determined as follows:          * 00118400
*                                                                     * 00118500
*                                                                     * 00118600
*                  o   the existing entry key when the entry already  * 00118700
*                      exists (i.e., is not created by this request). * 00118800
*                                                                     * 00118900
*                  o   ENTRYKEY when it is specified and an entry is  * 00119000
*                      created.                                       * 00119100
*                                                                     * 00119200
*                  o   all binary zeros when an entry is created,     * 00119300
*                      ENTRYKEY is not specified, and MOVETOPOS=HEAD  * 00119400
*                      is specified.                                  * 00119500
*                                                                     * 00119600
*                  o   all binary ones when an entry is created,      * 00119700
*                      ENTRYKEY is not specified, and MOVETOPOS=TAIL  * 00119800
*                      is specified.                                  * 00119900
*                                                                     * 00120000
*                                                                     * 00120100
*                                                                     * 00120200
*                  If an existing list entry being moved has a key    * 00120300
*                  value different than the MOVETOKEY specification,  * 00120400
*                  then the key value will be changed to that         * 00120500
*                  specified by MOVETOKEY as a result of this move    * 00120600
*                  request.                                           * 00120700
*                                                                     * 00120800
*                  This keyword is only applicable for structures     * 00120900
*                  that support keyed entries, and is otherwise       * 00121000
*                  ignored.                                           * 00121100
*                                                                     * 00121200
*                  DEFAULT: NO_MOVETOKEY                              * 00121300
*                                                                     * 00121400
*                                                                     * 00121500
*                                                                     * 00121600
*                                                                     * 00121700
*              [MOVETOPOS=HEAD|TAIL]                                * 00121800
*                  is an optional keyword input that partially        * 00121900
*                  designates the target position on the list         * 00122000
*                  specified by the MOVETOLIST and MOVETOKEY          * 00122100
*                  keywords.                                          * 00122200
*                                                                     * 00122300
*                  DEFAULT: HEAD                                      * 00122400
*                                                                     * 00122500
*                                                                     * 00122600
*                  MOVETOPOS=HEAD                                     * 00122700
*                      This option has meaning as follows:            * 00122800
*                                                                     * 00122900
*                                                                     * 00123000
*                      o   When keyed entries are not supported or    * 00123100
*                          when an entry is initially allocated and   * 00123200
*                          an entry key key is not specified the      * 00123300
*                          designated target position is the head of  * 00123400
*                          the list.                                  * 00123500
*                                                                     * 00123600
*                      o   Otherwise, the designated target position  * 00123700
*                          is the head of the sublist containing      * 00123800
*                          entries with keys matching the moved       * 00123900
*                          entry's resultant key.                     * 00124000
*                                                                     * 00124100
*                                                                     * 00124200
*                                                                     * 00124300
*                                                                     * 00124400
*                  MOVETOPOS=TAIL                                     * 00124500
*                      This option has meaning as follows:            * 00124600
*                                                                     * 00124700
*                                                                     * 00124800
*                      o   When keyed entries are not supported or    * 00124900
*                          when an entry initially allocated and an   * 00125000
*                          entry key key is not specified the         * 00125100
*                          designated target position is the tail of  * 00125200
*                          the list.                                  * 00125300
*                                                                     * 00125400
*                      o   Otherwise, the designated target position  * 00125500
*                          is the tail of the sublist containing      * 00125600
*                          entries with keys matching the moved       * 00125700
*                          entry's resultant key.                     * 00125800
*                                                                     * 00125900
*                                                                     * 00126000
*                                                                     * 00126100
*                                                                     * 00126200
*                                                                     * 00126300
*                                                                     * 00126400
*                                                                     * 00126500
*                                                                     * 00126600
*              [DATAOPER=NONE|READ|WRITE]                           * 00126700
*                  is an optional keyword input that specifies an     * 00126800
*                  operation to be performed on the list entry data   * 00126900
*                  in addition to moving it.                          * 00127000
*                                                                     * 00127100
*                  DEFAULT: NONE                                      * 00127200
*                                                                     * 00127300
*                                                                     * 00127400
*                  [DATAOPER=NONE]                                    * 00127500
*                      keyword that indicates no additional operation * 00127600
*                      is to be performed.                            * 00127700
*                                                                     * 00127800
*                                                                     * 00127900
*                  [DATAOPER=READ]                                    * 00128000
*                      In addition to moving the list entry, the      * 00128100
*                      entry and/or adjunct data is read into the     * 00128200
*                      storage areas specified by BUFFER or BUFLIST   * 00128300
*                      and/or ADJAREA.                                * 00128400
*                                                                     * 00128500
*                      At least one of BUFFER or BUFLIST and ADJAREA  * 00128600
*                      is required when DATAOPER=READ is specified.   * 00128700
*                                                                     * 00128800
*                                                                     * 00128900
*                  [DATAOPER=WRITE                                    * 00129000
*                      In addition to moving the list entry, the      * 00129100
*                      contents of the storage area(s) specified by   * 00129200
*                      BUFFER or BUFLIST and/or ADJAREA is written to * 00129300
*                      the list entry.                                * 00129400
*                                                                     * 00129500
*                      The size of an existing entry may be altered   * 00129600
*                      by specifying an ELEMNUM value which is        * 00129700
*                      different than the ELEMNUM value used when the * 00129800
*                      entry was created.  When the amount of space   * 00129900
*                      indicated by ELEMNUM is greater than the       * 00130000
*                      amount of data specified for BUFFER or BUFLIST * 00130100
*                      then the entry will be padded with zeros.      * 00130200
*                      When the amount of space indicated by ELEMNUM  * 00130300
*                      is less than the amount of data specified for  * 00130400
*                      BUFFER or BUFLIST then the input data will be  * 00130500
*                      truncated.                                     * 00130600
*                                                                     * 00130700
*                                                                     * 00130800
*                      [ENTRYTYPE=ANY|OLD]                          * 00130900
*                          is an optional keyword input that          * 00131000
*                          specifies the disposition of the entry to  * 00131100
*                          be written.                                * 00131200
*                                                                     * 00131300
*                          DEFAULT: ANY                               * 00131400
*                                                                     * 00131500
*                                                                     * 00131600
*                          ENTRYTYPE=ANY                              * 00131700
*                              Requests that if the designated list   * 00131800
*                              entry exists then it's entry data      * 00131900
*                              and/or adjunct data are to be          * 00132000
*                              replaced.  If the list entry does not  * 00132100
*                              exist, then a new entry is to be       * 00132200
*                              created at the designated MOVE target  * 00132300
*                              position.                              * 00132400
*                                                                     * 00132500
*                              If the entry is designated by keyed    * 00132600
*                              position (i.e., LISTNUM and ENTRYKEY   * 00132700
*                              are specified and ENTRYID is not),     * 00132800
*                              then if any such keyed entry exists a  * 00132900
*                              move and entry update is performed,    * 00133000
*                              and no entry is created.               * 00133100
*                                                                     * 00133200
*                              ENTRYNAME is required for this option  * 00133300
*                              if the structure supports named        * 00133400
*                              entries.                               * 00133500
*                                                                     * 00133600
*                                                                     * 00133700
*                          ENTRYTYPE=OLD                              * 00133800
*                              Requests that the contents of the      * 00133900
*                              designated list entry be replaced.     * 00134000
*                              The list entry must already exist.     * 00134100
*                                                                     * 00134200
*                                                                     * 00134300
*                                                                     * 00134400
*                                                                     * 00134500
*                                                                     * 00134600
*                                                                     * 00134700
*                      [ELEMNUM=xelemnum|NO_ELEMNUM]]               * 00134800
*                          is the name (RS-type), or address in       * 00134900
*                          register (2)-(12), of an optional byte     * 00135000
*                          input specifying the number of elements in * 00135100
*                          the entry data of a list entry being       * 00135200
*                          written.                                   * 00135300
*                                                                     * 00135400
*                          If the list entry already exists and the   * 00135500
*                          number of elements specified by ELEMNUM is * 00135600
*                          greater than the number of elements        * 00135700
*                          currently in the entry then the entry will * 00135800
*                          be expanded to the new size.  Similarly,   * 00135900
*                          if the list entry already exists and the   * 00136000
*                          number of elements specified by ELEMNUM is * 00136100
*                          less than the number of elements currently * 00136200
*                          in the entry then the entry will be        * 00136300
*                          contracted to the new size.  If an ELEMNUM * 00136400
*                          value of zero is specified the list entry  * 00136500
*                          will not contain any entry data.           * 00136600
*                                                                     * 00136700
*                          For structures allocated on CFLEVEL=0      * 00136800
*                          coupling facilities ELEMNUM values must be * 00136900
*                          in the range of 0 to 16.  For structures   * 00137000
*                          allocated on coupling facilities with a    * 00137100
*                          CFLEVEL greater than zero ELEMNUM values   * 00137200
*                          must be in the range of 0 to 255.  ELEMNUM * 00137300
*                          must also be less than or equal to the     * 00137400
*                          value returned in the connect answer area  * 00137500
*                          CONALISTMAXELEMNUM field from the IXLCONN  * 00137600
*                          invocation.                                * 00137700
*                                                                     * 00137800
*                          The ELEMNUM keyword is required for MOVE   * 00137900
*                          requests with DATAOPER=WRITE when BUFFER   * 00138000
*                          or BUFLIST is specified.                   * 00138100
*                                                                     * 00138200
*                          DEFAULT: NO_ELEMNUM                        * 00138300
*                                                                     * 00138400
*                                                                     * 00138500
*                                                                     * 00138600
*                                                                     * 00138700
*                                                                     * 00138800
*                                                                     * 00138900
*                                                                     * 00139000
*          REQUEST=DELETE                                             * 00139100
*              Delete single list entry.  Requests that the           * 00139200
*              designated list entry be removed from the list on      * 00139300
*              which it resides and returned to the pool of free      * 00139400
*              entries for reuse.  If DATAOPER=READ is specified the  * 00139500
*              list entry data and/or adjunct data will be read into  * 00139600
*              the specified data area(s) prior to deletion.          * 00139700
*                                                                     * 00139800
*              In addition, if LOCKINDEX is specified, the lock entry * 00139900
*              designated by LOCKINDEX will be operated on as         * 00140000
*              specified by the LOCKOPER keyword.                     * 00140100
*                                                                     * 00140200
*              When the request completes successfully the list entry * 00140300
*              controls for the deleted entry, the remaining number   * 00140400
*              of entries or elements residing on the list, and the   * 00140500
*              remaining total number of allocated entries in the     * 00140600
*              structure are returned in the answer area specified by * 00140700
*              ANSAREA.                                               * 00140800
*                                                                     * 00140900
*              Required keywords are CONTOKEN and at least one of     * 00141000
*              LISTNUM, ENTRYID, ENTRYNAME, and LOCBYCURSOR.  When    * 00141100
*              DATAOPER=READ is specified at least one of BUFFER,     * 00141200
*              BUFLIST, or ADJAREA is also required.                  * 00141300
*                                                                     * 00141400
*                                                                     * 00141500
*              [DATAOPER=NONE|READ]                                 * 00141600
*                  is an optional keyword input that specifies an     * 00141700
*                  operation to be performed on the list entry data   * 00141800
*                  in addition to deleting it.                        * 00141900
*                                                                     * 00142000
*                  DEFAULT: NONE                                      * 00142100
*                                                                     * 00142200
*                                                                     * 00142300
*                  [DATAOPER=NONE]                                    * 00142400
*                      keyword that indicates no additional operation * 00142500
*                      is to be performed.                            * 00142600
*                                                                     * 00142700
*                                                                     * 00142800
*                  [DATAOPER=READ]                                    * 00142900
*                      Before deleting the list entry, the entry      * 00143000
*                      and/or adjunct data is to be read into the     * 00143100
*                      storage areas specified by BUFFER or BUFLIST   * 00143200
*                      and/or ADJAREA.                                * 00143300
*                                                                     * 00143400
*                      At least one of BUFFER or BUFLIST and ADJAREA  * 00143500
*                      is required when DATAOPER=READ is specified.   * 00143600
*                                                                     * 00143700
*                                                                     * 00143800
*                                                                     * 00143900
*                                                                     * 00144000
*                                                                     * 00144100
*          REQUEST=DELETE_MULT                                        * 00144200
*              Delete multiple entries.  Requests that all entries    * 00144300
*              meeting any specified LISTNUM and VERSCOMP criteria be * 00144400
*              removed from whatever list they reside on and returned * 00144500
*              to the pool of free entries for reuse.                 * 00144600
*                                                                     * 00144700
*              Specifying LISTNUM and AUTHCOMP causes list authority  * 00144800
*              verification for the designated list to precede        * 00144900
*              processing of any list entries.  The absence of        * 00145000
*              LISTNUM and VERSCOMP would result in all entries being * 00145100
*              deleted.                                               * 00145200
*                                                                     * 00145300
*              When the request completes successfully the number of  * 00145400
*              entries deleted as a result of this request is         * 00145500
*              returned in the answer area specified by ANSAREA.      * 00145600
*                                                                     * 00145700
*              The CONTOKEN keyword is required.                      * 00145800
*                                                                     * 00145900
*              A DELETE_MULT request may complete prematurely if      * 00146000
*              coupling facility model dependent timeout criteria is  * 00146100
*              exceeded.  In this event indicative return and reason  * 00146200
*              codes are provided, and the number of entries deleted  * 00146300
*              and a restart token is provided in ANSAREA.  This      * 00146400
*              restart token may be specified as input on a           * 00146500
*              subsequent DELETE_MULT request to resume processing    * 00146600
*              with the appropriate list entry.                       * 00146700
*                                                                     * 00146800
*              Except for designation of the starting point, resumed  * 00146900
*              requests are processed identically to and must meet    * 00147000
*              the same interface requirements as non-resumed         * 00147100
*              requests.  A resumed request may in turn experience    * 00147200
*              premature completion.                                  * 00147300
*                                                                     * 00147400
*                                                                     * 00147500
*              The following is a set of mutually exclusive keys.     * 00147600
*              This set is optional; only one key may be specified.   * 00147700
*                                                                     * 00147800
*                                                                     * 00147900
*                  The RESTOKEN and EXTRESTOKEN keywords are input    * 00148000
*                  fields that name a restart token specifying an     * 00148100
*                  appropriate coupling facility indicator for        * 00148200
*                  resuming requests that complete prematurely.       * 00148300
*                                                                     * 00148400
*                  Specifying an input restart token initialized to   * 00148500
*                  all zeros causes the request to consider all       * 00148600
*                  entries as unprocessed.  Specifying an input       * 00148700
*                  restart token other than one returned from a       * 00148800
*                  previous invocation of the request and not fully   * 00148900
*                  initialized to all zeros will produce              * 00149000
*                  unpredictable request results.                     * 00149100
*                                                                     * 00149200
*                  A restart token is returned in the answer area     * 00149300
*                  specified by ANSAREA when the request completes    * 00149400
*                  prematurely, and may be specified on a subsequent  * 00149500
*                  DELETE_MULT request to resume the request at an    * 00149600
*                  appropriate point.                                 * 00149700
*                                                                     * 00149800
*                  Requestors who specify IXLCONN ALLOWAUTO=YES must  * 00149900
*                  use the 16-byte extended restart token             * 00150000
*                  (EXTRESTOKEN).  Users who specify IXLCONN          * 00150100
*                  ALLOWAUTO=NO must use the standard 8-byte restart  * 00150200
*                  tokens (RESTOKEN).                                 * 00150300
*                                                                     * 00150400
*              [RESTOKEN=xrestoken|NO_RESTOKEN                      * 00150500
*                  belongs to a set of mutually exclusive keys. It is * 00150600
*                  the name (RS-type), or address in register         * 00150700
*                  (2)-(12), of an optional 8 character input field   * 00150800
*                  that contains a restart token specifying an        * 00150900
*                  appropriate coupling facility indicator for        * 00151000
*                  resuming requests that complete prematurely.       * 00151100
*                                                                     * 00151200
*                  A restart token is returned in the LAARESTOKEN     * 00151300
*                  field of the answer area specified by ANSAREA when * 00151400
*                  the request completes prematurely.                 * 00151500
*                                                                     * 00151600
*                  DEFAULT: NO_RESTOKEN                               * 00151700
*                                                                     * 00151800
*              EXTRESTOKEN=xextrestoken|NO_EXTRESTOKEN]             * 00151900
*                  belongs to a set of mutually exclusive keys. It is * 00152000
*                  the name (RS-type), or address in register         * 00152100
*                  (2)-(12), of an optional 16 character input field  * 00152200
*                  that contains an extended restart token specifying * 00152300
*                  an appropriate coupling facility indicator for     * 00152400
*                  resuming requests that complete prematurely.       * 00152500
*                                                                     * 00152600
*                  A restart token is returned in the LAAEXTRESTOKEN  * 00152700
*                  field of the answer area specified by ANSAREA when * 00152800
*                  the request completes prematurely.                 * 00152900
*                                                                     * 00153000
*                  DEFAULT: NO_EXTRESTOKEN                            * 00153100
*                                                                     * 00153200
*                                                                     * 00153300
*                                                                     * 00153400
*              End of a set of mutually exclusive optional keys.      * 00153500
*              DEFAULT: RESTOKEN                                      * 00153600
*                                                                     * 00153700
*                                                                     * 00153800
*          REQUEST=DELETE_ENTRYLIST                                   * 00153900
*              Delete by entry list.  Requests that all entries       * 00154000
*              specified by the list of entry identifiers or entry    * 00154100
*              names in the storage area specified by BUFFER or the   * 00154200
*              buffers specified by BUFLIST be removed from whatever  * 00154300
*              list they reside on and returned to the pool of free   * 00154400
*              entries for reuse.                                     * 00154500
*                                                                     * 00154600
*              LISTNUM and/or VERSCOMP may optionally be specified to * 00154700
*              limit deletion of entries to those residing on the     * 00154800
*              specified list or with a matching version number,      * 00154900
*              respectively.  Specifying LISTNUM and AUTHCOMP causes  * 00155000
*              list authority verification for the designated list to * 00155100
*              precede processing of any list entries.                * 00155200
*                                                                     * 00155300
*              When the request completes successfully the number of  * 00155400
*              entries deleted for this request is returned in the    * 00155500
*              answer area specified by ANSAREA.                      * 00155600
*                                                                     * 00155700
*              If any entry specified in the input list does not      * 00155800
*              exist then processing is halted and the index of the   * 00155900
*              offending entry identifier or name is also returned in * 00156000
*              the answer area.  In this event all specified entries  * 00156100
*              preceding the offending entry have been processed.     * 00156200
*              All succeeding entries have not been processed.        * 00156300
*                                                                     * 00156400
*              CONTOKEN and LASTELEM are required, as is one of       * 00156500
*              BUFFER or BUFLIST.                                     * 00156600
*                                                                     * 00156700
*              A DELETE_ENTRYLIST request may complete prematurely if * 00156800
*              coupling facility model dependent timeout criteria is  * 00156900
*              exceeded.  In this event indicative return and reason  * 00157000
*              codes are provided, and the number of entries deleted  * 00157100
*              thus far and the index of the first unprocessed entry  * 00157200
*              identifier or name is provided in ANSAREA.  The        * 00157300
*              request may subsequently be re-issued for the sublist  * 00157400
*              of remaining unprocessed entry identifiers or names by * 00157500
*              specifying the index returned in the answer area on    * 00157600
*              keyword FIRSTELEM.                                     * 00157700
*                                                                     * 00157800
*              Re-issued requests are processed identically to and    * 00157900
*              must meet the same interface requirements as original  * 00158000
*              requests.  A re-issued request may in turn experience  * 00158100
*              premature completion.                                  * 00158200
*                                                                     * 00158300
*                                                                     * 00158400
*              LISTTYPE=IDLIST|NAMELIST                             * 00158500
*                  is a required keyword input that specifies whether * 00158600
*                  the input in the BUFFER area or the BUFLIST        * 00158700
*                  buffers for the DELETE_ENTRYLIST request consists  * 00158800
*                  of a list of list entry identifiers or names.      * 00158900
*                                                                     * 00159000
*                                                                     * 00159100
*                  LISTTYPE=IDLIST                                    * 00159200
*                      The input in the BUFFER area or the BUFLIST    * 00159300
*                      buffers consists of a list of list entry       * 00159400
*                      identifiers.                                   * 00159500
*                                                                     * 00159600
*                  LISTTYPE=NAMELIST                                  * 00159700
*                      The input in the BUFFER area or the BUFLIST    * 00159800
*                      buffers consists of a list of list entry       * 00159900
*                      names.                                         * 00160000
*                                                                     * 00160100
*                      LISTTYPE=NAMELIST is not allowed for           * 00160200
*                      structures that do not support named entries.  * 00160300
*                      LISTTYPE=NAMELIST is mutually exclusive with   * 00160400
*                      the KEYCOMP keyword.                           * 00160500
*                                                                     * 00160600
*                                                                     * 00160700
*                                                                     * 00160800
*                                                                     * 00160900
*                                                                     * 00161000
*                                                                     * 00161100
*              [FIRSTELEM=xfirstelem|1]                             * 00161200
*                  is the name (RS-type), or address in register      * 00161300
*                  (2)-(12), of an optional halfword input specifying * 00161400
*                  the index of the first list entry identifier or    * 00161500
*                  name to be processed.                              * 00161600
*                                                                     * 00161700
*                  The value must specify one of the entry            * 00161800
*                  identifiers or names passed in the BUFFER area or  * 00161900
*                  the BUFLIST buffers.  An index value of 1          * 00162000
*                  references the first entry identifier or name in   * 00162100
*                  the BUFFER area or in the first BUFLIST buffer.    * 00162200
*                                                                     * 00162300
*                  DEFAULT: 1                                         * 00162400
*                                                                     * 00162500
*                                                                     * 00162600
*                                                                     * 00162700
*                                                                     * 00162800
*              LASTELEM=xlastelem                                     * 00162900
*                  is the name (RS-type), or address in register      * 00163000
*                  (2)-(12), of a required halfword input specifying  * 00163100
*                  the index of the last list entry identifier or     * 00163200
*                  name to be processed.                              * 00163300
*                                                                     * 00163400
*                  The specified value must be greater than or equal  * 00163500
*                  to the specified FIRSTELEM value and must specify  * 00163600
*                  one of the entry identifiers or names passed in    * 00163700
*                  the BUFFER area or the BUFLIST buffers.            * 00163800
*                                                                     * 00163900
*                                                                     * 00164000
*                                                                     * 00164100
*          REQUEST=MONITOR_LIST                                       * 00164200
*              Monitor a list.  Requests that list notification       * 00164300
*              vector monitoring of the list specified by LISTNUM be  * 00164400
*              started or stopped.                                    * 00164500
*                                                                     * 00164600
*              While list monitoring is in effect for a list the      * 00164700
*              IXLVECTR service may be used to determine whether the  * 00164800
*              list contains any entries.  The IXLVECTR service may   * 00164900
*              also be used to alter the size of the list             * 00165000
*              notification vector, and thus change the number of     * 00165100
*              lists which can be monitored concurrently.  Refer to   * 00165200
*              the IXLVECTR service for more details.                 * 00165300
*                                                                     * 00165400
*              If a list notification vector index is in use for      * 00165500
*              monitoring a list, a request to stop the list          * 00165600
*              monitoring for the list should be performed before     * 00165700
*              using the vector index on another request to start     * 00165800
*              list monitoring.  If a vector index is in use for      * 00165900
*              monitoring a list, a request to start list monitoring  * 00166000
*              for the same list with a different vector index will   * 00166100
*              cause the vector index in use for the list to be       * 00166200
*              replaced by the new vector index.  In this case it is  * 00166300
*              not necessary to stop the list monitoring using the    * 00166400
*              old index before requesting to start list monitoring   * 00166500
*              using the new index.                                   * 00166600
*                                                                     * 00166700
*              CONTOKEN and LISTNUM are required keywords.            * 00166800
*                                                                     * 00166900
*                                                                     * 00167000
*              ACTION=START|STOP                                    * 00167100
*                  is a required keyword input that specifies whether * 00167200
*                  list monitoring is to be started or stopped.       * 00167300
*                                                                     * 00167400
*                                                                     * 00167500
*                                                                     * 00167600
*                  ACTION=START                                       * 00167700
*                      Requests that monitoring for the connection    * 00167800
*                      specified by CONTOKEN be started for the list  * 00167900
*                      specified by LISTNUM.                          * 00168000
*                                                                     * 00168100
*                      ACTION=START is mutually exclusive with        * 00168200
*                      MODE=ASYNCNORESPONSE.                          * 00168300
*                                                                     * 00168400
*                                                                     * 00168500
*                      VECTORINDEX=xvectorindex                       * 00168600
*                          is the name (RS-type), or address in       * 00168700
*                          register (2)-(12), of a required fullword  * 00168800
*                          input field which contains the list        * 00168900
*                          notification vector index to be associated * 00169000
*                          with the list specified by LISTNUM.  If    * 00169100
*                          the request completes successfully, this   * 00169200
*                          local notication vector index in the       * 00169300
*                          vector for the connection specified by     * 00169400
*                          CONTOKEN will subsequently reflect the     * 00169500
*                          list empty/non-empty state.                * 00169600
*                                                                     * 00169700
*                                                                     * 00169800
*                                                                     * 00169900
*                                                                     * 00170000
*                      [DRIVEEXIT=YES|NO]                           * 00170100
*                          is an optional keyword input that          * 00170200
*                          specifies whether XES should drive the     * 00170300
*                          connection's list transition exit when the * 00170400
*                          state of a list changes from empty to      * 00170500
*                          non-empty.                                 * 00170600
*                                                                     * 00170700
*                          DEFAULT: YES                               * 00170800
*                                                                     * 00170900
*                                                                     * 00171000
*                          DRIVEEXIT=YES                              * 00171100
*                              When the state of a list changes from  * 00171200
*                              empty to non-empty XES will drive the  * 00171300
*                              connection's list transition exit.     * 00171400
*                                                                     * 00171500
*                                                                     * 00171600
*                          DRIVEEXIT=NO                               * 00171700
*                              When the state of a list changes from  * 00171800
*                              empty to non-empty XES will not drive  * 00171900
*                              the connection's list transition exit. * 00172000
*                                                                     * 00172100
*                                                                     * 00172200
*                                                                     * 00172300
*                                                                     * 00172400
*                                                                     * 00172500
*                  ACTION=STOP                                        * 00172600
*                      Requests that monitoring for the connection    * 00172700
*                      specified by CONTOKEN be stopped for the list  * 00172800
*                      specified by LISTNUM.                          * 00172900
*                                                                     * 00173000
*                                                                     * 00173100
*                                                                     * 00173200
*                                                                     * 00173300
*                                                                     * 00173400
*          REQUEST=MONITOR_EVENTQ                                     * 00173500
*              Monitor the user's event queue.  Requests that vector  * 00173600
*              monitoring of the requesting user's event queue be     * 00173700
*              started or stopped.                                    * 00173800
*                                                                     * 00173900
*              This request type is valid only when the structure is  * 00174000
*              allocated in a CFLEVEL=3 or higher CF.  The user must  * 00174100
*              have a local vector associated with his connection to  * 00174200
*              the structure,  and the structure must support keyed   * 00174300
*              list entries.                                          * 00174400
*                                                                     * 00174500
*              While event queue monitoring is in effect for an event * 00174600
*              queue, the IXLVECTR service may be used to determine   * 00174700
*              whether the event queue contains any event monitor     * 00174800
*              controls (EMCs).  These EMCs represent nonempty        * 00174900
*              sublists in which the user has registered sublist      * 00175000
*              monitoring interest.  Refer to the IXLVECTR service    * 00175100
*              for more details.  The user should use event queue     * 00175200
*              monitoring in conjunction with sublist monitoring      * 00175300
*              (MONITOR_SUBLIST and/or MONITOR_SUBLISTS) to process   * 00175400
*              state transitions for monitored sublists.  Queued EMCs * 00175500
*              may be dequeued from the user's event queue,  and      * 00175600
*              their contents read, using the DEQ_EVENTQ request.     * 00175700
*                                                                     * 00175800
*              If event queue monitoring is in effect, a request to   * 00175900
*              start monitoring the event queue with a different      * 00176000
*              VECTORINDEX or DRIVEEXIT specification will cause the  * 00176100
*              old specifications to be immediately replaced by the   * 00176200
*              new specifications.  It is not necessary to stop event * 00176300
*              queue monitoring before requesting to start monitoring * 00176400
*              using the new specifications.  The state of the        * 00176500
*              replaced vector index is not defined.  However,  since * 00176600
*              the replaced vector index is no longer being used to   * 00176700
*              monitor the event queue,  it may be reassigned for     * 00176800
*              other uses (e.g. to monitor a list).                   * 00176900
*                                                                     * 00177000
*              When event queue monitoring is stopped,  the state of  * 00177100
*              the vector index which was previously being used to    * 00177200
*              monitor the event queue is not defined.  However,      * 00177300
*              since the vector index is no longer being used to      * 00177400
*              monitor the event queue,  it may be reassigned for     * 00177500
*              other uses (e.g. to monitor a list).                   * 00177600
*                                                                     * 00177700
*              CONTOKEN is a required keyword.                        * 00177800
*                                                                     * 00177900
*                                                                     * 00178000
*              ACTION=START|STOP                                    * 00178100
*                  is a required keyword input that specifies whether * 00178200
*                  event queue monitoring is to be started or         * 00178300
*                  stopped.                                           * 00178400
*                                                                     * 00178500
*                                                                     * 00178600
*                                                                     * 00178700
*                  ACTION=START                                       * 00178800
*                      Requests that event queue monitoring for the   * 00178900
*                      connection specified by CONTOKEN be started.   * 00179000
*                                                                     * 00179100
*                                                                     * 00179200
*                      VECTORINDEX=xvectorindex                       * 00179300
*                          is the name (RS-type), or address in       * 00179400
*                          register (2)-(12), of a required fullword  * 00179500
*                          input field which contains the vector      * 00179600
*                          index to be associated with the monitored  * 00179700
*                          event queue.  If the request completes     * 00179800
*                          successfully, this local vector index in   * 00179900
*                          the vector for the connection specified by * 00180000
*                          CONTOKEN will subsequently reflect the     * 00180100
*                          empty/non-empty state of the user's event  * 00180200
*                          queue.                                     * 00180300
*                                                                     * 00180400
*                                                                     * 00180500
*                                                                     * 00180600
*                                                                     * 00180700
*                      [DRIVEEXIT=YES|NO]                           * 00180800
*                          is an optional keyword input that          * 00180900
*                          specifies whether XES should drive the     * 00181000
*                          connection's list transition exit when the * 00181100
*                          state of the user's event queue changes    * 00181200
*                          from empty to non-empty.                   * 00181300
*                                                                     * 00181400
*                          DEFAULT: YES                               * 00181500
*                                                                     * 00181600
*                                                                     * 00181700
*                          DRIVEEXIT=YES                              * 00181800
*                              When the state of the user's event     * 00181900
*                              queue changes from empty to non-empty  * 00182000
*                              XES will drive the connection's list   * 00182100
*                              transition exit.                       * 00182200
*                                                                     * 00182300
*                                                                     * 00182400
*                          DRIVEEXIT=NO                               * 00182500
*                              When the state of the user's event     * 00182600
*                              queue changes from empty to non-empty  * 00182700
*                              XES will not drive the connection's    * 00182800
*                              list transition exit.                  * 00182900
*                                                                     * 00183000
*                                                                     * 00183100
*                                                                     * 00183200
*                                                                     * 00183300
*                                                                     * 00183400
*                  ACTION=STOP                                        * 00183500
*                      Requests that monitoring of the event queue    * 00183600
*                      for the connection specified by CONTOKEN be    * 00183700
*                      stopped.                                       * 00183800
*                                                                     * 00183900
*                                                                     * 00184000
*                                                                     * 00184100
*                                                                     * 00184200
*                                                                     * 00184300
*          REQUEST=MONITOR_SUBLIST                                    * 00184400
*              Monitor a sublist, designated by a list number and     * 00184500
*              entry key, within the list structure.  Requests that   * 00184600
*              monitoring of the designated sublist be started or     * 00184700
*              stopped for the requesting user.                       * 00184800
*                                                                     * 00184900
*              This request type is valid only when the structure is  * 00185000
*              allocated in a CFLEVEL=3 or higher CF.  The user must  * 00185100
*              have a local vector associated with his connection to  * 00185200
*              the structure,  and the structure must support keyed   * 00185300
*              list entries.                                          * 00185400
*                                                                     * 00185500
*              While sublist monitoring is in effect for a sublist,   * 00185600
*              the CF will queue or withdraw event monitor controls   * 00185700
*              (EMCs) to or from the registered user's event queue to * 00185800
*              reflect the empty or nonempty state of the sublist.    * 00185900
*              The user should use sublist monitoring in conjunction  * 00186000
*              with event queue monitoring (MONITOR_EVENTQ)  to       * 00186100
*              process state transitions for monitored sublists.      * 00186200
*              Queued EMCs may be dequeued from the user's event      * 00186300
*              queue,  and their contents read, using the DEQ_EVENTQ  * 00186400
*              request.                                               * 00186500
*                                                                     * 00186600
*              If multiple sublists are to be monitored,  it may be   * 00186700
*              more efficient to start sublist monitoring for those   * 00186800
*              multiple sublists using MONITOR_SUBLISTS.  However,    * 00186900
*              sublist monitoring may only be stopped for one sublist * 00187000
*              at a time via MONITOR_SUBLIST.                         * 00187100
*                                                                     * 00187200
*              If sublist monitoring for a sublist is in effect, a    * 00187300
*              request to start monitoring the sublist with a         * 00187400
*              different UNC specification will cause the old         * 00187500
*              specification to be immediately replaced by the new    * 00187600
*              specification.  It is not necessary to stop sublist    * 00187700
*              monitoring before requesting to start monitoring using * 00187800
*              the new specification.  The replacement of the UNC     * 00187900
*              occurs regardless of whether the EMC representing the  * 00188000
*              sublist monitor is currently queued to the user's      * 00188100
*              event queue.                                           * 00188200
*                                                                     * 00188300
*              When sublist monitoring is stopped,  the EMC           * 00188400
*              representing the sublist monitor is made available for * 00188500
*              reuse.  If the EMC is currently queued to the user's   * 00188600
*              event queue,  it will be dequeued.                     * 00188700
*                                                                     * 00188800
*              CONTOKEN, LISTNUM, and ENTRYKEY are required keywords. * 00188900
*                                                                     * 00189000
*                                                                     * 00189100
*              ACTION=START|STOP                                    * 00189200
*                  is a required keyword input that specifies whether * 00189300
*                  sublist monitoring is to be started or stopped.    * 00189400
*                                                                     * 00189500
*                                                                     * 00189600
*                                                                     * 00189700
*                  ACTION=START                                       * 00189800
*                      Requests that sublist monitoring for the       * 00189900
*                      connection specified by CONTOKEN for the       * 00190000
*                      designated sublist be started.                 * 00190100
*                                                                     * 00190200
*                                                                     * 00190300
*                      UNC=xunc                                       * 00190400
*                          is the name (RS-type), or address in       * 00190500
*                          register (2)-(12), of a required 16        * 00190600
*                          character input field which contains the   * 00190700
*                          user notification controls (UNC) which     * 00190800
*                          represent the user's monitoring interest   * 00190900
*                          in the designated sublist.  The user       * 00191000
*                          notification control information resides   * 00191100
*                          in the event monitor controls (EMC),       * 00191200
*                          which is queued to the user's event queue  * 00191300
*                          when the monitored sublist becomes         * 00191400
*                          nonempty,  and is returned along with      * 00191500
*                          other information from the EMC on a        * 00191600
*                          DEQ_EVENTQ request.                        * 00191700
*                                                                     * 00191800
*                                                                     * 00191900
*                                                                     * 00192000
*                  ACTION=STOP                                        * 00192100
*                      Requests that monitoring of the designated     * 00192200
*                      sublist for the connection specified by        * 00192300
*                      CONTOKEN be stopped.                           * 00192400
*                                                                     * 00192500
*                                                                     * 00192600
*                                                                     * 00192700
*                                                                     * 00192800
*                                                                     * 00192900
*          REQUEST=MONITOR_SUBLISTS                                   * 00193000
*              Monitor a set of sublists (designated by list number   * 00193100
*              and entry key) in the list structure.  Requests that   * 00193200
*              monitoring of the designated sublists be started for   * 00193300
*              the requesting user.  MONITOR_SUBLISTS cannot be used  * 00193400
*              to stop sublist monitoring.                            * 00193500
*                                                                     * 00193600
*              This request type is valid only when the structure is  * 00193700
*              allocated in a CFLEVEL=3 or higher CF.  The user must  * 00193800
*              have a local vector associated with his connection to  * 00193900
*              the structure,  and the structure must support keyed   * 00194000
*              list entries.                                          * 00194100
*                                                                     * 00194200
*              While sublist monitoring is in effect for a sublist,   * 00194300
*              the CF will queue or withdraw event monitor controls   * 00194400
*              (EMCs) to or from the registered user's event queue to * 00194500
*              reflect the empty or nonempty state of the sublist.    * 00194600
*              The user should use sublist monitoring in conjunction  * 00194700
*              with event queue monitoring (MONITOR_EVENTQ) to        * 00194800
*              process state transitions for monitored sublists.      * 00194900
*              Queued EMCs may be dequeued from the user's event      * 00195000
*              queue,  and their contents read, using the DEQ_EVENTQ  * 00195100
*              request.                                               * 00195200
*                                                                     * 00195300
*              If sublist monitoring for a sublist is in effect, a    * 00195400
*              request to start monitoring the sublist with a         * 00195500
*              different UNC specification will cause the old         * 00195600
*              specification to be immediately replaced by the new    * 00195700
*              specification.  It is not necessary to stop sublist    * 00195800
*              monitoring before requesting to start monitoring using * 00195900
*              the new specification.  The replacement of the UNC     * 00196000
*              occurs regardless of whether the EMC representing the  * 00196100
*              sublist monitor is currently queued to the user's      * 00196200
*              event queue.                                           * 00196300
*                                                                     * 00196400
*              The BUFFER or BUFLIST contains an input array of       * 00196500
*              entries, each mapped by the IXLYMSRI mapping macro,    * 00196600
*              and each of which contains the information needed to   * 00196700
*              request monitoring for one sublist.  The entries are   * 00196800
*              indexed with the first entry (index 1) starting at     * 00196900
*              offset zero in the BUFFER or BUFLIST area.             * 00197000
*                                                                     * 00197100
*              The STARTINDEX and ENDINDEX keywords contain the       * 00197200
*              starting and ending index numbers of the input         * 00197300
*              IXLYMSRI entries which are requested to be processed.  * 00197400
*              The MONITOR_SUBLISTS request can complete prematurely  * 00197500
*              for various reasons:                                   * 00197600
*                                                                     * 00197700
*                                                                     * 00197800
*              o   Model-dependent timeout - the index number of the  * 00197900
*                  first unprocessed IXLYMSRI entry is returned in    * 00198000
*                  the answer area                                    * 00198100
*                                                                     * 00198200
*              o   Insufficient event monitor control space to        * 00198300
*                  register as a sublist monitor - the index number   * 00198400
*                  of the first IXLYMSRI entry which could not be     * 00198500
*                  processed is returned in the answer area           * 00198600
*                                                                     * 00198700
*              o   Invalid list number specified in an IXLYMSRI entry * 00198800
*                  - the index number of the IXLYMSRI entry           * 00198900
*                  containing the invalid list number is returned in  * 00199000
*                  the answer area                                    * 00199100
*                                                                     * 00199200
*                                                                     * 00199300
*                                                                     * 00199400
*              In all of these premature completion cases, all prior  * 00199500
*              IXLYMSRI  entries were processed successfully.  The    * 00199600
*              user is responsible for performing any necessary       * 00199700
*              processing for the IXLYMSRI entries that were          * 00199800
*              successfully processed by the current request,  taking * 00199900
*              any necessary recovery actions to correct an error     * 00200000
*              condition reported on the current request,  and        * 00200100
*              re-issuing the MONITOR_SUBLISTS request with an        * 00200200
*              updated STARTINDEX value to redrive processing of      * 00200300
*              IXLYMSRI  entries that were not processed on the       * 00200400
*              current request.                                       * 00200500
*                                                                     * 00200600
*              CONTOKEN and one of BUFFER or BUFLIST are required     * 00200700
*              keywords.                                              * 00200800
*                                                                     * 00200900
*                                                                     * 00201000
*              STARTINDEX=xstartindex                                 * 00201100
*                  is the name (RS-type), or address in register      * 00201200
*                  (2)-(12), of a required halfword input field which * 00201300
*                  contains the 1-origin index number of the first    * 00201400
*                  IXLYMSRI entry which is requested to be processed. * 00201500
*                  Valid range is from 1 to the ENDINDEX value,       * 00201600
*                  inclusive.                                         * 00201700
*                                                                     * 00201800
*                                                                     * 00201900
*                                                                     * 00202000
*                                                                     * 00202100
*              ENDINDEX=xendindex                                     * 00202200
*                  is the name (RS-type), or address in register      * 00202300
*                  (2)-(12), of a required halfword input field which * 00202400
*                  contains the 1-origin index number of the last     * 00202500
*                  IXLYMSRI entry which is requested to be processed. * 00202600
*                  Valid range is from the STARTINDEX value to 1024,  * 00202700
*                  inclusive.  The specified index must not imply a   * 00202800
*                  larger buffer size than the user has actually      * 00202900
*                  provided for the BUFFER or BUFLIST.                * 00203000
*                                                                     * 00203100
*                                                                     * 00203200
*                                                                     * 00203300
*                                                                     * 00203400
*              MOSVECTOR=xmosvector                                   * 00203500
*                  is a required output.  It is the name (RS-type),   * 00203600
*                  or address in register (2)-(12), of a 128-byte     * 00203700
*                  virtual storage area which will contain a 1-origin * 00203800
*                  bit string in which each bit represents the        * 00203900
*                  monitored object state (empty or non-empty) of a   * 00204000
*                  particular sublist at the time that the            * 00204100
*                  MONITOR_SUBLISTS request was processed.            * 00204200
*                                                                     * 00204300
*                  The MOSVECTOR bits correspond one-to-one with the  * 00204400
*                  IXLYMSRI entries that were passed as input in the  * 00204500
*                  BUFFER or BUFLIST.  Only the bits corresponding to * 00204600
*                  the IXLYMSRI entries that were actually processed  * 00204700
*                  on the current request (i.e. between STARTINDEX    * 00204800
*                  and ENDINDEX for a request which completed         * 00204900
*                  successfully,  or between STARTINDEX and the       * 00205000
*                  returned index of the first unprocessed entry      * 00205100
*                  minus one for premature completion cases) will     * 00205200
*                  contain valid monitored object state information   * 00205300
*                  for the sublists designated by the corresponding   * 00205400
*                  IXLYMSRI entries.  Bits in the MOSVECTOR which lie * 00205500
*                  outside the valid range are not meaningful.        * 00205600
*                                                                     * 00205700
*                  When a bit in the valid range is on,  the sublist  * 00205800
*                  designated by the corresponding IXLYMSRI entry was * 00205900
*                  nonempty at the time that the request was          * 00206000
*                  processed.  When a bit in the valid range is off,  * 00206100
*                  the sublist designated by the corresponding        * 00206200
*                  IXLYMSRI entry was empty at the time that the      * 00206300
*                  request was processed.                             * 00206400
*                                                                     * 00206500
*                                                                     * 00206600
*                                                                     * 00206700
*          REQUEST=LOCK                                               * 00206800
*              Requests that the lock entry designated by LOCKINDEX   * 00206900
*              be operated on as specified by the LOCKOPER keyword.   * 00207000
*              This request type may only be specified for structures * 00207100
*              that contain a lock table.                             * 00207200
*                                                                     * 00207300
*              Required keywords are LOCKINDEX and LOCKOPER.          * 00207400
*                                                                     * 00207500
*                                                                     * 00207600
*                                                                     * 00207700
*                                                                     * 00207800
*                                                                     * 00207900
*                                                                     * 00208000
*      CONTOKEN=xcontoken                                             * 00208100
*          is the name (RS-type), or address in register (2)-(12), of * 00208200
*          a required 16 character input field that contains the      * 00208300
*          connect token returned by the IXLCONN service.  The        * 00208400
*          CONTOKEN uniquely identifies the user's connection to the  * 00208500
*          list structure.                                            * 00208600
*                                                                     * 00208700
*                                                                     * 00208800
*                                                                     * 00208900
*                                                                     * 00209000
*      [REQID=xreqid|NO_REQID]                                      * 00209100
*          is the name (RS-type), or address in register (2)-(12), of * 00209200
*          an optional 8 character input that contains a user-defined * 00209300
*          request identifier to be associated with the request.      * 00209400
*                                                                     * 00209500
*          Requests that have not been processed may be cancelled     * 00209600
*          using this request identifier.                             * 00209700
*                                                                     * 00209800
*          DEFAULT: NO_REQID                                          * 00209900
*                                                                     * 00210000
*                                                                     * 00210100
*                                                                     * 00210200
*                                                                     * 00210300
*      The following is a set of mutually exclusive keys.  This set   * 00210400
*      is optional; only one key may be specified.                    * 00210500
*                                                                     * 00210600
*                                                                     * 00210700
*      [BUFLIST=xbuflist                                            * 00210800
*          belongs to a set of mutually exclusive keys. It is an      * 00210900
*          optional input.  It is the name (RS-type), or address in   * 00211000
*          register (2)-(12), of a 128-byte virtual storage area      * 00211100
*          containing a list of addresses of buffers.  These buffers  * 00211200
*          may contain input data for the request or may receive      * 00211300
*          output data from the request, depending on the request     * 00211400
*          specified.  The set of buffers is used as if it were a     * 00211500
*          single contiguous area for purposes of input and output.   * 00211600
*                                                                     * 00211700
*          The format of the list is a set of 8-byte elements.  The   * 00211800
*          first four bytes of each element is reserved space.  The   * 00211900
*          second four bytes of each element contains the address of  * 00212000
*          a buffer.                                                  * 00212100
*                                                                     * 00212200
*          There may be 0 to 16 buffers passed in the list.  Each     * 00212300
*          buffer in the list must be the same size and must reside   * 00212400
*          in the same address space or data space.  Data is fetched  * 00212500
*          from or stored into the buffers in the order specified.    * 00212600
*                                                                     * 00212700
*          For READ, WRITE, MOVE, DELETE,  and MONITOR_SUBLISTS       * 00212800
*          requests, the length of a buffer must be a multiple of 256 * 00212900
*          bytes between 256 and 4096.  Each buffer must start on a   * 00213000
*          256-byte boundary and must not cross a 4096-byte boundary. * 00213100
*          For DELETE_ENTRYLIST, READ_LIST, READ_MULT,                * 00213200
*          READ_LCONTROLS, and DEQ_EVENTQ requests each buffer must   * 00213300
*          be 4096 bytes in length and must start on a 4096-byte      * 00213400
*          boundary.  For READ_LCONTROLS and DEQ_EVENTQ requests,     * 00213500
*          only one buffer may be passed.                             * 00213600
*                                                                     * 00213700
*          For READ and DELETE requests, and for MOVE requests when a * 00213800
*          DATAOPER of READ is also specified BUFLIST defines a set   * 00213900
*          of buffers into which entry data is to be read.            * 00214000
*                                                                     * 00214100
*          For WRITE requests and for MOVE requests when a DATAOPER   * 00214200
*          of WRITE is also specified BUFLIST defines a set of        * 00214300
*          buffers containing data to be written to an entry.         * 00214400
*                                                                     * 00214500
*          For WRITE requests and for MOVE requests when a DATAOPER   * 00214600
*          of WRITE is also specified the size of an existing entry   * 00214700
*          may be altered by specifying an ELEMNUM value which is     * 00214800
*          different than the ELEMNUM value used when the entry was   * 00214900
*          created.                                                   * 00215000
*                                                                     * 00215100
*          At least one of BUFFER, BUFLIST, and ADJAREA must be       * 00215200
*          specified for MOVE and DELETE requests when a DATAOPER of  * 00215300
*          READ is specified.  BUFLIST may optionally be specified on * 00215400
*          READ and WRITE requests, and on MOVE requests when         * 00215500
*          DATAOPER=WRITE is specified.  Failure to specify BUFFER or * 00215600
*          BUFLIST on any of these requests indicates that entry data * 00215700
*          is not to be read or written.  For each of these cases     * 00215800
*          BUFLIST is only functional for structures that support     * 00215900
*          entry data.  If BUFLIST is specified and the structure     * 00216000
*          does not support entry data then the contents of BUFLIST   * 00216100
*          neither affects the request nor is affected by the         * 00216200
*          request.                                                   * 00216300
*                                                                     * 00216400
*          One of BUFFER or BUFLIST is required for DELETE_ENTRYLIST, * 00216500
*          READ_LIST, READ_MULT, READ_LCONTROLS,  MONITOR_SUBLISTS,   * 00216600
*          and DEQ_EVENTQ requests.                                   * 00216700
*                                                                     * 00216800
*          For DELETE_ENTRYLIST requests the BUFLIST buffers are used * 00216900
*          as input and contain a list of list entry identifiers or   * 00217000
*          names to be deleted.  When LISTTYPE=IDLIST is specified    * 00217100
*          the buffers should be formatted into 12-byte elements,     * 00217200
*          where each element contains the list entry identifier for  * 00217300
*          an entry to be deleted.  When LISTTYPE=NAMELIST is         * 00217400
*          specified the buffers should be formatted into 16-byte     * 00217500
*          elements, where each element contains the list entry name  * 00217600
*          for an entry to be deleted.                                * 00217700
*                                                                     * 00217800
*          Upon successful completion of a READ_LIST or READ_MULT     * 00217900
*          request the BUFLIST buffers contain, starting at offset    * 00218000
*          zero in the first buffer, an array of elements each of     * 00218100
*          which is constructed as follows (dependent on request      * 00218200
*          options):                                                  * 00218300
*                                                                     * 00218400
*                                                                     * 00218500
*          o   When TYPE=ENTDATA was specified:                       * 00218600
*                                                                     * 00218700
*              Entry data.                                            * 00218800
*                                                                     * 00218900
*          o   When TYPE=ADJDATA was specified:                       * 00219000
*                                                                     * 00219100
*              Adunct data.                                           * 00219200
*                                                                     * 00219300
*          o   When TYPE=ECONTROLS was specified:                     * 00219400
*                                                                     * 00219500
*              List entry controls.                                   * 00219600
*                                                                     * 00219700
*          o   When TYPE=(ENTDATA,ADJDATA) was specified:             * 00219800
*                                                                     * 00219900
*              Entry data, followed by adjunct data.                  * 00220000
*                                                                     * 00220100
*          o   When TYPE=(ENTDATA,ECONTROLS) was specified:           * 00220200
*                                                                     * 00220300
*              List entry controls, followed by entry data.           * 00220400
*                                                                     * 00220500
*          o   When TYPE=(ADJDATA,ECONTROLS) was specified:           * 00220600
*                                                                     * 00220700
*              List entry controls, followed by adjunct data.         * 00220800
*                                                                     * 00220900
*          o   When TYPE=(ENTDATA,ADJDATA,ECONTROLS) was specified:   * 00221000
*                                                                     * 00221100
*              List entry controls, followed by entry data, followed  * 00221200
*              by adjunct data.                                       * 00221300
*                                                                     * 00221400
*                                                                     * 00221500
*                                                                     * 00221600
*          When adjunct data is requested on a READ_LIST or READ_MULT * 00221700
*          request the adjunct data for the first entry processed is  * 00221800
*          returned in the storage area specified by ADJAREA.  The    * 00221900
*          adjunct data for all other entries is returned in the      * 00222000
*          BUFLIST buffers.  When list entry controls are requested   * 00222100
*          the entry controls for the first entry processed is        * 00222200
*          returned in the answer area specified by ANSAREA.  The     * 00222300
*          entry controls for all other entries is returned in the    * 00222400
*          BUFLIST buffers.                                           * 00222500
*                                                                     * 00222600
*          One array element is returned for each processed entry.    * 00222700
*          The number of elements returned in the BUFLIST buffers is  * 00222800
*          indicated in the answer area specified by ANSAREA.  An     * 00222900
*          element length may be determined by considering the        * 00223000
*          element make-up, the structure element size, the number of * 00223100
*          elements in the entry, an adjunct data size of 64 bytes,   * 00223200
*          and the length of list entry controls.  The length and     * 00223300
*          contents of list entry controls is defined by mapping      * 00223400
*          macro IXLYLCTL.                                            * 00223500
*                                                                     * 00223600
*          Upon successful completion of a READ_LCONTROLS request,    * 00223700
*          the BUFLIST buffers contain, starting at offset zero in    * 00223800
*          the first buffer, an array of list monitoring information  * 00223900
*          for the specified list.  The relative position of an array * 00224000
*          element associates it with a connection identifier.  The   * 00224100
*          first array element is associated with a connection        * 00224200
*          identifier of zero, and is reserved.  The length and       * 00224300
*          contents of each array element is defined by mapping macro * 00224400
*          IXLYLMI.                                                   * 00224500
*                                                                     * 00224600
*          For a MONITOR_SUBLISTS request,  the BUFLIST is used to    * 00224700
*          input an array of entries, each mapped by IXLYMSRI, and    * 00224800
*          each of which contains the information necessary to        * 00224900
*          register as a sublist monitor for one sublist.             * 00225000
*                                                                     * 00225100
*          Upon successful completion of a DEQ_EVENTQ request, the    * 00225200
*          BUFLIST contains, starting at offset zero in the buffer,   * 00225300
*          an array of event monitor controls that were dequeued from * 00225400
*          the user's event queue.  The length and contents of each   * 00225500
*          array element is defined by mapping macro IXLYEMC.         * 00225600
*                                                                     * 00225700
*          BUFLIST is mutually exclusive with BUFFER and with all     * 00225800
*          requests not described above.                              * 00225900
*                                                                     * 00226000
*                                                                     * 00226100
*          [BUFADDRTYPE=VIRTUAL|REAL]                               * 00226200
*              is an optional keyword input that specifies whether    * 00226300
*              the buffer addresses specified in the BUFLIST list are * 00226400
*              virtual storage addresses or real storage addresses.   * 00226500
*                                                                     * 00226600
*              DEFAULT: VIRTUAL                                       * 00226700
*                                                                     * 00226800
*                                                                     * 00226900
*              [BUFADDRTYPE=VIRTUAL                                   * 00227000
*                  Indicates that the buffer addresses specified in   * 00227100
*                  the BUFLIST list are virtual storage addresses.    * 00227200
*                                                                     * 00227300
*                                                                     * 00227400
*                                                                     * 00227500
*                  [PAGEABLE=YES|NO]                                * 00227600
*                      is an optional keyword input that specifies    * 00227700
*                      whether or not the buffers specified by        * 00227800
*                      BUFLIST resides in pageable storage.           * 00227900
*                                                                     * 00228000
*                      DEFAULT: YES                                   * 00228100
*                                                                     * 00228200
*                                                                     * 00228300
*                      [PAGEABLE=YES                                  * 00228400
*                          Indicates that the BUFLIST buffers reside  * 00228500
*                          in pageable virtual storage.               * 00228600
*                                                                     * 00228700
*                          This includes disabled reference (DREF)    * 00228800
*                          storage, and may include storage that has  * 00228900
*                          the potential to become pageable during    * 00229000
*                          the processing of a request (for example,  * 00229100
*                          address space storage owned by any         * 00229200
*                          swappable address space, for which a PGSER * 00229300
*                          FIX has been successfully processed,  but  * 00229400
*                          for which the owning address space gets    * 00229500
*                          swapped during processing of an IXLLIST    * 00229600
*                          request). It does not include implicitly   * 00229700
*                          non-pageable storage (such as is obtained  * 00229800
*                          from non-pageable subpools).               * 00229900
*                                                                     * 00230000
*                          The system takes responsibility for        * 00230100
*                          managing binds to pageable central storage * 00230200
*                          for the duration of the IXLLIST request,   * 00230300
*                          regardless of what address space owns the  * 00230400
*                          storage or whether the storage-owning      * 00230500
*                          address space is swappable or              * 00230600
*                          nonswappable.  The storage may be owned by * 00230700
*                          any address space.                         * 00230800
*                                                                     * 00230900
*                                                                     * 00231000
*                                                                     * 00231100
*                          [BUFSTGKEY=xbufstgkey|CALLERS_KEY]]      * 00231200
*                              is the name (RS-type), or address in   * 00231300
*                              register (2)-(12), of an optional 8    * 00231400
*                              bit input containing the storage key   * 00231500
*                              to be used when referencing the        * 00231600
*                              buffers in the list specified by       * 00231700
*                              BUFLIST.                               * 00231800
*                                                                     * 00231900
*                              The high order nibble contains the     * 00232000
*                              storage key, the low order nibble is   * 00232100
*                              ignored.  For example, set 'kkkk' in   * 00232200
*                              the binary bit string 'kkkkxxxx'B to   * 00232300
*                              correspond to the desired storage key. * 00232400
*                                                                     * 00232500
*                              If BUFSTGKEY is not specified, then    * 00232600
*                              all references to the BUFLIST buffers  * 00232700
*                              are performed using the caller's PSW   * 00232800
*                              key.                                   * 00232900
*                                                                     * 00233000
*                              DEFAULT: CALLERS_KEY                   * 00233100
*                                                                     * 00233200
*                                                                     * 00233300
*                                                                     * 00233400
*                      [PAGEABLE=NO]                                  * 00233500
*                          Indicates that the BUFLIST buffers reside  * 00233600
*                          in non-pageable virtual storage.           * 00233700
*                                                                     * 00233800
*                          This includes implicitly non-pageable      * 00233900
*                          storage areas (such as is obtained from    * 00234000
*                          non-pageable subpools), and may include    * 00234100
*                          storage that has the potential to become   * 00234200
*                          pageable during the processing of an       * 00234300
*                          IXLLIST request (for example, address      * 00234400
*                          space storage owned by a swappable         * 00234500
*                          requestor's or connector's address space,  * 00234600
*                          for which a PGSER FIX  has been            * 00234700
*                          successfully processed,  but for which the * 00234800
*                          owning address space has been swapped      * 00234900
*                          during processing of an IXLLIST request).  * 00235000
*                                                                     * 00235100
*                          The system takes responsibility for        * 00235200
*                          managing binds to non-pageable central     * 00235300
*                          storage for the duration of the request if * 00235400
*                          and only if the storage is owned by either * 00235500
*                          the requestor's address space or the       * 00235600
*                          connector's address space.  If the storage * 00235700
*                          is owned by any other address space, then  * 00235800
*                          the invoker is responsible for ensuring    * 00235900
*                          the virtual storage remains non-pageable   * 00236000
*                          for the duration of the request (including * 00236100
*                          the case where the storage is owned by a   * 00236200
*                          swappable address space which is swapped   * 00236300
*                          during processing of the IXLLIST request). * 00236400
*                          With this proviso, the storage may be      * 00236500
*                          owned by any address space.                * 00236600
*                                                                     * 00236700
*                          If MODE=ASYNCTOKEN is specified or         * 00236800
*                          MODE=SYNCTOKEN is specified and the        * 00236900
*                          request does not complete synchronously,   * 00237000
*                          then the storage must remain non-pageable  * 00237100
*                          until completion of the corresponding      * 00237200
*                          IXLFCOMP request.  If MODE=ASYNCEXIT is    * 00237300
*                          specified or MODE=SYNCEXIT is specified    * 00237400
*                          and the request does not complete          * 00237500
*                          synchronously, then the storage must       * 00237600
*                          remain non-pageable until the completion   * 00237700
*                          exit is driven for the request.  If        * 00237800
*                          MODE=ASYNCECB is specified or MODE=SYNCECB * 00237900
*                          is specified and the request does not      * 00238000
*                          complete synchronously, then the storage   * 00238100
*                          must remain non-pageable until the         * 00238200
*                          specified ECB is posted for the request.   * 00238300
*                                                                     * 00238400
*                                                                     * 00238500
*                                                                     * 00238600
*                                                                     * 00238700
*                                                                     * 00238800
*                                                                     * 00238900
*                  [BUFALET=xbufalet|NO_BUFALET]]                   * 00239000
*                      is the name (RS-type), or address in register  * 00239100
*                      (2)-(12), of an optional fullword input        * 00239200
*                      specifying the ALET value to be used in        * 00239300
*                      referencing all of the buffers specified for   * 00239400
*                      BUFLIST                                        * 00239500
*                                                                     * 00239600
*                      DEFAULT: NO_BUFALET                            * 00239700
*                                                                     * 00239800
*                                                                     * 00239900
*                                                                     * 00240000
*              [BUFADDRTYPE=REAL]                                     * 00240100
*                  Indicates that the buffer addresses specified in   * 00240200
*                  the BUFLIST list are real storage addresses.       * 00240300
*                                                                     * 00240400
*                  The system takes no responsibility for managing    * 00240500
*                  real storage binds when real addresses are         * 00240600
*                  provided.  The invoker is responsible for ensuring * 00240700
*                  the real storage addresses provided remain valid   * 00240800
*                  for the duration of the request (including the     * 00240900
*                  case where the real storage provided is backing    * 00241000
*                  virtual storage owned by a swappable address space * 00241100
*                  which is swapped during processing of the          * 00241200
*                  request).  The virtual storage backed by the real  * 00241300
*                  storage whose addresses are provided may be owned  * 00241400
*                  by any address space.                              * 00241500
*                                                                     * 00241600
*                                                                     * 00241700
*                                                                     * 00241800
*                                                                     * 00241900
*                                                                     * 00242000
*                                                                     * 00242100
*          [BUFNUM=xbufnum|NO_BUFNUM]                               * 00242200
*              is the name (RS-type), or address in register          * 00242300
*              (2)-(12), of an optional byte input specifying the     * 00242400
*              number of buffers defined in the BUFLIST list.         * 00242500
*                                                                     * 00242600
*              BUFNUM values must be in the range of 0 to 16.  A      * 00242700
*              BUFNUM value of zero indicates that no structure data  * 00242800
*              is to be read or written into the BUFLIST buffers.     * 00242900
*                                                                     * 00243000
*              BUFNUM is mutually exclusive with                      * 00243100
*              REQUEST=READ_LCONTROLS and DEQ_EVENTQ requests, for    * 00243200
*              which one and only one buffer may be passed.  For all  * 00243300
*              other requests BUFNUM is required when BUFLIST is      * 00243400
*              specified, and is mutually exclusive otherwise.        * 00243500
*                                                                     * 00243600
*              DEFAULT: NO_BUFNUM                                     * 00243700
*                                                                     * 00243800
*                                                                     * 00243900
*                                                                     * 00244000
*                                                                     * 00244100
*          [BUFINCRNUM=xbufincrnum|NO_BUFINCRNUM]                   * 00244200
*              is the name (RS-type), or address in register          * 00244300
*              (2)-(12), of an optional byte input specifying the     * 00244400
*              number of 256-byte increments or segments in each      * 00244500
*              buffer in the BUFLIST list.                            * 00244600
*                                                                     * 00244700
*              BUFINCRNUM values must be a power of 2 in the range of * 00244800
*              1 to 16 (1, 2, 4, 8, 16), corresponding to BUFLIST     * 00244900
*              buffer sizes of 256 to 4096 bytes.                     * 00245000
*                                                                     * 00245100
*              BUFINCRNUM is mutually exclusive with REQUEST values   * 00245200
*              of DELETE_ENTRYLIST, READ_LIST, READ_MULT,             * 00245300
*              READ_LCONTROLS, and DEQ_EVENTQ.  For these requests a  * 00245400
*              BUFINCRNUM value of 16 will be used.  For all other    * 00245500
*              requests BUFINCRNUM is required when BUFLIST is        * 00245600
*              specified.                                             * 00245700
*                                                                     * 00245800
*              DEFAULT: NO_BUFINCRNUM                                 * 00245900
*                                                                     * 00246000
*                                                                     * 00246100
*                                                                     * 00246200
*      BUFFER=xbuffer                                               * 00246300
*          belongs to a set of mutually exclusive keys. It is an      * 00246400
*          optional input.  It is the name (RS-type), or address in   * 00246500
*          register (2)-(12), of a virtual storage area containing    * 00246600
*          input data for the request or to receive output data from  * 00246700
*          the request, depending on the request specified.  The      * 00246800
*          BUFSIZE keyword specifies the size of the buffer.          * 00246900
*                                                                     * 00247000
*          For READ, WRITE, MOVE, DELETE,  and MONITOR_SUBLISTS       * 00247100
*          requests, if the length of the buffer is less than or      * 00247200
*          equal to 4096 bytes then the length of the buffer must be  * 00247300
*          a power of 2 between 256 and 4096 bytes (256, 512, 1024,   * 00247400
*          2048, 4096), the buffer must start on a 256-byte boundary, * 00247500
*          and the buffer must not cross a 4096-byte boundary.  If    * 00247600
*          the length of the buffer is greater than 4096 bytes then   * 00247700
*          the length of the buffer must be a multiple of 4096 bytes  * 00247800
*          between 4096 and 65536 and the buffer must start on a      * 00247900
*          4096-byte boundary.                                        * 00248000
*                                                                     * 00248100
*          For DELETE_ENTRYLIST, READ_LIST, and READ_MULT requests    * 00248200
*          the length of the buffer must be a multiple of 4096 bytes  * 00248300
*          between 4096 and 65536 and the buffer must start on a      * 00248400
*          4096-byte boundary.                                        * 00248500
*                                                                     * 00248600
*          For READ_LCONTROLS and DEQ_EVENTQ requests, the buffer     * 00248700
*          must be 4096 bytes on a 4096-byte boundary.                * 00248800
*                                                                     * 00248900
*          For READ and DELETE requests, and for MOVE requests when a * 00249000
*          DATAOPER of READ is also specified BUFFER defines an area  * 00249100
*          into which entry data is to be read.                       * 00249200
*                                                                     * 00249300
*          For WRITE requests and for MOVE requests when a DATAOPER   * 00249400
*          of WRITE is also specified BUFFER defines an area          * 00249500
*          containing data to be written to an entry.                 * 00249600
*                                                                     * 00249700
*          For WRITE requests and for MOVE requests when a DATAOPER   * 00249800
*          of WRITE is also specified the size of an existing entry   * 00249900
*          may be altered by specifying an ELEMNUM value which is     * 00250000
*          different than the ELEMNUM value used when the entry was   * 00250100
*          created.                                                   * 00250200
*                                                                     * 00250300
*          At least one of BUFFER, BUFLIST, and ADJAREA must be       * 00250400
*          specified for MOVE and DELETE requests when DATAOPER=READ  * 00250500
*          is specified.  BUFFER may optionally be specified on READ  * 00250600
*          and WRITE requests, and on MOVE requests when              * 00250700
*          DATAOPER=WRITE is specified.  Failure to specify BUFFER or * 00250800
*          BUFLIST on any of these requests indicates that entry data * 00250900
*          is not to be read or written.  For each of these cases     * 00251000
*          BUFFER is only functional for structures that support      * 00251100
*          entry data.  If BUFFER is specified and the structure does * 00251200
*          not support entry data then the contents of BUFFER neither * 00251300
*          affects the request nor is affected by the request.        * 00251400
*                                                                     * 00251500
*          One of BUFFER or BUFLIST is required for DELETE_ENTRYLIST, * 00251600
*          READ_LIST, READ_MULT, READ_LCONTROLS,  MONITOR_SUBLISTS,   * 00251700
*          and DEQ_EVENTQ requests.                                   * 00251800
*                                                                     * 00251900
*          For DELETE_ENTRYLIST requests the BUFFER area is used as   * 00252000
*          input and contains a list of list entry identifiers or     * 00252100
*          names to be deleted.  When LISTTYPE=IDLIST is specified    * 00252200
*          the buffer should be formatted into 12-byte elements,      * 00252300
*          where each element contains the list entry identifier for  * 00252400
*          an entry to be deleted.  When LISTTYPE=NAMELIST is         * 00252500
*          specified the buffer should be formatted into 16-byte      * 00252600
*          elements, where each element contains the list entry name  * 00252700
*          for an entry to be deleted.                                * 00252800
*                                                                     * 00252900
*          Upon successful completion of a READ_LIST or READ_MULT     * 00253000
*          request the BUFFER area contains, starting at offset zero  * 00253100
*          in the first buffer, an array of elements each of which is * 00253200
*          constructed as follows (dependent on request options):     * 00253300
*                                                                     * 00253400
*                                                                     * 00253500
*          o   When TYPE=ENTDATA was specified:                       * 00253600
*                                                                     * 00253700
*              Entry data.                                            * 00253800
*                                                                     * 00253900
*          o   When TYPE=ADJDATA was specified:                       * 00254000
*                                                                     * 00254100
*              Adunct data.                                           * 00254200
*                                                                     * 00254300
*          o   When TYPE=ECONTROLS was specified:                     * 00254400
*                                                                     * 00254500
*              List entry controls.                                   * 00254600
*                                                                     * 00254700
*          o   When TYPE=(ENTDATA,ADJDATA) was specified:             * 00254800
*                                                                     * 00254900
*              Entry data, followed by adjunct data.                  * 00255000
*                                                                     * 00255100
*          o   When TYPE=(ENTDATA,ECONTROLS) was specified:           * 00255200
*                                                                     * 00255300
*              List entry controls, followed by entry data.           * 00255400
*                                                                     * 00255500
*          o   When TYPE=(ADJDATA,ECONTROLS) was specified:           * 00255600
*                                                                     * 00255700
*              List entry controls, followed by adjunct data.         * 00255800
*                                                                     * 00255900
*          o   When TYPE=(ENTDATA,ADJDATA,ECONTROLS) was specified:   * 00256000
*                                                                     * 00256100
*              List entry controls, followed by entry data, followed  * 00256200
*              by adjunct data.                                       * 00256300
*                                                                     * 00256400
*                                                                     * 00256500
*                                                                     * 00256600
*          When adjunct data is requested on a READ_LIST or READ_MULT * 00256700
*          request the adjunct data for the first entry processed is  * 00256800
*          returned in the storage area specified by ADJAREA.  The    * 00256900
*          adjunct data for all other entries is returned in the      * 00257000
*          BUFFER area.  When list entry controls are requested the   * 00257100
*          entry controls for the first entry processed is returned   * 00257200
*          in the answer area specified by ANSAREA.  The entry        * 00257300
*          controls for all other entries is returned in the BUFFER   * 00257400
*          area.                                                      * 00257500
*                                                                     * 00257600
*          One array element is returned for each processed entry.    * 00257700
*          The number of elements returned in the BUFFER area is      * 00257800
*          indicated in the answer area specified by ANSAREA.  An     * 00257900
*          element length may be determined by considering the        * 00258000
*          element make-up, the structure element size, the number of * 00258100
*          elements in the entry, an adjunct data size of 64 bytes,   * 00258200
*          and the length of list entry controls.  The length and     * 00258300
*          contents of list entry controls is defined by mapping      * 00258400
*          macro IXLYLCTL.                                            * 00258500
*                                                                     * 00258600
*          Upon successful completion of a READ_LCONTROLS request,    * 00258700
*          the BUFFER area contains, starting at offset zero, an      * 00258800
*          array of list monitoring information for the specified     * 00258900
*          list.  The relative position of an array element           * 00259000
*          associates it with a connection identifier.  The first     * 00259100
*          array element is associated with a connection identifier   * 00259200
*          of zero, and is reserved.  The length and contents of each * 00259300
*          array element is defined by mapping macro IXLYLMI.         * 00259400
*                                                                     * 00259500
*          For a MONITOR_SUBLISTS request,  the BUFFER  is used to    * 00259600
*          input an array of entries, each mapped by IXLYMSRI, and    * 00259700
*          each of which contains the information necessary to        * 00259800
*          register as a sublist monitor for one sublist.             * 00259900
*                                                                     * 00260000
*          Upon successful completion of a DEQ_EVENTQ request, the    * 00260100
*          BUFFER area contains, starting at offset zero, an array of * 00260200
*          event monitor controls that were dequeued from the user's  * 00260300
*          event queue.  The length and contents of each array        * 00260400
*          element is defined by mapping macro IXLYEMC.               * 00260500
*                                                                     * 00260600
*          BUFFER is mutually exclusive with BUFLIST and with all     * 00260700
*          requests not described above.                              * 00260800
*                                                                     * 00260900
*                                                                     * 00261000
*          [PAGEABLE=YES|NO]                                        * 00261100
*              is an optional keyword input that specifies whether or * 00261200
*              not the storage area specified by BUFFER resides in    * 00261300
*              pageable storage.                                      * 00261400
*                                                                     * 00261500
*              DEFAULT: YES                                           * 00261600
*                                                                     * 00261700
*                                                                     * 00261800
*              [PAGEABLE=YES                                          * 00261900
*                  Indicates that the BUFFER area resides in pageable * 00262000
*                  virtual storage.                                   * 00262100
*                                                                     * 00262200
*                  This includes disabled reference (DREF) storage,   * 00262300
*                  and may include storage that has the potential to  * 00262400
*                  become pageable during the processing of a request * 00262500
*                  (for example, address space storage owned by any   * 00262600
*                  swappable address space, for which a PGSER FIX has * 00262700
*                  been successfully processed,  but for which the    * 00262800
*                  owning address space gets swapped during           * 00262900
*                  processing of an IXLLIST request).   It does not   * 00263000
*                  include implicitly non-pageable storage (such as   * 00263100
*                  is obtained from non-pageable subpools).           * 00263200
*                                                                     * 00263300
*                  The system takes responsibility for managing binds * 00263400
*                  to pageable central storage for the duration of    * 00263500
*                  the IXLLIST request,   regardless of what address  * 00263600
*                  space owns the storage or whether the              * 00263700
*                  storage-owning address space is swappable or       * 00263800
*                  nonswappable.  The storage may be owned by any     * 00263900
*                  address space.                                     * 00264000
*                                                                     * 00264100
*                                                                     * 00264200
*                                                                     * 00264300
*                  [BUFSTGKEY=xbufstgkey|CALLERS_KEY]]              * 00264400
*                      is the name (RS-type), or address in register  * 00264500
*                      (2)-(12), of an optional 8 bit input           * 00264600
*                      containing the storage key to be used when     * 00264700
*                      referencing the storage area specified by      * 00264800
*                      BUFFER.                                        * 00264900
*                                                                     * 00265000
*                      The high order nibble contains the storage     * 00265100
*                      key, the low order nibble is ignored.  For     * 00265200
*                      example, set 'kkkk' in the binary bit string   * 00265300
*                      'kkkkxxxx'B to correspond to the desired       * 00265400
*                      storage key.                                   * 00265500
*                                                                     * 00265600
*                      If BUFSTGKEY is not specified, then all        * 00265700
*                      references to the BUFFER buffer storage are    * 00265800
*                      performed using the caller's PSW key.          * 00265900
*                                                                     * 00266000
*                      DEFAULT: CALLERS_KEY                           * 00266100
*                                                                     * 00266200
*                                                                     * 00266300
*                                                                     * 00266400
*              [PAGEABLE=NO]                                          * 00266500
*                  Indicates that the BUFFER area resides in          * 00266600
*                  non-pageable virtual storage.                      * 00266700
*                                                                     * 00266800
*                  This includes implicitly non-pageable storage      * 00266900
*                  areas (such as is obtained from non-pageable       * 00267000
*                  subpools), and may include storage that has the    * 00267100
*                  potential to become pageable during the processing * 00267200
*                  of an IXLLIST request (for example, address space  * 00267300
*                  storage owned by a swappable requestor's or        * 00267400
*                  connector's address space, for which a PGSER FIX   * 00267500
*                  has been successfully processed,  but for which    * 00267600
*                  the owning address space has been swapped during   * 00267700
*                  processing of an IXLLIST request).                 * 00267800
*                                                                     * 00267900
*                  The system takes responsibility for managing binds * 00268000
*                  to non-pageable central storage for the duration   * 00268100
*                  of the request if and only if the storage is owned * 00268200
*                  by either the requestor's address space or the     * 00268300
*                  connector's address space.  If the storage is      * 00268400
*                  owned by any other address space, then the invoker * 00268500
*                  is responsible for ensuring the virtual storage    * 00268600
*                  remains non-pageable for the duration of the       * 00268700
*                  request (including the case where the storage is   * 00268800
*                  owned by a swappable address space which is        * 00268900
*                  swapped during processing of the IXLLIST request). * 00269000
*                  With this proviso, the storage may be owned by any * 00269100
*                  address space.                                     * 00269200
*                                                                     * 00269300
*                  If MODE=ASYNCTOKEN is specified or MODE=SYNCTOKEN  * 00269400
*                  is specified and the request does not complete     * 00269500
*                  synchronously, then the storage must remain        * 00269600
*                  non-pageable until completion of the corresponding * 00269700
*                  IXLFCOMP request.  If MODE=ASYNCEXIT is specified  * 00269800
*                  or MODE=SYNCEXIT is specified and the request does * 00269900
*                  not complete synchronously, then the storage must  * 00270000
*                  remain non-pageable until the completion exit is   * 00270100
*                  driven for the request.  If MODE=ASYNCECB is       * 00270200
*                  specified or MODE=SYNCECB is specified and the     * 00270300
*                  request does not complete synchronously, then the  * 00270400
*                  storage must remain non-pageable until the         * 00270500
*                  specified ECB is posted for the request.           * 00270600
*                                                                     * 00270700
*                                                                     * 00270800
*                                                                     * 00270900
*                                                                     * 00271000
*                                                                     * 00271100
*                                                                     * 00271200
*          [BUFSIZE=xbufsize|NO_BUFSIZE]]                           * 00271300
*              is the name (RS-type), or address in register          * 00271400
*              (2)-(12), of an optional fullword input specifying the * 00271500
*              length of the virtual storage area specified for       * 00271600
*              BUFFER in bytes.                                       * 00271700
*                                                                     * 00271800
*              Refer to BUFFER for the buffer size requirements for   * 00271900
*              each request type.                                     * 00272000
*                                                                     * 00272100
*              BUFSIZE is mutually exclusive with                     * 00272200
*              REQUEST=READ_LCONTROLS and DEQ_EVENTQ, for which the   * 00272300
*              buffer size must be 4096 bytes.  For all other         * 00272400
*              requests BUFSIZE is required when BUFFER is specified, * 00272500
*              and is mutually exclusive otherwise.                   * 00272600
*                                                                     * 00272700
*              DEFAULT: NO_BUFSIZE                                    * 00272800
*                                                                     * 00272900
*                                                                     * 00273000
*                                                                     * 00273100
*                                                                     * 00273200
*                                                                     * 00273300
*      End of a set of mutually exclusive optional keys.              * 00273400
*      DEFAULT: BUFLIST                                               * 00273500
*                                                                     * 00273600
*                                                                     * 00273700
*                                                                     * 00273800
*      [ADJAREA=xadjarea|NO_ADJAREA]                                * 00273900
*          is an optional input.  It is the name (RS-type), or        * 00274000
*          address in register (2)-(12), of a 64-byte area in virtual * 00274100
*          storage where entry adjunct data is to be read, or where   * 00274200
*          data to be written to an entry adjunct area resides.       * 00274300
*                                                                     * 00274400
*          At least one of BUFFER, BUFLIST, and ADJAREA must be       * 00274500
*          specified for MOVE and DELETE requests when a DATAOPER of  * 00274600
*          READ is specified.  ADJAREA is required on READ_LIST, and  * 00274700
*          READ_MULT requests when TYPE=ADJDATA is specified.         * 00274800
*          ADJAREA may optionally be specified on READ and WRITE      * 00274900
*          requests, and for MOVE requests when a DATAOPER of WRITE   * 00275000
*          is specified.  Failure to specify ADJAREA on any of these  * 00275100
*          requests indicates that structure adjunct data is not to   * 00275200
*          be read or written.  For each of these cases ADJAREA is    * 00275300
*          only functional for structures that support adjunct data.  * 00275400
*          If ADJAREA is specified and the structure does not support * 00275500
*          adjunct data then the contents of ADJAREA does not affect  * 00275600
*          the request.                                               * 00275700
*                                                                     * 00275800
*          ADJAREA is mutually exclusive with all requests not        * 00275900
*          described above.                                           * 00276000
*                                                                     * 00276100
*          DEFAULT: NO_ADJAREA                                        * 00276200
*                                                                     * 00276300
*                                                                     * 00276400
*                                                                     * 00276500
*                                                                     * 00276600
*      [LISTNUM=xlistnum|NO_LISTNUM                                 * 00276700
*          is the name (RS-type), or address in register (2)-(12), of * 00276800
*          an optional fullword input specifying the number of the    * 00276900
*          list to be processed, partially designating a sublist to   * 00277000
*          be processed, or designating the number of the list on     * 00277100
*          which the entry (or entries) to be processed reside.       * 00277200
*                                                                     * 00277300
*          LISTNUM may be used as follows:                            * 00277400
*                                                                     * 00277500
*                                                                     * 00277600
*          o   In conjunction with LISTPOS and/or ENTRYKEY to         * 00277700
*              designate an existing list entry as the source of a    * 00277800
*              READ or MOVE request, or the target of a WRITE or      * 00277900
*              DELETE request.                                        * 00278000
*                                                                     * 00278100
*          o   In conjunction with LISTPOS and/or ENTRYKEY or KEYCOMP * 00278200
*              to designate an existing list entry as the starting    * 00278300
*              entry for a READ_LIST request.                         * 00278400
*                                                                     * 00278500
*          o   As a qualifier to ENTRYID or ENTRYNAME on READ, WRITE, * 00278600
*              MOVE, DELETE, and READ_LIST requests to verify the     * 00278700
*              designated list entry resides on the list specified by * 00278800
*              LISTNUM prior to proceeding with processing.           * 00278900
*                                                                     * 00279000
*          o   In conjunction with LOCBYCURSOR to designate a list    * 00279100
*              entry for READ, WRITE, MOVE, DELETE, and READ_LIST     * 00279200
*              requests.                                              * 00279300
*                                                                     * 00279400
*          o   In conjunction with LISTPOS and/or ENTRYKEY to         * 00279500
*              designate a list position for entry creation on a      * 00279600
*              WRITE request when an ENTRYTYPE of ANY or NEW is       * 00279700
*              specified.  When the ENTRYTYPE is ANY then this use of * 00279800
*              LISTNUM is in addition to one of the previously        * 00279900
*              described uses.                                        * 00280000
*                                                                     * 00280100
*          o   As a qualifier on READ_MULT, DELETE_MULT, and          * 00280200
*              DELETE_ENTRYLIST requests to restrict processing to    * 00280300
*              those entries residing on the list specified by        * 00280400
*              LISTNUM.                                               * 00280500
*                                                                     * 00280600
*          o   To designate the list of interest for a                * 00280700
*              READ_LCONTROLS, WRITE_LCONTROLS, or MONITOR_LIST       * 00280800
*              request.                                               * 00280900
*                                                                     * 00281000
*          o   In conjunction with ENTRYKEY to designate a sublist    * 00281100
*              for which the user's event monitor controls are to be  * 00281200
*              read,  for a READ_EMCONTROLS request.                  * 00281300
*                                                                     * 00281400
*          o   In conjunction with ENTRYKEY to designate a sublist    * 00281500
*              for which the user wishes to start or stop sublist     * 00281600
*              monitoring,  for a MONITOR_SUBLIST request.            * 00281700
*                                                                     * 00281800
*                                                                     * 00281900
*                                                                     * 00282000
*          At least one of LISTNUM, ENTRYID, ENTRYNAME, and           * 00282100
*          LOCBYCURSOR must be specified on READ, READ_LIST, MOVE,    * 00282200
*          and DELETE requests, and on WRITE requests when            * 00282300
*          ENTRYTYPE=OLD is specified.  LISTNUM is required for       * 00282400
*          READ_LCONTROLS, WRITE_LCONTROLS, READ_EMCONTROLS,          * 00282500
*          MONITOR_SUBLIST, and MONITOR_LIST requests, and for WRITE  * 00282600
*          requests when an ENTRYTYPE of NEW or ANY is specified.  It * 00282700
*          is also required when LOCBYCURSOR is specified.  LISTNUM   * 00282800
*          may optionally be specified on READ_MULT, DELETE_MULT, and * 00282900
*          DELETE_ENTRYLIST requests.  It is mutually exclusive with  * 00283000
*          all other request types.                                   * 00283100
*                                                                     * 00283200
*          DEFAULT: NO_LISTNUM                                        * 00283300
*                                                                     * 00283400
*                                                                     * 00283500
*          [LISTPOS=HEAD|TAIL]                                      * 00283600
*              is an optional keyword input that partially designates * 00283700
*              a list entry or position.                              * 00283800
*                                                                     * 00283900
*              LISTPOS is optional on READ, WRITE, MOVE, DELETE, and  * 00284000
*              READ_LIST requests when LISTNUM is also specified.  It * 00284100
*              is also optional on WRITE requests when ENTRYTYPE=ANY  * 00284200
*              is specified.  It is mutually exclusive with all other * 00284300
*              request types.                                         * 00284400
*                                                                     * 00284500
*              LISTPOS is mutually exclusive with ENTRYID, ENTRYNAME, * 00284600
*              and LOCBYCURSOR, except on WRITE requests when an      * 00284700
*              ENTRYTYPE of ANY or NEW is specified.  if an entry is  * 00284800
*              created for a WRITE request then LISTPOS is used to    * 00284900
*              partially designate the position of the new entry.     * 00285000
*              LISTPOS=HEAD is mutually exclusive with                * 00285100
*              LISTDIR=TOHEAD, and LISTPOS=TAIL is mutually exclusive * 00285200
*              with LISTDIR=TOTAIL.                                   * 00285300
*                                                                     * 00285400
*              When LISTDIR is not specified, and when LISTDIR=TOTAIL * 00285500
*              is specified, the default value for LISTPOS is HEAD.   * 00285600
*              When LISTDIR=TOHEAD is specified, the default value    * 00285700
*              for LISTPOS is TAIL.                                   * 00285800
*                                                                     * 00285900
*              DEFAULT: HEAD                                          * 00286000
*                                                                     * 00286100
*                                                                     * 00286200
*              LISTPOS=HEAD                                           * 00286300
*                  This option has meaning as follows:                * 00286400
*                                                                     * 00286500
*                                                                     * 00286600
*                  o   If LISTNUM is specified and ENTRYKEY is not,   * 00286700
*                      then the designated entry or position is the   * 00286800
*                      head of the list.                              * 00286900
*                                                                     * 00287000
*                  o   If ENTRYKEY is specified, the designated entry * 00287100
*                      or position is the head of the sublist         * 00287200
*                      containing entries with a matching key.        * 00287300
*                                                                     * 00287400
*                                                                     * 00287500
*                                                                     * 00287600
*                                                                     * 00287700
*              LISTPOS=TAIL                                           * 00287800
*                  This option has meaning as follows:                * 00287900
*                                                                     * 00288000
*                                                                     * 00288100
*                  o   If LISTNUM is specified and ENTRYKEY is not,   * 00288200
*                      then the designated entry or position is the   * 00288300
*                      tail of the list.                              * 00288400
*                                                                     * 00288500
*                  o   If ENTRYKEY is specified, the designated entry * 00288600
*                      or position is the tail of the sublist         * 00288700
*                      containing entries with a matching key.        * 00288800
*                                                                     * 00288900
*                                                                     * 00289000
*                                                                     * 00289100
*                                                                     * 00289200
*                                                                     * 00289300
*                                                                     * 00289400
*                                                                     * 00289500
*                                                                     * 00289600
*          [ENTRYKEY=xentrykey|NO_ENTRYKEY                          * 00289700
*              is the name (RS-type), or address in register          * 00289800
*              (2)-(12), of an optional 16 character input that       * 00289900
*              specifies the key to be used in conjunction with       * 00290000
*              LISTNUM and LISTPOS to designate an exact list entry   * 00290100
*              or position, or the key to be used in conjunction with * 00290200
*              LISTNUM to designate a sublist.                        * 00290300
*                                                                     * 00290400
*              ENTRYKEY may only be specified for structures that     * 00290500
*              support keyed entries, and may be used as follows:     * 00290600
*                                                                     * 00290700
*                                                                     * 00290800
*              o   To indicate by key which entry on the list         * 00290900
*                  specified by LISTNUM is to be the source of a READ * 00291000
*                  or MOVE request, the target of a DELETE request,   * 00291100
*                  or of a WRITE request when an ENTRYTYPE of ANY or  * 00291200
*                  OLD is specified, or the starting point for a      * 00291300
*                  READ_LIST request.  Except for a WRITE or MOVE     * 00291400
*                  request with ENTRYTYPE=ANY specified, if no such   * 00291500
*                  keyed entry exists on the list then the request    * 00291600
*                  may be failed, dependent upon the value specified  * 00291700
*                  for KEYREQTYPE.  LISTPOS resolves conflicts when   * 00291800
*                  multiple entries with the same key reside on the   * 00291900
*                  list.                                              * 00292000
*                                                                     * 00292100
*              o   To designate a position on the list specified by   * 00292200
*                  LISTNUM for entry creation on WRITE requests when  * 00292300
*                  an ENTRYTYPE of ANY or NEW is also specified.  If  * 00292400
*                  there exists a sublist of one or more entries with * 00292500
*                  a matching key then the created entry is           * 00292600
*                  positioned at the head or tail of the sublist, as  * 00292700
*                  specified by LISTPOS.  If all existing list        * 00292800
*                  entries have a key greater than that specified by  * 00292900
*                  ENTRYKEY then the created entry is positioned at   * 00293000
*                  the head of the list.  Similarly, if the specified * 00293100
*                  ENTRYKEY exceeds all the list entry keys then the  * 00293200
*                  created entry is positioned at the tail of the     * 00293300
*                  list.  If none of the list entries has a matching  * 00293400
*                  key then the created entry is positioned in the    * 00293500
*                  list according to the appropriate key sequence.    * 00293600
*                                                                     * 00293700
*              o   In conjunction with LISTNUM to designate a         * 00293800
*                  particular sublist.                                * 00293900
*                                                                     * 00294000
*                                                                     * 00294100
*                                                                     * 00294200
*              ENTRYKEY is required on READ_EMCONTROLS and            * 00294300
*              MONITOR_SUBLIST requests.                              * 00294400
*                                                                     * 00294500
*              ENTRYKEY is optional on READ, MOVE, DELETE, READ_LIST, * 00294600
*              and WRITE requests when the structure supports keyed   * 00294700
*              entries, and is mutually exclusive with all other      * 00294800
*              request types.  It is always mutually exclusive with   * 00294900
*              ENTRYNAME and KEYCOMP.                                 * 00295000
*                                                                     * 00295100
*              When ENTRYKEY is permissable but not specified then    * 00295200
*              key is not a criteria for selecting an entry for       * 00295300
*              processing or a list position for entry creation.      * 00295400
*              Furthermore, if the structure supports keyed entries   * 00295500
*              and ENTRYKEY is not specified, then for occasions      * 00295600
*              where a list entry is created the key assigned the     * 00295700
*              created entry defaults as follows:                     * 00295800
*                                                                     * 00295900
*                                                                     * 00296000
*              o   to all binary zeros when LISTPOS=HEAD is           * 00296100
*                  specified.                                         * 00296200
*                                                                     * 00296300
*              o   to all binary ones when LISTPOS=TAIL is specified. * 00296400
*                                                                     * 00296500
*                                                                     * 00296600
*                                                                     * 00296700
*              DEFAULT: NO_ENTRYKEY                                   * 00296800
*                                                                     * 00296900
*                                                                     * 00297000
*              [KEYREQTYPE=EQUAL|LESSOREQUAL|GREATEROREQUAL]]       * 00297100
*                  is an optional keyword input which specifies how   * 00297200
*                  an existing keyed list entry is located when an    * 00297300
*                  entry is read, written, moved, or deleted.         * 00297400
*                                                                     * 00297500
*                  KEYREQTYPE is optional when ENTRYKEY is specified  * 00297600
*                  on READ, MOVE, DELETE, and READ_LIST requests, and * 00297700
*                  on WRITE requests when an ENTRYTYPE of OLD or ANY  * 00297800
*                  is also specified.  KEYREQTYPE is mutually         * 00297900
*                  exclusive with all other request types, and is     * 00298000
*                  also mutually exclusive with ENTRYID and           * 00298100
*                  LOCBYCURSOR.                                       * 00298200
*                                                                     * 00298300
*                  DEFAULT: EQUAL                                     * 00298400
*                                                                     * 00298500
*                                                                     * 00298600
*                  KEYREQTYPE=EQUAL                                   * 00298700
*                      A list entry must have the specified entry     * 00298800
*                      key.                                           * 00298900
*                                                                     * 00299000
*                      If no such keyed entry exists on the list then * 00299100
*                      the request will be failed or an entry will be * 00299200
*                      allocated, depending on the other options      * 00299300
*                      specifed.                                      * 00299400
*                                                                     * 00299500
*                                                                     * 00299600
*                  KEYREQTYPE=LESSOREQUAL                             * 00299700
*                      A list entry must have an entry key less than  * 00299800
*                      or equal to the specified value.               * 00299900
*                                                                     * 00300000
*                      If no entries on the list have an entry key    * 00300100
*                      value less than or equal to the specified      * 00300200
*                      value the request will be failed or an entry   * 00300300
*                      will be allocated, depending on the other      * 00300400
*                      options specifed.                              * 00300500
*                                                                     * 00300600
*                      If no entries on the list have an entry key    * 00300700
*                      value equal to the specified value, but        * 00300800
*                      entries exists with an entry key value less    * 00300900
*                      than the specified value then the entry with   * 00301000
*                      the largest entry key value less than the      * 00301100
*                      specified value is selected.  When multiple    * 00301200
*                      entries have the same entry key value LISTPOS  * 00301300
*                      is used to resolve whether the first or last   * 00301400
*                      entry with the entry key value is selected.    * 00301500
*                                                                     * 00301600
*                                                                     * 00301700
*                  KEYREQTYPE=GREATEROREQUAL                          * 00301800
*                      A list entry must have an entry key greater    * 00301900
*                      than or equal to the specified value.          * 00302000
*                                                                     * 00302100
*                      If no entries on the list have an entry key    * 00302200
*                      value greater than or equal to the specified   * 00302300
*                      value the request will be failed or an entry   * 00302400
*                      will be allocated, depending on the other      * 00302500
*                      options specifed.                              * 00302600
*                                                                     * 00302700
*                      If no entries on the list have an entry key    * 00302800
*                      value equal to the specified value, but        * 00302900
*                      entries exists with an entry key value greater * 00303000
*                      than the specified value then the entry with   * 00303100
*                      the smallest entry key value greater than the  * 00303200
*                      specified value is selected.  When multiple    * 00303300
*                      entries have the same entry key value LISTPOS  * 00303400
*                      is used to resolve whether the first or last   * 00303500
*                      entry with the entry key value is selected.    * 00303600
*                                                                     * 00303700
*                                                                     * 00303800
*                                                                     * 00303900
*                                                                     * 00304000
*                                                                     * 00304100
*                                                                     * 00304200
*                                                                     * 00304300
*                                                                     * 00304400
*          [AUTHCOMP=xauthcomp|NO_AUTHCOMP                          * 00304500
*              is the name (RS-type), or address in register          * 00304600
*              (2)-(12), of an optional 16 character input which      * 00304700
*              specifies a value to be compared to the list authority * 00304800
*              value for the designated list.                         * 00304900
*                                                                     * 00305000
*              For WRITE_LCONTROLS requests, if the specified         * 00305100
*              comparitive list authority fails to equal the list     * 00305200
*              authority value for the designated list then the       * 00305300
*              IXLLIST operation is terminated with no resultant      * 00305400
*              change to the structure, and indicative return and     * 00305500
*              reason codes are provided to the invoker.  For all     * 00305600
*              other requests, if the condition specified by          * 00305700
*              AUTHCOMPTYPE is not met then the IXLLIST operation is  * 00305800
*              terminated with no resultant change to the structure,  * 00305900
*              and indicative return and reason codes are provided to * 00306000
*              the invoker.                                           * 00306100
*                                                                     * 00306200
*              AUTHCOMP may only be specified when LISTNUM is also    * 00306300
*              specified.  AUTHCOMP is optional on READ, READ_LIST,   * 00306400
*              READ_MULT, WRITE, WRITE_LCONTROLS, MOVE, DELETE,       * 00306500
*              DELETE_MULT, and DELETE_ENTRYLIST requests and is      * 00306600
*              mutually exclusive with all other request types.       * 00306700
*                                                                     * 00306800
*              For WRITE_LCONTROLS requests, if AUTHCOMP is not       * 00306900
*              specified then a default of binary zeros will be used  * 00307000
*              for the authority comparison.  For all other request   * 00307100
*              types, if AUTHCOMP is not specified then an authority  * 00307200
*              comparison will not be performed.                      * 00307300
*                                                                     * 00307400
*              For all request types other than WRITE_LCONTROLS the   * 00307500
*              AUTHCOMP keyword is only meaningful for list           * 00307600
*              structures allocated on level 1 or greater coupling    * 00307700
*              facilities.                                            * 00307800
*              DEFAULT: NO_AUTHCOMP                                   * 00307900
*                                                                     * 00308000
*                                                                     * 00308100
*              [AUTHCOMPTYPE=EQUAL|LESSOREQUAL]]                    * 00308200
*                  is an optional keyword input which specifies how   * 00308300
*                  the list authority comparison is to be performed.  * 00308400
*                                                                     * 00308500
*                  AUTHCOMPTYPE may only be specified when LISTNUM    * 00308600
*                  and AUTHCOMP are also specified.  AUTHCOMPTYPE is  * 00308700
*                  optional on READ, READ_LIST, READ_MULT, WRITE,     * 00308800
*                  MOVE, DELETE, DELETE_MULT, and DELETE_ENTRYLIST    * 00308900
*                  requests and is mutually exclusive with all other  * 00309000
*                  request types.                                     * 00309100
*                                                                     * 00309200
*                  the AUTHCOMPTYPE keyword is only meaningful for    * 00309300
*                  list structures allocated on level 1 or greater    * 00309400
*                  coupling facilities.                               * 00309500
*                                                                     * 00309600
*                  DEFAULT: EQUAL                                     * 00309700
*                                                                     * 00309800
*                                                                     * 00309900
*                  AUTHCOMPTYPE=EQUAL                                 * 00310000
*                      The list authority for the list specified by   * 00310100
*                      LISTNUM must be equal to the value specified   * 00310200
*                      for AUTHCOMP.                                  * 00310300
*                                                                     * 00310400
*                                                                     * 00310500
*                  AUTHCOMPTYPE=LESSOREQUAL                           * 00310600
*                      The list authority for the list specified by   * 00310700
*                      LISTNUM must be less than or equal to the      * 00310800
*                      value specified for AUTHCOMP.                  * 00310900
*                                                                     * 00311000
*                                                                     * 00311100
*                                                                     * 00311200
*                                                                     * 00311300
*                                                                     * 00311400
*                                                                     * 00311500
*                                                                     * 00311600
*                                                                     * 00311700
*          [NEWAUTH=xnewauth|NO_NEWAUTH]]                           * 00311800
*              is the name (RS-type), or address in register          * 00311900
*              (2)-(12), of an optional 16 character input which      * 00312000
*              specifies a new value to be established as the list    * 00312100
*              authority of the designated list.  If NEWAUTH is not   * 00312200
*              specified the list authority for the designated list   * 00312300
*              will remain unchanged.                                 * 00312400
*                                                                     * 00312500
*              NEWAUTH may only be specified when LISTNUM is also     * 00312600
*              specified.  NEWAUTH is optional on READ, WRITE,        * 00312700
*              WRITE_LCONTROLS, MOVE, and DELETE requests and is      * 00312800
*              mutually exclusive with all other request types.       * 00312900
*                                                                     * 00313000
*              Note: The default list authority for all lists when    * 00313100
*              the structure is allocated is binary zeros.            * 00313200
*              DEFAULT: NO_NEWAUTH                                    * 00313300
*                                                                     * 00313400
*                                                                     * 00313500
*                                                                     * 00313600
*                                                                     * 00313700
*                                                                     * 00313800
*                                                                     * 00313900
*      [ENTRYID=xentryid|NO_ENTRYID]                                * 00314000
*          is the name (RS-type), or address in register (2)-(12), of * 00314100
*          an optional 12 character input specifying the list entry   * 00314200
*          identifier of the entry to be processed.                   * 00314300
*                                                                     * 00314400
*          ENTRYID may be specified to uniquely identify the source   * 00314500
*          of a READ or MOVE request, the target of a WRITE or DELETE * 00314600
*          request, or the starting point of a READ_LIST request.     * 00314700
*                                                                     * 00314800
*          At least one of ENTRYID, ENTRYNAME, LISTNUM, and           * 00314900
*          LOCBYCURSOR must be specified for READ, MOVE, DELETE, and  * 00315000
*          READ_LIST requests, and for WRITE requests when an         * 00315100
*          ENTRYTYPE of ANY or OLD is also specified.  It is mutually * 00315200
*          exclusive with all other request types.                    * 00315300
*                                                                     * 00315400
*          ENTRYID and LOCBYCURSOR are mutually exclusive.  ENTRYID   * 00315500
*          is mutually exclusive with ENTRYNAME and ENTRYKEY, except  * 00315600
*          on WRITE and MOVE requests when ENTRYTYPE=ANY is           * 00315700
*          specified.  In these cases, if both ENTRYID and one of     * 00315800
*          ENTRYNAME or ENTRYKEY are specified then ENTRYID is used   * 00315900
*          as the criteria to determine if the list entry already     * 00316000
*          exists.                                                    * 00316100
*                                                                     * 00316200
*          Similarly, ENTRYID is mutually exclusive with LISTPOS,     * 00316300
*          except on WRITE and MOVE requests when ENTRYTYPE=ANY is    * 00316400
*          specified.                                                 * 00316500
*                                                                     * 00316600
*          DEFAULT: NO_ENTRYID                                        * 00316700
*                                                                     * 00316800
*                                                                     * 00316900
*                                                                     * 00317000
*                                                                     * 00317100
*      [ENTRYNAME=xentryname|NO_ENTRYNAME]                          * 00317200
*          is the name (RS-type), or address in register (2)-(12), of * 00317300
*          an optional 16 character input specifying the list entry   * 00317400
*          name of the entry to be processed, or the name to be       * 00317500
*          assigned a newly created entry.                            * 00317600
*                                                                     * 00317700
*          ENTRYNAME may be specified to uniquely identify the source * 00317800
*          of a READ or MOVE request, the target of a WRITE or DELETE * 00317900
*          request, or the starting point of a READ_LIST request, and * 00318000
*          specifies the name to be assigned a newly created entry on * 00318100
*          WRITE and MOVE requests.                                   * 00318200
*                                                                     * 00318300
*          ENTRYNAME may only be specified for structures that        * 00318400
*          support named entries.  At least one of ENTRYNAME,         * 00318500
*          ENTRYID, LISTNUM, and LOCBYCURSOR must be specified for    * 00318600
*          READ, MOVE, DELETE, and READ_LIST requests, and for WRITE  * 00318700
*          requests when an ENTRYTYPE of ANY or OLD is also           * 00318800
*          specified.  If the structure supports named entries then   * 00318900
*          ENTRYNAME is required for MOVE requests when ENTRYTYPE=ANY * 00319000
*          is specified, and for WRITE requests when an ENTRYTYPE of  * 00319100
*          ANY or NEW is specified.  It is mutually exclusive with    * 00319200
*          all other request types.                                   * 00319300
*                                                                     * 00319400
*          ENTRYNAME is mutually exclusive with ENTRYID and           * 00319500
*          LOCBYCURSOR, except on WRITE and MOVE requests when        * 00319600
*          ENTRYTYPE=ANY is specified.  In these cases, if both are   * 00319700
*          specified then ENTRYID is used as the criteria to          * 00319800
*          determine if the list entry already exists, while          * 00319900
*          ENTRYNAME specifies the name to be assigned to any newly   * 00320000
*          created entry.  The name must be unique within the         * 00320100
*          structure for the request to complete successfully.        * 00320200
*                                                                     * 00320300
*          Similarly, ENTRYNAME is mutually exclusive with LISTPOS,   * 00320400
*          except on WRITE requests when an ENTRYTYPE of ANY or NEW   * 00320500
*          is specified.  When ENTRYTYPE=ANY is specified, if ENTRYID * 00320600
*          is not also specified then ENTRYNAME supercedes LISTPOS in * 00320700
*          determining if the list entry already exists.  Regardless  * 00320800
*          of whether or not ENTRYID is also specified, ENTRYNAME     * 00320900
*          specifies the name to be assigned to any newly created     * 00321000
*          entry.                                                     * 00321100
*                                                                     * 00321200
*          ENTRYNAME is always mutually exclusive with ENTRYKEY,      * 00321300
*          MOVETOKEY, KEYCOMP, and LISTKEYTYPE values of MOVE,        * 00321400
*          CREATE, and ANY.                                           * 00321500
*                                                                     * 00321600
*          DEFAULT: NO_ENTRYNAME                                      * 00321700
*                                                                     * 00321800
*                                                                     * 00321900
*                                                                     * 00322000
*                                                                     * 00322100
*      [LOCBYCURSOR]                                                  * 00322200
*          Keyword specifying that the list cursor should be used to  * 00322300
*          locate the entry to be processed.                          * 00322400
*                                                                     * 00322500
*          The list cursor must be initialized by specifying          * 00322600
*          UPDATECURSOR=YES on a prior request before the LOCBYCURSOR * 00322700
*          option is used.  If the list entry which the list cursor   * 00322800
*          points at is deleted or moved to another list, then the    * 00322900
*          list cursor will be reset to binary zeros.                 * 00323000
*                                                                     * 00323100
*          At least one of LOCBYCURSOR, LISTNUM, ENTRYID, and         * 00323200
*          ENTRYNAME must be specified for READ_LIST, MOVE, and       * 00323300
*          DELETE requests, and for WRITE requests when an ENTRYTYPE  * 00323400
*          of ANY or OLD is specified.  LOCBYCURSOR is mutually       * 00323500
*          exclusive with all other request types.  LOCBYCURSOR is    * 00323600
*          mutually exclusive with ENTRYID.  LOCBYCURSOR is mutually  * 00323700
*          exclusive with ENTRYKEY, ENTRYNAME, and LISTPOS, except on * 00323800
*          WRITE requests with ENTRYTYPE values of ANY or NEW.        * 00323900
*                                                                     * 00324000
*          When LOCBYCURSOR is specified, LISTNUM is required.        * 00324100
*          DEFAULT: NO_LOCBYCURSOR                                    * 00324200
*                                                                     * 00324300
*                                                                     * 00324400
*                                                                     * 00324500
*                                                                     * 00324600
*      [UPDATECURSOR=NO|YES                                         * 00324700
*          is an optional keyword input which indicates whether the   * 00324800
*          list cursor for the list specified by LISTNUM, or for the  * 00324900
*          list containing the entry specified by ENTRYID or          * 00325000
*          ENTRYNAME, should be updated if the request is successful. * 00325100
*                                                                     * 00325200
*          UPDATECURSOR=YES is optional on READ, WRITE, MOVE, and     * 00325300
*          DELETE requests and is mutually exclusive with all other   * 00325400
*          request types.  UPDATECURSOR=NO may be specified with all  * 00325500
*          requests.                                                  * 00325600
*                                                                     * 00325700
*          DEFAULT: NO                                                * 00325800
*                                                                     * 00325900
*                                                                     * 00326000
*          [UPDATECURSOR=NO]                                          * 00326100
*              Indicates that the list cursor is not to be updated.   * 00326200
*                                                                     * 00326300
*                                                                     * 00326400
*          [UPDATECURSOR=YES                                          * 00326500
*              Indicates that the list cursor is to be updated if the * 00326600
*              request is successful.                                 * 00326700
*                                                                     * 00326800
*              If the list entry specified on the request exists,     * 00326900
*              then the list cursor for the list on which the entry   * 00327000
*              resides is updated before the list entry is processed  * 00327100
*              for the request.  If a new list entry is allocated for * 00327200
*              the request, then the list cursor for the list on      * 00327300
*              which the entry is allocated is updated.               * 00327400
*                                                                     * 00327500
*              The CURSORUPDTYPE keyword controls how the list cursor * 00327600
*              is updated.                                            * 00327700
*                                                                     * 00327800
*                                                                     * 00327900
*              [CURSORUPDTYPE=NEXT|NEXTCOND|CURRENT|CURRENTCOND]]   * 00328000
*                                                                     * 00328100
*                  is an optional keyword input which indicates how   * 00328200
*                  the list cursor is to be updated when              * 00328300
*                  UPDATECURSOR=YES is specified.                     * 00328400
*                                                                     * 00328500
*                  The CURSORUPDTYPE values of NEXTCOND, CURRENT, and * 00328600
*                  CURRENTCOND are only meaningful for list           * 00328700
*                  structures allocated on level 1 or greater         * 00328800
*                  coupling facilities.                               * 00328900
*                                                                     * 00329000
*                  DEFAULT: NEXT                                      * 00329100
*                                                                     * 00329200
*                                                                     * 00329300
*                  CURSORUPDTYPE=NEXT                                 * 00329400
*                      Indicates that the list cursor is to be        * 00329500
*                      updated to point to the list entry preceding   * 00329600
*                      or following the entry processed for the       * 00329700
*                      request.                                       * 00329800
*                                                                     * 00329900
*                      For MOVE requests specifying DATAOPER=WRITE    * 00330000
*                      and ENTRYTYPE=ANY which result in the creation * 00330100
*                      of a new entry the cursor for the list         * 00330200
*                      specified by MOVETOLIST is updated and the     * 00330300
*                      direction of the cursor update depends on the  * 00330400
*                      value specified for MOVETOPOS.  For all other  * 00330500
*                      requests the cursor for the list on which the  * 00330600
*                      designated entry resides before the request is * 00330700
*                      processed is updated and the direction of the  * 00330800
*                      cursor update depends on the value specified   * 00330900
*                      for LISTPOS or LISTDIR.                        * 00331000
*                                                                     * 00331100
*                                                                     * 00331200
*                  CURSORUPDTYPE=NEXTCOND                             * 00331300
*                      Indicates that if the list cursor points to    * 00331400
*                      the entry processed for the request, and the   * 00331500
*                      entry is deleted or moved to another list then * 00331600
*                      the cursor is to be updated to point to the    * 00331700
*                      preceding or following list entry, depending   * 00331800
*                      on the list cursor direction.                  * 00331900
*                                                                     * 00332000
*                      If the entry is the last entry on the list and * 00332100
*                      the list cursor direction is set to a          * 00332200
*                      head-to-tail direction, or the entry is the    * 00332300
*                      first entry on the list and the list cursor    * 00332400
*                      direction is set to a tail-to-head direction   * 00332500
*                      then the list cursor will be reset to binary   * 00332600
*                      zeros.                                         * 00332700
*                                                                     * 00332800
*                      The list cursor direction may be set by        * 00332900
*                      specifying SETCURSOR on a WRITE_LCONTROLS      * 00333000
*                      request.                                       * 00333100
*                                                                     * 00333200
*                                                                     * 00333300
*                  CURSORUPDTYPE=CURRENT                              * 00333400
*                      Indicates that the list cursor is to be set to * 00333500
*                      point to the entry processed for the request.  * 00333600
*                                                                     * 00333700
*                      If the entry is deleted or moved to another    * 00333800
*                      list then the list cursor will be reset to     * 00333900
*                      binary zeros.                                  * 00334000
*                                                                     * 00334100
*                                                                     * 00334200
*                  CURSORUPDTYPE=CURRENTCOND                          * 00334300
*                      Indicates that if the list cursor does not     * 00334400
*                      point to an entry then it is to be updated to  * 00334500
*                      point to the entry processed for the request.  * 00334600
*                                                                     * 00334700
*                      If the entry is deleted or moved to another    * 00334800
*                      list then the list cursor will remain binary   * 00334900
*                      zeros.                                         * 00335000
*                                                                     * 00335100
*                                                                     * 00335200
*                                                                     * 00335300
*                                                                     * 00335400
*                                                                     * 00335500
*                                                                     * 00335600
*                                                                     * 00335700
*                                                                     * 00335800
*                                                                     * 00335900
*                                                                     * 00336000
*      [LISTDIR=TOTAIL|TOHEAD]                                      * 00336100
*          is an optional keyword input which indicates how the list  * 00336200
*          cursor is to be updated when UPDATECURSOR=YES is specified * 00336300
*          with CURSORUPDTYPE=NEXT, or the direction of processing    * 00336400
*          when traversing a given list for a READ_LIST request.      * 00336500
*                                                                     * 00336600
*          LISTDIR is optional on READ_LIST requests and when         * 00336700
*          UPDATECURSOR=YES with CURSORUPDTYPE=NEXT is specified, and * 00336800
*          is mutually exclusive with all other request types.        * 00336900
*          LISTDIR=TOHEAD is mutually exclusive with LISTPOS=HEAD,    * 00337000
*          and LISTDIR=TOTAIL is mutually exclusive with              * 00337100
*          LISTPOS=TAIL.                                              * 00337200
*                                                                     * 00337300
*          When not specified, LISTDIR defaults as follows:           * 00337400
*                                                                     * 00337500
*                                                                     * 00337600
*          o   To TOTAIL when LISTPOS is not specified, and when      * 00337700
*              LISTPOS=HEAD is specified.                             * 00337800
*                                                                     * 00337900
*          o   To TOHEAD when LISTPOS=TAIL is specified.              * 00338000
*                                                                     * 00338100
*                                                                     * 00338200
*                                                                     * 00338300
*          DEFAULT: TOTAIL                                            * 00338400
*                                                                     * 00338500
*                                                                     * 00338600
*          LISTDIR=TOTAIL                                             * 00338700
*              For READ_LIST requests, indicates that processing      * 00338800
*              should begin at the designated entry and proceed       * 00338900
*              toward the tail of the list.                           * 00339000
*                                                                     * 00339100
*              When UPDATECURSOR=YES is specified with                * 00339200
*              CURSORUPDTYPE=NEXT, indicates that the list cursor is  * 00339300
*              to be updated to point to the list entry following the * 00339400
*              entry processed for the request.  If the list cursor   * 00339500
*              points to the last entry on the list then it will be   * 00339600
*              reset to binary zeros.                                 * 00339700
*                                                                     * 00339800
*                                                                     * 00339900
*          LISTDIR=TOHEAD                                             * 00340000
*              For READ_LIST requests, indicates that processing      * 00340100
*              should begin at the designated entry and proceed       * 00340200
*              toward the head of the list.                           * 00340300
*                                                                     * 00340400
*              When UPDATECURSOR=YES is specified, indicates that the * 00340500
*              list cursor is to be updated to point to the list      * 00340600
*              entry preceding the entry processed for the request.   * 00340700
*              If the list cursor points to the first entry on the    * 00340800
*              list then it will be reset to binary zeros.            * 00340900
*                                                                     * 00341000
*                                                                     * 00341100
*                                                                     * 00341200
*                                                                     * 00341300
*                                                                     * 00341400
*                                                                     * 00341500
*      [LISTKEYTYPE=NOLISTKEY|MOVE|CREATE|ANY]                      * 00341600
*          is an optional keyword input which indicates the           * 00341700
*          conditions where the entry key for the designated list     * 00341800
*          entry will be set to the current list key value.           * 00341900
*                                                                     * 00342000
*          The entry key for a list entry may be set to the current   * 00342100
*          list key value when the list entry is created or moved.    * 00342200
*          The list key and maximum list key values may be set by     * 00342300
*          using the WRITE_LCONTROLS request.                         * 00342400
*                                                                     * 00342500
*          LISTKEYTYPE is optional on WRITE and MOVE requests, and is * 00342600
*          mutually exclusive with all other request types.           * 00342700
*          LISTKEYTYPE is only meaningful for structures which        * 00342800
*          support entries with keys.                                 * 00342900
*                                                                     * 00343000
*          The LISTKEYTYPE values of MOVE, CREATE, and ANY are        * 00343100
*          mutually exclusive with the ENTRYNAME key and are only     * 00343200
*          meaningful for list structures allocated on level 1 or     * 00343300
*          greater coupling facilities.                               * 00343400
*                                                                     * 00343500
*          DEFAULT: NOLISTKEY                                         * 00343600
*                                                                     * 00343700
*                                                                     * 00343800
*          [LISTKEYTYPE=NOLISTKEY]                                    * 00343900
*              Indicates that the entry key for the designated list   * 00344000
*              entry is not to be set to the current list key value   * 00344100
*              under any conditions.  If the list entry is created or * 00344200
*              moved and the structure supports entries with keys     * 00344300
*              then the other keywords specified will determine the   * 00344400
*              resultant entry key value.                             * 00344500
*                                                                     * 00344600
*                                                                     * 00344700
*          [LISTKEYTYPE=MOVE                                          * 00344800
*              Indicates that the entry key for the designated list   * 00344900
*              entry is to be set to the current list key value if    * 00345000
*              the entry is moved by this request.  If the list entry * 00345100
*              is created and the structure supports entries with     * 00345200
*              keys then the other keywords specified will determine  * 00345300
*              the resultant entry key value.                         * 00345400
*                                                                     * 00345500
*                                                                     * 00345600
*              [LISTKEYINC=xlistkeyinc|NO_LISTKEYINC]]              * 00345700
*                  is the name (RS-type), or address in register      * 00345800
*                  (2)-(12), of an optional fullword input which      * 00345900
*                  specifies a value to be added to the list key      * 00346000
*                  after the entry key is set to the list key value.  * 00346100
*                                                                     * 00346200
*                  If the entry key is not set to the list key value  * 00346300
*                  then the list key value will not be changed.  If   * 00346400
*                  the result of adding the value specified by        * 00346500
*                  LISTKEYINC to the list key value is greater than   * 00346600
*                  the maximum list key value then the request will   * 00346700
*                  be failed.                                         * 00346800
*                                                                     * 00346900
*                  DEFAULT: NO_LISTKEYINC                             * 00347000
*                                                                     * 00347100
*                                                                     * 00347200
*                                                                     * 00347300
*          [LISTKEYTYPE=CREATE                                        * 00347400
*              Indicates that the entry key for the designated list   * 00347500
*              entry is to be set to the current list key value if    * 00347600
*              the entry is created by this request.  If the list     * 00347700
*              entry is moved and the structure supports entries with * 00347800
*              keys then the other keywords specified will determine  * 00347900
*              the resultant entry key value.                         * 00348000
*                                                                     * 00348100
*                                                                     * 00348200
*              [LISTKEYINC=xlistkeyinc|NO_LISTKEYINC]]              * 00348300
*                  is the name (RS-type), or address in register      * 00348400
*                  (2)-(12), of an optional fullword input which      * 00348500
*                  specifies a value to be added to the list key      * 00348600
*                  after the entry key is set to the list key value.  * 00348700
*                                                                     * 00348800
*                  If the entry key is not set to the list key value  * 00348900
*                  then the list key value will not be changed.  If   * 00349000
*                  the result of adding the value specified by        * 00349100
*                  LISTKEYINC to the list key value is greater than   * 00349200
*                  the maximum list key value then the request will   * 00349300
*                  be failed.                                         * 00349400
*                                                                     * 00349500
*                  DEFAULT: NO_LISTKEYINC                             * 00349600
*                                                                     * 00349700
*                                                                     * 00349800
*                                                                     * 00349900
*          [LISTKEYTYPE=ANY                                           * 00350000
*              Indicates that the entry key for the designated list   * 00350100
*              entry is to be set to the current list key value if    * 00350200
*              the entry is created or moved by this request.         * 00350300
*                                                                     * 00350400
*                                                                     * 00350500
*              [LISTKEYINC=xlistkeyinc|NO_LISTKEYINC]]              * 00350600
*                  is the name (RS-type), or address in register      * 00350700
*                  (2)-(12), of an optional fullword input which      * 00350800
*                  specifies a value to be added to the list key      * 00350900
*                  after the entry key is set to the list key value.  * 00351000
*                                                                     * 00351100
*                  If the entry key is not set to the list key value  * 00351200
*                  then the list key value will not be changed.  If   * 00351300
*                  the result of adding the value specified by        * 00351400
*                  LISTKEYINC to the list key value is greater than   * 00351500
*                  the maximum list key value then the request will   * 00351600
*                  be failed.                                         * 00351700
*                                                                     * 00351800
*                  DEFAULT: NO_LISTKEYINC                             * 00351900
*                                                                     * 00352000
*                                                                     * 00352100
*                                                                     * 00352200
*                                                                     * 00352300
*                                                                     * 00352400
*                                                                     * 00352500
*                                                                     * 00352600
*                                                                     * 00352700
*      [KEYCOMP=xkeycomp|NO_KEYCOMP]                                * 00352800
*          is the name (RS-type), or address in register (2)-(12), of * 00352900
*          an optional 16 character input which specifies a value to  * 00353000
*          be compared to the entry key of the designated list entry. * 00353100
*                                                                     * 00353200
*          If the current list entry key fails to equal the specified * 00353300
*          comparative key value then no processing is performed for  * 00353400
*          the current entry and processing continues with the next   * 00353500
*          entry to be considered.  KEYCOMP is ignored when the       * 00353600
*          structure does not support entry keys.                     * 00353700
*                                                                     * 00353800
*          KEYCOMP is optional for READ_LIST, READ_MULT, DELETE_MULT, * 00353900
*          and DELETE_ENTRYLIST requests and is mutually exclusive    * 00354000
*          with all other request types.  KEYCOMP is mutually         * 00354100
*          exclusive with ENTRYKEY, ENTRYNAME, and with               * 00354200
*          LISTTYPE=NAMELIST.                                         * 00354300
*                                                                     * 00354400
*          KEYCOMP is only meaningful for list structures allocated   * 00354500
*          on level 1 or greater coupling facilities.                 * 00354600
*                                                                     * 00354700
*          DEFAULT: NO_KEYCOMP                                        * 00354800
*                                                                     * 00354900
*                                                                     * 00355000
*                                                                     * 00355100
*                                                                     * 00355200
*      [VERSCOMP=xverscomp|NO_VERSCOMP                              * 00355300
*          is the name (RS-type), or address in register (2)-(12), of * 00355400
*          an optional 8 character input which specifies a value to   * 00355500
*          be compared to the version number of the designated list   * 00355600
*          entry.                                                     * 00355700
*                                                                     * 00355800
*          For READ, WRITE, MOVE, and DELETE requests, VERSCOMPTYPE   * 00355900
*          may optionally be specified,  and if the condition         * 00356000
*          specified by VERSCOMPTYPE is not met then the entire       * 00356100
*          IXLLIST operation is terminated with no resultant change   * 00356200
*          to the structure, and indicative return and reason codes   * 00356300
*          are provided to the invoker.                               * 00356400
*                                                                     * 00356500
*          For READ_LIST, READ_MULT, DELETE_MULT, and                 * 00356600
*          DELETE_ENTRYLIST requests, VERSCOMPTYPE may optionally be  * 00356700
*          specified,  and if the condition specified by VERSCOMPTYPE * 00356800
*          is not met for the current list entry then no processing   * 00356900
*          is performed for the current entry and processing          * 00357000
*          continues with the next entry to be considered.            * 00357100
*                                                                     * 00357200
*          VERSCOMP is mutually exclusive with all other request      * 00357300
*          types.                                                     * 00357400
*          DEFAULT: NO_VERSCOMP                                       * 00357500
*                                                                     * 00357600
*                                                                     * 00357700
*          [VERSCOMPTYPE=EQUAL|LESSOREQUAL]]                        * 00357800
*              is an optional keyword input which specifies how the   * 00357900
*              list entry version number comparison is to be          * 00358000
*              performed.                                             * 00358100
*                                                                     * 00358200
*              VERSCOMPTYPE may only be specified when VERSCOMP is    * 00358300
*              also specified.  VERSCOMPTYPE is optional on READ,     * 00358400
*              READ_LIST, READ_MULT, WRITE, MOVE, DELETE,             * 00358500
*              DELETE_MULT, and DELETE_ENTRYLIST requests and is      * 00358600
*              mutually exclusive with all other request types.       * 00358700
*                                                                     * 00358800
*              VERSCOMPTYPE=LESSOREQUAL is only meaningful for list   * 00358900
*              structures allocated on level 1 or greater coupling    * 00359000
*              facilities.                                            * 00359100
*                                                                     * 00359200
*              DEFAULT: EQUAL                                         * 00359300
*                                                                     * 00359400
*                                                                     * 00359500
*              VERSCOMPTYPE=EQUAL                                     * 00359600
*                  The version number for the list entry must be      * 00359700
*                  equal to the value specified for VERSCOMP.         * 00359800
*                                                                     * 00359900
*                                                                     * 00360000
*              VERSCOMPTYPE=LESSOREQUAL                               * 00360100
*                  The version number for the list entry must be less * 00360200
*                  than or equal to the value specified for VERSCOMP. * 00360300
*                                                                     * 00360400
*                                                                     * 00360500
*                                                                     * 00360600
*                                                                     * 00360700
*                                                                     * 00360800
*                                                                     * 00360900
*                                                                     * 00361000
*                                                                     * 00361100
*      [VERSUPDATE=NONE|INC|DEC|SET]                                * 00361200
*          is an optional keyword input that specifies how the entry  * 00361300
*          version number will be updated or, for those cases where   * 00361400
*          an entry is created, initialized.                          * 00361500
*                                                                     * 00361600
*          VERSUPDATE may optionally be specified on READ, WRITE, and * 00361700
*          MOVE requests.  VERSUPDATE values of INC, DEC, and SET are * 00361800
*          mutually exclusive with all other request types.           * 00361900
*                                                                     * 00362000
*          DEFAULT: NONE                                              * 00362100
*                                                                     * 00362200
*                                                                     * 00362300
*          [VERSUPDATE=NONE]                                          * 00362400
*              The version number is not updated.                     * 00362500
*                                                                     * 00362600
*              On a request that causes an entry to be created the    * 00362700
*              version number for the created entry is set to contain * 00362800
*              all binary zeros.                                      * 00362900
*                                                                     * 00363000
*                                                                     * 00363100
*          [VERSUPDATE=INC]                                           * 00363200
*              The version number will be incremented.                * 00363300
*                                                                     * 00363400
*              On a request that causes an entry to be created the    * 00363500
*              version number for the created entry is set to contain * 00363600
*              all binary zeros, except for the low order bit which   * 00363700
*              is set to one.                                         * 00363800
*                                                                     * 00363900
*                                                                     * 00364000
*          [VERSUPDATE=DEC]                                           * 00364100
*              The version number will be decremented.                * 00364200
*                                                                     * 00364300
*              On a request that causes an entry to be created the    * 00364400
*              version number for the created entry is set to contain * 00364500
*              all binary ones.                                       * 00364600
*                                                                     * 00364700
*                                                                     * 00364800
*          [VERSUPDATE=SET                                            * 00364900
*              The version number will be set to the value specified  * 00365000
*              by NEWVERS, including the case where an entry is       * 00365100
*              created.                                               * 00365200
*                                                                     * 00365300
*                                                                     * 00365400
*              NEWVERS=xnewvers]                                      * 00365500
*                  is the name (RS-type), or address in register      * 00365600
*                  (2)-(12), of a required 8 character input which    * 00365700
*                  specifies a value for the list entry version       * 00365800
*                  number.                                            * 00365900
*                                                                     * 00366000
*                  DEFAULT: NO_NEWVERS                                * 00366100
*                                                                     * 00366200
*                                                                     * 00366300
*                                                                     * 00366400
*                                                                     * 00366500
*                                                                     * 00366600
*                                                                     * 00366700
*                                                                     * 00366800
*                                                                     * 00366900
*      [LOCKINDEX=xlockindex|NO_LOCKINDEX                           * 00367000
*          is the name (RS-type), or address in register (2)-(12), of * 00367100
*          an optional fullword input that contains the index of the  * 00367200
*          lock to be operated on within the lock table for the list  * 00367300
*          structure.                                                 * 00367400
*                                                                     * 00367500
*          When specified, the designated lock will be operated on as * 00367600
*          specified by the LOCKOPER keyword.  The specified value    * 00367700
*          must fall within the range 0 to the number of lock table   * 00367800
*          entries minus one, inclusive.                              * 00367900
*                                                                     * 00368000
*          This keyword is required for LOCK requests, and is         * 00368100
*          optional on READ, WRITE, MOVE, DELETE, READ_LIST,          * 00368200
*          READ_MULT, DELETE_MULT, and DELETE_ENTRYLIST requests.  It * 00368300
*          is mutually exclusive with all other request types and     * 00368400
*          with MODE=ASYNCNORESPONSE.                                 * 00368500
*                                                                     * 00368600
*          DEFAULT: NO_LOCKINDEX                                      * 00368700
*                                                                     * 00368800
*                                                                     * 00368900
*          LOCKOPER=SET|RESET|NOTHELD|HELDBY|TEST|READNEXT          * 00369000
*              is a required keyword input that specifies the type of * 00369100
*              operation to be performed on the specified lock.       * 00369200
*                                                                     * 00369300
*              When contention resolution is not called for the lock  * 00369400
*              operation and any specified list entry operation are   * 00369500
*              processed together as an atomic operation.             * 00369600
*                                                                     * 00369700
*                                                                     * 00369800
*                                                                     * 00369900
*              LOCKOPER=SET                                           * 00370000
*                  When LOCKCOMP is not specified, requests ownership * 00370100
*                  of the lock for the connection specified by        * 00370200
*                  CONTOKEN.                                          * 00370300
*                                                                     * 00370400
*                  When LOCKCOMP is specified, requests that          * 00370500
*                  ownership of the lock be transferred from the      * 00370600
*                  connection specified by LOCKCOMP to the connection * 00370700
*                  specified by CONTOKEN.  Any outstanding requests   * 00370800
*                  awaiting contention resolution on this lock are    * 00370900
*                  ignored.                                           * 00371000
*                                                                     * 00371100
*                                                                     * 00371200
*                  [LOCKMODE=UNCOND|COND]                           * 00371300
*                      is an optional keyword input that specifies    * 00371400
*                      how contention on the lock should be handled.  * 00371500
*                                                                     * 00371600
*                      This keyword is mutually exclusive with        * 00371700
*                      LOCKCOMP.                                      * 00371800
*                                                                     * 00371900
*                      DEFAULT: UNCOND                                * 00372000
*                                                                     * 00372100
*                                                                     * 00372200
*                      LOCKMODE=UNCOND                                * 00372300
*                          Requests that the lock operation be done   * 00372400
*                          unconditionally.                           * 00372500
*                                                                     * 00372600
*                          If the specified lock is held then the     * 00372700
*                          entire IXLLIST operation will be held up   * 00372800
*                          until it the whole operation can be        * 00372900
*                          processed.  If MODE=SYNCSUSPEND was        * 00373000
*                          specified the caller will be suspended     * 00373100
*                          until the lock becomes available,          * 00373200
*                          otherwise the request will be processed    * 00373300
*                          asynchronously and the requestor will be   * 00373400
*                          notified by the means indicated on the     * 00373500
*                          MODE keyword.                              * 00373600
*                                                                     * 00373700
*                                                                     * 00373800
*                      LOCKMODE=COND                                  * 00373900
*                          Requests that the lock operation be done   * 00374000
*                          conditionally.                             * 00374100
*                                                                     * 00374200
*                          If the specified lock is held then the     * 00374300
*                          entire IXLLIST operation will be           * 00374400
*                          terminated with no resultant change to the * 00374500
*                          structure, and indicative return and       * 00374600
*                          reason codes are provided to the invoker.  * 00374700
*                                                                     * 00374800
*                                                                     * 00374900
*                                                                     * 00375000
*                                                                     * 00375100
*                                                                     * 00375200
*                                                                     * 00375300
*                  [LOCKDATA=xlockdata|NO_LOCKDATA]                 * 00375400
*                      is the name (RS-type), or address in register  * 00375500
*                      (2)-(12), of an optional 8 character input     * 00375600
*                      that contains user-specified information to be * 00375700
*                      passed to the NOTIFY exit for the connection   * 00375800
*                      when the lock is held because of this          * 00375900
*                      LOCKOPER=SET request and another connection    * 00376000
*                      issues a request specifying LOCKOPER=SET or    * 00376100
*                      LOCKOPER=NOTHELD with LOCKMODE=UNCOND.         * 00376200
*                                                                     * 00376300
*                      DEFAULT: NO_LOCKDATA                           * 00376400
*                                                                     * 00376500
*                                                                     * 00376600
*                                                                     * 00376700
*              LOCKOPER=RESET                                         * 00376800
*                  When LOCKCOMP is not specified, requests that      * 00376900
*                  ownership of the lock be released if held by the   * 00377000
*                  connection specified by CONTOKEN.                  * 00377100
*                                                                     * 00377200
*                  When LOCKCOMP is specified, requests that          * 00377300
*                  ownership of the lock be released if and only if   * 00377400
*                  its held by the connection specified by LOCKCOMP.  * 00377500
*                                                                     * 00377600
*                  The RESET operation will always be done            * 00377700
*                  unconditionally when LOCKCOMP is not specified and * 00377800
*                  conditionally when LOCKCOMP is specified.          * 00377900
*                                                                     * 00378000
*                                                                     * 00378100
*              LOCKOPER=NOTHELD                                       * 00378200
*                  Requests that the state of the lock be such that   * 00378300
*                  the lock is not held for the duration of the       * 00378400
*                  requested list entry operation.  The lock state    * 00378500
*                  remains unchanged as a result of this option.      * 00378600
*                                                                     * 00378700
*                  This option is mutually exclusive with             * 00378800
*                  REQUEST=LOCK and with LOCKCOMP.                    * 00378900
*                                                                     * 00379000
*                                                                     * 00379100
*                  [LOCKMODE=UNCOND|COND]                           * 00379200
*                      is an optional keyword input that specifies    * 00379300
*                      how contention on the lock should be handled.  * 00379400
*                                                                     * 00379500
*                      For READ, WRITE, MOVE, and DELETE requests the * 00379600
*                      default for LOCKMODE is UNCOND.  For           * 00379700
*                      READ_LIST, READ_MULT, DELETE_MULT, and         * 00379800
*                      DELETE_ENTRYLIST requests the default for      * 00379900
*                      LOCKMODE is COND and the value UNCOND is not   * 00380000
*                      allowed.                                       * 00380100
*                                                                     * 00380200
*                      DEFAULT: UNCOND                                * 00380300
*                                                                     * 00380400
*                                                                     * 00380500
*                      LOCKMODE=UNCOND                                * 00380600
*                          Requests that the lock operation be done   * 00380700
*                          unconditionally.                           * 00380800
*                                                                     * 00380900
*                          If the specified lock is held then the     * 00381000
*                          entire IXLLIST operation will be held up   * 00381100
*                          until it the whole operation can be        * 00381200
*                          processed.  If MODE=SYNCSUSPEND was        * 00381300
*                          specified the caller will be suspended     * 00381400
*                          until the lock becomes available,          * 00381500
*                          otherwise the request will be processed    * 00381600
*                          asynchronously and the requestor will be   * 00381700
*                          notified by the means indicated on the     * 00381800
*                          MODE keyword.                              * 00381900
*                                                                     * 00382000
*                                                                     * 00382100
*                      LOCKMODE=COND                                  * 00382200
*                          Requests that the lock operation be done   * 00382300
*                          conditionally.                             * 00382400
*                                                                     * 00382500
*                          If the specified lock is held then the     * 00382600
*                          entire IXLLIST operation will be           * 00382700
*                          terminated with no resultant change to the * 00382800
*                          structure, and indicative return and       * 00382900
*                          reason codes are provided to the invoker.  * 00383000
*                                                                     * 00383100
*                                                                     * 00383200
*                                                                     * 00383300
*                                                                     * 00383400
*                                                                     * 00383500
*              LOCKOPER=HELDBY                                        * 00383600
*                  When LOCKCOMP is not specified, requests that the  * 00383700
*                  list operation only be performed if the lock is    * 00383800
*                  currently held by the connection specified by      * 00383900
*                  CONTOKEN.                                          * 00384000
*                                                                     * 00384100
*                  When LOCKCOMP is specified, requests that the list * 00384200
*                  operation only be performed if the lock is         * 00384300
*                  currently held by the connection specified by      * 00384400
*                  LOCKCOMP.                                          * 00384500
*                                                                     * 00384600
*                  This option is mutually exclusive with             * 00384700
*                  REQUEST=LOCK.  HELDBY operations must be combined  * 00384800
*                  with a read, write, move, or delete request, and   * 00384900
*                  it is always conditional.                          * 00385000
*                                                                     * 00385100
*                                                                     * 00385200
*              LOCKOPER=TEST                                          * 00385300
*                  When LOCKCOMP is not specified, requests that the  * 00385400
*                  lock be tested to see if it is owned by the        * 00385500
*                  connection specified by CONTOKEN.  If LOCKCOMP is  * 00385600
*                  specified the lock is to be tested to see if is    * 00385700
*                  owned by the LOCKCOMP connection.                  * 00385800
*                                                                     * 00385900
*                  In both cases return code 0 indicates the lock was * 00386000
*                  held, while return code 4 indicates the lock is    * 00386100
*                  either not held or is held by a different          * 00386200
*                  connection.                                        * 00386300
*                                                                     * 00386400
*                  The lock state remains unchanged as a result of    * 00386500
*                  this option.                                       * 00386600
*                                                                     * 00386700
*                  This option may only be specified with             * 00386800
*                  REQUEST=LOCK.  It is mutually exclusive with all   * 00386900
*                  other request types.                               * 00387000
*                                                                     * 00387100
*                                                                     * 00387200
*              LOCKOPER=READNEXT                                      * 00387300
*                  When LOCKCOMP is not specified, requests that the  * 00387400
*                  lock index and connection ID of the owner of the   * 00387500
*                  next owned lock starting at the lock index         * 00387600
*                  specified by LOCKINDEX be returned.                * 00387700
*                                                                     * 00387800
*                  When LOCKCOMP is specified, requests that the lock * 00387900
*                  index of the next lock owned by the LOCKCOMP       * 00388000
*                  connection, starting at the lock index specified   * 00388100
*                  by LOCKINDEX, be returned.                         * 00388200
*                                                                     * 00388300
*                  The lock state remains unchanged as a result of    * 00388400
*                  this option.                                       * 00388500
*                                                                     * 00388600
*                  This option may only be specified with             * 00388700
*                  REQUEST=LOCK.  It is mutually exclusive with all   * 00388800
*                  other request types.                               * 00388900
*                                                                     * 00389000
*                  A request specifying LOCKOPER=READNEXT may         * 00389100
*                  complete prematurely if coupling facility          * 00389200
*                  model-dependent timeout criteria is exceeded.  In  * 00389300
*                  this event indicative return and reason codes are  * 00389400
*                  provided, and the index of the next lock to be     * 00389500
*                  processed is returned in the answer area specified * 00389600
*                  by ANSAREA.  This lock index may be specified on a * 00389700
*                  subsequent LOCKOPER=READNEXT request to resume     * 00389800
*                  processing with the appropriate lock entry.        * 00389900
*                                                                     * 00390000
*                                                                     * 00390100
*                                                                     * 00390200
*                                                                     * 00390300
*                                                                     * 00390400
*                                                                     * 00390500
*          [LOCKCOMP=xlockcomp|NO_LOCKCOMP]]                        * 00390600
*              is the name (RS-type), or address in register          * 00390700
*              (2)-(12), of an optional byte input field containing a * 00390800
*              connection identifier to be verified as the current    * 00390900
*              lock owner as a prerequisite to successful completion  * 00391000
*              of this request.                                       * 00391100
*                                                                     * 00391200
*              When LOCKCOMP is specified the locking operation is    * 00391300
*              always considered to be a conditional operation.  That * 00391400
*              is, if the request experiences lock contention the     * 00391500
*              request will be failed.  The connection identifier is  * 00391600
*              available from the IXLCONN answer area.                * 00391700
*                                                                     * 00391800
*              LOCKCOMP and LOCKMODE are mutually exclusive keywords, * 00391900
*              and LOCKCOMP is mutually exclusive with                * 00392000
*              LOCKOPER=NOTHELD.                                      * 00392100
*                                                                     * 00392200
*              DEFAULT: NO_LOCKCOMP                                   * 00392300
*                                                                     * 00392400
*                                                                     * 00392500
*                                                                     * 00392600
*                                                                     * 00392700
*                                                                     * 00392800
*                                                                     * 00392900
*      [MODE=SYNCSUSPEND|SYNCECB|SYNCEXIT|SYNCTOKEN|ASYNCECB|ASYNCEX * 00393000
*          IT|ASYNCTOKEN|ASYNCNORESPONSE]                            * 00393100
*          is an optional keyword input that specifies whether the    * 00393200
*          request is to be performed synchronously or                * 00393300
*          asynchronously.                                            * 00393400
*                                                                     * 00393500
*          DEFAULT: SYNCSUSPEND                                       * 00393600
*                                                                     * 00393700
*                                                                     * 00393800
*          [MODE=SYNCSUSPEND]                                         * 00393900
*              Indicates that the request will be performed           * 00394000
*              synchronously.  Control is not returned to the caller  * 00394100
*              until request processing is complete and the final     * 00394200
*              disposition determined.                                * 00394300
*                                                                     * 00394400
*              If necessary the caller will be suspended until the    * 00394500
*              request completes.  The caller must be executing in an * 00394600
*              enabled state to use this option.                      * 00394700
*                                                                     * 00394800
*                                                                     * 00394900
*          [MODE=SYNCECB                                              * 00395000
*              Indicates that the request will be attempted           * 00395100
*              synchronously.  If the request can not be completed    * 00395200
*              synchronously control is returned to the caller prior  * 00395300
*              to completion of the request, and the ECB specified by * 00395400
*              REQECB is posted when the request has completed.       * 00395500
*                                                                     * 00395600
*              When MODE=SYNCECB is specified and the request does    * 00395700
*              not complete synchronously latent XES binds to the     * 00395800
*              storage locations specified by BUFFER, BUFLIST,        * 00395900
*              MOSVECTOR, ADJAREA, and ANSAREA persist until the      * 00396000
*              REQECB ECB is posted.                                  * 00396100
*                                                                     * 00396200
*                                                                     * 00396300
*              REQECB=xreqecb]                                        * 00396400
*                  is the name (RS-type), or address in register      * 00396500
*                  (2)-(12), of a required 4 byte input that contains * 00396600
*                  the address of an ECB to be posted when the        * 00396700
*                  request has completed.                             * 00396800
*                                                                     * 00396900
*                  The ECB should be initialized by the requestor     * 00397000
*                  prior to use with this service.  The ECB must      * 00397100
*                  reside either in common storage or in the home     * 00397200
*                  address space that existed at the time the         * 00397300
*                  connection service, IXLCONN, was issued for the    * 00397400
*                  structure.  Any task which waits on the ECB must   * 00397500
*                  have the same home address space as existed when   * 00397600
*                  IXLCONN was issued.                                * 00397700
*                                                                     * 00397800
*                                                                     * 00397900
*                                                                     * 00398000
*          [MODE=SYNCEXIT                                             * 00398100
*              Indicates that the request will be attempted           * 00398200
*              synchronously.  If the request can not be completed    * 00398300
*              synchronously control is returned to the caller prior  * 00398400
*              to completion of the request.  When the request        * 00398500
*              completes the connection's Complete Exit will be       * 00398600
*              called.                                                * 00398700
*                                                                     * 00398800
*              When MODE=SYNCEXIT is specified and the request does   * 00398900
*              not complete synchronously latent XES binds to the     * 00399000
*              storage locations specified by BUFFER, BUFLIST,        * 00399100
*              MOSVECTOR, ADJAREA, and ANSAREA persist until the      * 00399200
*              connection's Complete Exit is called.                  * 00399300
*                                                                     * 00399400
*                                                                     * 00399500
*              [REQDATA=xreqdata|NO_REQDATA]]                       * 00399600
*                  is the name (RS-type), or address in register      * 00399700
*                  (2)-(12), of an optional 8 character input         * 00399800
*                  variable that contains connected user-defined data * 00399900
*                  for the request to be passed to the Complete Exit  * 00400000
*                  when driven.  The contents of REQDATA has no       * 00400100
*                  meaning to the system.                             * 00400200
*                                                                     * 00400300
*                  DEFAULT: NO_REQDATA                                * 00400400
*                                                                     * 00400500
*                                                                     * 00400600
*                                                                     * 00400700
*          [MODE=SYNCTOKEN                                            * 00400800
*              Indicates that the request will be attempted           * 00400900
*              synchronously.  If the request can not be completed    * 00401000
*              synchronously control is returned to the caller prior  * 00401100
*              to completion of the request and a token that uniquely * 00401200
*              identifies the request is returned.                    * 00401300
*                                                                     * 00401400
*              When MODE=SYNCTOKEN is specified and the request does  * 00401500
*              not complete synchronously latent XES binds to the     * 00401600
*              storage locations specified by BUFFER, BUFLIST,        * 00401700
*              MOSVECTOR, ADJAREA, and ANSAREA persist until a        * 00401800
*              subsequent corresponding IXLFCOMP request indicates    * 00401900
*              completion of the original request.                    * 00402000
*                                                                     * 00402100
*                                                                     * 00402200
*              REQTOKEN=xreqtoken]                                    * 00402300
*                  is a required output.  It is the name (RS-type),   * 00402400
*                  or address in register (2)-(12), of a 16 character * 00402500
*                  field into which is stored a token that uniquely   * 00402600
*                  identifies this request.                           * 00402700
*                                                                     * 00402800
*                  This token must be specified on a subsequent       * 00402900
*                  invocation of IXLFCOMP to force completion of the  * 00403000
*                  request and determine its final disposition.       * 00403100
*                                                                     * 00403200
*                                                                     * 00403300
*                                                                     * 00403400
*          [MODE=ASYNCECB                                             * 00403500
*              Indicates that the request is to be initiated and      * 00403600
*              control is to be returned to the caller prior to       * 00403700
*              completion of the request.  When the request completes * 00403800
*              the ECB specified by REQECB will be posted.            * 00403900
*                                                                     * 00404000
*              When MODE=ASYNCECB is specified latent XES binds to    * 00404100
*              the storage locations specified by BUFFER, BUFLIST,    * 00404200
*              MOSVECTOR, ADJAREA, and ANSAREA persist until the      * 00404300
*              REQECB ECB is posted.                                  * 00404400
*                                                                     * 00404500
*                                                                     * 00404600
*              REQECB=xreqecb]                                        * 00404700
*                  is the name (RS-type), or address in register      * 00404800
*                  (2)-(12), of a required 4 byte input that contains * 00404900
*                  the address of an ECB to be posted when the        * 00405000
*                  request has completed.                             * 00405100
*                                                                     * 00405200
*                  The ECB should be initialized by the requestor     * 00405300
*                  prior to use with this service.  The ECB must      * 00405400
*                  reside either in common storage or in the home     * 00405500
*                  address space that existed at the time the         * 00405600
*                  connection service, IXLCONN, was issued for the    * 00405700
*                  structure.  Any task which waits on the ECB must   * 00405800
*                  have the same home address space as existed when   * 00405900
*                  IXLCONN was issued.                                * 00406000
*                                                                     * 00406100
*                                                                     * 00406200
*                                                                     * 00406300
*          [MODE=ASYNCEXIT                                            * 00406400
*              Indicates that the request is to be initiated and      * 00406500
*              control is to be returned to the caller prior to       * 00406600
*              completion of the request.  When the request completes * 00406700
*              the connection's Complete Exit will be called.         * 00406800
*                                                                     * 00406900
*              When MODE=ASYNCEXIT is specified latent XES binds to   * 00407000
*              the storage locations specified by BUFFER, BUFLIST,    * 00407100
*              MOSVECTOR, ADJAREA, and ANSAREA persist until the      * 00407200
*              connection's Complete Exit is called.                  * 00407300
*                                                                     * 00407400
*                                                                     * 00407500
*              [REQDATA=xreqdata|NO_REQDATA]]                       * 00407600
*                  is the name (RS-type), or address in register      * 00407700
*                  (2)-(12), of an optional 8 character input         * 00407800
*                  variable that contains connected user-defined data * 00407900
*                  for the request to be passed to the Complete Exit  * 00408000
*                  when driven.  The contents of REQDATA has no       * 00408100
*                  meaning to the system.                             * 00408200
*                                                                     * 00408300
*                  DEFAULT: NO_REQDATA                                * 00408400
*                                                                     * 00408500
*                                                                     * 00408600
*                                                                     * 00408700
*          [MODE=ASYNCTOKEN                                           * 00408800
*              Indicates that the request is to be initiated, a token * 00408900
*              generated that uniquely identifies the request on this * 00409000
*              system, and control returned to the caller prior to    * 00409100
*              completion of the requested operation.                 * 00409200
*                                                                     * 00409300
*              When MODE=ASYNCTOKEN is specified latent XES binds to  * 00409400
*              the storage locations specified by BUFFER, BUFLIST,    * 00409500
*              MOSVECTOR, ADJAREA, and ANSAREA persist until a        * 00409600
*              subsequent corresponding IXLFCOMP request indicates    * 00409700
*              completion of the original request.                    * 00409800
*                                                                     * 00409900
*                                                                     * 00410000
*              REQTOKEN=xreqtoken]                                    * 00410100
*                  is a required output.  It is the name (RS-type),   * 00410200
*                  or address in register (2)-(12), of a 16 character * 00410300
*                  field into which is stored a token that uniquely   * 00410400
*                  identifies this request.                           * 00410500
*                                                                     * 00410600
*                  This token must be specified on a subsequent       * 00410700
*                  invocation of IXLFCOMP to force completion of the  * 00410800
*                  request and determine its final disposition.       * 00410900
*                                                                     * 00411000
*                                                                     * 00411100
*                                                                     * 00411200
*          [MODE=ASYNCNORESPONSE]                                     * 00411300
*              Indicates that the request is to be initiated and      * 00411400
*              control returned to the caller prior to completion of  * 00411500
*              the requested operation.  No asynchronous request      * 00411600
*              token is returned, hence no external mechanism exists  * 00411700
*              to force completion of the request.                    * 00411800
*                                                                     * 00411900
*              MODE=ASYNCNORESPONSE is mutually exclusive with        * 00412000
*              LOCKINDEX, BUFFER, and BUFLIST.  It is also mutually   * 00412100
*              exclusive with REQUEST=MONITOR_LIST when ACTION=START  * 00412200
*              is specified.  Any request which does not perform a    * 00412300
*              locking operation, does not use a BUFFER area or       * 00412400
*              BUFLIST buffers, and is not a request to start list    * 00412500
*              monitoring may specifiy MODE=ASYNCNORESPONSE.          * 00412600
*                                                                     * 00412700
*                                                                     * 00412800
*                                                                     * 00412900
*                                                                     * 00413000
*                                                                     * 00413100
*                                                                     * 00413200
*      [ANSAREA=xansarea|NO_ANSAREA                                 * 00413300
*          is an optional input.  It is the name (RS-type), or        * 00413400
*          address in register (2)-(12), of a virtual storage area,   * 00413500
*          called the answer area, in which command response          * 00413600
*          information will be placed.  The format of the answer area * 00413700
*          is described by the IXLYLAA mapping macro.                 * 00413800
*                                                                     * 00413900
*          ANSAREA is required when a MODE value of SYNCTOKEN or      * 00414000
*          ASYNCTOKEN is specified.  ANSAREA may be specified in      * 00414100
*          conjunction with any type of IXLLIST request.  Not all     * 00414200
*          fields in the answer area are applicable to all request    * 00414300
*          types.  Request type descriptions indicate what answer     * 00414400
*          area fields are applicable for successful request          * 00414500
*          completion cases.  Return and reason code descriptions     * 00414600
*          indicate what answer area fields are applicable for        * 00414700
*          non-successfully completing requests.                      * 00414800
*                                                                     * 00414900
*          ANSAREA is ignored when MODE=ASYNCNORESPONSE is specified. * 00415000
*                                                                     * 00415100
*          DEFAULT: NO_ANSAREA                                        * 00415200
*                                                                     * 00415300
*                                                                     * 00415400
*          ANSLEN=xanslen]                                            * 00415500
*              is the name (RS-type), or address in register          * 00415600
*              (2)-(12), of a required halfword input that contains   * 00415700
*              the length in bytes of the virtual storage area        * 00415800
*              provided for ANSAREA.                                  * 00415900
*                                                                     * 00416000
*              The length of the answer area is described by the      * 00416100
*              IXLYLAA mapping macro.                                 * 00416200
*                                                                     * 00416300
*              DEFAULT: NO_ANSLEN                                     * 00416400
*                                                                     * 00416500
*                                                                     * 00416600
*                                                                     * 00416700
*                                                                     * 00416800
*                                                                     * 00416900
*                                                                     * 00417000
*      [RETCODE=xretcode]                                             * 00417100
*          is the name (RS-type) of an optional fullword output       * 00417200
*          variable, or register (2)-(12), into which the return code * 00417300
*          is to be copied from GPR 15.                               * 00417400
*                                                                     * 00417500
*                                                                     * 00417600
*                                                                     * 00417700
*                                                                     * 00417800
*      [RSNCODE=xrsncode]                                             * 00417900
*          is the name (RS-type) of an optional fullword output       * 00418000
*          variable, or register (2)-(12), into which the reason code * 00418100
*          is to be copied from GPR 0.                                * 00418200
*                                                                     * 00418300
*                                                                     * 00418400
*                                                                     * 00418500
*                                                                     * 00418600
*      [PLISTVER=xplistver|IMPLIED_VERSION]                         * 00418700
*          is an optional byte input decimal value in the "0-3" range * 00418800
*          that specifies the macro version.  PLISTVER is the only    * 00418900
*          key allowed on the list form of MF and determines which    * 00419000
*          parameter list is generated.  The macro keys associated    * 00419100
*          with each supported version of the macro are listed in     * 00419200
*          MACRO USAGE NOTE 2.  Note that MAX may be specified        * 00419300
*          instead of a number, and the parameter list will be of the * 00419400
*          largest size currently supported. This size may grow from  * 00419500
*          release to release (thus possibly affecting the amount of  * 00419600
*          storage needed by your program).  If your program can      * 00419700
*          tolerate this, IBM recommends that you always specify MAX  * 00419800
*          when creating the list form parameter list as that will    * 00419900
*          ensure that the list form parameter list is always long    * 00420000
*          enough to hold whatever parameters might be specified on   * 00420100
*          the execute form.                                          * 00420200
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00420300
*          default is the lowest version which allows all of the      * 00420400
*          parameters specified on the invocation to be processed.    * 00420500
*                                                                     * 00420600
*                                                                     * 00420700
*                                                                     * 00420800
*                                                                     * 00420900
*      [MF=S|L|E]                                                   * 00421000
*          is an optional keyword input which specifies the macro     * 00421100
*          form.                                                      * 00421200
*          DEFAULT: S                                                 * 00421300
*                                                                     * 00421400
*                                                                     * 00421500
*          [MF=S]                                                     * 00421600
*              specifies the standard form of the macro.  The "S"     * 00421700
*              form generates code to put the parameters into an      * 00421800
*              in-line parameter list and invoke the desired service. * 00421900
*              Full checking for required macro keys is done along    * 00422000
*              with supplying defaults for omitted optional           * 00422100
*              parameters.                                            * 00422200
*                                                                     * 00422300
*          [MF=(L,xmfctrl,xmfattr|0D)]                              * 00422400
*              specifies the list form of the macro.  The "L" form    * 00422500
*              defines an area to be used for the parameter list.     * 00422600
*              Only the PLISTVER key may be specified on the          * 00422700
*              invocation.  All other macro parameters are flagged as * 00422800
*              errors.  If PLISTVER is not specified, the original    * 00422900
*              parameter list definition is used.                     * 00423000
*                                                                     * 00423100
*            ,xmfctrl                                                 * 00423200
*              is a required input.  It is the name of a storage area * 00423300
*              for the parameter list.                                * 00423400
*                                                                     * 00423500
*            ,xmfattr|0D                                            * 00423600
*              is an optional 60 character input string that varies   * 00423700
*              from 1 to 60 characters. Use it to force boundary      * 00423800
*              alignment of the parameter list. Use only 0F or 0D.    * 00423900
*              DEFAULT: 0D which forces the parameter list to a       * 00424000
*              doubleword boundary.                                   * 00424100
*                                                                     * 00424200
*          [MF=(E,xmfctrl,COMPLETE)]                                * 00424300
*              specifies the execute form of the macro.  The "E" form * 00424400
*              generates code to put the parameters into the          * 00424500
*              parameter list specified by xmfctrl and provides full  * 00424600
*              syntax checking with default setting.                  * 00424700
*                                                                     * 00424800
*            ,xmfctrl                                                 * 00424900
*              is a required input.  It is the name (RS-type), or     * 00425000
*              address in register (1)-(12), of a storage area for    * 00425100
*              the parameter list.                                    * 00425200
*                                                                     * 00425300
*            ,COMPLETE                                              * 00425400
*              is an optional keyword input which specifies the       * 00425500
*              degree of macro parameter syntax checking.             * 00425600
*              DEFAULT: COMPLETE                                      * 00425700
*                                                                     * 00425800
*                                                                     * 00425900
*              COMPLETE                                               * 00426000
*                  Checking for required macro keys is done and       * 00426100
*                  defaults are supplied for omitted optional         * 00426200
*                  parameters.                                        * 00426300
*                                                                     * 00426400
*                                                                     * 00426500
*                                                                     * 00426600
*                                                                     * 00426700
*                                                                     * 00426800
*                                                                     * 00426900
*                                                                     * 00427000
*01* RETURN CODES:                                                    * 00427100
*                                                                     * 00427200
*                                                                     * 00427300
*       0         IxlRetCodeOk:  Successful completion.               * 00427400
*                                                                     * 00427500
*                 If a MODE value of ASYNCECB, ASYNCEXIT, ASYNCTOKEN, * 00427600
*                 or ASYNCNORESPONSE was specified then the request   * 00427700
*                 has been successfully initiated.                    * 00427800
*                                                                     * 00427900
*                 If LOCKOPER=TEST was specified then this return     * 00428000
*                 code indicates the lock is held by the connection   * 00428100
*                 specified by CONTOKEN.                              * 00428200
*                                                                     * 00428300
*                                                                     * 00428400
*       4         IxlRetCodeWarning:  Warning.  The request           * 00428500
*                 completed, but with exceptional circumstances.      * 00428600
*                                                                     * 00428700
*                 HEX REASON  MEANING                                 * 00428800
*                 CODE                                                * 00428900
*                                                                     * 00429000
*                                                                     * 00429100
*                 xxxx0402    IxlRsnCodeAsynch:  The request could    * 00429200
*                             not be completed synchronously.  It     * 00429300
*                             will be completed asynchronously.       * 00429400
*                                                                     * 00429500
*                             If MODE=SYNCECB was specified the ECB   * 00429600
*                             specifed for REQECB will be posted when * 00429700
*                             the request has finished.               * 00429800
*                                                                     * 00429900
*                             If MODE=SYNCEXIT was specified the      * 00430000
*                             connection's completion exit will be    * 00430100
*                             given control when the request has      * 00430200
*                             finished.                               * 00430300
*                                                                     * 00430400
*                             If MODE=SYNCTOKEN was specified the     * 00430500
*                             answer area contains an asynchronous    * 00430600
*                             request token which may be used on the  * 00430700
*                             IXLFCOMP macro to determine when the    * 00430800
*                             request has finished.                   * 00430900
*                                                                     * 00431000
*                 xxxx0409    IxlRsnCodeTimeout:  A READ_LIST,        * 00431100
*                             READ_MULT, DELETE_MULT,                 * 00431200
*                             DELETE_ENTRYLIST,  MONITOR_SUBLISTS,    * 00431300
*                             or DEQ_EVENTQ request, or a LOCK        * 00431400
*                             request specifying LOCKOPER=READNEXT    * 00431500
*                             has completed prematurely due to a      * 00431600
*                             model-dependent timeout condition.      * 00431700
*                                                                     * 00431800
*                             For both READ_LIST and READ_MULT, the   * 00431900
*                             number of output elements returned in   * 00432000
*                             the BUFFER area or BUFLIST buffers has  * 00432100
*                             been returned in the answer area.  For  * 00432200
*                             both DELETE_MULT and DELETE_ENTRYLIST,  * 00432300
*                             the number of deleted structure entries * 00432400
*                             has been returned in the answer area.   * 00432500
*                             For both READ_MULT and DELETE_MULT, a   * 00432600
*                             restart token has been returned in the  * 00432700
*                             answer area.  For READ_LIST, the list   * 00432800
*                             entry controls for the first            * 00432900
*                             unprocessed entry in the list sequence  * 00433000
*                             has been returned in the answer area.   * 00433100
*                             For DELETE_ENTRYLIST, the index of the  * 00433200
*                             first unprocessed entry identifier or   * 00433300
*                             name has been returned in the answer    * 00433400
*                             area.  For MONITOR_SUBLISTS, the index  * 00433500
*                             of the first unprocessed IXLYMSRI entry * 00433600
*                             is returned in the answer area.  All    * 00433700
*                             prior IXLYMSRI entries were processed.  * 00433800
*                             For DEQ_EVENTQ, the number of EMCs that * 00433900
*                             were dequeued from the user's event     * 00434000
*                             queue,  and the number of EMCs that     * 00434100
*                             remain on the user's event queue after  * 00434200
*                             dequeueing those EMCs, are returned in  * 00434300
*                             the answer area.  For LOCK, the index   * 00434400
*                             of the next lock to be processed has    * 00434500
*                             been returned in the answer area.       * 00434600
*                                                                     * 00434700
*                 xxxx040D    IxlRsnCodeBadReadAdjData:  A READ,      * 00434800
*                             MOVE, DELETE, READ_LIST, or READ_MULT   * 00434900
*                             specified that adjunct data was to be   * 00435000
*                             read, but the storage area provided for * 00435100
*                             ADJDATA is not addressable.  All other  * 00435200
*                             requested data was retrieved.  If       * 00435300
*                             supported and requested, the entry data * 00435400
*                             was retrieved.  If this was a MOVE      * 00435500
*                             request, the entry was moved.  If this  * 00435600
*                             was a DELETE request, the entry was     * 00435700
*                             deleted.                                * 00435800
*                                                                     * 00435900
*                 xxxx040E    IxlRsnCodeLockNotHeld:  A LOCKOPER=TEST * 00436000
*                             request determined the specified lock   * 00436100
*                             was not held for the specified          * 00436200
*                             connection.  The connection ID of the   * 00436300
*                             lock owner is returned in the answer    * 00436400
*                             area.                                   * 00436500
*                                                                     * 00436600
*                 xxxx040F    IxlRsnCodeBufferFull:  A READ_LIST or   * 00436700
*                             READ_MULT request has completed         * 00436800
*                             prematurely due to a buffer full        * 00436900
*                             condition.                              * 00437000
*                                                                     * 00437100
*                             For both READ_LIST and READ_MULT, the   * 00437200
*                             number of output elements returned in   * 00437300
*                             the BUFFER area or BUFLIST buffers has  * 00437400
*                             been returned in the answer area.  For  * 00437500
*                             READ_MULT a restart token has been      * 00437600
*                             returned in the answer area.  For       * 00437700
*                             READ_LIST, the list entry controls for  * 00437800
*                             the first unprocessed entry in the list * 00437900
*                             sequence has been returned in the       * 00438000
*                             answer area.                            * 00438100
*                                                                     * 00438200
*                 xxxx0410    IxlRsnCodeLockCond:  For a              * 00438300
*                             LOCKOPER=HELDBY or LOCKMODE=COND        * 00438400
*                             request, or a request that specified    * 00438500
*                             LOCKCOMP, the request could not be      * 00438600
*                             completed successfully because the      * 00438700
*                             specified lock is not currently held as * 00438800
*                             required.  The connection ID of the     * 00438900
*                             lock owner is returned in the answer    * 00439000
*                             area.                                   * 00439100
*                                                                     * 00439200
*                 xxxx0412    IxlRsnCodeLockHeldBySys:  For a         * 00439300
*                             LOCKOPER=HELDBY or LOCKMODE=COND        * 00439400
*                             request, or a request that specified    * 00439500
*                             LOCKCOMP, the request could not be      * 00439600
*                             completed successfully because the      * 00439700
*                             specified lock is not currently held as * 00439800
*                             required.  For a LOCKOPER=READNEXT or   * 00439900
*                             LOCKOPER=TEST request, the lock is not  * 00440000
*                             generally available.  The lock is not   * 00440100
*                             held by any connection, but instead is  * 00440200
*                             held by the system.                     * 00440300
*                                                                     * 00440400
*                 xxxx041F    IxlRsnCodeNoLocksHeld:  An IXLLIST      * 00440500
*                             request specifying LOCKOPER=READNEXT    * 00440600
*                             found no locks held from the LOCKINDEX  * 00440700
*                             lock to the end of the lock table.      * 00440800
*                                                                     * 00440900
*                                                                     * 00441000
*                                                                     * 00441100
*                                                                     * 00441200
*       8         IxlRetCodeParmError:  Error.  The request cannot be * 00441300
*                 completed due to a user error.                      * 00441400
*                                                                     * 00441500
*                 HEX REASON  MEANING                                 * 00441600
*                 CODE                                                * 00441700
*                                                                     * 00441800
*                                                                     * 00441900
*                 xxxx0801    IxlRsnCodeBadParmlist:  Either unable   * 00442000
*                             to read or unable to write to the       * 00442100
*                             IXLLIST parameter list.                 * 00442200
*                                                                     * 00442300
*                 xxxx0804    IxlRsnCodeBadVersion#:  The version     * 00442400
*                             number in the parameter list is not     * 00442500
*                             valid.  This usually indicates that the * 00442600
*                             level of the macro is incompatible with * 00442700
*                             the level of the XES service code.      * 00442800
*                                                                     * 00442900
*                 xxxx080A    IxlRsnCodeBadContoken:  Invalid         * 00443000
*                             contoken specified.  The contoken is    * 00443100
*                             invalid for one of the following        * 00443200
*                             reasons:  disconnect has occurred, EOT  * 00443300
*                             of the connector's task, input contoken * 00443400
*                             is not the contoken returned from       * 00443500
*                             IXLCONN, the request was issued outside * 00443600
*                             the connector's address space, or the   * 00443700
*                             contoken has been invalidated for       * 00443800
*                             rebuild.                                * 00443900
*                                                                     * 00444000
*                 xxxx0822    IxlRsnCodeBadReadType:  An IXLLIST      * 00444100
*                             READ_LIST or READ_MULT request          * 00444200
*                             specified that either entry or adjunct  * 00444300
*                             data was to be returned, but the list   * 00444400
*                             structure does not contain the          * 00444500
*                             requested component.  No data is        * 00444600
*                             returned.                               * 00444700
*                                                                     * 00444800
*                 xxxx0824    IxlRsnCodeWrongStrType:  The connection * 00444900
*                             specified by CONTOKEN is not to a list  * 00445000
*                             structure.                              * 00445100
*                                                                     * 00445200
*                 xxxx0825    IxlRsnCodeNoEntry:  The designated list * 00445300
*                             entry or event monitor controls object  * 00445400
*                             does not exist, hence request           * 00445500
*                             processing was suppressed.  For a       * 00445600
*                             READ_EMCONTROLS request,  the           * 00445700
*                             designated event monitor controls (EMC) * 00445800
*                             does not exist for the user for the     * 00445900
*                             designated sublist.                     * 00446000
*                                                                     * 00446100
*                 xxxx082B    IxlRsnCodeBadIDIndex:  An invalid value * 00446200
*                             was specified for either FIRSTELEM,     * 00446300
*                             LASTELEM,  STARTINDEX,  or ENDINDEX.    * 00446400
*                             When FIRSTELEM or LASTELEM is invalid,  * 00446500
*                             the index of the first entry identifier * 00446600
*                             or name which was not processed is      * 00446700
*                             returned in the answer area.            * 00446800
*                                                                     * 00446900
*                 xxxx0833    IxlRsnCodeBadPgblAttr:  The storage     * 00447000
*                             area specified by BUFFER, or one of the * 00447100
*                             buffers in the BUFLIST list is          * 00447200
*                             specified as being pageable, but is     * 00447300
*                             not.                                    * 00447400
*                                                                     * 00447500
*                 xxxx0834    IxlRsnCodeBadNonPgblAttr:  The storage  * 00447600
*                             area specified by BUFFER, or one of the * 00447700
*                             buffers in the BUFLIST list is          * 00447800
*                             specified as being non-pageable, but is * 00447900
*                             either pageable or not addressable.     * 00448000
*                                                                     * 00448100
*                 xxxx0835    IxlRsnCodeBadDataAddr:  The storage     * 00448200
*                             area specified by BUFFER or one of the  * 00448300
*                             buffers in the BUFLIST list is not      * 00448400
*                             addressable.                            * 00448500
*                                                                     * 00448600
*                 xxxx0836    IxlRsnCodeBadRealAddr:  Real storage    * 00448700
*                             addresses were provided in a BUFLIST    * 00448800
*                             list.  One of the buffers is not        * 00448900
*                             addressable in central storage.         * 00449000
*                                                                     * 00449100
*                 xxxx0837    IxlRsnCodeBadWriteAdjData:  A WRITE or  * 00449200
*                             MOVE request specified that adjunct     * 00449300
*                             data was to be written, but the         * 00449400
*                             provided storage area for adjunct data  * 00449500
*                             is not addressable.  No entry data was  * 00449600
*                             written.                                * 00449700
*                                                                     * 00449800
*                 xxxx0838    IxlRsnCodeBadAnsArea:  The storage area * 00449900
*                             specified by ANSAREA and ANSLEN is not  * 00450000
*                             addressable.                            * 00450100
*                                                                     * 00450200
*                 xxxx0839    IxlRsnCodeBadReqTokenArea:  The storage * 00450300
*                             area specified by REQTOKEN is not       * 00450400
*                             addressable.                            * 00450500
*                                                                     * 00450600
*                 xxxx083D    IxlRsnCodeBadAnsLen:  The length of the * 00450700
*                             answer area, as specified by ANSLEN, is * 00450800
*                             not sufficient for providing answer     * 00450900
*                             area information.                       * 00451000
*                                                                     * 00451100
*                 xxxx083E    IxlRsnCodeMaxListKey:  The request      * 00451200
*                             failed while trying to assign the list  * 00451300
*                             key to an entry which was being created * 00451400
*                             or moved.  Either the list key or the   * 00451500
*                             list key plus the list key increment    * 00451600
*                             value is greater than the maximum list  * 00451700
*                             key.                                    * 00451800
*                                                                     * 00451900
*                 xxxx083F    IxlRsnCodeBadEntryVersion:  The entry   * 00452000
*                             designated by the specified list entry  * 00452100
*                             controls has a version number which     * 00452200
*                             does not meet the criteria specified by * 00452300
*                             VERSCOMP and VERSCOMPTYPE.  The list    * 00452400
*                             entry controls for the entry are        * 00452500
*                             returned in the answer area.            * 00452600
*                                                                     * 00452700
*                 xxxx0840    IxlRsnCodeBadEntryList:  The entry      * 00452800
*                             designated by the specified list entry  * 00452900
*                             controls does not reside on the list    * 00453000
*                             specified by LISTNUM.  The list entry   * 00453100
*                             controls for the entry are returned in  * 00453200
*                             the answer area.                        * 00453300
*                                                                     * 00453400
*                 xxxx0841    IxlRsnCodeBadEntryName:  The name       * 00453500
*                             specified by ENTRYNAME is not a unique  * 00453600
*                             name within the structure, and hence    * 00453700
*                             entry creation was suppressed.          * 00453800
*                                                                     * 00453900
*                 xxxx0842    IxlRsnCodePersistentLock:  A request    * 00454000
*                             specifying an unconditional SET or      * 00454100
*                             NOTHELD lock operation failed because   * 00454200
*                             the lock was held by a connection in    * 00454300
*                             the failed persistent state.  The       * 00454400
*                             connection ID of the lock owner is      * 00454500
*                             returned in the answer area.            * 00454600
*                                                                     * 00454700
*                 xxxx0843    IxlRsnCodeBadEntryID:  An entry         * 00454800
*                             corresponding to an identifier or name  * 00454900
*                             in either ENTRYIDLIST or NAMELIST,      * 00455000
*                             respectively, does not exist.  The      * 00455100
*                             index of the offending entry identifier * 00455200
*                             or name was returned in the answer      * 00455300
*                             area.                                   * 00455400
*                                                                     * 00455500
*                 xxxx0845    IxlRsnCodeNoNames:  A list entry was    * 00455600
*                             designated by entry name, but the       * 00455700
*                             structure does not support entry names. * 00455800
*                                                                     * 00455900
*                 xxxx0846    IxlRsnCodeBadLockIndex:  The specified  * 00456000
*                             LOCKINDEX exceeds the size of the lock  * 00456100
*                             table for the structure.                * 00456200
*                                                                     * 00456300
*                 xxxx0847    IxlRsnCodeBadListNumber:  The specified * 00456400
*                             LISTNUM exceeds the number of lists for * 00456500
*                             the structure.                          * 00456600
*                                                                     * 00456700
*                 xxxx0848    IxlRsnCodeBadReset:  LOCKOPER=RESET was * 00456800
*                             specified for a lock not currently held * 00456900
*                             by the invoker.                         * 00457000
*                                                                     * 00457100
*                 xxxx0849    IxlRsnCodeBadResToken:  The specified   * 00457200
*                             restart token is not valid.  Possible   * 00457300
*                             causes are:                             * 00457400
*                                                                     * 00457500
*                                                                     * 00457600
*                             o   The specified token does not        * 00457700
*                                 correspond to a previous            * 00457800
*                                 prematurely-completed request.      * 00457900
*                                                                     * 00458000
*                             o   The user specified RESTOKEN when    * 00458100
*                                 EXTRESTOKEN was required.           * 00458200
*                                                                     * 00458300
*                             o   The user specified EXTRESTOKEN when * 00458400
*                                 RESTOKEN was required.              * 00458500
*                                                                     * 00458600
*                                                                     * 00458700
*                                                                     * 00458800
*                 xxxx084A    IxlRsnCodeNoKeys:  The structure does   * 00458900
*                             not support the use of entry keys,  and * 00459000
*                             the request either was a request type   * 00459100
*                             that requires the structure to support  * 00459200
*                             entry keys,  or designated a sublist,   * 00459300
*                             list entry, or list position by list    * 00459400
*                             number and entry key.                   * 00459500
*                                                                     * 00459600
*                 xxxx084B    IxlRsnCodeNoLocks:  A locking operation * 00459700
*                             was requested, but the structure does   * 00459800
*                             not contain a lock table.               * 00459900
*                                                                     * 00460000
*                 xxxx084E    IxlRsnCodeBadMoveToList:  An IXLLIST    * 00460100
*                             request specified a list number for     * 00460200
*                             MOVETOLIST that exceeds the number of   * 00460300
*                             lists defined for the structure.        * 00460400
*                                                                     * 00460500
*                 xxxx0851    IxlRsnCodeNoSuspenDisable:  A request   * 00460600
*                             specifying MODE=SYNCSUSPEND failed      * 00460700
*                             because the caller is disabled and      * 00460800
*                             cannot be suspended.                    * 00460900
*                                                                     * 00461000
*                 xxxx0852    IxlRsnCodeNoListVector:  A              * 00461100
*                             MONITOR_LIST, MONITOR_SUBLIST,          * 00461200
*                             MONITOR_EVENTQ, or MONITOR_SUBLISTS     * 00461300
*                             request failed because no local vector  * 00461400
*                             for monitoring list headers and/or      * 00461500
*                             event queues exists for this            * 00461600
*                             connection.  Either a list notification * 00461700
*                             vector for monitoring list headers      * 00461800
*                             and/or event queues was not requested   * 00461900
*                             for this connection, or the list        * 00462000
*                             notification vector has been deleted.   * 00462100
*                                                                     * 00462200
*                 xxxx0853    IxlRsnCodeInvListVIndex:  An invalid    * 00462300
*                             vector index was specified on a         * 00462400
*                             MONITOR_LIST or MONITOR_EVENTQ request  * 00462500
*                             with ACTION=START specified.            * 00462600
*                                                                     * 00462700
*                 xxxx0854    IxlRsnCodeBadLockComp:  The value       * 00462800
*                             specified for LOCKCOMP is not a valid   * 00462900
*                             connection identifier.                  * 00463000
*                                                                     * 00463100
*                 xxxx0859    IxlRsnCodeBadListAuth:  The authority   * 00463200
*                             value for the specified list does not   * 00463300
*                             meet the criteria specified by AUTHCOMP * 00463400
*                             and AUTHCOMPTYPE.  The current list     * 00463500
*                             authority and description are returned  * 00463600
*                             in the answer area.                     * 00463700
*                                                                     * 00463800
*                 xxxx0864    IxlRsnCodeBadBufSize:  The specified    * 00463900
*                             buffer area is not large enough to      * 00464000
*                             contain the data being read.  For READ, * 00464100
*                             READ_LIST, READ_MULT, MOVE, and DELETE  * 00464200
*                             requests the answer area contains the   * 00464300
*                             list entry controls for the first list  * 00464400
*                             entry selected for processing.  For     * 00464500
*                             DEQ_EVENTQ, the specified buffer area   * 00464600
*                             must be 4096 bytes in length.           * 00464700
*                                                                     * 00464800
*                 xxxx0865    IxlRsnCodeBadBufSpec:  The buffer       * 00464900
*                             specification is in error.  Refer to    * 00465000
*                             the BUFFER or BUFLIST specification     * 00465100
*                             requirements.                           * 00465200
*                                                                     * 00465300
*                 xxxx0866    IxlRsnCodeBadBufKey:  The buffer        * 00465400
*                             storage key is incorrect.  For requests * 00465500
*                             which write CF data the data cannot be  * 00465600
*                             fetched.  For requests which read CF    * 00465700
*                             data the data cannot be stored.         * 00465800
*                                                                     * 00465900
*                 xxxx0867    IxlRsnCodeBadBufList:  The storage area * 00466000
*                             specified by BUFLIST is not             * 00466100
*                             addressable.                            * 00466200
*                                                                     * 00466300
*                 xxxx086A    IxlRsnCodeBadElemNum:  The value        * 00466400
*                             specified for ELEMNUM is not valid.     * 00466500
*                                                                     * 00466600
*                 xxxx0880    IxlRsnCodeBadMosvector:  The storage    * 00466700
*                             area specified by MOSVECTOR is not      * 00466800
*                             addressable.                            * 00466900
*                                                                     * 00467000
*                 xxxx0887    IxlRsnCodeBadExtResToken:  The          * 00467100
*                             specified extended restart token is not * 00467200
*                             valid.  The specified token refers to   * 00467300
*                             an older instance of the target         * 00467400
*                             structure.                              * 00467500
*                                                                     * 00467600
*                                                                     * 00467700
*                                                                     * 00467800
*                                                                     * 00467900
*       C         IxlRetCodeEnvError:  Environmental problem.         * 00468000
*                                                                     * 00468100
*                 HEX REASON  MEANING                                 * 00468200
*                 CODE                                                * 00468300
*                                                                     * 00468400
*                                                                     * 00468500
*                 xxxx0C06    IxlRsnCodeNoConn:  No connectivity to   * 00468600
*                             the list structure.  This may occur due * 00468700
*                             to operator commands such as VARY PATH  * 00468800
*                             OFFLINE or CONFIG CHP OFFLINE or        * 00468900
*                             hardware errors such as facility or     * 00469000
*                             path failures.  The contoken will be    * 00469100
*                             invalidated.  The user should           * 00469200
*                             disconnect or rebuild.                  * 00469300
*                                                                     * 00469400
*                 xxxx0C13    IxlRsnCodeReqPurged:  Prior to          * 00469500
*                             completion of the request, the request  * 00469600
*                             was purged.  Reasons: the connector     * 00469700
*                             failed, the connector disconnected, the * 00469800
*                             requestor failed, the request was       * 00469900
*                             purged by IXLPURGE, or requests were    * 00470000
*                             purged when the connector provided an   * 00470100
*                             IXLEERSP response for the Rebuild Stop  * 00470200
*                             or Rebuild Cleanup event.               * 00470300
*                                                                     * 00470400
*                 xxxx0C14    IxlRsnCodeStatusUnknown:  The IXLLIST   * 00470500
*                             request has completed, but the final    * 00470600
*                             disposition of the request can not be   * 00470700
*                             determined.                             * 00470800
*                                                                     * 00470900
*                 xxxx0C17    IxlRsnCodeStrFull:  Either the          * 00471000
*                             structure is full and cannot accomodate * 00471100
*                             the creation of more entries, as was    * 00471200
*                             requested or required by a WRITE or     * 00471300
*                             MOVE request,  or the structure is full * 00471400
*                             and cannot accommodate the creation of  * 00471500
*                             more event monitor controls (EMCs) on a * 00471600
*                             MONITOR_SUBLIST or MONITOR_SUBLISTS     * 00471700
*                             request.  For a MONITOR_SUBLISTS        * 00471800
*                             request,  the index of the IXLYMSRI     * 00471900
*                             entry which experienced the structure   * 00472000
*                             full condition is returned in the       * 00472100
*                             answer area.                            * 00472200
*                                                                     * 00472300
*                 xxxx0C18    IxlRsnCodeListFull:  The list           * 00472400
*                             designated as the target of a MOVE      * 00472500
*                             request, or as the target for entry     * 00472600
*                             creation on a WRITE or MOVE request,    * 00472700
*                             cannot accomodate more entries.         * 00472800
*                                                                     * 00472900
*                 xxxx0C25    IxlRsnCodeStrFailure:  Prior to         * 00473000
*                             completion of the request, the list     * 00473100
*                             structure failed.                       * 00473200
*                                                                     * 00473300
*                 xxxx0C68    IxlRsnCodeBadReqCFLevel:  The request   * 00473400
*                             type is not permitted for the level of  * 00473500
*                             coupling facility in which the target   * 00473600
*                             structure is allocated.                 * 00473700
*                                                                     * 00473800
*                 xxxx0CA0    IxlRsnCodeQuiescedSuspendFail:  The     * 00473900
*                             request is failed because the structure * 00474000
*                             is quiesced for a system-managed        * 00474100
*                             process and SUSPEND=FAIL is specified   * 00474200
*                             on the IXLCONN.                         * 00474300
*                                                                     * 00474400
*                 FFFFFFFF    IxlRsnCodeNotAvailable:  XES functions  * 00474500
*                             are not available.  This can be because * 00474600
*                             the hardware necessary to provide XES   * 00474700
*                             functions is not present.               * 00474800
*                                                                     * 00474900
*                                                                     * 00475000
*                                                                     * 00475100
*                                                                     * 00475200
*       10        IxlRetCodeCompError:  XES processing failure.  The  * 00475300
*                 state of the involved structure and the disposition * 00475400
*                 of the request are unpredictable.                   * 00475500
*                                                                     * 00475600
*                                                                     * 00475700
*                                                                     * 00475800
*01* REASON CODES:                                                    * 00475900
*                                                                     * 00476000
*       Reason codes, as appropriate, are defined under their         * 00476100
*       corresponding return code.  Reason code and return code       * 00476200
*       constants are defined within the IXLYCON macro.               * 00476300
*                                                                     * 00476400
*01* MODULE TYPE:  ASSEM MACRO                                        * 00476500
*                                                                     * 00476600
*02*   PROCESSOR:  ASSEM                                              * 00476700
*                                                                     * 00476800
*01* COMPONENT:  SCIXL                                                * 00476900
*                                                                     * 00477000
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00477100
*                                                                     * 00477200
*01* ABEND CODES:  None.                                              * 00477300
*                                                                     * 00477400
*01* MACRO USAGE NOTES:                                               * 00477500
*                                                                     * 00477600
*                                                                     * 00477700
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00477800
*        global macro variable.  Any value other than 'NO' will       * 00477900
*        result in the macro expansion being printed.  The default is * 00478000
*        'YES'.  The following examples illustrate how the ZPRINT     * 00478100
*        variable should be set.                                      * 00478200
*                                                                     * 00478300
*                    GBLC &ZPRINT                                     * 00478400
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00478500
*                                                                     * 00478600
*                                                                     * 00478700
*    2.  The  IXLLIST macro supports multiple versions. The macro key * 00478800
*        list  below  contains the version level in which the key was * 00478900
*        first  introduced.  Positionals  are  identified by the word * 00479000
*        'Positional'  followed by the numeric value of its position. * 00479100
*        Nested  positionals  are  preceded  by their outer key.  The * 00479200
*        lowest value represents the original version and the highest * 00479300
*        value  represents  the  most  recent  version of the IXLLIST * 00479400
*        macro.    When  specifying  PLISTVER,  be sure that it is at * 00479500
*        least  as high as the highest version number of all the keys * 00479600
*        being used.                                                  * 00479700
*                                                                     * 00479800
*        VERSION   KEY                                                * 00479900
*                                                                     * 00480000
*              0      ACTION                                          * 00480100
*                     ADJAREA                                         * 00480200
*                     ANSAREA                                         * 00480300
*                     ANSLEN                                          * 00480400
*                     AUTHCOMP                                        * 00480500
*                     AUTHCOMPTYPE                                    * 00480600
*                     BUFADDRTYPE                                     * 00480700
*                     BUFALET                                         * 00480800
*                     BUFFER                                          * 00480900
*                     BUFINCRNUM                                      * 00481000
*                     BUFLIST                                         * 00481100
*                     BUFNUM                                          * 00481200
*                     BUFSIZE                                         * 00481300
*                     BUFSTGKEY                                       * 00481400
*                     CONTOKEN                                        * 00481500
*                     CURSORUPDTYPE                                   * 00481600
*                     DATAOPER                                        * 00481700
*                     DRIVEEXIT                                       * 00481800
*                     ELEMNUM                                         * 00481900
*                     ENTRYID                                         * 00482000
*                     ENTRYKEY                                        * 00482100
*                     ENTRYNAME                                       * 00482200
*                     ENTRYTYPE                                       * 00482300
*                     FIRSTELEM                                       * 00482400
*                     KEYREQTYPE                                      * 00482500
*                     LASTELEM                                        * 00482600
*                     LISTDESC                                        * 00482700
*                     LISTDIR                                         * 00482800
*                     LISTKEYTYPE                                     * 00482900
*                     LISTLIMIT                                       * 00483000
*                     LISTNUM                                         * 00483100
*                     LISTPOS                                         * 00483200
*                     LISTTYPE                                        * 00483300
*                     LOCBYCURSOR                                     * 00483400
*                     LOCKCOMP                                        * 00483500
*                     LOCKDATA                                        * 00483600
*                     LOCKINDEX                                       * 00483700
*                     LOCKMODE                                        * 00483800
*                     LOCKOPER                                        * 00483900
*                     MODE                                            * 00484000
*                     MOVETOKEY                                       * 00484100
*                     MOVETOLIST                                      * 00484200
*                     MOVETOPOS                                       * 00484300
*                     NEWAUTH                                         * 00484400
*                     NEWVERS                                         * 00484500
*                     PAGEABLE                                        * 00484600
*                     REQDATA                                         * 00484700
*                     REQECB                                          * 00484800
*                     REQID                                           * 00484900
*                     REQTOKEN                                        * 00485000
*                     REQUEST                                         * 00485100
*                     RESTOKEN                                        * 00485200
*                     TYPE                                            * 00485300
*                     UPDATECURSOR                                    * 00485400
*                     VECTORINDEX                                     * 00485500
*                     VERSCOMP                                        * 00485600
*                     VERSCOMPTYPE                                    * 00485700
*                     VERSUPDATE                                      * 00485800
*              1      KEYCOMP                                         * 00485900
*                     LISTKEY                                         * 00486000
*                     LISTKEYINC                                      * 00486100
*                     MAXLISTKEY                                      * 00486200
*                     SETCURSOR                                       * 00486300
*              2      ENDINDEX                                        * 00486400
*                     MOSVECTOR                                       * 00486500
*                     STARTINDEX                                      * 00486600
*                     UNC                                             * 00486700
*              3      EXTRESTOKEN                                     * 00486800
*                                                                     * 00486900
*    3.  The  allowed  usage  of  some keys which may be specified on * 00487000
*        both   version  zero  and  version  one  invocations  varies * 00487100
*        dependent upon the version.                                  * 00487200
*                                                                     * 00487300
*        Key            Version  Notes                                * 00487400
*        -------------  -------  -----------------------------------  * 00487500
*        AUTHCOMP       0        May be specified on WRITE_LCONTROLS  * 00487600
*                                requests.                            * 00487700
*                       1        May be specified on READ, WRITE,     * 00487800
*                                MOVE, DELETE, READ_LIST, READ_MULT,  * 00487900
*                                DELETE_MULT, DELETE_ENTRYLIST, and   * 00488000
*                                WRITE_LCONTROLS requests.            * 00488100
*        AUTHCOMPTYPE   0        EQUAL may be specified.              * 00488200
*                       1        EQUAL or LESSOREQUAL may be          * 00488300
*                                specified.                           * 00488400
*        CURSORUPDTYPE  0        NEXT may be specified.               * 00488500
*                       1        NEXT, NEXTCOND, CURRENT, or          * 00488600
*                                CURRENTCOND may be specified.        * 00488700
*        LISTKEYTYPE    0        NOLISTKEY may be specified.          * 00488800
*                       1        NOLISTKEY, MOVE, CREATE, or ANY may  * 00488900
*                                be specified.                        * 00489000
*        NEWAUTH        0        May be specified on WRITE_LCONTROLS  * 00489100
*                                requests.                            * 00489200
*                       1        May be specified on READ, WRITE,     * 00489300
*                                MOVE, DELETE, and WRITE_LCONTROLS    * 00489400
*                                requests.                            * 00489500
*        VERSCOMPTYPE   0        EQUAL may be specified.              * 00489600
*                       1        EQUAL or LESSOREQUAL may be          * 00489700
*                                specified.                           * 00489800
*                                                                     * 00489900
*    4.  The  following  request types generate version two parameter * 00490000
*        lists:                                                       * 00490100
*                                                                     * 00490200
*                                                                     * 00490300
*        o   MONITOR_SUBLIST                                          * 00490400
*                                                                     * 00490500
*        o   MONITOR_SUBLISTS                                         * 00490600
*                                                                     * 00490700
*        o   MONITOR_EVENTQ                                           * 00490800
*                                                                     * 00490900
*        o   READ_EMCONTROLS                                          * 00491000
*                                                                     * 00491100
*        o   READ_EQCONTROLS                                          * 00491200
*                                                                     * 00491300
*        o   DEQ_EVENTQ                                               * 00491400
*                                                                     * 00491500
*                                                                     * 00491600
*                                                                     * 00491700
*                                                                     * 00491800
*                                                                     * 00491900
*01* CHANGE ACTIVITY:                                                 * 00492000
*                                                                     * 00492100
*   Flag LineItem  FMID    Date   ID    Comment                       * 00492200
*                                                                     * 00492300
*    $L0=SYSLKSMG HBB5510 900904 PD00AO:  Locking support             * 00492400
*    $P1=PIG0178  HBB5510 910621 PD00AO:  Allow PAGEABLE with         * 00492500
*                                         REQUEST=READ_LCONTROLS      * 00492600
*    $P2=PIG0358  HBB5510 910923 PD00AO:  Add missing assembler       * 00492700
*                                         labels                      * 00492800
*    $P3=PIG0503  HBB5510 920106 PD00AO:  Update RSN code             * 00492900
*                                         documentation               * 00493000
*    $P4=PIG0536  HBB5510 920106 PD00AO:  Fix NO_xxx defaults         * 00493100
*    $D1=DIG0018  HBB5510 921105 PD00AO:  >4K support                 * 00493200
*    $P5=PIG0925  HBB5510 930114 PD00AO:  Fix keyword checking        * 00493300
*    $D2=DIG0041  HBB5510 930114 PD00AO:  Lock RT support             * 00493400
*    $D3=DIG0048  HBB5510 930114 PD00AO:  Miscellaneous changes       * 00493500
*    $P6=PIG1070  HBB5510 930201 PD00AO:  Fix KeyReqType checking     * 00493600
*    $D4=DIG0020  HBB5510 930325 PD00AO:  Serialized list support     * 00493700
*    $D5=DIG0130  HBB5510 930325 PD00AO:  Architecture changes        * 00493800
*    $P7=PIG1557  HBB5510 930520 PD00AO:  Changes for BufSize checks  * 00493900
*    $D6=DIG0130  HBB5510 930520 PD00AO:  Architecture changes        * 00494000
*    $P8=PIG1857  HBB5510 930607 PD00AO:  Fix DBS setup               * 00494100
*    $P9=PIG1867  HBB5510 930609 PD00AO:  Translate ListDir/ListPos   * 00494200
*    $D7=DIG0158  HBB5510 930802 PD00AO:  Architecture changes        * 00494300
*    $D8=DIG0163  HBB5510 930802 PD00AO:  Architecture changes        * 00494400
*    $PA=PIG3142  HBB5510 931108 PD00AO:  Variable default for        * 00494500
*                                         LockMode                    * 00494600
*    $PB=PIG3233  HBB5510 931108 PD00AO:  Fix ASM BufSize offset      * 00494700
*    $PC=PIG3684  HBB5510 931201 PD00AO:  Expand RsnCode descriptions * 00494800
*    $PD=PIG3706  HBB5510 931119 PD00AO:  Expand RsnCode descriptions * 00494900
*    $PE=PIG5178  HBB5510 940314 PD00AO:  Performance                 * 00495000
*    $PF=PIG5236  HBB5510 940314 PD00FR:  Document DIE mode           * 00495100
*                                         restriction                 * 00495200
*    $D9=DN70050  HBB5520 940520 PD00AO:  Logger support for SP520    * 00495300
*    $PG=PN70807  HBB5520 940602 PD00AO:  Remove AuthCompType default * 00495400
*    $DA=DN70050  HBB5520 940624 PD00AO:  Logger support for SP520    * 00495500
*    $PH=PN71141  HBB5520 940718 PD00AO:  Change KeyComp behavior     * 00495600
*    $DB=DN70083  HBB5520 940720 PD00AO:  IXLALTER support            * 00495700
*    $PI=PIG5560  HBB5510 940801 PD00AO:  Fix ASYNCxxxx assembler     * 00495800
*    $DC=DN70092  HBB5520 940801 PD00AO:  256-element support         * 00495900
*    $PJ=PN71438  HBB5520 940901 PD00AO:  Fix documentation           * 00496000
*    $PK=PN71715  HBB5520 941020 PD00LA:  Fix NEWAUTH keyword syntax  * 00496100
*                                         check in assembler          * 00496200
*    $PL=PN71880  HBB5520 941020 PD00LA:  Fix inconsistencies between * 00496300
*                                         AMG and macro code          * 00496400
*                                         generated messages          * 00496500
*    $01=OW15589  HBB5520 950613 PD00FR:  Event monitoring support    * 00496600
*    $02=OW19393  HBB5510 961127 PD00FR:  Storage bind processing     * 00496700
*    $L1=AUTOR    HBB6608 980622 PD00XM:  Add ExtRestoken keyword     * 00496800
*    $L3=AUTOR    HBB6608 980828 PD00MP:  Auto Rebuild support        * 00496900
*    $PM=PWK0251  HBB6608 980828 PD00XM:  Fix reference to            * 00497000
*                                         EXTRESTOKEN                 * 00497100
*    $03=OW39892  HBB6608 010413 PD00BC:  AutoR extension for CICS    * 00497200
****** END OF SPECIFICATIONS *****************************************/ 00497300
*/* TLINE 1 *********************************************************** 00497400
         MACRO                                                          00497500
&XLABEL  IXLLIST &REQUEST=,&TYPE=,&RESTOKEN=,&EXTRESTOKEN=,&ENTRYTYPE=,*00497600
               &ELEMNUM=,&LISTLIMIT=,&LISTDESC=,&LISTKEY=,&MAXLISTKEY=,*00497700
               &SETCURSOR=,&MOVETOLIST=,&MOVETOKEY=,&MOVETOPOS=,       *00497800
               &DATAOPER=,&LISTTYPE=,&FIRSTELEM=,&LASTELEM=,&ACTION=,  *00497900
               &VECTORINDEX=,&DRIVEEXIT=,&UNC=,&STARTINDEX=,&ENDINDEX=,*00498000
               &MOSVECTOR=,&CONTOKEN=,&REQID=,&BUFLIST=,&BUFADDRTYPE=, *00498100
               &PAGEABLE=,&BUFSTGKEY=,&BUFALET=,&BUFNUM=,&BUFINCRNUM=, *00498200
               &BUFFER=,&BUFSIZE=,&ADJAREA=,&LISTNUM=,&LISTPOS=,       *00498300
               &ENTRYKEY=,&KEYREQTYPE=,&AUTHCOMP=,&AUTHCOMPTYPE=,      *00498400
               &NEWAUTH=,&ENTRYID=,&ENTRYNAME=,&UPDATECURSOR=,         *00498500
               &CURSORUPDTYPE=,&LISTDIR=,&LISTKEYTYPE=,&LISTKEYINC=,   *00498600
               &KEYCOMP=,&VERSCOMP=,&VERSCOMPTYPE=,&VERSUPDATE=,       *00498700
               &NEWVERS=,&LOCKINDEX=,&LOCKOPER=,&LOCKMODE=,&LOCKDATA=, *00498800
               &LOCKCOMP=,&MODE=,&REQECB=,&REQDATA=,&REQTOKEN=,        *00498900
               &ANSAREA=,&ANSLEN=,&RETCODE=,&RSNCODE=,&PLISTVER=,&MF=   00499000
.*                                                                      00499100
*                      MACDATE -03/20/01-<3>                            00499200
.*                                                                      00499300
.*******************************************************************    00499400
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00499500
.*******************************************************************    00499600
                      GBLC  &ZPRINT     YES=PRINT NO=NO PRINT           00499700
                      GBLC  &ZTEST      YES=TEST NO=NO TEST             00499800
                      GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX     00499900
.*                                                                      00500000
                      GBLC  &ZIXLLIST   YES=MACRO USED AT LEAST ONCE    00500100
.*******************************************************************    00500200
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00500300
.*******************************************************************    00500400
                      LCLC  &ZMS        ERROR MESSAGE WORK AREA         00500500
                      LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS    00500600
                      LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED      00500700
                      LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR     00500800
                      LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE     00500900
                      LCLA  &ZAWRK      USED AS A WORK AREA             00501000
                      LCLA  &ZASIZ      USED FOR SIZE OF VALUE          00501100
                      LCLA  &ZN         NUMERIC WORK VARIABLE           00501200
                      LCLC  &ZC         CHARACTER WORK VARIABLE         00501300
                      LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE     00501400
                      LCLA  &ZTLA       VALUE TOO LONG VARIABLE         00501500
                      LCLA  &ZMACRET    MACRO RETURN CODE               00501600
&ZMACRET              SETA  0           ASSUME NO ERRORS                00501700
.*                                                                      00501800
                      LCLC  &ZCSYSLIST(255)     NONXKEY, POS ARRAY      00501900
                      LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()      00502000
                      LCLA  &ZPLLEN     PARAMETER LIST LENGTH           00502100
                      LCLC  &ZENDBASEPL         End of base PL          00502200
                      LCLA  &ZPLWORKA   PARAMETER LIST LENGTH           00502300
.*******************************************************************    00502400
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00502500
.*******************************************************************    00502600
                      LCLA  &ZI         INDEX FOR ARRAY                 00502700
                      LCLA  &ZJ         INDEX FOR PARMS                 00502800
                      LCLA  &ZK         INDEX FOR PARSE                 00502900
                      LCLA  &ZLO        LOW RANGE VALUE                 00503000
                      LCLA  &ZHI        HIGH RANGE VALUE                00503100
                      LCLC  &ZW         WORK AREA FOR PARM              00503200
.********************************************************************   00503300
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00503400
.********************************************************************   00503500
                      GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL         00503600
                      GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE  00503700
                      GBLA  &SYSALVL    SYSSTATE ARCHLVL                00503800
.*                                                                      00503900
                      AIF   (K'&SYSASCE GT 0).ZSYS4  SYS STATE DEFINED  00504000
                      AIF   (K'&SYSSPLV GT 0).ZSYS2  SP LEVEL DEFINED   00504100
                      SPLEVEL  TEST                                     00504200
.ZSYS2                ANOP  ,                                           00504300
                      AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1       00504400
                      AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1       00504500
                      SYSSTATE TEST                                     00504600
                      AGO   .ZSYS4                                      00504700
.ZSYS3                ANOP  ,                                           00504800
&SYSASCE              SETC  'P'         ASSUME SYSSTATE PRIMARY         00504900
.ZSYS4                ANOP  ,                                           00505000
.*******************************************************************    00505100
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00505200
.*******************************************************************    00505300
                      LCLC  &XREQUEST   ++ VALUE                        00505400
                      LCLC  &XTYPE(257)         ++ VALUE                00505500
                      LCLC  &XRESTARTTOKEN      ++ NAME                 00505600
                      LCLC  &XRESTOKEN  ++ NAME                         00505700
                      LCLC  &XEXTRESTOKEN       ++ NAME                 00505800
                      LCLC  &XENTRYTYPE         ++ VALUE                00505900
                      LCLC  &XELEMNUM   ++ NAME                         00506000
                      LCLC  &XLISTLIMIT         ++ NAME                 00506100
                      LCLC  &XLISTDESC  ++ NAME                         00506200
                      LCLC  &XLISTKEY   ++ NAME                         00506300
                      LCLC  &XMAXLISTKEY        ++ NAME                 00506400
                      LCLC  &XSETCURSOR         ++ VALUE                00506500
                      LCLC  &XMOVETOLIST        ++ NAME                 00506600
                      LCLC  &XMOVETOKEY         ++ NAME                 00506700
                      LCLC  &XMOVETOPOS         ++ VALUE                00506800
                      LCLC  &XDATAOPER  ++ VALUE                        00506900
                      LCLC  &XLISTTYPE  ++ VALUE                        00507000
                      LCLC  &XFIRSTELEM         ++ NAME                 00507100
                      LCLC  &XLASTELEM  ++ NAME                         00507200
                      LCLC  &XACTION    ++ VALUE                        00507300
                      LCLC  &XVECTORINDEX       ++ NAME                 00507400
                      LCLC  &XDRIVEEXIT         ++ VALUE                00507500
                      LCLC  &XUNC       ++ NAME                         00507600
                      LCLC  &XSTARTINDEX        ++ NAME                 00507700
                      LCLC  &XENDINDEX  ++ NAME                         00507800
                      LCLC  &XMOSVECTOR         ++ NAME                 00507900
                      LCLC  &XCONTOKEN  ++ NAME                         00508000
                      LCLC  &XREQID     ++ NAME                         00508100
                      LCLC  &XDATAREA   ++ NAME                         00508200
                      LCLC  &XBUFLIST   ++ NAME                         00508300
                      LCLC  &XBUFADDRTYPE       ++ VALUE                00508400
                      LCLC  &XPAGEABLE  ++ VALUE                        00508500
                      LCLC  &XBUFSTGKEY         ++ NAME                 00508600
                      LCLC  &XBUFALET   ++ NAME                         00508700
                      LCLC  &XBUFNUM    ++ NAME                         00508800
                      LCLC  &XBUFINCRNUM        ++ NAME                 00508900
                      LCLC  &XBUFFER    ++ NAME                         00509000
                      LCLC  &XBUFSIZE   ++ NAME                         00509100
                      LCLC  &XADJAREA   ++ NAME                         00509200
                      LCLC  &XLISTNUM   ++ NAME                         00509300
                      LCLC  &XLISTPOS   ++ VALUE                        00509400
                      LCLC  &XENTRYKEY  ++ NAME                         00509500
                      LCLC  &XKEYREQTYPE        ++ VALUE                00509600
                      LCLC  &XAUTHCOMP  ++ NAME                         00509700
                      LCLC  &XAUTHCOMPTYPE      ++ VALUE                00509800
                      LCLC  &XNEWAUTH   ++ NAME                         00509900
                      LCLC  &XENTRYID   ++ NAME                         00510000
                      LCLC  &XENTRYNAME         ++ NAME                 00510100
                      LCLC  &XLOCBYCURSOR       ++ VALUE                00510200
                      LCLC  &XUPDATECURSOR      ++ VALUE                00510300
                      LCLC  &XCURSORUPDTYPE     ++ VALUE                00510400
                      LCLC  &XLISTDIR   ++ VALUE                        00510500
                      LCLC  &XLISTKEYTYPE       ++ VALUE                00510600
                      LCLC  &XLISTKEYINC        ++ NAME                 00510700
                      LCLC  &XKEYCOMP   ++ NAME                         00510800
                      LCLC  &XVERSCOMP  ++ NAME                         00510900
                      LCLC  &XVERSCOMPTYPE      ++ VALUE                00511000
                      LCLC  &XVERSUPDATE        ++ VALUE                00511100
                      LCLC  &XNEWVERS   ++ NAME                         00511200
                      LCLC  &XLOCKINDEX         ++ NAME                 00511300
                      LCLC  &XLOCKOPER  ++ VALUE                        00511400
                      LCLC  &XLOCKMODE  ++ VALUE                        00511500
                      LCLC  &XLOCKDATA  ++ NAME                         00511600
                      LCLC  &XLOCKCOMP  ++ NAME                         00511700
                      LCLC  &XMODE      ++ VALUE                        00511800
                      LCLC  &XREQECB    ++ NAME                         00511900
                      LCLC  &XREQDATA   ++ NAME                         00512000
                      LCLC  &XREQTOKEN  ++ NAME                         00512100
                      LCLC  &XANSAREA   ++ NAME                         00512200
                      LCLC  &XANSLEN    ++ NAME                         00512300
                      LCLC  &XRETCODE   ++ NAME                         00512400
                      LCLC  &XRSNCODE   ++ NAME                         00512500
                      LCLA  &XPLISTVER  ++ VALUE                        00512600
                      LCLC  &XMF        ++ VALUE                        00512700
                      LCLC  &XMFCTRL    ++ NAME                         00512800
                      LCLC  &XMFATTR    ++ VALUE                        00512900
                      LCLC  &XMFSCK     ++ VALUE                        00513000
.*******************************************************************    00513100
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00513200
.*******************************************************************    00513300
                      LCLC  &ZXREQUEST  ++ INPUT VALUE                  00513400
                      LCLC  &ZXTYPE     ++ INPUT VALUE                  00513500
                      LCLC  &ZXRESTARTTOKEN     ++ INPUT NAME           00513600
                      LCLC  &ZXRESTOKEN         ++ INPUT NAME           00513700
                      LCLC  &ZXEXTRESTOKEN      ++ INPUT NAME           00513800
                      LCLC  &ZXENTRYTYPE        ++ INPUT VALUE          00513900
                      LCLC  &ZXELEMNUM  ++ INPUT NAME                   00514000
                      LCLC  &ZXLISTLIMIT        ++ INPUT NAME           00514100
                      LCLC  &ZXLISTDESC         ++ INPUT NAME           00514200
                      LCLC  &ZXLISTKEY  ++ INPUT NAME                   00514300
                      LCLC  &ZXMAXLISTKEY       ++ INPUT NAME           00514400
                      LCLC  &ZXSETCURSOR        ++ INPUT VALUE          00514500
                      LCLC  &ZXMOVETOLIST       ++ INPUT NAME           00514600
                      LCLC  &ZXMOVETOKEY        ++ INPUT NAME           00514700
                      LCLC  &ZXMOVETOPOS        ++ INPUT VALUE          00514800
                      LCLC  &ZXDATAOPER         ++ INPUT VALUE          00514900
                      LCLC  &ZXLISTTYPE         ++ INPUT VALUE          00515000
                      LCLC  &ZXFIRSTELEM        ++ INPUT NAME           00515100
                      LCLC  &ZXLASTELEM         ++ INPUT NAME           00515200
                      LCLC  &ZXACTION   ++ INPUT VALUE                  00515300
                      LCLC  &ZXVECTORINDEX      ++ INPUT NAME           00515400
                      LCLC  &ZXDRIVEEXIT        ++ INPUT VALUE          00515500
                      LCLC  &ZXUNC      ++ INPUT NAME                   00515600
                      LCLC  &ZXSTARTINDEX       ++ INPUT NAME           00515700
                      LCLC  &ZXENDINDEX         ++ INPUT NAME           00515800
                      LCLC  &ZXMOSVECTOR        ++ OUTPUT NAME          00515900
                      LCLC  &ZXCONTOKEN         ++ INPUT NAME           00516000
                      LCLC  &ZXREQID    ++ INPUT NAME                   00516100
                      LCLC  &ZXDATAREA  ++ INPUT NAME                   00516200
                      LCLC  &ZXBUFLIST  ++ INPUT NAME                   00516300
                      LCLC  &ZXBUFADDRTYPE      ++ INPUT VALUE          00516400
                      LCLC  &ZXPAGEABLE         ++ INPUT VALUE          00516500
                      LCLC  &ZXBUFSTGKEY        ++ INPUT NAME           00516600
                      LCLC  &ZXBUFALET  ++ INPUT NAME                   00516700
                      LCLC  &ZXBUFNUM   ++ INPUT NAME                   00516800
                      LCLC  &ZXBUFINCRNUM       ++ INPUT NAME           00516900
                      LCLC  &ZXBUFFER   ++ INPUT NAME                   00517000
                      LCLC  &ZXBUFSIZE  ++ INPUT NAME                   00517100
                      LCLC  &ZXADJAREA  ++ INPUT NAME                   00517200
                      LCLC  &ZXLISTNUM  ++ INPUT NAME                   00517300
                      LCLC  &ZXLISTPOS  ++ INPUT VALUE                  00517400
                      LCLC  &ZXENTRYKEY         ++ INPUT NAME           00517500
                      LCLC  &ZXKEYREQTYPE       ++ INPUT VALUE          00517600
                      LCLC  &ZXAUTHCOMP         ++ INPUT NAME           00517700
                      LCLC  &ZXAUTHCOMPTYPE     ++ INPUT VALUE          00517800
                      LCLC  &ZXNEWAUTH  ++ INPUT NAME                   00517900
                      LCLC  &ZXENTRYID  ++ INPUT NAME                   00518000
                      LCLC  &ZXENTRYNAME        ++ INPUT NAME           00518100
                      LCLC  &ZXLOCBYCURSOR      ++ INPUT VALUE          00518200
                      LCLC  &ZXUPDATECURSOR     ++ INPUT VALUE          00518300
                      LCLC  &ZXCURSORUPDTYPE    ++ INPUT VALUE          00518400
                      LCLC  &ZXLISTDIR  ++ INPUT VALUE                  00518500
                      LCLC  &ZXLISTKEYTYPE      ++ INPUT VALUE          00518600
                      LCLC  &ZXLISTKEYINC       ++ INPUT NAME           00518700
                      LCLC  &ZXKEYCOMP  ++ INPUT NAME                   00518800
                      LCLC  &ZXVERSCOMP         ++ INPUT NAME           00518900
                      LCLC  &ZXVERSCOMPTYPE     ++ INPUT VALUE          00519000
                      LCLC  &ZXVERSUPDATE       ++ INPUT VALUE          00519100
                      LCLC  &ZXNEWVERS  ++ INPUT NAME                   00519200
                      LCLC  &ZXLOCKINDEX        ++ INPUT NAME           00519300
                      LCLC  &ZXLOCKOPER         ++ INPUT VALUE          00519400
                      LCLC  &ZXLOCKMODE         ++ INPUT VALUE          00519500
                      LCLC  &ZXLOCKDATA         ++ INPUT NAME           00519600
                      LCLC  &ZXLOCKCOMP         ++ INPUT NAME           00519700
                      LCLC  &ZXMODE     ++ INPUT VALUE                  00519800
                      LCLC  &ZXREQECB   ++ INPUT NAME                   00519900
                      LCLC  &ZXREQDATA  ++ INPUT NAME                   00520000
                      LCLC  &ZXREQTOKEN         ++ OUTPUT NAME          00520100
                      LCLC  &ZXANSAREA  ++ INPUT NAME                   00520200
                      LCLC  &ZXANSLEN   ++ INPUT NAME                   00520300
                      LCLC  &ZXRETCODE  ++ OUTPUT NAME                  00520400
                      LCLC  &ZXRSNCODE  ++ OUTPUT NAME                  00520500
                      LCLC  &ZXPLISTVER         ++ INPUT VALUE          00520600
                      LCLC  &ZXMF       ++ INPUT VALUE                  00520700
                      LCLC  &ZXMFCTRL   ++ INPUT NAME                   00520800
                      LCLC  &ZXMFATTR   ++ INPUT VALUE                  00520900
                      LCLC  &ZXMFSCK    ++ INPUT VALUE                  00521000
.********************************************************************   00521100
.***AC.PLV01  PROCESS PLISTVER                                      *   00521200
.********************************************************************   00521300
&XPLISTVER      SETA  0                                                 00521400
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00521500
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00521600
&XPLISTVER      SETA  3                                                 00521700
.ZPLV0          ANOP  ,                                                 00521800
.*                                                                      00521900
                AIF   ('&EXTRESTOKEN' EQ '').ZPLV1E                     00522000
                AIF   (&XPLISTVER GE 3).ZPLV1E                          00522100
&XPLISTVER      SETA  3                                                 00522200
.ZPLV1E         ANOP  ,                                                 00522300
.*                                                                      00522400
                AIF   ('&LISTKEY' EQ '').ZPLV2E                         00522500
                AIF   (&XPLISTVER GE 1).ZPLV2E                          00522600
&XPLISTVER      SETA  1                                                 00522700
.ZPLV2E         ANOP  ,                                                 00522800
.*                                                                      00522900
                AIF   ('&MAXLISTKEY' EQ '').ZPLV3E                      00523000
                AIF   (&XPLISTVER GE 1).ZPLV3E                          00523100
&XPLISTVER      SETA  1                                                 00523200
.ZPLV3E         ANOP  ,                                                 00523300
.*                                                                      00523400
                AIF   ('&SETCURSOR' EQ '').ZPLV4E                       00523500
                AIF   (&XPLISTVER GE 1).ZPLV4E                          00523600
&XPLISTVER      SETA  1                                                 00523700
.ZPLV4E         ANOP  ,                                                 00523800
.*                                                                      00523900
                AIF   ('&EXTRESTOKEN' EQ '').ZPLV5E                     00524000
                AIF   (&XPLISTVER GE 3).ZPLV5E                          00524100
&XPLISTVER      SETA  3                                                 00524200
.ZPLV5E         ANOP  ,                                                 00524300
.*                                                                      00524400
                AIF   ('&UNC' EQ '').ZPLV6E                             00524500
                AIF   (&XPLISTVER GE 2).ZPLV6E                          00524600
&XPLISTVER      SETA  2                                                 00524700
.ZPLV6E         ANOP  ,                                                 00524800
.*                                                                      00524900
                AIF   ('&STARTINDEX' EQ '').ZPLV7E                      00525000
                AIF   (&XPLISTVER GE 2).ZPLV7E                          00525100
&XPLISTVER      SETA  2                                                 00525200
.ZPLV7E         ANOP  ,                                                 00525300
.*                                                                      00525400
                AIF   ('&ENDINDEX' EQ '').ZPLV8E                        00525500
                AIF   (&XPLISTVER GE 2).ZPLV8E                          00525600
&XPLISTVER      SETA  2                                                 00525700
.ZPLV8E         ANOP  ,                                                 00525800
.*                                                                      00525900
                AIF   ('&MOSVECTOR' EQ '').ZPLV9E                       00526000
                AIF   (&XPLISTVER GE 2).ZPLV9E                          00526100
&XPLISTVER      SETA  2                                                 00526200
.ZPLV9E         ANOP  ,                                                 00526300
.*                                                                      00526400
                AIF   ('&LISTKEYINC' EQ '').ZPLV10E                     00526500
                AIF   (&XPLISTVER GE 1).ZPLV10E                         00526600
&XPLISTVER      SETA  1                                                 00526700
.ZPLV10E        ANOP  ,                                                 00526800
.*                                                                      00526900
                AIF   ('&LISTKEYINC' EQ '').ZPLV11E                     00527000
                AIF   (&XPLISTVER GE 1).ZPLV11E                         00527100
&XPLISTVER      SETA  1                                                 00527200
.ZPLV11E        ANOP  ,                                                 00527300
.*                                                                      00527400
                AIF   ('&LISTKEYINC' EQ '').ZPLV12E                     00527500
                AIF   (&XPLISTVER GE 1).ZPLV12E                         00527600
&XPLISTVER      SETA  1                                                 00527700
.ZPLV12E        ANOP  ,                                                 00527800
.*                                                                      00527900
                AIF   ('&KEYCOMP' EQ '').ZPLV13E                        00528000
                AIF   (&XPLISTVER GE 1).ZPLV13E                         00528100
&XPLISTVER      SETA  1                                                 00528200
.ZPLV13E        ANOP  ,                                                 00528300
.*                                                                      00528400
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00528500
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00528600
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00528700
.*-------------------------------------------------------------------   00528800
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00528900
&ZMS            SETC  '"PLISTVER='         *KPOSA* MNOTE                00529000
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00529100
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00529200
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00529300
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00529400
                AGO   .ZPVCK2                                           00529500
.ZPVCK3         ANOP  ,                                                 00529600
.*-------------------------------------------------------------------   00529700
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00529800
&ZMS            SETC  '"PLISTVER='         *KGPRA* MNOTE                00529900
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00530000
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00530100
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00530200
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00530300
                AGO   .ZPVCKE                                           00530400
.ZPVCK2         ANOP  ,                                                 00530500
.*-------------------------------------------------------------------   00530600
&ZCVAL          SETC  '&PLISTVER(1)'                                    00530700
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00530800
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00530900
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00531000
                AIF   (&ZN LT 0).ZPVCK6    TOO LOW                      00531100
                AIF   (&ZN LE 3).ZPVCK4A   NOT HIGH                     00531200
.ZPVCK6         ANOP  ,                                                 00531300
&ZMS            SETC  '"PLISTVER='         *KRNGA* MNOTE                00531400
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00531500
&ZMS            SETC  '&ZMS THE RANGE IS "0-3"'                         00531600
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00531700
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00531800
&XPLISTVER      SETA  3                                                 00531900
                AGO   .ZPVCKE                                           00532000
.*-------------------------------------------------------------------   00532100
.ZPVCK4A        ANOP  ,                                                 00532200
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00532300
&ZMS            SETC  'PLISTVER='          *KVALA* MNOTE                00532400
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00532500
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00532600
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00532700
                MNOTE 8,' &ZMS IS REQUIRED.'                            00532800
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00532900
                AGO   .ZPVCK5                                           00533000
.ZPVCK4         ANOP  ,                                                 00533100
&XPLISTVER      SETA  &PLISTVER(1)                                      00533200
.ZPVCK5         ANOP  ,                                                 00533300
.ZPVCKE         ANOP  ,                                                 00533400
.********************************************************************   00533500
.***AG.MF01 PROCESS MF MACRO FORMS                                      00533600
.********************************************************************   00533700
                      ACTR  10000                                       00533800
.*------------------------------------------------------------------    00533900
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00534000
&XMF                  SETC  ''          INITIALIZE XVARIABLE            00534100
.*-------------------------------------------------------------------   00534200
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00534300
.ZG363                ANOP  ,                                           00534400
&ZTLC                 SETC 'S'                                          00534500
                      AIF   ('&MF(1)' NE '&ZTLC').ZG364                 00534600
&XMF                  SETC  'S'         SET KEYWORD                     00534700
                      AIF   (N'&MF LE 1).ZG363A  CK NUM                 00534800
&ZMS                  SETC  '"MF='      *KPOSA* MNOTE                   00534900
&ZMS                  SETC  '&ZMS.&MF"'                                 00535000
&ZMS                  SETC  '&ZMS "MF"'                                 00535100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00535200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00535300
.ZG363A               ANOP  ,                                           00535400
.*-------------------------------------------------------------------   00535500
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00535600
.ZG364                ANOP  ,                                           00535700
&ZTLC                 SETC 'L'                                          00535800
                      AIF   ('&MF(1)' NE '&ZTLC').ZG371                 00535900
&XMF                  SETC  'L'         SET KEYWORD                     00536000
                      AIF   (N'&MF LE 3).ZG364A  CK NUM                 00536100
&ZMS                  SETC  '"MF='      *KPOSA* MNOTE                   00536200
&ZMS                  SETC  '&ZMS.&MF"'                                 00536300
&ZMS                  SETC  '&ZMS "MF"'                                 00536400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'        00536500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00536600
.ZG364A               ANOP  ,                                           00536700
.*-------------------------------------------------------------------   00536800
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00536900
                      AIF   (N'&SYSLIST NE 0).ZG364B  POSITIONALS?      00537000
                      AIF   ('&REQUEST' NE '').ZG364B  KEYS?            00537100
                      AIF   ('&TYPE' NE '').ZG364B  KEYS?               00537200
                      AIF   ('&RESTOKEN' NE '').ZG364B  KEYS?           00537300
                      AIF   ('&EXTRESTOKEN' NE '').ZG364B  KEYS?        00537400
                      AIF   ('&ENTRYTYPE' NE '').ZG364B  KEYS?          00537500
                      AIF   ('&ELEMNUM' NE '').ZG364B  KEYS?            00537600
                      AIF   ('&LISTLIMIT' NE '').ZG364B  KEYS?          00537700
                      AIF   ('&LISTDESC' NE '').ZG364B  KEYS?           00537800
                      AIF   ('&LISTKEY' NE '').ZG364B  KEYS?            00537900
                      AIF   ('&MAXLISTKEY' NE '').ZG364B  KEYS?         00538000
                      AIF   ('&SETCURSOR' NE '').ZG364B  KEYS?          00538100
                      AIF   ('&MOVETOLIST' NE '').ZG364B  KEYS?         00538200
                      AIF   ('&MOVETOKEY' NE '').ZG364B  KEYS?          00538300
                      AIF   ('&MOVETOPOS' NE '').ZG364B  KEYS?          00538400
                      AIF   ('&DATAOPER' NE '').ZG364B  KEYS?           00538500
                      AIF   ('&LISTTYPE' NE '').ZG364B  KEYS?           00538600
                      AIF   ('&FIRSTELEM' NE '').ZG364B  KEYS?          00538700
                      AIF   ('&LASTELEM' NE '').ZG364B  KEYS?           00538800
                      AIF   ('&ACTION' NE '').ZG364B  KEYS?             00538900
                      AIF   ('&VECTORINDEX' NE '').ZG364B  KEYS?        00539000
                      AIF   ('&DRIVEEXIT' NE '').ZG364B  KEYS?          00539100
                      AIF   ('&UNC' NE '').ZG364B  KEYS?                00539200
                      AIF   ('&STARTINDEX' NE '').ZG364B  KEYS?         00539300
                      AIF   ('&ENDINDEX' NE '').ZG364B  KEYS?           00539400
                      AIF   ('&MOSVECTOR' NE '').ZG364B  KEYS?          00539500
                      AIF   ('&CONTOKEN' NE '').ZG364B  KEYS?           00539600
                      AIF   ('&REQID' NE '').ZG364B  KEYS?              00539700
                      AIF   ('&BUFLIST' NE '').ZG364B  KEYS?            00539800
                      AIF   ('&BUFADDRTYPE' NE '').ZG364B  KEYS?        00539900
                      AIF   ('&PAGEABLE' NE '').ZG364B  KEYS?           00540000
                      AIF   ('&BUFSTGKEY' NE '').ZG364B  KEYS?          00540100
                      AIF   ('&BUFALET' NE '').ZG364B  KEYS?            00540200
                      AIF   ('&BUFNUM' NE '').ZG364B  KEYS?             00540300
                      AIF   ('&BUFINCRNUM' NE '').ZG364B  KEYS?         00540400
                      AIF   ('&BUFFER' NE '').ZG364B  KEYS?             00540500
                      AIF   ('&BUFSIZE' NE '').ZG364B  KEYS?            00540600
                      AIF   ('&ADJAREA' NE '').ZG364B  KEYS?            00540700
                      AIF   ('&LISTNUM' NE '').ZG364B  KEYS?            00540800
                      AIF   ('&LISTPOS' NE '').ZG364B  KEYS?            00540900
                      AIF   ('&ENTRYKEY' NE '').ZG364B  KEYS?           00541000
                      AIF   ('&KEYREQTYPE' NE '').ZG364B  KEYS?         00541100
                      AIF   ('&AUTHCOMP' NE '').ZG364B  KEYS?           00541200
                      AIF   ('&AUTHCOMPTYPE' NE '').ZG364B  KEYS?       00541300
                      AIF   ('&NEWAUTH' NE '').ZG364B  KEYS?            00541400
                      AIF   ('&ENTRYID' NE '').ZG364B  KEYS?            00541500
                      AIF   ('&ENTRYNAME' NE '').ZG364B  KEYS?          00541600
                      AIF   ('&UPDATECURSOR' NE '').ZG364B  KEYS?       00541700
                      AIF   ('&CURSORUPDTYPE' NE '').ZG364B  KEYS?      00541800
                      AIF   ('&LISTDIR' NE '').ZG364B  KEYS?            00541900
                      AIF   ('&LISTKEYTYPE' NE '').ZG364B  KEYS?        00542000
                      AIF   ('&LISTKEYINC' NE '').ZG364B  KEYS?         00542100
                      AIF   ('&KEYCOMP' NE '').ZG364B  KEYS?            00542200
                      AIF   ('&VERSCOMP' NE '').ZG364B  KEYS?           00542300
                      AIF   ('&VERSCOMPTYPE' NE '').ZG364B  KEYS?       00542400
                      AIF   ('&VERSUPDATE' NE '').ZG364B  KEYS?         00542500
                      AIF   ('&NEWVERS' NE '').ZG364B  KEYS?            00542600
                      AIF   ('&LOCKINDEX' NE '').ZG364B  KEYS?          00542700
                      AIF   ('&LOCKOPER' NE '').ZG364B  KEYS?           00542800
                      AIF   ('&LOCKMODE' NE '').ZG364B  KEYS?           00542900
                      AIF   ('&LOCKDATA' NE '').ZG364B  KEYS?           00543000
                      AIF   ('&LOCKCOMP' NE '').ZG364B  KEYS?           00543100
                      AIF   ('&MODE' NE '').ZG364B  KEYS?               00543200
                      AIF   ('&REQECB' NE '').ZG364B  KEYS?             00543300
                      AIF   ('&REQDATA' NE '').ZG364B  KEYS?            00543400
                      AIF   ('&REQTOKEN' NE '').ZG364B  KEYS?           00543500
                      AIF   ('&ANSAREA' NE '').ZG364B  KEYS?            00543600
                      AIF   ('&ANSLEN' NE '').ZG364B  KEYS?             00543700
                      AIF   ('&RETCODE' NE '').ZG364B  KEYS?            00543800
                      AIF   ('&RSNCODE' NE '').ZG364B  KEYS?            00543900
                      AGO    .ZG364C    INVOCATION OKAY                 00544000
.ZG364B               ANOP  ,                                           00544100
&ZMS                  SETC  'THE "L" FORM OF "MF"'  *MFLA* MNOTE        00544200
&ZMS                  SETC  '&ZMS CAN ONLY HAVE'                        00544300
&ZMS                  SETC  '&ZMS THE "PLISTVER" KEY'                   00544400
                      MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'      00544500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00544600
.ZG364C               ANOP  ,                                           00544700
.*-------------------------------------------------------------------   00544800
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00544900
&ZXMFCTRL             SETC  'INPUT'     SET IN/OUTPUT                   00545000
&XMFCTRL              SETC  '&MF(2,1)'  SET XVARIABLE                   00545100
                      AIF   (N'&MF(2) GT 1).ZG366B  MULTI PARMS         00545200
&XMFCTRL              SETC  '&MF(2)'    SET XVARIABLE                   00545300
.ZG366B               AIF   (K'&MF(2) GT 0).ZG366C                      00545400
&ZXMFCTRL             SETC  ''          RESET IN/OUTPUT                 00545500
&ZMS                  SETC  'WHEN "L" IS SPECIFIED'  *KRQDA*            00545600
&ZMS                  SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'         00545700
                      MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                00545800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00545900
.ZG366C               ANOP  ,                                           00546000
.*-------------------------------------------------------------------   00546100
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00546200
                      AIF   (K'&ZXMFCTRL LE 0).ZG366P  NOT I/O          00546300
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZG366P             00546400
&ZXMFCTRL             SETC  ''          RESET IN/OUTPUT                 00546500
&ZMS                  SETC  '"MF='      *KGPRA* MNOTE                   00546600
&ZMS                  SETC  '&ZMS.&MF"'                                 00546700
&ZMS                  SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'   00546800
                      MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'           00546900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00547000
.ZG366P               ANOP  ,                                           00547100
.*-------------------------------------------------------------------   00547200
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00547300
&ZXMFATTR             SETC  'INPUT'     SET IN/OUTPUT                   00547400
&XMFATTR              SETC  '0D'                                        00547500
                      AIF   (K'&MF(3) LE 0).ZG369B  PARM                00547600
&XMFATTR              SETC  '&MF(3,1)'  SET XVARIABLE                   00547700
                      AIF   (N'&MF(3) GT 1).ZG369B  MULTI PARMS         00547800
&XMFATTR              SETC  '&MF(3)'    SET XVARIABLE                   00547900
.ZG369B               ANOP  ,                                           00548000
.*-------------------------------------------------------------------   00548100
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00548200
                      AIF   (K'&ZXMFATTR LE 0).ZG369P  NOT I/O          00548300
                      AIF   ('&XMFATTR'(1,1) NE '(').ZG369P             00548400
&ZXMFATTR             SETC  ''          RESET IN/OUTPUT                 00548500
&ZMS                  SETC  '"MF='      *KGPRA* MNOTE                   00548600
&ZMS                  SETC  '&ZMS.&MF"'                                 00548700
&ZMS                  SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'   00548800
                      MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'           00548900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00549000
.ZG369P               ANOP  ,                                           00549100
.*-------------------------------------------------------------------   00549200
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00549300
                      AIF   (K'&ZXMFATTR LE 0).ZG369S  NOT I/O          00549400
                      AIF   (K'&XMFATTR LE 60).ZG369S  LNG OK           00549500
&ZXMFATTR             SETC  ''          RESET IN/OUTPUT                 00549600
&ZMS                  SETC  '"MF='      *KLNGA* MNOTE                   00549700
&ZMS                  SETC  '&ZMS.&MF"'                                 00549800
&ZMS                  SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'       00549900
                      MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'          00550000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00550100
.ZG369S               ANOP  ,                                           00550200
.*-------------------------------------------------------------------   00550300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00550400
.ZG371                ANOP  ,                                           00550500
&ZTLC                 SETC 'E'                                          00550600
                      AIF   ('&MF(1)' NE '&ZTLC').ZG379                 00550700
&XMF                  SETC  'E'         SET KEYWORD                     00550800
                      AIF   (N'&MF LE 3).ZG371A  CK NUM                 00550900
&ZMS                  SETC  '"MF='      *KPOSA* MNOTE                   00551000
&ZMS                  SETC  '&ZMS.&MF"'                                 00551100
&ZMS                  SETC  '&ZMS "MF"'                                 00551200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'        00551300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00551400
.ZG371A               ANOP  ,                                           00551500
.*-------------------------------------------------------------------   00551600
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00551700
&ZXMFCTRL             SETC  'INPUT'     SET IN/OUTPUT                   00551800
&XMFCTRL              SETC  '&MF(2,1)'  SET XVARIABLE                   00551900
                      AIF   (N'&MF(2) GT 1).ZG373B  MULTI PARMS         00552000
&XMFCTRL              SETC  '&MF(2)'    SET XVARIABLE                   00552100
.ZG373B               AIF   (K'&MF(2) GT 0).ZG373C                      00552200
&ZXMFCTRL             SETC  ''          RESET IN/OUTPUT                 00552300
&ZMS                  SETC  'WHEN "E" IS SPECIFIED'  *KRQDA*            00552400
&ZMS                  SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'         00552500
                      MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                00552600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00552700
.ZG373C               ANOP  ,                                           00552800
.*-------------------------------------------------------------------   00552900
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00553000
                      AIF   (K'&ZXMFCTRL LE 0).ZG373R  NOT I/O          00553100
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZG373R             00553200
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                  00553300
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG373P               00553400
                      AIF   (K'&ZCGPR GT 2).ZG373Q                      00553500
                      AIF   ('&ZCGPR' EQ '0').ZG373Q                    00553600
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00553700
                      AIF   (T'&ZCGPR NE 'N').ZG373Q  INVALID REG NAME  00553800
.ZG373P               ANOP  ,                                           00553900
                      AIF   (T'&ZCGPR NE 'N').ZG373R  NON NUMERIC       00554000
                      AIF   ('&ZCGPR' LT '1').ZG373Q                    00554100
                      AIF   ('&ZCGPR' LE '12').ZG373R                   00554200
.ZG373Q               ANOP  ,                                           00554300
&ZMS                  SETC  '"MF='      *KGPRA* MNOTE                   00554400
&ZMS                  SETC  '&ZMS.&MF"'                                 00554500
&ZMS                  SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'   00554600
                      MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'            00554700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00554800
.ZG373R               ANOP  ,                                           00554900
.*-------------------------------------------------------------------   00555000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00555100
&XMFSCK               SETC  ''          INITIALIZE XVARIABLE            00555200
.ZG377A   AIF   ('&MF(3)' NE 'COMPLETE').ZG378A                         00555300
&XMFSCK               SETC  'COMPLETE'  SET KEYWORD                     00555400
.*-------------------------------------------------------------------   00555500
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00555600
.ZG378A               AIF   (K'&XMFSCK GT 0).ZG378C  KEYWORD            00555700
                      AIF   (K'&MF(3) LE 0).ZG378B                      00555800
&ZMS                  SETC  '"MF='      *KUKWA* MNOTE                   00555900
&ZMS                  SETC  '&ZMS.&MF"'                                 00556000
&ZMS                  SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '   00556100
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00556200
&ZMS                  SETC  '&ZMS "COMPLETE".'                          00556300
                      MNOTE 8,' &ZMS '                                  00556400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00556500
.ZG378B               ANOP  ,                                           00556600
&XMFSCK               SETC  'COMPLETE'  SET DEFAULT KEYWORD             00556700
.ZG378C               ANOP  ,                                           00556800
&ZXMFSCK              SETC  'INPUT'     SET IN/OUTPUT                   00556900
.*------------------------------------------------------------------    00557000
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00557100
.ZG379                ANOP  ,                                           00557200
&ZXMF                 SETC  'INPUT'     SET IN/OUTPUT                   00557300
                      AIF   (K'&XMF GT 0).ZG379E  VALID ARG             00557400
                      AIF   (T'&MF EQ 'O').ZG379D  OMITTED              00557500
&ZASYSLNDX            SETA  0                                           00557600
.ZG379A               ANOP  ,           POSITIONAL MACRO KEY            00557700
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                00557800
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG379C           00557900
&ZTLC                 SETC 'MF'                                         00558000
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG379A  00558100
.ZG379B               ANOP  ,                                           00558200
&ZXMF                 SETC  ''          RESET IN/OUTPUT                 00558300
&ZMS                  SETC  'THE "MF" KEY'      *KOPTA* MNOTE           00558400
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     00558500
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            00558600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00558700
                      AGO   .ZG379E                                     00558800
.ZG379C               ANOP  ,                                           00558900
&ZXMF                 SETC  ''          RESET IN/OUTPUT                 00559000
&ZMS                  SETC  '"MF='      *KUKWA* MNOTE                   00559100
&ZMS                  SETC  '&ZMS.&MF"'                                 00559200
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00559300
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00559400
&ZMS                  SETC  '&ZMS "S",'                                 00559500
&ZMS                  SETC  '&ZMS "L",'                                 00559600
&ZMS                  SETC  '&ZMS OR "E".'                              00559700
                      MNOTE 8,' &ZMS '                                  00559800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00559900
                      AGO   .ZG379E                                     00560000
.ZG379D               ANOP  ,                                           00560100
&XMF                  SETC  'S'         SET DEFAULT KEYWORD             00560200
&XMFSCK               SETC  'COMPLETE'  COMPLETE CHECKING               00560300
.ZG379E               ANOP  ,                                           00560400
.********************************************************************   00560500
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00560600
.********************************************************************   00560700
                      ACTR  10000                                       00560800
.*-------------------------------------------------------------------   00560900
.***AG.MF03 MF=(SLE)                                                    00561000
                      AIF   ('&XMF' EQ 'L').ZGMFX                       00561100
.*------------------------------------------------------------------    00561200
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00561300
&XREQUEST             SETC  ''          INITIALIZE XVARIABLE            00561400
.*-------------------------------------------------------------------   00561500
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00561600
.ZG3                  ANOP  ,                                           00561700
                      AIF   (K'&REQUEST(1) LE 0).ZG3A                   00561800
&ZTLC                 SETC 'READ'                                       00561900
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG4              00562000
&XREQUEST             SETC  'READ'      SET KEYWORD                     00562100
                      AIF   (N'&REQUEST LE 1).ZG3A  CK NUM              00562200
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00562300
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00562400
&ZMS                  SETC  '&ZMS "REQUEST"'                            00562500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00562600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00562700
.ZG3A                 ANOP  ,                                           00562800
.*------------------------------------------------------------------    00562900
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00563000
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00563100
.ZG3A0                AIF   (K'&TYPE LE 0).ZG3A1  OK                    00563200
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00563300
.ZG3A1                AIF   (K'&RESTOKEN LE 0).ZG3A2  OK                00563400
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00563500
.ZG3A2                AIF   (K'&EXTRESTOKEN LE 0).ZG3A3  OK             00563600
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00563700
.ZG3A3                AIF   (K'&ENTRYTYPE LE 0).ZG3A4  OK               00563800
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00563900
.ZG3A4                AIF   (K'&ELEMNUM LE 0).ZG3A5  OK                 00564000
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00564100
.ZG3A5                AIF   (K'&LISTLIMIT LE 0).ZG3A6  OK               00564200
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00564300
.ZG3A6                AIF   (K'&LISTDESC LE 0).ZG3A7  OK                00564400
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00564500
.ZG3A7                AIF   (K'&LISTKEY LE 0).ZG3A8  OK                 00564600
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00564700
.ZG3A8                AIF   (K'&MAXLISTKEY LE 0).ZG3A9  OK              00564800
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00564900
.ZG3A9                AIF   (K'&SETCURSOR LE 0).ZG3A10  OK              00565000
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00565100
.ZG3A10               AIF   (K'&MOVETOLIST LE 0).ZG3A11  OK             00565200
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00565300
.ZG3A11               AIF   (K'&MOVETOKEY LE 0).ZG3A12  OK              00565400
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00565500
.ZG3A12               AIF   (K'&MOVETOPOS LE 0).ZG3A13  OK              00565600
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00565700
.ZG3A13               AIF   (K'&DATAOPER LE 0).ZG3A14  OK               00565800
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00565900
.ZG3A14               AIF   (K'&LISTTYPE LE 0).ZG3A15  OK               00566000
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00566100
.ZG3A15               AIF   (K'&FIRSTELEM LE 0).ZG3A16  OK              00566200
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00566300
.ZG3A16               AIF   (K'&LASTELEM LE 0).ZG3A17  OK               00566400
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00566500
.ZG3A17               AIF   (K'&ACTION LE 0).ZG3A18  OK                 00566600
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00566700
.ZG3A18               AIF   (K'&VECTORINDEX LE 0).ZG3A19  OK            00566800
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00566900
.ZG3A19               AIF   (K'&DRIVEEXIT LE 0).ZG3A20  OK              00567000
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00567100
.ZG3A20               AIF   (K'&UNC LE 0).ZG3A21  OK                    00567200
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00567300
.ZG3A21               AIF   (K'&STARTINDEX LE 0).ZG3A22  OK             00567400
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00567500
.ZG3A22               AIF   (K'&ENDINDEX LE 0).ZG3A23  OK               00567600
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00567700
.ZG3A23               AIF   (K'&MOSVECTOR LE 0).ZG3A24  OK              00567800
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00567900
.ZG3A24               AIF   (K'&ZCVAL LE 0).ZG3A25  OK                  00568000
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00568100
                      AIF  (K'&ZCVAL LE 160).ZG3A25A                    00568200
&ZCVAL                SETC '&ZCVAL'(1,160)                              00568300
&ZCVAL                SETC '&ZCVAL....'                                 00568400
.ZG3A25A              ANOP                                              00568500
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00568600
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00568700
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00568800
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00568900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00569000
.ZG3A25               ANOP  ,                                           00569100
.*-------------------------------------------------------------------   00569200
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00569300
.ZG4                  ANOP  ,                                           00569400
&ZTLC                 SETC 'READ_LIST'                                  00569500
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG11             00569600
&XREQUEST             SETC  'READ_LIST'         SET KEYWORD             00569700
                      AIF   (N'&REQUEST LE 1).ZG4A  CK NUM              00569800
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00569900
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00570000
&ZMS                  SETC  '&ZMS "REQUEST"'                            00570100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00570200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00570300
.ZG4A                 ANOP  ,                                           00570400
.*------------------------------------------------------------------    00570500
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00570600
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00570700
.ZG4A0                AIF   (K'&RESTOKEN LE 0).ZG4A1  OK                00570800
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00570900
.ZG4A1                AIF   (K'&EXTRESTOKEN LE 0).ZG4A2  OK             00571000
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00571100
.ZG4A2                AIF   (K'&ENTRYTYPE LE 0).ZG4A3  OK               00571200
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00571300
.ZG4A3                AIF   (K'&ELEMNUM LE 0).ZG4A4  OK                 00571400
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00571500
.ZG4A4                AIF   (K'&LISTLIMIT LE 0).ZG4A5  OK               00571600
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00571700
.ZG4A5                AIF   (K'&LISTDESC LE 0).ZG4A6  OK                00571800
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00571900
.ZG4A6                AIF   (K'&LISTKEY LE 0).ZG4A7  OK                 00572000
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00572100
.ZG4A7                AIF   (K'&MAXLISTKEY LE 0).ZG4A8  OK              00572200
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00572300
.ZG4A8                AIF   (K'&SETCURSOR LE 0).ZG4A9  OK               00572400
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00572500
.ZG4A9                AIF   (K'&MOVETOLIST LE 0).ZG4A10  OK             00572600
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00572700
.ZG4A10               AIF   (K'&MOVETOKEY LE 0).ZG4A11  OK              00572800
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00572900
.ZG4A11               AIF   (K'&MOVETOPOS LE 0).ZG4A12  OK              00573000
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00573100
.ZG4A12               AIF   (K'&DATAOPER LE 0).ZG4A13  OK               00573200
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00573300
.ZG4A13               AIF   (K'&LISTTYPE LE 0).ZG4A14  OK               00573400
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00573500
.ZG4A14               AIF   (K'&FIRSTELEM LE 0).ZG4A15  OK              00573600
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00573700
.ZG4A15               AIF   (K'&LASTELEM LE 0).ZG4A16  OK               00573800
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00573900
.ZG4A16               AIF   (K'&ACTION LE 0).ZG4A17  OK                 00574000
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00574100
.ZG4A17               AIF   (K'&VECTORINDEX LE 0).ZG4A18  OK            00574200
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00574300
.ZG4A18               AIF   (K'&DRIVEEXIT LE 0).ZG4A19  OK              00574400
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00574500
.ZG4A19               AIF   (K'&UNC LE 0).ZG4A20  OK                    00574600
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00574700
.ZG4A20               AIF   (K'&STARTINDEX LE 0).ZG4A21  OK             00574800
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00574900
.ZG4A21               AIF   (K'&ENDINDEX LE 0).ZG4A22  OK               00575000
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00575100
.ZG4A22               AIF   (K'&MOSVECTOR LE 0).ZG4A23  OK              00575200
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00575300
.ZG4A23               AIF   (K'&ZCVAL LE 0).ZG4A24  OK                  00575400
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00575500
                      AIF  (K'&ZCVAL LE 160).ZG4A24A                    00575600
&ZCVAL                SETC '&ZCVAL'(1,160)                              00575700
&ZCVAL                SETC '&ZCVAL....'                                 00575800
.ZG4A24A              ANOP                                              00575900
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00576000
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00576100
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00576200
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00576300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00576400
.ZG4A24               ANOP  ,                                           00576500
.*-------------------------------------------------------------------   00576600
.***AG.KKWRD07 VALUE, RQD INPUT, ME KEYWORD -MULTIPLE KEYWORDS          00576700
&ZI                   SETA  0           XVARIABLE ARRAY INDEX           00576800
&ZJ                   SETA  0           SUBLIST INDEX                   00576900
.ZG6A                 ANOP  ,                                           00577000
&ZJ                   SETA  &ZJ+1       NEXT SUBLIST                    00577100
                      AIF   (&ZJ GT N'&TYPE).ZG6C  DONE                 00577200
                      AIF   (K'&TYPE(&ZJ) LE 0).ZG6A  NULL              00577300
&ZI                   SETA  &ZI+1       NEXT ARRAY ENTRY                00577400
&XTYPE(&ZI)   SETC  ''                  NULL ENTRY                      00577500
&XTYPE(&ZI+1) SETC  ''                  NULL AT ARRAY END               00577600
.ZG7B  AIF   ('&TYPE(&ZJ)' NE 'ENTDATA').ZG8B                           00577700
&XTYPE(&ZI)   SETC  'ENTDATA'           SET KEYWORD                     00577800
.ZG8B  AIF   ('&TYPE(&ZJ)' NE 'ADJDATA').ZG9B                           00577900
&XTYPE(&ZI)   SETC  'ADJDATA'           SET KEYWORD                     00578000
.ZG9B  AIF   ('&TYPE(&ZJ)' NE 'ECONTROLS').ZG10B                        00578100
&XTYPE(&ZI)   SETC  'ECONTROLS'         SET KEYWORD                     00578200
.ZG10B                AIF   ('&XTYPE(&ZI)' NE '').ZG6A                  00578300
&ZI                   SETA  &ZI-1       BACKUP ARRAY                    00578400
&ZMS                  SETC  '"TYPE='    *KVKWA* MNOTE                   00578500
&ZMS                  SETC  '&ZMS.&TYPE"'                               00578600
&ZMS                  SETC  '&ZMS ARGUMENT &ZJ'                         00578700
&ZMS                  SETC  '&ZMS IS AN UNKNOWN KEYWORD. '              00578800
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00578900
&ZMS                  SETC  '&ZMS "ENTDATA",'                           00579000
&ZMS                  SETC  '&ZMS "ADJDATA",'                           00579100
&ZMS                  SETC  '&ZMS OR "ECONTROLS".'                      00579200
                      MNOTE 8,' &ZMS '                                  00579300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00579400
                      AGO   .ZG6A                                       00579500
.*-------------------------------------------------------------------   00579600
.***AG.KKWRD09 VALUE, RQD INPUT, ME KEYWORD -MULTIPLE KEYWORDS          00579700
.ZG6C                 AIF   (&ZI GT 0).ZG6D     VALID                   00579800
&ZXTYPE               SETC  ''          RESET IN/OUTPUT                 00579900
&XTYPE(1)  SETC  'ENTDATA'              SET DEFAULT KEYWORD             00580000
&XTYPE(2)  SETC  ''   NULL AT ARRAY END                                 00580100
&ZMS                  SETC  'THE'                                       00580200
&ZMS                  SETC  '&ZMS "TYPE" KEY AND ITS'                   00580300
&ZMS                  SETC  '&ZMS ARGUMENT ARE REQUIRED.'               00580400
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00580500
&ZMS                  SETC  '&ZMS "ENTDATA",'                           00580600
&ZMS                  SETC  '&ZMS "ADJDATA",'                           00580700
&ZMS                  SETC  '&ZMS OR "ECONTROLS".'                      00580800
                      MNOTE 8,' &ZMS '                                  00580900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00581000
.ZG6D                 ANOP  ,                                           00581100
.*-------------------------------------------------------------------   00581200
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00581300
.ZG11                 ANOP  ,                                           00581400
&ZTLC                 SETC 'READ_MULT'                                  00581500
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG22             00581600
&XREQUEST             SETC  'READ_MULT'         SET KEYWORD             00581700
                      AIF   (N'&REQUEST LE 1).ZG11A  CK NUM             00581800
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00581900
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00582000
&ZMS                  SETC  '&ZMS "REQUEST"'                            00582100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00582200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00582300
.ZG11A                ANOP  ,                                           00582400
.*------------------------------------------------------------------    00582500
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00582600
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00582700
.ZG11A0               AIF   (K'&ENTRYTYPE LE 0).ZG11A1  OK              00582800
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00582900
.ZG11A1               AIF   (K'&ELEMNUM LE 0).ZG11A2  OK                00583000
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00583100
.ZG11A2               AIF   (K'&LISTLIMIT LE 0).ZG11A3  OK              00583200
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00583300
.ZG11A3               AIF   (K'&LISTDESC LE 0).ZG11A4  OK               00583400
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00583500
.ZG11A4               AIF   (K'&LISTKEY LE 0).ZG11A5  OK                00583600
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00583700
.ZG11A5               AIF   (K'&MAXLISTKEY LE 0).ZG11A6  OK             00583800
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00583900
.ZG11A6               AIF   (K'&SETCURSOR LE 0).ZG11A7  OK              00584000
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00584100
.ZG11A7               AIF   (K'&MOVETOLIST LE 0).ZG11A8  OK             00584200
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00584300
.ZG11A8               AIF   (K'&MOVETOKEY LE 0).ZG11A9  OK              00584400
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00584500
.ZG11A9               AIF   (K'&MOVETOPOS LE 0).ZG11A10  OK             00584600
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00584700
.ZG11A10              AIF   (K'&DATAOPER LE 0).ZG11A11  OK              00584800
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00584900
.ZG11A11              AIF   (K'&LISTTYPE LE 0).ZG11A12  OK              00585000
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00585100
.ZG11A12              AIF   (K'&FIRSTELEM LE 0).ZG11A13  OK             00585200
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00585300
.ZG11A13              AIF   (K'&LASTELEM LE 0).ZG11A14  OK              00585400
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00585500
.ZG11A14              AIF   (K'&ACTION LE 0).ZG11A15  OK                00585600
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00585700
.ZG11A15              AIF   (K'&VECTORINDEX LE 0).ZG11A16  OK           00585800
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00585900
.ZG11A16              AIF   (K'&DRIVEEXIT LE 0).ZG11A17  OK             00586000
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00586100
.ZG11A17              AIF   (K'&UNC LE 0).ZG11A18  OK                   00586200
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00586300
.ZG11A18              AIF   (K'&STARTINDEX LE 0).ZG11A19  OK            00586400
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00586500
.ZG11A19              AIF   (K'&ENDINDEX LE 0).ZG11A20  OK              00586600
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00586700
.ZG11A20              AIF   (K'&MOSVECTOR LE 0).ZG11A21  OK             00586800
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00586900
.ZG11A21              AIF   (K'&ZCVAL LE 0).ZG11A22  OK                 00587000
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00587100
                      AIF  (K'&ZCVAL LE 160).ZG11A22A                   00587200
&ZCVAL                SETC '&ZCVAL'(1,160)                              00587300
&ZCVAL                SETC '&ZCVAL....'                                 00587400
.ZG11A22A             ANOP                                              00587500
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00587600
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00587700
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00587800
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00587900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00588000
.ZG11A22              ANOP  ,                                           00588100
.*-------------------------------------------------------------------   00588200
.***AG.KKWRD07 VALUE, RQD INPUT, ME KEYWORD -MULTIPLE KEYWORDS          00588300
&ZI                   SETA  0           XVARIABLE ARRAY INDEX           00588400
&ZJ                   SETA  0           SUBLIST INDEX                   00588500
.ZG13A                ANOP  ,                                           00588600
&ZJ                   SETA  &ZJ+1       NEXT SUBLIST                    00588700
                      AIF   (&ZJ GT N'&TYPE).ZG13C  DONE                00588800
                      AIF   (K'&TYPE(&ZJ) LE 0).ZG13A  NULL             00588900
&ZI                   SETA  &ZI+1       NEXT ARRAY ENTRY                00589000
&XTYPE(&ZI)   SETC  ''                  NULL ENTRY                      00589100
&XTYPE(&ZI+1) SETC  ''                  NULL AT ARRAY END               00589200
.ZG14B  AIF   ('&TYPE(&ZJ)' NE 'ENTDATA').ZG15B                         00589300
&XTYPE(&ZI)   SETC  'ENTDATA'           SET KEYWORD                     00589400
.ZG15B  AIF   ('&TYPE(&ZJ)' NE 'ADJDATA').ZG16B                         00589500
&XTYPE(&ZI)   SETC  'ADJDATA'           SET KEYWORD                     00589600
.ZG16B  AIF   ('&TYPE(&ZJ)' NE 'ECONTROLS').ZG17B                       00589700
&XTYPE(&ZI)   SETC  'ECONTROLS'         SET KEYWORD                     00589800
.ZG17B                AIF   ('&XTYPE(&ZI)' NE '').ZG13A                 00589900
&ZI                   SETA  &ZI-1       BACKUP ARRAY                    00590000
&ZMS                  SETC  '"TYPE='    *KVKWA* MNOTE                   00590100
&ZMS                  SETC  '&ZMS.&TYPE"'                               00590200
&ZMS                  SETC  '&ZMS ARGUMENT &ZJ'                         00590300
&ZMS                  SETC  '&ZMS IS AN UNKNOWN KEYWORD. '              00590400
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00590500
&ZMS                  SETC  '&ZMS "ENTDATA",'                           00590600
&ZMS                  SETC  '&ZMS "ADJDATA",'                           00590700
&ZMS                  SETC  '&ZMS OR "ECONTROLS".'                      00590800
                      MNOTE 8,' &ZMS '                                  00590900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00591000
                      AGO   .ZG13A                                      00591100
.*-------------------------------------------------------------------   00591200
.***AG.KKWRD09 VALUE, RQD INPUT, ME KEYWORD -MULTIPLE KEYWORDS          00591300
.ZG13C                AIF   (&ZI GT 0).ZG13D    VALID                   00591400
&ZXTYPE               SETC  ''          RESET IN/OUTPUT                 00591500
&XTYPE(1)  SETC  'ENTDATA'              SET DEFAULT KEYWORD             00591600
&XTYPE(2)  SETC  ''   NULL AT ARRAY END                                 00591700
&ZMS                  SETC  'THE'                                       00591800
&ZMS                  SETC  '&ZMS "TYPE" KEY AND ITS'                   00591900
&ZMS                  SETC  '&ZMS ARGUMENT ARE REQUIRED.'               00592000
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00592100
&ZMS                  SETC  '&ZMS "ENTDATA",'                           00592200
&ZMS                  SETC  '&ZMS "ADJDATA",'                           00592300
&ZMS                  SETC  '&ZMS OR "ECONTROLS".'                      00592400
                      MNOTE 8,' &ZMS '                                  00592500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00592600
.ZG13D                ANOP  ,                                           00592700
.*----------------------------------------------------------------***   00592800
.***AG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00592900
&XRESTARTTOKEN        SETC  ''          INITIALIZE XVARIABLE            00593000
                      AIF   (K'&RESTOKEN LE 0).ZG19C                    00593100
&ZXRESTARTTOKEN       SETC  'INPUT'     SET IN/OUTPUT                   00593200
&XRESTARTTOKEN        SETC  'RESTOKEN'  SET XVARIABLE                   00593300
&ZXRESTOKEN           SETC  'INPUT'     SET IN/OUTPUT                   00593400
&XRESTOKEN            SETC  '&RESTOKEN(1)'      SET XVARIABLE PARM      00593500
                      AIF   (N'&RESTOKEN GT 1).ZG19A                    00593600
&XRESTOKEN            SETC  '&RESTOKEN'         SET XVARIABLE PARM      00593700
.ZG19A                AIF   (N'&RESTOKEN LE 1).ZG19B  CK NUM            00593800
&ZMS                  SETC  '"RESTOKEN='        *KPOSA* MNOTE           00593900
&ZMS                  SETC  '&ZMS.&RESTOKEN"'                           00594000
&ZMS                  SETC  '&ZMS "RESTOKEN"'                           00594100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00594200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00594300
.ZG19B                AIF   (K'&XRESTOKEN GT 0).ZG19C  ONE PARM         00594400
&ZXRESTARTTOKEN       SETC  ''          RESET IN/OUTPUT                 00594500
&ZXRESTOKEN           SETC  ''          RESET IN/OUTPUT                 00594600
&ZMS                  SETC  'WHEN "READ_MULT" IS SPECIFIED'  *KRQDA*    00594700
&ZMS                  SETC  '&ZMS , "RESTOKEN" KEY AND ITS'             00594800
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00594900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00595000
.ZG19C                ANOP  ,                                           00595100
.*----------------------------------------------------------------***   00595200
.***AG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00595300
                      AIF   (K'&EXTRESTOKEN LE 0).ZG20D  NO ME KEY      00595400
                      AIF   (N'&EXTRESTOKEN LE 1).ZG20A  CK NUM         00595500
&ZMS                  SETC  '"EXTRESTOKEN='     *KPOSA* MNOTE           00595600
&ZMS                  SETC  '&ZMS.&EXTRESTOKEN"'                        00595700
&ZMS                  SETC  '&ZMS "EXTRESTOKEN"'                        00595800
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00595900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00596000
.ZG20A                AIF   (K'&XRESTARTTOKEN LE 0).ZG20B               00596100
&ZMS                  SETC  '"EXTRESTOKEN'      *KMEKA* MNOTE           00596200
&ZMS                  SETC  '&ZMS.=&EXTRESTOKEN"'                       00596300
&ZMS                  SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'       00596400
&ZMS                  SETC  '&ZMS "&XRESTARTTOKEN"'                     00596500
                      MNOTE 8,' &ZMS KEY.'                              00596600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00596700
                      AGO   .ZG20D                                      00596800
.*                                                                      00596900
.ZG20B                ANOP  ,                                           00597000
&ZXRESTARTTOKEN       SETC  'INPUT'     SET IN/OUTPUT                   00597100
&XRESTARTTOKEN        SETC  'EXTRESTOKEN'       SET XVARIABLE           00597200
&ZXEXTRESTOKEN        SETC  'INPUT'     SET IN/OUTPUT                   00597300
&XEXTRESTOKEN         SETC  '&EXTRESTOKEN(1)'   SET XVARIABLE PARM      00597400
                      AIF   (N'&EXTRESTOKEN GT 1).ZG20C                 00597500
&XEXTRESTOKEN         SETC  '&EXTRESTOKEN'      SET XVARIABLE PARM      00597600
.ZG20C                AIF   (K'&XEXTRESTOKEN GT 0).ZG20D  ONE PARM      00597700
&ZXRESTARTTOKEN       SETC  ''          RESET IN/OUTPUT                 00597800
&ZXEXTRESTOKEN        SETC  ''          RESET IN/OUTPUT                 00597900
&ZMS                  SETC  'WHEN "READ_MULT" IS SPECIFIED'  *KRQDA*    00598000
&ZMS                  SETC  '&ZMS , "EXTRESTOKEN" KEY AND ITS'          00598100
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00598200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00598300
.ZG20D                ANOP  ,                                           00598400
.*------------------------------------------------------------------    00598500
.***AG.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED           00598600
                      AIF   (K'&XRESTARTTOKEN GT 0).ZG21B               00598700
&ZXRESTARTTOKEN       SETC  'INPUT'     SET IN/OUTPUT                   00598800
&XRESTARTTOKEN        SETC  'RESTOKEN'  SET DEFAULT                     00598900
&ZXRESTOKEN           SETC  'INPUT'     SET IN/OUTPUT                   00599000
&XRESTOKEN            SETC  'NO_RESTOKEN'       SET DEFAULT PARM        00599100
.ZG21B                ANOP  ,                                           00599200
.*-------------------------------------------------------------------   00599300
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE                 00599400
                      AIF   (K'&ZXEXTRESTOKEN LE 0).ZG21R  NOT I/O      00599500
         AIF   ('&XEXTRESTOKEN' EQ 'NO_RESTOKEN').ZG21R                 00599600
                      AIF   ('&XEXTRESTOKEN'(1,1) NE '(').ZG21R         00599700
&ZCGPR                SETC  '&XEXTRESTOKEN'(2,K'&XEXTRESTOKEN-2)        00599800
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG21P                00599900
                      AIF   (K'&ZCGPR GT 2).ZG21Q                       00600000
                      AIF   ('&ZCGPR' EQ '0').ZG21Q                     00600100
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00600200
                      AIF   (T'&ZCGPR NE 'N').ZG21Q  INVALID REG NAME   00600300
.ZG21P                ANOP  ,                                           00600400
                      AIF   (T'&ZCGPR NE 'N').ZG21R  NON NUMERIC        00600500
                      AIF   ('&ZCGPR' LT '2').ZG21Q                     00600600
                      AIF   ('&ZCGPR' LE '12').ZG21R                    00600700
.ZG21Q                ANOP  ,                                           00600800
&ZMS                  SETC  '"EXTRESTOKEN='     *KGPRA* MNOTE           00600900
&ZMS                  SETC  '&ZMS.&EXTRESTOKEN"'                        00601000
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00601100
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00601200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00601300
.ZG21R                ANOP  ,                                           00601400
.*-------------------------------------------------------------------   00601500
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00601600
.ZG19                 AIF   ('&XRESTARTTOKEN' NE 'RESTOKEN').ZG20       00601700
.*-------------------------------------------------------------------   00601800
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE                 00601900
                      AIF   (K'&ZXRESTOKEN LE 0).ZG19R  NOT I/O         00602000
         AIF   ('&XRESTOKEN' EQ 'NO_RESTOKEN').ZG19R                    00602100
                      AIF   ('&XRESTOKEN'(1,1) NE '(').ZG19R            00602200
&ZCGPR                SETC  '&XRESTOKEN'(2,K'&XRESTOKEN-2)              00602300
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG19P                00602400
                      AIF   (K'&ZCGPR GT 2).ZG19Q                       00602500
                      AIF   ('&ZCGPR' EQ '0').ZG19Q                     00602600
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00602700
                      AIF   (T'&ZCGPR NE 'N').ZG19Q  INVALID REG NAME   00602800
.ZG19P                ANOP  ,                                           00602900
                      AIF   (T'&ZCGPR NE 'N').ZG19R  NON NUMERIC        00603000
                      AIF   ('&ZCGPR' LT '2').ZG19Q                     00603100
                      AIF   ('&ZCGPR' LE '12').ZG19R                    00603200
.ZG19Q                ANOP  ,                                           00603300
&ZMS                  SETC  '"RESTOKEN='        *KGPRA* MNOTE           00603400
&ZMS                  SETC  '&ZMS.&RESTOKEN"'                           00603500
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00603600
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00603700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00603800
.ZG19R                ANOP  ,                                           00603900
.*-------------------------------------------------------------------   00604000
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00604100
.ZG20                 AIF   ('&XRESTARTTOKEN' NE 'EXTRESTOKEN').ZG21    00604200
.*-------------------------------------------------------------------   00604300
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE                 00604400
                      AIF   (K'&ZXEXTRESTOKEN LE 0).ZG20R  NOT I/O      00604500
         AIF   ('&XEXTRESTOKEN' EQ 'NO_EXTRESTOKEN').ZG20R              00604600
                      AIF   ('&XEXTRESTOKEN'(1,1) NE '(').ZG20R         00604700
&ZCGPR                SETC  '&XEXTRESTOKEN'(2,K'&XEXTRESTOKEN-2)        00604800
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG20P                00604900
                      AIF   (K'&ZCGPR GT 2).ZG20Q                       00605000
                      AIF   ('&ZCGPR' EQ '0').ZG20Q                     00605100
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00605200
                      AIF   (T'&ZCGPR NE 'N').ZG20Q  INVALID REG NAME   00605300
.ZG20P                ANOP  ,                                           00605400
                      AIF   (T'&ZCGPR NE 'N').ZG20R  NON NUMERIC        00605500
                      AIF   ('&ZCGPR' LT '2').ZG20Q                     00605600
                      AIF   ('&ZCGPR' LE '12').ZG20R                    00605700
.ZG20Q                ANOP  ,                                           00605800
&ZMS                  SETC  '"EXTRESTOKEN='     *KGPRA* MNOTE           00605900
&ZMS                  SETC  '&ZMS.&EXTRESTOKEN"'                        00606000
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00606100
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00606200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00606300
.ZG20R                ANOP  ,                                           00606400
.*-------------------------------------------------------------------   00606500
.***AG.KMEKY15 NAME, OPT INPUT, ME KEYS -END                            00606600
.ZG21                 ANOP  ,           END MUTUALLY EXCLUSIVE KEYS     00606700
.*-------------------------------------------------------------------   00606800
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00606900
.ZG22                 ANOP  ,                                           00607000
&ZTLC                 SETC 'READ_LCONTROLS'                             00607100
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG23             00607200
&XREQUEST             SETC  'READ_LCONTROLS'    SET KEYWORD             00607300
                      AIF   (N'&REQUEST LE 1).ZG22A  CK NUM             00607400
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00607500
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00607600
&ZMS                  SETC  '&ZMS "REQUEST"'                            00607700
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00607800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00607900
.ZG22A                ANOP  ,                                           00608000
.*------------------------------------------------------------------    00608100
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00608200
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00608300
.ZG22A0               AIF   (K'&TYPE LE 0).ZG22A1  OK                   00608400
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00608500
.ZG22A1               AIF   (K'&RESTOKEN LE 0).ZG22A2  OK               00608600
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00608700
.ZG22A2               AIF   (K'&EXTRESTOKEN LE 0).ZG22A3  OK            00608800
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00608900
.ZG22A3               AIF   (K'&ENTRYTYPE LE 0).ZG22A4  OK              00609000
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00609100
.ZG22A4               AIF   (K'&ELEMNUM LE 0).ZG22A5  OK                00609200
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00609300
.ZG22A5               AIF   (K'&LISTLIMIT LE 0).ZG22A6  OK              00609400
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00609500
.ZG22A6               AIF   (K'&LISTDESC LE 0).ZG22A7  OK               00609600
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00609700
.ZG22A7               AIF   (K'&LISTKEY LE 0).ZG22A8  OK                00609800
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00609900
.ZG22A8               AIF   (K'&MAXLISTKEY LE 0).ZG22A9  OK             00610000
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00610100
.ZG22A9               AIF   (K'&SETCURSOR LE 0).ZG22A10  OK             00610200
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00610300
.ZG22A10              AIF   (K'&MOVETOLIST LE 0).ZG22A11  OK            00610400
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00610500
.ZG22A11              AIF   (K'&MOVETOKEY LE 0).ZG22A12  OK             00610600
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00610700
.ZG22A12              AIF   (K'&MOVETOPOS LE 0).ZG22A13  OK             00610800
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00610900
.ZG22A13              AIF   (K'&DATAOPER LE 0).ZG22A14  OK              00611000
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00611100
.ZG22A14              AIF   (K'&LISTTYPE LE 0).ZG22A15  OK              00611200
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00611300
.ZG22A15              AIF   (K'&FIRSTELEM LE 0).ZG22A16  OK             00611400
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00611500
.ZG22A16              AIF   (K'&LASTELEM LE 0).ZG22A17  OK              00611600
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00611700
.ZG22A17              AIF   (K'&ACTION LE 0).ZG22A18  OK                00611800
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00611900
.ZG22A18              AIF   (K'&VECTORINDEX LE 0).ZG22A19  OK           00612000
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00612100
.ZG22A19              AIF   (K'&DRIVEEXIT LE 0).ZG22A20  OK             00612200
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00612300
.ZG22A20              AIF   (K'&UNC LE 0).ZG22A21  OK                   00612400
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00612500
.ZG22A21              AIF   (K'&STARTINDEX LE 0).ZG22A22  OK            00612600
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00612700
.ZG22A22              AIF   (K'&ENDINDEX LE 0).ZG22A23  OK              00612800
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00612900
.ZG22A23              AIF   (K'&MOSVECTOR LE 0).ZG22A24  OK             00613000
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00613100
.ZG22A24              AIF   (K'&ZCVAL LE 0).ZG22A25  OK                 00613200
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00613300
                      AIF  (K'&ZCVAL LE 160).ZG22A25A                   00613400
&ZCVAL                SETC '&ZCVAL'(1,160)                              00613500
&ZCVAL                SETC '&ZCVAL....'                                 00613600
.ZG22A25A             ANOP                                              00613700
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00613800
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00613900
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00614000
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00614100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00614200
.ZG22A25              ANOP  ,                                           00614300
.*-------------------------------------------------------------------   00614400
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00614500
.ZG23                 ANOP  ,                                           00614600
&ZTLC                 SETC 'READ_EQCONTROLS'                            00614700
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG24             00614800
&XREQUEST             SETC  'READ_EQCONTROLS'   SET KEYWORD             00614900
                      AIF   (N'&REQUEST LE 1).ZG23A  CK NUM             00615000
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00615100
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00615200
&ZMS                  SETC  '&ZMS "REQUEST"'                            00615300
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00615400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00615500
.ZG23A                ANOP  ,                                           00615600
.*------------------------------------------------------------------    00615700
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00615800
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00615900
.ZG23A0               AIF   (K'&TYPE LE 0).ZG23A1  OK                   00616000
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00616100
.ZG23A1               AIF   (K'&RESTOKEN LE 0).ZG23A2  OK               00616200
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00616300
.ZG23A2               AIF   (K'&EXTRESTOKEN LE 0).ZG23A3  OK            00616400
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00616500
.ZG23A3               AIF   (K'&ENTRYTYPE LE 0).ZG23A4  OK              00616600
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00616700
.ZG23A4               AIF   (K'&ELEMNUM LE 0).ZG23A5  OK                00616800
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00616900
.ZG23A5               AIF   (K'&LISTLIMIT LE 0).ZG23A6  OK              00617000
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00617100
.ZG23A6               AIF   (K'&LISTDESC LE 0).ZG23A7  OK               00617200
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00617300
.ZG23A7               AIF   (K'&LISTKEY LE 0).ZG23A8  OK                00617400
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00617500
.ZG23A8               AIF   (K'&MAXLISTKEY LE 0).ZG23A9  OK             00617600
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00617700
.ZG23A9               AIF   (K'&SETCURSOR LE 0).ZG23A10  OK             00617800
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00617900
.ZG23A10              AIF   (K'&MOVETOLIST LE 0).ZG23A11  OK            00618000
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00618100
.ZG23A11              AIF   (K'&MOVETOKEY LE 0).ZG23A12  OK             00618200
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00618300
.ZG23A12              AIF   (K'&MOVETOPOS LE 0).ZG23A13  OK             00618400
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00618500
.ZG23A13              AIF   (K'&DATAOPER LE 0).ZG23A14  OK              00618600
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00618700
.ZG23A14              AIF   (K'&LISTTYPE LE 0).ZG23A15  OK              00618800
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00618900
.ZG23A15              AIF   (K'&FIRSTELEM LE 0).ZG23A16  OK             00619000
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00619100
.ZG23A16              AIF   (K'&LASTELEM LE 0).ZG23A17  OK              00619200
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00619300
.ZG23A17              AIF   (K'&ACTION LE 0).ZG23A18  OK                00619400
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00619500
.ZG23A18              AIF   (K'&VECTORINDEX LE 0).ZG23A19  OK           00619600
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00619700
.ZG23A19              AIF   (K'&DRIVEEXIT LE 0).ZG23A20  OK             00619800
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00619900
.ZG23A20              AIF   (K'&UNC LE 0).ZG23A21  OK                   00620000
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00620100
.ZG23A21              AIF   (K'&STARTINDEX LE 0).ZG23A22  OK            00620200
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00620300
.ZG23A22              AIF   (K'&ENDINDEX LE 0).ZG23A23  OK              00620400
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00620500
.ZG23A23              AIF   (K'&MOSVECTOR LE 0).ZG23A24  OK             00620600
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00620700
.ZG23A24              AIF   (K'&ZCVAL LE 0).ZG23A25  OK                 00620800
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00620900
                      AIF  (K'&ZCVAL LE 160).ZG23A25A                   00621000
&ZCVAL                SETC '&ZCVAL'(1,160)                              00621100
&ZCVAL                SETC '&ZCVAL....'                                 00621200
.ZG23A25A             ANOP                                              00621300
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00621400
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00621500
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00621600
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00621700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00621800
.ZG23A25              ANOP  ,                                           00621900
.*-------------------------------------------------------------------   00622000
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00622100
.ZG24                 ANOP  ,                                           00622200
&ZTLC                 SETC 'READ_EMCONTROLS'                            00622300
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG25             00622400
&XREQUEST             SETC  'READ_EMCONTROLS'   SET KEYWORD             00622500
                      AIF   (N'&REQUEST LE 1).ZG24A  CK NUM             00622600
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00622700
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00622800
&ZMS                  SETC  '&ZMS "REQUEST"'                            00622900
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00623000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00623100
.ZG24A                ANOP  ,                                           00623200
.*------------------------------------------------------------------    00623300
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00623400
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00623500
.ZG24A0               AIF   (K'&TYPE LE 0).ZG24A1  OK                   00623600
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00623700
.ZG24A1               AIF   (K'&RESTOKEN LE 0).ZG24A2  OK               00623800
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00623900
.ZG24A2               AIF   (K'&EXTRESTOKEN LE 0).ZG24A3  OK            00624000
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00624100
.ZG24A3               AIF   (K'&ENTRYTYPE LE 0).ZG24A4  OK              00624200
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00624300
.ZG24A4               AIF   (K'&ELEMNUM LE 0).ZG24A5  OK                00624400
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00624500
.ZG24A5               AIF   (K'&LISTLIMIT LE 0).ZG24A6  OK              00624600
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00624700
.ZG24A6               AIF   (K'&LISTDESC LE 0).ZG24A7  OK               00624800
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00624900
.ZG24A7               AIF   (K'&LISTKEY LE 0).ZG24A8  OK                00625000
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00625100
.ZG24A8               AIF   (K'&MAXLISTKEY LE 0).ZG24A9  OK             00625200
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00625300
.ZG24A9               AIF   (K'&SETCURSOR LE 0).ZG24A10  OK             00625400
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00625500
.ZG24A10              AIF   (K'&MOVETOLIST LE 0).ZG24A11  OK            00625600
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00625700
.ZG24A11              AIF   (K'&MOVETOKEY LE 0).ZG24A12  OK             00625800
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00625900
.ZG24A12              AIF   (K'&MOVETOPOS LE 0).ZG24A13  OK             00626000
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00626100
.ZG24A13              AIF   (K'&DATAOPER LE 0).ZG24A14  OK              00626200
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00626300
.ZG24A14              AIF   (K'&LISTTYPE LE 0).ZG24A15  OK              00626400
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00626500
.ZG24A15              AIF   (K'&FIRSTELEM LE 0).ZG24A16  OK             00626600
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00626700
.ZG24A16              AIF   (K'&LASTELEM LE 0).ZG24A17  OK              00626800
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00626900
.ZG24A17              AIF   (K'&ACTION LE 0).ZG24A18  OK                00627000
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00627100
.ZG24A18              AIF   (K'&VECTORINDEX LE 0).ZG24A19  OK           00627200
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00627300
.ZG24A19              AIF   (K'&DRIVEEXIT LE 0).ZG24A20  OK             00627400
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00627500
.ZG24A20              AIF   (K'&UNC LE 0).ZG24A21  OK                   00627600
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00627700
.ZG24A21              AIF   (K'&STARTINDEX LE 0).ZG24A22  OK            00627800
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00627900
.ZG24A22              AIF   (K'&ENDINDEX LE 0).ZG24A23  OK              00628000
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00628100
.ZG24A23              AIF   (K'&MOSVECTOR LE 0).ZG24A24  OK             00628200
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00628300
.ZG24A24              AIF   (K'&ZCVAL LE 0).ZG24A25  OK                 00628400
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00628500
                      AIF  (K'&ZCVAL LE 160).ZG24A25A                   00628600
&ZCVAL                SETC '&ZCVAL'(1,160)                              00628700
&ZCVAL                SETC '&ZCVAL....'                                 00628800
.ZG24A25A             ANOP                                              00628900
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00629000
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00629100
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00629200
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00629300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00629400
.ZG24A25              ANOP  ,                                           00629500
.*-------------------------------------------------------------------   00629600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00629700
.ZG25                 ANOP  ,                                           00629800
&ZTLC                 SETC 'DEQ_EVENTQ'                                 00629900
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG26             00630000
&XREQUEST             SETC  'DEQ_EVENTQ'        SET KEYWORD             00630100
                      AIF   (N'&REQUEST LE 1).ZG25A  CK NUM             00630200
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00630300
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00630400
&ZMS                  SETC  '&ZMS "REQUEST"'                            00630500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00630600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00630700
.ZG25A                ANOP  ,                                           00630800
.*------------------------------------------------------------------    00630900
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00631000
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00631100
.ZG25A0               AIF   (K'&TYPE LE 0).ZG25A1  OK                   00631200
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00631300
.ZG25A1               AIF   (K'&RESTOKEN LE 0).ZG25A2  OK               00631400
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00631500
.ZG25A2               AIF   (K'&EXTRESTOKEN LE 0).ZG25A3  OK            00631600
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00631700
.ZG25A3               AIF   (K'&ENTRYTYPE LE 0).ZG25A4  OK              00631800
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00631900
.ZG25A4               AIF   (K'&ELEMNUM LE 0).ZG25A5  OK                00632000
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00632100
.ZG25A5               AIF   (K'&LISTLIMIT LE 0).ZG25A6  OK              00632200
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00632300
.ZG25A6               AIF   (K'&LISTDESC LE 0).ZG25A7  OK               00632400
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00632500
.ZG25A7               AIF   (K'&LISTKEY LE 0).ZG25A8  OK                00632600
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00632700
.ZG25A8               AIF   (K'&MAXLISTKEY LE 0).ZG25A9  OK             00632800
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00632900
.ZG25A9               AIF   (K'&SETCURSOR LE 0).ZG25A10  OK             00633000
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00633100
.ZG25A10              AIF   (K'&MOVETOLIST LE 0).ZG25A11  OK            00633200
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00633300
.ZG25A11              AIF   (K'&MOVETOKEY LE 0).ZG25A12  OK             00633400
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00633500
.ZG25A12              AIF   (K'&MOVETOPOS LE 0).ZG25A13  OK             00633600
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00633700
.ZG25A13              AIF   (K'&DATAOPER LE 0).ZG25A14  OK              00633800
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00633900
.ZG25A14              AIF   (K'&LISTTYPE LE 0).ZG25A15  OK              00634000
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00634100
.ZG25A15              AIF   (K'&FIRSTELEM LE 0).ZG25A16  OK             00634200
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00634300
.ZG25A16              AIF   (K'&LASTELEM LE 0).ZG25A17  OK              00634400
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00634500
.ZG25A17              AIF   (K'&ACTION LE 0).ZG25A18  OK                00634600
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00634700
.ZG25A18              AIF   (K'&VECTORINDEX LE 0).ZG25A19  OK           00634800
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00634900
.ZG25A19              AIF   (K'&DRIVEEXIT LE 0).ZG25A20  OK             00635000
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00635100
.ZG25A20              AIF   (K'&UNC LE 0).ZG25A21  OK                   00635200
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00635300
.ZG25A21              AIF   (K'&STARTINDEX LE 0).ZG25A22  OK            00635400
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00635500
.ZG25A22              AIF   (K'&ENDINDEX LE 0).ZG25A23  OK              00635600
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00635700
.ZG25A23              AIF   (K'&MOSVECTOR LE 0).ZG25A24  OK             00635800
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00635900
.ZG25A24              AIF   (K'&ZCVAL LE 0).ZG25A25  OK                 00636000
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00636100
                      AIF  (K'&ZCVAL LE 160).ZG25A25A                   00636200
&ZCVAL                SETC '&ZCVAL'(1,160)                              00636300
&ZCVAL                SETC '&ZCVAL....'                                 00636400
.ZG25A25A             ANOP                                              00636500
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00636600
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00636700
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00636800
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00636900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00637000
.ZG25A25              ANOP  ,                                           00637100
.*-------------------------------------------------------------------   00637200
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00637300
.ZG26                 ANOP  ,                                           00637400
&ZTLC                 SETC 'WRITE'                                      00637500
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG36             00637600
&XREQUEST             SETC  'WRITE'     SET KEYWORD                     00637700
                      AIF   (N'&REQUEST LE 1).ZG26A  CK NUM             00637800
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00637900
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00638000
&ZMS                  SETC  '&ZMS "REQUEST"'                            00638100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00638200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00638300
.ZG26A                ANOP  ,                                           00638400
.*------------------------------------------------------------------    00638500
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00638600
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00638700
.ZG26A0               AIF   (K'&TYPE LE 0).ZG26A1  OK                   00638800
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00638900
.ZG26A1               AIF   (K'&RESTOKEN LE 0).ZG26A2  OK               00639000
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00639100
.ZG26A2               AIF   (K'&EXTRESTOKEN LE 0).ZG26A3  OK            00639200
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00639300
.ZG26A3               AIF   (K'&LISTLIMIT LE 0).ZG26A4  OK              00639400
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00639500
.ZG26A4               AIF   (K'&LISTDESC LE 0).ZG26A5  OK               00639600
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00639700
.ZG26A5               AIF   (K'&LISTKEY LE 0).ZG26A6  OK                00639800
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00639900
.ZG26A6               AIF   (K'&MAXLISTKEY LE 0).ZG26A7  OK             00640000
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00640100
.ZG26A7               AIF   (K'&SETCURSOR LE 0).ZG26A8  OK              00640200
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00640300
.ZG26A8               AIF   (K'&MOVETOLIST LE 0).ZG26A9  OK             00640400
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00640500
.ZG26A9               AIF   (K'&MOVETOKEY LE 0).ZG26A10  OK             00640600
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00640700
.ZG26A10              AIF   (K'&MOVETOPOS LE 0).ZG26A11  OK             00640800
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00640900
.ZG26A11              AIF   (K'&DATAOPER LE 0).ZG26A12  OK              00641000
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00641100
.ZG26A12              AIF   (K'&LISTTYPE LE 0).ZG26A13  OK              00641200
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00641300
.ZG26A13              AIF   (K'&FIRSTELEM LE 0).ZG26A14  OK             00641400
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00641500
.ZG26A14              AIF   (K'&LASTELEM LE 0).ZG26A15  OK              00641600
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00641700
.ZG26A15              AIF   (K'&ACTION LE 0).ZG26A16  OK                00641800
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00641900
.ZG26A16              AIF   (K'&VECTORINDEX LE 0).ZG26A17  OK           00642000
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00642100
.ZG26A17              AIF   (K'&DRIVEEXIT LE 0).ZG26A18  OK             00642200
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00642300
.ZG26A18              AIF   (K'&UNC LE 0).ZG26A19  OK                   00642400
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00642500
.ZG26A19              AIF   (K'&STARTINDEX LE 0).ZG26A20  OK            00642600
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00642700
.ZG26A20              AIF   (K'&ENDINDEX LE 0).ZG26A21  OK              00642800
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00642900
.ZG26A21              AIF   (K'&MOSVECTOR LE 0).ZG26A22  OK             00643000
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00643100
.ZG26A22              AIF   (K'&ZCVAL LE 0).ZG26A23  OK                 00643200
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00643300
                      AIF  (K'&ZCVAL LE 160).ZG26A23A                   00643400
&ZCVAL                SETC '&ZCVAL'(1,160)                              00643500
&ZCVAL                SETC '&ZCVAL....'                                 00643600
.ZG26A23A             ANOP                                              00643700
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00643800
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00643900
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00644000
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00644100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00644200
.ZG26A23              ANOP  ,                                           00644300
.*----------------------------------------------------------------***   00644400
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00644500
                      AIF   (N'&ENTRYTYPE LE 1).ZG28A  CK NUM           00644600
&ZMS                  SETC  '"ENTRYTYPE='       *KPOSA* MNOTE           00644700
&ZMS                  SETC  '&ZMS.&ENTRYTYPE"'                          00644800
&ZMS                  SETC  '&ZMS "ENTRYTYPE"'                          00644900
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00645000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00645100
.ZG28A                ANOP  ,                                           00645200
.*-------------------------------------------------------------------   00645300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00645400
&XENTRYTYPE           SETC  ''          INITIALIZE XVARIABLE            00645500
.ZG29A   AIF   ('&ENTRYTYPE(1)' NE 'ANY').ZG30A                         00645600
&XENTRYTYPE           SETC  'ANY'       SET KEYWORD                     00645700
.*-------------------------------------------------------------------   00645800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00645900
.ZG30A   AIF   ('&ENTRYTYPE(1)' NE 'OLD').ZG31A                         00646000
&XENTRYTYPE           SETC  'OLD'       SET KEYWORD                     00646100
.*-------------------------------------------------------------------   00646200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00646300
.ZG31A   AIF   ('&ENTRYTYPE(1)' NE 'NEW').ZG32A                         00646400
&XENTRYTYPE           SETC  'NEW'       SET KEYWORD                     00646500
.*-------------------------------------------------------------------   00646600
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00646700
.ZG32A                AIF   (K'&XENTRYTYPE GT 0).ZG32C  KEYWORD         00646800
                      AIF   (K'&ENTRYTYPE(1) LE 0).ZG32B                00646900
&ZMS                  SETC  '"ENTRYTYPE='       *KUKWA* MNOTE           00647000
&ZMS                  SETC  '&ZMS.&ENTRYTYPE"'                          00647100
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00647200
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00647300
&ZMS                  SETC  '&ZMS "ANY",'                               00647400
&ZMS                  SETC  '&ZMS "OLD",'                               00647500
&ZMS                  SETC  '&ZMS OR "NEW".'                            00647600
                      MNOTE 8,' &ZMS '                                  00647700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00647800
.ZG32B                ANOP  ,                                           00647900
&XENTRYTYPE           SETC  'ANY'       SET DEFAULT KEYWORD             00648000
.ZG32C                ANOP  ,                                           00648100
&ZXENTRYTYPE          SETC  'INPUT'     SET IN/OUTPUT                   00648200
.*----------------------------------------------------------------***   00648300
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00648400
                      AIF   (N'&ELEMNUM LE 1).ZG34A  CK NUM             00648500
&ZMS                  SETC  '"ELEMNUM='         *KPOSA* MNOTE           00648600
&ZMS                  SETC  '&ZMS.&ELEMNUM"'                            00648700
&ZMS                  SETC  '&ZMS "ELEMNUM"'                            00648800
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00648900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00649000
.ZG34A                ANOP  ,                                           00649100
.*-------------------------------------------------------------------   00649200
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00649300
&ZXELEMNUM            SETC  'INPUT'     SET IN/OUTPUT                   00649400
&XELEMNUM             SETC  'NO_ELEMNUM'                                00649500
                      AIF   (K'&ELEMNUM(1) LE 0).ZG34B  PARM            00649600
&XELEMNUM             SETC  '&ELEMNUM(1)'       SET XVARIABLE           00649700
                      AIF   (N'&ELEMNUM GT 1).ZG34B  MULTI PARMS        00649800
&XELEMNUM             SETC  '&ELEMNUM'  SET XVARIABLE                   00649900
.ZG34B                ANOP  ,                                           00650000
.*-------------------------------------------------------------------   00650100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00650200
                      AIF   (K'&ZXELEMNUM LE 0).ZG34R  NOT I/O          00650300
         AIF   ('&XELEMNUM' EQ 'NO_ELEMNUM').ZG34R                      00650400
                      AIF   ('&XELEMNUM'(1,1) NE '(').ZG34R             00650500
&ZCGPR                SETC  '&XELEMNUM'(2,K'&XELEMNUM-2)                00650600
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG34P                00650700
                      AIF   (K'&ZCGPR GT 2).ZG34Q                       00650800
                      AIF   ('&ZCGPR' EQ '0').ZG34Q                     00650900
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00651000
                      AIF   (T'&ZCGPR NE 'N').ZG34Q  INVALID REG NAME   00651100
.ZG34P                ANOP  ,                                           00651200
                      AIF   (T'&ZCGPR NE 'N').ZG34R  NON NUMERIC        00651300
                      AIF   ('&ZCGPR' LT '2').ZG34Q                     00651400
                      AIF   ('&ZCGPR' LE '12').ZG34R                    00651500
.ZG34Q                ANOP  ,                                           00651600
&ZMS                  SETC  '"ELEMNUM='         *KGPRA* MNOTE           00651700
&ZMS                  SETC  '&ZMS.&ELEMNUM"'                            00651800
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00651900
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00652000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00652100
.ZG34R                ANOP  ,                                           00652200
.*-------------------------------------------------------------------   00652300
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00652400
.ZG36                 ANOP  ,                                           00652500
&ZTLC                 SETC 'WRITE_LCONTROLS'                            00652600
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG54             00652700
&XREQUEST             SETC  'WRITE_LCONTROLS'   SET KEYWORD             00652800
                      AIF   (N'&REQUEST LE 1).ZG36A  CK NUM             00652900
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00653000
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00653100
&ZMS                  SETC  '&ZMS "REQUEST"'                            00653200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00653300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00653400
.ZG36A                ANOP  ,                                           00653500
.*------------------------------------------------------------------    00653600
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00653700
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00653800
.ZG36A0               AIF   (K'&TYPE LE 0).ZG36A1  OK                   00653900
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00654000
.ZG36A1               AIF   (K'&RESTOKEN LE 0).ZG36A2  OK               00654100
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00654200
.ZG36A2               AIF   (K'&EXTRESTOKEN LE 0).ZG36A3  OK            00654300
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00654400
.ZG36A3               AIF   (K'&ENTRYTYPE LE 0).ZG36A4  OK              00654500
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00654600
.ZG36A4               AIF   (K'&ELEMNUM LE 0).ZG36A5  OK                00654700
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00654800
.ZG36A5               AIF   (K'&MOVETOLIST LE 0).ZG36A6  OK             00654900
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00655000
.ZG36A6               AIF   (K'&MOVETOKEY LE 0).ZG36A7  OK              00655100
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00655200
.ZG36A7               AIF   (K'&MOVETOPOS LE 0).ZG36A8  OK              00655300
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00655400
.ZG36A8               AIF   (K'&DATAOPER LE 0).ZG36A9  OK               00655500
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00655600
.ZG36A9               AIF   (K'&LISTTYPE LE 0).ZG36A10  OK              00655700
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00655800
.ZG36A10              AIF   (K'&FIRSTELEM LE 0).ZG36A11  OK             00655900
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00656000
.ZG36A11              AIF   (K'&LASTELEM LE 0).ZG36A12  OK              00656100
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00656200
.ZG36A12              AIF   (K'&ACTION LE 0).ZG36A13  OK                00656300
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00656400
.ZG36A13              AIF   (K'&VECTORINDEX LE 0).ZG36A14  OK           00656500
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00656600
.ZG36A14              AIF   (K'&DRIVEEXIT LE 0).ZG36A15  OK             00656700
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00656800
.ZG36A15              AIF   (K'&UNC LE 0).ZG36A16  OK                   00656900
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00657000
.ZG36A16              AIF   (K'&STARTINDEX LE 0).ZG36A17  OK            00657100
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00657200
.ZG36A17              AIF   (K'&ENDINDEX LE 0).ZG36A18  OK              00657300
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00657400
.ZG36A18              AIF   (K'&MOSVECTOR LE 0).ZG36A19  OK             00657500
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00657600
.ZG36A19              AIF   (K'&ZCVAL LE 0).ZG36A20  OK                 00657700
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00657800
                      AIF  (K'&ZCVAL LE 160).ZG36A20A                   00657900
&ZCVAL                SETC '&ZCVAL'(1,160)                              00658000
&ZCVAL                SETC '&ZCVAL....'                                 00658100
.ZG36A20A             ANOP                                              00658200
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00658300
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00658400
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00658500
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00658600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00658700
.ZG36A20              ANOP  ,                                           00658800
.*----------------------------------------------------------------***   00658900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00659000
                      AIF   (N'&LISTLIMIT LE 1).ZG38A  CK NUM           00659100
&ZMS                  SETC  '"LISTLIMIT='       *KPOSA* MNOTE           00659200
&ZMS                  SETC  '&ZMS.&LISTLIMIT"'                          00659300
&ZMS                  SETC  '&ZMS "LISTLIMIT"'                          00659400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00659500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00659600
.ZG38A                ANOP  ,                                           00659700
.*-------------------------------------------------------------------   00659800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00659900
&ZXLISTLIMIT          SETC  'INPUT'     SET IN/OUTPUT                   00660000
&XLISTLIMIT           SETC  'NO_LISTLIMIT'                              00660100
                      AIF   (K'&LISTLIMIT(1) LE 0).ZG38B  PARM          00660200
&XLISTLIMIT           SETC  '&LISTLIMIT(1)'     SET XVARIABLE           00660300
                      AIF   (N'&LISTLIMIT GT 1).ZG38B  MULTI PARMS      00660400
&XLISTLIMIT           SETC  '&LISTLIMIT'        SET XVARIABLE           00660500
.ZG38B                ANOP  ,                                           00660600
.*-------------------------------------------------------------------   00660700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00660800
                      AIF   (K'&ZXLISTLIMIT LE 0).ZG38R  NOT I/O        00660900
         AIF   ('&XLISTLIMIT' EQ 'NO_LISTLIMIT').ZG38R                  00661000
                      AIF   ('&XLISTLIMIT'(1,1) NE '(').ZG38R           00661100
&ZCGPR                SETC  '&XLISTLIMIT'(2,K'&XLISTLIMIT-2)            00661200
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG38P                00661300
                      AIF   (K'&ZCGPR GT 2).ZG38Q                       00661400
                      AIF   ('&ZCGPR' EQ '0').ZG38Q                     00661500
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00661600
                      AIF   (T'&ZCGPR NE 'N').ZG38Q  INVALID REG NAME   00661700
.ZG38P                ANOP  ,                                           00661800
                      AIF   (T'&ZCGPR NE 'N').ZG38R  NON NUMERIC        00661900
                      AIF   ('&ZCGPR' LT '2').ZG38Q                     00662000
                      AIF   ('&ZCGPR' LE '12').ZG38R                    00662100
.ZG38Q                ANOP  ,                                           00662200
&ZMS                  SETC  '"LISTLIMIT='       *KGPRA* MNOTE           00662300
&ZMS                  SETC  '&ZMS.&LISTLIMIT"'                          00662400
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00662500
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00662600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00662700
.ZG38R                ANOP  ,                                           00662800
.*----------------------------------------------------------------***   00662900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00663000
                      AIF   (N'&LISTDESC LE 1).ZG41A  CK NUM            00663100
&ZMS                  SETC  '"LISTDESC='        *KPOSA* MNOTE           00663200
&ZMS                  SETC  '&ZMS.&LISTDESC"'                           00663300
&ZMS                  SETC  '&ZMS "LISTDESC"'                           00663400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00663500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00663600
.ZG41A                ANOP  ,                                           00663700
.*-------------------------------------------------------------------   00663800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00663900
&ZXLISTDESC           SETC  'INPUT'     SET IN/OUTPUT                   00664000
&XLISTDESC            SETC  'NO_LISTDESC'                               00664100
                      AIF   (K'&LISTDESC(1) LE 0).ZG41B  PARM           00664200
&XLISTDESC            SETC  '&LISTDESC(1)'      SET XVARIABLE           00664300
                      AIF   (N'&LISTDESC GT 1).ZG41B  MULTI PARMS       00664400
&XLISTDESC            SETC  '&LISTDESC'         SET XVARIABLE           00664500
.ZG41B                ANOP  ,                                           00664600
.*-------------------------------------------------------------------   00664700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00664800
                      AIF   (K'&ZXLISTDESC LE 0).ZG41R  NOT I/O         00664900
         AIF   ('&XLISTDESC' EQ 'NO_LISTDESC').ZG41R                    00665000
                      AIF   ('&XLISTDESC'(1,1) NE '(').ZG41R            00665100
&ZCGPR                SETC  '&XLISTDESC'(2,K'&XLISTDESC-2)              00665200
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG41P                00665300
                      AIF   (K'&ZCGPR GT 2).ZG41Q                       00665400
                      AIF   ('&ZCGPR' EQ '0').ZG41Q                     00665500
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00665600
                      AIF   (T'&ZCGPR NE 'N').ZG41Q  INVALID REG NAME   00665700
.ZG41P                ANOP  ,                                           00665800
                      AIF   (T'&ZCGPR NE 'N').ZG41R  NON NUMERIC        00665900
                      AIF   ('&ZCGPR' LT '2').ZG41Q                     00666000
                      AIF   ('&ZCGPR' LE '12').ZG41R                    00666100
.ZG41Q                ANOP  ,                                           00666200
&ZMS                  SETC  '"LISTDESC='        *KGPRA* MNOTE           00666300
&ZMS                  SETC  '&ZMS.&LISTDESC"'                           00666400
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00666500
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00666600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00666700
.ZG41R                ANOP  ,                                           00666800
.*----------------------------------------------------------------***   00666900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00667000
                      AIF   (N'&LISTKEY LE 1).ZG44A  CK NUM             00667100
&ZMS                  SETC  '"LISTKEY='         *KPOSA* MNOTE           00667200
&ZMS                  SETC  '&ZMS.&LISTKEY"'                            00667300
&ZMS                  SETC  '&ZMS "LISTKEY"'                            00667400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00667500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00667600
.ZG44A                ANOP  ,                                           00667700
.*-------------------------------------------------------------------   00667800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00667900
&ZXLISTKEY            SETC  'INPUT'     SET IN/OUTPUT                   00668000
&XLISTKEY             SETC  'NO_LISTKEY'                                00668100
                      AIF   (K'&LISTKEY(1) LE 0).ZG44B  PARM            00668200
&XLISTKEY             SETC  '&LISTKEY(1)'       SET XVARIABLE           00668300
                      AIF   (N'&LISTKEY GT 1).ZG44B  MULTI PARMS        00668400
&XLISTKEY             SETC  '&LISTKEY'  SET XVARIABLE                   00668500
.ZG44B                ANOP  ,                                           00668600
.*-------------------------------------------------------------------   00668700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00668800
                      AIF   (K'&ZXLISTKEY LE 0).ZG44R  NOT I/O          00668900
         AIF   ('&XLISTKEY' EQ 'NO_LISTKEY').ZG44R                      00669000
                      AIF   ('&XLISTKEY'(1,1) NE '(').ZG44R             00669100
&ZCGPR                SETC  '&XLISTKEY'(2,K'&XLISTKEY-2)                00669200
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG44P                00669300
                      AIF   (K'&ZCGPR GT 2).ZG44Q                       00669400
                      AIF   ('&ZCGPR' EQ '0').ZG44Q                     00669500
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00669600
                      AIF   (T'&ZCGPR NE 'N').ZG44Q  INVALID REG NAME   00669700
.ZG44P                ANOP  ,                                           00669800
                      AIF   (T'&ZCGPR NE 'N').ZG44R  NON NUMERIC        00669900
                      AIF   ('&ZCGPR' LT '2').ZG44Q                     00670000
                      AIF   ('&ZCGPR' LE '12').ZG44R                    00670100
.ZG44Q                ANOP  ,                                           00670200
&ZMS                  SETC  '"LISTKEY='         *KGPRA* MNOTE           00670300
&ZMS                  SETC  '&ZMS.&LISTKEY"'                            00670400
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00670500
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00670600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00670700
.ZG44R                ANOP  ,                                           00670800
.*----------------------------------------------------------------***   00670900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00671000
                      AIF   (N'&MAXLISTKEY LE 1).ZG47A  CK NUM          00671100
&ZMS                  SETC  '"MAXLISTKEY='      *KPOSA* MNOTE           00671200
&ZMS                  SETC  '&ZMS.&MAXLISTKEY"'                         00671300
&ZMS                  SETC  '&ZMS "MAXLISTKEY"'                         00671400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00671500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00671600
.ZG47A                ANOP  ,                                           00671700
.*-------------------------------------------------------------------   00671800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00671900
&ZXMAXLISTKEY         SETC  'INPUT'     SET IN/OUTPUT                   00672000
&XMAXLISTKEY          SETC  'NO_MAXLISTKEY'                             00672100
                      AIF   (K'&MAXLISTKEY(1) LE 0).ZG47B  PARM         00672200
&XMAXLISTKEY          SETC  '&MAXLISTKEY(1)'    SET XVARIABLE           00672300
                      AIF   (N'&MAXLISTKEY GT 1).ZG47B  MULTI PARMS     00672400
&XMAXLISTKEY          SETC  '&MAXLISTKEY'       SET XVARIABLE           00672500
.ZG47B                ANOP  ,                                           00672600
.*-------------------------------------------------------------------   00672700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00672800
                      AIF   (K'&ZXMAXLISTKEY LE 0).ZG47R  NOT I/O       00672900
         AIF   ('&XMAXLISTKEY' EQ 'NO_MAXLISTKEY').ZG47R                00673000
                      AIF   ('&XMAXLISTKEY'(1,1) NE '(').ZG47R          00673100
&ZCGPR                SETC  '&XMAXLISTKEY'(2,K'&XMAXLISTKEY-2)          00673200
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG47P                00673300
                      AIF   (K'&ZCGPR GT 2).ZG47Q                       00673400
                      AIF   ('&ZCGPR' EQ '0').ZG47Q                     00673500
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00673600
                      AIF   (T'&ZCGPR NE 'N').ZG47Q  INVALID REG NAME   00673700
.ZG47P                ANOP  ,                                           00673800
                      AIF   (T'&ZCGPR NE 'N').ZG47R  NON NUMERIC        00673900
                      AIF   ('&ZCGPR' LT '2').ZG47Q                     00674000
                      AIF   ('&ZCGPR' LE '12').ZG47R                    00674100
.ZG47Q                ANOP  ,                                           00674200
&ZMS                  SETC  '"MAXLISTKEY='      *KGPRA* MNOTE           00674300
&ZMS                  SETC  '&ZMS.&MAXLISTKEY"'                         00674400
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00674500
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00674600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00674700
.ZG47R                ANOP  ,                                           00674800
.*----------------------------------------------------------------***   00674900
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00675000
                      AIF   (N'&SETCURSOR LE 1).ZG50A  CK NUM           00675100
&ZMS                  SETC  '"SETCURSOR='       *KPOSA* MNOTE           00675200
&ZMS                  SETC  '&ZMS.&SETCURSOR"'                          00675300
&ZMS                  SETC  '&ZMS "SETCURSOR"'                          00675400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00675500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00675600
.ZG50A                ANOP  ,                                           00675700
.*-------------------------------------------------------------------   00675800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00675900
&XSETCURSOR           SETC  ''          INITIALIZE XVARIABLE            00676000
.ZG51A   AIF   ('&SETCURSOR(1)' NE 'HEAD').ZG52A                        00676100
&XSETCURSOR           SETC  'HEAD'      SET KEYWORD                     00676200
.*-------------------------------------------------------------------   00676300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00676400
.ZG52A   AIF   ('&SETCURSOR(1)' NE 'TAIL').ZG53A                        00676500
&XSETCURSOR           SETC  'TAIL'      SET KEYWORD                     00676600
.*-------------------------------------------------------------------   00676700
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00676800
.ZG53A                AIF   (K'&XSETCURSOR GT 0).ZG53C  KEYWORD         00676900
                      AIF   (K'&SETCURSOR(1) LE 0).ZG53B                00677000
&ZMS                  SETC  '"SETCURSOR='       *KUKWA* MNOTE           00677100
&ZMS                  SETC  '&ZMS.&SETCURSOR"'                          00677200
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00677300
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00677400
&ZMS                  SETC  '&ZMS "HEAD"'                               00677500
&ZMS                  SETC  '&ZMS OR "TAIL".'                           00677600
                      MNOTE 8,' &ZMS '                                  00677700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00677800
.ZG53B                ANOP  ,                                           00677900
&XSETCURSOR           SETC  'HEAD'      SET DEFAULT KEYWORD             00678000
.ZG53C                ANOP  ,                                           00678100
&ZXSETCURSOR          SETC  'INPUT'     SET IN/OUTPUT                   00678200
.*-------------------------------------------------------------------   00678300
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00678400
.ZG54                 ANOP  ,                                           00678500
&ZTLC                 SETC 'MOVE'                                       00678600
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG80             00678700
&XREQUEST             SETC  'MOVE'      SET KEYWORD                     00678800
                      AIF   (N'&REQUEST LE 1).ZG54A  CK NUM             00678900
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00679000
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00679100
&ZMS                  SETC  '&ZMS "REQUEST"'                            00679200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00679300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00679400
.ZG54A                ANOP  ,                                           00679500
.*------------------------------------------------------------------    00679600
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00679700
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00679800
.ZG54A0               AIF   (K'&TYPE LE 0).ZG54A1  OK                   00679900
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00680000
.ZG54A1               AIF   (K'&RESTOKEN LE 0).ZG54A2  OK               00680100
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00680200
.ZG54A2               AIF   (K'&EXTRESTOKEN LE 0).ZG54A3  OK            00680300
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00680400
.ZG54A3               AIF   (K'&LISTLIMIT LE 0).ZG54A4  OK              00680500
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00680600
.ZG54A4               AIF   (K'&LISTDESC LE 0).ZG54A5  OK               00680700
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00680800
.ZG54A5               AIF   (K'&LISTKEY LE 0).ZG54A6  OK                00680900
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00681000
.ZG54A6               AIF   (K'&MAXLISTKEY LE 0).ZG54A7  OK             00681100
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00681200
.ZG54A7               AIF   (K'&SETCURSOR LE 0).ZG54A8  OK              00681300
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00681400
.ZG54A8               AIF   (K'&LISTTYPE LE 0).ZG54A9  OK               00681500
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00681600
.ZG54A9               AIF   (K'&FIRSTELEM LE 0).ZG54A10  OK             00681700
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00681800
.ZG54A10              AIF   (K'&LASTELEM LE 0).ZG54A11  OK              00681900
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00682000
.ZG54A11              AIF   (K'&ACTION LE 0).ZG54A12  OK                00682100
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00682200
.ZG54A12              AIF   (K'&VECTORINDEX LE 0).ZG54A13  OK           00682300
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00682400
.ZG54A13              AIF   (K'&DRIVEEXIT LE 0).ZG54A14  OK             00682500
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00682600
.ZG54A14              AIF   (K'&UNC LE 0).ZG54A15  OK                   00682700
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00682800
.ZG54A15              AIF   (K'&STARTINDEX LE 0).ZG54A16  OK            00682900
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00683000
.ZG54A16              AIF   (K'&ENDINDEX LE 0).ZG54A17  OK              00683100
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00683200
.ZG54A17              AIF   (K'&MOSVECTOR LE 0).ZG54A18  OK             00683300
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00683400
.ZG54A18              AIF   (K'&ZCVAL LE 0).ZG54A19  OK                 00683500
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00683600
                      AIF  (K'&ZCVAL LE 160).ZG54A19A                   00683700
&ZCVAL                SETC '&ZCVAL'(1,160)                              00683800
&ZCVAL                SETC '&ZCVAL....'                                 00683900
.ZG54A19A             ANOP                                              00684000
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00684100
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00684200
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00684300
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00684400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00684500
.ZG54A19              ANOP  ,                                           00684600
.*----------------------------------------------------------------***   00684700
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00684800
                      AIF   (N'&MOVETOLIST LE 1).ZG56A  CK NUM          00684900
&ZMS                  SETC  '"MOVETOLIST='      *KPOSA* MNOTE           00685000
&ZMS                  SETC  '&ZMS.&MOVETOLIST"'                         00685100
&ZMS                  SETC  '&ZMS "MOVETOLIST"'                         00685200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00685300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00685400
.ZG56A                ANOP  ,                                           00685500
.*-------------------------------------------------------------------   00685600
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00685700
&ZXMOVETOLIST         SETC  'INPUT'     SET IN/OUTPUT                   00685800
&XMOVETOLIST          SETC  '&MOVETOLIST(1)'    SET XVARIABLE           00685900
                      AIF   (N'&MOVETOLIST GT 1).ZG56B  MULTI PARMS     00686000
&XMOVETOLIST          SETC  '&MOVETOLIST'       SET XVARIABLE           00686100
.ZG56B                AIF   (K'&MOVETOLIST(1) GT 0).ZG56C               00686200
&ZXMOVETOLIST         SETC  ''          RESET IN/OUTPUT                 00686300
&ZMS                  SETC  ' '         *KRQDA*                         00686400
&ZMS                  SETC  '&ZMS "MOVETOLIST" KEY AND ITS'             00686500
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00686600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00686700
.ZG56C                ANOP  ,                                           00686800
.*-------------------------------------------------------------------   00686900
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00687000
                      AIF   (K'&ZXMOVETOLIST LE 0).ZG56R  NOT I/O       00687100
                      AIF   ('&XMOVETOLIST'(1,1) NE '(').ZG56R          00687200
&ZCGPR                SETC  '&XMOVETOLIST'(2,K'&XMOVETOLIST-2)          00687300
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG56P                00687400
                      AIF   (K'&ZCGPR GT 2).ZG56Q                       00687500
                      AIF   ('&ZCGPR' EQ '0').ZG56Q                     00687600
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00687700
                      AIF   (T'&ZCGPR NE 'N').ZG56Q  INVALID REG NAME   00687800
.ZG56P                ANOP  ,                                           00687900
                      AIF   (T'&ZCGPR NE 'N').ZG56R  NON NUMERIC        00688000
                      AIF   ('&ZCGPR' LT '2').ZG56Q                     00688100
                      AIF   ('&ZCGPR' LE '12').ZG56R                    00688200
.ZG56Q                ANOP  ,                                           00688300
&ZMS                  SETC  '"MOVETOLIST='      *KGPRA* MNOTE           00688400
&ZMS                  SETC  '&ZMS.&MOVETOLIST"'                         00688500
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00688600
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00688700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00688800
.ZG56R                ANOP  ,                                           00688900
.*----------------------------------------------------------------***   00689000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00689100
                      AIF   (N'&MOVETOKEY LE 1).ZG59A  CK NUM           00689200
&ZMS                  SETC  '"MOVETOKEY='       *KPOSA* MNOTE           00689300
&ZMS                  SETC  '&ZMS.&MOVETOKEY"'                          00689400
&ZMS                  SETC  '&ZMS "MOVETOKEY"'                          00689500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00689600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00689700
.ZG59A                ANOP  ,                                           00689800
.*-------------------------------------------------------------------   00689900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00690000
&ZXMOVETOKEY          SETC  'INPUT'     SET IN/OUTPUT                   00690100
&XMOVETOKEY           SETC  'NO_MOVETOKEY'                              00690200
                      AIF   (K'&MOVETOKEY(1) LE 0).ZG59B  PARM          00690300
&XMOVETOKEY           SETC  '&MOVETOKEY(1)'     SET XVARIABLE           00690400
                      AIF   (N'&MOVETOKEY GT 1).ZG59B  MULTI PARMS      00690500
&XMOVETOKEY           SETC  '&MOVETOKEY'        SET XVARIABLE           00690600
.ZG59B                ANOP  ,                                           00690700
.*-------------------------------------------------------------------   00690800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00690900
                      AIF   (K'&ZXMOVETOKEY LE 0).ZG59R  NOT I/O        00691000
         AIF   ('&XMOVETOKEY' EQ 'NO_MOVETOKEY').ZG59R                  00691100
                      AIF   ('&XMOVETOKEY'(1,1) NE '(').ZG59R           00691200
&ZCGPR                SETC  '&XMOVETOKEY'(2,K'&XMOVETOKEY-2)            00691300
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG59P                00691400
                      AIF   (K'&ZCGPR GT 2).ZG59Q                       00691500
                      AIF   ('&ZCGPR' EQ '0').ZG59Q                     00691600
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00691700
                      AIF   (T'&ZCGPR NE 'N').ZG59Q  INVALID REG NAME   00691800
.ZG59P                ANOP  ,                                           00691900
                      AIF   (T'&ZCGPR NE 'N').ZG59R  NON NUMERIC        00692000
                      AIF   ('&ZCGPR' LT '2').ZG59Q                     00692100
                      AIF   ('&ZCGPR' LE '12').ZG59R                    00692200
.ZG59Q                ANOP  ,                                           00692300
&ZMS                  SETC  '"MOVETOKEY='       *KGPRA* MNOTE           00692400
&ZMS                  SETC  '&ZMS.&MOVETOKEY"'                          00692500
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00692600
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00692700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00692800
.ZG59R                ANOP  ,                                           00692900
.*----------------------------------------------------------------***   00693000
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00693100
                      AIF   (N'&MOVETOPOS LE 1).ZG62A  CK NUM           00693200
&ZMS                  SETC  '"MOVETOPOS='       *KPOSA* MNOTE           00693300
&ZMS                  SETC  '&ZMS.&MOVETOPOS"'                          00693400
&ZMS                  SETC  '&ZMS "MOVETOPOS"'                          00693500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00693600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00693700
.ZG62A                ANOP  ,                                           00693800
.*-------------------------------------------------------------------   00693900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00694000
&XMOVETOPOS           SETC  ''          INITIALIZE XVARIABLE            00694100
.ZG63A   AIF   ('&MOVETOPOS(1)' NE 'HEAD').ZG64A                        00694200
&XMOVETOPOS           SETC  'HEAD'      SET KEYWORD                     00694300
.*-------------------------------------------------------------------   00694400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00694500
.ZG64A   AIF   ('&MOVETOPOS(1)' NE 'TAIL').ZG65A                        00694600
&XMOVETOPOS           SETC  'TAIL'      SET KEYWORD                     00694700
.*-------------------------------------------------------------------   00694800
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00694900
.ZG65A                AIF   (K'&XMOVETOPOS GT 0).ZG65C  KEYWORD         00695000
                      AIF   (K'&MOVETOPOS(1) LE 0).ZG65B                00695100
&ZMS                  SETC  '"MOVETOPOS='       *KUKWA* MNOTE           00695200
&ZMS                  SETC  '&ZMS.&MOVETOPOS"'                          00695300
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00695400
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00695500
&ZMS                  SETC  '&ZMS "HEAD"'                               00695600
&ZMS                  SETC  '&ZMS OR "TAIL".'                           00695700
                      MNOTE 8,' &ZMS '                                  00695800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00695900
.ZG65B                ANOP  ,                                           00696000
&XMOVETOPOS           SETC  'HEAD'      SET DEFAULT KEYWORD             00696100
.ZG65C                ANOP  ,                                           00696200
&ZXMOVETOPOS          SETC  'INPUT'     SET IN/OUTPUT                   00696300
.*------------------------------------------------------------------    00696400
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00696500
&XDATAOPER            SETC  ''          INITIALIZE XVARIABLE            00696600
.*-------------------------------------------------------------------   00696700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00696800
.ZG68                 ANOP  ,                                           00696900
                      AIF   (K'&DATAOPER(1) LE 0).ZG68A                 00697000
&ZTLC                 SETC 'NONE'                                       00697100
                      AIF   ('&DATAOPER(1)' NE '&ZTLC').ZG69            00697200
&XDATAOPER            SETC  'NONE'      SET KEYWORD                     00697300
                      AIF   (N'&DATAOPER LE 1).ZG68A  CK NUM            00697400
&ZMS                  SETC  '"DATAOPER='        *KPOSA* MNOTE           00697500
&ZMS                  SETC  '&ZMS.&DATAOPER"'                           00697600
&ZMS                  SETC  '&ZMS "DATAOPER"'                           00697700
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00697800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00697900
.ZG68A                ANOP  ,                                           00698000
.*------------------------------------------------------------------    00698100
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00698200
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00698300
.ZG68A0               AIF   (K'&ENTRYTYPE LE 0).ZG68A1  OK              00698400
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00698500
.ZG68A1               AIF   (K'&ELEMNUM LE 0).ZG68A2  OK                00698600
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00698700
.ZG68A2               AIF   (K'&ZCVAL LE 0).ZG68A3  OK                  00698800
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00698900
&ZMS                  SETC  '"DATAOPER'         *KMEIA* MNOTE           00699000
&ZMS                  SETC  '&ZMS.=&DATAOPER"'                          00699100
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00699200
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00699300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00699400
.ZG68A3               ANOP  ,                                           00699500
.*-------------------------------------------------------------------   00699600
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00699700
.ZG69                 ANOP  ,                                           00699800
&ZTLC                 SETC 'READ'                                       00699900
                      AIF   ('&DATAOPER(1)' NE '&ZTLC').ZG70            00700000
&XDATAOPER            SETC  'READ'      SET KEYWORD                     00700100
                      AIF   (N'&DATAOPER LE 1).ZG69A  CK NUM            00700200
&ZMS                  SETC  '"DATAOPER='        *KPOSA* MNOTE           00700300
&ZMS                  SETC  '&ZMS.&DATAOPER"'                           00700400
&ZMS                  SETC  '&ZMS "DATAOPER"'                           00700500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00700600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00700700
.ZG69A                ANOP  ,                                           00700800
.*------------------------------------------------------------------    00700900
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00701000
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00701100
.ZG69A0               AIF   (K'&ENTRYTYPE LE 0).ZG69A1  OK              00701200
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00701300
.ZG69A1               AIF   (K'&ELEMNUM LE 0).ZG69A2  OK                00701400
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00701500
.ZG69A2               AIF   (K'&ZCVAL LE 0).ZG69A3  OK                  00701600
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00701700
&ZMS                  SETC  '"DATAOPER'         *KMEIA* MNOTE           00701800
&ZMS                  SETC  '&ZMS.=&DATAOPER"'                          00701900
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00702000
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00702100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00702200
.ZG69A3               ANOP  ,                                           00702300
.*-------------------------------------------------------------------   00702400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00702500
.ZG70                 ANOP  ,                                           00702600
&ZTLC                 SETC 'WRITE'                                      00702700
                      AIF   ('&DATAOPER(1)' NE '&ZTLC').ZG79            00702800
&XDATAOPER            SETC  'WRITE'     SET KEYWORD                     00702900
                      AIF   (N'&DATAOPER LE 1).ZG70A  CK NUM            00703000
&ZMS                  SETC  '"DATAOPER='        *KPOSA* MNOTE           00703100
&ZMS                  SETC  '&ZMS.&DATAOPER"'                           00703200
&ZMS                  SETC  '&ZMS "DATAOPER"'                           00703300
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00703400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00703500
.ZG70A                ANOP  ,                                           00703600
.*----------------------------------------------------------------***   00703700
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00703800
                      AIF   (N'&ENTRYTYPE LE 1).ZG72A  CK NUM           00703900
&ZMS                  SETC  '"ENTRYTYPE='       *KPOSA* MNOTE           00704000
&ZMS                  SETC  '&ZMS.&ENTRYTYPE"'                          00704100
&ZMS                  SETC  '&ZMS "ENTRYTYPE"'                          00704200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00704300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00704400
.ZG72A                ANOP  ,                                           00704500
.*-------------------------------------------------------------------   00704600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00704700
&XENTRYTYPE           SETC  ''          INITIALIZE XVARIABLE            00704800
.ZG73A   AIF   ('&ENTRYTYPE(1)' NE 'ANY').ZG74A                         00704900
&XENTRYTYPE           SETC  'ANY'       SET KEYWORD                     00705000
.*-------------------------------------------------------------------   00705100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00705200
.ZG74A   AIF   ('&ENTRYTYPE(1)' NE 'OLD').ZG75A                         00705300
&XENTRYTYPE           SETC  'OLD'       SET KEYWORD                     00705400
.*-------------------------------------------------------------------   00705500
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00705600
.ZG75A                AIF   (K'&XENTRYTYPE GT 0).ZG75C  KEYWORD         00705700
                      AIF   (K'&ENTRYTYPE(1) LE 0).ZG75B                00705800
&ZMS                  SETC  '"ENTRYTYPE='       *KUKWA* MNOTE           00705900
&ZMS                  SETC  '&ZMS.&ENTRYTYPE"'                          00706000
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00706100
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00706200
&ZMS                  SETC  '&ZMS "ANY"'                                00706300
&ZMS                  SETC  '&ZMS OR "OLD".'                            00706400
                      MNOTE 8,' &ZMS '                                  00706500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00706600
.ZG75B                ANOP  ,                                           00706700
&XENTRYTYPE           SETC  'ANY'       SET DEFAULT KEYWORD             00706800
.ZG75C                ANOP  ,                                           00706900
&ZXENTRYTYPE          SETC  'INPUT'     SET IN/OUTPUT                   00707000
.*----------------------------------------------------------------***   00707100
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00707200
                      AIF   (N'&ELEMNUM LE 1).ZG77A  CK NUM             00707300
&ZMS                  SETC  '"ELEMNUM='         *KPOSA* MNOTE           00707400
&ZMS                  SETC  '&ZMS.&ELEMNUM"'                            00707500
&ZMS                  SETC  '&ZMS "ELEMNUM"'                            00707600
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00707700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00707800
.ZG77A                ANOP  ,                                           00707900
.*-------------------------------------------------------------------   00708000
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00708100
&ZXELEMNUM            SETC  'INPUT'     SET IN/OUTPUT                   00708200
&XELEMNUM             SETC  'NO_ELEMNUM'                                00708300
                      AIF   (K'&ELEMNUM(1) LE 0).ZG77B  PARM            00708400
&XELEMNUM             SETC  '&ELEMNUM(1)'       SET XVARIABLE           00708500
                      AIF   (N'&ELEMNUM GT 1).ZG77B  MULTI PARMS        00708600
&XELEMNUM             SETC  '&ELEMNUM'  SET XVARIABLE                   00708700
.ZG77B                ANOP  ,                                           00708800
.*-------------------------------------------------------------------   00708900
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00709000
                      AIF   (K'&ZXELEMNUM LE 0).ZG77R  NOT I/O          00709100
         AIF   ('&XELEMNUM' EQ 'NO_ELEMNUM').ZG77R                      00709200
                      AIF   ('&XELEMNUM'(1,1) NE '(').ZG77R             00709300
&ZCGPR                SETC  '&XELEMNUM'(2,K'&XELEMNUM-2)                00709400
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG77P                00709500
                      AIF   (K'&ZCGPR GT 2).ZG77Q                       00709600
                      AIF   ('&ZCGPR' EQ '0').ZG77Q                     00709700
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00709800
                      AIF   (T'&ZCGPR NE 'N').ZG77Q  INVALID REG NAME   00709900
.ZG77P                ANOP  ,                                           00710000
                      AIF   (T'&ZCGPR NE 'N').ZG77R  NON NUMERIC        00710100
                      AIF   ('&ZCGPR' LT '2').ZG77Q                     00710200
                      AIF   ('&ZCGPR' LE '12').ZG77R                    00710300
.ZG77Q                ANOP  ,                                           00710400
&ZMS                  SETC  '"ELEMNUM='         *KGPRA* MNOTE           00710500
&ZMS                  SETC  '&ZMS.&ELEMNUM"'                            00710600
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00710700
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00710800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00710900
.ZG77R                ANOP  ,                                           00711000
.*------------------------------------------------------------------    00711100
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00711200
.ZG79                 ANOP  ,                                           00711300
&ZXDATAOPER           SETC  'INPUT'     SET IN/OUTPUT                   00711400
                      AIF   (K'&XDATAOPER GT 0).ZG79E  VALID ARG        00711500
                      AIF   (T'&DATAOPER EQ 'O').ZG79D  OMITTED         00711600
&ZASYSLNDX            SETA  0                                           00711700
.ZG79A                ANOP  ,           POSITIONAL MACRO KEY            00711800
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                00711900
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG79C            00712000
&ZTLC                 SETC 'DATAOPER'                                   00712100
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG79A   00712200
.ZG79B                ANOP  ,                                           00712300
&ZXDATAOPER           SETC  ''          RESET IN/OUTPUT                 00712400
&ZMS                  SETC  'THE "DATAOPER" KEY'  *KOPTA* MNOTE         00712500
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     00712600
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            00712700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00712800
                      AGO   .ZG79E                                      00712900
.ZG79C                ANOP  ,                                           00713000
&ZXDATAOPER           SETC  ''          RESET IN/OUTPUT                 00713100
&ZMS                  SETC  '"DATAOPER='        *KUKWA* MNOTE           00713200
&ZMS                  SETC  '&ZMS.&DATAOPER"'                           00713300
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00713400
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00713500
&ZMS                  SETC  '&ZMS "NONE",'                              00713600
&ZMS                  SETC  '&ZMS "READ",'                              00713700
&ZMS                  SETC  '&ZMS OR "WRITE".'                          00713800
                      MNOTE 8,' &ZMS '                                  00713900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00714000
                      AGO   .ZG79E                                      00714100
.ZG79D                ANOP  ,                                           00714200
&XDATAOPER            SETC  'NONE'      SET DEFAULT KEYWORD             00714300
.ZG79E                ANOP  ,                                           00714400
.*-------------------------------------------------------------------   00714500
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00714600
.ZG80                 ANOP  ,                                           00714700
&ZTLC                 SETC 'DELETE'                                     00714800
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG86             00714900
&XREQUEST             SETC  'DELETE'    SET KEYWORD                     00715000
                      AIF   (N'&REQUEST LE 1).ZG80A  CK NUM             00715100
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00715200
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00715300
&ZMS                  SETC  '&ZMS "REQUEST"'                            00715400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00715500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00715600
.ZG80A                ANOP  ,                                           00715700
.*------------------------------------------------------------------    00715800
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00715900
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00716000
.ZG80A0               AIF   (K'&TYPE LE 0).ZG80A1  OK                   00716100
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00716200
.ZG80A1               AIF   (K'&RESTOKEN LE 0).ZG80A2  OK               00716300
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00716400
.ZG80A2               AIF   (K'&EXTRESTOKEN LE 0).ZG80A3  OK            00716500
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00716600
.ZG80A3               AIF   (K'&ENTRYTYPE LE 0).ZG80A4  OK              00716700
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00716800
.ZG80A4               AIF   (K'&ELEMNUM LE 0).ZG80A5  OK                00716900
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00717000
.ZG80A5               AIF   (K'&LISTLIMIT LE 0).ZG80A6  OK              00717100
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00717200
.ZG80A6               AIF   (K'&LISTDESC LE 0).ZG80A7  OK               00717300
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00717400
.ZG80A7               AIF   (K'&LISTKEY LE 0).ZG80A8  OK                00717500
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00717600
.ZG80A8               AIF   (K'&MAXLISTKEY LE 0).ZG80A9  OK             00717700
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00717800
.ZG80A9               AIF   (K'&SETCURSOR LE 0).ZG80A10  OK             00717900
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00718000
.ZG80A10              AIF   (K'&MOVETOLIST LE 0).ZG80A11  OK            00718100
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00718200
.ZG80A11              AIF   (K'&MOVETOKEY LE 0).ZG80A12  OK             00718300
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00718400
.ZG80A12              AIF   (K'&MOVETOPOS LE 0).ZG80A13  OK             00718500
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00718600
.ZG80A13              AIF   (K'&LISTTYPE LE 0).ZG80A14  OK              00718700
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00718800
.ZG80A14              AIF   (K'&FIRSTELEM LE 0).ZG80A15  OK             00718900
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00719000
.ZG80A15              AIF   (K'&LASTELEM LE 0).ZG80A16  OK              00719100
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00719200
.ZG80A16              AIF   (K'&ACTION LE 0).ZG80A17  OK                00719300
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00719400
.ZG80A17              AIF   (K'&VECTORINDEX LE 0).ZG80A18  OK           00719500
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00719600
.ZG80A18              AIF   (K'&DRIVEEXIT LE 0).ZG80A19  OK             00719700
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00719800
.ZG80A19              AIF   (K'&UNC LE 0).ZG80A20  OK                   00719900
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00720000
.ZG80A20              AIF   (K'&STARTINDEX LE 0).ZG80A21  OK            00720100
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00720200
.ZG80A21              AIF   (K'&ENDINDEX LE 0).ZG80A22  OK              00720300
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00720400
.ZG80A22              AIF   (K'&MOSVECTOR LE 0).ZG80A23  OK             00720500
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00720600
.ZG80A23              AIF   (K'&ZCVAL LE 0).ZG80A24  OK                 00720700
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00720800
                      AIF  (K'&ZCVAL LE 160).ZG80A24A                   00720900
&ZCVAL                SETC '&ZCVAL'(1,160)                              00721000
&ZCVAL                SETC '&ZCVAL....'                                 00721100
.ZG80A24A             ANOP                                              00721200
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00721300
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00721400
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00721500
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00721600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00721700
.ZG80A24              ANOP  ,                                           00721800
.*------------------------------------------------------------------    00721900
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00722000
&XDATAOPER            SETC  ''          INITIALIZE XVARIABLE            00722100
.*-------------------------------------------------------------------   00722200
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00722300
.ZG83                 ANOP  ,                                           00722400
                      AIF   (K'&DATAOPER(1) LE 0).ZG83A                 00722500
&ZTLC                 SETC 'NONE'                                       00722600
                      AIF   ('&DATAOPER(1)' NE '&ZTLC').ZG84            00722700
&XDATAOPER            SETC  'NONE'      SET KEYWORD                     00722800
                      AIF   (N'&DATAOPER LE 1).ZG83A  CK NUM            00722900
&ZMS                  SETC  '"DATAOPER='        *KPOSA* MNOTE           00723000
&ZMS                  SETC  '&ZMS.&DATAOPER"'                           00723100
&ZMS                  SETC  '&ZMS "DATAOPER"'                           00723200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00723300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00723400
.ZG83A                ANOP  ,                                           00723500
.*-------------------------------------------------------------------   00723600
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00723700
.ZG84                 ANOP  ,                                           00723800
&ZTLC                 SETC 'READ'                                       00723900
                      AIF   ('&DATAOPER(1)' NE '&ZTLC').ZG85            00724000
&XDATAOPER            SETC  'READ'      SET KEYWORD                     00724100
                      AIF   (N'&DATAOPER LE 1).ZG84A  CK NUM            00724200
&ZMS                  SETC  '"DATAOPER='        *KPOSA* MNOTE           00724300
&ZMS                  SETC  '&ZMS.&DATAOPER"'                           00724400
&ZMS                  SETC  '&ZMS "DATAOPER"'                           00724500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00724600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00724700
.ZG84A                ANOP  ,                                           00724800
.*------------------------------------------------------------------    00724900
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00725000
.ZG85                 ANOP  ,                                           00725100
&ZXDATAOPER           SETC  'INPUT'     SET IN/OUTPUT                   00725200
                      AIF   (K'&XDATAOPER GT 0).ZG85E  VALID ARG        00725300
                      AIF   (T'&DATAOPER EQ 'O').ZG85D  OMITTED         00725400
&ZASYSLNDX            SETA  0                                           00725500
.ZG85A                ANOP  ,           POSITIONAL MACRO KEY            00725600
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                00725700
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG85C            00725800
&ZTLC                 SETC 'DATAOPER'                                   00725900
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG85A   00726000
.ZG85B                ANOP  ,                                           00726100
&ZXDATAOPER           SETC  ''          RESET IN/OUTPUT                 00726200
&ZMS                  SETC  'THE "DATAOPER" KEY'  *KOPTA* MNOTE         00726300
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     00726400
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            00726500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00726600
                      AGO   .ZG85E                                      00726700
.ZG85C                ANOP  ,                                           00726800
&ZXDATAOPER           SETC  ''          RESET IN/OUTPUT                 00726900
&ZMS                  SETC  '"DATAOPER='        *KUKWA* MNOTE           00727000
&ZMS                  SETC  '&ZMS.&DATAOPER"'                           00727100
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00727200
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00727300
&ZMS                  SETC  '&ZMS "NONE"'                               00727400
&ZMS                  SETC  '&ZMS OR "READ".'                           00727500
                      MNOTE 8,' &ZMS '                                  00727600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00727700
                      AGO   .ZG85E                                      00727800
.ZG85D                ANOP  ,                                           00727900
&XDATAOPER            SETC  'NONE'      SET DEFAULT KEYWORD             00728000
.ZG85E                ANOP  ,                                           00728100
.*-------------------------------------------------------------------   00728200
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00728300
.ZG86                 ANOP  ,                                           00728400
&ZTLC                 SETC 'DELETE_MULT'                                00728500
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG91             00728600
&XREQUEST             SETC  'DELETE_MULT'       SET KEYWORD             00728700
                      AIF   (N'&REQUEST LE 1).ZG86A  CK NUM             00728800
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00728900
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00729000
&ZMS                  SETC  '&ZMS "REQUEST"'                            00729100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00729200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00729300
.ZG86A                ANOP  ,                                           00729400
.*------------------------------------------------------------------    00729500
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00729600
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00729700
.ZG86A0               AIF   (K'&TYPE LE 0).ZG86A1  OK                   00729800
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00729900
.ZG86A1               AIF   (K'&ENTRYTYPE LE 0).ZG86A2  OK              00730000
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00730100
.ZG86A2               AIF   (K'&ELEMNUM LE 0).ZG86A3  OK                00730200
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00730300
.ZG86A3               AIF   (K'&LISTLIMIT LE 0).ZG86A4  OK              00730400
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00730500
.ZG86A4               AIF   (K'&LISTDESC LE 0).ZG86A5  OK               00730600
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00730700
.ZG86A5               AIF   (K'&LISTKEY LE 0).ZG86A6  OK                00730800
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00730900
.ZG86A6               AIF   (K'&MAXLISTKEY LE 0).ZG86A7  OK             00731000
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00731100
.ZG86A7               AIF   (K'&SETCURSOR LE 0).ZG86A8  OK              00731200
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00731300
.ZG86A8               AIF   (K'&MOVETOLIST LE 0).ZG86A9  OK             00731400
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00731500
.ZG86A9               AIF   (K'&MOVETOKEY LE 0).ZG86A10  OK             00731600
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00731700
.ZG86A10              AIF   (K'&MOVETOPOS LE 0).ZG86A11  OK             00731800
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00731900
.ZG86A11              AIF   (K'&DATAOPER LE 0).ZG86A12  OK              00732000
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00732100
.ZG86A12              AIF   (K'&LISTTYPE LE 0).ZG86A13  OK              00732200
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00732300
.ZG86A13              AIF   (K'&FIRSTELEM LE 0).ZG86A14  OK             00732400
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00732500
.ZG86A14              AIF   (K'&LASTELEM LE 0).ZG86A15  OK              00732600
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00732700
.ZG86A15              AIF   (K'&ACTION LE 0).ZG86A16  OK                00732800
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00732900
.ZG86A16              AIF   (K'&VECTORINDEX LE 0).ZG86A17  OK           00733000
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00733100
.ZG86A17              AIF   (K'&DRIVEEXIT LE 0).ZG86A18  OK             00733200
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00733300
.ZG86A18              AIF   (K'&UNC LE 0).ZG86A19  OK                   00733400
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00733500
.ZG86A19              AIF   (K'&STARTINDEX LE 0).ZG86A20  OK            00733600
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00733700
.ZG86A20              AIF   (K'&ENDINDEX LE 0).ZG86A21  OK              00733800
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00733900
.ZG86A21              AIF   (K'&MOSVECTOR LE 0).ZG86A22  OK             00734000
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00734100
.ZG86A22              AIF   (K'&ZCVAL LE 0).ZG86A23  OK                 00734200
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00734300
                      AIF  (K'&ZCVAL LE 160).ZG86A23A                   00734400
&ZCVAL                SETC '&ZCVAL'(1,160)                              00734500
&ZCVAL                SETC '&ZCVAL....'                                 00734600
.ZG86A23A             ANOP                                              00734700
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00734800
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00734900
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00735000
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00735100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00735200
.ZG86A23              ANOP  ,                                           00735300
.*----------------------------------------------------------------***   00735400
.***AG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00735500
&XRESTARTTOKEN        SETC  ''          INITIALIZE XVARIABLE            00735600
                      AIF   (K'&RESTOKEN LE 0).ZG88C                    00735700
&ZXRESTARTTOKEN       SETC  'INPUT'     SET IN/OUTPUT                   00735800
&XRESTARTTOKEN        SETC  'RESTOKEN'  SET XVARIABLE                   00735900
&ZXRESTOKEN           SETC  'INPUT'     SET IN/OUTPUT                   00736000
&XRESTOKEN            SETC  '&RESTOKEN(1)'      SET XVARIABLE PARM      00736100
                      AIF   (N'&RESTOKEN GT 1).ZG88A                    00736200
&XRESTOKEN            SETC  '&RESTOKEN'         SET XVARIABLE PARM      00736300
.ZG88A                AIF   (N'&RESTOKEN LE 1).ZG88B  CK NUM            00736400
&ZMS                  SETC  '"RESTOKEN='        *KPOSA* MNOTE           00736500
&ZMS                  SETC  '&ZMS.&RESTOKEN"'                           00736600
&ZMS                  SETC  '&ZMS "RESTOKEN"'                           00736700
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00736800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00736900
.ZG88B                AIF   (K'&XRESTOKEN GT 0).ZG88C  ONE PARM         00737000
&ZXRESTARTTOKEN       SETC  ''          RESET IN/OUTPUT                 00737100
&ZXRESTOKEN           SETC  ''          RESET IN/OUTPUT                 00737200
&ZMS                  SETC  ' '         *KRQDA*                         00737300
&ZMS                  SETC  '&ZMS "RESTOKEN" KEY AND ITS'               00737400
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00737500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00737600
.ZG88C                ANOP  ,                                           00737700
.*----------------------------------------------------------------***   00737800
.***AG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00737900
                      AIF   (K'&EXTRESTOKEN LE 0).ZG89D  NO ME KEY      00738000
                      AIF   (N'&EXTRESTOKEN LE 1).ZG89A  CK NUM         00738100
&ZMS                  SETC  '"EXTRESTOKEN='     *KPOSA* MNOTE           00738200
&ZMS                  SETC  '&ZMS.&EXTRESTOKEN"'                        00738300
&ZMS                  SETC  '&ZMS "EXTRESTOKEN"'                        00738400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00738500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00738600
.ZG89A                AIF   (K'&XRESTARTTOKEN LE 0).ZG89B               00738700
&ZMS                  SETC  '"EXTRESTOKEN'      *KMEKA* MNOTE           00738800
&ZMS                  SETC  '&ZMS.=&EXTRESTOKEN"'                       00738900
&ZMS                  SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'       00739000
&ZMS                  SETC  '&ZMS "&XRESTARTTOKEN"'                     00739100
                      MNOTE 8,' &ZMS KEY.'                              00739200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00739300
                      AGO   .ZG89D                                      00739400
.*                                                                      00739500
.ZG89B                ANOP  ,                                           00739600
&ZXRESTARTTOKEN       SETC  'INPUT'     SET IN/OUTPUT                   00739700
&XRESTARTTOKEN        SETC  'EXTRESTOKEN'       SET XVARIABLE           00739800
&ZXEXTRESTOKEN        SETC  'INPUT'     SET IN/OUTPUT                   00739900
&XEXTRESTOKEN         SETC  '&EXTRESTOKEN(1)'   SET XVARIABLE PARM      00740000
                      AIF   (N'&EXTRESTOKEN GT 1).ZG89C                 00740100
&XEXTRESTOKEN         SETC  '&EXTRESTOKEN'      SET XVARIABLE PARM      00740200
.ZG89C                AIF   (K'&XEXTRESTOKEN GT 0).ZG89D  ONE PARM      00740300
&ZXRESTARTTOKEN       SETC  ''          RESET IN/OUTPUT                 00740400
&ZXEXTRESTOKEN        SETC  ''          RESET IN/OUTPUT                 00740500
&ZMS                  SETC  ' '         *KRQDA*                         00740600
&ZMS                  SETC  '&ZMS "EXTRESTOKEN" KEY AND ITS'            00740700
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00740800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00740900
.ZG89D                ANOP  ,                                           00741000
.*------------------------------------------------------------------    00741100
.***AG.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED           00741200
                      AIF   (K'&XRESTARTTOKEN GT 0).ZG90B               00741300
&ZXRESTARTTOKEN       SETC  'INPUT'     SET IN/OUTPUT                   00741400
&XRESTARTTOKEN        SETC  'RESTOKEN'  SET DEFAULT                     00741500
&ZXRESTOKEN           SETC  'INPUT'     SET IN/OUTPUT                   00741600
&XRESTOKEN            SETC  'NO_RESTOKEN'       SET DEFAULT PARM        00741700
.ZG90B                ANOP  ,                                           00741800
.*-------------------------------------------------------------------   00741900
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE                 00742000
                      AIF   (K'&ZXEXTRESTOKEN LE 0).ZG90R  NOT I/O      00742100
         AIF   ('&XEXTRESTOKEN' EQ 'NO_RESTOKEN').ZG90R                 00742200
                      AIF   ('&XEXTRESTOKEN'(1,1) NE '(').ZG90R         00742300
&ZCGPR                SETC  '&XEXTRESTOKEN'(2,K'&XEXTRESTOKEN-2)        00742400
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG90P                00742500
                      AIF   (K'&ZCGPR GT 2).ZG90Q                       00742600
                      AIF   ('&ZCGPR' EQ '0').ZG90Q                     00742700
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00742800
                      AIF   (T'&ZCGPR NE 'N').ZG90Q  INVALID REG NAME   00742900
.ZG90P                ANOP  ,                                           00743000
                      AIF   (T'&ZCGPR NE 'N').ZG90R  NON NUMERIC        00743100
                      AIF   ('&ZCGPR' LT '2').ZG90Q                     00743200
                      AIF   ('&ZCGPR' LE '12').ZG90R                    00743300
.ZG90Q                ANOP  ,                                           00743400
&ZMS                  SETC  '"EXTRESTOKEN='     *KGPRA* MNOTE           00743500
&ZMS                  SETC  '&ZMS.&EXTRESTOKEN"'                        00743600
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00743700
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00743800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00743900
.ZG90R                ANOP  ,                                           00744000
.*-------------------------------------------------------------------   00744100
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00744200
.ZG88                 AIF   ('&XRESTARTTOKEN' NE 'RESTOKEN').ZG89       00744300
.*-------------------------------------------------------------------   00744400
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE                 00744500
                      AIF   (K'&ZXRESTOKEN LE 0).ZG88R  NOT I/O         00744600
         AIF   ('&XRESTOKEN' EQ 'NO_RESTOKEN').ZG88R                    00744700
                      AIF   ('&XRESTOKEN'(1,1) NE '(').ZG88R            00744800
&ZCGPR                SETC  '&XRESTOKEN'(2,K'&XRESTOKEN-2)              00744900
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG88P                00745000
                      AIF   (K'&ZCGPR GT 2).ZG88Q                       00745100
                      AIF   ('&ZCGPR' EQ '0').ZG88Q                     00745200
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00745300
                      AIF   (T'&ZCGPR NE 'N').ZG88Q  INVALID REG NAME   00745400
.ZG88P                ANOP  ,                                           00745500
                      AIF   (T'&ZCGPR NE 'N').ZG88R  NON NUMERIC        00745600
                      AIF   ('&ZCGPR' LT '2').ZG88Q                     00745700
                      AIF   ('&ZCGPR' LE '12').ZG88R                    00745800
.ZG88Q                ANOP  ,                                           00745900
&ZMS                  SETC  '"RESTOKEN='        *KGPRA* MNOTE           00746000
&ZMS                  SETC  '&ZMS.&RESTOKEN"'                           00746100
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00746200
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00746300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00746400
.ZG88R                ANOP  ,                                           00746500
.*-------------------------------------------------------------------   00746600
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00746700
.ZG89                 AIF   ('&XRESTARTTOKEN' NE 'EXTRESTOKEN').ZG90    00746800
.*-------------------------------------------------------------------   00746900
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE                 00747000
                      AIF   (K'&ZXEXTRESTOKEN LE 0).ZG89R  NOT I/O      00747100
         AIF   ('&XEXTRESTOKEN' EQ 'NO_EXTRESTOKEN').ZG89R              00747200
                      AIF   ('&XEXTRESTOKEN'(1,1) NE '(').ZG89R         00747300
&ZCGPR                SETC  '&XEXTRESTOKEN'(2,K'&XEXTRESTOKEN-2)        00747400
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG89P                00747500
                      AIF   (K'&ZCGPR GT 2).ZG89Q                       00747600
                      AIF   ('&ZCGPR' EQ '0').ZG89Q                     00747700
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00747800
                      AIF   (T'&ZCGPR NE 'N').ZG89Q  INVALID REG NAME   00747900
.ZG89P                ANOP  ,                                           00748000
                      AIF   (T'&ZCGPR NE 'N').ZG89R  NON NUMERIC        00748100
                      AIF   ('&ZCGPR' LT '2').ZG89Q                     00748200
                      AIF   ('&ZCGPR' LE '12').ZG89R                    00748300
.ZG89Q                ANOP  ,                                           00748400
&ZMS                  SETC  '"EXTRESTOKEN='     *KGPRA* MNOTE           00748500
&ZMS                  SETC  '&ZMS.&EXTRESTOKEN"'                        00748600
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00748700
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00748800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00748900
.ZG89R                ANOP  ,                                           00749000
.*-------------------------------------------------------------------   00749100
.***AG.KMEKY15 NAME, OPT INPUT, ME KEYS -END                            00749200
.ZG90                 ANOP  ,           END MUTUALLY EXCLUSIVE KEYS     00749300
.*-------------------------------------------------------------------   00749400
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00749500
.ZG91                 ANOP  ,                                           00749600
&ZTLC                 SETC 'DELETE_ENTRYLIST'                           00749700
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG103            00749800
&XREQUEST             SETC  'DELETE_ENTRYLIST'  SET KEYWORD             00749900
                      AIF   (N'&REQUEST LE 1).ZG91A  CK NUM             00750000
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00750100
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00750200
&ZMS                  SETC  '&ZMS "REQUEST"'                            00750300
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00750400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00750500
.ZG91A                ANOP  ,                                           00750600
.*------------------------------------------------------------------    00750700
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00750800
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00750900
.ZG91A0               AIF   (K'&TYPE LE 0).ZG91A1  OK                   00751000
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00751100
.ZG91A1               AIF   (K'&RESTOKEN LE 0).ZG91A2  OK               00751200
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00751300
.ZG91A2               AIF   (K'&EXTRESTOKEN LE 0).ZG91A3  OK            00751400
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00751500
.ZG91A3               AIF   (K'&ENTRYTYPE LE 0).ZG91A4  OK              00751600
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00751700
.ZG91A4               AIF   (K'&ELEMNUM LE 0).ZG91A5  OK                00751800
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00751900
.ZG91A5               AIF   (K'&LISTLIMIT LE 0).ZG91A6  OK              00752000
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00752100
.ZG91A6               AIF   (K'&LISTDESC LE 0).ZG91A7  OK               00752200
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00752300
.ZG91A7               AIF   (K'&LISTKEY LE 0).ZG91A8  OK                00752400
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00752500
.ZG91A8               AIF   (K'&MAXLISTKEY LE 0).ZG91A9  OK             00752600
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00752700
.ZG91A9               AIF   (K'&SETCURSOR LE 0).ZG91A10  OK             00752800
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00752900
.ZG91A10              AIF   (K'&MOVETOLIST LE 0).ZG91A11  OK            00753000
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00753100
.ZG91A11              AIF   (K'&MOVETOKEY LE 0).ZG91A12  OK             00753200
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00753300
.ZG91A12              AIF   (K'&MOVETOPOS LE 0).ZG91A13  OK             00753400
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00753500
.ZG91A13              AIF   (K'&DATAOPER LE 0).ZG91A14  OK              00753600
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00753700
.ZG91A14              AIF   (K'&ACTION LE 0).ZG91A15  OK                00753800
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00753900
.ZG91A15              AIF   (K'&VECTORINDEX LE 0).ZG91A16  OK           00754000
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00754100
.ZG91A16              AIF   (K'&DRIVEEXIT LE 0).ZG91A17  OK             00754200
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00754300
.ZG91A17              AIF   (K'&UNC LE 0).ZG91A18  OK                   00754400
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00754500
.ZG91A18              AIF   (K'&STARTINDEX LE 0).ZG91A19  OK            00754600
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00754700
.ZG91A19              AIF   (K'&ENDINDEX LE 0).ZG91A20  OK              00754800
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00754900
.ZG91A20              AIF   (K'&MOSVECTOR LE 0).ZG91A21  OK             00755000
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00755100
.ZG91A21              AIF   (K'&ZCVAL LE 0).ZG91A22  OK                 00755200
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00755300
                      AIF  (K'&ZCVAL LE 160).ZG91A22A                   00755400
&ZCVAL                SETC '&ZCVAL'(1,160)                              00755500
&ZCVAL                SETC '&ZCVAL....'                                 00755600
.ZG91A22A             ANOP                                              00755700
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00755800
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00755900
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00756000
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00756100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00756200
.ZG91A22              ANOP  ,                                           00756300
.*----------------------------------------------------------------***   00756400
.***AG.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00756500
                      AIF   (N'&LISTTYPE LE 1).ZG93A  CK NUM            00756600
&ZMS                  SETC  '"LISTTYPE='        *KPOSA* MNOTE           00756700
&ZMS                  SETC  '&ZMS.&LISTTYPE"'                           00756800
&ZMS                  SETC  '&ZMS "LISTTYPE"'                           00756900
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00757000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00757100
.ZG93A                ANOP  ,                                           00757200
.*-------------------------------------------------------------------   00757300
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00757400
&XLISTTYPE            SETC  ''          INITIALIZE XVARIABLE            00757500
.ZG94A   AIF   ('&LISTTYPE(1)' NE 'IDLIST').ZG95A                       00757600
&XLISTTYPE            SETC  'IDLIST'    SET KEYWORD                     00757700
.*-------------------------------------------------------------------   00757800
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00757900
.ZG95A   AIF   ('&LISTTYPE(1)' NE 'NAMELIST').ZG96A                     00758000
&XLISTTYPE            SETC  'NAMELIST'  SET KEYWORD                     00758100
.*-------------------------------------------------------------------   00758200
.***AG.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00758300
.ZG96A                AIF   (K'&XLISTTYPE GT 0).ZG96C  KEYWORD          00758400
                      AIF   (K'&LISTTYPE(1) LE 0).ZG96B                 00758500
&ZMS                  SETC  '"LISTTYPE='        *KUKWA* MNOTE           00758600
&ZMS                  SETC  '&ZMS.&LISTTYPE"'                           00758700
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00758800
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00758900
&ZMS                  SETC  '&ZMS "IDLIST"'                             00759000
&ZMS                  SETC  '&ZMS OR "NAMELIST".'                       00759100
                      MNOTE 8,' &ZMS '                                  00759200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00759300
.ZG96B                ANOP  ,                                           00759400
&XLISTTYPE            SETC  'IDLIST'    SET DEFAULT KEYWORD             00759500
.ZG96C                ANOP  ,                                           00759600
&ZXLISTTYPE           SETC  'INPUT'     SET IN/OUTPUT                   00759700
.*-------------------------------------------------------------------   00759800
.***AG.KKWRD04 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00759900
                      AIF   (K'&LISTTYPE(1) GT 0).ZG96D  VALID          00760000
&ZXLISTTYPE           SETC  ''          RESET IN/OUTPUT                 00760100
&ZMS                  SETC  'THE'                                       00760200
&ZMS                  SETC  '&ZMS "LISTTYPE" KEY AND ITS'               00760300
&ZMS                  SETC  '&ZMS ARGUMENT ARE REQUIRED.'               00760400
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00760500
&ZMS                  SETC  '&ZMS "IDLIST"'                             00760600
&ZMS                  SETC  '&ZMS OR "NAMELIST".'                       00760700
                      MNOTE 8,' &ZMS '                                  00760800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00760900
.ZG96D                ANOP  ,                                           00761000
.*----------------------------------------------------------------***   00761100
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00761200
                      AIF   (N'&FIRSTELEM LE 1).ZG98A  CK NUM           00761300
&ZMS                  SETC  '"FIRSTELEM='       *KPOSA* MNOTE           00761400
&ZMS                  SETC  '&ZMS.&FIRSTELEM"'                          00761500
&ZMS                  SETC  '&ZMS "FIRSTELEM"'                          00761600
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00761700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00761800
.ZG98A                ANOP  ,                                           00761900
.*-------------------------------------------------------------------   00762000
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00762100
&ZXFIRSTELEM          SETC  'INPUT'     SET IN/OUTPUT                   00762200
&XFIRSTELEM           SETC  '1'                                         00762300
                      AIF   (K'&FIRSTELEM(1) LE 0).ZG98B  PARM          00762400
&XFIRSTELEM           SETC  '&FIRSTELEM(1)'     SET XVARIABLE           00762500
                      AIF   (N'&FIRSTELEM GT 1).ZG98B  MULTI PARMS      00762600
&XFIRSTELEM           SETC  '&FIRSTELEM'        SET XVARIABLE           00762700
.ZG98B                ANOP  ,                                           00762800
.*-------------------------------------------------------------------   00762900
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00763000
                      AIF   (K'&ZXFIRSTELEM LE 0).ZG98R  NOT I/O        00763100
                      AIF   ('&XFIRSTELEM'(1,1) NE '(').ZG98R           00763200
&ZCGPR                SETC  '&XFIRSTELEM'(2,K'&XFIRSTELEM-2)            00763300
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG98P                00763400
                      AIF   (K'&ZCGPR GT 2).ZG98Q                       00763500
                      AIF   ('&ZCGPR' EQ '0').ZG98Q                     00763600
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00763700
                      AIF   (T'&ZCGPR NE 'N').ZG98Q  INVALID REG NAME   00763800
.ZG98P                ANOP  ,                                           00763900
                      AIF   (T'&ZCGPR NE 'N').ZG98R  NON NUMERIC        00764000
                      AIF   ('&ZCGPR' LT '2').ZG98Q                     00764100
                      AIF   ('&ZCGPR' LE '12').ZG98R                    00764200
.ZG98Q                ANOP  ,                                           00764300
&ZMS                  SETC  '"FIRSTELEM='       *KGPRA* MNOTE           00764400
&ZMS                  SETC  '&ZMS.&FIRSTELEM"'                          00764500
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00764600
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00764700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00764800
.ZG98R                ANOP  ,                                           00764900
.*----------------------------------------------------------------***   00765000
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00765100
                      AIF   (N'&LASTELEM LE 1).ZG101A  CK NUM           00765200
&ZMS                  SETC  '"LASTELEM='        *KPOSA* MNOTE           00765300
&ZMS                  SETC  '&ZMS.&LASTELEM"'                           00765400
&ZMS                  SETC  '&ZMS "LASTELEM"'                           00765500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00765600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00765700
.ZG101A               ANOP  ,                                           00765800
.*-------------------------------------------------------------------   00765900
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00766000
&ZXLASTELEM           SETC  'INPUT'     SET IN/OUTPUT                   00766100
&XLASTELEM            SETC  '&LASTELEM(1)'      SET XVARIABLE           00766200
                      AIF   (N'&LASTELEM GT 1).ZG101B  MULTI PARMS      00766300
&XLASTELEM            SETC  '&LASTELEM'         SET XVARIABLE           00766400
.ZG101B               AIF   (K'&LASTELEM(1) GT 0).ZG101C                00766500
&ZXLASTELEM           SETC  ''          RESET IN/OUTPUT                 00766600
&ZMS                  SETC  ' '         *KRQDA*                         00766700
&ZMS                  SETC  '&ZMS "LASTELEM" KEY AND ITS'               00766800
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00766900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00767000
.ZG101C               ANOP  ,                                           00767100
.*-------------------------------------------------------------------   00767200
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00767300
                      AIF   (K'&ZXLASTELEM LE 0).ZG101R  NOT I/O        00767400
                      AIF   ('&XLASTELEM'(1,1) NE '(').ZG101R           00767500
&ZCGPR                SETC  '&XLASTELEM'(2,K'&XLASTELEM-2)              00767600
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG101P               00767700
                      AIF   (K'&ZCGPR GT 2).ZG101Q                      00767800
                      AIF   ('&ZCGPR' EQ '0').ZG101Q                    00767900
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00768000
                      AIF   (T'&ZCGPR NE 'N').ZG101Q  INVALID REG NAME  00768100
.ZG101P               ANOP  ,                                           00768200
                      AIF   (T'&ZCGPR NE 'N').ZG101R  NON NUMERIC       00768300
                      AIF   ('&ZCGPR' LT '2').ZG101Q                    00768400
                      AIF   ('&ZCGPR' LE '12').ZG101R                   00768500
.ZG101Q               ANOP  ,                                           00768600
&ZMS                  SETC  '"LASTELEM='        *KGPRA* MNOTE           00768700
&ZMS                  SETC  '&ZMS.&LASTELEM"'                           00768800
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00768900
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00769000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00769100
.ZG101R               ANOP  ,                                           00769200
.*-------------------------------------------------------------------   00769300
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00769400
.ZG103                ANOP  ,                                           00769500
&ZTLC                 SETC 'MONITOR_LIST'                               00769600
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG117            00769700
&XREQUEST             SETC  'MONITOR_LIST'      SET KEYWORD             00769800
                      AIF   (N'&REQUEST LE 1).ZG103A  CK NUM            00769900
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00770000
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00770100
&ZMS                  SETC  '&ZMS "REQUEST"'                            00770200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00770300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00770400
.ZG103A               ANOP  ,                                           00770500
.*------------------------------------------------------------------    00770600
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00770700
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00770800
.ZG103A0              AIF   (K'&TYPE LE 0).ZG103A1  OK                  00770900
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00771000
.ZG103A1              AIF   (K'&RESTOKEN LE 0).ZG103A2  OK              00771100
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00771200
.ZG103A2              AIF   (K'&EXTRESTOKEN LE 0).ZG103A3  OK           00771300
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00771400
.ZG103A3              AIF   (K'&ENTRYTYPE LE 0).ZG103A4  OK             00771500
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00771600
.ZG103A4              AIF   (K'&ELEMNUM LE 0).ZG103A5  OK               00771700
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00771800
.ZG103A5              AIF   (K'&LISTLIMIT LE 0).ZG103A6  OK             00771900
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00772000
.ZG103A6              AIF   (K'&LISTDESC LE 0).ZG103A7  OK              00772100
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00772200
.ZG103A7              AIF   (K'&LISTKEY LE 0).ZG103A8  OK               00772300
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00772400
.ZG103A8              AIF   (K'&MAXLISTKEY LE 0).ZG103A9  OK            00772500
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00772600
.ZG103A9              AIF   (K'&SETCURSOR LE 0).ZG103A10  OK            00772700
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00772800
.ZG103A10             AIF   (K'&MOVETOLIST LE 0).ZG103A11  OK           00772900
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00773000
.ZG103A11             AIF   (K'&MOVETOKEY LE 0).ZG103A12  OK            00773100
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00773200
.ZG103A12             AIF   (K'&MOVETOPOS LE 0).ZG103A13  OK            00773300
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00773400
.ZG103A13             AIF   (K'&DATAOPER LE 0).ZG103A14  OK             00773500
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00773600
.ZG103A14             AIF   (K'&LISTTYPE LE 0).ZG103A15  OK             00773700
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00773800
.ZG103A15             AIF   (K'&FIRSTELEM LE 0).ZG103A16  OK            00773900
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00774000
.ZG103A16             AIF   (K'&LASTELEM LE 0).ZG103A17  OK             00774100
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00774200
.ZG103A17             AIF   (K'&UNC LE 0).ZG103A18  OK                  00774300
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00774400
.ZG103A18             AIF   (K'&STARTINDEX LE 0).ZG103A19  OK           00774500
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00774600
.ZG103A19             AIF   (K'&ENDINDEX LE 0).ZG103A20  OK             00774700
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00774800
.ZG103A20             AIF   (K'&MOSVECTOR LE 0).ZG103A21  OK            00774900
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00775000
.ZG103A21             AIF   (K'&ZCVAL LE 0).ZG103A22  OK                00775100
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00775200
                      AIF  (K'&ZCVAL LE 160).ZG103A22A                  00775300
&ZCVAL                SETC '&ZCVAL'(1,160)                              00775400
&ZCVAL                SETC '&ZCVAL....'                                 00775500
.ZG103A22A            ANOP                                              00775600
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00775700
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00775800
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00775900
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00776000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00776100
.ZG103A22             ANOP  ,                                           00776200
.*------------------------------------------------------------------    00776300
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00776400
&XACTION              SETC  ''          INITIALIZE XVARIABLE            00776500
.*-------------------------------------------------------------------   00776600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00776700
.ZG106                ANOP  ,                                           00776800
                      AIF   (K'&ACTION(1) LE 0).ZG106A                  00776900
&ZTLC                 SETC 'START'                                      00777000
                      AIF   ('&ACTION(1)' NE '&ZTLC').ZG115             00777100
&XACTION              SETC  'START'     SET KEYWORD                     00777200
                      AIF   (N'&ACTION LE 1).ZG106A  CK NUM             00777300
&ZMS                  SETC  '"ACTION='  *KPOSA* MNOTE                   00777400
&ZMS                  SETC  '&ZMS.&ACTION"'                             00777500
&ZMS                  SETC  '&ZMS "ACTION"'                             00777600
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00777700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00777800
.ZG106A               ANOP  ,                                           00777900
.*----------------------------------------------------------------***   00778000
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00778100
                      AIF   (N'&VECTORINDEX LE 1).ZG108A  CK NUM        00778200
&ZMS                  SETC  '"VECTORINDEX='     *KPOSA* MNOTE           00778300
&ZMS                  SETC  '&ZMS.&VECTORINDEX"'                        00778400
&ZMS                  SETC  '&ZMS "VECTORINDEX"'                        00778500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00778600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00778700
.ZG108A               ANOP  ,                                           00778800
.*-------------------------------------------------------------------   00778900
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00779000
&ZXVECTORINDEX        SETC  'INPUT'     SET IN/OUTPUT                   00779100
&XVECTORINDEX         SETC  '&VECTORINDEX(1)'   SET XVARIABLE           00779200
                      AIF   (N'&VECTORINDEX GT 1).ZG108B  MULTI PARMS   00779300
&XVECTORINDEX         SETC  '&VECTORINDEX'      SET XVARIABLE           00779400
.ZG108B               AIF   (K'&VECTORINDEX(1) GT 0).ZG108C             00779500
&ZXVECTORINDEX        SETC  ''          RESET IN/OUTPUT                 00779600
&ZMS                  SETC  ' '         *KRQDA*                         00779700
&ZMS                  SETC  '&ZMS "VECTORINDEX" KEY AND ITS'            00779800
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00779900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00780000
.ZG108C               ANOP  ,                                           00780100
.*-------------------------------------------------------------------   00780200
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00780300
                      AIF   (K'&ZXVECTORINDEX LE 0).ZG108R  NOT I/O     00780400
                      AIF   ('&XVECTORINDEX'(1,1) NE '(').ZG108R        00780500
&ZCGPR                SETC  '&XVECTORINDEX'(2,K'&XVECTORINDEX-2)        00780600
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG108P               00780700
                      AIF   (K'&ZCGPR GT 2).ZG108Q                      00780800
                      AIF   ('&ZCGPR' EQ '0').ZG108Q                    00780900
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00781000
                      AIF   (T'&ZCGPR NE 'N').ZG108Q  INVALID REG NAME  00781100
.ZG108P               ANOP  ,                                           00781200
                      AIF   (T'&ZCGPR NE 'N').ZG108R  NON NUMERIC       00781300
                      AIF   ('&ZCGPR' LT '2').ZG108Q                    00781400
                      AIF   ('&ZCGPR' LE '12').ZG108R                   00781500
.ZG108Q               ANOP  ,                                           00781600
&ZMS                  SETC  '"VECTORINDEX='     *KGPRA* MNOTE           00781700
&ZMS                  SETC  '&ZMS.&VECTORINDEX"'                        00781800
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00781900
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00782000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00782100
.ZG108R               ANOP  ,                                           00782200
.*----------------------------------------------------------------***   00782300
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00782400
                      AIF   (N'&DRIVEEXIT LE 1).ZG111A  CK NUM          00782500
&ZMS                  SETC  '"DRIVEEXIT='       *KPOSA* MNOTE           00782600
&ZMS                  SETC  '&ZMS.&DRIVEEXIT"'                          00782700
&ZMS                  SETC  '&ZMS "DRIVEEXIT"'                          00782800
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00782900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00783000
.ZG111A               ANOP  ,                                           00783100
.*-------------------------------------------------------------------   00783200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00783300
&XDRIVEEXIT           SETC  ''          INITIALIZE XVARIABLE            00783400
.ZG112A   AIF   ('&DRIVEEXIT(1)' NE 'YES').ZG113A                       00783500
&XDRIVEEXIT           SETC  'YES'       SET KEYWORD                     00783600
.*-------------------------------------------------------------------   00783700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00783800
.ZG113A   AIF   ('&DRIVEEXIT(1)' NE 'NO').ZG114A                        00783900
&XDRIVEEXIT           SETC  'NO'        SET KEYWORD                     00784000
.*-------------------------------------------------------------------   00784100
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00784200
.ZG114A               AIF   (K'&XDRIVEEXIT GT 0).ZG114C  KEYWORD        00784300
                      AIF   (K'&DRIVEEXIT(1) LE 0).ZG114B               00784400
&ZMS                  SETC  '"DRIVEEXIT='       *KUKWA* MNOTE           00784500
&ZMS                  SETC  '&ZMS.&DRIVEEXIT"'                          00784600
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00784700
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00784800
&ZMS                  SETC  '&ZMS "YES"'                                00784900
&ZMS                  SETC  '&ZMS OR "NO".'                             00785000
                      MNOTE 8,' &ZMS '                                  00785100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00785200
.ZG114B               ANOP  ,                                           00785300
&XDRIVEEXIT           SETC  'YES'       SET DEFAULT KEYWORD             00785400
.ZG114C               ANOP  ,                                           00785500
&ZXDRIVEEXIT          SETC  'INPUT'     SET IN/OUTPUT                   00785600
.*-------------------------------------------------------------------   00785700
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00785800
.ZG115                ANOP  ,                                           00785900
&ZTLC                 SETC 'STOP'                                       00786000
                      AIF   ('&ACTION(1)' NE '&ZTLC').ZG116             00786100
&XACTION              SETC  'STOP'      SET KEYWORD                     00786200
                      AIF   (N'&ACTION LE 1).ZG115A  CK NUM             00786300
&ZMS                  SETC  '"ACTION='  *KPOSA* MNOTE                   00786400
&ZMS                  SETC  '&ZMS.&ACTION"'                             00786500
&ZMS                  SETC  '&ZMS "ACTION"'                             00786600
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00786700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00786800
.ZG115A               ANOP  ,                                           00786900
.*------------------------------------------------------------------    00787000
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00787100
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00787200
.ZG115A0              AIF   (K'&VECTORINDEX LE 0).ZG115A1  OK           00787300
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00787400
.ZG115A1              AIF   (K'&DRIVEEXIT LE 0).ZG115A2  OK             00787500
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00787600
.ZG115A2              AIF   (K'&ZCVAL LE 0).ZG115A3  OK                 00787700
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00787800
&ZMS                  SETC  '"ACTION'   *KMEIA* MNOTE                   00787900
&ZMS                  SETC  '&ZMS.=&ACTION"'                            00788000
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00788100
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00788200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00788300
.ZG115A3              ANOP  ,                                           00788400
.*------------------------------------------------------------------    00788500
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00788600
.ZG116                ANOP  ,                                           00788700
&ZXACTION             SETC  'INPUT'     SET IN/OUTPUT                   00788800
                      AIF   (K'&XACTION GT 0).ZG116E  VALID ARG         00788900
                      AIF   (T'&ACTION EQ 'O').ZG116D  OMITTED          00789000
&ZASYSLNDX            SETA  0                                           00789100
.ZG116A               ANOP  ,           POSITIONAL MACRO KEY            00789200
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                00789300
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG116C           00789400
&ZTLC                 SETC 'ACTION'                                     00789500
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG116A  00789600
.ZG116B               ANOP  ,                                           00789700
&ZXACTION             SETC  ''          RESET IN/OUTPUT                 00789800
&ZMS                  SETC  'THE "ACTION" KEY'  *KOPTA* MNOTE           00789900
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     00790000
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            00790100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00790200
                      AGO   .ZG116E                                     00790300
.ZG116C               ANOP  ,                                           00790400
&ZXACTION             SETC  ''          RESET IN/OUTPUT                 00790500
&ZMS                  SETC  '"ACTION='  *KUKWA* MNOTE                   00790600
&ZMS                  SETC  '&ZMS.&ACTION"'                             00790700
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00790800
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00790900
&ZMS                  SETC  '&ZMS "START"'                              00791000
&ZMS                  SETC  '&ZMS OR "STOP".'                           00791100
                      MNOTE 8,' &ZMS '                                  00791200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00791300
                      AGO   .ZG116E                                     00791400
.ZG116D               ANOP  ,                                           00791500
&XACTION              SETC  'START'     SET DEFAULT KEYWORD             00791600
.ZG116E               ANOP  ,                                           00791700
.*------------------------------------------------------------------    00791800
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00791900
                      AIF   (K'&ACTION(1) GT 0).ZG116F  PARM            00792000
&XACTION              SETC  ''          ENSURE NULL KEYWORD             00792100
&ZXACTION             SETC  ''          RESET IN/OUTPUT                 00792200
&ZMS                  SETC  'THE'                                       00792300
&ZMS                  SETC  '&ZMS "ACTION" KEY AND ITS'                 00792400
&ZMS                  SETC  '&ZMS ARGUMENT ARE REQUIRED.'               00792500
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00792600
&ZMS                  SETC  '&ZMS "START"'                              00792700
&ZMS                  SETC  '&ZMS OR "STOP".'                           00792800
                      MNOTE 8,' &ZMS '                                  00792900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00793000
.ZG116F               ANOP  ,                                           00793100
.*-------------------------------------------------------------------   00793200
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00793300
.ZG117                ANOP  ,                                           00793400
&ZTLC                 SETC 'MONITOR_EVENTQ'                             00793500
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG131            00793600
&XREQUEST             SETC  'MONITOR_EVENTQ'    SET KEYWORD             00793700
                      AIF   (N'&REQUEST LE 1).ZG117A  CK NUM            00793800
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00793900
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00794000
&ZMS                  SETC  '&ZMS "REQUEST"'                            00794100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00794200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00794300
.ZG117A               ANOP  ,                                           00794400
.*------------------------------------------------------------------    00794500
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00794600
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00794700
.ZG117A0              AIF   (K'&TYPE LE 0).ZG117A1  OK                  00794800
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00794900
.ZG117A1              AIF   (K'&RESTOKEN LE 0).ZG117A2  OK              00795000
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00795100
.ZG117A2              AIF   (K'&EXTRESTOKEN LE 0).ZG117A3  OK           00795200
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00795300
.ZG117A3              AIF   (K'&ENTRYTYPE LE 0).ZG117A4  OK             00795400
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00795500
.ZG117A4              AIF   (K'&ELEMNUM LE 0).ZG117A5  OK               00795600
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00795700
.ZG117A5              AIF   (K'&LISTLIMIT LE 0).ZG117A6  OK             00795800
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00795900
.ZG117A6              AIF   (K'&LISTDESC LE 0).ZG117A7  OK              00796000
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00796100
.ZG117A7              AIF   (K'&LISTKEY LE 0).ZG117A8  OK               00796200
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00796300
.ZG117A8              AIF   (K'&MAXLISTKEY LE 0).ZG117A9  OK            00796400
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00796500
.ZG117A9              AIF   (K'&SETCURSOR LE 0).ZG117A10  OK            00796600
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00796700
.ZG117A10             AIF   (K'&MOVETOLIST LE 0).ZG117A11  OK           00796800
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00796900
.ZG117A11             AIF   (K'&MOVETOKEY LE 0).ZG117A12  OK            00797000
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00797100
.ZG117A12             AIF   (K'&MOVETOPOS LE 0).ZG117A13  OK            00797200
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00797300
.ZG117A13             AIF   (K'&DATAOPER LE 0).ZG117A14  OK             00797400
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00797500
.ZG117A14             AIF   (K'&LISTTYPE LE 0).ZG117A15  OK             00797600
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00797700
.ZG117A15             AIF   (K'&FIRSTELEM LE 0).ZG117A16  OK            00797800
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00797900
.ZG117A16             AIF   (K'&LASTELEM LE 0).ZG117A17  OK             00798000
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00798100
.ZG117A17             AIF   (K'&UNC LE 0).ZG117A18  OK                  00798200
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00798300
.ZG117A18             AIF   (K'&STARTINDEX LE 0).ZG117A19  OK           00798400
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00798500
.ZG117A19             AIF   (K'&ENDINDEX LE 0).ZG117A20  OK             00798600
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00798700
.ZG117A20             AIF   (K'&MOSVECTOR LE 0).ZG117A21  OK            00798800
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00798900
.ZG117A21             AIF   (K'&ZCVAL LE 0).ZG117A22  OK                00799000
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00799100
                      AIF  (K'&ZCVAL LE 160).ZG117A22A                  00799200
&ZCVAL                SETC '&ZCVAL'(1,160)                              00799300
&ZCVAL                SETC '&ZCVAL....'                                 00799400
.ZG117A22A            ANOP                                              00799500
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00799600
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00799700
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00799800
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00799900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00800000
.ZG117A22             ANOP  ,                                           00800100
.*------------------------------------------------------------------    00800200
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00800300
&XACTION              SETC  ''          INITIALIZE XVARIABLE            00800400
.*-------------------------------------------------------------------   00800500
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00800600
.ZG120                ANOP  ,                                           00800700
                      AIF   (K'&ACTION(1) LE 0).ZG120A                  00800800
&ZTLC                 SETC 'START'                                      00800900
                      AIF   ('&ACTION(1)' NE '&ZTLC').ZG129             00801000
&XACTION              SETC  'START'     SET KEYWORD                     00801100
                      AIF   (N'&ACTION LE 1).ZG120A  CK NUM             00801200
&ZMS                  SETC  '"ACTION='  *KPOSA* MNOTE                   00801300
&ZMS                  SETC  '&ZMS.&ACTION"'                             00801400
&ZMS                  SETC  '&ZMS "ACTION"'                             00801500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00801600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00801700
.ZG120A               ANOP  ,                                           00801800
.*----------------------------------------------------------------***   00801900
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00802000
                      AIF   (N'&VECTORINDEX LE 1).ZG122A  CK NUM        00802100
&ZMS                  SETC  '"VECTORINDEX='     *KPOSA* MNOTE           00802200
&ZMS                  SETC  '&ZMS.&VECTORINDEX"'                        00802300
&ZMS                  SETC  '&ZMS "VECTORINDEX"'                        00802400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00802500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00802600
.ZG122A               ANOP  ,                                           00802700
.*-------------------------------------------------------------------   00802800
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00802900
&ZXVECTORINDEX        SETC  'INPUT'     SET IN/OUTPUT                   00803000
&XVECTORINDEX         SETC  '&VECTORINDEX(1)'   SET XVARIABLE           00803100
                      AIF   (N'&VECTORINDEX GT 1).ZG122B  MULTI PARMS   00803200
&XVECTORINDEX         SETC  '&VECTORINDEX'      SET XVARIABLE           00803300
.ZG122B               AIF   (K'&VECTORINDEX(1) GT 0).ZG122C             00803400
&ZXVECTORINDEX        SETC  ''          RESET IN/OUTPUT                 00803500
&ZMS                  SETC  ' '         *KRQDA*                         00803600
&ZMS                  SETC  '&ZMS "VECTORINDEX" KEY AND ITS'            00803700
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00803800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00803900
.ZG122C               ANOP  ,                                           00804000
.*-------------------------------------------------------------------   00804100
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00804200
                      AIF   (K'&ZXVECTORINDEX LE 0).ZG122R  NOT I/O     00804300
                      AIF   ('&XVECTORINDEX'(1,1) NE '(').ZG122R        00804400
&ZCGPR                SETC  '&XVECTORINDEX'(2,K'&XVECTORINDEX-2)        00804500
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG122P               00804600
                      AIF   (K'&ZCGPR GT 2).ZG122Q                      00804700
                      AIF   ('&ZCGPR' EQ '0').ZG122Q                    00804800
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00804900
                      AIF   (T'&ZCGPR NE 'N').ZG122Q  INVALID REG NAME  00805000
.ZG122P               ANOP  ,                                           00805100
                      AIF   (T'&ZCGPR NE 'N').ZG122R  NON NUMERIC       00805200
                      AIF   ('&ZCGPR' LT '2').ZG122Q                    00805300
                      AIF   ('&ZCGPR' LE '12').ZG122R                   00805400
.ZG122Q               ANOP  ,                                           00805500
&ZMS                  SETC  '"VECTORINDEX='     *KGPRA* MNOTE           00805600
&ZMS                  SETC  '&ZMS.&VECTORINDEX"'                        00805700
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00805800
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00805900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00806000
.ZG122R               ANOP  ,                                           00806100
.*----------------------------------------------------------------***   00806200
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00806300
                      AIF   (N'&DRIVEEXIT LE 1).ZG125A  CK NUM          00806400
&ZMS                  SETC  '"DRIVEEXIT='       *KPOSA* MNOTE           00806500
&ZMS                  SETC  '&ZMS.&DRIVEEXIT"'                          00806600
&ZMS                  SETC  '&ZMS "DRIVEEXIT"'                          00806700
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00806800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00806900
.ZG125A               ANOP  ,                                           00807000
.*-------------------------------------------------------------------   00807100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00807200
&XDRIVEEXIT           SETC  ''          INITIALIZE XVARIABLE            00807300
.ZG126A   AIF   ('&DRIVEEXIT(1)' NE 'YES').ZG127A                       00807400
&XDRIVEEXIT           SETC  'YES'       SET KEYWORD                     00807500
.*-------------------------------------------------------------------   00807600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00807700
.ZG127A   AIF   ('&DRIVEEXIT(1)' NE 'NO').ZG128A                        00807800
&XDRIVEEXIT           SETC  'NO'        SET KEYWORD                     00807900
.*-------------------------------------------------------------------   00808000
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00808100
.ZG128A               AIF   (K'&XDRIVEEXIT GT 0).ZG128C  KEYWORD        00808200
                      AIF   (K'&DRIVEEXIT(1) LE 0).ZG128B               00808300
&ZMS                  SETC  '"DRIVEEXIT='       *KUKWA* MNOTE           00808400
&ZMS                  SETC  '&ZMS.&DRIVEEXIT"'                          00808500
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00808600
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00808700
&ZMS                  SETC  '&ZMS "YES"'                                00808800
&ZMS                  SETC  '&ZMS OR "NO".'                             00808900
                      MNOTE 8,' &ZMS '                                  00809000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00809100
.ZG128B               ANOP  ,                                           00809200
&XDRIVEEXIT           SETC  'YES'       SET DEFAULT KEYWORD             00809300
.ZG128C               ANOP  ,                                           00809400
&ZXDRIVEEXIT          SETC  'INPUT'     SET IN/OUTPUT                   00809500
.*-------------------------------------------------------------------   00809600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00809700
.ZG129                ANOP  ,                                           00809800
&ZTLC                 SETC 'STOP'                                       00809900
                      AIF   ('&ACTION(1)' NE '&ZTLC').ZG130             00810000
&XACTION              SETC  'STOP'      SET KEYWORD                     00810100
                      AIF   (N'&ACTION LE 1).ZG129A  CK NUM             00810200
&ZMS                  SETC  '"ACTION='  *KPOSA* MNOTE                   00810300
&ZMS                  SETC  '&ZMS.&ACTION"'                             00810400
&ZMS                  SETC  '&ZMS "ACTION"'                             00810500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00810600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00810700
.ZG129A               ANOP  ,                                           00810800
.*------------------------------------------------------------------    00810900
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00811000
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00811100
.ZG129A0              AIF   (K'&VECTORINDEX LE 0).ZG129A1  OK           00811200
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00811300
.ZG129A1              AIF   (K'&DRIVEEXIT LE 0).ZG129A2  OK             00811400
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00811500
.ZG129A2              AIF   (K'&ZCVAL LE 0).ZG129A3  OK                 00811600
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00811700
&ZMS                  SETC  '"ACTION'   *KMEIA* MNOTE                   00811800
&ZMS                  SETC  '&ZMS.=&ACTION"'                            00811900
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00812000
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00812100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00812200
.ZG129A3              ANOP  ,                                           00812300
.*------------------------------------------------------------------    00812400
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00812500
.ZG130                ANOP  ,                                           00812600
&ZXACTION             SETC  'INPUT'     SET IN/OUTPUT                   00812700
                      AIF   (K'&XACTION GT 0).ZG130E  VALID ARG         00812800
                      AIF   (T'&ACTION EQ 'O').ZG130D  OMITTED          00812900
&ZASYSLNDX            SETA  0                                           00813000
.ZG130A               ANOP  ,           POSITIONAL MACRO KEY            00813100
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                00813200
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG130C           00813300
&ZTLC                 SETC 'ACTION'                                     00813400
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG130A  00813500
.ZG130B               ANOP  ,                                           00813600
&ZXACTION             SETC  ''          RESET IN/OUTPUT                 00813700
&ZMS                  SETC  'THE "ACTION" KEY'  *KOPTA* MNOTE           00813800
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     00813900
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            00814000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00814100
                      AGO   .ZG130E                                     00814200
.ZG130C               ANOP  ,                                           00814300
&ZXACTION             SETC  ''          RESET IN/OUTPUT                 00814400
&ZMS                  SETC  '"ACTION='  *KUKWA* MNOTE                   00814500
&ZMS                  SETC  '&ZMS.&ACTION"'                             00814600
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00814700
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00814800
&ZMS                  SETC  '&ZMS "START"'                              00814900
&ZMS                  SETC  '&ZMS OR "STOP".'                           00815000
                      MNOTE 8,' &ZMS '                                  00815100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00815200
                      AGO   .ZG130E                                     00815300
.ZG130D               ANOP  ,                                           00815400
&XACTION              SETC  'START'     SET DEFAULT KEYWORD             00815500
.ZG130E               ANOP  ,                                           00815600
.*------------------------------------------------------------------    00815700
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00815800
                      AIF   (K'&ACTION(1) GT 0).ZG130F  PARM            00815900
&XACTION              SETC  ''          ENSURE NULL KEYWORD             00816000
&ZXACTION             SETC  ''          RESET IN/OUTPUT                 00816100
&ZMS                  SETC  'THE'                                       00816200
&ZMS                  SETC  '&ZMS "ACTION" KEY AND ITS'                 00816300
&ZMS                  SETC  '&ZMS ARGUMENT ARE REQUIRED.'               00816400
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00816500
&ZMS                  SETC  '&ZMS "START"'                              00816600
&ZMS                  SETC  '&ZMS OR "STOP".'                           00816700
                      MNOTE 8,' &ZMS '                                  00816800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00816900
.ZG130F               ANOP  ,                                           00817000
.*-------------------------------------------------------------------   00817100
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00817200
.ZG131                ANOP  ,                                           00817300
&ZTLC                 SETC 'MONITOR_SUBLIST'                            00817400
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG140            00817500
&XREQUEST             SETC  'MONITOR_SUBLIST'   SET KEYWORD             00817600
                      AIF   (N'&REQUEST LE 1).ZG131A  CK NUM            00817700
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00817800
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00817900
&ZMS                  SETC  '&ZMS "REQUEST"'                            00818000
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00818100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00818200
.ZG131A               ANOP  ,                                           00818300
.*------------------------------------------------------------------    00818400
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00818500
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00818600
.ZG131A0              AIF   (K'&TYPE LE 0).ZG131A1  OK                  00818700
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00818800
.ZG131A1              AIF   (K'&RESTOKEN LE 0).ZG131A2  OK              00818900
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00819000
.ZG131A2              AIF   (K'&EXTRESTOKEN LE 0).ZG131A3  OK           00819100
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00819200
.ZG131A3              AIF   (K'&ENTRYTYPE LE 0).ZG131A4  OK             00819300
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00819400
.ZG131A4              AIF   (K'&ELEMNUM LE 0).ZG131A5  OK               00819500
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00819600
.ZG131A5              AIF   (K'&LISTLIMIT LE 0).ZG131A6  OK             00819700
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00819800
.ZG131A6              AIF   (K'&LISTDESC LE 0).ZG131A7  OK              00819900
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00820000
.ZG131A7              AIF   (K'&LISTKEY LE 0).ZG131A8  OK               00820100
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00820200
.ZG131A8              AIF   (K'&MAXLISTKEY LE 0).ZG131A9  OK            00820300
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00820400
.ZG131A9              AIF   (K'&SETCURSOR LE 0).ZG131A10  OK            00820500
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00820600
.ZG131A10             AIF   (K'&MOVETOLIST LE 0).ZG131A11  OK           00820700
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00820800
.ZG131A11             AIF   (K'&MOVETOKEY LE 0).ZG131A12  OK            00820900
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00821000
.ZG131A12             AIF   (K'&MOVETOPOS LE 0).ZG131A13  OK            00821100
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00821200
.ZG131A13             AIF   (K'&DATAOPER LE 0).ZG131A14  OK             00821300
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00821400
.ZG131A14             AIF   (K'&LISTTYPE LE 0).ZG131A15  OK             00821500
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00821600
.ZG131A15             AIF   (K'&FIRSTELEM LE 0).ZG131A16  OK            00821700
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00821800
.ZG131A16             AIF   (K'&LASTELEM LE 0).ZG131A17  OK             00821900
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00822000
.ZG131A17             AIF   (K'&VECTORINDEX LE 0).ZG131A18  OK          00822100
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00822200
.ZG131A18             AIF   (K'&DRIVEEXIT LE 0).ZG131A19  OK            00822300
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00822400
.ZG131A19             AIF   (K'&STARTINDEX LE 0).ZG131A20  OK           00822500
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00822600
.ZG131A20             AIF   (K'&ENDINDEX LE 0).ZG131A21  OK             00822700
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00822800
.ZG131A21             AIF   (K'&MOSVECTOR LE 0).ZG131A22  OK            00822900
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00823000
.ZG131A22             AIF   (K'&ZCVAL LE 0).ZG131A23  OK                00823100
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00823200
                      AIF  (K'&ZCVAL LE 160).ZG131A23A                  00823300
&ZCVAL                SETC '&ZCVAL'(1,160)                              00823400
&ZCVAL                SETC '&ZCVAL....'                                 00823500
.ZG131A23A            ANOP                                              00823600
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00823700
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00823800
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00823900
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00824000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00824100
.ZG131A23             ANOP  ,                                           00824200
.*------------------------------------------------------------------    00824300
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00824400
&XACTION              SETC  ''          INITIALIZE XVARIABLE            00824500
.*-------------------------------------------------------------------   00824600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00824700
.ZG134                ANOP  ,                                           00824800
                      AIF   (K'&ACTION(1) LE 0).ZG134A                  00824900
&ZTLC                 SETC 'START'                                      00825000
                      AIF   ('&ACTION(1)' NE '&ZTLC').ZG138             00825100
&XACTION              SETC  'START'     SET KEYWORD                     00825200
                      AIF   (N'&ACTION LE 1).ZG134A  CK NUM             00825300
&ZMS                  SETC  '"ACTION='  *KPOSA* MNOTE                   00825400
&ZMS                  SETC  '&ZMS.&ACTION"'                             00825500
&ZMS                  SETC  '&ZMS "ACTION"'                             00825600
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00825700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00825800
.ZG134A               ANOP  ,                                           00825900
.*----------------------------------------------------------------***   00826000
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00826100
                      AIF   (N'&UNC LE 1).ZG136A  CK NUM                00826200
&ZMS                  SETC  '"UNC='     *KPOSA* MNOTE                   00826300
&ZMS                  SETC  '&ZMS.&UNC"'                                00826400
&ZMS                  SETC  '&ZMS "UNC"'                                00826500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00826600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00826700
.ZG136A               ANOP  ,                                           00826800
.*-------------------------------------------------------------------   00826900
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00827000
&ZXUNC                SETC  'INPUT'     SET IN/OUTPUT                   00827100
&XUNC                 SETC  '&UNC(1)'   SET XVARIABLE                   00827200
                      AIF   (N'&UNC GT 1).ZG136B  MULTI PARMS           00827300
&XUNC                 SETC  '&UNC'      SET XVARIABLE                   00827400
.ZG136B               AIF   (K'&UNC(1) GT 0).ZG136C                     00827500
&ZXUNC                SETC  ''          RESET IN/OUTPUT                 00827600
&ZMS                  SETC  ' '         *KRQDA*                         00827700
&ZMS                  SETC  '&ZMS "UNC" KEY AND ITS'                    00827800
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00827900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00828000
.ZG136C               ANOP  ,                                           00828100
.*-------------------------------------------------------------------   00828200
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00828300
                      AIF   (K'&ZXUNC LE 0).ZG136R  NOT I/O             00828400
                      AIF   ('&XUNC'(1,1) NE '(').ZG136R                00828500
&ZCGPR                SETC  '&XUNC'(2,K'&XUNC-2)                        00828600
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG136P               00828700
                      AIF   (K'&ZCGPR GT 2).ZG136Q                      00828800
                      AIF   ('&ZCGPR' EQ '0').ZG136Q                    00828900
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00829000
                      AIF   (T'&ZCGPR NE 'N').ZG136Q  INVALID REG NAME  00829100
.ZG136P               ANOP  ,                                           00829200
                      AIF   (T'&ZCGPR NE 'N').ZG136R  NON NUMERIC       00829300
                      AIF   ('&ZCGPR' LT '2').ZG136Q                    00829400
                      AIF   ('&ZCGPR' LE '12').ZG136R                   00829500
.ZG136Q               ANOP  ,                                           00829600
&ZMS                  SETC  '"UNC='     *KGPRA* MNOTE                   00829700
&ZMS                  SETC  '&ZMS.&UNC"'                                00829800
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00829900
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00830000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00830100
.ZG136R               ANOP  ,                                           00830200
.*-------------------------------------------------------------------   00830300
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00830400
.ZG138                ANOP  ,                                           00830500
&ZTLC                 SETC 'STOP'                                       00830600
                      AIF   ('&ACTION(1)' NE '&ZTLC').ZG139             00830700
&XACTION              SETC  'STOP'      SET KEYWORD                     00830800
                      AIF   (N'&ACTION LE 1).ZG138A  CK NUM             00830900
&ZMS                  SETC  '"ACTION='  *KPOSA* MNOTE                   00831000
&ZMS                  SETC  '&ZMS.&ACTION"'                             00831100
&ZMS                  SETC  '&ZMS "ACTION"'                             00831200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00831300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00831400
.ZG138A               ANOP  ,                                           00831500
.*------------------------------------------------------------------    00831600
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00831700
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00831800
.ZG138A0              AIF   (K'&UNC LE 0).ZG138A1  OK                   00831900
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00832000
.ZG138A1              AIF   (K'&ZCVAL LE 0).ZG138A2  OK                 00832100
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00832200
&ZMS                  SETC  '"ACTION'   *KMEIA* MNOTE                   00832300
&ZMS                  SETC  '&ZMS.=&ACTION"'                            00832400
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00832500
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00832600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00832700
.ZG138A2              ANOP  ,                                           00832800
.*------------------------------------------------------------------    00832900
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00833000
.ZG139                ANOP  ,                                           00833100
&ZXACTION             SETC  'INPUT'     SET IN/OUTPUT                   00833200
                      AIF   (K'&XACTION GT 0).ZG139E  VALID ARG         00833300
                      AIF   (T'&ACTION EQ 'O').ZG139D  OMITTED          00833400
&ZASYSLNDX            SETA  0                                           00833500
.ZG139A               ANOP  ,           POSITIONAL MACRO KEY            00833600
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                00833700
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG139C           00833800
&ZTLC                 SETC 'ACTION'                                     00833900
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG139A  00834000
.ZG139B               ANOP  ,                                           00834100
&ZXACTION             SETC  ''          RESET IN/OUTPUT                 00834200
&ZMS                  SETC  'THE "ACTION" KEY'  *KOPTA* MNOTE           00834300
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     00834400
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            00834500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00834600
                      AGO   .ZG139E                                     00834700
.ZG139C               ANOP  ,                                           00834800
&ZXACTION             SETC  ''          RESET IN/OUTPUT                 00834900
&ZMS                  SETC  '"ACTION='  *KUKWA* MNOTE                   00835000
&ZMS                  SETC  '&ZMS.&ACTION"'                             00835100
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00835200
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00835300
&ZMS                  SETC  '&ZMS "START"'                              00835400
&ZMS                  SETC  '&ZMS OR "STOP".'                           00835500
                      MNOTE 8,' &ZMS '                                  00835600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00835700
                      AGO   .ZG139E                                     00835800
.ZG139D               ANOP  ,                                           00835900
&XACTION              SETC  'START'     SET DEFAULT KEYWORD             00836000
.ZG139E               ANOP  ,                                           00836100
.*------------------------------------------------------------------    00836200
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00836300
                      AIF   (K'&ACTION(1) GT 0).ZG139F  PARM            00836400
&XACTION              SETC  ''          ENSURE NULL KEYWORD             00836500
&ZXACTION             SETC  ''          RESET IN/OUTPUT                 00836600
&ZMS                  SETC  'THE'                                       00836700
&ZMS                  SETC  '&ZMS "ACTION" KEY AND ITS'                 00836800
&ZMS                  SETC  '&ZMS ARGUMENT ARE REQUIRED.'               00836900
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00837000
&ZMS                  SETC  '&ZMS "START"'                              00837100
&ZMS                  SETC  '&ZMS OR "STOP".'                           00837200
                      MNOTE 8,' &ZMS '                                  00837300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00837400
.ZG139F               ANOP  ,                                           00837500
.*-------------------------------------------------------------------   00837600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00837700
.ZG140                ANOP  ,                                           00837800
&ZTLC                 SETC 'MONITOR_SUBLISTS'                           00837900
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG150            00838000
&XREQUEST             SETC  'MONITOR_SUBLISTS'  SET KEYWORD             00838100
                      AIF   (N'&REQUEST LE 1).ZG140A  CK NUM            00838200
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00838300
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00838400
&ZMS                  SETC  '&ZMS "REQUEST"'                            00838500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00838600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00838700
.ZG140A               ANOP  ,                                           00838800
.*------------------------------------------------------------------    00838900
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00839000
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00839100
.ZG140A0              AIF   (K'&TYPE LE 0).ZG140A1  OK                  00839200
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00839300
.ZG140A1              AIF   (K'&RESTOKEN LE 0).ZG140A2  OK              00839400
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00839500
.ZG140A2              AIF   (K'&EXTRESTOKEN LE 0).ZG140A3  OK           00839600
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00839700
.ZG140A3              AIF   (K'&ENTRYTYPE LE 0).ZG140A4  OK             00839800
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00839900
.ZG140A4              AIF   (K'&ELEMNUM LE 0).ZG140A5  OK               00840000
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00840100
.ZG140A5              AIF   (K'&LISTLIMIT LE 0).ZG140A6  OK             00840200
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00840300
.ZG140A6              AIF   (K'&LISTDESC LE 0).ZG140A7  OK              00840400
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00840500
.ZG140A7              AIF   (K'&LISTKEY LE 0).ZG140A8  OK               00840600
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00840700
.ZG140A8              AIF   (K'&MAXLISTKEY LE 0).ZG140A9  OK            00840800
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00840900
.ZG140A9              AIF   (K'&SETCURSOR LE 0).ZG140A10  OK            00841000
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00841100
.ZG140A10             AIF   (K'&MOVETOLIST LE 0).ZG140A11  OK           00841200
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00841300
.ZG140A11             AIF   (K'&MOVETOKEY LE 0).ZG140A12  OK            00841400
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00841500
.ZG140A12             AIF   (K'&MOVETOPOS LE 0).ZG140A13  OK            00841600
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00841700
.ZG140A13             AIF   (K'&DATAOPER LE 0).ZG140A14  OK             00841800
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00841900
.ZG140A14             AIF   (K'&LISTTYPE LE 0).ZG140A15  OK             00842000
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00842100
.ZG140A15             AIF   (K'&FIRSTELEM LE 0).ZG140A16  OK            00842200
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00842300
.ZG140A16             AIF   (K'&LASTELEM LE 0).ZG140A17  OK             00842400
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00842500
.ZG140A17             AIF   (K'&ACTION LE 0).ZG140A18  OK               00842600
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00842700
.ZG140A18             AIF   (K'&VECTORINDEX LE 0).ZG140A19  OK          00842800
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00842900
.ZG140A19             AIF   (K'&DRIVEEXIT LE 0).ZG140A20  OK            00843000
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00843100
.ZG140A20             AIF   (K'&UNC LE 0).ZG140A21  OK                  00843200
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00843300
.ZG140A21             AIF   (K'&ZCVAL LE 0).ZG140A22  OK                00843400
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00843500
                      AIF  (K'&ZCVAL LE 160).ZG140A22A                  00843600
&ZCVAL                SETC '&ZCVAL'(1,160)                              00843700
&ZCVAL                SETC '&ZCVAL....'                                 00843800
.ZG140A22A            ANOP                                              00843900
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00844000
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00844100
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00844200
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00844300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00844400
.ZG140A22             ANOP  ,                                           00844500
.*----------------------------------------------------------------***   00844600
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00844700
                      AIF   (N'&STARTINDEX LE 1).ZG142A  CK NUM         00844800
&ZMS                  SETC  '"STARTINDEX='      *KPOSA* MNOTE           00844900
&ZMS                  SETC  '&ZMS.&STARTINDEX"'                         00845000
&ZMS                  SETC  '&ZMS "STARTINDEX"'                         00845100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00845200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00845300
.ZG142A               ANOP  ,                                           00845400
.*-------------------------------------------------------------------   00845500
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00845600
&ZXSTARTINDEX         SETC  'INPUT'     SET IN/OUTPUT                   00845700
&XSTARTINDEX          SETC  '&STARTINDEX(1)'    SET XVARIABLE           00845800
                      AIF   (N'&STARTINDEX GT 1).ZG142B  MULTI PARMS    00845900
&XSTARTINDEX          SETC  '&STARTINDEX'       SET XVARIABLE           00846000
.ZG142B               AIF   (K'&STARTINDEX(1) GT 0).ZG142C              00846100
&ZXSTARTINDEX         SETC  ''          RESET IN/OUTPUT                 00846200
&ZMS                  SETC  ' '         *KRQDA*                         00846300
&ZMS                  SETC  '&ZMS "STARTINDEX" KEY AND ITS'             00846400
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00846500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00846600
.ZG142C               ANOP  ,                                           00846700
.*-------------------------------------------------------------------   00846800
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00846900
                      AIF   (K'&ZXSTARTINDEX LE 0).ZG142R  NOT I/O      00847000
                      AIF   ('&XSTARTINDEX'(1,1) NE '(').ZG142R         00847100
&ZCGPR                SETC  '&XSTARTINDEX'(2,K'&XSTARTINDEX-2)          00847200
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG142P               00847300
                      AIF   (K'&ZCGPR GT 2).ZG142Q                      00847400
                      AIF   ('&ZCGPR' EQ '0').ZG142Q                    00847500
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00847600
                      AIF   (T'&ZCGPR NE 'N').ZG142Q  INVALID REG NAME  00847700
.ZG142P               ANOP  ,                                           00847800
                      AIF   (T'&ZCGPR NE 'N').ZG142R  NON NUMERIC       00847900
                      AIF   ('&ZCGPR' LT '2').ZG142Q                    00848000
                      AIF   ('&ZCGPR' LE '12').ZG142R                   00848100
.ZG142Q               ANOP  ,                                           00848200
&ZMS                  SETC  '"STARTINDEX='      *KGPRA* MNOTE           00848300
&ZMS                  SETC  '&ZMS.&STARTINDEX"'                         00848400
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00848500
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00848600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00848700
.ZG142R               ANOP  ,                                           00848800
.*----------------------------------------------------------------***   00848900
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00849000
                      AIF   (N'&ENDINDEX LE 1).ZG145A  CK NUM           00849100
&ZMS                  SETC  '"ENDINDEX='        *KPOSA* MNOTE           00849200
&ZMS                  SETC  '&ZMS.&ENDINDEX"'                           00849300
&ZMS                  SETC  '&ZMS "ENDINDEX"'                           00849400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00849500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00849600
.ZG145A               ANOP  ,                                           00849700
.*-------------------------------------------------------------------   00849800
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00849900
&ZXENDINDEX           SETC  'INPUT'     SET IN/OUTPUT                   00850000
&XENDINDEX            SETC  '&ENDINDEX(1)'      SET XVARIABLE           00850100
                      AIF   (N'&ENDINDEX GT 1).ZG145B  MULTI PARMS      00850200
&XENDINDEX            SETC  '&ENDINDEX'         SET XVARIABLE           00850300
.ZG145B               AIF   (K'&ENDINDEX(1) GT 0).ZG145C                00850400
&ZXENDINDEX           SETC  ''          RESET IN/OUTPUT                 00850500
&ZMS                  SETC  ' '         *KRQDA*                         00850600
&ZMS                  SETC  '&ZMS "ENDINDEX" KEY AND ITS'               00850700
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00850800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00850900
.ZG145C               ANOP  ,                                           00851000
.*-------------------------------------------------------------------   00851100
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00851200
                      AIF   (K'&ZXENDINDEX LE 0).ZG145R  NOT I/O        00851300
                      AIF   ('&XENDINDEX'(1,1) NE '(').ZG145R           00851400
&ZCGPR                SETC  '&XENDINDEX'(2,K'&XENDINDEX-2)              00851500
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG145P               00851600
                      AIF   (K'&ZCGPR GT 2).ZG145Q                      00851700
                      AIF   ('&ZCGPR' EQ '0').ZG145Q                    00851800
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00851900
                      AIF   (T'&ZCGPR NE 'N').ZG145Q  INVALID REG NAME  00852000
.ZG145P               ANOP  ,                                           00852100
                      AIF   (T'&ZCGPR NE 'N').ZG145R  NON NUMERIC       00852200
                      AIF   ('&ZCGPR' LT '2').ZG145Q                    00852300
                      AIF   ('&ZCGPR' LE '12').ZG145R                   00852400
.ZG145Q               ANOP  ,                                           00852500
&ZMS                  SETC  '"ENDINDEX='        *KGPRA* MNOTE           00852600
&ZMS                  SETC  '&ZMS.&ENDINDEX"'                           00852700
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00852800
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00852900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00853000
.ZG145R               ANOP  ,                                           00853100
.*----------------------------------------------------------------***   00853200
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY                    00853300
                      AIF   (N'&MOSVECTOR LE 1).ZG148A  CK NUM          00853400
&ZMS                  SETC  '"MOSVECTOR='       *KPOSA* MNOTE           00853500
&ZMS                  SETC  '&ZMS.&MOSVECTOR"'                          00853600
&ZMS                  SETC  '&ZMS "MOSVECTOR"'                          00853700
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00853800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00853900
.ZG148A               ANOP  ,                                           00854000
.*-------------------------------------------------------------------   00854100
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE                        00854200
&ZXMOSVECTOR          SETC  'OUTPUT'    SET IN/OUTPUT                   00854300
&XMOSVECTOR           SETC  '&MOSVECTOR(1)'     SET XVARIABLE           00854400
                      AIF   (N'&MOSVECTOR GT 1).ZG148B  MULTI PARMS     00854500
&XMOSVECTOR           SETC  '&MOSVECTOR'        SET XVARIABLE           00854600
.ZG148B               AIF   (K'&MOSVECTOR(1) GT 0).ZG148C               00854700
&ZXMOSVECTOR          SETC  ''          RESET IN/OUTPUT                 00854800
&ZMS                  SETC  ' '         *KRQDA*                         00854900
&ZMS                  SETC  '&ZMS "MOSVECTOR" KEY AND ITS'              00855000
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00855100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00855200
.ZG148C               ANOP  ,                                           00855300
.*-------------------------------------------------------------------   00855400
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE                   00855500
                      AIF   (K'&ZXMOSVECTOR LE 0).ZG148R  NOT I/O       00855600
                      AIF   ('&XMOSVECTOR'(1,1) NE '(').ZG148R          00855700
&ZCGPR                SETC  '&XMOSVECTOR'(2,K'&XMOSVECTOR-2)            00855800
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG148P               00855900
                      AIF   (K'&ZCGPR GT 2).ZG148Q                      00856000
                      AIF   ('&ZCGPR' EQ '0').ZG148Q                    00856100
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00856200
                      AIF   (T'&ZCGPR NE 'N').ZG148Q  INVALID REG NAME  00856300
.ZG148P               ANOP  ,                                           00856400
                      AIF   (T'&ZCGPR NE 'N').ZG148R  NON NUMERIC       00856500
                      AIF   ('&ZCGPR' LT '2').ZG148Q                    00856600
                      AIF   ('&ZCGPR' LE '12').ZG148R                   00856700
.ZG148Q               ANOP  ,                                           00856800
&ZMS                  SETC  '"MOSVECTOR='       *KGPRA* MNOTE           00856900
&ZMS                  SETC  '&ZMS.&MOSVECTOR"'                          00857000
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00857100
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00857200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00857300
.ZG148R               ANOP  ,                                           00857400
.*-------------------------------------------------------------------   00857500
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00857600
.ZG150                ANOP  ,                                           00857700
&ZTLC                 SETC 'LOCK'                                       00857800
                      AIF   ('&REQUEST(1)' NE '&ZTLC').ZG151            00857900
&XREQUEST             SETC  'LOCK'      SET KEYWORD                     00858000
                      AIF   (N'&REQUEST LE 1).ZG150A  CK NUM            00858100
&ZMS                  SETC  '"REQUEST='         *KPOSA* MNOTE           00858200
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00858300
&ZMS                  SETC  '&ZMS "REQUEST"'                            00858400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00858500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00858600
.ZG150A               ANOP  ,                                           00858700
.*------------------------------------------------------------------    00858800
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00858900
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00859000
.ZG150A0              AIF   (K'&TYPE LE 0).ZG150A1  OK                  00859100
&ZCVAL                SETC '&ZCVAL TYPE'        INCORRECT KEY USED      00859200
.ZG150A1              AIF   (K'&RESTOKEN LE 0).ZG150A2  OK              00859300
&ZCVAL                SETC '&ZCVAL RESTOKEN'    INCORRECT KEY USED      00859400
.ZG150A2              AIF   (K'&EXTRESTOKEN LE 0).ZG150A3  OK           00859500
&ZCVAL                SETC '&ZCVAL EXTRESTOKEN'  INCORRECT KEY USED     00859600
.ZG150A3              AIF   (K'&ENTRYTYPE LE 0).ZG150A4  OK             00859700
&ZCVAL                SETC '&ZCVAL ENTRYTYPE'   INCORRECT KEY USED      00859800
.ZG150A4              AIF   (K'&ELEMNUM LE 0).ZG150A5  OK               00859900
&ZCVAL                SETC '&ZCVAL ELEMNUM'     INCORRECT KEY USED      00860000
.ZG150A5              AIF   (K'&LISTLIMIT LE 0).ZG150A6  OK             00860100
&ZCVAL                SETC '&ZCVAL LISTLIMIT'   INCORRECT KEY USED      00860200
.ZG150A6              AIF   (K'&LISTDESC LE 0).ZG150A7  OK              00860300
&ZCVAL                SETC '&ZCVAL LISTDESC'    INCORRECT KEY USED      00860400
.ZG150A7              AIF   (K'&LISTKEY LE 0).ZG150A8  OK               00860500
&ZCVAL                SETC '&ZCVAL LISTKEY'     INCORRECT KEY USED      00860600
.ZG150A8              AIF   (K'&MAXLISTKEY LE 0).ZG150A9  OK            00860700
&ZCVAL                SETC '&ZCVAL MAXLISTKEY'  INCORRECT KEY USED      00860800
.ZG150A9              AIF   (K'&SETCURSOR LE 0).ZG150A10  OK            00860900
&ZCVAL                SETC '&ZCVAL SETCURSOR'   INCORRECT KEY USED      00861000
.ZG150A10             AIF   (K'&MOVETOLIST LE 0).ZG150A11  OK           00861100
&ZCVAL                SETC '&ZCVAL MOVETOLIST'  INCORRECT KEY USED      00861200
.ZG150A11             AIF   (K'&MOVETOKEY LE 0).ZG150A12  OK            00861300
&ZCVAL                SETC '&ZCVAL MOVETOKEY'   INCORRECT KEY USED      00861400
.ZG150A12             AIF   (K'&MOVETOPOS LE 0).ZG150A13  OK            00861500
&ZCVAL                SETC '&ZCVAL MOVETOPOS'   INCORRECT KEY USED      00861600
.ZG150A13             AIF   (K'&DATAOPER LE 0).ZG150A14  OK             00861700
&ZCVAL                SETC '&ZCVAL DATAOPER'    INCORRECT KEY USED      00861800
.ZG150A14             AIF   (K'&LISTTYPE LE 0).ZG150A15  OK             00861900
&ZCVAL                SETC '&ZCVAL LISTTYPE'    INCORRECT KEY USED      00862000
.ZG150A15             AIF   (K'&FIRSTELEM LE 0).ZG150A16  OK            00862100
&ZCVAL                SETC '&ZCVAL FIRSTELEM'   INCORRECT KEY USED      00862200
.ZG150A16             AIF   (K'&LASTELEM LE 0).ZG150A17  OK             00862300
&ZCVAL                SETC '&ZCVAL LASTELEM'    INCORRECT KEY USED      00862400
.ZG150A17             AIF   (K'&ACTION LE 0).ZG150A18  OK               00862500
&ZCVAL                SETC '&ZCVAL ACTION'      INCORRECT KEY USED      00862600
.ZG150A18             AIF   (K'&VECTORINDEX LE 0).ZG150A19  OK          00862700
&ZCVAL                SETC '&ZCVAL VECTORINDEX'  INCORRECT KEY USED     00862800
.ZG150A19             AIF   (K'&DRIVEEXIT LE 0).ZG150A20  OK            00862900
&ZCVAL                SETC '&ZCVAL DRIVEEXIT'   INCORRECT KEY USED      00863000
.ZG150A20             AIF   (K'&UNC LE 0).ZG150A21  OK                  00863100
&ZCVAL                SETC '&ZCVAL UNC'         INCORRECT KEY USED      00863200
.ZG150A21             AIF   (K'&STARTINDEX LE 0).ZG150A22  OK           00863300
&ZCVAL                SETC '&ZCVAL STARTINDEX'  INCORRECT KEY USED      00863400
.ZG150A22             AIF   (K'&ENDINDEX LE 0).ZG150A23  OK             00863500
&ZCVAL                SETC '&ZCVAL ENDINDEX'    INCORRECT KEY USED      00863600
.ZG150A23             AIF   (K'&MOSVECTOR LE 0).ZG150A24  OK            00863700
&ZCVAL                SETC '&ZCVAL MOSVECTOR'   INCORRECT KEY USED      00863800
.ZG150A24             AIF   (K'&ZCVAL LE 0).ZG150A25  OK                00863900
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00864000
                      AIF  (K'&ZCVAL LE 160).ZG150A25A                  00864100
&ZCVAL                SETC '&ZCVAL'(1,160)                              00864200
&ZCVAL                SETC '&ZCVAL....'                                 00864300
.ZG150A25A            ANOP                                              00864400
&ZMS                  SETC  '"REQUEST'  *KMEIA* MNOTE                   00864500
&ZMS                  SETC  '&ZMS.=&REQUEST"'                           00864600
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00864700
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00864800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00864900
.ZG150A25             ANOP  ,                                           00865000
.*------------------------------------------------------------------    00865100
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00865200
.ZG151                ANOP  ,                                           00865300
&ZXREQUEST            SETC  'INPUT'     SET IN/OUTPUT                   00865400
                      AIF   (K'&XREQUEST GT 0).ZG151E  VALID ARG        00865500
                      AIF   (T'&REQUEST EQ 'O').ZG151D  OMITTED         00865600
&ZASYSLNDX            SETA  0                                           00865700
.ZG151A               ANOP  ,           POSITIONAL MACRO KEY            00865800
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                00865900
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG151C           00866000
&ZTLC                 SETC 'REQUEST'                                    00866100
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG151A  00866200
.ZG151B               ANOP  ,                                           00866300
&ZXREQUEST            SETC  ''          RESET IN/OUTPUT                 00866400
&ZMS                  SETC  'THE "REQUEST" KEY'  *KOPTA* MNOTE          00866500
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     00866600
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            00866700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00866800
                      AGO   .ZG151E                                     00866900
.ZG151C               ANOP  ,                                           00867000
&ZXREQUEST            SETC  ''          RESET IN/OUTPUT                 00867100
&ZMS                  SETC  '"REQUEST='         *KUKWA* MNOTE           00867200
&ZMS                  SETC  '&ZMS.&REQUEST"'                            00867300
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00867400
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00867500
&ZMS                  SETC  '&ZMS "READ",'                              00867600
&ZMS                  SETC  '&ZMS "READ_LIST",'                         00867700
&ZMS                  SETC  '&ZMS "READ_MULT",'                         00867800
&ZMS                  SETC  '&ZMS "READ_LCONTROLS",'                    00867900
&ZMS                  SETC  '&ZMS "READ_EQCONTROLS",'                   00868000
&ZMS                  SETC  '&ZMS "READ_EMCONTROLS",'                   00868100
&ZMS                  SETC  '&ZMS "DEQ_EVENTQ",'                        00868200
&ZMS                  SETC  '&ZMS "WRITE",'                             00868300
&ZMS                  SETC  '&ZMS "WRITE_LCONTROLS",'                   00868400
&ZMS                  SETC  '&ZMS "MOVE",'                              00868500
                      MNOTE 8,' &ZMS '                                  00868600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00868700
&ZMS                  SETC  '(CONTINUED) '                              00868800
&ZMS                  SETC  '&ZMS "DELETE",'                            00868900
&ZMS                  SETC  '&ZMS "DELETE_MULT",'                       00869000
&ZMS                  SETC  '&ZMS "DELETE_ENTRYLIST",'                  00869100
&ZMS                  SETC  '&ZMS "MONITOR_LIST",'                      00869200
&ZMS                  SETC  '&ZMS "MONITOR_EVENTQ",'                    00869300
&ZMS                  SETC  '&ZMS "MONITOR_SUBLIST",'                   00869400
&ZMS                  SETC  '&ZMS "MONITOR_SUBLISTS",'                  00869500
&ZMS                  SETC  '&ZMS OR "LOCK".'                           00869600
                      MNOTE 8,' &ZMS '                                  00869700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00869800
                      AGO   .ZG151E                                     00869900
.ZG151D               ANOP  ,                                           00870000
&XREQUEST             SETC  'READ'      SET DEFAULT KEYWORD             00870100
.ZG151E               ANOP  ,                                           00870200
.*------------------------------------------------------------------    00870300
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00870400
                      AIF   (K'&REQUEST(1) GT 0).ZG151F  PARM           00870500
&XREQUEST             SETC  ''          ENSURE NULL KEYWORD             00870600
&ZXREQUEST            SETC  ''          RESET IN/OUTPUT                 00870700
&ZMS                  SETC  'THE'                                       00870800
&ZMS                  SETC  '&ZMS "REQUEST" KEY AND ITS'                00870900
&ZMS                  SETC  '&ZMS ARGUMENT ARE REQUIRED.'               00871000
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00871100
&ZMS                  SETC  '&ZMS "READ",'                              00871200
&ZMS                  SETC  '&ZMS "READ_LIST",'                         00871300
&ZMS                  SETC  '&ZMS "READ_MULT",'                         00871400
&ZMS                  SETC  '&ZMS "READ_LCONTROLS",'                    00871500
&ZMS                  SETC  '&ZMS "READ_EQCONTROLS",'                   00871600
&ZMS                  SETC  '&ZMS "READ_EMCONTROLS",'                   00871700
&ZMS                  SETC  '&ZMS "DEQ_EVENTQ",'                        00871800
&ZMS                  SETC  '&ZMS "WRITE",'                             00871900
&ZMS                  SETC  '&ZMS "WRITE_LCONTROLS",'                   00872000
                      MNOTE 8,' &ZMS '                                  00872100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00872200
&ZMS                  SETC  '(CONTINUED) '                              00872300
&ZMS                  SETC  '&ZMS "MOVE",'                              00872400
&ZMS                  SETC  '&ZMS "DELETE",'                            00872500
&ZMS                  SETC  '&ZMS "DELETE_MULT",'                       00872600
&ZMS                  SETC  '&ZMS "DELETE_ENTRYLIST",'                  00872700
&ZMS                  SETC  '&ZMS "MONITOR_LIST",'                      00872800
&ZMS                  SETC  '&ZMS "MONITOR_EVENTQ",'                    00872900
&ZMS                  SETC  '&ZMS "MONITOR_SUBLIST",'                   00873000
&ZMS                  SETC  '&ZMS "MONITOR_SUBLISTS",'                  00873100
&ZMS                  SETC  '&ZMS OR "LOCK".'                           00873200
                      MNOTE 8,' &ZMS '                                  00873300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00873400
.ZG151F               ANOP  ,                                           00873500
.*----------------------------------------------------------------***   00873600
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00873700
                      AIF   (N'&CONTOKEN LE 1).ZG153A  CK NUM           00873800
&ZMS                  SETC  '"CONTOKEN='        *KPOSA* MNOTE           00873900
&ZMS                  SETC  '&ZMS.&CONTOKEN"'                           00874000
&ZMS                  SETC  '&ZMS "CONTOKEN"'                           00874100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00874200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00874300
.ZG153A               ANOP  ,                                           00874400
.*-------------------------------------------------------------------   00874500
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00874600
&ZXCONTOKEN           SETC  'INPUT'     SET IN/OUTPUT                   00874700
&XCONTOKEN            SETC  '&CONTOKEN(1)'      SET XVARIABLE           00874800
                      AIF   (N'&CONTOKEN GT 1).ZG153B  MULTI PARMS      00874900
&XCONTOKEN            SETC  '&CONTOKEN'         SET XVARIABLE           00875000
.ZG153B               AIF   (K'&CONTOKEN(1) GT 0).ZG153C                00875100
&ZXCONTOKEN           SETC  ''          RESET IN/OUTPUT                 00875200
&ZMS                  SETC  ' '         *KRQDA*                         00875300
&ZMS                  SETC  '&ZMS "CONTOKEN" KEY AND ITS'               00875400
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00875500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00875600
.ZG153C               ANOP  ,                                           00875700
.*-------------------------------------------------------------------   00875800
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00875900
                      AIF   (K'&ZXCONTOKEN LE 0).ZG153R  NOT I/O        00876000
                      AIF   ('&XCONTOKEN'(1,1) NE '(').ZG153R           00876100
&ZCGPR                SETC  '&XCONTOKEN'(2,K'&XCONTOKEN-2)              00876200
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG153P               00876300
                      AIF   (K'&ZCGPR GT 2).ZG153Q                      00876400
                      AIF   ('&ZCGPR' EQ '0').ZG153Q                    00876500
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00876600
                      AIF   (T'&ZCGPR NE 'N').ZG153Q  INVALID REG NAME  00876700
.ZG153P               ANOP  ,                                           00876800
                      AIF   (T'&ZCGPR NE 'N').ZG153R  NON NUMERIC       00876900
                      AIF   ('&ZCGPR' LT '2').ZG153Q                    00877000
                      AIF   ('&ZCGPR' LE '12').ZG153R                   00877100
.ZG153Q               ANOP  ,                                           00877200
&ZMS                  SETC  '"CONTOKEN='        *KGPRA* MNOTE           00877300
&ZMS                  SETC  '&ZMS.&CONTOKEN"'                           00877400
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00877500
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00877600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00877700
.ZG153R               ANOP  ,                                           00877800
.*----------------------------------------------------------------***   00877900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00878000
                      AIF   (N'&REQID LE 1).ZG156A  CK NUM              00878100
&ZMS                  SETC  '"REQID='   *KPOSA* MNOTE                   00878200
&ZMS                  SETC  '&ZMS.&REQID"'                              00878300
&ZMS                  SETC  '&ZMS "REQID"'                              00878400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00878500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00878600
.ZG156A               ANOP  ,                                           00878700
.*-------------------------------------------------------------------   00878800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00878900
&ZXREQID              SETC  'INPUT'     SET IN/OUTPUT                   00879000
&XREQID               SETC  'NO_REQID'                                  00879100
                      AIF   (K'&REQID(1) LE 0).ZG156B  PARM             00879200
&XREQID               SETC  '&REQID(1)'         SET XVARIABLE           00879300
                      AIF   (N'&REQID GT 1).ZG156B  MULTI PARMS         00879400
&XREQID               SETC  '&REQID'    SET XVARIABLE                   00879500
.ZG156B               ANOP  ,                                           00879600
.*-------------------------------------------------------------------   00879700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00879800
                      AIF   (K'&ZXREQID LE 0).ZG156R  NOT I/O           00879900
         AIF   ('&XREQID' EQ 'NO_REQID').ZG156R                         00880000
                      AIF   ('&XREQID'(1,1) NE '(').ZG156R              00880100
&ZCGPR                SETC  '&XREQID'(2,K'&XREQID-2)                    00880200
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG156P               00880300
                      AIF   (K'&ZCGPR GT 2).ZG156Q                      00880400
                      AIF   ('&ZCGPR' EQ '0').ZG156Q                    00880500
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00880600
                      AIF   (T'&ZCGPR NE 'N').ZG156Q  INVALID REG NAME  00880700
.ZG156P               ANOP  ,                                           00880800
                      AIF   (T'&ZCGPR NE 'N').ZG156R  NON NUMERIC       00880900
                      AIF   ('&ZCGPR' LT '2').ZG156Q                    00881000
                      AIF   ('&ZCGPR' LE '12').ZG156R                   00881100
.ZG156Q               ANOP  ,                                           00881200
&ZMS                  SETC  '"REQID='   *KGPRA* MNOTE                   00881300
&ZMS                  SETC  '&ZMS.&REQID"'                              00881400
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00881500
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00881600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00881700
.ZG156R               ANOP  ,                                           00881800
.*----------------------------------------------------------------***   00881900
.***AG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00882000
&XDATAREA             SETC  ''          INITIALIZE XVARIABLE            00882100
                      AIF   (K'&BUFLIST LE 0).ZG159C                    00882200
&ZXDATAREA            SETC  'INPUT'     SET IN/OUTPUT                   00882300
&XDATAREA             SETC  'BUFLIST'   SET XVARIABLE                   00882400
&ZXBUFLIST            SETC  'INPUT'     SET IN/OUTPUT                   00882500
&XBUFLIST             SETC  '&BUFLIST(1)'       SET XVARIABLE PARM      00882600
                      AIF   (N'&BUFLIST GT 1).ZG159A                    00882700
&XBUFLIST             SETC  '&BUFLIST'  SET XVARIABLE PARM              00882800
.ZG159A               AIF   (N'&BUFLIST LE 1).ZG159B  CK NUM            00882900
&ZMS                  SETC  '"BUFLIST='         *KPOSA* MNOTE           00883000
&ZMS                  SETC  '&ZMS.&BUFLIST"'                            00883100
&ZMS                  SETC  '&ZMS "BUFLIST"'                            00883200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00883300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00883400
.ZG159B               AIF   (K'&XBUFLIST GT 0).ZG159C  ONE PARM         00883500
&ZXDATAREA            SETC  ''          RESET IN/OUTPUT                 00883600
&ZXBUFLIST            SETC  ''          RESET IN/OUTPUT                 00883700
&ZMS                  SETC  ' '         *KRQDA*                         00883800
&ZMS                  SETC  '&ZMS "BUFLIST" KEY AND ITS'                00883900
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00884000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00884100
.ZG159C               ANOP  ,                                           00884200
.*----------------------------------------------------------------***   00884300
.***AG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00884400
                      AIF   (K'&BUFFER LE 0).ZG182D  NO ME KEY          00884500
                      AIF   (N'&BUFFER LE 1).ZG182A  CK NUM             00884600
&ZMS                  SETC  '"BUFFER='  *KPOSA* MNOTE                   00884700
&ZMS                  SETC  '&ZMS.&BUFFER"'                             00884800
&ZMS                  SETC  '&ZMS "BUFFER"'                             00884900
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00885000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00885100
.ZG182A               AIF   (K'&XDATAREA LE 0).ZG182B                   00885200
&ZMS                  SETC  '"BUFFER'   *KMEKA* MNOTE                   00885300
&ZMS                  SETC  '&ZMS.=&BUFFER"'                            00885400
&ZMS                  SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'       00885500
&ZMS                  SETC  '&ZMS "&XDATAREA"'                          00885600
                      MNOTE 8,' &ZMS KEY.'                              00885700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00885800
                      AGO   .ZG182D                                     00885900
.*                                                                      00886000
.ZG182B               ANOP  ,                                           00886100
&ZXDATAREA            SETC  'INPUT'     SET IN/OUTPUT                   00886200
&XDATAREA             SETC  'BUFFER'    SET XVARIABLE                   00886300
&ZXBUFFER             SETC  'INPUT'     SET IN/OUTPUT                   00886400
&XBUFFER              SETC  '&BUFFER(1)'        SET XVARIABLE PARM      00886500
                      AIF   (N'&BUFFER GT 1).ZG182C                     00886600
&XBUFFER              SETC  '&BUFFER'   SET XVARIABLE PARM              00886700
.ZG182C               AIF   (K'&XBUFFER GT 0).ZG182D  ONE PARM          00886800
&ZXDATAREA            SETC  ''          RESET IN/OUTPUT                 00886900
&ZXBUFFER             SETC  ''          RESET IN/OUTPUT                 00887000
&ZMS                  SETC  ' '         *KRQDA*                         00887100
&ZMS                  SETC  '&ZMS "BUFFER" KEY AND ITS'                 00887200
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            00887300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00887400
.ZG182D               ANOP  ,                                           00887500
.*------------------------------------------------------------------    00887600
.***AG.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED           00887700
                      AIF   (K'&XDATAREA GT 0).ZG194B                   00887800
&ZXDATAREA            SETC  'INPUT'     SET IN/OUTPUT                   00887900
&XDATAREA             SETC  'BUFLIST'   SET DEFAULT                     00888000
&ZXBUFLIST            SETC  'INPUT'     SET IN/OUTPUT                   00888100
&XBUFLIST             SETC  '0'         SET DEFAULT PARM                00888200
.ZG194B               ANOP  ,                                           00888300
.*-------------------------------------------------------------------   00888400
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE                 00888500
                      AIF   (K'&ZXBUFFER LE 0).ZG194R  NOT I/O          00888600
                      AIF   ('&XBUFFER'(1,1) NE '(').ZG194R             00888700
&ZCGPR                SETC  '&XBUFFER'(2,K'&XBUFFER-2)                  00888800
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG194P               00888900
                      AIF   (K'&ZCGPR GT 2).ZG194Q                      00889000
                      AIF   ('&ZCGPR' EQ '0').ZG194Q                    00889100
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00889200
                      AIF   (T'&ZCGPR NE 'N').ZG194Q  INVALID REG NAME  00889300
.ZG194P               ANOP  ,                                           00889400
                      AIF   (T'&ZCGPR NE 'N').ZG194R  NON NUMERIC       00889500
                      AIF   ('&ZCGPR' LT '2').ZG194Q                    00889600
                      AIF   ('&ZCGPR' LE '12').ZG194R                   00889700
.ZG194Q               ANOP  ,                                           00889800
&ZMS                  SETC  '"BUFFER='  *KGPRA* MNOTE                   00889900
&ZMS                  SETC  '&ZMS.&BUFFER"'                             00890000
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00890100
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00890200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00890300
.ZG194R               ANOP  ,                                           00890400
.*-------------------------------------------------------------------   00890500
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00890600
.ZG159                AIF   ('&XDATAREA' NE 'BUFLIST').ZG182            00890700
.*-------------------------------------------------------------------   00890800
.***AG.KMEKY14 NAME, OPT INPUT, ME KEYS -DISALLOWED KEYS                00890900
&ZCVAL                SETC ''           ERROR KEY FIELD                 00891000
.ZG159I0              AIF   (K'&BUFSIZE LE 0).ZG159I1                   00891100
&ZCVAL                SETC '&ZCVAL BUFSIZE'     DISALLOWED KEY          00891200
.ZG159I1              AIF   (K'&ZCVAL LE 0).ZG159J  KEY                 00891300
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00891400
&ZMS                  SETC  '"BUFLIST'  *KMEIA* MNOTE                   00891500
&ZMS                  SETC  '&ZMS.=&BUFLIST"'                           00891600
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00891700
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00891800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00891900
.ZG159J               ANOP  ,                                           00892000
.*-------------------------------------------------------------------   00892100
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE                 00892200
                      AIF   (K'&ZXBUFLIST LE 0).ZG159R  NOT I/O         00892300
                      AIF   ('&XBUFLIST'(1,1) NE '(').ZG159R            00892400
&ZCGPR                SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                00892500
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG159P               00892600
                      AIF   (K'&ZCGPR GT 2).ZG159Q                      00892700
                      AIF   ('&ZCGPR' EQ '0').ZG159Q                    00892800
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00892900
                      AIF   (T'&ZCGPR NE 'N').ZG159Q  INVALID REG NAME  00893000
.ZG159P               ANOP  ,                                           00893100
                      AIF   (T'&ZCGPR NE 'N').ZG159R  NON NUMERIC       00893200
                      AIF   ('&ZCGPR' LT '2').ZG159Q                    00893300
                      AIF   ('&ZCGPR' LE '12').ZG159R                   00893400
.ZG159Q               ANOP  ,                                           00893500
&ZMS                  SETC  '"BUFLIST='         *KGPRA* MNOTE           00893600
&ZMS                  SETC  '&ZMS.&BUFLIST"'                            00893700
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00893800
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00893900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00894000
.ZG159R               ANOP  ,                                           00894100
.*------------------------------------------------------------------    00894200
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00894300
&XBUFADDRTYPE         SETC  ''          INITIALIZE XVARIABLE            00894400
.*-------------------------------------------------------------------   00894500
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00894600
.ZG162                ANOP  ,                                           00894700
                      AIF   (K'&BUFADDRTYPE(1) LE 0).ZG162A             00894800
&ZTLC                 SETC 'VIRTUAL'                                    00894900
                      AIF   ('&BUFADDRTYPE(1)' NE '&ZTLC').ZG174        00895000
&XBUFADDRTYPE         SETC  'VIRTUAL'   SET KEYWORD                     00895100
                      AIF   (N'&BUFADDRTYPE LE 1).ZG162A  CK NUM        00895200
&ZMS                  SETC  '"BUFADDRTYPE='     *KPOSA* MNOTE           00895300
&ZMS                  SETC  '&ZMS.&BUFADDRTYPE"'                        00895400
&ZMS                  SETC  '&ZMS "BUFADDRTYPE"'                        00895500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00895600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00895700
.ZG162A               ANOP  ,                                           00895800
.*------------------------------------------------------------------    00895900
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00896000
&XPAGEABLE            SETC  ''          INITIALIZE XVARIABLE            00896100
.*-------------------------------------------------------------------   00896200
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00896300
.ZG165                ANOP  ,                                           00896400
                      AIF   (K'&PAGEABLE(1) LE 0).ZG165A                00896500
&ZTLC                 SETC 'YES'                                        00896600
                      AIF   ('&PAGEABLE(1)' NE '&ZTLC').ZG169           00896700
&XPAGEABLE            SETC  'YES'       SET KEYWORD                     00896800
                      AIF   (N'&PAGEABLE LE 1).ZG165A  CK NUM           00896900
&ZMS                  SETC  '"PAGEABLE='        *KPOSA* MNOTE           00897000
&ZMS                  SETC  '&ZMS.&PAGEABLE"'                           00897100
&ZMS                  SETC  '&ZMS "PAGEABLE"'                           00897200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00897300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00897400
.ZG165A               ANOP  ,                                           00897500
.*----------------------------------------------------------------***   00897600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00897700
                      AIF   (N'&BUFSTGKEY LE 1).ZG167A  CK NUM          00897800
&ZMS                  SETC  '"BUFSTGKEY='       *KPOSA* MNOTE           00897900
&ZMS                  SETC  '&ZMS.&BUFSTGKEY"'                          00898000
&ZMS                  SETC  '&ZMS "BUFSTGKEY"'                          00898100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00898200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00898300
.ZG167A               ANOP  ,                                           00898400
.*-------------------------------------------------------------------   00898500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00898600
&ZXBUFSTGKEY          SETC  'INPUT'     SET IN/OUTPUT                   00898700
&XBUFSTGKEY           SETC  'CALLERS_KEY'                               00898800
                      AIF   (K'&BUFSTGKEY(1) LE 0).ZG167B  PARM         00898900
&XBUFSTGKEY           SETC  '&BUFSTGKEY(1)'     SET XVARIABLE           00899000
                      AIF   (N'&BUFSTGKEY GT 1).ZG167B  MULTI PARMS     00899100
&XBUFSTGKEY           SETC  '&BUFSTGKEY'        SET XVARIABLE           00899200
.ZG167B               ANOP  ,                                           00899300
.*-------------------------------------------------------------------   00899400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00899500
                      AIF   (K'&ZXBUFSTGKEY LE 0).ZG167R  NOT I/O       00899600
         AIF   ('&XBUFSTGKEY' EQ 'CALLERS_KEY').ZG167R                  00899700
                      AIF   ('&XBUFSTGKEY'(1,1) NE '(').ZG167R          00899800
&ZCGPR                SETC  '&XBUFSTGKEY'(2,K'&XBUFSTGKEY-2)            00899900
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG167P               00900000
                      AIF   (K'&ZCGPR GT 2).ZG167Q                      00900100
                      AIF   ('&ZCGPR' EQ '0').ZG167Q                    00900200
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00900300
                      AIF   (T'&ZCGPR NE 'N').ZG167Q  INVALID REG NAME  00900400
.ZG167P               ANOP  ,                                           00900500
                      AIF   (T'&ZCGPR NE 'N').ZG167R  NON NUMERIC       00900600
                      AIF   ('&ZCGPR' LT '2').ZG167Q                    00900700
                      AIF   ('&ZCGPR' LE '12').ZG167R                   00900800
.ZG167Q               ANOP  ,                                           00900900
&ZMS                  SETC  '"BUFSTGKEY='       *KGPRA* MNOTE           00901000
&ZMS                  SETC  '&ZMS.&BUFSTGKEY"'                          00901100
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00901200
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00901300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00901400
.ZG167R               ANOP  ,                                           00901500
.*-------------------------------------------------------------------   00901600
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00901700
.ZG169                ANOP  ,                                           00901800
&ZTLC                 SETC 'NO'                                         00901900
                      AIF   ('&PAGEABLE(1)' NE '&ZTLC').ZG170           00902000
&XPAGEABLE            SETC  'NO'        SET KEYWORD                     00902100
                      AIF   (N'&PAGEABLE LE 1).ZG169A  CK NUM           00902200
&ZMS                  SETC  '"PAGEABLE='        *KPOSA* MNOTE           00902300
&ZMS                  SETC  '&ZMS.&PAGEABLE"'                           00902400
&ZMS                  SETC  '&ZMS "PAGEABLE"'                           00902500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00902600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00902700
.ZG169A               ANOP  ,                                           00902800
.*------------------------------------------------------------------    00902900
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00903000
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00903100
.ZG169A0              AIF   (K'&BUFSTGKEY LE 0).ZG169A1  OK             00903200
&ZCVAL                SETC '&ZCVAL BUFSTGKEY'   INCORRECT KEY USED      00903300
.ZG169A1              AIF   (K'&ZCVAL LE 0).ZG169A2  OK                 00903400
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00903500
&ZMS                  SETC  '"PAGEABLE'         *KMEIA* MNOTE           00903600
&ZMS                  SETC  '&ZMS.=&PAGEABLE"'                          00903700
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00903800
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00903900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00904000
.ZG169A2              ANOP  ,                                           00904100
.*------------------------------------------------------------------    00904200
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00904300
.ZG170                ANOP  ,                                           00904400
&ZXPAGEABLE           SETC  'INPUT'     SET IN/OUTPUT                   00904500
                      AIF   (K'&XPAGEABLE GT 0).ZG170E  VALID ARG       00904600
                      AIF   (T'&PAGEABLE EQ 'O').ZG170D  OMITTED        00904700
&ZASYSLNDX            SETA  0                                           00904800
.ZG170A               ANOP  ,           POSITIONAL MACRO KEY            00904900
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                00905000
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG170C           00905100
&ZTLC                 SETC 'PAGEABLE'                                   00905200
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG170A  00905300
.ZG170B               ANOP  ,                                           00905400
&ZXPAGEABLE           SETC  ''          RESET IN/OUTPUT                 00905500
&ZMS                  SETC  'THE "PAGEABLE" KEY'  *KOPTA* MNOTE         00905600
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     00905700
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            00905800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00905900
                      AGO   .ZG170E                                     00906000
.ZG170C               ANOP  ,                                           00906100
&ZXPAGEABLE           SETC  ''          RESET IN/OUTPUT                 00906200
&ZMS                  SETC  '"PAGEABLE='        *KUKWA* MNOTE           00906300
&ZMS                  SETC  '&ZMS.&PAGEABLE"'                           00906400
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00906500
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00906600
&ZMS                  SETC  '&ZMS "YES"'                                00906700
&ZMS                  SETC  '&ZMS OR "NO".'                             00906800
                      MNOTE 8,' &ZMS '                                  00906900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00907000
                      AGO   .ZG170E                                     00907100
.ZG170D               ANOP  ,                                           00907200
&XPAGEABLE            SETC  'YES'       SET DEFAULT KEYWORD             00907300
.ZG170E               ANOP  ,                                           00907400
.*----------------------------------------------------------------***   00907500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00907600
                      AIF   (N'&BUFALET LE 1).ZG172A  CK NUM            00907700
&ZMS                  SETC  '"BUFALET='         *KPOSA* MNOTE           00907800
&ZMS                  SETC  '&ZMS.&BUFALET"'                            00907900
&ZMS                  SETC  '&ZMS "BUFALET"'                            00908000
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00908100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00908200
.ZG172A               ANOP  ,                                           00908300
.*-------------------------------------------------------------------   00908400
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00908500
&ZXBUFALET            SETC  'INPUT'     SET IN/OUTPUT                   00908600
&XBUFALET             SETC  'NO_BUFALET'                                00908700
                      AIF   (K'&BUFALET(1) LE 0).ZG172B  PARM           00908800
&XBUFALET             SETC  '&BUFALET(1)'       SET XVARIABLE           00908900
                      AIF   (N'&BUFALET GT 1).ZG172B  MULTI PARMS       00909000
&XBUFALET             SETC  '&BUFALET'  SET XVARIABLE                   00909100
.ZG172B               ANOP  ,                                           00909200
.*-------------------------------------------------------------------   00909300
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00909400
                      AIF   (K'&ZXBUFALET LE 0).ZG172R  NOT I/O         00909500
         AIF   ('&XBUFALET' EQ 'NO_BUFALET').ZG172R                     00909600
                      AIF   ('&XBUFALET'(1,1) NE '(').ZG172R            00909700
&ZCGPR                SETC  '&XBUFALET'(2,K'&XBUFALET-2)                00909800
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG172P               00909900
                      AIF   (K'&ZCGPR GT 2).ZG172Q                      00910000
                      AIF   ('&ZCGPR' EQ '0').ZG172Q                    00910100
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00910200
                      AIF   (T'&ZCGPR NE 'N').ZG172Q  INVALID REG NAME  00910300
.ZG172P               ANOP  ,                                           00910400
                      AIF   (T'&ZCGPR NE 'N').ZG172R  NON NUMERIC       00910500
                      AIF   ('&ZCGPR' LT '2').ZG172Q                    00910600
                      AIF   ('&ZCGPR' LE '12').ZG172R                   00910700
.ZG172Q               ANOP  ,                                           00910800
&ZMS                  SETC  '"BUFALET='         *KGPRA* MNOTE           00910900
&ZMS                  SETC  '&ZMS.&BUFALET"'                            00911000
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00911100
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00911200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00911300
.ZG172R               ANOP  ,                                           00911400
.*-------------------------------------------------------------------   00911500
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00911600
.ZG174                ANOP  ,                                           00911700
&ZTLC                 SETC 'REAL'                                       00911800
                      AIF   ('&BUFADDRTYPE(1)' NE '&ZTLC').ZG175        00911900
&XBUFADDRTYPE         SETC  'REAL'      SET KEYWORD                     00912000
                      AIF   (N'&BUFADDRTYPE LE 1).ZG174A  CK NUM        00912100
&ZMS                  SETC  '"BUFADDRTYPE='     *KPOSA* MNOTE           00912200
&ZMS                  SETC  '&ZMS.&BUFADDRTYPE"'                        00912300
&ZMS                  SETC  '&ZMS "BUFADDRTYPE"'                        00912400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00912500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00912600
.ZG174A               ANOP  ,                                           00912700
.*------------------------------------------------------------------    00912800
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00912900
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00913000
.ZG174A0              AIF   (K'&PAGEABLE LE 0).ZG174A1  OK              00913100
&ZCVAL                SETC '&ZCVAL PAGEABLE'    INCORRECT KEY USED      00913200
.ZG174A1              AIF   (K'&BUFSTGKEY LE 0).ZG174A2  OK             00913300
&ZCVAL                SETC '&ZCVAL BUFSTGKEY'   INCORRECT KEY USED      00913400
.ZG174A2              AIF   (K'&BUFALET LE 0).ZG174A3  OK               00913500
&ZCVAL                SETC '&ZCVAL BUFALET'     INCORRECT KEY USED      00913600
.ZG174A3              AIF   (K'&ZCVAL LE 0).ZG174A4  OK                 00913700
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00913800
&ZMS                  SETC  '"BUFADDRTYPE'      *KMEIA* MNOTE           00913900
&ZMS                  SETC  '&ZMS.=&BUFADDRTYPE"'                       00914000
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00914100
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00914200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00914300
.ZG174A4              ANOP  ,                                           00914400
.*------------------------------------------------------------------    00914500
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00914600
.ZG175                ANOP  ,                                           00914700
&ZXBUFADDRTYPE        SETC  'INPUT'     SET IN/OUTPUT                   00914800
                      AIF   (K'&XBUFADDRTYPE GT 0).ZG175E  VALID ARG    00914900
                      AIF   (T'&BUFADDRTYPE EQ 'O').ZG175D  OMITTED     00915000
&ZASYSLNDX            SETA  0                                           00915100
.ZG175A               ANOP  ,           POSITIONAL MACRO KEY            00915200
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                00915300
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG175C           00915400
&ZTLC                 SETC 'BUFADDRTYPE'                                00915500
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG175A  00915600
.ZG175B               ANOP  ,                                           00915700
&ZXBUFADDRTYPE        SETC  ''          RESET IN/OUTPUT                 00915800
&ZMS                  SETC  'THE "BUFADDRTYPE" KEY'  *KOPTA* MNOTE      00915900
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     00916000
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            00916100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00916200
                      AGO   .ZG175E                                     00916300
.ZG175C               ANOP  ,                                           00916400
&ZXBUFADDRTYPE        SETC  ''          RESET IN/OUTPUT                 00916500
&ZMS                  SETC  '"BUFADDRTYPE='     *KUKWA* MNOTE           00916600
&ZMS                  SETC  '&ZMS.&BUFADDRTYPE"'                        00916700
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00916800
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00916900
&ZMS                  SETC  '&ZMS "VIRTUAL"'                            00917000
&ZMS                  SETC  '&ZMS OR "REAL".'                           00917100
                      MNOTE 8,' &ZMS '                                  00917200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00917300
                      AGO   .ZG175E                                     00917400
.ZG175D               ANOP  ,                                           00917500
&XBUFADDRTYPE         SETC  'VIRTUAL'   SET DEFAULT KEYWORD             00917600
.ZG175E               ANOP  ,                                           00917700
.*----------------------------------------------------------------***   00917800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00917900
                      AIF   (N'&BUFNUM LE 1).ZG177A  CK NUM             00918000
&ZMS                  SETC  '"BUFNUM='  *KPOSA* MNOTE                   00918100
&ZMS                  SETC  '&ZMS.&BUFNUM"'                             00918200
&ZMS                  SETC  '&ZMS "BUFNUM"'                             00918300
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00918400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00918500
.ZG177A               ANOP  ,                                           00918600
.*-------------------------------------------------------------------   00918700
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00918800
&ZXBUFNUM             SETC  'INPUT'     SET IN/OUTPUT                   00918900
&XBUFNUM              SETC  'NO_BUFNUM'                                 00919000
                      AIF   (K'&BUFNUM(1) LE 0).ZG177B  PARM            00919100
&XBUFNUM              SETC  '&BUFNUM(1)'        SET XVARIABLE           00919200
                      AIF   (N'&BUFNUM GT 1).ZG177B  MULTI PARMS        00919300
&XBUFNUM              SETC  '&BUFNUM'   SET XVARIABLE                   00919400
.ZG177B               ANOP  ,                                           00919500
.*-------------------------------------------------------------------   00919600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00919700
                      AIF   (K'&ZXBUFNUM LE 0).ZG177R  NOT I/O          00919800
         AIF   ('&XBUFNUM' EQ 'NO_BUFNUM').ZG177R                       00919900
                      AIF   ('&XBUFNUM'(1,1) NE '(').ZG177R             00920000
&ZCGPR                SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                  00920100
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG177P               00920200
                      AIF   (K'&ZCGPR GT 2).ZG177Q                      00920300
                      AIF   ('&ZCGPR' EQ '0').ZG177Q                    00920400
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00920500
                      AIF   (T'&ZCGPR NE 'N').ZG177Q  INVALID REG NAME  00920600
.ZG177P               ANOP  ,                                           00920700
                      AIF   (T'&ZCGPR NE 'N').ZG177R  NON NUMERIC       00920800
                      AIF   ('&ZCGPR' LT '2').ZG177Q                    00920900
                      AIF   ('&ZCGPR' LE '12').ZG177R                   00921000
.ZG177Q               ANOP  ,                                           00921100
&ZMS                  SETC  '"BUFNUM='  *KGPRA* MNOTE                   00921200
&ZMS                  SETC  '&ZMS.&BUFNUM"'                             00921300
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00921400
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00921500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00921600
.ZG177R               ANOP  ,                                           00921700
.*----------------------------------------------------------------***   00921800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00921900
                      AIF   (N'&BUFINCRNUM LE 1).ZG180A  CK NUM         00922000
&ZMS                  SETC  '"BUFINCRNUM='      *KPOSA* MNOTE           00922100
&ZMS                  SETC  '&ZMS.&BUFINCRNUM"'                         00922200
&ZMS                  SETC  '&ZMS "BUFINCRNUM"'                         00922300
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00922400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00922500
.ZG180A               ANOP  ,                                           00922600
.*-------------------------------------------------------------------   00922700
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00922800
&ZXBUFINCRNUM         SETC  'INPUT'     SET IN/OUTPUT                   00922900
&XBUFINCRNUM          SETC  'NO_BUFINCRNUM'                             00923000
                      AIF   (K'&BUFINCRNUM(1) LE 0).ZG180B  PARM        00923100
&XBUFINCRNUM          SETC  '&BUFINCRNUM(1)'    SET XVARIABLE           00923200
                      AIF   (N'&BUFINCRNUM GT 1).ZG180B  MULTI PARMS    00923300
&XBUFINCRNUM          SETC  '&BUFINCRNUM'       SET XVARIABLE           00923400
.ZG180B               ANOP  ,                                           00923500
.*-------------------------------------------------------------------   00923600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00923700
                      AIF   (K'&ZXBUFINCRNUM LE 0).ZG180R  NOT I/O      00923800
         AIF   ('&XBUFINCRNUM' EQ 'NO_BUFINCRNUM').ZG180R               00923900
                      AIF   ('&XBUFINCRNUM'(1,1) NE '(').ZG180R         00924000
&ZCGPR                SETC  '&XBUFINCRNUM'(2,K'&XBUFINCRNUM-2)          00924100
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG180P               00924200
                      AIF   (K'&ZCGPR GT 2).ZG180Q                      00924300
                      AIF   ('&ZCGPR' EQ '0').ZG180Q                    00924400
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00924500
                      AIF   (T'&ZCGPR NE 'N').ZG180Q  INVALID REG NAME  00924600
.ZG180P               ANOP  ,                                           00924700
                      AIF   (T'&ZCGPR NE 'N').ZG180R  NON NUMERIC       00924800
                      AIF   ('&ZCGPR' LT '2').ZG180Q                    00924900
                      AIF   ('&ZCGPR' LE '12').ZG180R                   00925000
.ZG180Q               ANOP  ,                                           00925100
&ZMS                  SETC  '"BUFINCRNUM='      *KGPRA* MNOTE           00925200
&ZMS                  SETC  '&ZMS.&BUFINCRNUM"'                         00925300
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00925400
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00925500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00925600
.ZG180R               ANOP  ,                                           00925700
.*-------------------------------------------------------------------   00925800
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00925900
.ZG182                AIF   ('&XDATAREA' NE 'BUFFER').ZG194             00926000
.*-------------------------------------------------------------------   00926100
.***AG.KMEKY14 NAME, OPT INPUT, ME KEYS -DISALLOWED KEYS                00926200
&ZCVAL                SETC ''           ERROR KEY FIELD                 00926300
.ZG182I0              AIF   (K'&BUFADDRTYPE LE 0).ZG182I1               00926400
&ZCVAL                SETC '&ZCVAL BUFADDRTYPE'  DISALLOWED KEY         00926500
.ZG182I1              AIF   (K'&BUFALET LE 0).ZG182I2                   00926600
&ZCVAL                SETC '&ZCVAL BUFALET'     DISALLOWED KEY          00926700
.ZG182I2              AIF   (K'&BUFNUM LE 0).ZG182I3                    00926800
&ZCVAL                SETC '&ZCVAL BUFNUM'      DISALLOWED KEY          00926900
.ZG182I3              AIF   (K'&BUFINCRNUM LE 0).ZG182I4                00927000
&ZCVAL                SETC '&ZCVAL BUFINCRNUM'  DISALLOWED KEY          00927100
.ZG182I4              AIF   (K'&ZCVAL LE 0).ZG182J  KEY                 00927200
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00927300
&ZMS                  SETC  '"BUFFER'   *KMEIA* MNOTE                   00927400
&ZMS                  SETC  '&ZMS.=&BUFFER"'                            00927500
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00927600
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00927700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00927800
.ZG182J               ANOP  ,                                           00927900
.*-------------------------------------------------------------------   00928000
.***AG.KCK02 NAME, OPT INPUT, ME KEYS -GPR OUT OF RANGE                 00928100
                      AIF   (K'&ZXBUFFER LE 0).ZG182R  NOT I/O          00928200
                      AIF   ('&XBUFFER'(1,1) NE '(').ZG182R             00928300
&ZCGPR                SETC  '&XBUFFER'(2,K'&XBUFFER-2)                  00928400
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG182P               00928500
                      AIF   (K'&ZCGPR GT 2).ZG182Q                      00928600
                      AIF   ('&ZCGPR' EQ '0').ZG182Q                    00928700
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00928800
                      AIF   (T'&ZCGPR NE 'N').ZG182Q  INVALID REG NAME  00928900
.ZG182P               ANOP  ,                                           00929000
                      AIF   (T'&ZCGPR NE 'N').ZG182R  NON NUMERIC       00929100
                      AIF   ('&ZCGPR' LT '2').ZG182Q                    00929200
                      AIF   ('&ZCGPR' LE '12').ZG182R                   00929300
.ZG182Q               ANOP  ,                                           00929400
&ZMS                  SETC  '"BUFFER='  *KGPRA* MNOTE                   00929500
&ZMS                  SETC  '&ZMS.&BUFFER"'                             00929600
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00929700
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00929800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00929900
.ZG182R               ANOP  ,                                           00930000
.*------------------------------------------------------------------    00930100
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00930200
&XPAGEABLE            SETC  ''          INITIALIZE XVARIABLE            00930300
.*-------------------------------------------------------------------   00930400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00930500
.ZG185                ANOP  ,                                           00930600
                      AIF   (K'&PAGEABLE(1) LE 0).ZG185A                00930700
&ZTLC                 SETC 'YES'                                        00930800
                      AIF   ('&PAGEABLE(1)' NE '&ZTLC').ZG189           00930900
&XPAGEABLE            SETC  'YES'       SET KEYWORD                     00931000
                      AIF   (N'&PAGEABLE LE 1).ZG185A  CK NUM           00931100
&ZMS                  SETC  '"PAGEABLE='        *KPOSA* MNOTE           00931200
&ZMS                  SETC  '&ZMS.&PAGEABLE"'                           00931300
&ZMS                  SETC  '&ZMS "PAGEABLE"'                           00931400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00931500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00931600
.ZG185A               ANOP  ,                                           00931700
.*----------------------------------------------------------------***   00931800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00931900
                      AIF   (N'&BUFSTGKEY LE 1).ZG187A  CK NUM          00932000
&ZMS                  SETC  '"BUFSTGKEY='       *KPOSA* MNOTE           00932100
&ZMS                  SETC  '&ZMS.&BUFSTGKEY"'                          00932200
&ZMS                  SETC  '&ZMS "BUFSTGKEY"'                          00932300
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00932400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00932500
.ZG187A               ANOP  ,                                           00932600
.*-------------------------------------------------------------------   00932700
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00932800
&ZXBUFSTGKEY          SETC  'INPUT'     SET IN/OUTPUT                   00932900
&XBUFSTGKEY           SETC  'CALLERS_KEY'                               00933000
                      AIF   (K'&BUFSTGKEY(1) LE 0).ZG187B  PARM         00933100
&XBUFSTGKEY           SETC  '&BUFSTGKEY(1)'     SET XVARIABLE           00933200
                      AIF   (N'&BUFSTGKEY GT 1).ZG187B  MULTI PARMS     00933300
&XBUFSTGKEY           SETC  '&BUFSTGKEY'        SET XVARIABLE           00933400
.ZG187B               ANOP  ,                                           00933500
.*-------------------------------------------------------------------   00933600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00933700
                      AIF   (K'&ZXBUFSTGKEY LE 0).ZG187R  NOT I/O       00933800
         AIF   ('&XBUFSTGKEY' EQ 'CALLERS_KEY').ZG187R                  00933900
                      AIF   ('&XBUFSTGKEY'(1,1) NE '(').ZG187R          00934000
&ZCGPR                SETC  '&XBUFSTGKEY'(2,K'&XBUFSTGKEY-2)            00934100
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG187P               00934200
                      AIF   (K'&ZCGPR GT 2).ZG187Q                      00934300
                      AIF   ('&ZCGPR' EQ '0').ZG187Q                    00934400
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00934500
                      AIF   (T'&ZCGPR NE 'N').ZG187Q  INVALID REG NAME  00934600
.ZG187P               ANOP  ,                                           00934700
                      AIF   (T'&ZCGPR NE 'N').ZG187R  NON NUMERIC       00934800
                      AIF   ('&ZCGPR' LT '2').ZG187Q                    00934900
                      AIF   ('&ZCGPR' LE '12').ZG187R                   00935000
.ZG187Q               ANOP  ,                                           00935100
&ZMS                  SETC  '"BUFSTGKEY='       *KGPRA* MNOTE           00935200
&ZMS                  SETC  '&ZMS.&BUFSTGKEY"'                          00935300
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00935400
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00935500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00935600
.ZG187R               ANOP  ,                                           00935700
.*-------------------------------------------------------------------   00935800
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00935900
.ZG189                ANOP  ,                                           00936000
&ZTLC                 SETC 'NO'                                         00936100
                      AIF   ('&PAGEABLE(1)' NE '&ZTLC').ZG190           00936200
&XPAGEABLE            SETC  'NO'        SET KEYWORD                     00936300
                      AIF   (N'&PAGEABLE LE 1).ZG189A  CK NUM           00936400
&ZMS                  SETC  '"PAGEABLE='        *KPOSA* MNOTE           00936500
&ZMS                  SETC  '&ZMS.&PAGEABLE"'                           00936600
&ZMS                  SETC  '&ZMS "PAGEABLE"'                           00936700
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00936800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00936900
.ZG189A               ANOP  ,                                           00937000
.*------------------------------------------------------------------    00937100
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00937200
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00937300
.ZG189A0              AIF   (K'&BUFSTGKEY LE 0).ZG189A1  OK             00937400
&ZCVAL                SETC '&ZCVAL BUFSTGKEY'   INCORRECT KEY USED      00937500
.ZG189A1              AIF   (K'&ZCVAL LE 0).ZG189A2  OK                 00937600
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00937700
&ZMS                  SETC  '"PAGEABLE'         *KMEIA* MNOTE           00937800
&ZMS                  SETC  '&ZMS.=&PAGEABLE"'                          00937900
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00938000
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00938100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00938200
.ZG189A2              ANOP  ,                                           00938300
.*------------------------------------------------------------------    00938400
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00938500
.ZG190                ANOP  ,                                           00938600
&ZXPAGEABLE           SETC  'INPUT'     SET IN/OUTPUT                   00938700
                      AIF   (K'&XPAGEABLE GT 0).ZG190E  VALID ARG       00938800
                      AIF   (T'&PAGEABLE EQ 'O').ZG190D  OMITTED        00938900
&ZASYSLNDX            SETA  0                                           00939000
.ZG190A               ANOP  ,           POSITIONAL MACRO KEY            00939100
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                00939200
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG190C           00939300
&ZTLC                 SETC 'PAGEABLE'                                   00939400
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG190A  00939500
.ZG190B               ANOP  ,                                           00939600
&ZXPAGEABLE           SETC  ''          RESET IN/OUTPUT                 00939700
&ZMS                  SETC  'THE "PAGEABLE" KEY'  *KOPTA* MNOTE         00939800
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     00939900
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            00940000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00940100
                      AGO   .ZG190E                                     00940200
.ZG190C               ANOP  ,                                           00940300
&ZXPAGEABLE           SETC  ''          RESET IN/OUTPUT                 00940400
&ZMS                  SETC  '"PAGEABLE='        *KUKWA* MNOTE           00940500
&ZMS                  SETC  '&ZMS.&PAGEABLE"'                           00940600
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00940700
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00940800
&ZMS                  SETC  '&ZMS "YES"'                                00940900
&ZMS                  SETC  '&ZMS OR "NO".'                             00941000
                      MNOTE 8,' &ZMS '                                  00941100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00941200
                      AGO   .ZG190E                                     00941300
.ZG190D               ANOP  ,                                           00941400
&XPAGEABLE            SETC  'YES'       SET DEFAULT KEYWORD             00941500
.ZG190E               ANOP  ,                                           00941600
.*----------------------------------------------------------------***   00941700
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00941800
                      AIF   (N'&BUFSIZE LE 1).ZG192A  CK NUM            00941900
&ZMS                  SETC  '"BUFSIZE='         *KPOSA* MNOTE           00942000
&ZMS                  SETC  '&ZMS.&BUFSIZE"'                            00942100
&ZMS                  SETC  '&ZMS "BUFSIZE"'                            00942200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00942300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00942400
.ZG192A               ANOP  ,                                           00942500
.*-------------------------------------------------------------------   00942600
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00942700
&ZXBUFSIZE            SETC  'INPUT'     SET IN/OUTPUT                   00942800
&XBUFSIZE             SETC  'NO_BUFSIZE'                                00942900
                      AIF   (K'&BUFSIZE(1) LE 0).ZG192B  PARM           00943000
&XBUFSIZE             SETC  '&BUFSIZE(1)'       SET XVARIABLE           00943100
                      AIF   (N'&BUFSIZE GT 1).ZG192B  MULTI PARMS       00943200
&XBUFSIZE             SETC  '&BUFSIZE'  SET XVARIABLE                   00943300
.ZG192B               ANOP  ,                                           00943400
.*-------------------------------------------------------------------   00943500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00943600
                      AIF   (K'&ZXBUFSIZE LE 0).ZG192R  NOT I/O         00943700
         AIF   ('&XBUFSIZE' EQ 'NO_BUFSIZE').ZG192R                     00943800
                      AIF   ('&XBUFSIZE'(1,1) NE '(').ZG192R            00943900
&ZCGPR                SETC  '&XBUFSIZE'(2,K'&XBUFSIZE-2)                00944000
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG192P               00944100
                      AIF   (K'&ZCGPR GT 2).ZG192Q                      00944200
                      AIF   ('&ZCGPR' EQ '0').ZG192Q                    00944300
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00944400
                      AIF   (T'&ZCGPR NE 'N').ZG192Q  INVALID REG NAME  00944500
.ZG192P               ANOP  ,                                           00944600
                      AIF   (T'&ZCGPR NE 'N').ZG192R  NON NUMERIC       00944700
                      AIF   ('&ZCGPR' LT '2').ZG192Q                    00944800
                      AIF   ('&ZCGPR' LE '12').ZG192R                   00944900
.ZG192Q               ANOP  ,                                           00945000
&ZMS                  SETC  '"BUFSIZE='         *KGPRA* MNOTE           00945100
&ZMS                  SETC  '&ZMS.&BUFSIZE"'                            00945200
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00945300
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00945400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00945500
.ZG192R               ANOP  ,                                           00945600
.*-------------------------------------------------------------------   00945700
.***AG.KMEKY15 NAME, OPT INPUT, ME KEYS -END                            00945800
.ZG194                ANOP  ,           END MUTUALLY EXCLUSIVE KEYS     00945900
.*----------------------------------------------------------------***   00946000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00946100
                      AIF   (N'&ADJAREA LE 1).ZG196A  CK NUM            00946200
&ZMS                  SETC  '"ADJAREA='         *KPOSA* MNOTE           00946300
&ZMS                  SETC  '&ZMS.&ADJAREA"'                            00946400
&ZMS                  SETC  '&ZMS "ADJAREA"'                            00946500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00946600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00946700
.ZG196A               ANOP  ,                                           00946800
.*-------------------------------------------------------------------   00946900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00947000
&ZXADJAREA            SETC  'INPUT'     SET IN/OUTPUT                   00947100
&XADJAREA             SETC  'NO_ADJAREA'                                00947200
                      AIF   (K'&ADJAREA(1) LE 0).ZG196B  PARM           00947300
&XADJAREA             SETC  '&ADJAREA(1)'       SET XVARIABLE           00947400
                      AIF   (N'&ADJAREA GT 1).ZG196B  MULTI PARMS       00947500
&XADJAREA             SETC  '&ADJAREA'  SET XVARIABLE                   00947600
.ZG196B               ANOP  ,                                           00947700
.*-------------------------------------------------------------------   00947800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00947900
                      AIF   (K'&ZXADJAREA LE 0).ZG196R  NOT I/O         00948000
         AIF   ('&XADJAREA' EQ 'NO_ADJAREA').ZG196R                     00948100
                      AIF   ('&XADJAREA'(1,1) NE '(').ZG196R            00948200
&ZCGPR                SETC  '&XADJAREA'(2,K'&XADJAREA-2)                00948300
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG196P               00948400
                      AIF   (K'&ZCGPR GT 2).ZG196Q                      00948500
                      AIF   ('&ZCGPR' EQ '0').ZG196Q                    00948600
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00948700
                      AIF   (T'&ZCGPR NE 'N').ZG196Q  INVALID REG NAME  00948800
.ZG196P               ANOP  ,                                           00948900
                      AIF   (T'&ZCGPR NE 'N').ZG196R  NON NUMERIC       00949000
                      AIF   ('&ZCGPR' LT '2').ZG196Q                    00949100
                      AIF   ('&ZCGPR' LE '12').ZG196R                   00949200
.ZG196Q               ANOP  ,                                           00949300
&ZMS                  SETC  '"ADJAREA='         *KGPRA* MNOTE           00949400
&ZMS                  SETC  '&ZMS.&ADJAREA"'                            00949500
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00949600
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00949700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00949800
.ZG196R               ANOP  ,                                           00949900
.*----------------------------------------------------------------***   00950000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00950100
                      AIF   (N'&LISTNUM LE 1).ZG199A  CK NUM            00950200
&ZMS                  SETC  '"LISTNUM='         *KPOSA* MNOTE           00950300
&ZMS                  SETC  '&ZMS.&LISTNUM"'                            00950400
&ZMS                  SETC  '&ZMS "LISTNUM"'                            00950500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00950600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00950700
.ZG199A               ANOP  ,                                           00950800
.*-------------------------------------------------------------------   00950900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00951000
&ZXLISTNUM            SETC  'INPUT'     SET IN/OUTPUT                   00951100
&XLISTNUM             SETC  'NO_LISTNUM'                                00951200
                      AIF   (K'&LISTNUM(1) LE 0).ZG199B  PARM           00951300
&XLISTNUM             SETC  '&LISTNUM(1)'       SET XVARIABLE           00951400
                      AIF   (N'&LISTNUM GT 1).ZG199B  MULTI PARMS       00951500
&XLISTNUM             SETC  '&LISTNUM'  SET XVARIABLE                   00951600
.ZG199B               ANOP  ,                                           00951700
.*-------------------------------------------------------------------   00951800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00951900
                      AIF   (K'&ZXLISTNUM LE 0).ZG199R  NOT I/O         00952000
         AIF   ('&XLISTNUM' EQ 'NO_LISTNUM').ZG199R                     00952100
                      AIF   ('&XLISTNUM'(1,1) NE '(').ZG199R            00952200
&ZCGPR                SETC  '&XLISTNUM'(2,K'&XLISTNUM-2)                00952300
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG199P               00952400
                      AIF   (K'&ZCGPR GT 2).ZG199Q                      00952500
                      AIF   ('&ZCGPR' EQ '0').ZG199Q                    00952600
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00952700
                      AIF   (T'&ZCGPR NE 'N').ZG199Q  INVALID REG NAME  00952800
.ZG199P               ANOP  ,                                           00952900
                      AIF   (T'&ZCGPR NE 'N').ZG199R  NON NUMERIC       00953000
                      AIF   ('&ZCGPR' LT '2').ZG199Q                    00953100
                      AIF   ('&ZCGPR' LE '12').ZG199R                   00953200
.ZG199Q               ANOP  ,                                           00953300
&ZMS                  SETC  '"LISTNUM='         *KGPRA* MNOTE           00953400
&ZMS                  SETC  '&ZMS.&LISTNUM"'                            00953500
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00953600
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00953700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00953800
.ZG199R               ANOP  ,                                           00953900
.*----------------------------------------------------------------***   00954000
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00954100
                      AIF   (N'&LISTPOS LE 1).ZG201A  CK NUM            00954200
&ZMS                  SETC  '"LISTPOS='         *KPOSA* MNOTE           00954300
&ZMS                  SETC  '&ZMS.&LISTPOS"'                            00954400
&ZMS                  SETC  '&ZMS "LISTPOS"'                            00954500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00954600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00954700
.ZG201A               ANOP  ,                                           00954800
.*-------------------------------------------------------------------   00954900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00955000
&XLISTPOS             SETC  ''          INITIALIZE XVARIABLE            00955100
.ZG202A   AIF   ('&LISTPOS(1)' NE 'HEAD').ZG203A                        00955200
&XLISTPOS             SETC  'HEAD'      SET KEYWORD                     00955300
.*-------------------------------------------------------------------   00955400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00955500
.ZG203A   AIF   ('&LISTPOS(1)' NE 'TAIL').ZG204A                        00955600
&XLISTPOS             SETC  'TAIL'      SET KEYWORD                     00955700
.*-------------------------------------------------------------------   00955800
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00955900
.ZG204A               AIF   (K'&XLISTPOS GT 0).ZG204C  KEYWORD          00956000
                      AIF   (K'&LISTPOS(1) LE 0).ZG204B                 00956100
&ZMS                  SETC  '"LISTPOS='         *KUKWA* MNOTE           00956200
&ZMS                  SETC  '&ZMS.&LISTPOS"'                            00956300
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00956400
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00956500
&ZMS                  SETC  '&ZMS "HEAD"'                               00956600
&ZMS                  SETC  '&ZMS OR "TAIL".'                           00956700
                      MNOTE 8,' &ZMS '                                  00956800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00956900
.ZG204B               ANOP  ,                                           00957000
&XLISTPOS             SETC  'HEAD'      SET DEFAULT KEYWORD             00957100
.ZG204C               ANOP  ,                                           00957200
&ZXLISTPOS            SETC  'INPUT'     SET IN/OUTPUT                   00957300
.*-------------------------------------------------------------------   00957400
.***AG.KKWRD06 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00957500
                      AIF   (K'&LISTNUM(1) GT 0).ZG204D  KEY            00957600
                      AIF   (K'&LISTPOS(1) LE 0).ZG204D  PARM           00957700
&ZMS                  SETC  '"LISTPOS'  *KDEPA* MNOTE                   00957800
&ZMS                  SETC  '&ZMS.=&LISTPOS"'                           00957900
&ZMS                  SETC  '&ZMS CAN ONLY BE SPECIFIED IF'             00958000
&ZMS                  SETC  '&ZMS '                                     00958100
&ZMS                  SETC  '&ZMS "LISTNUM"'                            00958200
                      MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                00958300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00958400
.ZG204D               ANOP  ,                                           00958500
.*----------------------------------------------------------------***   00958600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00958700
                      AIF   (N'&ENTRYKEY LE 1).ZG206A  CK NUM           00958800
&ZMS                  SETC  '"ENTRYKEY='        *KPOSA* MNOTE           00958900
&ZMS                  SETC  '&ZMS.&ENTRYKEY"'                           00959000
&ZMS                  SETC  '&ZMS "ENTRYKEY"'                           00959100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00959200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00959300
.ZG206A               ANOP  ,                                           00959400
.*-------------------------------------------------------------------   00959500
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00959600
&XENTRYKEY            SETC  'NO_ENTRYKEY'       SET DEFAULT             00959700
                      AIF   (K'&ENTRYKEY(1) LE 0).ZG206C  PARM          00959800
&XENTRYKEY            SETC  '&ENTRYKEY(1)'      SET XVARIABLE           00959900
                      AIF   (N'&ENTRYKEY GT 1).ZG206B  MULTI PARMS      00960000
&XENTRYKEY            SETC  '&ENTRYKEY'         SET XVARIABLE           00960100
.ZG206B               AIF   (K'&LISTNUM(1) GT 0).ZG206C  KEY            00960200
&ZMS                  SETC  '"ENTRYKEY'         *KDEPA* MNOTE           00960300
&ZMS                  SETC  '&ZMS.=&ENTRYKEY"'                          00960400
&ZMS                  SETC  '&ZMS CAN ONLY BE SPECIFIED IF'             00960500
&ZMS                  SETC  '&ZMS '                                     00960600
&ZMS                  SETC  '&ZMS "LISTNUM"'                            00960700
                      MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                00960800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00960900
.ZG206C               ANOP  ,                                           00961000
&ZXENTRYKEY           SETC  'INPUT'     SET IN/OUTPUT                   00961100
.*-------------------------------------------------------------------   00961200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00961300
                      AIF   (K'&ZXENTRYKEY LE 0).ZG206R  NOT I/O        00961400
         AIF   ('&XENTRYKEY' EQ 'NO_ENTRYKEY').ZG206R                   00961500
                      AIF   ('&XENTRYKEY'(1,1) NE '(').ZG206R           00961600
&ZCGPR                SETC  '&XENTRYKEY'(2,K'&XENTRYKEY-2)              00961700
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG206P               00961800
                      AIF   (K'&ZCGPR GT 2).ZG206Q                      00961900
                      AIF   ('&ZCGPR' EQ '0').ZG206Q                    00962000
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00962100
                      AIF   (T'&ZCGPR NE 'N').ZG206Q  INVALID REG NAME  00962200
.ZG206P               ANOP  ,                                           00962300
                      AIF   (T'&ZCGPR NE 'N').ZG206R  NON NUMERIC       00962400
                      AIF   ('&ZCGPR' LT '2').ZG206Q                    00962500
                      AIF   ('&ZCGPR' LE '12').ZG206R                   00962600
.ZG206Q               ANOP  ,                                           00962700
&ZMS                  SETC  '"ENTRYKEY='        *KGPRA* MNOTE           00962800
&ZMS                  SETC  '&ZMS.&ENTRYKEY"'                           00962900
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00963000
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00963100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00963200
.ZG206R               ANOP  ,                                           00963300
.*----------------------------------------------------------------***   00963400
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00963500
                      AIF   (N'&KEYREQTYPE LE 1).ZG208A  CK NUM         00963600
&ZMS                  SETC  '"KEYREQTYPE='      *KPOSA* MNOTE           00963700
&ZMS                  SETC  '&ZMS.&KEYREQTYPE"'                         00963800
&ZMS                  SETC  '&ZMS "KEYREQTYPE"'                         00963900
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00964000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00964100
.ZG208A               ANOP  ,                                           00964200
.*-------------------------------------------------------------------   00964300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00964400
&XKEYREQTYPE          SETC  ''          INITIALIZE XVARIABLE            00964500
.ZG209A   AIF   ('&KEYREQTYPE(1)' NE 'EQUAL').ZG210A                    00964600
&XKEYREQTYPE          SETC  'EQUAL'     SET KEYWORD                     00964700
.*-------------------------------------------------------------------   00964800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00964900
.ZG210A   AIF   ('&KEYREQTYPE(1)' NE 'LESSOREQUAL').ZG211A              00965000
&XKEYREQTYPE          SETC  'LESSOREQUAL'       SET KEYWORD             00965100
.*-------------------------------------------------------------------   00965200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00965300
.ZG211A   AIF   ('&KEYREQTYPE(1)' NE 'GREATEROREQUAL').ZG212A           00965400
&XKEYREQTYPE          SETC  'GREATEROREQUAL'    SET KEYWORD             00965500
.*-------------------------------------------------------------------   00965600
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00965700
.ZG212A               AIF   (K'&XKEYREQTYPE GT 0).ZG212C  KEYWORD       00965800
                      AIF   (K'&KEYREQTYPE(1) LE 0).ZG212B              00965900
&ZMS                  SETC  '"KEYREQTYPE='      *KUKWA* MNOTE           00966000
&ZMS                  SETC  '&ZMS.&KEYREQTYPE"'                         00966100
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00966200
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00966300
&ZMS                  SETC  '&ZMS "EQUAL",'                             00966400
&ZMS                  SETC  '&ZMS "LESSOREQUAL",'                       00966500
&ZMS                  SETC  '&ZMS OR "GREATEROREQUAL".'                 00966600
                      MNOTE 8,' &ZMS '                                  00966700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00966800
.ZG212B               ANOP  ,                                           00966900
&XKEYREQTYPE          SETC  'EQUAL'     SET DEFAULT KEYWORD             00967000
.ZG212C               ANOP  ,                                           00967100
&ZXKEYREQTYPE         SETC  'INPUT'     SET IN/OUTPUT                   00967200
.*-------------------------------------------------------------------   00967300
.***AG.KKWRD06 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00967400
                      AIF   (K'&ENTRYKEY(1) GT 0).ZG212D  KEY           00967500
                      AIF   (K'&KEYREQTYPE(1) LE 0).ZG212D  PARM        00967600
&ZMS                  SETC  '"KEYREQTYPE'       *KDEPA* MNOTE           00967700
&ZMS                  SETC  '&ZMS.=&KEYREQTYPE"'                        00967800
&ZMS                  SETC  '&ZMS CAN ONLY BE SPECIFIED IF'             00967900
&ZMS                  SETC  '&ZMS '                                     00968000
&ZMS                  SETC  '&ZMS "ENTRYKEY"'                           00968100
                      MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                00968200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00968300
.ZG212D               ANOP  ,                                           00968400
.*----------------------------------------------------------------***   00968500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00968600
                      AIF   (N'&AUTHCOMP LE 1).ZG215A  CK NUM           00968700
&ZMS                  SETC  '"AUTHCOMP='        *KPOSA* MNOTE           00968800
&ZMS                  SETC  '&ZMS.&AUTHCOMP"'                           00968900
&ZMS                  SETC  '&ZMS "AUTHCOMP"'                           00969000
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00969100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00969200
.ZG215A               ANOP  ,                                           00969300
.*-------------------------------------------------------------------   00969400
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00969500
&XAUTHCOMP            SETC  'NO_AUTHCOMP'       SET DEFAULT             00969600
                      AIF   (K'&AUTHCOMP(1) LE 0).ZG215C  PARM          00969700
&XAUTHCOMP            SETC  '&AUTHCOMP(1)'      SET XVARIABLE           00969800
                      AIF   (N'&AUTHCOMP GT 1).ZG215B  MULTI PARMS      00969900
&XAUTHCOMP            SETC  '&AUTHCOMP'         SET XVARIABLE           00970000
.ZG215B               AIF   (K'&LISTNUM(1) GT 0).ZG215C  KEY            00970100
&ZMS                  SETC  '"AUTHCOMP'         *KDEPA* MNOTE           00970200
&ZMS                  SETC  '&ZMS.=&AUTHCOMP"'                          00970300
&ZMS                  SETC  '&ZMS CAN ONLY BE SPECIFIED IF'             00970400
&ZMS                  SETC  '&ZMS '                                     00970500
&ZMS                  SETC  '&ZMS "LISTNUM"'                            00970600
                      MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                00970700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00970800
.ZG215C               ANOP  ,                                           00970900
&ZXAUTHCOMP           SETC  'INPUT'     SET IN/OUTPUT                   00971000
.*-------------------------------------------------------------------   00971100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00971200
                      AIF   (K'&ZXAUTHCOMP LE 0).ZG215R  NOT I/O        00971300
         AIF   ('&XAUTHCOMP' EQ 'NO_AUTHCOMP').ZG215R                   00971400
                      AIF   ('&XAUTHCOMP'(1,1) NE '(').ZG215R           00971500
&ZCGPR                SETC  '&XAUTHCOMP'(2,K'&XAUTHCOMP-2)              00971600
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG215P               00971700
                      AIF   (K'&ZCGPR GT 2).ZG215Q                      00971800
                      AIF   ('&ZCGPR' EQ '0').ZG215Q                    00971900
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00972000
                      AIF   (T'&ZCGPR NE 'N').ZG215Q  INVALID REG NAME  00972100
.ZG215P               ANOP  ,                                           00972200
                      AIF   (T'&ZCGPR NE 'N').ZG215R  NON NUMERIC       00972300
                      AIF   ('&ZCGPR' LT '2').ZG215Q                    00972400
                      AIF   ('&ZCGPR' LE '12').ZG215R                   00972500
.ZG215Q               ANOP  ,                                           00972600
&ZMS                  SETC  '"AUTHCOMP='        *KGPRA* MNOTE           00972700
&ZMS                  SETC  '&ZMS.&AUTHCOMP"'                           00972800
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00972900
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00973000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00973100
.ZG215R               ANOP  ,                                           00973200
.*----------------------------------------------------------------***   00973300
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00973400
                      AIF   (N'&AUTHCOMPTYPE LE 1).ZG217A  CK NUM       00973500
&ZMS                  SETC  '"AUTHCOMPTYPE='    *KPOSA* MNOTE           00973600
&ZMS                  SETC  '&ZMS.&AUTHCOMPTYPE"'                       00973700
&ZMS                  SETC  '&ZMS "AUTHCOMPTYPE"'                       00973800
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00973900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00974000
.ZG217A               ANOP  ,                                           00974100
.*-------------------------------------------------------------------   00974200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00974300
&XAUTHCOMPTYPE        SETC  ''          INITIALIZE XVARIABLE            00974400
.ZG218A   AIF   ('&AUTHCOMPTYPE(1)' NE 'EQUAL').ZG219A                  00974500
&XAUTHCOMPTYPE        SETC  'EQUAL'     SET KEYWORD                     00974600
.*-------------------------------------------------------------------   00974700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00974800
.ZG219A   AIF   ('&AUTHCOMPTYPE(1)' NE 'LESSOREQUAL').ZG220A            00974900
&XAUTHCOMPTYPE        SETC  'LESSOREQUAL'       SET KEYWORD             00975000
.*-------------------------------------------------------------------   00975100
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00975200
.ZG220A               AIF   (K'&XAUTHCOMPTYPE GT 0).ZG220C  KEYWORD     00975300
                      AIF   (K'&AUTHCOMPTYPE(1) LE 0).ZG220B            00975400
&ZMS                  SETC  '"AUTHCOMPTYPE='    *KUKWA* MNOTE           00975500
&ZMS                  SETC  '&ZMS.&AUTHCOMPTYPE"'                       00975600
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   00975700
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         00975800
&ZMS                  SETC  '&ZMS "EQUAL"'                              00975900
&ZMS                  SETC  '&ZMS OR "LESSOREQUAL".'                    00976000
                      MNOTE 8,' &ZMS '                                  00976100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00976200
.ZG220B               ANOP  ,                                           00976300
&XAUTHCOMPTYPE        SETC  'EQUAL'     SET DEFAULT KEYWORD             00976400
.ZG220C               ANOP  ,                                           00976500
&ZXAUTHCOMPTYPE       SETC  'INPUT'     SET IN/OUTPUT                   00976600
.*-------------------------------------------------------------------   00976700
.***AG.KKWRD06 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00976800
                      AIF   (K'&AUTHCOMP(1) GT 0).ZG220D  KEY           00976900
                      AIF   (K'&AUTHCOMPTYPE(1) LE 0).ZG220D  PARM      00977000
&ZMS                  SETC  '"AUTHCOMPTYPE'     *KDEPA* MNOTE           00977100
&ZMS                  SETC  '&ZMS.=&AUTHCOMPTYPE"'                      00977200
&ZMS                  SETC  '&ZMS CAN ONLY BE SPECIFIED IF'             00977300
&ZMS                  SETC  '&ZMS '                                     00977400
&ZMS                  SETC  '&ZMS "AUTHCOMP"'                           00977500
                      MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                00977600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00977700
.ZG220D               ANOP  ,                                           00977800
.*----------------------------------------------------------------***   00977900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00978000
                      AIF   (N'&NEWAUTH LE 1).ZG223A  CK NUM            00978100
&ZMS                  SETC  '"NEWAUTH='         *KPOSA* MNOTE           00978200
&ZMS                  SETC  '&ZMS.&NEWAUTH"'                            00978300
&ZMS                  SETC  '&ZMS "NEWAUTH"'                            00978400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00978500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00978600
.ZG223A               ANOP  ,                                           00978700
.*-------------------------------------------------------------------   00978800
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00978900
&XNEWAUTH             SETC  'NO_NEWAUTH'        SET DEFAULT             00979000
                      AIF   (K'&NEWAUTH(1) LE 0).ZG223C  PARM           00979100
&XNEWAUTH             SETC  '&NEWAUTH(1)'       SET XVARIABLE           00979200
                      AIF   (N'&NEWAUTH GT 1).ZG223B  MULTI PARMS       00979300
&XNEWAUTH             SETC  '&NEWAUTH'  SET XVARIABLE                   00979400
.ZG223B               AIF   (K'&LISTNUM(1) GT 0).ZG223C  KEY            00979500
&ZMS                  SETC  '"NEWAUTH'  *KDEPA* MNOTE                   00979600
&ZMS                  SETC  '&ZMS.=&NEWAUTH"'                           00979700
&ZMS                  SETC  '&ZMS CAN ONLY BE SPECIFIED IF'             00979800
&ZMS                  SETC  '&ZMS '                                     00979900
&ZMS                  SETC  '&ZMS "LISTNUM"'                            00980000
                      MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                00980100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00980200
.ZG223C               ANOP  ,                                           00980300
&ZXNEWAUTH            SETC  'INPUT'     SET IN/OUTPUT                   00980400
.*-------------------------------------------------------------------   00980500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00980600
                      AIF   (K'&ZXNEWAUTH LE 0).ZG223R  NOT I/O         00980700
         AIF   ('&XNEWAUTH' EQ 'NO_NEWAUTH').ZG223R                     00980800
                      AIF   ('&XNEWAUTH'(1,1) NE '(').ZG223R            00980900
&ZCGPR                SETC  '&XNEWAUTH'(2,K'&XNEWAUTH-2)                00981000
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG223P               00981100
                      AIF   (K'&ZCGPR GT 2).ZG223Q                      00981200
                      AIF   ('&ZCGPR' EQ '0').ZG223Q                    00981300
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00981400
                      AIF   (T'&ZCGPR NE 'N').ZG223Q  INVALID REG NAME  00981500
.ZG223P               ANOP  ,                                           00981600
                      AIF   (T'&ZCGPR NE 'N').ZG223R  NON NUMERIC       00981700
                      AIF   ('&ZCGPR' LT '2').ZG223Q                    00981800
                      AIF   ('&ZCGPR' LE '12').ZG223R                   00981900
.ZG223Q               ANOP  ,                                           00982000
&ZMS                  SETC  '"NEWAUTH='         *KGPRA* MNOTE           00982100
&ZMS                  SETC  '&ZMS.&NEWAUTH"'                            00982200
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00982300
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00982400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00982500
.ZG223R               ANOP  ,                                           00982600
.*----------------------------------------------------------------***   00982700
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00982800
                      AIF   (N'&ENTRYID LE 1).ZG227A  CK NUM            00982900
&ZMS                  SETC  '"ENTRYID='         *KPOSA* MNOTE           00983000
&ZMS                  SETC  '&ZMS.&ENTRYID"'                            00983100
&ZMS                  SETC  '&ZMS "ENTRYID"'                            00983200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00983300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00983400
.ZG227A               ANOP  ,                                           00983500
.*-------------------------------------------------------------------   00983600
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00983700
&ZXENTRYID            SETC  'INPUT'     SET IN/OUTPUT                   00983800
&XENTRYID             SETC  'NO_ENTRYID'                                00983900
                      AIF   (K'&ENTRYID(1) LE 0).ZG227B  PARM           00984000
&XENTRYID             SETC  '&ENTRYID(1)'       SET XVARIABLE           00984100
                      AIF   (N'&ENTRYID GT 1).ZG227B  MULTI PARMS       00984200
&XENTRYID             SETC  '&ENTRYID'  SET XVARIABLE                   00984300
.ZG227B               ANOP  ,                                           00984400
.*-------------------------------------------------------------------   00984500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00984600
                      AIF   (K'&ZXENTRYID LE 0).ZG227R  NOT I/O         00984700
         AIF   ('&XENTRYID' EQ 'NO_ENTRYID').ZG227R                     00984800
                      AIF   ('&XENTRYID'(1,1) NE '(').ZG227R            00984900
&ZCGPR                SETC  '&XENTRYID'(2,K'&XENTRYID-2)                00985000
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG227P               00985100
                      AIF   (K'&ZCGPR GT 2).ZG227Q                      00985200
                      AIF   ('&ZCGPR' EQ '0').ZG227Q                    00985300
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00985400
                      AIF   (T'&ZCGPR NE 'N').ZG227Q  INVALID REG NAME  00985500
.ZG227P               ANOP  ,                                           00985600
                      AIF   (T'&ZCGPR NE 'N').ZG227R  NON NUMERIC       00985700
                      AIF   ('&ZCGPR' LT '2').ZG227Q                    00985800
                      AIF   ('&ZCGPR' LE '12').ZG227R                   00985900
.ZG227Q               ANOP  ,                                           00986000
&ZMS                  SETC  '"ENTRYID='         *KGPRA* MNOTE           00986100
&ZMS                  SETC  '&ZMS.&ENTRYID"'                            00986200
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00986300
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00986400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00986500
.ZG227R               ANOP  ,                                           00986600
.*----------------------------------------------------------------***   00986700
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00986800
                      AIF   (N'&ENTRYNAME LE 1).ZG230A  CK NUM          00986900
&ZMS                  SETC  '"ENTRYNAME='       *KPOSA* MNOTE           00987000
&ZMS                  SETC  '&ZMS.&ENTRYNAME"'                          00987100
&ZMS                  SETC  '&ZMS "ENTRYNAME"'                          00987200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00987300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00987400
.ZG230A               ANOP  ,                                           00987500
.*-------------------------------------------------------------------   00987600
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00987700
&ZXENTRYNAME          SETC  'INPUT'     SET IN/OUTPUT                   00987800
&XENTRYNAME           SETC  'NO_ENTRYNAME'                              00987900
                      AIF   (K'&ENTRYNAME(1) LE 0).ZG230B  PARM         00988000
&XENTRYNAME           SETC  '&ENTRYNAME(1)'     SET XVARIABLE           00988100
                      AIF   (N'&ENTRYNAME GT 1).ZG230B  MULTI PARMS     00988200
&XENTRYNAME           SETC  '&ENTRYNAME'        SET XVARIABLE           00988300
.ZG230B               ANOP  ,                                           00988400
.*-------------------------------------------------------------------   00988500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00988600
                      AIF   (K'&ZXENTRYNAME LE 0).ZG230R  NOT I/O       00988700
         AIF   ('&XENTRYNAME' EQ 'NO_ENTRYNAME').ZG230R                 00988800
                      AIF   ('&XENTRYNAME'(1,1) NE '(').ZG230R          00988900
&ZCGPR                SETC  '&XENTRYNAME'(2,K'&XENTRYNAME-2)            00989000
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG230P               00989100
                      AIF   (K'&ZCGPR GT 2).ZG230Q                      00989200
                      AIF   ('&ZCGPR' EQ '0').ZG230Q                    00989300
&ZCGPR                SETC  '&ZCGPR'(2,1)                               00989400
                      AIF   (T'&ZCGPR NE 'N').ZG230Q  INVALID REG NAME  00989500
.ZG230P               ANOP  ,                                           00989600
                      AIF   (T'&ZCGPR NE 'N').ZG230R  NON NUMERIC       00989700
                      AIF   ('&ZCGPR' LT '2').ZG230Q                    00989800
                      AIF   ('&ZCGPR' LE '12').ZG230R                   00989900
.ZG230Q               ANOP  ,                                           00990000
&ZMS                  SETC  '"ENTRYNAME='       *KGPRA* MNOTE           00990100
&ZMS                  SETC  '&ZMS.&ENTRYNAME"'                          00990200
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   00990300
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            00990400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00990500
.ZG230R               ANOP  ,                                           00990600
.*----------------------------------------------------------------***   00990700
.***AG.KXVAR01 VALUE, OPT INPUT, KEYS -NO ARGUMENTS                     00990800
&XLOCBYCURSOR         SETC  ''          RESET XVARIABLE                 00990900
&ZXLOCBYCURSOR        SETC  ''          RESET IN/OUTPUT                 00991000
&ZASYSLNDX            SETA  0                                           00991100
.ZG233A               ANOP  ,           POSITIONAL MACRO KEY            00991200
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                00991300
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG233B                        00991400
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG233A           00991500
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'LOCBYCURSOR').ZG233A         00991600
&ZCSYSLIST(&ZASYSLNDX) SETC  'NONXKEY'  POSITIONAL IS MACRO KEY         00991700
&XLOCBYCURSOR         SETC  'LOCBYCURSOR'       MACRO KEY FOUND         00991800
&ZXLOCBYCURSOR        SETC  'INPUT'     SET IN/OUTPUT                   00991900
.ZG233B               ANOP  ,                                           00992000
.*-------------------------------------------------------------------   00992100
.***AG.KXVAR03 VALUE, OPT INPUT, KEYS -NO ARGUMENTS                     00992200
                      AIF   (K'&XLOCBYCURSOR GT 0).ZG233C  KEY ENTERED  00992300
&ZXLOCBYCURSOR        SETC  'INPUT'     SET IN/OUTPUT                   00992400
&XLOCBYCURSOR         SETC  'NO_LOCBYCURSOR'    SET DEFAULT             00992500
.ZG233C               ANOP  ,                                           00992600
.*------------------------------------------------------------------    00992700
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00992800
&XUPDATECURSOR        SETC  ''          INITIALIZE XVARIABLE            00992900
.*-------------------------------------------------------------------   00993000
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00993100
.ZG237                ANOP  ,                                           00993200
                      AIF   (K'&UPDATECURSOR(1) LE 0).ZG237A            00993300
&ZTLC                 SETC 'NO'                                         00993400
                      AIF   ('&UPDATECURSOR(1)' NE '&ZTLC').ZG238       00993500
&XUPDATECURSOR        SETC  'NO'        SET KEYWORD                     00993600
                      AIF   (N'&UPDATECURSOR LE 1).ZG237A  CK NUM       00993700
&ZMS                  SETC  '"UPDATECURSOR='    *KPOSA* MNOTE           00993800
&ZMS                  SETC  '&ZMS.&UPDATECURSOR"'                       00993900
&ZMS                  SETC  '&ZMS "UPDATECURSOR"'                       00994000
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00994100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00994200
.ZG237A               ANOP  ,                                           00994300
.*------------------------------------------------------------------    00994400
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00994500
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     00994600
.ZG237A0              AIF   (K'&CURSORUPDTYPE LE 0).ZG237A1  OK         00994700
&ZCVAL                SETC '&ZCVAL CURSORUPDTYPE'  INCORRECT KEY USED   00994800
.ZG237A1              AIF   (K'&ZCVAL LE 0).ZG237A2  OK                 00994900
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       00995000
&ZMS                  SETC  '"UPDATECURSOR'     *KMEIA* MNOTE           00995100
&ZMS                  SETC  '&ZMS.=&UPDATECURSOR"'                      00995200
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        00995300
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        00995400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00995500
.ZG237A2              ANOP  ,                                           00995600
.*-------------------------------------------------------------------   00995700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00995800
.ZG238                ANOP  ,                                           00995900
&ZTLC                 SETC 'YES'                                        00996000
                      AIF   ('&UPDATECURSOR(1)' NE '&ZTLC').ZG246       00996100
&XUPDATECURSOR        SETC  'YES'       SET KEYWORD                     00996200
                      AIF   (N'&UPDATECURSOR LE 1).ZG238A  CK NUM       00996300
&ZMS                  SETC  '"UPDATECURSOR='    *KPOSA* MNOTE           00996400
&ZMS                  SETC  '&ZMS.&UPDATECURSOR"'                       00996500
&ZMS                  SETC  '&ZMS "UPDATECURSOR"'                       00996600
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00996700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00996800
.ZG238A               ANOP  ,                                           00996900
.*----------------------------------------------------------------***   00997000
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00997100
                      AIF   (N'&CURSORUPDTYPE LE 1).ZG240A  CK NUM      00997200
&ZMS                  SETC  '"CURSORUPDTYPE='   *KPOSA* MNOTE           00997300
&ZMS                  SETC  '&ZMS.&CURSORUPDTYPE"'                      00997400
&ZMS                  SETC  '&ZMS "CURSORUPDTYPE"'                      00997500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         00997600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     00997700
.ZG240A               ANOP  ,                                           00997800
.*-------------------------------------------------------------------   00997900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00998000
&XCURSORUPDTYPE       SETC  ''          INITIALIZE XVARIABLE            00998100
.ZG241A   AIF   ('&CURSORUPDTYPE(1)' NE 'NEXT').ZG242A                  00998200
&XCURSORUPDTYPE       SETC  'NEXT'      SET KEYWORD                     00998300
.*-------------------------------------------------------------------   00998400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00998500
.ZG242A   AIF   ('&CURSORUPDTYPE(1)' NE 'NEXTCOND').ZG243A              00998600
&XCURSORUPDTYPE       SETC  'NEXTCOND'  SET KEYWORD                     00998700
.*-------------------------------------------------------------------   00998800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00998900
.ZG243A   AIF   ('&CURSORUPDTYPE(1)' NE 'CURRENT').ZG244A               00999000
&XCURSORUPDTYPE       SETC  'CURRENT'   SET KEYWORD                     00999100
.*-------------------------------------------------------------------   00999200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00999300
.ZG244A   AIF   ('&CURSORUPDTYPE(1)' NE 'CURRENTCOND').ZG245A           00999400
&XCURSORUPDTYPE       SETC  'CURRENTCOND'       SET KEYWORD             00999500
.*-------------------------------------------------------------------   00999600
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00999700
.ZG245A               AIF   (K'&XCURSORUPDTYPE GT 0).ZG245C  KEYWORD    00999800
                      AIF   (K'&CURSORUPDTYPE(1) LE 0).ZG245B           00999900
&ZMS                  SETC  '"CURSORUPDTYPE='   *KUKWA* MNOTE           01000000
&ZMS                  SETC  '&ZMS.&CURSORUPDTYPE"'                      01000100
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   01000200
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         01000300
&ZMS                  SETC  '&ZMS "NEXT",'                              01000400
&ZMS                  SETC  '&ZMS "NEXTCOND",'                          01000500
&ZMS                  SETC  '&ZMS "CURRENT",'                           01000600
&ZMS                  SETC  '&ZMS OR "CURRENTCOND".'                    01000700
                      MNOTE 8,' &ZMS '                                  01000800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01000900
.ZG245B               ANOP  ,                                           01001000
&XCURSORUPDTYPE       SETC  'NEXT'      SET DEFAULT KEYWORD             01001100
.ZG245C               ANOP  ,                                           01001200
&ZXCURSORUPDTYPE      SETC  'INPUT'     SET IN/OUTPUT                   01001300
.*------------------------------------------------------------------    01001400
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01001500
.ZG246                ANOP  ,                                           01001600
&ZXUPDATECURSOR       SETC  'INPUT'     SET IN/OUTPUT                   01001700
                      AIF   (K'&XUPDATECURSOR GT 0).ZG246E  VALID ARG   01001800
                      AIF   (T'&UPDATECURSOR EQ 'O').ZG246D  OMITTED    01001900
&ZASYSLNDX            SETA  0                                           01002000
.ZG246A               ANOP  ,           POSITIONAL MACRO KEY            01002100
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                01002200
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG246C           01002300
&ZTLC                 SETC 'UPDATECURSOR'                               01002400
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG246A  01002500
.ZG246B               ANOP  ,                                           01002600
&ZXUPDATECURSOR       SETC  ''          RESET IN/OUTPUT                 01002700
&ZMS                  SETC  'THE "UPDATECURSOR" KEY'  *KOPTA* MNOTE     01002800
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     01002900
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            01003000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01003100
                      AGO   .ZG246E                                     01003200
.ZG246C               ANOP  ,                                           01003300
&ZXUPDATECURSOR       SETC  ''          RESET IN/OUTPUT                 01003400
&ZMS                  SETC  '"UPDATECURSOR='    *KUKWA* MNOTE           01003500
&ZMS                  SETC  '&ZMS.&UPDATECURSOR"'                       01003600
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   01003700
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         01003800
&ZMS                  SETC  '&ZMS "NO"'                                 01003900
&ZMS                  SETC  '&ZMS OR "YES".'                            01004000
                      MNOTE 8,' &ZMS '                                  01004100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01004200
                      AGO   .ZG246E                                     01004300
.ZG246D               ANOP  ,                                           01004400
&XUPDATECURSOR        SETC  'NO'        SET DEFAULT KEYWORD             01004500
.ZG246E               ANOP  ,                                           01004600
.*----------------------------------------------------------------***   01004700
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01004800
                      AIF   (N'&LISTDIR LE 1).ZG248A  CK NUM            01004900
&ZMS                  SETC  '"LISTDIR='         *KPOSA* MNOTE           01005000
&ZMS                  SETC  '&ZMS.&LISTDIR"'                            01005100
&ZMS                  SETC  '&ZMS "LISTDIR"'                            01005200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01005300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01005400
.ZG248A               ANOP  ,                                           01005500
.*-------------------------------------------------------------------   01005600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01005700
&XLISTDIR             SETC  ''          INITIALIZE XVARIABLE            01005800
.ZG249A   AIF   ('&LISTDIR(1)' NE 'TOTAIL').ZG250A                      01005900
&XLISTDIR             SETC  'TOTAIL'    SET KEYWORD                     01006000
.*-------------------------------------------------------------------   01006100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01006200
.ZG250A   AIF   ('&LISTDIR(1)' NE 'TOHEAD').ZG251A                      01006300
&XLISTDIR             SETC  'TOHEAD'    SET KEYWORD                     01006400
.*-------------------------------------------------------------------   01006500
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01006600
.ZG251A               AIF   (K'&XLISTDIR GT 0).ZG251C  KEYWORD          01006700
                      AIF   (K'&LISTDIR(1) LE 0).ZG251B                 01006800
&ZMS                  SETC  '"LISTDIR='         *KUKWA* MNOTE           01006900
&ZMS                  SETC  '&ZMS.&LISTDIR"'                            01007000
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   01007100
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         01007200
&ZMS                  SETC  '&ZMS "TOTAIL"'                             01007300
&ZMS                  SETC  '&ZMS OR "TOHEAD".'                         01007400
                      MNOTE 8,' &ZMS '                                  01007500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01007600
.ZG251B               ANOP  ,                                           01007700
&XLISTDIR             SETC  'TOTAIL'    SET DEFAULT KEYWORD             01007800
.ZG251C               ANOP  ,                                           01007900
&ZXLISTDIR            SETC  'INPUT'     SET IN/OUTPUT                   01008000
.*------------------------------------------------------------------    01008100
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01008200
&XLISTKEYTYPE         SETC  ''          INITIALIZE XVARIABLE            01008300
.*-------------------------------------------------------------------   01008400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01008500
.ZG254                ANOP  ,                                           01008600
                      AIF   (K'&LISTKEYTYPE(1) LE 0).ZG254A             01008700
&ZTLC                 SETC 'NOLISTKEY'                                  01008800
                      AIF   ('&LISTKEYTYPE(1)' NE '&ZTLC').ZG255        01008900
&XLISTKEYTYPE         SETC  'NOLISTKEY'         SET KEYWORD             01009000
                      AIF   (N'&LISTKEYTYPE LE 1).ZG254A  CK NUM        01009100
&ZMS                  SETC  '"LISTKEYTYPE='     *KPOSA* MNOTE           01009200
&ZMS                  SETC  '&ZMS.&LISTKEYTYPE"'                        01009300
&ZMS                  SETC  '&ZMS "LISTKEYTYPE"'                        01009400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01009500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01009600
.ZG254A               ANOP  ,                                           01009700
.*------------------------------------------------------------------    01009800
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01009900
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01010000
.ZG254A0              AIF   (K'&LISTKEYINC LE 0).ZG254A1  OK            01010100
&ZCVAL                SETC '&ZCVAL LISTKEYINC'  INCORRECT KEY USED      01010200
.ZG254A1              AIF   (K'&ZCVAL LE 0).ZG254A2  OK                 01010300
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01010400
&ZMS                  SETC  '"LISTKEYTYPE'      *KMEIA* MNOTE           01010500
&ZMS                  SETC  '&ZMS.=&LISTKEYTYPE"'                       01010600
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01010700
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01010800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01010900
.ZG254A2              ANOP  ,                                           01011000
.*-------------------------------------------------------------------   01011100
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01011200
.ZG255                ANOP  ,                                           01011300
&ZTLC                 SETC 'MOVE'                                       01011400
                      AIF   ('&LISTKEYTYPE(1)' NE '&ZTLC').ZG259        01011500
&XLISTKEYTYPE         SETC  'MOVE'      SET KEYWORD                     01011600
                      AIF   (N'&LISTKEYTYPE LE 1).ZG255A  CK NUM        01011700
&ZMS                  SETC  '"LISTKEYTYPE='     *KPOSA* MNOTE           01011800
&ZMS                  SETC  '&ZMS.&LISTKEYTYPE"'                        01011900
&ZMS                  SETC  '&ZMS "LISTKEYTYPE"'                        01012000
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01012100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01012200
.ZG255A               ANOP  ,                                           01012300
.*----------------------------------------------------------------***   01012400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     01012500
                      AIF   (N'&LISTKEYINC LE 1).ZG257A  CK NUM         01012600
&ZMS                  SETC  '"LISTKEYINC='      *KPOSA* MNOTE           01012700
&ZMS                  SETC  '&ZMS.&LISTKEYINC"'                         01012800
&ZMS                  SETC  '&ZMS "LISTKEYINC"'                         01012900
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01013000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01013100
.ZG257A               ANOP  ,                                           01013200
.*-------------------------------------------------------------------   01013300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         01013400
&ZXLISTKEYINC         SETC  'INPUT'     SET IN/OUTPUT                   01013500
&XLISTKEYINC          SETC  'NO_LISTKEYINC'                             01013600
                      AIF   (K'&LISTKEYINC(1) LE 0).ZG257B  PARM        01013700
&XLISTKEYINC          SETC  '&LISTKEYINC(1)'    SET XVARIABLE           01013800
                      AIF   (N'&LISTKEYINC GT 1).ZG257B  MULTI PARMS    01013900
&XLISTKEYINC          SETC  '&LISTKEYINC'       SET XVARIABLE           01014000
.ZG257B               ANOP  ,                                           01014100
.*-------------------------------------------------------------------   01014200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01014300
                      AIF   (K'&ZXLISTKEYINC LE 0).ZG257R  NOT I/O      01014400
         AIF   ('&XLISTKEYINC' EQ 'NO_LISTKEYINC').ZG257R               01014500
                      AIF   ('&XLISTKEYINC'(1,1) NE '(').ZG257R         01014600
&ZCGPR                SETC  '&XLISTKEYINC'(2,K'&XLISTKEYINC-2)          01014700
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG257P               01014800
                      AIF   (K'&ZCGPR GT 2).ZG257Q                      01014900
                      AIF   ('&ZCGPR' EQ '0').ZG257Q                    01015000
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01015100
                      AIF   (T'&ZCGPR NE 'N').ZG257Q  INVALID REG NAME  01015200
.ZG257P               ANOP  ,                                           01015300
                      AIF   (T'&ZCGPR NE 'N').ZG257R  NON NUMERIC       01015400
                      AIF   ('&ZCGPR' LT '2').ZG257Q                    01015500
                      AIF   ('&ZCGPR' LE '12').ZG257R                   01015600
.ZG257Q               ANOP  ,                                           01015700
&ZMS                  SETC  '"LISTKEYINC='      *KGPRA* MNOTE           01015800
&ZMS                  SETC  '&ZMS.&LISTKEYINC"'                         01015900
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01016000
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01016100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01016200
.ZG257R               ANOP  ,                                           01016300
.*-------------------------------------------------------------------   01016400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01016500
.ZG259                ANOP  ,                                           01016600
&ZTLC                 SETC 'CREATE'                                     01016700
                      AIF   ('&LISTKEYTYPE(1)' NE '&ZTLC').ZG263        01016800
&XLISTKEYTYPE         SETC  'CREATE'    SET KEYWORD                     01016900
                      AIF   (N'&LISTKEYTYPE LE 1).ZG259A  CK NUM        01017000
&ZMS                  SETC  '"LISTKEYTYPE='     *KPOSA* MNOTE           01017100
&ZMS                  SETC  '&ZMS.&LISTKEYTYPE"'                        01017200
&ZMS                  SETC  '&ZMS "LISTKEYTYPE"'                        01017300
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01017400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01017500
.ZG259A               ANOP  ,                                           01017600
.*----------------------------------------------------------------***   01017700
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     01017800
                      AIF   (N'&LISTKEYINC LE 1).ZG261A  CK NUM         01017900
&ZMS                  SETC  '"LISTKEYINC='      *KPOSA* MNOTE           01018000
&ZMS                  SETC  '&ZMS.&LISTKEYINC"'                         01018100
&ZMS                  SETC  '&ZMS "LISTKEYINC"'                         01018200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01018300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01018400
.ZG261A               ANOP  ,                                           01018500
.*-------------------------------------------------------------------   01018600
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         01018700
&ZXLISTKEYINC         SETC  'INPUT'     SET IN/OUTPUT                   01018800
&XLISTKEYINC          SETC  'NO_LISTKEYINC'                             01018900
                      AIF   (K'&LISTKEYINC(1) LE 0).ZG261B  PARM        01019000
&XLISTKEYINC          SETC  '&LISTKEYINC(1)'    SET XVARIABLE           01019100
                      AIF   (N'&LISTKEYINC GT 1).ZG261B  MULTI PARMS    01019200
&XLISTKEYINC          SETC  '&LISTKEYINC'       SET XVARIABLE           01019300
.ZG261B               ANOP  ,                                           01019400
.*-------------------------------------------------------------------   01019500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01019600
                      AIF   (K'&ZXLISTKEYINC LE 0).ZG261R  NOT I/O      01019700
         AIF   ('&XLISTKEYINC' EQ 'NO_LISTKEYINC').ZG261R               01019800
                      AIF   ('&XLISTKEYINC'(1,1) NE '(').ZG261R         01019900
&ZCGPR                SETC  '&XLISTKEYINC'(2,K'&XLISTKEYINC-2)          01020000
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG261P               01020100
                      AIF   (K'&ZCGPR GT 2).ZG261Q                      01020200
                      AIF   ('&ZCGPR' EQ '0').ZG261Q                    01020300
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01020400
                      AIF   (T'&ZCGPR NE 'N').ZG261Q  INVALID REG NAME  01020500
.ZG261P               ANOP  ,                                           01020600
                      AIF   (T'&ZCGPR NE 'N').ZG261R  NON NUMERIC       01020700
                      AIF   ('&ZCGPR' LT '2').ZG261Q                    01020800
                      AIF   ('&ZCGPR' LE '12').ZG261R                   01020900
.ZG261Q               ANOP  ,                                           01021000
&ZMS                  SETC  '"LISTKEYINC='      *KGPRA* MNOTE           01021100
&ZMS                  SETC  '&ZMS.&LISTKEYINC"'                         01021200
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01021300
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01021400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01021500
.ZG261R               ANOP  ,                                           01021600
.*-------------------------------------------------------------------   01021700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01021800
.ZG263                ANOP  ,                                           01021900
&ZTLC                 SETC 'ANY'                                        01022000
                      AIF   ('&LISTKEYTYPE(1)' NE '&ZTLC').ZG267        01022100
&XLISTKEYTYPE         SETC  'ANY'       SET KEYWORD                     01022200
                      AIF   (N'&LISTKEYTYPE LE 1).ZG263A  CK NUM        01022300
&ZMS                  SETC  '"LISTKEYTYPE='     *KPOSA* MNOTE           01022400
&ZMS                  SETC  '&ZMS.&LISTKEYTYPE"'                        01022500
&ZMS                  SETC  '&ZMS "LISTKEYTYPE"'                        01022600
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01022700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01022800
.ZG263A               ANOP  ,                                           01022900
.*----------------------------------------------------------------***   01023000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     01023100
                      AIF   (N'&LISTKEYINC LE 1).ZG265A  CK NUM         01023200
&ZMS                  SETC  '"LISTKEYINC='      *KPOSA* MNOTE           01023300
&ZMS                  SETC  '&ZMS.&LISTKEYINC"'                         01023400
&ZMS                  SETC  '&ZMS "LISTKEYINC"'                         01023500
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01023600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01023700
.ZG265A               ANOP  ,                                           01023800
.*-------------------------------------------------------------------   01023900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         01024000
&ZXLISTKEYINC         SETC  'INPUT'     SET IN/OUTPUT                   01024100
&XLISTKEYINC          SETC  'NO_LISTKEYINC'                             01024200
                      AIF   (K'&LISTKEYINC(1) LE 0).ZG265B  PARM        01024300
&XLISTKEYINC          SETC  '&LISTKEYINC(1)'    SET XVARIABLE           01024400
                      AIF   (N'&LISTKEYINC GT 1).ZG265B  MULTI PARMS    01024500
&XLISTKEYINC          SETC  '&LISTKEYINC'       SET XVARIABLE           01024600
.ZG265B               ANOP  ,                                           01024700
.*-------------------------------------------------------------------   01024800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01024900
                      AIF   (K'&ZXLISTKEYINC LE 0).ZG265R  NOT I/O      01025000
         AIF   ('&XLISTKEYINC' EQ 'NO_LISTKEYINC').ZG265R               01025100
                      AIF   ('&XLISTKEYINC'(1,1) NE '(').ZG265R         01025200
&ZCGPR                SETC  '&XLISTKEYINC'(2,K'&XLISTKEYINC-2)          01025300
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG265P               01025400
                      AIF   (K'&ZCGPR GT 2).ZG265Q                      01025500
                      AIF   ('&ZCGPR' EQ '0').ZG265Q                    01025600
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01025700
                      AIF   (T'&ZCGPR NE 'N').ZG265Q  INVALID REG NAME  01025800
.ZG265P               ANOP  ,                                           01025900
                      AIF   (T'&ZCGPR NE 'N').ZG265R  NON NUMERIC       01026000
                      AIF   ('&ZCGPR' LT '2').ZG265Q                    01026100
                      AIF   ('&ZCGPR' LE '12').ZG265R                   01026200
.ZG265Q               ANOP  ,                                           01026300
&ZMS                  SETC  '"LISTKEYINC='      *KGPRA* MNOTE           01026400
&ZMS                  SETC  '&ZMS.&LISTKEYINC"'                         01026500
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01026600
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01026700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01026800
.ZG265R               ANOP  ,                                           01026900
.*------------------------------------------------------------------    01027000
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01027100
.ZG267                ANOP  ,                                           01027200
&ZXLISTKEYTYPE        SETC  'INPUT'     SET IN/OUTPUT                   01027300
                      AIF   (K'&XLISTKEYTYPE GT 0).ZG267E  VALID ARG    01027400
                      AIF   (T'&LISTKEYTYPE EQ 'O').ZG267D  OMITTED     01027500
&ZASYSLNDX            SETA  0                                           01027600
.ZG267A               ANOP  ,           POSITIONAL MACRO KEY            01027700
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                01027800
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG267C           01027900
&ZTLC                 SETC 'LISTKEYTYPE'                                01028000
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG267A  01028100
.ZG267B               ANOP  ,                                           01028200
&ZXLISTKEYTYPE        SETC  ''          RESET IN/OUTPUT                 01028300
&ZMS                  SETC  'THE "LISTKEYTYPE" KEY'  *KOPTA* MNOTE      01028400
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     01028500
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            01028600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01028700
                      AGO   .ZG267E                                     01028800
.ZG267C               ANOP  ,                                           01028900
&ZXLISTKEYTYPE        SETC  ''          RESET IN/OUTPUT                 01029000
&ZMS                  SETC  '"LISTKEYTYPE='     *KUKWA* MNOTE           01029100
&ZMS                  SETC  '&ZMS.&LISTKEYTYPE"'                        01029200
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   01029300
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         01029400
&ZMS                  SETC  '&ZMS "NOLISTKEY",'                         01029500
&ZMS                  SETC  '&ZMS "MOVE",'                              01029600
&ZMS                  SETC  '&ZMS "CREATE",'                            01029700
&ZMS                  SETC  '&ZMS OR "ANY".'                            01029800
                      MNOTE 8,' &ZMS '                                  01029900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01030000
                      AGO   .ZG267E                                     01030100
.ZG267D               ANOP  ,                                           01030200
&XLISTKEYTYPE         SETC  'NOLISTKEY'         SET DEFAULT KEYWORD     01030300
.ZG267E               ANOP  ,                                           01030400
.*----------------------------------------------------------------***   01030500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     01030600
                      AIF   (N'&KEYCOMP LE 1).ZG269A  CK NUM            01030700
&ZMS                  SETC  '"KEYCOMP='         *KPOSA* MNOTE           01030800
&ZMS                  SETC  '&ZMS.&KEYCOMP"'                            01030900
&ZMS                  SETC  '&ZMS "KEYCOMP"'                            01031000
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01031100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01031200
.ZG269A               ANOP  ,                                           01031300
.*-------------------------------------------------------------------   01031400
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         01031500
&ZXKEYCOMP            SETC  'INPUT'     SET IN/OUTPUT                   01031600
&XKEYCOMP             SETC  'NO_KEYCOMP'                                01031700
                      AIF   (K'&KEYCOMP(1) LE 0).ZG269B  PARM           01031800
&XKEYCOMP             SETC  '&KEYCOMP(1)'       SET XVARIABLE           01031900
                      AIF   (N'&KEYCOMP GT 1).ZG269B  MULTI PARMS       01032000
&XKEYCOMP             SETC  '&KEYCOMP'  SET XVARIABLE                   01032100
.ZG269B               ANOP  ,                                           01032200
.*-------------------------------------------------------------------   01032300
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01032400
                      AIF   (K'&ZXKEYCOMP LE 0).ZG269R  NOT I/O         01032500
         AIF   ('&XKEYCOMP' EQ 'NO_KEYCOMP').ZG269R                     01032600
                      AIF   ('&XKEYCOMP'(1,1) NE '(').ZG269R            01032700
&ZCGPR                SETC  '&XKEYCOMP'(2,K'&XKEYCOMP-2)                01032800
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG269P               01032900
                      AIF   (K'&ZCGPR GT 2).ZG269Q                      01033000
                      AIF   ('&ZCGPR' EQ '0').ZG269Q                    01033100
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01033200
                      AIF   (T'&ZCGPR NE 'N').ZG269Q  INVALID REG NAME  01033300
.ZG269P               ANOP  ,                                           01033400
                      AIF   (T'&ZCGPR NE 'N').ZG269R  NON NUMERIC       01033500
                      AIF   ('&ZCGPR' LT '2').ZG269Q                    01033600
                      AIF   ('&ZCGPR' LE '12').ZG269R                   01033700
.ZG269Q               ANOP  ,                                           01033800
&ZMS                  SETC  '"KEYCOMP='         *KGPRA* MNOTE           01033900
&ZMS                  SETC  '&ZMS.&KEYCOMP"'                            01034000
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01034100
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01034200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01034300
.ZG269R               ANOP  ,                                           01034400
.*----------------------------------------------------------------***   01034500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     01034600
                      AIF   (N'&VERSCOMP LE 1).ZG272A  CK NUM           01034700
&ZMS                  SETC  '"VERSCOMP='        *KPOSA* MNOTE           01034800
&ZMS                  SETC  '&ZMS.&VERSCOMP"'                           01034900
&ZMS                  SETC  '&ZMS "VERSCOMP"'                           01035000
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01035100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01035200
.ZG272A               ANOP  ,                                           01035300
.*-------------------------------------------------------------------   01035400
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         01035500
&ZXVERSCOMP           SETC  'INPUT'     SET IN/OUTPUT                   01035600
&XVERSCOMP            SETC  'NO_VERSCOMP'                               01035700
                      AIF   (K'&VERSCOMP(1) LE 0).ZG272B  PARM          01035800
&XVERSCOMP            SETC  '&VERSCOMP(1)'      SET XVARIABLE           01035900
                      AIF   (N'&VERSCOMP GT 1).ZG272B  MULTI PARMS      01036000
&XVERSCOMP            SETC  '&VERSCOMP'         SET XVARIABLE           01036100
.ZG272B               ANOP  ,                                           01036200
.*-------------------------------------------------------------------   01036300
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01036400
                      AIF   (K'&ZXVERSCOMP LE 0).ZG272R  NOT I/O        01036500
         AIF   ('&XVERSCOMP' EQ 'NO_VERSCOMP').ZG272R                   01036600
                      AIF   ('&XVERSCOMP'(1,1) NE '(').ZG272R           01036700
&ZCGPR                SETC  '&XVERSCOMP'(2,K'&XVERSCOMP-2)              01036800
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG272P               01036900
                      AIF   (K'&ZCGPR GT 2).ZG272Q                      01037000
                      AIF   ('&ZCGPR' EQ '0').ZG272Q                    01037100
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01037200
                      AIF   (T'&ZCGPR NE 'N').ZG272Q  INVALID REG NAME  01037300
.ZG272P               ANOP  ,                                           01037400
                      AIF   (T'&ZCGPR NE 'N').ZG272R  NON NUMERIC       01037500
                      AIF   ('&ZCGPR' LT '2').ZG272Q                    01037600
                      AIF   ('&ZCGPR' LE '12').ZG272R                   01037700
.ZG272Q               ANOP  ,                                           01037800
&ZMS                  SETC  '"VERSCOMP='        *KGPRA* MNOTE           01037900
&ZMS                  SETC  '&ZMS.&VERSCOMP"'                           01038000
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01038100
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01038200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01038300
.ZG272R               ANOP  ,                                           01038400
.*----------------------------------------------------------------***   01038500
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01038600
                      AIF   (N'&VERSCOMPTYPE LE 1).ZG274A  CK NUM       01038700
&ZMS                  SETC  '"VERSCOMPTYPE='    *KPOSA* MNOTE           01038800
&ZMS                  SETC  '&ZMS.&VERSCOMPTYPE"'                       01038900
&ZMS                  SETC  '&ZMS "VERSCOMPTYPE"'                       01039000
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01039100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01039200
.ZG274A               ANOP  ,                                           01039300
.*-------------------------------------------------------------------   01039400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01039500
&XVERSCOMPTYPE        SETC  ''          INITIALIZE XVARIABLE            01039600
.ZG275A   AIF   ('&VERSCOMPTYPE(1)' NE 'EQUAL').ZG276A                  01039700
&XVERSCOMPTYPE        SETC  'EQUAL'     SET KEYWORD                     01039800
.*-------------------------------------------------------------------   01039900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01040000
.ZG276A   AIF   ('&VERSCOMPTYPE(1)' NE 'LESSOREQUAL').ZG277A            01040100
&XVERSCOMPTYPE        SETC  'LESSOREQUAL'       SET KEYWORD             01040200
.*-------------------------------------------------------------------   01040300
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01040400
.ZG277A               AIF   (K'&XVERSCOMPTYPE GT 0).ZG277C  KEYWORD     01040500
                      AIF   (K'&VERSCOMPTYPE(1) LE 0).ZG277B            01040600
&ZMS                  SETC  '"VERSCOMPTYPE='    *KUKWA* MNOTE           01040700
&ZMS                  SETC  '&ZMS.&VERSCOMPTYPE"'                       01040800
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   01040900
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         01041000
&ZMS                  SETC  '&ZMS "EQUAL"'                              01041100
&ZMS                  SETC  '&ZMS OR "LESSOREQUAL".'                    01041200
                      MNOTE 8,' &ZMS '                                  01041300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01041400
.ZG277B               ANOP  ,                                           01041500
&XVERSCOMPTYPE        SETC  'EQUAL'     SET DEFAULT KEYWORD             01041600
.ZG277C               ANOP  ,                                           01041700
&ZXVERSCOMPTYPE       SETC  'INPUT'     SET IN/OUTPUT                   01041800
.*-------------------------------------------------------------------   01041900
.***AG.KKWRD06 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01042000
                      AIF   (K'&VERSCOMP(1) GT 0).ZG277D  KEY           01042100
                      AIF   (K'&VERSCOMPTYPE(1) LE 0).ZG277D  PARM      01042200
&ZMS                  SETC  '"VERSCOMPTYPE'     *KDEPA* MNOTE           01042300
&ZMS                  SETC  '&ZMS.=&VERSCOMPTYPE"'                      01042400
&ZMS                  SETC  '&ZMS CAN ONLY BE SPECIFIED IF'             01042500
&ZMS                  SETC  '&ZMS '                                     01042600
&ZMS                  SETC  '&ZMS "VERSCOMP"'                           01042700
                      MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                01042800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01042900
.ZG277D               ANOP  ,                                           01043000
.*------------------------------------------------------------------    01043100
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01043200
&XVERSUPDATE          SETC  ''          INITIALIZE XVARIABLE            01043300
.*-------------------------------------------------------------------   01043400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01043500
.ZG281                ANOP  ,                                           01043600
                      AIF   (K'&VERSUPDATE(1) LE 0).ZG281A              01043700
&ZTLC                 SETC 'NONE'                                       01043800
                      AIF   ('&VERSUPDATE(1)' NE '&ZTLC').ZG282         01043900
&XVERSUPDATE          SETC  'NONE'      SET KEYWORD                     01044000
                      AIF   (N'&VERSUPDATE LE 1).ZG281A  CK NUM         01044100
&ZMS                  SETC  '"VERSUPDATE='      *KPOSA* MNOTE           01044200
&ZMS                  SETC  '&ZMS.&VERSUPDATE"'                         01044300
&ZMS                  SETC  '&ZMS "VERSUPDATE"'                         01044400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01044500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01044600
.ZG281A               ANOP  ,                                           01044700
.*------------------------------------------------------------------    01044800
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01044900
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01045000
.ZG281A0              AIF   (K'&NEWVERS LE 0).ZG281A1  OK               01045100
&ZCVAL                SETC '&ZCVAL NEWVERS'     INCORRECT KEY USED      01045200
.ZG281A1              AIF   (K'&ZCVAL LE 0).ZG281A2  OK                 01045300
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01045400
&ZMS                  SETC  '"VERSUPDATE'       *KMEIA* MNOTE           01045500
&ZMS                  SETC  '&ZMS.=&VERSUPDATE"'                        01045600
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01045700
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01045800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01045900
.ZG281A2              ANOP  ,                                           01046000
.*-------------------------------------------------------------------   01046100
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01046200
.ZG282                ANOP  ,                                           01046300
&ZTLC                 SETC 'INC'                                        01046400
                      AIF   ('&VERSUPDATE(1)' NE '&ZTLC').ZG283         01046500
&XVERSUPDATE          SETC  'INC'       SET KEYWORD                     01046600
                      AIF   (N'&VERSUPDATE LE 1).ZG282A  CK NUM         01046700
&ZMS                  SETC  '"VERSUPDATE='      *KPOSA* MNOTE           01046800
&ZMS                  SETC  '&ZMS.&VERSUPDATE"'                         01046900
&ZMS                  SETC  '&ZMS "VERSUPDATE"'                         01047000
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01047100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01047200
.ZG282A               ANOP  ,                                           01047300
.*------------------------------------------------------------------    01047400
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01047500
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01047600
.ZG282A0              AIF   (K'&NEWVERS LE 0).ZG282A1  OK               01047700
&ZCVAL                SETC '&ZCVAL NEWVERS'     INCORRECT KEY USED      01047800
.ZG282A1              AIF   (K'&ZCVAL LE 0).ZG282A2  OK                 01047900
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01048000
&ZMS                  SETC  '"VERSUPDATE'       *KMEIA* MNOTE           01048100
&ZMS                  SETC  '&ZMS.=&VERSUPDATE"'                        01048200
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01048300
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01048400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01048500
.ZG282A2              ANOP  ,                                           01048600
.*-------------------------------------------------------------------   01048700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01048800
.ZG283                ANOP  ,                                           01048900
&ZTLC                 SETC 'DEC'                                        01049000
                      AIF   ('&VERSUPDATE(1)' NE '&ZTLC').ZG284         01049100
&XVERSUPDATE          SETC  'DEC'       SET KEYWORD                     01049200
                      AIF   (N'&VERSUPDATE LE 1).ZG283A  CK NUM         01049300
&ZMS                  SETC  '"VERSUPDATE='      *KPOSA* MNOTE           01049400
&ZMS                  SETC  '&ZMS.&VERSUPDATE"'                         01049500
&ZMS                  SETC  '&ZMS "VERSUPDATE"'                         01049600
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01049700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01049800
.ZG283A               ANOP  ,                                           01049900
.*------------------------------------------------------------------    01050000
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01050100
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01050200
.ZG283A0              AIF   (K'&NEWVERS LE 0).ZG283A1  OK               01050300
&ZCVAL                SETC '&ZCVAL NEWVERS'     INCORRECT KEY USED      01050400
.ZG283A1              AIF   (K'&ZCVAL LE 0).ZG283A2  OK                 01050500
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01050600
&ZMS                  SETC  '"VERSUPDATE'       *KMEIA* MNOTE           01050700
&ZMS                  SETC  '&ZMS.=&VERSUPDATE"'                        01050800
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01050900
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01051000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01051100
.ZG283A2              ANOP  ,                                           01051200
.*-------------------------------------------------------------------   01051300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01051400
.ZG284                ANOP  ,                                           01051500
&ZTLC                 SETC 'SET'                                        01051600
                      AIF   ('&VERSUPDATE(1)' NE '&ZTLC').ZG288         01051700
&XVERSUPDATE          SETC  'SET'       SET KEYWORD                     01051800
                      AIF   (N'&VERSUPDATE LE 1).ZG284A  CK NUM         01051900
&ZMS                  SETC  '"VERSUPDATE='      *KPOSA* MNOTE           01052000
&ZMS                  SETC  '&ZMS.&VERSUPDATE"'                         01052100
&ZMS                  SETC  '&ZMS "VERSUPDATE"'                         01052200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01052300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01052400
.ZG284A               ANOP  ,                                           01052500
.*----------------------------------------------------------------***   01052600
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 01052700
                      AIF   (N'&NEWVERS LE 1).ZG286A  CK NUM            01052800
&ZMS                  SETC  '"NEWVERS='         *KPOSA* MNOTE           01052900
&ZMS                  SETC  '&ZMS.&NEWVERS"'                            01053000
&ZMS                  SETC  '&ZMS "NEWVERS"'                            01053100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01053200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01053300
.ZG286A               ANOP  ,                                           01053400
.*-------------------------------------------------------------------   01053500
.***AG.KXVAR06 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     01053600
&ZXNEWVERS            SETC  'INPUT'     SET IN/OUTPUT                   01053700
&XNEWVERS             SETC  '&NEWVERS(1)'       SET XVARIABLE           01053800
                      AIF   (N'&NEWVERS GT 1).ZG286B  MULTI PARMS       01053900
&XNEWVERS             SETC  '&NEWVERS'  SET XVARIABLE                   01054000
.ZG286B               AIF   (K'&NEWVERS(1) GT 0).ZG286C                 01054100
&ZXNEWVERS            SETC  ''          RESET IN/OUTPUT                 01054200
&ZMS                  SETC  'WHEN "SET" IS SPECIFIED'  *KRQDA*          01054300
&ZMS                  SETC  '&ZMS , "NEWVERS" KEY AND ITS'              01054400
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            01054500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01054600
                      AGO   .ZG286D                                     01054700
.ZG286C               AIF   ('&XNEWVERS' NE 'NO_NEWVERS').ZG286D        01054800
&ZXNEWVERS            SETC  ''          RESET IN/OUTPUT                 01054900
.ZG286D               ANOP  ,                                           01055000
.*-------------------------------------------------------------------   01055100
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                01055200
                      AIF   (K'&ZXNEWVERS LE 0).ZG286R  NOT I/O         01055300
         AIF   ('&XNEWVERS' EQ 'NO_NEWVERS').ZG286R                     01055400
                      AIF   ('&XNEWVERS'(1,1) NE '(').ZG286R            01055500
&ZCGPR                SETC  '&XNEWVERS'(2,K'&XNEWVERS-2)                01055600
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG286P               01055700
                      AIF   (K'&ZCGPR GT 2).ZG286Q                      01055800
                      AIF   ('&ZCGPR' EQ '0').ZG286Q                    01055900
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01056000
                      AIF   (T'&ZCGPR NE 'N').ZG286Q  INVALID REG NAME  01056100
.ZG286P               ANOP  ,                                           01056200
                      AIF   (T'&ZCGPR NE 'N').ZG286R  NON NUMERIC       01056300
                      AIF   ('&ZCGPR' LT '2').ZG286Q                    01056400
                      AIF   ('&ZCGPR' LE '12').ZG286R                   01056500
.ZG286Q               ANOP  ,                                           01056600
&ZMS                  SETC  '"NEWVERS='         *KGPRA* MNOTE           01056700
&ZMS                  SETC  '&ZMS.&NEWVERS"'                            01056800
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01056900
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01057000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01057100
.ZG286R               ANOP  ,                                           01057200
.*------------------------------------------------------------------    01057300
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01057400
.ZG288                ANOP  ,                                           01057500
&ZXVERSUPDATE         SETC  'INPUT'     SET IN/OUTPUT                   01057600
                      AIF   (K'&XVERSUPDATE GT 0).ZG288E  VALID ARG     01057700
                      AIF   (T'&VERSUPDATE EQ 'O').ZG288D  OMITTED      01057800
&ZASYSLNDX            SETA  0                                           01057900
.ZG288A               ANOP  ,           POSITIONAL MACRO KEY            01058000
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                01058100
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG288C           01058200
&ZTLC                 SETC 'VERSUPDATE'                                 01058300
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG288A  01058400
.ZG288B               ANOP  ,                                           01058500
&ZXVERSUPDATE         SETC  ''          RESET IN/OUTPUT                 01058600
&ZMS                  SETC  'THE "VERSUPDATE" KEY'  *KOPTA* MNOTE       01058700
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     01058800
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            01058900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01059000
                      AGO   .ZG288E                                     01059100
.ZG288C               ANOP  ,                                           01059200
&ZXVERSUPDATE         SETC  ''          RESET IN/OUTPUT                 01059300
&ZMS                  SETC  '"VERSUPDATE='      *KUKWA* MNOTE           01059400
&ZMS                  SETC  '&ZMS.&VERSUPDATE"'                         01059500
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   01059600
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         01059700
&ZMS                  SETC  '&ZMS "NONE",'                              01059800
&ZMS                  SETC  '&ZMS "INC",'                               01059900
&ZMS                  SETC  '&ZMS "DEC",'                               01060000
&ZMS                  SETC  '&ZMS OR "SET".'                            01060100
                      MNOTE 8,' &ZMS '                                  01060200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01060300
                      AGO   .ZG288E                                     01060400
.ZG288D               ANOP  ,                                           01060500
&XVERSUPDATE          SETC  'NONE'      SET DEFAULT KEYWORD             01060600
.ZG288E               ANOP  ,                                           01060700
.*----------------------------------------------------------------***   01060800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     01060900
                      AIF   (N'&LOCKINDEX LE 1).ZG290A  CK NUM          01061000
&ZMS                  SETC  '"LOCKINDEX='       *KPOSA* MNOTE           01061100
&ZMS                  SETC  '&ZMS.&LOCKINDEX"'                          01061200
&ZMS                  SETC  '&ZMS "LOCKINDEX"'                          01061300
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01061400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01061500
.ZG290A               ANOP  ,                                           01061600
.*-------------------------------------------------------------------   01061700
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         01061800
&ZXLOCKINDEX          SETC  'INPUT'     SET IN/OUTPUT                   01061900
&XLOCKINDEX           SETC  'NO_LOCKINDEX'                              01062000
                      AIF   (K'&LOCKINDEX(1) LE 0).ZG290B  PARM         01062100
&XLOCKINDEX           SETC  '&LOCKINDEX(1)'     SET XVARIABLE           01062200
                      AIF   (N'&LOCKINDEX GT 1).ZG290B  MULTI PARMS     01062300
&XLOCKINDEX           SETC  '&LOCKINDEX'        SET XVARIABLE           01062400
.ZG290B               ANOP  ,                                           01062500
.*-------------------------------------------------------------------   01062600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01062700
                      AIF   (K'&ZXLOCKINDEX LE 0).ZG290R  NOT I/O       01062800
         AIF   ('&XLOCKINDEX' EQ 'NO_LOCKINDEX').ZG290R                 01062900
                      AIF   ('&XLOCKINDEX'(1,1) NE '(').ZG290R          01063000
&ZCGPR                SETC  '&XLOCKINDEX'(2,K'&XLOCKINDEX-2)            01063100
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG290P               01063200
                      AIF   (K'&ZCGPR GT 2).ZG290Q                      01063300
                      AIF   ('&ZCGPR' EQ '0').ZG290Q                    01063400
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01063500
                      AIF   (T'&ZCGPR NE 'N').ZG290Q  INVALID REG NAME  01063600
.ZG290P               ANOP  ,                                           01063700
                      AIF   (T'&ZCGPR NE 'N').ZG290R  NON NUMERIC       01063800
                      AIF   ('&ZCGPR' LT '2').ZG290Q                    01063900
                      AIF   ('&ZCGPR' LE '12').ZG290R                   01064000
.ZG290Q               ANOP  ,                                           01064100
&ZMS                  SETC  '"LOCKINDEX='       *KGPRA* MNOTE           01064200
&ZMS                  SETC  '&ZMS.&LOCKINDEX"'                          01064300
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01064400
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01064500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01064600
.ZG290R               ANOP  ,                                           01064700
.*------------------------------------------------------------------    01064800
.***AG.KKCTL01 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01064900
&XLOCKOPER            SETC  ''          INITIALIZE XVARIABLE            01065000
.*-------------------------------------------------------------------   01065100
.***AG.KKCTL02 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01065200
.ZG293                ANOP  ,                                           01065300
                      AIF   (K'&LOCKOPER(1) LE 0).ZG293A                01065400
&ZTLC                 SETC 'SET'                                        01065500
                      AIF   ('&LOCKOPER(1)' NE '&ZTLC').ZG302           01065600
&XLOCKOPER            SETC  'SET'       SET KEYWORD                     01065700
                      AIF   (N'&LOCKOPER LE 1).ZG293A  CK NUM           01065800
&ZMS                  SETC  '"LOCKOPER='        *KPOSA* MNOTE           01065900
&ZMS                  SETC  '&ZMS.&LOCKOPER"'                           01066000
&ZMS                  SETC  '&ZMS "LOCKOPER"'                           01066100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01066200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01066300
.ZG293A               ANOP  ,                                           01066400
.*----------------------------------------------------------------***   01066500
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01066600
                      AIF   (N'&LOCKMODE LE 1).ZG295A  CK NUM           01066700
&ZMS                  SETC  '"LOCKMODE='        *KPOSA* MNOTE           01066800
&ZMS                  SETC  '&ZMS.&LOCKMODE"'                           01066900
&ZMS                  SETC  '&ZMS "LOCKMODE"'                           01067000
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01067100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01067200
.ZG295A               ANOP  ,                                           01067300
.*-------------------------------------------------------------------   01067400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01067500
&XLOCKMODE            SETC  ''          INITIALIZE XVARIABLE            01067600
.ZG296A   AIF   ('&LOCKMODE(1)' NE 'UNCOND').ZG297A                     01067700
&XLOCKMODE            SETC  'UNCOND'    SET KEYWORD                     01067800
.*-------------------------------------------------------------------   01067900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01068000
.ZG297A   AIF   ('&LOCKMODE(1)' NE 'COND').ZG298A                       01068100
&XLOCKMODE            SETC  'COND'      SET KEYWORD                     01068200
.*-------------------------------------------------------------------   01068300
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01068400
.ZG298A               AIF   (K'&XLOCKMODE GT 0).ZG298C  KEYWORD         01068500
                      AIF   (K'&LOCKMODE(1) LE 0).ZG298B                01068600
&ZMS                  SETC  '"LOCKMODE='        *KUKWA* MNOTE           01068700
&ZMS                  SETC  '&ZMS.&LOCKMODE"'                           01068800
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   01068900
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         01069000
&ZMS                  SETC  '&ZMS "UNCOND"'                             01069100
&ZMS                  SETC  '&ZMS OR "COND".'                           01069200
                      MNOTE 8,' &ZMS '                                  01069300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01069400
.ZG298B               ANOP  ,                                           01069500
&XLOCKMODE            SETC  'UNCOND'    SET DEFAULT KEYWORD             01069600
.ZG298C               ANOP  ,                                           01069700
&ZXLOCKMODE           SETC  'INPUT'     SET IN/OUTPUT                   01069800
.*----------------------------------------------------------------***   01069900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     01070000
                      AIF   (N'&LOCKDATA LE 1).ZG300A  CK NUM           01070100
&ZMS                  SETC  '"LOCKDATA='        *KPOSA* MNOTE           01070200
&ZMS                  SETC  '&ZMS.&LOCKDATA"'                           01070300
&ZMS                  SETC  '&ZMS "LOCKDATA"'                           01070400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01070500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01070600
.ZG300A               ANOP  ,                                           01070700
.*-------------------------------------------------------------------   01070800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         01070900
&ZXLOCKDATA           SETC  'INPUT'     SET IN/OUTPUT                   01071000
&XLOCKDATA            SETC  'NO_LOCKDATA'                               01071100
                      AIF   (K'&LOCKDATA(1) LE 0).ZG300B  PARM          01071200
&XLOCKDATA            SETC  '&LOCKDATA(1)'      SET XVARIABLE           01071300
                      AIF   (N'&LOCKDATA GT 1).ZG300B  MULTI PARMS      01071400
&XLOCKDATA            SETC  '&LOCKDATA'         SET XVARIABLE           01071500
.ZG300B               ANOP  ,                                           01071600
.*-------------------------------------------------------------------   01071700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01071800
                      AIF   (K'&ZXLOCKDATA LE 0).ZG300R  NOT I/O        01071900
         AIF   ('&XLOCKDATA' EQ 'NO_LOCKDATA').ZG300R                   01072000
                      AIF   ('&XLOCKDATA'(1,1) NE '(').ZG300R           01072100
&ZCGPR                SETC  '&XLOCKDATA'(2,K'&XLOCKDATA-2)              01072200
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG300P               01072300
                      AIF   (K'&ZCGPR GT 2).ZG300Q                      01072400
                      AIF   ('&ZCGPR' EQ '0').ZG300Q                    01072500
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01072600
                      AIF   (T'&ZCGPR NE 'N').ZG300Q  INVALID REG NAME  01072700
.ZG300P               ANOP  ,                                           01072800
                      AIF   (T'&ZCGPR NE 'N').ZG300R  NON NUMERIC       01072900
                      AIF   ('&ZCGPR' LT '2').ZG300Q                    01073000
                      AIF   ('&ZCGPR' LE '12').ZG300R                   01073100
.ZG300Q               ANOP  ,                                           01073200
&ZMS                  SETC  '"LOCKDATA='        *KGPRA* MNOTE           01073300
&ZMS                  SETC  '&ZMS.&LOCKDATA"'                           01073400
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01073500
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01073600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01073700
.ZG300R               ANOP  ,                                           01073800
.*-------------------------------------------------------------------   01073900
.***AG.KKCTL02 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01074000
.ZG302                ANOP  ,                                           01074100
&ZTLC                 SETC 'RESET'                                      01074200
                      AIF   ('&LOCKOPER(1)' NE '&ZTLC').ZG303           01074300
&XLOCKOPER            SETC  'RESET'     SET KEYWORD                     01074400
                      AIF   (N'&LOCKOPER LE 1).ZG302A  CK NUM           01074500
&ZMS                  SETC  '"LOCKOPER='        *KPOSA* MNOTE           01074600
&ZMS                  SETC  '&ZMS.&LOCKOPER"'                           01074700
&ZMS                  SETC  '&ZMS "LOCKOPER"'                           01074800
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01074900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01075000
.ZG302A               ANOP  ,                                           01075100
.*------------------------------------------------------------------    01075200
.***AG.KKCTL03 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01075300
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01075400
.ZG302A0              AIF   (K'&LOCKMODE LE 0).ZG302A1  OK              01075500
&ZCVAL                SETC '&ZCVAL LOCKMODE'    INCORRECT KEY USED      01075600
.ZG302A1              AIF   (K'&LOCKDATA LE 0).ZG302A2  OK              01075700
&ZCVAL                SETC '&ZCVAL LOCKDATA'    INCORRECT KEY USED      01075800
.ZG302A2              AIF   (K'&ZCVAL LE 0).ZG302A3  OK                 01075900
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01076000
&ZMS                  SETC  '"LOCKOPER'         *KMEIA* MNOTE           01076100
&ZMS                  SETC  '&ZMS.=&LOCKOPER"'                          01076200
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01076300
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01076400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01076500
.ZG302A3              ANOP  ,                                           01076600
.*-------------------------------------------------------------------   01076700
.***AG.KKCTL02 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01076800
.ZG303                ANOP  ,                                           01076900
&ZTLC                 SETC 'NOTHELD'                                    01077000
                      AIF   ('&LOCKOPER(1)' NE '&ZTLC').ZG309           01077100
&XLOCKOPER            SETC  'NOTHELD'   SET KEYWORD                     01077200
                      AIF   (N'&LOCKOPER LE 1).ZG303A  CK NUM           01077300
&ZMS                  SETC  '"LOCKOPER='        *KPOSA* MNOTE           01077400
&ZMS                  SETC  '&ZMS.&LOCKOPER"'                           01077500
&ZMS                  SETC  '&ZMS "LOCKOPER"'                           01077600
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01077700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01077800
.ZG303A               ANOP  ,                                           01077900
.*------------------------------------------------------------------    01078000
.***AG.KKCTL03 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01078100
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01078200
.ZG303A0              AIF   (K'&LOCKDATA LE 0).ZG303A1  OK              01078300
&ZCVAL                SETC '&ZCVAL LOCKDATA'    INCORRECT KEY USED      01078400
.ZG303A1              AIF   (K'&ZCVAL LE 0).ZG303A2  OK                 01078500
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01078600
&ZMS                  SETC  '"LOCKOPER'         *KMEIA* MNOTE           01078700
&ZMS                  SETC  '&ZMS.=&LOCKOPER"'                          01078800
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01078900
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01079000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01079100
.ZG303A2              ANOP  ,                                           01079200
.*----------------------------------------------------------------***   01079300
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01079400
                      AIF   (N'&LOCKMODE LE 1).ZG305A  CK NUM           01079500
&ZMS                  SETC  '"LOCKMODE='        *KPOSA* MNOTE           01079600
&ZMS                  SETC  '&ZMS.&LOCKMODE"'                           01079700
&ZMS                  SETC  '&ZMS "LOCKMODE"'                           01079800
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01079900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01080000
.ZG305A               ANOP  ,                                           01080100
.*-------------------------------------------------------------------   01080200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01080300
&XLOCKMODE            SETC  ''          INITIALIZE XVARIABLE            01080400
.ZG306A   AIF   ('&LOCKMODE(1)' NE 'UNCOND').ZG307A                     01080500
&XLOCKMODE            SETC  'UNCOND'    SET KEYWORD                     01080600
.*-------------------------------------------------------------------   01080700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01080800
.ZG307A   AIF   ('&LOCKMODE(1)' NE 'COND').ZG308A                       01080900
&XLOCKMODE            SETC  'COND'      SET KEYWORD                     01081000
.*-------------------------------------------------------------------   01081100
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01081200
.ZG308A               AIF   (K'&XLOCKMODE GT 0).ZG308C  KEYWORD         01081300
                      AIF   (K'&LOCKMODE(1) LE 0).ZG308B                01081400
&ZMS                  SETC  '"LOCKMODE='        *KUKWA* MNOTE           01081500
&ZMS                  SETC  '&ZMS.&LOCKMODE"'                           01081600
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   01081700
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         01081800
&ZMS                  SETC  '&ZMS "UNCOND"'                             01081900
&ZMS                  SETC  '&ZMS OR "COND".'                           01082000
                      MNOTE 8,' &ZMS '                                  01082100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01082200
.ZG308B               ANOP  ,                                           01082300
&XLOCKMODE            SETC  'UNCOND'    SET DEFAULT KEYWORD             01082400
.ZG308C               ANOP  ,                                           01082500
&ZXLOCKMODE           SETC  'INPUT'     SET IN/OUTPUT                   01082600
.*-------------------------------------------------------------------   01082700
.***AG.KKCTL02 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01082800
.ZG309                ANOP  ,                                           01082900
&ZTLC                 SETC 'HELDBY'                                     01083000
                      AIF   ('&LOCKOPER(1)' NE '&ZTLC').ZG310           01083100
&XLOCKOPER            SETC  'HELDBY'    SET KEYWORD                     01083200
                      AIF   (N'&LOCKOPER LE 1).ZG309A  CK NUM           01083300
&ZMS                  SETC  '"LOCKOPER='        *KPOSA* MNOTE           01083400
&ZMS                  SETC  '&ZMS.&LOCKOPER"'                           01083500
&ZMS                  SETC  '&ZMS "LOCKOPER"'                           01083600
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01083700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01083800
.ZG309A               ANOP  ,                                           01083900
.*------------------------------------------------------------------    01084000
.***AG.KKCTL03 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01084100
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01084200
.ZG309A0              AIF   (K'&LOCKMODE LE 0).ZG309A1  OK              01084300
&ZCVAL                SETC '&ZCVAL LOCKMODE'    INCORRECT KEY USED      01084400
.ZG309A1              AIF   (K'&LOCKDATA LE 0).ZG309A2  OK              01084500
&ZCVAL                SETC '&ZCVAL LOCKDATA'    INCORRECT KEY USED      01084600
.ZG309A2              AIF   (K'&ZCVAL LE 0).ZG309A3  OK                 01084700
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01084800
&ZMS                  SETC  '"LOCKOPER'         *KMEIA* MNOTE           01084900
&ZMS                  SETC  '&ZMS.=&LOCKOPER"'                          01085000
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01085100
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01085200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01085300
.ZG309A3              ANOP  ,                                           01085400
.*-------------------------------------------------------------------   01085500
.***AG.KKCTL02 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01085600
.ZG310                ANOP  ,                                           01085700
&ZTLC                 SETC 'TEST'                                       01085800
                      AIF   ('&LOCKOPER(1)' NE '&ZTLC').ZG311           01085900
&XLOCKOPER            SETC  'TEST'      SET KEYWORD                     01086000
                      AIF   (N'&LOCKOPER LE 1).ZG310A  CK NUM           01086100
&ZMS                  SETC  '"LOCKOPER='        *KPOSA* MNOTE           01086200
&ZMS                  SETC  '&ZMS.&LOCKOPER"'                           01086300
&ZMS                  SETC  '&ZMS "LOCKOPER"'                           01086400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01086500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01086600
.ZG310A               ANOP  ,                                           01086700
.*------------------------------------------------------------------    01086800
.***AG.KKCTL03 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01086900
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01087000
.ZG310A0              AIF   (K'&LOCKMODE LE 0).ZG310A1  OK              01087100
&ZCVAL                SETC '&ZCVAL LOCKMODE'    INCORRECT KEY USED      01087200
.ZG310A1              AIF   (K'&LOCKDATA LE 0).ZG310A2  OK              01087300
&ZCVAL                SETC '&ZCVAL LOCKDATA'    INCORRECT KEY USED      01087400
.ZG310A2              AIF   (K'&ZCVAL LE 0).ZG310A3  OK                 01087500
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01087600
&ZMS                  SETC  '"LOCKOPER'         *KMEIA* MNOTE           01087700
&ZMS                  SETC  '&ZMS.=&LOCKOPER"'                          01087800
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01087900
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01088000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01088100
.ZG310A3              ANOP  ,                                           01088200
.*-------------------------------------------------------------------   01088300
.***AG.KKCTL02 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01088400
.ZG311                ANOP  ,                                           01088500
&ZTLC                 SETC 'READNEXT'                                   01088600
                      AIF   ('&LOCKOPER(1)' NE '&ZTLC').ZG312           01088700
&XLOCKOPER            SETC  'READNEXT'  SET KEYWORD                     01088800
                      AIF   (N'&LOCKOPER LE 1).ZG311A  CK NUM           01088900
&ZMS                  SETC  '"LOCKOPER='        *KPOSA* MNOTE           01089000
&ZMS                  SETC  '&ZMS.&LOCKOPER"'                           01089100
&ZMS                  SETC  '&ZMS "LOCKOPER"'                           01089200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01089300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01089400
.ZG311A               ANOP  ,                                           01089500
.*------------------------------------------------------------------    01089600
.***AG.KKCTL03 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01089700
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01089800
.ZG311A0              AIF   (K'&LOCKMODE LE 0).ZG311A1  OK              01089900
&ZCVAL                SETC '&ZCVAL LOCKMODE'    INCORRECT KEY USED      01090000
.ZG311A1              AIF   (K'&LOCKDATA LE 0).ZG311A2  OK              01090100
&ZCVAL                SETC '&ZCVAL LOCKDATA'    INCORRECT KEY USED      01090200
.ZG311A2              AIF   (K'&ZCVAL LE 0).ZG311A3  OK                 01090300
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01090400
&ZMS                  SETC  '"LOCKOPER'         *KMEIA* MNOTE           01090500
&ZMS                  SETC  '&ZMS.=&LOCKOPER"'                          01090600
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01090700
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01090800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01090900
.ZG311A3              ANOP  ,                                           01091000
.*------------------------------------------------------------------    01091100
.***AG.KKCTL04 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01091200
.ZG312                ANOP  ,                                           01091300
&ZXLOCKOPER           SETC  'INPUT'     SET IN/OUTPUT                   01091400
                      AIF   (K'&XLOCKOPER GT 0).ZG312E  VALID ARG       01091500
                      AIF   (T'&LOCKOPER EQ 'O').ZG312D  OMITTED        01091600
&ZASYSLNDX            SETA  0                                           01091700
.ZG312A               ANOP  ,           POSITIONAL MACRO KEY            01091800
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                01091900
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG312C           01092000
&ZTLC                 SETC 'LOCKOPER'                                   01092100
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG312A  01092200
.ZG312B               ANOP  ,                                           01092300
&ZXLOCKOPER           SETC  ''          RESET IN/OUTPUT                 01092400
&ZMS                  SETC  'THE "LOCKOPER" KEY'  *KOPTA* MNOTE         01092500
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     01092600
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            01092700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01092800
                      AGO   .ZG312E                                     01092900
.ZG312C               ANOP  ,                                           01093000
&ZXLOCKOPER           SETC  ''          RESET IN/OUTPUT                 01093100
&ZMS                  SETC  '"LOCKOPER='        *KUKWA* MNOTE           01093200
&ZMS                  SETC  '&ZMS.&LOCKOPER"'                           01093300
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   01093400
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         01093500
&ZMS                  SETC  '&ZMS "SET",'                               01093600
&ZMS                  SETC  '&ZMS "RESET",'                             01093700
&ZMS                  SETC  '&ZMS "NOTHELD",'                           01093800
&ZMS                  SETC  '&ZMS "HELDBY",'                            01093900
&ZMS                  SETC  '&ZMS "TEST",'                              01094000
&ZMS                  SETC  '&ZMS OR "READNEXT".'                       01094100
                      MNOTE 8,' &ZMS '                                  01094200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01094300
                      AGO   .ZG312E                                     01094400
.ZG312D               ANOP  ,                                           01094500
&XLOCKOPER            SETC  'SET'       SET DEFAULT KEYWORD             01094600
.ZG312E               ANOP  ,                                           01094700
.*------------------------------------------------------------------    01094800
.***AG.KKCTL06 VALUE, OPT RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL       01094900
                      AIF   (K'&LOCKINDEX(1) GT 0).ZG312F  KEY          01095000
                      AIF   (K'&LOCKOPER(1) LE 0).ZG312G  PARM          01095100
&ZMS                  SETC  '"LOCKOPER'         *KDEPA* MNOTE           01095200
&ZMS                  SETC  '&ZMS.=&LOCKOPER"'                          01095300
&ZMS                  SETC  '&ZMS CAN ONLY BE SPECIFIED IF'             01095400
&ZMS                  SETC  '&ZMS '                                     01095500
&ZMS                  SETC  '&ZMS "LOCKINDEX"'                          01095600
                      MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                01095700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01095800
                      AGO   .ZG312G                                     01095900
.*                                                                      01096000
.ZG312F               ANOP  ,                                           01096100
                      AIF   (K'&LOCKOPER(1) GT 0).ZG312G  PARM          01096200
&ZXLOCKOPER           SETC  ''          RESET IN/OUTPUT                 01096300
&XLOCKOPER            SETC  ''          ENSURE NULL KEYWORD             01096400
&ZMS                  SETC  'WHEN "LOCKINDEX" IS SPECIFIED, THE'        01096500
&ZMS                  SETC  '&ZMS "LOCKOPER" KEY AND ITS'               01096600
&ZMS                  SETC  '&ZMS ARGUMENT ARE REQUIRED.'               01096700
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         01096800
&ZMS                  SETC  '&ZMS "SET",'                               01096900
&ZMS                  SETC  '&ZMS "RESET",'                             01097000
&ZMS                  SETC  '&ZMS "NOTHELD",'                           01097100
&ZMS                  SETC  '&ZMS "HELDBY",'                            01097200
&ZMS                  SETC  '&ZMS "TEST",'                              01097300
&ZMS                  SETC  '&ZMS OR "READNEXT".'                       01097400
                      MNOTE 8,' &ZMS '                                  01097500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01097600
.ZG312G               ANOP  ,                                           01097700
.*----------------------------------------------------------------***   01097800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     01097900
                      AIF   (N'&LOCKCOMP LE 1).ZG314A  CK NUM           01098000
&ZMS                  SETC  '"LOCKCOMP='        *KPOSA* MNOTE           01098100
&ZMS                  SETC  '&ZMS.&LOCKCOMP"'                           01098200
&ZMS                  SETC  '&ZMS "LOCKCOMP"'                           01098300
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01098400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01098500
.ZG314A               ANOP  ,                                           01098600
.*-------------------------------------------------------------------   01098700
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         01098800
&XLOCKCOMP            SETC  'NO_LOCKCOMP'       SET DEFAULT             01098900
                      AIF   (K'&LOCKCOMP(1) LE 0).ZG314C  PARM          01099000
&XLOCKCOMP            SETC  '&LOCKCOMP(1)'      SET XVARIABLE           01099100
                      AIF   (N'&LOCKCOMP GT 1).ZG314B  MULTI PARMS      01099200
&XLOCKCOMP            SETC  '&LOCKCOMP'         SET XVARIABLE           01099300
.ZG314B               AIF   (K'&LOCKINDEX(1) GT 0).ZG314C  KEY          01099400
&ZMS                  SETC  '"LOCKCOMP'         *KDEPA* MNOTE           01099500
&ZMS                  SETC  '&ZMS.=&LOCKCOMP"'                          01099600
&ZMS                  SETC  '&ZMS CAN ONLY BE SPECIFIED IF'             01099700
&ZMS                  SETC  '&ZMS '                                     01099800
&ZMS                  SETC  '&ZMS "LOCKINDEX"'                          01099900
                      MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                01100000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01100100
.ZG314C               ANOP  ,                                           01100200
&ZXLOCKCOMP           SETC  'INPUT'     SET IN/OUTPUT                   01100300
.*-------------------------------------------------------------------   01100400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01100500
                      AIF   (K'&ZXLOCKCOMP LE 0).ZG314R  NOT I/O        01100600
         AIF   ('&XLOCKCOMP' EQ 'NO_LOCKCOMP').ZG314R                   01100700
                      AIF   ('&XLOCKCOMP'(1,1) NE '(').ZG314R           01100800
&ZCGPR                SETC  '&XLOCKCOMP'(2,K'&XLOCKCOMP-2)              01100900
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG314P               01101000
                      AIF   (K'&ZCGPR GT 2).ZG314Q                      01101100
                      AIF   ('&ZCGPR' EQ '0').ZG314Q                    01101200
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01101300
                      AIF   (T'&ZCGPR NE 'N').ZG314Q  INVALID REG NAME  01101400
.ZG314P               ANOP  ,                                           01101500
                      AIF   (T'&ZCGPR NE 'N').ZG314R  NON NUMERIC       01101600
                      AIF   ('&ZCGPR' LT '2').ZG314Q                    01101700
                      AIF   ('&ZCGPR' LE '12').ZG314R                   01101800
.ZG314Q               ANOP  ,                                           01101900
&ZMS                  SETC  '"LOCKCOMP='        *KGPRA* MNOTE           01102000
&ZMS                  SETC  '&ZMS.&LOCKCOMP"'                           01102100
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01102200
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01102300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01102400
.ZG314R               ANOP  ,                                           01102500
.*------------------------------------------------------------------    01102600
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01102700
&XMODE                SETC  ''          INITIALIZE XVARIABLE            01102800
.*-------------------------------------------------------------------   01102900
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01103000
.ZG319                ANOP  ,                                           01103100
                      AIF   (K'&MODE(1) LE 0).ZG319A                    01103200
&ZTLC                 SETC 'SYNCSUSPEND'                                01103300
                      AIF   ('&MODE(1)' NE '&ZTLC').ZG320               01103400
&XMODE                SETC  'SYNCSUSPEND'       SET KEYWORD             01103500
                      AIF   (N'&MODE LE 1).ZG319A  CK NUM               01103600
&ZMS                  SETC  '"MODE='    *KPOSA* MNOTE                   01103700
&ZMS                  SETC  '&ZMS.&MODE"'                               01103800
&ZMS                  SETC  '&ZMS "MODE"'                               01103900
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01104000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01104100
.ZG319A               ANOP  ,                                           01104200
.*------------------------------------------------------------------    01104300
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01104400
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01104500
.ZG319A0              AIF   (K'&REQECB LE 0).ZG319A1  OK                01104600
&ZCVAL                SETC '&ZCVAL REQECB'      INCORRECT KEY USED      01104700
.ZG319A1              AIF   (K'&REQDATA LE 0).ZG319A2  OK               01104800
&ZCVAL                SETC '&ZCVAL REQDATA'     INCORRECT KEY USED      01104900
.ZG319A2              AIF   (K'&REQTOKEN LE 0).ZG319A3  OK              01105000
&ZCVAL                SETC '&ZCVAL REQTOKEN'    INCORRECT KEY USED      01105100
.ZG319A3              AIF   (K'&ZCVAL LE 0).ZG319A4  OK                 01105200
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01105300
&ZMS                  SETC  '"MODE'     *KMEIA* MNOTE                   01105400
&ZMS                  SETC  '&ZMS.=&MODE"'                              01105500
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01105600
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01105700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01105800
.ZG319A4              ANOP  ,                                           01105900
.*-------------------------------------------------------------------   01106000
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01106100
.ZG320                ANOP  ,                                           01106200
&ZTLC                 SETC 'SYNCECB'                                    01106300
                      AIF   ('&MODE(1)' NE '&ZTLC').ZG324               01106400
&XMODE                SETC  'SYNCECB'   SET KEYWORD                     01106500
                      AIF   (N'&MODE LE 1).ZG320A  CK NUM               01106600
&ZMS                  SETC  '"MODE='    *KPOSA* MNOTE                   01106700
&ZMS                  SETC  '&ZMS.&MODE"'                               01106800
&ZMS                  SETC  '&ZMS "MODE"'                               01106900
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01107000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01107100
.ZG320A               ANOP  ,                                           01107200
.*------------------------------------------------------------------    01107300
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01107400
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01107500
.ZG320A0              AIF   (K'&REQDATA LE 0).ZG320A1  OK               01107600
&ZCVAL                SETC '&ZCVAL REQDATA'     INCORRECT KEY USED      01107700
.ZG320A1              AIF   (K'&REQTOKEN LE 0).ZG320A2  OK              01107800
&ZCVAL                SETC '&ZCVAL REQTOKEN'    INCORRECT KEY USED      01107900
.ZG320A2              AIF   (K'&ZCVAL LE 0).ZG320A3  OK                 01108000
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01108100
&ZMS                  SETC  '"MODE'     *KMEIA* MNOTE                   01108200
&ZMS                  SETC  '&ZMS.=&MODE"'                              01108300
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01108400
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01108500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01108600
.ZG320A3              ANOP  ,                                           01108700
.*----------------------------------------------------------------***   01108800
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 01108900
                      AIF   (N'&REQECB LE 1).ZG322A  CK NUM             01109000
&ZMS                  SETC  '"REQECB='  *KPOSA* MNOTE                   01109100
&ZMS                  SETC  '&ZMS.&REQECB"'                             01109200
&ZMS                  SETC  '&ZMS "REQECB"'                             01109300
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01109400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01109500
.ZG322A               ANOP  ,                                           01109600
.*-------------------------------------------------------------------   01109700
.***AG.KXVAR06 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     01109800
&ZXREQECB             SETC  'INPUT'     SET IN/OUTPUT                   01109900
&XREQECB              SETC  '&REQECB(1)'        SET XVARIABLE           01110000
                      AIF   (N'&REQECB GT 1).ZG322B  MULTI PARMS        01110100
&XREQECB              SETC  '&REQECB'   SET XVARIABLE                   01110200
.ZG322B               AIF   (K'&REQECB(1) GT 0).ZG322C                  01110300
&ZXREQECB             SETC  ''          RESET IN/OUTPUT                 01110400
&ZMS                  SETC  'WHEN "SYNCECB" IS SPECIFIED'  *KRQDA*      01110500
&ZMS                  SETC  '&ZMS , "REQECB" KEY AND ITS'               01110600
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            01110700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01110800
.ZG322C               ANOP  ,                                           01110900
.*-------------------------------------------------------------------   01111000
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                01111100
                      AIF   (K'&ZXREQECB LE 0).ZG322R  NOT I/O          01111200
                      AIF   ('&XREQECB'(1,1) NE '(').ZG322R             01111300
&ZCGPR                SETC  '&XREQECB'(2,K'&XREQECB-2)                  01111400
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG322P               01111500
                      AIF   (K'&ZCGPR GT 2).ZG322Q                      01111600
                      AIF   ('&ZCGPR' EQ '0').ZG322Q                    01111700
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01111800
                      AIF   (T'&ZCGPR NE 'N').ZG322Q  INVALID REG NAME  01111900
.ZG322P               ANOP  ,                                           01112000
                      AIF   (T'&ZCGPR NE 'N').ZG322R  NON NUMERIC       01112100
                      AIF   ('&ZCGPR' LT '2').ZG322Q                    01112200
                      AIF   ('&ZCGPR' LE '12').ZG322R                   01112300
.ZG322Q               ANOP  ,                                           01112400
&ZMS                  SETC  '"REQECB='  *KGPRA* MNOTE                   01112500
&ZMS                  SETC  '&ZMS.&REQECB"'                             01112600
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01112700
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01112800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01112900
.ZG322R               ANOP  ,                                           01113000
.*-------------------------------------------------------------------   01113100
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01113200
.ZG324                ANOP  ,                                           01113300
&ZTLC                 SETC 'SYNCEXIT'                                   01113400
                      AIF   ('&MODE(1)' NE '&ZTLC').ZG328               01113500
&XMODE                SETC  'SYNCEXIT'  SET KEYWORD                     01113600
                      AIF   (N'&MODE LE 1).ZG324A  CK NUM               01113700
&ZMS                  SETC  '"MODE='    *KPOSA* MNOTE                   01113800
&ZMS                  SETC  '&ZMS.&MODE"'                               01113900
&ZMS                  SETC  '&ZMS "MODE"'                               01114000
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01114100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01114200
.ZG324A               ANOP  ,                                           01114300
.*------------------------------------------------------------------    01114400
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01114500
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01114600
.ZG324A0              AIF   (K'&REQECB LE 0).ZG324A1  OK                01114700
&ZCVAL                SETC '&ZCVAL REQECB'      INCORRECT KEY USED      01114800
.ZG324A1              AIF   (K'&REQTOKEN LE 0).ZG324A2  OK              01114900
&ZCVAL                SETC '&ZCVAL REQTOKEN'    INCORRECT KEY USED      01115000
.ZG324A2              AIF   (K'&ZCVAL LE 0).ZG324A3  OK                 01115100
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01115200
&ZMS                  SETC  '"MODE'     *KMEIA* MNOTE                   01115300
&ZMS                  SETC  '&ZMS.=&MODE"'                              01115400
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01115500
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01115600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01115700
.ZG324A3              ANOP  ,                                           01115800
.*----------------------------------------------------------------***   01115900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     01116000
                      AIF   (N'&REQDATA LE 1).ZG326A  CK NUM            01116100
&ZMS                  SETC  '"REQDATA='         *KPOSA* MNOTE           01116200
&ZMS                  SETC  '&ZMS.&REQDATA"'                            01116300
&ZMS                  SETC  '&ZMS "REQDATA"'                            01116400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01116500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01116600
.ZG326A               ANOP  ,                                           01116700
.*-------------------------------------------------------------------   01116800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         01116900
&ZXREQDATA            SETC  'INPUT'     SET IN/OUTPUT                   01117000
&XREQDATA             SETC  'NO_REQDATA'                                01117100
                      AIF   (K'&REQDATA(1) LE 0).ZG326B  PARM           01117200
&XREQDATA             SETC  '&REQDATA(1)'       SET XVARIABLE           01117300
                      AIF   (N'&REQDATA GT 1).ZG326B  MULTI PARMS       01117400
&XREQDATA             SETC  '&REQDATA'  SET XVARIABLE                   01117500
.ZG326B               ANOP  ,                                           01117600
.*-------------------------------------------------------------------   01117700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01117800
                      AIF   (K'&ZXREQDATA LE 0).ZG326R  NOT I/O         01117900
         AIF   ('&XREQDATA' EQ 'NO_REQDATA').ZG326R                     01118000
                      AIF   ('&XREQDATA'(1,1) NE '(').ZG326R            01118100
&ZCGPR                SETC  '&XREQDATA'(2,K'&XREQDATA-2)                01118200
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG326P               01118300
                      AIF   (K'&ZCGPR GT 2).ZG326Q                      01118400
                      AIF   ('&ZCGPR' EQ '0').ZG326Q                    01118500
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01118600
                      AIF   (T'&ZCGPR NE 'N').ZG326Q  INVALID REG NAME  01118700
.ZG326P               ANOP  ,                                           01118800
                      AIF   (T'&ZCGPR NE 'N').ZG326R  NON NUMERIC       01118900
                      AIF   ('&ZCGPR' LT '2').ZG326Q                    01119000
                      AIF   ('&ZCGPR' LE '12').ZG326R                   01119100
.ZG326Q               ANOP  ,                                           01119200
&ZMS                  SETC  '"REQDATA='         *KGPRA* MNOTE           01119300
&ZMS                  SETC  '&ZMS.&REQDATA"'                            01119400
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01119500
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01119600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01119700
.ZG326R               ANOP  ,                                           01119800
.*-------------------------------------------------------------------   01119900
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01120000
.ZG328                ANOP  ,                                           01120100
&ZTLC                 SETC 'SYNCTOKEN'                                  01120200
                      AIF   ('&MODE(1)' NE '&ZTLC').ZG332               01120300
&XMODE                SETC  'SYNCTOKEN'         SET KEYWORD             01120400
                      AIF   (N'&MODE LE 1).ZG328A  CK NUM               01120500
&ZMS                  SETC  '"MODE='    *KPOSA* MNOTE                   01120600
&ZMS                  SETC  '&ZMS.&MODE"'                               01120700
&ZMS                  SETC  '&ZMS "MODE"'                               01120800
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01120900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01121000
.ZG328A               ANOP  ,                                           01121100
.*------------------------------------------------------------------    01121200
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01121300
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01121400
.ZG328A0              AIF   (K'&REQECB LE 0).ZG328A1  OK                01121500
&ZCVAL                SETC '&ZCVAL REQECB'      INCORRECT KEY USED      01121600
.ZG328A1              AIF   (K'&REQDATA LE 0).ZG328A2  OK               01121700
&ZCVAL                SETC '&ZCVAL REQDATA'     INCORRECT KEY USED      01121800
.ZG328A2              AIF   (K'&ZCVAL LE 0).ZG328A3  OK                 01121900
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01122000
&ZMS                  SETC  '"MODE'     *KMEIA* MNOTE                   01122100
&ZMS                  SETC  '&ZMS.=&MODE"'                              01122200
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01122300
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01122400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01122500
.ZG328A3              ANOP  ,                                           01122600
.*----------------------------------------------------------------***   01122700
.***AG.KXVAR05 NAME, OPT RQD OUTPUT, KEYS -XVARIABLE KEY                01122800
                      AIF   (N'&REQTOKEN LE 1).ZG330A  CK NUM           01122900
&ZMS                  SETC  '"REQTOKEN='        *KPOSA* MNOTE           01123000
&ZMS                  SETC  '&ZMS.&REQTOKEN"'                           01123100
&ZMS                  SETC  '&ZMS "REQTOKEN"'                           01123200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01123300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01123400
.ZG330A               ANOP  ,                                           01123500
.*-------------------------------------------------------------------   01123600
.***AG.KXVAR06 NAME, OPT RQD OUTPUT, KEYS -XVARIABLE                    01123700
&ZXREQTOKEN           SETC  'OUTPUT'    SET IN/OUTPUT                   01123800
&XREQTOKEN            SETC  '&REQTOKEN(1)'      SET XVARIABLE           01123900
                      AIF   (N'&REQTOKEN GT 1).ZG330B  MULTI PARMS      01124000
&XREQTOKEN            SETC  '&REQTOKEN'         SET XVARIABLE           01124100
.ZG330B               AIF   (K'&REQTOKEN(1) GT 0).ZG330C                01124200
&ZXREQTOKEN           SETC  ''          RESET IN/OUTPUT                 01124300
&ZMS                  SETC  'WHEN "SYNCTOKEN" IS SPECIFIED'  *KRQDA*    01124400
&ZMS                  SETC  '&ZMS , "REQTOKEN" KEY AND ITS'             01124500
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            01124600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01124700
.ZG330C               ANOP  ,                                           01124800
.*-------------------------------------------------------------------   01124900
.***AG.KCK02 NAME, OPT RQD OUTPUT, KEYS -GPR OUT OF RANGE               01125000
                      AIF   (K'&ZXREQTOKEN LE 0).ZG330R  NOT I/O        01125100
                      AIF   ('&XREQTOKEN'(1,1) NE '(').ZG330R           01125200
&ZCGPR                SETC  '&XREQTOKEN'(2,K'&XREQTOKEN-2)              01125300
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG330P               01125400
                      AIF   (K'&ZCGPR GT 2).ZG330Q                      01125500
                      AIF   ('&ZCGPR' EQ '0').ZG330Q                    01125600
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01125700
                      AIF   (T'&ZCGPR NE 'N').ZG330Q  INVALID REG NAME  01125800
.ZG330P               ANOP  ,                                           01125900
                      AIF   (T'&ZCGPR NE 'N').ZG330R  NON NUMERIC       01126000
                      AIF   ('&ZCGPR' LT '2').ZG330Q                    01126100
                      AIF   ('&ZCGPR' LE '12').ZG330R                   01126200
.ZG330Q               ANOP  ,                                           01126300
&ZMS                  SETC  '"REQTOKEN='        *KGPRA* MNOTE           01126400
&ZMS                  SETC  '&ZMS.&REQTOKEN"'                           01126500
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01126600
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01126700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01126800
.ZG330R               ANOP  ,                                           01126900
.*-------------------------------------------------------------------   01127000
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01127100
.ZG332                ANOP  ,                                           01127200
&ZTLC                 SETC 'ASYNCECB'                                   01127300
                      AIF   ('&MODE(1)' NE '&ZTLC').ZG336               01127400
&XMODE                SETC  'ASYNCECB'  SET KEYWORD                     01127500
                      AIF   (N'&MODE LE 1).ZG332A  CK NUM               01127600
&ZMS                  SETC  '"MODE='    *KPOSA* MNOTE                   01127700
&ZMS                  SETC  '&ZMS.&MODE"'                               01127800
&ZMS                  SETC  '&ZMS "MODE"'                               01127900
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01128000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01128100
.ZG332A               ANOP  ,                                           01128200
.*------------------------------------------------------------------    01128300
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01128400
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01128500
.ZG332A0              AIF   (K'&REQDATA LE 0).ZG332A1  OK               01128600
&ZCVAL                SETC '&ZCVAL REQDATA'     INCORRECT KEY USED      01128700
.ZG332A1              AIF   (K'&REQTOKEN LE 0).ZG332A2  OK              01128800
&ZCVAL                SETC '&ZCVAL REQTOKEN'    INCORRECT KEY USED      01128900
.ZG332A2              AIF   (K'&ZCVAL LE 0).ZG332A3  OK                 01129000
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01129100
&ZMS                  SETC  '"MODE'     *KMEIA* MNOTE                   01129200
&ZMS                  SETC  '&ZMS.=&MODE"'                              01129300
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01129400
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01129500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01129600
.ZG332A3              ANOP  ,                                           01129700
.*----------------------------------------------------------------***   01129800
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 01129900
                      AIF   (N'&REQECB LE 1).ZG334A  CK NUM             01130000
&ZMS                  SETC  '"REQECB='  *KPOSA* MNOTE                   01130100
&ZMS                  SETC  '&ZMS.&REQECB"'                             01130200
&ZMS                  SETC  '&ZMS "REQECB"'                             01130300
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01130400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01130500
.ZG334A               ANOP  ,                                           01130600
.*-------------------------------------------------------------------   01130700
.***AG.KXVAR06 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     01130800
&ZXREQECB             SETC  'INPUT'     SET IN/OUTPUT                   01130900
&XREQECB              SETC  '&REQECB(1)'        SET XVARIABLE           01131000
                      AIF   (N'&REQECB GT 1).ZG334B  MULTI PARMS        01131100
&XREQECB              SETC  '&REQECB'   SET XVARIABLE                   01131200
.ZG334B               AIF   (K'&REQECB(1) GT 0).ZG334C                  01131300
&ZXREQECB             SETC  ''          RESET IN/OUTPUT                 01131400
&ZMS                  SETC  'WHEN "ASYNCECB" IS SPECIFIED'  *KRQDA*     01131500
&ZMS                  SETC  '&ZMS , "REQECB" KEY AND ITS'               01131600
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            01131700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01131800
.ZG334C               ANOP  ,                                           01131900
.*-------------------------------------------------------------------   01132000
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                01132100
                      AIF   (K'&ZXREQECB LE 0).ZG334R  NOT I/O          01132200
                      AIF   ('&XREQECB'(1,1) NE '(').ZG334R             01132300
&ZCGPR                SETC  '&XREQECB'(2,K'&XREQECB-2)                  01132400
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG334P               01132500
                      AIF   (K'&ZCGPR GT 2).ZG334Q                      01132600
                      AIF   ('&ZCGPR' EQ '0').ZG334Q                    01132700
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01132800
                      AIF   (T'&ZCGPR NE 'N').ZG334Q  INVALID REG NAME  01132900
.ZG334P               ANOP  ,                                           01133000
                      AIF   (T'&ZCGPR NE 'N').ZG334R  NON NUMERIC       01133100
                      AIF   ('&ZCGPR' LT '2').ZG334Q                    01133200
                      AIF   ('&ZCGPR' LE '12').ZG334R                   01133300
.ZG334Q               ANOP  ,                                           01133400
&ZMS                  SETC  '"REQECB='  *KGPRA* MNOTE                   01133500
&ZMS                  SETC  '&ZMS.&REQECB"'                             01133600
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01133700
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01133800
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01133900
.ZG334R               ANOP  ,                                           01134000
.*-------------------------------------------------------------------   01134100
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01134200
.ZG336                ANOP  ,                                           01134300
&ZTLC                 SETC 'ASYNCEXIT'                                  01134400
                      AIF   ('&MODE(1)' NE '&ZTLC').ZG340               01134500
&XMODE                SETC  'ASYNCEXIT'         SET KEYWORD             01134600
                      AIF   (N'&MODE LE 1).ZG336A  CK NUM               01134700
&ZMS                  SETC  '"MODE='    *KPOSA* MNOTE                   01134800
&ZMS                  SETC  '&ZMS.&MODE"'                               01134900
&ZMS                  SETC  '&ZMS "MODE"'                               01135000
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01135100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01135200
.ZG336A               ANOP  ,                                           01135300
.*------------------------------------------------------------------    01135400
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01135500
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01135600
.ZG336A0              AIF   (K'&REQECB LE 0).ZG336A1  OK                01135700
&ZCVAL                SETC '&ZCVAL REQECB'      INCORRECT KEY USED      01135800
.ZG336A1              AIF   (K'&REQTOKEN LE 0).ZG336A2  OK              01135900
&ZCVAL                SETC '&ZCVAL REQTOKEN'    INCORRECT KEY USED      01136000
.ZG336A2              AIF   (K'&ZCVAL LE 0).ZG336A3  OK                 01136100
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01136200
&ZMS                  SETC  '"MODE'     *KMEIA* MNOTE                   01136300
&ZMS                  SETC  '&ZMS.=&MODE"'                              01136400
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01136500
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01136600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01136700
.ZG336A3              ANOP  ,                                           01136800
.*----------------------------------------------------------------***   01136900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     01137000
                      AIF   (N'&REQDATA LE 1).ZG338A  CK NUM            01137100
&ZMS                  SETC  '"REQDATA='         *KPOSA* MNOTE           01137200
&ZMS                  SETC  '&ZMS.&REQDATA"'                            01137300
&ZMS                  SETC  '&ZMS "REQDATA"'                            01137400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01137500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01137600
.ZG338A               ANOP  ,                                           01137700
.*-------------------------------------------------------------------   01137800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         01137900
&ZXREQDATA            SETC  'INPUT'     SET IN/OUTPUT                   01138000
&XREQDATA             SETC  'NO_REQDATA'                                01138100
                      AIF   (K'&REQDATA(1) LE 0).ZG338B  PARM           01138200
&XREQDATA             SETC  '&REQDATA(1)'       SET XVARIABLE           01138300
                      AIF   (N'&REQDATA GT 1).ZG338B  MULTI PARMS       01138400
&XREQDATA             SETC  '&REQDATA'  SET XVARIABLE                   01138500
.ZG338B               ANOP  ,                                           01138600
.*-------------------------------------------------------------------   01138700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01138800
                      AIF   (K'&ZXREQDATA LE 0).ZG338R  NOT I/O         01138900
         AIF   ('&XREQDATA' EQ 'NO_REQDATA').ZG338R                     01139000
                      AIF   ('&XREQDATA'(1,1) NE '(').ZG338R            01139100
&ZCGPR                SETC  '&XREQDATA'(2,K'&XREQDATA-2)                01139200
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG338P               01139300
                      AIF   (K'&ZCGPR GT 2).ZG338Q                      01139400
                      AIF   ('&ZCGPR' EQ '0').ZG338Q                    01139500
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01139600
                      AIF   (T'&ZCGPR NE 'N').ZG338Q  INVALID REG NAME  01139700
.ZG338P               ANOP  ,                                           01139800
                      AIF   (T'&ZCGPR NE 'N').ZG338R  NON NUMERIC       01139900
                      AIF   ('&ZCGPR' LT '2').ZG338Q                    01140000
                      AIF   ('&ZCGPR' LE '12').ZG338R                   01140100
.ZG338Q               ANOP  ,                                           01140200
&ZMS                  SETC  '"REQDATA='         *KGPRA* MNOTE           01140300
&ZMS                  SETC  '&ZMS.&REQDATA"'                            01140400
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01140500
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01140600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01140700
.ZG338R               ANOP  ,                                           01140800
.*-------------------------------------------------------------------   01140900
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01141000
.ZG340                ANOP  ,                                           01141100
&ZTLC                 SETC 'ASYNCTOKEN'                                 01141200
                      AIF   ('&MODE(1)' NE '&ZTLC').ZG344               01141300
&XMODE                SETC  'ASYNCTOKEN'        SET KEYWORD             01141400
                      AIF   (N'&MODE LE 1).ZG340A  CK NUM               01141500
&ZMS                  SETC  '"MODE='    *KPOSA* MNOTE                   01141600
&ZMS                  SETC  '&ZMS.&MODE"'                               01141700
&ZMS                  SETC  '&ZMS "MODE"'                               01141800
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01141900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01142000
.ZG340A               ANOP  ,                                           01142100
.*------------------------------------------------------------------    01142200
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01142300
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01142400
.ZG340A0              AIF   (K'&REQECB LE 0).ZG340A1  OK                01142500
&ZCVAL                SETC '&ZCVAL REQECB'      INCORRECT KEY USED      01142600
.ZG340A1              AIF   (K'&REQDATA LE 0).ZG340A2  OK               01142700
&ZCVAL                SETC '&ZCVAL REQDATA'     INCORRECT KEY USED      01142800
.ZG340A2              AIF   (K'&ZCVAL LE 0).ZG340A3  OK                 01142900
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01143000
&ZMS                  SETC  '"MODE'     *KMEIA* MNOTE                   01143100
&ZMS                  SETC  '&ZMS.=&MODE"'                              01143200
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01143300
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01143400
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01143500
.ZG340A3              ANOP  ,                                           01143600
.*----------------------------------------------------------------***   01143700
.***AG.KXVAR05 NAME, OPT RQD OUTPUT, KEYS -XVARIABLE KEY                01143800
                      AIF   (N'&REQTOKEN LE 1).ZG342A  CK NUM           01143900
&ZMS                  SETC  '"REQTOKEN='        *KPOSA* MNOTE           01144000
&ZMS                  SETC  '&ZMS.&REQTOKEN"'                           01144100
&ZMS                  SETC  '&ZMS "REQTOKEN"'                           01144200
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01144300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01144400
.ZG342A               ANOP  ,                                           01144500
.*-------------------------------------------------------------------   01144600
.***AG.KXVAR06 NAME, OPT RQD OUTPUT, KEYS -XVARIABLE                    01144700
&ZXREQTOKEN           SETC  'OUTPUT'    SET IN/OUTPUT                   01144800
&XREQTOKEN            SETC  '&REQTOKEN(1)'      SET XVARIABLE           01144900
                      AIF   (N'&REQTOKEN GT 1).ZG342B  MULTI PARMS      01145000
&XREQTOKEN            SETC  '&REQTOKEN'         SET XVARIABLE           01145100
.ZG342B               AIF   (K'&REQTOKEN(1) GT 0).ZG342C                01145200
&ZXREQTOKEN           SETC  ''          RESET IN/OUTPUT                 01145300
&ZMS                  SETC  'WHEN "ASYNCTOKEN" IS SPECIFIED'  *KRQDA*   01145400
&ZMS                  SETC  '&ZMS , "REQTOKEN" KEY AND ITS'             01145500
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            01145600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01145700
.ZG342C               ANOP  ,                                           01145800
.*-------------------------------------------------------------------   01145900
.***AG.KCK02 NAME, OPT RQD OUTPUT, KEYS -GPR OUT OF RANGE               01146000
                      AIF   (K'&ZXREQTOKEN LE 0).ZG342R  NOT I/O        01146100
                      AIF   ('&XREQTOKEN'(1,1) NE '(').ZG342R           01146200
&ZCGPR                SETC  '&XREQTOKEN'(2,K'&XREQTOKEN-2)              01146300
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG342P               01146400
                      AIF   (K'&ZCGPR GT 2).ZG342Q                      01146500
                      AIF   ('&ZCGPR' EQ '0').ZG342Q                    01146600
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01146700
                      AIF   (T'&ZCGPR NE 'N').ZG342Q  INVALID REG NAME  01146800
.ZG342P               ANOP  ,                                           01146900
                      AIF   (T'&ZCGPR NE 'N').ZG342R  NON NUMERIC       01147000
                      AIF   ('&ZCGPR' LT '2').ZG342Q                    01147100
                      AIF   ('&ZCGPR' LE '12').ZG342R                   01147200
.ZG342Q               ANOP  ,                                           01147300
&ZMS                  SETC  '"REQTOKEN='        *KGPRA* MNOTE           01147400
&ZMS                  SETC  '&ZMS.&REQTOKEN"'                           01147500
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01147600
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01147700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01147800
.ZG342R               ANOP  ,                                           01147900
.*-------------------------------------------------------------------   01148000
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01148100
.ZG344                ANOP  ,                                           01148200
&ZTLC                 SETC 'ASYNCNORESPONSE'                            01148300
                      AIF   ('&MODE(1)' NE '&ZTLC').ZG345               01148400
&XMODE                SETC  'ASYNCNORESPONSE'   SET KEYWORD             01148500
                      AIF   (N'&MODE LE 1).ZG344A  CK NUM               01148600
&ZMS                  SETC  '"MODE='    *KPOSA* MNOTE                   01148700
&ZMS                  SETC  '&ZMS.&MODE"'                               01148800
&ZMS                  SETC  '&ZMS "MODE"'                               01148900
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01149000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01149100
.ZG344A               ANOP  ,                                           01149200
.*------------------------------------------------------------------    01149300
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01149400
&ZCVAL                SETC ''           CLEAR ERROR KEY ACCUMULATOR     01149500
.ZG344A0              AIF   (K'&REQECB LE 0).ZG344A1  OK                01149600
&ZCVAL                SETC '&ZCVAL REQECB'      INCORRECT KEY USED      01149700
.ZG344A1              AIF   (K'&REQDATA LE 0).ZG344A2  OK               01149800
&ZCVAL                SETC '&ZCVAL REQDATA'     INCORRECT KEY USED      01149900
.ZG344A2              AIF   (K'&REQTOKEN LE 0).ZG344A3  OK              01150000
&ZCVAL                SETC '&ZCVAL REQTOKEN'    INCORRECT KEY USED      01150100
.ZG344A3              AIF   (K'&ZCVAL LE 0).ZG344A4  OK                 01150200
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)                       01150300
&ZMS                  SETC  '"MODE'     *KMEIA* MNOTE                   01150400
&ZMS                  SETC  '&ZMS.=&MODE"'                              01150500
&ZMS                  SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'        01150600
                      MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'        01150700
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01150800
.ZG344A4              ANOP  ,                                           01150900
.*------------------------------------------------------------------    01151000
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01151100
.ZG345                ANOP  ,                                           01151200
&ZXMODE               SETC  'INPUT'     SET IN/OUTPUT                   01151300
                      AIF   (K'&XMODE GT 0).ZG345E  VALID ARG           01151400
                      AIF   (T'&MODE EQ 'O').ZG345D  OMITTED            01151500
&ZASYSLNDX            SETA  0                                           01151600
.ZG345A               ANOP  ,           POSITIONAL MACRO KEY            01151700
&ZASYSLNDX            SETA  &ZASYSLNDX+1                                01151800
                      AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG345C           01151900
&ZTLC                 SETC 'MODE'                                       01152000
                      AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG345A  01152100
.ZG345B               ANOP  ,                                           01152200
&ZXMODE               SETC  ''          RESET IN/OUTPUT                 01152300
&ZMS                  SETC  'THE "MODE" KEY'    *KOPTA* MNOTE           01152400
&ZMS                  SETC  '&ZMS MUST CONTAIN ONE'                     01152500
                      MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'            01152600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01152700
                      AGO   .ZG345E                                     01152800
.ZG345C               ANOP  ,                                           01152900
&ZXMODE               SETC  ''          RESET IN/OUTPUT                 01153000
&ZMS                  SETC  '"MODE='    *KUKWA* MNOTE                   01153100
&ZMS                  SETC  '&ZMS.&MODE"'                               01153200
&ZMS                  SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '   01153300
&ZMS                  SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'         01153400
&ZMS                  SETC  '&ZMS "SYNCSUSPEND",'                       01153500
&ZMS                  SETC  '&ZMS "SYNCECB",'                           01153600
&ZMS                  SETC  '&ZMS "SYNCEXIT",'                          01153700
&ZMS                  SETC  '&ZMS "SYNCTOKEN",'                         01153800
&ZMS                  SETC  '&ZMS "ASYNCECB",'                          01153900
&ZMS                  SETC  '&ZMS "ASYNCEXIT",'                         01154000
&ZMS                  SETC  '&ZMS "ASYNCTOKEN",'                        01154100
&ZMS                  SETC  '&ZMS OR "ASYNCNORESPONSE".'                01154200
                      MNOTE 8,' &ZMS '                                  01154300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01154400
                      AGO   .ZG345E                                     01154500
.ZG345D               ANOP  ,                                           01154600
&XMODE                SETC  'SYNCSUSPEND'       SET DEFAULT KEYWORD     01154700
.ZG345E               ANOP  ,                                           01154800
.*----------------------------------------------------------------***   01154900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     01155000
                      AIF   (N'&ANSAREA LE 1).ZG347A  CK NUM            01155100
&ZMS                  SETC  '"ANSAREA='         *KPOSA* MNOTE           01155200
&ZMS                  SETC  '&ZMS.&ANSAREA"'                            01155300
&ZMS                  SETC  '&ZMS "ANSAREA"'                            01155400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01155500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01155600
.ZG347A               ANOP  ,                                           01155700
.*-------------------------------------------------------------------   01155800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         01155900
&ZXANSAREA            SETC  'INPUT'     SET IN/OUTPUT                   01156000
&XANSAREA             SETC  'NO_ANSAREA'                                01156100
                      AIF   (K'&ANSAREA(1) LE 0).ZG347B  PARM           01156200
&XANSAREA             SETC  '&ANSAREA(1)'       SET XVARIABLE           01156300
                      AIF   (N'&ANSAREA GT 1).ZG347B  MULTI PARMS       01156400
&XANSAREA             SETC  '&ANSAREA'  SET XVARIABLE                   01156500
.ZG347B               ANOP  ,                                           01156600
.*-------------------------------------------------------------------   01156700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01156800
                      AIF   (K'&ZXANSAREA LE 0).ZG347R  NOT I/O         01156900
         AIF   ('&XANSAREA' EQ 'NO_ANSAREA').ZG347R                     01157000
                      AIF   ('&XANSAREA'(1,1) NE '(').ZG347R            01157100
&ZCGPR                SETC  '&XANSAREA'(2,K'&XANSAREA-2)                01157200
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG347P               01157300
                      AIF   (K'&ZCGPR GT 2).ZG347Q                      01157400
                      AIF   ('&ZCGPR' EQ '0').ZG347Q                    01157500
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01157600
                      AIF   (T'&ZCGPR NE 'N').ZG347Q  INVALID REG NAME  01157700
.ZG347P               ANOP  ,                                           01157800
                      AIF   (T'&ZCGPR NE 'N').ZG347R  NON NUMERIC       01157900
                      AIF   ('&ZCGPR' LT '2').ZG347Q                    01158000
                      AIF   ('&ZCGPR' LE '12').ZG347R                   01158100
.ZG347Q               ANOP  ,                                           01158200
&ZMS                  SETC  '"ANSAREA='         *KGPRA* MNOTE           01158300
&ZMS                  SETC  '&ZMS.&ANSAREA"'                            01158400
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01158500
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01158600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01158700
.ZG347R               ANOP  ,                                           01158800
.*----------------------------------------------------------------***   01158900
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 01159000
                      AIF   (N'&ANSLEN LE 1).ZG349A  CK NUM             01159100
&ZMS                  SETC  '"ANSLEN='  *KPOSA* MNOTE                   01159200
&ZMS                  SETC  '&ZMS.&ANSLEN"'                             01159300
&ZMS                  SETC  '&ZMS "ANSLEN"'                             01159400
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01159500
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01159600
.ZG349A               ANOP  ,                                           01159700
.*-------------------------------------------------------------------   01159800
.***AG.KXVAR09 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     01159900
&ZXANSLEN             SETC  'INPUT'     SET IN/OUTPUT                   01160000
&XANSLEN              SETC  '&ANSLEN(1)'        SET XVARIABLE           01160100
                      AIF   (N'&ANSLEN GT 1).ZG349B  MULTI PARMS        01160200
&XANSLEN              SETC  '&ANSLEN'   SET XVARIABLE                   01160300
.ZG349B               AIF   (K'&ANSAREA(1) GT 0).ZG349C  KEY            01160400
                      AIF   (K'&ANSLEN(1) LE 0).ZG349D  PARM            01160500
&ZMS                  SETC  '"ANSLEN'   *KDEPA* MNOTE                   01160600
&ZMS                  SETC  '&ZMS.=&ANSLEN"'                            01160700
&ZMS                  SETC  '&ZMS CAN ONLY BE SPECIFIED IF'             01160800
&ZMS                  SETC  '&ZMS '                                     01160900
&ZMS                  SETC  '&ZMS "ANSAREA"'                            01161000
                      MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                01161100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01161200
                      AGO   .ZG349E                                     01161300
.*                                                                      01161400
.ZG349C               AIF   (K'&ANSLEN(1) GT 0).ZG349E  PARM            01161500
&ZXANSLEN             SETC  ''          RESET IN/OUTPUT                 01161600
&ZMS                  SETC  'WHEN "ANSAREA" IS SPECIFIED'  *KRQDA*      01161700
&ZMS                  SETC  '&ZMS , "ANSLEN" KEY AND ITS'               01161800
                      MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'            01161900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01162000
.ZG349D               ANOP  ,                                           01162100
&XANSLEN              SETC  'NO_ANSLEN'         SET DEFAULT             01162200
.ZG349E               ANOP  ,                                           01162300
.*-------------------------------------------------------------------   01162400
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                01162500
                      AIF   (K'&ZXANSLEN LE 0).ZG349R  NOT I/O          01162600
         AIF   ('&XANSLEN' EQ 'NO_ANSLEN').ZG349R                       01162700
                      AIF   ('&XANSLEN'(1,1) NE '(').ZG349R             01162800
&ZCGPR                SETC  '&XANSLEN'(2,K'&XANSLEN-2)                  01162900
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG349P               01163000
                      AIF   (K'&ZCGPR GT 2).ZG349Q                      01163100
                      AIF   ('&ZCGPR' EQ '0').ZG349Q                    01163200
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01163300
                      AIF   (T'&ZCGPR NE 'N').ZG349Q  INVALID REG NAME  01163400
.ZG349P               ANOP  ,                                           01163500
                      AIF   (T'&ZCGPR NE 'N').ZG349R  NON NUMERIC       01163600
                      AIF   ('&ZCGPR' LT '2').ZG349Q                    01163700
                      AIF   ('&ZCGPR' LE '12').ZG349R                   01163800
.ZG349Q               ANOP  ,                                           01163900
&ZMS                  SETC  '"ANSLEN='  *KGPRA* MNOTE                   01164000
&ZMS                  SETC  '&ZMS.&ANSLEN"'                             01164100
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01164200
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01164300
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01164400
.ZG349R               ANOP  ,                                           01164500
.*----------------------------------------------------------------***   01164600
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    01164700
                      AIF   (N'&RETCODE LE 1).ZG353A  CK NUM            01164800
&ZMS                  SETC  '"RETCODE='         *KPOSA* MNOTE           01164900
&ZMS                  SETC  '&ZMS.&RETCODE"'                            01165000
&ZMS                  SETC  '&ZMS "RETCODE"'                            01165100
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01165200
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01165300
.ZG353A               ANOP  ,                                           01165400
.*-------------------------------------------------------------------   01165500
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        01165600
                      AIF   (K'&RETCODE(1) LE 0).ZG353C  NO PARM        01165700
&ZXRETCODE            SETC  'OUTPUT'    SET OUTPUT                      01165800
&XRETCODE             SETC  '&RETCODE(1)'       SET XVARIABLE           01165900
                      AIF   (N'&RETCODE GT 1).ZG353C                    01166000
&XRETCODE             SETC  '&RETCODE'  SET XVARIABLE                   01166100
.ZG353C               ANOP  ,                                           01166200
.*-------------------------------------------------------------------   01166300
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01166400
                      AIF   (K'&ZXRETCODE LE 0).ZG353R  NOT I/O         01166500
                      AIF   ('&XRETCODE'(1,1) NE '(').ZG353R            01166600
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                01166700
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG353P               01166800
                      AIF   (K'&ZCGPR GT 2).ZG353Q                      01166900
                      AIF   ('&ZCGPR' EQ '0').ZG353Q                    01167000
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01167100
                      AIF   (T'&ZCGPR NE 'N').ZG353Q  INVALID REG NAME  01167200
.ZG353P               ANOP  ,                                           01167300
                      AIF   (T'&ZCGPR NE 'N').ZG353R  NON NUMERIC       01167400
                      AIF   ('&ZCGPR' LT '2').ZG353Q                    01167500
                      AIF   ('&ZCGPR' LE '12').ZG353R                   01167600
.ZG353Q               ANOP  ,                                           01167700
&ZMS                  SETC  '"RETCODE='         *KGPRA* MNOTE           01167800
&ZMS                  SETC  '&ZMS.&RETCODE"'                            01167900
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01168000
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01168100
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01168200
.ZG353R               ANOP  ,                                           01168300
.*----------------------------------------------------------------***   01168400
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    01168500
                      AIF   (N'&RSNCODE LE 1).ZG356A  CK NUM            01168600
&ZMS                  SETC  '"RSNCODE='         *KPOSA* MNOTE           01168700
&ZMS                  SETC  '&ZMS.&RSNCODE"'                            01168800
&ZMS                  SETC  '&ZMS "RSNCODE"'                            01168900
                      MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'         01169000
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01169100
.ZG356A               ANOP  ,                                           01169200
.*-------------------------------------------------------------------   01169300
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        01169400
                      AIF   (K'&RSNCODE(1) LE 0).ZG356C  NO PARM        01169500
&ZXRSNCODE            SETC  'OUTPUT'    SET OUTPUT                      01169600
&XRSNCODE             SETC  '&RSNCODE(1)'       SET XVARIABLE           01169700
                      AIF   (N'&RSNCODE GT 1).ZG356C                    01169800
&XRSNCODE             SETC  '&RSNCODE'  SET XVARIABLE                   01169900
.ZG356C               ANOP  ,                                           01170000
.*-------------------------------------------------------------------   01170100
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01170200
                      AIF   (K'&ZXRSNCODE LE 0).ZG356R  NOT I/O         01170300
                      AIF   ('&XRSNCODE'(1,1) NE '(').ZG356R            01170400
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                01170500
                      AIF   ('&ZCGPR'(1,1) NE '0').ZG356P               01170600
                      AIF   (K'&ZCGPR GT 2).ZG356Q                      01170700
                      AIF   ('&ZCGPR' EQ '0').ZG356Q                    01170800
&ZCGPR                SETC  '&ZCGPR'(2,1)                               01170900
                      AIF   (T'&ZCGPR NE 'N').ZG356Q  INVALID REG NAME  01171000
.ZG356P               ANOP  ,                                           01171100
                      AIF   (T'&ZCGPR NE 'N').ZG356R  NON NUMERIC       01171200
                      AIF   ('&ZCGPR' LT '2').ZG356Q                    01171300
                      AIF   ('&ZCGPR' LE '12').ZG356R                   01171400
.ZG356Q               ANOP  ,                                           01171500
&ZMS                  SETC  '"RSNCODE='         *KGPRA* MNOTE           01171600
&ZMS                  SETC  '&ZMS.&RSNCODE"'                            01171700
&ZMS                  SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'   01171800
                      MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'            01171900
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01172000
.ZG356R               ANOP  ,                                           01172100
.******************************************************************     01172200
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        01172300
.******************************************************************     01172400
                      ACTR  10000                                       01172500
.*-------------------------------------------------------------------   01172600
.***AH.P03 EXTRA POSITIONALS AMONG NON-X KEYS                           01172700
&ZCVAL                SETC  ''          ERROR FIELD                     01172800
&ZAWRK                SETA  0           POSITIONAL COUNTER              01172900
&ZASYSLNDX            SETA  0           NON-X KEY COUNTER               01173000
.ZGLIST2              ANOP  ,                                           01173100
&ZASYSLNDX            SETA  &ZASYSLNDX+1        NEXT NON-X KEY          01173200
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZGLIST3  DONE                 01173300
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZGLIST2          01173400
&ZAWRK                SETA  &ZAWRK+1    NEXT POSITIONAL                 01173500
                      AIF   (&ZAWRK LE 0).ZGLIST2                       01173600
&ZCVAL                SETC '&ZCVAL,&SYSLIST(&ZASYSLNDX)'  EXTRA         01173700
                      AGO   .ZGLIST2                                    01173800
.*                                                                      01173900
.ZGLIST3  AIF  (K'&ZCVAL LE 0).ZGLISTX                                  01174000
&ZCVAL                SETC '&ZCVAL'(2,K'&ZCVAL-1)  STRIP COMMA          01174100
&ZMS                  SETC  'POSITIONAL ARGUMENT(S),'  *PPOSA* MNOTE    01174200
&ZMS                  SETC  '&ZMS "&ZCVAL"'                             01174300
&ZMS                  SETC  '&ZMS CANNOT BE USED.'                      01174400
&ZMS                  SETC  '&ZMS NO POSITIONAL ARGUMENTS'              01174500
                      MNOTE 8,' &ZMS ARE ALLOWED.'                      01174600
&ZMACRET              SETA  8           SET MACRO ERROR RETURN CODE     01174700
.ZGLISTX              ANOP  ,                                           01174800
&ZASYSLNDX            SETA  0                                           01174900
.*-------------------------------------------------------------------   01175000
.***AG.MF04 MF=(SLE)                                                    01175100
.ZGMFX                ANOP  ,           END OF FULL SYNTAX CHECK        01175200
.*******************************************************************    01175300
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       01175400
.*******************************************************************    01175500
                      AIF   (&ZMACRET NE 0).ZLX2  ERROR DETECTED        01175600
.*******************************************************************    01175700
.***AE.01  START OF IXLLIST MACRO CODE                                  01175800
.*******************************************************************    01175900
                      LCLC  &M0M0001                 NAME               01176000
&M0M0001              SETC  '&XLABEL'                SET NAME           01176100
                      AIF   (K'&XLABEL NE 0).XLAB2                      01176200
&M0M0001              SETC  'M00M&SYSNDX'            DEFAULT NAME       01176300
.*                                                                      01176400
.XLAB2                ANOP  ,                                           01176500
                      AIF   ('&XMF' EQ 'L').XLAB3                       01176600
&M0M0001 DS    0H                             IXLLIST-3                 01176700
.XLAB3                ANOP  ,                                           01176800
.*******************************************************************    01176900
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              01177000
.*******************************************************************    01177100
              PUSH  PRINT                                               01177200
                      AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON  01177300
                      PRINT OFF         ++ PR01                         01177400
                      AGO   .ZPRNTXX                                    01177500
.ZPRINTX              PRINT ON                                          01177600
.ZPRNTXX              ANOP  ,                                           01177700
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  01177800
.**------------------------------------------------------------------** 01177900
.**  Start of user macasm code                                       ** 01178000
.**------------------------------------------------------------------** 01178100
.*                                                                      01178200
.**------------------------------------------------------------------** 01178300
.**  Start of code to remove "*" defaults                        @P4A** 01178400
.**                                                                  ** 01178500
.**  This code removes "NO_keyname" values.  Keywords with these     ** 01178600
.**  default values should be treated as if they were not specified. ** 01178700
.**  Removing the values makes it look as if they were not specified ** 01178800
.**  and avoids failure of mutual exclusivity checks.                ** 01178900
.**                                                                  ** 01179000
.**  Some other default values also need to be removed.  These       ** 01179100
.**  values are removed to make the invocation look consistent       ** 01179200
.**  to the checking code.                                           ** 01179300
.**                                                                  ** 01179400
.**------------------------------------------------------------------** 01179500
.*                                                                      01179600
         AIF   ('&XADJAREA'   NE 'NO_ADJAREA').DELDEFADJAREA       @P4A 01179700
&ZXADJAREA     SETC ''                                             @P4A 01179800
.DELDEFADJAREA ANOP ,                                              @P4A 01179900
.*                                                                      01180000
         AIF   ('&XANSAREA'   NE 'NO_ANSAREA').DELDEFANSAREA       @P4A 01180100
&ZXANSAREA     SETC ''                                             @P4A 01180200
.DELDEFANSAREA ANOP ,                                              @P4A 01180300
.*                                                                      01180400
         AIF   ('&XANSLEN'    NE 'NO_ANSLEN').DELDEFANSLEN         @P4A 01180500
&XANSLEN       SETC ''                                             @P4A 01180600
&ZXANSLEN      SETC ''                                             @P4A 01180700
.DELDEFANSLEN  ANOP ,                                              @P4A 01180800
.*                                                                      01180900
         AIF   ('&XAUTHCOMP'  NE 'NO_AUTHCOMP').DELDEFAUTHCOMP     @D9A 01181000
&XAUTHCOMP     SETC ''                                             @D9A 01181100
&ZXAUTHCOMP    SETC ''                                             @D9A 01181200
.DELDEFAUTHCOMP ANOP ,                                             @D9A 01181300
.*                                                                      01181400
         AIF   ('&XBUFALET'   NE 'NO_BUFALET').DELDEFBUFALET            01181500
&XBUFALET      SETC ''                                                  01181600
&ZXBUFALET     SETC ''                                                  01181700
.DELDEFBUFALET ANOP ,                                                   01181800
.*                                                                      01181900
         AIF   ('&BUFFER(1)'  NE '').DELDEFBUFFER                       01182000
&XBUFFER       SETC ''                                                  01182100
&ZXBUFFER      SETC ''                                                  01182200
.DELDEFBUFFER  ANOP ,                                                   01182300
.*                                                                      01182400
         AIF   ('&XBUFINCRNUM' NE 'NO_BUFINCRNUM').DELDEFBUFINCRNUM     01182500
&XBUFINCRNUM   SETC ''                                                  01182600
&ZXBUFINCRNUM  SETC ''                                                  01182700
.DELDEFBUFINCRNUM ANOP ,                                                01182800
.*                                                                      01182900
         AIF   ('&BUFLIST(1)' NE '').DELDEFBUFLIST                      01183000
&XBUFLIST      SETC ''                                                  01183100
&ZXBUFLIST     SETC ''                                                  01183200
.DELDEFBUFLIST ANOP ,                                                   01183300
.*                                                                      01183400
         AIF   ('&XBUFNUM'    NE 'NO_BUFNUM').DELDEFBUFNUM              01183500
&XBUFNUM       SETC ''                                                  01183600
&ZXBUFNUM      SETC ''                                                  01183700
.DELDEFBUFNUM  ANOP ,                                                   01183800
.*                                                                      01183900
         AIF   ('&XBUFSIZE'   NE 'NO_BUFSIZE').DELDEFBUFSIZE            01184000
&XBUFSIZE      SETC ''                                                  01184100
&ZXBUFSIZE     SETC ''                                                  01184200
.DELDEFBUFSIZE ANOP ,                                                   01184300
.*                                                                      01184400
         AIF   ('&XBUFSTGKEY' NE 'CALLERS_KEY').DELDEFBUFSTGKEY         01184500
&ZXBUFSTGKEY   SETC ''                                                  01184600
.DELDEFBUFSTGKEY ANOP ,                                                 01184700
.*                                                                      01184800
         AIF   ('&XELEMNUM'   NE 'NO_ELEMNUM').DELDEFELEMNUM            01184900
&XELEMNUM      SETC ''                                                  01185000
&ZXELEMNUM     SETC ''                                                  01185100
.DELDEFELEMNUM ANOP ,                                                   01185200
.*                                                                      01185300
         AIF   ('&XENTRYID'   NE 'NO_ENTRYID').DELDEFENTRYID       @P4A 01185400
&XENTRYID      SETC ''                                             @P4A 01185500
&ZXENTRYID     SETC ''                                             @P4A 01185600
.DELDEFENTRYID ANOP ,                                              @P4A 01185700
.*                                                                      01185800
         AIF   ('&XENTRYKEY'  NE 'NO_ENTRYKEY').DELDEFENTRYKEY     @P4A 01185900
&XENTRYKEY     SETC ''                                             @P4A 01186000
&ZXENTRYKEY    SETC ''                                             @P4A 01186100
.DELDEFENTRYKEY ANOP ,                                             @P4A 01186200
.*                                                                      01186300
         AIF   ('&XENTRYNAME' NE 'NO_ENTRYNAME').DELDEFENTRYNAME   @P4A 01186400
&XENTRYNAME    SETC ''                                             @P4A 01186500
&ZXENTRYNAME   SETC ''                                             @P4A 01186600
.DELDEFENTRYNAME ANOP ,                                            @P4A 01186700
.*                                                                      01186800
         AIF   ('&XKEYCOMP'   NE 'NO_KEYCOMP').DELDEFKEYCOMP       @D9A 01186900
&XKEYCOMP      SETC ''                                             @D9A 01187000
&ZXKEYCOMP     SETC ''                                             @D9A 01187100
.DELDEFKEYCOMP ANOP ,                                              @D9A 01187200
.*                                                                      01187300
         AIF   ('&XLISTDESC'  NE 'NO_LISTDESC').DELDEFLISTDESC     @D9A 01187400
&XLISTDESC     SETC ''                                             @D9A 01187500
&ZXLISTDESC    SETC ''                                             @D9A 01187600
.DELDEFLISTDESC ANOP ,                                             @D9A 01187700
.*                                                                      01187800
         AIF   ('&XLISTKEY'   NE 'NO_LISTKEY').DELDEFLISTKEY       @D9A 01187900
&XLISTKEY      SETC ''                                             @D9A 01188000
&ZXLISTKEY     SETC ''                                             @D9A 01188100
.DELDEFLISTKEY ANOP ,                                              @D9A 01188200
.*                                                                      01188300
         AIF  ('&XLISTKEYINC' NE 'NO_LISTKEYINC').DELDEFLISTKEYINC @D9A 01188400
&XLISTKEYINC   SETC ''                                             @D9A 01188500
&ZXLISTKEYINC  SETC ''                                             @D9A 01188600
.DELDEFLISTKEYINC ANOP ,                                           @D9A 01188700
.*                                                                      01188800
         AIF   ('&XLISTLIMIT' NE 'NO_LISTLIMIT').DELDEFLISTLIMIT   @D9A 01188900
&XLISTLIMIT    SETC ''                                             @D9A 01189000
&ZXLISTLIMIT   SETC ''                                             @D9A 01189100
.DELDEFLISTLIMIT ANOP ,                                            @D9A 01189200
.*                                                                      01189300
         AIF   ('&XLISTNUM'   NE 'NO_LISTNUM').DELDEFLISTNUM       @P4A 01189400
&XLISTNUM      SETC ''                                             @P4A 01189500
&ZXLISTNUM     SETC ''                                             @P4A 01189600
.DELDEFLISTNUM ANOP ,                                              @P4A 01189700
.*                                                                      01189800
         AIF   ('&XLOCKCOMP'  NE 'NO_LOCKCOMP').DELDEFLOCKCOMP     @P4A 01189900
&ZXLOCKCOMP    SETC ''                                             @P4A 01190000
.DELDEFLOCKCOMP ANOP ,                                             @P4A 01190100
.*                                                                      01190200
         AIF   ('&XLOCKINDEX' NE 'NO_LOCKINDEX').DELDEFLOCKINDEX   @P4A 01190300
&XLOCKINDEX    SETC ''                                             @P4A 01190400
&ZXLOCKINDEX   SETC ''                                             @P4A 01190500
.DELDEFLOCKINDEX ANOP ,                                            @P4A 01190600
.*                                                                      01190700
         AIF  ('&XMAXLISTKEY' NE 'NO_MAXLISTKEY').DELDEFMAXLISTKEY @D9A 01190800
&XMAXLISTKEY   SETC ''                                             @D9A 01190900
&ZXMAXLISTKEY  SETC ''                                             @D9A 01191000
.DELDEFMAXLISTKEY ANOP ,                                           @D9A 01191100
.*                                                                      01191200
         AIF   ('&XMOVETOKEY' NE 'NO_MOVETOKEY').DELDEFMOVETOKEY   @P4A 01191300
&XMOVETOKEY    SETC ''                                             @P4A 01191400
&ZXMOVETOKEY   SETC ''                                             @P4A 01191500
.DELDEFMOVETOKEY ANOP ,                                            @P4A 01191600
.*                                                                      01191700
         AIF   ('&XNEWAUTH'   NE 'NO_NEWAUTH').DELDEFNEWAUTH       @D9A 01191800
&XNEWAUTH      SETC ''                                             @D9A 01191900
&ZXNEWAUTH     SETC ''                                             @D9A 01192000
.DELDEFNEWAUTH ANOP ,                                              @D9A 01192100
.*                                                                      01192200
         AIF   ('&XNEWVERS'   NE 'NO_NEWVERS').DELDEFNEWVERS       @P4A 01192300
&XNEWVERS      SETC ''                                             @P4A 01192400
&ZXNEWVERS     SETC ''                                             @P4A 01192500
.DELDEFNEWVERS ANOP ,                                              @P4A 01192600
.*                                                                      01192700
         AIF   ('&XREQDATA'   NE 'NO_REQDATA').DELDEFREQDATA            01192800
&XREQDATA      SETC ''                                                  01192900
&ZXREQDATA     SETC ''                                                  01193000
.DELDEFREQDATA ANOP ,                                                   01193100
.*                                                                      01193200
         AIF   ('&XREQID'   NE 'NO_REQID').DELDEFREQID             @D3A 01193300
&XREQID        SETC ''                                             @D3A 01193400
&ZXREQID       SETC ''                                             @D3A 01193500
.DELDEFREQID   ANOP ,                                              @D3A 01193600
.*                                                                      01193700
         AIF   ('&XRESTOKEN'  NE 'NO_RESTOKEN').DELDEFRESTOKEN          01193800
&XRESTOKEN     SETC ''                                                  01193900
&ZXRESTOKEN    SETC ''                                                  01194000
.DELDEFRESTOKEN ANOP ,                                                  01194100
.*                                                                      01194200
         AIF   ('&XEXTRESTOKEN'  NE 'NO_EXTRESTOKEN').DELDEFEXTRESTOKEN 01194300
.*                                                                 @PMC 01194400
&XEXTRESTOKEN     SETC ''                                          @L1A 01194500
&ZXEXTRESTOKEN    SETC ''                                          @L1A 01194600
.DELDEFEXTRESTOKEN ANOP ,                                               01194700
.*                                                                      01194800
         AIF   ('&SETCURSOR(1)' NE '').DELDEFSETCURSOR             @D9A 01194900
&XSETCURSOR    SETC ''                                             @D9A 01195000
&ZXSETCURSOR   SETC ''                                             @D9A 01195100
.DELDEFSETCURSOR ANOP ,                                            @D9A 01195200
.*                                                                      01195300
         AIF   ('&XVERSCOMP'  NE 'NO_VERSCOMP').DELDEFVERSCOMP     @P4A 01195400
&XVERSCOMP     SETC ''                                             @P4A 01195500
&ZXVERSCOMP    SETC ''                                             @P4A 01195600
.DELDEFVERSCOMP ANOP ,                                             @P4A 01195700
.*                                                                      01195800
.*                                                                      01195900
.**------------------------------------------------------------------** 01196000
.**  Start of code to remove default values when the key cannot      ** 01196100
.**  be specified on the request.                                    ** 01196200
.**                                                                  ** 01196300
.**  Default values need to be removed for keys corresponding to     ** 01196400
.**  maca.xvariable.value statements when the key is not applicable  ** 01196500
.**  to the current request.                                         ** 01196600
.**                                                                  ** 01196700
.**  This code also sets up special default values where the default ** 01196800
.**  value is dependent on other keywords.                           ** 01196900
.**                                                                  ** 01197000
.**------------------------------------------------------------------** 01197100
.**------------------------------------------------------------------** 01197200
.**  Remove defaults for BufAddrType                                 ** 01197300
.**------------------------------------------------------------------** 01197400
.*                                                                      01197500
         AIF   ('&BUFADDRTYPE(1)' NE '').DEFBUFADDRTYPESPEC             01197600
.*                                                                      01197700
         AIF   ('&XBUFLIST' NE '').DEFBUFADDRTYPESKIPREMOVE             01197800
&XBUFADDRTYPE  SETC ''                                                  01197900
&ZXBUFADDRTYPE SETC ''                                                  01198000
.DEFBUFADDRTYPESKIPREMOVE ANOP ,                                        01198100
.DEFBUFADDRTYPESPEC ANOP ,                                              01198200
.*                                                                      01198300
.**------------------------------------------------------------------** 01198400
.**  Remove defaults for Pageable                                    ** 01198500
.**------------------------------------------------------------------** 01198600
.*                                                                      01198700
         AIF   ('&PAGEABLE(1)' NE '').DEFPAGEABLESPEC                   01198800
.*                                                                      01198900
         AIF   ('&XBUFFER'  NE ''  OR                                  *01199000
                '&XBUFLIST' NE '').DEFPAGEABLESKIPREMOVE                01199100
&XPAGEABLE     SETC ''                                                  01199200
&ZXPAGEABLE    SETC ''                                                  01199300
.DEFPAGEABLESKIPREMOVE ANOP ,                                           01199400
.DEFPAGEABLESPEC ANOP ,                                                 01199500
.*                                                                      01199600
.**------------------------------------------------------------------** 01199700
.**  Remove defaults for KeyReqType                                  ** 01199800
.**------------------------------------------------------------------** 01199900
.*                                                                      01200000
         AIF   ('&KEYREQTYPE(1)' NE '').DEFKEYREQTYPESPEC               01200100
.*                                                                      01200200
         AIF   ('&XENTRYKEY'  NE ''    AND                             *01200300
                '&XREQUEST'   NE 'MONITOR_SUBLIST'  AND                *01200400
                '&XREQUEST'   NE 'READ_EMCONTROLS'  AND                *01200500
                '&XENTRYID'   EQ ''    AND                             *01200600
                '&XENTRYTYPE' NE 'NEW').DEFKEYREQTYPESKIPREMOVE    @01C 01200700
&XKEYREQTYPE   SETC ''                                                  01200800
&ZXKEYREQTYPE  SETC ''                                                  01200900
.DEFKEYREQTYPESKIPREMOVE ANOP ,                                         01201000
.DEFKEYREQTYPESPEC ANOP ,                                               01201100
.*                                                                      01201200
.**------------------------------------------------------------------** 01201300
.**  Remove defaults for ListKeyType                             @D9A** 01201400
.**------------------------------------------------------------------** 01201500
.*                                                                      01201600
         AIF   ('&LISTKEYTYPE(1)' NE '').DEFLISTKEYTYPESPEC        @D9A 01201700
.*                                                                      01201800
         AIF   ('&XREQUEST'   EQ 'WRITE'  OR                           *01201900
                '&XREQUEST'   EQ 'MOVE').DEFLISTKEYTYPESKIPREMOVE  @D9A 01202000
&XLISTKEYTYPE  SETC ''                                             @D9A 01202100
&ZXLISTKEYTYPE SETC ''                                             @D9A 01202200
.DEFLISTKEYTYPESKIPREMOVE ANOP ,                                   @D9A 01202300
.DEFLISTKEYTYPESPEC ANOP ,                                         @D9A 01202400
.*                                                                      01202500
.**------------------------------------------------------------------** 01202600
.**  Remove defaults for ListDir and set up a special default.   @D5A** 01202700
.**  The ListDir default depends on ListPos.                     @D5A** 01202800
.**------------------------------------------------------------------** 01202900
.*                                                                      01203000
         AIF   ('&LISTDIR(1)' NE '').DEFLISTDIRSPEC                @D5A 01203100
.*                                                                      01203200
         AIF   ('&XREQUEST' EQ 'READ_LIST'      OR                     *01203300
                '&XUPDATECURSOR' EQ 'YES').DEFLISTDIRSKIPREMOVE1   @D6C 01203400
&XLISTDIR       SETC ''                                            @D5A 01203500
&ZXLISTDIR      SETC ''                                            @D5A 01203600
         AGO    .DEFLISTDIRSKIPSETDEF1                             @D6A 01203700
.*                                                                      01203800
.DEFLISTDIRSKIPREMOVE1 ANOP ,                                      @D5A 01203900
.*                                                                      01204000
         AIF   ('&LISTPOS(1)' NE ''            AND                     *01204100
                '&LISTPOS(1)' NE 'HEAD').DEFLISTDIRSETDEF1         @D6C 01204200
&XLISTDIR       SETC 'TOTAIL'                                      @D5A 01204300
         AGO    .DEFLISTDIRSKIPSETDEF1                             @D6A 01204400
.*                                                                      01204500
.DEFLISTDIRSETDEF1 ANOP ,                                          @D5A 01204600
.*                                                                      01204700
&XLISTDIR       SETC 'TOHEAD'                                      @D5A 01204800
.*                                                                      01204900
.DEFLISTDIRSKIPSETDEF1 ANOP ,                                      @D6A 01205000
.DEFLISTDIRSPEC ANOP ,                                             @D5A 01205100
.*                                                                      01205200
.**------------------------------------------------------------------** 01205300
.**  Remove defaults for ListPos and set up a special default.   @D5C** 01205400
.**  The ListPos default depends on ListDir.                     @D5A** 01205500
.**------------------------------------------------------------------** 01205600
.*                                                                      01205700
         AIF   ('&LISTPOS(1)' NE '').DEFLISTPOSSPEC                @D5C 01205800
.*                                                                      01205900
         AIF   ('&XREQUEST' NE 'READ_MULT'        AND                  *01206000
                '&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01206100
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01206200
                '&XREQUEST' NE 'DELETE_MULT'      AND                  *01206300
                '&XREQUEST' NE 'DELETE_ENTRYLIST' AND                  *01206400
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01206500
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01206600
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01206700
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01206800
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01206900
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01207000
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01207100
                '&XREQUEST' NE 'LOCK').DEFLISTPOSSKIPREMOVE1       @01C 01207200
&XLISTPOS       SETC ''                                            @D5C 01207300
&ZXLISTPOS      SETC ''                                            @D5C 01207400
.DEFLISTPOSSKIPREMOVE1 ANOP ,                                      @D5C 01207500
.*                                                                      01207600
         AIF   ('&XREQUEST' NE 'READ'             AND                  *01207700
                '&XREQUEST' NE 'READ_LIST'        AND                  *01207800
                '&XREQUEST' NE 'WRITE'            AND                  *01207900
                '&XREQUEST' NE 'MOVE'             AND                  *01208000
                '&XREQUEST' NE 'DELETE').DEFLISTPOSSKIPREMOVE3     @D6C 01208100
.*                                                                      01208200
         AIF   (('&XREQUEST' EQ 'WRITE'           AND                  *01208300
                 '&XENTRYTYPE' NE 'OLD')          OR                   *01208400
                ('&XLOCBYCURSOR' NE 'LOCBYCURSOR' AND                  *01208500
                 '&XLISTNUM' NE ''                AND                  *01208600
                 '&XENTRYID' EQ ''                AND                  *01208700
                 '&XENTRYNAME' EQ '')).DEFLISTPOSSKIPREMOVE2       @D6C 01208800
&XLISTPOS       SETC ''                                            @D5C 01208900
&ZXLISTPOS      SETC ''                                            @D5C 01209000
         AGO    .DEFLISTPOSSKIPREMOVE3                             @D6A 01209100
.*                                                                      01209200
.DEFLISTPOSSKIPREMOVE2 ANOP ,                                      @D6A 01209300
.*                                                                      01209400
         AIF   ('&LISTDIR(1)' NE ''            AND                     *01209500
                '&LISTDIR(1)' NE 'TOTAIL').DEFLISTPOSSETDEF1       @D6A 01209600
&XLISTPOS       SETC 'HEAD'                                        @D6A 01209700
         AGO    .DEFLISTPOSSKIPSETDEF1                             @D6A 01209800
.*                                                                      01209900
.DEFLISTPOSSETDEF1 ANOP ,                                          @D6A 01210000
.*                                                                      01210100
&XLISTPOS       SETC 'TAIL'                                        @D6M 01210200
.*                                                                      01210300
.DEFLISTPOSSKIPSETDEF1 ANOP ,                                      @D6A 01210400
.DEFLISTPOSSKIPREMOVE3 ANOP ,                                      @D6C 01210500
.DEFLISTPOSSPEC ANOP ,                                             @D5C 01210600
.*                                                                      01210700
.**------------------------------------------------------------------** 01210800
.**  Remove defaults for VersUpdate                                  ** 01210900
.**  -- VersUpdate(None) may always be specified                     ** 01211000
.**------------------------------------------------------------------** 01211100
.**------------------------------------------------------------------** 01211200
.**  Remove defaults for Mode                                        ** 01211300
.**  -- Mode(SyncSuspend) may always be specified                    ** 01211400
.**------------------------------------------------------------------** 01211500
.**------------------------------------------------------------------** 01211600
.**  Remove defaults for LockOper                                    ** 01211700
.**------------------------------------------------------------------** 01211800
.*                                                                      01211900
         AIF   ('&LOCKOPER(1)' NE '').DEFLOCKOPERSPEC                   01212000
.*                                                                      01212100
         AIF   ('&XLOCKINDEX' NE '').DEFLOCKOPERSKIPREMOVE         @P4C 01212200
&XLOCKOPER     SETC ''                                                  01212300
&ZXLOCKOPER    SETC ''                                                  01212400
.DEFLOCKOPERSKIPREMOVE ANOP ,                                           01212500
.DEFLOCKOPERSPEC ANOP ,                                                 01212600
.*                                                                      01212700
.**------------------------------------------------------------------** 01212800
.**  Remove defaults for LockMode and set up a special default   @PAC** 01212900
.**------------------------------------------------------------------** 01213000
.*                                                                      01213100
         AIF   ('&LOCKMODE(1)' NE '').DEFLOCKMODESPEC                   01213200
.*                                                                      01213300
         AIF   ('&XLOCKOPER' EQ 'SET'      OR                          *01213400
                '&XLOCKOPER' EQ 'NOTHELD').DEFLOCKMODESKIPREMOVE        01213500
&XLOCKMODE     SETC ''                                                  01213600
&ZXLOCKMODE    SETC ''                                                  01213700
.DEFLOCKMODESKIPREMOVE ANOP ,                                           01213800
.*                                                                      01213900
         AIF   ('&XLOCKOPER' NE 'NOTHELD'        OR                    *01214000
                ('&XREQUEST' NE 'READ_LIST'       AND                  *01214100
                 '&XREQUEST' NE 'READ_MULT'       AND                  *01214200
                 '&XREQUEST' NE 'DELETE_MULT'     AND                  *01214300
                 '&XREQUEST' NE 'DELETE_ENTRYLIST')).DEFLOCKMODESPECIAL 01214400
&XLOCKMODE     SETC 'COND'                                         @PAA 01214500
.DEFLOCKMODESPECIAL ANOP ,                                         @PAA 01214600
.*                                                                      01214700
.DEFLOCKMODESPEC ANOP ,                                                 01214800
.*                                                                      01214900
.**------------------------------------------------------------------** 01215000
.**  Remove defaults for Type                                        ** 01215100
.**------------------------------------------------------------------** 01215200
.*                                                                      01215300
         AIF   (N'&TYPE NE 0).DEFTYPESPEC                               01215400
.*                                                                      01215500
         AIF   ('&XREQUEST' NE 'READ'             AND                  *01215600
                '&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01215700
                '&XREQUEST' NE 'WRITE'            AND                  *01215800
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01215900
                '&XREQUEST' NE 'DELETE'           AND                  *01216000
                '&XREQUEST' NE 'DELETE_MULT'      AND                  *01216100
                '&XREQUEST' NE 'DELETE_ENTRYLIST' AND                  *01216200
                '&XREQUEST' NE 'MOVE'             AND                  *01216300
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01216400
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01216500
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01216600
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01216700
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01216800
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01216900
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01217000
                '&XREQUEST' NE 'LOCK').DEFTYPESKIPREMOVE           @01C 01217100
&XTYPE(1)      SETC ''                                                  01217200
&ZXTYPE        SETC ''                                                  01217300
.DEFTYPESKIPREMOVE ANOP ,                                               01217400
.DEFTYPESPEC ANOP ,                                                     01217500
.*                                                                      01217600
.**------------------------------------------------------------------** 01217700
.**  Remove defaults for AuthCompType                            @PGA** 01217800
.**------------------------------------------------------------------** 01217900
.*                                                                      01218000
         AIF   ('&AUTHCOMPTYPE(1)' NE '').DEFAUTHCOMPTYPESPEC      @PGA 01218100
.*                                                                      01218200
         AIF   ('&XAUTHCOMP' NE ''                AND                  *01218300
                '&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01218400
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01218500
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01218600
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01218700
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01218800
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01218900
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01219000
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01219100
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01219200
                '&XREQUEST' NE 'LOCK').DEFACTYPESKIPREMOVE         @01C 01219300
&XAUTHCOMPTYPE  SETC ''                                            @PGA 01219400
&ZXAUTHCOMPTYPE SETC ''                                            @PGA 01219500
.DEFACTYPESKIPREMOVE ANOP ,                                        @PGA 01219600
.DEFAUTHCOMPTYPESPEC ANOP ,                                        @PGA 01219700
.*                                                                      01219800
.**------------------------------------------------------------------** 01219900
.**  End of code to remove default values when the key cannot        ** 01220000
.**  be specified on the request                                     ** 01220100
.**------------------------------------------------------------------** 01220200
.*                                                                      01220300
.*                                                                      01220400
.**------------------------------------------------------------------** 01220500
.**  Start of code to validity check parameters                      ** 01220600
.**                                                                  ** 01220700
.**  This code is needed in addition to the checks which AMG         ** 01220800
.**  produces because we did not repeat keys in all places where     ** 01220900
.**  they could be used.                                             ** 01221000
.**                                                                  ** 01221100
.**  Validity checking for mutually exclusive keys, required keys,   ** 01221200
.**  and dependent keys is performed for the standard and execute    ** 01221300
.**  forms.                                                          ** 01221400
.*                                                                      01221500
.*   A subset of the validity checks can be performed when the          01221600
.*   NOCHECK option is used on the modify and execute forms.            01221700
.*   1) All checks for mutual exclusivity may be performed.             01221800
.*      Mutually exclusive sets of keys can only be detected when       01221900
.*      all are specified on the same invocation.                       01222000
.*   2) Checks of either of the following two forms cannot be           01222100
.*      performed:                                                      01222200
.*      a) X is required if Y is specified.                             01222300
.*      b) X may only be specified if Y is specified.                   01222400
.*                                                                      01222500
.**                                                                  ** 01222600
.**------------------------------------------------------------------** 01222700
.* Skip all validity checking for MF=L                                  01222800
         AIF   ('&MF(1)' EQ 'L').ENDPARMVALIDATION                      01222900
.**------------------------------------------------------------------** 01223000
.**  Validity checking for AnsArea                                   ** 01223100
.**                                                                  ** 01223200
.** AnsArea is required when Mode(SyncToken|AsyncToken) is           ** 01223300
.**   specified.  In all other cases it is optional.                 ** 01223400
.**                                                                  ** 01223500
         AIF   ('&XANSAREA' NE '' AND                                  *01223600
                '&XANSAREA' NE 'NO_ANSAREA').ANSAREASPEC                01223700
.*                                                                      01223800
.*                                                                      01223900
         AIF   ('&XMODE' NE 'SYNCTOKEN'    AND                         *01224000
                '&XMODE' NE 'ASYNCTOKEN').NOANSNOTTOKEN                 01224100
         MNOTE 8,'IXLLIST ---> The ANSAREA key is required when MODE=&X*01224200
               MODE is specified'                                       01224300
&ZMACRET SETA  8                                                        01224400
.NOANSNOTTOKEN ANOP ,                                                   01224500
.*                                                                      01224600
.*                                                                      01224700
.ANSAREASPEC ANOP ,                                                     01224800
.**                                                                  ** 01224900
.**  End of validity checking for AnsArea                            ** 01225000
.**------------------------------------------------------------------** 01225100
.**------------------------------------------------------------------** 01225200
.**  Validity checking for Buffer and BufList                        ** 01225300
.**                                                                  ** 01225400
.** For Write_LControls, Delete_Mult, Move DataOper(None),           ** 01225500
.**   Monitor_List, Lock, Delete DataOper(None),                     ** 01225600
.**   Read_EMControls,  Read_EQControls,  Monitor_Eventq,       @01A ** 01225700
.**   Monitor_Sublist                                           @01A ** 01225800
.**   Buffer and BufList cannot be specified                         ** 01225900
.**                                                                  ** 01226000
.** For Read_List, Read_Mult, Read_LControls, Delete_EntryList,      ** 01226100
.**   Deq_eventq, Monitor_Sublists                              @01A ** 01226200
.**   Buffer or BufList is required                                  ** 01226300
.**                                                                  ** 01226400
.** For Move DataOper(Read), Delete DataOper(Read)                   ** 01226500
.**   At least one of Buffer, BufList, or AdjArea must be specified  ** 01226600
.**                                                                  ** 01226700
.** For Read, Write, Move DataOper(Write)                            ** 01226800
.**   Buffer or BufList may optionally be specified                  ** 01226900
.**                                                                  ** 01227000
         AIF   ('&XBUFFER'  EQ '' AND                                  *01227100
                '&XBUFLIST' EQ '').BUFFERNOTSPEC                        01227200
.*                                                                      01227300
         AIF   ('&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01227400
                '&XREQUEST' NE 'DELETE_MULT'      AND                  *01227500
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01227600
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01227700
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01227800
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01227900
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01228000
                '&XREQUEST' NE 'LOCK').NOBUFFERERROR001           @01C  01228100
         MNOTE 8,'IXLLIST ---> The &XDATAREA key is mutually exclusive *01228200
               with REQUEST=&XREQUEST'                                  01228300
&ZMACRET SETA  8                                                        01228400
.NOBUFFERERROR001 ANOP ,                                                01228500
.*                                                                      01228600
         AIF   ('&XREQUEST'  NE 'MOVE' OR                              *01228700
                '&XDATAOPER' NE 'NONE').NOBUFFERERROR002                01228800
         MNOTE 8,'IXLLIST ---> The &XDATAREA key is mutually exclusive *01228900
               with REQUEST=MOVE when DATAOPER=NONE is specified'       01229000
&ZMACRET SETA  8                                                        01229100
.NOBUFFERERROR002 ANOP ,                                                01229200
.*                                                                      01229300
         AIF   ('&XREQUEST'  NE 'DELETE' OR                            *01229400
                '&XDATAOPER' NE 'NONE').NOBUFFERERROR003                01229500
         MNOTE 8,'IXLLIST ---> The &XDATAREA key is mutually exclusive *01229600
               with REQUEST=DELETE when DATAOPER=NONE is specified'     01229700
&ZMACRET SETA  8                                                        01229800
.NOBUFFERERROR003 ANOP ,                                                01229900
.BUFFERNOTSPEC ANOP ,                                                   01230000
.*                                                                      01230100
         AIF   ('&XBUFFER'  NE ''  OR                                  *01230200
                '&XBUFLIST' NE '').BUFORBUFLISTSPEC                     01230300
.*                                                                      01230400
.*                                                                      01230500
         AIF   ('&XREQUEST' NE 'READ_LIST'        AND                  *01230600
                '&XREQUEST' NE 'READ_MULT'        AND                  *01230700
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01230800
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01230900
                '&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01231000
                '&XREQUEST' NE 'DELETE_ENTRYLIST').NOBUFLISTNOTERROR    01231100
.*                                                                @01C  01231200
         MNOTE 8,'IXLLIST ---> BUFFER or BUFLIST is required when REQUE*01231300
               ST=&XREQUEST is specified'                               01231400
&ZMACRET SETA  8                                                        01231500
.NOBUFLISTNOTERROR ANOP ,                                               01231600
.*                                                                      01231700
.*                                                                      01231800
.BUFORBUFLISTSPEC ANOP ,                                                01231900
.*                                                                      01232000
         AIF   ('&XBUFFER'  NE '' OR                                   *01232100
                '&XBUFLIST' NE '' OR                                   *01232200
                ('&XADJAREA' NE 'NO_ADJAREA' AND                       *01232300
                 '&XADJAREA' NE '')).BUFLISTORADJAREASPEC               01232400
.*                                                                      01232500
.*                                                                      01232600
         AIF   ('&XREQUEST' NE 'MOVE'   OR                             *01232700
                '&XDATAOPER' NE 'READ').NOBUFORADJERROR002         @D3C 01232800
         MNOTE 8,'IXLLIST ---> At least one of BUFFER, BUFLIST, or ADJA*01232900
               REA is required when REQUEST=MOVE with DATAOPER=READ is *01233000
               specified'                                          @D3C 01233100
&ZMACRET SETA  8                                                        01233200
.NOBUFORADJERROR002 ANOP ,                                              01233300
.*                                                                      01233400
         AIF   ('&XREQUEST' NE 'DELETE'   OR                           *01233500
                '&XDATAOPER' NE 'READ').NOBUFORADJERROR003              01233600
         MNOTE 8,'IXLLIST ---> At least one of BUFFER, BUFLIST, or ADJA*01233700
               REA is required when REQUEST=DELETE with DATAOPER=READ i*01233800
               s specified'                                             01233900
&ZMACRET SETA  8                                                        01234000
.NOBUFORADJERROR003 ANOP ,                                              01234100
.*                                                                      01234200
.*                                                                      01234300
.BUFLISTORADJAREASPEC ANOP ,                                            01234400
.**                                                                  ** 01234500
.**  End of validity checking for Buffer and BufList                 ** 01234600
.**------------------------------------------------------------------** 01234700
.**------------------------------------------------------------------** 01234800
.**  Validity checking for BufSize                                   ** 01234900
.**                                                                  ** 01235000
.**   For Read_LControls,  Deq_Eventq                           @01C ** 01235100
.**     BufSize cannot be specified                                  ** 01235200
.**                                                                  ** 01235300
.**   For Read, Read_List, Read_Mult, Write, Delete,                 ** 01235400
.**     Delete_EntryList, Move,  Monitor_Sublists               @01C ** 01235500
.**     BufSize is required if Buffer is specified                   ** 01235600
.**                                                                  ** 01235700
         AIF   ('&XBUFSIZE' EQ '').BUFSIZENOTSPEC                       01235800
.*                                                                      01235900
         AIF   ('&XREQUEST' NE 'READ_LCONTROLS'    AND                 *01236000
                '&XREQUEST' NE 'DEQ_EVENTQ').BUFSIZEERROR001       @01C 01236100
         MNOTE 8,'IXLLIST ---> The BUFSIZE key is mutually exclusive wi*01236200
               th REQUEST=&XREQUEST'                                    01236300
&ZMACRET SETA  8                                                        01236400
.BUFSIZEERROR001 ANOP ,                                                 01236500
.BUFSIZENOTSPEC ANOP ,                                                  01236600
.*                                                                      01236700
         AIF   ('&XBUFSIZE' NE '').BUFSIZESPEC                          01236800
.*                                                                      01236900
.*                                                                      01237000
         AIF   (('&XREQUEST' NE 'READ'             AND                 *01237100
                 '&XREQUEST' NE 'READ_LIST'        AND                 *01237200
                 '&XREQUEST' NE 'READ_MULT'        AND                 *01237300
                 '&XREQUEST' NE 'WRITE'            AND                 *01237400
                 '&XREQUEST' NE 'DELETE'           AND                 *01237500
                 '&XREQUEST' NE 'DELETE_ENTRYLIST' AND                 *01237600
                 '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                 *01237700
                 '&XREQUEST' NE 'MOVE')            OR                  *01237800
                '&XBUFFER' EQ '').BUFSIZEERROR002                 @01C  01237900
         MNOTE 8,'IXLLIST ---> The BUFSIZE key is required with REQUEST*01238000
               =&XREQUEST when BUFFER is specified'                     01238100
&ZMACRET SETA  8                                                        01238200
.BUFSIZEERROR002 ANOP ,                                                 01238300
.*                                                                      01238400
.*                                                                      01238500
.BUFSIZESPEC ANOP ,                                                     01238600
.**                                                                  ** 01238700
.**  End of validity checking for BufSize                            ** 01238800
.**------------------------------------------------------------------** 01238900
.**------------------------------------------------------------------** 01239000
.**  Validity checking for BufNum                                    ** 01239100
.**                                                                  ** 01239200
.**   For Read_LControls,  Deq_Eventq                           @01C ** 01239300
.**     BufNum cannot be specified                                   ** 01239400
.**                                                                  ** 01239500
.**   For Read, Read_List, Read_Mult, Write, Delete,                 ** 01239600
.**     Delete_EntryList, Move,  Monitor_Sublists               @01C ** 01239700
.**     BufNum is required if BufList is specified                   ** 01239800
.**                                                                  ** 01239900
         AIF   ('&XBUFNUM' EQ '').BUFNUMNOTSPEC                         01240000
.*                                                                      01240100
         AIF   ('&XREQUEST' NE 'READ_LCONTROLS'    AND                 *01240200
                '&XREQUEST' NE 'DEQ_EVENTQ').BUFNUMERROR001        @01C 01240300
         MNOTE 8,'IXLLIST ---> The BUFNUM key is mutually exclusive wit*01240400
               h REQUEST=&XREQUEST'                                     01240500
&ZMACRET SETA  8                                                        01240600
.BUFNUMERROR001 ANOP ,                                                  01240700
.BUFNUMNOTSPEC ANOP ,                                                   01240800
.*                                                                      01240900
         AIF   ('&XBUFNUM' NE '').BUFNUMSPEC                            01241000
.*                                                                      01241100
.*                                                                      01241200
         AIF   (('&XREQUEST' NE 'READ'             AND                 *01241300
                 '&XREQUEST' NE 'READ_LIST'        AND                 *01241400
                 '&XREQUEST' NE 'READ_MULT'        AND                 *01241500
                 '&XREQUEST' NE 'WRITE'            AND                 *01241600
                 '&XREQUEST' NE 'DELETE'           AND                 *01241700
                 '&XREQUEST' NE 'DELETE_ENTRYLIST' AND                 *01241800
                 '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                 *01241900
                 '&XREQUEST' NE 'MOVE')            OR                  *01242000
                '&XBUFLIST' EQ '').BUFNUMERROR002                 @01C  01242100
         MNOTE 8,'IXLLIST ---> The BUFNUM key is required with REQUEST=*01242200
               &XREQUEST when BUFLIST is specified'                     01242300
&ZMACRET SETA  8                                                        01242400
.BUFNUMERROR002 ANOP ,                                                  01242500
.*                                                                      01242600
.*                                                                      01242700
.BUFNUMSPEC ANOP ,                                                      01242800
.**                                                                  ** 01242900
.**  End of validity checking for BufNum                             ** 01243000
.**------------------------------------------------------------------** 01243100
.**------------------------------------------------------------------** 01243200
.**  Validity checking for BufIncrNum                                ** 01243300
.**                                                                  ** 01243400
.**   For Read_List, Read_Mult, Read_LControls, Delete_EntryList,    ** 01243500
.**     Deq_Eventq                                              @01A ** 01243600
.**     BufIncrNum cannot be specified                               ** 01243700
.**                                                                  ** 01243800
.**   For Read, Write, Delete, Move, Monitor_Sublists           @01C ** 01243900
.**     BufIncrNum is required if BufList is specified               ** 01244000
.**                                                                  ** 01244100
         AIF   ('&XBUFINCRNUM' EQ '').BUFINCRNUMNOTSPEC                 01244200
.*                                                                      01244300
         AIF   ('&XREQUEST' NE 'READ_LIST'         AND                 *01244400
                '&XREQUEST' NE 'READ_MULT'         AND                 *01244500
                '&XREQUEST' NE 'DEQ_EVENTQ'        AND                 *01244600
                '&XREQUEST' NE 'READ_LCONTROLS'    AND                 *01244700
                '&XREQUEST' NE 'DELETE_ENTRYLIST').BUFINCRNUMERROR001   01244800
.*                                                                @01C  01244900
         MNOTE 8,'IXLLIST ---> The BUFINCRNUM key is mutually exclusive*01245000
                with REQUEST=&XREQUEST'                                 01245100
&ZMACRET SETA  8                                                        01245200
.BUFINCRNUMERROR001 ANOP ,                                              01245300
.BUFINCRNUMNOTSPEC ANOP ,                                               01245400
.*                                                                      01245500
         AIF   ('&XBUFINCRNUM' NE '').BUFINCRNUMSPEC                    01245600
.*                                                                      01245700
.*                                                                      01245800
         AIF   (('&XREQUEST' NE 'READ'             AND                 *01245900
                 '&XREQUEST' NE 'WRITE'            AND                 *01246000
                 '&XREQUEST' NE 'DELETE'           AND                 *01246100
                 '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                 *01246200
                 '&XREQUEST' NE 'MOVE')            OR                  *01246300
                '&XBUFLIST' EQ '').BUFINCRNUMERROR002             @01C  01246400
         MNOTE 8,'IXLLIST ---> The BUFINCRNUM key is required with REQU*01246500
               EST=&XREQUEST when BUFLIST is specified'                 01246600
&ZMACRET SETA  8                                                        01246700
.BUFINCRNUMERROR002 ANOP ,                                              01246800
.*                                                                      01246900
.*                                                                      01247000
.BUFINCRNUMSPEC ANOP ,                                                  01247100
.**                                                                  ** 01247200
.**  End of validity checking for BufIncrNum                         ** 01247300
.**------------------------------------------------------------------** 01247400
.**------------------------------------------------------------------** 01247500
.**  Validity checking for ElemNum                                   ** 01247600
.**                                                                  ** 01247700
.**   AMG ensures ElemNum is only specified on Write and Move        ** 01247800
.**     DataOper(Write) requests                                     ** 01247900
.**                                                                  ** 01248000
.**   For Write, Move DataOper(Write)                                ** 01248100
.**     ElemNum is required when Buffer or BufList is specified      ** 01248200
.**                                                                  ** 01248300
         AIF   ('&XELEMNUM' NE '').ELEMNUMSPEC                          01248400
.*                                                                      01248500
.*                                                                      01248600
         AIF   ('&XBUFFER'  EQ '' AND                                  *01248700
                '&XBUFLIST' EQ '').ELEMNUMNOBUF                         01248800
.*                                                                      01248900
         AIF   ('&XREQUEST' NE 'WRITE').ELEMNUMERROR003                 01249000
         MNOTE 8,'IXLLIST ---> The ELEMNUM key is required with REQUEST*01249100
               =&XREQUEST when BUFFER or BUFLIST is specified'     @D3C 01249200
&ZMACRET SETA  8                                                        01249300
.ELEMNUMERROR003 ANOP ,                                                 01249400
.*                                                                      01249500
         AIF   ('&XREQUEST'  NE 'MOVE' OR                              *01249600
                '&XDATAOPER' NE 'WRITE').ELEMNUMERROR004                01249700
         MNOTE 8,'IXLLIST ---> The ELEMNUM key is required with REQUEST*01249800
               =MOVE when DATAOPER=WRITE and BUFFER or BUFLIST is speci*01249900
               fied'                                               @D3C 01250000
&ZMACRET SETA  8                                                        01250100
.ELEMNUMERROR004 ANOP ,                                                 01250200
.ELEMNUMNOBUF ANOP ,                                                    01250300
.*                                                                      01250400
.*                                                                      01250500
.ELEMNUMSPEC ANOP ,                                                     01250600
.**                                                                  ** 01250700
.**  End of validity checking for ElemNum                            ** 01250800
.**------------------------------------------------------------------** 01250900
.**------------------------------------------------------------------** 01251000
.**  Validity checking for AdjArea                                   ** 01251100
.**                                                                  ** 01251200
.**   For Read_LControls, Write_LControls, Delete_Mult,              ** 01251300
.**     Delete_EntryList, Move DataOper(None), Monitor_List, Lock,   ** 01251400
.**     Delete DataOper(None), Read_EMControls, Read_EQControls, @01A** 01251500
.**     Deq_Eventq, Monitor_Eventq, Monitor_Sublist,             @01A** 01251600
.**     Monitor_Sublists                                         @01A** 01251700
.**     AdjArea cannot be specified                                  ** 01251800
.**                                                                  ** 01251900
.**   For Read_List, Read_Mult                                       ** 01252000
.**     AdjArea is required if Type(AdjData) is specified            ** 01252100
.**                                                                  ** 01252200
.**   For Read, Write, Move DataOper(Read|Write),                    ** 01252300
.**     Delete DataOper(Read)                                        ** 01252400
.**     AdjArea may be specified, no restrictions                    ** 01252500
.**                                                                  ** 01252600
         AIF   ('&XADJAREA' EQ 'NO_ADJAREA' OR                         *01252700
                '&XADJAREA' EQ '').ADJAREANOTSPEC                  @P4C 01252800
.*                                                                      01252900
         AIF   ('&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01253000
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01253100
                '&XREQUEST' NE 'DELETE_MULT'      AND                  *01253200
                '&XREQUEST' NE 'DELETE_ENTRYLIST' AND                  *01253300
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01253400
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01253500
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01253600
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01253700
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01253800
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01253900
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01254000
                '&XREQUEST' NE 'LOCK').ADJAREAERROR001            @01C  01254100
         MNOTE 8,'IXLLIST ---> The ADJAREA key is mutually exclusive wi*01254200
               th REQUEST=&XREQUEST'                                    01254300
&ZMACRET SETA  8                                                        01254400
.ADJAREAERROR001 ANOP ,                                                 01254500
.*                                                                      01254600
         AIF   ('&XREQUEST' NE 'MOVE' OR                               *01254700
                '&XDATAOPER' NE 'NONE').ADJAREAERROR002                 01254800
         MNOTE 8,'IXLLIST ---> The ADJAREA key is mutually exclusive wi*01254900
               th REQUEST=MOVE when DATAOPER=NONE is specified'         01255000
&ZMACRET SETA  8                                                        01255100
.ADJAREAERROR002 ANOP ,                                                 01255200
.*                                                                      01255300
         AIF   ('&XREQUEST' NE 'DELETE' OR                             *01255400
                '&XDATAOPER' NE 'NONE').ADJAREAERROR003                 01255500
         MNOTE 8,'IXLLIST ---> The ADJAREA key is mutually exclusive wi*01255600
               th REQUEST=DELETE when DATAOPER=NONE is specified'       01255700
&ZMACRET SETA  8                                                        01255800
.ADJAREAERROR003 ANOP ,                                                 01255900
.ADJAREANOTSPEC ANOP ,                                                  01256000
.*                                                                      01256100
         AIF   ('&XADJAREA' NE 'NO_ADJAREA' AND                        *01256200
                '&XADJAREA' NE '').ADJAREASPEC                          01256300
.*                                                                      01256400
.*                                                                      01256500
         AIF   ('&XREQUEST' NE 'READ_LIST' AND                         *01256600
                '&XREQUEST' NE 'READ_MULT').ADJNOTRLRM                  01256700
.*                                                                      01256800
&ZCVAL   SETC  'NO'                                                     01256900
&ZI      SETA  0                                                        01257000
.*                                                                      01257100
.ADJFINDREQ ANOP ,                                                      01257200
.*                                                                      01257300
&ZI      SETA  &ZI+1                                                    01257400
.*                                                                      01257500
         AIF   (K'&XTYPE(&ZI) LE 0).ADJFINDREQNOVALUE                   01257600
.*                                                                      01257700
         AIF   ('&XTYPE(&ZI)' NE 'ADJDATA').ADJFINDREQ                  01257800
.*                                                                      01257900
&ZCVAL   SETC  'YES'                                                    01258000
.*                                                                      01258100
.ADJFINDREQNOVALUE ANOP ,                                               01258200
.*                                                                      01258300
         AIF   ('&ZCVAL' NE 'YES').ADJAREAERROR004                      01258400
         MNOTE 8,'IXLLIST ---> The ADJAREA key is required for REQUEST=*01258500
               &XREQUEST when TYPE=ADJDATA is specified'                01258600
&ZMACRET SETA  8                                                        01258700
.ADJAREAERROR004 ANOP ,                                                 01258800
.*                                                                      01258900
.ADJNOTRLRM ANOP ,                                                      01259000
.*                                                                      01259100
.*                                                                      01259200
.ADJAREASPEC ANOP ,                                                     01259300
.**                                                                  ** 01259400
.**  End of validity checking for AdjArea                            ** 01259500
.**------------------------------------------------------------------** 01259600
.**------------------------------------------------------------------** 01259700
.**  Validity checking for ListNum                                   ** 01259800
.**                                                                  ** 01259900
.** For Lock,  Read_EQControls,  Deq_Eventq, Monitor_Eventq,    @01C ** 01260000
.**   Monitor_Sublists,                                         @01A ** 01260100
.**   ListNum cannot be specified                                    ** 01260200
.**                                                                  ** 01260300
.** For Read_LControls, Write EntryType(Any|New), Write_LControls,   ** 01260400
.**   Monitor_List, Read_EMControls,  Monitor_Sublist,          @01C ** 01260500
.**   or when LocByCursor is specified                           @D6C** 01260600
.**   ListNum must be specified                                      ** 01260700
.**                                                                  ** 01260800
.** For Read, Read_List, Write EntryType(OLD), Delete, Move          ** 01260900
.**   At least one of ListNum, EntryId, EntryName, or            @D6C** 01261000
.**     LOCBYCURSOR must be specified                            @D6C** 01261100
.**                                                                  ** 01261200
.** For Read_Mult, Delete_Mult, Delete_EntryList                     ** 01261300
.**   ListNum may be specified, no restrictions                      ** 01261400
.**                                                                  ** 01261500
         AIF   ('&XLISTNUM' EQ '').LISTNUMNOTSPEC                  @P4C 01261600
.*                                                                      01261700
         AIF   ('&XREQUEST' NE 'LOCK'               AND                *01261800
                '&XREQUEST' NE 'READ_EQCONTROLS'    AND                *01261900
                '&XREQUEST' NE 'MONITOR_EVENTQ'     AND                *01262000
                '&XREQUEST' NE 'MONITOR_SUBLISTS'   AND                *01262100
                '&XREQUEST' NE 'DEQ_EVENTQ').LISTNUMERROR001       @01C 01262200
         MNOTE 8,'IXLLIST ---> The LISTNUM key is mutually exclusive wi*01262300
               th REQUEST=&XREQUEST'                                    01262400
&ZMACRET SETA  8                                                        01262500
.LISTNUMERROR001 ANOP ,                                                 01262600
.LISTNUMNOTSPEC ANOP ,                                                  01262700
.*                                                                      01262800
         AIF   ('&XLISTNUM' NE '').LISTNUMSPEC                     @P4C 01262900
.*                                                                      01263000
.*                                                                      01263100
         AIF   ('&XREQUEST' NE 'READ_LCONTROLS'  AND                   *01263200
                '&XREQUEST' NE 'WRITE_LCONTROLS' AND                   *01263300
                '&XREQUEST' NE 'READ_EMCONTROLS' AND                   *01263400
                '&XREQUEST' NE 'MONITOR_SUBLIST' AND                   *01263500
                '&XREQUEST' NE 'MONITOR_LIST').LISTNUMERROR002    @01C  01263600
         MNOTE 8,'IXLLIST ---> The LISTNUM key is required for REQUEST=*01263700
               &XREQUEST'                                               01263800
&ZMACRET SETA  8                                                        01263900
.LISTNUMERROR002 ANOP ,                                            @P2A 01264000
.*                                                                      01264100
         AIF   ('&XREQUEST' NE 'WRITE' OR                              *01264200
                ('&XENTRYTYPE' NE 'ANY' AND                            *01264300
                 '&XENTRYTYPE' NE 'NEW')).LISTNUMERROR003               01264400
         MNOTE 8,'IXLLIST ---> The LISTNUM key is required for REQUEST=*01264500
               WRITE when ENTRYTYPE=ANY|NEW is specified'               01264600
&ZMACRET SETA  8                                                        01264700
.LISTNUMERROR003 ANOP ,                                            @P2A 01264800
.*                                                                      01264900
         AIF   ('&XLOCBYCURSOR' NE 'LOCBYCURSOR').LISTNUMERROR004 @D6A  01265000
         MNOTE 8,'IXLLIST ---> The LISTNUM key is required when LOCATEB*01265100
               YCURSOR is specified'                               @D6A 01265200
&ZMACRET SETA  8                                                   @D6A 01265300
.LISTNUMERROR004 ANOP ,                                            @D6A 01265400
.*                                                                      01265500
.*                                                                      01265600
.LISTNUMSPEC ANOP ,                                                     01265700
.*                                                                      01265800
         AIF   ('&XLOCBYCURSOR' EQ 'LOCBYCURSOR' OR                    *01265900
                '&XLISTNUM' NE '' OR                                   *01266000
                '&XENTRYID' NE '' OR                                   *01266100
                '&XENTRYNAME' NE '').LOCATORSPEC                   @D6C 01266200
.*                                                                      01266300
.*                                                                      01266400
         AIF   ('&XREQUEST' NE 'READ'      AND                         *01266500
                '&XREQUEST' NE 'READ_LIST' AND                         *01266600
                '&XREQUEST' NE 'DELETE'    AND                         *01266700
                '&XREQUEST' NE 'MOVE').LOCATORERROR001                  01266800
         MNOTE 8,'IXLLIST ---> At least one of LISTNUM, ENTRYID, ENTRYN*01266900
               AME, or LOCBYCURSOR is required when REQUEST=&XREQUEST i*01267000
               s specified'                                        @D6C 01267100
&ZMACRET SETA  8                                                        01267200
.LOCATORERROR001 ANOP ,                                                 01267300
.*                                                                      01267400
         AIF   ('&XREQUEST' NE 'WRITE' OR                              *01267500
                '&XENTRYTYPE' NE 'OLD').LOCATORERROR002                 01267600
         MNOTE 8,'IXLLIST ---> At least one of LISTNUM, ENTRYID, ENTRYN*01267700
               AME, or LOCBYCURSOR is required when REQUEST=WRITE with *01267800
               ENTRYTYPE=OLD is specified'                         @D6C 01267900
&ZMACRET SETA  8                                                        01268000
.LOCATORERROR002 ANOP ,                                                 01268100
.*                                                                      01268200
.*                                                                      01268300
.LOCATORSPEC ANOP ,                                                     01268400
.**                                                                  ** 01268500
.**  End of validity checking for ListNum                            ** 01268600
.**------------------------------------------------------------------** 01268700
.**------------------------------------------------------------------** 01268800
.**  Validity checking for EntryKey                                  ** 01268900
.**                                                                  ** 01269000
.** For Read_Mult, Read_LControls, Write_LControls, Delete_Mult,     ** 01269100
.**   Delete_EntryList, Monitor_List, Lock, Read_EQControls,    @01C ** 01269200
.**   Deq_Eventq, Monitor_Eventq, Monitor_Sublists              @01A ** 01269300
.**   EntryKey cannot be specified                                   ** 01269400
.**                                                                  ** 01269500
.** For Read, Read_List, Write EntryType(Old), Delete,               ** 01269600
.**   Move DataOper(None|Read), Move DataOper(Write) EntryType(Old)  ** 01269700
.**   EntryKey and EntryID are mutually exclusive                    ** 01269800
.**   EntryKey and LocByCursor are mutually exclusive            @D6A** 01269900
.**                                                                  ** 01270000
.** For Write EntryType(Any), Move DataOper(Write) EntryType(Any)    ** 01270100
.**   EntryKey and EntryID are *NOT* mutually exclusive              ** 01270200
.**   EntryKey and LocByCursor are *NOT* mutually exclusive      @D6A** 01270300
.**                                                                  ** 01270400
.** For Write EntryType(New)                                         ** 01270500
.**   No EntryKey/EntryId check is needed because EntryId cannot be  ** 01270600
.**     specified                                                    ** 01270700
.**                                                                  ** 01270800
.** For Read, Read_List, Write, Delete, Move                         ** 01270900
.**   EntryKey and EntryName are mutually exclusive                  ** 01271000
.**                                                                  ** 01271100
.** For Read_EMControls,  Monitor_Sublist                       @01A ** 01271200
.**   EntryKey is required                                      @01A ** 01271300
.**                                                                  ** 01271400
.*                                                                      01271500
         AIF   ('&XREQUEST' NE 'READ_EMCONTROLS' AND                   *01271600
                '&XREQUEST' NE 'MONITOR_SUBLIST').ENTRYKEYNOTREQD  @01A 01271700
         AIF   ('&XENTRYKEY' NE '').ENTRYKEYEND                    @01A 01271800
         MNOTE 8,'IXLLIST ---> The ENTRYKEY key is required with REQUES*01271900
               T=&XREQUEST'                                        @01A 01272000
&ZMACRET SETA  8                                                   @01A 01272100
         AGO   .ENTRYKEYEND                                        @01A 01272200
.ENTRYKEYNOTREQD  ANOP ,                                           @01A 01272300
.*                                                                      01272400
.*                                                                      01272500
         AIF   ('&XENTRYKEY' EQ '').ENTRYKEYNOTSPEC                @P4C 01272600
.*                                                                      01272700
         AIF   ('&XREQUEST' NE 'READ_MULT'        AND                  *01272800
                '&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01272900
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01273000
                '&XREQUEST' NE 'DELETE_MULT'      AND                  *01273100
                '&XREQUEST' NE 'DELETE_ENTRYLIST' AND                  *01273200
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01273300
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01273400
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01273500
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01273600
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01273700
                '&XREQUEST' NE 'LOCK').ENTRYKEYERROR001           @01C  01273800
         MNOTE 8,'IXLLIST ---> The ENTRYKEY key is mutually exclusive w*01273900
               ith REQUEST=&XREQUEST'                                   01274000
&ZMACRET SETA  8                                                        01274100
.ENTRYKEYERROR001 ANOP ,                                                01274200
.*                                                                      01274300
         AIF   ('&XENTRYID' EQ '').NOTBOTHKEYANDLEID               @P4C 01274400
.*                                                                      01274500
         AIF   ('&XREQUEST' NE 'READ'             AND                  *01274600
                '&XREQUEST' NE 'READ_LIST'        AND                  *01274700
                '&XREQUEST' NE 'DELETE').ENTRYKEYERROR002               01274800
         MNOTE 8,'IXLLIST ---> The ENTRYKEY key is mutually exclusive w*01274900
               ith the ENTRYID key when REQUEST=&XREQUEST is specified' 01275000
&ZMACRET SETA  8                                                        01275100
.ENTRYKEYERROR002 ANOP ,                                                01275200
.*                                                                      01275300
         AIF   ('&XREQUEST' NE 'WRITE'            OR                   *01275400
                '&XENTRYTYPE' NE 'OLD').ENTRYKEYERROR003                01275500
         MNOTE 8,'IXLLIST ---> The ENTRYKEY key is mutually exclusive w*01275600
               ith the ENTRYID key when REQUEST=WRITE is specified with*01275700
                ENTRYTYPE=OLD'                                          01275800
&ZMACRET SETA  8                                                        01275900
.ENTRYKEYERROR003 ANOP ,                                                01276000
.*                                                                      01276100
         AIF   ('&XREQUEST' NE 'MOVE'             OR                   *01276200
                ('&XDATAOPER' NE 'NONE'           AND                  *01276300
                 '&XDATAOPER' NE 'READ')).ENTRYKEYERROR004              01276400
         MNOTE 8,'IXLLIST ---> The ENTRYKEY key is mutually exclusive w*01276500
               ith the ENTRYID key when REQUEST=MOVE is specified with *01276600
               DATAOPER=NONE|READ'                                      01276700
&ZMACRET SETA  8                                                        01276800
.ENTRYKEYERROR004 ANOP ,                                                01276900
.*                                                                      01277000
         AIF   ('&XREQUEST' NE 'MOVE'             OR                   *01277100
                '&XDATAOPER' NE 'WRITE'           OR                   *01277200
                '&XENTRYTYPE' NE 'OLD').ENTRYKEYERROR005                01277300
         MNOTE 8,'IXLLIST ---> The ENTRYKEY key is mutually exclusive w*01277400
               ith the ENTRYID key when REQUEST=MOVE is specified with *01277500
               DATAOPER=WRITE and ENTRYTYPE=OLD'                        01277600
&ZMACRET SETA  8                                                        01277700
.ENTRYKEYERROR005 ANOP ,                                                01277800
.NOTBOTHKEYANDLEID ANOP ,                                               01277900
.*                                                                      01278000
         AIF   ('&XLOCBYCURSOR' NE 'LOCBYCURSOR').NOTBOTHKEYANDLBYC     01278100
.*                                                                      01278200
         AIF   ('&XREQUEST' NE 'READ'             AND                  *01278300
                '&XREQUEST' NE 'READ_LIST'        AND                  *01278400
                '&XREQUEST' NE 'DELETE').ENTRYKEYERROR006          @D6A 01278500
         MNOTE 8,'IXLLIST ---> The ENTRYKEY key is mutually exclusive w*01278600
               ith the LOCBYCURSOR key when REQUEST=&XREQUEST is specif*01278700
               ied'                                                @D6A 01278800
&ZMACRET SETA  8                                                   @D6A 01278900
.ENTRYKEYERROR006 ANOP ,                                           @D6A 01279000
.*                                                                      01279100
         AIF   ('&XREQUEST' NE 'WRITE'            OR                   *01279200
                '&XENTRYTYPE' NE 'OLD').ENTRYKEYERROR007           @D6A 01279300
         MNOTE 8,'IXLLIST ---> The ENTRYKEY key is mutually exclusive w*01279400
               ith the LOCBYCURSOR key when REQUEST=WRITE is specified *01279500
               with ENTRYTYPE=OLD'                                 @D6A 01279600
&ZMACRET SETA  8                                                   @D6A 01279700
.ENTRYKEYERROR007 ANOP ,                                           @D6A 01279800
.*                                                                      01279900
         AIF   ('&XREQUEST' NE 'MOVE'             OR                   *01280000
                ('&XDATAOPER' NE 'NONE'           AND                  *01280100
                 '&XDATAOPER' NE 'READ')).ENTRYKEYERROR008         @D6A 01280200
         MNOTE 8,'IXLLIST ---> The ENTRYKEY key is mutually exclusive w*01280300
               ith the LOCBYCURSOR key when REQUEST=MOVE is specified w*01280400
               ith DATAOPER=NONE|READ'                             @D6A 01280500
&ZMACRET SETA  8                                                   @D6A 01280600
.ENTRYKEYERROR008 ANOP ,                                           @D6A 01280700
.*                                                                      01280800
         AIF   ('&XREQUEST' NE 'MOVE'             OR                   *01280900
                '&XDATAOPER' NE 'WRITE'           OR                   *01281000
                '&XENTRYTYPE' NE 'OLD').ENTRYKEYERROR009           @D6A 01281100
         MNOTE 8,'IXLLIST ---> The ENTRYKEY key is mutually exclusive w*01281200
               ith the LOCBYCURSOR key when REQUEST=MOVE is specified w*01281300
               ith DATAOPER=WRITE and ENTRYTYPE=OLD'               @D6A 01281400
&ZMACRET SETA  8                                                   @D6A 01281500
.ENTRYKEYERROR009 ANOP ,                                           @D6A 01281600
.NOTBOTHKEYANDLBYC ANOP ,                                          @D6A 01281700
.*                                                                      01281800
         AIF   ('&XENTRYNAME' EQ '').NOTBOTHKEYANDNAME             @P4C 01281900
.*                                                                      01282000
         AIF   ('&XREQUEST' NE 'READ'             AND                  *01282100
                '&XREQUEST' NE 'READ_LIST'        AND                  *01282200
                '&XREQUEST' NE 'WRITE'            AND                  *01282300
                '&XREQUEST' NE 'DELETE'           AND                  *01282400
                '&XREQUEST' NE 'MOVE').ENTRYKEYERROR010            @D6C 01282500
         MNOTE 8,'IXLLIST ---> The ENTRYKEY key is mutually exclusive w*01282600
               ith the ENTRYNAME key'                                   01282700
&ZMACRET SETA  8                                                        01282800
.ENTRYKEYERROR010 ANOP ,                                           @D6C 01282900
.NOTBOTHKEYANDNAME ANOP ,                                               01283000
.ENTRYKEYNOTSPEC ANOP ,                                                 01283100
.ENTRYKEYEND     ANOP ,                                            @01A 01283200
.**                                                                  ** 01283300
.**  End of validity checking for EntryKey                           ** 01283400
.**------------------------------------------------------------------** 01283500
.**------------------------------------------------------------------** 01283600
.**  Validity checking for KeyReqType                                ** 01283700
.**                                                                  ** 01283800
.** AMG ensures that KeyReqType is only specified if EntryKey is     ** 01283900
.**   also specified.                                                ** 01284000
.**                                                                  ** 01284100
.** For Write EntryType(New), when EntryId or LocByCursor        @D6C** 01284200
.**   is specified,  Read_EMControls,  Monitor_Sublist           @01C** 01284300
.**   KeyReqType cannot be specified                                 ** 01284400
.**                                                                  ** 01284500
         AIF   ('&XKEYREQTYPE' EQ '').KEYREQTYPENOTSPEC            @P5A 01284600
.*                                                                      01284700
         AIF   ('&XREQUEST'   NE 'READ_EMCONTROLS'  AND                *01284800
                '&XREQUEST'   NE 'MONITOR_SUBLIST').KEYREQNOTREMC  @01A 01284900
         MNOTE 8,'IXLLIST ---> The KEYREQTYPE key is mutually exclusive*01285000
                with REQUEST=&XREQUEST.'                           @01A 01285100
&ZMACRET SETA  8                                                   @01A 01285200
.KEYREQNOTREMC ANOP ,                                              @01A 01285300
.*                                                                      01285400
         AIF   ('&XREQUEST'   NE 'WRITE'          OR                   *01285500
                '&XENTRYTYPE' NE 'NEW').KEYREQTYPEERROR001         @P5A 01285600
         MNOTE 8,'IXLLIST ---> The KEYREQTYPE key is mutually exclusive*01285700
                with REQUEST=WRITE when ENTRYTYPE=NEW is specified'     01285800
&ZMACRET SETA  8                                                   @P5A 01285900
.KEYREQTYPEERROR001 ANOP ,                                         @P5A 01286000
.*                                                                      01286100
         AIF   ('&XENTRYID'   EQ '').KEYREQTYPEERROR002            @D6C 01286200
         MNOTE 8,'IXLLIST ---> The KEYREQTYPE key is mutually exclusive*01286300
                with the ENTRYID key'                              @D6C 01286400
&ZMACRET SETA  8                                                   @P5A 01286500
.KEYREQTYPEERROR002 ANOP ,                                         @P5A 01286600
.*                                                                      01286700
         AIF   ('&XLOCBYCURSOR' NE 'LOCBYCURSOR').KEYREQTYPEERROR003    01286800
         MNOTE 8,'IXLLIST ---> The KEYREQTYPE key is mutually exclusive*01286900
                with the LOCBYCURSOR key'                          @D6C 01287000
&ZMACRET SETA  8                                                   @P5A 01287100
.KEYREQTYPEERROR003 ANOP ,                                         @P5A 01287200
.KEYREQTYPENOTSPEC ANOP ,                                          @P5A 01287300
.**                                                                  ** 01287400
.**  End of validity checking for KeyReqType                         ** 01287500
.**------------------------------------------------------------------** 01287600
.**------------------------------------------------------------------** 01287700
.**  Validity checking for AuthComp                              @D9A** 01287800
.**                                                                  ** 01287900
.** For Read, Read_List, Read_Mult, Write, Write_LControls,      @D9A** 01288000
.**   Move, Delete, Delete_Mult, Delete_EntryList                @D9A** 01288100
.**   AuthComp may be optionally specified                       @D9A** 01288200
.**                                                                  ** 01288300
.** For Read_LControls, Monitor_List, Lock, Read_EMControls,     @01C** 01288400
.**   Read_EQControls,  Deq_Eventq, Monitor_Eventq,              @01C** 01288500
.**   Monitor_Sublist,  Monitor_Sublists                         @01C** 01288600
.**   AuthComp cannot be specified                               @D9A** 01288700
.**                                                                  ** 01288800
         AIF   ('&XAUTHCOMP' EQ '').AUTHCOMPNOTSPEC                @D9A 01288900
.*                                                                      01289000
         AIF   ('&XREQUEST'  NE 'READ_LCONTROLS' AND                   *01289100
                '&XREQUEST'  NE 'MONITOR_LIST'   AND                   *01289200
                '&XREQUEST'  NE 'MONITOR_SUBLIST'  AND                 *01289300
                '&XREQUEST'  NE 'MONITOR_SUBLISTS' AND                 *01289400
                '&XREQUEST'  NE 'MONITOR_EVENTQ'   AND                 *01289500
                '&XREQUEST'  NE 'READ_EMCONTROLS'  AND                 *01289600
                '&XREQUEST'  NE 'READ_EQCONTROLS'  AND                 *01289700
                '&XREQUEST'  NE 'DEQ_EVENTQ'       AND                 *01289800
                '&XREQUEST'  NE 'LOCK').AUTHCOMPERROR001           @01C 01289900
         MNOTE 8,'IXLLIST ---> The AUTHCOMP key is mutually exclusive w*01290000
               ith REQUEST=&XREQUEST.'                             @D9A 01290100
&ZMACRET SETA  8                                                   @D9A 01290200
.AUTHCOMPERROR001 ANOP ,                                           @D9A 01290300
.AUTHCOMPNOTSPEC ANOP ,                                            @D9A 01290400
.**                                                                  ** 01290500
.**  End of validity checking for AuthComp                       @D9A** 01290600
.**------------------------------------------------------------------** 01290700
.**------------------------------------------------------------------** 01290800
.**  Validity checking for AuthCompType                          @D9A** 01290900
.**                                                                  ** 01291000
.** For Write_LControls                                          @D9A** 01291100
.**   AuthCompType cannot be specified                           @D9A** 01291200
.**                                                                  ** 01291300
.** All other checks are either performed by AMG or accomplished @D9A** 01291400
.** via the AuthComp checks above.                               @D9A** 01291500
.**                                                                  ** 01291600
         AIF   ('&XAUTHCOMPTYPE' EQ '').AUTHCOMPTYPENOTSPEC        @D9A 01291700
.*                                                                      01291800
         AIF   ('&XREQUEST' NE 'WRITE_LCONTROLS'                       *01291900
               ).AUTHCOMPTYPEERROR001                              @D9A 01292000
         MNOTE 8,'IXLLIST ---> The AUTHCOMPTYPE key is mutually exclusi*01292100
               ve with REQUEST=&XREQUEST.'                         @D9A 01292200
&ZMACRET SETA  8                                                   @D9A 01292300
.AUTHCOMPTYPEERROR001 ANOP ,                                       @D9A 01292400
.AUTHCOMPTYPENOTSPEC ANOP ,                                        @D9A 01292500
.**                                                                  ** 01292600
.**  End of validity checking for AuthCompType                   @D9A** 01292700
.**------------------------------------------------------------------** 01292800
.**------------------------------------------------------------------** 01292900
.**  Validity checking for NewAuth                               @D9A** 01293000
.**                                                                  ** 01293100
.** For Read, Write, Write_LControls, Move, Delete               @D9A** 01293200
.**   NewAuth may be optionally specified                        @D9A** 01293300
.**                                                                  ** 01293400
.** For Read_List, Read_Mult, Read_LControls, Delete_Mult,       @D9A** 01293500
.**   Delete_EntryList, Monitor_List, Lock, Read_EMControls,     @01C** 01293600
.**   Read_EQControls,  Deq_Eventq, Monitor_Eventq,              @01C** 01293700
.**   Monitor_Sublists, Monitor_Sublist                          @01C** 01293800
.**   NewAuth cannot be specified                                @D9A** 01293900
.**                                                                  ** 01294000
         AIF   ('&XNEWAUTH' EQ '').NEWAUTHNOTSPEC                  @D9A 01294100
.*                                                                      01294200
         AIF   ('&XREQUEST'  EQ 'READ'            OR                   *01294300
                '&XREQUEST'  EQ 'WRITE'           OR                   *01294400
                '&XREQUEST'  EQ 'WRITE_LCONTROLS' OR                   *01294500
                '&XREQUEST'  EQ 'MOVE'            OR                   *01294600
                '&XREQUEST'  EQ 'DELETE').NEWAUTHERROR001          @PKC 01294700
         MNOTE 8,'IXLLIST ---> The NEWAUTH key is mutually exclusive wi*01294800
               th REQUEST=&XREQUEST.'                              @D9A 01294900
&ZMACRET SETA  8                                                   @D9A 01295000
.NEWAUTHERROR001 ANOP ,                                            @D9A 01295100
.NEWAUTHNOTSPEC ANOP ,                                             @D9A 01295200
.**                                                                  ** 01295300
.**  End of validity checking for NewAuth                        @D9A** 01295400
.**------------------------------------------------------------------** 01295500
.**------------------------------------------------------------------** 01295600
.**  Validity checking for EntryId                                   ** 01295700
.**                                                                  ** 01295800
.** EntryId and LocByCursor are mutually exclusive               @D6A** 01295900
.**                                                                  ** 01296000
.** For Read_Mult, Read_LControls, Write EntryType(New),             ** 01296100
.**   Write_LControls, Delete_Mult, Delete_EntryList,                ** 01296200
.**   Monitor_List, Lock,  Read_EMControls,  Read_EQControls,    @01A** 01296300
.**   Deq_Eventq, Monitor_Eventq, Monitor_Sublist,               @01A** 01296400
.**   Monitor_Sublists                                           @01A** 01296500
.**   EntryId cannot be specified                                    ** 01296600
.**                                                                  ** 01296700
.** For Read, Read_List, Delete, Move DataOper(None|Read)            ** 01296800
.**   Write EntryType(Old) and Move DataOper(Write) EntryType(Old)   ** 01296900
.**   EntryId and EntryName are mutually exclusive                   ** 01297000
.**                                                                  ** 01297100
.** For Write EntryType(Any) and Move DataOper(Write) EntryType(Any) ** 01297200
.**   EntryId and EntryName are *NOT* mutually exclusive             ** 01297300
.**                                                                  ** 01297400
         AIF   ('&XENTRYID' EQ '').ENTRYIDNOTSPEC                  @P4C 01297500
.*                                                                      01297600
         AIF   ('&XLOCBYCURSOR' NE 'LOCBYCURSOR').ENTRYIDERROR007  @D6A 01297700
         MNOTE 8,'IXLLIST ---> The ENTRYID key is mutually exclusive wi*01297800
                th the LOCBYCURSOR key'                            @D6A 01297900
&ZMACRET SETA  8                                                   @D6A 01298000
.ENTRYIDERROR007 ANOP ,                                            @D6A 01298100
.*                                                                      01298200
         AIF   ('&XREQUEST' NE 'READ_MULT'        AND                  *01298300
                '&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01298400
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01298500
                '&XREQUEST' NE 'DELETE_MULT'      AND                  *01298600
                '&XREQUEST' NE 'DELETE_ENTRYLIST' AND                  *01298700
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01298800
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01298900
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01299000
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01299100
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01299200
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01299300
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01299400
                '&XREQUEST' NE 'LOCK').ENTRYIDERROR001             @01C 01299500
         MNOTE 8,'IXLLIST ---> The ENTRYID key is mutually exclusive wi*01299600
               th REQUEST=&XREQUEST'                                    01299700
&ZMACRET SETA  8                                                        01299800
.ENTRYIDERROR001 ANOP ,                                                 01299900
.*                                                                      01300000
         AIF   ('&XREQUEST' NE 'WRITE' OR                              *01300100
                '&XENTRYTYPE' NE 'NEW').ENTRYIDERROR002                 01300200
         MNOTE 8,'IXLLIST ---> The ENTRYID key is mutually exclusive wi*01300300
               th REQUEST=WRITE when ENTRYTYPE=NEW is specified'        01300400
&ZMACRET SETA  8                                                        01300500
.ENTRYIDERROR002 ANOP ,                                                 01300600
.*                                                                      01300700
         AIF   ('&XENTRYNAME' EQ '').NOTBOTHLEIDANDNAME            @P4C 01300800
.*                                                                      01300900
         AIF   ('&XREQUEST' NE 'READ'             AND                  *01301000
                '&XREQUEST' NE 'READ_LIST'        AND                  *01301100
                '&XREQUEST' NE 'DELETE').ENTRYIDERROR003                01301200
         MNOTE 8,'IXLLIST ---> The ENTRYID key is mutually exclusive wi*01301300
               th the ENTRYNAME key when REQUEST=&XREQUEST is specified*01301400
               '                                                        01301500
&ZMACRET SETA  8                                                        01301600
.ENTRYIDERROR003 ANOP ,                                                 01301700
.*                                                                      01301800
         AIF   ('&XREQUEST' NE 'MOVE'             OR                   *01301900
                ('&XDATAOPER' NE 'NONE'           AND                  *01302000
                 '&XDATAOPER' NE 'READ')).ENTRYIDERROR004               01302100
         MNOTE 8,'IXLLIST ---> The ENTRYID key is mutually exclusive wi*01302200
               th the ENTRYNAME key when REQUEST=MOVE with DATAOPER=NON*01302300
               E|READ is specified'                                     01302400
&ZMACRET SETA  8                                                        01302500
.ENTRYIDERROR004 ANOP ,                                                 01302600
.*                                                                      01302700
         AIF   ('&XREQUEST' NE 'WRITE'            OR                   *01302800
                '&XENTRYTYPE' NE 'OLD').ENTRYIDERROR005                 01302900
         MNOTE 8,'IXLLIST ---> The ENTRYID key is mutually exclusive wi*01303000
               th the ENTRYNAME key when REQUEST=WRITE with ENTRYTYPE=O*01303100
               LD is specified'                                         01303200
&ZMACRET SETA  8                                                        01303300
.ENTRYIDERROR005 ANOP ,                                                 01303400
.*                                                                      01303500
         AIF   ('&XREQUEST' NE 'MOVE'             OR                   *01303600
                '&XDATAOPER' NE 'WRITE'           OR                   *01303700
                '&XENTRYTYPE' NE 'OLD').ENTRYIDERROR006                 01303800
         MNOTE 8,'IXLLIST ---> The ENTRYID key is mutually exclusive wi*01303900
               th the ENTRYNAME key when REQUEST=MOVE with DATAOPER=WRI*01304000
               TE and ENTRYTYPE=OLD is specified'                       01304100
&ZMACRET SETA  8                                                        01304200
.ENTRYIDERROR006 ANOP ,                                                 01304300
.NOTBOTHLEIDANDNAME ANOP ,                                              01304400
.ENTRYIDNOTSPEC ANOP ,                                                  01304500
.**                                                                  ** 01304600
.**  End of validity checking for EntryId                            ** 01304700
.**------------------------------------------------------------------** 01304800
.**------------------------------------------------------------------** 01304900
.**  Validity checking for EntryName                                 ** 01305000
.**                                                                  ** 01305100
.** For Read_Mult, Read_LControls, Write_LControls, Delete_Mult,     ** 01305200
.**   Delete_EntryList, Monitor_List, Lock,  Read_EMControls,    @01C** 01305300
.**   Read_EQControls,  Deq_Eventq, Monitor_Eventq,              @01C** 01305400
.**   Monitor_Sublists, Monitor_Sublist                          @01C** 01305500
.**   EntryName cannot be specified                                  ** 01305600
.**                                                                  ** 01305700
.** For Read, Read_List, Delete, Move DataOper(None|Read),       @D6A** 01305800
.**   Write EntryType(Old) and Move DataOper(Write) EntryType(Old)   ** 01305900
.**   EntryName and LocByCursor are mutually exclusive           @D6A** 01306000
.**   All other checks were specified earlier                    @D6C** 01306100
.**                                                                  ** 01306200
.** For Write EntryType(Any) and Move DataOper(Write) EntryType(Any) ** 01306300
.**   EntryName and LocByCursor are *NOT* mutually exclusive     @D6A** 01306400
.**                                                                  ** 01306500
         AIF   ('&XENTRYNAME' EQ '').ENTRYNAMENOTSPEC              @P4C 01306600
.*                                                                      01306700
         AIF   ('&XREQUEST' NE 'READ_MULT'        AND                  *01306800
                '&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01306900
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01307000
                '&XREQUEST' NE 'DELETE_MULT'      AND                  *01307100
                '&XREQUEST' NE 'DELETE_ENTRYLIST' AND                  *01307200
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01307300
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01307400
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01307500
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01307600
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01307700
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01307800
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01307900
                '&XREQUEST' NE 'LOCK').ENTRYNAMEERROR001           @01C 01308000
         MNOTE 8,'IXLLIST ---> The ENTRYNAME key is mutually exclusive *01308100
               with REQUEST=&XREQUEST'                                  01308200
&ZMACRET SETA  8                                                        01308300
.ENTRYNAMEERROR001 ANOP ,                                               01308400
.*                                                                      01308500
         AIF   ('&XLOCBYCURSOR' NE 'LOCBYCURSOR').NOTBOTHNAMEANDLBYC    01308600
.*                                                                      01308700
         AIF   ('&XREQUEST' NE 'READ'             AND                  *01308800
                '&XREQUEST' NE 'READ_LIST'        AND                  *01308900
                '&XREQUEST' NE 'DELETE').ENTRYNAMEERROR002         @D6A 01309000
         MNOTE 8,'IXLLIST ---> The ENTRYNAME key is mutually exclusive *01309100
               with the LOCBYCURSOR key when REQUEST=&XREQUEST is speci*01309200
               fied'                                               @D6A 01309300
&ZMACRET SETA  8                                                   @D6A 01309400
.ENTRYNAMEERROR002 ANOP ,                                          @D6A 01309500
.*                                                                      01309600
         AIF   ('&XREQUEST' NE 'MOVE'             OR                   *01309700
                ('&XDATAOPER' NE 'NONE'           AND                  *01309800
                 '&XDATAOPER' NE 'READ')).ENTRYNAMEERROR003        @D6A 01309900
         MNOTE 8,'IXLLIST ---> The ENTRYNAME key is mutually exclusive *01310000
               with the LOCBYCURSOR key when REQUEST=MOVE with DATAOPER*01310100
               =NONE|READ is specified'                            @D6A 01310200
&ZMACRET SETA  8                                                   @D6A 01310300
.ENTRYNAMEERROR003 ANOP ,                                          @D6A 01310400
.*                                                                      01310500
         AIF   ('&XREQUEST' NE 'WRITE'            OR                   *01310600
                '&XENTRYTYPE' NE 'OLD').ENTRYNAMEERROR004          @D6A 01310700
         MNOTE 8,'IXLLIST ---> The ENTRYNAME key is mutually exclusive *01310800
               with the LOCBYCURSOR key when REQUEST=WRITE with ENTRYTY*01310900
               PE=OLD is specified'                                @D6A 01311000
&ZMACRET SETA  8                                                   @D6A 01311100
.ENTRYNAMEERROR004 ANOP ,                                          @D6A 01311200
.*                                                                      01311300
         AIF   ('&XREQUEST' NE 'MOVE'             OR                   *01311400
                '&XDATAOPER' NE 'WRITE'           OR                   *01311500
                '&XENTRYTYPE' NE 'OLD').ENTRYNAMEERROR005          @D6A 01311600
         MNOTE 8,'IXLLIST ---> The ENTRYNAME key is mutually exclusive *01311700
               with the LOCBYCURSOR key when REQUEST=MOVE with DATAOPER*01311800
               =WRITE and ENTRYTYPE=OLD is specified'              @D6A 01311900
&ZMACRET SETA  8                                                   @D6A 01312000
.ENTRYNAMEERROR005 ANOP ,                                          @D6A 01312100
.NOTBOTHNAMEANDLBYC ANOP ,                                         @D6A 01312200
.ENTRYNAMENOTSPEC ANOP ,                                                01312300
.**                                                                  ** 01312400
.**  End of validity checking for EntryName                          ** 01312500
.**------------------------------------------------------------------** 01312600
.**------------------------------------------------------------------** 01312700
.**  Validity checking for LocByCursor                           @D6A** 01312800
.**                                                                  ** 01312900
.** For Read_Mult, Read_LControls, Write EntryType(New),         @D6A** 01313000
.**   Write_LControls, Delete_Mult, Delete_EntryList,            @D6A** 01313100
.**   Monitor_List, Lock, Read_EMControls,  Read_EQControls,     @01C** 01313200
.**   Deq_Eventq, Monitor_Eventq, Monitor_Sublist,               @01C** 01313300
.**   Monitor_Sublists                                           @01C** 01313400
.**   LocByCursor cannot be specified                            @D6A** 01313500
.**                                                                  ** 01313600
.** For Read, Read_List, Write EntryType(Any|Old), Move, Delete  @D6A** 01313700
.**   All necessary checks have already been done                @D6A** 01313800
.**                                                                  ** 01313900
         AIF   ('&XLOCBYCURSOR' NE 'LOCBYCURSOR').LOCBYCURNOTSPEC  @D6A 01314000
.*                                                                      01314100
         AIF   ('&XREQUEST' NE 'READ_MULT'        AND                  *01314200
                '&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01314300
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01314400
                '&XREQUEST' NE 'DELETE_MULT'      AND                  *01314500
                '&XREQUEST' NE 'DELETE_ENTRYLIST' AND                  *01314600
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01314700
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01314800
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01314900
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01315000
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01315100
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01315200
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01315300
                '&XREQUEST' NE 'LOCK').LOCBYCURERROR001            @01C 01315400
         MNOTE 8,'IXLLIST ---> The LOCBYCURSOR key is mutually exclusiv*01315500
               e with REQUEST=&XREQUEST'                           @D6A 01315600
&ZMACRET SETA  8                                                   @D6A 01315700
.LOCBYCURERROR001 ANOP ,                                           @D6A 01315800
.*                                                                      01315900
         AIF   ('&XREQUEST'   NE 'WRITE'          OR                   *01316000
                '&XENTRYTYPE' NE 'NEW').LOCBYCURERROR002           @D6A 01316100
         MNOTE 8,'IXLLIST ---> The LOCBYCURSOR key is mutually exclusiv*01316200
               e with REQUEST=WRITE when ENTRYTYPE=NEW is specified'    01316300
&ZMACRET SETA  8                                                   @D6A 01316400
.LOCBYCURERROR002 ANOP ,                                           @D6A 01316500
.*                                                                      01316600
.LOCBYCURNOTSPEC ANOP ,                                            @D6A 01316700
.**                                                                  ** 01316800
.**  End of validity checking for LocByCursor                    @D6A** 01316900
.**------------------------------------------------------------------** 01317000
.**------------------------------------------------------------------** 01317100
.**  Validity checking for UpdateCursor                          @D6A** 01317200
.**                                                                  ** 01317300
.** For Read_List, Read_Mult, Read_LControls,                    @D6A** 01317400
.**   Write_LControls, Delete_Mult, Delete_EntryList,            @D6A** 01317500
.**   Monitor_List, Lock, Move DataOper(Write) EntryType(Any),   @D6A** 01317600
.**   Read_EMControls, Read_EQControls,  Deq_Eventq,             @01C** 01317700
.**   Monitor_Eventq, Monitor_Sublist, Monitor_Sublists          @01C** 01317800
.**   UpdateCursor(Yes) cannot be specified                      @D6A** 01317900
.**                                                                  ** 01318000
.** For Read, Write, Move, Delete                                @D9C** 01318100
.**   UpdateCursor can be specified, no checks needed            @D6A** 01318200
.**                                                                  ** 01318300
         AIF   ('&XUPDATECURSOR' NE 'YES').UPDCURYESNOTSPEC        @D6A 01318400
.*                                                                      01318500
         AIF   ('&XREQUEST' NE 'READ_LIST'        AND                  *01318600
                '&XREQUEST' NE 'READ_MULT'        AND                  *01318700
                '&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01318800
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01318900
                '&XREQUEST' NE 'DELETE_MULT'      AND                  *01319000
                '&XREQUEST' NE 'DELETE_ENTRYLIST' AND                  *01319100
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01319200
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01319300
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01319400
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01319500
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01319600
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01319700
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01319800
                '&XREQUEST' NE 'LOCK').UPDCURYESERROR001           @01C 01319900
         MNOTE 8,'IXLLIST ---> UPDATECURSOR=YES is mutually exclusive w*01320000
               ith REQUEST=&XREQUEST'                              @D6A 01320100
&ZMACRET SETA  8                                                   @D6A 01320200
.UPDCURYESERROR001 ANOP ,                                          @D6A 01320300
.*                                                                4@D9D 01320400
.*                                                                      01320500
.UPDCURYESNOTSPEC ANOP ,                                           @D6A 01320600
.**                                                                  ** 01320700
.**  End of validity checking for UpdateCursor                   @D6A** 01320800
.**------------------------------------------------------------------** 01320900
.**------------------------------------------------------------------** 01321000
.**  Validity checking for ListDir                               @D5A** 01321100
.**                                                                  ** 01321200
.** For Read_List requests and when UpdateCursor(Yes) is         @D5A** 01321300
.**   specified                                                  @D5A** 01321400
.**   ListDir(ToTail) is mutually exclusive with ListPos(Tail)   @D5A** 01321500
.**   ListDir(ToHead) is mutually exclusive with ListPos(Head)   @D5A** 01321600
.**                                                                  ** 01321700
.** For all other requests                                       @D5A** 01321800
.**   ListDir cannot be specified                                @D5A** 01321900
.**                                                                  ** 01322000
         AIF   ('&LISTDIR(1)' EQ '').LISTDIRNOTSPEC                @D5A 01322100
.*                                                                      01322200
         AIF   ('&XREQUEST' NE 'READ_MULT'          AND                *01322300
                '&XREQUEST' NE 'READ_LCONTROLS'     AND                *01322400
                '&XREQUEST' NE 'WRITE_LCONTROLS'    AND                *01322500
                '&XREQUEST' NE 'DELETE_MULT'        AND                *01322600
                '&XREQUEST' NE 'DELETE_ENTRYLIST'   AND                *01322700
                '&XREQUEST' NE 'MONITOR_LIST'       AND                *01322800
                '&XREQUEST' NE 'MONITOR_SUBLIST'    AND                *01322900
                '&XREQUEST' NE 'MONITOR_SUBLISTS'   AND                *01323000
                '&XREQUEST' NE 'MONITOR_EVENTQ'     AND                *01323100
                '&XREQUEST' NE 'READ_EMCONTROLS'    AND                *01323200
                '&XREQUEST' NE 'READ_EQCONTROLS'    AND                *01323300
                '&XREQUEST' NE 'DEQ_EVENTQ'         AND                *01323400
                '&XREQUEST' NE 'LOCK').LISTDIRERROR001             @01C 01323500
         MNOTE 8,'IXLLIST ---> The LISTDIR key is mutually exclusive wi*01323600
               th REQUEST=&XREQUEST'                               @D5A 01323700
&ZMACRET SETA  8                                                   @D5A 01323800
.LISTDIRERROR001 ANOP ,                                            @D5A 01323900
.*                                                                      01324000
         AIF   ('&XUPDATECURSOR' EQ 'YES'           OR                 *01324100
                ('&XREQUEST' NE 'READ'               AND               *01324200
                 '&XREQUEST' NE 'WRITE'              AND               *01324300
                 '&XREQUEST' NE 'MOVE'               AND               *01324400
                 '&XREQUEST' NE 'DELETE')).LISTDIRERROR002         @D6A 01324500
         MNOTE 8,'IXLLIST ---> The LISTDIR key is mutually exclusive wi*01324600
               th REQUEST=&XREQUEST when UPDATECURSOR=NO is specified' *01324700
                                                                   @D6A 01324800
&ZMACRET SETA  8                                                   @D6A 01324900
.LISTDIRERROR002 ANOP ,                                            @D6A 01325000
.*                                                                      01325100
         AIF   ('&XLISTDIR' NE 'TOTAIL'      OR                        *01325200
                '&XLISTPOS' NE 'TAIL').LISTDIRERROR003             @D6C 01325300
         MNOTE 8,'IXLLIST ---> LISTDIR=TOTAIL is mutually exclusive wit*01325400
               h with LISTPOS=TAIL'                                @D5A 01325500
&ZMACRET SETA  8                                                   @D5A 01325600
.LISTDIRERROR003 ANOP ,                                            @D5A 01325700
.*                                                                      01325800
         AIF   ('&XLISTDIR' NE 'TOHEAD'      OR                        *01325900
                '&XLISTPOS' NE 'HEAD').LISTDIRERROR004             @D6C 01326000
         MNOTE 8,'IXLLIST ---> LISTDIR=TOHEAD is mutually exclusive wit*01326100
               h with LISTPOS=HEAD'                                @D5A 01326200
&ZMACRET SETA  8                                                   @D5A 01326300
.LISTDIRERROR004 ANOP ,                                            @D5A 01326400
.*                                                                      01326500
.LISTDIRNOTSPEC ANOP ,                                             @D5A 01326600
.**                                                                  ** 01326700
.**  End of validity checking for ListDir                        @D5A** 01326800
.**------------------------------------------------------------------** 01326900
.**------------------------------------------------------------------** 01327000
.**  Validity checking for ListPos                               @D5C** 01327100
.**                                                                  ** 01327200
.** For Read_Mult, Read_LControls, Write_LControls, Delete_Mult,     ** 01327300
.**   Delete_EntryList, Monitor_List, Lock,  Read_EMControls,    @01C** 01327400
.**   Read_EQControls,  Deq_Eventq, Monitor_Eventq,              @01C** 01327500
.**   Monitor_Sublists, Monitor_Sublist                          @01C** 01327600
.**   ListPos cannot be specified                                @D5C** 01327700
.**                                                                  ** 01327800
.** For Read, Read_List, Write EntryType(Old), Delete, Move      @D5C** 01327900
.**   ListPos can only be specified if ListNum is specified      @D5C** 01328000
.**   --> AMG does this check                                    @D5A** 01328100
.**                                                                  ** 01328200
.** For Write EntryType(Any|New)                                 @D5C** 01328300
.**   ListPos may be specified, no restrictions                  @D5C** 01328400
.**                                                                  ** 01328500
.** For Read, Read_List, Write EntryType(Old), Delete, Move      @D5C** 01328600
.**   ListPos and EntryId are mutually exclusive                 @D5C** 01328700
.**   ListPos and EntryName are mutually exclusive               @D5C** 01328800
.**   ListPos and LocByCursor are mutually exclusive             @D6A** 01328900
.**                                                                  ** 01329000
.** For Write EntryType(Any|New)                                 @D5C** 01329100
.**   ListPos and EntryId are *NOT* mutually exclusive           @D5C** 01329200
.**   ListPos and EntryName are *NOT* mutually exclusive         @D5C** 01329300
.**   ListPos and LocByCursor are *NOT* mutually exclusive       @D6A** 01329400
.**                                                                  ** 01329500
.** For Read_List requests and when UpdateCursor(Yes) is         @D5A** 01329600
.**   specified                                                  @D5A** 01329700
.**   ListDir(ToTail) is mutually exclusive with ListPos(Tail)   @D5A** 01329800
.**   ListDir(ToHead) is mutually exclusive with ListPos(Head)   @D5A** 01329900
.**   --> This check is done with the ListDir verification       @D5A** 01330000
.**                                                                  ** 01330100
         AIF   ('&LISTPOS(1)' EQ '').LISTPOSNOTSPEC                @D5C 01330200
.*                                                                      01330300
         AIF   ('&XREQUEST' NE 'READ_MULT'        AND                  *01330400
                '&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01330500
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01330600
                '&XREQUEST' NE 'DELETE_MULT'      AND                  *01330700
                '&XREQUEST' NE 'DELETE_ENTRYLIST' AND                  *01330800
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01330900
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01331000
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01331100
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01331200
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01331300
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01331400
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01331500
                '&XREQUEST' NE 'LOCK').LISTPOSERROR001             @01C 01331600
         MNOTE 8,'IXLLIST ---> The LISTPOS key is mutually exclusive wi*01331700
               th REQUEST=&XREQUEST'                               @D5C 01331800
&ZMACRET SETA  8                                                        01331900
.LISTPOSERROR001 ANOP ,                                            @D5C 01332000
.*                                                                      01332100
         AIF   ('&XENTRYID' EQ '').NOTBOTHLISTPOSANDENTRYID        @D5C 01332200
.*                                                                      01332300
         AIF   ('&XREQUEST' NE 'READ'             AND                  *01332400
                '&XREQUEST' NE 'READ_LIST'        AND                  *01332500
                '&XREQUEST' NE 'MOVE'             AND                  *01332600
                '&XREQUEST' NE 'DELETE').LISTPOSERROR004           @D6C 01332700
         MNOTE 8,'IXLLIST ---> The LISTPOS key is mutually exclusive wi*01332800
               th the ENTRYID key for REQUEST=&XREQUEST'           @D5C 01332900
&ZMACRET SETA  8                                                        01333000
.LISTPOSERROR004 ANOP ,                                            @D5C 01333100
.*                                                                      01333200
         AIF   ('&XREQUEST' NE 'WRITE'            OR                   *01333300
                '&XENTRYTYPE' NE 'OLD').LISTPOSERROR005            @D5C 01333400
         MNOTE 8,'IXLLIST ---> The LISTPOS key is mutually exclusive wi*01333500
               th the ENTRYID key for REQUEST=WRITE when ENTRYTYPE=OLD *01333600
               is specified'                                       @D5C 01333700
&ZMACRET SETA  8                                                        01333800
.LISTPOSERROR005 ANOP ,                                            @D5C 01333900
.*                                                                      01334000
.NOTBOTHLISTPOSANDENTRYID ANOP ,                                   @D5C 01334100
.*                                                                      01334200
         AIF   ('&XENTRYNAME' EQ '').NOTBOTHLISTPOSANDENTRYNAME    @D5C 01334300
.*                                                                      01334400
         AIF   ('&XREQUEST' NE 'READ'             AND                  *01334500
                '&XREQUEST' NE 'READ_LIST'        AND                  *01334600
                '&XREQUEST' NE 'MOVE'             AND                  *01334700
                '&XREQUEST' NE 'DELETE').LISTPOSERROR006           @D6C 01334800
         MNOTE 8,'IXLLIST ---> The LISTPOS key is mutually exclusive wi*01334900
               th the ENTRYNAME key for REQUEST=&XREQUEST'         @D5C 01335000
&ZMACRET SETA  8                                                        01335100
.LISTPOSERROR006 ANOP ,                                            @D5C 01335200
.*                                                                      01335300
         AIF   ('&XREQUEST' NE 'WRITE'            OR                   *01335400
                '&XENTRYTYPE' NE 'OLD').LISTPOSERROR007            @D5C 01335500
         MNOTE 8,'IXLLIST ---> The LISTPOS key is mutually exclusive wi*01335600
               th the ENTRYNAME key for REQUEST=WRITE when ENTRYTYPE=OL*01335700
               D is specified'                                     @D5C 01335800
&ZMACRET SETA  8                                                        01335900
.LISTPOSERROR007 ANOP ,                                            @D5C 01336000
.*                                                                      01336100
.NOTBOTHLISTPOSANDENTRYNAME ANOP ,                                 @D5C 01336200
.*                                                                      01336300
         AIF   ('&XLOCBYCURSOR' NE                                     *01336400
                'LOCBYCURSOR').NOTBOTHLISTPOSANDLOCBYCUR           @D6A 01336500
.*                                                                      01336600
         AIF   ('&XREQUEST' NE 'READ'             AND                  *01336700
                '&XREQUEST' NE 'READ_LIST'        AND                  *01336800
                '&XREQUEST' NE 'MOVE'             AND                  *01336900
                '&XREQUEST' NE 'DELETE').LISTPOSERROR008           @D6A 01337000
         MNOTE 8,'IXLLIST ---> The LISTPOS key is mutually exclusive wi*01337100
               th the LOCBYCURSOR key for REQUEST=&XREQUEST'       @D6A 01337200
&ZMACRET SETA  8                                                        01337300
.LISTPOSERROR008 ANOP ,                                            @D6A 01337400
.*                                                                      01337500
         AIF   ('&XREQUEST' NE 'WRITE'            OR                   *01337600
                '&XENTRYTYPE' NE 'OLD').LISTPOSERROR009            @D6A 01337700
         MNOTE 8,'IXLLIST ---> The LISTPOS key is mutually exclusive wi*01337800
               th the LOCBYCURSOR key for REQUEST=WRITE when ENTRYTYPE=*01337900
               OLD is specified'                                   @D6A 01338000
&ZMACRET SETA  8                                                        01338100
.LISTPOSERROR009 ANOP ,                                            @D6A 01338200
.*                                                                      01338300
.NOTBOTHLISTPOSANDLOCBYCUR ANOP ,                                  @D6A 01338400
.LISTPOSNOTSPEC ANOP ,                                             @D5C 01338500
.**                                                                  ** 01338600
.**  End of validity checking for ListPos                            ** 01338700
.**------------------------------------------------------------------** 01338800
.**------------------------------------------------------------------** 01338900
.**  Validity checking for ListKeyType                           @D9A** 01339000
.**                                                                  ** 01339100
.** For Write, Move                                              @D9A** 01339200
.**   ListKeyType may be optionally specified                    @D9A** 01339300
.**   ListKeyType(Move|Create|Any) is mutually exclusive with    @D9A** 01339400
.**     EntryName                                                @D9A** 01339500
.**                                                                  ** 01339600
.** For Read, Read_List, Read_Mult, Read_LControls,              @D9A** 01339700
.**   Write_LControls, Delete, Delete_Mult, Delete_EntryList,    @D9A** 01339800
.**   Monitor_List, Lock,  Read_EMControls,  Read_EQControls,    @01C** 01339900
.**   Deq_Eventq, Monitor_Eventq, Monitor_Sublist,               @01C** 01340000
.**   Monitor_Sublists                                           @01C** 01340100
.**   ListKeyType cannot be specified                            @D9A** 01340200
.**                                                                  ** 01340300
         AIF   ('&XLISTKEYTYPE' EQ '').LISTKEYTYPENOTSPEC          @D9A 01340400
.*                                                                      01340500
         AIF   ('&XREQUEST' EQ 'WRITE'  OR                             *01340600
                '&XREQUEST' EQ 'MOVE').LISTKEYTYPEERROR001         @D9A 01340700
         MNOTE 8,'IXLLIST ---> The LISTKEYTYPE key is mutually exclusiv*01340800
               e with REQUEST=&XREQUEST'                           @D9A 01340900
&ZMACRET SETA  8                                                   @D9A 01341000
.LISTKEYTYPEERROR001 ANOP ,                                        @D9A 01341100
.*                                                                      01341200
         AIF   ('&XLISTKEYTYPE' EQ 'NOLISTKEY' OR                      *01341300
                '&XENTRYNAME' EQ '').LISTKEYTYPEERROR002           @D9A 01341400
         MNOTE 8,'IXLLIST ---> LISTKEYTYPE=&XLISTKEYTYPE is mutually ex*01341500
               clusive with the ENTRYNAME key'                     @D9A 01341600
&ZMACRET SETA  8                                                   @D9A 01341700
.LISTKEYTYPEERROR002 ANOP ,                                        @D9A 01341800
.LISTKEYTYPENOTSPEC ANOP ,                                         @D9A 01341900
.**                                                                  ** 01342000
.**  End of validity checking for ListKeyType                    @D9A** 01342100
.**------------------------------------------------------------------** 01342200
.**------------------------------------------------------------------** 01342300
.**  Validity checking for KeyComp                               @D9A** 01342400
.**                                                                  ** 01342500
.** For Read_List, Read_Mult, Delete_Mult, Delete_EntryList      @D9A** 01342600
.**   KeyComp may optionally be specified                        @D9A** 01342700
.**   KeyComp is mutually exclusive with EntryKey, EntryName,    @D9A** 01342800
.**     and ListType(NameList)                                   @D9A** 01342900
.**                                                                  ** 01343000
.** For Read, Read_LControls, Write, Write_LControls, Move,      @D9A** 01343100
.**   Delete, Monitor_List, Lock,  Read_EMControls,              @01C** 01343200
.**   Read_EQControls, Deq_Eventq, Monitor_Eventq,               @01C** 01343300
.**   Monitor_Sublist, Monitor_Sublists                          @01C** 01343400
.**   KeyComp cannot be specified                                @D9A** 01343500
.**                                                                  ** 01343600
         AIF   ('&XKEYCOMP' EQ '').KEYCOMPNOTSPEC                  @D9A 01343700
.*                                                                      01343800
         AIF   ('&XREQUEST' EQ 'READ_LIST'         OR                  *01343900
                '&XREQUEST' EQ 'READ_MULT'         OR                  *01344000
                '&XREQUEST' EQ 'DELETE_MULT'       OR                  *01344100
                '&XREQUEST' EQ 'DELETE_ENTRYLIST').KEYCOMPERROR001 @D9A 01344200
         MNOTE 8,'IXLLIST ---> The KEYCOMP key is mutually exclusive wi*01344300
               th REQUEST=&XREQUEST'                               @D9A 01344400
&ZMACRET SETA  8                                                   @D9A 01344500
.KEYCOMPERROR001 ANOP ,                                            @D9A 01344600
.*                                                                      01344700
         AIF   ('&XENTRYKEY' EQ '').KEYCOMPERROR002                @D9A 01344800
         MNOTE 8,'IXLLIST ---> The KEYCOMP key is mutually exclusive wi*01344900
               th the ENTRYKEY key'                                @D9A 01345000
&ZMACRET SETA  8                                                   @D9A 01345100
.KEYCOMPERROR002 ANOP ,                                            @D9A 01345200
.*                                                                      01345300
         AIF   ('&XENTRYNAME' EQ '').KEYCOMPERROR003               @D9A 01345400
         MNOTE 8,'IXLLIST ---> The KEYCOMP key is mutually exclusive wi*01345500
               th the ENTRYNAME key'                               @D9A 01345600
&ZMACRET SETA  8                                                   @D9A 01345700
.KEYCOMPERROR003 ANOP ,                                            @D9A 01345800
.*                                                                      01345900
         AIF   ('&XLISTTYPE' NE 'NAMELIST').KEYCOMPERROR004        @D9A 01346000
         MNOTE 8,'IXLLIST ---> The KEYCOMP key is mutually exclusive wi*01346100
               th LISTTYPE=NAMELIST'                               @D9A 01346200
&ZMACRET SETA  8                                                   @D9A 01346300
.KEYCOMPERROR004 ANOP ,                                            @D9A 01346400
.KEYCOMPNOTSPEC ANOP ,                                             @D9A 01346500
.**                                                                  ** 01346600
.**  End of validity checking for KeyComp                        @D9A** 01346700
.**------------------------------------------------------------------** 01346800
.**------------------------------------------------------------------** 01346900
.**  Validity checking for VersComp                                  ** 01347000
.**                                                                  ** 01347100
.** For Read_LControls, Write_LControls, Monitor_List, Lock,         ** 01347200
.**   Read_EMControls,  Read_EQControls,  Deq_Eventq,            @01C** 01347300
.**   Monitor_Eventq,  Monitor_Sublist, Monitor_Sublists         @01C** 01347400
.**   VersComp cannot be specified                                   ** 01347500
.**                                                                  ** 01347600
.** For Read, Read_List, Read_Mult, Write, Delete, Delete_Mult,      ** 01347700
.**   Delete_EntryList, Move                                         ** 01347800
.**   VersComp may be specified, no restrictions                     ** 01347900
.**                                                                  ** 01348000
         AIF   ('&XVERSCOMP' EQ '').VERSCOMPNOTSPEC                @P4C 01348100
.*                                                                      01348200
         AIF   ('&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01348300
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01348400
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01348500
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01348600
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01348700
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01348800
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01348900
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01349000
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01349100
                '&XREQUEST' NE 'LOCK').VERSCOMPERROR001           @01C  01349200
         MNOTE 8,'IXLLIST ---> The VERSCOMP key is mutually exclusive w*01349300
               ith REQUEST=&XREQUEST'                                   01349400
&ZMACRET SETA  8                                                        01349500
.VERSCOMPERROR001 ANOP ,                                                01349600
.VERSCOMPNOTSPEC ANOP ,                                                 01349700
.**                                                                  ** 01349800
.**  End of validity checking for VersComp                           ** 01349900
.**------------------------------------------------------------------** 01350000
.**------------------------------------------------------------------** 01350100
.**  Validity checking for VersUpdate                                ** 01350200
.**                                                                  ** 01350300
.** For Read_List, Read_Mult, Read_LControls, Write_LControls,       ** 01350400
.**   Delete, Delete_Mult, Delete_EntryList, Monitor_List, Lock,     ** 01350500
.**   Read_EMControls,  Read_EQControls,  Deq_Eventq,            @01C** 01350600
.**   Monitor_Eventq, Monitor_Sublist, Monitor_Sublists          @01C** 01350700
.**   VersUpdate(Inc|Dec|Set) cannot be specified                    ** 01350800
.**                                                                  ** 01350900
.** For Read, Write, Move                                            ** 01351000
.**   VersUpdate may be specified, no restrictions                   ** 01351100
.**                                                                  ** 01351200
         AIF   ('&VERSUPDATE(1)' EQ '').VERSUPDATENOTSPEC               01351300
.*                                                                      01351400
         AIF   ('&XVERSUPDATE' EQ 'NONE').VERSUPDATENONESPEC            01351500
.*                                                                      01351600
         AIF   ('&XREQUEST' NE 'READ_LIST'        AND                  *01351700
                '&XREQUEST' NE 'READ_MULT'        AND                  *01351800
                '&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01351900
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01352000
                '&XREQUEST' NE 'DELETE'           AND                  *01352100
                '&XREQUEST' NE 'DELETE_MULT'      AND                  *01352200
                '&XREQUEST' NE 'DELETE_ENTRYLIST' AND                  *01352300
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01352400
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01352500
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01352600
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01352700
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01352800
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01352900
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01353000
                '&XREQUEST' NE 'LOCK').VERSUPDATEERROR001         @01C  01353100
         MNOTE 8,'IXLLIST ---> VERSUPDATE=INC|DEC|SET is mutually exclu*01353200
               sive with REQUEST=&XREQUEST'                             01353300
&ZMACRET SETA  8                                                        01353400
.VERSUPDATEERROR001 ANOP ,                                              01353500
.VERSUPDATENONESPEC ANOP ,                                              01353600
.VERSUPDATENOTSPEC ANOP ,                                               01353700
.**                                                                  ** 01353800
.**  End of validity checking for VersUpdate                         ** 01353900
.**------------------------------------------------------------------** 01354000
.**------------------------------------------------------------------** 01354100
.**  Validity checking for Mode                                      ** 01354200
.**                                                                  ** 01354300
.** a) Mode(AsyncNoResponse) is mutually exclusive with Buffer,      ** 01354400
.**    BufList, Request(Lock), Request(Monitor_List) Action(Start)   ** 01354500
.**                                                                  ** 01354600
         AIF   ('&XMODE' NE 'ASYNCNORESPONSE').ASYNCNORESPONSENOTSPEC   01354700
.*                                                                      01354800
         AIF   ('&XREQUEST' NE 'LOCK').MODEERROR001                     01354900
         MNOTE 8,'IXLLIST ---> MODE=&XMODE is mutually exclusive with R*01355000
               EQUEST=LOCK'                                             01355100
&ZMACRET SETA  8                                                        01355200
.MODEERROR001 ANOP ,                                                    01355300
.*                                                                      01355400
         AIF   ('&XBUFFER'  EQ ''  AND                                 *01355500
                '&XBUFLIST' EQ '').MODEERROR002                         01355600
         MNOTE 8,'IXLLIST ---> MODE=&XMODE is mutually exclusive with t*01355700
               he BUFFER and BUFLIST keys'                              01355800
&ZMACRET SETA  8                                                        01355900
.MODEERROR002 ANOP ,                                                    01356000
.*                                                                      01356100
         AIF   ('&XREQUEST' NE 'MONITOR_LIST' OR                       *01356200
                '&XACTION'  NE 'START').MODEERROR003               @D7A 01356300
         MNOTE 8,'IXLLIST ---> MODE=&XMODE is mutually exclusive with R*01356400
               EQUEST=MONITOR_LIST when ACTION=START is specified' @D7A 01356500
&ZMACRET SETA  8                                                   @D7A 01356600
.MODEERROR003 ANOP ,                                               @D7A 01356700
.ASYNCNORESPONSENOTSPEC ANOP ,                                          01356800
.**                                                                  ** 01356900
.**  End of validity checking for Mode                               ** 01357000
.**------------------------------------------------------------------** 01357100
.**------------------------------------------------------------------** 01357200
.**  Validity checking for LockIndex                                 ** 01357300
.**                                                                  ** 01357400
.** For Read_LControls, Write_LControls, Monitor_List,           @D8C** 01357500
.**   Read_EMControls,  Read_EQControls,  Deq_Eventq,            @01C** 01357600
.**   Monitor_Eventq, Monitor_Sublist, Monitor_Sublists          @01C** 01357700
.**   LockIndex cannot be specified                                  ** 01357800
.**                                                                  ** 01357900
.** For Lock                                                         ** 01358000
.**   LockIndex must be specified                                    ** 01358100
.**                                                                  ** 01358200
.** For Read, Write, Move, Delete, Read_List, Read_Mult,         @D8C** 01358300
.**   Delete_Mult, Delete_EntryList                              @D8A** 01358400
.**   LockIndex and Mode(AsyncNoResponse) are mutually exclusive     ** 01358500
.**                                                                  ** 01358600
         AIF   ('&XLOCKINDEX' EQ '').LOCKINDEXNOTSPEC              @P4C 01358700
.*                                                                      01358800
         AIF   ('&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01358900
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01359000
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01359100
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01359200
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01359300
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01359400
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01359500
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01359600
                '&XREQUEST' NE 'MONITOR_LIST').LOCKINDEXERROR001   @01C 01359700
         MNOTE 8,'IXLLIST ---> The LOCKINDEX key is mutually exclusive *01359800
               with REQUEST=&XREQUEST'                                  01359900
&ZMACRET SETA  8                                                        01360000
.LOCKINDEXERROR001 ANOP ,                                               01360100
.*                                                                      01360200
         AIF   ('&XMODE' NE 'ASYNCNORESPONSE').LOCKINDEXERROR002        01360300
         MNOTE 8,'IXLLIST ---> The LOCKINDEX key is mutually exclusive *01360400
               with MODE=&XMODE'                                        01360500
&ZMACRET SETA  8                                                        01360600
.LOCKINDEXERROR002 ANOP ,                                               01360700
.*                                                                      01360800
.LOCKINDEXNOTSPEC ANOP ,                                                01360900
.*                                                                      01361000
         AIF   ('&XLOCKINDEX' NE '').LOCKINDEXSPEC                 @P4C 01361100
.*                                                                      01361200
.*                                                                      01361300
         AIF   ('&XREQUEST' NE 'LOCK').LOCKINDEXERROR003                01361400
         MNOTE 8,'IXLLIST ---> The LOCKINDEX key is required for REQUES*01361500
               T=&XREQUEST'                                             01361600
&ZMACRET SETA  8                                                        01361700
.LOCKINDEXERROR003 ANOP ,                                               01361800
.*                                                                      01361900
.*                                                                      01362000
.LOCKINDEXSPEC ANOP ,                                                   01362100
.**                                                                  ** 01362200
.**  End of validity checking for LockIndex                          ** 01362300
.**------------------------------------------------------------------** 01362400
.**------------------------------------------------------------------** 01362500
.**  Validity checking for LockOper/LockMode/LockComp                ** 01362600
.**                                                                  ** 01362700
.** a) LockOper(Set)                                                 ** 01362800
.**      LockMode and LockComp are mutually exclusive                ** 01362900
.**      LockOper(Set) and Request(Read_List|Read_Mult|          @D8A** 01363000
.**      Delete_Mult|Delete_EntryList) are mutually exclusive    @D8A** 01363100
.**                                                                  ** 01363200
.** b) LockOper(Reset)                                               ** 01363300
.**      LockOper(Reset) and Request(Read_List|Read_Mult|        @D8A** 01363400
.**      Delete_Mult|Delete_EntryList) are mutually exclusive    @D8A** 01363500
.**                                                                  ** 01363600
.** c) LockOper(NotHeld)                                             ** 01363700
.**      LockOper(NotHeld) and Request(Lock) are mutually exclusive  ** 01363800
.**      LockOper(NotHeld) and LockComp are mutually exclusive       ** 01363900
.**      LockMode(Uncond) and Request(Read_List|Read_Mult|       @D8A** 01364000
.**      Delete_Mult|Delete_EntryList) are mutually exclusive    @D8A** 01364100
.**                                                                  ** 01364200
.** d) LockOper(HeldBy)                                              ** 01364300
.**      LockOper(HeldBy) and Request(Lock) are mutually exclusive   ** 01364400
.**                                                                  ** 01364500
.** e) LockOper(Test)                                                ** 01364600
.**      LockOper(Test) may only be specified with Request(Lock)     ** 01364700
.**                                                                  ** 01364800
.** f) LockOper(ReadNext)                                            ** 01364900
.**      LockOper(ReadNext) may only be specified with Request(Lock) ** 01365000
.**                                                              @D5D** 01365100
.**                                                                  ** 01365200
         AIF   ('&LOCKOPER(1)' EQ '').LOCKOPERNOTSPEC                   01365300
.*                                                                      01365400
         AIF   ('&XLOCKOPER' NE 'SET').LOCKOPERSETNOTSPEC               01365500
.*                                                                      01365600
         AIF   ('&LOCKMODE(1)' EQ ''  OR                               *01365700
                '&XLOCKCOMP'   EQ 'NO_LOCKCOMP' OR                     *01365800
                '&XLOCKCOMP'   EQ '').LOCKERROR001                      01365900
         MNOTE 8,'IXLLIST ---> The LOCKMODE and LOCKCOMP keys are mutua*01366000
               lly exclusive'                                           01366100
&ZMACRET SETA  8                                                        01366200
.LOCKERROR001 ANOP ,                                                    01366300
.*                                                                      01366400
         AIF   ('&XREQUEST' NE 'READ_LIST'          AND                *01366500
                '&XREQUEST' NE 'READ_MULT'          AND                *01366600
                '&XREQUEST' NE 'DELETE_MULT'        AND                *01366700
                '&XREQUEST' NE 'DELETE_ENTRYLIST').LOCKERROR002    @D8A 01366800
         MNOTE 8,'IXLLIST ---> LOCKOPER=SET is mutually exclusive with *01366900
               REQUEST=&XREQUEST'                                  @D8A 01367000
&ZMACRET SETA  8                                                   @D8A 01367100
.LOCKERROR002 ANOP ,                                               @D8A 01367200
.LOCKOPERSETNOTSPEC ANOP ,                                              01367300
.*                                                                      01367400
         AIF   ('&XLOCKOPER' NE 'RESET').LOCKOPERRESETNOTSPEC      @D8A 01367500
.*                                                                      01367600
         AIF   ('&XREQUEST' NE 'READ_LIST'          AND                *01367700
                '&XREQUEST' NE 'READ_MULT'          AND                *01367800
                '&XREQUEST' NE 'DELETE_MULT'        AND                *01367900
                '&XREQUEST' NE 'DELETE_ENTRYLIST').LOCKERROR003    @D8A 01368000
         MNOTE 8,'IXLLIST ---> LOCKOPER=RESET is mutually exclusive wit*01368100
               h REQUEST=&XREQUEST'                                @D8A 01368200
&ZMACRET SETA  8                                                   @D8A 01368300
.LOCKERROR003 ANOP ,                                               @D8A 01368400
.LOCKOPERRESETNOTSPEC ANOP ,                                       @D8A 01368500
.*                                                                      01368600
         AIF   ('&XLOCKOPER' NE 'NOTHELD').LOCKOPERNOTHELDNOTSPEC       01368700
.*                                                                      01368800
         AIF   ('&XREQUEST' NE 'LOCK').LOCKERROR004                     01368900
         MNOTE 8,'IXLLIST ---> LOCKOPER=NOTHELD is mutually exclusive w*01369000
               ith REQUEST=LOCK'                                        01369100
&ZMACRET SETA  8                                                        01369200
.LOCKERROR004 ANOP ,                                                    01369300
.*                                                                      01369400
         AIF   ('&XLOCKCOMP' EQ 'NO_LOCKCOMP' OR                       *01369500
                '&XLOCKCOMP' EQ '').LOCKERROR005                        01369600
         MNOTE 8,'IXLLIST ---> LOCKOPER=NOTHELD is mutually exclusive w*01369700
               ith the LOCKCOMP key'                                    01369800
&ZMACRET SETA  8                                                        01369900
.LOCKERROR005 ANOP ,                                                    01370000
.*                                                                      01370100
         AIF   ('&XLOCKMODE' NE 'UNCOND'            OR                 *01370200
                ('&XREQUEST' NE 'READ_LIST'          AND               *01370300
                 '&XREQUEST' NE 'READ_MULT'          AND               *01370400
                 '&XREQUEST' NE 'DELETE_MULT'        AND               *01370500
                 '&XREQUEST' NE 'DELETE_ENTRYLIST')).LOCKERROR006  @D8A 01370600
         MNOTE 8,'IXLLIST ---> LOCKMODE=UNCOND is mutually exclusive wi*01370700
               th LOCKOPER=NOTHELD for REQUEST=&XREQUEST'          @D8A 01370800
&ZMACRET SETA  8                                                   @D8A 01370900
.LOCKERROR006 ANOP ,                                               @D8A 01371000
.LOCKOPERNOTHELDNOTSPEC ANOP ,                                          01371100
.*                                                                      01371200
         AIF   ('&XLOCKOPER' NE 'HELDBY').LOCKOPERHELDBYNOTSPEC         01371300
.*                                                                      01371400
         AIF   ('&XREQUEST' NE 'LOCK').LOCKERROR007                     01371500
         MNOTE 8,'IXLLIST ---> LOCKOPER=HELDBY is mutually exclusive wi*01371600
               th REQUEST=LOCK'                                         01371700
&ZMACRET SETA  8                                                        01371800
.LOCKERROR007 ANOP ,                                                    01371900
.LOCKOPERHELDBYNOTSPEC ANOP ,                                           01372000
.*                                                                      01372100
         AIF   ('&XLOCKOPER' NE 'TEST').LOCKOPERTESTNOTSPEC             01372200
.*                                                                      01372300
         AIF   ('&XREQUEST' EQ 'LOCK').LOCKERROR008                @D6C 01372400
         MNOTE 8,'IXLLIST ---> LOCKOPER=TEST is mutually exclusive with*01372500
                REQUEST=&XREQUEST'                                      01372600
&ZMACRET SETA  8                                                        01372700
.LOCKERROR008 ANOP ,                                                    01372800
.LOCKOPERTESTNOTSPEC ANOP ,                                             01372900
.*                                                                      01373000
         AIF   ('&XLOCKOPER' NE 'READNEXT').LOCKOPERREADNEXTNOTSPEC     01373100
.*                                                                      01373200
         AIF   ('&XREQUEST' EQ 'LOCK').LOCKERROR009                @D6C 01373300
         MNOTE 8,'IXLLIST ---> LOCKOPER=READNEXT is mutually exclusive *01373400
               with REQUEST=&XREQUEST'                                  01373500
&ZMACRET SETA  8                                                        01373600
.LOCKERROR009 ANOP ,                                                    01373700
.*                                                                      01373800
.*                                                                4@D5D 01373900
.LOCKOPERREADNEXTNOTSPEC ANOP ,                                         01374000
.*                                                                      01374100
.LOCKOPERNOTSPEC ANOP ,                                                 01374200
.**                                                                  ** 01374300
.**  End of validity checking for LockOper/LockMode/LockComp         ** 01374400
.**------------------------------------------------------------------** 01374500
.**------------------------------------------------------------------** 01374600
.**  Validity checking for MoveToKey                                 ** 01374700
.**                                                                  ** 01374800
.** MoveToKey is mutually exclusive with the EntryName key           ** 01374900
.**                                                                  ** 01375000
         AIF   ('&XMOVETOKEY' EQ '').MOVETOKEYNOTSPEC              @P4C 01375100
.*                                                                      01375200
         AIF   ('&XENTRYNAME' EQ '').MOVETOKEYERROR001             @P4C 01375300
         MNOTE 8,'IXLLIST ---> The MOVETOKEY key is mutually exclusive *01375400
               with the ENTRYNAME key'                                  01375500
&ZMACRET SETA  8                                                        01375600
.MOVETOKEYERROR001 ANOP ,                                               01375700
.MOVETOKEYNOTSPEC ANOP ,                                                01375800
.**                                                                  ** 01375900
.**  End of validity checking for MoveToKey                          ** 01376000
.**------------------------------------------------------------------** 01376100
.*                                                                      01376200
.ENDPARMVALIDATION ANOP ,                                               01376300
.*                                                                      01376400
.**------------------------------------------------------------------** 01376500
.**  End of code to validity check parameters                        ** 01376600
.**------------------------------------------------------------------** 01376700
.*                                                                      01376800
.*                                                                      01376900
.**------------------------------------------------------------------** 01377000
.**  Determine the parameter list version                        @DAA** 01377100
.**------------------------------------------------------------------** 01377200
.*                                                                      01377300
         LCLA  &LISTPLVERS                                         @DAA 01377400
.*                                                                      01377500
         AIF   (&XPLISTVER LE 1).SETPLVERSONE                      @DAA 01377600
&LISTPLVERS SETA  &XPLISTVER                                       @DAA 01377700
         AGO   .SETPLVERSEND                                       @DAA 01377800
.*                                                                      01377900
.SETPLVERSONE ANOP ,                                               @DAA 01378000
         AIF   (&XPLISTVER        NE 1              AND                *01378100
                ('&XREQUEST'       EQ 'WRITE_LCONTROLS'  OR            *01378200
                 ('&XAUTHCOMP'      EQ ''                 AND          *01378300
                  '&XNEWAUTH'       EQ ''))         AND                *01378400
                ('&XAUTHCOMPTYPE'  EQ 'EQUAL'            OR            *01378500
                 '&XAUTHCOMPTYPE'  EQ '')           AND                *01378600
                ('&XCURSORUPDTYPE' EQ 'NEXT'             OR            *01378700
                 '&XCURSORUPDTYPE' EQ '')           AND                *01378800
                ('&XLISTKEYTYPE'   EQ 'NOLISTKEY'        OR            *01378900
                 '&XLISTKEYTYPE'   EQ '')           AND                *01379000
                ('&XVERSCOMPTYPE'  EQ 'EQUAL'            OR            *01379100
                 '&XVERSCOMPTYPE'  EQ '')).SETPLVERSZERO           @DAA 01379200
&LISTPLVERS SETA  1                                                @DAA 01379300
         AGO   .SETPLVERSEND                                       @DAA 01379400
.*                                                                      01379500
.SETPLVERSZERO ANOP ,                                              @DAA 01379600
&LISTPLVERS SETA  0                                                @DAA 01379700
.SETPLVERSEND ANOP ,                                               @DAA 01379800
.*                                                                      01379900
         AIF  ('&XREQUEST'   NE  'READ_EMCONTROLS'    AND              *01380000
               '&XREQUEST'   NE  'READ_EQCONTROLS'    AND              *01380100
               '&XREQUEST'   NE  'MONITOR_SUBLIST'    AND              *01380200
               '&XREQUEST'   NE  'MONITOR_SUBLISTS'   AND              *01380300
               '&XREQUEST'   NE  'MONITOR_EVENTQ'     AND              *01380400
               '&XREQUEST'   NE  'DEQ_EVENTQ').NOTPLVER2           @01A 01380500
&LISTPLVERS SETA  2                                                @01A 01380600
.NOTPLVER2 ANOP ,                                                  @01A 01380700
.*                                                                      01380800
         AIF   (K'&PLISTVER(1) LE 0                      OR            *01380900
                '&PLISTVER(1)' EQ 'IMPLIED_VERSION'      OR            *01381000
                &XPLISTVER     GE &LISTPLVERS).SETPLVERSUPDATE     @DAA 01381100
         MNOTE 8,' PLISTVER=&PLISTVER(1), BUT PLISTVER OF 1 IS REQUIRED*01381200
               .'                                                  @PLC 01381300
&ZMACRET SETA  8                                                   @DAA 01381400
         AGO   .SETPLVERSEND2                                      @DAA 01381500
.*                                                                      01381600
.SETPLVERSUPDATE ANOP ,                                            @DAA 01381700
&XPLISTVER  SETA  &LISTPLVERS                                      @DAA 01381800
.SETPLVERSEND2 ANOP ,                                              @DAA 01381900
.*                                                                      01382000
.**------------------------------------------------------------------** 01382100
.**  End of user macasm code                                         ** 01382200
.**------------------------------------------------------------------** 01382300
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  01382400
.********************************************************************   01382500
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     01382600
.********************************************************************   01382700
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       01382800
                      LCLA  &ZOPN1         INVOCATION INDEX             01382900
                      LCLC  &ZOPL(4095)    LABEL                        01383000
                      LCLC  &ZOPO(4095)    OPERATION                    01383100
                      LCLC  &ZOPV(4095)    VALUE                        01383200
                      LCLC  &ZOPD(4095)    DESCRIPTION                  01383300
.*                                                                      01383400
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     01383500
.******************************************************************     01383600
.***AL.L10 IXLLIST FMT=LIST MF=S|L PARAMETERS                           01383700
.******************************************************************     01383800
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     01383900
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     01384000
&XMFCTRL              SETC  '#Z'.'&SYSNDX'(1,4).'A'                     01384100
&XMFATTR              SETC  '0D'                                        01384200
.*                                                                      01384300
&ZOPN                 SETA  &ZOPN+1                                     01384400
&ZOPL(&ZOPN)          SETC  ' '                                         01384500
                      AIF   (&SYSALVL NE 0).ZALVL6A                     01384600
&ZOPO(&ZOPN)          SETC  'B'                                         01384700
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'                                01384800
                      AGO   .ZALVL6B                                    01384900
.ZALVL6A              ANOP                                              01385000
&ZOPO(&ZOPN)          SETC  'BRAS'                                      01385100
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL.S'                              01385200
.ZALVL6B              ANOP                                              01385300
&ZOPD(&ZOPN)          SETC  '++ IXLLIST ARG PARMS'                      01385400
.*                                                                      01385500
&ZOPN                 SETA  &ZOPN+1                                     01385600
&ZOPL(&ZOPN)          SETC  ' '                                         01385700
&ZOPO(&ZOPN)          SETC  'SPACE'                                     01385800
&ZOPV(&ZOPN)          SETC  '1'                                         01385900
&ZOPD(&ZOPN)          SETC  ' '                                         01386000
.*                                                                      01386100
.ZLMFSL2              ANOP  ,                                           01386200
.*-------------------------------------------------------------------   01386300
.***AM.L00  IXLLIST FMT=LIST name                                       01386400
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                    01386500
&ZOPN                 SETA &ZOPN+1                                      01386600
&ZOPL(&ZOPN)          SETC '&M0M0001'                                   01386700
&ZOPO(&ZOPN)          SETC 'EQU'                                        01386800
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                   01386900
&ZOPD(&ZOPN)          SETC '++ IXLLIST NAME'                            01387000
.ZLMFSL2M             ANOP  ,                                           01387100
.*-------------------------------------------------------------------   01387200
.***AM.L01  IXLLIST FMT=LIST PARAMETERS                                 01387300
&ZOPN                 SETA &ZOPN+1                                      01387400
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   01387500
&ZOPO(&ZOPN)          SETC 'DS'                                         01387600
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   01387700
&ZOPD(&ZOPN)          SETC '++ IXLLIST PARM LIST'                       01387800
.*-------------------------------------------------------------------   01387900
.***AM.L09  XSHL_DATA CL96                                              01388000
&ZOPN                 SETA &ZOPN+1                                      01388100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSHL_DATA'                        01388200
&ZOPO(&ZOPN)          SETC 'DS'                                         01388300
&ZOPV(&ZOPN)          SETC 'CL96'                                       01388400
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XSHL_DATA'                  01388500
.*-------------------------------------------------------------------   01388600
.***AM.L09  XMOB_DATA CL4                                               01388700
&ZOPN                 SETA &ZOPN+1                                      01388800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMOB_DATA'                        01388900
&ZOPO(&ZOPN)          SETC 'DS'                                         01389000
&ZOPV(&ZOPN)          SETC 'CL4'                                        01389100
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XMOB_DATA'                  01389200
.*-------------------------------------------------------------------   01389300
.***AM.L09  XMCB_DATA1 CL112                                            01389400
&ZOPN                 SETA &ZOPN+1                                      01389500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMCB_DATA1'                       01389600
&ZOPO(&ZOPN)          SETC 'DS'                                         01389700
&ZOPV(&ZOPN)          SETC 'CL112'                                      01389800
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XMCB_DATA1'                 01389900
.*-------------------------------------------------------------------   01390000
.***AM.L09  XMCB_DATA2 CL20                                             01390100
&ZOPN                 SETA &ZOPN+1                                      01390200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMCB_DATA2'                       01390300
&ZOPO(&ZOPN)          SETC 'DS'                                         01390400
&ZOPV(&ZOPN)          SETC 'CL20'                                       01390500
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XMCB_DATA2'                 01390600
.*-------------------------------------------------------------------   01390700
.***AM.MLM2 SAVED LOCATION COUNTER                                      01390800
                      AIF  (&XPLISTVER GE 1).ZL5LA                      01390900
                      AIF  ('&ZENDBASEPL' NE '').ZL5LA                  01391000
&ZENDBASEPL           SETC 'YES'                                        01391100
&ZOPN                 SETA &ZOPN+1                                      01391200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           01391300
&ZOPO(&ZOPN)          SETC 'EQU'                                        01391400
&ZOPV(&ZOPN)          SETC '*'                                          01391500
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       01391600
.ZL5LA                ANOP  ,                                           01391700
.*-------------------------------------------------------------------   01391800
.***AM.LVER1                                                            01391900
                      AIF  (&XPLISTVER LT 1).ZL5L                       01392000
.*-------------------------------------------------------------------   01392100
.*-------------------------------------------------------------------   01392200
.***AM.L09  XMCB_DATA3 CL44                                             01392300
&ZOPN                 SETA &ZOPN+1                                      01392400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMCB_DATA3'                       01392500
&ZOPO(&ZOPN)          SETC 'DS'                                         01392600
&ZOPV(&ZOPN)          SETC 'CL44'                                       01392700
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XMCB_DATA3'                 01392800
.*-------------------------------------------------------------------   01392900
.***AM.LVER2                                                            01393000
.ZL5L                 ANOP  ,                                           01393100
.*-------------------------------------------------------------------   01393200
.*-------------------------------------------------------------------   01393300
.***AM.LVER1                                                            01393400
                      AIF  (&XPLISTVER LT 1).ZL6L                       01393500
.*-------------------------------------------------------------------   01393600
.*-------------------------------------------------------------------   01393700
.***AM.MLM1 SAVED LOCATION COUNTER                                      01393800
                      AIF  ('&ZENDBASEPL' NE '').ZL6LB                  01393900
&ZENDBASEPL           SETC 'YES'                                        01394000
&ZOPN                 SETA &ZOPN+1                                      01394100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           01394200
&ZOPO(&ZOPN)          SETC 'EQU'                                        01394300
&ZOPV(&ZOPN)          SETC '*'                                          01394400
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       01394500
.ZL6LB                ANOP  ,                                           01394600
.*-------------------------------------------------------------------   01394700
.***AM.PJR1 DEFINED ON XMCB_DATA1                                       01394800
&ZOPN                 SETA &ZOPN+1                                      01394900
&ZOPL(&ZOPN)          SETC ' '                                          01395000
&ZOPO(&ZOPN)          SETC 'ORG'                                        01395100
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+100'                              01395200
&ZOPD(&ZOPN)          SETC ' '                                          01395300
.*-------------------------------------------------------------------   01395400
.***AM.LVER2                                                            01395500
.ZL6L                 ANOP  ,                                           01395600
.*-------------------------------------------------------------------   01395700
.*-------------------------------------------------------------------   01395800
.***AM.LVER1                                                            01395900
                      AIF  (&XPLISTVER LT 1).ZL7L                       01396000
.*-------------------------------------------------------------------   01396100
.*-------------------------------------------------------------------   01396200
.***AM.L09  XMCB_DATA CL176                                             01396300
&ZOPN                 SETA &ZOPN+1                                      01396400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMCB_DATA'                        01396500
&ZOPO(&ZOPN)          SETC 'DS'                                         01396600
&ZOPV(&ZOPN)          SETC 'CL176'                                      01396700
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XMCB_DATA'                  01396800
.*-------------------------------------------------------------------   01396900
.***AM.LVER2                                                            01397000
.ZL7L                 ANOP  ,                                           01397100
.*-------------------------------------------------------------------   01397200
.*-------------------------------------------------------------------   01397300
.***AM.PJR1 DEFINED ON XSHL_DATA                                        01397400
&ZOPN                 SETA &ZOPN+1                                      01397500
&ZOPL(&ZOPN)          SETC ' '                                          01397600
&ZOPO(&ZOPN)          SETC 'ORG'                                        01397700
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+0'                                01397800
&ZOPD(&ZOPN)          SETC ' '                                          01397900
.*-------------------------------------------------------------------   01398000
.***AM.L02 XVERSION XL1                                                 01398100
&ZOPN                 SETA &ZOPN+1                                      01398200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         01398300
&ZOPO(&ZOPN)          SETC 'DS'                                         01398400
&ZOPV(&ZOPN)          SETC 'XL1'                                        01398500
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          01398600
.*-------------------------------------------------------------------   01398700
.***AM.L09  XCMDCODE XL1                                                01398800
&ZOPN                 SETA &ZOPN+1                                      01398900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCMDCODE'                         01399000
&ZOPO(&ZOPN)          SETC 'DS'                                         01399100
&ZOPV(&ZOPN)          SETC 'XL1'                                        01399200
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XCMDCODE'                   01399300
.*-------------------------------------------------------------------   01399400
.***AM.L09  XSHLFLGS CL4                                                01399500
&ZOPN                 SETA &ZOPN+1                                      01399600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSHLFLGS'                         01399700
&ZOPO(&ZOPN)          SETC 'DS'                                         01399800
&ZOPV(&ZOPN)          SETC 'CL4'                                        01399900
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XSHLFLGS'                   01400000
.*-------------------------------------------------------------------   01400100
.***AM.L09  XRSV0102 CL2                                                01400200
&ZOPN                 SETA &ZOPN+1                                      01400300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0102'                         01400400
&ZOPO(&ZOPN)          SETC 'DS'                                         01400500
&ZOPV(&ZOPN)          SETC 'CL2'                                        01400600
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0102'                      01400700
.*-------------------------------------------------------------------   01400800
.***AM.L09  XCOMPCONID XL1                                              01400900
&ZOPN                 SETA &ZOPN+1                                      01401000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCOMPCONID'                       01401100
&ZOPO(&ZOPN)          SETC 'DS'                                         01401200
&ZOPV(&ZOPN)          SETC 'XL1'                                        01401300
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XCOMPCONID'                 01401400
.*-------------------------------------------------------------------   01401500
.***AM.L09  XBUFSTGKEY BL.8                                             01401600
&ZOPN                 SETA &ZOPN+1                                      01401700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFSTGKEY'                       01401800
&ZOPO(&ZOPN)          SETC 'DS'                                         01401900
&ZOPV(&ZOPN)          SETC 'BL.8'                                       01402000
&ZOPD(&ZOPN)          SETC '++ &ZXBUFSTGKEY  XBUFSTGKEY'                01402100
.*-------------------------------------------------------------------   01402200
.***AM.L09  XANSLEN XL2                                                 01402300
&ZOPN                 SETA &ZOPN+1                                      01402400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XANSLEN'                          01402500
&ZOPO(&ZOPN)          SETC 'DS'                                         01402600
&ZOPV(&ZOPN)          SETC 'XL2'                                        01402700
&ZOPD(&ZOPN)          SETC '++ &ZXANSLEN  XANSLEN'                      01402800
.*-------------------------------------------------------------------   01402900
.***AM.L09  XCONTOKEN CL16                                              01403000
&ZOPN                 SETA &ZOPN+1                                      01403100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCONTOKEN'                        01403200
&ZOPO(&ZOPN)          SETC 'DS'                                         01403300
&ZOPV(&ZOPN)          SETC 'CL16'                                       01403400
&ZOPD(&ZOPN)          SETC '++ &ZXCONTOKEN  XCONTOKEN'                  01403500
.*-------------------------------------------------------------------   01403600
.***AM.L09  XDATADDR CL12                                               01403700
&ZOPN                 SETA &ZOPN+1                                      01403800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XDATADDR'                         01403900
&ZOPO(&ZOPN)          SETC 'DS'                                         01404000
&ZOPV(&ZOPN)          SETC 'CL12'                                       01404100
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XDATADDR'                   01404200
.*-------------------------------------------------------------------   01404300
.***AM.L09  XADJADDR CL8                                                01404400
&ZOPN                 SETA &ZOPN+1                                      01404500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XADJADDR'                         01404600
&ZOPO(&ZOPN)          SETC 'DS'                                         01404700
&ZOPV(&ZOPN)          SETC 'CL8'                                        01404800
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XADJADDR'                   01404900
.*-------------------------------------------------------------------   01405000
.***AM.L09  XANSADDR CL8                                                01405100
&ZOPN                 SETA &ZOPN+1                                      01405200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XANSADDR'                         01405300
&ZOPO(&ZOPN)          SETC 'DS'                                         01405400
&ZOPV(&ZOPN)          SETC 'CL8'                                        01405500
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XANSADDR'                   01405600
.*-------------------------------------------------------------------   01405700
.***AM.L09  XREQDATA CL8                                                01405800
&ZOPN                 SETA &ZOPN+1                                      01405900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQDATA'                         01406000
&ZOPO(&ZOPN)          SETC 'DS'                                         01406100
&ZOPV(&ZOPN)          SETC 'CL8'                                        01406200
&ZOPD(&ZOPN)          SETC '++ &ZXREQDATA  XREQDATA'                    01406300
.*-------------------------------------------------------------------   01406400
.***AM.L09  XREQID CL8                                                  01406500
&ZOPN                 SETA &ZOPN+1                                      01406600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQID'                           01406700
&ZOPO(&ZOPN)          SETC 'DS'                                         01406800
&ZOPV(&ZOPN)          SETC 'CL8'                                        01406900
&ZOPD(&ZOPN)          SETC '++ &ZXREQID  XREQID'                        01407000
.*-------------------------------------------------------------------   01407100
.***AM.L09  XOPTIONALDATA CL16                                          01407200
&ZOPN                 SETA &ZOPN+1                                      01407300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XOPTIONALDATA'                    01407400
&ZOPO(&ZOPN)          SETC 'DS'                                         01407500
&ZOPV(&ZOPN)          SETC 'CL16'                                       01407600
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XOPTIONALDATA'              01407700
.*-------------------------------------------------------------------   01407800
.***AM.L09  XRSV0103 CL8                                                01407900
&ZOPN                 SETA &ZOPN+1                                      01408000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0103'                         01408100
&ZOPO(&ZOPN)          SETC 'DS'                                         01408200
&ZOPV(&ZOPN)          SETC 'CL8'                                        01408300
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0103'                      01408400
.*-------------------------------------------------------------------   01408500
.***AM.PJR1 DEFINED ON XSHLFLGS                                         01408600
&ZOPN                 SETA &ZOPN+1                                      01408700
&ZOPL(&ZOPN)          SETC ' '                                          01408800
&ZOPO(&ZOPN)          SETC 'ORG'                                        01408900
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+2'                                01409000
&ZOPD(&ZOPN)          SETC ' '                                          01409100
.*-------------------------------------------------------------------   01409200
.***AM.L03 XSHLFLGS1 BL.8                                               01409300
&ZOPN                 SETA &ZOPN+1                                      01409400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSHLFLGS1'                        01409500
&ZOPO(&ZOPN)          SETC 'DS'                                         01409600
&ZOPV(&ZOPN)          SETC 'BL.8'                                       01409700
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             01409800
.*                                                                      01409900
&ZOPN                 SETA  &ZOPN+1                                     01410000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_BUFFER'                  01410100
&ZOPO(&ZOPN)          SETC  'EQU'                                       01410200
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             01410300
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               01410400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).BUFFER'                       01410500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01410600
.*                                                                      01410700
&ZOPN                 SETA  &ZOPN+1                                     01410800
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_BUFLIST'                 01410900
&ZOPO(&ZOPN)          SETC  'EQU'                                       01411000
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             01411100
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               01411200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).BUFLIST'                      01411300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01411400
.*                                                                      01411500
&ZOPN                 SETA  &ZOPN+1                                     01411600
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_ADJAREA'                 01411700
&ZOPO(&ZOPN)          SETC  'EQU'                                       01411800
&ZOPV(&ZOPN)          SETC  'B''00100000'''                             01411900
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               01412000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ADJAREA'                      01412100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01412200
.*                                                                      01412300
&ZOPN                 SETA  &ZOPN+1                                     01412400
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_ANSAREA'                 01412500
&ZOPO(&ZOPN)          SETC  'EQU'                                       01412600
&ZOPV(&ZOPN)          SETC  'B''00010000'''                             01412700
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               01412800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ANSAREA'                      01412900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01413000
.*                                                                      01413100
&ZOPN                 SETA  &ZOPN+1                                     01413200
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XPAGEABLE_NO'                    01413300
&ZOPO(&ZOPN)          SETC  'EQU'                                       01413400
&ZOPV(&ZOPN)          SETC  'B''00001000'''                             01413500
&ZOPD(&ZOPN)          SETC  '++ XPAGEABLE.'                             01413600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).NO'                           01413700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01413800
.*                                                                      01413900
&ZOPN                 SETA  &ZOPN+1                                     01414000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_BUFSTGKEY'               01414100
&ZOPO(&ZOPN)          SETC  'EQU'                                       01414200
&ZOPV(&ZOPN)          SETC  'B''00000100'''                             01414300
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               01414400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).BUFSTGKEY'                    01414500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01414600
.*                                                                      01414700
&ZOPN                 SETA  &ZOPN+1                                     01414800
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XBUFADDRTYPE_REAL'               01414900
&ZOPO(&ZOPN)          SETC  'EQU'                                       01415000
&ZOPV(&ZOPN)          SETC  'B''00000010'''                             01415100
&ZOPD(&ZOPN)          SETC  '++ XBUFADDRTYPE.'                          01415200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).REAL'                         01415300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01415400
.*-------------------------------------------------------------------   01415500
.***AM.L03 XSHLFLGS2 BL.8                                               01415600
&ZOPN                 SETA &ZOPN+1                                      01415700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSHLFLGS2'                        01415800
&ZOPO(&ZOPN)          SETC 'DS'                                         01415900
&ZOPV(&ZOPN)          SETC 'BL.8'                                       01416000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             01416100
.*                                                                      01416200
&ZOPN                 SETA  &ZOPN+1                                     01416300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XMODE_SYNCECB'                   01416400
&ZOPO(&ZOPN)          SETC  'EQU'                                       01416500
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             01416600
&ZOPD(&ZOPN)          SETC  '++ XMODE.'                                 01416700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SYNCECB'                      01416800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01416900
.*                                                                      01417000
&ZOPN                 SETA  &ZOPN+1                                     01417100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XMODE_SYNCEXIT'                  01417200
&ZOPO(&ZOPN)          SETC  'EQU'                                       01417300
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             01417400
&ZOPD(&ZOPN)          SETC  '++ XMODE.'                                 01417500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SYNCEXIT'                     01417600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01417700
.*                                                                      01417800
&ZOPN                 SETA  &ZOPN+1                                     01417900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XMODE_SYNCTOKEN'                 01418000
&ZOPO(&ZOPN)          SETC  'EQU'                                       01418100
&ZOPV(&ZOPN)          SETC  'B''00100000'''                             01418200
&ZOPD(&ZOPN)          SETC  '++ XMODE.'                                 01418300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SYNCTOKEN'                    01418400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01418500
.*                                                                      01418600
&ZOPN                 SETA  &ZOPN+1                                     01418700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XMODE_ASYNCECB'                  01418800
&ZOPO(&ZOPN)          SETC  'EQU'                                       01418900
&ZOPV(&ZOPN)          SETC  'B''00010000'''                             01419000
&ZOPD(&ZOPN)          SETC  '++ XMODE.'                                 01419100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ASYNCECB'                     01419200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01419300
.*                                                                      01419400
&ZOPN                 SETA  &ZOPN+1                                     01419500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XMODE_ASYNCEXIT'                 01419600
&ZOPO(&ZOPN)          SETC  'EQU'                                       01419700
&ZOPV(&ZOPN)          SETC  'B''00001000'''                             01419800
&ZOPD(&ZOPN)          SETC  '++ XMODE.'                                 01419900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ASYNCEXIT'                    01420000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01420100
.*                                                                      01420200
&ZOPN                 SETA  &ZOPN+1                                     01420300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XMODE_ASYNCTOKEN'                01420400
&ZOPO(&ZOPN)          SETC  'EQU'                                       01420500
&ZOPV(&ZOPN)          SETC  'B''00000100'''                             01420600
&ZOPD(&ZOPN)          SETC  '++ XMODE.'                                 01420700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ASYNCTOKEN'                   01420800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01420900
.*                                                                      01421000
&ZOPN                 SETA  &ZOPN+1                                     01421100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XMODE_ASYNCNORESPONSE'           01421200
&ZOPO(&ZOPN)          SETC  'EQU'                                       01421300
&ZOPV(&ZOPN)          SETC  'B''00000010'''                             01421400
&ZOPD(&ZOPN)          SETC  '++ XMODE.'                                 01421500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ASYNCNORESPONSE'              01421600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01421700
.*-------------------------------------------------------------------   01421800
.***AM.L03 XSHLFLGS3 BL.8                                               01421900
&ZOPN                 SETA &ZOPN+1                                      01422000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSHLFLGS3'                        01422100
&ZOPO(&ZOPN)          SETC 'DS'                                         01422200
&ZOPV(&ZOPN)          SETC 'BL.8'                                       01422300
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             01422400
.*                                                                      01422500
&ZOPN                 SETA  &ZOPN+1                                     01422600
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XLOCKOPER_SET'                   01422700
&ZOPO(&ZOPN)          SETC  'EQU'                                       01422800
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             01422900
&ZOPD(&ZOPN)          SETC  '++ XLOCKOPER.'                             01423000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SET'                          01423100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01423200
.*                                                                      01423300
&ZOPN                 SETA  &ZOPN+1                                     01423400
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XLOCKOPER_RESET'                 01423500
&ZOPO(&ZOPN)          SETC  'EQU'                                       01423600
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             01423700
&ZOPD(&ZOPN)          SETC  '++ XLOCKOPER.'                             01423800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).RESET'                        01423900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01424000
.*                                                                      01424100
&ZOPN                 SETA  &ZOPN+1                                     01424200
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XLOCKOPER_NOTHELD'               01424300
&ZOPO(&ZOPN)          SETC  'EQU'                                       01424400
&ZOPV(&ZOPN)          SETC  'B''00100000'''                             01424500
&ZOPD(&ZOPN)          SETC  '++ XLOCKOPER.'                             01424600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).NOTHELD'                      01424700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01424800
.*                                                                      01424900
&ZOPN                 SETA  &ZOPN+1                                     01425000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XLOCKOPER_HELDBY'                01425100
&ZOPO(&ZOPN)          SETC  'EQU'                                       01425200
&ZOPV(&ZOPN)          SETC  'B''00010000'''                             01425300
&ZOPD(&ZOPN)          SETC  '++ XLOCKOPER.'                             01425400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).HELDBY'                       01425500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01425600
.*                                                                      01425700
&ZOPN                 SETA  &ZOPN+1                                     01425800
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XLOCKOPER_TEST'                  01425900
&ZOPO(&ZOPN)          SETC  'EQU'                                       01426000
&ZOPV(&ZOPN)          SETC  'B''00001000'''                             01426100
&ZOPD(&ZOPN)          SETC  '++ XLOCKOPER.'                             01426200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).TEST'                         01426300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01426400
.*                                                                      01426500
&ZOPN                 SETA  &ZOPN+1                                     01426600
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XLOCKOPER_READNEXT'              01426700
&ZOPO(&ZOPN)          SETC  'EQU'                                       01426800
&ZOPV(&ZOPN)          SETC  'B''00000100'''                             01426900
&ZOPD(&ZOPN)          SETC  '++ XLOCKOPER.'                             01427000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).READNEXT'                     01427100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01427200
.*                                                                      01427300
&ZOPN                 SETA  &ZOPN+1                                     01427400
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XLOCKMODE_COND'                  01427500
&ZOPO(&ZOPN)          SETC  'EQU'                                       01427600
&ZOPV(&ZOPN)          SETC  'B''00000010'''                             01427700
&ZOPD(&ZOPN)          SETC  '++ XLOCKMODE.'                             01427800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).COND'                         01427900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01428000
.*                                                                      01428100
&ZOPN                 SETA  &ZOPN+1                                     01428200
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_LOCKCOMP'                01428300
&ZOPO(&ZOPN)          SETC  'EQU'                                       01428400
&ZOPV(&ZOPN)          SETC  'B''00000001'''                             01428500
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               01428600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).LOCKCOMP'                     01428700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01428800
.*-------------------------------------------------------------------   01428900
.***AM.L03 XSHLFLGS4 BL.8                                               01429000
&ZOPN                 SETA &ZOPN+1                                      01429100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSHLFLGS4'                        01429200
&ZOPO(&ZOPN)          SETC 'DS'                                         01429300
&ZOPV(&ZOPN)          SETC 'BL.8'                                       01429400
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             01429500
.*                                                                      01429600
&ZOPN                 SETA  &ZOPN+1                                     01429700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XTYPE_ADJDATA'                   01429800
&ZOPO(&ZOPN)          SETC  'EQU'                                       01429900
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             01430000
&ZOPD(&ZOPN)          SETC  '++ XTYPE.'                                 01430100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ADJDATA'                      01430200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01430300
.*                                                                      01430400
&ZOPN                 SETA  &ZOPN+1                                     01430500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XTYPE_ECONTROLS'                 01430600
&ZOPO(&ZOPN)          SETC  'EQU'                                       01430700
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             01430800
&ZOPD(&ZOPN)          SETC  '++ XTYPE.'                                 01430900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ECONTROLS'                    01431000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01431100
.*                                                                      01431200
&ZOPN                 SETA  &ZOPN+1                                     01431300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_EXTRESTOKEN'             01431400
&ZOPO(&ZOPN)          SETC  'EQU'                                       01431500
&ZOPV(&ZOPN)          SETC  'B''00100000'''                             01431600
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               01431700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).EXTRESTOKEN'                  01431800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01431900
.*                                                                      01432000
&ZOPN                 SETA  &ZOPN+1                                     01432100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._RCVRYREQASYNC'                   01432200
&ZOPO(&ZOPN)          SETC  'EQU'                                       01432300
&ZOPV(&ZOPN)          SETC  'B''00000001'''                             01432400
&ZOPD(&ZOPN)          SETC  '++ MACUSED.'                               01432500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).LIST'                         01432600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01432700
.*-------------------------------------------------------------------   01432800
.***AM.PJR1 DEFINED ON XCONTOKEN                                        01432900
&ZOPN                 SETA &ZOPN+1                                      01433000
&ZOPL(&ZOPN)          SETC ' '                                          01433100
&ZOPO(&ZOPN)          SETC 'ORG'                                        01433200
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+12'                               01433300
&ZOPD(&ZOPN)          SETC ' '                                          01433400
.*-------------------------------------------------------------------   01433500
.***AM.L09  XRSV0201 CL13                                               01433600
&ZOPN                 SETA &ZOPN+1                                      01433700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0201'                         01433800
&ZOPO(&ZOPN)          SETC 'DS'                                         01433900
&ZOPV(&ZOPN)          SETC 'CL13'                                       01434000
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0201'                      01434100
.*-------------------------------------------------------------------   01434200
.***AM.L09  XCONID XL1                                                  01434300
&ZOPN                 SETA &ZOPN+1                                      01434400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCONID'                           01434500
&ZOPO(&ZOPN)          SETC 'DS'                                         01434600
&ZOPV(&ZOPN)          SETC 'XL1'                                        01434700
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XCONID'                     01434800
.*-------------------------------------------------------------------   01434900
.***AM.L09  XRSV0202 CL2                                                01435000
&ZOPN                 SETA &ZOPN+1                                      01435100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0202'                         01435200
&ZOPO(&ZOPN)          SETC 'DS'                                         01435300
&ZOPV(&ZOPN)          SETC 'CL2'                                        01435400
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0202'                      01435500
.*-------------------------------------------------------------------   01435600
.***AM.PJR1 DEFINED ON XDATADDR                                         01435700
&ZOPN                 SETA &ZOPN+1                                      01435800
&ZOPL(&ZOPN)          SETC ' '                                          01435900
&ZOPO(&ZOPN)          SETC 'ORG'                                        01436000
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+28'                               01436100
&ZOPD(&ZOPN)          SETC ' '                                          01436200
.*-------------------------------------------------------------------   01436300
.***AM.L09 ALET XBUFFER F                                               01436400
&ZOPN                 SETA &ZOPN+1                                      01436500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFFER_ALET'                     01436600
&ZOPO(&ZOPN)          SETC 'DS'                                         01436700
&ZOPV(&ZOPN)          SETC 'F'                                          01436800
&ZOPD(&ZOPN)          SETC '++ &ZXBUFFER ALET XBUFFER'                  01436900
.*-------------------------------------------------------------------   01437000
.***AM.L09  XBUFSIZE F                                                  01437100
&ZOPN                 SETA &ZOPN+1                                      01437200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFSIZE'                         01437300
&ZOPO(&ZOPN)          SETC 'DS'                                         01437400
&ZOPV(&ZOPN)          SETC 'F'                                          01437500
&ZOPD(&ZOPN)          SETC '++ &ZXBUFSIZE  XBUFSIZE'                    01437600
.*-------------------------------------------------------------------   01437700
.***AM.L09  XBUFFER A                                                   01437800
&ZOPN                 SETA &ZOPN+1                                      01437900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFFER'                          01438000
&ZOPO(&ZOPN)          SETC 'DS'                                         01438100
&ZOPV(&ZOPN)          SETC 'A'                                          01438200
&ZOPD(&ZOPN)          SETC '++ &ZXBUFFER  XBUFFER'                      01438300
.*-------------------------------------------------------------------   01438400
.***AM.PJR1 DEFINED ON XDATADDR                                         01438500
&ZOPN                 SETA &ZOPN+1                                      01438600
&ZOPL(&ZOPN)          SETC ' '                                          01438700
&ZOPO(&ZOPN)          SETC 'ORG'                                        01438800
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+28'                               01438900
&ZOPD(&ZOPN)          SETC ' '                                          01439000
.*-------------------------------------------------------------------   01439100
.***AM.L09  XBUFALET F                                                  01439200
&ZOPN                 SETA &ZOPN+1                                      01439300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFALET'                         01439400
&ZOPO(&ZOPN)          SETC 'DS'                                         01439500
&ZOPV(&ZOPN)          SETC 'F'                                          01439600
&ZOPD(&ZOPN)          SETC '++ &ZXBUFALET  XBUFALET'                    01439700
.*-------------------------------------------------------------------   01439800
.***AM.L09 ALET XBUFLIST F                                              01439900
&ZOPN                 SETA &ZOPN+1                                      01440000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFLIST_ALET'                    01440100
&ZOPO(&ZOPN)          SETC 'DS'                                         01440200
&ZOPV(&ZOPN)          SETC 'F'                                          01440300
&ZOPD(&ZOPN)          SETC '++ &ZXBUFLIST ALET XBUFLIST'                01440400
.*-------------------------------------------------------------------   01440500
.***AM.L09  XBUFLIST A                                                  01440600
&ZOPN                 SETA &ZOPN+1                                      01440700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFLIST'                         01440800
&ZOPO(&ZOPN)          SETC 'DS'                                         01440900
&ZOPV(&ZOPN)          SETC 'A'                                          01441000
&ZOPD(&ZOPN)          SETC '++ &ZXBUFLIST  XBUFLIST'                    01441100
.*-------------------------------------------------------------------   01441200
.***AM.PJR1 DEFINED ON XADJADDR                                         01441300
&ZOPN                 SETA &ZOPN+1                                      01441400
&ZOPL(&ZOPN)          SETC ' '                                          01441500
&ZOPO(&ZOPN)          SETC 'ORG'                                        01441600
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+40'                               01441700
&ZOPD(&ZOPN)          SETC ' '                                          01441800
.*-------------------------------------------------------------------   01441900
.***AM.L09 ALET XADJAREA F                                              01442000
&ZOPN                 SETA &ZOPN+1                                      01442100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XADJAREA_ALET'                    01442200
&ZOPO(&ZOPN)          SETC 'DS'                                         01442300
&ZOPV(&ZOPN)          SETC 'F'                                          01442400
&ZOPD(&ZOPN)          SETC '++ &ZXADJAREA ALET XADJAREA'                01442500
.*-------------------------------------------------------------------   01442600
.***AM.L09  XADJAREA A                                                  01442700
&ZOPN                 SETA &ZOPN+1                                      01442800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XADJAREA'                         01442900
&ZOPO(&ZOPN)          SETC 'DS'                                         01443000
&ZOPV(&ZOPN)          SETC 'A'                                          01443100
&ZOPD(&ZOPN)          SETC '++ &ZXADJAREA  XADJAREA'                    01443200
.*-------------------------------------------------------------------   01443300
.***AM.PJR1 DEFINED ON XADJADDR                                         01443400
&ZOPN                 SETA &ZOPN+1                                      01443500
&ZOPL(&ZOPN)          SETC ' '                                          01443600
&ZOPO(&ZOPN)          SETC 'ORG'                                        01443700
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+40'                               01443800
&ZOPD(&ZOPN)          SETC ' '                                          01443900
.*-------------------------------------------------------------------   01444000
.***AM.L09 ALET XMOSVECTOR F                                            01444100
&ZOPN                 SETA &ZOPN+1                                      01444200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMOSVECTOR_ALET'                  01444300
&ZOPO(&ZOPN)          SETC 'DS'                                         01444400
&ZOPV(&ZOPN)          SETC 'F'                                          01444500
&ZOPD(&ZOPN)          SETC '++ &ZXMOSVECTOR ALET XMOSVECTOR'            01444600
.*-------------------------------------------------------------------   01444700
.***AM.L09  XMOSVECTOR A                                                01444800
&ZOPN                 SETA &ZOPN+1                                      01444900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMOSVECTOR'                       01445000
&ZOPO(&ZOPN)          SETC 'DS'                                         01445100
&ZOPV(&ZOPN)          SETC 'A'                                          01445200
&ZOPD(&ZOPN)          SETC '++ &ZXMOSVECTOR  XMOSVECTOR'                01445300
.*-------------------------------------------------------------------   01445400
.***AM.PJR1 DEFINED ON XANSADDR                                         01445500
&ZOPN                 SETA &ZOPN+1                                      01445600
&ZOPL(&ZOPN)          SETC ' '                                          01445700
&ZOPO(&ZOPN)          SETC 'ORG'                                        01445800
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+48'                               01445900
&ZOPD(&ZOPN)          SETC ' '                                          01446000
.*-------------------------------------------------------------------   01446100
.***AM.L09 ALET XANSAREA F                                              01446200
&ZOPN                 SETA &ZOPN+1                                      01446300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XANSAREA_ALET'                    01446400
&ZOPO(&ZOPN)          SETC 'DS'                                         01446500
&ZOPV(&ZOPN)          SETC 'F'                                          01446600
&ZOPD(&ZOPN)          SETC '++ &ZXANSAREA ALET XANSAREA'                01446700
.*-------------------------------------------------------------------   01446800
.***AM.L09  XANSAREA A                                                  01446900
&ZOPN                 SETA &ZOPN+1                                      01447000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XANSAREA'                         01447100
&ZOPO(&ZOPN)          SETC 'DS'                                         01447200
&ZOPV(&ZOPN)          SETC 'A'                                          01447300
&ZOPD(&ZOPN)          SETC '++ &ZXANSAREA  XANSAREA'                    01447400
.*-------------------------------------------------------------------   01447500
.***AM.PJR1 DEFINED ON XREQDATA                                         01447600
&ZOPN                 SETA &ZOPN+1                                      01447700
&ZOPL(&ZOPN)          SETC ' '                                          01447800
&ZOPO(&ZOPN)          SETC 'ORG'                                        01447900
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+56'                               01448000
&ZOPD(&ZOPN)          SETC ' '                                          01448100
.*-------------------------------------------------------------------   01448200
.***AM.L09  XREQECB A                                                   01448300
&ZOPN                 SETA &ZOPN+1                                      01448400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQECB'                          01448500
&ZOPO(&ZOPN)          SETC 'DS'                                         01448600
&ZOPV(&ZOPN)          SETC 'A'                                          01448700
&ZOPD(&ZOPN)          SETC '++ &ZXREQECB  XREQECB'                      01448800
.*-------------------------------------------------------------------   01448900
.***AM.L09  XRSV0203 CL4                                                01449000
&ZOPN                 SETA &ZOPN+1                                      01449100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0203'                         01449200
&ZOPO(&ZOPN)          SETC 'DS'                                         01449300
&ZOPV(&ZOPN)          SETC 'CL4'                                        01449400
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0203'                      01449500
.*-------------------------------------------------------------------   01449600
.***AM.PJR1 DEFINED ON XREQDATA                                         01449700
&ZOPN                 SETA &ZOPN+1                                      01449800
&ZOPL(&ZOPN)          SETC ' '                                          01449900
&ZOPO(&ZOPN)          SETC 'ORG'                                        01450000
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+56'                               01450100
&ZOPD(&ZOPN)          SETC ' '                                          01450200
.*-------------------------------------------------------------------   01450300
.***AM.L09 ALET XREQTOKEN F                                             01450400
&ZOPN                 SETA &ZOPN+1                                      01450500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQTOKEN_ALET'                   01450600
&ZOPO(&ZOPN)          SETC 'DS'                                         01450700
&ZOPV(&ZOPN)          SETC 'F'                                          01450800
&ZOPD(&ZOPN)          SETC '++ &ZXREQTOKEN ALET XREQTOKEN'              01450900
.*-------------------------------------------------------------------   01451000
.***AM.L09  XREQTOKEN A                                                 01451100
&ZOPN                 SETA &ZOPN+1                                      01451200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQTOKEN'                        01451300
&ZOPO(&ZOPN)          SETC 'DS'                                         01451400
&ZOPV(&ZOPN)          SETC 'A'                                          01451500
&ZOPD(&ZOPN)          SETC '++ &ZXREQTOKEN  XREQTOKEN'                  01451600
.*-------------------------------------------------------------------   01451700
.***AM.PJR1 DEFINED ON XOPTIONALDATA                                    01451800
&ZOPN                 SETA &ZOPN+1                                      01451900
&ZOPL(&ZOPN)          SETC ' '                                          01452000
&ZOPO(&ZOPN)          SETC 'ORG'                                        01452100
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+72'                               01452200
&ZOPD(&ZOPN)          SETC ' '                                          01452300
.*-------------------------------------------------------------------   01452400
.***AM.L09  XLOCKDATA CL8                                               01452500
&ZOPN                 SETA &ZOPN+1                                      01452600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XLOCKDATA'                        01452700
&ZOPO(&ZOPN)          SETC 'DS'                                         01452800
&ZOPV(&ZOPN)          SETC 'CL8'                                        01452900
&ZOPD(&ZOPN)          SETC '++ &ZXLOCKDATA  XLOCKDATA'                  01453000
.*-------------------------------------------------------------------   01453100
.***AM.L09  XRSV0204 CL8                                                01453200
&ZOPN                 SETA &ZOPN+1                                      01453300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0204'                         01453400
&ZOPO(&ZOPN)          SETC 'DS'                                         01453500
&ZOPV(&ZOPN)          SETC 'CL8'                                        01453600
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0204'                      01453700
.*-------------------------------------------------------------------   01453800
.***AM.PJR1 DEFINED ON XOPTIONALDATA                                    01453900
&ZOPN                 SETA &ZOPN+1                                      01454000
&ZOPL(&ZOPN)          SETC ' '                                          01454100
&ZOPO(&ZOPN)          SETC 'ORG'                                        01454200
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+72'                               01454300
&ZOPD(&ZOPN)          SETC ' '                                          01454400
.*-------------------------------------------------------------------   01454500
.***AM.L09  XEXTRESTOKEN CL16                                           01454600
&ZOPN                 SETA &ZOPN+1                                      01454700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XEXTRESTOKEN'                     01454800
&ZOPO(&ZOPN)          SETC 'DS'                                         01454900
&ZOPV(&ZOPN)          SETC 'CL16'                                       01455000
&ZOPD(&ZOPN)          SETC '++ &ZXEXTRESTOKEN  XEXTRESTOKEN'            01455100
.*-------------------------------------------------------------------   01455200
.***AM.PJR1 DEFINED ON XEXTRESTOKEN                                     01455300
&ZOPN                 SETA &ZOPN+1                                      01455400
&ZOPL(&ZOPN)          SETC ' '                                          01455500
&ZOPO(&ZOPN)          SETC 'ORG'                                        01455600
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+72'                               01455700
&ZOPD(&ZOPN)          SETC ' '                                          01455800
.*-------------------------------------------------------------------   01455900
.***AM.L09  XEXTRESTOKENTKN CL8                                         01456000
&ZOPN                 SETA &ZOPN+1                                      01456100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XEXTRESTOKENTKN'                  01456200
&ZOPO(&ZOPN)          SETC 'DS'                                         01456300
&ZOPV(&ZOPN)          SETC 'CL8'                                        01456400
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XEXTRESTOKENTKN'            01456500
.*-------------------------------------------------------------------   01456600
.***AM.L09  XEXTRESTOKENPSVN CL8                                        01456700
&ZOPN                 SETA &ZOPN+1                                      01456800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XEXTRESTOKENPSVN'                 01456900
&ZOPO(&ZOPN)          SETC 'DS'                                         01457000
&ZOPV(&ZOPN)          SETC 'CL8'                                        01457100
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XEXTRESTOKENPSVN'           01457200
.*-------------------------------------------------------------------   01457300
.***AM.PJR1 DEFINED ON XMOB_DATA                                        01457400
&ZOPN                 SETA &ZOPN+1                                      01457500
&ZOPL(&ZOPN)          SETC ' '                                          01457600
&ZOPO(&ZOPN)          SETC 'ORG'                                        01457700
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+96'                               01457800
&ZOPD(&ZOPN)          SETC ' '                                          01457900
.*-------------------------------------------------------------------   01458000
.***AM.L09  XCMDLEN XL2                                                 01458100
&ZOPN                 SETA &ZOPN+1                                      01458200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCMDLEN'                          01458300
&ZOPO(&ZOPN)          SETC 'DS'                                         01458400
&ZOPV(&ZOPN)          SETC 'XL2'                                        01458500
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XCMDLEN'                    01458600
.*-------------------------------------------------------------------   01458700
.***AM.L09  XBUFNUM XL1                                                 01458800
&ZOPN                 SETA &ZOPN+1                                      01458900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFNUM'                          01459000
&ZOPO(&ZOPN)          SETC 'DS'                                         01459100
&ZOPV(&ZOPN)          SETC 'XL1'                                        01459200
&ZOPD(&ZOPN)          SETC '++ &ZXBUFNUM  XBUFNUM'                      01459300
.*-------------------------------------------------------------------   01459400
.***AM.L09  XBUFINCRNUM XL1                                             01459500
&ZOPN                 SETA &ZOPN+1                                      01459600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFINCRNUM'                      01459700
&ZOPO(&ZOPN)          SETC 'DS'                                         01459800
&ZOPV(&ZOPN)          SETC 'XL1'                                        01459900
&ZOPD(&ZOPN)          SETC '++ &ZXBUFINCRNUM  XBUFINCRNUM'              01460000
.*-------------------------------------------------------------------   01460100
.***AM.PJR1 DEFINED ON XMCB_DATA1                                       01460200
&ZOPN                 SETA &ZOPN+1                                      01460300
&ZOPL(&ZOPN)          SETC ' '                                          01460400
&ZOPO(&ZOPN)          SETC 'ORG'                                        01460500
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+100'                              01460600
&ZOPD(&ZOPN)          SETC ' '                                          01460700
.*-------------------------------------------------------------------   01460800
.***AM.L09  XCCA CL1                                                    01460900
&ZOPN                 SETA &ZOPN+1                                      01461000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCCA'                             01461100
&ZOPO(&ZOPN)          SETC 'DS'                                         01461200
&ZOPV(&ZOPN)          SETC 'CL1'                                        01461300
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XCCA'                       01461400
.*-------------------------------------------------------------------   01461500
.***AM.L09  XCCB CL1                                                    01461600
&ZOPN                 SETA &ZOPN+1                                      01461700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCCB'                             01461800
&ZOPO(&ZOPN)          SETC 'DS'                                         01461900
&ZOPV(&ZOPN)          SETC 'CL1'                                        01462000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XCCB'                       01462100
.*-------------------------------------------------------------------   01462200
.***AM.L09  XRSV0501 CL2                                                01462300
&ZOPN                 SETA &ZOPN+1                                      01462400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0501'                         01462500
&ZOPO(&ZOPN)          SETC 'DS'                                         01462600
&ZOPV(&ZOPN)          SETC 'CL2'                                        01462700
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0501'                      01462800
.*-------------------------------------------------------------------   01462900
.***AM.L09  XCMDFLGS1 BL.32                                             01463000
&ZOPN                 SETA &ZOPN+1                                      01463100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCMDFLGS1'                        01463200
&ZOPO(&ZOPN)          SETC 'DS'                                         01463300
&ZOPV(&ZOPN)          SETC 'BL.32'                                      01463400
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XCMDFLGS1'                  01463500
.*-------------------------------------------------------------------   01463600
.***AM.L09  XB8TO11 CL4                                                 01463700
&ZOPN                 SETA &ZOPN+1                                      01463800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XB8TO11'                          01463900
&ZOPO(&ZOPN)          SETC 'DS'                                         01464000
&ZOPV(&ZOPN)          SETC 'CL4'                                        01464100
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XB8TO11'                    01464200
.*-------------------------------------------------------------------   01464300
.***AM.L09  XLOCKINDEX F                                                01464400
&ZOPN                 SETA &ZOPN+1                                      01464500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XLOCKINDEX'                       01464600
&ZOPO(&ZOPN)          SETC 'DS'                                         01464700
&ZOPV(&ZOPN)          SETC 'F'                                          01464800
&ZOPD(&ZOPN)          SETC '++ &ZXLOCKINDEX  XLOCKINDEX'                01464900
.*-------------------------------------------------------------------   01465000
.***AM.L09  XLISTNUM F                                                  01465100
&ZOPN                 SETA &ZOPN+1                                      01465200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XLISTNUM'                         01465300
&ZOPO(&ZOPN)          SETC 'DS'                                         01465400
&ZOPV(&ZOPN)          SETC 'F'                                          01465500
&ZOPD(&ZOPN)          SETC '++ &ZXLISTNUM  XLISTNUM'                    01465600
.*-------------------------------------------------------------------   01465700
.***AM.L09  XENTRYID CL12                                               01465800
&ZOPN                 SETA &ZOPN+1                                      01465900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XENTRYID'                         01466000
&ZOPO(&ZOPN)          SETC 'DS'                                         01466100
&ZOPV(&ZOPN)          SETC 'CL12'                                       01466200
&ZOPD(&ZOPN)          SETC '++ &ZXENTRYID  XENTRYID'                    01466300
.*-------------------------------------------------------------------   01466400
.***AM.L09  XNEWVERS CL8                                                01466500
&ZOPN                 SETA &ZOPN+1                                      01466600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XNEWVERS'                         01466700
&ZOPO(&ZOPN)          SETC 'DS'                                         01466800
&ZOPV(&ZOPN)          SETC 'CL8'                                        01466900
&ZOPD(&ZOPN)          SETC '++ &ZXNEWVERS  XNEWVERS'                    01467000
.*-------------------------------------------------------------------   01467100
.***AM.L09  XVERSCOMP CL8                                               01467200
&ZOPN                 SETA &ZOPN+1                                      01467300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSCOMP'                        01467400
&ZOPO(&ZOPN)          SETC 'DS'                                         01467500
&ZOPV(&ZOPN)          SETC 'CL8'                                        01467600
&ZOPD(&ZOPN)          SETC '++ &ZXVERSCOMP  XVERSCOMP'                  01467700
.*-------------------------------------------------------------------   01467800
.***AM.L09  XAUTHCOMP1 CL16                                             01467900
&ZOPN                 SETA &ZOPN+1                                      01468000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XAUTHCOMP1'                       01468100
&ZOPO(&ZOPN)          SETC 'DS'                                         01468200
&ZOPV(&ZOPN)          SETC 'CL16'                                       01468300
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XAUTHCOMP1'                 01468400
.*-------------------------------------------------------------------   01468500
.***AM.L09  XNEWAUTH1 CL16                                              01468600
&ZOPN                 SETA &ZOPN+1                                      01468700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XNEWAUTH1'                        01468800
&ZOPO(&ZOPN)          SETC 'DS'                                         01468900
&ZOPV(&ZOPN)          SETC 'CL16'                                       01469000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XNEWAUTH1'                  01469100
.*-------------------------------------------------------------------   01469200
.***AM.L09  XLISTDESC CL32                                              01469300
&ZOPN                 SETA &ZOPN+1                                      01469400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XLISTDESC'                        01469500
&ZOPO(&ZOPN)          SETC 'DS'                                         01469600
&ZOPV(&ZOPN)          SETC 'CL32'                                       01469700
&ZOPD(&ZOPN)          SETC '++ &ZXLISTDESC  XLISTDESC'                  01469800
.*-------------------------------------------------------------------   01469900
.***AM.PJR1 DEFINED ON XCMDFLGS1                                        01470000
&ZOPN                 SETA &ZOPN+1                                      01470100
&ZOPL(&ZOPN)          SETC ' '                                          01470200
&ZOPO(&ZOPN)          SETC 'ORG'                                        01470300
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+104'                              01470400
&ZOPD(&ZOPN)          SETC ' '                                          01470500
.*-------------------------------------------------------------------   01470600
.***AM.L09  XCMDFLGS1A CL1                                              01470700
&ZOPN                 SETA &ZOPN+1                                      01470800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCMDFLGS1A'                       01470900
&ZOPO(&ZOPN)          SETC 'DS'                                         01471000
&ZOPV(&ZOPN)          SETC 'CL1'                                        01471100
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XCMDFLGS1A'                 01471200
.*-------------------------------------------------------------------   01471300
.***AM.L09  XCMDFLGS1B CL1                                              01471400
&ZOPN                 SETA &ZOPN+1                                      01471500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCMDFLGS1B'                       01471600
&ZOPO(&ZOPN)          SETC 'DS'                                         01471700
&ZOPV(&ZOPN)          SETC 'CL1'                                        01471800
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XCMDFLGS1B'                 01471900
.*-------------------------------------------------------------------   01472000
.***AM.L09  XCMDFLGS1C CL1                                              01472100
&ZOPN                 SETA &ZOPN+1                                      01472200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCMDFLGS1C'                       01472300
&ZOPO(&ZOPN)          SETC 'DS'                                         01472400
&ZOPV(&ZOPN)          SETC 'CL1'                                        01472500
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XCMDFLGS1C'                 01472600
.*-------------------------------------------------------------------   01472700
.***AM.L09  XCMDFLGS1D CL1                                              01472800
&ZOPN                 SETA &ZOPN+1                                      01472900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCMDFLGS1D'                       01473000
&ZOPO(&ZOPN)          SETC 'DS'                                         01473100
&ZOPV(&ZOPN)          SETC 'CL1'                                        01473200
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XCMDFLGS1D'                 01473300
.*-------------------------------------------------------------------   01473400
.***AM.PJR1 DEFINED ON XCMDFLGS1A                                       01473500
&ZOPN                 SETA &ZOPN+1                                      01473600
&ZOPL(&ZOPN)          SETC ' '                                          01473700
&ZOPO(&ZOPN)          SETC 'ORG'                                        01473800
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+104'                              01473900
&ZOPD(&ZOPN)          SETC ' '                                          01474000
.*-------------------------------------------------------------------   01474100
.***AM.L09  XELEMNUM XL1                                                01474200
&ZOPN                 SETA &ZOPN+1                                      01474300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XELEMNUM'                         01474400
&ZOPO(&ZOPN)          SETC 'DS'                                         01474500
&ZOPV(&ZOPN)          SETC 'XL1'                                        01474600
&ZOPD(&ZOPN)          SETC '++ &ZXELEMNUM  XELEMNUM'                    01474700
.*-------------------------------------------------------------------   01474800
.***AM.PJR1 DEFINED ON XCMDFLGS1A                                       01474900
&ZOPN                 SETA &ZOPN+1                                      01475000
&ZOPL(&ZOPN)          SETC ' '                                          01475100
&ZOPO(&ZOPN)          SETC 'ORG'                                        01475200
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+104'                              01475300
&ZOPD(&ZOPN)          SETC ' '                                          01475400
.*-------------------------------------------------------------------   01475500
.***AM.L09  XDBS BL.8                                                   01475600
&ZOPN                 SETA &ZOPN+1                                      01475700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XDBS'                             01475800
&ZOPO(&ZOPN)          SETC 'DS'                                         01475900
&ZOPV(&ZOPN)          SETC 'BL.8'                                       01476000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XDBS'                       01476100
.*-------------------------------------------------------------------   01476200
.***AM.PJR1 DEFINED ON XCMDFLGS1D                                       01476300
&ZOPN                 SETA &ZOPN+1                                      01476400
&ZOPL(&ZOPN)          SETC ' '                                          01476500
&ZOPO(&ZOPN)          SETC 'ORG'                                        01476600
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+107'                              01476700
&ZOPD(&ZOPN)          SETC ' '                                          01476800
.*-------------------------------------------------------------------   01476900
.***AM.L09  XUID3 CL1                                                   01477000
&ZOPN                 SETA &ZOPN+1                                      01477100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XUID3'                            01477200
&ZOPO(&ZOPN)          SETC 'DS'                                         01477300
&ZOPV(&ZOPN)          SETC 'CL1'                                        01477400
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XUID3'                      01477500
.*-------------------------------------------------------------------   01477600
.***AM.PJR1 DEFINED ON XB8TO11                                          01477700
&ZOPN                 SETA &ZOPN+1                                      01477800
&ZOPL(&ZOPN)          SETC ' '                                          01477900
&ZOPO(&ZOPN)          SETC 'ORG'                                        01478000
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+108'                              01478100
&ZOPD(&ZOPN)          SETC ' '                                          01478200
.*-------------------------------------------------------------------   01478300
.***AM.L09  XRSV0502 CL3                                                01478400
&ZOPN                 SETA &ZOPN+1                                      01478500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0502'                         01478600
&ZOPO(&ZOPN)          SETC 'DS'                                         01478700
&ZOPV(&ZOPN)          SETC 'CL3'                                        01478800
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0502'                      01478900
.*-------------------------------------------------------------------   01479000
.***AM.L09  XCGLM CL1                                                   01479100
&ZOPN                 SETA &ZOPN+1                                      01479200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCGLM'                            01479300
&ZOPO(&ZOPN)          SETC 'DS'                                         01479400
&ZOPV(&ZOPN)          SETC 'CL1'                                        01479500
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XCGLM'                      01479600
.*-------------------------------------------------------------------   01479700
.***AM.PJR1 DEFINED ON XB8TO11                                          01479800
&ZOPN                 SETA &ZOPN+1                                      01479900
&ZOPL(&ZOPN)          SETC ' '                                          01480000
&ZOPO(&ZOPN)          SETC 'ORG'                                        01480100
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+108'                              01480200
&ZOPD(&ZOPN)          SETC ' '                                          01480300
.*-------------------------------------------------------------------   01480400
.***AM.L09  XSTARTINDEX XL2                                             01480500
&ZOPN                 SETA &ZOPN+1                                      01480600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSTARTINDEX'                      01480700
&ZOPO(&ZOPN)          SETC 'DS'                                         01480800
&ZOPV(&ZOPN)          SETC 'XL2'                                        01480900
&ZOPD(&ZOPN)          SETC '++ &ZXSTARTINDEX  XSTARTINDEX'              01481000
.*-------------------------------------------------------------------   01481100
.***AM.L09  XENDINDEX XL2                                               01481200
&ZOPN                 SETA &ZOPN+1                                      01481300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XENDINDEX'                        01481400
&ZOPO(&ZOPN)          SETC 'DS'                                         01481500
&ZOPV(&ZOPN)          SETC 'XL2'                                        01481600
&ZOPD(&ZOPN)          SETC '++ &ZXENDINDEX  XENDINDEX'                  01481700
.*-------------------------------------------------------------------   01481800
.***AM.PJR1 DEFINED ON XLOCKINDEX                                       01481900
&ZOPN                 SETA &ZOPN+1                                      01482000
&ZOPL(&ZOPN)          SETC ' '                                          01482100
&ZOPO(&ZOPN)          SETC 'ORG'                                        01482200
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+112'                              01482300
&ZOPD(&ZOPN)          SETC ' '                                          01482400
.*-------------------------------------------------------------------   01482500
.***AM.L09  XVECTORINDEX F                                              01482600
&ZOPN                 SETA &ZOPN+1                                      01482700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVECTORINDEX'                     01482800
&ZOPO(&ZOPN)          SETC 'DS'                                         01482900
&ZOPV(&ZOPN)          SETC 'F'                                          01483000
&ZOPD(&ZOPN)          SETC '++ &ZXVECTORINDEX  XVECTORINDEX'            01483100
.*-------------------------------------------------------------------   01483200
.***AM.PJR1 DEFINED ON XENTRYID                                         01483300
&ZOPN                 SETA &ZOPN+1                                      01483400
&ZOPL(&ZOPN)          SETC ' '                                          01483500
&ZOPO(&ZOPN)          SETC 'ORG'                                        01483600
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+120'                              01483700
&ZOPD(&ZOPN)          SETC ' '                                          01483800
.*-------------------------------------------------------------------   01483900
.***AM.L09  XLISTLIMIT F                                                01484000
&ZOPN                 SETA &ZOPN+1                                      01484100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XLISTLIMIT'                       01484200
&ZOPO(&ZOPN)          SETC 'DS'                                         01484300
&ZOPV(&ZOPN)          SETC 'F'                                          01484400
&ZOPD(&ZOPN)          SETC '++ &ZXLISTLIMIT  XLISTLIMIT'                01484500
.*-------------------------------------------------------------------   01484600
.***AM.L09  XRSV0601 CL8                                                01484700
&ZOPN                 SETA &ZOPN+1                                      01484800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0601'                         01484900
&ZOPO(&ZOPN)          SETC 'DS'                                         01485000
&ZOPV(&ZOPN)          SETC 'CL8'                                        01485100
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0601'                      01485200
.*-------------------------------------------------------------------   01485300
.***AM.PJR1 DEFINED ON XAUTHCOMP1                                       01485400
&ZOPN                 SETA &ZOPN+1                                      01485500
&ZOPL(&ZOPN)          SETC ' '                                          01485600
&ZOPO(&ZOPN)          SETC 'ORG'                                        01485700
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+148'                              01485800
&ZOPD(&ZOPN)          SETC ' '                                          01485900
.*-------------------------------------------------------------------   01486000
.***AM.L09  XENTRYNAME CL16                                             01486100
&ZOPN                 SETA &ZOPN+1                                      01486200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XENTRYNAME'                       01486300
&ZOPO(&ZOPN)          SETC 'DS'                                         01486400
&ZOPV(&ZOPN)          SETC 'CL16'                                       01486500
&ZOPD(&ZOPN)          SETC '++ &ZXENTRYNAME  XENTRYNAME'                01486600
.*-------------------------------------------------------------------   01486700
.***AM.PJR1 DEFINED ON XAUTHCOMP1                                       01486800
&ZOPN                 SETA &ZOPN+1                                      01486900
&ZOPL(&ZOPN)          SETC ' '                                          01487000
&ZOPO(&ZOPN)          SETC 'ORG'                                        01487100
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+148'                              01487200
&ZOPD(&ZOPN)          SETC ' '                                          01487300
.*-------------------------------------------------------------------   01487400
.***AM.L09  XENTRYKEY CL16                                              01487500
&ZOPN                 SETA &ZOPN+1                                      01487600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XENTRYKEY'                        01487700
&ZOPO(&ZOPN)          SETC 'DS'                                         01487800
&ZOPV(&ZOPN)          SETC 'CL16'                                       01487900
&ZOPD(&ZOPN)          SETC '++ &ZXENTRYKEY  XENTRYKEY'                  01488000
.*-------------------------------------------------------------------   01488100
.***AM.PJR1 DEFINED ON XAUTHCOMP1                                       01488200
&ZOPN                 SETA &ZOPN+1                                      01488300
&ZOPL(&ZOPN)          SETC ' '                                          01488400
&ZOPO(&ZOPN)          SETC 'ORG'                                        01488500
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+148'                              01488600
&ZOPD(&ZOPN)          SETC ' '                                          01488700
.*-------------------------------------------------------------------   01488800
.***AM.L09  XKEYCOMP CL16                                               01488900
&ZOPN                 SETA &ZOPN+1                                      01489000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XKEYCOMP'                         01489100
&ZOPO(&ZOPN)          SETC 'DS'                                         01489200
&ZOPV(&ZOPN)          SETC 'CL16'                                       01489300
&ZOPD(&ZOPN)          SETC '++ &ZXKEYCOMP  XKEYCOMP'                    01489400
.*-------------------------------------------------------------------   01489500
.***AM.PJR1 DEFINED ON XAUTHCOMP1                                       01489600
&ZOPN                 SETA &ZOPN+1                                      01489700
&ZOPL(&ZOPN)          SETC ' '                                          01489800
&ZOPO(&ZOPN)          SETC 'ORG'                                        01489900
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+148'                              01490000
&ZOPD(&ZOPN)          SETC ' '                                          01490100
.*-------------------------------------------------------------------   01490200
.***AM.L09  XUID2 CL1                                                   01490300
&ZOPN                 SETA &ZOPN+1                                      01490400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XUID2'                            01490500
&ZOPO(&ZOPN)          SETC 'DS'                                         01490600
&ZOPV(&ZOPN)          SETC 'CL1'                                        01490700
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XUID2'                      01490800
.*-------------------------------------------------------------------   01490900
.***AM.L09  XRSV0602 CL15                                               01491000
&ZOPN                 SETA &ZOPN+1                                      01491100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0602'                         01491200
&ZOPO(&ZOPN)          SETC 'DS'                                         01491300
&ZOPV(&ZOPN)          SETC 'CL15'                                       01491400
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0602'                      01491500
.*-------------------------------------------------------------------   01491600
.***AM.PJR1 DEFINED ON XNEWAUTH1                                        01491700
&ZOPN                 SETA &ZOPN+1                                      01491800
&ZOPL(&ZOPN)          SETC ' '                                          01491900
&ZOPO(&ZOPN)          SETC 'ORG'                                        01492000
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+164'                              01492100
&ZOPD(&ZOPN)          SETC ' '                                          01492200
.*-------------------------------------------------------------------   01492300
.***AM.L09  XRESTOKEN CL8                                               01492400
&ZOPN                 SETA &ZOPN+1                                      01492500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRESTOKEN'                        01492600
&ZOPO(&ZOPN)          SETC 'DS'                                         01492700
&ZOPV(&ZOPN)          SETC 'CL8'                                        01492800
&ZOPD(&ZOPN)          SETC '++ &ZXRESTOKEN  XRESTOKEN'                  01492900
.*-------------------------------------------------------------------   01493000
.***AM.L09  XRSV0603 CL8                                                01493100
&ZOPN                 SETA &ZOPN+1                                      01493200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0603'                         01493300
&ZOPO(&ZOPN)          SETC 'DS'                                         01493400
&ZOPV(&ZOPN)          SETC 'CL8'                                        01493500
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0603'                      01493600
.*-------------------------------------------------------------------   01493700
.***AM.PJR1 DEFINED ON XNEWAUTH1                                        01493800
&ZOPN                 SETA &ZOPN+1                                      01493900
&ZOPL(&ZOPN)          SETC ' '                                          01494000
&ZOPO(&ZOPN)          SETC 'ORG'                                        01494100
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+164'                              01494200
&ZOPD(&ZOPN)          SETC ' '                                          01494300
.*-------------------------------------------------------------------   01494400
.***AM.L09  XFIRSTELEM XL2                                              01494500
&ZOPN                 SETA &ZOPN+1                                      01494600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XFIRSTELEM'                       01494700
&ZOPO(&ZOPN)          SETC 'DS'                                         01494800
&ZOPV(&ZOPN)          SETC 'XL2'                                        01494900
&ZOPD(&ZOPN)          SETC '++ &ZXFIRSTELEM  XFIRSTELEM'                01495000
.*-------------------------------------------------------------------   01495100
.***AM.L09  XLASTELEM XL2                                               01495200
&ZOPN                 SETA &ZOPN+1                                      01495300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XLASTELEM'                        01495400
&ZOPO(&ZOPN)          SETC 'DS'                                         01495500
&ZOPV(&ZOPN)          SETC 'XL2'                                        01495600
&ZOPD(&ZOPN)          SETC '++ &ZXLASTELEM  XLASTELEM'                  01495700
.*-------------------------------------------------------------------   01495800
.***AM.L09  XRSV0604 CL8                                                01495900
&ZOPN                 SETA &ZOPN+1                                      01496000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0604'                         01496100
&ZOPO(&ZOPN)          SETC 'DS'                                         01496200
&ZOPV(&ZOPN)          SETC 'CL8'                                        01496300
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0604'                      01496400
.*-------------------------------------------------------------------   01496500
.***AM.L09  XCMDFLGS2A CL1                                              01496600
&ZOPN                 SETA &ZOPN+1                                      01496700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCMDFLGS2A'                       01496800
&ZOPO(&ZOPN)          SETC 'DS'                                         01496900
&ZOPV(&ZOPN)          SETC 'CL1'                                        01497000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XCMDFLGS2A'                 01497100
.*-------------------------------------------------------------------   01497200
.***AM.L09  XRSV0605 CL3                                                01497300
&ZOPN                 SETA &ZOPN+1                                      01497400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0605'                         01497500
&ZOPO(&ZOPN)          SETC 'DS'                                         01497600
&ZOPV(&ZOPN)          SETC 'CL3'                                        01497700
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0605'                      01497800
.*-------------------------------------------------------------------   01497900
.***AM.PJR1 DEFINED ON XLISTDESC                                        01498000
&ZOPN                 SETA &ZOPN+1                                      01498100
&ZOPL(&ZOPN)          SETC ' '                                          01498200
&ZOPO(&ZOPN)          SETC 'ORG'                                        01498300
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+180'                              01498400
&ZOPD(&ZOPN)          SETC ' '                                          01498500
.*-------------------------------------------------------------------   01498600
.***AM.L09  XUID1 CL1                                                   01498700
&ZOPN                 SETA &ZOPN+1                                      01498800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XUID1'                            01498900
&ZOPO(&ZOPN)          SETC 'DS'                                         01499000
&ZOPV(&ZOPN)          SETC 'CL1'                                        01499100
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XUID1'                      01499200
.*-------------------------------------------------------------------   01499300
.***AM.L09  XRSV0606 CL31                                               01499400
&ZOPN                 SETA &ZOPN+1                                      01499500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0606'                         01499600
&ZOPO(&ZOPN)          SETC 'DS'                                         01499700
&ZOPV(&ZOPN)          SETC 'CL31'                                       01499800
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0606'                      01499900
.*-------------------------------------------------------------------   01500000
.***AM.PJR1 DEFINED ON XMCB_DATA2                                       01500100
&ZOPN                 SETA &ZOPN+1                                      01500200
&ZOPL(&ZOPN)          SETC ' '                                          01500300
&ZOPO(&ZOPN)          SETC 'ORG'                                        01500400
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+212'                              01500500
&ZOPD(&ZOPN)          SETC ' '                                          01500600
.*-------------------------------------------------------------------   01500700
.***AM.L09  XMOVETOKEY0 CL16                                            01500800
&ZOPN                 SETA &ZOPN+1                                      01500900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMOVETOKEY0'                      01501000
&ZOPO(&ZOPN)          SETC 'DS'                                         01501100
&ZOPV(&ZOPN)          SETC 'CL16'                                       01501200
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XMOVETOKEY0'                01501300
.*-------------------------------------------------------------------   01501400
.***AM.L09  XMOVETOLIST0 F                                              01501500
&ZOPN                 SETA &ZOPN+1                                      01501600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMOVETOLIST0'                     01501700
&ZOPO(&ZOPN)          SETC 'DS'                                         01501800
&ZOPV(&ZOPN)          SETC 'F'                                          01501900
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XMOVETOLIST0'               01502000
.*-------------------------------------------------------------------   01502100
.***AM.LVER1                                                            01502200
                      AIF  (&XPLISTVER LT 1).ZL154L                     01502300
.*-------------------------------------------------------------------   01502400
.*-------------------------------------------------------------------   01502500
.***AM.PJR1 DEFINED ON XMCB_DATA                                        01502600
&ZOPN                 SETA &ZOPN+1                                      01502700
&ZOPL(&ZOPN)          SETC ' '                                          01502800
&ZOPO(&ZOPN)          SETC 'ORG'                                        01502900
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+100'                              01503000
&ZOPD(&ZOPN)          SETC ' '                                          01503100
.*-------------------------------------------------------------------   01503200
.***AM.LVER2                                                            01503300
.ZL154L               ANOP  ,                                           01503400
.*-------------------------------------------------------------------   01503500
.*-------------------------------------------------------------------   01503600
.***AM.LVER1                                                            01503700
                      AIF  (&XPLISTVER LT 1).ZL155L                     01503800
.*-------------------------------------------------------------------   01503900
.*-------------------------------------------------------------------   01504000
.***AM.L09  XRSV0701 CL112                                              01504100
&ZOPN                 SETA &ZOPN+1                                      01504200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0701'                         01504300
&ZOPO(&ZOPN)          SETC 'DS'                                         01504400
&ZOPV(&ZOPN)          SETC 'CL112'                                      01504500
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0701'                      01504600
.*-------------------------------------------------------------------   01504700
.***AM.LVER2                                                            01504800
.ZL155L               ANOP  ,                                           01504900
.*-------------------------------------------------------------------   01505000
.*-------------------------------------------------------------------   01505100
.***AM.LVER1                                                            01505200
                      AIF  (&XPLISTVER LT 1).ZL156L                     01505300
.*-------------------------------------------------------------------   01505400
.*-------------------------------------------------------------------   01505500
.***AM.L09  XNEWAUTH2 CL16                                              01505600
&ZOPN                 SETA &ZOPN+1                                      01505700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XNEWAUTH2'                        01505800
&ZOPO(&ZOPN)          SETC 'DS'                                         01505900
&ZOPV(&ZOPN)          SETC 'CL16'                                       01506000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XNEWAUTH2'                  01506100
.*-------------------------------------------------------------------   01506200
.***AM.LVER2                                                            01506300
.ZL156L               ANOP  ,                                           01506400
.*-------------------------------------------------------------------   01506500
.*-------------------------------------------------------------------   01506600
.***AM.LVER1                                                            01506700
                      AIF  (&XPLISTVER LT 1).ZL157L                     01506800
.*-------------------------------------------------------------------   01506900
.*-------------------------------------------------------------------   01507000
.***AM.L09  XAUTHCOMP2 CL16                                             01507100
&ZOPN                 SETA &ZOPN+1                                      01507200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XAUTHCOMP2'                       01507300
&ZOPO(&ZOPN)          SETC 'DS'                                         01507400
&ZOPV(&ZOPN)          SETC 'CL16'                                       01507500
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XAUTHCOMP2'                 01507600
.*-------------------------------------------------------------------   01507700
.***AM.LVER2                                                            01507800
.ZL157L               ANOP  ,                                           01507900
.*-------------------------------------------------------------------   01508000
.*-------------------------------------------------------------------   01508100
.***AM.LVER1                                                            01508200
                      AIF  (&XPLISTVER LT 1).ZL158L                     01508300
.*-------------------------------------------------------------------   01508400
.*-------------------------------------------------------------------   01508500
.***AM.L09  XMOVETOKEY1 CL16                                            01508600
&ZOPN                 SETA &ZOPN+1                                      01508700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMOVETOKEY1'                      01508800
&ZOPO(&ZOPN)          SETC 'DS'                                         01508900
&ZOPV(&ZOPN)          SETC 'CL16'                                       01509000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XMOVETOKEY1'                01509100
.*-------------------------------------------------------------------   01509200
.***AM.LVER2                                                            01509300
.ZL158L               ANOP  ,                                           01509400
.*-------------------------------------------------------------------   01509500
.*-------------------------------------------------------------------   01509600
.***AM.LVER1                                                            01509700
                      AIF  (&XPLISTVER LT 1).ZL159L                     01509800
.*-------------------------------------------------------------------   01509900
.*-------------------------------------------------------------------   01510000
.***AM.L09  XMOVETOLIST1 F                                              01510100
&ZOPN                 SETA &ZOPN+1                                      01510200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMOVETOLIST1'                     01510300
&ZOPO(&ZOPN)          SETC 'DS'                                         01510400
&ZOPV(&ZOPN)          SETC 'F'                                          01510500
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL  XMOVETOLIST1'               01510600
.*-------------------------------------------------------------------   01510700
.***AM.LVER2                                                            01510800
.ZL159L               ANOP  ,                                           01510900
.*-------------------------------------------------------------------   01511000
.*-------------------------------------------------------------------   01511100
.***AM.LVER1                                                            01511200
                      AIF  (&XPLISTVER LT 1).ZL160L                     01511300
.*-------------------------------------------------------------------   01511400
.*-------------------------------------------------------------------   01511500
.***AM.L09  XRSV0702 CL8                                                01511600
&ZOPN                 SETA &ZOPN+1                                      01511700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0702'                         01511800
&ZOPO(&ZOPN)          SETC 'DS'                                         01511900
&ZOPV(&ZOPN)          SETC 'CL8'                                        01512000
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0702'                      01512100
.*-------------------------------------------------------------------   01512200
.***AM.LVER2                                                            01512300
.ZL160L               ANOP  ,                                           01512400
.*-------------------------------------------------------------------   01512500
.*-------------------------------------------------------------------   01512600
.***AM.LVER1                                                            01512700
                      AIF  (&XPLISTVER LT 1).ZL161L                     01512800
.*-------------------------------------------------------------------   01512900
.*-------------------------------------------------------------------   01513000
.***AM.L09  XLISTKEYINC F                                               01513100
&ZOPN                 SETA &ZOPN+1                                      01513200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XLISTKEYINC'                      01513300
&ZOPO(&ZOPN)          SETC 'DS'                                         01513400
&ZOPV(&ZOPN)          SETC 'F'                                          01513500
&ZOPD(&ZOPN)          SETC '++ &ZXLISTKEYINC  XLISTKEYINC'              01513600
.*-------------------------------------------------------------------   01513700
.***AM.LVER2                                                            01513800
.ZL161L               ANOP  ,                                           01513900
.*-------------------------------------------------------------------   01514000
.*-------------------------------------------------------------------   01514100
.***AM.LVER1                                                            01514200
                      AIF  (&XPLISTVER LT 1).ZL162L                     01514300
.*-------------------------------------------------------------------   01514400
.*-------------------------------------------------------------------   01514500
.***AM.PJR1 DEFINED ON XNEWAUTH2                                        01514600
&ZOPN                 SETA &ZOPN+1                                      01514700
&ZOPL(&ZOPN)          SETC ' '                                          01514800
&ZOPO(&ZOPN)          SETC 'ORG'                                        01514900
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+212'                              01515000
&ZOPD(&ZOPN)          SETC ' '                                          01515100
.*-------------------------------------------------------------------   01515200
.***AM.LVER2                                                            01515300
.ZL162L               ANOP  ,                                           01515400
.*-------------------------------------------------------------------   01515500
.*-------------------------------------------------------------------   01515600
.***AM.LVER1                                                            01515700
                      AIF  (&XPLISTVER LT 1).ZL163L                     01515800
.*-------------------------------------------------------------------   01515900
.*-------------------------------------------------------------------   01516000
.***AM.L09  XLISTKEY CL16                                               01516100
&ZOPN                 SETA &ZOPN+1                                      01516200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XLISTKEY'                         01516300
&ZOPO(&ZOPN)          SETC 'DS'                                         01516400
&ZOPV(&ZOPN)          SETC 'CL16'                                       01516500
&ZOPD(&ZOPN)          SETC '++ &ZXLISTKEY  XLISTKEY'                    01516600
.*-------------------------------------------------------------------   01516700
.***AM.LVER2                                                            01516800
.ZL163L               ANOP  ,                                           01516900
.*-------------------------------------------------------------------   01517000
.*-------------------------------------------------------------------   01517100
.***AM.LVER1                                                            01517200
                      AIF  (&XPLISTVER LT 1).ZL164L                     01517300
.*-------------------------------------------------------------------   01517400
.*-------------------------------------------------------------------   01517500
.***AM.PJR1 DEFINED ON XAUTHCOMP2                                       01517600
&ZOPN                 SETA &ZOPN+1                                      01517700
&ZOPL(&ZOPN)          SETC ' '                                          01517800
&ZOPO(&ZOPN)          SETC 'ORG'                                        01517900
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+228'                              01518000
&ZOPD(&ZOPN)          SETC ' '                                          01518100
.*-------------------------------------------------------------------   01518200
.***AM.LVER2                                                            01518300
.ZL164L               ANOP  ,                                           01518400
.*-------------------------------------------------------------------   01518500
.*-------------------------------------------------------------------   01518600
.***AM.LVER1                                                            01518700
                      AIF  (&XPLISTVER LT 1).ZL165L                     01518800
.*-------------------------------------------------------------------   01518900
.*-------------------------------------------------------------------   01519000
.***AM.L09  XMAXLISTKEY CL16                                            01519100
&ZOPN                 SETA &ZOPN+1                                      01519200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMAXLISTKEY'                      01519300
&ZOPO(&ZOPN)          SETC 'DS'                                         01519400
&ZOPV(&ZOPN)          SETC 'CL16'                                       01519500
&ZOPD(&ZOPN)          SETC '++ &ZXMAXLISTKEY  XMAXLISTKEY'              01519600
.*-------------------------------------------------------------------   01519700
.***AM.LVER2                                                            01519800
.ZL165L               ANOP  ,                                           01519900
.*-------------------------------------------------------------------   01520000
.*-------------------------------------------------------------------   01520100
.***AM.LVER1                                                            01520200
                      AIF  (&XPLISTVER LT 1).ZL166L                     01520300
.*-------------------------------------------------------------------   01520400
.*-------------------------------------------------------------------   01520500
.***AM.PJR1 DEFINED ON XMOVETOKEY1                                      01520600
&ZOPN                 SETA &ZOPN+1                                      01520700
&ZOPL(&ZOPN)          SETC ' '                                          01520800
&ZOPO(&ZOPN)          SETC 'ORG'                                        01520900
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+244'                              01521000
&ZOPD(&ZOPN)          SETC ' '                                          01521100
.*-------------------------------------------------------------------   01521200
.***AM.LVER2                                                            01521300
.ZL166L               ANOP  ,                                           01521400
.*-------------------------------------------------------------------   01521500
.*-------------------------------------------------------------------   01521600
.***AM.LVER1                                                            01521700
                      AIF  (&XPLISTVER LT 1).ZL167L                     01521800
.*-------------------------------------------------------------------   01521900
.*-------------------------------------------------------------------   01522000
.***AM.L09  XUNC CL16                                                   01522100
&ZOPN                 SETA &ZOPN+1                                      01522200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XUNC'                             01522300
&ZOPO(&ZOPN)          SETC 'DS'                                         01522400
&ZOPV(&ZOPN)          SETC 'CL16'                                       01522500
&ZOPD(&ZOPN)          SETC '++ &ZXUNC  XUNC'                            01522600
.*-------------------------------------------------------------------   01522700
.***AM.LVER2                                                            01522800
.ZL167L               ANOP  ,                                           01522900
.*-------------------------------------------------------------------   01523000
&ZOPN                 SETA &ZOPN+1                                      01523100
&ZOPL(&ZOPN)          SETC ' '                                          01523200
&ZOPO(&ZOPN)          SETC 'ORG'                                        01523300
&ZOPV(&ZOPN)          SETC '&XMFCTRL._PL_END'                           01523400
&ZOPD(&ZOPN)          SETC 'RESET LOCATION COUNTER'                     01523500
.*-------------------------------------------------------------------   01523600
.***AM.L10 END OF IXLLIST LIST PARAMETERS                               01523700
&ZOPN                 SETA &ZOPN+1                                      01523800
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 01523900
&ZOPO(&ZOPN)          SETC 'EQU'                                        01524000
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 01524100
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         01524200
.*                                                                      01524300
&ZOPN                 SETA &ZOPN+1                                      01524400
&ZOPL(&ZOPN)          SETC ' '                                          01524500
&ZOPO(&ZOPN)          SETC 'SPACE'                                      01524600
&ZOPV(&ZOPN)          SETC '1'                                          01524700
&ZOPD(&ZOPN)          SETC ' '                                          01524800
.*-------------------------------------------------------------------   01524900
.***AL.L12 IXLLIST FMT=LIST MF=S|L PARAMETERS                           01525000
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         01525100
.*                                                                      01525200
&ZOPN                 SETA  &ZOPN+1                                     01525300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                01525400
&ZOPO(&ZOPN)          SETC  'DC'                                        01525500
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   01525600
&ZOPD(&ZOPN)          SETC  '++ IXLLIST ARG PARMS'                      01525700
.*                                                                      01525800
.ZLMFSLX              ANOP  ,                                           01525900
.*-------------------------------------------------------------------   01526000
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          01526100
&ZPLLEN               SETA 232                                          01526200
.*                                                                      01526300
                      AIF  (&XPLISTVER LT 1).ZLLEN2Z                    01526400
&ZPLLEN               SETA 276                                          01526500
.ZLLEN2Z              ANOP  ,                                           01526600
.*                                                                      01526700
.******************************************************************     01526800
.***AI.L01 IXLLIST FMT=LIST FILL IN PARAMETER AREA                      01526900
.******************************************************************     01527000
                      ACTR  10000                                       01527100
&ZCVAL                SETC  'LA'           ASSUME XA MODE               01527200
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    01527300
&ZCVAL                SETC  'LAE'          XAX MODE                     01527400
.ZIMFXA               ANOP ,                                            01527500
.*                                                                      01527600
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    01527700
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         01527800
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 01527900
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                01528000
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 01528100
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                01528200
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   01528300
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    01528400
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   01528500
&ZOPN                 SETA  &ZOPN+1                                     01528600
&ZOPL(&ZOPN)          SETC  ' '                                         01528700
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    01528800
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              01528900
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       01529000
                      AGO   .ZIMFNX                                     01529100
.*                                                                      01529200
.ZIMFN2               ANOP ,                                            01529300
                      AIF   (&SYSALVL EQ 0).ZIMFNX1                     01529400
                      AIF   ('&XMF' NE 'S').ZIMFNX1                     01529500
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX                  01529600
&ZOPN                 SETA  &ZOPN+1                                     01529700
&ZOPL(&ZOPN)          SETC  ' '                                         01529800
&ZOPO(&ZOPN)          SETC  'LAE'                                       01529900
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'                                  01530000
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       01530100
                      AGO   .ZIMFNX                                     01530200
.ZIMFNX1              ANOP ,                                            01530300
&ZOPN                 SETA  &ZOPN+1                                     01530400
&ZOPL(&ZOPN)          SETC  ' '                                         01530500
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    01530600
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                01530700
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       01530800
.ZIMFNX               ANOP ,                                            01530900
.********************************************************************   01531000
.***AI.L02 IXLLIST FMT=LIST INITIALIZE PARAMETER AREA                   01531100
.********************************************************************   01531200
.***AI.L03 MF=(SLE)                                                     01531300
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      01531400
&ZAWRK                SETA  0                                           01531500
&ZN                   SETA  &ZPLLEN                                     01531600
.ZCLRCONT             AIF   (&ZN LE 256).ZCLRX                          01531700
.*                                                                      01531800
&ZOPN                 SETA  &ZOPN+1                                     01531900
&ZOPL(&ZOPN)          SETC  ' '                                         01532000
&ZOPO(&ZOPN)          SETC  'XC'                                        01532100
&ZOPV(&ZOPN)          SETC  '&ZAWRK.(256,1),&ZAWRK.(1)'                 01532200
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             01532300
.*                                                                      01532400
&ZAWRK                SETA &ZAWRK+256                                   01532500
&ZN                   SETA  &ZN-256                                     01532600
                      AGO   .ZCLRCONT                                   01532700
.*                                                                      01532800
.ZCLRX                ANOP  ,                                           01532900
.*                                                                      01533000
&ZOPN                 SETA  &ZOPN+1                                     01533100
&ZOPL(&ZOPN)          SETC  ' '                                         01533200
&ZOPO(&ZOPN)          SETC  'XC'                                        01533300
&ZOPV(&ZOPN)          SETC  '&ZAWRK.(&ZN,1),&ZAWRK.(1)'                 01533400
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             01533500
.ZIMFLX               ANOP  ,                                           01533600
.*-------------------------------------------------------------------   01533700
.***AI.LVER01                                                           01533800
                      AIF  (&XPLISTVER LT 1).ZI5Z                       01533900
.*-------------------------------------------------------------------   01534000
.***AI.LVER02                                                           01534100
.ZI5Z                 ANOP  ,                                           01534200
.*-------------------------------------------------------------------   01534300
.***AI.LVER01                                                           01534400
                      AIF  (&XPLISTVER LT 1).ZI7Z                       01534500
.*-------------------------------------------------------------------   01534600
.***AI.LVER02                                                           01534700
.ZI7Z                 ANOP  ,                                           01534800
.*-------------------------------------------------------------------   01534900
.***AI.L04B XVERSION XL1                                                01535000
                      AIF   (&XPLISTVER EQ 0).ZIMFVZ                    01535100
&ZOPN                 SETA  &ZOPN+1                                     01535200
&ZOPL(&ZOPN)          SETC  ' '                                         01535300
&ZOPO(&ZOPN)          SETC  'MVI'                                       01535400
&ZOPV(&ZOPN)          SETC  '0(1),&XPLISTVER'                           01535500
&ZOPD(&ZOPN)          SETC  '++ INPUT XVERSION XL1'                     01535600
.ZIMFVZ               ANOP  ,                                           01535700
.*-------------------------------------------------------------------   01535800
.***AI.L18  XBUFSTGKEY XL1                                              01535900
         AIF   ('&XBUFSTGKEY' NE 'CALLERS_KEY').ZI14                    01536000
&ZXBUFSTGKEY          SETC  ''             RESET INPUT/OUTPUT           01536100
.ZI14                 ANOP  ,                                           01536200
.*-------------------------------------------------------------------   01536300
.***AI.L25  XBUFSTGKEY XL1                                              01536400
                      AIF   ('&ZXBUFSTGKEY' EQ '').ZI14E                01536500
                      AIF   ('&ZXBUFSTGKEY' EQ 'OUTPUT').ZI14E          01536600
&ZCGPR                SETC  '&XBUFSTGKEY'                               01536700
.*                                                                      01536800
                      AIF   ('&XBUFSTGKEY'(1,1) NE '(').ZI14B           01536900
&ZCGPR   SETC  '0('.'&XBUFSTGKEY'(2,K'&XBUFSTGKEY-2).')'                01537000
                      AGO   .ZI14D                                      01537100
.ZI14B                ANOP  ,                                           01537200
.*                                                                      01537300
&ZC                   SETC  '&XBUFSTGKEY'(1,1)                          01537400
                      AIF   (T'&ZC NE 'N').ZI14D                        01537500
&ZC                   SETC  '&XBUFSTGKEY'                               01537600
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI14D               01537700
&ZCGPR                SETC  '=BL1''&XBUFSTGKEY'''                       01537800
.*                                                                      01537900
.ZI14D                ANOP  ,                                           01538000
.*                                                                      01538100
&ZOPN                 SETA  &ZOPN+1                                     01538200
&ZOPL(&ZOPN)          SETC  ' '                                         01538300
&ZOPO(&ZOPN)          SETC  'MVC'                                       01538400
&ZOPV(&ZOPN)          SETC  '9(1,1),&ZCGPR'                             01538500
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFSTGKEY XBUFSTGKEY'                01538600
.*                                                                      01538700
.ZI14E                ANOP  ,                                           01538800
.*-------------------------------------------------------------------   01538900
.***AI.L18  XANSLEN XL2                                                 01539000
         AIF   ('&XANSLEN' NE 'NO_ANSLEN').ZI15                         01539100
&ZXANSLEN             SETC  ''             RESET INPUT/OUTPUT           01539200
.ZI15                 ANOP  ,                                           01539300
.*-------------------------------------------------------------------   01539400
.***AI.L25  XANSLEN XL2                                                 01539500
                      AIF   ('&ZXANSLEN' EQ '').ZI15E                   01539600
                      AIF   ('&ZXANSLEN' EQ 'OUTPUT').ZI15E             01539700
&ZCGPR                SETC  '&XANSLEN'                                  01539800
.*                                                                      01539900
                      AIF   ('&XANSLEN'(1,1) NE '(').ZI15B              01540000
&ZCGPR   SETC  '0('.'&XANSLEN'(2,K'&XANSLEN-2).')'                      01540100
                      AGO   .ZI15D                                      01540200
.ZI15B                ANOP  ,                                           01540300
.*                                                                      01540400
&ZC                   SETC  '&XANSLEN'(1,1)                             01540500
                      AIF   (T'&ZC NE 'N').ZI15D                        01540600
&ZC                   SETC  '&XANSLEN'                                  01540700
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI15D               01540800
&ZCGPR                SETC  '=AL2(&XANSLEN)'                            01540900
.*                                                                      01541000
.ZI15D                ANOP  ,                                           01541100
.*                                                                      01541200
&ZOPN                 SETA  &ZOPN+1                                     01541300
&ZOPL(&ZOPN)          SETC  ' '                                         01541400
&ZOPO(&ZOPN)          SETC  'MVC'                                       01541500
&ZOPV(&ZOPN)          SETC  '10(2,1),&ZCGPR'                            01541600
&ZOPD(&ZOPN)          SETC  '++ &ZXANSLEN XANSLEN'                      01541700
.*                                                                      01541800
.ZI15E                ANOP  ,                                           01541900
.*-------------------------------------------------------------------   01542000
.***AI.L25  XCONTOKEN CL16                                              01542100
                      AIF   ('&ZXCONTOKEN' EQ '').ZI16E                 01542200
                      AIF   ('&ZXCONTOKEN' EQ 'OUTPUT').ZI16E           01542300
&ZCGPR                SETC  '&XCONTOKEN'                                01542400
.*                                                                      01542500
                      AIF   ('&XCONTOKEN'(1,1) NE '(').ZI16B            01542600
&ZCGPR   SETC  '0('.'&XCONTOKEN'(2,K'&XCONTOKEN-2).')'                  01542700
.ZI16B                ANOP  ,                                           01542800
.*                                                                      01542900
&ZOPN                 SETA  &ZOPN+1                                     01543000
&ZOPL(&ZOPN)          SETC  ' '                                         01543100
&ZOPO(&ZOPN)          SETC  'MVC'                                       01543200
&ZOPV(&ZOPN)          SETC  '12(16,1),&ZCGPR'                           01543300
&ZOPD(&ZOPN)          SETC  '++ &ZXCONTOKEN XCONTOKEN'                  01543400
.*                                                                      01543500
.ZI16E                ANOP  ,                                           01543600
.*-------------------------------------------------------------------   01543700
.***AI.L18  XREQDATA CL8                                                01543800
         AIF   ('&XREQDATA' NE 'NO_REQDATA').ZI20                       01543900
&ZXREQDATA            SETC  ''             RESET INPUT/OUTPUT           01544000
.ZI20                 ANOP  ,                                           01544100
.*-------------------------------------------------------------------   01544200
.***AI.L25  XREQDATA CL8                                                01544300
                      AIF   ('&ZXREQDATA' EQ '').ZI20E                  01544400
                      AIF   ('&ZXREQDATA' EQ 'OUTPUT').ZI20E            01544500
&ZCGPR                SETC  '&XREQDATA'                                 01544600
.*                                                                      01544700
                      AIF   ('&XREQDATA'(1,1) NE '(').ZI20B             01544800
&ZCGPR   SETC  '0('.'&XREQDATA'(2,K'&XREQDATA-2).')'                    01544900
.ZI20B                ANOP  ,                                           01545000
.*                                                                      01545100
&ZOPN                 SETA  &ZOPN+1                                     01545200
&ZOPL(&ZOPN)          SETC  ' '                                         01545300
&ZOPO(&ZOPN)          SETC  'MVC'                                       01545400
&ZOPV(&ZOPN)          SETC  '56(8,1),&ZCGPR'                            01545500
&ZOPD(&ZOPN)          SETC  '++ &ZXREQDATA XREQDATA'                    01545600
.*                                                                      01545700
.ZI20E                ANOP  ,                                           01545800
.*-------------------------------------------------------------------   01545900
.***AI.L18  XREQID CL8                                                  01546000
         AIF   ('&XREQID' NE 'NO_REQID').ZI21                           01546100
&ZXREQID              SETC  ''             RESET INPUT/OUTPUT           01546200
.ZI21                 ANOP  ,                                           01546300
.*-------------------------------------------------------------------   01546400
.***AI.L25  XREQID CL8                                                  01546500
                      AIF   ('&ZXREQID' EQ '').ZI21E                    01546600
                      AIF   ('&ZXREQID' EQ 'OUTPUT').ZI21E              01546700
&ZCGPR                SETC  '&XREQID'                                   01546800
.*                                                                      01546900
                      AIF   ('&XREQID'(1,1) NE '(').ZI21B               01547000
&ZCGPR   SETC  '0('.'&XREQID'(2,K'&XREQID-2).')'                        01547100
.ZI21B                ANOP  ,                                           01547200
.*                                                                      01547300
&ZOPN                 SETA  &ZOPN+1                                     01547400
&ZOPL(&ZOPN)          SETC  ' '                                         01547500
&ZOPO(&ZOPN)          SETC  'MVC'                                       01547600
&ZOPV(&ZOPN)          SETC  '64(8,1),&ZCGPR'                            01547700
&ZOPD(&ZOPN)          SETC  '++ &ZXREQID XREQID'                        01547800
.*                                                                      01547900
.ZI21E                ANOP  ,                                           01548000
.*-------------------------------------------------------------------   01548100
.***AI.L05 XSHLFLGS1 BL1                                                01548200
&ZW                   SETC  ''                                          01548300
&ZCLNG                SETC  ''             RESET BIT ON FLAG            01548400
.*-------------------------------------------------------------------   01548500
.***AI.L08 XSHLFLGS1 "BUFFER"                                           01548600
.***      BL1'1XXXXXXX'                                                 01548700
         AIF   ('&BUFFER' EQ '').ZI26A                                  01548800
&ZW                   SETC  '&ZW.1'                                     01548900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01549000
                      AGO   .ZI26C                                      01549100
.*                                                                      01549200
.ZI26A                ANOP  ,                                           01549300
&ZW                   SETC  '&ZW.0'                                     01549400
.ZI26C                ANOP  ,                                           01549500
.*-------------------------------------------------------------------   01549600
.***AI.L08 XSHLFLGS1 "BUFLIST"                                          01549700
.***      BL1'X1XXXXXX'                                                 01549800
         AIF   ('&BUFLIST' EQ '').ZI27A                                 01549900
&ZW                   SETC  '&ZW.1'                                     01550000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01550100
                      AGO   .ZI27C                                      01550200
.*                                                                      01550300
.ZI27A                ANOP  ,                                           01550400
&ZW                   SETC  '&ZW.0'                                     01550500
.ZI27C                ANOP  ,                                           01550600
.*-------------------------------------------------------------------   01550700
.***AI.L08 XSHLFLGS1 "ADJAREA"                                          01550800
.***      BL1'XX1XXXXX'                                                 01550900
         AIF   ('&ADJAREA' EQ '').ZI28A                                 01551000
         AIF   ('&ADJAREA' EQ 'NO_ADJAREA').ZI28A                       01551100
&ZW                   SETC  '&ZW.1'                                     01551200
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01551300
                      AGO   .ZI28C                                      01551400
.*                                                                      01551500
.ZI28A                ANOP  ,                                           01551600
&ZW                   SETC  '&ZW.0'                                     01551700
.ZI28C                ANOP  ,                                           01551800
.*-------------------------------------------------------------------   01551900
.***AI.L08 XSHLFLGS1 "ANSAREA"                                          01552000
.***      BL1'XXX1XXXX'                                                 01552100
         AIF   ('&ANSAREA' EQ '').ZI29A                                 01552200
         AIF   ('&ANSAREA' EQ 'NO_ANSAREA').ZI29A                       01552300
&ZW                   SETC  '&ZW.1'                                     01552400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01552500
                      AGO   .ZI29C                                      01552600
.*                                                                      01552700
.ZI29A                ANOP  ,                                           01552800
&ZW                   SETC  '&ZW.0'                                     01552900
.ZI29C                ANOP  ,                                           01553000
.*-------------------------------------------------------------------   01553100
.***AI.L08 XSHLFLGS1 "NO"                                               01553200
.***      BL1'XXXX1XXX'                                                 01553300
         AIF   ('&XPAGEABLE' NE 'NO').ZI30A                             01553400
&ZW                   SETC  '&ZW.1'                                     01553500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01553600
                      AGO   .ZI30C                                      01553700
.*                                                                      01553800
.ZI30A                ANOP  ,                                           01553900
&ZW                   SETC  '&ZW.0'                                     01554000
.ZI30C                ANOP  ,                                           01554100
.*-------------------------------------------------------------------   01554200
.***AI.L08 XSHLFLGS1 "BUFSTGKEY"                                        01554300
.***      BL1'XXXXX1XX'                                                 01554400
         AIF   ('&BUFSTGKEY' EQ '').ZI31A                               01554500
         AIF   ('&BUFSTGKEY' EQ 'CALLERS_KEY').ZI31A                    01554600
         AIF   ('&BUFSTGKEY' EQ 'CALLERS_KEY').ZI31A                    01554700
&ZW                   SETC  '&ZW.1'                                     01554800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01554900
                      AGO   .ZI31C                                      01555000
.*                                                                      01555100
.ZI31A                ANOP  ,                                           01555200
&ZW                   SETC  '&ZW.0'                                     01555300
.ZI31C                ANOP  ,                                           01555400
.*-------------------------------------------------------------------   01555500
.***AI.L08 XSHLFLGS1 "REAL"                                             01555600
.***      BL1'XXXXXX1X'                                                 01555700
         AIF   ('&XBUFADDRTYPE' NE 'REAL').ZI32A                        01555800
&ZW                   SETC  '&ZW.10'                                    01555900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01556000
                      AGO   .ZI32C                                      01556100
.*                                                                      01556200
.ZI32A                ANOP  ,                                           01556300
&ZW                   SETC  '&ZW.00'                                    01556400
.ZI32C                ANOP  ,                                           01556500
.*-------------------------------------------------------------------   01556600
.***AI.L11 XSHLFLGS1 BL1                                                01556700
                      AIF   ('&ZCLNG' NE 'YES').ZI32E  ALL ZERO BITS    01556800
&ZOPN                 SETA  &ZOPN+1                                     01556900
&ZOPL(&ZOPN)          SETC  ' '                                         01557000
&ZOPO(&ZOPN)          SETC  'OI'                                        01557100
&ZOPV(&ZOPN)          SETC  '2(1),B''&ZW'''                             01557200
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              01557300
.ZI32E                ANOP  ,                                           01557400
.*-------------------------------------------------------------------   01557500
.***AI.L05 XSHLFLGS2 BL1                                                01557600
&ZW                   SETC  ''                                          01557700
&ZCLNG                SETC  ''             RESET BIT ON FLAG            01557800
.*-------------------------------------------------------------------   01557900
.***AI.L08 XSHLFLGS2 "SYNCECB"                                          01558000
.***      BL1'1XXXXXXX'                                                 01558100
         AIF   ('&XMODE' NE 'SYNCECB').ZI34A                            01558200
&ZW                   SETC  '&ZW.1'                                     01558300
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01558400
                      AGO   .ZI34C                                      01558500
.*                                                                      01558600
.ZI34A                ANOP  ,                                           01558700
&ZW                   SETC  '&ZW.0'                                     01558800
.ZI34C                ANOP  ,                                           01558900
.*-------------------------------------------------------------------   01559000
.***AI.L08 XSHLFLGS2 "SYNCEXIT"                                         01559100
.***      BL1'X1XXXXXX'                                                 01559200
         AIF   ('&XMODE' NE 'SYNCEXIT').ZI35A                           01559300
&ZW                   SETC  '&ZW.1'                                     01559400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01559500
                      AGO   .ZI35C                                      01559600
.*                                                                      01559700
.ZI35A                ANOP  ,                                           01559800
&ZW                   SETC  '&ZW.0'                                     01559900
.ZI35C                ANOP  ,                                           01560000
.*-------------------------------------------------------------------   01560100
.***AI.L08 XSHLFLGS2 "SYNCTOKEN"                                        01560200
.***      BL1'XX1XXXXX'                                                 01560300
         AIF   ('&XMODE' NE 'SYNCTOKEN').ZI36A                          01560400
&ZW                   SETC  '&ZW.1'                                     01560500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01560600
                      AGO   .ZI36C                                      01560700
.*                                                                      01560800
.ZI36A                ANOP  ,                                           01560900
&ZW                   SETC  '&ZW.0'                                     01561000
.ZI36C                ANOP  ,                                           01561100
.*-------------------------------------------------------------------   01561200
.***AI.L08 XSHLFLGS2 "ASYNCECB"                                         01561300
.***      BL1'XXX1XXXX'                                                 01561400
         AIF   ('&XMODE' NE 'ASYNCECB').ZI37A                           01561500
&ZW                   SETC  '&ZW.1'                                     01561600
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01561700
                      AGO   .ZI37C                                      01561800
.*                                                                      01561900
.ZI37A                ANOP  ,                                           01562000
&ZW                   SETC  '&ZW.0'                                     01562100
.ZI37C                ANOP  ,                                           01562200
.*-------------------------------------------------------------------   01562300
.***AI.L08 XSHLFLGS2 "ASYNCEXIT"                                        01562400
.***      BL1'XXXX1XXX'                                                 01562500
         AIF   ('&XMODE' NE 'ASYNCEXIT').ZI38A                          01562600
&ZW                   SETC  '&ZW.1'                                     01562700
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01562800
                      AGO   .ZI38C                                      01562900
.*                                                                      01563000
.ZI38A                ANOP  ,                                           01563100
&ZW                   SETC  '&ZW.0'                                     01563200
.ZI38C                ANOP  ,                                           01563300
.*-------------------------------------------------------------------   01563400
.***AI.L08 XSHLFLGS2 "ASYNCTOKEN"                                       01563500
.***      BL1'XXXXX1XX'                                                 01563600
         AIF   ('&XMODE' NE 'ASYNCTOKEN').ZI39A                         01563700
&ZW                   SETC  '&ZW.1'                                     01563800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01563900
                      AGO   .ZI39C                                      01564000
.*                                                                      01564100
.ZI39A                ANOP  ,                                           01564200
&ZW                   SETC  '&ZW.0'                                     01564300
.ZI39C                ANOP  ,                                           01564400
.*-------------------------------------------------------------------   01564500
.***AI.L08 XSHLFLGS2 "ASYNCNORESPONSE"                                  01564600
.***      BL1'XXXXXX1X'                                                 01564700
         AIF   ('&XMODE' NE 'ASYNCNORESPONSE').ZI40A                    01564800
&ZW                   SETC  '&ZW.10'                                    01564900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01565000
                      AGO   .ZI40C                                      01565100
.*                                                                      01565200
.ZI40A                ANOP  ,                                           01565300
&ZW                   SETC  '&ZW.00'                                    01565400
.ZI40C                ANOP  ,                                           01565500
.*-------------------------------------------------------------------   01565600
.***AI.L11 XSHLFLGS2 BL1                                                01565700
                      AIF   ('&ZCLNG' NE 'YES').ZI40E  ALL ZERO BITS    01565800
&ZOPN                 SETA  &ZOPN+1                                     01565900
&ZOPL(&ZOPN)          SETC  ' '                                         01566000
&ZOPO(&ZOPN)          SETC  'OI'                                        01566100
&ZOPV(&ZOPN)          SETC  '3(1),B''&ZW'''                             01566200
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              01566300
.ZI40E                ANOP  ,                                           01566400
.*-------------------------------------------------------------------   01566500
.***AI.L05 XSHLFLGS3 BL1                                                01566600
&ZW                   SETC  ''                                          01566700
&ZCLNG                SETC  ''             RESET BIT ON FLAG            01566800
.*-------------------------------------------------------------------   01566900
.***AI.L08 XSHLFLGS3 "SET"                                              01567000
.***      BL1'1XXXXXXX'                                                 01567100
         AIF   ('&XLOCKOPER' NE 'SET').ZI42A                            01567200
&ZW                   SETC  '&ZW.1'                                     01567300
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01567400
                      AGO   .ZI42C                                      01567500
.*                                                                      01567600
.ZI42A                ANOP  ,                                           01567700
&ZW                   SETC  '&ZW.0'                                     01567800
.ZI42C                ANOP  ,                                           01567900
.*-------------------------------------------------------------------   01568000
.***AI.L08 XSHLFLGS3 "RESET"                                            01568100
.***      BL1'X1XXXXXX'                                                 01568200
         AIF   ('&XLOCKOPER' NE 'RESET').ZI43A                          01568300
&ZW                   SETC  '&ZW.1'                                     01568400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01568500
                      AGO   .ZI43C                                      01568600
.*                                                                      01568700
.ZI43A                ANOP  ,                                           01568800
&ZW                   SETC  '&ZW.0'                                     01568900
.ZI43C                ANOP  ,                                           01569000
.*-------------------------------------------------------------------   01569100
.***AI.L08 XSHLFLGS3 "NOTHELD"                                          01569200
.***      BL1'XX1XXXXX'                                                 01569300
         AIF   ('&XLOCKOPER' NE 'NOTHELD').ZI44A                        01569400
&ZW                   SETC  '&ZW.1'                                     01569500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01569600
                      AGO   .ZI44C                                      01569700
.*                                                                      01569800
.ZI44A                ANOP  ,                                           01569900
&ZW                   SETC  '&ZW.0'                                     01570000
.ZI44C                ANOP  ,                                           01570100
.*-------------------------------------------------------------------   01570200
.***AI.L08 XSHLFLGS3 "HELDBY"                                           01570300
.***      BL1'XXX1XXXX'                                                 01570400
         AIF   ('&XLOCKOPER' NE 'HELDBY').ZI45A                         01570500
&ZW                   SETC  '&ZW.1'                                     01570600
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01570700
                      AGO   .ZI45C                                      01570800
.*                                                                      01570900
.ZI45A                ANOP  ,                                           01571000
&ZW                   SETC  '&ZW.0'                                     01571100
.ZI45C                ANOP  ,                                           01571200
.*-------------------------------------------------------------------   01571300
.***AI.L08 XSHLFLGS3 "TEST"                                             01571400
.***      BL1'XXXX1XXX'                                                 01571500
         AIF   ('&XLOCKOPER' NE 'TEST').ZI46A                           01571600
&ZW                   SETC  '&ZW.1'                                     01571700
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01571800
                      AGO   .ZI46C                                      01571900
.*                                                                      01572000
.ZI46A                ANOP  ,                                           01572100
&ZW                   SETC  '&ZW.0'                                     01572200
.ZI46C                ANOP  ,                                           01572300
.*-------------------------------------------------------------------   01572400
.***AI.L08 XSHLFLGS3 "READNEXT"                                         01572500
.***      BL1'XXXXX1XX'                                                 01572600
         AIF   ('&XLOCKOPER' NE 'READNEXT').ZI47A                       01572700
&ZW                   SETC  '&ZW.1'                                     01572800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01572900
                      AGO   .ZI47C                                      01573000
.*                                                                      01573100
.ZI47A                ANOP  ,                                           01573200
&ZW                   SETC  '&ZW.0'                                     01573300
.ZI47C                ANOP  ,                                           01573400
.*-------------------------------------------------------------------   01573500
.***AI.L08 XSHLFLGS3 "COND"                                             01573600
.***      BL1'XXXXXX1X'                                                 01573700
         AIF   ('&XLOCKMODE' NE 'COND').ZI48A                           01573800
&ZW                   SETC  '&ZW.1'                                     01573900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01574000
                      AGO   .ZI48C                                      01574100
.*                                                                      01574200
.ZI48A                ANOP  ,                                           01574300
&ZW                   SETC  '&ZW.0'                                     01574400
.ZI48C                ANOP  ,                                           01574500
.*-------------------------------------------------------------------   01574600
.***AI.L08 XSHLFLGS3 "LOCKCOMP"                                         01574700
.***      BL1'XXXXXXX1'                                                 01574800
         AIF   ('&LOCKCOMP' EQ '').ZI49A                                01574900
         AIF   ('&LOCKCOMP' EQ 'NO_LOCKCOMP').ZI49A                     01575000
&ZW                   SETC  '&ZW.1'                                     01575100
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01575200
                      AGO   .ZI49C                                      01575300
.*                                                                      01575400
.ZI49A                ANOP  ,                                           01575500
&ZW                   SETC  '&ZW.0'                                     01575600
.ZI49C                ANOP  ,                                           01575700
.*-------------------------------------------------------------------   01575800
.***AI.L11 XSHLFLGS3 BL1                                                01575900
                      AIF   ('&ZCLNG' NE 'YES').ZI49E  ALL ZERO BITS    01576000
&ZOPN                 SETA  &ZOPN+1                                     01576100
&ZOPL(&ZOPN)          SETC  ' '                                         01576200
&ZOPO(&ZOPN)          SETC  'OI'                                        01576300
&ZOPV(&ZOPN)          SETC  '4(1),B''&ZW'''                             01576400
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              01576500
.ZI49E                ANOP  ,                                           01576600
.*-------------------------------------------------------------------   01576700
.***AI.L05 XSHLFLGS4 BL1                                                01576800
&ZW                   SETC  ''                                          01576900
&ZCLNG                SETC  ''             RESET BIT ON FLAG            01577000
.*-------------------------------------------------------------------   01577100
.***AI.L09 XSHLFLGS4 "ADJDATA"                                          01577200
.***      BL1'1XXXXXXX'                                                 01577300
&ZI                   SETA  0              RESET ARRAY INDEX            01577400
.ZI51A                ANOP  ,                                           01577500
&ZI                   SETA  &ZI+1          NEXT ARRAY ENTRY             01577600
                      AIF   (K'&XTYPE(&ZI) LE 0).ZI51B                  01577700
         AIF   ('&XTYPE(&ZI)' NE 'ADJDATA').ZI51A                       01577800
&ZW                   SETC  '&ZW.1'                                     01577900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01578000
                      AGO   .ZI51C                                      01578100
.*                                                                      01578200
.ZI51B                ANOP  ,                                           01578300
&ZW                   SETC  '&ZW.0'                                     01578400
.ZI51C                ANOP  ,                                           01578500
.*-------------------------------------------------------------------   01578600
.***AI.L09 XSHLFLGS4 "ECONTROLS"                                        01578700
.***      BL1'X1XXXXXX'                                                 01578800
&ZI                   SETA  0              RESET ARRAY INDEX            01578900
.ZI52A                ANOP  ,                                           01579000
&ZI                   SETA  &ZI+1          NEXT ARRAY ENTRY             01579100
                      AIF   (K'&XTYPE(&ZI) LE 0).ZI52B                  01579200
         AIF   ('&XTYPE(&ZI)' NE 'ECONTROLS').ZI52A                     01579300
&ZW                   SETC  '&ZW.1'                                     01579400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01579500
                      AGO   .ZI52C                                      01579600
.*                                                                      01579700
.ZI52B                ANOP  ,                                           01579800
&ZW                   SETC  '&ZW.0'                                     01579900
.ZI52C                ANOP  ,                                           01580000
.*-------------------------------------------------------------------   01580100
.***AI.L08 XSHLFLGS4 "EXTRESTOKEN"                                      01580200
.***      BL1'XX1XXXXX'                                                 01580300
         AIF   ('&EXTRESTOKEN' EQ '').ZI53A                             01580400
&ZW                   SETC  '&ZW.1'                                     01580500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01580600
                      AGO   .ZI53C                                      01580700
.*                                                                      01580800
.ZI53A                ANOP  ,                                           01580900
&ZW                   SETC  '&ZW.0'                                     01581000
.ZI53C                ANOP  ,                                           01581100
.*-------------------------------------------------------------------   01581200
.***AI.L08 XSHLFLGS4 "LIST"                                             01581300
.***      BL1'XXXXXXX1'                                                 01581400
&ZW                   SETC  '&ZW.00000'                                 01581500
.*-------------------------------------------------------------------   01581600
.***AI.L11 XSHLFLGS4 BL1                                                01581700
                      AIF   ('&ZCLNG' NE 'YES').ZI54E  ALL ZERO BITS    01581800
&ZOPN                 SETA  &ZOPN+1                                     01581900
&ZOPL(&ZOPN)          SETC  ' '                                         01582000
&ZOPO(&ZOPN)          SETC  'OI'                                        01582100
&ZOPV(&ZOPN)          SETC  '5(1),B''&ZW'''                             01582200
&ZOPD(&ZOPN)          SETC  '++ 379 BL1'                                01582300
.ZI54E                ANOP  ,                                           01582400
.*-------------------------------------------------------------------   01582500
.***AI.L23 ALET XBUFFER F                                               01582600
         AIF   ('&ZXBUFFER' EQ '').ZI60G                                01582700
         AIF   ('&SYSASCE' EQ 'P').ZI60G   SYSSTATE PRIMARY             01582800
&ZCLNG                SETC  '&XBUFFER'                                  01582900
         AIF   ('&XBUFFER'(1,1) EQ '(').ZI60E  IN AR                    01583000
.*                                                                      01583100
&ZCGPR                SETC  '14'                                        01583200
&ZOPN                 SETA  &ZOPN+1                                     01583300
&ZOPL(&ZOPN)          SETC  ' '                                         01583400
&ZOPO(&ZOPN)          SETC  'LAE'                                       01583500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01583600
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFFER XBUFFER'                      01583700
                      AGO   .ZI60F                                      01583800
.*                                                                      01583900
.ZI60E                ANOP  ,                                           01584000
&ZCGPR   SETC  '&XBUFFER'(2,K'&XBUFFER-2)                               01584100
.*                                                                      01584200
.ZI60F                ANOP  ,                                           01584300
.*                                                                      01584400
&ZOPN                 SETA  &ZOPN+1                                     01584500
&ZOPL(&ZOPN)          SETC  ' '                                         01584600
&ZOPO(&ZOPN)          SETC  'STAM'                                      01584700
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCGPR,28(1)'                       01584800
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFFER XBUFFER'                      01584900
.*                                                                      01585000
.ZI60G                ANOP  ,                                           01585100
.*-------------------------------------------------------------------   01585200
.***AI.L18  XBUFSIZE F                                                  01585300
         AIF   ('&XBUFSIZE' NE 'NO_BUFSIZE').ZI61                       01585400
&ZXBUFSIZE            SETC  ''             RESET INPUT/OUTPUT           01585500
.ZI61                 ANOP  ,                                           01585600
.*-------------------------------------------------------------------   01585700
.***AI.L25  XBUFSIZE F                                                  01585800
                      AIF   ('&ZXBUFSIZE' EQ '').ZI61E                  01585900
                      AIF   ('&ZXBUFSIZE' EQ 'OUTPUT').ZI61E            01586000
&ZCGPR                SETC  '&XBUFSIZE'                                 01586100
.*                                                                      01586200
                      AIF   ('&XBUFSIZE'(1,1) NE '(').ZI61B             01586300
&ZCGPR   SETC  '0('.'&XBUFSIZE'(2,K'&XBUFSIZE-2).')'                    01586400
                      AGO   .ZI61D                                      01586500
.ZI61B                ANOP  ,                                           01586600
.*                                                                      01586700
&ZC                   SETC  '&XBUFSIZE'(1,1)                            01586800
                      AIF   (T'&ZC NE 'N').ZI61D                        01586900
&ZC                   SETC  '&XBUFSIZE'                                 01587000
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI61D               01587100
&ZCGPR                SETC  '=AL4(&XBUFSIZE)'                           01587200
.*                                                                      01587300
.ZI61D                ANOP  ,                                           01587400
.*                                                                      01587500
&ZOPN                 SETA  &ZOPN+1                                     01587600
&ZOPL(&ZOPN)          SETC  ' '                                         01587700
&ZOPO(&ZOPN)          SETC  'MVC'                                       01587800
&ZOPV(&ZOPN)          SETC  '32(4,1),&ZCGPR'                            01587900
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFSIZE XBUFSIZE'                    01588000
.*                                                                      01588100
.ZI61E                ANOP  ,                                           01588200
.*-------------------------------------------------------------------   01588300
.***AI.L19  XBUFFER A                                                   01588400
                      AIF   ('&ZXBUFFER' EQ '').ZI62H                   01588500
&ZCLNG                SETC  '&XBUFFER'                                  01588600
&ZCGPR                SETC  '14'                                        01588700
         AIF   ('&XBUFFER'(1,1) EQ '(').ZI62F  IN GPR                   01588800
.*                                                                      01588900
&ZOPN                 SETA  &ZOPN+1                                     01589000
&ZOPL(&ZOPN)          SETC  ' '                                         01589100
&ZOPO(&ZOPN)          SETC  'LA'                                        01589200
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01589300
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFFER XBUFFER'                      01589400
.*                                                                      01589500
                      AGO   .ZI62G                                      01589600
.*                                                                      01589700
.ZI62F                ANOP  ,                                           01589800
&ZCGPR   SETC  '&XBUFFER'(2,K'&XBUFFER-2)                               01589900
.*                                                                      01590000
.ZI62G                ANOP  ,                                           01590100
.*                                                                      01590200
&ZOPN                 SETA  &ZOPN+1                                     01590300
&ZOPL(&ZOPN)          SETC  ' '                                         01590400
&ZOPO(&ZOPN)          SETC  'ST'                                        01590500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,36(,1)'                             01590600
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFFER XBUFFER'                      01590700
.*                                                                      01590800
.ZI62H                ANOP  ,                                           01590900
.*-------------------------------------------------------------------   01591000
.***AI.L18  XBUFALET F                                                  01591100
         AIF   ('&XBUFALET' NE 'NO_BUFALET').ZI64                       01591200
&ZXBUFALET            SETC  ''             RESET INPUT/OUTPUT           01591300
.ZI64                 ANOP  ,                                           01591400
.*-------------------------------------------------------------------   01591500
.***AI.L25  XBUFALET F                                                  01591600
                      AIF   ('&ZXBUFALET' EQ '').ZI64E                  01591700
                      AIF   ('&ZXBUFALET' EQ 'OUTPUT').ZI64E            01591800
&ZCGPR                SETC  '&XBUFALET'                                 01591900
.*                                                                      01592000
                      AIF   ('&XBUFALET'(1,1) NE '(').ZI64B             01592100
&ZCGPR   SETC  '0('.'&XBUFALET'(2,K'&XBUFALET-2).')'                    01592200
                      AGO   .ZI64D                                      01592300
.ZI64B                ANOP  ,                                           01592400
.*                                                                      01592500
&ZC                   SETC  '&XBUFALET'(1,1)                            01592600
                      AIF   (T'&ZC NE 'N').ZI64D                        01592700
&ZC                   SETC  '&XBUFALET'                                 01592800
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI64D               01592900
&ZCGPR                SETC  '=AL4(&XBUFALET)'                           01593000
.*                                                                      01593100
.ZI64D                ANOP  ,                                           01593200
.*                                                                      01593300
&ZOPN                 SETA  &ZOPN+1                                     01593400
&ZOPL(&ZOPN)          SETC  ' '                                         01593500
&ZOPO(&ZOPN)          SETC  'MVC'                                       01593600
&ZOPV(&ZOPN)          SETC  '28(4,1),&ZCGPR'                            01593700
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFALET XBUFALET'                    01593800
.*                                                                      01593900
.ZI64E                ANOP  ,                                           01594000
.*-------------------------------------------------------------------   01594100
.***AI.L23 ALET XBUFLIST F                                              01594200
         AIF   ('&ZXBUFLIST' EQ '').ZI65G                               01594300
         AIF   ('&SYSASCE' EQ 'P').ZI65G   SYSSTATE PRIMARY             01594400
&ZCLNG                SETC  '&XBUFLIST'                                 01594500
         AIF   ('&XBUFLIST'(1,1) EQ '(').ZI65E  IN AR                   01594600
.*                                                                      01594700
&ZCGPR                SETC  '14'                                        01594800
&ZOPN                 SETA  &ZOPN+1                                     01594900
&ZOPL(&ZOPN)          SETC  ' '                                         01595000
&ZOPO(&ZOPN)          SETC  'LAE'                                       01595100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01595200
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFLIST XBUFLIST'                    01595300
                      AGO   .ZI65F                                      01595400
.*                                                                      01595500
.ZI65E                ANOP  ,                                           01595600
&ZCGPR   SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                             01595700
.*                                                                      01595800
.ZI65F                ANOP  ,                                           01595900
.*                                                                      01596000
&ZOPN                 SETA  &ZOPN+1                                     01596100
&ZOPL(&ZOPN)          SETC  ' '                                         01596200
&ZOPO(&ZOPN)          SETC  'STAM'                                      01596300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCGPR,32(1)'                       01596400
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFLIST XBUFLIST'                    01596500
.*                                                                      01596600
.ZI65G                ANOP  ,                                           01596700
.*-------------------------------------------------------------------   01596800
.***AI.L19  XBUFLIST A                                                  01596900
                      AIF   ('&ZXBUFLIST' EQ '').ZI66H                  01597000
&ZCLNG                SETC  '&XBUFLIST'                                 01597100
&ZCGPR                SETC  '14'                                        01597200
         AIF   ('&XBUFLIST'(1,1) EQ '(').ZI66F  IN GPR                  01597300
         AIF   ('&SYSASCE' NE 'P').ZI66G   SYSSTATE PRIMARY             01597400
.*                                                                      01597500
&ZOPN                 SETA  &ZOPN+1                                     01597600
&ZOPL(&ZOPN)          SETC  ' '                                         01597700
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    01597800
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01597900
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFLIST XBUFLIST'                    01598000
.*                                                                      01598100
                      AGO   .ZI66G                                      01598200
.*                                                                      01598300
.ZI66F                ANOP  ,                                           01598400
&ZCGPR   SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                             01598500
.*                                                                      01598600
.ZI66G                ANOP  ,                                           01598700
.*                                                                      01598800
&ZOPN                 SETA  &ZOPN+1                                     01598900
&ZOPL(&ZOPN)          SETC  ' '                                         01599000
&ZOPO(&ZOPN)          SETC  'ST'                                        01599100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,36(,1)'                             01599200
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFLIST XBUFLIST'                    01599300
.*                                                                      01599400
.ZI66H                ANOP  ,                                           01599500
.*-------------------------------------------------------------------   01599600
.***AI.L18 ALET XADJAREA F                                              01599700
         AIF   ('&XADJAREA' NE 'NO_ADJAREA').ZI68                       01599800
&ZXADJAREA            SETC  ''             RESET INPUT/OUTPUT           01599900
.ZI68                 ANOP  ,                                           01600000
.*-------------------------------------------------------------------   01600100
.***AI.L23 ALET XADJAREA F                                              01600200
         AIF   ('&ZXADJAREA' EQ '').ZI68G                               01600300
         AIF   ('&SYSASCE' EQ 'P').ZI68G   SYSSTATE PRIMARY             01600400
&ZCLNG                SETC  '&XADJAREA'                                 01600500
         AIF   ('&XADJAREA'(1,1) EQ '(').ZI68E  IN AR                   01600600
.*                                                                      01600700
&ZCGPR                SETC  '14'                                        01600800
&ZOPN                 SETA  &ZOPN+1                                     01600900
&ZOPL(&ZOPN)          SETC  ' '                                         01601000
&ZOPO(&ZOPN)          SETC  'LAE'                                       01601100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01601200
&ZOPD(&ZOPN)          SETC  '++ &ZXADJAREA XADJAREA'                    01601300
                      AGO   .ZI68F                                      01601400
.*                                                                      01601500
.ZI68E                ANOP  ,                                           01601600
&ZCGPR   SETC  '&XADJAREA'(2,K'&XADJAREA-2)                             01601700
.*                                                                      01601800
.ZI68F                ANOP  ,                                           01601900
.*                                                                      01602000
&ZOPN                 SETA  &ZOPN+1                                     01602100
&ZOPL(&ZOPN)          SETC  ' '                                         01602200
&ZOPO(&ZOPN)          SETC  'STAM'                                      01602300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCGPR,40(1)'                       01602400
&ZOPD(&ZOPN)          SETC  '++ &ZXADJAREA XADJAREA'                    01602500
.*                                                                      01602600
.ZI68G                ANOP  ,                                           01602700
.*-------------------------------------------------------------------   01602800
.***AI.L18  XADJAREA A                                                  01602900
         AIF   ('&XADJAREA' NE 'NO_ADJAREA').ZI69                       01603000
&ZXADJAREA            SETC  ''             RESET INPUT/OUTPUT           01603100
.ZI69                 ANOP  ,                                           01603200
.*-------------------------------------------------------------------   01603300
.***AI.L19  XADJAREA A                                                  01603400
                      AIF   ('&ZXADJAREA' EQ '').ZI69H                  01603500
&ZCLNG                SETC  '&XADJAREA'                                 01603600
&ZCGPR                SETC  '14'                                        01603700
         AIF   ('&XADJAREA'(1,1) EQ '(').ZI69F  IN GPR                  01603800
         AIF   ('&SYSASCE' NE 'P').ZI69G   SYSSTATE PRIMARY             01603900
.*                                                                      01604000
&ZOPN                 SETA  &ZOPN+1                                     01604100
&ZOPL(&ZOPN)          SETC  ' '                                         01604200
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    01604300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01604400
&ZOPD(&ZOPN)          SETC  '++ &ZXADJAREA XADJAREA'                    01604500
.*                                                                      01604600
                      AGO   .ZI69G                                      01604700
.*                                                                      01604800
.ZI69F                ANOP  ,                                           01604900
&ZCGPR   SETC  '&XADJAREA'(2,K'&XADJAREA-2)                             01605000
.*                                                                      01605100
.ZI69G                ANOP  ,                                           01605200
.*                                                                      01605300
&ZOPN                 SETA  &ZOPN+1                                     01605400
&ZOPL(&ZOPN)          SETC  ' '                                         01605500
&ZOPO(&ZOPN)          SETC  'ST'                                        01605600
&ZOPV(&ZOPN)          SETC  '&ZCGPR,44(,1)'                             01605700
&ZOPD(&ZOPN)          SETC  '++ &ZXADJAREA XADJAREA'                    01605800
.*                                                                      01605900
.ZI69H                ANOP  ,                                           01606000
.*-------------------------------------------------------------------   01606100
.***AI.L23 ALET XMOSVECTOR F                                            01606200
         AIF   ('&ZXMOSVECTOR' EQ '').ZI71G                             01606300
         AIF   ('&SYSASCE' EQ 'P').ZI71G   SYSSTATE PRIMARY             01606400
&ZCLNG                SETC  '&XMOSVECTOR'                               01606500
         AIF   ('&XMOSVECTOR'(1,1) EQ '(').ZI71E  IN AR                 01606600
.*                                                                      01606700
&ZCGPR                SETC  '14'                                        01606800
&ZOPN                 SETA  &ZOPN+1                                     01606900
&ZOPL(&ZOPN)          SETC  ' '                                         01607000
&ZOPO(&ZOPN)          SETC  'LAE'                                       01607100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01607200
&ZOPD(&ZOPN)          SETC  '++ &ZXMOSVECTOR XMOSVECTOR'                01607300
                      AGO   .ZI71F                                      01607400
.*                                                                      01607500
.ZI71E                ANOP  ,                                           01607600
&ZCGPR   SETC  '&XMOSVECTOR'(2,K'&XMOSVECTOR-2)                         01607700
.*                                                                      01607800
.ZI71F                ANOP  ,                                           01607900
.*                                                                      01608000
&ZOPN                 SETA  &ZOPN+1                                     01608100
&ZOPL(&ZOPN)          SETC  ' '                                         01608200
&ZOPO(&ZOPN)          SETC  'STAM'                                      01608300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCGPR,40(1)'                       01608400
&ZOPD(&ZOPN)          SETC  '++ &ZXMOSVECTOR XMOSVECTOR'                01608500
.*                                                                      01608600
.ZI71G                ANOP  ,                                           01608700
.*-------------------------------------------------------------------   01608800
.***AI.L19  XMOSVECTOR A                                                01608900
                      AIF   ('&ZXMOSVECTOR' EQ '').ZI72H                01609000
&ZCLNG                SETC  '&XMOSVECTOR'                               01609100
&ZCGPR                SETC  '14'                                        01609200
         AIF   ('&XMOSVECTOR'(1,1) EQ '(').ZI72F  IN GPR                01609300
         AIF   ('&SYSASCE' NE 'P').ZI72G   SYSSTATE PRIMARY             01609400
.*                                                                      01609500
&ZOPN                 SETA  &ZOPN+1                                     01609600
&ZOPL(&ZOPN)          SETC  ' '                                         01609700
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    01609800
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01609900
&ZOPD(&ZOPN)          SETC  '++ &ZXMOSVECTOR XMOSVECTOR'                01610000
.*                                                                      01610100
                      AGO   .ZI72G                                      01610200
.*                                                                      01610300
.ZI72F                ANOP  ,                                           01610400
&ZCGPR   SETC  '&XMOSVECTOR'(2,K'&XMOSVECTOR-2)                         01610500
.*                                                                      01610600
.ZI72G                ANOP  ,                                           01610700
.*                                                                      01610800
&ZOPN                 SETA  &ZOPN+1                                     01610900
&ZOPL(&ZOPN)          SETC  ' '                                         01611000
&ZOPO(&ZOPN)          SETC  'ST'                                        01611100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,44(,1)'                             01611200
&ZOPD(&ZOPN)          SETC  '++ &ZXMOSVECTOR XMOSVECTOR'                01611300
.*                                                                      01611400
.ZI72H                ANOP  ,                                           01611500
.*-------------------------------------------------------------------   01611600
.***AI.L18 ALET XANSAREA F                                              01611700
         AIF   ('&XANSAREA' NE 'NO_ANSAREA').ZI74                       01611800
&ZXANSAREA            SETC  ''             RESET INPUT/OUTPUT           01611900
.ZI74                 ANOP  ,                                           01612000
.*-------------------------------------------------------------------   01612100
.***AI.L23 ALET XANSAREA F                                              01612200
         AIF   ('&ZXANSAREA' EQ '').ZI74G                               01612300
         AIF   ('&SYSASCE' EQ 'P').ZI74G   SYSSTATE PRIMARY             01612400
&ZCLNG                SETC  '&XANSAREA'                                 01612500
         AIF   ('&XANSAREA'(1,1) EQ '(').ZI74E  IN AR                   01612600
.*                                                                      01612700
&ZCGPR                SETC  '14'                                        01612800
&ZOPN                 SETA  &ZOPN+1                                     01612900
&ZOPL(&ZOPN)          SETC  ' '                                         01613000
&ZOPO(&ZOPN)          SETC  'LAE'                                       01613100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01613200
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREA XANSAREA'                    01613300
                      AGO   .ZI74F                                      01613400
.*                                                                      01613500
.ZI74E                ANOP  ,                                           01613600
&ZCGPR   SETC  '&XANSAREA'(2,K'&XANSAREA-2)                             01613700
.*                                                                      01613800
.ZI74F                ANOP  ,                                           01613900
.*                                                                      01614000
&ZOPN                 SETA  &ZOPN+1                                     01614100
&ZOPL(&ZOPN)          SETC  ' '                                         01614200
&ZOPO(&ZOPN)          SETC  'STAM'                                      01614300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCGPR,48(1)'                       01614400
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREA XANSAREA'                    01614500
.*                                                                      01614600
.ZI74G                ANOP  ,                                           01614700
.*-------------------------------------------------------------------   01614800
.***AI.L18  XANSAREA A                                                  01614900
         AIF   ('&XANSAREA' NE 'NO_ANSAREA').ZI75                       01615000
&ZXANSAREA            SETC  ''             RESET INPUT/OUTPUT           01615100
.ZI75                 ANOP  ,                                           01615200
.*-------------------------------------------------------------------   01615300
.***AI.L19  XANSAREA A                                                  01615400
                      AIF   ('&ZXANSAREA' EQ '').ZI75H                  01615500
&ZCLNG                SETC  '&XANSAREA'                                 01615600
&ZCGPR                SETC  '14'                                        01615700
         AIF   ('&XANSAREA'(1,1) EQ '(').ZI75F  IN GPR                  01615800
         AIF   ('&SYSASCE' NE 'P').ZI75G   SYSSTATE PRIMARY             01615900
.*                                                                      01616000
&ZOPN                 SETA  &ZOPN+1                                     01616100
&ZOPL(&ZOPN)          SETC  ' '                                         01616200
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    01616300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01616400
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREA XANSAREA'                    01616500
.*                                                                      01616600
                      AGO   .ZI75G                                      01616700
.*                                                                      01616800
.ZI75F                ANOP  ,                                           01616900
&ZCGPR   SETC  '&XANSAREA'(2,K'&XANSAREA-2)                             01617000
.*                                                                      01617100
.ZI75G                ANOP  ,                                           01617200
.*                                                                      01617300
&ZOPN                 SETA  &ZOPN+1                                     01617400
&ZOPL(&ZOPN)          SETC  ' '                                         01617500
&ZOPO(&ZOPN)          SETC  'ST'                                        01617600
&ZOPV(&ZOPN)          SETC  '&ZCGPR,52(,1)'                             01617700
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREA XANSAREA'                    01617800
.*                                                                      01617900
.ZI75H                ANOP  ,                                           01618000
.*-------------------------------------------------------------------   01618100
.***AI.L25  XREQECB AL4                                                 01618200
                      AIF   ('&ZXREQECB' EQ '').ZI77E                   01618300
                      AIF   ('&ZXREQECB' EQ 'OUTPUT').ZI77E             01618400
&ZCGPR                SETC  '&XREQECB'                                  01618500
.*                                                                      01618600
                      AIF   ('&XREQECB'(1,1) NE '(').ZI77B              01618700
&ZCGPR   SETC  '0('.'&XREQECB'(2,K'&XREQECB-2).')'                      01618800
                      AGO   .ZI77D                                      01618900
.ZI77B                ANOP  ,                                           01619000
.*                                                                      01619100
&ZC                   SETC  '&XREQECB'(1,1)                             01619200
                      AIF   (T'&ZC NE 'N').ZI77D                        01619300
&ZC                   SETC  '&XREQECB'                                  01619400
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI77D               01619500
&ZCGPR                SETC  '=AL4(&XREQECB)'                            01619600
.*                                                                      01619700
.ZI77D                ANOP  ,                                           01619800
.*                                                                      01619900
&ZOPN                 SETA  &ZOPN+1                                     01620000
&ZOPL(&ZOPN)          SETC  ' '                                         01620100
&ZOPO(&ZOPN)          SETC  'MVC'                                       01620200
&ZOPV(&ZOPN)          SETC  '56(4,1),&ZCGPR'                            01620300
&ZOPD(&ZOPN)          SETC  '++ &ZXREQECB XREQECB'                      01620400
.*                                                                      01620500
.ZI77E                ANOP  ,                                           01620600
.*-------------------------------------------------------------------   01620700
.***AI.L23 ALET XREQTOKEN F                                             01620800
         AIF   ('&ZXREQTOKEN' EQ '').ZI80G                              01620900
         AIF   ('&SYSASCE' EQ 'P').ZI80G   SYSSTATE PRIMARY             01621000
&ZCLNG                SETC  '&XREQTOKEN'                                01621100
         AIF   ('&XREQTOKEN'(1,1) EQ '(').ZI80E  IN AR                  01621200
.*                                                                      01621300
&ZCGPR                SETC  '14'                                        01621400
&ZOPN                 SETA  &ZOPN+1                                     01621500
&ZOPL(&ZOPN)          SETC  ' '                                         01621600
&ZOPO(&ZOPN)          SETC  'LAE'                                       01621700
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01621800
&ZOPD(&ZOPN)          SETC  '++ &ZXREQTOKEN XREQTOKEN'                  01621900
                      AGO   .ZI80F                                      01622000
.*                                                                      01622100
.ZI80E                ANOP  ,                                           01622200
&ZCGPR   SETC  '&XREQTOKEN'(2,K'&XREQTOKEN-2)                           01622300
.*                                                                      01622400
.ZI80F                ANOP  ,                                           01622500
.*                                                                      01622600
&ZOPN                 SETA  &ZOPN+1                                     01622700
&ZOPL(&ZOPN)          SETC  ' '                                         01622800
&ZOPO(&ZOPN)          SETC  'STAM'                                      01622900
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCGPR,56(1)'                       01623000
&ZOPD(&ZOPN)          SETC  '++ &ZXREQTOKEN XREQTOKEN'                  01623100
.*                                                                      01623200
.ZI80G                ANOP  ,                                           01623300
.*-------------------------------------------------------------------   01623400
.***AI.L19  XREQTOKEN A                                                 01623500
                      AIF   ('&ZXREQTOKEN' EQ '').ZI81H                 01623600
&ZCLNG                SETC  '&XREQTOKEN'                                01623700
&ZCGPR                SETC  '14'                                        01623800
         AIF   ('&XREQTOKEN'(1,1) EQ '(').ZI81F  IN GPR                 01623900
         AIF   ('&SYSASCE' NE 'P').ZI81G   SYSSTATE PRIMARY             01624000
.*                                                                      01624100
&ZOPN                 SETA  &ZOPN+1                                     01624200
&ZOPL(&ZOPN)          SETC  ' '                                         01624300
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    01624400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01624500
&ZOPD(&ZOPN)          SETC  '++ &ZXREQTOKEN XREQTOKEN'                  01624600
.*                                                                      01624700
                      AGO   .ZI81G                                      01624800
.*                                                                      01624900
.ZI81F                ANOP  ,                                           01625000
&ZCGPR   SETC  '&XREQTOKEN'(2,K'&XREQTOKEN-2)                           01625100
.*                                                                      01625200
.ZI81G                ANOP  ,                                           01625300
.*                                                                      01625400
&ZOPN                 SETA  &ZOPN+1                                     01625500
&ZOPL(&ZOPN)          SETC  ' '                                         01625600
&ZOPO(&ZOPN)          SETC  'ST'                                        01625700
&ZOPV(&ZOPN)          SETC  '&ZCGPR,60(,1)'                             01625800
&ZOPD(&ZOPN)          SETC  '++ &ZXREQTOKEN XREQTOKEN'                  01625900
.*                                                                      01626000
.ZI81H                ANOP  ,                                           01626100
.*-------------------------------------------------------------------   01626200
.***AI.L18  XLOCKDATA CL8                                               01626300
         AIF   ('&XLOCKDATA' NE 'NO_LOCKDATA').ZI83                     01626400
&ZXLOCKDATA           SETC  ''             RESET INPUT/OUTPUT           01626500
.ZI83                 ANOP  ,                                           01626600
.*-------------------------------------------------------------------   01626700
.***AI.L25  XLOCKDATA CL8                                               01626800
                      AIF   ('&ZXLOCKDATA' EQ '').ZI83E                 01626900
                      AIF   ('&ZXLOCKDATA' EQ 'OUTPUT').ZI83E           01627000
&ZCGPR                SETC  '&XLOCKDATA'                                01627100
.*                                                                      01627200
                      AIF   ('&XLOCKDATA'(1,1) NE '(').ZI83B            01627300
&ZCGPR   SETC  '0('.'&XLOCKDATA'(2,K'&XLOCKDATA-2).')'                  01627400
.ZI83B                ANOP  ,                                           01627500
.*                                                                      01627600
&ZOPN                 SETA  &ZOPN+1                                     01627700
&ZOPL(&ZOPN)          SETC  ' '                                         01627800
&ZOPO(&ZOPN)          SETC  'MVC'                                       01627900
&ZOPV(&ZOPN)          SETC  '72(8,1),&ZCGPR'                            01628000
&ZOPD(&ZOPN)          SETC  '++ &ZXLOCKDATA XLOCKDATA'                  01628100
.*                                                                      01628200
.ZI83E                ANOP  ,                                           01628300
.*-------------------------------------------------------------------   01628400
.***AI.L18  XEXTRESTOKEN CL16                                           01628500
         AIF   ('&XEXTRESTOKEN' NE 'NO_EXTRESTOKEN').ZI86               01628600
&ZXEXTRESTOKEN        SETC  ''             RESET INPUT/OUTPUT           01628700
.ZI86                 ANOP  ,                                           01628800
.*-------------------------------------------------------------------   01628900
.***AI.L25  XEXTRESTOKEN CL16                                           01629000
                      AIF   ('&ZXEXTRESTOKEN' EQ '').ZI86E              01629100
                      AIF   ('&ZXEXTRESTOKEN' EQ 'OUTPUT').ZI86E        01629200
&ZCGPR                SETC  '&XEXTRESTOKEN'                             01629300
.*                                                                      01629400
                      AIF   ('&XEXTRESTOKEN'(1,1) NE '(').ZI86B         01629500
&ZCGPR   SETC  '0('.'&XEXTRESTOKEN'(2,K'&XEXTRESTOKEN-2).')'            01629600
.ZI86B                ANOP  ,                                           01629700
.*                                                                      01629800
&ZOPN                 SETA  &ZOPN+1                                     01629900
&ZOPL(&ZOPN)          SETC  ' '                                         01630000
&ZOPO(&ZOPN)          SETC  'MVC'                                       01630100
&ZOPV(&ZOPN)          SETC  '72(16,1),&ZCGPR'                           01630200
&ZOPD(&ZOPN)          SETC  '++ &ZXEXTRESTOKEN XEXTRESTOKEN'            01630300
.*                                                                      01630400
.ZI86E                ANOP  ,                                           01630500
.*-------------------------------------------------------------------   01630600
.***AI.L18  XBUFNUM XL1                                                 01630700
         AIF   ('&XBUFNUM' NE 'NO_BUFNUM').ZI92                         01630800
&ZXBUFNUM             SETC  ''             RESET INPUT/OUTPUT           01630900
.ZI92                 ANOP  ,                                           01631000
.*-------------------------------------------------------------------   01631100
.***AI.L25  XBUFNUM XL1                                                 01631200
                      AIF   ('&ZXBUFNUM' EQ '').ZI92E                   01631300
                      AIF   ('&ZXBUFNUM' EQ 'OUTPUT').ZI92E             01631400
&ZCGPR                SETC  '&XBUFNUM'                                  01631500
.*                                                                      01631600
                      AIF   ('&XBUFNUM'(1,1) NE '(').ZI92B              01631700
&ZCGPR   SETC  '0('.'&XBUFNUM'(2,K'&XBUFNUM-2).')'                      01631800
                      AGO   .ZI92D                                      01631900
.ZI92B                ANOP  ,                                           01632000
.*                                                                      01632100
&ZC                   SETC  '&XBUFNUM'(1,1)                             01632200
                      AIF   (T'&ZC NE 'N').ZI92D                        01632300
&ZC                   SETC  '&XBUFNUM'                                  01632400
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI92D               01632500
&ZCGPR                SETC  '=AL1(&XBUFNUM)'                            01632600
.*                                                                      01632700
.ZI92D                ANOP  ,                                           01632800
.*                                                                      01632900
&ZOPN                 SETA  &ZOPN+1                                     01633000
&ZOPL(&ZOPN)          SETC  ' '                                         01633100
&ZOPO(&ZOPN)          SETC  'MVC'                                       01633200
&ZOPV(&ZOPN)          SETC  '98(1,1),&ZCGPR'                            01633300
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFNUM XBUFNUM'                      01633400
.*                                                                      01633500
.ZI92E                ANOP  ,                                           01633600
.*-------------------------------------------------------------------   01633700
.***AI.L18  XBUFINCRNUM XL1                                             01633800
         AIF   ('&XBUFINCRNUM' NE 'NO_BUFINCRNUM').ZI93                 01633900
&ZXBUFINCRNUM         SETC  ''             RESET INPUT/OUTPUT           01634000
.ZI93                 ANOP  ,                                           01634100
.*-------------------------------------------------------------------   01634200
.***AI.L25  XBUFINCRNUM XL1                                             01634300
                      AIF   ('&ZXBUFINCRNUM' EQ '').ZI93E               01634400
                      AIF   ('&ZXBUFINCRNUM' EQ 'OUTPUT').ZI93E         01634500
&ZCGPR                SETC  '&XBUFINCRNUM'                              01634600
.*                                                                      01634700
                      AIF   ('&XBUFINCRNUM'(1,1) NE '(').ZI93B          01634800
&ZCGPR   SETC  '0('.'&XBUFINCRNUM'(2,K'&XBUFINCRNUM-2).')'              01634900
                      AGO   .ZI93D                                      01635000
.ZI93B                ANOP  ,                                           01635100
.*                                                                      01635200
&ZC                   SETC  '&XBUFINCRNUM'(1,1)                         01635300
                      AIF   (T'&ZC NE 'N').ZI93D                        01635400
&ZC                   SETC  '&XBUFINCRNUM'                              01635500
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI93D               01635600
&ZCGPR                SETC  '=AL1(&XBUFINCRNUM)'                        01635700
.*                                                                      01635800
.ZI93D                ANOP  ,                                           01635900
.*                                                                      01636000
&ZOPN                 SETA  &ZOPN+1                                     01636100
&ZOPL(&ZOPN)          SETC  ' '                                         01636200
&ZOPO(&ZOPN)          SETC  'MVC'                                       01636300
&ZOPV(&ZOPN)          SETC  '99(1,1),&ZCGPR'                            01636400
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFINCRNUM XBUFINCRNUM'              01636500
.*                                                                      01636600
.ZI93E                ANOP  ,                                           01636700
.*-------------------------------------------------------------------   01636800
.***AI.L18  XLOCKINDEX F                                                01636900
         AIF   ('&XLOCKINDEX' NE 'NO_LOCKINDEX').ZI100                  01637000
&ZXLOCKINDEX          SETC  ''             RESET INPUT/OUTPUT           01637100
.ZI100                ANOP  ,                                           01637200
.*-------------------------------------------------------------------   01637300
.***AI.L25  XLOCKINDEX F                                                01637400
                      AIF   ('&ZXLOCKINDEX' EQ '').ZI100E               01637500
                      AIF   ('&ZXLOCKINDEX' EQ 'OUTPUT').ZI100E         01637600
&ZCGPR                SETC  '&XLOCKINDEX'                               01637700
.*                                                                      01637800
                      AIF   ('&XLOCKINDEX'(1,1) NE '(').ZI100B          01637900
&ZCGPR   SETC  '0('.'&XLOCKINDEX'(2,K'&XLOCKINDEX-2).')'                01638000
                      AGO   .ZI100D                                     01638100
.ZI100B               ANOP  ,                                           01638200
.*                                                                      01638300
&ZC                   SETC  '&XLOCKINDEX'(1,1)                          01638400
                      AIF   (T'&ZC NE 'N').ZI100D                       01638500
&ZC                   SETC  '&XLOCKINDEX'                               01638600
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI100D              01638700
&ZCGPR                SETC  '=FL4''&XLOCKINDEX'''                       01638800
.*                                                                      01638900
.ZI100D               ANOP  ,                                           01639000
.*                                                                      01639100
&ZOPN                 SETA  &ZOPN+1                                     01639200
&ZOPL(&ZOPN)          SETC  ' '                                         01639300
&ZOPO(&ZOPN)          SETC  'MVC'                                       01639400
&ZOPV(&ZOPN)          SETC  '112(4,1),&ZCGPR'                           01639500
&ZOPD(&ZOPN)          SETC  '++ &ZXLOCKINDEX XLOCKINDEX'                01639600
.*                                                                      01639700
.ZI100E               ANOP  ,                                           01639800
.*-------------------------------------------------------------------   01639900
.***AI.L18  XLISTNUM F                                                  01640000
         AIF   ('&XLISTNUM' NE 'NO_LISTNUM').ZI101                      01640100
&ZXLISTNUM            SETC  ''             RESET INPUT/OUTPUT           01640200
.ZI101                ANOP  ,                                           01640300
.*-------------------------------------------------------------------   01640400
.***AI.L25  XLISTNUM F                                                  01640500
                      AIF   ('&ZXLISTNUM' EQ '').ZI101E                 01640600
                      AIF   ('&ZXLISTNUM' EQ 'OUTPUT').ZI101E           01640700
&ZCGPR                SETC  '&XLISTNUM'                                 01640800
.*                                                                      01640900
                      AIF   ('&XLISTNUM'(1,1) NE '(').ZI101B            01641000
&ZCGPR   SETC  '0('.'&XLISTNUM'(2,K'&XLISTNUM-2).')'                    01641100
                      AGO   .ZI101D                                     01641200
.ZI101B               ANOP  ,                                           01641300
.*                                                                      01641400
&ZC                   SETC  '&XLISTNUM'(1,1)                            01641500
                      AIF   (T'&ZC NE 'N').ZI101D                       01641600
&ZC                   SETC  '&XLISTNUM'                                 01641700
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI101D              01641800
&ZCGPR                SETC  '=AL4(&XLISTNUM)'                           01641900
.*                                                                      01642000
.ZI101D               ANOP  ,                                           01642100
.*                                                                      01642200
&ZOPN                 SETA  &ZOPN+1                                     01642300
&ZOPL(&ZOPN)          SETC  ' '                                         01642400
&ZOPO(&ZOPN)          SETC  'MVC'                                       01642500
&ZOPV(&ZOPN)          SETC  '116(4,1),&ZCGPR'                           01642600
&ZOPD(&ZOPN)          SETC  '++ &ZXLISTNUM XLISTNUM'                    01642700
.*                                                                      01642800
.ZI101E               ANOP  ,                                           01642900
.*-------------------------------------------------------------------   01643000
.***AI.L18  XENTRYID CL12                                               01643100
         AIF   ('&XENTRYID' NE 'NO_ENTRYID').ZI102                      01643200
&ZXENTRYID            SETC  ''             RESET INPUT/OUTPUT           01643300
.ZI102                ANOP  ,                                           01643400
.*-------------------------------------------------------------------   01643500
.***AI.L25  XENTRYID CL12                                               01643600
                      AIF   ('&ZXENTRYID' EQ '').ZI102E                 01643700
                      AIF   ('&ZXENTRYID' EQ 'OUTPUT').ZI102E           01643800
&ZCGPR                SETC  '&XENTRYID'                                 01643900
.*                                                                      01644000
                      AIF   ('&XENTRYID'(1,1) NE '(').ZI102B            01644100
&ZCGPR   SETC  '0('.'&XENTRYID'(2,K'&XENTRYID-2).')'                    01644200
.ZI102B               ANOP  ,                                           01644300
.*                                                                      01644400
&ZOPN                 SETA  &ZOPN+1                                     01644500
&ZOPL(&ZOPN)          SETC  ' '                                         01644600
&ZOPO(&ZOPN)          SETC  'MVC'                                       01644700
&ZOPV(&ZOPN)          SETC  '120(12,1),&ZCGPR'                          01644800
&ZOPD(&ZOPN)          SETC  '++ &ZXENTRYID XENTRYID'                    01644900
.*                                                                      01645000
.ZI102E               ANOP  ,                                           01645100
.*-------------------------------------------------------------------   01645200
.***AI.L18  XNEWVERS CL8                                                01645300
         AIF   ('&XNEWVERS' NE 'NO_NEWVERS').ZI103                      01645400
&ZXNEWVERS            SETC  ''             RESET INPUT/OUTPUT           01645500
.ZI103                ANOP  ,                                           01645600
.*-------------------------------------------------------------------   01645700
.***AI.L25  XNEWVERS CL8                                                01645800
                      AIF   ('&ZXNEWVERS' EQ '').ZI103E                 01645900
                      AIF   ('&ZXNEWVERS' EQ 'OUTPUT').ZI103E           01646000
&ZCGPR                SETC  '&XNEWVERS'                                 01646100
.*                                                                      01646200
                      AIF   ('&XNEWVERS'(1,1) NE '(').ZI103B            01646300
&ZCGPR   SETC  '0('.'&XNEWVERS'(2,K'&XNEWVERS-2).')'                    01646400
.ZI103B               ANOP  ,                                           01646500
.*                                                                      01646600
&ZOPN                 SETA  &ZOPN+1                                     01646700
&ZOPL(&ZOPN)          SETC  ' '                                         01646800
&ZOPO(&ZOPN)          SETC  'MVC'                                       01646900
&ZOPV(&ZOPN)          SETC  '132(8,1),&ZCGPR'                           01647000
&ZOPD(&ZOPN)          SETC  '++ &ZXNEWVERS XNEWVERS'                    01647100
.*                                                                      01647200
.ZI103E               ANOP  ,                                           01647300
.*-------------------------------------------------------------------   01647400
.***AI.L18  XVERSCOMP CL8                                               01647500
         AIF   ('&XVERSCOMP' NE 'NO_VERSCOMP').ZI104                    01647600
&ZXVERSCOMP           SETC  ''             RESET INPUT/OUTPUT           01647700
.ZI104                ANOP  ,                                           01647800
.*-------------------------------------------------------------------   01647900
.***AI.L25  XVERSCOMP CL8                                               01648000
                      AIF   ('&ZXVERSCOMP' EQ '').ZI104E                01648100
                      AIF   ('&ZXVERSCOMP' EQ 'OUTPUT').ZI104E          01648200
&ZCGPR                SETC  '&XVERSCOMP'                                01648300
.*                                                                      01648400
                      AIF   ('&XVERSCOMP'(1,1) NE '(').ZI104B           01648500
&ZCGPR   SETC  '0('.'&XVERSCOMP'(2,K'&XVERSCOMP-2).')'                  01648600
.ZI104B               ANOP  ,                                           01648700
.*                                                                      01648800
&ZOPN                 SETA  &ZOPN+1                                     01648900
&ZOPL(&ZOPN)          SETC  ' '                                         01649000
&ZOPO(&ZOPN)          SETC  'MVC'                                       01649100
&ZOPV(&ZOPN)          SETC  '140(8,1),&ZCGPR'                           01649200
&ZOPD(&ZOPN)          SETC  '++ &ZXVERSCOMP XVERSCOMP'                  01649300
.*                                                                      01649400
.ZI104E               ANOP  ,                                           01649500
.*-------------------------------------------------------------------   01649600
.***AI.L18  XLISTDESC CL32                                              01649700
         AIF   ('&XLISTDESC' NE 'NO_LISTDESC').ZI107                    01649800
&ZXLISTDESC           SETC  ''             RESET INPUT/OUTPUT           01649900
.ZI107                ANOP  ,                                           01650000
.*-------------------------------------------------------------------   01650100
.***AI.L25  XLISTDESC CL32                                              01650200
                      AIF   ('&ZXLISTDESC' EQ '').ZI107E                01650300
                      AIF   ('&ZXLISTDESC' EQ 'OUTPUT').ZI107E          01650400
&ZCGPR                SETC  '&XLISTDESC'                                01650500
.*                                                                      01650600
                      AIF   ('&XLISTDESC'(1,1) NE '(').ZI107B           01650700
&ZCGPR   SETC  '0('.'&XLISTDESC'(2,K'&XLISTDESC-2).')'                  01650800
.ZI107B               ANOP  ,                                           01650900
.*                                                                      01651000
&ZOPN                 SETA  &ZOPN+1                                     01651100
&ZOPL(&ZOPN)          SETC  ' '                                         01651200
&ZOPO(&ZOPN)          SETC  'MVC'                                       01651300
&ZOPV(&ZOPN)          SETC  '180(32,1),&ZCGPR'                          01651400
&ZOPD(&ZOPN)          SETC  '++ &ZXLISTDESC XLISTDESC'                  01651500
.*                                                                      01651600
.ZI107E               ANOP  ,                                           01651700
.*-------------------------------------------------------------------   01651800
.***AI.L18  XELEMNUM XL1                                                01651900
         AIF   ('&XELEMNUM' NE 'NO_ELEMNUM').ZI114                      01652000
&ZXELEMNUM            SETC  ''             RESET INPUT/OUTPUT           01652100
.ZI114                ANOP  ,                                           01652200
.*-------------------------------------------------------------------   01652300
.***AI.L25  XELEMNUM XL1                                                01652400
                      AIF   ('&ZXELEMNUM' EQ '').ZI114E                 01652500
                      AIF   ('&ZXELEMNUM' EQ 'OUTPUT').ZI114E           01652600
&ZCGPR                SETC  '&XELEMNUM'                                 01652700
.*                                                                      01652800
                      AIF   ('&XELEMNUM'(1,1) NE '(').ZI114B            01652900
&ZCGPR   SETC  '0('.'&XELEMNUM'(2,K'&XELEMNUM-2).')'                    01653000
                      AGO   .ZI114D                                     01653100
.ZI114B               ANOP  ,                                           01653200
.*                                                                      01653300
&ZC                   SETC  '&XELEMNUM'(1,1)                            01653400
                      AIF   (T'&ZC NE 'N').ZI114D                       01653500
&ZC                   SETC  '&XELEMNUM'                                 01653600
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI114D              01653700
&ZCGPR                SETC  '=AL1(&XELEMNUM)'                           01653800
.*                                                                      01653900
.ZI114D               ANOP  ,                                           01654000
.*                                                                      01654100
&ZOPN                 SETA  &ZOPN+1                                     01654200
&ZOPL(&ZOPN)          SETC  ' '                                         01654300
&ZOPO(&ZOPN)          SETC  'MVC'                                       01654400
&ZOPV(&ZOPN)          SETC  '104(1,1),&ZCGPR'                           01654500
&ZOPD(&ZOPN)          SETC  '++ &ZXELEMNUM XELEMNUM'                    01654600
.*                                                                      01654700
.ZI114E               ANOP  ,                                           01654800
.*-------------------------------------------------------------------   01654900
.***AI.L25  XSTARTINDEX XL2                                             01655000
                      AIF   ('&ZXSTARTINDEX' EQ '').ZI123E              01655100
                      AIF   ('&ZXSTARTINDEX' EQ 'OUTPUT').ZI123E        01655200
&ZCGPR                SETC  '&XSTARTINDEX'                              01655300
.*                                                                      01655400
                      AIF   ('&XSTARTINDEX'(1,1) NE '(').ZI123B         01655500
&ZCGPR   SETC  '0('.'&XSTARTINDEX'(2,K'&XSTARTINDEX-2).')'              01655600
                      AGO   .ZI123D                                     01655700
.ZI123B               ANOP  ,                                           01655800
.*                                                                      01655900
&ZC                   SETC  '&XSTARTINDEX'(1,1)                         01656000
                      AIF   (T'&ZC NE 'N').ZI123D                       01656100
&ZC                   SETC  '&XSTARTINDEX'                              01656200
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI123D              01656300
&ZCGPR                SETC  '=AL2(&XSTARTINDEX)'                        01656400
.*                                                                      01656500
.ZI123D               ANOP  ,                                           01656600
.*                                                                      01656700
&ZOPN                 SETA  &ZOPN+1                                     01656800
&ZOPL(&ZOPN)          SETC  ' '                                         01656900
&ZOPO(&ZOPN)          SETC  'MVC'                                       01657000
&ZOPV(&ZOPN)          SETC  '108(2,1),&ZCGPR'                           01657100
&ZOPD(&ZOPN)          SETC  '++ &ZXSTARTINDEX XSTARTINDEX'              01657200
.*                                                                      01657300
.ZI123E               ANOP  ,                                           01657400
.*-------------------------------------------------------------------   01657500
.***AI.L25  XENDINDEX XL2                                               01657600
                      AIF   ('&ZXENDINDEX' EQ '').ZI124E                01657700
                      AIF   ('&ZXENDINDEX' EQ 'OUTPUT').ZI124E          01657800
&ZCGPR                SETC  '&XENDINDEX'                                01657900
.*                                                                      01658000
                      AIF   ('&XENDINDEX'(1,1) NE '(').ZI124B           01658100
&ZCGPR   SETC  '0('.'&XENDINDEX'(2,K'&XENDINDEX-2).')'                  01658200
                      AGO   .ZI124D                                     01658300
.ZI124B               ANOP  ,                                           01658400
.*                                                                      01658500
&ZC                   SETC  '&XENDINDEX'(1,1)                           01658600
                      AIF   (T'&ZC NE 'N').ZI124D                       01658700
&ZC                   SETC  '&XENDINDEX'                                01658800
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI124D              01658900
&ZCGPR                SETC  '=AL2(&XENDINDEX)'                          01659000
.*                                                                      01659100
.ZI124D               ANOP  ,                                           01659200
.*                                                                      01659300
&ZOPN                 SETA  &ZOPN+1                                     01659400
&ZOPL(&ZOPN)          SETC  ' '                                         01659500
&ZOPO(&ZOPN)          SETC  'MVC'                                       01659600
&ZOPV(&ZOPN)          SETC  '110(2,1),&ZCGPR'                           01659700
&ZOPD(&ZOPN)          SETC  '++ &ZXENDINDEX XENDINDEX'                  01659800
.*                                                                      01659900
.ZI124E               ANOP  ,                                           01660000
.*-------------------------------------------------------------------   01660100
.***AI.L25  XVECTORINDEX F                                              01660200
                      AIF   ('&ZXVECTORINDEX' EQ '').ZI126E             01660300
                      AIF   ('&ZXVECTORINDEX' EQ 'OUTPUT').ZI126E       01660400
&ZCGPR                SETC  '&XVECTORINDEX'                             01660500
.*                                                                      01660600
                      AIF   ('&XVECTORINDEX'(1,1) NE '(').ZI126B        01660700
&ZCGPR   SETC  '0('.'&XVECTORINDEX'(2,K'&XVECTORINDEX-2).')'            01660800
                      AGO   .ZI126D                                     01660900
.ZI126B               ANOP  ,                                           01661000
.*                                                                      01661100
&ZC                   SETC  '&XVECTORINDEX'(1,1)                        01661200
                      AIF   (T'&ZC NE 'N').ZI126D                       01661300
&ZC                   SETC  '&XVECTORINDEX'                             01661400
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI126D              01661500
&ZCGPR                SETC  '=FL4''&XVECTORINDEX'''                     01661600
.*                                                                      01661700
.ZI126D               ANOP  ,                                           01661800
.*                                                                      01661900
&ZOPN                 SETA  &ZOPN+1                                     01662000
&ZOPL(&ZOPN)          SETC  ' '                                         01662100
&ZOPO(&ZOPN)          SETC  'MVC'                                       01662200
&ZOPV(&ZOPN)          SETC  '112(4,1),&ZCGPR'                           01662300
&ZOPD(&ZOPN)          SETC  '++ &ZXVECTORINDEX XVECTORINDEX'            01662400
.*                                                                      01662500
.ZI126E               ANOP  ,                                           01662600
.*-------------------------------------------------------------------   01662700
.***AI.L18  XLISTLIMIT F                                                01662800
         AIF   ('&XLISTLIMIT' NE 'NO_LISTLIMIT').ZI128                  01662900
&ZXLISTLIMIT          SETC  ''             RESET INPUT/OUTPUT           01663000
.ZI128                ANOP  ,                                           01663100
.*-------------------------------------------------------------------   01663200
.***AI.L25  XLISTLIMIT F                                                01663300
                      AIF   ('&ZXLISTLIMIT' EQ '').ZI128E               01663400
                      AIF   ('&ZXLISTLIMIT' EQ 'OUTPUT').ZI128E         01663500
&ZCGPR                SETC  '&XLISTLIMIT'                               01663600
.*                                                                      01663700
                      AIF   ('&XLISTLIMIT'(1,1) NE '(').ZI128B          01663800
&ZCGPR   SETC  '0('.'&XLISTLIMIT'(2,K'&XLISTLIMIT-2).')'                01663900
                      AGO   .ZI128D                                     01664000
.ZI128B               ANOP  ,                                           01664100
.*                                                                      01664200
&ZC                   SETC  '&XLISTLIMIT'(1,1)                          01664300
                      AIF   (T'&ZC NE 'N').ZI128D                       01664400
&ZC                   SETC  '&XLISTLIMIT'                               01664500
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI128D              01664600
&ZCGPR                SETC  '=AL4(&XLISTLIMIT)'                         01664700
.*                                                                      01664800
.ZI128D               ANOP  ,                                           01664900
.*                                                                      01665000
&ZOPN                 SETA  &ZOPN+1                                     01665100
&ZOPL(&ZOPN)          SETC  ' '                                         01665200
&ZOPO(&ZOPN)          SETC  'MVC'                                       01665300
&ZOPV(&ZOPN)          SETC  '120(4,1),&ZCGPR'                           01665400
&ZOPD(&ZOPN)          SETC  '++ &ZXLISTLIMIT XLISTLIMIT'                01665500
.*                                                                      01665600
.ZI128E               ANOP  ,                                           01665700
.*-------------------------------------------------------------------   01665800
.***AI.L18  XENTRYNAME CL16                                             01665900
         AIF   ('&XENTRYNAME' NE 'NO_ENTRYNAME').ZI131                  01666000
&ZXENTRYNAME          SETC  ''             RESET INPUT/OUTPUT           01666100
.ZI131                ANOP  ,                                           01666200
.*-------------------------------------------------------------------   01666300
.***AI.L25  XENTRYNAME CL16                                             01666400
                      AIF   ('&ZXENTRYNAME' EQ '').ZI131E               01666500
                      AIF   ('&ZXENTRYNAME' EQ 'OUTPUT').ZI131E         01666600
&ZCGPR                SETC  '&XENTRYNAME'                               01666700
.*                                                                      01666800
                      AIF   ('&XENTRYNAME'(1,1) NE '(').ZI131B          01666900
&ZCGPR   SETC  '0('.'&XENTRYNAME'(2,K'&XENTRYNAME-2).')'                01667000
.ZI131B               ANOP  ,                                           01667100
.*                                                                      01667200
&ZOPN                 SETA  &ZOPN+1                                     01667300
&ZOPL(&ZOPN)          SETC  ' '                                         01667400
&ZOPO(&ZOPN)          SETC  'MVC'                                       01667500
&ZOPV(&ZOPN)          SETC  '148(16,1),&ZCGPR'                          01667600
&ZOPD(&ZOPN)          SETC  '++ &ZXENTRYNAME XENTRYNAME'                01667700
.*                                                                      01667800
.ZI131E               ANOP  ,                                           01667900
.*-------------------------------------------------------------------   01668000
.***AI.L18  XENTRYKEY CL16                                              01668100
         AIF   ('&XENTRYKEY' NE 'NO_ENTRYKEY').ZI133                    01668200
&ZXENTRYKEY           SETC  ''             RESET INPUT/OUTPUT           01668300
.ZI133                ANOP  ,                                           01668400
.*-------------------------------------------------------------------   01668500
.***AI.L25  XENTRYKEY CL16                                              01668600
                      AIF   ('&ZXENTRYKEY' EQ '').ZI133E                01668700
                      AIF   ('&ZXENTRYKEY' EQ 'OUTPUT').ZI133E          01668800
&ZCGPR                SETC  '&XENTRYKEY'                                01668900
.*                                                                      01669000
                      AIF   ('&XENTRYKEY'(1,1) NE '(').ZI133B           01669100
&ZCGPR   SETC  '0('.'&XENTRYKEY'(2,K'&XENTRYKEY-2).')'                  01669200
.ZI133B               ANOP  ,                                           01669300
.*                                                                      01669400
&ZOPN                 SETA  &ZOPN+1                                     01669500
&ZOPL(&ZOPN)          SETC  ' '                                         01669600
&ZOPO(&ZOPN)          SETC  'MVC'                                       01669700
&ZOPV(&ZOPN)          SETC  '148(16,1),&ZCGPR'                          01669800
&ZOPD(&ZOPN)          SETC  '++ &ZXENTRYKEY XENTRYKEY'                  01669900
.*                                                                      01670000
.ZI133E               ANOP  ,                                           01670100
.*-------------------------------------------------------------------   01670200
.***AI.L18  XKEYCOMP CL16                                               01670300
         AIF   ('&XKEYCOMP' NE 'NO_KEYCOMP').ZI135                      01670400
&ZXKEYCOMP            SETC  ''             RESET INPUT/OUTPUT           01670500
.ZI135                ANOP  ,                                           01670600
.*-------------------------------------------------------------------   01670700
.***AI.L25  XKEYCOMP CL16                                               01670800
                      AIF   ('&ZXKEYCOMP' EQ '').ZI135E                 01670900
                      AIF   ('&ZXKEYCOMP' EQ 'OUTPUT').ZI135E           01671000
&ZCGPR                SETC  '&XKEYCOMP'                                 01671100
.*                                                                      01671200
                      AIF   ('&XKEYCOMP'(1,1) NE '(').ZI135B            01671300
&ZCGPR   SETC  '0('.'&XKEYCOMP'(2,K'&XKEYCOMP-2).')'                    01671400
.ZI135B               ANOP  ,                                           01671500
.*                                                                      01671600
&ZOPN                 SETA  &ZOPN+1                                     01671700
&ZOPL(&ZOPN)          SETC  ' '                                         01671800
&ZOPO(&ZOPN)          SETC  'MVC'                                       01671900
&ZOPV(&ZOPN)          SETC  '148(16,1),&ZCGPR'                          01672000
&ZOPD(&ZOPN)          SETC  '++ &ZXKEYCOMP XKEYCOMP'                    01672100
.*                                                                      01672200
.ZI135E               ANOP  ,                                           01672300
.*-------------------------------------------------------------------   01672400
.***AI.L18  XRESTOKEN CL8                                               01672500
         AIF   ('&XRESTOKEN' NE 'NO_RESTOKEN').ZI140                    01672600
&ZXRESTOKEN           SETC  ''             RESET INPUT/OUTPUT           01672700
.ZI140                ANOP  ,                                           01672800
.*-------------------------------------------------------------------   01672900
.***AI.L25  XRESTOKEN CL8                                               01673000
                      AIF   ('&ZXRESTOKEN' EQ '').ZI140E                01673100
                      AIF   ('&ZXRESTOKEN' EQ 'OUTPUT').ZI140E          01673200
&ZCGPR                SETC  '&XRESTOKEN'                                01673300
.*                                                                      01673400
                      AIF   ('&XRESTOKEN'(1,1) NE '(').ZI140B           01673500
&ZCGPR   SETC  '0('.'&XRESTOKEN'(2,K'&XRESTOKEN-2).')'                  01673600
.ZI140B               ANOP  ,                                           01673700
.*                                                                      01673800
&ZOPN                 SETA  &ZOPN+1                                     01673900
&ZOPL(&ZOPN)          SETC  ' '                                         01674000
&ZOPO(&ZOPN)          SETC  'MVC'                                       01674100
&ZOPV(&ZOPN)          SETC  '164(8,1),&ZCGPR'                           01674200
&ZOPD(&ZOPN)          SETC  '++ &ZXRESTOKEN XRESTOKEN'                  01674300
.*                                                                      01674400
.ZI140E               ANOP  ,                                           01674500
.*-------------------------------------------------------------------   01674600
.***AI.L25  XFIRSTELEM XL2                                              01674700
                      AIF   ('&ZXFIRSTELEM' EQ '').ZI143E               01674800
                      AIF   ('&ZXFIRSTELEM' EQ 'OUTPUT').ZI143E         01674900
&ZCGPR                SETC  '&XFIRSTELEM'                               01675000
.*                                                                      01675100
                      AIF   ('&XFIRSTELEM'(1,1) NE '(').ZI143B          01675200
&ZCGPR   SETC  '0('.'&XFIRSTELEM'(2,K'&XFIRSTELEM-2).')'                01675300
                      AGO   .ZI143D                                     01675400
.ZI143B               ANOP  ,                                           01675500
.*                                                                      01675600
&ZC                   SETC  '&XFIRSTELEM'(1,1)                          01675700
                      AIF   (T'&ZC NE 'N').ZI143D                       01675800
&ZC                   SETC  '&XFIRSTELEM'                               01675900
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI143D              01676000
&ZCGPR                SETC  '=AL2(&XFIRSTELEM)'                         01676100
.*                                                                      01676200
.ZI143D               ANOP  ,                                           01676300
.*                                                                      01676400
&ZOPN                 SETA  &ZOPN+1                                     01676500
&ZOPL(&ZOPN)          SETC  ' '                                         01676600
&ZOPO(&ZOPN)          SETC  'MVC'                                       01676700
&ZOPV(&ZOPN)          SETC  '164(2,1),&ZCGPR'                           01676800
&ZOPD(&ZOPN)          SETC  '++ &ZXFIRSTELEM XFIRSTELEM'                01676900
.*                                                                      01677000
.ZI143E               ANOP  ,                                           01677100
.*-------------------------------------------------------------------   01677200
.***AI.L25  XLASTELEM XL2                                               01677300
                      AIF   ('&ZXLASTELEM' EQ '').ZI144E                01677400
                      AIF   ('&ZXLASTELEM' EQ 'OUTPUT').ZI144E          01677500
&ZCGPR                SETC  '&XLASTELEM'                                01677600
.*                                                                      01677700
                      AIF   ('&XLASTELEM'(1,1) NE '(').ZI144B           01677800
&ZCGPR   SETC  '0('.'&XLASTELEM'(2,K'&XLASTELEM-2).')'                  01677900
                      AGO   .ZI144D                                     01678000
.ZI144B               ANOP  ,                                           01678100
.*                                                                      01678200
&ZC                   SETC  '&XLASTELEM'(1,1)                           01678300
                      AIF   (T'&ZC NE 'N').ZI144D                       01678400
&ZC                   SETC  '&XLASTELEM'                                01678500
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI144D              01678600
&ZCGPR                SETC  '=AL2(&XLASTELEM)'                          01678700
.*                                                                      01678800
.ZI144D               ANOP  ,                                           01678900
.*                                                                      01679000
&ZOPN                 SETA  &ZOPN+1                                     01679100
&ZOPL(&ZOPN)          SETC  ' '                                         01679200
&ZOPO(&ZOPN)          SETC  'MVC'                                       01679300
&ZOPV(&ZOPN)          SETC  '166(2,1),&ZCGPR'                           01679400
&ZOPD(&ZOPN)          SETC  '++ &ZXLASTELEM XLASTELEM'                  01679500
.*                                                                      01679600
.ZI144E               ANOP  ,                                           01679700
.*-------------------------------------------------------------------   01679800
.***AI.LVER01                                                           01679900
                      AIF  (&XPLISTVER LT 1).ZI155Z                     01680000
.*-------------------------------------------------------------------   01680100
.***AI.LVER02                                                           01680200
.ZI155Z               ANOP  ,                                           01680300
.*-------------------------------------------------------------------   01680400
.***AI.LVER01                                                           01680500
                      AIF  (&XPLISTVER LT 1).ZI156Z                     01680600
.*-------------------------------------------------------------------   01680700
.***AI.LVER02                                                           01680800
.ZI156Z               ANOP  ,                                           01680900
.*-------------------------------------------------------------------   01681000
.***AI.LVER01                                                           01681100
                      AIF  (&XPLISTVER LT 1).ZI157Z                     01681200
.*-------------------------------------------------------------------   01681300
.***AI.LVER02                                                           01681400
.ZI157Z               ANOP  ,                                           01681500
.*-------------------------------------------------------------------   01681600
.***AI.LVER01                                                           01681700
                      AIF  (&XPLISTVER LT 1).ZI158Z                     01681800
.*-------------------------------------------------------------------   01681900
.***AI.LVER02                                                           01682000
.ZI158Z               ANOP  ,                                           01682100
.*-------------------------------------------------------------------   01682200
.***AI.LVER01                                                           01682300
                      AIF  (&XPLISTVER LT 1).ZI159Z                     01682400
.*-------------------------------------------------------------------   01682500
.***AI.LVER02                                                           01682600
.ZI159Z               ANOP  ,                                           01682700
.*-------------------------------------------------------------------   01682800
.***AI.LVER01                                                           01682900
                      AIF  (&XPLISTVER LT 1).ZI160Z                     01683000
.*-------------------------------------------------------------------   01683100
.***AI.LVER02                                                           01683200
.ZI160Z               ANOP  ,                                           01683300
.*-------------------------------------------------------------------   01683400
.***AI.LVER01                                                           01683500
                      AIF  (&XPLISTVER LT 1).ZI161Z                     01683600
.*-------------------------------------------------------------------   01683700
.***AI.L18  XLISTKEYINC F                                               01683800
         AIF   ('&XLISTKEYINC' NE 'NO_LISTKEYINC').ZI161                01683900
&ZXLISTKEYINC         SETC  ''             RESET INPUT/OUTPUT           01684000
.ZI161                ANOP  ,                                           01684100
.*-------------------------------------------------------------------   01684200
.***AI.L25  XLISTKEYINC F                                               01684300
                      AIF   ('&ZXLISTKEYINC' EQ '').ZI161E              01684400
                      AIF   ('&ZXLISTKEYINC' EQ 'OUTPUT').ZI161E        01684500
&ZCGPR                SETC  '&XLISTKEYINC'                              01684600
.*                                                                      01684700
                      AIF   ('&XLISTKEYINC'(1,1) NE '(').ZI161B         01684800
&ZCGPR   SETC  '0('.'&XLISTKEYINC'(2,K'&XLISTKEYINC-2).')'              01684900
                      AGO   .ZI161D                                     01685000
.ZI161B               ANOP  ,                                           01685100
.*                                                                      01685200
&ZC                   SETC  '&XLISTKEYINC'(1,1)                         01685300
                      AIF   (T'&ZC NE 'N').ZI161D                       01685400
&ZC                   SETC  '&XLISTKEYINC'                              01685500
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI161D              01685600
&ZCGPR                SETC  '=AL4(&XLISTKEYINC)'                        01685700
.*                                                                      01685800
.ZI161D               ANOP  ,                                           01685900
.*                                                                      01686000
&ZOPN                 SETA  &ZOPN+1                                     01686100
&ZOPL(&ZOPN)          SETC  ' '                                         01686200
&ZOPO(&ZOPN)          SETC  'MVC'                                       01686300
&ZOPV(&ZOPN)          SETC  '272(4,1),&ZCGPR'                           01686400
&ZOPD(&ZOPN)          SETC  '++ &ZXLISTKEYINC XLISTKEYINC'              01686500
.*                                                                      01686600
.ZI161E               ANOP  ,                                           01686700
.*-------------------------------------------------------------------   01686800
.***AI.LVER02                                                           01686900
.ZI161Z               ANOP  ,                                           01687000
.*-------------------------------------------------------------------   01687100
.***AI.LVER01                                                           01687200
                      AIF  (&XPLISTVER LT 1).ZI163Z                     01687300
.*-------------------------------------------------------------------   01687400
.***AI.L18  XLISTKEY CL16                                               01687500
         AIF   ('&XLISTKEY' NE 'NO_LISTKEY').ZI163                      01687600
&ZXLISTKEY            SETC  ''             RESET INPUT/OUTPUT           01687700
.ZI163                ANOP  ,                                           01687800
.*-------------------------------------------------------------------   01687900
.***AI.L25  XLISTKEY CL16                                               01688000
                      AIF   ('&ZXLISTKEY' EQ '').ZI163E                 01688100
                      AIF   ('&ZXLISTKEY' EQ 'OUTPUT').ZI163E           01688200
&ZCGPR                SETC  '&XLISTKEY'                                 01688300
.*                                                                      01688400
                      AIF   ('&XLISTKEY'(1,1) NE '(').ZI163B            01688500
&ZCGPR   SETC  '0('.'&XLISTKEY'(2,K'&XLISTKEY-2).')'                    01688600
.ZI163B               ANOP  ,                                           01688700
.*                                                                      01688800
&ZOPN                 SETA  &ZOPN+1                                     01688900
&ZOPL(&ZOPN)          SETC  ' '                                         01689000
&ZOPO(&ZOPN)          SETC  'MVC'                                       01689100
&ZOPV(&ZOPN)          SETC  '212(16,1),&ZCGPR'                          01689200
&ZOPD(&ZOPN)          SETC  '++ &ZXLISTKEY XLISTKEY'                    01689300
.*                                                                      01689400
.ZI163E               ANOP  ,                                           01689500
.*-------------------------------------------------------------------   01689600
.***AI.LVER02                                                           01689700
.ZI163Z               ANOP  ,                                           01689800
.*-------------------------------------------------------------------   01689900
.***AI.LVER01                                                           01690000
                      AIF  (&XPLISTVER LT 1).ZI165Z                     01690100
.*-------------------------------------------------------------------   01690200
.***AI.L18  XMAXLISTKEY CL16                                            01690300
         AIF   ('&XMAXLISTKEY' NE 'NO_MAXLISTKEY').ZI165                01690400
&ZXMAXLISTKEY         SETC  ''             RESET INPUT/OUTPUT           01690500
.ZI165                ANOP  ,                                           01690600
.*-------------------------------------------------------------------   01690700
.***AI.L25  XMAXLISTKEY CL16                                            01690800
                      AIF   ('&ZXMAXLISTKEY' EQ '').ZI165E              01690900
                      AIF   ('&ZXMAXLISTKEY' EQ 'OUTPUT').ZI165E        01691000
&ZCGPR                SETC  '&XMAXLISTKEY'                              01691100
.*                                                                      01691200
                      AIF   ('&XMAXLISTKEY'(1,1) NE '(').ZI165B         01691300
&ZCGPR   SETC  '0('.'&XMAXLISTKEY'(2,K'&XMAXLISTKEY-2).')'              01691400
.ZI165B               ANOP  ,                                           01691500
.*                                                                      01691600
&ZOPN                 SETA  &ZOPN+1                                     01691700
&ZOPL(&ZOPN)          SETC  ' '                                         01691800
&ZOPO(&ZOPN)          SETC  'MVC'                                       01691900
&ZOPV(&ZOPN)          SETC  '228(16,1),&ZCGPR'                          01692000
&ZOPD(&ZOPN)          SETC  '++ &ZXMAXLISTKEY XMAXLISTKEY'              01692100
.*                                                                      01692200
.ZI165E               ANOP  ,                                           01692300
.*-------------------------------------------------------------------   01692400
.***AI.LVER02                                                           01692500
.ZI165Z               ANOP  ,                                           01692600
.*-------------------------------------------------------------------   01692700
.***AI.LVER01                                                           01692800
                      AIF  (&XPLISTVER LT 1).ZI167Z                     01692900
.*-------------------------------------------------------------------   01693000
.***AI.L25  XUNC CL16                                                   01693100
                      AIF   ('&ZXUNC' EQ '').ZI167E                     01693200
                      AIF   ('&ZXUNC' EQ 'OUTPUT').ZI167E               01693300
&ZCGPR                SETC  '&XUNC'                                     01693400
.*                                                                      01693500
                      AIF   ('&XUNC'(1,1) NE '(').ZI167B                01693600
&ZCGPR   SETC  '0('.'&XUNC'(2,K'&XUNC-2).')'                            01693700
.ZI167B               ANOP  ,                                           01693800
.*                                                                      01693900
&ZOPN                 SETA  &ZOPN+1                                     01694000
&ZOPL(&ZOPN)          SETC  ' '                                         01694100
&ZOPO(&ZOPN)          SETC  'MVC'                                       01694200
&ZOPV(&ZOPN)          SETC  '244(16,1),&ZCGPR'                          01694300
&ZOPD(&ZOPN)          SETC  '++ &ZXUNC XUNC'                            01694400
.*                                                                      01694500
.ZI167E               ANOP  ,                                           01694600
.*-------------------------------------------------------------------   01694700
.***AI.LVER02                                                           01694800
.ZI167Z               ANOP  ,                                           01694900
.*-------------------------------------------------------------------   01695000
&ZOPN1                SETA &ZOPN                                        01695100
.*******************************************************************    01695200
.***  PROCESS IXLLIST OUTPUT PARAMETERS                                 01695300
.*******************************************************************    01695400
                      ACTR  10000                                       01695500
.*******************************************************************    01695600
.***AO.X02  RETURN CODE PROCESSING                                      01695700
.*******************************************************************    01695800
                      AIF   (N'&RETCODE LE 0).ZMRETX                    01695900
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            01696000
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             01696100
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             01696200
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               01696300
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                01696400
&ZOPN                 SETA  &ZOPN+1                                     01696500
&ZOPL(&ZOPN)          SETC  ' '                                         01696600
&ZOPO(&ZOPN)          SETC  'ST'                                        01696700
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              01696800
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        01696900
                      AGO   .ZMRETX                                     01697000
.*                                                                      01697100
.ZMRET2               ANOP  ,                                           01697200
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                01697300
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                01697400
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                01697500
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  01697600
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   01697700
&ZOPN                 SETA  &ZOPN+1                                     01697800
&ZOPL(&ZOPN)          SETC  ' '                                         01697900
&ZOPO(&ZOPN)          SETC  'LR'                                        01698000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 01698100
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        01698200
.ZMRETX               ANOP  ,                                           01698300
.*******************************************************************    01698400
.***AO.X03  REASON CODE PROCESSING                                      01698500
.*******************************************************************    01698600
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    01698700
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            01698800
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              01698900
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             01699000
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              01699100
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             01699200
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                01699300
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 01699400
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                01699500
&ZOPN                 SETA  &ZOPN+1                                     01699600
&ZOPL(&ZOPN)          SETC  ' '                                         01699700
&ZOPO(&ZOPN)          SETC  'ST'                                        01699800
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               01699900
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        01700000
                      AGO   .ZMRSNX                                     01700100
.*                                                                      01700200
.ZMRSN2               ANOP  ,                                           01700300
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                01700400
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 01700500
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                01700600
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 01700700
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                01700800
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   01700900
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    01701000
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   01701100
&ZOPN                 SETA  &ZOPN+1                                     01701200
&ZOPL(&ZOPN)          SETC  ' '                                         01701300
&ZOPO(&ZOPN)          SETC  'LR'                                        01701400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  01701500
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        01701600
.ZMRSNX               ANOP  ,                                           01701700
.*******************************************************************    01701800
.***AO.X04  LABEL FOR MF=L PROCESSING                                   01701900
.*******************************************************************    01702000
.ZMFLX                ANOP  ,              MF=L PROCESSING              01702100
.*******************************************************************    01702200
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               01702300
.*******************************************************************    01702400
                      ACTR  10000                                       01702500
.*                                                                      01702600
                      LCLA  &ZLC           COLUMN POSITION              01702700
                      LCLA  &ZOPX          LIST TABLE INDEX             01702800
                      LCLC  &ZLL           LABEL                        01702900
                      LCLC  &ZLOP          OPERATION                    01703000
                      LCLC  &ZLV           VALUE                        01703100
                      LCLC  &ZLD           DESCRIPTION                  01703200
.*                                                                      01703300
&ZOPX                 SETA  1                                           01703400
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            01703500
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              01703600
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              01703700
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              01703800
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              01703900
                      AIF   (K'&ZLD LE 0).ZL5                           01704000
&ZLC                  SETA  35             COMMENT COLUMN               01704100
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    01704200
&ZLC                  SETA  33             COMMMENT COLUMN              01704300
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   01704400
&ZLV                  SETC  '&ZLV'.' '                                  01704500
                      AGO   .ZL3                                        01704600
.*                                                                      01704700
.ZL4                  ANOP  ,                                           01704800
&ZLV                  SETC  '&ZLV'.' '                                  01704900
.ZL5                  ANOP  ,                                           01705000
&ZLV                  SETC  '&ZLV'.'&ZLD'                               01705100
.*                                                                      01705200
&ZLL     &ZLOP &ZLV                                                     01705300
.*                                                                      01705400
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               01705500
                      AGO   .ZL2           CONTINUE LOOPING             01705600
.*                                                                      01705700
.ZLX                  ANOP  ,                                           01705800
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                01705900
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  01706000
.**------------------------------------------------------------------** 01706100
.**  Start of user maclasm code                                      ** 01706200
.**------------------------------------------------------------------** 01706300
.*                                                                      01706400
.*                                                                      01706500
.**  Only generate code if no errors have been found                 ** 01706600
.*                                                                      01706700
         AIF   (&ZMACRET NE 0).ENDGENLINKAGE                            01706800
.*                                                                      01706900
.**------------------------------------------------------------------** 01707000
.**  Declares for macro constants                                    ** 01707100
.**------------------------------------------------------------------** 01707200
.*                                                                      01707300
.**  Command codes                                                   ** 01707400
.*                                                                      01707500
               LCLC  &KLISTCMDRLE                                       01707600
               LCLC  &KLISTCMDWLE                                       01707700
               LCLC  &KLISTCMDMLE                                       01707800
               LCLC  &KLISTCMDDLE                                       01707900
               LCLC  &KLISTCMDWMLE                                      01708000
               LCLC  &KLISTCMDMRLE                                      01708100
               LCLC  &KLISTCMDRDLE                                      01708200
               LCLC  &KLISTCMDRL                                        01708300
               LCLC  &KLISTCMDRLS                                       01708400
               LCLC  &KLISTCMDDLS                                       01708500
               LCLC  &KLISTCMDDLES                                      01708600
               LCLC  &KLISTCMDRLTE                                      01708700
               LCLC  &KLISTCMDWLTE                                      01708800
               LCLC  &KLISTCMDRLC                                       01708900
               LCLC  &KLISTCMDWLC                                       01709000
               LCLC  &KLISTCMDRLM                                       01709100
               LCLC  &KLISTCMDDLM                                       01709200
               LCLC  &KLISTCMDRNLTE                                     01709300
               LCLC  &KLISTCMDREQC                               @01A   01709400
               LCLC  &KLISTCMDREMC                               @01A   01709500
               LCLC  &KLISTCMDDEMC                               @01A   01709600
               LCLC  &KLISTCMDREMS                               @01A   01709700
.*                                                                      01709800
&KLISTCMDRLE   SETC  '0'                                                01709900
&KLISTCMDWLE   SETC  '4'                                                01710000
&KLISTCMDMLE   SETC  '8'                                                01710100
&KLISTCMDDLE   SETC  '12'                                               01710200
&KLISTCMDWMLE  SETC  '16'                                               01710300
&KLISTCMDMRLE  SETC  '20'                                               01710400
&KLISTCMDRDLE  SETC  '24'                                               01710500
&KLISTCMDRL    SETC  '28'                                               01710600
&KLISTCMDRLS   SETC  '32'                                               01710700
&KLISTCMDDLS   SETC  '36'                                               01710800
&KLISTCMDDLES  SETC  '40'                                               01710900
&KLISTCMDRLTE  SETC  '44'                                               01711000
&KLISTCMDWLTE  SETC  '48'                                               01711100
&KLISTCMDRLC   SETC  '52'                                               01711200
&KLISTCMDWLC   SETC  '56'                                               01711300
&KLISTCMDRLM   SETC  '60'                                               01711400
&KLISTCMDDLM   SETC  '64'                                               01711500
&KLISTCMDRNLTE SETC  '68'                                               01711600
&KLISTCMDREQC  SETC  '72'                                       @01A    01711700
&KLISTCMDREMC  SETC  '76'                                       @01A    01711800
&KLISTCMDDEMC  SETC  '80'                                       @01A    01711900
&KLISTCMDREMS  SETC  '84'                                       @01A    01712000
.*                                                                      01712100
.*                                                                      01712200
.**  List command type                                               ** 01712300
.*                                                                      01712400
               LCLC  &KLISTCMDTYPE                                      01712500
&KLISTCMDTYPE  SETC  'X''03'''                                          01712600
.*                                                                      01712700
.*                                                                      01712800
.**  Command opcodes                                                 ** 01712900
.*                                                                      01713000
               LCLC  &KLISTOPRLE                                        01713100
               LCLC  &KLISTOPWLE                                        01713200
               LCLC  &KLISTOPMLE                                        01713300
               LCLC  &KLISTOPDLE                                        01713400
               LCLC  &KLISTOPWMLE                                       01713500
               LCLC  &KLISTOPMRLE                                       01713600
               LCLC  &KLISTOPRDLE                                       01713700
               LCLC  &KLISTOPRL                                         01713800
               LCLC  &KLISTOPRLS                                        01713900
               LCLC  &KLISTOPDLS                                        01714000
               LCLC  &KLISTOPDLES                                       01714100
               LCLC  &KLISTOPRLTE                                       01714200
               LCLC  &KLISTOPWLTE                                       01714300
               LCLC  &KLISTOPRLC                                        01714400
               LCLC  &KLISTOPWLC                                        01714500
               LCLC  &KLISTOPRLM                                        01714600
               LCLC  &KLISTOPDLM                                        01714700
               LCLC  &KLISTOPRNLTE                                      01714800
               LCLC  &KLISTOPREQC                              @01A     01714900
               LCLC  &KLISTOPREMC                              @01A     01715000
               LCLC  &KLISTOPDEMC                              @01A     01715100
               LCLC  &KLISTOPREMS                              @01A     01715200
.*                                                                      01715300
&KLISTOPRLE    SETC  'X''10'''                                          01715400
&KLISTOPWLE    SETC  'X''91'''                                          01715500
&KLISTOPMLE    SETC  'X''12'''                                          01715600
&KLISTOPDLE    SETC  'X''13'''                                          01715700
&KLISTOPWMLE   SETC  'X''94'''                                          01715800
&KLISTOPMRLE   SETC  'X''15'''                                          01715900
&KLISTOPRDLE   SETC  'X''16'''                                          01716000
&KLISTOPRL     SETC  'X''17'''                                          01716100
&KLISTOPRLS    SETC  'X''18'''                                          01716200
&KLISTOPDLS    SETC  'X''19'''                                          01716300
&KLISTOPDLES   SETC  'X''9A'''                                          01716400
&KLISTOPRLTE   SETC  'X''0A'''                                          01716500
&KLISTOPWLTE   SETC  'X''0B'''                                          01716600
&KLISTOPRLC    SETC  'X''04'''                                          01716700
&KLISTOPWLC    SETC  'X''05'''                                          01716800
&KLISTOPRLM    SETC  'X''08'''                                          01716900
&KLISTOPDLM    SETC  'X''09'''                                          01717000
&KLISTOPRNLTE  SETC  'X''0C'''                                          01717100
&KLISTOPREQC   SETC  'X''1D'''                                 @01A     01717200
&KLISTOPREMC   SETC  'X''1C'''                                 @01A     01717300
&KLISTOPDEMC   SETC  'X''1F'''                                 @01A     01717400
&KLISTOPREMS   SETC  'X''9E'''                                 @01A     01717500
.*                                                                      01717600
.*                                                                      01717700
.**  Command lengths                                                 ** 01717800
.*                                                                      01717900
               LCLC  &KLISTRLELEN                                       01718000
               LCLC  &KLISTWLELEN                                       01718100
               LCLC  &KLISTWLEALEN                                      01718200
               LCLC  &KLISTMLELEN                                       01718300
               LCLC  &KLISTDLELEN                                       01718400
               LCLC  &KLISTWMLELEN                                      01718500
               LCLC  &KLISTWMLEALEN                                     01718600
               LCLC  &KLISTMRLELEN                                      01718700
               LCLC  &KLISTRDLELEN                                      01718800
               LCLC  &KLISTRLLEN                                        01718900
               LCLC  &KLISTRLSLEN                                       01719000
               LCLC  &KLISTDLSLEN                                       01719100
               LCLC  &KLISTDLESLEN                                      01719200
               LCLC  &KLISTRLTELEN                                      01719300
               LCLC  &KLISTWLTELEN                                      01719400
               LCLC  &KLISTRLCLEN                                       01719500
               LCLC  &KLISTWLCLEN                                       01719600
               LCLC  &KLISTRLMLEN                                       01719700
               LCLC  &KLISTDLMLEN                                       01719800
               LCLC  &KLISTRNLTELEN                                     01719900
               LCLC  &KLISTREQCLEN                              @01A    01720000
               LCLC  &KLISTREMCLEN                              @01A    01720100
               LCLC  &KLISTDEMCLEN                              @01A    01720200
               LCLC  &KLISTREMSLEN                              @01A    01720300
.*                                                                      01720400
&KLISTRLELEN   SETC  '160'                                         @D9C 01720500
&KLISTWLELEN   SETC  '192'                                         @D9C 01720600
&KLISTWLEALEN  SETC  '256'                                              01720700
&KLISTMLELEN   SETC  '192'                                         @D9C 01720800
&KLISTDLELEN   SETC  '160'                                         @D9C 01720900
&KLISTWMLELEN  SETC  '192'                                         @D9C 01721000
&KLISTWMLEALEN SETC  '256'                                              01721100
&KLISTMRLELEN  SETC  '192'                                         @D9C 01721200
&KLISTRDLELEN  SETC  '160'                                         @D9C 01721300
&KLISTRLLEN    SETC  '160'                                         @D9C 01721400
&KLISTRLSLEN   SETC  '160'                                         @D9C 01721500
&KLISTDLSLEN   SETC  '160'                                         @D9C 01721600
&KLISTDLESLEN  SETC  '160'                                         @D9C 01721700
&KLISTRLTELEN  SETC  '32'                                               01721800
&KLISTWLTELEN  SETC  '68'                                               01721900
&KLISTRLCLEN   SETC  '36'                                               01722000
&KLISTWLCLEN   SETC  '160'                                         @D9C 01722100
&KLISTRLMLEN   SETC  '176'                                         @01C 01722200
&KLISTDLMLEN   SETC  '80'                                          @01C 01722300
&KLISTRNLTELEN SETC  '32'                                               01722400
&KLISTREQCLEN  SETC  '24'                                          @01A 01722500
&KLISTREMCLEN  SETC  '80'                                          @01A 01722600
&KLISTDEMCLEN  SETC  '28'                                          @01A 01722700
&KLISTREMSLEN  SETC  '28'                                          @01A 01722800
.*                                                                      01722900
.*                                                                      01723000
.**  Parameter list offsets                                          ** 01723100
.*                                                                      01723200
.*  Offsets of parameter list sections                                  01723300
.*                                                                      01723400
                   LCLA  &PLOFF_XSHL_DATA                               01723500
                   LCLA  &PLOFF_XMOB_DATA                               01723600
                   LCLA  &PLOFF_XMCB_DATA                          @D9C 01723700
.*                                                                      01723800
&PLOFF_XSHL_DATA   SETA  0                                              01723900
&PLOFF_XMOB_DATA   SETA  96                                             01724000
&PLOFF_XMCB_DATA   SETA  100                                       @D9C 01724100
.*                                                                      01724200
.*  Offsets within the shell data section                               01724300
.*                                                                      01724400
                     LCLA  &PLOFF_XVERSION                              01724500
                     LCLA  &PLOFF_XCMDCODE                              01724600
                     LCLA  &PLOFF_XSHLFLGS2                             01724700
                     LCLA  &PLOFF_XCOMPCONID                            01724800
                     LCLA  &PLOFF_XCONID                                01724900
                     LCLA  &PLOFF_XBUFSIZE                              01725000
                     LCLA  &PLOFF_XANSAREA_ALET                         01725100
                     LCLA  &PLOFF_XANSAREA                              01725200
                     LCLA  &PLOFF_XEXTRESTOKENTKN                  @L1A 01725300
.*                                                                      01725400
&PLOFF_XVERSION      SETA  &PLOFF_XSHL_DATA+0                           01725500
&PLOFF_XCMDCODE      SETA  &PLOFF_XSHL_DATA+1                           01725600
&PLOFF_XSHLFLGS2     SETA  &PLOFF_XSHL_DATA+3                           01725700
&PLOFF_XCOMPCONID    SETA  &PLOFF_XSHL_DATA+8                           01725800
&PLOFF_XCONID        SETA  &PLOFF_XSHL_DATA+25                          01725900
&PLOFF_XBUFSIZE      SETA  &PLOFF_XSHL_DATA+32                     @PBC 01726000
&PLOFF_XANSAREA_ALET SETA  &PLOFF_XSHL_DATA+48                          01726100
&PLOFF_XANSAREA      SETA  &PLOFF_XSHL_DATA+52                          01726200
&PLOFF_XEXTRESTOKENTKN  SETA  &PLOFF_XSHL_DATA+72                  @L1A 01726300
.*                                                                      01726400
.*  Offsets within the MOB section                                      01726500
.*                                                                      01726600
                   LCLA  &PLOFF_XCMDLEN                                 01726700
                   LCLA  &PLOFF_XBUFNUM                                 01726800
                   LCLA  &PLOFF_XBUFINCRNUM                             01726900
.*                                                                      01727000
&PLOFF_XCMDLEN     SETA  &PLOFF_XMOB_DATA+0                             01727100
&PLOFF_XBUFNUM     SETA  &PLOFF_XMOB_DATA+2                             01727200
&PLOFF_XBUFINCRNUM SETA  &PLOFF_XMOB_DATA+3                             01727300
.*                                                                      01727400
.*  Offsets within the MCB section                                      01727500
.*                                                                      01727600
                   LCLA  &PLOFF_XCCA                                    01727700
                   LCLA  &PLOFF_XCCB                                    01727800
                   LCLA  &PLOFF_XDBS                                    01727900
                   LCLA  &PLOFF_XCMDFLGS1B                              01728000
                   LCLA  &PLOFF_XCMDFLGS1C                              01728100
                   LCLA  &PLOFF_XCMDFLGS1D                              01728200
                   LCLA  &PLOFF_XUID3                                   01728300
                   LCLA  &PLOFF_XCGLM                                   01728400
                   LCLA  &PLOFF_XUID2                                   01728500
                   LCLA  &PLOFF_XENTRYKEY                               01728600
                   LCLA  &PLOFF_XAUTHCOMP1                         @D9C 01728700
                   LCLA  &PLOFF_XNEWAUTH1                          @D9C 01728800
                   LCLA  &PLOFF_XRESTOKEN                          @L1A 01728900
                   LCLA  &PLOFF_XUID1                                   01729000
                   LCLA  &PLOFF_XCMDFLGS2A                         @D9A 01729100
                   LCLA  &PLOFF_XNEWAUTH2                          @D9A 01729200
                   LCLA  &PLOFF_XMOVETOKEY0                        @DAA 01729300
                   LCLA  &PLOFF_XAUTHCOMP2                         @D9A 01729400
                   LCLA  &PLOFF_XMOVETOLIST0                       @DAA 01729500
                   LCLA  &PLOFF_XMOVETOKEY1                        @DAA 01729600
                   LCLA  &PLOFF_XMOVETOLIST1                       @DAA 01729700
.*                                                                      01729800
&PLOFF_XCCA        SETA  &PLOFF_XMCB_DATA+0                        @D9C 01729900
&PLOFF_XCCB        SETA  &PLOFF_XMCB_DATA+1                        @D9C 01730000
&PLOFF_XDBS        SETA  &PLOFF_XMCB_DATA+4                        @D9C 01730100
&PLOFF_XCMDFLGS1B  SETA  &PLOFF_XMCB_DATA+5                        @D9C 01730200
&PLOFF_XCMDFLGS1C  SETA  &PLOFF_XMCB_DATA+6                        @D9C 01730300
&PLOFF_XCMDFLGS1D  SETA  &PLOFF_XMCB_DATA+7                        @D9C 01730400
&PLOFF_XUID3       SETA  &PLOFF_XMCB_DATA+7                        @D9C 01730500
&PLOFF_XCGLM       SETA  &PLOFF_XMCB_DATA+11                       @D9C 01730600
&PLOFF_XUID2       SETA  &PLOFF_XMCB_DATA+48                       @D9C 01730700
&PLOFF_XENTRYKEY   SETA  &PLOFF_XMCB_DATA+48                       @D9C 01730800
&PLOFF_XAUTHCOMP1  SETA  &PLOFF_XMCB_DATA+48                       @D9C 01730900
&PLOFF_XNEWAUTH1   SETA  &PLOFF_XMCB_DATA+64                       @D9C 01731000
&PLOFF_XRESTOKEN   SETA  &PLOFF_XMCB_DATA+64                       @L1A 01731100
&PLOFF_XUID1       SETA  &PLOFF_XMCB_DATA+80                       @D9C 01731200
&PLOFF_XCMDFLGS2A  SETA  &PLOFF_XMCB_DATA+76                       @D9A 01731300
&PLOFF_XNEWAUTH2   SETA  &PLOFF_XMCB_DATA+112                      @D9A 01731400
&PLOFF_XMOVETOKEY0 SETA  &PLOFF_XMCB_DATA+112                      @DAA 01731500
&PLOFF_XAUTHCOMP2  SETA  &PLOFF_XMCB_DATA+128                      @D9A 01731600
&PLOFF_XMOVETOLIST0 SETA &PLOFF_XMCB_DATA+128                      @DAA 01731700
&PLOFF_XMOVETOKEY1  SETA &PLOFF_XMCB_DATA+144                      @DAA 01731800
&PLOFF_XMOVETOLIST1 SETA &PLOFF_XMCB_DATA+160                      @DAA 01731900
.*                                                                      01732000
.**  Answer area offsets                                             ** 01732100
.*                                                                      01732200
                   LCLC  &AAOFF_LEVEL                                   01732300
                   LCLC  &AAOFF_OFFSET                                  01732400
                   LCLC  &AAOFF_LENGTH                                  01732500
                   LCLC  &AAOFF_RETCODE                                 01732600
                   LCLC  &AAOFF_RSNCODE                                 01732700
.*                                                                      01732800
&AAOFF_LEVEL       SETC  '0'                                            01732900
&AAOFF_OFFSET      SETC  '4'                                            01733000
&AAOFF_LENGTH      SETC  '8'                                            01733100
&AAOFF_RETCODE     SETC  '12'                                           01733200
&AAOFF_RSNCODE     SETC  '16'                                           01733300
.*                                                                      01733400
.**  Answer area values                                              ** 01733500
.*                                                                      01733600
                   LCLC  &AAVAL_LEVEL                                   01733700
                   LCLC  &AAVAL_OFFSET                                  01733800
                   LCLC  &AAVAL_LENGTH                                  01733900
                   LCLC  &AAVAL_RETCODE                                 01734000
                   LCLC  &AAVAL_RSNCODE                                 01734100
.*                                                                      01734200
&AAVAL_LEVEL       SETC  '0'                                            01734300
&AAVAL_OFFSET      SETC  '12'                                           01734400
&AAVAL_LENGTH      SETC  '8'                                            01734500
&AAVAL_RETCODE     SETC  '12'                                           01734600
&AAVAL_RSNCODE     SETC  'X''0C13'''                                    01734700
.*                                                                      01734800
.*                                                                      01734900
.**------------------------------------------------------------------** 01735000
.**  Declares for macro variables                                    ** 01735100
.**                                                                  ** 01735200
.**  The following AMG-declared variables are also used in this      ** 01735300
.**  section:                                                        ** 01735400
.**                                                                  ** 01735500
.**    AMG "x" and "zx" variables corresponding to interface keys    ** 01735600
.**    ZCGPR                                                         ** 01735700
.**    ZCLNG                                                         ** 01735800
.**    ZCVAL                                                         ** 01735900
.**    ZMACRET                                                       ** 01736000
.**    ZNDX                                                          ** 01736100
.**    ZPLLEN                                                        ** 01736200
.**    ZPRM                                                          ** 01736300
.**    ZPRMLINE                                                      ** 01736400
.**    ZPRMNUM                                                       ** 01736500
.**    ZW                                                            ** 01736600
.**                                                                  ** 01736700
.**------------------------------------------------------------------** 01736800
.*                                                                      01736900
               LCLC  &LISTCMD                                           01737000
               LCLC  &LISTOPCODE                                        01737100
               LCLC  &LISTCMDLEN                                        01737200
.*                                                                      01737300
.*                                                                      01737400
.**------------------------------------------------------------------** 01737500
.**  Start of code to fill in the parameter list                     ** 01737600
.**------------------------------------------------------------------** 01737700
.*                                                                      01737800
.*                                                                      01737900
.**------------------------------------------------------------------** 01738000
.**  Initialize the answer area                                      ** 01738100
.**------------------------------------------------------------------** 01738200
.*                                                                      01738300
               AIF   ('&XANSAREA' EQ 'NO_ANSAREA'     OR               *01738400
                      '&XANSAREA' EQ '').SKIPINITANSAREA                01738500
               AIF   ('&SYSASCE'  EQ 'P').SKIPINITANSALET               01738600
         L     14,&PLOFF_XANSAREA_ALET.(,1)                             01738700
         SAR   14,14                                                    01738800
.SKIPINITANSALET ANOP ,                                                 01738900
         L     14,&PLOFF_XANSAREA.(,1)                                  01739000
         LA    15,&AAVAL_LEVEL.                                         01739100
         ST    15,&AAOFF_LEVEL.(,14)                                    01739200
         LA    15,&AAVAL_OFFSET.                                        01739300
         ST    15,&AAOFF_OFFSET.(,14)                                   01739400
         LA    15,&AAVAL_LENGTH.                                        01739500
         ST    15,&AAOFF_LENGTH.(,14)                                   01739600
         LA    15,&AAVAL_RETCODE.                                       01739700
         ST    15,&AAOFF_RETCODE.(,14)                                  01739800
         LA    15,&AAVAL_RSNCODE.                                       01739900
         ST    15,&AAOFF_RSNCODE.(,14)                                  01740000
.SKIPINITANSAREA ANOP ,                                                 01740100
.*                                                              5@01D   01740200
.*                                                                      01740300
.**------------------------------------------------------------------** 01740400
.**  Find the command code, opcode, and length                       ** 01740500
.**                                                                  ** 01740600
.**  The length is set to the maximum length required for the        ** 01740700
.**  specified command.  The command code and opcode are set from    ** 01740800
.**  the combination of keys specified on the invocation.            ** 01740900
.**                                                                  ** 01741000
.**------------------------------------------------------------------** 01741100
.*                                                                      01741200
               AIF   ('&XREQUEST' NE 'READ').LISTCMDNOTREAD             01741300
.*                                                                      01741400
&LISTCMD       SETC  '&KLISTCMDRLE'                                     01741500
&LISTOPCODE    SETC  '&KLISTOPRLE'                                      01741600
&LISTCMDLEN    SETC  '&KLISTRLELEN'                                     01741700
               AGO   .LISTCMDENDSELECT                                  01741800
.*                                                                      01741900
.LISTCMDNOTREAD ANOP ,                                                  01742000
.*                                                                      01742100
               AIF   ('&XREQUEST' NE 'WRITE').LISTCMDNOTWRITE           01742200
.*                                                                      01742300
&LISTCMD       SETC  '&KLISTCMDWLE'                                     01742400
&LISTOPCODE    SETC  '&KLISTOPWLE'                                      01742500
&LISTCMDLEN    SETC  '&KLISTWLELEN'                                     01742600
.*                                                                      01742700
               AIF   ('&XADJAREA' EQ 'NO_ADJAREA' OR                   *01742800
                      '&XADJAREA' EQ '').LISTCMDWRITENOADJAREA     @P4C 01742900
&LISTCMDLEN    SETC  '&KLISTWLEALEN'                                    01743000
.LISTCMDWRITENOADJAREA ANOP ,                                           01743100
               AGO   .LISTCMDENDSELECT                                  01743200
.*                                                                      01743300
.LISTCMDNOTWRITE ANOP ,                                                 01743400
.*                                                                      01743500
               AIF   ('&XREQUEST' NE 'MOVE').LISTCMDNOTMOVE             01743600
.*                                                                      01743700
               AIF   ('&XDATAOPER' NE 'WRITE').LISTCMDMOVENOTWRITE      01743800
&LISTCMD       SETC  '&KLISTCMDWMLE'                                    01743900
&LISTOPCODE    SETC  '&KLISTOPWMLE'                                     01744000
&LISTCMDLEN    SETC  '&KLISTWMLELEN'                                    01744100
.*                                                                      01744200
               AIF   ('&XADJAREA' EQ 'NO_ADJAREA' OR                   *01744300
                      '&XADJAREA' EQ '').LISTCMDMOVEWRITENOADJAREA @P4C 01744400
&LISTCMDLEN    SETC  '&KLISTWMLEALEN'                                   01744500
.LISTCMDMOVEWRITENOADJAREA ANOP ,                                       01744600
               AGO   .LISTCMDMOVEEND                                    01744700
.LISTCMDMOVENOTWRITE ANOP ,                                             01744800
.*                                                                      01744900
               AIF   ('&XDATAOPER' NE 'READ').LISTCMDMOVENOTREAD        01745000
&LISTCMD       SETC  '&KLISTCMDMRLE'                                    01745100
&LISTOPCODE    SETC  '&KLISTOPMRLE'                                     01745200
&LISTCMDLEN    SETC  '&KLISTMRLELEN'                                    01745300
               AGO   .LISTCMDMOVEEND                                    01745400
.LISTCMDMOVENOTREAD ANOP ,                                              01745500
.*                                                                      01745600
&LISTCMD       SETC  '&KLISTCMDMLE'                                     01745700
&LISTOPCODE    SETC  '&KLISTOPMLE'                                      01745800
&LISTCMDLEN    SETC  '&KLISTMLELEN'                                     01745900
.LISTCMDNOTNONE ANOP ,                                                  01746000
.LISTCMDMOVEEND ANOP ,                                                  01746100
               AGO   .LISTCMDENDSELECT                                  01746200
.*                                                                      01746300
.LISTCMDNOTMOVE ANOP ,                                                  01746400
.*                                                                      01746500
               AIF   ('&XREQUEST' NE 'DELETE').LISTCMDNOTDELETE         01746600
.*                                                                      01746700
               AIF   ('&XDATAOPER' NE 'READ').LISTCMDDELETENOAREA       01746800
&LISTCMD       SETC  '&KLISTCMDRDLE'                                    01746900
&LISTOPCODE    SETC  '&KLISTOPRDLE'                                     01747000
&LISTCMDLEN    SETC  '&KLISTRDLELEN'                                    01747100
               AGO   .LISTCMDDELETEEND                                  01747200
.LISTCMDDELETENOAREA ANOP ,                                             01747300
&LISTCMD       SETC  '&KLISTCMDDLE'                                     01747400
&LISTOPCODE    SETC  '&KLISTOPDLE'                                      01747500
&LISTCMDLEN    SETC  '&KLISTDLELEN'                                     01747600
.LISTCMDDELETEEND ANOP ,                                                01747700
               AGO   .LISTCMDENDSELECT                                  01747800
.*                                                                      01747900
.LISTCMDNOTDELETE ANOP ,                                                01748000
.*                                                                      01748100
               AIF   ('&XREQUEST' NE 'READ_LIST').LISTCMDNOTREADLIST    01748200
.*                                                                      01748300
&LISTCMD       SETC  '&KLISTCMDRL'                                      01748400
&LISTOPCODE    SETC  '&KLISTOPRL'                                       01748500
&LISTCMDLEN    SETC  '&KLISTRLLEN'                                      01748600
               AGO   .LISTCMDENDSELECT                                  01748700
.*                                                                      01748800
.LISTCMDNOTREADLIST ANOP ,                                              01748900
.*                                                                      01749000
               AIF   ('&XREQUEST' NE 'READ_EQCONTROLS').LISTCMDNOTREQC  01749100
.*                                                                      01749200
&LISTCMD       SETC  '&KLISTCMDREQC'                              @01A  01749300
&LISTOPCODE    SETC  '&KLISTOPREQC'                               @01A  01749400
&LISTCMDLEN    SETC  '&KLISTREQCLEN'                              @01A  01749500
               AGO   .LISTCMDENDSELECT                            @01A  01749600
.*                                                                      01749700
.LISTCMDNOTREQC ANOP ,                                            @01A  01749800
.*                                                                      01749900
               AIF   ('&XREQUEST' NE 'READ_EMCONTROLS').LISTCMDNOTREMC  01750000
.*                                                                      01750100
&LISTCMD       SETC  '&KLISTCMDREMC'                              @01A  01750200
&LISTOPCODE    SETC  '&KLISTOPREMC'                               @01A  01750300
&LISTCMDLEN    SETC  '&KLISTREMCLEN'                              @01A  01750400
               AGO   .LISTCMDENDSELECT                            @01A  01750500
.*                                                                      01750600
.LISTCMDNOTREMC ANOP ,                                            @01A  01750700
.*                                                                      01750800
               AIF   ('&XREQUEST' NE 'DEQ_EVENTQ').LISTCMDNOTDEMC @01A  01750900
.*                                                                      01751000
&LISTCMD       SETC  '&KLISTCMDDEMC'                              @01A  01751100
&LISTOPCODE    SETC  '&KLISTOPDEMC'                               @01A  01751200
&LISTCMDLEN    SETC  '&KLISTDEMCLEN'                              @01A  01751300
               AGO   .LISTCMDENDSELECT                            @01A  01751400
.*                                                                      01751500
.LISTCMDNOTDEMC ANOP ,                                            @01A  01751600
.*                                                                      01751700
               AIF   ('&XREQUEST' NE 'MONITOR_SUBLISTS').LISTCMDNOTREMS 01751800
.*                                                                      01751900
&LISTCMD       SETC  '&KLISTCMDREMS'                              @01A  01752000
&LISTOPCODE    SETC  '&KLISTOPREMS'                               @01A  01752100
&LISTCMDLEN    SETC  '&KLISTREMSLEN'                              @01A  01752200
               AGO   .LISTCMDENDSELECT                            @01A  01752300
.*                                                                      01752400
.LISTCMDNOTREMS ANOP ,                                            @01A  01752500
.*                                                                      01752600
               AIF   ('&XREQUEST' NE 'READ_MULT').LISTCMDNOTREADMULT    01752700
.*                                                                      01752800
&LISTCMD       SETC  '&KLISTCMDRLS'                                     01752900
&LISTOPCODE    SETC  '&KLISTOPRLS'                                      01753000
&LISTCMDLEN    SETC  '&KLISTRLSLEN'                                     01753100
               AGO   .LISTCMDENDSELECT                                  01753200
.*                                                                      01753300
.LISTCMDNOTREADMULT ANOP ,                                              01753400
.*                                                                      01753500
               AIF   ('&XREQUEST' NE 'DELETE_MULT').LISTCMDNOTDELETEMUL*01753600
               T                                                        01753700
.*                                                                      01753800
&LISTCMD       SETC  '&KLISTCMDDLS'                                     01753900
&LISTOPCODE    SETC  '&KLISTOPDLS'                                      01754000
&LISTCMDLEN    SETC  '&KLISTDLSLEN'                                     01754100
               AGO   .LISTCMDENDSELECT                                  01754200
.*                                                                      01754300
.LISTCMDNOTDELETEMULT ANOP ,                                            01754400
.*                                                                      01754500
               AIF   ('&XREQUEST' NE 'DELETE_ENTRYLIST').LISTCMDNOTDELE*01754600
               TEENTRYLIST                                              01754700
.*                                                                      01754800
&LISTCMD       SETC  '&KLISTCMDDLES'                                    01754900
&LISTOPCODE    SETC  '&KLISTOPDLES'                                     01755000
&LISTCMDLEN    SETC  '&KLISTDLESLEN'                                    01755100
               AGO   .LISTCMDENDSELECT                                  01755200
.*                                                                      01755300
.LISTCMDNOTDELETEENTRYLIST ANOP ,                                       01755400
.*                                                                      01755500
               AIF   ('&XREQUEST' NE 'LOCK').LISTCMDNOTLOCK             01755600
.*                                                                      01755700
               AIF   ('&XLOCKOPER' NE 'TEST').LISTCMDLOCKNOTTEST        01755800
&LISTCMD       SETC  '&KLISTCMDRLTE'                                    01755900
&LISTOPCODE    SETC  '&KLISTOPRLTE'                                     01756000
&LISTCMDLEN    SETC  '&KLISTRLTELEN'                                    01756100
               AGO   .LISTCMDLOCKEND                                    01756200
.LISTCMDLOCKNOTTEST ANOP ,                                              01756300
.*                                                                      01756400
               AIF   ('&XLOCKOPER' NE 'READNEXT').LISTCMDLOCKNOTREADNXT 01756500
&LISTCMD       SETC  '&KLISTCMDRNLTE'                                   01756600
&LISTOPCODE    SETC  '&KLISTOPRNLTE'                                    01756700
&LISTCMDLEN    SETC  '&KLISTRNLTELEN'                                   01756800
               AGO   .LISTCMDLOCKEND                                    01756900
.LISTCMDLOCKNOTREADNXT ANOP ,                                           01757000
.*                                                                      01757100
               AIF   ('&XLOCKOPER' NE 'SET'    AND                     *01757200
                      '&XLOCKOPER' NE 'RESET').LISTCMDLOCKNOTSETRESET   01757300
&LISTCMD       SETC  '&KLISTCMDWLTE'                                    01757400
&LISTOPCODE    SETC  '&KLISTOPWLTE'                                     01757500
&LISTCMDLEN    SETC  '&KLISTWLTELEN'                                    01757600
               AGO   .LISTCMDLOCKEND                                    01757700
.LISTCMDLOCKNOTSETRESET ANOP ,                                          01757800
.**    Note that HELDBY and NOTHELD cannot be specified with         ** 01757900
.**    Request(LOCK).                                                ** 01758000
.LISTCMDLOCKEND ANOP ,                                                  01758100
               AGO   .LISTCMDENDSELECT                                  01758200
.*                                                                      01758300
.LISTCMDNOTLOCK ANOP ,                                                  01758400
.*                                                                      01758500
               AIF   ('&XREQUEST' NE 'READ_LCONTROLS').LISTCMDNOTREADLC*01758600
               ONTROLS                                                  01758700
.*                                                                      01758800
&LISTCMD       SETC  '&KLISTCMDRLC'                                     01758900
&LISTOPCODE    SETC  '&KLISTOPRLC'                                      01759000
&LISTCMDLEN    SETC  '&KLISTRLCLEN'                                     01759100
               AGO   .LISTCMDENDSELECT                                  01759200
.*                                                                      01759300
.LISTCMDNOTREADLCONTROLS ANOP ,                                         01759400
.*                                                                      01759500
               AIF   ('&XREQUEST' NE 'WRITE_LCONTROLS').LISTCMDNOTWRITE*01759600
               LCONTROLS                                                01759700
.*                                                                      01759800
&LISTCMD       SETC  '&KLISTCMDWLC'                                     01759900
&LISTOPCODE    SETC  '&KLISTOPWLC'                                      01760000
&LISTCMDLEN    SETC  '&KLISTWLCLEN'                                     01760100
               AGO   .LISTCMDENDSELECT                                  01760200
.*                                                                      01760300
.LISTCMDNOTWRITELCONTROLS ANOP ,                                        01760400
.*                                                                      01760500
               AIF   ('&XREQUEST' NE 'MONITOR_EVENTQ'  AND             *01760600
                      '&XREQUEST' NE 'MONITOR_SUBLIST' AND             *01760700
                      '&XREQUEST' NE 'MONITOR_LIST').LISTCMDNOTMONITORL*01760800
               IST                                                @01C  01760900
.*                                                                      01761000
               AIF   ('&XACTION' NE 'START').LISTCMDMONITORLISTNOTSTART 01761100
&LISTCMD       SETC  '&KLISTCMDRLM'                                     01761200
&LISTOPCODE    SETC  '&KLISTOPRLM'                                      01761300
&LISTCMDLEN    SETC  '&KLISTRLMLEN'                                     01761400
               AGO   .LISTCMDMONITORLISTEND                             01761500
.LISTCMDMONITORLISTNOTSTART ANOP ,                                      01761600
.*                                                                      01761700
.* ACTION=STOP                                                          01761800
&LISTCMD       SETC  '&KLISTCMDDLM'                                     01761900
&LISTOPCODE    SETC  '&KLISTOPDLM'                                      01762000
&LISTCMDLEN    SETC  '&KLISTDLMLEN'                                     01762100
.LISTCMDMONITORLISTEND ANOP ,                                           01762200
               AGO   .LISTCMDENDSELECT                                  01762300
.*                                                                      01762400
.LISTCMDNOTMONITORLIST ANOP ,                                           01762500
.*                                                                      01762600
.LISTCMDENDSELECT ANOP ,                                                01762700
.*                                                                      01762800
.*                                                                      01762900
.**------------------------------------------------------------------** 01763000
.**  Fill in shell layer parameter fields                            ** 01763100
.**------------------------------------------------------------------** 01763200
.*                                                                      01763300
.**  Set the command code                                            ** 01763400
.*                                                                      01763500
.*   _xCmdCode                                                          01763600
         MVI   &PLOFF_XCMDCODE.(1),&LISTCMD                             01763700
.*                                                                      01763800
.*                                                                      01763900
.**------------------------------------------------------------------** 01764000
.**  Fill in MOB parameter fields                                    ** 01764100
.**------------------------------------------------------------------** 01764200
.*                                                                      01764300
.**  Set the command data length                                     ** 01764400
.*                                                                      01764500
         LA    14,&LISTCMDLEN                                           01764600
.*                                                                      01764700
.*   _xCmdLen                                                           01764800
         STH   14,&PLOFF_XCMDLEN.(,1)                                   01764900
.*                                                                      01765000
.**  Set the BufNum value                                            ** 01765100
.*                                                                      01765200
         AIF   ('&XREQUEST' NE 'READ_LCONTROLS'       AND              *01765300
                '&XREQUEST' NE 'DEQ_EVENTQ').SKIPSETBUFNUM1        @01C 01765400
.*                                                                      01765500
.*   _xBufNum                                                           01765600
         MVI   &PLOFF_XBUFNUM.(1),1                                     01765700
.*                                                                      01765800
.SKIPSETBUFNUM1 ANOP ,                                                  01765900
.*                                                                      01766000
         AIF   ('&XBUFFER' EQ '').SKIPSETBUFNUM2                   @P8A 01766100
.*                                                                      01766200
         AIF   ('&XREQUEST' NE 'DELETE_ENTRYLIST' AND                  *01766300
                '&XREQUEST' NE 'READ_LIST'        AND                  *01766400
                '&XREQUEST' NE 'READ_MULT').SKIPSETBUFNUM3         @P8A 01766500
.*                                                                      01766600
.*   _xBufNum                                                           01766700
         L     14,&PLOFF_XBUFSIZE.(0,1)                            @P8A 01766800
         SRL   14,12                                               @P8A 01766900
         STC   14,&PLOFF_XBUFNUM.(0,1)                             @P8A 01767000
.*                                                                      01767100
.SKIPSETBUFNUM3 ANOP ,                                             @P8A 01767200
.SKIPSETBUFNUM2 ANOP ,                                             @P8A 01767300
.*                                                                      01767400
.**  Set the BufIncrNum value                                        ** 01767500
.*                                                                      01767600
         AIF   ('&XREQUEST' NE 'DELETE_ENTRYLIST' AND                  *01767700
                '&XREQUEST' NE 'READ_LIST'        AND                  *01767800
                '&XREQUEST' NE 'READ_MULT'        AND                  *01767900
                '&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01768000
                '&XREQUEST' NE 'DEQ_EVENTQ').SKIPSETBUFINUM        @01C 01768100
.*                                                                      01768200
.*   _xBufIncrNum                                                       01768300
         MVI   &PLOFF_XBUFINCRNUM.(1),16                                01768400
.*                                                                      01768500
.SKIPSETBUFINUM ANOP ,                                             @P8C 01768600
.*                                                                      01768700
.*                                                                      01768800
.**------------------------------------------------------------------** 01768900
.**  Fill in MCB parameter fields                                    ** 01769000
.**------------------------------------------------------------------** 01769100
.*                                                                      01769200
.**  Set the command opcode                                          ** 01769300
.**  - The command opcode is stored in two pieces to allow the       ** 01769400
.**    MVI instruction to be used for efficiency.                    ** 01769500
.*                                                                      01769600
.*   _xCcA                                                              01769700
         MVI   &PLOFF_XCCA.(1),&KLISTCMDTYPE                            01769800
.*                                                                      01769900
.*   _xCcB                                                              01770000
         MVI   &PLOFF_XCCB.(1),&LISTOPCODE                              01770100
.*                                                                      01770200
.*                                                                      01770300
.**  Set the DBS                                                     ** 01770400
.*                                                                      01770500
         AIF   ('&XREQUEST' NE 'READ_LIST'        AND                  *01770600
                '&XREQUEST' NE 'READ_MULT').SKIPSETDBS                  01770700
.*                                                                      01770800
.*   _xDbs                                                              01770900
         MVC   &PLOFF_XDBS.(1,1),&PLOFF_XBUFNUM.(1)                     01771000
.*                                                                      01771100
.SKIPSETDBS ANOP ,                                                      01771200
.*                                                                      01771300
.*                                                                      01771400
.**------------------------------------------------------------------** 01771500
.**  Set the command flags                                           ** 01771600
.**  - The command flags are stored as individual bytes to allow the ** 01771700
.**    MVI instruction to be used for efficiency.                    ** 01771800
.*                                                                      01771900
.**  Set the command flags first byte                                ** 01772000
.**  - There are currently no flags in the first byte                ** 01772100
.*                                                                      01772200
.**  Set the command flags second byte                               ** 01772300
.*                                                                      01772400
&ZW      SETC  ''                                                       01772500
&ZCLNG   SETC  ''                                                       01772600
.*                                                                      01772700
.*                                                                      01772800
         AIF   ('&XREQUEST' NE 'WRITE_LCONTROLS').PLNOTWRTLCTLS    @D9M 01772900
.*                                                                      01773000
&ZW      SETC  '&ZW.000'                                           @D9A 01773100
.*                                                                      01773200
.*                                                                      01773300
         AIF   ('&LISTKEY(1)' EQ 'NO_LISTKEY' OR                       *01773400
                '&LISTKEY(1)' EQ '').PLLISTKEYNOTSPEC              @D9A 01773500
.*                                                                      01773600
&ZW      SETC  '&ZW.1'                                             @D9A 01773700
&ZCLNG   SETC  'YES'                                               @D9A 01773800
         AGO   .PLLISTKEYEND                                       @D9A 01773900
.*                                                                      01774000
.PLLISTKEYNOTSPEC ANOP ,                                           @D9A 01774100
.*                                                                      01774200
&ZW      SETC  '&ZW.0'                                             @D9A 01774300
.*                                                                      01774400
.PLLISTKEYEND ANOP ,                                               @D9A 01774500
.*                                                                      01774600
.*                                                                      01774700
         AIF   ('&MAXLISTKEY(1)' EQ 'NO_MAXLISTKEY' OR                 *01774800
                '&MAXLISTKEY(1)' EQ '').PLMAXLISTKEYNOTSPEC        @D9A 01774900
.*                                                                      01775000
&ZW      SETC  '&ZW.1'                                             @D9A 01775100
&ZCLNG   SETC  'YES'                                               @D9A 01775200
         AGO   .PLMAXLISTKEYEND                                    @D9A 01775300
.*                                                                      01775400
.PLMAXLISTKEYNOTSPEC ANOP ,                                        @D9A 01775500
.*                                                                      01775600
&ZW      SETC  '&ZW.0'                                             @D9A 01775700
.*                                                                      01775800
.PLMAXLISTKEYEND ANOP ,                                            @D9A 01775900
.*                                                                      01776000
.*                                                                      01776100
         AIF    ('&SETCURSOR(1)' EQ '').PLSETCURSORNOTSPEC         @D9A 01776200
.*                                                                      01776300
&ZW      SETC  '&ZW.1'                                             @D9A 01776400
&ZCLNG   SETC  'YES'                                               @D9A 01776500
         AGO   .PLSETCURSOREND                                     @D9A 01776600
.*                                                                      01776700
.PLSETCURSORNOTSPEC ANOP ,                                         @D9A 01776800
.*                                                                      01776900
&ZW      SETC  '&ZW.0'                                             @D9A 01777000
.*                                                                      01777100
.PLSETCURSOREND ANOP ,                                             @D9A 01777200
.*                                                                      01777300
.*                                                                      01777400
         AIF   ('&LISTDESC(1)' EQ 'NO_LISTDESC' OR                     *01777500
                '&LISTDESC(1)' EQ '').PLLISTDESCNOTSPEC            @D9C 01777600
.*                                                                      01777700
&ZW      SETC  '&ZW.1'                                             @D9M 01777800
&ZCLNG   SETC  'YES'                                               @D9M 01777900
         AGO   .PLLISTDESCEND                                      @D9M 01778000
.*                                                                      01778100
.PLLISTDESCNOTSPEC ANOP ,                                          @D9M 01778200
.*                                                                      01778300
&ZW      SETC  '&ZW.0'                                             @D9M 01778400
.*                                                                      01778500
.PLLISTDESCEND ANOP ,                                              @D9M 01778600
.*                                                                      01778700
.*                                                                      01778800
         AIF   ('&LISTLIMIT(1)' EQ 'NO_LISTLIMIT' OR                   *01778900
                '&LISTLIMIT(1)' EQ '').PLLISTLIMITNOTSPEC          @D9C 01779000
.*                                                                      01779100
&ZW      SETC  '&ZW.1'                                             @D9M 01779200
&ZCLNG   SETC  'YES'                                               @D9M 01779300
         AGO   .PLLISTLIMITEND                                     @D9M 01779400
.*                                                                      01779500
.PLLISTLIMITNOTSPEC ANOP ,                                         @D9M 01779600
.*                                                                      01779700
&ZW      SETC  '&ZW.0'                                             @D9M 01779800
.*                                                                      01779900
.PLLISTLIMITEND ANOP ,                                             @D9M 01780000
         AGO   .PLNOTWRTLCTLSEND                                   @D9M 01780100
.*                                                                      01780200
.*                                                                      01780300
.PLNOTWRTLCTLS ANOP ,                                              @D9M 01780400
.*                                                                      01780500
.*                                                                      01780600
&ZW      SETC  '&ZW.0'                                                  01780700
.*                                                                      01780800
         AIF   ('&LOCKOPER(1)' NE '').PLLRTLOCKOPERSPEC                 01780900
.*                                                                      01781000
&ZW      SETC  '&ZW.000'                                                01781100
         AGO   .PLLRTLOCKOPEREND                                        01781200
.*                                                                      01781300
.PLLRTLOCKOPERSPEC ANOP ,                                               01781400
.*                                                                      01781500
         AIF   ('&XLOCKOPER' NE 'NOTHELD' AND                          *01781600
                '&XLOCKOPER' NE 'HELDBY').PLLRTLOCKOPERNOTNOTHELDHELDBY 01781700
.*                                                                      01781800
&ZW      SETC  '&ZW.100'                                                01781900
&ZCLNG   SETC  'YES'                                                    01782000
         AGO   .PLLRTLOCKOPEREND                                        01782100
.*                                                                      01782200
.PLLRTLOCKOPERNOTNOTHELDHELDBY ANOP ,                                   01782300
.*                                                                      01782400
         AIF   ('&XLOCKOPER' NE 'SET' AND                              *01782500
                '&XLOCKOPER' NE 'RESET').PLLRTLOCKOPERNOTSETRESET  @D5C 01782600
.*                                                                      01782700
&ZW      SETC  '&ZW.101'                                                01782800
&ZCLNG   SETC  'YES'                                                    01782900
         AGO   .PLLRTLOCKOPEREND                                        01783000
.*                                                                      01783100
.PLLRTLOCKOPERNOTSETRESET ANOP ,                                        01783200
.*                                                                      01783300
         AIF   ('&XLOCKOPER' NE 'READNEXT').PLLRTLOCKOPERNOTREADNEXT    01783400
.*                                                                      01783500
         AIF   ('&XLOCKCOMP' EQ ''        OR                           *01783600
                '&XLOCKCOMP' EQ 'NO_LOCKCOMP').PLLRTREADNEXTNOCOMP @D5A 01783700
.*                                                                      01783800
&ZW      SETC  '&ZW.100'                                           @D5A 01783900
&ZCLNG   SETC  'YES'                                               @D5A 01784000
         AGO   .PLLRTLOCKOPERREADNEXTEND                           @D5A 01784100
.*                                                                      01784200
.PLLRTREADNEXTNOCOMP ANOP ,                                        @D5A 01784300
.*                                                                      01784400
&ZW      SETC  '&ZW.000'                                           @D5A 01784500
.*                                                                      01784600
.PLLRTLOCKOPERREADNEXTEND ANOP ,                                   @D5A 01784700
.*                                                                      01784800
         AGO   .PLLRTLOCKOPEREND                                   @D5A 01784900
.*                                                                      01785000
.PLLRTLOCKOPERNOTREADNEXT ANOP ,                                   @D5A 01785100
.*                                                                      01785200
.* LockOper(Test)                                                       01785300
&ZW      SETC  '&ZW.000'                                                01785400
.*                                                                      01785500
.PLLRTLOCKOPEREND ANOP ,                                                01785600
.*                                                                      01785700
.*                                                                      01785800
         AIF   ('&XKEYCOMP' EQ 'NO_KEYCOMP' OR                         *01785900
                '&XKEYCOMP' EQ '').PLKEYCOMPNOTSPEC                @D9A 01786000
.*                                                                      01786100
&ZW      SETC  '&ZW.1'                                             @D9A 01786200
&ZCLNG   SETC  'YES'                                               @D9A 01786300
         AGO   .PLKEYCOMPEND                                       @D9A 01786400
.*                                                                      01786500
.PLKEYCOMPNOTSPEC ANOP ,                                           @D9A 01786600
.*                                                                      01786700
&ZW      SETC  '&ZW.0'                                             @D9A 01786800
.*                                                                      01786900
.PLKEYCOMPEND ANOP ,                                               @D9A 01787000
.*                                                                      01787100
.*                                                                      01787200
         AIF   ('&XVERSCOMPTYPE' NE 'LESSOREQUAL').PLVERSNOTLESS   @D9A 01787300
.*                                                                      01787400
&ZW      SETC  '&ZW.1'                                             @D9A 01787500
&ZCLNG   SETC  'YES'                                               @D9A 01787600
         AGO   .PLVERSCOMPTYPEEND                                  @D9A 01787700
.*                                                                      01787800
.PLVERSNOTLESS ANOP ,                                              @D9A 01787900
.*                                                                      01788000
&ZW      SETC  '&ZW.0'                                             @D9A 01788100
.*                                                                      01788200
.PLVERSCOMPTYPEEND ANOP ,                                          @D9A 01788300
.*                                                                      01788400
.*                                                                      01788500
         AIF   ('&XKEYREQTYPE' NE 'LESSOREQUAL').PLKEYNOTLESS           01788600
.*                                                                      01788700
&ZW      SETC  '&ZW.01'                                                 01788800
&ZCLNG   SETC  'YES'                                                    01788900
         AGO   .PLKEYREQTYPEEND                                         01789000
.*                                                                      01789100
.PLKEYNOTLESS ANOP ,                                                    01789200
         AIF   ('&XKEYREQTYPE' NE 'GREATEROREQUAL').PLKEYNOTGREATER     01789300
.*                                                                      01789400
&ZW      SETC  '&ZW.10'                                                 01789500
&ZCLNG   SETC  'YES'                                                    01789600
         AGO   .PLKEYREQTYPEEND                                         01789700
.*                                                                      01789800
.PLKEYNOTGREATER ANOP ,                                                 01789900
.*                                                                      01790000
&ZW      SETC  '&ZW.00'                                                 01790100
.*                                                                      01790200
.PLKEYREQTYPEEND ANOP ,                                                 01790300
.PLNOTWRTLCTLSEND ANOP ,                                                01790400
.*                                                                      01790500
.*                                                                      01790600
&ZW      SETC  'B''&ZW.'''                                              01790700
.*                                                                      01790800
.*                                                                      01790900
         AIF   ('&ZCLNG' NE 'YES').PLNOCMDFLGS1B                        01791000
.*                                                                      01791100
.*   _xCmdFlgs1B                                                        01791200
         OI    &PLOFF_XCMDFLGS1B.(1),&ZW                                01791300
.*                                                                      01791400
.PLNOCMDFLGS1B ANOP ,                                                   01791500
.*                                                                      01791600
.*                                                                      01791700
.**  Set the command flags third byte                                ** 01791800
.*                                                                      01791900
&ZW      SETC  ''                                                       01792000
&ZCLNG   SETC  ''                                                       01792100
.*                                                                      01792200
.*                                                                      01792300
         AIF   ('&XLISTPOS' NE 'TAIL'     AND                          *01792400
                '&XLISTDIR' NE 'TOHEAD').PLLISTDIRNOTTAIL          @D5C 01792500
.*                                                                      01792600
&ZW      SETC  '&ZW.1'                                                  01792700
&ZCLNG   SETC  'YES'                                                    01792800
         AGO   .PLLISTDIREND                                            01792900
.*                                                                      01793000
.PLLISTDIRNOTTAIL ANOP ,                                                01793100
.*                                                                      01793200
&ZW      SETC  '&ZW.0'                                                  01793300
.*                                                                      01793400
.PLLISTDIREND ANOP ,                                                    01793500
.*                                                                      01793600
.*                                                                 @D6D 01793700
.*                                                                      01793800
         AIF   ('&XREQUEST' NE 'DELETE_ENTRYLIST').PLREQNOTDELENTRYLIST 01793900
.*                                                                      01794000
&ZW      SETC  '&ZW.00'                                            @D6C 01794100
.*                                                                      01794200
         AIF   ('&XLISTTYPE' NE 'NAMELIST').PLREQDELELNOTNAMELIST       01794300
.*                                                                      01794400
&ZW      SETC  '&ZW.1'                                                  01794500
&ZCLNG   SETC  'YES'                                                    01794600
         AGO   .PLREQDELENTRYLISTEND                                    01794700
.*                                                                      01794800
.PLREQDELELNOTNAMELIST ANOP ,                                           01794900
.*                                                                      01795000
.* ListType(IdList)                                                     01795100
&ZW      SETC  '&ZW.0'                                                  01795200
.*                                                                      01795300
.PLREQDELENTRYLISTEND ANOP ,                                            01795400
.*                                                                      01795500
         AGO   .PLREQUEST1END                                           01795600
.*                                                                      01795700
.PLREQNOTDELENTRYLIST ANOP ,                                            01795800
.*                                                                      01795900
         AIF   (                                                       *01796000
                '&XREQUEST' NE 'READ'        AND                       *01796100
                '&XREQUEST' NE 'WRITE'       AND                       *01796200
                '&XREQUEST' NE 'MOVE'        AND                       *01796300
                '&XREQUEST' NE 'DELETE'      AND                       *01796400
                '&XREQUEST' NE 'READ_LIST').PLREQNOTELT            @D6C 01796500
.*                                                                      01796600
         AIF   ('&XLOCBYCURSOR' NE 'LOCBYCURSOR').PLREQELTNOTLOCBYCUR   01796700
.*                                                                      01796800
&ZW      SETC  '&ZW.100'                                           @D6A 01796900
&ZCLNG   SETC  'YES'                                               @D6A 01797000
         AGO   .PLREQELTEND                                        @D6A 01797100
.*                                                                      01797200
.PLREQELTNOTLOCBYCUR ANOP ,                                        @D6A 01797300
.*                                                                      01797400
         AIF   ('&XENTRYID' EQ '').PLREQELTNOTENTRYID              @P4C 01797500
.*                                                                      01797600
&ZW      SETC  '&ZW.010'                                           @D6C 01797700
&ZCLNG   SETC  'YES'                                                    01797800
         AGO   .PLREQELTEND                                             01797900
.*                                                                      01798000
.PLREQELTNOTENTRYID ANOP ,                                              01798100
.*                                                                      01798200
         AIF   ('&XENTRYKEY' EQ '').PLREQELTNOTENTRYKEY            @PHC 01798300
.*                                                                      01798400
&ZW      SETC  '&ZW.001'                                           @D6C 01798500
&ZCLNG   SETC  'YES'                                                    01798600
         AGO   .PLREQELTEND                                             01798700
.*                                                                      01798800
.PLREQELTNOTENTRYKEY ANOP ,                                             01798900
.*                                                                      01799000
         AIF   ('&XENTRYNAME' EQ '').PLREQELTNOTENTRYNAME          @P4C 01799100
.*                                                                      01799200
&ZW      SETC  '&ZW.011'                                           @D6C 01799300
&ZCLNG   SETC  'YES'                                                    01799400
         AGO   .PLREQELTEND                                             01799500
.*                                                                      01799600
.PLREQELTNOTENTRYNAME ANOP ,                                            01799700
.*                                                                      01799800
.* Else                                                                 01799900
&ZW      SETC  '&ZW.000'                                           @D6C 01800000
.*                                                                      01800100
.PLREQELTEND ANOP ,                                                     01800200
.*                                                                      01800300
         AGO   .PLREQUEST1END                                           01800400
.*                                                                      01800500
.PLREQNOTELT ANOP ,                                                     01800600
.*                                                                      01800700
.*                                                                      01800800
.*                                                                      01800900
         AIF   ('&XREQUEST' NE 'MONITOR_LIST'    AND                   *01801000
                '&XREQUEST' NE 'MONITOR_EVENTQ'  AND                   *01801100
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01801200
                '&XREQUEST' NE 'MONITOR_SUBLIST').NOTMONCMD        @01A 01801300
.*                                                                      01801400
         AIF   ('&XREQUEST' NE 'MONITOR_LIST').NOTMONLISTCMD       @01A 01801500
&ZW      SETC  '&ZW.00'                                            @01A 01801600
.NOTMONLISTCMD  ANOP ,                                             @01A 01801700
         AIF   ('&XREQUEST' NE 'MONITOR_SUBLISTS').NOTMONSUBLISTSCMD    01801800
&ZW      SETC  '&ZW.00'                                            @01A 01801900
.NOTMONSUBLISTSCMD  ANOP ,                                         @01A 01802000
         AIF   ('&XREQUEST' NE 'MONITOR_EVENTQ').NOTMONEQCMD       @01A 01802100
&ZW      SETC  '&ZW.01'                                            @01A 01802200
&ZCLNG   SETC  'YES'                                               @01A 01802300
.NOTMONEQCMD  ANOP ,                                               @01A 01802400
         AIF   ('&XREQUEST' NE 'MONITOR_SUBLIST').NOTMONSUBLISTCMD @01A 01802500
&ZW      SETC  '&ZW.10'                                            @01A 01802600
&ZCLNG   SETC  'YES'                                               @01A 01802700
.NOTMONSUBLISTCMD  ANOP ,                                          @01A 01802800
.*                                                                      01802900
.*                                                                      01803000
         AIF   ('&XACTION' NE 'START'       AND                        *01803100
                '&XREQUEST' NE 'MONITOR_SUBLISTS').NOTACTIONSTART  @01A 01803200
&ZW      SETC  '&ZW.1'                                             @01A 01803300
&ZCLNG   SETC  'YES'                                               @01A 01803400
         AGO   .ACTIONEND                                          @01A 01803500
.NOTACTIONSTART    ANOP ,                                          @01A 01803600
&ZW      SETC  '&ZW.0'                                             @01A 01803700
.ACTIONEND         ANOP ,                                          @01A 01803800
         AGO   .AROUNDNOTMONCMD                                    @01A 01803900
.*                                                                      01804000
.*                                                                      01804100
.* Else                                                                 01804200
.NOTMONCMD   ANOP ,                                                @01A 01804300
&ZW      SETC  '&ZW.000'                                           @01A 01804400
.*                                                                      01804500
.AROUNDNOTMONCMD   ANOP ,                                          @01A 01804600
.*                                                                      01804700
.*                                                                      01804800
.*                                                                      01804900
.PLREQUEST1END ANOP ,                                                   01805000
.*                                                                      01805100
.*                                                                      01805200
         AIF   ('&XREQUEST' NE 'READ_LCONTROLS'   AND                  *01805300
                '&XREQUEST' NE 'WRITE_LCONTROLS'  AND                  *01805400
                '&XREQUEST' NE 'MONITOR_LIST'     AND                  *01805500
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01805600
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01805700
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01805800
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01805900
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01806000
                '&XREQUEST' NE 'DEQ_EVENTQ'       AND                  *01806100
                '&XREQUEST' NE 'LOCK').PLREQNOT2                   @01C 01806200
.*                                                                      01806300
&ZW      SETC  '&ZW.0'                                                  01806400
         AGO   .PLREQUEST2END                                           01806500
.*                                                                      01806600
.PLREQNOT2 ANOP ,                                                       01806700
.*                                                                      01806800
         AIF   ('&XLISTNUM' EQ '').PLREQ2NOTLISTNUM                @P4C 01806900
.*                                                                      01807000
&ZW      SETC  '&ZW.1'                                                  01807100
&ZCLNG   SETC  'YES'                                                    01807200
.*                                                                      01807300
         AGO   .PLREQ2LISTNUMEND                                        01807400
.*                                                                      01807500
.PLREQ2NOTLISTNUM ANOP ,                                                01807600
.*                                                                      01807700
&ZW      SETC  '&ZW.0'                                                  01807800
.*                                                                      01807900
.PLREQ2LISTNUMEND ANOP ,                                                01808000
.PLREQUEST2END ANOP ,                                                   01808100
.*                                                                      01808200
.*                                                                      01808300
         AIF   ('&XVERSCOMP' EQ '').PLVERSCOMPNOTSPEC              @P4C 01808400
.*                                                                      01808500
&ZW      SETC  '&ZW.1'                                                  01808600
&ZCLNG   SETC  'YES'                                                    01808700
         AGO   .PLVERSCOMPEND                                           01808800
.*                                                                      01808900
.PLVERSCOMPNOTSPEC ANOP ,                                               01809000
.*                                                                      01809100
&ZW      SETC  '&ZW.0'                                                  01809200
.*                                                                      01809300
.PLVERSCOMPEND ANOP ,                                                   01809400
.*                                                                      01809500
.*                                                                      01809600
         AIF   ('&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01809700
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01809800
                '&XREQUEST' NE 'MONITOR_LIST').PLREQNOTMONITORLIST @01C 01809900
.*                                                                      01810000
&ZW      SETC  '&ZW.0'                                                  01810100
.*                                                                      01810200
         AIF   ('&XDRIVEEXIT' NE 'YES').PLNOTDRIVEEXIT                  01810300
.*                                                                      01810400
&ZW      SETC  '&ZW.1'                                                  01810500
&ZCLNG   SETC  'YES'                                                    01810600
         AGO   .PLDRIVEEXITEND                                          01810700
.*                                                                      01810800
.PLNOTDRIVEEXIT ANOP ,                                                  01810900
.*                                                                      01811000
&ZW      SETC  '&ZW.0'                                                  01811100
.*                                                                      01811200
.PLDRIVEEXITEND ANOP ,                                                  01811300
.*                                                                      01811400
         AGO   .PLREQUEST3END                                           01811500
.*                                                                      01811600
.PLREQNOTMONITORLIST ANOP ,                                             01811700
.*                                                                      01811800
         AIF   ('&XVERSUPDATE' NE 'DEC').PLVERSUPDATENOTDEC             01811900
.*                                                                      01812000
&ZW      SETC  '&ZW.01'                                                 01812100
&ZCLNG   SETC  'YES'                                                    01812200
         AGO   .PLVERSUPDATEEND                                         01812300
.*                                                                      01812400
.PLVERSUPDATENOTDEC ANOP ,                                              01812500
.*                                                                      01812600
         AIF   ('&XVERSUPDATE' NE 'INC').PLVERSUPDATENOTINC             01812700
.*                                                                      01812800
&ZW      SETC  '&ZW.10'                                                 01812900
&ZCLNG   SETC  'YES'                                                    01813000
         AGO   .PLVERSUPDATEEND                                         01813100
.*                                                                      01813200
.PLVERSUPDATENOTINC ANOP ,                                              01813300
.*                                                                      01813400
         AIF   ('&XVERSUPDATE' NE 'SET').PLVERSUPDATENOTSET             01813500
.*                                                                      01813600
&ZW      SETC  '&ZW.11'                                                 01813700
&ZCLNG   SETC  'YES'                                                    01813800
         AGO   .PLVERSUPDATEEND                                         01813900
.*                                                                      01814000
.PLVERSUPDATENOTSET ANOP ,                                              01814100
.*                                                                      01814200
.* Else VersUpdate(NONE)                                                01814300
&ZW      SETC  '&ZW.00'                                                 01814400
.*                                                                      01814500
.PLVERSUPDATEEND ANOP ,                                                 01814600
.PLREQUEST3END ANOP ,                                                   01814700
.*                                                                      01814800
.*                                                                      01814900
&ZW      SETC  'B''&ZW.'''                                              01815000
.*                                                                      01815100
.*                                                                      01815200
         AIF   ('&ZCLNG' NE 'YES').PLNOCMDFLGS1C                        01815300
.*                                                                      01815400
.*   _xCmdFlgs1C                                                        01815500
         OI    &PLOFF_XCMDFLGS1C.(1),&ZW                                01815600
.*                                                                      01815700
.PLNOCMDFLGS1C ANOP ,                                                   01815800
.*                                                                      01815900
.*                                                                      01816000
.**  Set the command flags fourth byte                               ** 01816100
.*                                                                      01816200
&ZW      SETC  ''                                                       01816300
&ZCLNG   SETC  ''                                                       01816400
.*                                                                      01816500
.*                                                                      01816600
         AIF   ('&XSETCURSOR' NE 'TAIL' AND                            *01816700
                '&XMOVETOPOS' NE 'TAIL').PLMOVETOPOSNOTTAIL        @D9C 01816800
.*                                                                      01816900
&ZW      SETC  '&ZW.1'                                                  01817000
&ZCLNG   SETC  'YES'                                                    01817100
         AGO   .PLMOVETOPOSEND                                     @D5C 01817200
.*                                                                      01817300
.PLMOVETOPOSNOTTAIL ANOP ,                                         @D5C 01817400
.*                                                                      01817500
.* Else                                                                 01817600
&ZW      SETC  '&ZW.0'                                                  01817700
.*                                                                      01817800
.PLMOVETOPOSEND ANOP ,                                             @D5C 01817900
.*                                                                      01818000
.*                                                                      01818100
         AIF   ('&XMOVETOKEY' EQ '').PLMOVETOKEYNOTSPEC            @P4C 01818200
.*                                                                      01818300
&ZW      SETC  '&ZW.1'                                                  01818400
&ZCLNG   SETC  'YES'                                                    01818500
         AGO   .PLMOVETOKEYEND                                          01818600
.*                                                                      01818700
.PLMOVETOKEYNOTSPEC ANOP ,                                              01818800
.*                                                                      01818900
.* Else                                                                 01819000
&ZW      SETC  '&ZW.0'                                                  01819100
.*                                                                      01819200
.PLMOVETOKEYEND ANOP ,                                                  01819300
.*                                                                      01819400
.*                                                                      01819500
         AIF   ('&XUPDATECURSOR' NE 'YES').PLUPDCURYESNOTSPEC      @D6A 01819600
.*                                                                      01819700
&ZW      SETC  '&ZW.1'                                             @D6A 01819800
&ZCLNG   SETC  'YES'                                               @D6A 01819900
         AGO   .PLUPDCURYESEND                                     @D6A 01820000
.*                                                                      01820100
.PLUPDCURYESNOTSPEC ANOP ,                                         @D6A 01820200
.*                                                                      01820300
.* Else                                                                 01820400
&ZW      SETC  '&ZW.0'                                                  01820500
.*                                                                      01820600
.PLUPDCURYESEND ANOP ,                                             @D6A 01820700
.*                                                                      01820800
.*                                                                      01820900
         AIF   ('&XREQUEST' NE 'READ_LIST' AND                         *01821000
                '&XREQUEST' NE 'READ_MULT').PLREQNOTREADLISTREADMULT    01821100
.*                                                                      01821200
&ZI      SETA  0                                                        01821300
.*                                                                      01821400
.PLFINDECONTROLS ANOP ,                                                 01821500
.*                                                                      01821600
&ZI      SETA  &ZI+1                                                    01821700
.*                                                                      01821800
         AIF   (K'&XTYPE(&ZI) LE 0).PLFINDECONTROLSNOVALUE              01821900
.*                                                                      01822000
         AIF   ('&XTYPE(&ZI)' NE 'ECONTROLS').PLFINDECONTROLS           01822100
.*                                                                      01822200
&ZW      SETC  '&ZW.1'                                                  01822300
&ZCLNG   SETC  'YES'                                                    01822400
         AGO   .PLFINDECONTROLSEND                                      01822500
.*                                                                      01822600
.PLFINDECONTROLSNOVALUE ANOP ,                                          01822700
.*                                                                      01822800
&ZW      SETC  '&ZW.0'                                                  01822900
.*                                                                      01823000
.PLFINDECONTROLSEND ANOP ,                                              01823100
.*                                                                      01823200
.*                                                                      01823300
&ZI      SETA  0                                                        01823400
.*                                                                      01823500
.PLFINDENTDATA ANOP ,                                                   01823600
.*                                                                      01823700
&ZI      SETA  &ZI+1                                                    01823800
.*                                                                      01823900
         AIF   (K'&XTYPE(&ZI) LE 0).PLFINDENTDATANOVALUE                01824000
.*                                                                      01824100
         AIF   ('&XTYPE(&ZI)' NE 'ENTDATA').PLFINDENTDATA          @PBC 01824200
.*                                                                      01824300
&ZW      SETC  '&ZW.1'                                                  01824400
&ZCLNG   SETC  'YES'                                                    01824500
         AGO   .PLFINDENTDATAEND                                        01824600
.*                                                                      01824700
.PLFINDENTDATANOVALUE ANOP ,                                            01824800
.*                                                                      01824900
&ZW      SETC  '&ZW.0'                                                  01825000
.*                                                                      01825100
.PLFINDENTDATAEND ANOP ,                                                01825200
.*                                                                      01825300
.*                                                                      01825400
&ZI      SETA  0                                                        01825500
.*                                                                      01825600
.PLFINDADJDATA ANOP ,                                                   01825700
.*                                                                      01825800
&ZI      SETA  &ZI+1                                                    01825900
.*                                                                      01826000
         AIF   (K'&XTYPE(&ZI) LE 0).PLFINDADJDATANOVALUE                01826100
.*                                                                      01826200
         AIF   ('&XTYPE(&ZI)' NE 'ADJDATA').PLFINDADJDATA          @PBC 01826300
.*                                                                      01826400
&ZW      SETC  '&ZW.1'                                                  01826500
&ZCLNG   SETC  'YES'                                                    01826600
         AGO   .PLFINDADJDATAEND                                        01826700
.*                                                                      01826800
.PLFINDADJDATANOVALUE ANOP ,                                            01826900
.*                                                                      01827000
&ZW      SETC  '&ZW.0'                                                  01827100
.*                                                                      01827200
.PLFINDADJDATAEND ANOP ,                                                01827300
.*                                                                      01827400
         AGO   .PLREQUEST4END                                           01827500
.*                                                                      01827600
.*                                                                      01827700
.PLREQNOTREADLISTREADMULT ANOP ,                                        01827800
.*                                                                      01827900
         AIF   ('&XREQUEST' NE 'READ'    AND                           *01828000
                '&XREQUEST' NE 'WRITE'   AND                           *01828100
                '&XREQUEST' NE 'MOVE'    AND                           *01828200
                '&XREQUEST' NE 'DELETE').PLREQNOTREADWRITEMOVEDELETE    01828300
.*                                                                      01828400
&ZW      SETC  '&ZW.0'                                                  01828500
.*                                                                      01828600
         AIF   ('&XDATAOPER' NE 'NONE').PLDATAOPERNOTNONE               01828700
.*                                                                      01828800
&ZW      SETC  '&ZW.00'                                                 01828900
         AGO   .PLDATAOPEREND                                           01829000
.*                                                                      01829100
.PLDATAOPERNOTNONE ANOP ,                                               01829200
.*                                                                      01829300
         AIF   ('&XBUFFER'  EQ ''  AND                                 *01829400
                '&XBUFLIST' EQ ''  AND                                 *01829500
                '&XELEMNUM' EQ '').PLDATAAREANOTSPEC               @D3C 01829600
.*                                                                      01829700
&ZW      SETC  '&ZW.1'                                                  01829800
&ZCLNG   SETC  'YES'                                                    01829900
         AGO   .PLDATAAREAEND                                           01830000
.*                                                                      01830100
.PLDATAAREANOTSPEC ANOP ,                                               01830200
.*                                                                      01830300
&ZW      SETC  '&ZW.0'                                                  01830400
.*                                                                      01830500
.PLDATAAREAEND ANOP ,                                                   01830600
.*                                                                      01830700
.*                                                                      01830800
         AIF   ('&XADJAREA' EQ 'NO_ADJAREA' OR                         *01830900
                '&XADJAREA' EQ '').PLADJAREANOTSPEC                @P4C 01831000
.*                                                                      01831100
&ZW      SETC  '&ZW.1'                                                  01831200
&ZCLNG   SETC  'YES'                                                    01831300
         AGO   .PLADJAREAEND                                            01831400
.*                                                                      01831500
.PLADJAREANOTSPEC ANOP ,                                                01831600
.*                                                                      01831700
&ZW      SETC  '&ZW.0'                                                  01831800
.*                                                                      01831900
.PLADJAREAEND ANOP ,                                                    01832000
.*                                                                      01832100
.PLDATAOPEREND ANOP ,                                                   01832200
.*                                                                      01832300
         AGO   .PLREQUEST4END                                           01832400
.*                                                                      01832500
.PLREQNOTREADWRITEMOVEDELETE ANOP ,                                     01832600
.*                                                                      01832700
.* Else                                                                 01832800
&ZW      SETC  '&ZW.000'                                                01832900
.*                                                                      01833000
.PLREQUEST4END ANOP ,                                                   01833100
.*                                                                      01833200
.*                                                                      01833300
         AIF   ('&XREQUEST' NE 'WRITE' AND                             *01833400
                '&XREQUEST' NE 'MOVE').PLREQNOTWRITEMOVE                01833500
.*                                                                      01833600
         AIF   ('&XREQUEST' NE 'MOVE'       OR                         *01833700
                ('&XDATAOPER' NE 'NONE'     AND                        *01833800
                 '&XDATAOPER' NE 'READ')).PLREQWRITEMOVEWRITE           01833900
.*                                                                      01834000
&ZW      SETC  '&ZW.00'                                                 01834100
         AGO   .PLREQWRITEMOVEWRITEEND                                  01834200
.*                                                                      01834300
.PLREQWRITEMOVEWRITE ANOP ,                                             01834400
.*                                                                      01834500
         AIF   ('&XENTRYTYPE' NE 'OLD').PLENTRYTYPENOTOLD               01834600
.*                                                                      01834700
&ZW      SETC  '&ZW.01'                                                 01834800
&ZCLNG   SETC  'YES'                                                    01834900
         AGO   .PLENTRYTYPEEND                                          01835000
.*                                                                      01835100
.PLENTRYTYPENOTOLD ANOP ,                                               01835200
.*                                                                      01835300
         AIF   ('&XENTRYTYPE' NE 'NEW').PLENTRYTYPENOTNEW               01835400
.*                                                                      01835500
&ZW      SETC  '&ZW.10'                                                 01835600
&ZCLNG   SETC  'YES'                                                    01835700
         AGO   .PLENTRYTYPEEND                                          01835800
.*                                                                      01835900
.PLENTRYTYPENOTNEW ANOP ,                                               01836000
.*                                                                      01836100
         AIF   ('&XENTRYTYPE' NE 'ANY').PLENTRYTYPENOTANY               01836200
.*                                                                      01836300
&ZW      SETC  '&ZW.11'                                                 01836400
&ZCLNG   SETC  'YES'                                                    01836500
         AGO   .PLENTRYTYPEEND                                          01836600
.*                                                                      01836700
.PLENTRYTYPENOTANY ANOP ,                                               01836800
.*                                                                      01836900
.* Else                                                                 01837000
&ZW      SETC  '&ZW.00'                                                 01837100
.*                                                                      01837200
.PLENTRYTYPEEND ANOP ,                                                  01837300
.*                                                                      01837400
.PLREQWRITEMOVEWRITEEND ANOP ,                                          01837500
.*                                                                      01837600
         AGO   .PLREQUEST5END                                           01837700
.*                                                                      01837800
.PLREQNOTWRITEMOVE ANOP ,                                               01837900
.*                                                                      01838000
.* Else                                                                 01838100
&ZW      SETC  '&ZW.00'                                                 01838200
.*                                                                      01838300
.PLREQUEST5END ANOP ,                                                   01838400
.*                                                                      01838500
.*                                                                      01838600
&ZW      SETC  'B''&ZW.'''                                              01838700
.*                                                                      01838800
.*                                                                      01838900
         AIF   ('&ZCLNG' NE 'YES').PLNOCMDFLGS1D                        01839000
.*                                                                      01839100
.*   _xCmdFlgs1D                                                        01839200
         OI    &PLOFF_XCMDFLGS1D.(1),&ZW                                01839300
.*                                                                      01839400
.PLNOCMDFLGS1D ANOP ,                                                   01839500
.*                                                                      01839600
.*                                                                      01839700
.**  Set the second command flags word first byte                @D9A** 01839800
.*                                                                      01839900
&ZW      SETC  ''                                                       01840000
&ZCLNG   SETC  ''                                                       01840100
.*                                                                      01840200
.*                                                                      01840300
         AIF   ('&LISTKEYTYPE(1)' NE 'NOLISTKEY' AND                   *01840400
                '&LISTKEYTYPE(1)' NE '').PLLISTKEYTYPENOTNO        @D9A 01840500
.*                                                                      01840600
&ZW      SETC  '&ZW.00'                                            @D9A 01840700
         AGO   .PLLISTKEYTYPEEND                                   @D9A 01840800
.*                                                                      01840900
.PLLISTKEYTYPENOTNO ANOP ,                                         @D9A 01841000
.*                                                                      01841100
         AIF   ('&LISTKEYTYPE(1)' NE 'MOVE').PLLISTKEYTYPENOTMOVE  @D9A 01841200
.*                                                                      01841300
&ZW      SETC  '&ZW.01'                                            @D9A 01841400
&ZCLNG   SETC  'YES'                                               @D9A 01841500
         AGO   .PLLISTKEYTYPEEND                                   @D9A 01841600
.*                                                                      01841700
.PLLISTKEYTYPENOTMOVE ANOP ,                                       @D9A 01841800
.*                                                                      01841900
         AIF   ('&LISTKEYTYPE(1)' NE 'CREATE').PLLISTKEYTYPENOTCR  @D9A 01842000
.*                                                                      01842100
&ZW      SETC  '&ZW.10'                                            @D9A 01842200
&ZCLNG   SETC  'YES'                                               @D9A 01842300
         AGO   .PLLISTKEYTYPEEND                                   @D9A 01842400
.*                                                                      01842500
.PLLISTKEYTYPENOTCR ANOP ,                                         @D9A 01842600
.*                                                                      01842700
.*  ListKeyType(Any)                                                    01842800
&ZW      SETC  '&ZW.10'                                            @D9A 01842900
&ZCLNG   SETC  'YES'                                               @D9A 01843000
.*                                                                      01843100
.PLLISTKEYTYPEEND ANOP ,                                           @D9A 01843200
.*                                                                      01843300
.*                                                                      01843400
         AIF   ('&LISTKEYINC(1)' EQ 'NO_LISTKEYINC' OR                 *01843500
                '&LISTKEYINC(1)' EQ '').PLLISTKEYINCNOTSPEC        @D9A 01843600
.*                                                                      01843700
&ZW      SETC  '&ZW.1'                                             @D9A 01843800
&ZCLNG   SETC  'YES'                                               @D9A 01843900
         AGO   .PLLISTKEYINCEND                                    @D9A 01844000
.*                                                                      01844100
.PLLISTKEYINCNOTSPEC ANOP ,                                        @D9A 01844200
.*                                                                      01844300
&ZW      SETC  '&ZW.0'                                             @D9A 01844400
.*                                                                      01844500
.PLLISTKEYINCEND ANOP ,                                            @D9A 01844600
.*                                                                      01844700
.*                                                                      01844800
         AIF   ('&REQUEST(1)' EQ 'WRITE_LCONTROLS').PLCFSKPAUTHFLG @D9A 01844900
.*                                                                      01845000
.*                                                                      01845100
         AIF   ('&NEWAUTH(1)' EQ 'NO_NEWAUTH' OR                       *01845200
                '&NEWAUTH(1)' EQ '').PLCFNEWAUTHNOTSPEC            @D9A 01845300
.*                                                                      01845400
&ZW      SETC  '&ZW.1'                                             @D9A 01845500
&ZCLNG   SETC  'YES'                                               @D9A 01845600
         AGO   .PLCFNEWAUTHEND                                     @D9A 01845700
.*                                                                      01845800
.PLCFNEWAUTHNOTSPEC ANOP ,                                         @D9A 01845900
.*                                                                      01846000
&ZW      SETC  '&ZW.0'                                             @D9A 01846100
.*                                                                      01846200
.PLCFNEWAUTHEND ANOP ,                                             @D9A 01846300
.*                                                                      01846400
.*                                                                      01846500
         AIF   ('&AUTHCOMP(1)' NE 'NO_AUTHCOMP' AND                    *01846600
                '&AUTHCOMP(1)' NE '').PLCFAUTHCOMPSPEC             @D9A 01846700
.*                                                                      01846800
&ZW      SETC  '&ZW.00'                                            @D9A 01846900
         AGO   .PLCFAUTHCOMPEND                                    @D9A 01847000
.*                                                                      01847100
.PLCFAUTHCOMPSPEC ANOP ,                                           @D9A 01847200
.*                                                                      01847300
         AIF   ('&AUTHCOMPTYPE(1)' NE 'LESSOREQUAL').PLCFAUTHCMPEQ @D9A 01847400
.*                                                                      01847500
&ZW      SETC  '&ZW.10'                                            @D9A 01847600
&ZCLNG   SETC  'YES'                                               @D9A 01847700
         AGO   .PLCFAUTHCOMPEND                                    @D9A 01847800
.*                                                                      01847900
.PLCFAUTHCMPEQ ANOP ,                                              @D9A 01848000
.*                                                                      01848100
&ZW      SETC  '&ZW.01'                                            @D9A 01848200
&ZCLNG   SETC  'YES'                                               @D9A 01848300
.*                                                                      01848400
.PLCFAUTHCOMPEND ANOP ,                                            @D9A 01848500
.*                                                                      01848600
         AGO   .PLCFAUTHFLAGSEND                                   @D9A 01848700
.*                                                                      01848800
.PLCFSKPAUTHFLG ANOP ,                                             @D9A 01848900
.*                                                                      01849000
&ZW      SETC  '&ZW.000'                                           @D9A 01849100
.*                                                                      01849200
.PLCFAUTHFLAGSEND ANOP ,                                           @D9A 01849300
.*                                                                      01849400
.*                                                                      01849500
         AIF   ('&CURSORUPDTYPE(1)' NE 'NEXT' AND                      *01849600
                '&CURSORUPDTYPE(1)' NE '').PLCFCURUPDTYPENOTNEXT   @D9A 01849700
.*                                                                      01849800
&ZW      SETC  '&ZW.00'                                            @D9A 01849900
         AGO   .PLCFCURUPDTYPEEND                                  @D9A 01850000
.*                                                                      01850100
.PLCFCURUPDTYPENOTNEXT ANOP ,                                      @D9A 01850200
.*                                                                      01850300
         AIF   ('&CURSORUPDTYPE(1)' NE 'CURRENT').PLCFCURUPDNOTCUR @D9A 01850400
.*                                                                      01850500
&ZW      SETC  '&ZW.01'                                            @D9A 01850600
&ZCLNG   SETC  'YES'                                               @D9A 01850700
         AGO   .PLCFCURUPDTYPEEND                                  @D9A 01850800
.*                                                                      01850900
.PLCFCURUPDNOTCUR ANOP ,                                           @D9A 01851000
.*                                                                      01851100
         AIF   ('&CURSORUPDTYPE(1)' NE 'NEXTCOND').PLCFCURUPDNOTNC @D9A 01851200
.*                                                                      01851300
&ZW      SETC  '&ZW.10'                                            @D9A 01851400
&ZCLNG   SETC  'YES'                                               @D9A 01851500
         AGO   .PLCFCURUPDTYPEEND                                  @D9A 01851600
.*                                                                      01851700
.PLCFCURUPDNOTNC ANOP ,                                            @D9A 01851800
.*                                                                      01851900
.*  CursorUpdType(CurrentCond)                                          01852000
&ZW      SETC  '&ZW.11'                                            @D9A 01852100
&ZCLNG   SETC  'YES'                                               @D9A 01852200
.*                                                                      01852300
.PLCFCURUPDTYPEEND ANOP ,                                          @D9A 01852400
.*                                                                      01852500
.*                                                                      01852600
&ZW      SETC  'B''&ZW.'''                                         @D9A 01852700
.*                                                                      01852800
.*                                                                      01852900
         AIF   ('&ZCLNG' NE 'YES').PLNOCMDFLGS2A                   @D9A 01853000
.*                                                                      01853100
.*   _xCmdFlgs2A                                                        01853200
         OI    &PLOFF_XCMDFLGS2A.(1),&ZW                           @D9A 01853300
.*                                                                      01853400
.PLNOCMDFLGS2A ANOP ,                                              @D9A 01853500
.*                                                                      01853600
.**  End of code to set command flags                            @D9A** 01853700
.**------------------------------------------------------------------** 01853800
.*                                                                      01853900
.*                                                                      01854000
         AIF   ('&XREQUEST' NE 'MONITOR_LIST'     AND                  *01854100
                '&XREQUEST' NE 'MONITOR_SUBLIST'  AND                  *01854200
                '&XREQUEST' NE 'MONITOR_SUBLISTS' AND                  *01854300
                '&XREQUEST' NE 'MONITOR_EVENTQ'   AND                  *01854400
                '&XREQUEST' NE 'READ_EQCONTROLS'  AND                  *01854500
                '&XREQUEST' NE 'READ_EMCONTROLS'  AND                  *01854600
                '&XREQUEST' NE 'DEQ_EVENTQ').PLMONITORLISTNOTSPEC  @01C 01854700
.*                                                                      01854800
.*   _xUid3, _xConId                                                    01854900
         MVC   &PLOFF_XUID3.(1,1),&PLOFF_XCONID.(1)                     01855000
.*                                                                      01855100
         AGO   .PLMONITORLISTEND                                        01855200
.*                                                                      01855300
.PLMONITORLISTNOTSPEC ANOP ,                                            01855400
.PLMONITORLISTEND ANOP ,                                                01855500
.*                                                                      01855600
.*                                                                      01855700
.*                                                                      01855800
.*                                                                      01855900
         AIF   ('&XREQUEST' NE 'READ_MULT'        AND                  *01856000
                '&XREQUEST' NE 'DELETE_MULT').PLMULTREQSTNOTSPEC   @L1A 01856100
.*                                                                      01856200
         AIF   ('&XEXTRESTOKEN' EQ '').PLMULTREQSTNOTSPEC          @L1A 01856300
.*   _xRestoken, _xExtRestokenTkn                                       01856400
         MVC   &PLOFF_XRESTOKEN.(8,1),&PLOFF_XEXTRESTOKENTKN.(1)   @L1A 01856500
.*                                                                      01856600
         AGO   .PLMULTREQSTEND                                     @L1A 01856700
.*                                                                      01856800
.PLMULTREQSTNOTSPEC ANOP ,                                         @L1A 01856900
.PLMULTREQSTEND ANOP ,                                             @L1A 01857000
.*                                                                      01857100
.*                                                                      01857200
         AIF   ('&XLOCKOPER' EQ '').PLLOCKOPERNOTSPEC                   01857300
.*                                                                      01857400
.* Handle the LockComp specification.                                   01857500
.* There are four ways it can be specified:                             01857600
.*  1) LOCKCOMP=(reg)       --> "reg" contains the address of the value 01857700
.*  2) LOCKCOMP=offset(reg) --> explicit basing specification           01857800
.*  3) LOCKCOMP=name        --> variable name                           01857900
.*  4) LOCKCOMP=value       --> hard-coded value                        01858000
.*                                                                      01858100
         AIF   ('&XLOCKCOMP' EQ ''              OR                     *01858200
                '&XLOCKCOMP' EQ 'NO_LOCKCOMP').PLNOLOCKCOMP        @D6A 01858300
         AIF   ('&XLOCKCOMP'(1,1) NE '(').PLLOCKCOMPNOTREG         @D6A 01858400
&ZCGPR   SETC  '0('.'&XLOCKCOMP'(2,K'&XLOCKCOMP-2).')'             @D6A 01858500
         AGO   .PLENDLOCKCOMPSETUP                                 @D6A 01858600
.PLLOCKCOMPNOTREG ANOP ,                                           @D6A 01858700
&ZCGPR   SETC  '&XLOCKCOMP'                                        @D6A 01858800
&ZC      SETC  '&XLOCKCOMP'(1,1)                                   @D6A 01858900
         AIF   (T'&ZC NE 'N').PLENDLOCKCOMPSETUP                   @D6A 01859000
&ZC      SETC  '&XLOCKCOMP'                                        @D6A 01859100
         AIF   ('&ZC'(K'&ZC,1) EQ ')').PLENDLOCKCOMPSETUP          @D6A 01859200
&ZCGPR   SETC  '=FL1''&XLOCKCOMP'''                                @D6A 01859300
.PLENDLOCKCOMPSETUP ANOP ,                                         @D6A 01859400
.PLNOLOCKCOMP  ANOP ,                                              @D6A 01859500
.*                                                                      01859600
         AIF   ('&XLOCKOPER' NE 'RESET'     AND                        *01859700
                '&XLOCKOPER' NE 'HELDBY').PLLOCKOPERNOTRESETHELDBY      01859800
.*                                                                      01859900
         AIF   ('&XLOCKCOMP' EQ 'NO_LOCKCOMP' OR                       *01860000
                '&XLOCKCOMP' EQ '').PLRESETHELDBYNOTLOCKCOMP       @P4C 01860100
.*                                                                      01860200
.*   _xCglm                                                             01860300
         MVC   &PLOFF_XCGLM.(1,1),&ZCGPR                           @D6C 01860400
.*                                                                      01860500
         AGO   .PLRESETHELDBYEND                                        01860600
.*                                                                      01860700
.PLRESETHELDBYNOTLOCKCOMP ANOP ,                                        01860800
.*                                                                      01860900
.*   _xCglm, _xConId                                                    01861000
         MVC   &PLOFF_XCGLM.(1,1),&PLOFF_XCONID.(1)                     01861100
.*                                                                      01861200
.PLRESETHELDBYEND ANOP ,                                                01861300
.*                                                                      01861400
         AGO   .PLLOCKOPEREND                                           01861500
.*                                                                      01861600
.PLLOCKOPERNOTRESETHELDBY ANOP ,                                        01861700
.*                                                                      01861800
         AIF   ('&XLOCKOPER' NE 'SET').PLLOCKOPERNOTSET                 01861900
.*                                                                      01862000
         AIF   ('&XLOCKCOMP' EQ 'NO_LOCKCOMP' OR                       *01862100
                '&XLOCKCOMP' EQ '').PLSETNOTLOCKCOMP               @P4C 01862200
.*                                                                      01862300
.*   _xCglm                                                             01862400
         MVC   &PLOFF_XCGLM.(1,1),&ZCGPR                           @D6C 01862500
.*                                                                      01862600
.PLSETNOTLOCKCOMP ANOP ,                                                01862700
.*                                                                      01862800
         AIF   ('&XREQUEST' NE 'LOCK').PLLOCKOPERNOTLOCKREQ        @D4M 01862900
.*                                                                      01863000
.*   _xUid2, _xConId                                                    01863100
         MVC   &PLOFF_XUID2.(1,1),&PLOFF_XCONID.(1)                     01863200
.*                                                                      01863300
         AGO   .PLLOCKOPERSETEND                                        01863400
.*                                                                      01863500
.PLLOCKOPERNOTLOCKREQ ANOP ,                                            01863600
.*                                                                      01863700
.*   _xUid1, _xConId                                                    01863800
         MVC   &PLOFF_XUID1.(1,1),&PLOFF_XCONID.(1)                     01863900
.*                                                                      01864000
.PLLOCKOPERSETEND ANOP ,                                                01864100
.*                                                                      01864200
         AGO   .PLLOCKOPEREND                                           01864300
.*                                                                      01864400
.PLLOCKOPERNOTSET ANOP ,                                                01864500
.*                                                                      01864600
         AIF   ('&XLOCKOPER' NE 'TEST').PLLOCKOPERNOTTEST               01864700
.*                                                                      01864800
         AIF   ('&XLOCKCOMP' EQ 'NO_LOCKCOMP' OR                       *01864900
                '&XLOCKCOMP' EQ '').PLTESTNOTLOCKCOMP              @P4C 01865000
.*                                                                      01865100
.*   _xCompConId                                                        01865200
         MVC   &PLOFF_XCOMPCONID.(1,1),&ZCGPR                      @D6C 01865300
.*                                                                      01865400
         AGO   .PLTESTLOCKCOMPEND                                       01865500
.*                                                                      01865600
.PLTESTNOTLOCKCOMP ANOP ,                                               01865700
.*                                                                      01865800
.*   _xCompConId, _xConId                                               01865900
         MVC   &PLOFF_XCOMPCONID.(1,1),&PLOFF_XCONID.(1)           @D4A 01866000
.*                                                                      01866100
.PLTESTLOCKCOMPEND ANOP ,                                               01866200
.*                                                                      01866300
         AGO   .PLLOCKOPEREND                                           01866400
.*                                                                      01866500
.PLLOCKOPERNOTTEST ANOP ,                                               01866600
.*                                                                      01866700
         AIF   ('&XLOCKOPER' NE 'READNEXT').PLLOCKOPERNOTREADNEXT  @D5A 01866800
.*                                                                      01866900
         AIF   ('&XLOCKCOMP' EQ 'NO_LOCKCOMP' OR                       *01867000
                '&XLOCKCOMP' EQ '').PLREADNEXTNOTLOCKCOMP          @D5A 01867100
.*                                                                      01867200
.*   _xCglm                                                             01867300
         MVC   &PLOFF_XCGLM.(1,1),&ZCGPR                           @D6C 01867400
.*                                                                      01867500
.PLREADNEXTNOTLOCKCOMP ANOP ,                                      @D5A 01867600
.*                                                                      01867700
         AGO   .PLLOCKOPEREND                                      @D5A 01867800
.*                                                                      01867900
.PLLOCKOPERNOTREADNEXT ANOP ,                                      @D5A 01868000
.*                                                                      01868100
.* Else LockOper(NotHeld)                                               01868200
.*                                                                      01868300
         AGO   .PLLOCKOPEREND                                           01868400
.*                                                                      01868500
.PLLOCKOPERNOTSPEC ANOP ,                                               01868600
.PLLOCKOPEREND ANOP ,                                                   01868700
.*                                                                      01868800
.*                                                                      01868900
.**  Set the default value for the EntryKey field                    ** 01869000
.*                                                                      01869100
         AIF   (                                                       *01869200
                '&XREQUEST'     NE 'WRITE'    OR                       *01869300
                ('&XENTRYTYPE'  NE 'ANY'      AND                      *01869400
                 '&XENTRYTYPE'  NE 'NEW')                              *01869500
                OR                                                     *01869600
                '&XENTRYKEY'    NE ''         OR                       *01869700
                '&XENTRYNAME'   NE ''         OR                       *01869800
                '&XLISTPOS'     NE 'TAIL').PLNOENTRYKEYDEFAULT     @D9C 01869900
.*                                                                      01870000
.*   _xEntryKey                                                         01870100
         MVI   &PLOFF_XENTRYKEY.(1),X'FF'                               01870200
         MVC   &PLOFF_XENTRYKEY.+1(15,1),&PLOFF_XENTRYKEY.(1)           01870300
.*                                                                      01870400
         AGO   .PLKEYDEFAULTEND                                         01870500
.*                                                                      01870600
.PLNOENTRYKEYDEFAULT ANOP ,                                             01870700
.*                                                                      01870800
.*                                                                      01870900
         AIF   (                                                       *01871000
                '&XREQUEST'     NE 'MOVE'     OR                       *01871100
                '&XDATAOPER'    NE 'WRITE'    OR                       *01871200
                '&XENTRYTYPE'   NE 'ANY'                               *01871300
                OR                                                     *01871400
                '&XENTRYKEY'    NE ''         OR                       *01871500
                '&XENTRYNAME'   NE ''         OR                       *01871600
                '&XMOVETOKEY'   NE ''         OR                       *01871700
                '&XMOVETOPOS'   NE 'TAIL').PLNOMOVEENTRYKEYDEFAULT @D9C 01871800
.*                                                                      01871900
.*   _xEntryKey                                                         01872000
         MVI   &PLOFF_XENTRYKEY.(1),X'FF'                               01872100
         MVC   &PLOFF_XENTRYKEY.+1(15,1),&PLOFF_XENTRYKEY.(1)           01872200
.*                                                                      01872300
.PLNOMOVEENTRYKEYDEFAULT ANOP ,                                         01872400
.PLKEYDEFAULTEND ANOP ,                                                 01872500
.*                                                                      01872600
.*                                                                      01872700
.**  Set the MoveToKey and MoveToList fields                     @DAA** 01872800
.*                                                                      01872900
         AIF   ('&XMOVETOKEY' EQ '0'    OR                             *01873000
                '&XMOVETOKEY' EQ '').PLSETMOVETOKEYEND             @DAA 01873100
.*                                                                      01873200
.* Handle the MoveToKey specification.                                  01873300
.* There are four ways it can be specified:                             01873400
.*  1) MOVETOKEY=(reg)       --> "reg" contains the addr of the value   01873500
.*  2) MOVETOKEY=offset(reg) --> explicit basing specification          01873600
.*  3) MOVETOKEY=name        --> variable name                          01873700
.*  4) MOVETOKEY=value       --> hard-coded value                       01873800
.*                                                                      01873900
         AIF   ('&XMOVETOKEY'(1,1) NE '(').PLMOVETOKEYNOTREG       @DAA 01874000
&ZCGPR   SETC  '0('.'&XMOVETOKEY'(2,K'&XMOVETOKEY-2).')'           @DAA 01874100
         AGO   .PLENDMOVETOKEYSETUP                                @DAA 01874200
.PLMOVETOKEYNOTREG ANOP ,                                          @DAA 01874300
&ZCGPR   SETC  '&XMOVETOKEY'                                       @DAA 01874400
&ZC      SETC  '&XMOVETOKEY'(1,1)                                  @DAA 01874500
         AIF   (T'&ZC NE 'N').PLENDMOVETOKEYSETUP                  @DAA 01874600
&ZC      SETC  '&XMOVETOKEY'                                       @DAA 01874700
         AIF   ('&ZC'(K'&ZC,1) EQ ')').PLENDMOVETOKEYSETUP         @DAA 01874800
&ZCGPR   SETC  '=CL16''&XMOVETOKEY'''                              @DAA 01874900
.PLENDMOVETOKEYSETUP ANOP ,                                        @DAA 01875000
.*                                                                      01875100
         AIF   (&LISTPLVERS NE 0).PLMOVETOKEYNOTVZERO              @DAA 01875200
.*                                                                      01875300
.*   _xMoveToKey0                                                       01875400
         MVC   &PLOFF_XMOVETOKEY0.(16,1),&ZCGPR                    @DAA 01875500
         AGO   .PLMOVETOKEYSTOREEND                                @DAA 01875600
.*                                                                      01875700
.PLMOVETOKEYNOTVZERO ANOP ,                                        @DAA 01875800
.*                                                                      01875900
.*   _xMoveToKey1                                                       01876000
         MVC   &PLOFF_XMOVETOKEY1.(16,1),&ZCGPR                    @DAA 01876100
.*                                                                      01876200
.PLMOVETOKEYSTOREEND ANOP ,                                        @DAA 01876300
.PLSETMOVETOKEYEND ANOP ,                                          @DAA 01876400
.*                                                                      01876500
.*                                                                      01876600
         AIF   ('&XMOVETOLIST' EQ '0'    OR                            *01876700
                '&XMOVETOLIST' EQ '').PLSETMOVETOLISTEND           @DAA 01876800
.*                                                                      01876900
.* Handle the MoveToList specification.                                 01877000
.* There are four ways it can be specified:                             01877100
.*  1) MOVETOLIST=(reg)       --> "reg" contains the addr of the value  01877200
.*  2) MOVETOLIST=offset(reg) --> explicit basing specification         01877300
.*  3) MOVETOLIST=name        --> variable name                         01877400
.*  4) MOVETOLIST=value       --> hard-coded value                      01877500
.*                                                                      01877600
         AIF   ('&XMOVETOLIST'(1,1) NE '(').PLMOVETOLISTNOTREG     @DAA 01877700
&ZCGPR   SETC  '0('.'&XMOVETOLIST'(2,K'&XMOVETOLIST-2).')'         @DAA 01877800
         AGO   .PLENDMOVETOLISTSETUP                               @DAA 01877900
.PLMOVETOLISTNOTREG ANOP ,                                         @DAA 01878000
&ZCGPR   SETC  '&XMOVETOLIST'                                      @DAA 01878100
&ZC      SETC  '&XMOVETOLIST'(1,1)                                 @DAA 01878200
         AIF   (T'&ZC NE 'N').PLENDMOVETOLISTSETUP                 @DAA 01878300
&ZC      SETC  '&XMOVETOLIST'                                      @DAA 01878400
         AIF   ('&ZC'(K'&ZC,1) EQ ')').PLENDMOVETOLISTSETUP        @DAA 01878500
&ZCGPR   SETC  '=FL4''&XMOVETOLIST'''                              @DAA 01878600
.PLENDMOVETOLISTSETUP ANOP ,                                       @DAA 01878700
.*                                                                      01878800
         AIF   (&LISTPLVERS NE 0).PLMOVETOLISTNOTVZERO             @DAA 01878900
.*                                                                      01879000
.*   _xMoveToList0                                                      01879100
         MVC   &PLOFF_XMOVETOLIST0.(4,1),&ZCGPR                    @DAA 01879200
         AGO   .PLMOVETOLISTSTOREEND                               @DAA 01879300
.*                                                                      01879400
.PLMOVETOLISTNOTVZERO ANOP ,                                       @DAA 01879500
.*                                                                      01879600
.*   _xMoveToList1                                                      01879700
         MVC   &PLOFF_XMOVETOLIST1.(4,1),&ZCGPR                    @DAA 01879800
.*                                                                      01879900
.PLMOVETOLISTSTOREEND ANOP ,                                       @DAA 01880000
.PLSETMOVETOLISTEND ANOP ,                                         @DAA 01880100
.*                                                                      01880200
.*                                                                      01880300
.**  Set the AuthComp and NewAuth fields                             ** 01880400
.*                                                                      01880500
         AIF   ('&AUTHCOMP(1)' EQ 'NO_AUTHCOMP' OR                     *01880600
                '&AUTHCOMP(1)' EQ '0'           OR                     *01880700
                '&AUTHCOMP(1)' EQ '').PLNOAUTHCOMP                 @D9A 01880800
.*                                                                      01880900
.* Handle the AuthComp specification.                                   01881000
.* There are four ways it can be specified:                             01881100
.*  1) AUTHCOMP=(reg)       --> "reg" contains the addr of the value    01881200
.*  2) AUTHCOMP=offset(reg) --> explicit basing specification           01881300
.*  3) AUTHCOMP=name        --> variable name                           01881400
.*  4) AUTHCOMP=value       --> hard-coded value                        01881500
.*                                                                      01881600
         AIF   ('&XAUTHCOMP'(1,1) NE '(').PLAUTHCOMPNOTREG         @D9A 01881700
&ZCGPR   SETC  '0('.'&XAUTHCOMP'(2,K'&XAUTHCOMP-2).')'             @D9A 01881800
         AGO   .PLENDAUTHCOMPSETUP                                 @D9A 01881900
.PLAUTHCOMPNOTREG ANOP ,                                           @D9A 01882000
&ZCGPR   SETC  '&XAUTHCOMP'                                        @D9A 01882100
&ZC      SETC  '&XAUTHCOMP'(1,1)                                   @D9A 01882200
         AIF   (T'&ZC NE 'N').PLENDAUTHCOMPSETUP                   @D9A 01882300
&ZC      SETC  '&XAUTHCOMP'                                        @D9A 01882400
         AIF   ('&ZC'(K'&ZC,1) EQ ')').PLENDAUTHCOMPSETUP          @D9A 01882500
&ZCGPR   SETC  '=CL16''&XAUTHCOMP'''                               @D9A 01882600
.PLENDAUTHCOMPSETUP ANOP ,                                         @D9A 01882700
.*                                                                      01882800
         AIF   ('&REQUEST(1)' NE 'WRITE_LCONTROLS').PLATHCMPNOTWLC @D9A 01882900
.*                                                                      01883000
.*   _xAuthComp1                                                        01883100
         MVC   &PLOFF_XAUTHCOMP1.(16,1),&ZCGPR                     @D9A 01883200
         AGO   .PLAUTHCOMPSTOREEND                                 @D9A 01883300
.*                                                                      01883400
.PLATHCMPNOTWLC ANOP ,                                             @D9A 01883500
.*                                                                      01883600
.*   _xAuthComp2                                                        01883700
         MVC   &PLOFF_XAUTHCOMP2.(16,1),&ZCGPR                     @D9A 01883800
.*                                                                      01883900
.PLAUTHCOMPSTOREEND ANOP ,                                         @D9A 01884000
.*                                                                      01884100
.*                                                                      01884200
         AIF   ('&REQUEST(1)'  NE 'WRITE_LCONTROLS' OR                 *01884300
                ('&NEWAUTH(1)'  NE 'NO_NEWAUTH'       AND              *01884400
                 '&NEWAUTH(1)'  NE '')).PLNONEWAUTHDEFAULT         @D9C 01884500
.*                                                                      01884600
.*   _xNewAuth                                                          01884700
         MVC   &PLOFF_XNEWAUTH1.(16,1),&PLOFF_XAUTHCOMP1.(1)       @D9C 01884800
.*                                                                      01884900
.PLNONEWAUTHDEFAULT ANOP ,                                              01885000
.PLNOAUTHCOMP ANOP ,                                               @D9A 01885100
.*                                                                      01885200
.*                                                                      01885300
         AIF   ('&NEWAUTH(1)'  EQ 'NO_NEWAUTH'  OR                     *01885400
                '&NEWAUTH(1)'  EQ '0'           OR                     *01885500
                '&NEWAUTH(1)'  EQ '').PLNONEWAUTH                  @D9A 01885600
.*                                                                      01885700
.* Handle the NewAuth specification.                                    01885800
.* There are four ways it can be specified:                             01885900
.*  1) NEWAUTH=(reg)       --> "reg" contains the addr of the value     01886000
.*  2) NEWAUTH=offset(reg) --> explicit basing specification            01886100
.*  3) NEWAUTH=name        --> variable name                            01886200
.*  4) NEWAUTH=value       --> hard-coded value                         01886300
.*                                                                      01886400
         AIF   ('&XNEWAUTH'(1,1) NE '(').PLNEWAUTHNOTREG           @D9A 01886500
&ZCGPR   SETC  '0('.'&XNEWAUTH'(2,K'&XNEWAUTH-2).')'               @D9A 01886600
         AGO   .PLENDNEWAUTHSETUP                                  @D9A 01886700
.PLNEWAUTHNOTREG ANOP ,                                            @D9A 01886800
&ZCGPR   SETC  '&XNEWAUTH'                                         @D9A 01886900
&ZC      SETC  '&XNEWAUTH'(1,1)                                    @D9A 01887000
         AIF   (T'&ZC NE 'N').PLENDNEWAUTHSETUP                    @D9A 01887100
&ZC      SETC  '&XNEWAUTH'                                         @D9A 01887200
         AIF   ('&ZC'(K'&ZC,1) EQ ')').PLENDNEWAUTHSETUP           @D9A 01887300
&ZCGPR   SETC  '=CL16''&XNEWAUTH'''                                @D9A 01887400
.PLENDNEWAUTHSETUP ANOP ,                                          @D9A 01887500
.*                                                                      01887600
         AIF   ('&REQUEST(1)' NE 'WRITE_LCONTROLS').PLNEWATHNOTWLC @D9A 01887700
.*                                                                      01887800
.*   _xNewAuth1                                                         01887900
         MVC   &PLOFF_XNEWAUTH1.(16,1),&ZCGPR                      @D9A 01888000
         AGO   .PLNEWAUTHSTOREEND                                  @D9A 01888100
.*                                                                      01888200
.PLNEWATHNOTWLC ANOP ,                                             @D9A 01888300
.*                                                                      01888400
.*   _xNewAuth2                                                         01888500
         MVC   &PLOFF_XNEWAUTH2.(16,1),&ZCGPR                      @D9A 01888600
.*                                                                      01888700
.PLNEWAUTHSTOREEND ANOP ,                                          @D9A 01888800
.PLNONEWAUTH ANOP ,                                                @D9A 01888900
.*                                                                      01889000
.*                                                                      01889100
.**------------------------------------------------------------------** 01889200
.**  End of code to fill in the parameter list                       ** 01889300
.**------------------------------------------------------------------** 01889400
.*                                                                      01889500
.*                                                                      01889600
.**------------------------------------------------------------------** 01889700
.**  Ensure AR1 is 0 for primary callers                             ** 01889800
.**------------------------------------------------------------------** 01889900
.*                                                                      01890000
.**  This code is necessary because the entry linkage of the called  ** 01890100
.**  routine needs to reference fields in the parameter list while   ** 01890200
.**  executing in AR mode without knowing the mode of the caller.    ** 01890300
.*                                                                      01890400
         AIF   ('&SYSASCE' NE 'P').CALLSKIPSETAR1  Check for AR mode    01890500
         LAE   1,0(1,0)                 Make sure AR1 is cleared        01890600
.CALLSKIPSETAR1 ANOP ,                                                  01890700
.*                                                                      01890800
.*                                                                      01890900
.**------------------------------------------------------------------** 01891000
.**  Generate the linkage to the list routine                        ** 01891100
.**------------------------------------------------------------------** 01891200
.*                                                                      01891300
.**  Note that in the following instructions the index register is   ** 01891400
.**  used instead of the base register so that ALET translation is   ** 01891500
.**  not performed and the code works the same in both primary and   ** 01891600
.**  AR mode.                                                        ** 01891700
.*                                                                      01891800
         L     15,16(0,0)               Get CVT address            @D1C 01891900
         L     15,140(15,0)             Get ECVT address           @D1C 01892000
         L     15,256(15,0)             Get XRAT address           @D1C 01892100
         L     15,36(15,0)              List mainline routine      @D1C 01892200
         BALR  14,15                    Branch to routine          @D1C 01892300
.*                                                                      01892400
.*                                                                      01892500
.ENDGENLINKAGE ANOP ,                                                   01892600
.*                                                                      01892700
.**------------------------------------------------------------------** 01892800
.**  End of user maclasm code                                        ** 01892900
.**------------------------------------------------------------------** 01893000
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  01893100
.ZLINKX               ANOP  ,                                           01893200
.*******************************************************************    01893300
.***AP.X01  FORMAT GENERATED CODE                                       01893400
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            01893500
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              01893600
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              01893700
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              01893800
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              01893900
                      AIF   (K'&ZLD LE 0).ZL51                          01894000
&ZLC                  SETA  35             COMMENT COLUMN               01894100
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   01894200
&ZLC                  SETA  33             COMMENT COLUMN               01894300
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  01894400
&ZLV                  SETC  '&ZLV'.' '                                  01894500
                      AGO   .ZL31                                       01894600
.*                                                                      01894700
.ZL41                 ANOP  ,                                           01894800
&ZLV                  SETC  '&ZLV'.' '                                  01894900
.ZL51                 ANOP  ,                                           01895000
&ZLV                  SETC  '&ZLV'.'&ZLD'                               01895100
.*                                                                      01895200
&ZLL     &ZLOP &ZLV                                                     01895300
.*                                                                      01895400
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               01895500
                      AGO   .ZL21          CONTINUE LOOPING             01895600
.*                                                                      01895700
.ZLX1                 ANOP  ,                                           01895800
.*******************************************************************    01895900
.***AP.X02  END OF IXLLIST MACRO                                        01896000
&ZIXLLIST             SETC  'YES'          SET IXLLIST USED             01896100
         POP   PRINT                                                    01896200
*                                            IXLLIST-3                  01896300
         SPACE 1                                                        01896400
.ZLX2                 ANOP  ,                                           01896500
         MEND                                                           01896600
**********************************************************************/ 01896700
*/*PB.OC01 INVOKE MACRO---------------------------------------------*/  01896800
*%IXLLIST: MACRO KEYS(REQUEST,TYPE,RESTOKEN,EXTRESTOKEN,ENTRYTYPE,      01896900
*                 ELEMNUM,LISTLIMIT,LISTDESC,LISTKEY,MAXLISTKEY,        01897000
*                 SETCURSOR,MOVETOLIST,MOVETOKEY,MOVETOPOS,DATAOPER,    01897100
*                 LISTTYPE,FIRSTELEM,LASTELEM,ACTION,VECTORINDEX,       01897200
*                 DRIVEEXIT,UNC,STARTINDEX,ENDINDEX,MOSVECTOR,          01897300
*                 CONTOKEN,REQID,BUFLIST,BUFADDRTYPE,PAGEABLE,          01897400
*                 BUFSTGKEY,BUFALET,BUFNUM,BUFINCRNUM,BUFFER,BUFSIZE,   01897500
*                 ADJAREA,LISTNUM,LISTPOS,ENTRYKEY,KEYREQTYPE,          01897600
*                 AUTHCOMP,AUTHCOMPTYPE,NEWAUTH,ENTRYID,ENTRYNAME,      01897700
*                 LOCBYCURSOR,UPDATECURSOR,CURSORUPDTYPE,LISTDIR,       01897800
*                 LISTKEYTYPE,LISTKEYINC,KEYCOMP,VERSCOMP,              01897900
*                 VERSCOMPTYPE,VERSUPDATE,NEWVERS,LOCKINDEX,LOCKOPER,   01898000
*                 LOCKMODE,LOCKDATA,LOCKCOMP,MODE,REQECB,REQDATA,       01898100
*                 REQTOKEN,ANSAREA,ANSLEN,FUNCTION,LOCKVALUE,RETCODE,   01898200
*                 RSNCODE,PLISTVER,MF);                                 01898300
*  ANS('?'||MACLABEL||' '||'IXLLISTP '||MACLIST||                       01898400
*         ' '||MACKEYS||';') COL(MACLMAR);                              01898500
*%END IXLLIST;                                                          01898600
