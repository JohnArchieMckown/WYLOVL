*/**  Start of Specifications for BLSRXMSP ***************************/ 00050000
*/*                                                                  */ 00100000
*/* $MAC(BLSRXMSP) COMP(SC132) PROD(HBB7703): Map service parm list  */ 00150000
*/*                                                                  */ 00200000
*/* Proprietary statement =                                          */ 00210000
*/*                                                                  */ 00220000
*/*   THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                    */ 00240000
*/*   5647-A01 (C) COPYRIGHT IBM CORP. 1986, 2000                    */ 00260000
*/*   LICENSED MATERIALS - PROPERTY OF IBM                           */ 00280000
*/*                                                                  */ 00300000
*/* Status = HBB7703                                                 */ 00315500
*/*                                                                  */ 00331000
*/* External classification: GUPI                                    */ 00346500
*/* End of external classification:                                  */ 00362000
*/*                                                                  */ 00377500
*/* DESCRIPTIVE NAME: IPCS storage map service parameter list        */ 00393000
*/*   ACRONYM:  Not applicable                                       */ 00408500
*/*                                                                  */ 00424000
*/* MACRO NAME: BLSRSMSP                                             */ 00439500
*/* DSECT NAME: Not applicable                                       */ 00455000
*/* COMPONENT:  IPCS (SC132)                                         */ 00470500
*/* EYE-CATCHER: XMSP                                                */ 00486000
*/*     OFFSET:  0                                                   */ 00501500
*/*     LENGTH:  4                                                   */ 00517000
*/*                                                                  */ 00532500
*/* STORAGE ATTRIBUTES:                                              */ 00548000
*/*   SUBPOOL:  Not applicable                                       */ 00563500
*/*   KEY:  8                                                        */ 00579000
*/*   RESIDENCY:  LOC(ANY)                                           */ 00594500
*/*   MAIN STORAGE:  No                                              */ 00610000
*/*   AUXILIARY STORAGE: Yes                                         */ 00625500
*/*   VIRTUAL STORAGE: No                                            */ 00641000
*/*   DATA SPACE: No                                                 */ 00656500
*/*                                                                  */ 00672000
*/* SIZE: 64 bytes                                                   */ 00687500
*/* CREATED BY: User code for use by the IPCS storage map service    */ 00703000
*/* POINTED TO BY: IPCS storage map service parameter list           */ 00718500
*/* SERIALIZATION: None                                              */ 00734000
*/* FUNCTION = This parameter list is used by IPCS exits to request  */ 00750000
*/*            services involving Storage address records.           */ 00800000
*/*                                                                  */ 00850000
*/* METHOD OF ACCESS: See MVS/SP Application Development Reference   */ 00900000
*/*                                                                  */ 01050000
*/*   PLS = The macro can expand in a LIST or SUBLIST format.        */ 01100000
*/*                                                                  */ 01150000
*/*     Set macro variable EHBENDCHAR to comma or semicolon.         */ 01200000
*/*     Defaults to semicolon for LIST form and must be set          */ 01250000
*/*     for the SUBLIST form.  For example:                          */ 01300000
*/*                                                                  */ 01350000
*/*       %DCL EHBENDCHAR EXTERNAL CHAR                              */ 01400000
*/*       %EHBENDCHAR=','                                            */ 01450000
*/*                                                                  */ 01500000
*/*                                                                  */ 01550000
*/*    LIST FORM    = ?BLSRXMSP MF(LIST,PREFIX,STORCLASS)            */ 01600000
*/*                                                                  */ 01650000
*/*    SUBLIST FORM = ?BLSRXMSP MF(SUBLIST,PREFIX,STORCLASS,LEVEL)   */ 01700000
*/*                                                                  */ 01750000
*/*      MF                                                          */ 01800000
*/*     PARM  Meaning                                                */ 01850000
*/*     ----  ---------------------------------------------------    */ 01900000
*/*                                                                  */ 01950000
*/*      1    LIST or L for LIST form                                */ 02000000
*/*           SUBLIST or S for SUBLIST form                          */ 02050000
*/*                                                                  */ 02100000
*/*      2    PREFIX is from 1 to 4 alpha-numeric starting with      */ 02150000
*/*           an alpha character. e.g. 'XMSP'                        */ 02200000
*/*                                                                  */ 02250000
*/*      3    STORAGE CLASS and initialization attribute             */ 02300000
*/*           COMPLETE keyword will cause initial values to          */ 02350000
*/*           be generated.  Default storage class with COMPLETE     */ 02400000
*/*           is STATIC LOCAL.  Can specify BASED, DEFINED ...       */ 02450000
*/*                                                                  */ 02500000
*/*      4    Structure level number to start with.  This can        */ 02550000
*/*           only be specified on the SUBLIST form.                 */ 02600000
*/*                                                                  */ 02650000
*/*   ASM = The assembler format takes the form                      */ 02700000
*/*                                                                  */ 02750000
*/*         LABEL  BLSRXMSP DSECT=YES                                */ 02800000
*/*                               NO                                 */ 02850000
*/*                                                                  */ 02900000
*/*         The LABEL is used as the prefix for all the              */ 02950000
*/*         field names.  The label cannot exceed 4 characters.      */ 03000000
*/*         For example code 'XMSP   BLSRXMSP DSECT=YES'             */ 03050000
*/*                                                                  */ 03100000
*/*         DSECT=YES will cause a DSECT to be generated.            */ 03150000
*/*                   The initial values will be ignored.            */ 03200000
*/*                                                                  */ 03250000
*/*         DSECT=NO  will cause a set of initialized DCs            */ 03300000
*/*                   to be generated.                               */ 03350000
*/*                                                                  */ 03400000
*/* DELETED BY: User code                                            */ 03410000
*/* DEPENDENCIES: None                                               */ 03420000
*/* DISTRIBUTION LIBRARY: AMACLIB                                    */ 03430000
*/*                                                                  */ 03440000
*/* NOTES =                                                          */ 03450000
*/*   DEPENDENCIES = This macro requires external macro variables    */ 03500000
*/*     be declared in one of the two following ways:                */ 03550000
*/*                                                                  */ 03600000
*/*     1. Use the BLSRPROC macro to generate the PROC statement and */ 03650000
*/*        macro declares.                                           */ 03700000
*/*                                                                  */ 03750000
*/*     2. Use the BLSRMAC0 macro to generate only the declares.     */ 03800000
*/*                                                                  */ 03900000
*/* ================================================================ */ 03950000
*/*                                                                  */ 04125000
*/* CHANGE ACTIVITY =                                                */ 04150000
*/*                                                                  */ 04200000
*/*   Products =                                                     */ 04250000
*/* $L0= IPCSENH,HBB3310,86276,PDG7: Storage map service support.    */ 04300000
*/* $L1= IPCSENH,HBB3310,86261,PDG7: Same as L0, copied code         */ 04350000
*/*                                                                  */ 04358300
*/* ---------------------------------------------------------------- */ 04366600
*/*                                                                  */ 04374900
*/*   Hardware=                                                      */ 04383200
*/* $H1= 64BIT,HBB7703,99116,PDE1: 64-bit addressing                 */ 04391600
*/*                                                                  */ 04400000
*/* ---------------------------------------------------------------- */ 04403700
*/*                                                                  */ 04407400
*/*   Design changes= none                                           */ 04411100
*/*                                                                  */ 04414800
*/* ---------------------------------------------------------------- */ 04418500
*/*                                                                  */ 04422200
*/*   PTMs =                                                         */ 04433300
*/* $P1= PC40529,HBB3310,86346,PDG7: Macro needs to be bilingual     */ 04466600
*/* $P2= PC41785,HBB3310,87327,PDE1: Define correct constants for    */ 04477700
*/*      assembly-language function codes                            */ 04488800
*/*    = PQC1503,HBB6603,91290,PDE1: Define correct constants for    */ 04489900
*/*      assembler-language flag bits                                */ 04491000
*/*    = PUX0235,HBB6605,97161,PDE1: Restore definition of XMSPLDEL, */ 04492100
*/*      a bit whose definition was inadvertently removed via        */ 04493200
*/*      PQC1503.                                                    */ 04494300
*/*                                                                  */ 04495400
*/* ---------------------------------------------------------------- */ 04497600
*/*                                                                  */ 04500000
*/*   Maintenance =                                                  */ 04525000
*/* $01= OW28140,HBB6603,97218,PDE1: Rediscovery of PUX0235 in APAR  */ 04562500
*/*                                                                  */ 04600000
*/** End of Specifications for BLSRXMSP ******************************* 04650000
         MACRO                                                          04700000
&P       BLSRXMSP &DSECT=YES                                       @P1A 04750000
         GBLB    &EXMSP           Blurb produced once in assembly  @P1P 04800000
         IEZBITS ,                Define symbolic bits             @P1P 04850000
         AIF   ('&DSECT' EQ 'NO').L010 No DSECT statement          @P1P 04900000
&P       DSECT ,                  IPCS storage map service parameter   *04950000
                                  list                             @P1P 05000000
         AGO   .L020              Define structure of record       @P1P 05050000
.L010    ANOP  ,                  No DSECT statement               @P1P 05100000
         DS    0D                 Align on doubleword boundary     @P1P 05150000
&P       DS    0CL64              IPCS storage map service parameter   *05200000
                                  list                             @P1P 05250000
.L020    ANOP  ,                  Define structure of record       @P1P 05300000
&P.000   DS    0C                 Begin BLSRXMSP               #MD99116 05350000
         AIF   (&EXMSP).L030      One blurb is enough              @P1P 05400000
&EXMSP   SETB  1                  Blurb produced once in assembly  @P1P 05450000
*-----------------------------------------------------------------      05500000
* A storage map service (XMSP) parameter list contains fields pointing  05550000
* to a Storage Address record and a buffer address in which to place    05600000
* data.  The type of service requested is identified in field XMSPCODE. 05650000
*-----------------------------------------------------------------      05700000
.L030    ANOP  ,                  Blurb produced once in assembly  @P1P 05750000
&P.ID    DS    0CL5               Storage map service parameter        *05800000
                                  identifier                       @P1P 05850000
&P.IDC   DC    CL4'XMSP'          XMSP acronym                     @P1P 05900000
&P.IDL   DC    CL1'1'             XMSP level indicator             @P1P 05950000
&P.PFLG  DS    0BL3               Processing flags                 @P1P 06000000
&P.PFL1  DC    BL1'0'             First byte of flags              @P1P 06050000
&P.NOMS  EQU   BIT0               No error or diagnostic messages to   *06100000
                                  be issued                        @P1P 06150000
&P.DCS   EQU   BIT1               Data characteristics have been       *06200000
                                  supplied                         @P1P 06250000
&P.DEFR  EQU   BIT2               Defer Scan routine               @P1C 06300000
*P.LDEL  EQU   BIT3               Used internally by OS/390 MVS         06325000
&P.V64   EQU   BIT4               64-bit API for validity check    @H1A 06337500
         DC    BL2'0'             Reserved                         @P1P 06350000
&P.MODN  DC    CL8'        '      Name of module requesting the        *06400000
                                  service                          @P1P 06450000
&P.SAR   DC    A(0)               Address of Storage Map record being  *06500000
                                  processed                        @P1A 06550000
&P.SAL   DC    A(0)               Address of Storage Map record used   *06560000
                                  in locating the control block being  *06570000
                                  validity checked by the current SCAN *06580000
                                  routine                          @P1A 06590000
&P.BUF   DC    A(0)               Pointer to user buffer to contain    *06600000
                                  accessed storage                 @P1P 06650000
         DC    A(0)               Reserved pointer                 @P1P 06700000
&P.CODE  DC    Y(0)               Function code bytes              @P1P 06750000
&P.ACC   EQU   1,2,C'Y'           Access storage described by Storage  *06800000
                                  Address record                   @P2C 06850000
&P.VAL   EQU   2,2,C'Y'           Validity check storage           @P2C 06900000
&P.DIAG  EQU   3,2,C'Y'           Diagnose block of storage described  *06950000
                                  as being in error                @P2C 07000000
&P.RV2   DC    XL34'00'           Reserved                         @P1P 07050000
&P.999   DS    0C                 End BLSRXMSP                 #MD99116 07100000
         MEND  ,                  End assembler macro BLSRXMSP   @P1P*/ 07150000
*                                                                       07175000
*%BLSRXMSP:                         /* Storage map service parameter    07200000
*                                      list                      @L1P*/ 07250000
*   MACRO KEYS(MF);                 /*                           @L1P*/ 07300000
*                                                                       07325000
*/*------------------------------------------------------------------*/ 07350000
*/* Define Macro-Variables                                           */ 07400000
*/*------------------------------------------------------------------*/ 07450000
*                                                                       07500000
*   DECLARE                         /* External macro variables  @L1P*/ 07550000
*     ELSRXMSP CHARACTER EXTERNAL,  /* BLSRXMSP global data      @L1P*/ 07600000
*     EHBENDCHAR CHARACTER EXTERNAL, /* Final punctuation        @L1P*/ 07650000
*     EHBBLRPENDESS CHARACTER EXTERNAL, /* Deferred macro requests      07700000
*                                                                @L1P*/ 07750000
*     EHBLVL1  CHARACTER EXTERNAL,  /* First level number        @L1P*/ 07800000
*     EHBLVL2  CHARACTER EXTERNAL,  /* Second level number       @L1P*/ 07850000
*     EHBLVL3  CHARACTER EXTERNAL,  /* Third level number        @L1P*/ 07900000
*     EHBLVL4  CHARACTER EXTERNAL,  /* Fourth level number       @L1P*/ 07950000
*     EHBMF1   CHARACTER EXTERNAL,  /* Macro form                @L1P*/ 08000000
*     EHBMF2   CHARACTER EXTERNAL,  /* Prefix characters         @L1P*/ 08050000
*     EHBMF3   CHARACTER EXTERNAL,  /* Scope/storage class       @L1P*/ 08100000
*     EHBMF3A  CHARACTER EXTERNAL,  /* Complete initialization flag     08150000
*                                                                @L1P*/ 08200000
*     BLSRENDDECLARE CHARACTER EXTERNAL, /* Deferred declarations       08250000
*                                                                @L1P*/ 08300000
*     EHBCOL1  FIXED EXTERNAL,      /* First indentation column  @L1P*/ 08350000
*     EHBCOL2  FIXED EXTERNAL,      /* Second indentation column @L1P*/ 08400000
*     EHBCOL3  FIXED EXTERNAL,      /* Third indentation column  @L1P*/ 08450000
*     EHBCOL4  FIXED EXTERNAL,      /* Fourth indentation column @L1P*/ 08500000
*     EHBCSECT CHARACTER EXTERNAL,  /* CSECT name                @L1P*/ 08550000
*     EHBRC    FIXED EXTERNAL;      /* Macro return code         @L1P*/ 08600000
*   DEACTIVATE ELSRXMSP,BLSRENDDECLARE; /* Prevent accidents     @L1P*/ 08650000
*   DECLARE                         /* Internal macro variables      */ 08700000
*     CENDCHAR CHARACTER INTERNAL,  /* Final punctuation         @L1P*/ 08750000
*     CLVL2    CHARACTER INTERNAL,  /* Second level number       @L1P*/ 08800000
*     CLVL3    CHARACTER INTERNAL,  /* Third level number        @L1P*/ 08850000
*     CLVL4    CHARACTER INTERNAL,  /* Fourth level number       @L1P*/ 08900000
*     CMF1     CHARACTER INTERNAL,  /* Macro form                @L1P*/ 08950000
*     CMF2     CHARACTER INTERNAL,  /* Prefix characters         @L1P*/ 09000000
*     CMF3A    CHARACTER INTERNAL,  /* Complete initialization flag     09050000
*                                                                @L1P*/ 09100000
*     CQCOMPLETE CHARACTER INTERNAL, /* Literal                  @L1P*/ 09150000
*     CQINITIAL CHARACTER INTERNAL, /* Literal                   @L1P*/ 09200000
*     FCOL2    FIXED INTERNAL,      /* Second indentation column @L1P*/ 09250000
*     FCOL3    FIXED INTERNAL,      /* Third indentation column  @L1P*/ 09300000
*     FCOL4    FIXED INTERNAL,      /* Fourth indentation column @L1P*/ 09350000
*     FRC      FIXED INTERNAL,      /* Macro return code         @L1P*/ 09400000
*     F1       FIXED INTERNAL;      /* Utility variable          @L1P*/ 09450000
*   DEACTIVATE CENDCHAR,CLVL2,CLVL3,CLVL4,CMF1,CMF2,CMF3A,CQCOMPLETE,   09500000
*       CQINITIAL,FCOL2,FCOL3,FCOL4,FRC,F1; /* Prevent accidents @L1P*/ 09550000
*   CQINITIAL = ' INITIAL(';        /* Literal                   @L1P*/ 09600000
*   CQCOMPLETE = 'COMPLETE';        /* Literal                   @L1P*/ 09650000
*   ANSWER('?'||MACLABEL||'BLRMF('||MF||') FORMS(L,S);'); /*     @L1P*/ 09700000
*   CENDCHAR = EHBENDCHAR;          /* Final punctuation         @L1P*/ 09750000
*   EHBENDCHAR = ',';               /* Final punctuation         @L1P*/ 09800000
*   CLVL2 = EHBLVL2;                /* Second level number       @L1P*/ 09850000
*   CLVL3 = EHBLVL3;                /* Third level number        @L1P*/ 09900000
*   CLVL4 = EHBLVL4;                /* Fourth level number       @L1P*/ 09950000
*   CMF1 = EHBMF1;                  /* Macro form                @L1P*/ 10000000
*   CMF2 = EHBMF2;                  /* Prefix characters         @L1P*/ 10050000
*   CMF3A = EHBMF3A;                /* Complete initialization flag     10100000
*                                                                @L1P*/ 10150000
*   FCOL2 = EHBCOL2;                /* Second indentation column @L1P*/ 10200000
*   FCOL3 = EHBCOL3;                /* Third indentation column  @L1P*/ 10250000
*   FCOL4 = EHBCOL4;                /* Fourth indentation column @L1P*/ 10300000
*   FRC = EHBRC;                    /* Macro return code         @L1P*/ 10350000
*   BLSRENDDECLARE = BLSRENDDECLARE || CMF2 ||                          10400000
*       'XMSP CHAR(5) CONSTANT(''XMSP1''),' ||                          10450000
*       '/*XMSP identifier constant used to fill in XMSPID.*/' || CMF2  10500000
*       || 'ACC CONSTANT(1),' ||                                        10550000
*       '/*Access storage described by symbol record*/' || CMF2 ||      10600000
*       'VAL CONSTANT(2),' || '/*Validity check storage*/' || CMF2 ||   10650000
*       'DIAG CONSTANT(3),' ||                                          10700000
*       '/*Diagnose block of storage described as being in error*/';    10750000
*   IF CMF1 = 'LIST' THEN           /* List form                 @L1P*/ 10800000
*     ANSWER('DECLARE/*BLSRXMSP #MD99116*/') COLUMN(5); /*       @H1C*/ 10850000
*   ANSWER(EHBLVL1||CMF2||' BOUNDARY(WORD)'||EHBMF3||',/*BLSRXMSP'||    10900000
*       MACLIST||' '||MACKEYS||'*/') COLUMN(EHBCOL1);                   10950000
*   IF CMF1 = 'LIST' THEN           /* List form                 @L1P*/ 11000000
*     IF INDEX(ELSRXMSP,',BLURB') = 0 THEN /* Produce blurb      @L1P*/ 11050000
*       DO;                         /* Multiple answers for comment  */ 11100000
*         ANSWER('/*'||REPEAT('-',65)||                                 11150000
*'*/ /* A Storage map service (XMSP) parameter list contains'||' fields 11200000
*     */ /* pointing to an Storage Address record and a buffer in which 11250000
*to   */ /* place data.  The type of service requested is identified in 11300000
*     */ /* field XMSPCODE.                                             11350000
*     */ /*'||REPEAT('-',65)||'*/') COLUMN(2); /*                @L1P*/ 11400000
*         ELSRXMSP = ELSRXMSP || ',BLURB'; /* Blurb produced         */ 11500000
*       END;                        /* Multiple answers for comment  */ 11550000
*   ANSWER(CLVL2||CMF2||'ID CHAR(5)') COLUMN(FCOL2); /*          @L1P*/ 11600000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 11650000
*     ANSWER(CQINITIAL||'''XMSP1'')');                                  11700000
*   ANSWER(',/*Symbol service parameter list identifier*/');            11750000
*   ANSWER(CLVL3||CMF2||'IDC CHARACTER(4),/*XMSP acronym*/') COLUMN(    11800000
*       FCOL3);                                                         11850000
*   ANSWER(CLVL3||CMF2||'IDL CHARACTER(1),/*XMSP level indicator*/')    11900000
*       COLUMN(FCOL3);                                                  11950000
*   ANSWER(CLVL2||CMF2||'PFLG BIT(24),/*Processing flags*/') COLUMN(    12000000
*       FCOL3);                     /*                           @L1P*/ 12050000
*   ANSWER(CLVL3||CMF2||'FL1 BIT(8)') COLUMN(FCOL3);                    12100000
*   IF CMF3A = CQCOMPLETE THEN      /* Initialization required?  @L1P*/ 12150000
*     ANSWER(CQINITIAL||'''00''X)'); /*                          @L1P*/ 12200000
*   ANSWER(',/*First flag byte*/'); /*                           @L1P*/ 12250000
*   ANSWER(CLVL4||CMF2||                                                12300000
*       'NOMS BIT(1),/*No error or diagnostic message to be issued*/')  12350000
*       COLUMN(FCOL4);              /*                           @L1P*/ 12400000
*   ANSWER(CLVL4||CMF2||                                                12450000
*       'DCS BIT(1),/*Data characteristics have been supplied*/')       12500000
*       COLUMN(FCOL4);              /*                           @L1P*/ 12550000
*   ANSWER(CLVL4||CMF2||'DEFR BIT(1),/*Defer Scan routine*/') COLUMN(   12600000
*       FCOL4);                     /*                               */ 12650000
*   ANSWER(CLVL4||CMF2||'LDEL BIT(1),/*Delete loop detection storage*/' 12687500
*       ) COLUMN(FCOL4);            /*                           @01P*/ 12725000
*   ANSWER(CLVL4||CMF2||'V64 BIT(1),/*64-bit API for validity check*/') 12743700
*       COLUMN(FCOL4);              /*                           @H1A*/ 12762400
*   ANSWER(CLVL4||'* BIT(3),/*Reserved*/') COLUMN(FCOL4); /*     @H1C*/ 12781100
*   ANSWER(CLVL3||'* BIT(16)') COLUMN(FCOL3);                           12800000
*   IF CMF3A = CQCOMPLETE THEN      /* Initialization required?  @L1P*/ 12850000
*     ANSWER(CQINITIAL||'''00''X)'); /*                          @L1P*/ 12900000
*   ANSWER(',/*Reserved*/');        /*                           @L1P*/ 12950000
*   ANSWER(CLVL2||CMF2||'MODN CHAR(8)') COLUMN(FCOL2); /*        @L1P*/ 13000000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 13050000
*     IF LENGTH(EHBCSECT) >= 8 THEN /* CSECT name defined by BLRPROC    13100000
*                                                                @L1P*/ 13150000
*       ANSWER(CQINITIAL||QUOTE(EHBCSECT(1:8))||')'); /*         @L1P*/ 13200000
*     ELSE                          /* No token specified        @L1P*/ 13250000
*       ANSWER(CQINITIAL||'''        '')'); /* Default is blanks @L1P*/ 13300000
*   ANSWER(',/*Name of module requesting the service*/'); /*     @L1P*/ 13350000
*   ANSWER(CLVL2||CMF2||'SAR POINTER(32)') COLUMN(FCOL2);               13400000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 13450000
*     ANSWER(CQINITIAL||'ZZZZNULL)'); /*                         @L1P*/ 13500000
*   ANSWER(',/*Address of Storage Map record being processed*/');       13550000
*   ANSWER(CLVL2||CMF2||'SAL POINTER(32)') COLUMN(FCOL2);               13558300
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 13566600
*     ANSWER(CQINITIAL||'ZZZZNULL)'); /*                         @L1P*/ 13574900
*   ANSWER(',/*Address of Storage Map record being used in locating the 13583200
*control block being validity checked by the current Scan routine*/');  13591500
*   ANSWER(CLVL2||CMF2||'BUF POINTER(32)') COLUMN(FCOL2);               13600000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 13650000
*     ANSWER(CQINITIAL||'ZZZZNULL)'); /*                         @L1P*/ 13700000
*   ANSWER(',/*Pointer to user buffer to contain accessed storage*/');  13750000
*   ANSWER(CLVL2||CMF2||'LDTP POINTER(32)') COLUMN(FCOL2);              13800000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 13850000
*     ANSWER(CQINITIAL||'ZZZZNULL)'); /*                         @L1P*/ 13900000
*   ANSWER(',/*->Loop detection storage*/');                            13950000
*   ANSWER(CLVL2||CMF2||'CODE UNSIGNED BINARY(16)') COLUMN(FCOL3); /*   14000000
*                                                                @L1P*/ 14050000
*   IF CMF3A = CQCOMPLETE THEN      /* Initialization required?  @L1P*/ 14100000
*     ANSWER(CQINITIAL||'''00''X)'); /*                          @L1P*/ 14150000
*   ANSWER(',/*Function code bytes*/');                                 14200000
*   ANSWER(CLVL2||'* BIT(272)') COLUMN(FCOL2); /*                @L1P*/ 14250000
*   IF CMF3A = CQCOMPLETE THEN      /*                           @L1P*/ 14300000
*     ANSWER(CQINITIAL||'''00''X)'); /*                          @L1P*/ 14350000
*   ANSWER(',/*Reserved*/');        /*                           @L1P*/ 14400000
*   ANSWER(CLVL2||CMF2||'999 CHARACTER(0)'||CENDCHAR||                  14450000
*       '/*BLSRXMSP #MD99116*/') COLUMN(FCOL2); /*               @H1C*/ 14500000
*   IF CENDCHAR = ';' THEN          /*                           @L1P*/ 14550000
*     ANSWER('?BLSR002;');          /* Process deferred declarations    14600000
*                                                                @L1P*/ 14650000
*   ANSWER('?BLR003(BLSRXMSP,'||CHAR(EHBRC)||');'); /*           @L1P*/ 14700000
*   RETURN CODE(FRC);               /*                           @L1P*/ 14750000
*   %END BLSRXMSP;                                                      14800000
