*%GETDSAB: MACRO KEYS(FIRST,NEXT,DDNAME,DCBPTR,DSABPTR,TCBPTR,RETCODE,  00001000
*                 RSNCODE,MF);                                          00002000
*/**** START OF SPECIFICATIONS **************************************** 00003000
*                                                                     * 00004000
*                                                                     * 00004500
*01* MACRO NAME:  GETDSAB                               -10/21/92-<0> * 00005000
*                                                                     * 00005200
*                                                                     * 00005400
*01* DESCRIPTIVE NAME:  DSAB scan service interface                   * 00005600
*                                                                     * 00006000
*01* PROPRIETARY STATEMENT:                                           * 00008000
*                                                                     * 00010000
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00014000
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00014200
*     5655-068 (C) COPYRIGHT IBM CORP. 1993                           * 00014400
*     SEE COPYRIGHT INSTRUCTIONS                                      * 00014600
*                                                                     * 00015000
* STATUS= HBB5510                                                     * 00015500
*                                                                     * 00016000
*                                                                     * 00016600
*                                                                     * 00017000
*01* FUNCTION:                                                        * 00018000
*                                                                     * 00019000
*      DSAB Scan Interface Macro                                      * 00020000
*                                                                     * 00021000
*      OPERATION:  This macro accomplishes its function in the        * 00022000
*      following manner:                                              * 00023000
*                                                                     * 00024000
*                                                                     * 00024700
*      1.  Checks to ensure that all required keywords were           * 00025400
*          specified.                                                 * 00026100
*                                                                     * 00026800
*      2.  Checks to ensure that all keywords provide appropriate     * 00027500
*          values.                                                    * 00028200
*                                                                     * 00028900
*      3.  Builds parameter list for DSAB scan service using          * 00029600
*          specified values.                                          * 00030300
*                                                                     * 00031000
*      4.  Checks for existence of DSAB scan service module.  If the  * 00031700
*          module was not provided by this environment, the           * 00032400
*          appropriate return code is set.                            * 00033100
*                                                                     * 00034000
*          If the DSAB scan service module is contained in this       * 00034800
*          system environment, the service is invoked.                * 00035600
*                                                                     * 00036400
*      5.  Processes any return codes and reason codes for return to  * 00037200
*          the invoker of this macro.                                 * 00038000
*                                                                     * 00039000
*                                                                     * 00040000
*                                                                     * 00055000
*      NOTES:                                                         * 00055100
*                                                                     * 00055200
*      The DSAB scan routine is given control from the GETDSAB macro. * 00055300
*      This macro will complete the parameter list with caller        * 00055400
*      provided data and generate a call to the DSAB scan service.    * 00055500
*      The GETDSAB macro is provided in list, execute and standard    * 00055600
*      form.  The list format can only be used to reserve storage for * 00055700
*      the parameter list.  No variable initialization can be         * 00055800
*      accomplished with the list format.  The standard and execute   * 00055900
*      format build the complete parameter list storage area          * 00056000
*      contained prior to macro invocation.  Because the standard and * 00056100
*      execute forms build a complete parameter list, setting         * 00056200
*      variables in the parameter list before the macro is invoked is * 00056300
*      of no value.  There is no need to initialize the parameter     * 00056400
*      list except as is done by the macro.  Thus no external mapping * 00056500
*      macro is provided for the parameter list.                      * 00056600
*                                                                     * 00056700
*01* ENVIRONMENT:                                                     * 00056800
*                                                                     * 00057000
*                                                                     * 00058000
*      Dispatchable unit mode: Task mode.                             * 00059000
*                                                                     * 00060000
*      Minimum authorization: Problem or Supervisor state.  Any PSW   * 00060600
*                        key.                                         * 00061200
*                                                                     * 00062000
*      AMODE:            31-bit.                                      * 00063000
*                                                                     * 00064000
*      Serialization:    The user must provide or inherit the         * 00065000
*                        appropriate serialization on the SYSZTIOT    * 00066000
*                        resource to maintain a stable DSAB/TIOT      * 00067000
*                        environment during the execution of the      * 00068000
*                        GETDSAB Service.  See "Requesting SVC 99     * 00069000
*                        Functions" in the MVS/ESA SPL:Application    * 00070000
*                        Development Guide for further discussion.    * 00071000
*                                                                     * 00072000
*      Restrictions:     The DSAB mapping macro (IHADSAB), CVT        * 00073000
*                        mapping macro (CVT) and JESCT mapping macro  * 00074000
*                        (IEFJESCT) must be included in the program   * 00075000
*                        invoking this service.                       * 00076000
*                                                                     * 00077000
*                        This macro can not be used by PLS modules.   * 00078000
*                                                                     * 00079000
*                        The user must provide a recovery environment * 00080000
*                        if one is necessary during the invocation of * 00081000
*                        the GETDSAB Service, as the service does not * 00082000
*                        have a recovery environment of its own.  The * 00083000
*                        service runs under the user's task, so any   * 00084000
*                        recovery environment defined to the user     * 00085000
*                        prior to the invocation of the GETDSAB       * 00086000
*                        Service will be used.                        * 00087000
*                                                                     * 00088000
*                                                                     * 00089000
*                                                                     * 00089600
*01* SYNTAX:                                                          * 00090200
*                                                                     * 00091000
*[xlabel]  GETDSAB    FIRST                                          * 00092000
*                    ,NEXT                                           * 00093000
*                    ,DDNAME=xddname                                 * 00094000
*                    ,DCBPTR=xdcbptr                                 * 00095000
*                     ,DSABPTR=xdsabptr                               * 00096000
*                    [,TCBPTR=xtcbptr|0]                            * 00097000
*                    [,RETCODE=xretcode]                              * 00098000
*                    [,RSNCODE=xrsncode]                              * 00099000
*                   [,MF=S]                                          * 00100000
*                   [,MF=(L,xmfctrl,xmfattr|0D)]                   * 00101000
*                   [,MF=(E,xmfctrl,COMPLETE)]                     * 00102000
*                                                                     * 00103000
*                                                                     * 00104000
*      Where:                                                         * 00105000
*                                                                     * 00106000
*                                                                     * 00107000
*      [xlabel]                                                       * 00107800
*          is an optional symbol, starting in column 1, that is the   * 00108600
*          name on the GETDSAB macro invocation.  The name must       * 00109400
*          conform to the rules for an ordinary assembler language    * 00110200
*          symbol.                                                    * 00111000
*          DEFAULT: No name.                                          * 00111800
*                                                                     * 00113000
*                                                                     * 00114000
*                                                                     * 00115000
*                                                                     * 00115500
*      The following is a set of mutually exclusive keys.  This set   * 00116000
*      is required; only one key must be specified.                   * 00117000
*                                                                     * 00118000
*                                                                     * 00119000
*      FIRST                                                          * 00120000
*          is part of a group of mutually exclusive keys of which     * 00121000
*          only one is required, and indicates that the pointer to    * 00122000
*          the first DSAB on the DSAB chain is desired.  The DSAB     * 00123000
*          chain selected is that associated with the current TCB     * 00124000
*          unless overridden by the TCBPTR parameter.                 * 00125000
*                                                                     * 00126000
*      NEXT                                                           * 00127000
*          is part of a group of mutually exclusive keys of which     * 00128000
*          only one is required, and indicates that the pointer to    * 00129000
*          the next DSAB on the DSAB chain after the one pointed to   * 00130000
*          by the value of DSABPTR is desired.                        * 00131000
*                                                                     * 00132000
*      DDNAME(xddname)                                                * 00133000
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00134000
*          only) of a 8 character input belonging to a group of       * 00135000
*          mutually exclusive keys of which only one is required, and * 00136000
*          consists of an 8-character input string, left-justified,   * 00137000
*          with trailing blanks.  A DDNAME of all blanks is invalid.  * 00138000
*          The address of the DSAB corresponding to this DDNAME will  * 00139000
*          be put into the location specified by the DSABPTR          * 00140000
*          parameter.  The DSAB/TIOT chain selected is that           * 00141000
*          associated with the current TCB, unless overridden by the  * 00142000
*          TCBPTR parameter.                                          * 00143000
*                                                                     * 00144000
*      DCBPTR(xdcbptr)                                                * 00145000
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00146000
*          only) of a pointer input that contains the address         * 00147000
*          belonging to a group of mutually exclusive keys of which   * 00148000
*          only one is required, and specifies the address of a       * 00149000
*          fullword field that points to the DCB associated with a DD * 00150000
*          name.  If this DCB is OPEN, the DSAB pointer will be       * 00151000
*          retrieved from the DEB extension associated with it.  If   * 00152000
*          this DCB is not OPEN, the DD name is taken from the        * 00153000
*          DCBDDNAM field in the DCB and the DSAB address             * 00153900
*          corresponding to this DD name is retrieved.  When DCBPTR   * 00154800
*          defines a DCB associated with an OPEN DD, DCBPTR is        * 00155700
*          mutually exclusive with TCBPTR (failure to comply with     * 00156600
*          this results in a return code of 12 and reason code of     * 00157500
*          1210).  When DCBPTR defines a DCB associated with a CLOSED * 00158400
*          DD, the DSAB chain selected is determined by the desired   * 00159300
*          TCB, which is either the current TCB (if TCBPTR is zero)   * 00160200
*          or the TCB pointed to by TCBPTR.                           * 00161100
*                                                                     * 00162000
*                                                                     * 00163000
*                                                                     * 00164000
*      End of a set of mutually exclusive required keys.              * 00165000
*                                                                     * 00166000
*                                                                     * 00167000
*                                                                     * 00168000
*      DSABPTR(xdsabptr)                                              * 00169000
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00170000
*          only) of a required pointer input/output that contains the * 00171000
*          address of the desired DSAB.  DSABPTR specifies the name   * 00172000
*          of a fullword field that will be set to the address of a   * 00173000
*          DSAB.  Upon input, DSABPTR points to the current DSAB.     * 00174000
*          When used with the NEXT keyword, the DSAB on the chain     * 00175000
*          following the one specified by DSABPTR will be returned.   * 00176000
*          Upon output, DSABPTR will contain the address of the       * 00177000
*          requested DSAB if the return code is zero.  If the return  * 00178000
*          code is non-zero (signifying that an error has occurred),  * 00179000
*          DSABPTR will contain a value of 0.                         * 00180000
*                                                                     * 00181000
*                                                                     * 00182000
*                                                                     * 00183000
*                                                                     * 00183500
*      [TCBPTR(xtcbptr|0)]                                          * 00184000
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00185000
*          only) of an optional pointer input that contains the       * 00186000
*          address of the TCB associated with the task for which      * 00187000
*          DSAB/TIOT information is desired.  When DCBPTR defines a   * 00188000
*          DCB associated with an OPEN DD, DCBPTR is mutually         * 00189000
*          exclusive with TCBPTR.                                     * 00190000
*          DEFAULT: 0 If not specified, the current TCB is used.      * 00191000
*                                                                     * 00192000
*                                                                     * 00193000
*                                                                     * 00194000
*                                                                     * 00194500
*      [RETCODE(xretcode)]                                            * 00195000
*          is the name (RS-type) of an optional fullword output       * 00195800
*          variable (or register (2)-(12) ASM only) into which the    * 00196600
*          return code is to be copied from GPR 15.                   * 00197400
*                                                                     * 00198200
*                                                                     * 00199000
*                                                                     * 00200000
*                                                                     * 00201000
*      [RSNCODE(xrsncode)]                                            * 00202000
*          is the name (RS-type) of an optional fullword output       * 00202800
*          variable (or register (2)-(12) ASM only) into which the    * 00203600
*          reason code is to be copied from GPR 0.                    * 00204400
*                                                                     * 00205200
*                                                                     * 00206000
*                                                                     * 00207000
*                                                                     * 00208000
*      [MF(S|L|E)]                                                  * 00209000
*          is an optional keyword input which specifies the macro     * 00210000
*          form.                                                      * 00211000
*          DEFAULT: S                                                 * 00212000
*                                                                     * 00213000
*                                                                     * 00214000
*          [MF(S)]                                                    * 00215000
*              specifies the standard form of the macro.  The "S"     * 00216000
*              form generates code to put the parameters into the     * 00217000
*              parameter list and invoke the desired service.  Full   * 00218000
*              checking for required macro keys is done along with    * 00219000
*              supplying defaults for omitted optional parameters.    * 00220000
*              The ?EPILOG macro must be invoked at the end of the    * 00221000
*              module.                                                * 00222000
*                                                                     * 00223000
*              For assembly language code modules, the "S" form       * 00224000
*              generates code to put the parameters into an in-line   * 00225000
*              parameter list and invoke the desired service.  Full   * 00226000
*              checking for required macro keys is done along with    * 00227000
*              supplying defaults for omitted optional parameters.    * 00228500
*                                                                     * 00230000
*          [MF(L,xmfctrl,xmfattr|BDY(DWORD))]                       * 00231000
*              specifies the list form of the macro.  The "L" form    * 00232000
*              defines an area to be used for the parameter list.     * 00233000
*              Any other macro parameters are flagged as errors.      * 00234000
*                                                                     * 00235000
*            ,xmfctrl                                                 * 00236000
*              is a required input.  It is the name of a storage area * 00237000
*              for the parameter list.                                * 00238000
*                                                                     * 00239000
*            ,xmfattr|BDY(DWORD)                                    * 00240000
*              is an optional 60 character input string that varies   * 00240600
*              from 1 to 60 characters. It can contain any value that * 00241200
*              is valid on an assembler DS pseudo-op                  * 00241800
*              (assembler-only). You can use this parameter to force  * 00242400
*              boundary alignment of the parameter list.              * 00243000
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/AS, which * 00244000
*              forces the parameter list to a doubleword boundary.    * 00245500
*                                                                     * 00247000
*          [MF(E,xmfctrl,COMPLETE)]                                 * 00248000
*              specifies the execute form of the macro.  The "E" form * 00249000
*              generates code to put the parameters into the          * 00250000
*              parameter list specified by xmfctrl and provides full  * 00251000
*              syntax checking with default setting.                  * 00252000
*                                                                     * 00253000
*            ,xmfctrl                                                 * 00254000
*              is a required input.  It is the name (RS-type) (or     * 00255000
*              address in register (1)-(12) ASM only) of a storage    * 00256000
*              area for the parameter list.                           * 00257000
*                                                                     * 00258000
*            ,COMPLETE                                              * 00259000
*              is an optional keyword input which specifies the       * 00260000
*              degree of macro parameter syntax checking.             * 00261000
*              DEFAULT: COMPLETE                                      * 00262000
*                                                                     * 00263000
*                                                                     * 00264000
*              COMPLETE   Checking for required macro keys is done    * 00265000
*                        and defaults are supplied for omitted        * 00265500
*                        optional parameters.                         * 00266000
*                                                                     * 00266500
*                                                                     * 00267000
*                                                                     * 00267500
*                                                                     * 00268000
*                                                                     * 00269000
*                                                                     * 00270000
*                                                                     * 00271000
*01* RETURN CODES:                                                    * 00272000
*                                                                     * 00273000
*                                                                     * 00274000
*            0    Successful completion.                              * 00275000
*                                                                     * 00276000
*            4    Request failed.  DSABPTR points to the last DSAB on * 00277000
*                 the chain for a NEXT request.                       * 00278000
*                                                                     * 00279000
*            8    Request failed.  The requested DSAB was not found.  * 00280000
*                                                                     * 00281000
*            12   Request failed.  Input values are in error or in    * 00282000
*                 conflict (see Reason Code section for more          * 00283000
*                 details).                                           * 00284000
*                                                                     * 00285000
*            16   Request failed.  This function is not currently     * 00286000
*                 installed on the system.                            * 00287000
*                                                                     * 00288000
*                                                                     * 00289000
*                                                                     * 00289500
*01* REASON CODES:                                                    * 00290000
*                                                                     * 00291000
*       REASON    RETURN                                              * 00292000
*       CODE      CODE      DESCRIPTION                               * 00293000
*                                          * 00294000
*                                                                     * 00295000
*                                                                     * 00296000
*           1200  12        Request  failed  due to input error.  The * 00297000
*                           DDNAME  specified  or  obtained  was  all * 00298000
*                           blanks.                                   * 00299000
*                                                                     * 00300000
*           1210  12        Request   failed   due  to  input  error. * 00301000
*                           TCBPTR specified when DCBPTR points to an * 00302000
*                           OPEN DCB.                                 * 00303000
*                                                                     * 00304000
*           1220  12        Request  failed due to input error.  DSAB * 00305000
*                           pointed to by DSABPTR is invalid.         * 00306000
*                                                                     * 00307000
*                                                                     * 00308000
*                                                                     * 00308500
*01* MODULE TYPE:  ASSEM-PL/AS MACRO                                  * 00309000
*                                                                     * 00310000
*02*   PROCESSOR:  ASSEM-PL/AS                                        * 00311000
*                                                                     * 00312000
*01* COMPONENT:  SC1B4                                                * 00313000
*                                                                     * 00314000
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00315000
*                                                                     * 00316000
*01* MACRO USAGE NOTES:                                               * 00317000
*                                                                     * 00318000
*                                                                     * 00319000
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00320000
*        global macro variable.  Any value other than 'NO' will       * 00321000
*        result in the macro expansion being printed.  The default is * 00322000
*        'YES'.  The following examples illustrate how the ZPRINT     * 00323000
*        variable should be set.                                      * 00324000
*                                                                     * 00325000
*                    GBLC &ZPRINT                                     * 00325500
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00326000
*                                                                     * 00327000
*                                                                     * 00328000
*                                                                     * 00328500
*01* CHANGE ACTIVITY:                                                 * 00329000
*                                                                     * 00330000
*   Flag LineItem  FMID    Date   ID    Comment                       * 00331000
*                                                                     * 00332000
*                                                                     * 00333000
*    $T0=OY26839  HBB3310 890831 PDE1:  DD Limit SPE                  * 00334000
*                                                                     * 00335000
*    $T1=OY37405  HBB3310 901116 PDEV:  Remove IEFZB4IC dependency by * 00335100
*                                         hardcoding the DACAVER and  * 00335200
*                                         DACAB4CC offsets in         * 00335300
*                                         GETDSAB, since IEFZB4IC is  * 00335400
*                                         not an externally available * 00335500
*                                         macro.                      * 00335600
*                                                                     * 00335700
*    $01=OY39601  HBB3310 910118 PDEV:  Only add register 0 to EPILOG * 00335800
*                                         register macro variable     * 00335900
*                                         EHAREGS if register 0 has   * 00336000
*                                         not yet been added to       * 00336100
*                                         EHAREGS.  If a register is  * 00336200
*                                         requested more than once,   * 00336300
*                                         EPILOG processing can not   * 00336400
*                                         declare the registers       * 00336500
*                                         properly, resulting in      * 00336600
*                                         compiler errors.            * 00336700
*                                                                     * 00336800
*    $02=OY43058  HBB3310 910603 PDEV:  Correctly determine the       * 00336900
*                                         offsets of the CVTJESCT and * 00337000
*                                         the JESDACA fields.  The    * 00337100
*                                         code did not set up base    * 00337200
*                                         addresses for the CVT and   * 00337300
*                                         JESCT, so that the offsets  * 00337400
*                                         of the two fields could not * 00337500
*                                         be determined.              * 00337600
*                                                                     * 00337700
*    $03=OY48968  HBB3310 920318 PDN1:  Correctly determine DSABPTR   * 00337800
*                                         parameter data for          * 00337900
*                                         assembler version when      * 00338000
*                                         register specification is   * 00338100
*                                         used.  Add missing macro    * 00338200
*                                         label DSABREG2.             * 00338300
*                                                                     * 00338400
*    $04=OY57285  HBB4420 921021 PDG5:  Reship GETDSAB to correct     * 00338500
*                                         macro build problem at last * 00338600
*                                         transmit, which resulted in * 00338700
*                                         TCBPTR=RX-type-address      * 00338800
*                                         keyword specification to be * 00338900
*                                         generated incorrectly. Make * 00339000
*                                         cosmetic changes to the     * 00339100
*                                         macro description.          * 00339200
*                                                                     * 00339300
****** END OF SPECIFICATIONS *****************************************/ 00339400
*/********************************************************************* 00339500
         MACRO                                                          00339600
&XLABEL  GETDSAB &DDNAME=,&DCBPTR=,&DSABPTR=,&TCBPTR=,&RETCODE=,       *00340000
               &RSNCODE=,&MF=                                           00341000
.*                                                                      00342000
*              MACDATE -10/21/92-<0>                                    00343000
.*                                                                      00344000
.*******************************************************************    00345000
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00346000
.*******************************************************************    00347000
              GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                   00348000
              GBLC  &ZTEST      YES=TEST NO=NO TEST                     00349000
              GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX             00350000
.*                                                                      00351000
              GBLC  &ZGETDSAB   YES=MACRO USED AT LEAST ONCE            00352000
.*******************************************************************    00353000
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00354000
.*******************************************************************    00355000
              LCLC  &ZMS        ERROR MESSAGE WORK AREA                 00356000
              LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS            00357000
              LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED              00358000
              LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR             00359000
              LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE             00360000
              LCLA  &ZAWRK      USED AS A WORK AREA                     00361000
              LCLA  &ZASIZ      USED FOR SIZE OF VALUE                  00362000
              LCLA  &ZN         NUMERIC WORK VARIABLE                   00363000
              LCLC  &ZC         CHARACTER WORK VARIABLE                 00364000
              LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE             00364300
              LCLA  &ZTLA       VALUE TOO LONG VARIABLE                 00364600
              LCLA  &ZMACRET    MACRO RETURN CODE                       00365000
&ZMACRET      SETA  0           ASSUME NO ERRORS                        00366000
.*                                                                      00367000
              LCLC  &ZCSYSLIST(255)             NONXKEY, POS ARRAY      00368000
              LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()              00369000
              LCLA  &ZPLLEN     PARAMETER LIST LENGTH                   00370000
.********************************************************************   00371000
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00372000
.********************************************************************   00373000
              GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL                 00374000
              GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE          00375000
.*                                                                      00376000
              AIF   (K'&SYSASCE GT 0).ZSYS4     SYS STATE DEFINED       00377000
              AIF   (K'&SYSSPLV GT 0).ZSYS2     SP LEVEL DEFINED        00378000
              SPLEVEL  TEST                                             00379000
.ZSYS2        ANOP  ,                                                   00380000
              AIF   ('&SYSSPLV' EQ '1').ZSYS3   PRE SP 3.1              00381000
              AIF   ('&SYSSPLV' EQ '2').ZSYS3   PRE SP 3.1              00382000
              SYSSTATE TEST                                             00383000
              AGO   .ZSYS4                                              00384000
.ZSYS3        ANOP  ,                                                   00385000
&SYSASCE      SETC  'P'         ASSUME SYSSTATE PRIMARY                 00386000
.ZSYS4        ANOP  ,                                                   00387000
.*******************************************************************    00388000
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00389000
.*******************************************************************    00390000
              LCLC  &XPRIMIN    ++ NAME                                 00391000
              LCLC  &XFIRST     ++ NAME                                 00392000
              LCLC  &XNEXT      ++ NAME                                 00393000
              LCLC  &XDDNAME    ++ NAME                                 00394000
              LCLC  &XDCBPTR    ++ NAME                                 00395000
              LCLC  &XDSABPTR   ++ NAME                                 00396000
              LCLC  &XTCBPTR    ++ NAME                                 00397000
              LCLC  &XRETCODE   ++ NAME                                 00398000
              LCLC  &XRSNCODE   ++ NAME                                 00399000
              LCLC  &XMF        ++ VALUE                                00400000
              LCLC  &XMFCTRL    ++ NAME                                 00401000
              LCLC  &XMFATTR    ++ VALUE                                00402000
              LCLC  &XMFSCK     ++ VALUE                                00403000
.*******************************************************************    00404000
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00405000
.*******************************************************************    00406000
              LCLC  &ZXPRIMIN   ++ INPUT NAME                           00407000
              LCLC  &ZXFIRST    ++ INPUT NAME                           00408000
              LCLC  &ZXNEXT     ++ INPUT NAME                           00409000
              LCLC  &ZXDDNAME   ++ INPUT NAME                           00410000
              LCLC  &ZXDCBPTR   ++ INPUT NAME                           00411000
              LCLC  &ZXDSABPTR  ++ INOUT NAME                           00412000
              LCLC  &ZXTCBPTR   ++ INPUT NAME                           00413000
              LCLC  &ZXRETCODE  ++ OUTPUT NAME                          00414000
              LCLC  &ZXRSNCODE  ++ OUTPUT NAME                          00415000
              LCLC  &ZXMF       ++ INPUT VALUE                          00416000
              LCLC  &ZXMFCTRL   ++ INPUT NAME                           00417000
              LCLC  &ZXMFATTR   ++ INPUT VALUE                          00418000
              LCLC  &ZXMFSCK    ++ INPUT VALUE                          00419000
.********************************************************************   00420000
.***AG.MF01 PROCESS MF MACRO FORMS                                      00421000
.********************************************************************   00422000
              ACTR  10000                                               00423000
.*------------------------------------------------------------------    00424000
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00425000
&XMF          SETC  ''          INITIALIZE XVARIABLE                    00426000
.*-------------------------------------------------------------------   00427000
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00428000
.ZG21         ANOP  ,                                                   00429000
&ZTLC         SETC 'S'                                                  00429600
              AIF   ('&MF(1)' NE '&ZTLC').ZG22                          00430200
&XMF          SETC  'S'         SET KEYWORD                             00431000
              AIF   (N'&MF LE 1).ZG21A          CK NUM                  00432000
&ZMS          SETC  '"MF='      *KPOSA* MNOTE                           00433000
&ZMS          SETC  '&ZMS.&MF"'                                         00434000
&ZMS          SETC  '&ZMS "MF"'                                         00435000
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00436000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00437000
.ZG21A        ANOP  ,                                                   00438000
.*-------------------------------------------------------------------   00439000
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00440000
.ZG22         ANOP  ,                                                   00441000
&ZTLC         SETC 'L'                                                  00441600
              AIF   ('&MF(1)' NE '&ZTLC').ZG29                          00442200
&XMF          SETC  'L'         SET KEYWORD                             00443000
              AIF   (N'&MF LE 3).ZG22A          CK NUM                  00444000
&ZMS          SETC  '"MF='      *KPOSA* MNOTE                           00445000
&ZMS          SETC  '&ZMS.&MF"'                                         00446000
&ZMS          SETC  '&ZMS "MF"'                                         00447000
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                00448000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00449000
.ZG22A        ANOP  ,                                                   00450000
.*-------------------------------------------------------------------   00451000
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00452000
              AIF   (N'&SYSLIST NE 0).ZG22B     POSITIONALS?            00453000
              AIF   ('&DDNAME' NE '').ZG22B     KEYS?                   00454000
              AIF   ('&DCBPTR' NE '').ZG22B     KEYS?                   00455000
              AIF   ('&DSABPTR' NE '').ZG22B    KEYS?                   00456000
              AIF   ('&TCBPTR' NE '').ZG22B     KEYS?                   00457000
              AIF   ('&RETCODE' NE '').ZG22B    KEYS?                   00458000
              AIF   ('&RSNCODE' NE '').ZG22B    KEYS?                   00459000
              AGO    .ZG22C     INVOCATION OKAY                         00460000
.ZG22B        ANOP  ,                                                   00461000
&ZMS          SETC  'THE "L" FORM OF "MF" CANNOT'  *MFLA* MNOTE         00462000
&ZMS          SETC  '&ZMS HAVE ANY OTHER KEYWORDS OR'                   00463000
&ZMS          SETC  '&ZMS POSITIONAL PARAMETERS SPECIFIED'              00464000
              MNOTE 8,' &ZMS ON THE INVOCATION.'                        00465000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00466000
.ZG22C        ANOP  ,                                                   00467000
.*-------------------------------------------------------------------   00468000
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00469000
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                           00470000
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                           00471000
              AIF   (N'&MF(2) GT 1).ZG24B       MULTI PARMS             00472000
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                           00473000
.ZG24B        AIF   (K'&MF(2) GT 0).ZG24C                               00474000
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00475000
&ZMS          SETC  'WHEN "L" IS SPECIFIED'     *KRQDA*                 00476000
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                 00477000
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                        00478000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00479000
.ZG24C        ANOP  ,                                                   00480000
.*-------------------------------------------------------------------   00481000
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00482000
              AIF   (K'&ZXMFCTRL LE 0).ZG24P    NOT I/O                 00483000
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG24P                      00484000
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00485000
&ZMS          SETC  '"MF='      *KGPRA* MNOTE                           00486000
&ZMS          SETC  '&ZMS.&MF"'                                         00487000
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'           00488000
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'                   00489000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00490000
.ZG24P        ANOP  ,                                                   00491000
.*-------------------------------------------------------------------   00492000
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00493000
&ZXMFATTR     SETC  'INPUT'     SET IN/OUTPUT                           00494000
&XMFATTR      SETC  '0D'                                                00495000
              AIF   (K'&MF(3) LE 0).ZG27B       PARM                    00496000
&XMFATTR      SETC  '&MF(3,1)'  SET XVARIABLE                           00497000
              AIF   (N'&MF(3) GT 1).ZG27B       MULTI PARMS             00498000
&XMFATTR      SETC  '&MF(3)'    SET XVARIABLE                           00499000
.ZG27B        ANOP  ,                                                   00500000
.*-------------------------------------------------------------------   00501000
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00502000
              AIF   (K'&ZXMFATTR LE 0).ZG27P    NOT I/O                 00503000
              AIF   ('&XMFATTR'(1,1) NE '(').ZG27P                      00504000
&ZXMFATTR     SETC  ''          RESET IN/OUTPUT                         00505000
&ZMS          SETC  '"MF='      *KGPRA* MNOTE                           00506000
&ZMS          SETC  '&ZMS.&MF"'                                         00507000
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'           00508000
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'                   00509000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00510000
.ZG27P        ANOP  ,                                                   00511000
.*-------------------------------------------------------------------   00512000
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00513000
              AIF   (K'&ZXMFATTR LE 0).ZG27S    NOT I/O                 00514000
              AIF   (K'&XMFATTR LE 60).ZG27S    LNG OK                  00515000
&ZXMFATTR     SETC  ''          RESET IN/OUTPUT                         00516000
&ZMS          SETC  '"MF='      *KLNGA* MNOTE                           00517000
&ZMS          SETC  '&ZMS.&MF"'                                         00518000
&ZMS          SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'               00519000
              MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'                  00520000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00521000
.ZG27S        ANOP  ,                                                   00522000
.*-------------------------------------------------------------------   00523000
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00524000
.ZG29         ANOP  ,                                                   00525000
&ZTLC         SETC 'E'                                                  00525600
              AIF   ('&MF(1)' NE '&ZTLC').ZG37                          00526200
&XMF          SETC  'E'         SET KEYWORD                             00527000
              AIF   (N'&MF LE 3).ZG29A          CK NUM                  00528000
&ZMS          SETC  '"MF='      *KPOSA* MNOTE                           00529000
&ZMS          SETC  '&ZMS.&MF"'                                         00530000
&ZMS          SETC  '&ZMS "MF"'                                         00531000
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                00532000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00533000
.ZG29A        ANOP  ,                                                   00534000
.*-------------------------------------------------------------------   00535000
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00536000
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                           00537000
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                           00538000
              AIF   (N'&MF(2) GT 1).ZG31B       MULTI PARMS             00539000
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                           00540000
.ZG31B        AIF   (K'&MF(2) GT 0).ZG31C                               00541000
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00542000
&ZMS          SETC  'WHEN "E" IS SPECIFIED'     *KRQDA*                 00543000
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                 00544000
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                        00545000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00546000
.ZG31C        ANOP  ,                                                   00547000
.*-------------------------------------------------------------------   00548000
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00549000
              AIF   (K'&ZXMFCTRL LE 0).ZG31R    NOT I/O                 00550000
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG31R                      00551000
&ZCGPR        SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                          00552000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG31P                        00553000
              AIF   (K'&ZCGPR GT 2).ZG31Q                               00554000
              AIF   ('&ZCGPR' EQ '0').ZG31Q                             00555000
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00556000
              AIF   (T'&ZCGPR NE 'N').ZG31Q     INVALID REG NAME        00557000
.ZG31P        ANOP  ,                                                   00558000
              AIF   (T'&ZCGPR NE 'N').ZG31R     NON NUMERIC             00559000
              AIF   ('&ZCGPR' LT '1').ZG31Q                             00560000
              AIF   ('&ZCGPR' LE '12').ZG31R                            00561000
.ZG31Q        ANOP  ,                                                   00562000
&ZMS          SETC  '"MF='      *KGPRA* MNOTE                           00563000
&ZMS          SETC  '&ZMS.&MF"'                                         00564000
&ZMS          SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'           00565000
              MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                    00566000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00567000
.ZG31R        ANOP  ,                                                   00568000
.*-------------------------------------------------------------------   00569000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00570000
&XMFSCK       SETC  ''          INITIALIZE XVARIABLE                    00571000
.ZG35A   AIF   ('&MF(3)' NE 'COMPLETE').ZG36A                           00572000
&XMFSCK       SETC  'COMPLETE'  SET KEYWORD                             00573000
.*-------------------------------------------------------------------   00574000
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00575000
.ZG36A        AIF   (K'&XMFSCK GT 0).ZG36C      KEYWORD                 00576000
              AIF   (K'&MF(3) LE 0).ZG36B                               00577000
&ZMS          SETC  '"MF='      *KUKWA* MNOTE                           00578000
&ZMS          SETC  '&ZMS.&MF"'                                         00579000
&ZMS          SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '           00580000
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00581000
&ZMS          SETC  '&ZMS "COMPLETE".'          VALID KEYWORD           00581600
              MNOTE 8,' &ZMS '                                          00582200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00583000
.ZG36B        ANOP  ,                                                   00584000
&XMFSCK       SETC  'COMPLETE'  SET DEFAULT KEYWORD                     00585000
.ZG36C        ANOP  ,                                                   00586000
&ZXMFSCK      SETC  'INPUT'     SET IN/OUTPUT                           00587000
.*------------------------------------------------------------------    00588000
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00589000
.ZG37         ANOP  ,                                                   00590000
&ZXMF         SETC  'INPUT'     SET IN/OUTPUT                           00591000
              AIF   (K'&XMF GT 0).ZG37E         VALID ARG               00592000
              AIF   (T'&MF EQ 'O').ZG37D        OMITTED                 00593000
&ZASYSLNDX    SETA  0                                                   00594000
.ZG37A        ANOP  ,           POSITIONAL MACRO KEY                    00595000
&ZASYSLNDX    SETA  &ZASYSLNDX+1                                        00596000
              AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG37C                    00597000
&ZTLC         SETC 'MF'                                                 00597600
              AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG37A           00598200
.ZG37B        ANOP  ,                                                   00599000
&ZXMF         SETC  ''          RESET IN/OUTPUT                         00600000
&ZMS          SETC  'THE "MF" KEY'              *KOPTA* MNOTE           00601000
&ZMS          SETC  '&ZMS MUST CONTAIN ONE'                             00602000
              MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                    00603000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00604000
              AGO   .ZG37E                                              00605000
.ZG37C        ANOP  ,                                                   00606000
&ZXMF         SETC  ''          RESET IN/OUTPUT                         00607000
&ZMS          SETC  '"MF='      *KUKWA* MNOTE                           00608000
&ZMS          SETC  '&ZMS.&MF"'                                         00609000
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00610000
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00611000
&ZMS          SETC  '&ZMS "S",'                 VALID KEYWORD           00612000
&ZMS          SETC  '&ZMS "L",'                 VALID KEYWORD           00613000
&ZMS          SETC  '&ZMS OR "E".'              VALID KEYWORD           00613600
              MNOTE 8,' &ZMS '                                          00614200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00615000
              AGO   .ZG37E                                              00616000
.ZG37D        ANOP  ,                                                   00617000
&XMF          SETC  'S'         SET DEFAULT KEYWORD                     00618000
&XMFSCK       SETC  'COMPLETE'  COMPLETE CHECKING                       00619000
.ZG37E        ANOP  ,                                                   00620000
.********************************************************************   00621000
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00622000
.********************************************************************   00623000
              ACTR  10000                                               00624000
.*-------------------------------------------------------------------   00625000
.***AG.MF03 MF=(SLE)                                                    00626000
              AIF   ('&XMF' EQ 'L').ZGMFX                               00627000
.*-------------------------------------------------------------------   00628000
.***AG.KMEKY05 NAME, RQD INPUT, ME KEYS -NO ARGUMENTS                   00629000
&XPRIMIN      SETC  ''          INITIALIZE XVARIABLE                    00630000
&ZASYSLNDX    SETA  0                                                   00631000
.ZG2A         ANOP  ,           POSITIONAL KEY SEARCH                   00632000
&ZASYSLNDX    SETA  &ZASYSLNDX+1                NEXT POSITIONAL         00633000
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG2B  DONE                    00634000
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG2A             00635000
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'FIRST').ZG2A                 00636000
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00637000
&ZXPRIMIN     SETC  'INPUT'     SET IN/OUTPUT                           00638000
&XPRIMIN      SETC  'FIRST'     SET XVARIABLE                           00639000
&ZXFIRST      SETC  'INPUT'     SET IN/OUTPUT                           00640000
&XFIRST       SETC  'FIRST'     SET XVARIABLE PARM                      00641000
.ZG2B         ANOP  ,                                                   00642000
.*-------------------------------------------------------------------   00643000
.***AG.KMEKY06 NAME, RQD INPUT, ME KEYS -NO ARGUMENTS                   00644000
&ZASYSLNDX    SETA  0                                                   00645000
.ZG3A         ANOP  ,           POSITIONAL KEY SEARCH                   00646000
&ZASYSLNDX    SETA  &ZASYSLNDX+1                NEXT POSITIONAL         00647000
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG3C  DONE                    00648000
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG3A             00649000
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'NEXT').ZG3A                  00650000
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00651000
              AIF   (K'&XPRIMIN LE 0).ZG3B      VALID                   00652000
&ZMS          SETC  '"NEXT'     *KMEKA* MNOTE                           00653000
&ZMS          SETC  '&ZMS."'                                            00654000
&ZMS          SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'               00655000
&ZMS          SETC  '&ZMS "&XPRIMIN"'                                   00656000
              MNOTE 8,' &ZMS KEY.'                                      00657000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00658000
              AGO   .ZG3C                                               00659000
.*                                                                      00660000
.ZG3B         ANOP  ,                                                   00661000
&ZXPRIMIN     SETC  'INPUT'     SET IN/OUTPUT                           00662000
&XPRIMIN      SETC  'NEXT'      SET XVARIABLE                           00663000
&ZXNEXT       SETC  'INPUT'     SET IN/OUTPUT                           00664000
&XNEXT        SETC  'NEXT'      SET XVARIABLE PARM                      00665000
.ZG3C         ANOP  ,                                                   00666000
.*----------------------------------------------------------------***   00667000
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00668000
              AIF   (K'&DDNAME LE 0).ZG4D       NO ME KEY               00669000
              AIF   (N'&DDNAME LE 1).ZG4A       CK NUM                  00670000
&ZMS          SETC  '"DDNAME='  *KPOSA* MNOTE                           00671000
&ZMS          SETC  '&ZMS.&DDNAME"'                                     00672000
&ZMS          SETC  '&ZMS "DDNAME"'                                     00673000
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00674000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00675000
.ZG4A         AIF   (K'&XPRIMIN LE 0).ZG4B                              00676000
&ZMS          SETC  '"DDNAME'   *KMEKA* MNOTE                           00677000
&ZMS          SETC  '&ZMS.=&DDNAME"'                                    00678000
&ZMS          SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'               00679000
&ZMS          SETC  '&ZMS "&XPRIMIN"'                                   00680000
              MNOTE 8,' &ZMS KEY.'                                      00681000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00682000
              AGO   .ZG4D                                               00683000
.*                                                                      00684000
.ZG4B         ANOP  ,                                                   00685000
&ZXPRIMIN     SETC  'INPUT'     SET IN/OUTPUT                           00686000
&XPRIMIN      SETC  'DDNAME'    SET XVARIABLE                           00687000
&ZXDDNAME     SETC  'INPUT'     SET IN/OUTPUT                           00688000
&XDDNAME      SETC  '&DDNAME(1)'                SET XVARIABLE PARM      00689000
              AIF   (N'&DDNAME GT 1).ZG4C       MULTIPLE PARMS          00690000
&XDDNAME      SETC  '&DDNAME'   SET XVARIABLE PARM                      00691000
.ZG4C         AIF   (K'&XDDNAME GT 0).ZG4D      ONE PARM                00692000
&ZXPRIMIN     SETC  ''          RESET IN/OUTPUT                         00693000
&ZXDDNAME     SETC  ''          RESET IN/OUTPUT                         00694000
&ZMS          SETC  ' '         *KRQDA*                                 00695000
&ZMS          SETC  '&ZMS "DDNAME" KEY AND ITS ARGUMENT'                00696000
              MNOTE 8,' &ZMS ARE REQUIRED.'                             00697000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00698000
.ZG4D         ANOP  ,                                                   00699000
.*----------------------------------------------------------------***   00700000
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00701000
              AIF   (K'&DCBPTR LE 0).ZG5D       NO ME KEY               00702000
              AIF   (N'&DCBPTR LE 1).ZG5A       CK NUM                  00703000
&ZMS          SETC  '"DCBPTR='  *KPOSA* MNOTE                           00704000
&ZMS          SETC  '&ZMS.&DCBPTR"'                                     00705000
&ZMS          SETC  '&ZMS "DCBPTR"'                                     00706000
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00707000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00708000
.ZG5A         AIF   (K'&XPRIMIN LE 0).ZG5B                              00709000
&ZMS          SETC  '"DCBPTR'   *KMEKA* MNOTE                           00710000
&ZMS          SETC  '&ZMS.=&DCBPTR"'                                    00711000
&ZMS          SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'               00712000
&ZMS          SETC  '&ZMS "&XPRIMIN"'                                   00713000
              MNOTE 8,' &ZMS KEY.'                                      00714000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00715000
              AGO   .ZG5D                                               00716000
.*                                                                      00717000
.ZG5B         ANOP  ,                                                   00718000
&ZXPRIMIN     SETC  'INPUT'     SET IN/OUTPUT                           00719000
&XPRIMIN      SETC  'DCBPTR'    SET XVARIABLE                           00720000
&ZXDCBPTR     SETC  'INPUT'     SET IN/OUTPUT                           00721000
&XDCBPTR      SETC  '&DCBPTR(1)'                SET XVARIABLE PARM      00722000
              AIF   (N'&DCBPTR GT 1).ZG5C       MULTIPLE PARMS          00723000
&XDCBPTR      SETC  '&DCBPTR'   SET XVARIABLE PARM                      00724000
.ZG5C         AIF   (K'&XDCBPTR GT 0).ZG5D      ONE PARM                00725000
&ZXPRIMIN     SETC  ''          RESET IN/OUTPUT                         00726000
&ZXDCBPTR     SETC  ''          RESET IN/OUTPUT                         00727000
&ZMS          SETC  ' '         *KRQDA*                                 00728000
&ZMS          SETC  '&ZMS "DCBPTR" KEY AND ITS ARGUMENT'                00729000
              MNOTE 8,' &ZMS ARE REQUIRED.'                             00730000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00731000
.ZG5D         ANOP  ,                                                   00732000
.*------------------------------------------------------------------    00733000
.***AG.KMEKY09 NAME, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED           00734000
              AIF   (K'&XPRIMIN GT 0).ZG6B                              00735000
&ZXPRIMIN     SETC  ''          RESET IN/OUTPUT                         00736000
&ZXFIRST      SETC  ''          RESET IN/OUTPUT                         00737000
&XPRIMIN      SETC  ''          ENSURE NULL                             00738000
&XFIRST       SETC  ''          ENSURE NULL                             00739000
&ZMS          SETC  'ONE OF THE FOLLOWING'      *KMERA* MNOTE           00740000
&ZMS          SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'                 00740600
&ZMS          SETC  '&ZMS REQUIRED:'                                    00741200
&ZMS          SETC  '&ZMS "FIRST",'             VALID ME KEY            00742000
&ZMS          SETC  '&ZMS "NEXT",'              VALID ME KEY            00743000
&ZMS          SETC  '&ZMS "XDDNAME",'           VALID ME KEY            00744000
&ZMS          SETC  '&ZMS OR "XDCBPTR".'        VALID ME KEY            00744600
              MNOTE 8,' &ZMS '                                          00745200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00746000
.ZG6B         ANOP  ,                                                   00747000
.*-------------------------------------------------------------------   00748000
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00749000
.ZG2          AIF   ('&XPRIMIN' NE 'FIRST').ZG3                         00750000
.*-------------------------------------------------------------------   00751000
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00752000
              AIF   (K'&ZXFIRST LE 0).ZG2R      NOT I/O                 00753000
              AIF   ('&XFIRST'(1,1) NE '(').ZG2R                        00754000
&ZCGPR        SETC  '&XFIRST'(2,K'&XFIRST-2)                            00755000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG2P                         00756000
              AIF   (K'&ZCGPR GT 2).ZG2Q                                00757000
              AIF   ('&ZCGPR' EQ '0').ZG2Q                              00758000
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00759000
              AIF   (T'&ZCGPR NE 'N').ZG2Q      INVALID REG NAME        00760000
.ZG2P         ANOP  ,                                                   00761000
              AIF   (T'&ZCGPR NE 'N').ZG2R      NON NUMERIC             00762000
              AIF   ('&ZCGPR' LT '2').ZG2Q                              00763000
              AIF   ('&ZCGPR' LE '12').ZG2R                             00764000
.ZG2Q         ANOP  ,                                                   00765000
&ZMS          SETC  '"FIRST='   *KGPRA* MNOTE                           00766000
&ZMS          SETC  '&ZMS.&FIRST"'                                      00767000
&ZMS          SETC  '&ZMS ARGUMENT 0 MUST SPECIFY A REGISTER'           00768000
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00769000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00770000
.ZG2R         ANOP  ,                                                   00771000
.*-------------------------------------------------------------------   00772000
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00773000
.ZG3          AIF   ('&XPRIMIN' NE 'NEXT').ZG4                          00774000
.*-------------------------------------------------------------------   00775000
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00776000
              AIF   (K'&ZXNEXT LE 0).ZG3R       NOT I/O                 00777000
              AIF   ('&XNEXT'(1,1) NE '(').ZG3R                         00778000
&ZCGPR        SETC  '&XNEXT'(2,K'&XNEXT-2)                              00779000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG3P                         00780000
              AIF   (K'&ZCGPR GT 2).ZG3Q                                00781000
              AIF   ('&ZCGPR' EQ '0').ZG3Q                              00782000
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00783000
              AIF   (T'&ZCGPR NE 'N').ZG3Q      INVALID REG NAME        00784000
.ZG3P         ANOP  ,                                                   00785000
              AIF   (T'&ZCGPR NE 'N').ZG3R      NON NUMERIC             00786000
              AIF   ('&ZCGPR' LT '2').ZG3Q                              00787000
              AIF   ('&ZCGPR' LE '12').ZG3R                             00788000
.ZG3Q         ANOP  ,                                                   00789000
&ZMS          SETC  '"NEXT='    *KGPRA* MNOTE                           00790000
&ZMS          SETC  '&ZMS.&NEXT"'                                       00791000
&ZMS          SETC  '&ZMS ARGUMENT 0 MUST SPECIFY A REGISTER'           00792000
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00793000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00794000
.ZG3R         ANOP  ,                                                   00795000
.*-------------------------------------------------------------------   00796000
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00797000
.ZG4          AIF   ('&XPRIMIN' NE 'DDNAME').ZG5                        00798000
.*-------------------------------------------------------------------   00799000
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00800000
              AIF   (K'&ZXDDNAME LE 0).ZG4R     NOT I/O                 00801000
              AIF   ('&XDDNAME'(1,1) NE '(').ZG4R                       00802000
&ZCGPR        SETC  '&XDDNAME'(2,K'&XDDNAME-2)                          00803000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG4P                         00804000
              AIF   (K'&ZCGPR GT 2).ZG4Q                                00805000
              AIF   ('&ZCGPR' EQ '0').ZG4Q                              00806000
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00807000
              AIF   (T'&ZCGPR NE 'N').ZG4Q      INVALID REG NAME        00808000
.ZG4P         ANOP  ,                                                   00809000
              AIF   (T'&ZCGPR NE 'N').ZG4R      NON NUMERIC             00810000
              AIF   ('&ZCGPR' LT '2').ZG4Q                              00811000
              AIF   ('&ZCGPR' LE '12').ZG4R                             00812000
.ZG4Q         ANOP  ,                                                   00813000
&ZMS          SETC  '"DDNAME='  *KGPRA* MNOTE                           00814000
&ZMS          SETC  '&ZMS.&DDNAME"'                                     00815000
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00816000
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00817000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00818000
.ZG4R         ANOP  ,                                                   00819000
.*-------------------------------------------------------------------   00820000
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00821000
.ZG5          AIF   ('&XPRIMIN' NE 'DCBPTR').ZG6                        00822000
.*-------------------------------------------------------------------   00823000
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00824000
              AIF   (K'&ZXDCBPTR LE 0).ZG5R     NOT I/O                 00825000
              AIF   ('&XDCBPTR'(1,1) NE '(').ZG5R                       00826000
&ZCGPR        SETC  '&XDCBPTR'(2,K'&XDCBPTR-2)                          00827000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG5P                         00828000
              AIF   (K'&ZCGPR GT 2).ZG5Q                                00829000
              AIF   ('&ZCGPR' EQ '0').ZG5Q                              00830000
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00831000
              AIF   (T'&ZCGPR NE 'N').ZG5Q      INVALID REG NAME        00832000
.ZG5P         ANOP  ,                                                   00833000
              AIF   (T'&ZCGPR NE 'N').ZG5R      NON NUMERIC             00834000
              AIF   ('&ZCGPR' LT '2').ZG5Q                              00835000
              AIF   ('&ZCGPR' LE '12').ZG5R                             00836000
.ZG5Q         ANOP  ,                                                   00837000
&ZMS          SETC  '"DCBPTR='  *KGPRA* MNOTE                           00838000
&ZMS          SETC  '&ZMS.&DCBPTR"'                                     00839000
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00840000
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00841000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00842000
.ZG5R         ANOP  ,                                                   00843000
.*-------------------------------------------------------------------   00844000
.***AG.KMEKY15 NAME, RQD INPUT, ME KEYS -END                            00845000
.ZG6          ANOP  ,           END MUTUALLY EXCLUSIVE KEYS             00846000
.*----------------------------------------------------------------***   00847000
.***AG.KXVAR05 NAME, RQD INOUT, KEYS -XVARIABLE KEY                     00848000
              AIF   (N'&DSABPTR LE 1).ZG8A      CK NUM                  00849000
&ZMS          SETC  '"DSABPTR='                 *KPOSA* MNOTE           00850000
&ZMS          SETC  '&ZMS.&DSABPTR"'                                    00851000
&ZMS          SETC  '&ZMS "DSABPTR"'                                    00852000
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00853000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00854000
.ZG8A         ANOP  ,                                                   00855000
.*-------------------------------------------------------------------   00856000
.***AG.KXVAR06 NAME, RQD INOUT, KEYS -XVARIABLE                         00857000
&ZXDSABPTR    SETC  'INOUT'     SET IN/OUTPUT                           00858000
&XDSABPTR     SETC  '&DSABPTR(1)'               SET XVARIABLE           00859000
              AIF   (N'&DSABPTR GT 1).ZG8B      MULTI PARMS             00860000
&XDSABPTR     SETC  '&DSABPTR'  SET XVARIABLE                           00861000
.ZG8B         AIF   (K'&DSABPTR(1) GT 0).ZG8C                           00862000
&ZXDSABPTR    SETC  ''          RESET IN/OUTPUT                         00863000
&ZMS          SETC  ' '         *KRQDA*                                 00864000
&ZMS          SETC  '&ZMS "DSABPTR" KEY AND ITS ARGUMENT'               00865000
              MNOTE 8,' &ZMS ARE REQUIRED.'                             00866000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00867000
.ZG8C         ANOP  ,                                                   00868000
.*-------------------------------------------------------------------   00869000
.***AG.KCK02 NAME, RQD INOUT, KEYS -GPR OUT OF RANGE                    00870000
              AIF   (K'&ZXDSABPTR LE 0).ZG8R    NOT I/O                 00871000
              AIF   ('&XDSABPTR'(1,1) NE '(').ZG8R                      00872000
&ZCGPR        SETC  '&XDSABPTR'(2,K'&XDSABPTR-2)                        00873000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG8P                         00874000
              AIF   (K'&ZCGPR GT 2).ZG8Q                                00875000
              AIF   ('&ZCGPR' EQ '0').ZG8Q                              00876000
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00877000
              AIF   (T'&ZCGPR NE 'N').ZG8Q      INVALID REG NAME        00878000
.ZG8P         ANOP  ,                                                   00879000
              AIF   (T'&ZCGPR NE 'N').ZG8R      NON NUMERIC             00880000
              AIF   ('&ZCGPR' LT '2').ZG8Q                              00881000
              AIF   ('&ZCGPR' LE '12').ZG8R                             00882000
.ZG8Q         ANOP  ,                                                   00883000
&ZMS          SETC  '"DSABPTR='                 *KGPRA* MNOTE           00884000
&ZMS          SETC  '&ZMS.&DSABPTR"'                                    00885000
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00886000
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00887000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00888000
.ZG8R         ANOP  ,                                                   00889000
.*----------------------------------------------------------------***   00890000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00891000
              AIF   (N'&TCBPTR LE 1).ZG11A      CK NUM                  00892000
&ZMS          SETC  '"TCBPTR='  *KPOSA* MNOTE                           00893000
&ZMS          SETC  '&ZMS.&TCBPTR"'                                     00894000
&ZMS          SETC  '&ZMS "TCBPTR"'                                     00895000
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00896000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00897000
.ZG11A        ANOP  ,                                                   00898000
.*-------------------------------------------------------------------   00899000
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00900000
&ZXTCBPTR     SETC  'INPUT'     SET IN/OUTPUT                           00901000
&XTCBPTR      SETC  '0'                                                 00902000
              AIF   (K'&TCBPTR(1) LE 0).ZG11B   PARM                    00903000
&XTCBPTR      SETC  '&TCBPTR(1)'                SET XVARIABLE           00904000
              AIF   (N'&TCBPTR GT 1).ZG11B      MULTI PARMS             00905000
&XTCBPTR      SETC  '&TCBPTR'   SET XVARIABLE                           00906000
.ZG11B        ANOP  ,                                                   00907000
.*-------------------------------------------------------------------   00908000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00909000
              AIF   (K'&ZXTCBPTR LE 0).ZG11R    NOT I/O                 00910000
              AIF   ('&XTCBPTR' EQ '0').ZG11R                           00911000
              AIF   ('&XTCBPTR'(1,1) NE '(').ZG11R                      00912000
&ZCGPR        SETC  '&XTCBPTR'(2,K'&XTCBPTR-2)                          00913000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG11P                        00914000
              AIF   (K'&ZCGPR GT 2).ZG11Q                               00915000
              AIF   ('&ZCGPR' EQ '0').ZG11Q                             00916000
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00917000
              AIF   (T'&ZCGPR NE 'N').ZG11Q     INVALID REG NAME        00918000
.ZG11P        ANOP  ,                                                   00919000
              AIF   (T'&ZCGPR NE 'N').ZG11R     NON NUMERIC             00920000
              AIF   ('&ZCGPR' LT '2').ZG11Q                             00921000
              AIF   ('&ZCGPR' LE '12').ZG11R                            00922000
.ZG11Q        ANOP  ,                                                   00923000
&ZMS          SETC  '"TCBPTR='  *KGPRA* MNOTE                           00924000
&ZMS          SETC  '&ZMS.&TCBPTR"'                                     00925000
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00926000
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00927000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00928000
.ZG11R        ANOP  ,                                                   00929000
.*----------------------------------------------------------------***   00930000
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00931000
              AIF   (N'&RETCODE LE 1).ZG14A     CK NUM                  00932000
&ZMS          SETC  '"RETCODE='                 *KPOSA* MNOTE           00933000
&ZMS          SETC  '&ZMS.&RETCODE"'                                    00934000
&ZMS          SETC  '&ZMS "RETCODE"'                                    00935000
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00936000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00937000
.ZG14A        ANOP  ,                                                   00938000
.*-------------------------------------------------------------------   00939000
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00940000
              AIF   (K'&RETCODE(1) LE 0).ZG14C  NO PARM                 00941000
&ZXRETCODE    SETC  'OUTPUT'    SET OUTPUT                              00942000
&XRETCODE     SETC  '&RETCODE(1)'               SET XVARIABLE           00943000
              AIF   (N'&RETCODE GT 1).ZG14C                             00944000
&XRETCODE     SETC  '&RETCODE'  SET XVARIABLE                           00945000
.ZG14C        ANOP  ,                                                   00946000
.*-------------------------------------------------------------------   00947000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00948000
              AIF   (K'&ZXRETCODE LE 0).ZG14R   NOT I/O                 00949000
              AIF   ('&XRETCODE'(1,1) NE '(').ZG14R                     00950000
&ZCGPR        SETC  '&XRETCODE'(2,K'&XRETCODE-2)                        00951000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG14P                        00952000
              AIF   (K'&ZCGPR GT 2).ZG14Q                               00953000
              AIF   ('&ZCGPR' EQ '0').ZG14Q                             00954000
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00955000
              AIF   (T'&ZCGPR NE 'N').ZG14Q     INVALID REG NAME        00956000
.ZG14P        ANOP  ,                                                   00957000
              AIF   (T'&ZCGPR NE 'N').ZG14R     NON NUMERIC             00958000
              AIF   ('&ZCGPR' LT '2').ZG14Q                             00959000
              AIF   ('&ZCGPR' LE '12').ZG14R                            00960000
.ZG14Q        ANOP  ,                                                   00961000
&ZMS          SETC  '"RETCODE='                 *KGPRA* MNOTE           00962000
&ZMS          SETC  '&ZMS.&RETCODE"'                                    00963000
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00964000
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00965000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00966000
.ZG14R        ANOP  ,                                                   00967000
.*----------------------------------------------------------------***   00968000
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00969000
              AIF   (N'&RSNCODE LE 1).ZG17A     CK NUM                  00970000
&ZMS          SETC  '"RSNCODE='                 *KPOSA* MNOTE           00971000
&ZMS          SETC  '&ZMS.&RSNCODE"'                                    00972000
&ZMS          SETC  '&ZMS "RSNCODE"'                                    00973000
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00974000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00975000
.ZG17A        ANOP  ,                                                   00976000
.*-------------------------------------------------------------------   00977000
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00978000
              AIF   (K'&RSNCODE(1) LE 0).ZG17C  NO PARM                 00979000
&ZXRSNCODE    SETC  'OUTPUT'    SET OUTPUT                              00980000
&XRSNCODE     SETC  '&RSNCODE(1)'               SET XVARIABLE           00981000
              AIF   (N'&RSNCODE GT 1).ZG17C                             00982000
&XRSNCODE     SETC  '&RSNCODE'  SET XVARIABLE                           00983000
.ZG17C        ANOP  ,                                                   00984000
.*-------------------------------------------------------------------   00985000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00986000
              AIF   (K'&ZXRSNCODE LE 0).ZG17R   NOT I/O                 00987000
              AIF   ('&XRSNCODE'(1,1) NE '(').ZG17R                     00988000
&ZCGPR        SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                        00989000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG17P                        00990000
              AIF   (K'&ZCGPR GT 2).ZG17Q                               00991000
              AIF   ('&ZCGPR' EQ '0').ZG17Q                             00992000
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00993000
              AIF   (T'&ZCGPR NE 'N').ZG17Q     INVALID REG NAME        00994000
.ZG17P        ANOP  ,                                                   00995000
              AIF   (T'&ZCGPR NE 'N').ZG17R     NON NUMERIC             00996000
              AIF   ('&ZCGPR' LT '2').ZG17Q                             00997000
              AIF   ('&ZCGPR' LE '12').ZG17R                            00998000
.ZG17Q        ANOP  ,                                                   00999000
&ZMS          SETC  '"RSNCODE='                 *KGPRA* MNOTE           01000000
&ZMS          SETC  '&ZMS.&RSNCODE"'                                    01001000
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           01002000
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    01003000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             01004000
.ZG17R        ANOP  ,                                                   01005000
.******************************************************************     01006000
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        01007000
.******************************************************************     01008000
              ACTR  10000                                               01009000
.*-------------------------------------------------------------------   01010000
.***AH.P03 EXTRA POSITIONALS AMONG NON-X KEYS                           01011000
&ZCVAL        SETC  ''          ERROR FIELD                             01012000
&ZAWRK        SETA  0           POSITIONAL COUNTER                      01013000
&ZASYSLNDX    SETA  0           NON-X KEY COUNTER                       01014000
.ZGLIST2      ANOP  ,                                                   01015000
&ZASYSLNDX    SETA  &ZASYSLNDX+1                NEXT NON-X KEY          01016000
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZGLIST3  DONE                 01017000
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZGLIST2          01018000
&ZAWRK        SETA  &ZAWRK+1    NEXT POSITIONAL                         01019000
              AIF   (&ZAWRK LE 0).ZGLIST2                               01020000
&ZCVAL        SETC '&ZCVAL,&SYSLIST(&ZASYSLNDX)'  EXTRA                 01021000
              AGO   .ZGLIST2                                            01022000
.*                                                                      01023000
.ZGLIST3  AIF  (K'&ZCVAL LE 0).ZGLISTX                                  01024000
&ZCVAL        SETC '&ZCVAL'(2,K'&ZCVAL-1)       STRIP COMMA             01025000
&ZMS          SETC  'POSITIONAL ARGUMENT(S),'   *PPOSA* MNOTE           01026000
&ZMS          SETC  '&ZMS "&ZCVAL"'                                     01027000
&ZMS          SETC  '&ZMS CANNOT BE USED.'                              01028000
&ZMS          SETC  '&ZMS NO POSITIONAL ARGUMENTS'                      01029000
              MNOTE 8,' &ZMS ARE ALLOWED.'                              01030000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             01031000
.ZGLISTX      ANOP  ,                                                   01032000
&ZASYSLNDX    SETA  0                                                   01033000
.*-------------------------------------------------------------------   01034000
.***AG.MF04 MF=(SLE)                                                    01035000
.ZGMFX        ANOP  ,           END OF FULL SYNTAX CHECK                01036000
.*******************************************************************    01037000
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       01038000
.*******************************************************************    01039000
              AIF   (&ZMACRET NE 0).ZLX2        ERROR DETECTED          01040000
.*******************************************************************    01041000
.***AE.01  START OF GETDSAB MACRO CODE                                  01042000
.*******************************************************************    01043000
              LCLC  &M0M0001                 NAME                       01044000
&M0M0001      SETC  '&XLABEL'                SET NAME                   01045000
              AIF   (K'&XLABEL NE 0).XLAB2                              01046000
&M0M0001      SETC  'M00M&SYSNDX'            DEFAULT NAME               01047000
.*                                                                      01048000
.XLAB2        ANOP  ,                                                   01049000
&M0M0001 DS    0H                             GETDSAB-0                 01050000
.*******************************************************************    01051000
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              01052000
.*******************************************************************    01053000
              PUSH  PRINT                                               01054000
              AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON          01055000
              PRINT OFF         ++ PR01                                 01056000
              AGO   .ZPRNTXX                                            01057000
.ZPRINTX      PRINT ON                                                  01058000
.ZPRNTXX      ANOP  ,                                                   01059000
.********************************************************************   01060000
.***AL.A01  INTERNAL ARRAY TO PRODUCE FORMATTED CODE                    01061000
.********************************************************************   01062000
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       01063000
                      LCLA  &ZOPN1         INVOCATION INDEX             01064000
                      LCLC  &ZOPL(4095)    LABEL                        01065000
                      LCLC  &ZOPO(4095)    OPERATION                    01066000
                      LCLC  &ZOPV(4095)    VALUE                        01067000
                      LCLC  &ZOPD(4095)    DESCRIPTION                  01068000
.*                                                                      01069000
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     01070000
.*-------------------------------------------------------------------   01071000
.***AL.A10 SET ZPLLEN                                                   01072000
&ZPLLEN               SETA 16                                           01073000
.******************************************************************     01074000
.***AL.A05 GETDSAB FMT=ARG MF=S PARAMETER AREA                          01075000
.******************************************************************     01076000
                      AIF   ('&XMF' NE 'S').ZLMFSX  NOT STANDARD MF     01077000
&XMFCTRL              SETC  '#Z'.'&SYSNDX'(1,4).'A'                     01078000
.*                                                                      01078500
&ZOPN                 SETA  &ZOPN+1                                     01079000
&ZOPL(&ZOPN)          SETC  ' '                                         01080000
&ZOPO(&ZOPN)          SETC  'B'                                         01081000
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'                                01082000
&ZOPD(&ZOPN)          SETC  '++ GETDSAB ARG PARMS'                      01083000
.*                                                                      01084000
&ZOPN                 SETA  &ZOPN+1                                     01085000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL'                                  01086000
&ZOPO(&ZOPN)          SETC  'DS'                                        01087000
&ZOPV(&ZOPN)          SETC  '4A'                                        01088000
&ZOPD(&ZOPN)          SETC  '++ GETDSAB ARG PARMS'                      01089000
.*-------------------------------------------------------------------   01090000
.***AL.A07 GETDSAB FMT=ARG MF=S PARAMETERS                              01091000
&ZOPN                 SETA  &ZOPN+1                                     01092000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                01093000
&ZOPO(&ZOPN)          SETC  'DC'                                        01094000
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   01095000
&ZOPD(&ZOPN)          SETC  '++ GETDSAB ARG PARMS'                      01096000
.*                                                                      01097000
.ZLMFSX               ANOP  ,                                           01098000
.******************************************************************     01099000
.***AL.AL01 GETDSAB FMT=ARG MF=L PARAMETER AREA                         01100000
.******************************************************************     01101000
                      AIF   ('&XMF' NE 'L').ZLMFLX  NOT MF=L            01102000
&ZOPN                 SETA  &ZOPN+1                                     01103000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL'                                  01104000
&ZOPO(&ZOPN)          SETC  'DS'                                        01105000
&ZOPV(&ZOPN)          SETC  '&XMFATTR'                                  01106000
&ZOPD(&ZOPN)          SETC  '++ GETDSAB ARG PARMS'                      01107000
.*                                                                      01108000
&ZOPN                 SETA  &ZOPN+1                                     01109000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XTCBPTR@'                        01110000
&ZOPO(&ZOPN)          SETC  'DS'                                        01111000
&ZOPV(&ZOPN)          SETC  'A'                                         01112000
&ZOPD(&ZOPN)          SETC  '++ INPUT A'                                01113000
.*                                                                      01114000
&ZOPN                 SETA  &ZOPN+1                                     01115000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XDCBPTR@'                        01116000
&ZOPO(&ZOPN)          SETC  'DS'                                        01117000
&ZOPV(&ZOPN)          SETC  'A'                                         01118000
&ZOPD(&ZOPN)          SETC  '++ INPUT A'                                01119000
.*                                                                      01120000
&ZOPN                 SETA  &ZOPN+1                                     01121000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XDDNAME@'                        01122000
&ZOPO(&ZOPN)          SETC  'DS'                                        01123000
&ZOPV(&ZOPN)          SETC  'A'                                         01124000
&ZOPD(&ZOPN)          SETC  '++ INPUT CL8'                              01125000
.*                                                                      01126000
&ZOPN                 SETA  &ZOPN+1                                     01127000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XDSABPTR@'                       01128000
&ZOPO(&ZOPN)          SETC  'DS'                                        01129000
&ZOPV(&ZOPN)          SETC  'A'                                         01130000
&ZOPD(&ZOPN)          SETC  '++ INOUT A'                                01131000
.*-------------------------------------------------------------------   01132000
.***AL.AL08 GETDSAB FMT=ARG MF=L PARAMETER AREA DEFINED                 01133000
                      AGO   .ZMFLX         EXIT, MF=L DONE              01134000
.*                                                                      01135000
.ZLMFLX               ANOP  ,                                           01136000
.********************************************************************   01138400
.***AI.A01 GETDSAB FMT=ARG FILL IN PARAMETER AREA                       01138500
.********************************************************************   01139000
                      ACTR  10000                                       01140000
&ZOPN                 SETA  &ZOPN+1                                     01141000
&ZOPL(&ZOPN)          SETC  ' '                                         01142000
&ZOPO(&ZOPN)          SETC  'XR'                                        01143000
&ZOPV(&ZOPN)          SETC  '0,0'                                       01144000
&ZOPD(&ZOPN)          SETC  '++ SET GPR TO ZERO'                        01145000
.*                                                                      01146000
&ZCVAL                SETC  'LA'           ASSUME XA MODE               01147000
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSTATE PRI     01148000
&ZCVAL                SETC  'LAE'          XAX MODE                     01149000
.ZIMFXA               ANOP ,                                            01150000
.*                                                                      01151000
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    01152000
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         01153000
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 01154000
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                01155000
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 01156000
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                01157000
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   01158000
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    01159000
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   01160000
&ZOPN                 SETA  &ZOPN+1                                     01161000
&ZOPL(&ZOPN)          SETC  ' '                                         01162000
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    01163000
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              01164000
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       01165000
                      AGO   .ZIMFNX                                     01166000
.*                                                                      01167000
.ZIMFN2               ANOP ,                                            01168000
&ZOPN                 SETA  &ZOPN+1                                     01169000
&ZOPL(&ZOPN)          SETC  ' '                                         01170000
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    01171000
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                01172000
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       01173000
.ZIMFNX               ANOP ,                                            01174000
.********************************************************************   01175000
.***AI.A02 GETDSAB FMT=ARG INITIALIZE PARAMETER AREA                    01176000
.********************************************************************   01177000
.***AI.L03 MF=(SLE)                                                     01178000
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      01179000
.*                                                                      01180000
&ZOPN                 SETA  &ZOPN+1                                     01181000
&ZOPL(&ZOPN)          SETC  ' '                                         01182000
&ZOPO(&ZOPN)          SETC  'XC'                                        01183000
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         01184000
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             01185000
.ZIMFLX               ANOP  ,                                           01186000
.*-------------------------------------------------------------------   01187000
.***AI.A06 BIND=NAME ADDR XTCBPTR A INPUT                               01188000
         AIF   ('&ZXTCBPTR' EQ '').ZI1G    NOT USED                     01189000
&ZCGPR   SETC  '14'                                                     01190000
&ZCLNG                SETC  '&XTCBPTR'                                  01191000
         AIF   ('&XTCBPTR'(1,1) NE '(').ZI1A  NOT IN GPR                01192000
&ZCGPR   SETC  '&XTCBPTR'(2,K'&XTCBPTR-2)                               01193000
         AGO   .ZI1F                                                    01194000
.*                                                                      01195000
.ZI1A                 ANOP  ,                                           01196000
                      AIF   ('&XTCBPTR' EQ '0').ZI1G                    01197000
&ZOPN                 SETA  &ZOPN+1                                     01198000
&ZOPL(&ZOPN)          SETC  ' '                                         01199000
&ZOPO(&ZOPN)          SETC  'LA'                                        01200000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01201000
&ZOPD(&ZOPN)          SETC  '++ BIND=NAME A'                            01202000
.*                                                                      01203000
.ZI1F                 ANOP  ,                                           01204000
&ZOPN                 SETA  &ZOPN+1                                     01205000
&ZOPL(&ZOPN)          SETC  ' '                                         01206000
&ZOPO(&ZOPN)          SETC  'ST'                                        01207000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0(,1)'                              01208000
&ZOPD(&ZOPN)          SETC  '++ &ZXTCBPTR XTCBPTR ADDR'                 01209000
.ZI1G                 ANOP  ,                                           01210000
.*-------------------------------------------------------------------   01211000
.***AI.A06 BIND=NAME ADDR XDCBPTR A INPUT                               01212000
         AIF   ('&ZXDCBPTR' EQ '').ZI2G    NOT USED                     01213000
&ZCGPR   SETC  '14'                                                     01214000
&ZCLNG                SETC  '&XDCBPTR'                                  01215000
         AIF   ('&XDCBPTR'(1,1) NE '(').ZI2A  NOT IN GPR                01216000
&ZCGPR   SETC  '&XDCBPTR'(2,K'&XDCBPTR-2)                               01217000
         AGO   .ZI2F                                                    01218000
.*                                                                      01219000
.ZI2A                 ANOP  ,                                           01220000
&ZOPN                 SETA  &ZOPN+1                                     01221000
&ZOPL(&ZOPN)          SETC  ' '                                         01222000
&ZOPO(&ZOPN)          SETC  'LA'                                        01223000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01224000
&ZOPD(&ZOPN)          SETC  '++ BIND=NAME A'                            01225000
.*                                                                      01226000
.ZI2F                 ANOP  ,                                           01227000
&ZOPN                 SETA  &ZOPN+1                                     01228000
&ZOPL(&ZOPN)          SETC  ' '                                         01229000
&ZOPO(&ZOPN)          SETC  'ST'                                        01230000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4(,1)'                              01231000
&ZOPD(&ZOPN)          SETC  '++ &ZXDCBPTR XDCBPTR ADDR'                 01232000
.ZI2G                 ANOP  ,                                           01233000
.*-------------------------------------------------------------------   01234000
.***AI.A06 BIND=NAME ADDR XDDNAME CL8 INPUT                             01235000
         AIF   ('&ZXDDNAME' EQ '').ZI3G    NOT USED                     01236000
&ZCGPR   SETC  '14'                                                     01237000
&ZCLNG                SETC  '&XDDNAME'                                  01238000
         AIF   ('&XDDNAME'(1,1) NE '(').ZI3A  NOT IN GPR                01239000
&ZCGPR   SETC  '&XDDNAME'(2,K'&XDDNAME-2)                               01240000
         AGO   .ZI3F                                                    01241000
.*                                                                      01242000
.ZI3A                 ANOP  ,                                           01243000
&ZOPN                 SETA  &ZOPN+1                                     01244000
&ZOPL(&ZOPN)          SETC  ' '                                         01245000
&ZOPO(&ZOPN)          SETC  'LA'                                        01246000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01247000
&ZOPD(&ZOPN)          SETC  '++ BIND=NAME CL8'                          01248000
.*                                                                      01249000
.ZI3F                 ANOP  ,                                           01250000
&ZOPN                 SETA  &ZOPN+1                                     01251000
&ZOPL(&ZOPN)          SETC  ' '                                         01252000
&ZOPO(&ZOPN)          SETC  'ST'                                        01253000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,8(,1)'                              01254000
&ZOPD(&ZOPN)          SETC  '++ &ZXDDNAME XDDNAME ADDR'                 01255000
.ZI3G                 ANOP  ,                                           01256000
.*-------------------------------------------------------------------   01257000
.***AI.A06 BIND=NAME ADDR XDSABPTR A INOUT                              01258000
         AIF   ('&ZXDSABPTR' EQ '').ZI4G   NOT USED                     01259000
&ZCGPR   SETC  '14'                                                     01260000
&ZCLNG                SETC  '&XDSABPTR'                                 01261000
         AIF   ('&XDSABPTR'(1,1) NE '(').ZI4A  NOT IN GPR               01262000
&ZCGPR   SETC  '&XDSABPTR'(2,K'&XDSABPTR-2)                             01263000
         AGO   .ZI4F                                                    01264000
.*                                                                      01265000
.ZI4A                 ANOP  ,                                           01266000
&ZOPN                 SETA  &ZOPN+1                                     01267000
&ZOPL(&ZOPN)          SETC  ' '                                         01268000
&ZOPO(&ZOPN)          SETC  'LA'                                        01269000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01270000
&ZOPD(&ZOPN)          SETC  '++ BIND=NAME A'                            01271000
.*                                                                      01272000
.ZI4F                 ANOP  ,                                           01273000
&ZOPN                 SETA  &ZOPN+1                                     01274000
&ZOPL(&ZOPN)          SETC  ' '                                         01275000
&ZOPO(&ZOPN)          SETC  'ST'                                        01276000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,12(,1)'                             01277000
&ZOPD(&ZOPN)          SETC  '++ &ZXDSABPTR XDSABPTR ADDR'               01278000
.ZI4G                 ANOP  ,                                           01279000
.*-------------------------------------------------------------------   01280000
&ZOPN1                SETA &ZOPN                                        01281000
.*******************************************************************    01282000
.***AO.X02  RETURN CODE PROCESSING                                      01283000
.*******************************************************************    01284000
                      AIF   (N'&RETCODE LE 0).ZMRETX                    01285000
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            01286000
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             01287000
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             01288000
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               01289000
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                01290000
&ZOPN                 SETA  &ZOPN+1                                     01291000
&ZOPL(&ZOPN)          SETC  ' '                                         01292000
&ZOPO(&ZOPN)          SETC  'ST'                                        01293000
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              01294000
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        01295000
                      AGO   .ZMRETX                                     01296000
.*                                                                      01297000
.ZMRET2               ANOP  ,                                           01298000
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                01299000
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                01300000
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                01301000
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  01302000
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   01303000
&ZOPN                 SETA  &ZOPN+1                                     01304000
&ZOPL(&ZOPN)          SETC  ' '                                         01305000
&ZOPO(&ZOPN)          SETC  'LR'                                        01306000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 01307000
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        01308000
.ZMRETX               ANOP  ,                                           01309000
.*******************************************************************    01310000
.***AO.X03  REASON CODE PROCESSING                                      01311000
.*******************************************************************    01312000
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    01313000
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            01314000
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              01315000
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             01316000
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              01317000
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             01318000
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                01319000
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 01320000
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                01321000
&ZOPN                 SETA  &ZOPN+1                                     01322000
&ZOPL(&ZOPN)          SETC  ' '                                         01323000
&ZOPO(&ZOPN)          SETC  'ST'                                        01324000
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               01325000
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        01326000
                      AGO   .ZMRSNX                                     01327000
.*                                                                      01328000
.ZMRSN2               ANOP  ,                                           01329000
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                01330000
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 01331000
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                01332000
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 01333000
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                01334000
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   01335000
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    01336000
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   01337000
&ZOPN                 SETA  &ZOPN+1                                     01338000
&ZOPL(&ZOPN)          SETC  ' '                                         01339000
&ZOPO(&ZOPN)          SETC  'LR'                                        01340000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  01341000
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        01342000
.ZMRSNX               ANOP  ,                                           01343000
.*******************************************************************    01344000
.***AO.X04  LABEL FOR MF=L PROCESSING                                   01345000
.*******************************************************************    01346000
.ZMFLX                ANOP  ,              MF=L PROCESSING              01347000
.*******************************************************************    01348000
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               01349000
.*******************************************************************    01350000
                      ACTR  10000                                       01351000
.*                                                                      01352000
                      LCLA  &ZLC           COLUMN POSITION              01353000
                      LCLA  &ZOPX          LIST TABLE INDEX             01354000
                      LCLC  &ZLL           LABEL                        01355000
                      LCLC  &ZLOP          OPERATION                    01356000
                      LCLC  &ZLV           VALUE                        01357000
                      LCLC  &ZLD           DESCRIPTION                  01358000
.*                                                                      01359000
&ZOPX                 SETA  1                                           01360000
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            01361000
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              01362000
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              01363000
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              01364000
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              01365000
                      AIF   (K'&ZLD LE 0).ZL5                           01366000
&ZLC                  SETA  35             COMMENT COLUMN               01367000
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    01368000
&ZLC                  SETA  33             COMMMENT COLUMN              01369000
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   01370000
&ZLV                  SETC  '&ZLV'.' '                                  01371000
                      AGO   .ZL3                                        01372000
.*                                                                      01373000
.ZL4                  ANOP  ,                                           01374000
&ZLV                  SETC  '&ZLV'.' '                                  01375000
.ZL5                  ANOP  ,                                           01376000
&ZLV                  SETC  '&ZLV'.'&ZLD'                               01377000
.*                                                                      01378000
&ZLL     &ZLOP &ZLV                                                     01379000
.*                                                                      01380000
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               01381000
                      AGO   .ZL2           CONTINUE LOOPING             01382000
.*                                                                      01383000
.ZLX                  ANOP  ,                                           01384000
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                01385000
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  01386000
            AIF   ('&XPRIMIN' NE 'NEXT').CALLSERV                       01387000
            PUSH  USING                                                 01388000
            B     NEXT&SYSNDX                                           01389000
DSAB&SYSNDX DC    CL4'DSAB'                                             01390000
NEXT&SYSNDX LA    0,0                INITIALIZE ERROR REASON CODE       01391000
            LA    15,0               INITIALIZE RETURN CODE             01392000
            AIF   ('&XDSABPTR'(1,1) EQ '(').DSABREG                     01393000
            L     14,&XDSABPTR       LOAD DSAB ADDRESS                  01394000
            LTR   14,14                                                 01395000
            BZ    DERR&SYSNDX        NULL DSAB ADDRESS                  01396000
            AGO   .DSABCONT                                             01397000
.DSABREG    ANOP                                                 @03C   01397200
.* Set DPGPR to the register specified in DSABPTR parameter      @03A   01397400
.*     example: (3) as input will set DSABPTR to 3               @03A   01397600
&DPGPR      SETC  '&XDSABPTR'(2,K'&XDSABPTR-2)                   @03A   01397800
            L     14,0(,&DPGPR)      LOAD DSAB ADDRESS           @03C   01398000
            LTR   14,14              TEST FOR NULL NEXT POINTER  @03A   01398200
            BZ    DERR&SYSNDX        NULL DSAB ADDRESS                  01399000
.DSABCONT   ANOP  ,                                                     01400000
            USING DSAB,14                                               01401000
            CLC   DSABID(4),DSAB&SYSNDX  IS DSAB VALID?                 01402000
            BNE   DERR&SYSNDX        INVALID DSAB                       01403000
            L     14,DSABFCHN        LOAD FORWARD POINTER               01404000
            LTR   14,14              CHECK IF ZERO                      01405000
            BNZ   DONE&SYSNDX        NEXT DSAB EXISTS                   01406000
            LA    15,4               SET ERROR RETURN CODE              01407000
            LA    14,0               CLEAR DSAB POINTER                 01408000
            B     DONE&SYSNDX                                           01409000
DERR&SYSNDX LA    15,12              SET ERROR RETURN CODE              01410000
            LA    0,1220             SET REASON CODE                    01411000
            LA    14,0               CLEAR DSAB POINTER                 01412000
DONE&SYSNDX EQU   *                                                     01413000
            AIF   ('&XDSABPTR'(1,1) EQ '(').DSABREG2                    01414000
            ST    14,&XDSABPTR       STORE NEXT DSAB ADDRESS            01415000
            AGO   .DSABDONE                                             01416000
.DSABREG2   ST    14,0(,&DPGPR)      STORE NEXT DSAB ADDRESS     @03C   01417000
.DSABDONE   ANOP                                                        01418000
            DROP  14                                                    01419000
            POP   USING                                                 01420000
            AGO   .DSABEND                                              01421000
.CALLSERV   ANOP  ,                                                     01422000
            LA   14,16               Address of CVT address      @T1A   01422300
            L    14,0(,14)           CVT address                 @T1A   01422600
            L    14,CVTJESCT-CVT(,14)  JESCT address             @02C   01422900
            L    14,JESDACA-JESCT(,14) DACA address              @02C   01423200
            CLI  4(14),X'02'         Check DACA version          @T1C   01423500
            BL   NSRV&SYSNDX         IMPROPER SYSTEM LEVEL              01424000
            L    15,80(,14)          Service module address      @T1C   01425000
            LTR  15,15                                                  01426000
            BZ   NSRV&SYSNDX         MODULE ADDRESS IS ZERO             01427000
            BASSM 14,15              INVOKE SERVICE MODULE              01428000
            B    DONE&SYSNDX                                            01429000
NSRV&SYSNDX EQU *                                                       01430000
            LA   15,16               SET ERROR RETURN CODE              01431000
            LA   0,0                 SET ERROR REASON CODE              01432000
DONE&SYSNDX EQU *                                                       01433000
.DSABEND    ANOP                                                        01434000
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  01435000
.ZLINKX               ANOP  ,                                           01436000
.*******************************************************************    01437000
.***AP.X01  FORMAT GENERATED CODE                                       01438000
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            01439000
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              01440000
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              01441000
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              01442000
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              01443000
                      AIF   (K'&ZLD LE 0).ZL51                          01444000
&ZLC                  SETA  35             COMMENT COLUMN               01445000
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   01446000
&ZLC                  SETA  33             COMMENT COLUMN               01447000
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  01448000
&ZLV                  SETC  '&ZLV'.' '                                  01449000
                      AGO   .ZL31                                       01450000
.*                                                                      01451000
.ZL41                 ANOP  ,                                           01452000
&ZLV                  SETC  '&ZLV'.' '                                  01453000
.ZL51                 ANOP  ,                                           01454000
&ZLV                  SETC  '&ZLV'.'&ZLD'                               01455000
.*                                                                      01456000
&ZLL     &ZLOP &ZLV                                                     01457000
.*                                                                      01458000
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               01459000
                      AGO   .ZL21          CONTINUE LOOPING             01460000
.*                                                                      01461000
.ZLX1                 ANOP  ,                                           01462000
.*******************************************************************    01463000
.***AP.X02  END OF GETDSAB MACRO                                        01464000
&ZGETDSAB             SETC  'YES'          SET GETDSAB USED             01465000
         POP   PRINT                                                    01466000
*                                            GETDSAB-0                  01467000
         SPACE 1                                                        01468000
.ZLX2                 ANOP  ,                                           01469000
         MEND                                                           01470000
**********************************************************************/ 01471000
*/**** START OF SPECIFICATIONS **************************************** 01472000
*                                                                     * 01473000
*                                                                     * 01473500
*01* MACRO NAME:  GETDSAB                               -10/21/92-<0> * 01474000
*                                                                     * 01474200
*                                                                     * 01474400
*01* DESCRIPTIVE NAME:  DSAB scan service interface                   * 01474600
*                                                                     * 01475000
*01* PROPRIETARY STATEMENT:                                           * 01477000
*                                                                     * 01479000
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 01483000
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 01483200
*     5655-068 (C) COPYRIGHT IBM CORP. 1993                           * 01483400
*     SEE COPYRIGHT INSTRUCTIONS                                      * 01483600
*                                                                     * 01484000
* STATUS= HBB5510                                                     * 01484500
*                                                                     * 01485000
*                                                                     * 01485600
*                                                                     * 01486000
*01* FUNCTION:                                                        * 01487000
*       See the GETDSAB macro prologue for details.                   * 01488000
*                                                                     * 01489000
*01* INPUT:                                                           * 01490000
*                                                                     * 01491000
*            ?GETDSAB    FIRST                                       * 01492000
*                        NEXT                                        * 01493000
*                        DDNAME(xddname)                             * 01494000
*                        DCBPTR(xdcbptr)                             * 01495000
*                         DSABPTR(xdsabptr)                           * 01496000
*                        [TCBPTR(xtcbptr|0)]                        * 01497000
*                        [RETCODE(xretcode)]                          * 01498000
*                        [RSNCODE(xrsncode)]                          * 01499000
*                       [MF(S)]                                      * 01500000
*                       [MF(L,xmfctrl,xmfattr|BDY(DWORD))]         * 01501000
*                       [MF(E,xmfctrl,COMPLETE)]                   * 01502000
*                                                                     * 01503000
****** END OF SPECIFICATIONS *****************************************/ 01505000
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 01506000
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                01507000
*  ANS('/* ? GETDSAB '||MACLIST||' ')                                   01508000
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     01509000
*                                                                       01510000
*  DCL ZELO  FIXED;                                                     01511000
*  DCL ZECOL FIXED;                                                     01512000
*                                                                       01513000
*  ZELO=1;     /* STARTING COLUMN */                                    01514000
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               01515000
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    01516000
*    IF ZECOL>0                                                         01517000
*      THEN                                                             01518000
*        DO;   /* PARENTHESIS FOUND */                                  01519000
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)||' ')                         01520000
*             NORESCAN COL(MACLMAR+5);                                  01521000
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   01522000
*        END;                                                           01523000
*      ELSE                                                             01524000
*        DO;   /* REMAINING KEYS */                                     01525000
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           01526000
*             NORESCAN COL(MACLMAR+5);                                  01527000
*          ZELO=LENGTH(MACKEYS)+1;                                      01528000
*        END;                                                           01529000
*  END;                                                                 01530000
*  ANS(' -10/21/92-0- */')                                              01531000
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       01532000
*/********************************************************************/ 01533000
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 01534000
*/********************************************************************/ 01535000
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 01536000
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 01537000
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 01538000
*                                                                       01539000
*  DCL   ZGETDSAB CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */  01540000
*  DEACT ZGETDSAB;                                                      01541000
*                                                                       01542000
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    01543000
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 01544000
*                                                                       01545000
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 01546000
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 01547000
*                                                                       01548000
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 01549000
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 01550000
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 01551000
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 01552000
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 01553000
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 01554000
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 01555000
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 01556000
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 01557000
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 01558000
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 01559000
*                                                                       01560000
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 01561000
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 01562000
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 01563000
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 01564000
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 01565000
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 01566000
*/*******************************************************************/  01567000
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  01568000
*/*******************************************************************/  01569000
*  DCL XPRIMIN;  DEACT XPRIMIN;    /***PV.XVAR02 INPUT NAME */          01570000
*  DCL ZXPRIMIN; DEACT ZXPRIMIN;   /***INPUT/OUTPUT CONTROL */          01571000
*  DCL XFIRST;  DEACT XFIRST;      /***PV.XVAR02 INPUT NAME */          01572000
*  DCL ZXFIRST; DEACT ZXFIRST;     /***INPUT/OUTPUT CONTROL */          01573000
*  DCL XNEXT;  DEACT XNEXT;        /***PV.XVAR02 INPUT NAME */          01574000
*  DCL ZXNEXT; DEACT ZXNEXT;       /***INPUT/OUTPUT CONTROL */          01575000
*  DCL XDDNAME;  DEACT XDDNAME;    /***PV.XVAR02 INPUT NAME */          01576000
*  DCL ZXDDNAME; DEACT ZXDDNAME;   /***INPUT/OUTPUT CONTROL */          01577000
*  DCL XDCBPTR;  DEACT XDCBPTR;    /***PV.XVAR02 INPUT NAME */          01578000
*  DCL ZXDCBPTR; DEACT ZXDCBPTR;   /***INPUT/OUTPUT CONTROL */          01579000
*  DCL XDSABPTR;  DEACT XDSABPTR;  /***PV.XVAR02 INOUT NAME */          01580000
*  DCL ZXDSABPTR; DEACT ZXDSABPTR;  /***INPUT/OUTPUT CONTROL */         01581000
*  DCL XTCBPTR;  DEACT XTCBPTR;    /***PV.XVAR02 INPUT NAME */          01582000
*  DCL ZXTCBPTR; DEACT ZXTCBPTR;   /***INPUT/OUTPUT CONTROL */          01583000
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         01584000
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         01585000
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         01586000
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         01587000
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         01588000
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          01589000
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          01590000
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          01591000
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         01592000
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          01593000
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         01594000
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          01595000
*/********************************************************************/ 01596000
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 01597000
*/********************************************************************/ 01598000
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01599000
*  XMF='';                                                              01600000
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01601000
*  IF MF(1)='S'                              /* CHECK FOR KEYWORD */    01602000
*    THEN                                                               01603000
*      DO;                                                              01604000
*        XMF='S';                            /* SET XVARIABLE */        01605000
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    01606000
*          THEN                                                         01607000
*            DO;                                                        01608000
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            01609000
*                  MF||                                                 01610000
*                  '" "MF"'||                                           01611000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        01612000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          01613000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01614000
*              ZMACRET=8;                    /* MACRO ERROR */          01615000
*            END;                                                       01616000
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01617000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01618000
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01619000
*  IF MF(1)='L'                              /* CHECK FOR KEYWORD */    01620000
*    THEN                                                               01621000
*      DO;                                                              01622000
*        XMF='L';                            /* SET XVARIABLE */        01623000
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    01624000
*          THEN                                                         01625000
*            DO;                                                        01626000
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            01627000
*                  MF||                                                 01628000
*                  '" "MF"'||                                           01629000
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       01630000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          01631000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01632000
*              ZMACRET=8;                    /* MACRO ERROR */          01633000
*            END;                                                       01634000
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 01635000
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 01636000
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN |                            01637000
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 01638000
*          THEN                                                         01639000
*            DO;                                                        01640000
*              ZMS=' 8, THE "L" FORM OF "MF" CANNOT'|| /**MFLP* MSG*/   01641000
*                  ' HAVE ANY OTHER KEYWORDS OR'||                      01642000
*                  ' POSITIONAL PARAMETERS SPECIFIED'||                 01643000
*                  ' ON THE INVOCATION.';                               01644000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          01645000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01646000
*              ZMACRET=8;                    /* MACRO ERROR */          01647000
*            END;                                                       01648000
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 01649000
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        01650000
*  IF MF(2)=''                               /* CHECK FOR NULL */       01651000
*   THEN                                                                01652000
*    DO;                                     /* KEY IS REQUIRED */      01653000
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      01654000
*        ZMS=' 8, WHEN "L" IS SPECIFIED'||                              01655000
*            ' FOR THE "MF" KEY, POSITIONAL'||                          01656000
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            01657000
*        ANS MSG('?GETDSAB ---> '||ZMS);                                01658000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01659000
*        ZMACRET=8;                          /* MACRO ERROR */          01660000
*    END;                                                               01661000
*  ELSE                                                                 01662000
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        01663000
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 01664000
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        01665000
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          01666000
*  IF MF(3)^=''                              /* CHECK FOR NULL */       01667000
*    THEN                                                               01668000
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        01669000
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 01670000
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        01671000
*     LENGTH(XMFATTR)>60                                                01672000
*    THEN                                                               01673000
*      DO;                                                              01674000
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      01675000
*        ZMS=' 8, "MF'||                     /**KLNGP* MSG*/            01676000
*            MF||                                                       01677000
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'||                       01678000
*            ' LENGTH OF 60 CHARACTERS. ';                              01679000
*        ANS MSG('?GETDSAB ---> '||ZMS);                                01680000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01681000
*        ZMACRET=8;                          /* MACRO ERROR */          01682000
*      END;                                                             01683000
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01684000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01685000
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01686000
*  IF MF(1)='E'                              /* CHECK FOR KEYWORD */    01687000
*    THEN                                                               01688000
*      DO;                                                              01689000
*        XMF='E';                            /* SET XVARIABLE */        01690000
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    01691000
*          THEN                                                         01692000
*            DO;                                                        01693000
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            01694000
*                  MF||                                                 01695000
*                  '" "MF"'||                                           01696000
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       01697000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          01698000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01699000
*              ZMACRET=8;                    /* MACRO ERROR */          01700000
*            END;                                                       01701000
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 01702000
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        01703000
*  IF MF(2)=''                               /* CHECK FOR NULL */       01704000
*   THEN                                                                01705000
*    DO;                                     /* KEY IS REQUIRED */      01706000
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      01707000
*        ZMS=' 8, WHEN "E" IS SPECIFIED'||                              01708000
*            ' FOR THE "MF" KEY, POSITIONAL'||                          01709000
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            01710000
*        ANS MSG('?GETDSAB ---> '||ZMS);                                01711000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01712000
*        ZMACRET=8;                          /* MACRO ERROR */          01713000
*    END;                                                               01714000
*  ELSE                                                                 01715000
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        01716000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01717000
*  XMFSCK='';                                /* RESET XVARIABLE */      01718000
*  IF MF(3) = 'COMPLETE'                                                01719000
*    THEN                                                               01720000
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        01721000
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01722000
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        01723000
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    01724000
*    THEN                                                               01725000
*      DO;                                   /* KEYWORD NOT ENTERED */  01726000
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          01727000
*        IF MF(3)^=''                                                   01728000
*          THEN                                                         01729000
*            DO;                                                        01730000
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      01731000
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/            01732000
*                  MF||'"'||                                            01733000
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '||              01734000
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    01735000
*                  ' "COMPLETE".';           /* VALID KEYWORD */        01736000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          01737000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01738000
*              ZMACRET=8;                    /* MACRO ERROR */          01739000
*            END;                                                       01740000
*      END;                                                             01741000
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01742000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01743000
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01744000
*  IF MF='MF' | MF='()'                      /*CHECK ENTRY*/            01745000
*     THEN                                                              01746000
*       DO;                                                             01747000
*              ZMS=' 8, THE "MF" KEY'||      /**KOPTP* MSG*/            01748000
*                  ' MUST CONTAIN ONE'||                                01749000
*                  ' (OR MORE) ARGUMENT(S).';                           01750000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          01751000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01752000
*              ZMACRET=8;                    /* MACRO ERROR */          01753000
*       END;                                                            01754000
*  ELSE                                                                 01755000
*    DO;                                                                01756000
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        01757000
*      IF XMF=''                             /* CHECK FOR KEYWORD */    01758000
*        THEN                                                           01759000
*          DO;                               /* KEYWORD NOT ENTERED */  01760000
*            XMF='S';                        /* SET DEFAULT */          01761000
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    01762000
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    01763000
*              THEN                                                     01764000
*                DO;                                                    01765000
*                  ZXMF='';                  /* RESET IN/OUTPUT */      01766000
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/            01767000
*                  MF||'"'||                                            01768000
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              01769000
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    01770000
*                  ' "S",'||                 /* VALID KEYWORD */        01771000
*                  ' "L",'||                 /* VALID KEYWORD */        01772000
*                  ' OR "E".';               /* VALID KEYWORD */        01773000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          01774000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01775000
*              ZMACRET=8;                    /* MACRO ERROR */          01776000
*                END;                                                   01777000
*          END;                                                         01778000
*    END;                                                               01779000
*/********************************************************************/ 01780000
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 01781000
*/********************************************************************/ 01782000
*  ZC='OFF';                                 /* DEFAULT FLAG OFF */     01783000
*/********************************************************************/ 01784000
*/***PD.P02 DEFAULT ECHO                                             */ 01785000
*/********************************************************************/ 01786000
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 01787000
*  IF XMF^='L'                                                          01788000
*    THEN                                                               01789000
*      DO;                                   /* FULL SYNTAX CHECK */    01790000
*        ANS('/*DEFAULT(S): */')                                        01791000
*           NORESCAN COL(MACLMAR+5);                                    01792000
*/*PD.KMEKY03 NAME, RQD INPUT, ME KEYS -NON-XVARIABLE KEY------------*/ 01793000
*  XPRIMIN='';                               /* RESET XVARIABLE */      01794000
*  IF FIRST^=''                              /* CHECK ME KEY */         01795000
*    THEN                                                               01796000
*      DO;                                   /* VALID ME KEY */         01797000
*        XPRIMIN='FIRST';                    /* SET XVAR1 */            01798000
*        XFIRST='FIRST';                     /* SET XVAR */             01799000
*      END;                                                             01800000
*/*PD.KMEKY04 NAME, RQD INPUT, ME KEYS -NON-XVARIABLE KEY------------*/ 01801000
*  IF NEXT^=''                               /* CHECK ME KEY */         01802000
*    THEN                                                               01803000
*      DO;                                   /* VALID ME KEY */         01804000
*        IF XPRIMIN=''                       /* CHECK XVARIABLE */      01805000
*          THEN                                                         01806000
*            DO;                                                        01807000
*              XPRIMIN='NEXT';               /* SET XVAR1 */            01808000
*              XNEXT='NEXT';                 /* SET XVAR */             01809000
*            END;                                                       01810000
*      END;                                                             01811000
*/*PD.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01812000
*  IF DDNAME^=''                             /* CHECK ME KEY */         01813000
*    THEN                                                               01814000
*      DO;                                                              01815000
*        IF XPRIMIN=''                       /* CHECK XVARIABLE */      01816000
*          THEN                                                         01817000
*            DO;                             /* VALID ME KEY */         01818000
*              XPRIMIN='DDNAME';             /* SET XVAR1 */            01819000
*            END;                                                       01820000
*      END;                                                             01821000
*/*PD.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01822000
*  IF DCBPTR^=''                             /* CHECK ME KEY */         01823000
*    THEN                                                               01824000
*      DO;                                                              01825000
*        IF XPRIMIN=''                       /* CHECK XVARIABLE */      01826000
*          THEN                                                         01827000
*            DO;                             /* VALID ME KEY */         01828000
*              XPRIMIN='DCBPTR';             /* SET XVAR1 */            01829000
*            END;                                                       01830000
*      END;                                                             01831000
*/*PD.KMEKY07 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 01832000
*  IF XPRIMIN=''                             /* CHECK XVARIABLE */      01833000
*    THEN                                                               01834000
*      DO;                                                              01835000
*        XPRIMIN='FIRST';                                               01836000
*        ZC='ON';                            /* DEFAULT FLAG ON */      01837000
*      END;                                                             01838000
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01839000
*  IF XPRIMIN='FIRST'                        /* CHECK FOR ME KEY */     01840000
*    THEN                                                               01841000
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01842000
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01843000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01844000
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01845000
*  IF XPRIMIN='NEXT'                         /* CHECK FOR ME KEY */     01846000
*    THEN                                                               01847000
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01848000
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01849000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01850000
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01851000
*  IF XPRIMIN='DDNAME'                       /* CHECK FOR ME KEY */     01852000
*    THEN                                                               01853000
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01854000
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01855000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01856000
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01857000
*  IF XPRIMIN='DCBPTR'                       /* CHECK FOR ME KEY */     01858000
*    THEN                                                               01859000
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01860000
*/*PD.KMEKY11 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01861000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01862000
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01863000
*  XTCBPTR='';                                                          01864000
*  IF TCBPTR(1)=''                                                      01865000
*    THEN                                                               01866000
*      DO;                                                              01867000
*        XTCBPTR='0';                        /* SET DEFAULT */          01868000
*        ZC='ON';                            /* DEFAULT FLAG ON */      01869000
*      END;                                                             01870000
*/*PD.DFLT01 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01871000
*  IF XTCBPTR^=''                                                       01872000
*    THEN                                                               01873000
*      ANS('/* TCBPTR('||                                               01874000
*          XTCBPTR||                                                    01875000
*          ')*/')                                                       01876000
*          NORESCAN COL(MACLMAR+5);                                     01877000
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     01878000
*    THEN                                                               01879000
*      ANS('/* NONE. */')                                               01880000
*         NORESCAN COL(MACLMAR+5);                                      01881000
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 01882000
*      END;                                                             01883000
*/********************************************************************/ 01884000
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 01885000
*/********************************************************************/ 01886000
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 01887000
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        01888000
*                                                                       01889000
*  IF SYSASCE=''                                                        01890000
*    THEN                                                               01891000
*      DO;                                                              01892000
*        IF SYSSPLV=''                                                  01893000
*          THEN                                                         01894000
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     01895000
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 01896000
*          THEN                                                         01897000
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     01898000
*          ELSE                                                         01899000
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      01900000
*      END;                                                             01901000
*/********************************************************************/ 01902000
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 01903000
*/********************************************************************/ 01904000
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 01905000
*  IF XMF^='L'                                                          01906000
*    THEN                                                               01907000
*      DO;                                   /* FULL SYNTAX CHECK */    01908000
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 01909000
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    01910000
*    THEN                                                               01911000
*      DO;                                                              01912000
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'|| /**PPOSP* MSG*/            01913000
*            ' "'||MACLIST||'"'||                                       01914000
*            ' CANNOT BE USED.'||                                       01915000
*            ' NO POSITIONAL ARGUMENTS'||                               01916000
*            ' ARE ALLOWED.';                                           01917000
*        ANS MSG('?GETDSAB ---> '||ZMS);                                01918000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01919000
*        ZMACRET=8;                          /* MACRO ERROR */          01920000
*      END;                                                             01921000
*/*PG.KMEKY03 NAME, RQD INPUT, ME KEYS -NON-XVARIABLE KEY------------*/ 01922000
*  XPRIMIN='';                               /* RESET XVARIABLE */      01923000
*  IF FIRST^=''                              /* CHECK ME KEY */         01924000
*    THEN                                                               01925000
*      DO;                                   /* VALID ME KEY */         01926000
*        IF NUMBER(FIRST)>0                  /* CHECK SUBLISTS */       01927000
*          THEN                                                         01928000
*            DO;                                                        01929000
*              ZMS=' 8, "FIRST'||            /**KPOSP* MSG*/            01930000
*                  FIRST||                                              01931000
*                  '" "FIRST"'||                                        01932000
*                  ' CANNOT HAVE ANY ARGUMENTS.';                       01933000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          01934000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01935000
*              ZMACRET=8;                    /* MACRO ERROR */          01936000
*            END;                                                       01937000
*        XPRIMIN='FIRST';                    /* SET XVAR1 */            01938000
*        XFIRST='''FIRST''';                 /* SET XVAR */             01939000
*        ZXPRIMIN='INPUT';                   /* SET IN/OUTPUT */        01940000
*        ZXFIRST='INPUT';                    /* SET IN/OUTPUT */        01941000
*      END;                                                             01942000
*/*PG.KMEKY04 NAME, RQD INPUT, ME KEYS -NON-XVARIABLE KEY------------*/ 01943000
*  IF NEXT^=''                               /* CHECK ME KEY */         01944000
*    THEN                                                               01945000
*      DO;                                   /* VALID ME KEY */         01946000
*        IF NUMBER(NEXT)>0                   /* CHECK SUBLISTS */       01947000
*          THEN                                                         01948000
*            DO;                                                        01949000
*              ZMS=' 8, "NEXT'||             /**KPOSP* MSG*/            01950000
*                  NEXT||                                               01951000
*                  '" "NEXT"'||                                         01952000
*                  ' CANNOT HAVE ANY ARGUMENTS.';                       01953000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          01954000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01955000
*              ZMACRET=8;                    /* MACRO ERROR */          01956000
*            END;                                                       01957000
*        IF XPRIMIN=''                       /* CHECK XVARIABLE */      01958000
*          THEN                                                         01959000
*            DO;                                                        01960000
*              XPRIMIN='NEXT';               /* SET XVAR1 */            01961000
*              XNEXT='''NEXT''';             /* SET XVAR */             01962000
*              ZXPRIMIN='INPUT';             /* SET IN/OUTPUT */        01963000
*              ZXNEXT='INPUT';               /* SET IN/OUTPUT */        01964000
*            END;                                                       01965000
*          ELSE                                                         01966000
*            DO;                                                        01967000
*              ZMS=' 8, "NEXT'||             /**KMEKP* MSG*/            01968000
*                  '"'||                                                01969000
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'||                01970000
*                  XPRIMIN||                                            01971000
*                  '" KEY.';                                            01972000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          01973000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01974000
*              ZMACRET=8;                    /* MACRO ERROR */          01975000
*            END;                                                       01976000
*      END;                                                             01977000
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01978000
*  IF DDNAME^=''                             /* CHECK ME KEY */         01979000
*    THEN                                                               01980000
*      DO;                                                              01981000
*        IF NUMBER(DDNAME)>1                 /* CHECK SUBLISTS */       01982000
*          THEN                                                         01983000
*            DO;                                                        01984000
*              ZMS=' 8, "DDNAME'||           /**KPOSP* MSG*/            01985000
*                  DDNAME||                                             01986000
*                  '" "DDNAME"'||                                       01987000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        01988000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          01989000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01990000
*              ZMACRET=8;                    /* MACRO ERROR */          01991000
*            END;                                                       01992000
*        IF XPRIMIN=''                       /* CHECK XVARIABLE */      01993000
*          THEN                                                         01994000
*            DO;                             /* VALID ME KEY */         01995000
*              XPRIMIN='DDNAME';             /* SET XVAR1 */            01996000
*              XDDNAME=DDNAME(1);            /* SET XVAR2 */            01997000
*              ZXPRIMIN='INPUT';             /* SET IN/OUTPUT */        01998000
*              ZXDDNAME='INPUT';             /* SET IN/OUTPUT */        01999000
*              IF DDNAME(1)=''               /* CHECK ME KEY */         02000000
*                THEN                                                   02001000
*                  DO;                                                  02002000
*                    ZXPRIMIN='';            /* RESET IN/OUTPUT */      02003000
*                    ZXDDNAME='';            /* RESET IN/OUTPUT */      02004000
*                    ZMS=' 8,  '||                                      02005000
*                        ' "DDNAME" KEY AND ITS ARGUMENT'||             02006000
*                        ' ARE REQUIRED.';   /**KRQDP* MSG*/            02007000
*                    ANS MSG('?GETDSAB ---> '||ZMS);                    02008000
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    02009000
*                    ZMACRET=8;              /* MACRO ERROR */          02010000
*                  END;                                                 02011000
*            END;                                                       02012000
*          ELSE                                                         02013000
*            DO;                                                        02014000
*              ZMS=' 8, "DDNAME'||           /**KMEKP* MSG*/            02015000
*                  DDNAME||'"'||                                        02016000
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'||                02017000
*                  XPRIMIN||                                            02018000
*                  '" KEY.';                                            02019000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          02020000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02021000
*              ZMACRET=8;                    /* MACRO ERROR */          02022000
*            END;                                                       02023000
*      END;                                                             02024000
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02025000
*  IF DCBPTR^=''                             /* CHECK ME KEY */         02026000
*    THEN                                                               02027000
*      DO;                                                              02028000
*        IF NUMBER(DCBPTR)>1                 /* CHECK SUBLISTS */       02029000
*          THEN                                                         02030000
*            DO;                                                        02031000
*              ZMS=' 8, "DCBPTR'||           /**KPOSP* MSG*/            02032000
*                  DCBPTR||                                             02033000
*                  '" "DCBPTR"'||                                       02034000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02035000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          02036000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02037000
*              ZMACRET=8;                    /* MACRO ERROR */          02038000
*            END;                                                       02039000
*        IF XPRIMIN=''                       /* CHECK XVARIABLE */      02040000
*          THEN                                                         02041000
*            DO;                             /* VALID ME KEY */         02042000
*              XPRIMIN='DCBPTR';             /* SET XVAR1 */            02043000
*              XDCBPTR=DCBPTR(1);            /* SET XVAR2 */            02044000
*              ZXPRIMIN='INPUT';             /* SET IN/OUTPUT */        02045000
*              ZXDCBPTR='INPUT';             /* SET IN/OUTPUT */        02046000
*              IF DCBPTR(1)=''               /* CHECK ME KEY */         02047000
*                THEN                                                   02048000
*                  DO;                                                  02049000
*                    ZXPRIMIN='';            /* RESET IN/OUTPUT */      02050000
*                    ZXDCBPTR='';            /* RESET IN/OUTPUT */      02051000
*                    ZMS=' 8,  '||                                      02052000
*                        ' "DCBPTR" KEY AND ITS ARGUMENT'||             02053000
*                        ' ARE REQUIRED.';   /**KRQDP* MSG*/            02054000
*                    ANS MSG('?GETDSAB ---> '||ZMS);                    02055000
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    02056000
*                    ZMACRET=8;              /* MACRO ERROR */          02057000
*                  END;                                                 02058000
*            END;                                                       02059000
*          ELSE                                                         02060000
*            DO;                                                        02061000
*              ZMS=' 8, "DCBPTR'||           /**KMEKP* MSG*/            02062000
*                  DCBPTR||'"'||                                        02063000
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'||                02064000
*                  XPRIMIN||                                            02065000
*                  '" KEY.';                                            02066000
*              ANS MSG('?GETDSAB ---> '||ZMS);                          02067000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02068000
*              ZMACRET=8;                    /* MACRO ERROR */          02069000
*            END;                                                       02070000
*      END;                                                             02071000
*/*PG.KMEKY08 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 02072000
*  IF XPRIMIN=''                             /* CHECK XVARIABLE */      02073000
*    THEN                                                               02074000
*      DO;                                                              02075000
*        XPRIMIN='FIRST';                    /* SET DEFAULT */          02076000
*        XFIRST='0';                         /* SET DEFAULT */          02077000
*        ZXPRIMIN='';                        /* RESET IN/OUTPUT */      02078000
*        ZXFIRST='';                         /* RESET IN/OUTPUT */      02079000
*        ZMS=' 8, ONE OF THE FOLLOWING'||    /**KMERP* MSG*/            02080000
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'||                          02080600
*            ' REQUIRED:'||                                             02081200
*            ' "FIRST",'||                   /* VALID ME KEY */         02082000
*            ' "NEXT",'||                    /* VALID ME KEY */         02083000
*            ' "XDDNAME",'||                 /* VALID ME KEY */         02084000
*            ' OR "XDCBPTR".';               /* VALID ME KEY */         02085000
*        ANS MSG('?GETDSAB ---> '||ZMS);                                02086000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02087000
*        ZMACRET=8;                          /* MACRO ERROR */          02088000
*      END;                                                             02089000
*/*PG.KXVAR01 NAME, RQD INOUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02090000
*  IF NUMBER(DSABPTR)>1                      /* CHECK POSITIONALS */    02091000
*    THEN                                                               02092000
*      DO;                                                              02093000
*        ZMS=' 8, "DSABPTR'||                /**KPOSP* MSG*/            02094000
*            DSABPTR||                                                  02095000
*            '" "DSABPTR"'||                                            02096000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02097000
*        ANS MSG('?GETDSAB ---> '||ZMS);                                02098000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02099000
*        ZMACRET=8;                          /* MACRO ERROR */          02100000
*      END;                                                             02101000
*/*PG.KXVAR03 NAME, RQD INOUT, KEYS -XVARIABLE-----------------------*/ 02102000
*  XDSABPTR=DSABPTR(1);                      /* SET XVARIABLE */        02103000
*  IF DSABPTR(1)=''                          /* CHECK FOR NULL */       02104000
*   THEN                                                                02105000
*    DO;                                     /* KEY IS REQUIRED */      02106000
*        ZXDSABPTR='';                       /* RESET IN/OUTPUT */      02107000
*        ZMS=' 8,  '||                                                  02108000
*            ' "DSABPTR" KEY AND ITS ARGUMENT'||                        02109000
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            02110000
*        ANS MSG('?GETDSAB ---> '||ZMS);                                02111000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02112000
*        ZMACRET=8;                          /* MACRO ERROR */          02113000
*    END;                                                               02114000
*  ELSE                                                                 02115000
*    ZXDSABPTR='INOUT';                      /* SET IN/OUTPUT */        02116000
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02117000
*  IF TCBPTR='TCBPTR' | TCBPTR='()'          /*CHECK ENTRY*/            02118000
*    THEN                                                               02119000
*      DO;                                                              02120000
*        ZMS=' 8, THE "TCBPTR" KEY'||        /**KOPTP* MSG*/            02121000
*            ' MUST CONTAIN ONE'||                                      02122000
*            ' (OR MORE) ARGUMENT(S).';                                 02123000
*        ANS MSG('?GETDSAB ---> '||ZMS);                                02124000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02125000
*        ZMACRET=8;                          /* MACRO ERROR */          02126000
*      END;                                                             02127000
*  IF NUMBER(TCBPTR)>1                       /* CHECK POSITIONALS */    02128000
*    THEN                                                               02129000
*      DO;                                                              02130000
*        ZMS=' 8, "TCBPTR'||                 /**KPOSP* MSG*/            02131000
*            TCBPTR||                                                   02132000
*            '" "TCBPTR"'||                                             02133000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02134000
*        ANS MSG('?GETDSAB ---> '||ZMS);                                02135000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02136000
*        ZMACRET=8;                          /* MACRO ERROR */          02137000
*      END;                                                             02138000
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02139000
*  ZXTCBPTR='INPUT';                         /* SET IN/OUTPUT */        02140000
*  XTCBPTR='0';                              /* SET DEFAULT */          02141000
*  IF TCBPTR(1)^=''                          /* CHECK FOR NULL */       02142000
*    THEN                                                               02143000
*      XTCBPTR=TCBPTR(1);                    /* SET XVARIABLE */        02144000
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02145000
*  IF RETCODE='RETCODE' | RETCODE='()'       /*CHECK ENTRY*/            02146000
*    THEN                                                               02147000
*      DO;                                                              02148000
*        ZMS=' 8, THE "RETCODE" KEY'||       /**KOPTP* MSG*/            02149000
*            ' MUST CONTAIN ONE'||                                      02150000
*            ' (OR MORE) ARGUMENT(S).';                                 02151000
*        ANS MSG('?GETDSAB ---> '||ZMS);                                02152000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02153000
*        ZMACRET=8;                          /* MACRO ERROR */          02154000
*      END;                                                             02155000
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    02156000
*    THEN                                                               02157000
*      DO;                                                              02158000
*        ZMS=' 8, "RETCODE'||                /**KPOSP* MSG*/            02159000
*            RETCODE||                                                  02160000
*            '" "RETCODE"'||                                            02161000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02162000
*        ANS MSG('?GETDSAB ---> '||ZMS);                                02163000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02164000
*        ZMACRET=8;                          /* MACRO ERROR */          02165000
*      END;                                                             02166000
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02167000
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       02168000
*    THEN                                                               02169000
*      DO;                                                              02170000
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        02171000
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           02172000
*      END;                                                             02173000
*  ELSE                                                                 02174000
*    IF ZXRETCODE^=''                                                   02175000
*      THEN                                                             02176000
*        ZXRETCODE='';                       /* RESET OUTPUT */         02177000
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02178000
*  IF RSNCODE='RSNCODE' | RSNCODE='()'       /*CHECK ENTRY*/            02179000
*    THEN                                                               02180000
*      DO;                                                              02181000
*        ZMS=' 8, THE "RSNCODE" KEY'||       /**KOPTP* MSG*/            02182000
*            ' MUST CONTAIN ONE'||                                      02183000
*            ' (OR MORE) ARGUMENT(S).';                                 02184000
*        ANS MSG('?GETDSAB ---> '||ZMS);                                02185000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02186000
*        ZMACRET=8;                          /* MACRO ERROR */          02187000
*      END;                                                             02188000
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    02189000
*    THEN                                                               02190000
*      DO;                                                              02191000
*        ZMS=' 8, "RSNCODE'||                /**KPOSP* MSG*/            02192000
*            RSNCODE||                                                  02193000
*            '" "RSNCODE"'||                                            02194000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02195000
*        ANS MSG('?GETDSAB ---> '||ZMS);                                02196000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02197000
*        ZMACRET=8;                          /* MACRO ERROR */          02198000
*      END;                                                             02199000
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02200000
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       02201000
*    THEN                                                               02202000
*      DO;                                                              02203000
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        02204000
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           02205000
*      END;                                                             02206000
*  ELSE                                                                 02207000
*    IF ZXRSNCODE^=''                                                   02208000
*      THEN                                                             02209000
*        ZXRSNCODE='';                       /* RESET OUTPUT */         02210000
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 02211000
*      END;                                  /* END COMPLETE CHECKING*/ 02212000
*/********************************************************************/ 02213000
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 02214000
*/********************************************************************/ 02215000
*  IF ZMACRET = 0                                                       02216000
*    THEN                                                               02217000
*      DO;                                                              02218000
*/********************************************************************/ 02219000
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 02220000
*/********************************************************************/ 02221000
*  ANS(MACCONC||'LIST PUSH;') NORESCAN COL(MACLMAR);                    02222000
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         02223000
*    THEN                                                               02224000
*      ANS(MACCONC||'LIST OFF;') NORESCAN COL(MACLMAR);                 02225000
*    ELSE                                                               02226000
*      ANS(MACCONC||'LIST ON;')  NORESCAN COL(MACLMAR);                 02227000
*/********************************************************************/ 02228000
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 02229000
*  IF XMF^='L'                                                          02230000
*    THEN                                                               02231000
*      ANS('DO; /* GETDSAB-0 */')                                       02232000
*          NORESCAN COL(MACLMAR);                                       02233000
*/*PL.AL01 ?GETDSAB ARG MF=L PARAMETER LIST--------------------------*/ 02234000
*  IF XMF='L'                                                           02235000
*    THEN                                                               02236000
*      DO;                                                              02237000
*        ANS('DCL 1 '||XMFCTRL||' '||XMFATTR||', '||                    02238000
*            '/* ?GETDSAB ARG PARM LIST*/')                             02239000
*            NORESCAN COL(MACLMAR);                                     02240000
*/*PL.AL02  XTCBPTR PTR(31) INPUT------------------------------------*/ 02241000
*        ANS('2 '||XMFCTRL||                                            02242000
*            '_XTCBPTR@ PTR(31), '||                                    02243000
*            '/* INPUT PTR(31) */')                                     02244000
*            NORESCAN COL(MACLMAR);                                     02245000
*/*PL.AL02  XDCBPTR PTR(31) INPUT------------------------------------*/ 02246000
*        ANS('2 '||XMFCTRL||                                            02247000
*            '_XDCBPTR@ PTR(31), '||                                    02248000
*            '/* INPUT PTR(31) */')                                     02249000
*            NORESCAN COL(MACLMAR);                                     02250000
*/*PL.AL02  XDDNAME CHAR(8) INPUT------------------------------------*/ 02251000
*        ANS('2 '||XMFCTRL||                                            02252000
*            '_XDDNAME@ PTR(31), '||                                    02253000
*            '/* INPUT CHAR(8) */')                                     02254000
*            NORESCAN COL(MACLMAR);                                     02255000
*/*PL.AL02  XDSABPTR PTR(31) INOUT-----------------------------------*/ 02256000
*        ANS('2 '||XMFCTRL||                                            02257000
*            '_XDSABPTR@ PTR(31), '||                                   02258000
*            '/* INOUT PTR(31) */')                                     02259000
*            NORESCAN COL(MACLMAR);                                     02260000
*/*PL.AL04 **********************************************************/  02261000
*        ANS('2 * CHAR(0);')                                            02262000
*            NORESCAN COL(MACLMAR+2);                                   02263000
*/*PL.AL04  XTCBPTR INPUT--------------------------------------------*/ 02264000
*        ANS('DCL '||XMFCTRL||                                          02265000
*            '_XTCBPTR '||                                              02266000
*            'PTR(31) '||                                               02267000
*            ' BASED('||XMFCTRL||'_XTCBPTR@); '||                       02268000
*            '/*  INPUT */')                                            02269000
*            NORESCAN COL(MACLMAR+2);                                   02270000
*/*PL.AL04  XDCBPTR INPUT--------------------------------------------*/ 02271000
*        ANS('DCL '||XMFCTRL||                                          02272000
*            '_XDCBPTR '||                                              02273000
*            'PTR(31) '||                                               02274000
*            ' BASED('||XMFCTRL||'_XDCBPTR@); '||                       02275000
*            '/*  INPUT */')                                            02276000
*            NORESCAN COL(MACLMAR+2);                                   02277000
*/*PL.AL04  XDDNAME INPUT--------------------------------------------*/ 02278000
*        ANS('DCL '||XMFCTRL||                                          02279000
*            '_XDDNAME '||                                              02280000
*            'CHAR(8) '||                                               02281000
*            ' BASED('||XMFCTRL||'_XDDNAME@); '||                       02282000
*            '/*  INPUT */')                                            02283000
*            NORESCAN COL(MACLMAR+2);                                   02284000
*/*PL.AL04  XDSABPTR INOUT-------------------------------------------*/ 02285000
*        ANS('DCL '||XMFCTRL||                                          02286000
*            '_XDSABPTR '||                                             02287000
*            'PTR(31) '||                                               02288000
*            ' BASED('||XMFCTRL||'_XDSABPTR@); '||                      02289000
*            '/*  INOUT */')                                            02290000
*            NORESCAN COL(MACLMAR+2);                                   02291000
*      END;                                                             02292000
*/*PL.A01 MACRO WORK VARIABLES -------------------------------------*/  02293000
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  02294000
*  DEACT ZPRMLINE;                                                      02295000
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  02296000
*  DEACT ZNDX;                                                          02297000
*  ZNDX=MACINDEX(1:4);         /* MACINDEX LAST THREE DIGITS        */  02298000
*  DCL XVERSION CHAR;                                                   02299000
*  DEACT XVERSION;                                                      02300000
*  DCL XPLISTLEN CHAR;                                                  02301000
*  DEACT XPLISTLEN;                                                     02302000
*/*PL.A02 ?GETDSAB ARG PARAMETER LIST--------------------------------*/ 02303000
*  IF XMF^='L'                                                          02304000
*    THEN                                                               02305000
*      DO;                                                              02306000
*/*PL.A03 ?GETDSAB ARG PARAMETER LIST--------------------------------*/ 02307000
*        IF XMF='S'                                                     02308000
*          THEN                                                         02309000
*            XMFCTRL='#ZPLIST';                                         02310000
*/*PL.A04 ?GETDSAB ARG PARAMETER LIST--------------------------------*/ 02311000
*        ZPRMLINE='DCL 1 #Z'||ZNDX||' DEF('||XMFCTRL||'),'||            02312000
*                 ' /* ?GETDSAB ARG PARM LIST*/';                       02313000
*/*PL.A05  XTCBPTR PTR(31) INPUT-------------------------------------*/ 02314000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             02315000
*                 '_XTCBPTR@ PTR(31), '||                               02316000
*                 '/*  PTR(31) INPUT */';                               02317000
*/*PL.A05  XDCBPTR PTR(31) INPUT-------------------------------------*/ 02318000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             02319000
*                 '_XDCBPTR@ PTR(31), '||                               02320000
*                 '/*  PTR(31) INPUT */';                               02321000
*/*PL.A05  XDDNAME CHAR(8) INPUT-------------------------------------*/ 02322000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             02323000
*                 '_XDDNAME@ PTR(31), '||                               02324000
*                 '/*  CHAR(8) INPUT */';                               02325000
*/*PL.A05  XDSABPTR PTR(31) INOUT------------------------------------*/ 02326000
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             02327000
*                 '_XDSABPTR@ PTR(31), '||                              02328000
*                 '/*  PTR(31) INOUT */';                               02329000
*/*PL.A08 -----------------------------------------------------------*/ 02330000
*        ZPRMNUM=ZPRMNUM+1;                                             02331000
*        ZPRM(ZPRMNUM)=ZPRMLINE||' 2 * CHAR(0);';                       02332000
*/*PL.A09 ?GETDSAB ARG PARAMETER LIST SIZE---------------------------*/ 02333000
*        ZPLLEN=16;                                                     02334000
*        IF ZPRMMAX<ZPLLEN                                              02335000
*           & XMF^='E'                                                  02336000
*          THEN                                                         02337000
*            ZPRMMAX=ZPLLEN;                                            02338000
*/*PL.A10 -----------------------------------------------------------*/ 02339000
*      END;                                                             02340000
*/*PI.A01 XMF^='L' --------------------------------------------------*/ 02341000
*  IF XMF^='L'                                                          02342000
*    THEN                                                               02343000
*      DO;                                   /* LOAD PARAMETER LIST */  02344000
*/*PI.A03 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 02345000
*      ANS('#Z'||ZNDX||'(1:16)=''''B;'||                                02346000
*          '/* CLEAR PARAMETER AREA */')                                02347000
*          NORESCAN COL(MACLMAR);                                       02348000
*/*PI.A06 ADDR(XTCBPTR) PTR(31)--------------------------------------*/ 02349000
*        IF ZXTCBPTR^=''                                                02350000
*          THEN                                                         02351000
*            IF XTCBPTR^='0'                                            02352000
*              THEN                                                     02353000
*                ANS('#Z'||ZNDX||'_XTCBPTR@='||                         02354000
*                    'ADDR('||XTCBPTR||');'||                           02355000
*                    '/* XTCBPTR PTR(31) */')                           02356000
*                    NORESCAN COL(MACLMAR);                             02357000
*/*PI.A06 ADDR(XDCBPTR) PTR(31)--------------------------------------*/ 02358000
*        IF ZXDCBPTR^=''                                                02359000
*          THEN                                                         02360000
*            ANS('#Z'||ZNDX||'_XDCBPTR@='||                             02361000
*                'ADDR('||XDCBPTR||');'||                               02362000
*                '/* XDCBPTR PTR(31) */')                               02363000
*                NORESCAN COL(MACLMAR);                                 02364000
*/*PI.A06 ADDR(XDDNAME) CHAR(8)--------------------------------------*/ 02365000
*        IF ZXDDNAME^=''                                                02366000
*          THEN                                                         02367000
*            ANS('#Z'||ZNDX||'_XDDNAME@='||                             02368000
*                'ADDR('||XDDNAME||');'||                               02369000
*                '/* XDDNAME CHAR(8) */')                               02370000
*                NORESCAN COL(MACLMAR);                                 02371000
*/*PI.A06 ADDR(XDSABPTR) PTR(31)-------------------------------------*/ 02372000
*        IF ZXDSABPTR^=''                                               02373000
*          THEN                                                         02374000
*            ANS('#Z'||ZNDX||'_XDSABPTR@='||                            02375000
*                'ADDR('||XDSABPTR||');'||                              02376000
*                '/* XDSABPTR PTR(31) */')                              02377000
*                NORESCAN COL(MACLMAR);                                 02378000
*/*PI.A22 INVOKE FUNCTION--------------------------------------------*/ 02379000
*              IF NUMBER(RSNCODE)>0                                     02380000
*                THEN                                                   02381000
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       02382000
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           02383000
*              ANS('GPR01P=ADDR(#Z'||ZNDX||');'||                       02384000
*                  '/* ?GETDSAB LIST PARMS */')                         02385000
*                  NORESCAN COL(MACLMAR);                               02386000
*              IF SYSASCE^='P'                                          02387000
*                THEN                                                   02388000
*                  ANS('SAR(GPR01P,ALET(#Z'||ZNDX||'));'||              02389000
*                      '/* ?GETDSAB LIST PARMS */')                     02390000
*                      NORESCAN COL(MACLMAR);                           02391000
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  02392000
*IF XPRIMIN = 'NEXT' THEN DO;                                           02393000
*ANS('RFY (GPR15F,GPR00F) RSTD;') NORESCAN COL(MACLMAR);                02394000
*ANS('GPR00F = 0;'||'/* Initialize error reason code */') NORESCAN      02395000
*   COL(MACLMAR);                                                       02396000
*ANS('IF '||XDSABPTR||' = 0 THEN'||'/* '||XDSABPTR||' is null */')      02397000
*   NORESCAN COL(MACLMAR);                                              02398000
*ANS('DO;') NORESCAN COL(MACLMAR+2);                                    02399000
*ANS('GPR15F = 12;'||'/* Set error return code */') NORESCAN            02400000
*   COL(MACLMAR+4);                                                     02401000
*ANS('GPR00F = 1220;'||'/* Set reason code */') NORESCAN                02402000
*   COL(MACLMAR+4);                                                     02403000
*ANS(XDSABPTR||' = 0;'||'/* Clear next DSAB pointer */') NORESCAN       02404000
*   COL(MACLMAR+4);                                                     02405000
*ANS('END;') NORESCAN COL(MACLMAR+2);                                   02406000
*ANS('ELSE'||'/* '||XDSABPTR||' is not null */') NORESCAN               02407000
*   COL(MACLMAR);                                                       02408000
*ANS('IF '||XDSABPTR||'->DSABID ^= ''DSAB'' THEN'||'/* '||XDSABPTR||    02409000
*    'does not point to valid DSAB */') NORESCAN COL(MACLMAR+2);        02410000
*ANS('DO;') NORESCAN COL(MACLMAR+4);                                    02411000
*ANS('GPR15F = 12;'||'/* Set error return code */') NORESCAN            02412000
*   COL(MACLMAR+6);                                                     02413000
*ANS('GPR00F = 1220;'||'/* Set reason code */') NORESCAN                02414000
*   COL(MACLMAR+6);                                                     02415000
*ANS(XDSABPTR||' = 0;'||'/* Clear next DSAB pointer */') NORESCAN       02416000
*   COL(MACLMAR+6);                                                     02417000
*ANS('END;') NORESCAN COL(MACLMAR+4);                                   02418000
*ANS('ELSE'||'/* '||XDSABPTR||' points to valid DSAB */') NORESCAN      02419000
*   COL(MACLMAR+2);                                                     02420000
*ANS('IF '||XDSABPTR||'->DSABFCHN = 0 THEN'||'/* Current DSAB '||       02421000
*   'is last on chain */') NORESCAN COL(MACLMAR+4);                     02422000
*ANS('DO;') NORESCAN COL(MACLMAR+6);                                    02423000
*ANS('GPR15F = 4;'||'/* Set error return code */') NORESCAN             02424000
*   COL(MACLMAR+8);                                                     02425000
*ANS(XDSABPTR||' = 0;'||'/* Clear next DSAB pointer */') NORESCAN       02426000
*   COL(MACLMAR+8);                                                     02427000
*ANS('END;') NORESCAN COL(MACLMAR+6);                                   02428000
*ANS('ELSE'||'/* NEXT DSAB is available */') NORESCAN                   02429000
*   COL(MACLMAR+4);                                                     02430000
*ANS('DO;') NORESCAN COL(MACLMAR+6);                                    02431000
*ANS(XDSABPTR||' = DSABFCHN;'||'/* Save NEXT DSAB pointer */')          02432000
*   NORESCAN COL(MACLMAR+8);                                            02433000
*ANS('GPR15F = 0;'||'/* Set successful return code */') NORESCAN        02434000
*   COL(MACLMAR+8);                                                     02435000
*ANS('END;') NORESCAN COL(MACLMAR+6);                                   02436000
*ANS('RFY (GPR15F,GPR00F) UNRSTD;') NORESCAN COL(MACLMAR);              02437000
*END;                                                                   02438000
*ELSE DO;                                                               02439000
*ANS('RFY (GPR15F,GPR00F) RSTD;') NORESCAN COL(MACLMAR);                02440000
*ANS('GPR15F = (JESDACA+80)->I031P;'||'/* Load service address */')     02440200
*  NORESCAN COL(MACLMAR+4);                                   /* @T1A*/ 02440400
*ANS('IF (JESDACA+4)->I008P < ''02''X |' ||                             02440600
*  '/* DACA is downlevel           */')                                 02440800
*  NORESCAN COL(MACLMAR);                                     /* @T1C*/ 02441000
*ANS('   GPR15F = 0 THEN' ||                                            02441200
*  '/* Service module is not found */')                                 02442000
*  NORESCAN COL(MACLMAR);                                     /* @T1A*/ 02443000
*ANS('DO;') NORESCAN COL(MACLMAR+2);                                    02444000
*ANS('GPR15F = 16;'||'/* Set error return code */') NORESCAN            02445000
*  COL(MACLMAR+4);                                                      02446000
*ANS('GPR00F = 0;'||'/* Set error reason code */') NORESCAN             02447000
*  COL(MACLMAR+4);                                                      02448000
*ANS('END;') NORESCAN COL(MACLMAR+2);                                   02449000
*ANS('ELSE'||'/* Service module is found */') NORESCAN COL(MACLMAR);    02450000
*                                                            /* 1@T1D*/ 02452000
*ANS('GEN (BASSM 14,15);'||'/* Invoke service */') NORESCAN             02454000
*   COL(MACLMAR+4);                                                     02455000
*                                                            /* 1@T1D*/ 02455500
*ANS('RFY I008P;') NORESCAN COL(MACLMAR);                               02456000
*ANS('RFY I031P;') NORESCAN COL(MACLMAR);                               02456500
*ANS('RFY (GPR15F,GPR00F) UNRSTD;') NORESCAN COL(MACLMAR);              02457000
*END;                                                                   02458000
*IF INDEX(EHAREGS,'00F') = 0 THEN     /* No register 0 yet...    @01A*/ 02458300
*  EHAREGS=EHAREGS||'00F';            /* Using register 0        @T1A*/ 02458600
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  02459000
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         02460000
*              IF NUMBER(RETCODE)>0                                     02461000
*                THEN                                                   02462000
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       02463000
*/*PO.L08 XRETCODE  RETURN CODE--------------------------------------*/ 02464000
*              IF NUMBER(RETCODE)>0                                     02465000
*                THEN                                                   02466000
*                    ANS(XRETCODE||                                     02467000
*                     '=GPR15F; /* SET RETURN CODE */')                 02468000
*                      NORESCAN COL(MACLMAR);                           02469000
*/*PO.L09 XRSNCODE  REASON CODE--------------------------------------*/ 02470000
*              IF NUMBER(RSNCODE)>0                                     02471000
*                THEN                                                   02472000
*                    ANS(XRSNCODE||                                     02473000
*                     '=GPR00F; /* SET REASON CODE */')                 02474000
*                      NORESCAN COL(MACLMAR);                           02475000
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 02476000
*              IF NUMBER(RSNCODE)>0                                     02477000
*                THEN                                                   02478000
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         02479000
*              IF NUMBER(RETCODE)>0                                     02480000
*                THEN                                                   02481000
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         02482000
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 02483000
*      END;                                                             02484000
*/*PO.L13 GETDSAB USAGE INDICATOR------------------------------------*/ 02485000
*  ZGETDSAB='YES';                           /* SET GETDSAB USED */     02486000
*/*PO.L15 END OF EXECUTABLE GETDSAB-0 MACRO--------------------------*/ 02487000
*  IF XMF^='L'                                                          02488000
*    THEN                                                               02489000
*      ANS('END; /* GETDSAB-0 */')                                      02490000
*          NORESCAN COL(MACLMAR);                                       02491000
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 02492000
*  ANS(MACCONC||'LIST POP;') NORESCAN COL(MACLMAR);                     02493000
*/*PO.L17 END OF GETDSAB MACRO---------------------------------------*/ 02494000
*  ANS(MACCONC||'SPACE;') NORESCAN COL(MACLMAR);                        02495000
*  ANS(' ') NORESCAN COL(MACLMAR);                                      02496000
*/*******************************************************************/  02497000
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  02498000
*/*******************************************************************/  02499000
*      END;                                                             02500000
*/*******************************************************************/  02501000
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  02502000
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  02503000
*/*******************************************************************/  02504000
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  02505000
*    THEN                                                               02506000
*      DO;                                                              02507000
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       02508000
*                                      DOUBLEWORD MULTIPLES        */   02509000
*/*******************************************************************/  02510000
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  02511000
*/*******************************************************************/  02512000
*        IF XMF ^= 'M' & XMF ^= 'E'                                     02513000
*          THEN                                                         02514000
*            DO;                                                        02515000
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  02516000
*                THEN                                                   02517000
*                  DO;                                                  02518000
*                    ANS('?EPILOG                                       02519000
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        02520000
*                    EHALIST=EHALIST||',AMG,';                          02521000
*                  END;                                                 02522000
*            END;                                                       02523000
*/*******************************************************************/  02524000
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  02525000
*/*******************************************************************/  02526000
*        IF XMF ^= 'M' & XMF ^= 'E'                                     02527000
*          THEN                                                         02528000
*            DO;                                                        02529000
*              IF ZPRMMAX>EHAMAXLEN                                     02530000
*                THEN                                                   02531000
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  02532000
*            END;                                                       02533000
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 02534000
*          ANS('?EPILOG STRING('''||ZPRM(ZI)||''');')                   02535000
*              COL(MACLMAR);                                            02536000
*        END;                                                           02537000
*      END;                                                             02538000
*/*-----------------------------------------------------------------*/  02539000
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  02540000
*/*        BY ?EPILOG                                               */  02541000
*/*-----------------------------------------------------------------*/  02542000
*        IF INDEX(EHAREGS,'01P')=0                                      02543000
*          THEN                                                         02544000
*            EHAREGS=EHAREGS||'01P'; /* GPR01P                      */  02545000
*        IF INDEX(EHAREGS,'00F')=0                                      02546000
*          & NUMBER(RSNCODE)>0                                          02547000
*          THEN                                                         02548000
*            EHAREGS=EHAREGS||'00F'; /* GPR00F                      */  02549000
*        IF INDEX(EHAREGS,'15F')=0                                      02550000
*          THEN                                                         02551000
*            EHAREGS=EHAREGS||'15F'; /* GPR15F                      */  02552000
*  RETURN CODE(ZMACRET);                                                02553000
*%END GETDSAB;                                                          02554000
