*%IEFDDSRV: MACRO KEYS(PLISTVER,RETRIEVE,DEVENTRY,DDNAME,DSABPTR,       00000100
*                 DCBPTR,ACBPTR,SUBPOOL,DEVAREA,TCBPTR,RETCODE,         00000200
*                 RSNCODE,MF);                                          00000300
*/**** START OF SPECIFICATIONS **************************************** 00000400
*                                                                     * 00000500
*                                                                     * 00000600
*01* MACRO NAME:  IEFDDSRV                              -02/10/94-<0> * 00000700
*                                                                     * 00000800
*                                                                     * 00000900
*01* DESCRIPTIVE NAME:  DD Service                                    * 00001000
*                                                                     * 00001100
*01* PROPRIETARY STATEMENT:                                           * 00001200
*                                                                     * 00001300
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001400
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00001500
*     5655-068 (C) COPYRIGHT IBM CORP. 1994                           * 00001600
*                                                                     * 00001700
* STATUS= HBB5520                                                     * 00001800
*                                                                     * 00001900
*                                                                     * 00002000
*                                                                     * 00002100
*01* FUNCTION:                                                        * 00002200
*                                                                     * 00002300
*                                                                     * 00002400
*      The IEFDDSRV service provides DD related information to its    * 00002500
*      caller.  The IEFDDSRV service currently performs the following * 00002600
*      function:                                                      * 00002700
*                                                                     * 00002800
*                                                                     * 00002900
*      o   RETRIEVE DEVENTRY - Return the UCB addresses of the        * 00003000
*          devices allocated to the input DD request.  For DDs which  * 00003100
*          were allocated with the NOCAPTURE option, the addresses of * 00003200
*          the Actual UCBs will be returned; otherwise, the addresses * 00003300
*          of the Captured UCB will be returned for above 16MB        * 00003400
*          devices and the addresses of the Actual UCBs for below     * 00003500
*          16MB devices.                                              * 00003600
*                                                                     * 00003700
*                                                                     * 00003800
*                                                                     * 00003900
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00004000
*                                                                     * 00004100
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00004200
*                                                                     * 00004300
*01* ENVIRONMENT:                                                     * 00004400
*                                                                     * 00004500
*                                                                     * 00004600
*      Minimum authorization: Problem or Supervisor state.  Any PSW   * 00004700
*                        key.                                         * 00004800
*                                                                     * 00004900
*      Dispatchable unit mode: Task mode.                             * 00005000
*                                                                     * 00005100
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00005200
*                                                                     * 00005300
*      AMODE:            24- or 31-bit.                               * 00005400
*                                                                     * 00005500
*      ASC mode:         Primary or Access Register.                  * 00005600
*                                                                     * 00005700
*      Interrupt status: Enabled for I/O and external interrupts.     * 00005800
*                                                                     * 00005900
*      Locks:            Authorized callers may hold locks lower in   * 00006000
*                        the hierarchy than the local lock.           * 00006100
*                        Non-authorized callers cannot hold any       * 00006200
*                        locks.                                       * 00006300
*                                                                     * 00006400
*      Control parameters: Control parameters must be in the primary  * 00006500
*                        address space.                               * 00006600
*                                                                     * 00006700
*                                                                     * 00006800
*                                                                     * 00006900
*01* PROGRAMMING REQUIREMENTS:                                        * 00007000
*                                                                     * 00007100
*    The user should provide or inherit the appropriate serialization * 00007200
*    on the SYSZTIOT resource to maintain a stable DSAB/TIOT          * 00007300
*    environment during the execution of the DD Service and when the  * 00007400
*    returned information is used.  See "Serialization of Resources"  * 00007500
*    under "Programming considerations when using DYNALLOC" in the    * 00007600
*    MVS/ESA SP V5 Authorized Assembler Programming Guide for further * 00007700
*    information.  For non-authorized callers, this service will      * 00007800
*    ensure the TIOT resource is properly serialized during its       * 00007900
*    execution.                                                       * 00008000
*                                                                     * 00008100
*01* RESTRICTIONS:                                                    * 00008200
*                                                                     * 00008300
*    When running in cross memory mode, the DSAB/TIOT information is  * 00008400
*    obtained from the user's home address space.                     * 00008500
*                                                                     * 00008600
*    The user must ensure the UCBs are not dynamically deleted.       * 00008700
*                                                                     * 00008800
*    The returned UCB addresses are only valid if the devices remain  * 00008900
*    allocated after the execution of the DD service.                 * 00009000
*                                                                     * 00009100
*    The returned UCB addresses may be either 31-bit accessible       * 00009200
*    Actual UCB addresses or 24-bit accessible Actual or Captured UCB * 00009300
*    addresses.  A Captured UCB address is only valid in the address  * 00009400
*    space in which it was originally allocated.                      * 00009500
*                                                                     * 00009600
*01* INPUT REGISTER INFORMATION:                                      * 00009700
*                                                                     * 00009800
*    There are no input register requirements for issuing the         * 00009900
*    IEFDDSRV macro.                                                  * 00010000
*                                                                     * 00010100
*01* OUTPUT REGISTER INFORMATION:                                     * 00010200
*                                                                     * 00010300
*    When control returns to the caller, the GPRs contain:            * 00010400
*                                                                     * 00010500
*                                                                     * 00010600
*    REGISTER  CONTENTS                                               * 00010700
*                                                                     * 00010800
*    0         Reason code                                            * 00010900
*                                                                     * 00011000
*    1         Used as work register by the system                    * 00011100
*                                                                     * 00011200
*    2-13      Unchanged                                              * 00011300
*                                                                     * 00011400
*    14        Used as work register by the system                    * 00011500
*                                                                     * 00011600
*    15        Return code                                            * 00011700
*                                                                     * 00011800
*                                                                     * 00011900
*                                                                     * 00012000
*    When control returns to the caller, the ARs contain:             * 00012100
*                                                                     * 00012200
*                                                                     * 00012300
*    REGISTER  CONTENTS                                               * 00012400
*                                                                     * 00012500
*    0-1       Used as work register by the system                    * 00012600
*                                                                     * 00012700
*    2-13      Unchanged                                              * 00012800
*                                                                     * 00012900
*    14-15     Used as work register by the system                    * 00013000
*                                                                     * 00013100
*                                                                     * 00013200
*                                                                     * 00013300
*01* PERFORMANCE IMPLICATIONS:                                        * 00013400
*                                                                     * 00013500
*    None.                                                            * 00013600
*                                                                     * 00013700
*01* SYNTAX:                                                          * 00013800
*                                                                     * 00013900
*[xlabel]  IEFDDSRV   [ PLISTVER                                      * 00014000
*                                =xplistver|IMPLIED_VERSION]        * 00014100
*                      ,RETRIEVE                                      * 00014200
*                          ,DEVENTRY                                  * 00014300
*                             ,DDNAME=xddname                        * 00014400
*                             ,DSABPTR=xdsabptr                      * 00014500
*                             ,DCBPTR=xdcbptr                        * 00014600
*                             ,ACBPTR=xacbptr                        * 00014700
*                             [,SUBPOOL=xsubpool|0]                 * 00014800
*                              ,DEVAREA=xdevarea                      * 00014900
*                     [,TCBPTR=xtcbptr|0]                           * 00015000
*                     [,RETCODE=xretcode]                             * 00015100
*                     [,RSNCODE=xrsncode]                             * 00015200
*                    [,MF=S]                                         * 00015300
*                    [,MF=(L,xmfctrl,xmfattr|0D)]                  * 00015400
*                    [,MF=(E,xmfctrl,COMPLETE)]                    * 00015500
*                                                                     * 00015600
*                                                                     * 00015700
*      Where:                                                         * 00015800
*                                                                     * 00015900
*                                                                     * 00016000
*      [xlabel]                                                       * 00016100
*          is an optional symbol, starting in column 1, that is the   * 00016200
*          name on the IEFDDSRV macro invocation.  The name must      * 00016300
*          conform to the rules for an ordinary assembler language    * 00016400
*          symbol.                                                    * 00016500
*          DEFAULT: No name.                                          * 00016600
*                                                                     * 00016700
*                                                                     * 00016800
*                                                                     * 00016900
*                                                                     * 00017000
*      [PLISTVER(xplistver|IMPLIED_VERSION)]                        * 00017100
*          is an optional byte input decimal value in the "0-0" range * 00017200
*          that specifies the macro version.  PLISTVER is the only    * 00017300
*          key allowed on the list form of MF and determines which    * 00017400
*          parameter list is generated.  Note that MAX may be         * 00017500
*          specified instead of a number, and the parameter list will * 00017600
*          be of the largest size currently supported. This size may  * 00017700
*          grow from release to release (thus possibly affecting the  * 00017800
*          amount of storage needed by your program).  If your        * 00017900
*          program can tolerate this, IBM recommends that you always  * 00018000
*          specify MAX when creating the list form parameter list as  * 00018100
*          that will ensure that the list form parameter list is      * 00018200
*          always long enough to hold whatever parameters might be    * 00018300
*          specified on the execute form.                             * 00018400
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00018500
*          default is the lowest version which allows all of the      * 00018600
*          parameters specified on the invocation to be processed.    * 00018700
*                                                                     * 00018800
*                                                                     * 00018900
*                                                                     * 00019000
*                                                                     * 00019100
*      RETRIEVE                                                       * 00019200
*          Retrieve DD related information.                           * 00019300
*                                                                     * 00019400
*                                                                     * 00019500
*          DEVENTRY                                                   * 00019600
*              Obtain the UCB address for the devices allocated to    * 00019700
*              the request.                                           * 00019800
*                                                                     * 00019900
*                                                                     * 00020000
*              The following is a set of mutually exclusive keys.     * 00020100
*              This set is required; only one key must be specified.  * 00020200
*                                                                     * 00020300
*                                                                     * 00020400
*              DDNAME(xddname)                                        * 00020500
*                  belongs to a set of mutually exclusive keys. It    * 00020600
*                  is the name (RS-type) (or address in register      * 00020700
*                  (2)-(12) ASM only) of an 8 character input which   * 00020800
*                  is left justified and padded with blanks.  A       * 00020900
*                  DDNAME of all blanks is invalid.  The DSAB/TIOT    * 00021000
*                  chain selected is that associated with the current * 00021100
*                  TCB, unless overridden by the TCBPTR parameter.    * 00021200
*                                                                     * 00021300
*              DSABPTR(xdsabptr)                                      * 00021400
*                  belongs to a set of mutually exclusive keys. It    * 00021500
*                  is the name (RS-type) (or address in register      * 00021600
*                  (2)-(12) ASM only) of a  pointer input that        * 00021700
*                  contains the address of the DSAB associated with a * 00021800
*                  DD name.                                           * 00021900
*                                                                     * 00022000
*              DCBPTR(xdcbptr)                                        * 00022100
*                  belongs to a set of mutually exclusive keys. It    * 00022200
*                  is the name (RS-type) (or address in register      * 00022300
*                  (2)-(12) ASM only) of a  pointer input that        * 00022400
*                  contains the address of the DCB associated with a  * 00022500
*                  DD name.  If this DCB is OPEN, the DSAB pointer    * 00022600
*                  will be retrieved from the DEB extension           * 00022700
*                  associated with it.  If this DCB is not OPEN, the  * 00022800
*                  DD name is taken from the DCBDDNAM field in the    * 00022900
*                  DCB and the DSAB address corresponding to this DD  * 00023000
*                  name is retrieved.  When DCBPTR defines a DCB      * 00023100
*                  associated with an OPEN DD, DCBPTR is mutually     * 00023200
*                  exclusive with TCBPTR.  The specified TCBPTR is    * 00023300
*                  ignored and the current TCB is used.  When DCBPTR  * 00023400
*                  defines a DCB associated with a CLOSED DD, the     * 00023500
*                  DSAB chain selected is determined by the desired   * 00023600
*                  TCB, which is either the current TCB (if TCBPTR is * 00023700
*                  zero) or the TCB pointed to by TCBPTR.             * 00023800
*                                                                     * 00023900
*              ACBPTR(xacbptr)                                        * 00024000
*                  belongs to a set of mutually exclusive keys. It    * 00024100
*                  is the name (RS-type) (or address in register      * 00024200
*                  (2)-(12) ASM only) of a  pointer input that        * 00024300
*                  contains the address of the ACB associated with a  * 00024400
*                  DD name.  If this ACB is OPEN, the DSAB pointer    * 00024500
*                  will be retrieved from the DEB extension           * 00024600
*                  associated with it.  If this ACB is not OPEN, the  * 00024700
*                  DD name is taken from the DCBDDNAM field and the   * 00024800
*                  DSAB address corresponding to this DD name is      * 00024900
*                  retrieved.  When ACBPTR defines a DCB associated   * 00025000
*                  with an OPEN DD, ACBPTR is mutually exclusive with * 00025100
*                  TCBPTR.  The specified TCBPTR is ignored and the   * 00025200
*                  current TCB is used.  When ACBPTR defines a ACB    * 00025300
*                  associated with a CLOSED DD, the DSAB chain        * 00025400
*                  selected is determined by the desired TCB, which   * 00025500
*                  is either the current TCB (if TCBPTR is zero) or   * 00025600
*                  the TCB pointed to by TCBPTR.                      * 00025700
*                                                                     * 00025800
*                                                                     * 00025900
*                                                                     * 00026000
*              End of a set of mutually exclusive required keys.      * 00026100
*                                                                     * 00026200
*                                                                     * 00026300
*                                                                     * 00026400
*              [SUBPOOL(xsubpool|0)]                                * 00026500
*                  is the name (RS-type) (or address in register      * 00026600
*                  (2)-(12) ASM only) of an optional byte input that  * 00026700
*                  indicates which subpool to obtain the device area  * 00026800
*                  storage in.  If this is not specified, subpool 0   * 00026900
*                  will be used.                                      * 00027000
*                  DEFAULT: 0                                         * 00027100
*                                                                     * 00027200
*                                                                     * 00027300
*                                                                     * 00027400
*                                                                     * 00027500
*              DEVAREA(xdevarea)                                      * 00027600
*                  is the name (RS-type) (or address in register      * 00027700
*                  (2)-(12) ASM only) of a required  pointer output   * 00027800
*                  that will contain the address of the device output * 00027900
*                  area.  This area will be obtained in the user's    * 00028000
*                  key and the subpool the user specified (or subpool * 00028100
*                  0, if not specified).  If the DD name is specified * 00028200
*                  or obtained from a closed DCB, all the devices     * 00028300
*                  allocated to the requested DD and its concatenated * 00028400
*                  groups will be returned.  If the DSAB pointer is   * 00028500
*                  specified or obtained from an opened DCB, only     * 00028600
*                  devices allocated to the requested DSAB will be    * 00028700
*                  returned.  The device area format is as follows:   * 00028800
*                                                                     * 00028900
*                                                                     * 00029000
*                  o   An 8 byte header containing                    * 00029100
*                                                                     * 00029200
*                                                                     * 00029300
*                      -   A 1-byte field indicating the subpool in   * 00029400
*                          which the storage resides.                 * 00029500
*                                                                     * 00029600
*                      -   A 3-byte field containing the size of the  * 00029700
*                          device area (including the header).        * 00029800
*                                                                     * 00029900
*                      -   A 4-byte field containing the number of    * 00030000
*                          device entry lists returned (a device      * 00030100
*                          entry list is returned for each DD in the  * 00030200
*                          concatenated group).                       * 00030300
*                                                                     * 00030400
*                      -   An array of the device list addresses.     * 00030500
*                                                                     * 00030600
*                                                                     * 00030700
*                                                                     * 00030800
*                  o   An array of the device entry lists.  Each list * 00030900
*                      has the following format:                      * 00031000
*                                                                     * 00031100
*                                                                     * 00031200
*                      -   A 4-byte field containing the number of    * 00031300
*                          device entries in the list.                * 00031400
*                                                                     * 00031500
*                      -   An array of 4-byte entries containing the  * 00031600
*                          UCB addresses.                             * 00031700
*                                                                     * 00031800
*                                                                     * 00031900
*                                                                     * 00032000
*                                                                     * 00032100
*                  The device area is mapped by mapping macro         * 00032200
*                  IEFDISMP.                                          * 00032300
*                                                                     * 00032400
*                  Note: The invoker is responsible for releasing the * 00032500
*                  storage for the returned device area.              * 00032600
*                                                                     * 00032700
*                                                                     * 00032800
*                                                                     * 00032900
*                                                                     * 00033000
*                                                                     * 00033100
*                                                                     * 00033200
*                                                                     * 00033300
*                                                                     * 00033400
*      [TCBPTR(xtcbptr|0)]                                          * 00033500
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00033600
*          only) of an optional  pointer input that contains the      * 00033700
*          address of the TCB associated with the task for which      * 00033800
*          DSAB/TIOT information is desired.  When DCBPTR or ACBPTR   * 00033900
*          defines a DCB or ACB associated with an OPEN DD, DCBPTR is * 00034000
*          mutually exclusive with TCBPTR.  The specified TCBPTR is   * 00034100
*          ignored and the current TCB is used.                       * 00034200
*          DEFAULT: 0 If not specified, the current TCB is used.      * 00034300
*                                                                     * 00034400
*                                                                     * 00034500
*                                                                     * 00034600
*                                                                     * 00034700
*      [RETCODE(xretcode)]                                            * 00034800
*          is the name (RS-type) of an optional fullword output       * 00034900
*          variable (or register (2)-(12) ASM only) into which the    * 00035000
*          return code is to be copied from GPR 15.                   * 00035100
*                                                                     * 00035200
*                                                                     * 00035300
*                                                                     * 00035400
*                                                                     * 00035500
*      [RSNCODE(xrsncode)]                                            * 00035600
*          is the name (RS-type) of an optional fullword output       * 00035700
*          variable (or register (2)-(12) ASM only) into which the    * 00035800
*          reason code is to be copied from GPR 0.                    * 00035900
*                                                                     * 00036000
*                                                                     * 00036100
*                                                                     * 00036200
*                                                                     * 00036300
*      [MF(S|L|E)]                                                  * 00036400
*          is an optional keyword input which specifies the macro     * 00036500
*          form.                                                      * 00036600
*          DEFAULT: S                                                 * 00036700
*                                                                     * 00036800
*                                                                     * 00036900
*          [MF(S)]                                                    * 00037000
*              specifies the standard form of the macro.  The "S"     * 00037100
*              form generates code to put the parameters into the     * 00037200
*              parameter list and invoke the desired service.  Full   * 00037300
*              checking for required macro keys is done along with    * 00037400
*              supplying defaults for omitted optional parameters.    * 00037500
*              The ?EPILOG macro must be invoked at the end of the    * 00037600
*              module.                                                * 00037700
*                                                                     * 00037800
*              For assembly language code modules, the "S" form       * 00037900
*              generates code to put the parameters into an in-line   * 00038000
*              parameter list and invoke the desired service.  Full   * 00038100
*              checking for required macro keys is done along with    * 00038200
*              supplying defaults for omitted optional parameters.    * 00038300
*                                                                     * 00038400
*          [MF(L,xmfctrl,xmfattr|BDY(DWORD))]                       * 00038500
*              specifies the list form of the macro.  The "L" form    * 00038600
*              defines an area to be used for the parameter list.     * 00038700
*              Only the PLISTVER key may be specified on the          * 00038800
*              invocation.  All other macro parameters are flagged as * 00038900
*              errors.  If PLISTVER is not specified, the original    * 00039000
*              parameter list definition is used.                     * 00039100
*                                                                     * 00039200
*            ,xmfctrl                                                 * 00039300
*              is a required input.  It is the name of a storage area * 00039400
*              for the parameter list.                                * 00039500
*                                                                     * 00039600
*            ,xmfattr|BDY(DWORD)                                    * 00039700
*              is an optional 60 character input string that varies   * 00039800
*              from 1 to 60 characters. It can contain any value that * 00039900
*              is valid on an assembler DS pseudo-op                  * 00040000
*              (assembler-only). You can use this parameter to force  * 00040100
*              boundary alignment of the parameter list.              * 00040200
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/AS, which * 00040300
*              forces the parameter list to a doubleword boundary.    * 00040400
*                                                                     * 00040500
*          [MF(E,xmfctrl,COMPLETE)]                                 * 00040600
*              specifies the execute form of the macro.  The "E" form * 00040700
*              generates code to put the parameters into the          * 00040800
*              parameter list specified by xmfctrl and provides full  * 00040900
*              syntax checking with default setting.                  * 00041000
*                                                                     * 00041100
*            ,xmfctrl                                                 * 00041200
*              is a required input.  It is the name (RS-type) (or     * 00041300
*              address in register (1)-(12) ASM only) of a storage    * 00041400
*              area for the parameter list.                           * 00041500
*                                                                     * 00041600
*            ,COMPLETE                                              * 00041700
*              is an optional keyword input which specifies the       * 00041800
*              degree of macro parameter syntax checking.             * 00041900
*              DEFAULT: COMPLETE                                      * 00042000
*                                                                     * 00042100
*                                                                     * 00042200
*              COMPLETE   Checking for required macro keys is done    * 00042300
*                        and defaults are supplied for omitted        * 00042400
*                        optional parameters.                         * 00042500
*                                                                     * 00042600
*                                                                     * 00042700
*                                                                     * 00042800
*                                                                     * 00042900
*                                                                     * 00043000
*                                                                     * 00043100
*                                                                     * 00043200
*01* RETURN CODES:                                                    * 00043300
*                                                                     * 00043400
*                                                                     * 00043500
*                 The return and reason codes are defined in macro    * 00043600
*                 IEFDISRC.                                           * 00043700
*                                                                     * 00043800
*                                                                     * 00043900
*                 X'00'     The requested function was successfully   * 00044000
*                           completed.                                * 00044100
*                                                                     * 00044200
*                           Reason code                               * 00044300
*                                                                     * 00044400
*                                                                     * 00044500
*                           X'00'     Function completed.             * 00044600
*                                                                     * 00044700
*                                                                     * 00044800
*                                                                     * 00044900
*                 X'08'     Invalid input parameter.                  * 00045000
*                                                                     * 00045100
*                           Reason codes                              * 00045200
*                                                                     * 00045300
*                                                                     * 00045400
*                           X'04'     The specified or obtained DD    * 00045500
*                                     name is blank.                  * 00045600
*                                                                     * 00045700
*                           X'08'     The specified or obtained DSAB  * 00045800
*                                     pointer is zero.                * 00045900
*                                                                     * 00046000
*                           X'0C'     The specified DCB pointer is    * 00046100
*                                     zero.                           * 00046200
*                                                                     * 00046300
*                           X'10'     An invalid subpool was          * 00046400
*                                     specified.                      * 00046500
*                                                                     * 00046600
*                           X'14'     The specified ACB pointer is    * 00046700
*                                     zero.                           * 00046800
*                                                                     * 00046900
*                                                                     * 00047000
*                                                                     * 00047100
*                 X'0C'     Request failed.                           * 00047200
*                                                                     * 00047300
*                           Reason codes                              * 00047400
*                                                                     * 00047500
*                                                                     * 00047600
*                           X'04'     The specified or obtained DD    * 00047700
*                                     name is invalid.                * 00047800
*                                                                     * 00047900
*                           X'08'     The specified or obtained DSAB  * 00048000
*                                     pointer is invalid.             * 00048100
*                                                                     * 00048200
*                           X'0C'     Failed to obtain the TIOT       * 00048300
*                                     resource.                       * 00048400
*                                                                     * 00048500
*                           X'10'     Failed to obtain the lock.      * 00048600
*                                                                     * 00048700
*                           X'14'     The specified TCB pointer is    * 00048800
*                                     invalid.                        * 00048900
*                                                                     * 00049000
*                                                                     * 00049100
*                                                                     * 00049200
*                 X'10'     Recovery entered.                         * 00049300
*                                                                     * 00049400
*                           Reason codes                              * 00049500
*                                                                     * 00049600
*                                                                     * 00049700
*                           NONE                                      * 00049800
*                                                                     * 00049900
*                                                                     * 00050000
*                                                                     * 00050100
*                                                                     * 00050200
*                                                                     * 00050300
*                                                                     * 00050400
*                                                                     * 00050500
*01* REASON CODES:                                                    * 00050600
*                                                                     * 00050700
*       See return codes section.                                     * 00050800
*                                                                     * 00050900
*01* MODULE TYPE:  ASSEM-PL/AS MACRO                                  * 00051000
*                                                                     * 00051100
*02*   PROCESSOR:  ASSEM-PL/AS                                        * 00051200
*                                                                     * 00051300
*01* COMPONENT:  SC1B4                                                * 00051400
*                                                                     * 00051500
*01* DISTRIBUTION LIBRARY: APLSLIB                                    * 00051600
*                                                                     * 00051700
*01* ABEND CODES:  None.                                              * 00051800
*                                                                     * 00051900
*01* MACRO USAGE NOTES:                                               * 00052000
*                                                                     * 00052100
*                                                                     * 00052200
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00052300
*        global macro variable.  Any value other than 'NO' will       * 00052400
*        result in the macro expansion being printed.  The default is * 00052500
*        'YES'.  The following examples illustrate how the ZPRINT     * 00052600
*        variable should be set.                                      * 00052700
*                                                                     * 00052800
*                    GBLC &ZPRINT                                     * 00052900
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00053000
*                                                                     * 00053100
*                                                                     * 00053200
*    2.  All   keys   currently   contained  in  the  IEFDDSRV  macro * 00053300
*        correspond  to  version  0.   If you specify PLISTVER, use a * 00053400
*        value of 0 or MAX.                                           * 00053500
*                                                                     * 00053600
*                                                                     * 00053700
*                                                                     * 00053800
*                                                                     * 00053900
*01* CHANGE ACTIVITY:                                                 * 00054000
*                                                                     * 00054100
*   Flag LineItem  FMID    Date   ID    Comment                       * 00054200
*                                                                     * 00054300
*    $L0=UCBVP    HBB5520 940210 PDEM:  UCBVS Support                 * 00054400
*    $P1=PN70405  HBB5520 940415 PDEM:  Prolog updates.               * 00054500
*    $P2=PN71717  HBB5520 941020 PDEM:  Prolog updates.               * 00054600
*    $P3=PN71431  HBB5520 941201 PDEM:  Prolog updates.               * 00054700
****** END OF SPECIFICATIONS *****************************************/ 00054800
*/********************************************************************* 00054900
         MACRO                                                          00055000
&XLABEL  IEFDDSRV &PLISTVER=,&DDNAME=,&DSABPTR=,&DCBPTR=,&ACBPTR=,     *00055100
               &SUBPOOL=,&DEVAREA=,&TCBPTR=,&RETCODE=,&RSNCODE=,&MF=    00055200
.*                                                                      00055300
*              MACDATE -02/10/94-<0>                                    00055400
.*                                                                      00055500
.*******************************************************************    00055600
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00055700
.*******************************************************************    00055800
              GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                   00055900
              GBLC  &ZTEST      YES=TEST NO=NO TEST                     00056000
              GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX             00056100
.*                                                                      00056200
              GBLC  &ZIEFDDSRV  YES=MACRO USED AT LEAST ONCE            00056300
.*******************************************************************    00056400
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00056500
.*******************************************************************    00056600
              LCLC  &ZMS        ERROR MESSAGE WORK AREA                 00056700
              LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS            00056800
              LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED              00056900
              LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR             00057000
              LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE             00057100
              LCLA  &ZAWRK      USED AS A WORK AREA                     00057200
              LCLA  &ZASIZ      USED FOR SIZE OF VALUE                  00057300
              LCLA  &ZN         NUMERIC WORK VARIABLE                   00057400
              LCLC  &ZC         CHARACTER WORK VARIABLE                 00057500
              LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE             00057600
              LCLA  &ZTLA       VALUE TOO LONG VARIABLE                 00057700
              LCLA  &ZMACRET    MACRO RETURN CODE                       00057800
&ZMACRET      SETA  0           ASSUME NO ERRORS                        00057900
.*                                                                      00058000
              LCLC  &ZCSYSLIST(255)             NONXKEY, POS ARRAY      00058100
              LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()              00058200
              LCLA  &ZPLLEN     PARAMETER LIST LENGTH                   00058300
              LCLC  &ZENDBASEPL                 End of base PL          00058400
              LCLA  &ZPLWORKA   PARAMETER LIST LENGTH                   00058500
.*******************************************************************    00058600
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00058700
.*******************************************************************    00058800
              LCLA  &ZI         INDEX FOR ARRAY                         00058900
              LCLA  &ZJ         INDEX FOR PARMS                         00059000
              LCLA  &ZK         INDEX FOR PARSE                         00059100
              LCLA  &ZLO        LOW RANGE VALUE                         00059200
              LCLA  &ZHI        HIGH RANGE VALUE                        00059300
              LCLC  &ZW         WORK AREA FOR PARM                      00059400
.********************************************************************   00059500
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00059600
.********************************************************************   00059700
              GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL                 00059800
              GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE          00059900
.*                                                                      00060000
              AIF   (K'&SYSASCE GT 0).ZSYS4     SYS STATE DEFINED       00060100
              AIF   (K'&SYSSPLV GT 0).ZSYS2     SP LEVEL DEFINED        00060200
              SPLEVEL  TEST                                             00060300
.ZSYS2        ANOP  ,                                                   00060400
              AIF   ('&SYSSPLV' EQ '1').ZSYS3   PRE SP 3.1              00060500
              AIF   ('&SYSSPLV' EQ '2').ZSYS3   PRE SP 3.1              00060600
              SYSSTATE TEST                                             00060700
              AGO   .ZSYS4                                              00060800
.ZSYS3        ANOP  ,                                                   00060900
&SYSASCE      SETC  'P'         ASSUME SYSSTATE PRIMARY                 00061000
.ZSYS4        ANOP  ,                                                   00061100
.*******************************************************************    00061200
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00061300
.*******************************************************************    00061400
              LCLA  &XPLISTVER  ++ VALUE                                00061500
              LCLC  &XRETRIEVE  ++ VALUE                                00061600
              LCLC  &XDEVENTRY  ++ VALUE                                00061700
              LCLC  &XINTYPE1   ++ NAME                                 00061800
              LCLC  &XDDNAME    ++ NAME                                 00061900
              LCLC  &XDSABPTR   ++ NAME                                 00062000
              LCLC  &XDCBPTR    ++ NAME                                 00062100
              LCLC  &XACBPTR    ++ NAME                                 00062200
              LCLC  &XSUBPOOL   ++ NAME                                 00062300
              LCLC  &XDEVAREA   ++ NAME                                 00062400
              LCLC  &XTCBPTR    ++ NAME                                 00062500
              LCLC  &XRETCODE   ++ NAME                                 00062600
              LCLC  &XRSNCODE   ++ NAME                                 00062700
              LCLC  &XMF        ++ VALUE                                00062800
              LCLC  &XMFCTRL    ++ NAME                                 00062900
              LCLC  &XMFATTR    ++ VALUE                                00063000
              LCLC  &XMFSCK     ++ VALUE                                00063100
.*******************************************************************    00063200
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00063300
.*******************************************************************    00063400
              LCLC  &ZXPLISTVER                 ++ INPUT VALUE          00063500
              LCLC  &ZXRETRIEVE                 ++ INPUT VALUE          00063600
              LCLC  &ZXDEVENTRY                 ++ INPUT VALUE          00063700
              LCLC  &ZXINTYPE1  ++ INPUT NAME                           00063800
              LCLC  &ZXDDNAME   ++ INPUT NAME                           00063900
              LCLC  &ZXDSABPTR  ++ INPUT NAME                           00064000
              LCLC  &ZXDCBPTR   ++ INPUT NAME                           00064100
              LCLC  &ZXACBPTR   ++ INPUT NAME                           00064200
              LCLC  &ZXSUBPOOL  ++ INPUT NAME                           00064300
              LCLC  &ZXDEVAREA  ++ OUTPUT NAME                          00064400
              LCLC  &ZXTCBPTR   ++ INPUT NAME                           00064500
              LCLC  &ZXRETCODE  ++ OUTPUT NAME                          00064600
              LCLC  &ZXRSNCODE  ++ OUTPUT NAME                          00064700
              LCLC  &ZXMF       ++ INPUT VALUE                          00064800
              LCLC  &ZXMFCTRL   ++ INPUT NAME                           00064900
              LCLC  &ZXMFATTR   ++ INPUT VALUE                          00065000
              LCLC  &ZXMFSCK    ++ INPUT VALUE                          00065100
.********************************************************************   00065200
.***AC.PLV01  PROCESS PLISTVER                                      *   00065300
.********************************************************************   00065400
&XPLISTVER      SETA  0                                                 00065500
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00065600
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00065700
&XPLISTVER      SETA  0                                                 00065800
.ZPLV0          ANOP  ,                                                 00065900
.*                                                                      00066000
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00066100
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00066200
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00066300
.*-------------------------------------------------------------------   00066400
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00066500
&ZMS            SETC  '"PLISTVER='         *KPOSA* MNOTE                00066600
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00066700
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00066800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00066900
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00067000
                AGO   .ZPVCK2                                           00067100
.ZPVCK3         ANOP  ,                                                 00067200
.*-------------------------------------------------------------------   00067300
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00067400
&ZMS            SETC  '"PLISTVER='         *KGPRA* MNOTE                00067500
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00067600
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00067700
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00067800
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00067900
                AGO   .ZPVCKE                                           00068000
.ZPVCK2         ANOP  ,                                                 00068100
.*-------------------------------------------------------------------   00068200
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00068300
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00068400
&ZMS            SETC  'PLISTVER='          *KVALA* MNOTE                00068500
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00068600
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00068700
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00068800
                MNOTE 8,' &ZMS IS REQUIRED.'                            00068900
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00069000
                AGO   .ZPVCK5                                           00069100
.ZPVCK4         ANOP  ,                                                 00069200
&XPLISTVER      SETA  &PLISTVER(1)                                      00069300
.ZPVCK5         ANOP  ,                                                 00069400
.*-------------------------------------------------------------------   00069500
&ZCVAL          SETC  '&PLISTVER(1)'                                    00069600
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00069700
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00069800
                AIF   (&XPLISTVER LT 0).ZPVCK6  TOO LOW                 00069900
                AIF   (&XPLISTVER LE 0).ZPVCKE  NOT HIGH                00070000
.ZPVCK6         ANOP   ,                                                00070100
&ZMS            SETC  '"PLISTVER='         *KRNGA* MNOTE                00070200
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00070300
&ZMS            SETC  '&ZMS THE RANGE IS "0-0"'                         00070400
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00070500
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00070600
.ZPVCKE         ANOP   ,                                                00070700
.********************************************************************   00070800
.***AG.MF01 PROCESS MF MACRO FORMS                                      00070900
.********************************************************************   00071000
              ACTR  10000                                               00071100
.*------------------------------------------------------------------    00071200
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00071300
&XMF          SETC  ''          INITIALIZE XVARIABLE                    00071400
.*-------------------------------------------------------------------   00071500
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00071600
.ZG33         ANOP  ,                                                   00071700
&ZTLC         SETC 'S'                                                  00071800
              AIF   ('&MF(1)' NE '&ZTLC').ZG34                          00071900
&XMF          SETC  'S'         SET KEYWORD                             00072000
              AIF   (N'&MF LE 1).ZG33A          CK NUM                  00072100
&ZMS          SETC  '"MF='      *KPOSA* MNOTE                           00072200
&ZMS          SETC  '&ZMS.&MF"'                                         00072300
&ZMS          SETC  '&ZMS "MF"'                                         00072400
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00072500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00072600
.ZG33A        ANOP  ,                                                   00072700
.*-------------------------------------------------------------------   00072800
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00072900
.ZG34         ANOP  ,                                                   00073000
&ZTLC         SETC 'L'                                                  00073100
              AIF   ('&MF(1)' NE '&ZTLC').ZG41                          00073200
&XMF          SETC  'L'         SET KEYWORD                             00073300
              AIF   (N'&MF LE 3).ZG34A          CK NUM                  00073400
&ZMS          SETC  '"MF='      *KPOSA* MNOTE                           00073500
&ZMS          SETC  '&ZMS.&MF"'                                         00073600
&ZMS          SETC  '&ZMS "MF"'                                         00073700
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                00073800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00073900
.ZG34A        ANOP  ,                                                   00074000
.*-------------------------------------------------------------------   00074100
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00074200
              AIF   (N'&SYSLIST NE 0).ZG34B     POSITIONALS?            00074300
              AIF   ('&DDNAME' NE '').ZG34B     KEYS?                   00074400
              AIF   ('&DSABPTR' NE '').ZG34B    KEYS?                   00074500
              AIF   ('&DCBPTR' NE '').ZG34B     KEYS?                   00074600
              AIF   ('&ACBPTR' NE '').ZG34B     KEYS?                   00074700
              AIF   ('&SUBPOOL' NE '').ZG34B    KEYS?                   00074800
              AIF   ('&DEVAREA' NE '').ZG34B    KEYS?                   00074900
              AIF   ('&TCBPTR' NE '').ZG34B     KEYS?                   00075000
              AIF   ('&RETCODE' NE '').ZG34B    KEYS?                   00075100
              AIF   ('&RSNCODE' NE '').ZG34B    KEYS?                   00075200
              AGO    .ZG34C     INVOCATION OKAY                         00075300
.ZG34B        ANOP  ,                                                   00075400
&ZMS          SETC  'THE "L" FORM OF "MF"'      *MFLA* MNOTE            00075500
&ZMS          SETC  '&ZMS CAN ONLY HAVE'                                00075600
&ZMS          SETC  '&ZMS THE "PLISTVER" KEY'                           00075700
              MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'              00075800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00075900
.ZG34C        ANOP  ,                                                   00076000
.*-------------------------------------------------------------------   00076100
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00076200
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                           00076300
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                           00076400
              AIF   (N'&MF(2) GT 1).ZG36B       MULTI PARMS             00076500
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                           00076600
.ZG36B        AIF   (K'&MF(2) GT 0).ZG36C                               00076700
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00076800
&ZMS          SETC  'WHEN "L" IS SPECIFIED'     *KRQDA*                 00076900
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                 00077000
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                        00077100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00077200
.ZG36C        ANOP  ,                                                   00077300
.*-------------------------------------------------------------------   00077400
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00077500
              AIF   (K'&ZXMFCTRL LE 0).ZG36P    NOT I/O                 00077600
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG36P                      00077700
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00077800
&ZMS          SETC  '"MF='      *KGPRA* MNOTE                           00077900
&ZMS          SETC  '&ZMS.&MF"'                                         00078000
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'           00078100
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'                   00078200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00078300
.ZG36P        ANOP  ,                                                   00078400
.*-------------------------------------------------------------------   00078500
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00078600
&ZXMFATTR     SETC  'INPUT'     SET IN/OUTPUT                           00078700
&XMFATTR      SETC  '0D'                                                00078800
              AIF   (K'&MF(3) LE 0).ZG39B       PARM                    00078900
&XMFATTR      SETC  '&MF(3,1)'  SET XVARIABLE                           00079000
              AIF   (N'&MF(3) GT 1).ZG39B       MULTI PARMS             00079100
&XMFATTR      SETC  '&MF(3)'    SET XVARIABLE                           00079200
.ZG39B        ANOP  ,                                                   00079300
.*-------------------------------------------------------------------   00079400
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00079500
              AIF   (K'&ZXMFATTR LE 0).ZG39P    NOT I/O                 00079600
              AIF   ('&XMFATTR'(1,1) NE '(').ZG39P                      00079700
&ZXMFATTR     SETC  ''          RESET IN/OUTPUT                         00079800
&ZMS          SETC  '"MF='      *KGPRA* MNOTE                           00079900
&ZMS          SETC  '&ZMS.&MF"'                                         00080000
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'           00080100
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'                   00080200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00080300
.ZG39P        ANOP  ,                                                   00080400
.*-------------------------------------------------------------------   00080500
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00080600
              AIF   (K'&ZXMFATTR LE 0).ZG39S    NOT I/O                 00080700
              AIF   (K'&XMFATTR LE 60).ZG39S    LNG OK                  00080800
&ZXMFATTR     SETC  ''          RESET IN/OUTPUT                         00080900
&ZMS          SETC  '"MF='      *KLNGA* MNOTE                           00081000
&ZMS          SETC  '&ZMS.&MF"'                                         00081100
&ZMS          SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'               00081200
              MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'                  00081300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00081400
.ZG39S        ANOP  ,                                                   00081500
.*-------------------------------------------------------------------   00081600
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00081700
.ZG41         ANOP  ,                                                   00081800
&ZTLC         SETC 'E'                                                  00081900
              AIF   ('&MF(1)' NE '&ZTLC').ZG49                          00082000
&XMF          SETC  'E'         SET KEYWORD                             00082100
              AIF   (N'&MF LE 3).ZG41A          CK NUM                  00082200
&ZMS          SETC  '"MF='      *KPOSA* MNOTE                           00082300
&ZMS          SETC  '&ZMS.&MF"'                                         00082400
&ZMS          SETC  '&ZMS "MF"'                                         00082500
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                00082600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00082700
.ZG41A        ANOP  ,                                                   00082800
.*-------------------------------------------------------------------   00082900
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00083000
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                           00083100
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                           00083200
              AIF   (N'&MF(2) GT 1).ZG43B       MULTI PARMS             00083300
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                           00083400
.ZG43B        AIF   (K'&MF(2) GT 0).ZG43C                               00083500
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00083600
&ZMS          SETC  'WHEN "E" IS SPECIFIED'     *KRQDA*                 00083700
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                 00083800
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                        00083900
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00084000
.ZG43C        ANOP  ,                                                   00084100
.*-------------------------------------------------------------------   00084200
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00084300
              AIF   (K'&ZXMFCTRL LE 0).ZG43R    NOT I/O                 00084400
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG43R                      00084500
&ZCGPR        SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                          00084600
              AIF   ('&ZCGPR'(1,1) NE '0').ZG43P                        00084700
              AIF   (K'&ZCGPR GT 2).ZG43Q                               00084800
              AIF   ('&ZCGPR' EQ '0').ZG43Q                             00084900
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00085000
              AIF   (T'&ZCGPR NE 'N').ZG43Q     INVALID REG NAME        00085100
.ZG43P        ANOP  ,                                                   00085200
              AIF   (T'&ZCGPR NE 'N').ZG43R     NON NUMERIC             00085300
              AIF   ('&ZCGPR' LT '1').ZG43Q                             00085400
              AIF   ('&ZCGPR' LE '12').ZG43R                            00085500
.ZG43Q        ANOP  ,                                                   00085600
&ZMS          SETC  '"MF='      *KGPRA* MNOTE                           00085700
&ZMS          SETC  '&ZMS.&MF"'                                         00085800
&ZMS          SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'           00085900
              MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                    00086000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00086100
.ZG43R        ANOP  ,                                                   00086200
.*-------------------------------------------------------------------   00086300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00086400
&XMFSCK       SETC  ''          INITIALIZE XVARIABLE                    00086500
.ZG47A   AIF   ('&MF(3)' NE 'COMPLETE').ZG48A                           00086600
&XMFSCK       SETC  'COMPLETE'  SET KEYWORD                             00086700
.*-------------------------------------------------------------------   00086800
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00086900
.ZG48A        AIF   (K'&XMFSCK GT 0).ZG48C      KEYWORD                 00087000
              AIF   (K'&MF(3) LE 0).ZG48B                               00087100
&ZMS          SETC  '"MF='      *KUKWA* MNOTE                           00087200
&ZMS          SETC  '&ZMS.&MF"'                                         00087300
&ZMS          SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '           00087400
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00087500
&ZMS          SETC  '&ZMS "COMPLETE".'          VALID KEYWORD           00087600
              MNOTE 8,' &ZMS '                                          00087700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00087800
.ZG48B        ANOP  ,                                                   00087900
&XMFSCK       SETC  'COMPLETE'  SET DEFAULT KEYWORD                     00088000
.ZG48C        ANOP  ,                                                   00088100
&ZXMFSCK      SETC  'INPUT'     SET IN/OUTPUT                           00088200
.*------------------------------------------------------------------    00088300
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00088400
.ZG49         ANOP  ,                                                   00088500
&ZXMF         SETC  'INPUT'     SET IN/OUTPUT                           00088600
              AIF   (K'&XMF GT 0).ZG49E         VALID ARG               00088700
              AIF   (T'&MF EQ 'O').ZG49D        OMITTED                 00088800
&ZASYSLNDX    SETA  0                                                   00088900
.ZG49A        ANOP  ,           POSITIONAL MACRO KEY                    00089000
&ZASYSLNDX    SETA  &ZASYSLNDX+1                                        00089100
              AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG49C                    00089200
&ZTLC         SETC 'MF'                                                 00089300
              AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG49A           00089400
.ZG49B        ANOP  ,                                                   00089500
&ZXMF         SETC  ''          RESET IN/OUTPUT                         00089600
&ZMS          SETC  'THE "MF" KEY'              *KOPTA* MNOTE           00089700
&ZMS          SETC  '&ZMS MUST CONTAIN ONE'                             00089800
              MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                    00089900
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00090000
              AGO   .ZG49E                                              00090100
.ZG49C        ANOP  ,                                                   00090200
&ZXMF         SETC  ''          RESET IN/OUTPUT                         00090300
&ZMS          SETC  '"MF='      *KUKWA* MNOTE                           00090400
&ZMS          SETC  '&ZMS.&MF"'                                         00090500
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00090600
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00090700
&ZMS          SETC  '&ZMS "S",'                 VALID KEYWORD           00090800
&ZMS          SETC  '&ZMS "L",'                 VALID KEYWORD           00090900
&ZMS          SETC  '&ZMS OR "E".'              VALID KEYWORD           00091000
              MNOTE 8,' &ZMS '                                          00091100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00091200
              AGO   .ZG49E                                              00091300
.ZG49D        ANOP  ,                                                   00091400
&XMF          SETC  'S'         SET DEFAULT KEYWORD                     00091500
&XMFSCK       SETC  'COMPLETE'  COMPLETE CHECKING                       00091600
.ZG49E        ANOP  ,                                                   00091700
.********************************************************************   00091800
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00091900
.********************************************************************   00092000
              ACTR  10000                                               00092100
.*-------------------------------------------------------------------   00092200
.***AG.MF03 MF=(SLE)                                                    00092300
              AIF   ('&XMF' EQ 'L').ZGMFX                               00092400
.*----------------------------------------------------------------***   00092500
.***AG.KXVAR01 VALUE, RQD INPUT, KEYS -NO ARGUMENTS                     00092600
&XRETRIEVE    SETC  ''          RESET XVARIABLE                         00092700
&ZXRETRIEVE   SETC  ''          RESET IN/OUTPUT                         00092800
&ZASYSLNDX    SETA  0                                                   00092900
.ZG5A         ANOP  ,           POSITIONAL MACRO KEY                    00093000
&ZASYSLNDX    SETA  &ZASYSLNDX+1                                        00093100
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG5B                          00093200
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG5A             00093300
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'RETRIEVE').ZG5A              00093400
&ZCSYSLIST(&ZASYSLNDX) SETC  'NONXKEY'          POSITIONAL IS MACRO KEY 00093500
&XRETRIEVE    SETC  'RETRIEVE'  MACRO KEY FOUND                         00093600
&ZXRETRIEVE   SETC  'INPUT'     SET IN/OUTPUT                           00093700
.ZG5B         ANOP  ,                                                   00093800
.*-------------------------------------------------------------------   00093900
.***AG.KXVAR02 VALUE, RQD INPUT, KEYS -NO ARGUMENTS                     00094000
              AIF   (K'&XRETRIEVE GT 0).ZG5C    KEY ENTERED             00094100
&ZMS          SETC  ' '         *KRQDA*                                 00094200
&ZMS          SETC  '&ZMS "RETRIEVE" KEY AND ITS ARGUMENT'              00094300
              MNOTE 8,' &ZMS ARE REQUIRED.'                             00094400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00094500
.ZG5C         ANOP  ,                                                   00094600
.*----------------------------------------------------------------***   00094700
.***AG.KXVAR01 VALUE, RQD INPUT, KEYS -NO ARGUMENTS                     00094800
&XDEVENTRY    SETC  ''          RESET XVARIABLE                         00094900
&ZXDEVENTRY   SETC  ''          RESET IN/OUTPUT                         00095000
&ZASYSLNDX    SETA  0                                                   00095100
.ZG7A         ANOP  ,           POSITIONAL MACRO KEY                    00095200
&ZASYSLNDX    SETA  &ZASYSLNDX+1                                        00095300
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG7B                          00095400
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG7A             00095500
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'DEVENTRY').ZG7A              00095600
&ZCSYSLIST(&ZASYSLNDX) SETC  'NONXKEY'          POSITIONAL IS MACRO KEY 00095700
&XDEVENTRY    SETC  'DEVENTRY'  MACRO KEY FOUND                         00095800
&ZXDEVENTRY   SETC  'INPUT'     SET IN/OUTPUT                           00095900
.ZG7B         ANOP  ,                                                   00096000
.*-------------------------------------------------------------------   00096100
.***AG.KXVAR02 VALUE, RQD INPUT, KEYS -NO ARGUMENTS                     00096200
              AIF   (K'&XDEVENTRY GT 0).ZG7C    KEY ENTERED             00096300
&ZMS          SETC  ' '         *KRQDA*                                 00096400
&ZMS          SETC  '&ZMS "DEVENTRY" KEY AND ITS ARGUMENT'              00096500
              MNOTE 8,' &ZMS ARE REQUIRED.'                             00096600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00096700
.ZG7C         ANOP  ,                                                   00096800
.*----------------------------------------------------------------***   00096900
.***AG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00097000
&XINTYPE1     SETC  ''          INITIALIZE XVARIABLE                    00097100
              AIF   (K'&DDNAME LE 0).ZG9C                               00097200
&ZXINTYPE1    SETC  'INPUT'     SET IN/OUTPUT                           00097300
&XINTYPE1     SETC  'DDNAME'    SET XVARIABLE                           00097400
&ZXDDNAME     SETC  'INPUT'     SET IN/OUTPUT                           00097500
&XDDNAME      SETC  '&DDNAME(1)'                SET XVARIABLE PARM      00097600
              AIF   (N'&DDNAME GT 1).ZG9A       MULTIPLE PARMS          00097700
&XDDNAME      SETC  '&DDNAME'   SET XVARIABLE PARM                      00097800
.ZG9A         AIF   (N'&DDNAME LE 1).ZG9B       CK NUM                  00097900
&ZMS          SETC  '"DDNAME='  *KPOSA* MNOTE                           00098000
&ZMS          SETC  '&ZMS.&DDNAME"'                                     00098100
&ZMS          SETC  '&ZMS "DDNAME"'                                     00098200
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00098300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00098400
.ZG9B         AIF   (K'&XDDNAME GT 0).ZG9C      ONE PARM                00098500
&ZXINTYPE1    SETC  ''          RESET IN/OUTPUT                         00098600
&ZXDDNAME     SETC  ''          RESET IN/OUTPUT                         00098700
&ZMS          SETC  ' '         *KRQDA*                                 00098800
&ZMS          SETC  '&ZMS "DDNAME" KEY AND ITS ARGUMENT'                00098900
              MNOTE 8,' &ZMS ARE REQUIRED.'                             00099000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00099100
.ZG9C         ANOP  ,                                                   00099200
.*----------------------------------------------------------------***   00099300
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00099400
              AIF   (K'&DSABPTR LE 0).ZG10D     NO ME KEY               00099500
              AIF   (N'&DSABPTR LE 1).ZG10A     CK NUM                  00099600
&ZMS          SETC  '"DSABPTR='                 *KPOSA* MNOTE           00099700
&ZMS          SETC  '&ZMS.&DSABPTR"'                                    00099800
&ZMS          SETC  '&ZMS "DSABPTR"'                                    00099900
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00100000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00100100
.ZG10A        AIF   (K'&XINTYPE1 LE 0).ZG10B                            00100200
&ZMS          SETC  '"DSABPTR'  *KMEKA* MNOTE                           00100300
&ZMS          SETC  '&ZMS.=&DSABPTR"'                                   00100400
&ZMS          SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'               00100500
&ZMS          SETC  '&ZMS "&XINTYPE1"'                                  00100600
              MNOTE 8,' &ZMS KEY.'                                      00100700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00100800
              AGO   .ZG10D                                              00100900
.*                                                                      00101000
.ZG10B        ANOP  ,                                                   00101100
&ZXINTYPE1    SETC  'INPUT'     SET IN/OUTPUT                           00101200
&XINTYPE1     SETC  'DSABPTR'   SET XVARIABLE                           00101300
&ZXDSABPTR    SETC  'INPUT'     SET IN/OUTPUT                           00101400
&XDSABPTR     SETC  '&DSABPTR(1)'               SET XVARIABLE PARM      00101500
              AIF   (N'&DSABPTR GT 1).ZG10C     MULTIPLE PARMS          00101600
&XDSABPTR     SETC  '&DSABPTR'  SET XVARIABLE PARM                      00101700
.ZG10C        AIF   (K'&XDSABPTR GT 0).ZG10D    ONE PARM                00101800
&ZXINTYPE1    SETC  ''          RESET IN/OUTPUT                         00101900
&ZXDSABPTR    SETC  ''          RESET IN/OUTPUT                         00102000
&ZMS          SETC  ' '         *KRQDA*                                 00102100
&ZMS          SETC  '&ZMS "DSABPTR" KEY AND ITS ARGUMENT'               00102200
              MNOTE 8,' &ZMS ARE REQUIRED.'                             00102300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00102400
.ZG10D        ANOP  ,                                                   00102500
.*----------------------------------------------------------------***   00102600
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00102700
              AIF   (K'&DCBPTR LE 0).ZG11D      NO ME KEY               00102800
              AIF   (N'&DCBPTR LE 1).ZG11A      CK NUM                  00102900
&ZMS          SETC  '"DCBPTR='  *KPOSA* MNOTE                           00103000
&ZMS          SETC  '&ZMS.&DCBPTR"'                                     00103100
&ZMS          SETC  '&ZMS "DCBPTR"'                                     00103200
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00103300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00103400
.ZG11A        AIF   (K'&XINTYPE1 LE 0).ZG11B                            00103500
&ZMS          SETC  '"DCBPTR'   *KMEKA* MNOTE                           00103600
&ZMS          SETC  '&ZMS.=&DCBPTR"'                                    00103700
&ZMS          SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'               00103800
&ZMS          SETC  '&ZMS "&XINTYPE1"'                                  00103900
              MNOTE 8,' &ZMS KEY.'                                      00104000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00104100
              AGO   .ZG11D                                              00104200
.*                                                                      00104300
.ZG11B        ANOP  ,                                                   00104400
&ZXINTYPE1    SETC  'INPUT'     SET IN/OUTPUT                           00104500
&XINTYPE1     SETC  'DCBPTR'    SET XVARIABLE                           00104600
&ZXDCBPTR     SETC  'INPUT'     SET IN/OUTPUT                           00104700
&XDCBPTR      SETC  '&DCBPTR(1)'                SET XVARIABLE PARM      00104800
              AIF   (N'&DCBPTR GT 1).ZG11C      MULTIPLE PARMS          00104900
&XDCBPTR      SETC  '&DCBPTR'   SET XVARIABLE PARM                      00105000
.ZG11C        AIF   (K'&XDCBPTR GT 0).ZG11D     ONE PARM                00105100
&ZXINTYPE1    SETC  ''          RESET IN/OUTPUT                         00105200
&ZXDCBPTR     SETC  ''          RESET IN/OUTPUT                         00105300
&ZMS          SETC  ' '         *KRQDA*                                 00105400
&ZMS          SETC  '&ZMS "DCBPTR" KEY AND ITS ARGUMENT'                00105500
              MNOTE 8,' &ZMS ARE REQUIRED.'                             00105600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00105700
.ZG11D        ANOP  ,                                                   00105800
.*----------------------------------------------------------------***   00105900
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00106000
              AIF   (K'&ACBPTR LE 0).ZG12D      NO ME KEY               00106100
              AIF   (N'&ACBPTR LE 1).ZG12A      CK NUM                  00106200
&ZMS          SETC  '"ACBPTR='  *KPOSA* MNOTE                           00106300
&ZMS          SETC  '&ZMS.&ACBPTR"'                                     00106400
&ZMS          SETC  '&ZMS "ACBPTR"'                                     00106500
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00106600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00106700
.ZG12A        AIF   (K'&XINTYPE1 LE 0).ZG12B                            00106800
&ZMS          SETC  '"ACBPTR'   *KMEKA* MNOTE                           00106900
&ZMS          SETC  '&ZMS.=&ACBPTR"'                                    00107000
&ZMS          SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'               00107100
&ZMS          SETC  '&ZMS "&XINTYPE1"'                                  00107200
              MNOTE 8,' &ZMS KEY.'                                      00107300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00107400
              AGO   .ZG12D                                              00107500
.*                                                                      00107600
.ZG12B        ANOP  ,                                                   00107700
&ZXINTYPE1    SETC  'INPUT'     SET IN/OUTPUT                           00107800
&XINTYPE1     SETC  'ACBPTR'    SET XVARIABLE                           00107900
&ZXACBPTR     SETC  'INPUT'     SET IN/OUTPUT                           00108000
&XACBPTR      SETC  '&ACBPTR(1)'                SET XVARIABLE PARM      00108100
              AIF   (N'&ACBPTR GT 1).ZG12C      MULTIPLE PARMS          00108200
&XACBPTR      SETC  '&ACBPTR'   SET XVARIABLE PARM                      00108300
.ZG12C        AIF   (K'&XACBPTR GT 0).ZG12D     ONE PARM                00108400
&ZXINTYPE1    SETC  ''          RESET IN/OUTPUT                         00108500
&ZXACBPTR     SETC  ''          RESET IN/OUTPUT                         00108600
&ZMS          SETC  ' '         *KRQDA*                                 00108700
&ZMS          SETC  '&ZMS "ACBPTR" KEY AND ITS ARGUMENT'                00108800
              MNOTE 8,' &ZMS ARE REQUIRED.'                             00108900
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00109000
.ZG12D        ANOP  ,                                                   00109100
.*------------------------------------------------------------------    00109200
.***AG.KME4Y09 NAME, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED           00109300
              AIF   (K'&XINTYPE1 GT 0).ZG13B                            00109400
&ZXINTYPE1    SETC  ''          RESET IN/OUTPUT                         00109500
&ZXDDNAME     SETC  ''          RESET IN/OUTPUT                         00109600
&XINTYPE1     SETC  ''          ENSURE NULL                             00109700
&XDDNAME      SETC  ''          ENSURE NULL                             00109800
&ZMS          SETC  'ONE OF THE FOLLOWING'      *KMERA* MNOTE           00109900
&ZMS          SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'                 00110000
&ZMS          SETC  '&ZMS REQUIRED:'                                    00110100
&ZMS          SETC  '&ZMS "DDNAME",'            VALID ME KEY            00110200
&ZMS          SETC  '&ZMS "DSABPTR",'           VALID ME KEY            00110300
&ZMS          SETC  '&ZMS "DCBPTR",'            VALID ME KEY            00110400
&ZMS          SETC  '&ZMS OR "ACBPTR".'         VALID ME KEY            00110500
              MNOTE 8,' &ZMS '                                          00110600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00110700
.ZG13B        ANOP  ,                                                   00110800
.*-------------------------------------------------------------------   00110900
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00111000
.ZG9          AIF   ('&XINTYPE1' NE 'DDNAME').ZG10                      00111100
.*-------------------------------------------------------------------   00111200
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00111300
              AIF   (K'&ZXDDNAME LE 0).ZG9R     NOT I/O                 00111400
              AIF   ('&XDDNAME'(1,1) NE '(').ZG9R                       00111500
&ZCGPR        SETC  '&XDDNAME'(2,K'&XDDNAME-2)                          00111600
              AIF   ('&ZCGPR'(1,1) NE '0').ZG9P                         00111700
              AIF   (K'&ZCGPR GT 2).ZG9Q                                00111800
              AIF   ('&ZCGPR' EQ '0').ZG9Q                              00111900
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00112000
              AIF   (T'&ZCGPR NE 'N').ZG9Q      INVALID REG NAME        00112100
.ZG9P         ANOP  ,                                                   00112200
              AIF   (T'&ZCGPR NE 'N').ZG9R      NON NUMERIC             00112300
              AIF   ('&ZCGPR' LT '2').ZG9Q                              00112400
              AIF   ('&ZCGPR' LE '12').ZG9R                             00112500
.ZG9Q         ANOP  ,                                                   00112600
&ZMS          SETC  '"DDNAME='  *KGPRA* MNOTE                           00112700
&ZMS          SETC  '&ZMS.&DDNAME"'                                     00112800
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00112900
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00113000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00113100
.ZG9R         ANOP  ,                                                   00113200
.*-------------------------------------------------------------------   00113300
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00113400
.ZG10         AIF   ('&XINTYPE1' NE 'DSABPTR').ZG11                     00113500
.*-------------------------------------------------------------------   00113600
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00113700
              AIF   (K'&ZXDSABPTR LE 0).ZG10R   NOT I/O                 00113800
              AIF   ('&XDSABPTR'(1,1) NE '(').ZG10R                     00113900
&ZCGPR        SETC  '&XDSABPTR'(2,K'&XDSABPTR-2)                        00114000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG10P                        00114100
              AIF   (K'&ZCGPR GT 2).ZG10Q                               00114200
              AIF   ('&ZCGPR' EQ '0').ZG10Q                             00114300
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00114400
              AIF   (T'&ZCGPR NE 'N').ZG10Q     INVALID REG NAME        00114500
.ZG10P        ANOP  ,                                                   00114600
              AIF   (T'&ZCGPR NE 'N').ZG10R     NON NUMERIC             00114700
              AIF   ('&ZCGPR' LT '2').ZG10Q                             00114800
              AIF   ('&ZCGPR' LE '12').ZG10R                            00114900
.ZG10Q        ANOP  ,                                                   00115000
&ZMS          SETC  '"DSABPTR='                 *KGPRA* MNOTE           00115100
&ZMS          SETC  '&ZMS.&DSABPTR"'                                    00115200
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00115300
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00115400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00115500
.ZG10R        ANOP  ,                                                   00115600
.*-------------------------------------------------------------------   00115700
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00115800
.ZG11         AIF   ('&XINTYPE1' NE 'DCBPTR').ZG12                      00115900
.*-------------------------------------------------------------------   00116000
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00116100
              AIF   (K'&ZXDCBPTR LE 0).ZG11R    NOT I/O                 00116200
              AIF   ('&XDCBPTR'(1,1) NE '(').ZG11R                      00116300
&ZCGPR        SETC  '&XDCBPTR'(2,K'&XDCBPTR-2)                          00116400
              AIF   ('&ZCGPR'(1,1) NE '0').ZG11P                        00116500
              AIF   (K'&ZCGPR GT 2).ZG11Q                               00116600
              AIF   ('&ZCGPR' EQ '0').ZG11Q                             00116700
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00116800
              AIF   (T'&ZCGPR NE 'N').ZG11Q     INVALID REG NAME        00116900
.ZG11P        ANOP  ,                                                   00117000
              AIF   (T'&ZCGPR NE 'N').ZG11R     NON NUMERIC             00117100
              AIF   ('&ZCGPR' LT '2').ZG11Q                             00117200
              AIF   ('&ZCGPR' LE '12').ZG11R                            00117300
.ZG11Q        ANOP  ,                                                   00117400
&ZMS          SETC  '"DCBPTR='  *KGPRA* MNOTE                           00117500
&ZMS          SETC  '&ZMS.&DCBPTR"'                                     00117600
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00117700
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00117800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00117900
.ZG11R        ANOP  ,                                                   00118000
.*-------------------------------------------------------------------   00118100
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00118200
.ZG12         AIF   ('&XINTYPE1' NE 'ACBPTR').ZG13                      00118300
.*-------------------------------------------------------------------   00118400
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00118500
              AIF   (K'&ZXACBPTR LE 0).ZG12R    NOT I/O                 00118600
              AIF   ('&XACBPTR'(1,1) NE '(').ZG12R                      00118700
&ZCGPR        SETC  '&XACBPTR'(2,K'&XACBPTR-2)                          00118800
              AIF   ('&ZCGPR'(1,1) NE '0').ZG12P                        00118900
              AIF   (K'&ZCGPR GT 2).ZG12Q                               00119000
              AIF   ('&ZCGPR' EQ '0').ZG12Q                             00119100
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00119200
              AIF   (T'&ZCGPR NE 'N').ZG12Q     INVALID REG NAME        00119300
.ZG12P        ANOP  ,                                                   00119400
              AIF   (T'&ZCGPR NE 'N').ZG12R     NON NUMERIC             00119500
              AIF   ('&ZCGPR' LT '2').ZG12Q                             00119600
              AIF   ('&ZCGPR' LE '12').ZG12R                            00119700
.ZG12Q        ANOP  ,                                                   00119800
&ZMS          SETC  '"ACBPTR='  *KGPRA* MNOTE                           00119900
&ZMS          SETC  '&ZMS.&ACBPTR"'                                     00120000
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00120100
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00120200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00120300
.ZG12R        ANOP  ,                                                   00120400
.*-------------------------------------------------------------------   00120500
.***AG.KMEKY15 NAME, RQD INPUT, ME KEYS -END                            00120600
.ZG13         ANOP  ,           END MUTUALLY EXCLUSIVE KEYS             00120700
.*----------------------------------------------------------------***   00120800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00120900
              AIF   (N'&SUBPOOL LE 1).ZG15A     CK NUM                  00121000
&ZMS          SETC  '"SUBPOOL='                 *KPOSA* MNOTE           00121100
&ZMS          SETC  '&ZMS.&SUBPOOL"'                                    00121200
&ZMS          SETC  '&ZMS "SUBPOOL"'                                    00121300
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00121400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00121500
.ZG15A        ANOP  ,                                                   00121600
.*-------------------------------------------------------------------   00121700
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00121800
&XSUBPOOL     SETC  '0'         SET DEFAULT                             00121900
              AIF   (K'&SUBPOOL(1) LE 0).ZG15C  PARM                    00122000
&XSUBPOOL     SETC  '&SUBPOOL(1)'               SET XVARIABLE           00122100
              AIF   (N'&SUBPOOL GT 1).ZG15B     MULTI PARMS             00122200
&XSUBPOOL     SETC  '&SUBPOOL'  SET XVARIABLE                           00122300
.ZG15B        AIF   (K'&XDEVENTRY GT 0).ZG15C   KEY                     00122400
&ZMS          SETC  '"SUBPOOL'  *KDEPA* MNOTE                           00122500
&ZMS          SETC  '&ZMS.=&SUBPOOL"'                                   00122600
&ZMS          SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                     00122700
&ZMS          SETC  '&ZMS '                                             00122800
&ZMS          SETC  '&ZMS "DEVENTRY"'                                   00122900
              MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                        00123000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00123100
.ZG15C        ANOP  ,                                                   00123200
&ZXSUBPOOL    SETC  'INPUT'     SET IN/OUTPUT                           00123300
.*-------------------------------------------------------------------   00123400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00123500
              AIF   (K'&ZXSUBPOOL LE 0).ZG15R   NOT I/O                 00123600
              AIF   ('&XSUBPOOL'(1,1) NE '(').ZG15R                     00123700
&ZCGPR        SETC  '&XSUBPOOL'(2,K'&XSUBPOOL-2)                        00123800
              AIF   ('&ZCGPR'(1,1) NE '0').ZG15P                        00123900
              AIF   (K'&ZCGPR GT 2).ZG15Q                               00124000
              AIF   ('&ZCGPR' EQ '0').ZG15Q                             00124100
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00124200
              AIF   (T'&ZCGPR NE 'N').ZG15Q     INVALID REG NAME        00124300
.ZG15P        ANOP  ,                                                   00124400
              AIF   (T'&ZCGPR NE 'N').ZG15R     NON NUMERIC             00124500
              AIF   ('&ZCGPR' LT '2').ZG15Q                             00124600
              AIF   ('&ZCGPR' LE '12').ZG15R                            00124700
.ZG15Q        ANOP  ,                                                   00124800
&ZMS          SETC  '"SUBPOOL='                 *KGPRA* MNOTE           00124900
&ZMS          SETC  '&ZMS.&SUBPOOL"'                                    00125000
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00125100
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00125200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00125300
.ZG15R        ANOP  ,                                                   00125400
.*----------------------------------------------------------------***   00125500
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY                    00125600
              AIF   (N'&DEVAREA LE 1).ZG18A     CK NUM                  00125700
&ZMS          SETC  '"DEVAREA='                 *KPOSA* MNOTE           00125800
&ZMS          SETC  '&ZMS.&DEVAREA"'                                    00125900
&ZMS          SETC  '&ZMS "DEVAREA"'                                    00126000
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00126100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00126200
.ZG18A        ANOP  ,                                                   00126300
.*-------------------------------------------------------------------   00126400
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE                        00126500
&ZXDEVAREA    SETC  'OUTPUT'    SET IN/OUTPUT                           00126600
&XDEVAREA     SETC  '&DEVAREA(1)'               SET XVARIABLE           00126700
              AIF   (N'&DEVAREA GT 1).ZG18B     MULTI PARMS             00126800
&XDEVAREA     SETC  '&DEVAREA'  SET XVARIABLE                           00126900
.ZG18B        AIF   (K'&DEVAREA(1) GT 0).ZG18C                          00127000
&ZXDEVAREA    SETC  ''          RESET IN/OUTPUT                         00127100
&ZMS          SETC  ' '         *KRQDA*                                 00127200
&ZMS          SETC  '&ZMS "DEVAREA" KEY AND ITS ARGUMENT'               00127300
              MNOTE 8,' &ZMS ARE REQUIRED.'                             00127400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00127500
.ZG18C        ANOP  ,                                                   00127600
.*-------------------------------------------------------------------   00127700
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE                   00127800
              AIF   (K'&ZXDEVAREA LE 0).ZG18R   NOT I/O                 00127900
              AIF   ('&XDEVAREA'(1,1) NE '(').ZG18R                     00128000
&ZCGPR        SETC  '&XDEVAREA'(2,K'&XDEVAREA-2)                        00128100
              AIF   ('&ZCGPR'(1,1) NE '0').ZG18P                        00128200
              AIF   (K'&ZCGPR GT 2).ZG18Q                               00128300
              AIF   ('&ZCGPR' EQ '0').ZG18Q                             00128400
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00128500
              AIF   (T'&ZCGPR NE 'N').ZG18Q     INVALID REG NAME        00128600
.ZG18P        ANOP  ,                                                   00128700
              AIF   (T'&ZCGPR NE 'N').ZG18R     NON NUMERIC             00128800
              AIF   ('&ZCGPR' LT '2').ZG18Q                             00128900
              AIF   ('&ZCGPR' LE '12').ZG18R                            00129000
.ZG18Q        ANOP  ,                                                   00129100
&ZMS          SETC  '"DEVAREA='                 *KGPRA* MNOTE           00129200
&ZMS          SETC  '&ZMS.&DEVAREA"'                                    00129300
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00129400
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00129500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00129600
.ZG18R        ANOP  ,                                                   00129700
.*----------------------------------------------------------------***   00129800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00129900
              AIF   (N'&TCBPTR LE 1).ZG23A      CK NUM                  00130000
&ZMS          SETC  '"TCBPTR='  *KPOSA* MNOTE                           00130100
&ZMS          SETC  '&ZMS.&TCBPTR"'                                     00130200
&ZMS          SETC  '&ZMS "TCBPTR"'                                     00130300
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00130400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00130500
.ZG23A        ANOP  ,                                                   00130600
.*-------------------------------------------------------------------   00130700
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00130800
&ZXTCBPTR     SETC  'INPUT'     SET IN/OUTPUT                           00130900
&XTCBPTR      SETC  '0'                                                 00131000
              AIF   (K'&TCBPTR(1) LE 0).ZG23B   PARM                    00131100
&XTCBPTR      SETC  '&TCBPTR(1)'                SET XVARIABLE           00131200
              AIF   (N'&TCBPTR GT 1).ZG23B      MULTI PARMS             00131300
&XTCBPTR      SETC  '&TCBPTR'   SET XVARIABLE                           00131400
.ZG23B        ANOP  ,                                                   00131500
.*-------------------------------------------------------------------   00131600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00131700
              AIF   (K'&ZXTCBPTR LE 0).ZG23R    NOT I/O                 00131800
              AIF   ('&XTCBPTR' EQ '0').ZG23R                           00131900
              AIF   ('&XTCBPTR'(1,1) NE '(').ZG23R                      00132000
&ZCGPR        SETC  '&XTCBPTR'(2,K'&XTCBPTR-2)                          00132100
              AIF   ('&ZCGPR'(1,1) NE '0').ZG23P                        00132200
              AIF   (K'&ZCGPR GT 2).ZG23Q                               00132300
              AIF   ('&ZCGPR' EQ '0').ZG23Q                             00132400
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00132500
              AIF   (T'&ZCGPR NE 'N').ZG23Q     INVALID REG NAME        00132600
.ZG23P        ANOP  ,                                                   00132700
              AIF   (T'&ZCGPR NE 'N').ZG23R     NON NUMERIC             00132800
              AIF   ('&ZCGPR' LT '2').ZG23Q                             00132900
              AIF   ('&ZCGPR' LE '12').ZG23R                            00133000
.ZG23Q        ANOP  ,                                                   00133100
&ZMS          SETC  '"TCBPTR='  *KGPRA* MNOTE                           00133200
&ZMS          SETC  '&ZMS.&TCBPTR"'                                     00133300
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00133400
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00133500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00133600
.ZG23R        ANOP  ,                                                   00133700
.*----------------------------------------------------------------***   00133800
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00133900
              AIF   (N'&RETCODE LE 1).ZG26A     CK NUM                  00134000
&ZMS          SETC  '"RETCODE='                 *KPOSA* MNOTE           00134100
&ZMS          SETC  '&ZMS.&RETCODE"'                                    00134200
&ZMS          SETC  '&ZMS "RETCODE"'                                    00134300
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00134400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00134500
.ZG26A        ANOP  ,                                                   00134600
.*-------------------------------------------------------------------   00134700
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00134800
              AIF   (K'&RETCODE(1) LE 0).ZG26C  NO PARM                 00134900
&ZXRETCODE    SETC  'OUTPUT'    SET OUTPUT                              00135000
&XRETCODE     SETC  '&RETCODE(1)'               SET XVARIABLE           00135100
              AIF   (N'&RETCODE GT 1).ZG26C                             00135200
&XRETCODE     SETC  '&RETCODE'  SET XVARIABLE                           00135300
.ZG26C        ANOP  ,                                                   00135400
.*-------------------------------------------------------------------   00135500
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00135600
              AIF   (K'&ZXRETCODE LE 0).ZG26R   NOT I/O                 00135700
              AIF   ('&XRETCODE'(1,1) NE '(').ZG26R                     00135800
&ZCGPR        SETC  '&XRETCODE'(2,K'&XRETCODE-2)                        00135900
              AIF   ('&ZCGPR'(1,1) NE '0').ZG26P                        00136000
              AIF   (K'&ZCGPR GT 2).ZG26Q                               00136100
              AIF   ('&ZCGPR' EQ '0').ZG26Q                             00136200
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00136300
              AIF   (T'&ZCGPR NE 'N').ZG26Q     INVALID REG NAME        00136400
.ZG26P        ANOP  ,                                                   00136500
              AIF   (T'&ZCGPR NE 'N').ZG26R     NON NUMERIC             00136600
              AIF   ('&ZCGPR' LT '2').ZG26Q                             00136700
              AIF   ('&ZCGPR' LE '12').ZG26R                            00136800
.ZG26Q        ANOP  ,                                                   00136900
&ZMS          SETC  '"RETCODE='                 *KGPRA* MNOTE           00137000
&ZMS          SETC  '&ZMS.&RETCODE"'                                    00137100
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00137200
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00137300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00137400
.ZG26R        ANOP  ,                                                   00137500
.*----------------------------------------------------------------***   00137600
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00137700
              AIF   (N'&RSNCODE LE 1).ZG29A     CK NUM                  00137800
&ZMS          SETC  '"RSNCODE='                 *KPOSA* MNOTE           00137900
&ZMS          SETC  '&ZMS.&RSNCODE"'                                    00138000
&ZMS          SETC  '&ZMS "RSNCODE"'                                    00138100
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00138200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00138300
.ZG29A        ANOP  ,                                                   00138400
.*-------------------------------------------------------------------   00138500
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00138600
              AIF   (K'&RSNCODE(1) LE 0).ZG29C  NO PARM                 00138700
&ZXRSNCODE    SETC  'OUTPUT'    SET OUTPUT                              00138800
&XRSNCODE     SETC  '&RSNCODE(1)'               SET XVARIABLE           00138900
              AIF   (N'&RSNCODE GT 1).ZG29C                             00139000
&XRSNCODE     SETC  '&RSNCODE'  SET XVARIABLE                           00139100
.ZG29C        ANOP  ,                                                   00139200
.*-------------------------------------------------------------------   00139300
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00139400
              AIF   (K'&ZXRSNCODE LE 0).ZG29R   NOT I/O                 00139500
              AIF   ('&XRSNCODE'(1,1) NE '(').ZG29R                     00139600
&ZCGPR        SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                        00139700
              AIF   ('&ZCGPR'(1,1) NE '0').ZG29P                        00139800
              AIF   (K'&ZCGPR GT 2).ZG29Q                               00139900
              AIF   ('&ZCGPR' EQ '0').ZG29Q                             00140000
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00140100
              AIF   (T'&ZCGPR NE 'N').ZG29Q     INVALID REG NAME        00140200
.ZG29P        ANOP  ,                                                   00140300
              AIF   (T'&ZCGPR NE 'N').ZG29R     NON NUMERIC             00140400
              AIF   ('&ZCGPR' LT '2').ZG29Q                             00140500
              AIF   ('&ZCGPR' LE '12').ZG29R                            00140600
.ZG29Q        ANOP  ,                                                   00140700
&ZMS          SETC  '"RSNCODE='                 *KGPRA* MNOTE           00140800
&ZMS          SETC  '&ZMS.&RSNCODE"'                                    00140900
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00141000
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00141100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00141200
.ZG29R        ANOP  ,                                                   00141300
.******************************************************************     00141400
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00141500
.******************************************************************     00141600
              ACTR  10000                                               00141700
.*-------------------------------------------------------------------   00141800
.***AH.P03 EXTRA POSITIONALS AMONG NON-X KEYS                           00141900
&ZCVAL        SETC  ''          ERROR FIELD                             00142000
&ZAWRK        SETA  0           POSITIONAL COUNTER                      00142100
&ZASYSLNDX    SETA  0           NON-X KEY COUNTER                       00142200
.ZGLIST2      ANOP  ,                                                   00142300
&ZASYSLNDX    SETA  &ZASYSLNDX+1                NEXT NON-X KEY          00142400
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZGLIST3  DONE                 00142500
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZGLIST2          00142600
&ZAWRK        SETA  &ZAWRK+1    NEXT POSITIONAL                         00142700
              AIF   (&ZAWRK LE 0).ZGLIST2                               00142800
&ZCVAL        SETC '&ZCVAL,&SYSLIST(&ZASYSLNDX)'  EXTRA                 00142900
              AGO   .ZGLIST2                                            00143000
.*                                                                      00143100
.ZGLIST3  AIF  (K'&ZCVAL LE 0).ZGLISTX                                  00143200
&ZCVAL        SETC '&ZCVAL'(2,K'&ZCVAL-1)       STRIP COMMA             00143300
&ZMS          SETC  'POSITIONAL ARGUMENT(S),'   *PPOSA* MNOTE           00143400
&ZMS          SETC  '&ZMS "&ZCVAL"'                                     00143500
&ZMS          SETC  '&ZMS CANNOT BE USED.'                              00143600
&ZMS          SETC  '&ZMS NO POSITIONAL ARGUMENTS'                      00143700
              MNOTE 8,' &ZMS ARE ALLOWED.'                              00143800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00143900
.ZGLISTX      ANOP  ,                                                   00144000
&ZASYSLNDX    SETA  0                                                   00144100
.*-------------------------------------------------------------------   00144200
.***AG.MF04 MF=(SLE)                                                    00144300
.ZGMFX        ANOP  ,           END OF FULL SYNTAX CHECK                00144400
.*******************************************************************    00144500
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00144600
.*******************************************************************    00144700
              AIF   (&ZMACRET NE 0).ZLX2        ERROR DETECTED          00144800
.*******************************************************************    00144900
.***AE.01  START OF IEFDDSRV MACRO CODE                                 00145000
.*******************************************************************    00145100
              LCLC  &M0M0001                 NAME                       00145200
&M0M0001      SETC  '&XLABEL'                SET NAME                   00145300
              AIF   (K'&XLABEL NE 0).XLAB2                              00145400
&M0M0001      SETC  'M00M&SYSNDX'            DEFAULT NAME               00145500
.*                                                                      00145600
.XLAB2        ANOP  ,                                                   00145700
&M0M0001 DS    0H                             IEFDDSRV-0                00145800
.*******************************************************************    00145900
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00146000
.*******************************************************************    00146100
              PUSH  PRINT                                               00146200
              AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON          00146300
              PRINT OFF         ++ PR01                                 00146400
              AGO   .ZPRNTXX                                            00146500
.ZPRINTX      PRINT ON                                                  00146600
.ZPRNTXX      ANOP  ,                                                   00146700
.********************************************************************   00146800
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00146900
.********************************************************************   00147000
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00147100
                      LCLA  &ZOPN1         INVOCATION INDEX             00147200
                      LCLC  &ZOPL(4095)    LABEL                        00147300
                      LCLC  &ZOPO(4095)    OPERATION                    00147400
                      LCLC  &ZOPV(4095)    VALUE                        00147500
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00147600
.*                                                                      00147700
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00147800
.******************************************************************     00147900
.***AL.L10 IEFDDSRV FMT=LIST MF=S|L PARAMETERS                          00148000
.******************************************************************     00148100
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     00148200
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     00148300
&XMFCTRL              SETC  '#Z'.'&SYSNDX'(1,4).'A'                     00148400
&XMFATTR              SETC  '0D'                                        00148500
.*                                                                      00148600
&ZOPN                 SETA  &ZOPN+1                                     00148700
&ZOPL(&ZOPN)          SETC  ' '                                         00148800
&ZOPO(&ZOPN)          SETC  'B'                                         00148900
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'                                00149000
&ZOPD(&ZOPN)          SETC  '++ IEFDDSRV ARG PARMS'                     00149100
.*                                                                      00149200
&ZOPN                 SETA  &ZOPN+1                                     00149300
&ZOPL(&ZOPN)          SETC  ' '                                         00149400
&ZOPO(&ZOPN)          SETC  'SPACE'                                     00149500
&ZOPV(&ZOPN)          SETC  '1'                                         00149600
&ZOPD(&ZOPN)          SETC  ' '                                         00149700
.*                                                                      00149800
.ZLMFSL2              ANOP  ,                                           00149900
.*-------------------------------------------------------------------   00150000
.***AM.L01  IEFDDSRV FMT=LIST PARAMETERS                                00150100
&ZOPN                 SETA &ZOPN+1                                      00150200
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00150300
&ZOPO(&ZOPN)          SETC 'DS'                                         00150400
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00150500
&ZOPD(&ZOPN)          SETC '++ IEFDDSRV PARM LIST'                      00150600
.*-------------------------------------------------------------------   00150700
.***AM.L09  XACRONYM CL4                                                00150800
&ZOPN                 SETA &ZOPN+1                                      00150900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XACRONYM'                         00151000
&ZOPO(&ZOPN)          SETC 'DS'                                         00151100
&ZOPV(&ZOPN)          SETC 'CL4'                                        00151200
&ZOPD(&ZOPN)          SETC '++ CONSTANT  XACRONYM'                      00151300
.*-------------------------------------------------------------------   00151400
.***AM.L09  XPLISTLEN XL2                                               00151500
&ZOPN                 SETA &ZOPN+1                                      00151600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'                        00151700
&ZOPO(&ZOPN)          SETC 'DS'                                         00151800
&ZOPV(&ZOPN)          SETC 'XL2'                                        00151900
&ZOPD(&ZOPN)          SETC '++ INPUT  XPLISTLEN'                        00152000
.*-------------------------------------------------------------------   00152100
.***AM.L02 XVERSION XL1                                                 00152200
&ZOPN                 SETA &ZOPN+1                                      00152300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00152400
&ZOPO(&ZOPN)          SETC 'DS'                                         00152500
&ZOPV(&ZOPN)          SETC 'XL1'                                        00152600
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00152700
.*-------------------------------------------------------------------   00152800
.***AM.L09  XRSV0001 CL1                                                00152900
&ZOPN                 SETA &ZOPN+1                                      00153000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0001'                         00153100
&ZOPO(&ZOPN)          SETC 'DS'                                         00153200
&ZOPV(&ZOPN)          SETC 'CL1'                                        00153300
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0001'                      00153400
.*-------------------------------------------------------------------   00153500
.***AM.L03 XFUNC_TYPE BL.8                                              00153600
&ZOPN                 SETA &ZOPN+1                                      00153700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XFUNC_TYPE'                       00153800
&ZOPO(&ZOPN)          SETC 'DS'                                         00153900
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00154000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00154100
.*                                                                      00154200
&ZOPN                 SETA  &ZOPN+1                                     00154300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_RETRIEVE'                00154400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00154500
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00154600
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00154700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).RETRIEVE'                     00154800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00154900
.*-------------------------------------------------------------------   00155000
.***AM.L03 XREQ_TYPE BL.16                                              00155100
&ZOPN                 SETA &ZOPN+1                                      00155200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQ_TYPE'                        00155300
&ZOPO(&ZOPN)          SETC 'DS'                                         00155400
&ZOPV(&ZOPN)          SETC 'BL.16'                                      00155500
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00155600
.*                                                                      00155700
&ZOPN                 SETA  &ZOPN+1                                     00155800
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_DEVENTRY'                00155900
&ZOPO(&ZOPN)          SETC  'EQU'                                       00156000
&ZOPV(&ZOPN)          SETC  'B''1000000000000000'''                     00156100
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00156200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).DEVENTRY'                     00156300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00156400
.*-------------------------------------------------------------------   00156500
.***AM.L03 XINFLGS BL.8                                                 00156600
&ZOPN                 SETA &ZOPN+1                                      00156700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XINFLGS'                          00156800
&ZOPO(&ZOPN)          SETC 'DS'                                         00156900
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00157000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00157100
.*                                                                      00157200
&ZOPN                 SETA  &ZOPN+1                                     00157300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_DDNAME'                  00157400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00157500
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00157600
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00157700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).DDNAME'                       00157800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00157900
.*                                                                      00158000
&ZOPN                 SETA  &ZOPN+1                                     00158100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_DSABPTR'                 00158200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00158300
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             00158400
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00158500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).DSABPTR'                      00158600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00158700
.*                                                                      00158800
&ZOPN                 SETA  &ZOPN+1                                     00158900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_DCBPTR'                  00159000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00159100
&ZOPV(&ZOPN)          SETC  'B''00100000'''                             00159200
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00159300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).DCBPTR'                       00159400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00159500
.*                                                                      00159600
&ZOPN                 SETA  &ZOPN+1                                     00159700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_TCBPTR'                  00159800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00159900
&ZOPV(&ZOPN)          SETC  'B''00010000'''                             00160000
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00160100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).TCBPTR'                       00160200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00160300
.*                                                                      00160400
&ZOPN                 SETA  &ZOPN+1                                     00160500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_SUBPOOL'                 00160600
&ZOPO(&ZOPN)          SETC  'EQU'                                       00160700
&ZOPV(&ZOPN)          SETC  'B''00001000'''                             00160800
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00160900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SUBPOOL'                      00161000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00161100
.*                                                                      00161200
&ZOPN                 SETA  &ZOPN+1                                     00161300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_ACBPTR'                  00161400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00161500
&ZOPV(&ZOPN)          SETC  'B''00000100'''                             00161600
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00161700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ACBPTR'                       00161800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00161900
.*-------------------------------------------------------------------   00162000
.***AM.L09  XDEVAREA A                                                  00162100
&ZOPN                 SETA &ZOPN+1                                      00162200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XDEVAREA'                         00162300
&ZOPO(&ZOPN)          SETC 'DS'                                         00162400
&ZOPV(&ZOPN)          SETC 'A'                                          00162500
&ZOPD(&ZOPN)          SETC '++ &ZXDEVAREA  XDEVAREA'                    00162600
.*-------------------------------------------------------------------   00162700
.***AM.L09  XDDNAME CL8                                                 00162800
&ZOPN                 SETA &ZOPN+1                                      00162900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XDDNAME'                          00163000
&ZOPO(&ZOPN)          SETC 'DS'                                         00163100
&ZOPV(&ZOPN)          SETC 'CL8'                                        00163200
&ZOPD(&ZOPN)          SETC '++ &ZXDDNAME  XDDNAME'                      00163300
.*-------------------------------------------------------------------   00163400
.***AM.L09  XDSABPTR A                                                  00163500
&ZOPN                 SETA &ZOPN+1                                      00163600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XDSABPTR'                         00163700
&ZOPO(&ZOPN)          SETC 'DS'                                         00163800
&ZOPV(&ZOPN)          SETC 'A'                                          00163900
&ZOPD(&ZOPN)          SETC '++ &ZXDSABPTR  XDSABPTR'                    00164000
.*-------------------------------------------------------------------   00164100
.***AM.L09  XDCBPTR A                                                   00164200
&ZOPN                 SETA &ZOPN+1                                      00164300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XDCBPTR'                          00164400
&ZOPO(&ZOPN)          SETC 'DS'                                         00164500
&ZOPV(&ZOPN)          SETC 'A'                                          00164600
&ZOPD(&ZOPN)          SETC '++ &ZXDCBPTR  XDCBPTR'                      00164700
.*-------------------------------------------------------------------   00164800
.***AM.L09  XACBPTR A                                                   00164900
&ZOPN                 SETA &ZOPN+1                                      00165000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XACBPTR'                          00165100
&ZOPO(&ZOPN)          SETC 'DS'                                         00165200
&ZOPV(&ZOPN)          SETC 'A'                                          00165300
&ZOPD(&ZOPN)          SETC '++ &ZXACBPTR  XACBPTR'                      00165400
.*-------------------------------------------------------------------   00165500
.***AM.L09  XTCBPTR A                                                   00165600
&ZOPN                 SETA &ZOPN+1                                      00165700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTCBPTR'                          00165800
&ZOPO(&ZOPN)          SETC 'DS'                                         00165900
&ZOPV(&ZOPN)          SETC 'A'                                          00166000
&ZOPD(&ZOPN)          SETC '++ &ZXTCBPTR  XTCBPTR'                      00166100
.*-------------------------------------------------------------------   00166200
.***AM.L09  XSUBPOOL XL1                                                00166300
&ZOPN                 SETA &ZOPN+1                                      00166400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSUBPOOL'                         00166500
&ZOPO(&ZOPN)          SETC 'DS'                                         00166600
&ZOPV(&ZOPN)          SETC 'XL1'                                        00166700
&ZOPD(&ZOPN)          SETC '++ &ZXSUBPOOL  XSUBPOOL'                    00166800
.*-------------------------------------------------------------------   00166900
.***AM.L09  XRSV0002 CL3                                                00167000
&ZOPN                 SETA &ZOPN+1                                      00167100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0002'                         00167200
&ZOPO(&ZOPN)          SETC 'DS'                                         00167300
&ZOPV(&ZOPN)          SETC 'CL3'                                        00167400
&ZOPD(&ZOPN)          SETC '++ RESERVED  XRSV0002'                      00167500
.*-------------------------------------------------------------------   00167600
.***AM.L10 END OF IEFDDSRV LIST PARAMETERS                              00167700
&ZOPN                 SETA &ZOPN+1                                      00167800
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00167900
&ZOPO(&ZOPN)          SETC 'EQU'                                        00168000
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00168100
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00168200
.*                                                                      00168300
&ZOPN                 SETA &ZOPN+1                                      00168400
&ZOPL(&ZOPN)          SETC ' '                                          00168500
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00168600
&ZOPV(&ZOPN)          SETC '1'                                          00168700
&ZOPD(&ZOPN)          SETC ' '                                          00168800
.*-------------------------------------------------------------------   00168900
.***AL.L12 IEFDDSRV FMT=LIST MF=S|L PARAMETERS                          00169000
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         00169100
.*                                                                      00169200
&ZOPN                 SETA  &ZOPN+1                                     00169300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                00169400
&ZOPO(&ZOPN)          SETC  'DC'                                        00169500
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   00169600
&ZOPD(&ZOPN)          SETC  '++ IEFDDSRV ARG PARMS'                     00169700
.*                                                                      00169800
.ZLMFSLX              ANOP  ,                                           00169900
.*-------------------------------------------------------------------   00170000
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00170100
&ZPLLEN               SETA 44                                           00170200
.*                                                                      00170300
.******************************************************************     00170400
.***AI.L01 IEFDDSRV FMT=LIST FILL IN PARAMETER AREA                     00170500
.******************************************************************     00170600
                      ACTR  10000                                       00170700
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00170800
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00170900
&ZCVAL                SETC  'LAE'          XAX MODE                     00171000
.ZIMFXA               ANOP ,                                            00171100
.*                                                                      00171200
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00171300
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00171400
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00171500
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00171600
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00171700
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00171800
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00171900
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00172000
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00172100
&ZOPN                 SETA  &ZOPN+1                                     00172200
&ZOPL(&ZOPN)          SETC  ' '                                         00172300
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00172400
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00172500
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00172600
                      AGO   .ZIMFNX                                     00172700
.*                                                                      00172800
.ZIMFN2               ANOP ,                                            00172900
&ZOPN                 SETA  &ZOPN+1                                     00173000
&ZOPL(&ZOPN)          SETC  ' '                                         00173100
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00173200
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00173300
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00173400
.ZIMFNX               ANOP ,                                            00173500
.********************************************************************   00173600
.***AI.L02 IEFDDSRV FMT=LIST INITIALIZE PARAMETER AREA                  00173700
.********************************************************************   00173800
.***AI.L03 MF=(SLE)                                                     00173900
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00174000
.*                                                                      00174100
&ZOPN                 SETA  &ZOPN+1                                     00174200
&ZOPL(&ZOPN)          SETC  ' '                                         00174300
&ZOPO(&ZOPN)          SETC  'XC'                                        00174400
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00174500
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00174600
.ZIMFLX               ANOP  ,                                           00174700
.*-------------------------------------------------------------------   00174800
.***AI.L60 XACRONYM CL4                                                 00174900
&ZOPN                 SETA  &ZOPN+1                                     00175000
&ZOPL(&ZOPN)          SETC  ' '                                         00175100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00175200
&ZOPV(&ZOPN)          SETC  '0(4,1),=CL4''DDSV'''                       00175300
&ZOPD(&ZOPN)          SETC  '++ CL4 CONSTANT'                           00175400
.*-------------------------------------------------------------------   00175500
.***AI.L04 XPLISTLEN XL2                                                00175600
&ZOPN                 SETA  &ZOPN+1                                     00175700
&ZOPL(&ZOPN)          SETC  ' '                                         00175800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00175900
&ZOPV(&ZOPN)          SETC  '4(2,1),=AL2(&ZPLLEN)'                      00176000
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'                    00176100
.*-------------------------------------------------------------------   00176200
.***AI.L05 XFUNC_TYPE BL1                                               00176300
&ZW                   SETC  ''                                          00176400
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00176500
.*-------------------------------------------------------------------   00176600
.***AI.L08 XFUNC_TYPE "RETRIEVE"                                        00176700
.***      BL1'1XXXXXXX'                                                 00176800
         AIF   ('&XRETRIEVE' EQ '').ZI6A                                00176900
&ZW                   SETC  '&ZW.10000000'                              00177000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00177100
                      AGO   .ZI6C                                       00177200
.*                                                                      00177300
.ZI6A                 ANOP  ,                                           00177400
&ZW                   SETC  '&ZW.00000000'                              00177500
.ZI6C                 ANOP  ,                                           00177600
.*-------------------------------------------------------------------   00177700
.***AI.L11 XFUNC_TYPE BL1                                               00177800
                      AIF   ('&ZCLNG' NE 'YES').ZI6E  ALL ZERO BITS     00177900
&ZOPN                 SETA  &ZOPN+1                                     00178000
&ZOPL(&ZOPN)          SETC  ' '                                         00178100
&ZOPO(&ZOPN)          SETC  'OI'                                        00178200
&ZOPV(&ZOPN)          SETC  '8(1),B''&ZW'''                             00178300
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00178400
.ZI6E                 ANOP  ,                                           00178500
.*-------------------------------------------------------------------   00178600
.***AI.L05 XREQ_TYPE BL2                                                00178700
&ZW                   SETC  ''                                          00178800
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00178900
.*-------------------------------------------------------------------   00179000
.***AI.L08 XREQ_TYPE "DEVENTRY"                                         00179100
.***      BL2'1XXXXXXXXXXXXXXX'                                         00179200
         AIF   ('&XDEVENTRY' EQ '').ZI8A                                00179300
&ZW                   SETC  '&ZW.1000000000000000'                      00179400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00179500
                      AGO   .ZI8C                                       00179600
.*                                                                      00179700
.ZI8A                 ANOP  ,                                           00179800
&ZW                   SETC  '&ZW.0000000000000000'                      00179900
.ZI8C                 ANOP  ,                                           00180000
.*-------------------------------------------------------------------   00180100
.***AI.L10 XREQ_TYPE BL2                                                00180200
                      AIF   ('&ZCLNG' NE 'YES').ZI8E  ALL ZERO BITS     00180300
&ZOPN                 SETA  &ZOPN+1                                     00180400
&ZOPL(&ZOPN)          SETC  ' '                                         00180500
&ZOPO(&ZOPN)          SETC  'OC'                                        00180600
&ZOPV(&ZOPN)          SETC  '9(2,1),=BL2''&ZW'''                        00180700
&ZOPD(&ZOPN)          SETC  '++ INPUT BL2'                              00180800
.ZI8E                 ANOP  ,                                           00180900
.*-------------------------------------------------------------------   00181000
.***AI.L05 XINFLGS BL1                                                  00181100
&ZW                   SETC  ''                                          00181200
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00181300
.*-------------------------------------------------------------------   00181400
.***AI.L08 XINFLGS "DDNAME"                                             00181500
.***      BL1'1XXXXXXX'                                                 00181600
         AIF   ('&DDNAME' EQ '').ZI10A                                  00181700
&ZW                   SETC  '&ZW.1'                                     00181800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00181900
                      AGO   .ZI10C                                      00182000
.*                                                                      00182100
.ZI10A                ANOP  ,                                           00182200
&ZW                   SETC  '&ZW.0'                                     00182300
.ZI10C                ANOP  ,                                           00182400
.*-------------------------------------------------------------------   00182500
.***AI.L08 XINFLGS "DSABPTR"                                            00182600
.***      BL1'X1XXXXXX'                                                 00182700
         AIF   ('&DSABPTR' EQ '').ZI11A                                 00182800
&ZW                   SETC  '&ZW.1'                                     00182900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00183000
                      AGO   .ZI11C                                      00183100
.*                                                                      00183200
.ZI11A                ANOP  ,                                           00183300
&ZW                   SETC  '&ZW.0'                                     00183400
.ZI11C                ANOP  ,                                           00183500
.*-------------------------------------------------------------------   00183600
.***AI.L08 XINFLGS "DCBPTR"                                             00183700
.***      BL1'XX1XXXXX'                                                 00183800
         AIF   ('&DCBPTR' EQ '').ZI12A                                  00183900
&ZW                   SETC  '&ZW.1'                                     00184000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00184100
                      AGO   .ZI12C                                      00184200
.*                                                                      00184300
.ZI12A                ANOP  ,                                           00184400
&ZW                   SETC  '&ZW.0'                                     00184500
.ZI12C                ANOP  ,                                           00184600
.*-------------------------------------------------------------------   00184700
.***AI.L08 XINFLGS "TCBPTR"                                             00184800
.***      BL1'XXX1XXXX'                                                 00184900
         AIF   ('&TCBPTR' EQ '').ZI13A                                  00185000
         AIF   ('&TCBPTR' EQ '0').ZI13A                                 00185100
&ZW                   SETC  '&ZW.1'                                     00185200
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00185300
                      AGO   .ZI13C                                      00185400
.*                                                                      00185500
.ZI13A                ANOP  ,                                           00185600
&ZW                   SETC  '&ZW.0'                                     00185700
.ZI13C                ANOP  ,                                           00185800
.*-------------------------------------------------------------------   00185900
.***AI.L08 XINFLGS "SUBPOOL"                                            00186000
.***      BL1'XXXX1XXX'                                                 00186100
         AIF   ('&SUBPOOL' EQ '').ZI14A                                 00186200
&ZW                   SETC  '&ZW.1'                                     00186300
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00186400
                      AGO   .ZI14C                                      00186500
.*                                                                      00186600
.ZI14A                ANOP  ,                                           00186700
&ZW                   SETC  '&ZW.0'                                     00186800
.ZI14C                ANOP  ,                                           00186900
.*-------------------------------------------------------------------   00187000
.***AI.L08 XINFLGS "ACBPTR"                                             00187100
.***      BL1'XXXXX1XX'                                                 00187200
         AIF   ('&ACBPTR' EQ '').ZI15A                                  00187300
&ZW                   SETC  '&ZW.100'                                   00187400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00187500
                      AGO   .ZI15C                                      00187600
.*                                                                      00187700
.ZI15A                ANOP  ,                                           00187800
&ZW                   SETC  '&ZW.000'                                   00187900
.ZI15C                ANOP  ,                                           00188000
.*-------------------------------------------------------------------   00188100
.***AI.L11 XINFLGS BL1                                                  00188200
                      AIF   ('&ZCLNG' NE 'YES').ZI15E  ALL ZERO BITS    00188300
&ZOPN                 SETA  &ZOPN+1                                     00188400
&ZOPL(&ZOPN)          SETC  ' '                                         00188500
&ZOPO(&ZOPN)          SETC  'OI'                                        00188600
&ZOPV(&ZOPN)          SETC  '11(1),B''&ZW'''                            00188700
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00188800
.ZI15E                ANOP  ,                                           00188900
.*-------------------------------------------------------------------   00189000
.***AI.L25  XDDNAME CL8                                                 00189100
                      AIF   ('&ZXDDNAME' EQ '').ZI17E  NOT USED         00189200
                      AIF   ('&ZXDDNAME' EQ 'OUTPUT').ZI17E             00189300
&ZCGPR                SETC  '&XDDNAME'                                  00189400
.*                                                                      00189500
                      AIF   ('&XDDNAME'(1,1) NE '(').ZI17B              00189600
&ZCGPR   SETC  '0('.'&XDDNAME'(2,K'&XDDNAME-2).')'                      00189700
.ZI17B                ANOP  ,                                           00189800
.*                                                                      00189900
&ZOPN                 SETA  &ZOPN+1                                     00190000
&ZOPL(&ZOPN)          SETC  ' '                                         00190100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00190200
&ZOPV(&ZOPN)          SETC  '16(8,1),&ZCGPR'                            00190300
&ZOPD(&ZOPN)          SETC  '++ &ZXDDNAME XDDNAME CL8'                  00190400
.*                                                                      00190500
.ZI17E                ANOP  ,                                           00190600
.*-------------------------------------------------------------------   00190700
.***AI.L25  XDSABPTR AL4                                                00190800
                      AIF   ('&ZXDSABPTR' EQ '').ZI18E  NOT USED        00190900
                      AIF   ('&ZXDSABPTR' EQ 'OUTPUT').ZI18E            00191000
&ZCGPR                SETC  '&XDSABPTR'                                 00191100
.*                                                                      00191200
                      AIF   ('&XDSABPTR'(1,1) NE '(').ZI18B             00191300
&ZCGPR   SETC  '0('.'&XDSABPTR'(2,K'&XDSABPTR-2).')'                    00191400
.ZI18B                ANOP  ,                                           00191500
.*                                                                      00191600
&ZC                   SETC  '&XDSABPTR'(1,1)                            00191700
                      AIF   (T'&ZC NE 'N').ZI18D                        00191800
&ZC                   SETC  '&XDSABPTR'                                 00191900
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI18D               00192000
&ZCGPR                SETC  '=AL4(&XDSABPTR)'                           00192100
.*                                                                      00192200
.ZI18D                ANOP  ,                                           00192300
.*                                                                      00192400
&ZOPN                 SETA  &ZOPN+1                                     00192500
&ZOPL(&ZOPN)          SETC  ' '                                         00192600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00192700
&ZOPV(&ZOPN)          SETC  '24(4,1),&ZCGPR'                            00192800
&ZOPD(&ZOPN)          SETC  '++ &ZXDSABPTR XDSABPTR AL4'                00192900
.*                                                                      00193000
.ZI18E                ANOP  ,                                           00193100
.*-------------------------------------------------------------------   00193200
.***AI.L25  XDCBPTR AL4                                                 00193300
                      AIF   ('&ZXDCBPTR' EQ '').ZI19E  NOT USED         00193400
                      AIF   ('&ZXDCBPTR' EQ 'OUTPUT').ZI19E             00193500
&ZCGPR                SETC  '&XDCBPTR'                                  00193600
.*                                                                      00193700
                      AIF   ('&XDCBPTR'(1,1) NE '(').ZI19B              00193800
&ZCGPR   SETC  '0('.'&XDCBPTR'(2,K'&XDCBPTR-2).')'                      00193900
                      AGO   .ZI19D                                      00194000
.ZI19B                ANOP  ,                                           00194100
.*                                                                      00194200
&ZC                   SETC  '&XDCBPTR'(1,1)                             00194300
                      AIF   (T'&ZC NE 'N').ZI19D                        00194400
&ZC                   SETC  '&XDCBPTR'                                  00194500
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI19D               00194600
&ZCGPR                SETC  '=AL4(&XDCBPTR)'                            00194700
.*                                                                      00194800
.ZI19D                ANOP  ,                                           00194900
.*                                                                      00195000
&ZOPN                 SETA  &ZOPN+1                                     00195100
&ZOPL(&ZOPN)          SETC  ' '                                         00195200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00195300
&ZOPV(&ZOPN)          SETC  '28(4,1),&ZCGPR'                            00195400
&ZOPD(&ZOPN)          SETC  '++ &ZXDCBPTR XDCBPTR AL4'                  00195500
.*                                                                      00195600
.ZI19E                ANOP  ,                                           00195700
.*-------------------------------------------------------------------   00195800
.***AI.L25  XACBPTR AL4                                                 00195900
                      AIF   ('&ZXACBPTR' EQ '').ZI20E  NOT USED         00196000
                      AIF   ('&ZXACBPTR' EQ 'OUTPUT').ZI20E             00196100
&ZCGPR                SETC  '&XACBPTR'                                  00196200
.*                                                                      00196300
                      AIF   ('&XACBPTR'(1,1) NE '(').ZI20B              00196400
&ZCGPR   SETC  '0('.'&XACBPTR'(2,K'&XACBPTR-2).')'                      00196500
                      AGO   .ZI20D                                      00196600
.ZI20B                ANOP  ,                                           00196700
.*                                                                      00196800
&ZC                   SETC  '&XACBPTR'(1,1)                             00196900
                      AIF   (T'&ZC NE 'N').ZI20D                        00197000
&ZC                   SETC  '&XACBPTR'                                  00197100
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI20D               00197200
&ZCGPR                SETC  '=AL4(&XACBPTR)'                            00197300
.*                                                                      00197400
.ZI20D                ANOP  ,                                           00197500
.*                                                                      00197600
&ZOPN                 SETA  &ZOPN+1                                     00197700
&ZOPL(&ZOPN)          SETC  ' '                                         00197800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00197900
&ZOPV(&ZOPN)          SETC  '32(4,1),&ZCGPR'                            00198000
&ZOPD(&ZOPN)          SETC  '++ &ZXACBPTR XACBPTR AL4'                  00198100
.*                                                                      00198200
.ZI20E                ANOP  ,                                           00198300
.*-------------------------------------------------------------------   00198400
.***AI.L18  XTCBPTR AL4                                                 00198500
         AIF   ('&XTCBPTR' NE '0').ZI21                                 00198600
&ZXTCBPTR             SETC  ''             RESET INPUT/OUTPUT           00198700
.ZI21                 ANOP  ,                                           00198800
.*-------------------------------------------------------------------   00198900
.***AI.L25  XTCBPTR AL4                                                 00199000
                      AIF   ('&ZXTCBPTR' EQ '').ZI21E  NOT USED         00199100
                      AIF   ('&ZXTCBPTR' EQ 'OUTPUT').ZI21E             00199200
&ZCGPR                SETC  '&XTCBPTR'                                  00199300
.*                                                                      00199400
                      AIF   ('&XTCBPTR'(1,1) NE '(').ZI21B              00199500
&ZCGPR   SETC  '0('.'&XTCBPTR'(2,K'&XTCBPTR-2).')'                      00199600
                      AGO   .ZI21D                                      00199700
.ZI21B                ANOP  ,                                           00199800
.*                                                                      00199900
&ZC                   SETC  '&XTCBPTR'(1,1)                             00200000
                      AIF   (T'&ZC NE 'N').ZI21D                        00200100
&ZC                   SETC  '&XTCBPTR'                                  00200200
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI21D               00200300
&ZCGPR                SETC  '=AL4(&XTCBPTR)'                            00200400
.*                                                                      00200500
.ZI21D                ANOP  ,                                           00200600
.*                                                                      00200700
&ZOPN                 SETA  &ZOPN+1                                     00200800
&ZOPL(&ZOPN)          SETC  ' '                                         00200900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00201000
&ZOPV(&ZOPN)          SETC  '36(4,1),&ZCGPR'                            00201100
&ZOPD(&ZOPN)          SETC  '++ &ZXTCBPTR XTCBPTR AL4'                  00201200
.*                                                                      00201300
.ZI21E                ANOP  ,                                           00201400
.*-------------------------------------------------------------------   00201500
.***AI.L25  XSUBPOOL XL1                                                00201600
                      AIF   ('&ZXSUBPOOL' EQ '').ZI22E  NOT USED        00201700
                      AIF   ('&ZXSUBPOOL' EQ 'OUTPUT').ZI22E            00201800
&ZCGPR                SETC  '&XSUBPOOL'                                 00201900
         AIF   ('&XSUBPOOL' EQ '0').ZI22E                               00202000
.*                                                                      00202100
                      AIF   ('&XSUBPOOL'(1,1) NE '(').ZI22B             00202200
&ZCGPR   SETC  '0('.'&XSUBPOOL'(2,K'&XSUBPOOL-2).')'                    00202300
                      AGO   .ZI22D                                      00202400
.ZI22B                ANOP  ,                                           00202500
.*                                                                      00202600
&ZC                   SETC  '&XSUBPOOL'(1,1)                            00202700
                      AIF   (T'&ZC NE 'N').ZI22D                        00202800
&ZC                   SETC  '&XSUBPOOL'                                 00202900
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI22D               00203000
&ZCGPR                SETC  '=AL1(&XSUBPOOL)'                           00203100
.*                                                                      00203200
.ZI22D                ANOP  ,                                           00203300
.*                                                                      00203400
&ZOPN                 SETA  &ZOPN+1                                     00203500
&ZOPL(&ZOPN)          SETC  ' '                                         00203600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00203700
&ZOPV(&ZOPN)          SETC  '40(1,1),&ZCGPR'                            00203800
&ZOPD(&ZOPN)          SETC  '++ &ZXSUBPOOL XSUBPOOL XL1'                00203900
.*                                                                      00204000
.ZI22E                ANOP  ,                                           00204100
.*-------------------------------------------------------------------   00204200
&ZOPN1                SETA &ZOPN                                        00204300
.*******************************************************************    00204400
.***  PROCESS IEFDDSRV OUTPUT PARAMETERS                                00204500
.*******************************************************************    00204600
                      ACTR  10000                                       00204700
.*------------------------------------------------------------------    00204800
.***AO.L02 XDEVAREA A                                                   00204900
         AIF   ('&ZXDEVAREA' EQ 'OUTPUT').ZO16A  OUTPUT                 00205000
         AIF   ('&ZXDEVAREA' NE 'INOUT').ZO16C  INOUT                   00205100
.ZO16A    AIF   ('&XDEVAREA'(1,1) NE '(').ZO16B  ADDR IN GPR            00205200
&ZCGPR   SETC  '&XDEVAREA'(2,K'&XDEVAREA-2)                             00205300
&ZOPN                 SETA  &ZOPN+1                                     00205400
&ZOPL(&ZOPN)          SETC  ' '                                         00205500
&ZOPO(&ZOPN)          SETC  'MVC'                                       00205600
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),12(1)'                         00205700
&ZOPD(&ZOPN)          SETC  '++ XDEVAREA A'                             00205800
                      AGO   .ZO16C                                      00205900
.*                                                                      00206000
.ZO16B                ANOP  ,                                           00206100
&ZAWRK   SETA  K'&XDEVAREA                                              00206200
         AIF   ('&XDEVAREA'(&ZAWRK,1) NE ')').ZO16G                     00206300
&ZN      SETA  2                                                        00206400
.ZO16H    ANOP                                                          00206500
         AIF   (&ZN GE &ZAWRK).ZO16G                                    00206600
         AIF   ('&XDEVAREA'(&ZN,1) NE '(').ZO16I                        00206700
&ZC      SETC  '&XDEVAREA'(1,&ZN).'4'.','                               00206800
&ZC      SETC  '&ZC'.'&XDEVAREA'(&ZN+1,&ZAWRK-&ZN).',12(1)'             00206900
         AGO   .ZO16J                                                   00207000
.ZO16I    ANOP                                                          00207100
&ZN      SETA  &ZN+1                                                    00207200
         AGO   .ZO16H                                                   00207300
.ZO16G    ANOP                                                          00207400
&ZC      SETC  '&XDEVAREA.(4),12(1)'                                    00207500
.ZO16J    ANOP                                                          00207600
&ZOPN                 SETA  &ZOPN+1                                     00207700
&ZOPL(&ZOPN)          SETC  ' '                                         00207800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00207900
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00208000
&ZOPD(&ZOPN)          SETC  '++ XDEVAREA A'                             00208100
.ZO16C                ANOP  ,                                           00208200
.*******************************************************************    00208300
.***AO.X01  LABEL TO BYPASS INVOCATION                                  00208400
.*******************************************************************    00208500
&ZOPN                 SETA  &ZOPN+1                                     00208600
&ZOPL(&ZOPN)          SETC  'AMGE&SYSNDX'                               00208700
&ZOPO(&ZOPN)          SETC  'DS'                                        00208800
&ZOPV(&ZOPN)          SETC  '0H'                                        00208900
&ZOPD(&ZOPN)          SETC  '++ BYPASS INVOCATION'                      00209000
.*******************************************************************    00209100
.***AO.X02  RETURN CODE PROCESSING                                      00209200
.*******************************************************************    00209300
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00209400
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00209500
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00209600
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00209700
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00209800
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00209900
&ZOPN                 SETA  &ZOPN+1                                     00210000
&ZOPL(&ZOPN)          SETC  ' '                                         00210100
&ZOPO(&ZOPN)          SETC  'ST'                                        00210200
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00210300
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00210400
                      AGO   .ZMRETX                                     00210500
.*                                                                      00210600
.ZMRET2               ANOP  ,                                           00210700
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00210800
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00210900
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00211000
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00211100
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00211200
&ZOPN                 SETA  &ZOPN+1                                     00211300
&ZOPL(&ZOPN)          SETC  ' '                                         00211400
&ZOPO(&ZOPN)          SETC  'LR'                                        00211500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00211600
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00211700
.ZMRETX               ANOP  ,                                           00211800
.*******************************************************************    00211900
.***AO.X03  REASON CODE PROCESSING                                      00212000
.*******************************************************************    00212100
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    00212200
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            00212300
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              00212400
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             00212500
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              00212600
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             00212700
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                00212800
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 00212900
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                00213000
&ZOPN                 SETA  &ZOPN+1                                     00213100
&ZOPL(&ZOPN)          SETC  ' '                                         00213200
&ZOPO(&ZOPN)          SETC  'ST'                                        00213300
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               00213400
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00213500
                      AGO   .ZMRSNX                                     00213600
.*                                                                      00213700
.ZMRSN2               ANOP  ,                                           00213800
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                00213900
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 00214000
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                00214100
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 00214200
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                00214300
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   00214400
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    00214500
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   00214600
&ZOPN                 SETA  &ZOPN+1                                     00214700
&ZOPL(&ZOPN)          SETC  ' '                                         00214800
&ZOPO(&ZOPN)          SETC  'LR'                                        00214900
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  00215000
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00215100
.ZMRSNX               ANOP  ,                                           00215200
.*******************************************************************    00215300
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00215400
.*******************************************************************    00215500
.ZMFLX                ANOP  ,              MF=L PROCESSING              00215600
.*******************************************************************    00215700
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00215800
.*******************************************************************    00215900
                      ACTR  10000                                       00216000
.*                                                                      00216100
                      LCLA  &ZLC           COLUMN POSITION              00216200
                      LCLA  &ZOPX          LIST TABLE INDEX             00216300
                      LCLC  &ZLL           LABEL                        00216400
                      LCLC  &ZLOP          OPERATION                    00216500
                      LCLC  &ZLV           VALUE                        00216600
                      LCLC  &ZLD           DESCRIPTION                  00216700
.*                                                                      00216800
&ZOPX                 SETA  1                                           00216900
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00217000
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00217100
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00217200
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00217300
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00217400
                      AIF   (K'&ZLD LE 0).ZL5                           00217500
&ZLC                  SETA  35             COMMENT COLUMN               00217600
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00217700
&ZLC                  SETA  33             COMMMENT COLUMN              00217800
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00217900
&ZLV                  SETC  '&ZLV'.' '                                  00218000
                      AGO   .ZL3                                        00218100
.*                                                                      00218200
.ZL4                  ANOP  ,                                           00218300
&ZLV                  SETC  '&ZLV'.' '                                  00218400
.ZL5                  ANOP  ,                                           00218500
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00218600
.*                                                                      00218700
&ZLL     &ZLOP &ZLV                                                     00218800
.*                                                                      00218900
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00219000
                      AGO   .ZL2           CONTINUE LOOPING             00219100
.*                                                                      00219200
.ZLX                  ANOP  ,                                           00219300
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00219400
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00219500
         L     15,16(0,0)         ++ Get CVT address                    00219600
         L     15,772(15,0)       ++ Get SFT address                    00219700
.*********************************************************************  00219800
.*                                                                   *  00219900
.*  Get LX/EX for DD Services                                        *  00220000
.*                                                                   *  00220100
.*  Note: LX/EX is calculated by multiplying the PC number (107)     *  00220200
.*        times the length of a PC/AUTH table entry (4) and          *  00220300
.*        then subtracting 4.                                        *  00220400
.*                                                                   *  00220500
.*********************************************************************  00220600
         L     15,424(15,0)       ++ Get PC number                      00220700
         PC    0(15)              ++ PC to IEFDDSRV                     00220800
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00220900
.ZLINKX               ANOP  ,                                           00221000
.*******************************************************************    00221100
.***AP.X01  FORMAT GENERATED CODE                                       00221200
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00221300
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00221400
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00221500
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00221600
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00221700
                      AIF   (K'&ZLD LE 0).ZL51                          00221800
&ZLC                  SETA  35             COMMENT COLUMN               00221900
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00222000
&ZLC                  SETA  33             COMMENT COLUMN               00222100
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00222200
&ZLV                  SETC  '&ZLV'.' '                                  00222300
                      AGO   .ZL31                                       00222400
.*                                                                      00222500
.ZL41                 ANOP  ,                                           00222600
&ZLV                  SETC  '&ZLV'.' '                                  00222700
.ZL51                 ANOP  ,                                           00222800
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00222900
.*                                                                      00223000
&ZLL     &ZLOP &ZLV                                                     00223100
.*                                                                      00223200
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00223300
                      AGO   .ZL21          CONTINUE LOOPING             00223400
.*                                                                      00223500
.ZLX1                 ANOP  ,                                           00223600
.*******************************************************************    00223700
.***AP.X02  END OF IEFDDSRV MACRO                                       00223800
&ZIEFDDSRV            SETC  'YES'          SET IEFDDSRV USED            00223900
         POP   PRINT                                                    00224000
*                                            IEFDDSRV-0                 00224100
         SPACE 1                                                        00224200
.ZLX2                 ANOP  ,                                           00224300
         MEND                                                           00224400
**********************************************************************/ 00224500
*/**** START OF SPECIFICATIONS **************************************** 00224600
*                                                                     * 00224700
*                                                                     * 00224800
*01* MACRO NAME:  IEFDDSRV                              -02/10/94-<0> * 00224900
*                                                                     * 00225000
*                                                                     * 00225100
*01* DESCRIPTIVE NAME:  DD Service                                    * 00225200
*                                                                     * 00225300
*01* PROPRIETARY STATEMENT:                                           * 00225400
*                                                                     * 00225500
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00225600
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     * 00225700
*     5655-068 (C) COPYRIGHT IBM CORP. 1994                           * 00225800
*                                                                     * 00225900
* STATUS= HBB5520                                                     * 00226000
*                                                                     * 00226100
*                                                                     * 00226200
*                                                                     * 00226300
*01* FUNCTION:                                                        * 00226400
*       See the IEFDDSRV macro prologue for details.                  * 00226500
*                                                                     * 00226600
*01* INPUT:                                                           * 00226700
*                                                                     * 00226800
*            ?IEFDDSRV    [PLISTVER                                   * 00226900
*                                   (xplistver|IMPLIED_VERSION)]    * 00227000
*                          RETRIEVE                                   * 00227100
*                              DEVENTRY                               * 00227200
*                                 DDNAME(xddname)                    * 00227300
*                                 DSABPTR(xdsabptr)                  * 00227400
*                                 DCBPTR(xdcbptr)                    * 00227500
*                                 ACBPTR(xacbptr)                    * 00227600
*                                 [SUBPOOL(xsubpool|0)]             * 00227700
*                                  DEVAREA(xdevarea)                  * 00227800
*                         [TCBPTR(xtcbptr|0)]                       * 00227900
*                         [RETCODE(xretcode)]                         * 00228000
*                         [RSNCODE(xrsncode)]                         * 00228100
*                        [MF(S)]                                     * 00228200
*                        [MF(L,xmfctrl,xmfattr|BDY(DWORD))]        * 00228300
*                        [MF(E,xmfctrl,COMPLETE)]                  * 00228400
*                                                                     * 00228500
****** END OF SPECIFICATIONS *****************************************/ 00228600
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 00228700
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                00228800
*  ANS('/* ? IEFDDSRV '||MACLIST||' ')                                  00228900
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00229000
*                                                                       00229100
*  DCL ZELO  FIXED;                                                     00229200
*  DCL ZECOL FIXED;                                                     00229300
*                                                                       00229400
*  ZELO=1;     /* STARTING COLUMN */                                    00229500
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00229600
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    00229700
*    IF ZECOL>0                                                         00229800
*      THEN                                                             00229900
*        DO;   /* PARENTHESIS FOUND */                                  00230000
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)||' ')                         00230100
*             NORESCAN COL(MACLMAR+5);                                  00230200
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   00230300
*        END;                                                           00230400
*      ELSE                                                             00230500
*        DO;   /* REMAINING KEYS */                                     00230600
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           00230700
*             NORESCAN COL(MACLMAR+5);                                  00230800
*          ZELO=LENGTH(MACKEYS)+1;                                      00230900
*        END;                                                           00231000
*  END;                                                                 00231100
*  ANS(' -02/10/94-0- */')                                              00231200
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00231300
*/********************************************************************/ 00231400
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00231500
*/********************************************************************/ 00231600
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00231700
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00231800
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00231900
*                                                                       00232000
*  DCL   ZIEFDDSRV CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */ 00232100
*  DEACT ZIEFDDSRV;                                                     00232200
*                                                                       00232300
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00232400
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00232500
*                                                                       00232600
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00232700
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00232800
*                                                                       00232900
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00233000
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00233100
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00233200
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00233300
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00233400
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00233500
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00233600
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00233700
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00233800
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00233900
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00234000
*                                                                       00234100
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00234200
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00234300
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00234400
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00234500
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00234600
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00234700
*/*******************************************************************/  00234800
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00234900
*/*******************************************************************/  00235000
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00235100
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00235200
*  DCL XRETRIEVE;  DEACT XRETRIEVE;  /***PV.XVAR02 INPUT VALUE */       00235300
*  DCL ZXRETRIEVE; DEACT ZXRETRIEVE;  /***INPUT/OUTPUT CONTROL */       00235400
*  DCL XDEVENTRY;  DEACT XDEVENTRY;  /***PV.XVAR02 INPUT VALUE */       00235500
*  DCL ZXDEVENTRY; DEACT ZXDEVENTRY;  /***INPUT/OUTPUT CONTROL */       00235600
*  DCL XINTYPE1;  DEACT XINTYPE1;  /***PV.XVAR02 INPUT NAME */          00235700
*  DCL ZXINTYPE1; DEACT ZXINTYPE1;  /***INPUT/OUTPUT CONTROL */         00235800
*  DCL XDDNAME;  DEACT XDDNAME;    /***PV.XVAR02 INPUT NAME */          00235900
*  DCL ZXDDNAME; DEACT ZXDDNAME;   /***INPUT/OUTPUT CONTROL */          00236000
*  DCL XDSABPTR;  DEACT XDSABPTR;  /***PV.XVAR02 INPUT NAME */          00236100
*  DCL ZXDSABPTR; DEACT ZXDSABPTR;  /***INPUT/OUTPUT CONTROL */         00236200
*  DCL XDCBPTR;  DEACT XDCBPTR;    /***PV.XVAR02 INPUT NAME */          00236300
*  DCL ZXDCBPTR; DEACT ZXDCBPTR;   /***INPUT/OUTPUT CONTROL */          00236400
*  DCL XACBPTR;  DEACT XACBPTR;    /***PV.XVAR02 INPUT NAME */          00236500
*  DCL ZXACBPTR; DEACT ZXACBPTR;   /***INPUT/OUTPUT CONTROL */          00236600
*  DCL XSUBPOOL;  DEACT XSUBPOOL;  /***PV.XVAR02 INPUT NAME */          00236700
*  DCL ZXSUBPOOL; DEACT ZXSUBPOOL;  /***INPUT/OUTPUT CONTROL */         00236800
*  DCL XDEVAREA;  DEACT XDEVAREA;  /***PV.XVAR02 OUTPUT NAME */         00236900
*  DCL ZXDEVAREA; DEACT ZXDEVAREA;  /***INPUT/OUTPUT CONTROL */         00237000
*  DCL XTCBPTR;  DEACT XTCBPTR;    /***PV.XVAR02 INPUT NAME */          00237100
*  DCL ZXTCBPTR; DEACT ZXTCBPTR;   /***INPUT/OUTPUT CONTROL */          00237200
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00237300
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00237400
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         00237500
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         00237600
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00237700
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00237800
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00237900
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00238000
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00238100
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00238200
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00238300
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00238400
*/********************************************************************/ 00238500
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00238600
*/********************************************************************/ 00238700
*  IF TRANSLATE(PLISTVER(1)) = 'MAX' THEN                               00238800
*    XPLISTVER=0;                                                       00238900
*  ELSE                                                                 00239000
*    XPLISTVER=0;                                                       00239100
*  IF PLISTVER^=''                                                      00239200
*     & TRANSLATE(PLISTVER(1))^='IMPLIED_VERSION'                       00239300
*     & TRANSLATE(PLISTVER(1))^='MAX'                                   00239400
*    THEN                                                               00239500
*      DO;                                                              00239600
*        IF FIXED(PLISTVER(1))>=XPLISTVER                               00239700
*          THEN                                                         00239800
*              XPLISTVER=FIXED(PLISTVER(1));                            00239900
*          ELSE                                                         00240000
*            DO;                                                        00240100
*              ZMS=' 8, PLISTVER='||         /**KVALP* MSG*/            00240200
*                    PLISTVER(1)||                                      00240300
*                  ', BUT PLISTVER OF '||                               00240400
*                    CHAR(XPLISTVER)||                                  00240500
*                  ' IS REQUIRED.';                                     00240600
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00240700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00240800
*              ZMACRET=8;                    /* MACRO ERROR */          00240900
*            END;                                                       00241000
*                                                                       00241100
*        IF PLISTVER='PLISTVER' | PLISTVER='()'  /*CHCK ENTRY*/         00241200
*          THEN                                                         00241300
*            DO;                                                        00241400
*              ZMS=' 8, THE "PLISTVER" KEY'|| /**KOPTP* MSG*/           00241500
*                  ' MUST CONTAIN ONE'||                                00241600
*                  ' (OR MORE) ARGUMENT(S).';                           00241700
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00241800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00241900
*              ZMACRET=8;                    /* MACRO ERROR */          00242000
*            END;                                                       00242100
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00242200
*          THEN                                                         00242300
*            DO;                                                        00242400
*              ZMS=' 8, "PLISTVER'||         /**KPOSP* MSG*/            00242500
*                  PLISTVER||                                           00242600
*                  '" "PLISTVER"'||                                     00242700
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00242800
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00242900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00243000
*              ZMACRET=8;                    /* MACRO ERROR */          00243100
*            END;                                                       00243200
*                                                                       00243300
*        ZCVAL='';                           /* ERROR FLAG */           00243400
*        ZC=PLISTVER(1);                                                00243500
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00243600
*          IF ZC(ZL:ZL)<'0' |                /* MUST BE NUMERIC */      00243700
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00243800
*            THEN                                                       00243900
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00244000
*        END;                                                           00244100
*        IF ZCVAL=''                                                    00244200
*          THEN                                                         00244300
*            DO;                             /* CHECK RANGE LIMITS */   00244400
*              IF XPLISTVER<0 |              /* LOW LIMIT */            00244500
*                 XPLISTVER>0                /* HIGH LIMIT */           00244600
*                THEN                                                   00244700
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00244800
*            END;                                                       00244900
*        IF ZCVAL^=''                                                   00245000
*          THEN                                                         00245100
*            DO;                             /* RANGE ERROR */          00245200
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00245300
*              ZMS=' 8, "PLISTVER '||        /**KRNGP* MSG*/            00245400
*                  PLISTVER||                                           00245500
*                  '" THE RANGE IS "0-0"'||                             00245600
*                  ' FOR ARGUMENT 1.';                                  00245700
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00245800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00245900
*              ZMACRET=8;                    /* MACRO ERROR */          00246000
*            END;                                                       00246100
*      END;                                                             00246200
*                                                                       00246300
*/********************************************************************/ 00246400
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00246500
*/********************************************************************/ 00246600
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00246700
*  XMF='';                                                              00246800
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00246900
*  IF TRANSLATE(MF(1))                                                  00247000
*              = 'S'                         /* CHECK FOR KEYWORD */    00247100
*    THEN                                                               00247200
*      DO;                                                              00247300
*        XMF='S';                            /* SET XVARIABLE */        00247400
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    00247500
*          THEN                                                         00247600
*            DO;                                                        00247700
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00247800
*                  MF||                                                 00247900
*                  '" "MF"'||                                           00248000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00248100
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00248200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00248300
*              ZMACRET=8;                    /* MACRO ERROR */          00248400
*            END;                                                       00248500
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00248600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00248700
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00248800
*  IF TRANSLATE(MF(1))                                                  00248900
*              = 'L'                         /* CHECK FOR KEYWORD */    00249000
*    THEN                                                               00249100
*      DO;                                                              00249200
*        XMF='L';                            /* SET XVARIABLE */        00249300
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00249400
*          THEN                                                         00249500
*            DO;                                                        00249600
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00249700
*                  MF||                                                 00249800
*                  '" "MF"'||                                           00249900
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00250000
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00250100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00250200
*              ZMACRET=8;                    /* MACRO ERROR */          00250300
*            END;                                                       00250400
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00250500
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00250600
*        IF PLISTVER ^= ''                                              00250700
*          THEN                                                         00250800
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00250900
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN |                            00251000
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00251100
*          THEN                                                         00251200
*            DO;                                                        00251300
*              ZMS=' 8, THE "L" FORM OF "MF"'|| /**MFLP* MSG*/          00251400
*                  ' CAN ONLY HAVE'||                                   00251500
*                  ' THE "PLISTVER" KEY'||                              00251600
*                  ' SPECIFIED ON THE INVOCATION.';                     00251700
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00251800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00251900
*              ZMACRET=8;                    /* MACRO ERROR */          00252000
*            END;                                                       00252100
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00252200
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00252300
*  IF MF(2)=''                               /* CHECK FOR NULL */       00252400
*   THEN                                                                00252500
*    DO;                                     /* KEY IS REQUIRED */      00252600
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00252700
*        ZMS=' 8, WHEN "L" IS SPECIFIED'||                              00252800
*            ' FOR THE "MF" KEY, POSITIONAL'||                          00252900
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00253000
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00253100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00253200
*        ZMACRET=8;                          /* MACRO ERROR */          00253300
*    END;                                                               00253400
*  ELSE                                                                 00253500
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00253600
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00253700
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00253800
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00253900
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00254000
*    THEN                                                               00254100
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00254200
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00254300
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00254400
*     LENGTH(XMFATTR)>60                                                00254500
*    THEN                                                               00254600
*      DO;                                                              00254700
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00254800
*        ZMS=' 8, "MF'||                     /**KLNGP* MSG*/            00254900
*            MF||                                                       00255000
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'||                       00255100
*            ' LENGTH OF 60 CHARACTERS. ';                              00255200
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00255300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00255400
*        ZMACRET=8;                          /* MACRO ERROR */          00255500
*      END;                                                             00255600
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00255700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00255800
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00255900
*  IF TRANSLATE(MF(1))                                                  00256000
*              = 'E'                         /* CHECK FOR KEYWORD */    00256100
*    THEN                                                               00256200
*      DO;                                                              00256300
*        XMF='E';                            /* SET XVARIABLE */        00256400
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00256500
*          THEN                                                         00256600
*            DO;                                                        00256700
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/            00256800
*                  MF||                                                 00256900
*                  '" "MF"'||                                           00257000
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00257100
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00257200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00257300
*              ZMACRET=8;                    /* MACRO ERROR */          00257400
*            END;                                                       00257500
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00257600
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00257700
*  IF MF(2)=''                               /* CHECK FOR NULL */       00257800
*   THEN                                                                00257900
*    DO;                                     /* KEY IS REQUIRED */      00258000
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00258100
*        ZMS=' 8, WHEN "E" IS SPECIFIED'||                              00258200
*            ' FOR THE "MF" KEY, POSITIONAL'||                          00258300
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00258400
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00258500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00258600
*        ZMACRET=8;                          /* MACRO ERROR */          00258700
*    END;                                                               00258800
*  ELSE                                                                 00258900
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00259000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00259100
*  XMFSCK='';                                /* RESET XVARIABLE */      00259200
*  IF TRANSLATE(MF(3))                                                  00259300
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */    00259400
*    THEN                                                               00259500
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00259600
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00259700
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00259800
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00259900
*    THEN                                                               00260000
*      DO;                                   /* KEYWORD NOT ENTERED */  00260100
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00260200
*        IF MF(3)^=''                                                   00260300
*          THEN                                                         00260400
*            DO;                                                        00260500
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00260600
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/            00260700
*                  MF||'"'||                                            00260800
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '||              00260900
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00261000
*                  ' "COMPLETE".';           /* VALID KEYWORD */        00261100
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00261200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00261300
*              ZMACRET=8;                    /* MACRO ERROR */          00261400
*            END;                                                       00261500
*      END;                                                             00261600
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00261700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00261800
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00261900
*  IF MF='MF'                                                           00262000
*    | MF='()'                               /*CHECK ENTRY*/            00262100
*     THEN                                                              00262200
*       DO;                                                             00262300
*              ZMS=' 8, THE "MF" KEY'||      /**KOPTP* MSG*/            00262400
*                  ' MUST CONTAIN ONE'||                                00262500
*                  ' (OR MORE) ARGUMENT(S).';                           00262600
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00262700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00262800
*              ZMACRET=8;                    /* MACRO ERROR */          00262900
*       END;                                                            00263000
*  ELSE                                                                 00263100
*    DO;                                                                00263200
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00263300
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00263400
*        THEN                                                           00263500
*          DO;                               /* KEYWORD NOT ENTERED */  00263600
*            XMF='S';                        /* SET DEFAULT */          00263700
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    00263800
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00263900
*              THEN                                                     00264000
*                DO;                                                    00264100
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00264200
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/            00264300
*                  MF||'"'||                                            00264400
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||              00264500
*                  ' VALID KEYWORD CHOICE(S) ARE:'||                    00264600
*                  ' "S",'||                 /* VALID KEYWORD */        00264700
*                  ' "L",'||                 /* VALID KEYWORD */        00264800
*                  ' OR "E".';               /* VALID KEYWORD */        00264900
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00265000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00265100
*              ZMACRET=8;                    /* MACRO ERROR */          00265200
*                END;                                                   00265300
*          END;                                                         00265400
*    END;                                                               00265500
*/********************************************************************/ 00265600
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00265700
*/********************************************************************/ 00265800
*  IF PLISTVER=''                                                       00265900
*     | PLISTVER(1)='IMPLIED_VERSION'                                   00266000
*    THEN                                                               00266100
*      ZC='ON';                              /* DEFAULT FLAG ON */      00266200
*    ELSE                                                               00266300
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00266400
*/********************************************************************/ 00266500
*/***PD.P02 DEFAULT ECHO                                             */ 00266600
*/********************************************************************/ 00266700
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00266800
*  IF XMF^='L'                                                          00266900
*    THEN                                                               00267000
*      DO;                                   /* FULL SYNTAX CHECK */    00267100
*        ANS('/*DEFAULT(S): */')                                        00267200
*           NORESCAN COL(MACLMAR+5);                                    00267300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00267400
*  IF PLISTVER=''                                                       00267500
*    THEN                                                               00267600
*      ANS('/* PLISTVER('||                                             00267700
*          CHAR(XPLISTVER)||                                            00267800
*          ')*/')                                                       00267900
*          NORESCAN COL(MACLMAR+5);                                     00268000
*/*PD.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00268100
*  XINTYPE1='';                              /* RESET XVARIABLE */      00268200
*  IF DDNAME^=''                             /* CHECK ME KEY */         00268300
*    THEN                                                               00268400
*      DO;                                   /* VALID ME KEY */         00268500
*        XINTYPE1='DDNAME';                  /* SET XVARIABLE */        00268600
*      END;                                                             00268700
*/*PD.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00268800
*  IF DSABPTR^=''                            /* CHECK ME KEY */         00268900
*    THEN                                                               00269000
*      DO;                                                              00269100
*        IF XINTYPE1=''                      /* CHECK XVARIABLE */      00269200
*          THEN                                                         00269300
*            DO;                             /* VALID ME KEY */         00269400
*              XINTYPE1='DSABPTR';           /* SET XVAR1 */            00269500
*            END;                                                       00269600
*      END;                                                             00269700
*/*PD.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00269800
*  IF DCBPTR^=''                             /* CHECK ME KEY */         00269900
*    THEN                                                               00270000
*      DO;                                                              00270100
*        IF XINTYPE1=''                      /* CHECK XVARIABLE */      00270200
*          THEN                                                         00270300
*            DO;                             /* VALID ME KEY */         00270400
*              XINTYPE1='DCBPTR';            /* SET XVAR1 */            00270500
*            END;                                                       00270600
*      END;                                                             00270700
*/*PD.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00270800
*  IF ACBPTR^=''                             /* CHECK ME KEY */         00270900
*    THEN                                                               00271000
*      DO;                                                              00271100
*        IF XINTYPE1=''                      /* CHECK XVARIABLE */      00271200
*          THEN                                                         00271300
*            DO;                             /* VALID ME KEY */         00271400
*              XINTYPE1='ACBPTR';            /* SET XVAR1 */            00271500
*            END;                                                       00271600
*      END;                                                             00271700
*/*PD.KMEKY07 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 00271800
*  IF XINTYPE1=''                            /* CHECK XVARIABLE */      00271900
*    THEN                                                               00272000
*      DO;                                                              00272100
*        XINTYPE1='DDNAME';                                             00272200
*        ZC='ON';                            /* DEFAULT FLAG ON */      00272300
*      END;                                                             00272400
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 00272500
*  IF XINTYPE1='DDNAME'                      /* CHECK FOR ME KEY */     00272600
*    THEN                                                               00272700
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        00272800
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 00272900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          00273000
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 00273100
*  IF XINTYPE1='DSABPTR'                     /* CHECK FOR ME KEY */     00273200
*    THEN                                                               00273300
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        00273400
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 00273500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          00273600
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 00273700
*  IF XINTYPE1='DCBPTR'                      /* CHECK FOR ME KEY */     00273800
*    THEN                                                               00273900
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        00274000
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 00274100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          00274200
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 00274300
*  IF XINTYPE1='ACBPTR'                      /* CHECK FOR ME KEY */     00274400
*    THEN                                                               00274500
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        00274600
*/*PD.KMEKY11 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 00274700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          00274800
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00274900
*  XSUBPOOL='';                                                         00275000
*  IF SUBPOOL(1)=''                                                     00275100
*    THEN                                                               00275200
*      DO;                                                              00275300
*        XSUBPOOL='0';                       /* SET DEFAULT */          00275400
*        ZC='ON';                            /* DEFAULT FLAG ON */      00275500
*      END;                                                             00275600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00275700
*  IF XSUBPOOL^=''                                                      00275800
*    THEN                                                               00275900
*      ANS('/* SUBPOOL('||                                              00276000
*          XSUBPOOL||                                                   00276100
*          ')*/')                                                       00276200
*          NORESCAN COL(MACLMAR+5);                                     00276300
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00276400
*  XTCBPTR='';                                                          00276500
*  IF TCBPTR(1)=''                                                      00276600
*    THEN                                                               00276700
*      DO;                                                              00276800
*        XTCBPTR='0';                        /* SET DEFAULT */          00276900
*        ZC='ON';                            /* DEFAULT FLAG ON */      00277000
*      END;                                                             00277100
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00277200
*  IF XTCBPTR^=''                                                       00277300
*    THEN                                                               00277400
*      ANS('/* TCBPTR('||                                               00277500
*          XTCBPTR||                                                    00277600
*          ')*/')                                                       00277700
*          NORESCAN COL(MACLMAR+5);                                     00277800
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00277900
*    THEN                                                               00278000
*      ANS('/* NONE. */')                                               00278100
*         NORESCAN COL(MACLMAR+5);                                      00278200
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00278300
*      END;                                                             00278400
*/********************************************************************/ 00278500
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00278600
*/********************************************************************/ 00278700
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00278800
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00278900
*                                                                       00279000
*  IF SYSASCE=''                                                        00279100
*    THEN                                                               00279200
*      DO;                                                              00279300
*        IF SYSSPLV=''                                                  00279400
*          THEN                                                         00279500
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00279600
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00279700
*          THEN                                                         00279800
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00279900
*          ELSE                                                         00280000
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00280100
*      END;                                                             00280200
*/********************************************************************/ 00280300
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00280400
*/********************************************************************/ 00280500
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00280600
*  IF XMF^='L'                                                          00280700
*    THEN                                                               00280800
*      DO;                                   /* FULL SYNTAX CHECK */    00280900
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00281000
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00281100
*    THEN                                                               00281200
*      DO;                                                              00281300
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'|| /**PPOSP* MSG*/            00281400
*            ' "'||MACLIST||'"'||                                       00281500
*            ' CANNOT BE USED.'||                                       00281600
*            ' NO POSITIONAL ARGUMENTS'||                               00281700
*            ' ARE ALLOWED.';                                           00281800
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00281900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00282000
*        ZMACRET=8;                          /* MACRO ERROR */          00282100
*      END;                                                             00282200
*/*PG.KXVAR01 VALUE, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00282300
*  IF NUMBER(RETRIEVE)>0                     /* CHECK POSITIONALS */    00282400
*    THEN                                                               00282500
*      DO;                                                              00282600
*        ZMS=' 8, "RETRIEVE'||               /**KPOSP* MSG*/            00282700
*            RETRIEVE||                                                 00282800
*            '" "RETRIEVE"'||                                           00282900
*            ' CANNOT HAVE ANY ARGUMENTS.';                             00283000
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00283100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00283200
*        ZMACRET=8;                          /* MACRO ERROR */          00283300
*      END;                                                             00283400
*/*PG.KXVAR04 VALUE, RQD INPUT, KEYS -XVARIABLE----------------------*/ 00283500
*  ZXRETRIEVE='INPUT';                       /* SET IN/OUTPUT */        00283600
*  XRETRIEVE='RETRIEVE';                     /* SET XVARIABLE */        00283700
*  IF RETRIEVE=''                            /* CHECK FOR NULL */       00283800
*    THEN                                                               00283900
*      DO;                                   /* KEY IS REQUIRED */      00284000
*        ZXRETRIEVE='';                      /* RESET IN/OUTPUT */      00284100
*        ZMS=' 8,  '||                                                  00284200
*            ' "RETRIEVE" KEY AND ITS ARGUMENT'||                       00284300
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00284400
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00284500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00284600
*        ZMACRET=8;                          /* MACRO ERROR */          00284700
*      END;                                                             00284800
*/*PG.KXVAR01 VALUE, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00284900
*  IF NUMBER(DEVENTRY)>0                     /* CHECK POSITIONALS */    00285000
*    THEN                                                               00285100
*      DO;                                                              00285200
*        ZMS=' 8, "DEVENTRY'||               /**KPOSP* MSG*/            00285300
*            DEVENTRY||                                                 00285400
*            '" "DEVENTRY"'||                                           00285500
*            ' CANNOT HAVE ANY ARGUMENTS.';                             00285600
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00285700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00285800
*        ZMACRET=8;                          /* MACRO ERROR */          00285900
*      END;                                                             00286000
*/*PG.KXVAR04 VALUE, RQD INPUT, KEYS -XVARIABLE----------------------*/ 00286100
*  ZXDEVENTRY='INPUT';                       /* SET IN/OUTPUT */        00286200
*  XDEVENTRY='DEVENTRY';                     /* SET XVARIABLE */        00286300
*  IF DEVENTRY=''                            /* CHECK FOR NULL */       00286400
*    THEN                                                               00286500
*      DO;                                   /* KEY IS REQUIRED */      00286600
*        ZXDEVENTRY='';                      /* RESET IN/OUTPUT */      00286700
*        ZMS=' 8,  '||                                                  00286800
*            ' "DEVENTRY" KEY AND ITS ARGUMENT'||                       00286900
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00287000
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00287100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00287200
*        ZMACRET=8;                          /* MACRO ERROR */          00287300
*      END;                                                             00287400
*/*PG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00287500
*  XINTYPE1='';                              /* RESET XVARIABLE */      00287600
*  IF DDNAME^=''                             /* CHECK ME KEY */         00287700
*    THEN                                                               00287800
*      DO;                                   /* VALID ME KEY */         00287900
*        IF NUMBER(DDNAME)>1                 /* CHECK SUBLISTS */       00288000
*          THEN                                                         00288100
*            DO;                                                        00288200
*              ZMS=' 8, "DDNAME'||           /**KPOSP* MSG*/            00288300
*                  DDNAME||                                             00288400
*                  '" "DDNAME"'||                                       00288500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00288600
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00288700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00288800
*              ZMACRET=8;                    /* MACRO ERROR */          00288900
*            END;                                                       00289000
*        XINTYPE1='DDNAME';                  /* SET XVARIABLE */        00289100
*        XDDNAME=DDNAME(1);                  /* SET XVARIABLE */        00289200
*        ZXINTYPE1='INPUT';                  /* SET IN/OUTPUT */        00289300
*        ZXDDNAME='INPUT';                   /* SET IN/OUTPUT */        00289400
*        IF DDNAME(1)=''                     /* CHECK ME KEY */         00289500
*          THEN                                                         00289600
*            DO;                                                        00289700
*              ZXINTYPE1='';                 /* RESET IN/OUTPUT */      00289800
*              ZXDDNAME='';                  /* RESET IN/OUTPUT */      00289900
*              ZMS=' 8,  '||                                            00290000
*                  ' "DDNAME" KEY AND ITS ARGUMENT'||                   00290100
*                  ' ARE REQUIRED.';         /**KRQDP* MSG*/            00290200
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00290300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00290400
*              ZMACRET=8;                    /* MACRO ERROR */          00290500
*           END;                                                        00290600
*      END;                                                             00290700
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00290800
*  IF DSABPTR^=''                            /* CHECK ME KEY */         00290900
*    THEN                                                               00291000
*      DO;                                                              00291100
*        IF NUMBER(DSABPTR)>1                /* CHECK SUBLISTS */       00291200
*          THEN                                                         00291300
*            DO;                                                        00291400
*              ZMS=' 8, "DSABPTR'||          /**KPOSP* MSG*/            00291500
*                  DSABPTR||                                            00291600
*                  '" "DSABPTR"'||                                      00291700
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00291800
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00291900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00292000
*              ZMACRET=8;                    /* MACRO ERROR */          00292100
*            END;                                                       00292200
*        IF XINTYPE1=''                      /* CHECK XVARIABLE */      00292300
*          THEN                                                         00292400
*            DO;                             /* VALID ME KEY */         00292500
*              XINTYPE1='DSABPTR';           /* SET XVAR1 */            00292600
*              XDSABPTR=DSABPTR(1);          /* SET XVAR2 */            00292700
*              ZXINTYPE1='INPUT';            /* SET IN/OUTPUT */        00292800
*              ZXDSABPTR='INPUT';            /* SET IN/OUTPUT */        00292900
*              IF DSABPTR(1)=''              /* CHECK ME KEY */         00293000
*                THEN                                                   00293100
*                  DO;                                                  00293200
*                    ZXINTYPE1='';           /* RESET IN/OUTPUT */      00293300
*                    ZXDSABPTR='';           /* RESET IN/OUTPUT */      00293400
*                    ZMS=' 8,  '||                                      00293500
*                        ' "DSABPTR" KEY AND ITS ARGUMENT'||            00293600
*                        ' ARE REQUIRED.';   /**KRQDP* MSG*/            00293700
*                    ANS MSG('?IEFDDSRV ---> '||ZMS);                   00293800
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    00293900
*                    ZMACRET=8;              /* MACRO ERROR */          00294000
*                  END;                                                 00294100
*            END;                                                       00294200
*          ELSE                                                         00294300
*            DO;                                                        00294400
*              ZMS=' 8, "DSABPTR'||          /**KMEKP* MSG*/            00294500
*                  DSABPTR||'"'||                                       00294600
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'||                00294700
*                  XINTYPE1||                                           00294800
*                  '" KEY.';                                            00294900
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00295000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00295100
*              ZMACRET=8;                    /* MACRO ERROR */          00295200
*            END;                                                       00295300
*      END;                                                             00295400
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00295500
*  IF DCBPTR^=''                             /* CHECK ME KEY */         00295600
*    THEN                                                               00295700
*      DO;                                                              00295800
*        IF NUMBER(DCBPTR)>1                 /* CHECK SUBLISTS */       00295900
*          THEN                                                         00296000
*            DO;                                                        00296100
*              ZMS=' 8, "DCBPTR'||           /**KPOSP* MSG*/            00296200
*                  DCBPTR||                                             00296300
*                  '" "DCBPTR"'||                                       00296400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00296500
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00296600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00296700
*              ZMACRET=8;                    /* MACRO ERROR */          00296800
*            END;                                                       00296900
*        IF XINTYPE1=''                      /* CHECK XVARIABLE */      00297000
*          THEN                                                         00297100
*            DO;                             /* VALID ME KEY */         00297200
*              XINTYPE1='DCBPTR';            /* SET XVAR1 */            00297300
*              XDCBPTR=DCBPTR(1);            /* SET XVAR2 */            00297400
*              ZXINTYPE1='INPUT';            /* SET IN/OUTPUT */        00297500
*              ZXDCBPTR='INPUT';             /* SET IN/OUTPUT */        00297600
*              IF DCBPTR(1)=''               /* CHECK ME KEY */         00297700
*                THEN                                                   00297800
*                  DO;                                                  00297900
*                    ZXINTYPE1='';           /* RESET IN/OUTPUT */      00298000
*                    ZXDCBPTR='';            /* RESET IN/OUTPUT */      00298100
*                    ZMS=' 8,  '||                                      00298200
*                        ' "DCBPTR" KEY AND ITS ARGUMENT'||             00298300
*                        ' ARE REQUIRED.';   /**KRQDP* MSG*/            00298400
*                    ANS MSG('?IEFDDSRV ---> '||ZMS);                   00298500
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    00298600
*                    ZMACRET=8;              /* MACRO ERROR */          00298700
*                  END;                                                 00298800
*            END;                                                       00298900
*          ELSE                                                         00299000
*            DO;                                                        00299100
*              ZMS=' 8, "DCBPTR'||           /**KMEKP* MSG*/            00299200
*                  DCBPTR||'"'||                                        00299300
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'||                00299400
*                  XINTYPE1||                                           00299500
*                  '" KEY.';                                            00299600
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00299700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00299800
*              ZMACRET=8;                    /* MACRO ERROR */          00299900
*            END;                                                       00300000
*      END;                                                             00300100
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00300200
*  IF ACBPTR^=''                             /* CHECK ME KEY */         00300300
*    THEN                                                               00300400
*      DO;                                                              00300500
*        IF NUMBER(ACBPTR)>1                 /* CHECK SUBLISTS */       00300600
*          THEN                                                         00300700
*            DO;                                                        00300800
*              ZMS=' 8, "ACBPTR'||           /**KPOSP* MSG*/            00300900
*                  ACBPTR||                                             00301000
*                  '" "ACBPTR"'||                                       00301100
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00301200
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00301300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00301400
*              ZMACRET=8;                    /* MACRO ERROR */          00301500
*            END;                                                       00301600
*        IF XINTYPE1=''                      /* CHECK XVARIABLE */      00301700
*          THEN                                                         00301800
*            DO;                             /* VALID ME KEY */         00301900
*              XINTYPE1='ACBPTR';            /* SET XVAR1 */            00302000
*              XACBPTR=ACBPTR(1);            /* SET XVAR2 */            00302100
*              ZXINTYPE1='INPUT';            /* SET IN/OUTPUT */        00302200
*              ZXACBPTR='INPUT';             /* SET IN/OUTPUT */        00302300
*              IF ACBPTR(1)=''               /* CHECK ME KEY */         00302400
*                THEN                                                   00302500
*                  DO;                                                  00302600
*                    ZXINTYPE1='';           /* RESET IN/OUTPUT */      00302700
*                    ZXACBPTR='';            /* RESET IN/OUTPUT */      00302800
*                    ZMS=' 8,  '||                                      00302900
*                        ' "ACBPTR" KEY AND ITS ARGUMENT'||             00303000
*                        ' ARE REQUIRED.';   /**KRQDP* MSG*/            00303100
*                    ANS MSG('?IEFDDSRV ---> '||ZMS);                   00303200
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    00303300
*                    ZMACRET=8;              /* MACRO ERROR */          00303400
*                  END;                                                 00303500
*            END;                                                       00303600
*          ELSE                                                         00303700
*            DO;                                                        00303800
*              ZMS=' 8, "ACBPTR'||           /**KMEKP* MSG*/            00303900
*                  ACBPTR||'"'||                                        00304000
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'||                00304100
*                  XINTYPE1||                                           00304200
*                  '" KEY.';                                            00304300
*              ANS MSG('?IEFDDSRV ---> '||ZMS);                         00304400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00304500
*              ZMACRET=8;                    /* MACRO ERROR */          00304600
*            END;                                                       00304700
*      END;                                                             00304800
*/*PG.KMEKY08 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 00304900
*  IF XINTYPE1=''                            /* CHECK XVARIABLE */      00305000
*    THEN                                                               00305100
*      DO;                                                              00305200
*        XINTYPE1='DDNAME';                  /* SET DEFAULT */          00305300
*        XDDNAME='0';                        /* SET DEFAULT */          00305400
*        ZXINTYPE1='';                       /* RESET IN/OUTPUT */      00305500
*        ZXDDNAME='';                        /* RESET IN/OUTPUT */      00305600
*        ZMS=' 8, ONE OF THE FOLLOWING'||    /**KMERP* MSG*/            00305700
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'||                          00305800
*            ' REQUIRED:'||                                             00305900
*            ' "DDNAME",'||                  /* VALID ME KEY */         00306000
*            ' "DSABPTR",'||                 /* VALID ME KEY */         00306100
*            ' "DCBPTR",'||                  /* VALID ME KEY */         00306200
*            ' OR "ACBPTR".';                /* VALID ME KEY */         00306300
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00306400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00306500
*        ZMACRET=8;                          /* MACRO ERROR */          00306600
*      END;                                                             00306700
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00306800
*  IF SUBPOOL='SUBPOOL' | SUBPOOL='()'       /*CHECK ENTRY*/            00306900
*    THEN                                                               00307000
*      DO;                                                              00307100
*        ZMS=' 8, THE "SUBPOOL" KEY'||       /**KOPTP* MSG*/            00307200
*            ' MUST CONTAIN ONE'||                                      00307300
*            ' (OR MORE) ARGUMENT(S).';                                 00307400
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00307500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00307600
*        ZMACRET=8;                          /* MACRO ERROR */          00307700
*      END;                                                             00307800
*  IF NUMBER(SUBPOOL)>1                      /* CHECK POSITIONALS */    00307900
*    THEN                                                               00308000
*      DO;                                                              00308100
*        ZMS=' 8, "SUBPOOL'||                /**KPOSP* MSG*/            00308200
*            SUBPOOL||                                                  00308300
*            '" "SUBPOOL"'||                                            00308400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00308500
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00308600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00308700
*        ZMACRET=8;                          /* MACRO ERROR */          00308800
*      END;                                                             00308900
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00309000
*  ZXSUBPOOL='INPUT';                        /* SET IN/OUTPUT */        00309100
*  XSUBPOOL='0';                             /* SET DEFAULT */          00309200
*  IF SUBPOOL(1)^=''                         /* CHECK FOR NULL */       00309300
*    THEN                                                               00309400
*      XSUBPOOL=SUBPOOL(1);                  /* SET XVARIABLE */        00309500
*/*PG.KXVAR01 NAME, RQD OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00309600
*  IF NUMBER(DEVAREA)>1                      /* CHECK POSITIONALS */    00309700
*    THEN                                                               00309800
*      DO;                                                              00309900
*        ZMS=' 8, "DEVAREA'||                /**KPOSP* MSG*/            00310000
*            DEVAREA||                                                  00310100
*            '" "DEVAREA"'||                                            00310200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00310300
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00310400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00310500
*        ZMACRET=8;                          /* MACRO ERROR */          00310600
*      END;                                                             00310700
*/*PG.KXVAR03 NAME, RQD OUTPUT, KEYS -XVARIABLE----------------------*/ 00310800
*  XDEVAREA=DEVAREA(1);                      /* SET XVARIABLE */        00310900
*  IF DEVAREA(1)=''                          /* CHECK FOR NULL */       00311000
*   THEN                                                                00311100
*    DO;                                     /* KEY IS REQUIRED */      00311200
*        ZXDEVAREA='';                       /* RESET IN/OUTPUT */      00311300
*        ZMS=' 8,  '||                                                  00311400
*            ' "DEVAREA" KEY AND ITS ARGUMENT'||                        00311500
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/            00311600
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00311700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00311800
*        ZMACRET=8;                          /* MACRO ERROR */          00311900
*    END;                                                               00312000
*  ELSE                                                                 00312100
*    ZXDEVAREA='OUTPUT';                     /* SET IN/OUTPUT */        00312200
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00312300
*  IF TCBPTR='TCBPTR' | TCBPTR='()'          /*CHECK ENTRY*/            00312400
*    THEN                                                               00312500
*      DO;                                                              00312600
*        ZMS=' 8, THE "TCBPTR" KEY'||        /**KOPTP* MSG*/            00312700
*            ' MUST CONTAIN ONE'||                                      00312800
*            ' (OR MORE) ARGUMENT(S).';                                 00312900
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00313000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00313100
*        ZMACRET=8;                          /* MACRO ERROR */          00313200
*      END;                                                             00313300
*  IF NUMBER(TCBPTR)>1                       /* CHECK POSITIONALS */    00313400
*    THEN                                                               00313500
*      DO;                                                              00313600
*        ZMS=' 8, "TCBPTR'||                 /**KPOSP* MSG*/            00313700
*            TCBPTR||                                                   00313800
*            '" "TCBPTR"'||                                             00313900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00314000
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00314100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00314200
*        ZMACRET=8;                          /* MACRO ERROR */          00314300
*      END;                                                             00314400
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00314500
*  ZXTCBPTR='INPUT';                         /* SET IN/OUTPUT */        00314600
*  XTCBPTR='0';                              /* SET DEFAULT */          00314700
*  IF TCBPTR(1)^=''                          /* CHECK FOR NULL */       00314800
*    THEN                                                               00314900
*      XTCBPTR=TCBPTR(1);                    /* SET XVARIABLE */        00315000
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00315100
*  IF RETCODE='RETCODE' | RETCODE='()'       /*CHECK ENTRY*/            00315200
*    THEN                                                               00315300
*      DO;                                                              00315400
*        ZMS=' 8, THE "RETCODE" KEY'||       /**KOPTP* MSG*/            00315500
*            ' MUST CONTAIN ONE'||                                      00315600
*            ' (OR MORE) ARGUMENT(S).';                                 00315700
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00315800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00315900
*        ZMACRET=8;                          /* MACRO ERROR */          00316000
*      END;                                                             00316100
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00316200
*    THEN                                                               00316300
*      DO;                                                              00316400
*        ZMS=' 8, "RETCODE'||                /**KPOSP* MSG*/            00316500
*            RETCODE||                                                  00316600
*            '" "RETCODE"'||                                            00316700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00316800
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00316900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00317000
*        ZMACRET=8;                          /* MACRO ERROR */          00317100
*      END;                                                             00317200
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00317300
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00317400
*    THEN                                                               00317500
*      DO;                                                              00317600
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00317700
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00317800
*      END;                                                             00317900
*  ELSE                                                                 00318000
*    IF ZXRETCODE^=''                                                   00318100
*      THEN                                                             00318200
*        ZXRETCODE='';                       /* RESET OUTPUT */         00318300
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00318400
*  IF RSNCODE='RSNCODE' | RSNCODE='()'       /*CHECK ENTRY*/            00318500
*    THEN                                                               00318600
*      DO;                                                              00318700
*        ZMS=' 8, THE "RSNCODE" KEY'||       /**KOPTP* MSG*/            00318800
*            ' MUST CONTAIN ONE'||                                      00318900
*            ' (OR MORE) ARGUMENT(S).';                                 00319000
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00319100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00319200
*        ZMACRET=8;                          /* MACRO ERROR */          00319300
*      END;                                                             00319400
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    00319500
*    THEN                                                               00319600
*      DO;                                                              00319700
*        ZMS=' 8, "RSNCODE'||                /**KPOSP* MSG*/            00319800
*            RSNCODE||                                                  00319900
*            '" "RSNCODE"'||                                            00320000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00320100
*        ANS MSG('?IEFDDSRV ---> '||ZMS);                               00320200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00320300
*        ZMACRET=8;                          /* MACRO ERROR */          00320400
*      END;                                                             00320500
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00320600
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       00320700
*    THEN                                                               00320800
*      DO;                                                              00320900
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        00321000
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           00321100
*      END;                                                             00321200
*  ELSE                                                                 00321300
*    IF ZXRSNCODE^=''                                                   00321400
*      THEN                                                             00321500
*        ZXRSNCODE='';                       /* RESET OUTPUT */         00321600
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00321700
*      END;                                  /* END COMPLETE CHECKING*/ 00321800
*/********************************************************************/ 00321900
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00322000
*/********************************************************************/ 00322100
*  IF ZMACRET = 0                                                       00322200
*    THEN                                                               00322300
*      DO;                                                              00322400
*/********************************************************************/ 00322500
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00322600
*/********************************************************************/ 00322700
*  ANS(MACCONC||'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);             00322800
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00322900
*    THEN                                                               00323000
*      ANS(MACCONC||'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);          00323100
*    ELSE                                                               00323200
*      ANS(MACCONC||'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);          00323300
*/********************************************************************/ 00323400
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00323500
*  IF XMF^='L'                                                          00323600
*    THEN                                                               00323700
*      ANS('DO; /* IEFDDSRV-PLISTVER */')                               00323800
*          NORESCAN COL(MACLMAR);                                       00323900
*/*PL.LL01 ?IEFDDSRV MF=L PARAMETER LIST-----------------------------*/ 00324000
*  IF XMF='L'                                                           00324100
*    THEN                                                               00324200
*      DO;                                                              00324300
*        ANS('DCL 1 '||XMFCTRL||' '||XMFATTR||', '||                    00324400
*            '/* ?IEFDDSRV PARM LIST*/')                                00324500
*            NORESCAN COL(MACLMAR);                                     00324600
*/*PL.LL13  XACRONYM CHAR(4) CONSTANT--------------------------------*/ 00324700
*        ANS('2 '||XMFCTRL||                                            00324800
*            '_XACRONYM CHAR(4), '||                                    00324900
*            '/* '||ZXACRONYM||' XACRONYM */')                          00325000
*            NORESCAN COL(MACLMAR+2);                                   00325100
*/*PL.LL02  XPLISTLEN FIXED(16) BDY(BYTE) INPUT----------------------*/ 00325200
*        ANS('2 '||XMFCTRL||                                            00325300
*            '_XPLISTLEN FIXED(16) BDY(BYTE), '||                       00325400
*            '/* INPUT XPLISTLEN*/')                                    00325500
*            NORESCAN COL(MACLMAR+2);                                   00325600
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00325700
*        ANS('2 '||XMFCTRL||                                            00325800
*            '_XVERSION FIXED(8), '||                                   00325900
*            '/* INPUT XVERSION*/')                                     00326000
*            NORESCAN COL(MACLMAR+2);                                   00326100
*/*PL.LL13  XRSV0001 CHAR(1) RESERVED--------------------------------*/ 00326200
*        ANS('2 '||XMFCTRL||                                            00326300
*            '_XRSV0001 CHAR(1), '||                                    00326400
*            '/* RESERVED */')                                          00326500
*            NORESCAN COL(MACLMAR+2);                                   00326600
*/*PL.LL04  XFUNC_TYPE BIT(8) FIELD_LABEL----------------------------*/ 00326700
*        ANS('2 '||XMFCTRL||                                            00326800
*            '_XFUNC_TYPE BIT(8), '||                                   00326900
*            '/* FIELD_LABEL */')                                       00327000
*            NORESCAN COL(MACLMAR+2);                                   00327100
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00327200
*          ANS('3 '||XMFCTRL||                                          00327300
*              '_KEYUSED_RETRIEVE BIT(1), '||                           00327400
*              '/* BIT */')                                             00327500
*              NORESCAN COL(MACLMAR+2);                                 00327600
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00327700
*          ANS('3 '||XMFCTRL||                                          00327800
*              '_XFUNC_TYPE_RSVD1 BIT(7), '||                           00327900
*              '/* BIT */')                                             00328000
*              NORESCAN COL(MACLMAR+2);                                 00328100
*/*PL.LL04  XREQ_TYPE BIT(16) FIELD_LABEL----------------------------*/ 00328200
*        ANS('2 '||XMFCTRL||                                            00328300
*            '_XREQ_TYPE BIT(16), '||                                   00328400
*            '/* FIELD_LABEL */')                                       00328500
*            NORESCAN COL(MACLMAR+2);                                   00328600
*/*PL.LL09 BIT 1XXXXXXXXXXXXXXX--------------------------------------*/ 00328700
*          ANS('3 '||XMFCTRL||                                          00328800
*              '_KEYUSED_DEVENTRY BIT(1), '||                           00328900
*              '/* BIT */')                                             00329000
*              NORESCAN COL(MACLMAR+2);                                 00329100
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00329200
*          ANS('3 '||XMFCTRL||                                          00329300
*              '_XREQ_TYPE_RSVD1 BIT(15), '||                           00329400
*              '/* BIT */')                                             00329500
*              NORESCAN COL(MACLMAR+2);                                 00329600
*/*PL.LL04  XINFLGS BIT(8) FIELD_LABEL-------------------------------*/ 00329700
*        ANS('2 '||XMFCTRL||                                            00329800
*            '_XINFLGS BIT(8), '||                                      00329900
*            '/* FIELD_LABEL */')                                       00330000
*            NORESCAN COL(MACLMAR+2);                                   00330100
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00330200
*          ANS('3 '||XMFCTRL||                                          00330300
*              '_KEYUSED_DDNAME BIT(1), '||                             00330400
*              '/* BIT */')                                             00330500
*              NORESCAN COL(MACLMAR+2);                                 00330600
*/*PL.LL09 BIT X1XXXXXX----------------------------------------------*/ 00330700
*          ANS('3 '||XMFCTRL||                                          00330800
*              '_KEYUSED_DSABPTR BIT(1), '||                            00330900
*              '/* BIT */')                                             00331000
*              NORESCAN COL(MACLMAR+2);                                 00331100
*/*PL.LL09 BIT XX1XXXXX----------------------------------------------*/ 00331200
*          ANS('3 '||XMFCTRL||                                          00331300
*              '_KEYUSED_DCBPTR BIT(1), '||                             00331400
*              '/* BIT */')                                             00331500
*              NORESCAN COL(MACLMAR+2);                                 00331600
*/*PL.LL09 BIT XXX1XXXX----------------------------------------------*/ 00331700
*          ANS('3 '||XMFCTRL||                                          00331800
*              '_KEYUSED_TCBPTR BIT(1), '||                             00331900
*              '/* BIT */')                                             00332000
*              NORESCAN COL(MACLMAR+2);                                 00332100
*/*PL.LL09 BIT XXXX1XXX----------------------------------------------*/ 00332200
*          ANS('3 '||XMFCTRL||                                          00332300
*              '_KEYUSED_SUBPOOL BIT(1), '||                            00332400
*              '/* BIT */')                                             00332500
*              NORESCAN COL(MACLMAR+2);                                 00332600
*/*PL.LL09 BIT XXXXX1XX----------------------------------------------*/ 00332700
*          ANS('3 '||XMFCTRL||                                          00332800
*              '_KEYUSED_ACBPTR BIT(1), '||                             00332900
*              '/* BIT */')                                             00333000
*              NORESCAN COL(MACLMAR+2);                                 00333100
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00333200
*          ANS('3 '||XMFCTRL||                                          00333300
*              '_XINFLGS_RSVD1 BIT(2), '||                              00333400
*              '/* BIT */')                                             00333500
*              NORESCAN COL(MACLMAR+2);                                 00333600
*/*PL.LL13  XDEVAREA PTR(31) OUTPUT----------------------------------*/ 00333700
*        ANS('2 '||XMFCTRL||                                            00333800
*            '_XDEVAREA PTR(31), '||                                    00333900
*            '/* '||ZXDEVAREA||' XDEVAREA */')                          00334000
*            NORESCAN COL(MACLMAR+2);                                   00334100
*/*PL.LL13  XDDNAME CHAR(8) INPUT------------------------------------*/ 00334200
*        ANS('2 '||XMFCTRL||                                            00334300
*            '_XDDNAME CHAR(8), '||                                     00334400
*            '/* '||ZXDDNAME||' XDDNAME */')                            00334500
*            NORESCAN COL(MACLMAR+2);                                   00334600
*/*PL.LL13  XDSABPTR PTR(31) INPUT-----------------------------------*/ 00334700
*        ANS('2 '||XMFCTRL||                                            00334800
*            '_XDSABPTR PTR(31), '||                                    00334900
*            '/* '||ZXDSABPTR||' XDSABPTR */')                          00335000
*            NORESCAN COL(MACLMAR+2);                                   00335100
*/*PL.LL13  XDCBPTR PTR(31) INPUT------------------------------------*/ 00335200
*        ANS('2 '||XMFCTRL||                                            00335300
*            '_XDCBPTR PTR(31), '||                                     00335400
*            '/* '||ZXDCBPTR||' XDCBPTR */')                            00335500
*            NORESCAN COL(MACLMAR+2);                                   00335600
*/*PL.LL13  XACBPTR PTR(31) INPUT------------------------------------*/ 00335700
*        ANS('2 '||XMFCTRL||                                            00335800
*            '_XACBPTR PTR(31), '||                                     00335900
*            '/* '||ZXACBPTR||' XACBPTR */')                            00336000
*            NORESCAN COL(MACLMAR+2);                                   00336100
*/*PL.LL13  XTCBPTR PTR(31) INPUT------------------------------------*/ 00336200
*        ANS('2 '||XMFCTRL||                                            00336300
*            '_XTCBPTR PTR(31), '||                                     00336400
*            '/* '||ZXTCBPTR||' XTCBPTR */')                            00336500
*            NORESCAN COL(MACLMAR+2);                                   00336600
*/*PL.LL13  XSUBPOOL FIXED(8) INPUT----------------------------------*/ 00336700
*        ANS('2 '||XMFCTRL||                                            00336800
*            '_XSUBPOOL FIXED(8), '||                                   00336900
*            '/* '||ZXSUBPOOL||' XSUBPOOL */')                          00337000
*            NORESCAN COL(MACLMAR+2);                                   00337100
*/*PL.LL13  XRSV0002 CHAR(3) RESERVED--------------------------------*/ 00337200
*        ANS('2 '||XMFCTRL||                                            00337300
*            '_XRSV0002 CHAR(3), '||                                    00337400
*            '/* RESERVED */')                                          00337500
*            NORESCAN COL(MACLMAR+2);                                   00337600
*/*PL.LL18 ----------------------------------------------------------*/ 00337700
*        ANS('2 * CHAR(0);')                                            00337800
*            NORESCAN COL(MACLMAR+2);                                   00337900
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00338000
*      END;                                                             00338100
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00338200
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00338300
*  DEACT ZPRMLINE;                                                      00338400
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00338500
*  DEACT ZNDX;                                                          00338600
*  ZNDX=MACINDEX(1:4);         /* MACINDEX LAST THREE DIGITS        */  00338700
*  DCL XVERSION CHAR;                                                   00338800
*  DEACT XVERSION;                                                      00338900
*/*PL.L02 ?IEFDDSRV PARAMETER LIST-----------------------------------*/ 00339000
*  IF XMF^='L'                                                          00339100
*    THEN                                                               00339200
*      DO;                                                              00339300
*/*PL.L03 ?IEFDDSRV PARAMETER LIST-----------------------------------*/ 00339400
*        IF XMF='S'                                                     00339500
*          THEN                                                         00339600
*            XMFCTRL='#ZPLIST';                                         00339700
*/*PL.L04 ?IEFDDSRV PARAMETER LIST-----------------------------------*/ 00339800
*        ZPRMLINE='DCL 1 #Z'||ZNDX||' DEF('||XMFCTRL||'),'||            00339900
*                 ' /* ?IEFDDSRV PARM LIST*/';                          00340000
*/*PL.L08  XACRONYM CHAR(4) CONSTANT---------------------------------*/ 00340100
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00340200
*                 '_XACRONYM CHAR(4), '||                               00340300
*                 '/* '||ZXACRONYM||' XACRONYM */';                     00340400
*/*PL.L05  XPLISTLEN FIXED(16) BDY(BYTE) INPUT-----------------------*/ 00340500
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00340600
*                 '_XPLISTLEN FIXED(16) BDY(BYTE), '||                  00340700
*                 '/* INPUT XPLISTLEN*/';                               00340800
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00340900
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00341000
*                 '_XVERSION FIXED(8), '||                              00341100
*                 '/* INPUT XVERSION*/';                                00341200
*/*PL.L08  XRSV0001 CHAR(1) RESERVED---------------------------------*/ 00341300
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00341400
*                 '_XRSV0001 CHAR(1), '||                               00341500
*                 '/* RESERVED */';                                     00341600
*/*PL.L08  XFUNC_TYPE BIT(8) FIELD_LABEL-----------------------------*/ 00341700
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00341800
*                 '_XFUNC_TYPE BIT(8), '||                              00341900
*                 '/* FIELD_LABEL */';                                  00342000
*/*PL.L08  XREQ_TYPE BIT(16) FIELD_LABEL-----------------------------*/ 00342100
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00342200
*                 '_XREQ_TYPE BIT(16), '||                              00342300
*                 '/* FIELD_LABEL */';                                  00342400
*/*PL.L08  XINFLGS BIT(8) FIELD_LABEL--------------------------------*/ 00342500
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00342600
*                 '_XINFLGS BIT(8), '||                                 00342700
*                 '/* FIELD_LABEL */';                                  00342800
*/*PL.L08  XDEVAREA PTR(31) OUTPUT-----------------------------------*/ 00342900
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00343000
*                 '_XDEVAREA PTR(31), '||                               00343100
*                 '/* '||ZXDEVAREA||' XDEVAREA */';                     00343200
*/*PL.L08  XDDNAME CHAR(8) INPUT-------------------------------------*/ 00343300
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00343400
*                 '_XDDNAME CHAR(8), '||                                00343500
*                 '/* '||ZXDDNAME||' XDDNAME */';                       00343600
*/*PL.L08  XDSABPTR PTR(31) INPUT------------------------------------*/ 00343700
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00343800
*                 '_XDSABPTR PTR(31), '||                               00343900
*                 '/* '||ZXDSABPTR||' XDSABPTR */';                     00344000
*/*PL.L08  XDCBPTR PTR(31) INPUT-------------------------------------*/ 00344100
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00344200
*                 '_XDCBPTR PTR(31), '||                                00344300
*                 '/* '||ZXDCBPTR||' XDCBPTR */';                       00344400
*/*PL.L08  XACBPTR PTR(31) INPUT-------------------------------------*/ 00344500
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00344600
*                 '_XACBPTR PTR(31), '||                                00344700
*                 '/* '||ZXACBPTR||' XACBPTR */';                       00344800
*/*PL.L08  XTCBPTR PTR(31) INPUT-------------------------------------*/ 00344900
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00345000
*                 '_XTCBPTR PTR(31), '||                                00345100
*                 '/* '||ZXTCBPTR||' XTCBPTR */';                       00345200
*/*PL.L08  XSUBPOOL FIXED(8) INPUT-----------------------------------*/ 00345300
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00345400
*                 '_XSUBPOOL FIXED(8), '||                              00345500
*                 '/* '||ZXSUBPOOL||' XSUBPOOL */';                     00345600
*/*PL.L08  XRSV0002 CHAR(3) RESERVED---------------------------------*/ 00345700
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||                             00345800
*                 '_XRSV0002 CHAR(3), '||                               00345900
*                 '/* RESERVED */';                                     00346000
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00346100
*        ZPRMNUM=ZPRMNUM+1;                                             00346200
*        ZPRM(ZPRMNUM)=ZPRMLINE||' 2 * CHAR(0);';                       00346300
*        IF XPLISTVER^=0                                                00346400
*           & XMF^='S'                                                  00346500
*          THEN                                                         00346600
*            DO;                                                        00346700
*              ZPRMNUM=ZPRMNUM+1;                                       00346800
*              ZPRM(ZPRMNUM)=                                           00346900
*               'DCL #Z'||ZNDX||'_LENCHECK FIXED(32) CONSTANT('||       00347000
*               'LENGTH('||XMFCTRL||')-LENGTH(#Z'||ZNDX||'));'||        00347100
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'||            00347200
*               ' IS LONG ENOUGH */';                                   00347300
*            END;                                                       00347400
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00347500
*        ZPLLEN=44;                                                     00347600
*        IF ZPRMMAX<ZPLLEN                                              00347700
*           & XMF^='E'                                                  00347800
*          THEN                                                         00347900
*            ZPRMMAX=ZPLLEN;                                            00348000
*/*PL.L13 -----------------------------------------------------------*/ 00348100
*      END;                                                             00348200
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00348300
*  IF XMF^='L'                                                          00348400
*    THEN                                                               00348500
*      DO;                                                              00348600
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00348700
*            ANS('#Z'||ZNDX||'=''''B;'||                                00348800
*                '/* CLEAR PARAMETER AREA */')                          00348900
*                NORESCAN COL(MACLMAR);                                 00349000
*/*PI.L28 XACRONYM  CHAR(4)------------------------------------------*/ 00349100
*        ANS('#Z'||ZNDX||'_XACRONYM=''DDSV'';'||                        00349200
*            '/* XACRONYM CHAR(4) CONSTANT */')                         00349300
*            NORESCAN COL(MACLMAR);                                     00349400
*/*PI.L05C XPLISTLEN FIXED(16)---------------------------------------*/ 00349500
*        ANS('#Z'||ZNDX||'_XPLISTLEN=LENGTH(#Z'||ZNDX||');'||           00349600
*            '/* XPLISTLEN FIXED(16) */')                               00349700
*            NORESCAN COL(MACLMAR);                                     00349800
*/*PI.L06 XFUNC_TYPE BIT(8)------------------------------------------*/ 00349900
*        ZW='';                                                         00350000
*        ZMS='';                                                        00350100
*/*PI.L07 XFUNC_TYPE BIT(8) 1XXXXXXX---------------------------------*/ 00350200
*        IF RETRIEVE^=''                                                00350300
*          THEN                                                         00350400
*            ZW=ZW||'10000000';                                         00350500
*          ELSE                                                         00350600
*            ZW=ZW||'00000000';                                         00350700
*/*PI.L09 XFUNC_TYPE BIT(8)------------------------------------------*/ 00350800
*        IF INDEX(ZW,'1')^=0                                            00350900
*          THEN                                                         00351000
*            ANS('#Z'||ZNDX||'_XFUNC_TYPE='||                           00351100
*                '#Z'||ZNDX||'_XFUNC_TYPE | '||                         00351200
*                ''''||ZW||'''B; '||                                    00351300
*                '/* BIT(8) */')                                        00351400
*                NORESCAN COL(MACLMAR);                                 00351500
*/*PI.L06 XREQ_TYPE BIT(16)------------------------------------------*/ 00351600
*        ZW='';                                                         00351700
*        ZMS='';                                                        00351800
*/*PI.L07 XREQ_TYPE BIT(16) 1XXXXXXXXXXXXXXX-------------------------*/ 00351900
*        IF DEVENTRY^=''                                                00352000
*          THEN                                                         00352100
*            ZW=ZW||'1000000000000000';                                 00352200
*          ELSE                                                         00352300
*            ZW=ZW||'0000000000000000';                                 00352400
*/*PI.L09 XREQ_TYPE BIT(16)------------------------------------------*/ 00352500
*        IF INDEX(ZW,'1')^=0                                            00352600
*          THEN                                                         00352700
*            ANS('#Z'||ZNDX||'_XREQ_TYPE='||                            00352800
*                '#Z'||ZNDX||'_XREQ_TYPE | '||                          00352900
*                ''''||ZW||'''B; '||                                    00353000
*                '/* BIT(16) */')                                       00353100
*                NORESCAN COL(MACLMAR);                                 00353200
*/*PI.L06 XINFLGS BIT(8)---------------------------------------------*/ 00353300
*        ZW='';                                                         00353400
*        ZMS='';                                                        00353500
*/*PI.L07 XINFLGS BIT(8) 1XXXXXXX------------------------------------*/ 00353600
*        IF DDNAME^=''                                                  00353700
*          THEN                                                         00353800
*            ZW=ZW||'1';                                                00353900
*          ELSE                                                         00354000
*            ZW=ZW||'0';                                                00354100
*/*PI.L07 XINFLGS BIT(8) X1XXXXXX------------------------------------*/ 00354200
*        IF DSABPTR^=''                                                 00354300
*          THEN                                                         00354400
*            ZW=ZW||'1';                                                00354500
*          ELSE                                                         00354600
*            ZW=ZW||'0';                                                00354700
*/*PI.L07 XINFLGS BIT(8) XX1XXXXX------------------------------------*/ 00354800
*        IF DCBPTR^=''                                                  00354900
*          THEN                                                         00355000
*            ZW=ZW||'1';                                                00355100
*          ELSE                                                         00355200
*            ZW=ZW||'0';                                                00355300
*/*PI.L07 XINFLGS BIT(8) XXX1XXXX------------------------------------*/ 00355400
*        IF TCBPTR^=''                                                  00355500
*          THEN                                                         00355600
*            ZW=ZW||'1';                                                00355700
*          ELSE                                                         00355800
*            ZW=ZW||'0';                                                00355900
*/*PI.L07 XINFLGS BIT(8) XXXX1XXX------------------------------------*/ 00356000
*        IF SUBPOOL^=''                                                 00356100
*          THEN                                                         00356200
*            ZW=ZW||'1';                                                00356300
*          ELSE                                                         00356400
*            ZW=ZW||'0';                                                00356500
*/*PI.L07 XINFLGS BIT(8) XXXXX1XX------------------------------------*/ 00356600
*        IF ACBPTR^=''                                                  00356700
*          THEN                                                         00356800
*            ZW=ZW||'100';                                              00356900
*          ELSE                                                         00357000
*            ZW=ZW||'000';                                              00357100
*/*PI.L09 XINFLGS BIT(8)---------------------------------------------*/ 00357200
*        IF INDEX(ZW,'1')^=0                                            00357300
*          THEN                                                         00357400
*            ANS('#Z'||ZNDX||'_XINFLGS='||                              00357500
*                '#Z'||ZNDX||'_XINFLGS | '||                            00357600
*                ''''||ZW||'''B; '||                                    00357700
*                '/* BIT(8) */')                                        00357800
*                NORESCAN COL(MACLMAR);                                 00357900
*/*PI.L21 XDDNAME NAME CHAR(8)---------------------------------------*/ 00358000
*        IF ZXDDNAME='INPUT' |                                          00358100
*           ZXDDNAME='INOUT'                                            00358200
*          THEN                                                         00358300
*            ANS('#Z'||ZNDX||'_XDDNAME='||                              00358400
*                XDDNAME||';'||                                         00358500
*                '/* XDDNAME CHAR(8) */')                               00358600
*                NORESCAN COL(MACLMAR);                                 00358700
*/*PI.L17 XDSABPTR PTR(31)-------------------------------------------*/ 00358800
*        IF ZXDSABPTR='INPUT' |                                         00358900
*           ZXDSABPTR='INOUT'                                           00359000
*          THEN                                                         00359100
*            ANS('#Z'||ZNDX||'_XDSABPTR='||                             00359200
*                XDSABPTR||';'||                                        00359300
*                '/* XDSABPTR PTR(31) */')                              00359400
*                NORESCAN COL(MACLMAR);                                 00359500
*/*PI.L17 XDCBPTR PTR(31)--------------------------------------------*/ 00359600
*        IF ZXDCBPTR='INPUT' |                                          00359700
*           ZXDCBPTR='INOUT'                                            00359800
*          THEN                                                         00359900
*            ANS('#Z'||ZNDX||'_XDCBPTR='||                              00360000
*                XDCBPTR||';'||                                         00360100
*                '/* XDCBPTR PTR(31) */')                               00360200
*                NORESCAN COL(MACLMAR);                                 00360300
*/*PI.L17 XACBPTR PTR(31)--------------------------------------------*/ 00360400
*        IF ZXACBPTR='INPUT' |                                          00360500
*           ZXACBPTR='INOUT'                                            00360600
*          THEN                                                         00360700
*            ANS('#Z'||ZNDX||'_XACBPTR='||                              00360800
*                XACBPTR||';'||                                         00360900
*                '/* XACBPTR PTR(31) */')                               00361000
*                NORESCAN COL(MACLMAR);                                 00361100
*/*PI.L14 CHECK FOR * AS THE PTR(31) ARGUMENT------------------------*/ 00361200
*        IF TRANSLATE(XTCBPTR)                                          00361300
*                    = '0'                                              00361400
*          THEN                                                         00361500
*            ZXTCBPTR='';                    /* RESET INPUT/INOUT */    00361600
*/*PI.L17 XTCBPTR PTR(31)--------------------------------------------*/ 00361700
*        IF ZXTCBPTR='INPUT' |                                          00361800
*           ZXTCBPTR='INOUT'                                            00361900
*          THEN                                                         00362000
*            ANS('#Z'||ZNDX||'_XTCBPTR='||                              00362100
*                XTCBPTR||';'||                                         00362200
*                '/* XTCBPTR PTR(31) */')                               00362300
*                NORESCAN COL(MACLMAR);                                 00362400
*/*PI.L17 XSUBPOOL FIXED(8)------------------------------------------*/ 00362500
*        IF ZXSUBPOOL='INPUT' |                                         00362600
*           ZXSUBPOOL='INOUT'                                           00362700
*          THEN                                                         00362800
*            IF XSUBPOOL^='0'                                           00362900
*              THEN                                                     00363000
*                ANS('#Z'||ZNDX||'_XSUBPOOL='||                         00363100
*                    XSUBPOOL||';'||                                    00363200
*                    '/* XSUBPOOL FIXED(8) */')                         00363300
*                    NORESCAN COL(MACLMAR);                             00363400
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00363500
*              IF NUMBER(RSNCODE)>0                                     00363600
*                THEN                                                   00363700
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       00363800
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00363900
*              ANS('GPR01P=ADDR(#Z'||ZNDX||');'||                       00364000
*                  '/* PARAMETER LIST */')                              00364100
*                  NORESCAN COL(MACLMAR);                               00364200
*              IF SYSASCE^='P'                                          00364300
*                THEN                                                   00364400
*                  ANS('SAR(GPR01P,ALET(#Z'||ZNDX||'));'||              00364500
*                      '/* PARAMETER LIST AR */')                       00364600
*                      NORESCAN COL(MACLMAR);                           00364700
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00364800
 /********************************************************************/ 00364900
 /*  Setup                                                           */ 00365000
 /********************************************************************/ 00365100
 /********************************************************************/ 00365200
 /*  Define external macro variables                                 */ 00365300
 /********************************************************************/ 00365400
  DCL EHAREGS CHAR EXT,          /* Contains declared register number*/ 00365500
      EHAMAPS CHAR EXT;          /* Contains requests for mappings   */ 00365600
  IF INDEX(EHAREGS,'15F')=0 THEN /* If register 15 has not already      00365700
                                    been required to be declared        00365800
                                    by the EPILOG macro              */ 00365900
    EHAREGS=EHAREGS||'15F';      /* Define register 15 for EPILOG       00366000
                                    macro                            */ 00366100
  IF INDEX(EHAMAPS,'XM@')=0 THEN /* If XM services have not been        00366200
                                    requested already                */ 00366300
    EHAMAPS=EHAMAPS||'XM@,';     /* Note: commas separate requests   */ 00366400
                                                                        00366500
                                                                        00366600
 /********************************************************************/ 00366700
 /*  Generate PC linkage code for IEFDDSRV                           */ 00366800
 /********************************************************************/ 00366900
                                                                        00367000
                                                                        00367100
  ANS('RFY GPR15F RSTD;')          NORESCAN COL(MACLMAR);               00367200
  ANS('GPR15F = XM@(107);')        NORESCAN COL(MACLMAR);               00367300
  ANS('PC(GPR15F);')               NORESCAN COL(MACLMAR);               00367400
  ANS('RFY GPR15F UNRSTD;')        NORESCAN COL(MACLMAR);               00367500
                                                                        00367600
                                                                        00367700
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00367800
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00367900
*              IF NUMBER(RETCODE)>0                                     00368000
*                THEN                                                   00368100
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00368200
*/*PO.L02 XDEVAREA PTR(31)-------------------------------------------*/ 00368300
*              IF ZXDEVAREA='OUTPUT' |                                  00368400
*                 ZXDEVAREA='INOUT'                                     00368500
*                THEN                                                   00368600
*                  ANS(XDEVAREA||                                       00368700
*                      '=#Z'||ZNDX||'_XDEVAREA;'||                      00368800
*                      '/* XDEVAREA PTR(31) */')                        00368900
*                      NORESCAN COL(MACLMAR);                           00369000
*/*PO.L08 XRETCODE FIXED(8) RETURN CODE------------------------------*/ 00369100
*              IF NUMBER(RETCODE)>0                                     00369200
*                THEN                                                   00369300
*                    ANS(XRETCODE||                                     00369400
*                     '=GPR15F; /* SET RETURN CODE */')                 00369500
*                      NORESCAN COL(MACLMAR);                           00369600
*/*PO.L09 XRSNCODE FIXED(8) REASON CODE------------------------------*/ 00369700
*              IF NUMBER(RSNCODE)>0                                     00369800
*                THEN                                                   00369900
*                    ANS(XRSNCODE||                                     00370000
*                     '=GPR00F; /* SET REASON CODE */')                 00370100
*                      NORESCAN COL(MACLMAR);                           00370200
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00370300
*              IF NUMBER(RSNCODE)>0                                     00370400
*                THEN                                                   00370500
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         00370600
*              IF NUMBER(RETCODE)>0                                     00370700
*                THEN                                                   00370800
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00370900
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00371000
*      END;                                                             00371100
*/*PO.L13 IEFDDSRV USAGE INDICATOR-----------------------------------*/ 00371200
*  ZIEFDDSRV='YES';                          /* SET IEFDDSRV USED */    00371300
*/*PO.L15 END OF EXECUTABLE IEFDDSRV-PLISTVER MACRO------------------*/ 00371400
*  IF XMF^='L'                                                          00371500
*    THEN                                                               00371600
*      ANS('END; /* IEFDDSRV-PLISTVER */')                              00371700
*          NORESCAN COL(MACLMAR);                                       00371800
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00371900
*  ANS(MACCONC||'LIST POP NOECHO;') NORESCAN COL(MACLMAR);              00372000
*/*PO.L17 END OF IEFDDSRV MACRO--------------------------------------*/ 00372100
*  ANS(MACCONC||'SPACE;') NORESCAN COL(MACLMAR);                        00372200
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00372300
*/*******************************************************************/  00372400
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00372500
*/*******************************************************************/  00372600
*      END;                                                             00372700
*/*******************************************************************/  00372800
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00372900
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00373000
*/*******************************************************************/  00373100
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00373200
*    THEN                                                               00373300
*      DO;                                                              00373400
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00373500
*                                      DOUBLEWORD MULTIPLES        */   00373600
*/*******************************************************************/  00373700
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00373800
*/*******************************************************************/  00373900
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00374000
*          THEN                                                         00374100
*            DO;                                                        00374200
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00374300
*                THEN                                                   00374400
*                  DO;                                                  00374500
*                    ANS('?EPILOG                                       00374600
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00374700
*                    EHALIST=EHALIST||',AMG,';                          00374800
*                  END;                                                 00374900
*            END;                                                       00375000
*/*******************************************************************/  00375100
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00375200
*/*******************************************************************/  00375300
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00375400
*          THEN                                                         00375500
*            DO;                                                        00375600
*              IF ZPRMMAX>EHAMAXLEN                                     00375700
*                THEN                                                   00375800
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00375900
*            END;                                                       00376000
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00376100
*          ANS('?EPILOG STRING('''||ZPRM(ZI)||''');')                   00376200
*              COL(MACLMAR);                                            00376300
*        END;                                                           00376400
*      END;                                                             00376500
*/*-----------------------------------------------------------------*/  00376600
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00376700
*/*        BY ?EPILOG                                               */  00376800
*/*-----------------------------------------------------------------*/  00376900
*        IF INDEX(EHAREGS,'01P')=0                                      00377000
*          THEN                                                         00377100
*            EHAREGS=EHAREGS||'01P'; /* GPR01P                      */  00377200
*        IF INDEX(EHAREGS,'00F')=0                                      00377300
*          & NUMBER(RSNCODE)>0                                          00377400
*          THEN                                                         00377500
*            EHAREGS=EHAREGS||'00F'; /* GPR00F                      */  00377600
*        IF INDEX(EHAREGS,'15F')=0                                      00377700
*          & NUMBER(RETCODE)>0                                          00377800
*          THEN                                                         00377900
*            EHAREGS=EHAREGS||'15F'; /* GPR15F                      */  00378000
*  RETURN CODE(ZMACRET);                                                00378100
*%END IEFDDSRV;                                                         00378200
