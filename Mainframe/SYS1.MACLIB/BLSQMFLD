*/*** Start of Specifications for BLSQMFLD ***************************/ 00002400
*/*                                                                  */ 00004800
*/* $MAC(BLSQMFLD) COMP(SC132) PROD(HBB6606): Format model fields    */ 00006900
*/*                                                                  */ 00009100
*/*    PROPRIETARY STATEMENT =                                       */ 00010200
*/*                                                                  */ 00010900
*/*    LICENSED MATERIALS  PROPERTY OF IBM                           */ 00011600
*/*    THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                   */ 00012400
*/*    5647-A01 (C) COPYRIGHT IBM CORP. 1984, 1998                   */ 00014200
*/*                                                                  */ 00016000
*/*    STATUS = HBB6606                                              */ 00016100
*/*                                                                  */ 00016200
*/* EXTERNAL CLASSIFICATION: GUPI                                    */ 00016800
*/* END OF EXTERNAL CLASSIFICATION:                                  */ 00017400
*/*                                                                  */ 00018000
*/* ================================================================ */ 00018600
*/*                                                                  */ 00019200
*/* CHANGE ACTIVITY=                                                 */ 00020800
*/*                                                                  */ 00021000
*/*   Hardware=                                                      */ 00021200
*/* $H1=IEEEBLS,HBB6606,97260,PDE1: Additional FP registers          */ 00021400
*/*     Use SIZE built-in rather than LENGTH built-in if compiling   */ 00021600
*/*     with PL/X 1.4.1 or later                                     */ 00021800
*/*                                                                  */ 00022000
*/* ---------------------------------------------------------------- */ 00022200
*/*                                                                  */ 00022400
*/*   Products=                                                      */ 00024000
*/* $L1=SRVADFXT,JBB2220,84152,PDE1: Dump exit debugging tool        */ 00028800
*/* $L2=IPCSENH,HBB3310,86099,PDE4: Formatting enhancements: ANY,    */ 00030400
*/*     Qualified ANY, Multiple source formatting, Model linking,    */ 00032000
*/*     Flagfield decoding, Array row numbering suppression          */ 00033600
*/*    =IPCSM,HBB4430,910327,PDE4: Withdrawn                         */ 00033900
*/* $L3=IPCSREUS,JBB6602,95172,PDE1: Mixed case macro support        */ 00034200
*/*                                                                  */ 00034500
*/* ---------------------------------------------------------------- */ 00034800
*/*                                                                  */ 00035200
*/*   Design changes=                                                */ 00035500
*/* $D0=DCR0054,JBB2125,83118,PDPY: Process new format models        */ 00035800
*/* $D1=DCR0001,JBB2214,84152,PDE1: Process array extensions         */ 00036100
*/*    =DKB0014,HBB4430,92008,PDE1: Remove IPCSM                     */ 00036200
*/*                                                                  */ 00036300
*/* ---------------------------------------------------------------- */ 00036400
*/*                                                                  */ 00036500
*/*   PTMs=                                                          */ 00036800
*/*    =PAJ0388,JBB2125,83280,PDE1: VIEW=X'0200' default             */ 00038400
*/* $P1=PC40588,HBB3310,87006,PDE4: MSGID keyword                    */ 00040000
*/* $P2=PC41385,HBB3310,87231,PDE4: Fix model pointer generation     */ 00040400
*/* $P3=PC41485,HBB3310,87259,PDE4: Handle PLAS specification of     */ 00040700
*/*     arrays properly, generate subheader entries.                 */ 00041000
*/* $P4=PC41665,HBB3310,87306,PDE4: Array entry count generation     */ 00041300
*/* $P5=PC42305,HBB3310,88050,PDE4: Avoid setting printlabel flag    */ 00041600
*/*     when flagbit decoding is requested.                          */ 00041900
*/*                                                                  */ 00042600
*/* ---------------------------------------------------------------- */ 00042800
*/*                                                                  */ 00043000
*/*   Maintenance= none                                              */ 00043200
*/*                                                                  */ 00044800
*/***** End of Specifications for BLSQMFLD **************************** 00047400
         MACRO                                                          00050000
         BLSQMFLD &ARRAY=,&COLNUM=0,&COLSEP=0,&DTYPE=,&ITEMSEP=0,      *00100000
               &LEN=,&NAME=,&OFF=,&ORDER=,&PREFIX=,&SHDR=,&STRTCOL=0,  *00150000
               &VIEW=X'0200',&SRCNDX=                              @L2C 00200000
*        MACDATE 01/06/87                                               00250000
         GBLA  &LLBL,&CFLDOFF,&GPREFIX                             @D1C 00300000
         GBLB  &FIRSTSW,&ARAYOPN,&VARYSPC                          @D1C 00350000
         GBLC  &FIRTFLD,&OFFLBL,&ADCTLBL,&ASLBL,&GSRCNDX           @L2C 00400000
         LCLA  &INDEX,&LOOPCT,&TEMP                                @D1C 00450000
         LCLB  &BFV(16),&B1,&B2,&B3,&B4,&B5,&B6,&B7,&B8,&SHDRS     @D1C 00500000
         LCLB  &B9,&B10,&B11,&B12,&B13,&B14,&B15,&B16              @D1A 00525000
         LCLB  &NUMDEC,&NOCOLNM,&NOROWNM,&MODNAME                  @L2C 00550000
         LCLC  &CL,&CU,&SFLDLBL,&SFLDLEN,&SFLDOFF                  @D1A 00600000
         LCLC  &FLAG1,&FLAG2,&FLAG3,&FLAG4,&FV,&ORD                @D1A 00650000
.*                                                                      02100000
.*       Verify Valid Field Request                                     02150000
.*                                                                      02200000
         AIF   (&FIRSTSW EQ 0).MSG1                                     02250000
.*                                                                      02350000
.*       Process SHDR parameter and process keyword                     02351700
.*       parameters that are ignored with SHDR                          02353400
.*                                                                      02355100
         AIF   (T'&SRCNDX EQ 'O').LSH001                           @L2A 02355500
&GSRCNDX SETC  '&SRCNDX'                                           @L2A 02355900
.LSH001  ANOP                                                      @L2A 02356300
         AIF   ('&SHDR' EQ '').LSH100                                   02356800
&SHDRS   SETB  1                                                        02358500
&B8      SETB  1                  INDICATE SUB HEADER ENTRY             02360200
         AIF    ('&PREFIX' EQ '').LSH005                                02361900
       MNOTE 4,'PREFIX PARAMETER IGNORED WHEN SHDR PARAMETER SPECIFIED' 02363600
.LSH005  ANOP                                                           02365300
         AIF    ('&NAME' EQ '').LSH010                                  02367000
       MNOTE 4,'NAME PARAMETER IGNORED WHEN SHDR PARAMETER SPECIFIED'   02368700
.LSH010  ANOP                                                           02370400
         AIF    ('&OFF' EQ '').LSH015                                   02372100
       MNOTE 4,'OFF PARAMETER IGNORED WHEN SHDR PARAMETER SPECIFIED'    02373800
.LSH015  ANOP                                                           02375500
         AIF    ('&LEN' EQ '').LSH020                                   02377200
       MNOTE 4,'LEN PARAMETER IGNORED WHEN SHDR PARAMETER SPECIFIED'    02378900
.LSH020  ANOP                                                           02380600
         AIF    ('&ARRAY' EQ '').LSH025                                 02382300
       MNOTE 4,'ARRAY PARAMETER IGNORED WHEN SHDR PARAMETER SPECIFIED'  02384000
.LSH025  ANOP                                                           02385700
         AIF    ('&DTYPE' EQ '').LSH030                                 02387400
       MNOTE 4,'DTYPE PARAMETER IGNORED WHEN SHDR PARAMETER SPECIFIED'  02389100
.LSH030  ANOP                                                           02390800
.LSH100  ANOP                                                           02392500
.*                                                                      02394200
.*                                                                      02395900
.*       Verify Positional Parameter                                    02400000
.*                                                                      02450000
&LOOPCT  SETA  1                  Positional operand index         @D1C 02500000
&B4      SETB  0                                                        02550000
&B5      SETB  0                                                        02600000
         AIF   (&SHDRS).LBLO004                                         02825000
&B6      SETB  1                                                        02850000
.LBLO004 ANOP                                                           02875000
&B7      SETB  0                                                        02912500
.LBLO005 ANOP                                                           02950000
         AIF   ('&SYSLIST(&LOOPCT)' EQ '').LBLO015                 @D1C 02988800
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'NEWLINE').LBLO010          @D1C 03027600
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'NOLABEL').LBLO011          @D1C 03066400
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'CALLRTN').LBLO012          @D1C 03105200
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'NOSPLIT').LBLO013          @D1C 03144000
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'NUMDEC').LBLO014           @D1A 03182800
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'NOCOLNM').LBLO114          @D1A 03221600
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'HEXONLY').LBLO115          @D1A 03229300
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'NOROWNM').LBLO116          @L2A 03232700
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'DECODE').LBLO117           @L2A 03236100
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'MODELNAME').LBLO118        @L2A 03239500
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'CALLCBF').LBLO115          @L2A 03242900
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'IMBED').LBLO013            @L2A 03246300
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'ATTACH').LBLO010           @L2A 03249700
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'STACK').LBLO110            @L2A 03253100
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'INVERT').LBLO210           @L2A 03256500
         AIF   ('&SYSLIST(&LOOPCT)' EQ 'MSGID').LBLO009            @P1A 03258400
         MNOTE 4,'INVALID PARAMETER SPECIFIED - &SYSLIST(&LOOPCT)' @D1C 03260400
         AGO   .LBLO015                                                 03300000
.LBLO009 ANOP                     Subheader with MSGID             @P1A 03310000
&B5      SETB  1                  Record NEWLINE                   @P1A 03320000
&B11     SETB  1                  Record MSGID                     @P1A 03330000
         AGO   .LBLO015                                            @P1P 03340000
.LBLO010 ANOP                     ATTACH or NEWLINE specified           03350000
&B5      SETB  1                  Record ATTACH or NEWLINE              03400000
         AGO   .LBLO015                                                 03450000
.LBLO110 ANOP                     STACK specified                  @L2A 03457100
&B6      SETB  1                  Record STACK                     @L2A 03464200
         AGO   .LBLO015                                            @L2A 03471300
.LBLO210 ANOP                     INVERT specified                 @L2A 03478400
&B12     SETB  1                  Record INVERT                    @L2A 03485500
         AGO   .LBLO015                                            @L2A 03492600
.LBLO011 ANOP                                                           03500000
         AIF    (NOT &SHDRS).LBLO111 Test for subheader entry           03510000
      MNOTE 4,'NOLABEL PARAMETER IGNORED WHEN SHDR PARAMETER SPECIFIED' 03520000
         AGO   .LBLO015                                                 03530000
.LBLO111 ANOP                     NOLABEL specified                     03540000
&B6      SETB  0                  Clear PRINTLABEL bit                  03550000
         AGO   .LBLO015                                                 03600000
.LBLO012 ANOP                     CALLRTN specified                     03650000
&B7      SETB  1                  Record CALLRTN                        03700000
         AGO   .LBLO015                                                 03750000
.LBLO013 ANOP                     IMBED or NOSPLIT option               03800000
&B4      SETB  1                  Record IMBED or NOSPLIT               03850000
         AGO   .LBLO015                                            @D1P 03857100
.LBLO014 ANOP                     NUMDEC option specified          @D1A 03864200
&NUMDEC  SETB  1                  Record NUMDEC option             @D1A 03871300
         AGO   .LBLO015                                            @D1P 03878400
.LBLO114 ANOP                     NOCOLNM option specified         @D1A 03885500
&NOCOLNM SETB  1                  Record NOCOLNM option            @D1A 03892600
         AGO   .LBLO015                                            @L2P 03893000
.LBLO115 ANOP                     HEXONLY or CALLCBF specified     @L1A 03893400
&B9      SETB  1                  Record HEXONLY/CALLCBF option    @L1A 03893800
         AGO   .LBLO015                                            @L1P 03894400
.LBLO117 ANOP                     DECODE option specified          @L2A 03894900
&B11     SETB  1                  Record DECODE option             @L2A 03895400
&B6      SETB  0                  Clear PRINTLABEL bit             @L2P 03895900
         AGO   .LBLO015                                            @L2P 03896400
.LBLO118 ANOP                     MODELNAME variation specified    @L2A 03896900
&MODNAME SETB  1                  Record MODEL NAME variation      @L2A 03897400
         AGO   .LBLO015                                            @L2P 03897900
.LBLO116 ANOP                     NOROWNM option specified         @L2A 03898400
&NOROWNM SETB  1                  Record NOROWNM option            @L2A 03898900
.LBLO015 ANOP                                                           03900000
&LOOPCT  SETA  &LOOPCT+1          Positional operand index         @D1C 03950000
         AIF   (&LOOPCT LE N'&SYSLIST).LBLO005                     @D1C 04000000
.*                                                                      04050000
.*       Verify PREFIX Parameter                                        04100000
.*                                                                      04150000
         AIF   (&SHDRS).LBLO020                                         04175000
         AIF   ('&PREFIX' EQ '').LBLO020                                04200000
         AIF   (T'&PREFIX(1) NE 'N').MSG5                               04250000
&TEMP    SETA  &PREFIX(1)                                               04283300
         AIF   ('&TEMP' GT '8').MSG5                                    04316600
&GPREFIX SETA  &PREFIX(1)+1                                             04350000
&INDEX   SETA  8-&PREFIX(1)                                             04400000
         AIF   (&INDEX LE &LLBL).LBLO020                                04450000
&LLBL    SETA  &INDEX                                                   04500000
.LBLO020 ANOP                                                           04550000
.*                                                                      04600000
.*       Verify DTYPE Parameter                                         04650000
.*                                                                      04700000
&B3      SETB  0                                                        04737500
         AIF   (&SHDRS).LBL035                                          04775000
         AIF   ('&DTYPE' EQ '').LBL035                                  04800000
         AIF   ('&DTYPE' EQ 'HEX').LBL035                               04850000
         AIF   ('&DTYPE' EQ 'EBCDIC').LBL033                            04900000
         AIF   ('&DTYPE' EQ 'ANY').LBL033A                         @L2A 04916600
         AIF   ('&DTYPE' EQ 'QANY').LBL033B                        @L2A 04933200
         MNOTE 4,'INVALID VALUE SPECIFIED FOR DTYPE'                    04950000
         MNOTE *,'DTYPE MUST BE HEX, EBCDIC, ANY OR QANY'          @L2C 05000000
         AGO   .LBL035                                                  05050000
.LBL033B ANOP         Qualify ANY with contents of subheader       @L2A 05058300
&B10     SETB  1                                                   @L2A 05066600
.LBL033A ANOP                                                      @L2A 05074900
&B12     SETB  1                                                   @L2A 05083200
         AGO   .LBL035                                             @L2A 05091500
.LBL033  ANOP                                                           05100000
&B3      SETB  1                                                        05150000
.LBL035  ANOP                                                           05200000
.*                                                                      05250000
.*       Process NAME Parameter                                         05300000
.*                                                                      05350000
&SFLDLBL SETC  ' '                                                      05366600
         AIF   (&SHDRS).LBL038                                          05383200
         AIF   ('&NAME' EQ '').MSG2                                     05400000
         AIF   (K'&NAME GE &GPREFIX).LBL036                             05450000
&SFLDLBL SETC  '&NAME'                                                  05466600
         AIF   ('&NAME' EQ '*').LBL038                                  05483200
&SFLDLBL SETC  ' '                                                      05550000
         AGO   .LBL037                                                  05650000
.LBL036  ANOP                                                           05700000
&SFLDLBL SETC  '&NAME'(&GPREFIX,8)                                      05750000
.LBL037  ANOP                                                           05800000
&SFLDOFF SETC  '&NAME'.'-'.'&OFFLBL'                                    05850000
.LBL038  ANOP                                                           05875000
.*                                                                      05900000
.*       Process ARRAY Parameter                                        05950000
.*                                                                      06000000
&B1      SETB  0                  ASSUME NOT ARRAY START                06037500
&B2      SETB  0                  ASSUME NOT ARRAY END                  06075000
         AIF   (&SHDRS).LBL074                                          06112500
         AIF   ('&ARRAY' EQ '').LBL074                                  06150000
         AIF   ('&ARRAY' NE 'END').LBL041                               06200000
         AIF   (&ARAYOPN EQ 1).LBL040                                   06250000
         MNOTE 4,'ARRAY DEFINITION NOT IN PROGRESS'                     06300000
         MNOTE *,'ARRAY=END IGNORED'                                    06350000
         AGO   .LBL074                                                  06400000
.LBL040  ANOP                                                           06450000
&ARAYOPN SETB  0                  CLOSE ARRAY DEFINITION                06500000
&B2      SETB  1                  INDICATE CLOSE IN DESC                06550000
&ADCTLBL EQU   (*-&ASLBL)/16      NUMBER OF DESC IN ARRAY               06600000
         AGO   .LBL074                                                  06650000
.LBL041  ANOP                                                           06700000
         AIF   (&ARAYOPN EQ 1).MSG3                                     06750000
&ARAYOPN SETB  1                  OPEN ARRAY DEFINITION                 06800000
&B1      SETB  1                  INDICATE ARRAY CONTROL WORD           06850000
         AIF   ('&ARRAY' NE '*').LBL042                                 06900000
&VARYSPC SETB  1                  INDICATE VARIABLE LEN ARRAY           06950000
&SFLDLEN SETC  '0'                INDICATE COUNT UNKNOWN                07000000
         AGO   .LBL044                                                  07050000
.LBL042  ANOP                                                           07100000
&SFLDLEN SETC  '&ARRAY'           SET NUMBER OF ARRAY ENTRIES           07150000
.LBL044  ANOP                                                           07200000
&ADCTLBL SETC  'ADCT&SYSNDX'      LABEL FOR DESC COUNT EQU              07250000
&ASLBL   SETC  'ASLB&SYSNDX'      LABEL FOR FIRST ARRAY DESC            07300000
&SFLDOFF SETC  '&ADCTLBL'                                               07350000
&ASLBL   DS    0C                 FIRST DESC OF ARRAY                   07362800
         AIF   (N'&ARRAY LE 1).LBL044C Single-dimensional array    @D1A 07375600
&B10     SETB  1                  Multi-dimensional array          @D1A 07388400
.LBL044C AIF   ('&OFF' EQ '').LBL045                               @D1C 07401200
       MNOTE 4,'OFF PARAMETER IGNORED WHEN ARRAY PARAMETER SPECIFIED'   07414200
.LBL045  ANOP                                                           07421300
         AIF   ('&LEN' EQ '').LBL046                                    07428400
       MNOTE 4,'LEN PARAMETER IGNORED WHEN ARRAY PARAMETER SPECIFIED'   07435500
.LBL046  ANOP                                                           07442600
         AGO   .LBL090                                                  07450000
.*                                                                      07500000
.*       Process OFF Parameter                                          07550000
.*                                                                      07600000
.LBL074  ANOP                                                           07650000
         AIF   (&SHDRS).LBL076                                          07675000
         AIF   ('&OFF' EQ '').LBL075                                    07700000
&SFLDOFF SETC  '&OFF'                                                   07750000
         AGO   .LBL076                                                  07800000
.LBL075  ANOP                                                           07850000
         AIF   ('&OFFLBL' EQ '').MSG6                                   07900000
         AIF   ('&NAME' EQ '*').MSG6                                    07950000
.LBL076  ANOP                                                           08050000
.*                                                                      08100000
.*       Process Length Defaults                                        08150000
.*                                                                      08200000
         AIF   (&SHDRS).LBL090                                          08225000
&SFLDLEN SETC  'L'''.'&NAME'                                            08250000
         AIF   ('&LEN' EQ '').LBL080                                    08300000
&SFLDLEN SETC  '&LEN'                                                   08350000
         AGO   .LBL082                                                  08375000
.LBL080  ANOP                                                           08400000
         AIF   ('&OFFLBL' EQ '').MSG7                                   08412500
         AIF   ('&NAME' EQ '*').MSG7                                    08425000
.LBL082  ANOP                                                           08437500
.LBL090  ANOP                                                           08450000
.*                                                                      08500000
.*       Process VIEW Parameter                                         08550000
.*                                                                      08600000
.LBL095  ANOP                                                           08625000
&FV      SETC  '0000'                                                   08650000
         AIF   ('&VIEW' EQ '').LBL137                                   08700000
&FV      SETC  '&VIEW'                                                  08750000
         AIF   ('&VIEW'(1,1) NE '(').LBL137                             08800000
&LOOPCT  SETA  N'&VIEW                                                  08850000
.LBL100  ANOP                                                           08900000
         AIF   ('&VIEW(&LOOPCT)' EQ '').LBL125                          08950000
         AIF   (T'&VIEW(&LOOPCT) EQ 'N').LBL110                         09000000
         MNOTE 4,'INVALID VALUE SPECIFIED FOR VIEW - &VIEW(&LOOPCT)'    09050000
         AGO   .LBL125                                                  09150000
.LBL110  ANOP                                                           09200000
&INDEX   SETA  17-&VIEW(&LOOPCT)                                        09250000
&BFV(&INDEX) SETB  1                                                    09300000
.LBL125  ANOP                                                           09350000
&LOOPCT  SETA  &LOOPCT-1                                                09400000
         AIF   (&LOOPCT GT 0).LBL100                                    09450000
.LBL130  ANOP                                                           09500000
&LOOPCT  SETA  16                                                       09550000
&FV      SETC  'B'''                                                    09600000
.LBL135  ANOP                                                           09650000
&FV      SETC  '&FV&BFV(&LOOPCT)'                                       09700000
&LOOPCT  SETA  &LOOPCT-1                                                09750000
         AIF   (&LOOPCT GT 0).LBL135                                    09800000
&FV      SETC  '&FV.'''                                                 09850000
.LBL137  ANOP                                                           09900000
&FLAG1   SETC  '&B1&B2&B3&B4&B5&B6&B7&B8'                          @D1C 09925000
&FLAG2   SETC  '&B9&B10&B11&B12'                                   @D1A 09950000
         AIF   (&SHDRS).LBL150    Subheader entry                       09969900
         AIF   (&B11).LBL151      Decode entry                          09989800
&FIRTFLD DC    CL8'&SFLDLBL'      Field label                           10009900
         DC    B'&FLAG1'          Flags (byte 1)                   @D1C 10044800
         DC    BL.4'&FLAG2',AL.4(&GSRCNDX) Flags (byte 2)          @L2C 10079700
         AIF   (N'&ARRAY GT 1).LBLA010 Multi-dimensional array          10114600
         DC    AL2(&FV)           Field view pattern                    10149500
         DC    AL2(&SFLDOFF)      Data offset/descriptor count          10184400
         DC    AL2(&SFLDLEN)      Data length/array count               10219300
         AGO   .LBL160                                                  10254500
.LBL150  ANOP                                                           10259000
&FIRTFLD DC    X'FF'              Start of sub-header field             10263500
         DC    X'000000'          Reserved                              10268000
         DC    AL4(&SHDR)         Address of sub-header string          10272500
         DC    BL1'&FLAG1'        Flags (byte 1)                   @D1C 10277000
         DC    BL.4'&FLAG2',AL.4(&GSRCNDX) Flags (byte 2)          @L2C 10281500
         DC    AL2(&FV)           Field view pattern                    10286000
         DC    AL4(0)             Reserved                              10290500
         AGO   .LBL160                                                  10295000
.*                                                                      10300000
.*       Flagfield decoding                                             10300100
.*                                                                      10300200
.LBL151  ANOP                                                           10300300
         AIF   (&MODNAME EQ 0).LBL152                              @L2A 10300400
&FIRTFLD DC    CL8'&NAME'         Decode model name                @L2A 10300600
         DC    B'&FLAG1'          Flags (byte 1)                   @L2C 10300700
         DC    BL.4'&FLAG2',AL.4(&GSRCNDX) Flags (byte 2)          @L2C 10300800
         DC    AL2(&FV)           Field view pattern               @L2P 10300900
         DC    AL2(&SFLDOFF)      Data offset                      @L2P 10301000
         DC    AL2(&SFLDLEN)      Data length                      @L2P 10301100
         AGO   .LBL160                                                  10301200
.LBL152  ANOP                                                           10301300
&FIRTFLD DC    X'FF'              Start of model address field     @L2A 10301500
         DC    X'000000'          Reserved                         @L2P 10301600
         DC    AL4(&NAME)         Decode model address             @L2A 10301700
         DC    BL1'&FLAG1'        Flags (byte 1)                   @L2P 10301800
         DC    BL.4'&FLAG2',AL.4(&GSRCNDX) Flags (byte 2)          @L2C 10301900
         DC    AL2(&FV)           Field view pattern               @L2P 10302000
         DC    AL2(&SFLDOFF)      Data offset                      @L2P 10302100
         DC    AL2(&SFLDLEN)      Data length                      @L2P 10302200
         AGO   .LBL160                                                  10302300
.*                                                                      10302400
.*       Multi-dimensional array                                        10302500
.*                                                                      10302600
.LBLA010 ANOP  ,                  Process an array dimension       @D1A 10302700
         DC    AL2(0)             Dummy field view pattern         @D1A 10303200
         DC    AL2(&SFLDOFF)      Data descriptor count            @D1A 10304000
&TEMP    SETA  N'&ARRAY           Dimension count                  @D1A 10304800
&ORD     SETC  '&TEMP'            Dimension count                  @D1A 10305600
         DC    AL2(&ORD)          Dimension count                  @D1A 10306400
*------- Multi-dimensional array - Control values                       10307200
         DC    XL4'0'             Reserved                         @D1A 10308000
         DC    AL1(&STRTCOL)      Begin column                     @D1A 10308800
         DC    AL1(&COLNUM)       Column count                     @D1A 10309600
         DC    AL1(&COLSEP)       Column separation                @D1A 10310400
         DC    AL1(&ITEMSEP)      Item separation                  @D1A 10311200
&FLAG3   SETC  '&NUMDEC&NOCOLNM.&NOROWNM.00000' Flags              @D1A 10312000
         DC    BL1'&FLAG3'        Flags                            @D1A 10312800
         DC    XL1'00'            Reserved                         @D1A 10313600
         DC    AL2(&FV)           Field view pattern               @D1P 10314400
         DC    XL4'0'             Reserved                         @D1P 10315200
*------- Multi-dimensional array - Array dimensions                     10316000
&LOOPCT  SETA  1                  Subscript index                  @D1A 10316800
.LBLA020 AIF   (&LOOPCT GT N'&ARRAY).LBL160                        @D1A 10317600
         DC    XL6'0'             Reserved                         @D1A 10318400
&ORD     SETC  '&LOOPCT'          Processing order                 @D1A 10319200
         AIF   (T'&ORDER(&LOOPCT) EQ 'O').LBLA030                  @D1A 10320000
&ORD     SETC  '&ORDER(&LOOPCT)'  Processing order                 @D1A 10320800
.LBLA030 ANOP  ,                  Default procesing order          @D1A 10321600
.*------                                                                10322400
         AIF   ('&ARRAY(&LOOPCT,1)' NE '*').LBLA040                @D1A 10323200
&CL      SETC  '0'                Lower bound - default            @D1A 10324000
&B1      SETB  1                  Lower bound not provided         @D1A 10324800
         AGO   .LBLA050           Lower bound processed            @D1A 10325600
.*------                                                                10326400
.LBLA040 ANOP  ,                  Lower bound provided             @D1A 10327200
&CL      SETC  '&ARRAY(&LOOPCT,1)' Lower bound                     @D1A 10328000
&B1      SETB  0                  Lower bound provided             @D1A 10328800
.*------                                                                10329600
.LBLA050 ANOP  ,                  Lower bound processed            @D1A 10330400
.*------                                                                10331200
&B2      SETB  0                  Upper bound provided             @D1A 10332000
         AIF   ('&ARRAY(&LOOPCT,2)' NE '*').LBLA060                @D1A 10332800
&CU      SETC  '0'                Upper bound - default            @D1A 10333600
&B2      SETB  1                  Upper bound not provided         @D1A 10334400
         AGO   .LBLA070           Upper bound processed            @D1A 10335200
.*------                                                                10336000
.LBLA060 ANOP  ,                  Upper bound provided             @D1A 10336800
&CU      SETC  '&ARRAY(&LOOPCT,2)' Upper bound                     @D1A 10337600
&B1      SETB  0                  Upper bound provided             @D1A 10338400
.*------                                                                10339200
.LBLA070 ANOP  ,                  Upper bound processed            @D1A 10340000
.*------                                                                10340800
&FLAG4   SETC  '&B1&B2.000000'    Flags                            @D1A 10341600
         DC    BL1'&FLAG4'        Flags                            @D1A 10342400
         DC    AL1(&ORD)          Processing order                 @D1A 10343200
         DC    AL4(&CL)           Lower bound                      @D1A 10344000
         DC    AL4(&CU)           Upper bound                      @D1A 10344800
&LOOPCT  SETA  &LOOPCT+1          Subscript index                  @D1A 10345600
         AGO   .LBLA020           Process another subscript        @D1A 10346400
.*------                                                                10347200
.LBL160  ANOP                                                           10348000
&FIRTFLD SETC  '        '                                               10350000
         MEXIT                                                          10400000
.MSG1    ANOP                                                           10450000
         MNOTE 8,'FORMAT DEFINITION NOT IN PROGRESS'                    10500000
         MNOTE *,'FIELD REQUEST IGNORED'                                10550000
         MEXIT                                                          10600000
.MSG2    ANOP                                                           10650000
         MNOTE 8,'NAME PARAMETER REQUIRED BUT NOT SPECIFIED'            10700000
         MNOTE *,'FIELD REQUEST IGNORED'                                10750000
         MEXIT                                                          10800000
.MSG3    ANOP                                                           10850000
         MNOTE 8,'ARRAY DEFINITION ALREADY IN PROGRESS'                 10900000
         MNOTE *,'ARRAY REQUEST IGNORED'                                10950000
         MEXIT                                                          11000000
.MSG5    ANOP                                                           11050000
         MNOTE 4,'INVALID VALUE SPECIFIED FOR PREFIX'                   11100000
         AGO   .LBLO020                                                 11350000
.MSG6    ANOP                                                           11355500
         MNOTE 8,'OFF PARAMETER REQUIRED BUT NOT SPECIFIED'             11361000
         MNOTE *,'FIELD REQUEST IGNORED'                                11366500
         MEXIT                                                          11372000
.MSG7    ANOP                                                           11377500
         MNOTE 8,'LEN PARAMETER REQUIRED BUT NOT SPECIFIED'             11383000
         MNOTE *,'FIELD REQUEST IGNORED'                                11388500
         MEND  ,                                                     */ 11438500
*                                                                       11488500
*%BLSQMFLD:                         /* Define model entry        @L2A*/ 11538500
*   MACRO KEYS(ARRAY,ATTACH,CALLCBF,CALLRTN,COLNUM,COLSEP,DECODE,DTYPE, 11588500
*       HEXONLY,IMBED,INVERT,ITEMSEP,LEN,MODELNAME,MSGID,NAME,NEWLINE,  11638500
*       NOCOLNM,NOLABEL,NOROWNM,NOSPLIT,NUMDEC,OFF,ORDER,PREFIX,SHDR,   11688500
*       SRCNDX,STACK,STRTCOL,VIEW);                                     11738500
*                                                                       11788500
*/* ================================================================ */ 11838500
*/* Define Macro-Variables                                           */ 11888500
*/* ================================================================ */ 11938500
*                                                                       11986500
*   DECLARE                         /* Macro variables               */ 12034500
*     ASAXMAC_IsItPLX CHARACTER EXTERNAL, /* ASAXMAC interface   @H1A*/ 12046500
*     EHBENDCL CHARACTER EXTERNAL,  /* DCL text to be queued     @P3P*/ 12058500
*     ELSQMDEFFLAG CHARACTER EXTERNAL, /* Flag constant base     @L2P*/ 12082500
*     ELSQMDEFNAME CHARACTER EXTERNAL, /* Unique name base       @L2P*/ 12130500
*     ELSQMDEFOFFL CHARACTER EXTERNAL, /* Offset label base      @L2P*/ 12178500
*     ELSQMDEFSRCI CHARACTER EXTERNAL, /* Multiple source index  @L2P*/ 12226500
*     ELSQMFLDARRAY CHARACTER EXTERNAL, /* Array name base       @L2A*/ 12274500
*     ELSQMFLDENTRY FIXED EXTERNAL, /* Array entry count         @P3A*/ 12298500
*     ELSQMDEFLLEN FIXED EXTERNAL,  /* Maximum label length      @L2P*/ 12322500
*     ELSQMDEFPLEN FIXED EXTERNAL,  /* Prefix length + 1         @L2P*/ 12370500
*     CVIEW    CHARACTER INTERNAL,  /* View option               @L3A*/ 12394500
*     FLAGBITS CHARACTER INTERNAL,  /* Flag bits                 @L2A*/ 12418500
*     SFLDLBL  CHARACTER INTERNAL,  /* Label                     @L2A*/ 12466500
*     SFLDLEN  CHARACTER INTERNAL,  /* Length                    @L2A*/ 12514500
*     SFLDOFF  CHARACTER INTERNAL,  /* Offset                    @L2A*/ 12562500
*     VIEWBITS CHARACTER INTERNAL,  /* View bits                 @L2A*/ 12610500
*     FJ       FIXED INTERNAL,      /* List index                @P3A*/ 12634500
*     F1       FIXED INTERNAL,      /* Utility                   @L2A*/ 12658500
*     F2       FIXED INTERNAL;      /* Utility                   @L2A*/ 12706500
*   DEACTIVATE ELSQMDEFFLAG,ELSQMDEFNAME,ELSQMDEFOFFL,ELSQMDEFSRCI,     12754500
*       ELSQMFLDARRAY,ELSQMDEFLLEN,ELSQMDEFPLEN,CVIEW,FLAGBITS,SFLDLBL, 12802500
*       SFLDLEN,SFLDOFF,VIEWBITS,F1,F2; /* Prevent accidents     @L2A*/ 12850500
*   DO FJ = 1 TO(NUMBER(NAME)+NUMBER(SHDR)); /* Process all names or    12858500
*                                      subheaders                @P3C*/ 12866500
*     IF LENGTH(ELSQMFLDARRAY) > 0 THEN /* Array defined         @P3A*/ 12874500
*       ELSQMFLDENTRY = ELSQMFLDENTRY + 1; /* Array entry count  @P3A*/ 12886500
*                                                                       12898500
*     /***************************************************************/ 13378500
*     /*                                                             */ 13426500
*     /* Compose flag bits                                           */ 13474500
*     /*                                                             */ 13522500
*     /***************************************************************/ 13570500
*                                                                       13618500
*     F1 = 0;                       /* Flag data                 @L2A*/ 13668500
*     FLAGBITS = '';                /* No flag bits              @L2A*/ 13718500
*     IF NUMBER(ARRAY) > 0 THEN     /* Array                     @L2A*/ 13768500
*                                                                       13858500
*       /*************************************************************/ 13858600
*       /*                                                           */ 13858700
*       /* Process ARRAY option, including flag bits 1 and 2         */ 13858800
*       /*                                                           */ 13858900
*       /*************************************************************/ 13859000
*                                                                       13859100
*       DO;                         /* Array                     @L2A*/ 13859200
*         F1 = 32768;               /* Turn on flag bit 1        @L2A*/ 13859300
*         SFLDLEN = '0';            /* Number of array entries   @L2A*/ 13859400
*         IF TRANSLATE(ARRAY(1)) = 'END' THEN /* End of array           13859500
*                                      definition                @L3C*/ 13859600
*                                                                       13859700
*           /*********************************************************/ 13859800
*           /*                                                       */ 13859900
*           /* End of array definition                               */ 13860000
*           /*                                                       */ 13860100
*           /*********************************************************/ 13860200
*                                                                       13860300
*           DO;                     /* End of array definition   @L2A*/ 13860400
*             F1 = 16384;           /* Turn on flag bit 2 only   @P3C*/ 13860500
*             EHBENDCL = ELSQMFLDARRAY || '#COUNT CONSTANT(' || CHAR(   13860600
*                 ELSQMFLDENTRY) || '),/*Array descriptor count*/'; /*  13860700
*                                      DCL text to be queued     @P3A*/ 13860800
*             ANSWER('?BLRDEFER;'); /* Queue deferred DCL        @P3P*/ 13860900
*             ELSQMFLDARRAY = '';   /* No array name             @P3A*/ 13861000
*           END;                    /* End of array definition   @L2A*/ 13861100
*         ELSE                      /* Begin array definition        */ 13861200
*                                                                       13861300
*           /*********************************************************/ 13861400
*           /*                                                       */ 13861500
*           /* Begin array definition                                */ 13861600
*           /*                                                       */ 13861700
*           /*********************************************************/ 13861800
*                                                                       13861900
*           DO;                     /* Begin array definition    @L2A*/ 13862000
*             ELSQMFLDARRAY = 'BLSQMDEF' || MACINDEX; /* Array name     13862100
*                                      base                      @L2A*/ 13862200
*             IF NUMBER(ARRAY) > 1 THEN /* 2 dim array?          @P4A*/ 13862300
*               ELSQMFLDENTRY = 3;  /* Array entry count, 2 dim array   13862400
*                                                                @P4A*/ 13862500
*             ELSE                  /* Not 2 dim array           @P4A*/ 13862600
*               ELSQMFLDENTRY = 0;  /* Array entry count, list   @P3A*/ 13862700
*             IF ARRAY(1) = '*' THEN /* Variable length array    @L2A*/ 13862800
*               ELSQMDEFFLAG = ELSQMDEFFLAG(1:1) || '1' || ELSQMDEFFLAG 13862900
*                   (3:8);          /*                           @L2A*/ 13863000
*             ELSE                  /* Fixed length array            */ 13863100
*               SFLDLEN = ARRAY(1); /* Number of array entries   @L2A*/ 13863200
*           END;                    /* Begin array definition    @L2A*/ 13863300
*       END;                        /* Array                     @L2A*/ 13863400
*     IF TRANSLATE(DTYPE(1)) = 'EBCDIC' THEN /* Turn on flag bit 3      13863500
*                                                                @L3C*/ 13863600
*       F1 = F1 + 8192;             /* Turn on flag bit 3        @L2A*/ 13863700
*     IF LENGTH(IMBED) > 0 | LENGTH(NOSPLIT) > 0 THEN /*         @L2A*/ 13863800
*       F1 = F1 + 4096;             /* Turn on flag bit 4        @L2A*/ 13863900
*     IF LENGTH(ATTACH) > 0 | LENGTH(MSGID) > 0 | LENGTH(NEWLINE) > 0   13864000
*       THEN                        /* Turn on flag bit 5        @L2A*/ 13864100
*       F1 = F1 + 2048;             /* Turn on flag bit 5        @L2A*/ 13864200
*     IF (LENGTH(NOLABEL) = 0 & LENGTH(DECODE) = 0) | LENGTH(STACK) > 0 13864300
*       THEN                        /* Turn on flag bit 6        @P5C*/ 13864400
*       F1 = F1 + 1024;             /* Turn on flag bit 6        @L2A*/ 13864500
*     IF LENGTH(CALLRTN) > 0 THEN   /* Turn on flag bit 7        @L2A*/ 13864600
*       F1 = F1 + 512;              /* Turn on flag bit 7        @L2A*/ 13864700
*     IF LENGTH(SHDR(1)) > 0 THEN   /* Turn on flag bit 8        @L2A*/ 13864800
*       F1 = F1 + 256;              /* Turn on flag bit 8        @L2A*/ 13864900
*     ELSE                          /* Leave flag bit 8 off          */ 13865000
*                                                                       13865100
*       /*************************************************************/ 13865200
*       /*                                                           */ 13865300
*       /* Verify PREFIX, NAME, OFF, and LEN parameters              */ 13865400
*       /*                                                           */ 13865500
*       /*************************************************************/ 13865600
*                                                                       13865700
*       DO;                         /* Leave flag bit 8 off      @L2A*/ 13865800
*         IF LENGTH(PREFIX(FJ)) > 0 THEN /* Override prefix      @L2A*/ 13865900
*                                                                       13866000
*           /*********************************************************/ 13866100
*           /*                                                       */ 13866200
*           /* Override prefix                                       */ 13866300
*           /*                                                       */ 13866400
*           /*********************************************************/ 13866500
*                                                                       13866600
*           DO;                     /* Override prefix           @L2A*/ 13866700
*             ELSQMDEFPLEN = 1 + FIXED(PREFIX(FJ)); /* Length+1  @L2A*/ 13866800
*             F2 = 9 - ELSQMDEFPLEN; /* Label length             @L2A*/ 13866900
*             IF F2 > ELSQMDEFLLEN THEN /* New maximum           @L2A*/ 13867000
*               ELSQMDEFLLEN = F2;  /* Maximum label length      @L2A*/ 13867100
*           END;                    /* Override prefix           @L2A*/ 13867200
*         IF NAME(FJ) = '*' THEN    /* Reserved field            @L2A*/ 13867300
*           SFLDLBL = '*';          /* Reserved field indicator  @L2A*/ 13867400
*         ELSE                      /* Defined field                 */ 13867500
*                                                                       13867600
*           /*********************************************************/ 13867700
*           /*                                                       */ 13867800
*           /* Defined field                                         */ 13867900
*           /*                                                       */ 13868000
*           /*********************************************************/ 13868100
*                                                                       13868200
*           DO;                     /* Defined field             @L2A*/ 13868300
*             IF LENGTH(NAME(FJ)) >= ELSQMDEFPLEN THEN /* Label  @L2A*/ 13868400
*               SFLDLBL = NAME(FJ,ELSQMDEFPLEN:LENGTH(NAME(FJ))); /*    13868500
*                                      Field label               @L2A*/ 13868600
*             ELSE                  /* No field label                */ 13868700
*               SFLDLBL = ' ';      /* No field label            @L2A*/ 13868800
*             IF NUMBER(ARRAY) > 1 THEN /*                       @P3P*/ 13868900
*               LEAVE;              /* No offset for array entry @L2A*/ 13869000
*             IF LENGTH(ELSQMDEFOFFL) = 0 THEN /* Implicit base  @L2A*/ 13869100
*               SFLDOFF = 'OFFSET(' || NAME(FJ) || ')'; /*       @L2A*/ 13869200
*             ELSE                  /* Explicit base             @L2A*/ 13869300
*               SFLDOFF = 'OFFSET(' || NAME(FJ) || ',' || ELSQMDEFOFFL  13869400
*                   || ')';         /* Offset                    @L2A*/ 13869500
*           END;                    /* Defined field             @L2A*/ 13869600
*         IF NUMBER(ARRAY) > 1 THEN /* Multi-dimensional array   @P3C*/ 13869700
*           LEAVE;                  /* Ignore OFF and LEN        @L2A*/ 13869800
*         IF LENGTH(OFF(FJ)) > 0 THEN /* Offset specified        @L2A*/ 13869900
*           SFLDOFF = OFF(FJ);      /* Offset                    @L2A*/ 13870000
*         IF LENGTH(LEN(FJ)) > 0 THEN /* Length specified        @L2A*/ 13870100
*           SFLDLEN = LEN(FJ);      /* Length                    @L2A*/ 13870200
*         ELSE                      /* Length omitted            @H1A*/ 13870300
*           DO;                     /* Length omitted                */ 13870400
*             ANSWER('?ASAXMAC ISITPLX(1,4,1);'); /*             @H1A*/ 13870500
*             IF ASAXMAC_IsItPLX = 'YES' THEN /* Use SIZE        @H1A*/ 13870600
*               SFLDLEN = 'SIZE(' || NAME(FJ) || ')'; /*         @H1A*/ 13870700
*             ELSE                  /* Use LENGTH                    */ 13870800
*               SFLDLEN = 'LENGTH(' || NAME(FJ) || ')'; /*       @H1C*/ 13870900
*           END;                    /* Length omitted            @H1A*/ 13871000
*       END;                        /* Leave flag bit 8 off      @L2A*/ 13871100
*     IF LENGTH(HEXONLY) > 0 | LENGTH(CALLCBF) > 0 THEN /*       @L2A*/ 13871200
*       F1 = F1 + 128;              /* Turn on flag bit 9        @L2A*/ 13871300
*     IF TRANSLATE(DTYPE(1)) = 'QANY' | NUMBER(ARRAY) > 1 THEN /*       13871400
*                                                                @L3C*/ 13871500
*       F1 = F1 + 64;               /* Turn on flag bit 10       @L2A*/ 13871600
*     IF LENGTH(DECODE) > 0 | LENGTH(MSGID) > 0 THEN /*          @L2A*/ 13871700
*       F1 = F1 + 32;               /* Turn on flag bit 11       @L2A*/ 13871800
*     IF TRANSLATE(DTYPE(1)) = 'ANY' | LENGTH(INVERT) > 0 THEN /*       13871900
*                                                                @L3C*/ 13872000
*       F1 = F1 + 16;               /* Turn on flag bit 12       @L2A*/ 13872100
*     IF LENGTH(SRCNDX(1)) > 0 THEN /* Override source index     @L2A*/ 13872200
*       ELSQMDEFSRCI = SRCNDX(1);   /* Source index              @L2A*/ 13872300
*     IF ELSQMDEFSRCI ^= '0' THEN   /* Interesting source index  @L2A*/ 13872400
*       FLAGBITS = '+' || ELSQMDEFSRCI; /* Flag bits             @L2A*/ 13872500
*     FLAGBITS =                                                        13872600
*         '3 FLAG#BITS UNSIGNED BINARY(16) BOUNDARY(WORD) INITIAL' ||   13872700
*         '(' || CHAR(F1) || FLAGBITS || '),/*Flag bits*/'; /*   @L2A*/ 13872800
*                                                                       13872900
*     /***************************************************************/ 13873000
*     /*                                                             */ 13873100
*     /* Compose view bits                                           */ 13873200
*     /*                                                             */ 13873300
*     /***************************************************************/ 13873400
*                                                                       13873500
*     F2 = 0;                       /* Flag data                 @L2A*/ 13873600
*     IF LENGTH(VIEW(1)) = 0 THEN   /* Implicit view             @L2A*/ 13873700
*       VIEWBITS = '''0200''X';     /* View bits                 @L2A*/ 13873800
*     ELSE                          /* Explicit view                 */ 13873900
*VIEWLOOP:                          /* Process view bits         @L2A*/ 13874000
*       DO F1 = 1 TO NUMBER(VIEW);  /* Process view bits         @L2A*/ 13874100
*         CVIEW = TRANSLATE(VIEW(F1)); /*                        @L3A*/ 13874200
*         IF CVIEW = 'KEYFIELD' THEN /* Keyfield view            @L3C*/ 13874300
*                                                                       13874400
*           /*********************************************************/ 13874500
*           /*                                                       */ 13874600
*           /* Keyfield view                                         */ 13874700
*           /*                                                       */ 13874800
*           /*********************************************************/ 13874900
*                                                                       13875000
*           DO;                     /* Keyfield view             @L2A*/ 13875100
*             F2 = F2 + 32768;      /* View bits                 @L2A*/ 13875200
*             ITERATE VIEWLOOP;     /* Process next view         @L2A*/ 13875300
*           END;                    /* Keyfield view             @L2A*/ 13875400
*         IF CVIEW = 'SUMMARY' THEN /* Summary view              @L2A*/ 13875500
*                                                                       13875600
*           /*********************************************************/ 13875700
*           /*                                                       */ 13875800
*           /* Summary view                                          */ 13875900
*           /*                                                       */ 13876000
*           /*********************************************************/ 13876100
*                                                                       13876200
*           DO;                     /* Summary view              @L2A*/ 13876300
*             F2 = F2 + 16384;      /* View bits                 @L2A*/ 13876400
*             ITERATE VIEWLOOP;     /* Process next view         @L2A*/ 13876500
*           END;                    /* Summary view              @L2A*/ 13876600
*         IF CVIEW = 'REGISTER' THEN /* Register view            @L3C*/ 13876700
*                                                                       13876800
*           /*********************************************************/ 13876900
*           /*                                                       */ 13877000
*           /* Register view                                         */ 13877100
*           /*                                                       */ 13877200
*           /*********************************************************/ 13877300
*                                                                       13877400
*           DO;                     /* Register view             @L2A*/ 13877500
*             F2 = F2 + 8192;       /* View bits                 @L2A*/ 13877600
*             ITERATE VIEWLOOP;     /* Process next view         @L2A*/ 13877700
*           END;                    /* Register view             @L2A*/ 13877800
*         IF CVIEW = 'LINKAGE' THEN /* Linkage view              @L3C*/ 13877900
*                                                                       13878000
*           /*********************************************************/ 13878100
*           /*                                                       */ 13878200
*           /* Linkage view                                          */ 13878300
*           /*                                                       */ 13878400
*           /*********************************************************/ 13878500
*                                                                       13878600
*           DO;                     /* Linkage view              @L2A*/ 13878700
*             F2 = F2 + 4096;       /* View bits                 @L2A*/ 13878800
*             ITERATE VIEWLOOP;     /* Process next view         @L2A*/ 13878900
*           END;                    /* Linkage view              @L2A*/ 13879000
*         IF CVIEW = 'ERROR' THEN   /* Error view                @L3C*/ 13879100
*                                                                       13879200
*           /*********************************************************/ 13879300
*           /*                                                       */ 13879400
*           /* Error view                                            */ 13879500
*           /*                                                       */ 13879600
*           /*********************************************************/ 13879700
*                                                                       13879800
*           DO;                     /* Error view                @L2A*/ 13879900
*             F2 = F2 + 2048;       /* View bits                 @L2A*/ 13880000
*             ITERATE VIEWLOOP;     /* Process next view         @L2A*/ 13880100
*           END;                    /* Error view                @L2A*/ 13880200
*         IF CVIEW = 'HEXADECIMAL' | CVIEW = 'HEX' THEN /*       @L3C*/ 13880300
*                                                                       13880400
*           /*********************************************************/ 13880500
*           /*                                                       */ 13880600
*           /* Hexadecimal view                                      */ 13880700
*           /*                                                       */ 13880800
*           /*********************************************************/ 13880900
*                                                                       13881000
*           DO;                     /* Hexadecimal view          @L2A*/ 13881100
*             F2 = F2 + 1024;       /* View bits                 @L2A*/ 13881200
*             ITERATE VIEWLOOP;     /* Process next view         @L2A*/ 13881300
*           END;                    /* Hexadecimal view          @L2A*/ 13881400
*         IF CVIEW = 'DEFINED' THEN /* Defined view              @L3C*/ 13881500
*                                                                       13881600
*           /*********************************************************/ 13881700
*           /*                                                       */ 13881800
*           /* Defined view                                          */ 13881900
*           /*                                                       */ 13882000
*           /*********************************************************/ 13882100
*                                                                       13882200
*           DO;                     /* Defined view              @L2A*/ 13882300
*             F2 = F2 + 512;        /* View bits                 @L2A*/ 13882400
*             ITERATE VIEWLOOP;     /* Process next view         @L2A*/ 13882500
*           END;                    /* Defined view              @L2A*/ 13882600
*         IF CVIEW = 'RESERVED' THEN /* Reserved view            @L3C*/ 13882700
*                                                                       13882800
*           /*********************************************************/ 13882900
*           /*                                                       */ 13883000
*           /* Reserved view                                         */ 13883100
*           /*                                                       */ 13883200
*           /*********************************************************/ 13883300
*                                                                       13883400
*           DO;                     /* Reserved view             @L2A*/ 13883500
*             F2 = F2 + 256;        /* View bits                 @L2A*/ 13883600
*             ITERATE VIEWLOOP;     /* Process next view         @L2A*/ 13883700
*           END;                    /* Reserved view             @L2A*/ 13883800
*         IF CVIEW = 'STATIC ARRAY' THEN /* Static array view    @L3C*/ 13883900
*                                                                       13884000
*           /*********************************************************/ 13884100
*           /*                                                       */ 13884200
*           /* Static array view                                     */ 13884300
*           /*                                                       */ 13884400
*           /*********************************************************/ 13884500
*                                                                       13884600
*           DO;                     /* Static array view         @L2A*/ 13884700
*             F2 = F2 + 128;        /* View bits                 @L2A*/ 13884800
*             ITERATE VIEWLOOP;     /* Process next view         @L2A*/ 13884900
*           END;                    /* Static array view         @L2A*/ 13885000
*         IF CVIEW = 'DYNAMIC ARRAY' | CVIEW = 'FLAG DECODE' THEN /*    13885100
*                                                                @L3C*/ 13885200
*                                                                       13885300
*           /*********************************************************/ 13885400
*           /*                                                       */ 13885500
*           /* Dynamic array (alias flag decode) view                */ 13885600
*           /*                                                       */ 13885700
*           /*********************************************************/ 13885800
*                                                                       13885900
*           DO;                     /* Dynamic array view        @L2A*/ 13886000
*             F2 = F2 + 64;         /* View bits                 @L2A*/ 13886100
*             ITERATE VIEWLOOP;     /* Process next view         @L2A*/ 13886200
*           END;                    /* Dynamic array view        @L2A*/ 13886300
*         IF CVIEW = 'INPUT' THEN   /* Input field view          @L3C*/ 13886400
*                                                                       13886500
*           /*********************************************************/ 13886600
*           /*                                                       */ 13886700
*           /* Input field view                                      */ 13886800
*           /*                                                       */ 13886900
*           /*********************************************************/ 13887000
*                                                                       13887100
*           DO;                     /* Input field view          @L2A*/ 13887200
*             F2 = F2 + 32;         /* View bits                 @L2A*/ 13887300
*             ITERATE VIEWLOOP;     /* Process next view         @L2A*/ 13887400
*           END;                    /* Input field view          @L2A*/ 13887500
*         IF CVIEW = 'OUTPUT' THEN  /* Output field view         @L2A*/ 13887600
*                                                                       13887700
*           /*********************************************************/ 13887800
*           /*                                                       */ 13887900
*           /* Output field view                                     */ 13888000
*           /*                                                       */ 13888100
*           /*********************************************************/ 13888200
*                                                                       13888300
*           DO;                     /* Output field view         @L2A*/ 13888400
*             F2 = F2 + 16;         /* View bits                 @L2A*/ 13888500
*             ITERATE VIEWLOOP;     /* Process next view         @L2A*/ 13888600
*           END;                    /* Output field view         @L2A*/ 13888700
*         IF LENGTH(VIEWBITS) > 0 THEN /* Multiple view values   @L2A*/ 13888800
*           VIEWBITS = VIEWBITS || '+'; /* View bits             @L2A*/ 13888900
*         VIEWBITS = VIEWBITS || VIEW(F1); /* View bits          @L2A*/ 13889000
*       END VIEWLOOP;               /* Process view bits         @L2A*/ 13889100
*     IF F2 > 0 THEN                /* Symbolic view bits        @L2A*/ 13889200
*                                                                       13889300
*       /*************************************************************/ 13889400
*       /*                                                           */ 13889500
*       /* Symbolic view bits                                    @L2A*/ 13889600
*       /*                                                           */ 13889700
*       /*************************************************************/ 13889800
*                                                                       13889900
*       DO;                         /* Symbolic view bits        @L2A*/ 13890000
*         IF LENGTH(VIEWBITS) > 0 THEN /* Multiple view values   @L2A*/ 13890100
*           VIEWBITS = VIEWBITS || '+'; /* View bits             @L2A*/ 13890200
*         VIEWBITS = VIEWBITS || CHAR(F2); /* View bits          @L2A*/ 13890300
*       END;                        /* Symbolic view bits        @L2A*/ 13890400
*     VIEWBITS = '3 VIEW UNSIGNED BINARY(16) BOUNDARY(WORD,3) INITIAL(' 13890500
*         || VIEWBITS || '),/*Field view pattern*/'; /* View     @L2A*/ 13890600
*                                                                       13890700
*/* ================================================================ */ 13890800
*/* Produce Declaration                                              */ 13890900
*/* ================================================================ */ 13891000
*                                                                       13891100
*     IF FJ = 1 THEN                /* First pass                @P3A*/ 13891200
*       ANSWER('/*BLSQMFLD'||MACLIST||' '||MACKEYS||'*/') COLUMN(8);    13891300
*                                   /* Block comment             @L2A*/ 13891400
*     IF LENGTH(MACLIST(1)) > 0 THEN /* Name supplied            @L2A*/ 13891500
*       ANSWER('2 '||MACLIST(1)) COLUMN(8); /* Name              @L2A*/ 13891600
*     ELSE                          /* No name supplied          @L2A*/ 13891700
*       ANSWER('2 BLSQMFLD'||MACINDEX||CHAR(FJ)) COLUMN(8); /*   @P3C*/ 13891800
*     ANSWER(' BOUNDARY(WORD),/*BLSQMFLD #MD95172*/'); /*        @L3C*/ 13891900
*     ANSWER(                                                           13892000
*'3 BEGIN#BLSQMFLD CHARACTER(0) BOUNDARY(WORD),/*BLSQMFLD #MD95172*/')  13892100
*         COLUMN(9);                /*                           @L3C*/ 13892200
*     IF LENGTH(SHDR(1)) > 0 THEN   /* Subheader entry           @L2A*/ 13892300
*                                                                       13892400
*       /*************************************************************/ 13892500
*       /*                                                           */ 13892600
*       /* Subheader entry                                           */ 13892700
*       /*                                                           */ 13892800
*       /*************************************************************/ 13892900
*                                                                       13893000
*       DO;                         /* Subheader entry           @L2A*/ 13893100
*         ANSWER('3 MARKER#WORD BIT(32) BOUNDARY(WORD) INITIAL('||      13893200
*             '''FF000000''X),/*Start of subheader field*/') COLUMN(9); 13893300
*         ANSWER('3 SUBHEADER#POINTER POINTER(32) INITIAL(ADDR('||SHDR( 13893400
*             1)||')),/*->Sub-header string*/') COLUMN(9); /*    @L2A*/ 13893500
*         ANSWER(FLAGBITS) COLUMN(9); /* Flag bits               @L2A*/ 13893600
*         ANSWER(VIEWBITS) COLUMN(9); /* View bits               @L2A*/ 13893700
*         ANSWER(                                                       13893800
*'3 * BIT(32) BOUNDARY(WORD) INITIAL(''00000000''X),/*Reserved*/')      13893900
*             COLUMN(9);            /*                           @L2A*/ 13894000
*         GO TO EXIT;               /* Subfield declared         @L2A*/ 13894100
*       END;                        /* Subheader entry           @L2A*/ 13894200
*     IF LENGTH(DECODE) > 0 THEN    /* Decode entry              @L2A*/ 13894300
*                                                                       13894400
*       /*************************************************************/ 13894500
*       /*                                                           */ 13894600
*       /* Decode entry                                              */ 13894700
*       /*                                                           */ 13894800
*       /*************************************************************/ 13894900
*                                                                       13895000
*       DO;                         /* Decode entry              @L2A*/ 13895100
*         IF LENGTH(MODELNAME) > 0 THEN /* Model name supplied   @L2A*/ 13895200
*                                                                       13895300
*           /*********************************************************/ 13895400
*           /*                                                       */ 13895500
*           /* Reference model by name                               */ 13895600
*           /*                                                       */ 13895700
*           /*********************************************************/ 13895800
*                                                                       13895900
*           ANSWER('3 MODEL#NAME CHARACTER(8) INITIAL('''||NAME(FJ)||   13896000
*               '''),/*Model name*/') COLUMN(9); /*              @L2A*/ 13896100
*         ELSE                      /* Model address supplied        */ 13896200
*                                                                       13896300
*           /*********************************************************/ 13896400
*           /*                                                       */ 13896500
*           /* Reference model by address                            */ 13896600
*           /*                                                       */ 13896700
*           /*********************************************************/ 13896800
*                                                                       13896900
*           DO;                     /* Model address supplied    @L2A*/ 13897000
*             ANSWER('3 MARKER#WORD BIT(32) BOUNDARY(WORD) INITIAL('||  13897100
*                 '''FF000000''X),/*Start of decode field*/') COLUMN(9) 13897200
*                 ;                 /*                           @L2A*/ 13897300
*             ANSWER('3 MODEL#POINTER POINTER(32) INITIAL(ADDR('||NAME( 13897400
*                 FJ)||')),/*->Decoding model*/') COLUMN(9); /*  @P2C*/ 13897500
*           END;                    /* Model address supplied    @L2A*/ 13897600
*         GO TO FLAGBITS#ETAL;      /* Finish subfield           @P3C*/ 13897700
*       END;                        /* Decode entry              @L2A*/ 13897800
*     ANSWER('3 FIELD#LABEL CHARACTER(8) INITIAL('''||SFLDLBL||         13897900
*         '''),/*Field label*/') COLUMN(9); /*                   @L2A*/ 13898000
*FLAGBITS#ETAL:                     /* Finish subfield               */ 13898100
*     ANSWER(FLAGBITS) COLUMN(9);   /* Flag bits                 @P3C*/ 13898200
*     IF                            /* Scalar                        */ 13898300
*        NUMBER(ARRAY) < 1 |        /* ARRAY keyword omitted         */ 13898400
*        TRANSLATE(ARRAY(1)) = 'END' THEN /* Final descriptor in        13898500
*                                      array                     @L3C*/ 13898600
*                                                                       13898800
*       /*************************************************************/ 13899200
*       /*                                                           */ 13899600
*       /* Scalar                                                    */ 13900000
*       /*                                                           */ 13900400
*       /*************************************************************/ 13900800
*                                                                       13901200
*       DO;                         /* Scalar                    @L2A*/ 13901600
*         ANSWER(VIEWBITS) COLUMN(9); /* View bits               @L2A*/ 13902000
*         ANSWER('3 DATA#OFFSET SIGNED BINARY(15) INITIAL('||SFLDOFF||  13902400
*             '),/*Data offset*/') COLUMN(9); /*                 @L2A*/ 13902800
*         ANSWER('3 DATA#LENGTH UNSIGNED BINARY(15) INITIAL('||SFLDLEN  13903200
*             ||'),/*Data length*/') COLUMN(9); /*               @L2A*/ 13903600
*       END;                        /* Scalar                    @L2A*/ 13904000
*     ELSE                          /* Multi-dimensional array       */ 13904400
*       IF NUMBER(ARRAY) = 1 THEN   /* 1D-array                  @P3A*/ 13904800
*                                                                       13905200
*         /***********************************************************/ 13906500
*         /*                                                         */ 13954500
*         /* One-dimensional array                                   */ 14002500
*         /*                                                         */ 14050500
*         /***********************************************************/ 14098500
*                                                                       14146500
*         DO;                       /* 1D-array                  @P3A*/ 14169000
*           ANSWER(VIEWBITS) COLUMN(9); /* View bits             @P3P*/ 14191500
*           ANSWER(                                                     14214000
*'3 DESCRIPTOR#COUNT UNSIGNED BINARY(15) BOUNDARY(WORD) INITIAL('||     14236500
*               ELSQMFLDARRAY||'#COUNT),/*Data descriptor count*/')     14259000
*               COLUMN(9);          /*                           @P3A*/ 14281500
*           IF ARRAY(1) = '*' THEN  /* Default, caller specfies  @P3A*/ 14304000
*             ANSWER(                                                   14326500
*'3 ARRAY#DIMENSION UNSIGNED BINARY(15) BOUNDARY(WORD,3) '||            14349000
*                 'INITIAL(0),/*Dimension*/') COLUMN(9); /*      @P3A*/ 14371500
*           ELSE                    /* Dimension given               */ 14394000
*             ANSWER(                                                   14416500
*'3 ARRAY#DIMENSION UNSIGNED BINARY(15) BOUNDARY(WORD,3) INITIAL('||    14439000
*                 ARRAY(1)||'),/*Dimension*/') COLUMN(9); /*     @P3C*/ 14461500
*         END;                      /* 1D-array                  @P3A*/ 14484000
*       ELSE                        /* Multi-dimensional array       */ 14506500
*                                                                       14530500
*         /***********************************************************/ 14578500
*         /*                                                         */ 14626500
*         /* Multi-dimensional array                                 */ 14674500
*         /*                                                         */ 14722500
*         /***********************************************************/ 14770500
*                                                                       14818500
*         DO;                       /* Multi-dimensional array       */ 14868500
*           ANSWER('3 DUMMY#VIEW BIT(16) BOUNDARY(WORD,3) INITIAL('||   14918500
*               '''0000''X),/*Dummy field view pattern*/') COLUMN(9);   14968500
*                                   /*                           @L2A*/ 15018500
*           ANSWER(                                                     15068500
*'3 DESCRIPTOR#COUNT UNSIGNED BINARY(15) BOUNDARY(WORD) INITIAL('||     15118500
*               ELSQMFLDARRAY||'#COUNT),/*Data descriptor count*/')     15168500
*               COLUMN(9);          /*                           @L2A*/ 15218500
*           ANSWER(                                                     15268500
*'3 SUBSCRIPT#COUNT UNSIGNED BINARY(15) BOUNDARY(WORD,3) INITIAL('||    15318500
*               CHAR(NUMBER(ARRAY))||'),/*Dimension count*/') COLUMN(9) 15368500
*               ;                                                       15418500
*                                                                       15468500
*           /*********************************************************/ 15518500
*           /*                                                       */ 15568500
*           /* Multi-dimensional array - Control values              */ 15618500
*           /*                                                       */ 15668500
*           /*********************************************************/ 15718500
*                                                                       15768500
*           ANSWER('/*Multi-dimensional array - Control values*/'||     15818500
*               '3 MDARSETP BOUNDARY(WORD),/*Array setup model entry*/' 15868500
*               ||'4 * BIT(32) BOUNDARY(WORD) INITIAL('||               15918500
*               '''00000000''X),/*Reserved*/') COLUMN(9); /*     @L2A*/ 15968500
*           ANSWER('4 BEGIN#COLUMN UNSIGNED BINARY(8) INITIAL(') COLUMN 16018500
*               (10);               /*                           @P3C*/ 16068500
*           IF LENGTH(STRTCOL(1)) > 0 THEN /* Explicit column    @P3A*/ 16118500
*             ANSWER(STRTCOL(1));   /* Column                    @P3A*/ 16168500
*           ELSE                    /* Default column                */ 16218500
*             ANSWER('0');          /* Column                    @P3P*/ 16268500
*           ANSWER('),/*Begin column*/'); /*                     @P3A*/ 16318500
*           ANSWER('4 COLUMN#COUNT UNSIGNED BINARY(8) INITIAL(') COLUMN 16368500
*               (10);               /*                           @P3C*/ 16418500
*           IF LENGTH(COLNUM(1)) > 0 THEN /* Explicit count      @P3A*/ 16468500
*             ANSWER(COLNUM(1));    /* Column count              @P3A*/ 16518500
*           ELSE                    /* Default column count          */ 16568500
*             ANSWER('0');          /* Column count              @P3A*/ 16618500
*           ANSWER('),/*Column count*/'); /*                     @P3A*/ 16668500
*           ANSWER('4 COLUMN#SEPARATION UNSIGNED BINARY(8) INITIAL(')   16718500
*               COLUMN(10);         /*                           @P3C*/ 16768500
*           IF LENGTH(COLSEP(1)) > 0 THEN /* Explicit separation @P3A*/ 16818500
*             ANSWER(COLSEP(1));    /* Column separation         @P3A*/ 16868500
*           ELSE                    /* Default separation            */ 16918500
*             ANSWER('0');          /* Column separation         @P3P*/ 16968500
*           ANSWER('),/*Column separation*/'); /*                @P3C*/ 17018500
*           ANSWER('4 ITEM#SEPARATION UNSIGNED BINARY(8) INITIAL(')     17068500
*               COLUMN(10);         /*                           @P3C*/ 17118500
*           IF LENGTH(ITEMSEP(1)) > 0 THEN /* Explicit           @P3A*/ 17168500
*             ANSWER(ITEMSEP(1));   /* Item separation           @P3A*/ 17218500
*           ELSE                    /* Default separation            */ 17268500
*             ANSWER('0');          /* Item separation           @P3P*/ 17318500
*           ANSWER('),/*Item separation*/'); /*                  @P3A*/ 17368500
*           FLAGBITS = '000';       /* Flag bits                 @L2A*/ 17418500
*           IF LENGTH(NUMDEC) > 0 THEN /* Number in decimal      @L2A*/ 17468500
*             FLAGBITS = '100';     /* Flag bits                 @L2A*/ 17518500
*           IF LENGTH(NOCOLNM) > 0 THEN /* No column numbers     @L2A*/ 17568500
*             FLAGBITS = FLAGBITS(1:1) || '1' || FLAGBITS(3:3); /*      17618500
*                                      Set option flag bit       @L2A*/ 17668500
*           IF LENGTH(NOROWNM) > 0 THEN /* No row numbers        @L2A*/ 17718500
*             FLAGBITS = FLAGBITS(1:2) || '1'; /* Flag bits      @L2A*/ 17768500
*           ANSWER('4 ARRAY#BITS BIT(16) BOUNDARY(WORD) INITIAL('''||   17818500
*               FLAGBITS||'0000000000000''B),/*Array flag bits*/')      17868500
*               COLUMN(10);         /*                           @L2A*/ 17918500
*           ANSWER('4 '||VIEWBITS(2:LENGTH(VIEWBITS))) COLUMN(10); /*   17968500
*                                                                @L2A*/ 18018500
*           ANSWER('4 * BIT(32) BOUNDARY(WORD) INITIAL('||              18068500
*               '''00000000''X),/*Reserved*/') COLUMN(10); /*    @L2A*/ 18118500
*                                                                       18168500
*           /*********************************************************/ 18218500
*           /*                                                       */ 18268500
*           /* Multi-dimensional array - Array dimensions            */ 18318500
*           /*                                                       */ 18368500
*           /*********************************************************/ 18418500
*                                                                       18468500
*           ANSWER('/*Multi-dimensional array - Array dimensions*/'||   18518500
*               '3 MDARDIM('||CHAR(NUMBER(ARRAY))||                     18568500
*               ') BOUNDARY(WORD),/*Array dimension definition entry*/' 18618500
*               ||'4 * BIT(48) BOUNDARY(WORD) INITIAL(('||CHAR(NUMBER(  18668500
*               ARRAY))||') ''000000000000''X),/*Reserved*/') COLUMN(9) 18718500
*               ;                   /*                           @P3C*/ 18768500
*           ANSWER('4 SUBSCRIPT#BITS BIT(8) BOUNDARY(WORD,3) INITIAL(') 18818500
*               COLUMN(10);         /*                           @L2A*/ 18868500
*           DO F1 = 1 TO NUMBER(ARRAY); /* Process subscript flags      18918500
*                                                                @L2A*/ 18968500
*             IF F1 > 1 THEN        /* 2nd, ... subscript        @L2A*/ 19018500
*               ANSWER(',');        /* Punctuation               @L2A*/ 19068500
*             IF ARRAY(F1,1) = '*' THEN /* Dynamic lower bound   @L2A*/ 19118500
*               IF ARRAY(F1,2) = '*' THEN /* Dynamic upper bound @L2A*/ 19168500
*                 ANSWER('''C0''X'); /* Both bounds are dynamic  @L2A*/ 19218500
*               ELSE                /* Model gives upper bound       */ 19268500
*                 ANSWER('''80''X'); /* Dynamic lower bound      @L2A*/ 19318500
*             ELSE                  /* Model gives lower bound       */ 19368500
*               IF ARRAY(F1,2) = '*' THEN /* Dynamic upper bound @L2A*/ 19418500
*                 ANSWER('''40''X'); /* Dynamic upper bound      @L2A*/ 19468500
*               ELSE                /* Model gives upper bound       */ 19518500
*                 ANSWER('''00''X'); /* Model gives both bounds  @L2A*/ 19568500
*           END;                    /* Process subscript flags   @L2A*/ 19618500
*           ANSWER('),/*Flags*/');  /*                           @L2A*/ 19668500
*           ANSWER(                                                     19718500
*'4 SUBSCRIPT#ORDER UNSIGNED BINARY(8) BOUNDARY(WORD,4) INITIAL(')      36638500
*               COLUMN(10);         /*                           @L2A*/ 36684600
*           DO                      /* Process subscript order       */ 36730700
*                 F1 = 1 TO NUMBER(ARRAY); /*                    @L2A*/ 36776800
*             IF F1 > 1 THEN        /* 2nd, ... subscript        @L2A*/ 36822900
*               ANSWER(',');        /* Punctuation               @L2A*/ 36869000
*             IF LENGTH(ORDER(F1)) > 0 THEN /* Explicit order    @L2A*/ 36915100
*               ANSWER(ORDER(F1));  /* Processing order          @L2A*/ 36961200
*             ELSE                  /* Implicit order                */ 37007300
*               ANSWER(CHAR(F1));   /* Processing order          @L2A*/ 37053400
*           END;                    /* Process subscript order   @L2A*/ 37099500
*           ANSWER('),/*Subscipt order*/'); /*                   @L2A*/ 37145600
*           ANSWER(                                                     37191700
*'4 LOWER#BOUND UNSIGNED BINARY(32) BOUNDARY(WORD) INITIAL(') COLUMN(10 37238500
*               );                  /*                           @L2A*/ 37288500
*           DO F1 = 1 TO NUMBER(ARRAY); /* Process lower bounds  @L2A*/ 37338500
*             IF F1 > 1 THEN        /* 2nd, ... subscript        @L2A*/ 37388500
*               ANSWER(',');        /* Punctuation               @L2A*/ 37438500
*             IF ARRAY(F1,1) = '*' THEN /* Dynamic lower bound   @L2A*/ 37488500
*               ANSWER('0');        /* Dynamic lower bound       @L2A*/ 37538500
*             ELSE                  /* Model gives lower bound       */ 37588500
*               ANSWER(ARRAY(F1,1)); /* Model gives lower bound  @L2A*/ 37638500
*           END;                    /* Process lower bounds      @L2A*/ 37688500
*           ANSWER('),/*Lower bounds*/'); /*                     @L2A*/ 37738500
*           ANSWER(                                                     37788500
*'4 UPPER#BOUND UNSIGNED BINARY(32) BOUNDARY(WORD) INITIAL(') COLUMN(10 37838500
*               );                  /*                           @L2A*/ 37888500
*           DO F1 = 1 TO NUMBER(ARRAY); /* Process upper bounds  @L2A*/ 37938500
*             IF F1 > 1 THEN        /* 2nd, ... subscript        @L2A*/ 37988500
*               ANSWER(',');        /* Punctuation               @L2A*/ 38038500
*             IF ARRAY(F1,2) = '*' THEN /* Dynamic upper bound   @L2A*/ 38088500
*               ANSWER('0');        /* Implicit upper bound      @L2A*/ 38138500
*             ELSE                  /* Model gives upper bound       */ 38188500
*               ANSWER(ARRAY(F1,2)); /* Explicit upper bound     @L2A*/ 38238500
*           END;                    /* Process upper bounds      @L2A*/ 38288500
*           ANSWER('),/*Upper bounds*/'); /*                     @L2A*/ 38338500
*         END;                      /* Multi-dimensional array   @L2A*/ 38388500
*EXIT:                              /* Common exit path          @L2A*/ 38438500
*     ANSWER(                                                           38478500
*'3 END#BLSQMFLD CHARACTER(0) BOUNDARY(WORD),/*BLSQMFLD #MD95172*/')    38518500
*         COLUMN(9);                /*                           @L3C*/ 38558500
*   END;                            /* Process all names         @P3A*/ 38598500
*   %END BLSQMFLD;                  /* Define model header       @L2C*/ 38638500
