$XREF
GLOBAL PROCEDURE BCDTOVAL(R14);
BEGIN  COMMENT
          R1  POINTS TO THE BCD REPRESENTATION
          R2  INDICATES TYPE:
            1 = INTEGER
            2 = REAL
            3 = LONG REAL
            4 = COMPLEX
            5 = LONG COMPLEX

          RESULTING VALUE IS LEFT IN EITHER R0, F0, F01, F0 AND F2,
          OR F01 AND F23, DEPENDING ON TYPE.  A RETURN CODE IS LEFT
          IN R15:

            0 => SUCCESSFUL SCAN
            1 => INVALID CHARACTER IN INPUT STRING
            2 => MISSING "I" ON IMAGINARY PART
            3 => NONBLANK DELIMITER
            4 => NUMBER SCANNED IS NOT ASSIGNMENT COMPATIBLE
            5 => INTEGER TOO LARGE

          UPON EXIT, R1 IS POINTING AT THE DELIMITER.
        ;

      STM(R14,R12,B13(12)); R14 := R13;
   BEGIN
      SEGMENT BASE R13; ARRAY 18 INTEGER SAVEA; CLOSE BASE;
      B13(4) := R14; B14(8) := R13; COMMENT COMPLETE STANDARD LINKAGE;
   END;

   BEGIN
       FUNCTION REDUCE(6,#0600); COMMENT USE BCTR TO DECREMENT;
      GLOBAL DATA NUMEDTR BASE R14;
       ARRAY  7 LONG REAL POWER10 =
        (#41A0000000000000L,  #4264000000000000L,  #4427100000000000L,
         #475F5E1000000000L,  #4E2386F26FC10000L,  #5B4EE2D6D415B85BL,
         #76184F03E93FF9F5L);
       ARRAY 10 LONG REAL WORKAREA;
          LONG REAL REALPART SYN WORKAREA(0);
            ARRAY 2 INTEGER INTPART SYN REALPART;
       LONG REAL FDCONV = #4200000000000000L;
       ARRAY 256 CHARACTER BLANK = 256(" ");
      CLOSE BASE;
       PROCEDURE NEXTCHAR(R6);
       BEGIN  R5 := @B5(1);  IC(R0,B5);
       END;
       SEGMENT BASE R12;
             INTEGER SCALE; BYTE SIGN, EXPOSIGN, IMAGFLAG, TYPEFLAG, RC;
             INTEGER TYPE;  R5 := R1; MVI(0,RC);
             TYPE := R2; RESET(IMAGFLAG);  F01 := F01-F01;
             REALPART := F01;  R0 := R0 - R0; IC(R0,B5);
             WHILE R0 = " " DO NEXTCHAR;
 NUMBER:     RESET(SIGN);  MVI(1,TYPEFLAG);
             IF R0 = "+" THEN NEXTCHAR ELSE
             IF R0 = "-" THEN BEGIN  SET(SIGN);  NEXTCHAR;
                              END;
             IF R0 = "'" THEN F01 := 1L ELSE F01 := 0L;  R2 := R2-R2;
             WHILE R0 >= "0" DO
             BEGIN  R0 := R0 AND #F;  STC(R0,FDCONV(1));
                F01 := F01*POWER10 + FDCONV;  NEXTCHAR;
             END;
             IF R0 = "." THEN
             BEGIN  MVI(3,TYPEFLAG);  NEXTCHAR;
                WHILE R0 >= "0" DO
                BEGIN  R0 := R0 AND #F;  STC(R0,FDCONV(1));
                   F01 := F01*POWER10 + FDCONV;  REDUCE(R2);  NEXTCHAR;
                END;
             END;
             IF R0 = "'" THEN
             BEGIN  SCALE := R2;  R2 := 0;  MVI(3,TYPEFLAG);
                RESET(EXPOSIGN);  NEXTCHAR;
                IF R0 = "+" THEN NEXTCHAR ELSE
                IF R0 = "-" THEN BEGIN  SET(EXPOSIGN);  NEXTCHAR;
                                 END;
                IF R0 < "0" THEN
                BEGIN  MVI(1, RC); GOTO XIT;
                END;
                WHILE R0 >= "0" DO
                BEGIN  R0 := R0 AND #F;  R2 := R2*10S + R0;  NEXTCHAR;
                END;
                IF EXPOSIGN THEN R2 := NEG R2;  R2 := R2 + SCALE;
             END;
             IF R2 ~= 0 THEN
             BEGIN  IF < THEN SET(EXPOSIGN) ELSE RESET(EXPOSIGN);
                R2 := ABS R2;  F23 := 1L;  R4 := 0;
                WHILE R2 ~= 0 DO
                BEGIN  SRDL(R2,1);  LTR(R3,R3);
                   IF < THEN F23 := F23*POWER10(R4);  R4 := R4 + 8;
                END;
                IF EXPOSIGN THEN F01 := F01/F23 ELSE F01 := F01*F23;
             END;
             IF IMAGFLAG AND R0 ~= "I" THEN
             BEGIN  MVI(2, RC);  GOTO XIT;
             END ELSE
             IF R0 = "I" THEN
             BEGIN  MVI(5,TYPEFLAG);
                NEXTCHAR;  IF R0 = "L" THEN NEXTCHAR;
             END ELSE
             BEGIN
                IF R0 = "L" THEN BEGIN MVI(3,TYPEFLAG);  NEXTCHAR;
                                 END;
                IF R0 = "+" OR R0 = "-" THEN
                BEGIN  SET(IMAGFLAG);  IF SIGN THEN F01 := NEG F01;
                   REALPART := F01;   GOTO NUMBER;
                END;
             END;
             IF R0 ~= " " THEN
             BEGIN  MVI(3, RC); GOTO XIT;
             END;
             CLI(5,TYPEFLAG);  IF = THEN
             BEGIN  IF SIGN THEN F23 := NEG F01 ELSE F23 := F01;
                F01 := REALPART;
             END ELSE
             IF SIGN THEN F01 := NEG F01;
             R3 := R3-R3;  IC(R3,TYPEFLAG);  R4 := TYPE;
             R0 := R4 OR #1;  IF R0 < R3 THEN
             BEGIN  COMMENT  NOT ASSIGNMENT COMPATIBLE;
                MVI(4, RC);  GOTO XIT;
             END;
             IF R4 = 1 THEN
             BEGIN  F23 := ABS F01 ++ #4E00000000000000L;
                IF F23 > #4E0000007FFFFFFFL THEN
                BEGIN  MVI(5, RC); GOTO XIT;
                END;
                REALPART := F23;  R0 := INTPART(4);
                IF F01 < 0L THEN R0 := NEG R0;
             END ELSE
             IF R4 >= 4S AND R3 < 4S THEN F23 := 0L;
XIT:         R1 := R5;
             R15 := R15 - R15; IC(R15, RC);
   END;      R13 := B13(4); R14 := B13(12); LM(R2,R12,B13(28));
END.

GLOBAL PROCEDURE VALTOBCD(R14);
BEGIN COMMENT

          R1 POINTS TO AREA TO RECEIVE BCD REPRESENTATION
          R2 INDICATES TYPE:
            1 = INTEGER
            2 = REAL
            3 = LONG REAL
            4 = COMPLEX
            5 = LONG COMPLEX

          R3 CONTAINS THE FIELD LENGTH

          THE VALUE TO BE CONVERTED IS IN EITHER R0, F0, F01,
          F0 AND F2, OR F01 AND F23 DEPENDING UPON TYPE.

          RETURN CODE IN R15:

             0 => SUCCESSFUL CONVERSION
             1 => FIELD SIZE TOO SMALL
             2 => INVALID FIELDSIZE
             3 => INVALID TYPE
        ;

         STM(R14,R12,B13(12)); R14 := R13;
   BEGIN
        SEGMENT BASE R13;
           ARRAY 18 LOGICAL SAVEA;
           LONG REAL SAVEF01, SAVEF23;
        CLOSE BASE;
        SAVEF01 := F01;  SAVEF23 := F23;
        B13(4) := R14; B14(8) := R13; COMMENT COMPLETE STANDARD LINKAGE;

   BEGIN
      FUNCTION REDUCE(6,#0600); COMMENT USE BCTR TO DECREMENT;
      EXTERNAL DATA NUMEDTR BASE R14;
       ARRAY  7 LONG REAL POWER10 =
        (#41A0000000000000L,  #4264000000000000L,  #4427100000000000L,
         #475F5E1000000000L,  #4E2386F26FC10000L,  #5B4EE2D6D415B85BL,
         #76184F03E93FF9F5L);
       ARRAY 10 LONG REAL WORKAREA;
       LONG REAL FDCONV = #4200000000000000L;
       ARRAY 256 CHARACTER BLANK = 256(" ");
      CLOSE BASE;
      SEGMENT BASE R12;
       LONG REAL NUM, IMAG;
       ARRAY 23 BYTE STAR="*";
          ARRAY 22 BYTE BCD SYN STAR(1); COMMENT STRING ASSEMBLY AREA;
       ARRAY 12 BYTE INTPATTERN=(" ",9(#20),#21,#20);
       ARRAY 12 BYTE FULLPATTERN=(" ",#21,10(#20));
       BYTE SIGN, LONGFLAG;
       SHORT INTEGER RC;
$PAGE
 PROCEDURE AWXEDITR(R1);
    COMMENT  INPUT:  F0/F01 = VALUE,  R0 = OPTION FLAGS, R2 = FIELDSIZE.
             OUTPUT: R2 = STRING ADDRESS, R3 = LENGTH-1,

          RETURN CODE IN RC:

             1 => FIELD SIZE TOO SMALL
                ;
    BEGIN
       LONG REAL NUM;
         INTEGER NHI SYN NUM;
       ARRAY 2 LOGICAL SAVEREG;
         INTEGER W SYN SAVEREG(4);  COMMENT  FIELDSIZE;
       ARRAY 17 CHARACTER MANTPATTERN=(" ",#21,7(#20),#21,7(#20));
       ARRAY  4 CHARACTER EXPPATTERN=(" ",#21,2(#20));

       STM(R1,R2,SAVEREG);    MVC(21,BCD,BLANK);
       F23 := ABS F01;  IF F2 < #00100000R THEN F01 := F01-F01;
       IF ~LONGFLAG THEN F0 := F0*1.0;
       RESET(SIGN);  IF F01 ~= 0L THEN
       BEGIN  IF < THEN SET(SIGN);
          F01 := ABS F01;  NUM := F01;
          R0 := NHI SHRL 24 - 64S * 307S;  IF < THEN R0 := R0 + 255S;
          R0 := R0 SHRA 8 - 1S;   IF R0 < _75S THEN R0 := _75S;
          R2 := ABS R0;  R1 := R1-R1;   F23 := 1L;
          WHILE R2 ~= 0 DO
          BEGIN  SRDL(R2,1);  LTR(R3,R3);
             IF < THEN F23 := F23*POWER10(R1);  R1 := @B1(8);
          END;
          IF R0 < 0 THEN
          BEGIN  F01 := F01*F23;
             WHILE F01 < 1L DO
             BEGIN  F01 := F01*POWER10;  R0 := R0 - 1S;
             END;
          END ELSE
          BEGIN  F01 := F01/F23;
             WHILE F01 >= POWER10 DO
             BEGIN  F01 := F01/POWER10;  R0 := R0 + 1S;
             END;
          END; F01 := F01 * 1'15L;  R0 := R0 - 15S;
          IF LONGFLAG THEN F01 := F01 ++ #4E00000000000005L ELSE
          F01 := F01 ++ #4E0000001DCD6500L;
          COMMENT ROUND (WITH 5'8L) AND UNNORMALIZE;
          WHILE F01 >= 1'16L DO
          BEGIN  F01 := F01 / POWER10; R0 := R0 + 1S;
             F01 := F01 ++ #4E00000000000000L;
          END;
       END;
       IF F01 = 0L THEN R0 := NEG 15;
       MVC(16,BCD(5),MANTPATTERN);
       NUM := F01; MVI(0,NUM); LM(R2,R3,NUM);
       R3 := R3/100000000; CVD(R2,NUM); ED(7,BCD(14),NUM(3));
       CVD(R3,NUM); ED(9,BCD(5),NUM(3));
       R0 := R0 + 15S;   R2 := W - 3S;
       IF R2 < 3S THEN GOTO FFMT;
       IF R0 >= R2 OR R0 <= _5S THEN
       BEGIN  COMMENT USE E-FORMAT;
          IF SIGN THEN MVI("-",BCD(1)); MVC(0,BCD(2),BCD(7));
          MVI(".",BCD(3)); MVC(13,BCD(4),BCD(8));
          R2 := @BCD(R2); MVC(3,B2,EXPPATTERN);
          CVD(R0,NUM); ED(3,B2,NUM(6)); MVI("'",B2);
          IF R0 < 0 THEN MVI("-",B2(1)) ELSE MVI("+",B2(1));
          R2 := @BCD(1); GOTO XIT;
       END;
 FFMT: IF R0 >= 0 THEN
       BEGIN  COMMENT USE F-FORMAT;
          IF R2 < R0 THEN
          BEGIN  MVC(21,BCD,STAR); R2 := 1; RC := R2;
             R2 := @STAR; GOTO XIT;
          END;
          IF SIGN THEN MVI("-",BCD(5)); R2 := R0;
          EX(R2,MVC(0,BCD(6),BCD(7))); R2 := @BCD(R2+7);
          MVI(".",B2);  R2 := @BCD(5);
       END ELSE
       BEGIN  COMMENT USE F-FORMAT, LEADING ZEROS;
          R2 := R2 + 1S; IF R2 < R0 OR R0 <= _5S THEN
          BEGIN  MVC(21,BCD,STAR); R2 := 1; RC := R2;
             R2 := @STAR; GOTO XIT;
          END;
          R2 := R0; R2 := @BCD(R2+5);
          IF SIGN THEN MVI("-",B2(0)); OC(4,B2(1),"0.000");
       END;
XIT:
       R3 := W - 1S;  R1 := SAVEREG;
    END;

    PROCEDURE COMPLEX (R7);  BEGIN
          IMAG := F23;  REDUCE(R5);  R2 := R5;  R5 := R5 AND _2;
          IF R2 ~= R5 THEN R4 := @B4(1);  R5 := R5 SHRA 1;
          IF R5 <= 2S THEN COMMENT -- TOO SMALL --;
          BEGIN R2 := 2;  RC := R2;  GOTO XIT;
          END;  IF R5 > 17S THEN COMMENT -- TOO LARGE --;
          BEGIN R5 := R5 - 17S;  R4 := R4 + R5 + R5;  R5 := 17;
          END;  R2 := R5;  AWXEDITR;
          EX(R3,MVC(0,B4,B2));  F01 := IMAG;
          R4 := R4 + R5;  R2 := R5;  AWXEDITR;
          EX(R3,MVC(0,B4,B2));  CLI (" ",B4);
          IF = THEN MVI("+",B4);  R4 := R4 + R5;  MVI("I",B4);
    END;

    PROCEDURE FIXFUDGE (R6);  BEGIN
          IF R5 <= 2S THEN COMMENT -- TOO SMALL --;
          BEGIN R2 := 2;  RC := R2;  GOTO XIT;
          END;  IF R5 > 17S THEN COMMENT -- TOO LARGE --;
          BEGIN R5 := R5 - 17S;  R4 := R4 + R5;  R5 := 17;
          END;  R2 := R5;
    END;

       IF R3 <= 0 OR R3 > 132S THEN
       BEGIN R3 := 2; RC := R3; GOTO XIT;
       END;
       R5 := 0; RC := R5;
       R4 := R1; R5 := R3; R3 := R3 - 2S; MVI(" ",B4);
       IF R3 >= 0 THEN EX(R3,MVC(0,B4(1),B4)); COMMENT BLANK OUT FIELD;
       IF R2 > 0 AND R2 <= 5S THEN CASE R2 OF
       BEGIN
          BEGIN  COMMENT TYPE INTEGER;    R3 := R0;
             MVC(11,BCD,INTPATTERN); CVD(R3,NUM);
             R1 := @BCD(11); EDMK(11,BCD,NUM(2));
             R2 := @BCD(12) - R1; IF R3 < 0 THEN
             BEGIN  REDUCE(R1); MVI("-",B1); R2 := R2 + 1S;
             END;
             IF R2 > R5 THEN
             BEGIN  MVC(21,BCD,STAR); R2 := R5;
             END;
             R3 := @BCD(12) - R2;  R4 := R4 + R5 - R2;
             REDUCE(R2); EX(R2,MVC(0,B4,B3));
          END;
          BEGIN  COMMENT TYPE REAL;
             RESET(LONGFLAG); FIXFUDGE; AWXEDITR;
             EX(R3,MVC(0,B4,B2));
          END;
          BEGIN  COMMENT TYPE LONG REAL;
             SET(LONGFLAG);   FIXFUDGE; AWXEDITR;
             EX(R3,MVC(0,B4,B2));
          END;
          BEGIN  COMMENT TYPE COMPLEX;
             RESET(LONGFLAG);  COMPLEX;
          END;
          BEGIN  COMMENT TYPE LONG COMPLEX;
             SET(LONGFLAG);  COMPLEX;
          END;
       END ELSE
       BEGIN R3 := 3; RC := R3;
       END;
XIT:  F01 := SAVEF01;  F23 := SAVEF23;
      R15 := RC; R13 := B13(4); R14 := B13(12); LM(R0,R12,B13(20));
   END;
   END;
END.
