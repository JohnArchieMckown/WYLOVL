$XREF
$SET H
$TITLE        SIMPLE PRECEDENCE SYNTAX PROCESSOR
 BEGIN COMMENT SYNTAX-PROCESSOR;

    COMMENT OPTION CARDS RECOGNIZED BY THE SYNTAX PROCESSOR
          $SYMBOLS CAUSES THE SYMBOLS TO BE READ IN,
          $MATRIX CAUSES THE MATRIX TO BE PRINTED,
          $FUNCTION CAUSES THE FUNCTIONS TO BE COMPUTED,
          $CHECK CAUSES PROD TO BE CHECKED FOR IDENTICAL RIGHT PARTS,
          $LEFT CAUSES THE RELATIONS TO BE PRINTED FOR THE LEFT SYMBOLS,
          $RIGHT CAUSES THE RELATIONS TO BE PRINTED FOR THE RIGHT SYMB,
          $SYMPUNCH CAUSES THE SYMBOLS TO BE PUNCHED,
          $TABLE CAUSES PL360 TABLES TO BE PUNCHED,
          $SET AND $RESET USED TO FLAG IF-TESTED CODE,
          $IFT AND $IFF USED TO INITIATE IF-TESTING,
          $END USED TO TERMINATE IF-TESTING;
    ARRAY 64 BYTE CONDTAB;  BYTE CONDCK SYN CONDTAB(#2A);
    SHORT INTEGER LSS =1, GTR =2, EQL =3;
    SHORT INTEGER SIX =6;
    ARRAY 4 BYTE  RELATION =(" <>=");
    ARRAY 12 BYTE  ERRMESS =("****** LINE ");
    ARRAY 32 BYTE  MESS1 =("NO PRECEDENCE VIOLATION DETECTED");
    ARRAY 19 BYTE  SYMBMESS =("NONTERMINAL SYMBOLS");
    ARRAY 25 BYTE  PATTERN =("LINE ",#20,#21,#20,
       " SAME AS LINE ",#20,#21,#20);
    LOGICAL ONES =#FFFFFFFF;
    BYTE RETCODE=0, CHANGE=0, ERRFLAG=0;
    BYTE EOPROD=0,SYMPUNCHFLAG=0;
    BYTE MATRIXFLAG=0, TABLEFLAG=0, FUNCTIONFLAG=0;
    BYTE SYMBOLFLAG=0, READFLAG=0, EOF=0;
    BYTE RIGHTFLAG=0, LEFTFLAG=0, CHECKFLAG=0;
    SHORT INTEGER P,V;
    SHORT INTEGER M,MM,M2,MM2,MM32,M64,MM12,M12;
    SHORT INTEGER N,N2,N12,NN,N12P2;
    SHORT INTEGER MSTART=0, MCOUNT=51;
    INTEGER U;
    ARRAY  8  INTEGER FMASK=(#40202120,
       "                ",#40202120,#40404020,#21200000);
    LONG REAL LDC;
    INTEGER MASK3 SYN FMASK;
    ARRAY 6 BYTE MASK4 = (#40,#20,#20,#21,#20,#20);
    INTEGER R1SAVE,R2SAVE,R3SAVE,R4SAVE;
    ARRAY  8  BYTE MASK =(#80,#40,#20,#10,#08,#04,#02,#01);
    ARRAY  20  INTEGER CBUF;
    ARRAY 132 BYTE UNDEFMESS=(" UNDEFINED SYMBOL:",114(" "));
    ARRAY 132 BYTE BLANKS=132(" ");
    ARRAY 256 BYTE BUFFER=256(" ");
    ARRAY  80  BYTE PBUF SYN BUFFER;
    ARRAY  9  LOGICAL SAVE, PUNSAVE;
    ARRAY 256 SHORT INTEGER F, G;
    ARRAY 256 BYTE F1, G1;
    ARRAY  16  BYTE TRTABLE=("0123456789ABCDEF");
    SHORT INTEGER IPNMAX;
    ARRAY 500 BYTE IPN;
    ARRAY 3000 SHORT INTEGER PRTB;
   SEGMENT BASE  R11;
    ARRAY  3072  BYTE SYTB;
    INTEGER LL;
    ARRAY  256  SHORT INTEGER MTB;
    ARRAY 9068 INTEGER WORKSPACE;
       ARRAY 2048 LOGICAL L SYN WORKSPACE, R SYN MEM(R12);
       ARRAY 4097 LOGICAL H SYN MEM(R10);
       ARRAY 36000 BYTE PR SYN WORKSPACE;
       ARRAY 2048  BYTE PRTB1  SYN WORKSPACE;

$IFF H H
 PROCEDURE PUNCHIT SYN PUNCH;
$END H
$IFT H H
 PROCEDURE PUNCHIT (R14);
 BEGIN  PUNSAVE := R14;  STM(R4,R5,PUNSAVE(4));
    BEGIN  GLOBAL DATA EBACTAB BASE R5;
     |-- EBCDIC to ASCII translation table    --|
     ARRAY DATAFILL BYTE ETOA = |*- EBCDIC to ACSII -*|
       |* 00 *|   (#00, #01, #02, #03, #80, #09, #81, #7F,
       |* 08 *|    #82, #83, #84, #0B, #0C, #0D, #0E, #0F,
       |* 10 *|    #10, #11, #12, #13, #85, #86, #08, #87,
       |* 18 *|    #18, #19, #88, #89, #1C, #1D, #1E, #1F,
       |* 20 *|    #8A, #8B, #8C, #8D, #8E, #0A, #17, #1B,
       |* 28 *|    #8F, #90, #91, #92, #93, #05, #06, #07,
       |* 30 *|    #94, #95, #16, #96, #97, #98, #99, #04,
       |* 38 *|    #9A, #9B, #9C, #9D, #14, #15, #9E, #1A,
       |* 40 *|    #20, #A9, #A1, #A2, #A3, #A4, #A5, #A6,
       |* 48 *|    #AA, #A8, #5E, #2E, #3C, #28, #2B, #7C,
       |* 50 *|    #26, #D1, #D2, #D3, #D4, #D5, #D6, #D7,
       |* 58 *|    #D8, #D9, #21, #24, #2A, #29, #3B, #7E,
       |* 60 *|    #2D, #2F, #B1, #B2, #B3, #B4, #B5, #B6,
       |* 68 *|    #B8, #EE, #9F, #2C, #25, #5F, #3E, #3F,
       |* 70 *|    #EA, #CE, #E8, #CF, #E2, #E7, #F0, #E6,
       |* 78 *|    #E9, #60, #3A, #23, #40, #27, #3D, #22,
       |* 80 *|    #D0, #61, #62, #63, #64, #65, #66, #67,
       |* 88 *|    #68, #69, #E0, #AC, #BC, #CC, #CA, #CB,
       |* 90 *|    #DE, #6A, #6B, #6C, #6D, #6E, #6F, #70,
       |* 98 *|    #71, #72, #DF, #AD, #BD, #CD, #AB, #A0,
       |* A0 *|    #E5, #E3, #73, #74, #75, #76, #77, #78,
       |* A8 *|    #79, #7A, #AF, #BE, #BF, #5B, #A7, #B7,
       |* B0 *|    #C0, #C1, #C2, #C3, #C4, #C5, #C6, #C7,
       |* B8 *|    #C8, #C9, #BA, #BB, #DC, #5D, #ED, #FE,
       |* C0 *|    #7B, #41, #42, #43, #44, #45, #46, #47,
       |* C8 *|    #48, #49, #DA, #DB, #DD, #F9, #B0, #F1,
       |* D0 *|    #7D, #4A, #4B, #4C, #4D, #4E, #4F, #50,
       |* D8 *|    #51, #52, #F8, #B9, #FA, #FB, #F2, #F3,
       |* E0 *|    #5C, #E1, #53, #54, #55, #56, #57, #58,
       |* E8 *|    #59, #5A, #F4, #F5, #E4, #AE, #F7, #EF,
       |* F0 *|    #30, #31, #32, #33, #34, #35, #36, #37,
       |* F8 *|    #38, #39, #EB, #EC, #FC, #FD, #F6, #FF);
    CLOSE BASE;

    R4 := R0;  TR(79,C4,ETOA);  C4(79) := #0A;  PUNCH;
    END;  LM(R4,R5,PUNSAVE(4));  R14 := PUNSAVE;
 END;
$END H

 PROCEDURE ERROREXIT(R4);
    BEGIN  MVC(132,BUFFER,BLANKS);
       R0 := @BUFFER; WRITE; MVC(22,BUFFER,"INTERNAL TABLE OVERFLOW");
       WRITE;  GOTO EXIT;
    END;

 SEGMENT PROCEDURE  READINPUT(R9);
 BEGIN COMMENT INPUT AND CONSTRUCT PRODUCTION TABLES;
 PROCEDURE READCARD(R10);
    BEGIN COMMENT READ NEXT CARD IMAGE INTO CARD BUFFER;
       IF EOF THEN ERROREXIT;
 L:    R0 := @CBUF; READ; IF ~= THEN
       BEGIN  SET(EOF);  SET(EOPROD);  END ELSE
       BEGIN  CLI("$",CBUF); IF = THEN
          BEGIN CLC(7,"SYMPUNCH",CBUF(1)); IF = THEN
             BEGIN SET(SYMPUNCHFLAG); GOTO L;
             END; CLC(5,"SYMBOL",CBUF(1)); IF = THEN
             BEGIN SET(SYMBOLFLAG); GOTO L;
             END; CLC(5,"MATRIX",CBUF(1)); IF = THEN
             BEGIN SET(MATRIXFLAG); GOTO L;
             END; CLC(4,"CHECK",CBUF(1)); IF = THEN
             BEGIN SET(CHECKFLAG); GOTO L;
             END; CLC(4,"RIGHT",CBUF(1)); IF = THEN
             BEGIN SET(RIGHTFLAG); GOTO L;
             END; CLC(3,"LEFT",CBUF(1)); IF = THEN
             BEGIN SET(LEFTFLAG); GOTO L;
             END; CLC(6,"FUNCTION",CBUF(1)); IF = THEN
             BEGIN SET(FUNCTIONFLAG); GOTO L;
             END; CLC(4,"TABLE",CBUF(1)); IF = THEN
             BEGIN SET(TABLEFLAG); GOTO L;
             END; CLC(7,"CONTINUE",CBUF(1));  IF = THEN
             BEGIN SET(EOPROD); GOTO X;
             END; CLC(2,"END",CBUF(1));  IF = THEN GOTO L;
             IF CBUF(1) = "IFT" OR CBUF(1) = "IFF" THEN
             BEGIN  NI(#3F,CBUF(5)); R14 := R14-R14;
                IC(R14,CBUF(5)); IC(R14,CONDTAB(R14));
                STC(R14,CONDCK); CLI("F",CBUF(3));
                IF = THEN XI(#FF,CONDCK);
                IF CONDCK THEN GOTO L;
                NI(#3F,CBUF(7)); CONDCK(0/1) := CBUF(7);
            COND: R0 := @CBUF; READ; IF ~= THEN
                BEGIN  SET(EOF);  SET(EOPROD);  GOTO X;
                END; CLC(3,CBUF,"$END"); IF ~= THEN GOTO COND;
                NI(#3F,CBUF(5)); CLC(0,CBUF(5),CONDCK);
                IF ~= THEN GOTO COND;  GOTO L;
             END; IF CBUF(1) = "SET" OR CBUF(1) = "RES" THEN
             BEGIN R14 := R14-R14;  R0 := #FF;
                CLI("R",CBUF(1));  IF = THEN
                BEGIN IC(R14,CBUF(7));  R0 := R0-R0;
                END ELSE IC(R14,CBUF(5));
                R14 := R14 AND #3F;
                STC(R0,CONDTAB(R14)); GOTO L;
             END;
          END;
    X: END;
    END;

 PROCEDURE WRITEPRODUCTION(R10);
    BEGIN COMMENT R9 = PRODUCTION COUNT;
       R9 := R9 + 1; IF R9 > 499 THEN ERROREXIT;
       MVC(3,BUFFER(7),FMASK); MVC(114,BUFFER(11),BLANKS);
       CVD(R9,LDC); ED(3,BUFFER(7),LDC(6));
       CLC(11,CBUF,BLANKS); IF ~= THEN MVC(2,BUFFER(35),"::=");
       R7 := @CBUF(12); R8 := @BUFFER(39); MVC(11,BUFFER(22),CBUF);
       FOR R0 := 0 STEP 1 UNTIL 4 DO
       BEGIN CLC(11,B7,B8); IF = THEN GOTO B;
          MVC(11,B8,B7); R7 := R7 + 12; R8 := R8 + 11;
          CLI(" ",B8); WHILE = DO
          BEGIN R8 := R8 - 1; CLI(" ",B8);
          END; R8 := R8 + 3;
       END;
 B:    CLC(3,CBUF(72),"NULL");  IF = THEN R7 := 0 ELSE
       BEGIN  R7 := 1 + IPNMAX;  IPNMAX := R7;
          MVC(3,BUFFER(13),FMASK); CVD(R7,LDC); ED(3,BUFFER(13),LDC(6));
       END;
       STC(R7,IPN(R9));    R0 := @BUFFER;  WRITE;
    END;

 SAVE := R9; READCARD; TEST(SYMBOLFLAG); IF = THEN
 BEGIN COMMENT READ SYMBOLS AND PRODUCTIONS;
    R3 := @SYTB; R2 := 0;
    COMMENT READ NONTERMINAL SYMBOLS;
LN: R3 := R3+12; R2 := R2+1; IF R2 > 255 THEN ERROREXIT;
    MVC(11,B3,CBUF); READCARD;
    CLC(1,"$$",CBUF); IF ~= THEN GOTO LN;
    MM := R2; R2 := R2 SHLL 1; MM2 := R2; R2 := R2 SHLL 4; MM32 := R2;
    R2 := MM;
    COMMENT READ TERMINAL SYMBOLS;
LT: READCARD; CLC(1,"$$",CBUF);
    IF ~= THEN
    BEGIN R3 := R3+12; R2 := R2+1; IF R2 > 255 THEN ERROREXIT;
       MVC(11,B3,CBUF); GOTO LT;
    END ;
    M := R2; R2 := R2 SHLL 1; M2 := R2; R2 := R2 SHLL 5; M64 := R2;
    R2 := M2 * 6S; M12 := R2;
    COMMENT READ PRODUCTIONS;
    MVC(131,BUFFER,BLANKS);
    R9 := 0; R5 := 12;
LP: READCARD; TEST(EOPROD); IF ~= THEN
    BEGIN WRITEPRODUCTION; R3 := @CBUF;
       FOR R6 := 0 STEP 1 UNTIL 5 DO
       BEGIN R4 := @SYTB;
          FOR R1 := 0 STEP 2 UNTIL M2 DO
          BEGIN CLC(11,B3,B4); IF = THEN GOTO LF ELSE R4 := R4+12;
          END ;
          MVC(11,UNDEFMESS(20),B3); R0 := @UNDEFMESS;
          WRITE; OI(1,ERRFLAG);
       LF: PRTB(R5) := R1; R5 := R5+2; R3 := R3+12;
       END ;
       GOTO LP;
    END ;
    N := R9; R2 := R9 SHLL 1; N2 := R2; R2 := R2 * SIX; N12 := R2;
    R2 := R2 + 2; N12P2 := R2;
 END ELSE
 BEGIN COMMENT READ PRODUCTIONS AND CONSTRUCT SYMBOL TABLE;
    MVC(71,PR(72),BUFFER); MVC(15,BUFFER,BLANKS);
    MVC(71,BUFFER(16),PR(72));
    R9 := 0; R4 := @PR;
L1: WRITEPRODUCTION; R4 := R4 + 72; MVC(71,B4,CBUF);
    READCARD; TEST(EOPROD); IF ~= THEN GOTO L1;
    N := R9; R3 := R9 SHLL 1; N2 := R3; R3 := R3 * SIX;
    N12 := R3;  R2 := 2 + R3;  N12P2 := R2;
    R3 := R3 * SIX; R1 := @PR(R3); R2 := @PR(72); R3 := 0;
    FOR R2 := R2 STEP 72 UNTIL R1 DO
    BEGIN FOR R5 := 0 STEP 12 UNTIL R3 DO
       BEGIN R4 := @SYTB(R5); CLC(11,B2,B4); IF = THEN GOTO F;
       END;
       R3 := R3+12; R4 := @SYTB(R3); MVC(11,B4,B2);
       IF R3 > 3072 THEN ERROREXIT;
 F: END;
    MM12 := R3; R2 := 10+N12; N12 := R2; R2 := @PR(72);
    FOR R1 := 12 STEP 2 UNTIL N12 DO
    BEGIN FOR R5 := 0 STEP 12 UNTIL R3 DO
       BEGIN R4 := @SYTB(R5); CLC(11,B2,B4); IF = THEN GOTO F;
       END;
       R3 := R3+12; R5 := R3; R4 := @SYTB(R3); MVC(11,B4,B2);
       IF R3 > 3072 THEN ERROREXIT;
 F:    R4 := 0; R5 := R5/6;
       PRTB(R1) := R5; R2 := R2+12;
    END;
    M12 := R3;
    R0 := 0; R1 := MM12/12; MM := R1; R1 := R1 SHLL 1;
    MM2 := R1; R1 := R1 SHLL 4; MM32 := R1;
    R1 := M12/12; M := R1; R1 := R1 SHLL 1;
    M2 := R1; R1 := R1 SHLL 5; M64 := R1;
    MVI(0,PR); R1 := @PR; R2 := R1 + 36000;
    FOR R1 := R1 STEP 256 UNTIL R2 DO MVC(255,B1(1),B1);
 END;
    PAGE;
    FOR R1 := 12 STEP 12 UNTIL N12 DO
       BEGIN R2 := PRTB(R1); IF R2 = 0 THEN
          BEGIN R2 := R1-12; R3 := PRTB(R2); PRTB(R1) := R3;
          END ;
       END ;
    COMMENT PRINT THE SYMBOLTABLE (IN TWO PARTS) ;
    R4 := 1; R1 := @SYTB(12);
    MVC(131,BUFFER,BLANKS); MVC(18,BUFFER(8),SYMBMESS);
    R0 := @BUFFER; WRITE; MVC(18,BUFFER(8),BLANKS); WRITE;
L2: FOR R2 := 7 STEP 24 UNTIL 103 DO
    BEGIN IF R4 > MM THEN GOTO L3;
       CVD(R4,LDC); R3 := @BUFFER(R2); MVC(3,B3,FMASK);
       ED(3,B3,LDC(6)); MVC(11,B3(7),B1);
       R1 := R1 + 12; R4 := R4 + 1;
    END;
    WRITE; MVC(131,BUFFER,BLANKS); GOTO L2;

L3: WRITE; MVC(131,BUFFER,BLANKS); WRITE;
    MVC(15,BUFFER(8),SYMBMESS(3)); WRITE;
    MVC(15,BUFFER(8),BLANKS); WRITE;
L4: FOR R2 := 7 STEP 24 UNTIL 103 DO
    BEGIN IF R4 > M THEN GOTO L5;
       CVD(R4,LDC); R3 := @BUFFER(R2); MVC(3,B3,FMASK);
       ED(3,B3,LDC(6)); MVC(11,B3(7),B1);
       R1 := R1 + 12; R4 := R4 + 1;
    END;
    WRITE; MVC(131,BUFFER,BLANKS); GOTO L4;

L5: WRITE; R9 := SAVE;

 IF CHECKFLAG THEN
 BEGIN MVC(131,BUFFER,BLANKS); R0 := @BUFFER; WRITE;
    R1 := @PRTB; R6 := R1 + N12;
    FOR R2 := 12 + R1 STEP 12 UNTIL R6 DO
    BEGIN FOR R3 := 12 + R2 STEP 12 UNTIL R6 DO
       BEGIN CLC(9,B2(2),B3(2)); IF = THEN
          BEGIN IF CHECKFLAG THEN
             BEGIN MVC(31,BUFFER,"IDENTICAL RIGHT PART OCCURRENCES");
                WRITE; RESET(CHECKFLAG); MVC(31,BUFFER,BLANKS);
             END;
             R4 := 0; R5 := R2 - R1 / 12; CVD(R5,LDC);
             MVC(24,BUFFER(3),PATTERN); ED(3,BUFFER(7),LDC(6));
             R4 := 0; R5 := R3 - R1 / 12; CVD(R5,LDC);
             ED(3,BUFFER(24),LDC(6)); WRITE; GOTO L;
          END;
       END;
 L: END;
    IF CHECKFLAG THEN
    BEGIN MVC(23,BUFFER,"NO IDENTICAL RIGHT PARTS");
       R0 := @BUFFER; WRITE;
    END;
 END;

 IF SYMPUNCHFLAG THEN
 BEGIN MVC(79,CBUF,BLANKS); MVC(7,CBUF,"$SYMBOLS");
    R0 := @CBUF; PUNCHIT; R2 := @SYTB(12);
    FOR R1 := 2 STEP 2 UNTIL M2 DO
    BEGIN MVC(11,CBUF,B2); PUNCHIT; R2 := R2 + 12;
       IF R1 = MM2 OR R1 = M2 THEN
       BEGIN MVC(11,CBUF,"$$          "); PUNCHIT;
       END;
    END;
 END;

 END ;  COMMENT  END OF READINPUT;
COMMENT  * * * * * *  E X E C U T I O N * * * * *;

    R1 := 0;
LOOP:  RESET(CONDTAB);  MVC(62,CONDTAB(1),CONDTAB);
    IPNMAX := R1;    R12 := @L + 8192;
    FOR R2 := 0 STEP 4 UNTIL 36268 DO  WORKSPACE(R2) := R1;
    MVC(11,SYTB,BLANKS); READINPUT;
    TM(1,ERRFLAG); IF ON THEN GOTO EXIT;
    PAGE;

 BEGIN COMMENT BUILD TABLES OF LEFT- AND RIGHT OCCURRENCES;
     SEGMENT BASE  R10;
    ARRAY  256  SHORT INTEGER C1,C2,BL,BR,S0,SL,SR;

    R0 := 0;
    FOR R1 := 0 STEP 2 UNTIL M2 DO
    BEGIN C1(R1) := R0;  C2(R1) := R0;
    END;
    FOR R1 := 2 STEP 2 UNTIL N2 DO
    BEGIN R2 := R1 * SIX; R0 := PRTB(R2); S0(R1) := R0;
       R2 := R2+2; R0 := PRTB(R2); SL(R1) := R0;
       R2 := R2+8; R0 := PRTB(R2);
       WHILE R0 = 0 DO
       BEGIN R2 := R2-2; R0 := PRTB(R2);
       END ;
       SR(R1) := R0; R0 := 1; BL(R1) := R0; BR(R1) := R0;
       R2 := S0(R1); R0 := 1+C1(R2); C1(R2) := R0; C2(R2) := R0;
    END ;

    R0 := N; NN := R0;
L1: MVI(0,CHANGE);
    FOR R1 := 2 STEP 2 UNTIL N2 DO
    BEGIN R2 := BL(R1); IF R2 > 0 THEN
       BEGIN R2 := S0(R1); R3 := SL(R1);
          R2 := R2 SHLL 4;     COMMENT R2 = "A" ROW INDEX;
          R4 := R3; SRDL(R4,4); R4 := R4+R2;
          R6 := R6-R6; IC(R6,L(R4));
          R5 := R5 SHRL 29;
          R7 := R7-R7; IC(R7,MASK(R5)); R0 := R6 AND R7;
          IF  = THEN BEGIN R6 := R6 OR R7; STC(R6,L(R4));
                           MVI(1,CHANGE);
                     END ;
          IF R3 <= MM2 THEN
          BEGIN R5 := R3 SHLL 4; COMMENT R5 = "B" ROW INDEX;
             R6 := M SHRL 3 + R2;
             FOR R4 := R2 STEP 4 UNTIL R6 DO
             BEGIN R0 := L(R4) XOR ONES AND L(R5);
                IF ~= THEN
                BEGIN R0 := R0 OR L(R4); L(R4) := R0; MVI(1,CHANGE);
                END ;
                R5 := R5+4;
             END ;
          END ;
          R2 := R2 SHRL 4; R4 := C1(R3);
          IF R4 = 0 THEN
             BEGIN BL(R1) := R4; R0 := C1(R2)-1; C1(R2) := R0;
                R0 := NN-1; NN := R0;
             END ;
       END ;
    END ;
    CLI(1,CHANGE);
    IF = THEN
    BEGIN R0 := NN; IF R0 > 0 THEN GOTO L1;
    END ;

    R0 := N; NN := R0;
L2: MVI(0,CHANGE);
    FOR R1 := 2 STEP 2 UNTIL N2 DO
    BEGIN R2 := BR(R1); IF R2 > 0 THEN
       BEGIN R2 := S0(R1); R3 := SR(R1);
          R2 := R2 SHLL 4;     COMMENT R2 = "A" ROW INDEX;
          R4 := R3; SRDL(R4,4); R4 := R4+R2;
          R6 := R6-R6; IC(R6,R(R4));
          R5 := R5 SHRL 29;
          R7 := R7-R7; IC(R7,MASK(R5)); R0 := R6 AND R7;
          IF  = THEN BEGIN R6 := R6 OR R7; STC(R6,R(R4));
                           MVI(1,CHANGE);
                     END ;
          IF R3 <= MM2 THEN
          BEGIN R5 := R3 SHLL 4; COMMENT R5 = "B" ROW INDEX;
             R6 := M SHRL 3 + R2;
             FOR R4 := R2 STEP 4 UNTIL R6 DO
             BEGIN R0 := R(R4) XOR ONES AND R(R5);
                IF ~= THEN
                BEGIN R0 := R0 OR R(R4); R(R4) := R0; MVI(1,CHANGE);
                END ;
                R5 := R5+4;
             END ;
          END ;
          R2 := R2 SHRL 4; R4 := C2(R3);
          IF R4 = 0 THEN
             BEGIN BR(R1) := R4; R0 := C2(R2)-1; C2(R2) := R0;
                R0 := NN-1; NN := R0;
             END ;
       END ;
    END ;
    CLI(1,CHANGE);
    IF = THEN
    BEGIN R0 := NN; IF R0 > 0 THEN GOTO L2;
    END ;

 END ;  COMMENT  END OF LR OCCURRENCES;

R10 := R12 + 8192;

 BEGIN COMMENT BUILD PRECEDENCE MATRIX;
 PROCEDURE ENTER (R9);
    COMMENT ENTERS THE RELATION R0 AT COORDINATES R1,R2;
    BEGIN STM(R0,R5,SAVE);
       R1 := R1 SHLL 5; SRDL(R2,5);
       R2 := R2 SHLL 2 + R1;
       R3 := R3 SHRL 28 SHLL 1;
       R5 := H(R2); SLDL(R4,B3); R6 := R4; R4 := 0;
       SLDL(R4,2); COMMENT BITPAIR IS NOW IN R4;
       IF R4 ~= R0 THEN
       IF R4 = 0 THEN
       BEGIN R4 := R0; SRDL(R4,2); R4 := R6; SRDL(R4,B3); H(R2) := R5;
       END ELSE
       BEGIN COMMENT PRECEDENCE CONFLICT;
          MVC(131,BUFFER,BLANKS);
          MVC(11,BUFFER,ERRMESS); OI(2,ERRFLAG);
          R3 := R0; R0 := 0; R1 := R8/12;
          MVC(3,BUFFER(11),FMASK); CVD(R1,LDC);
          ED(3,BUFFER(11),LDC(6));
          R1 := SAVE(4)*SIX; R2 := @SYTB(R1); MVC(11,BUFFER(20),B2);
          R2 := @RELATION(R4); MVC(0,BUFFER(33),B2);
          R2 := @RELATION(R3); MVC(0,BUFFER(34),B2);
          R1 := SAVE(8)*SIX; R2 := @SYTB(R1); MVC(11,BUFFER(36),B2);
          R0 := @BUFFER; WRITE;
       END ;
       LM(R0,R5,SAVE);
 X: END;

    COMMENT BUILD PRECEDENCE MATRIX;
    R5 := 0;
    FOR R8 := 12 STEP 12 UNTIL N12 DO
    BEGIN R4 := 12+R8;
    L1:   R4 := R4-2; R6 := PRTB(R4); IF R6 = 0 THEN GOTO L1;
    L2:   R3 := R4-2; V := R3;
       IF R3 > R8 THEN
       BEGIN R1 := PRTB(R3); R2 := PRTB(R4); P := R1; COMMENT Q = R2;
          R0 := EQL; ENTER;
          IF R1 <= MM2 THEN
          BEGIN R3 := R1 SHLL 8; R0 := GTR;    COMMENT R3 = P ROW INDEX;
             FOR R1 := 2 STEP 2 UNTIL M2 DO
             BEGIN R6 := R1+R3; SRDL(R6,4); R7 := R7 SHRL 29;
                IC(R5,R(R6)); IC(R6,MASK(R7)); R6 := R6 AND R5;
                IF ~= THEN ENTER;
             END ;
             IF R2 <= MM2 THEN
             BEGIN R4 := R2 SHLL 8;            COMMENT R4 = Q ROW INDEX;
                FOR R2 := 2 STEP 2 UNTIL M2 DO
                BEGIN R6 := R2+R4; SRDL(R6,4); R7 := R7 SHRL 29;
                   R1 := P;
                   IC(R5,L(R6)); IC(R6,MASK(R7)); R6 := R6 AND R5;
                   IF ~= THEN
                   BEGIN R0 := LSS; ENTER; R0 := GTR;
                      FOR R1 := 2 STEP 2 UNTIL M2 DO
                      BEGIN R6 := R1+R3; SRDL(R6,4); R7:=R7 SHRL 29;
                         IC(R5,R(R6)); IC(R6,MASK(R7)); R6:=R6 AND R5;
                         IF ~= THEN ENTER;
                      END ;
                   END ;
                END ;
             END ;
          END ELSE
          IF R2 <= MM2 THEN
          BEGIN R4 := R2 SHLL 8; R0 := LSS;    COMMENT R4 = Q ROW INDEX;
             FOR R2 := 2 STEP 2 UNTIL M2 DO
             BEGIN R6 := R2+R4; SRDL(R6,4); R7 := R7 SHRL 29;
                IC(R5,L(R6)); IC(R6,MASK(R7)); R6 := R6 AND R5;
                IF ~= THEN ENTER;
             END ;
          END ;
          R4 := V; GOTO L2;
       END ;
    END ;
    TM(2,ERRFLAG); IF ON THEN GOTO EXIT;
    MVC(131,BUFFER,BLANKS); MVC(31,BUFFER,MESS1);
    R0 := @BUFFER; WRITE;
 END ;

 IF MATRIXFLAG THEN
 BEGIN COMMENT  PRINT PRECEDENCE MATRIX;

PROCEDURE HEADING (R9);
BEGIN  R4 := MSTART * 12S;  R4 := @SYTB(R4);  R6 := MCOUNT SHLL 1;
  R5 := 0;  R0 := @BUFFER;  MVC(131,BUFFER,BLANKS);  WRITE;
  FOR R1 := 0 STEP 1 UNTIL 11 DO
  BEGIN  R2 := R4 + R1;
    FOR R3 := 0 STEP 2 UNTIL R6  DO
    BEGIN  IC(R5,B2);  STC(R5,BUFFER(R3+16));  R2 := R2 + 12;
    END;
    WRITE;
  END;
  MVC(131,BUFFER,BLANKS);   WRITE;
END;
 PROCEDURE PRINTSECTION(R9);
    BEGIN R7 := MSTART SHRL 2 + M64;  R8 := MCOUNT SHLL 1;
       FOR R1 := MSTART SHRL 2 + 64 STEP 64 UNTIL R7 DO
       BEGIN R2 := R1 SHRL 6 * 12S;  R2 := @SYTB(R2);
          MVC(11,BUFFER(1),B2); R2 := 0;
          FOR R3 := R1 STEP 1 UNTIL R3 DO
          BEGIN IC(R5,H(R3)); SLDL(R4,24); R6 := 6 + R2;
             FOR R2 := R2 STEP 2 UNTIL R6 DO
             IF R2 <= R8 THEN
             BEGIN R4 := 0; SLDL(R4,2); IC(R4,RELATION(R4));
                STC(R4,BUFFER(R2+16));
             END ELSE GOTO L1;
          END;
 L1:      R0 := @BUFFER; WRITE;
       END;
    END;

 L: PAGE; R1 := M - MSTART; IF R1 < MCOUNT THEN MCOUNT := R1;
    HEADING; PRINTSECTION; HEADING;
    R1 := MSTART +  52; MSTART := R1; IF R1 < M THEN GOTO L;
 END;

 IF LEFTFLAG THEN
 BEGIN COMMENT WRITE OUT SYMBOL RELATIONS FROM LEFT SIDE;
    MVC(131,BUFFER,BLANKS); PAGE;
    MVC(10,BUFFER(3),"LEFT SYMBOL"); R0 := @BUFFER;
    MVC(14,BUFFER(66),"RIGHT RELATIONS");
    WRITE; MVC(131,BUFFER,BLANKS); WRITE;
    FOR R1 := 64 STEP 64 UNTIL M64 DO
    BEGIN R2 := R1 SHRL 6; CVD(R2,LDC);
       R2 := R2 * 12S; R2 := @SYTB(R2);
       MVC(3,BUFFER(_1),FMASK); MVC(11,BUFFER(4),B2);
       ED(3,BUFFER(_1),LDC(6)); R6 := 0; R9 := 19;
       FOR R2 := R1 STEP 4 UNTIL R2 DO
       BEGIN R5 := H(R2); R7 := 15 + R6;
          FOR R6 := R6 STEP 1 UNTIL R7 DO
          IF R6 > M THEN GOTO L1 ELSE
          BEGIN R4 := R4 - R4; SLDL(R4,2); IC(R4,RELATION(R4));
             IF R4 ~= " " THEN
             BEGIN IF R9 > 128 THEN
                BEGIN R0 := @BUFFER; WRITE;
                   MVC(131,BUFFER,BLANKS); R9 := 19;
                END; R3 := @BUFFER(R9); MVI("|",B3); STC(R4,B3(2));
                MVC(3,B3(3),FMASK); CVD(R6,LDC);
                ED(3,B3(3),LDC(6)); R8 := R6 * 12S;
                R8 := @SYTB(R8); MVC(11,B3(8),B8); R9 := R9 + 22;
             END;
          END;
       END;
L1:    R0 := @BUFFER; WRITE; MVC(131,BUFFER,BLANKS); WRITE;
    END;
 END;

 IF RIGHTFLAG THEN
 BEGIN COMMENT WRITE OUT SYMBOL RELATIONS FROM RIGHT SIDE;
    MVC(131,BUFFER,BLANKS); PAGE;
    MVC(11,BUFFER(113),"RIGHT SYMBOL"); R0 := @BUFFER;
    MVC(13,BUFFER(46),"LEFT RELATIONS");
    WRITE; MVC(131,BUFFER,BLANKS); WRITE;
    FOR R1 := 1 STEP 1 UNTIL M DO
    BEGIN CVD(R1,LDC); R2 := R1 * 12S; R2 := @SYTB(R2);
       MVC(3,BUFFER(110),FMASK); MVC(11,BUFFER(115),B2);
       ED(3,BUFFER(110),LDC(6)); R9 := 86;
       R2 := R1; SRDL(R2,4); R3 := R3 SHRL 27; R2 := R2 SHLL 2;
       R8 := M64 + R2; FOR R2 := R2 + 64 STEP 64 UNTIL R8 DO
       BEGIN R5 := H(R2); SLDL(R4,B3(2)); R4 := R4 AND 3;
          IC(R4,RELATION(R4)); IF R4 ~= " " THEN
          BEGIN IF R9 < _2 THEN
             BEGIN R0 := @BUFFER; WRITE;
                MVC(131,BUFFER,BLANKS); R9 := 86;
             END; R5 := @BUFFER(R9); MVI("|",B5(21)); STC(R4,B5(19));
             R4 := R2 SHRL 6; CVD(R4,LDC); R4 := R4 * 12S;
             R4 := @SYTB(R4); MVC(3,B5(1),FMASK);
             MVC(11,B5(6),B4); ED(3,B5(1),LDC(6)); R9 := R9 - 22;
          END;
       END;
       R0 := @BUFFER; WRITE; MVC(131,BUFFER,BLANKS); WRITE;
    END;
 END;

 IF FUNCTIONFLAG THEN
 BEGIN COMMENT FIND F AND G FUNCTIONS;
    ARRAY  640  INTEGER STACK SYN R;
    INTEGER REGISTER T SYN R0,I SYN R1,J SYN R2,
       FMIN SYN R4,GMIN SYN R4,K SYN R5,K1 SYN R6;

SEGMENT PROCEDURE FUNCTIONS(R3);
 BEGIN

 PROCEDURE GET(R8);
    BEGIN COMMENT R1 = I, R2 = J, AND R0 = T AT EXIT;
       STM(R1,R3,SAVE); R1 := R1 SHLL 5; SRDL(R2,5);
       R2 := R2 SHLL 2 + R1; R3 := R3 SHRL 27;
       R1 := H(R2); SLDL(R0,B3(2)); R0 := R0 AND 3;
       LM(R1,R3,SAVE);
    END;
 PROCEDURE THRU(R8);
    BEGIN COMMENT PRINT FUNCTION CONFLICT LIST;
       MVC(131,BUFFER,BLANKS);
 LOOP: R4 := R1 * SIX; R4 := @SYTB(R4); MVC(11,BUFFER(8),B4);
       R4 := R2 * SIX; R4 := @SYTB(R4); MVC(11,BUFFER(33),B4);
       GET; R4 := R0; IC(R4,RELATION(R4)); STC(R4,BUFFER(26));
       MVC(3,BUFFER(21),FMASK); MVC(3,BUFFER(28),FMASK);
       R1 := R1 SHRL 1; CVD(R1,LDC); ED(3,BUFFER(21),LDC(6));
       R2 := R2 SHRL 1; CVD(R2,LDC); ED(3,BUFFER(28),LDC(6));
       R0 := @BUFFER; WRITE; R12 := R12 - 16; LM(R1,R2,B12);
       IF R12 >= U THEN GOTO LOOP;  MVC(131,BUFFER,BLANKS);
       MVC(17,BUFFER(3),"FUNCTION CONFLICTS");
       RESET(FUNCTIONFLAG);  RESET(TABLEFLAG);
       R0 := @BUFFER;  WRITE;  GOTO EXIT;
    END;

 PROCEDURE  FIXUP(R3);
    BEGIN COMMENT FIXUP ROW IF R7 = 0 ELSE FIXUP COLUMN;
    STM(R1,R4,B12); R12 := R12 + 16; IF R7 = 0 THEN
    BEGIN R4 := G(J) + R0; F(I) := R4;
       IF K = K1 THEN
       BEGIN J := K; GET; IF T = LSS THEN
          BEGIN IF R4 >= G(J) THEN THRU;
          END ELSE IF T = EQL THEN
          BEGIN IF R4 ~= G(J) THEN THRU;
          END;
       END;
       FOR J := K1 STEP _2 UNTIL 2 DO
       BEGIN GET; IF T = LSS THEN
          BEGIN IF R4 >= G(J) THEN BEGIN R0 := 1; R7 := 1; FIXUP; END;
          END ELSE IF T = EQL THEN
          BEGIN IF R4 ~= G(J) THEN BEGIN R0 := 0; R7 := 1; FIXUP; END;
          END;
       END;
    END ELSE
    BEGIN R4 := F(I) + R0; G(J) := R4;
       IF K1 ~= K THEN
       BEGIN I := K; GET; IF T = GTR THEN
          BEGIN IF R4 >= F(I) THEN THRU;
          END ELSE IF T = EQL THEN
          BEGIN IF R4 ~= F(I) THEN THRU;
          END;
       END;
       FOR I := K STEP _2 UNTIL 2 DO
       BEGIN GET; IF T = GTR THEN
          BEGIN IF R4 >= F(I) THEN BEGIN R0 := 1; R7 := 0; FIXUP; END;
          END ELSE IF T = EQL THEN
          BEGIN IF R4 ~= F(I) THEN BEGIN R0 := 0; R7 := 0; FIXUP; END;
          END;
       END;
    END; R12 := R12 - 16; LM(R1,R4,B12);
    END;   COMMENT  END OF FIXUP;

    R3SAVE := R3;   R0 := @BLANKS; WRITE;
    K1 := 0; U := R12; PAGE;
    FOR K := 0 STEP 2 UNTIL 510 DO
    BEGIN  F(K) := K1;  G(K) := K1;
    END;
    FOR K := 2 STEP 2 UNTIL M2 DO
    BEGIN FMIN := 1; I := K;
       FOR J := 2 STEP 2 UNTIL K1 DO
       BEGIN GET; IF T = GTR THEN
          BEGIN IF FMIN <= G(J) THEN FMIN := 1 + G(J);
          END ELSE IF T = EQL THEN
          BEGIN IF FMIN < G(J) THEN FMIN := G(J);
          END;
       END;
       F(I) := FMIN;
       FOR J := K1 STEP _2 UNTIL 2 DO
       BEGIN GET; IF T = LSS THEN
          BEGIN IF FMIN >= G(J) THEN BEGIN R0 := 1; R7 := 1; FIXUP; END;
          END ELSE IF T = EQL THEN
          BEGIN IF FMIN > G(J) THEN BEGIN R0 := 0; R7 := 1; FIXUP; END;
          END;
       END;
       K1 := K1 + 2; GMIN := 1; J := K;
       FOR I := 2 STEP 2 UNTIL K DO
       BEGIN GET; IF T = LSS THEN
          BEGIN IF GMIN <= F(I) THEN GMIN := 1 + F(I);
          END ELSE IF T = EQL THEN
          BEGIN IF GMIN < F(I) THEN GMIN := F(I);
          END;
       END;
       G(J) := GMIN;
       FOR I := K STEP _2 UNTIL 2 DO
       BEGIN GET; IF T = GTR THEN
          BEGIN IF GMIN >= F(I) THEN BEGIN R0 := 1; R7 := 0; FIXUP; END;
          END ELSE IF T = EQL THEN
          BEGIN IF GMIN > F(I) THEN BEGIN R0 := 0; R7 := 0; FIXUP; END;
          END;
       END;
    END;
    R2 := @SYTB(12); MVC(131,BUFFER,BLANKS);
    MVC(19,BUFFER(7),"PRECEDENCE FUNCTIONS"); R0 := @BUFFER; WRITE;
    MVC(19,BUFFER(7),BLANKS); R0 := @BUFFER; WRITE;
       R2 := @SYTB(12);
    FOR R1 := 2 STEP 2 UNTIL M2 DO
    BEGIN MVC(29,BUFFER(7),FMASK); R0 := R1 SHRL 1; CVD(R0,LDC);
       ED(3,BUFFER(7),LDC(6)); R0 := F(R1); CVD(R0,LDC);
       ED(3,BUFFER(27),LDC(6)); R0 := G(R1); CVD(R0,LDC);
       ED(3,BUFFER(33),LDC(6)); MVC(11,BUFFER(13),B2);
       R0 := @BUFFER; WRITE; R2 := R2 + 12;
    END;
EXIT:  R3 := R3SAVE;
 END;

 FUNCTIONS;
 END;

 IF TABLEFLAG THEN
 BEGIN COMMENT NEW SYNTAX PUNCH CARD PROGRAM;
   SEGMENT BASE R12;
    FUNCTION EDM(5,#DF00);
    ARRAY  3  INTEGER SAVER9;
    INTEGER REGISTER NEXT SYN R8,IND SYN R7,
       CNT SYN R6,NUM SYN R5,POUT SYN R9,ADDBASE SYN R10;
    LONG REAL NUMWORK,NUMEDIT,CNTEDIT,
       PATTERN=#4020202020202120;
    INTEGER L, T, PINIT;
    ARRAY 6 BYTE NAME;
    ARRAY  3  SHORT INTEGER MOVECNT=(#D200,@MEM(POUT),@B1),
       MOVENUM=(#D200,@MEM(POUT),@B3);
    FUNCTION TR(5,#DC00);
    SHORT INTEGER B4 SYN MEM(R4);

    INTEGER R9SAVE;
    ARRAY 256 SHORT INTEGER RMAP;
    ARRAY 256 BYTE CMAP;
    ARRAY 4097 LOGICAL MATRIX SYN H;
    ARRAY 16388 BYTE MATRIX2;

 SEGMENT PROCEDURE OUTPUT(R11);
    COMMENT  OUTPUT NUM WITH A REPETITION COUNT OF CNT;
    BEGIN CVD(NUM,NUMWORK); MVC(7,NUMEDIT,PATTERN);
       R1 := @NUMEDIT(7); EDM(7,NUMEDIT,NUMWORK(4));
       R2 := @NUMEDIT( 7)- R1; R3 := R1;
       R1 := 2 + R2 * CNT - 5; IF R1 > R2 THEN
       BEGIN CVD(CNT,NUMWORK); MVC(7,CNTEDIT,PATTERN);
          R1 := @CNTEDIT(7); EDM(7,CNTEDIT,NUMWORK(4));
          R4 := @CNTEDIT(7) - R1; R0 := 5 + POUT + R2 + R4;
          IF R0 > 72 THEN
          BEGIN R0 := @PBUF; PUNCHIT;
             POUT := PINIT; R0 := 5 + POUT + R2 + R4;
             MVC(79,PBUF,BLANKS);
          END;
          POUT := @PBUF(POUT); EX(R4,MOVECNT);
          POUT := POUT + R4; MVI("(",MEM(POUT+1));
          POUT := POUT + 2; EX(R2,MOVENUM);
          POUT := POUT + R2; MVI(")",MEM(POUT+1));
          MVI(",",MEM(POUT+2)); POUT := R0;
       END ELSE
       FOR CNT := CNT STEP _1 UNTIL 1 DO
       BEGIN R1 := 2 + POUT + R2; IF R1 > 72 THEN
          BEGIN R0 := @PBUF; PUNCHIT;
             POUT := PINIT; R1 := 2 + POUT + R2;
             MVC(79,PBUF,BLANKS);
          END;
          POUT := @PBUF(POUT); EX(R2,MOVENUM);
          POUT := POUT + R2; MVI(",",MEM(POUT+1));
          POUT := R1;
       END;
    END;

 PROCEDURE LENGTH1(R9); COMMENT PUNCH BYTE TABLES;
    BEGIN BYTE NEXT SYN MEM(ADDBASE); INTEGER TEMP SYN SAVER9(12);
      NUM := NUM-1; TEMP := NUM; NUM := NUM+1;
       STM(R9,R11,SAVER9);  MVC(79,PBUF,BLANKS);  ADDBASE := R0;
       POUT := PINIT-3; R1 := @PBUF(POUT); MVC(4,B1,"array");
       POUT := POUT + 6;  CNT := 1; OUTPUT;
       R1 := @PBUF(POUT-1);  MVC(4,B1," byte");
       MVC(5,B1(6),NAME);  MVI("=",B1(13));
       R0 := @PBUF;  PUNCHIT;  MVC(79,PBUF,BLANKS);
       POUT := 1 + PINIT; R1 := @PBUF(POUT-1); MVI("(",B1);
       CNT := 1; NUM := 0; IC(NUM,NEXT);
       FOR IND := 1 STEP 1 UNTIL TEMP DO
       BEGIN R1 := 0; IC(R1,NEXT(IND));
          IF NUM = R1 THEN CNT := CNT + 1 ELSE
          BEGIN OUTPUT; CNT := 1; NUM := 0; IC(NUM,NEXT(IND));
          END;
       END;
       OUTPUT; R1 := @PBUF(POUT-1); MVI(")",B1);
       IF POUT = 72 THEN
       BEGIN R0 :=@PBUF; PUNCHIT; R1 := R0 + PINIT;
          MVC(79,PBUF,BLANKS);
       END ELSE R1 := R1 + 1;
       MVI(";",B1); R0 := @PBUF; PUNCHIT;
       MVC(79,PBUF,BLANKS); PUNCHIT;
       LM(R9,R11,SAVER9);
    END;
 PROCEDURE LENGTH2(R9); COMMENT PUNCH HALFWORD TABLES;
    BEGIN SHORT INTEGER NEXT SYN MEM(ADDBASE);
       STM(R9,R11,SAVER9);  MVC(79,PBUF,BLANKS);  ADDBASE := R0;
       POUT := PINIT-3; R1 := @PBUF(POUT); MVC(4,B1,"array");
       POUT := POUT + 6;  CNT := 1; NUM := CNT + M;  OUTPUT;
       R1 := @PBUF(POUT-1);  MVC(13,B1," short integer");
       MVC(5,B1(15),NAME);  MVI("=",B1(22));
       R0 := @PBUF;  PUNCHIT;  MVC(79,PBUF,BLANKS);
       POUT := 1 + PINIT; R1 := @PBUF(POUT-1); MVI("(",B1);
       CNT := 1; NUM := NEXT;
       FOR IND := 2 STEP 2 UNTIL M2 DO
       IF NUM = NEXT(IND) THEN CNT := CNT + 1 ELSE
       BEGIN OUTPUT; CNT := 1; NUM := NEXT(IND);
       END;
       OUTPUT; R1 := @PBUF(POUT-1); MVI(")",B1);
       IF POUT = 72 THEN
       BEGIN R0 := @PBUF; PUNCHIT; R1 := R0 + PINIT;
          MVC(79,PBUF,BLANKS);
       END ELSE R1 := R1 + 1;
       MVI(";",B1); R0 := @PBUF; PUNCHIT;
       MVC(79,PBUF,BLANKS); PUNCHIT;
       LM(R9,R11,SAVER9);
    END;


 PROCEDURE MATRIXMTBPRTB1(R9);
    BEGIN  R1 := 0; MTB(0) := R1;  R0 := 255; STC(R0,PRTB1(0));
       FOR R2 := 2 STEP 2 UNTIL M2 DO
       BEGIN R5 := 1; R6 := R5 + R1; MTB(R2) := R6;
          FOR R3 := 12 STEP 12 UNTIL N12 DO
          BEGIN R7 := PRTB(R3+2); IF R2 = R7 THEN
             BEGIN R1 := R1 + 1; R6 := R1; R8 := 10 + R3;
                FOR R4 := 2+R3 STEP 2 UNTIL R8 DO
                BEGIN R7 := PRTB(R4) SHRL 1; IF R7 ~= 0 THEN
                   BEGIN R1 := R1 + 1; STC(R7,PRTB1(R1));
                   END;
                END;
                R7 := R1 - R6 - 1; STC(R7,PRTB1(R6));
                R7 := PRTB(R3) SHRL 1;  STC(R7,PRTB1(R1+1));
                IC(R7,IPN(R5));  STC(R7,PRTB1(R1+2));  R1 := R1 + 2;
             END; R5 := R5 + 1;
          END; R1 := R1 + 1; STC(R0,PRTB1(R1));
       END; L := R1;
    END;

 PROCEDURE FUNCTIONMTBPRTB1(R9);
    BEGIN  R1 := 0; MTB(0) := R1;  R0 := 255; STC(R0,PRTB1(0));
       FOR R2 := 2 STEP 2 UNTIL M2 DO
       BEGIN R5 := 1; R6 := R5 + R1; MTB(R2) := R6;
          FOR R3 := 14 STEP 12 UNTIL N12P2 DO
          BEGIN  R7 := PRTB(R3); IF R2 = R7 THEN
             BEGIN R1 := R1 + 1; R6 := R1;
                FOR R4 := 8 + R3 STEP _2 UNTIL R3 DO
                BEGIN R7 := PRTB(R4) SHRL 1; IF R7~=0 THEN
                   BEGIN R1 := R1 + 1; STC(R7,PRTB1(R1));
                   END;
                END;
                R7 := R1 - R6 - 1;  STC(R7,PRTB1(R6));
                R1 := R1+1; R7 := PRTB(R3-2) SHRL 1; STC(R7,PRTB1(R1));
                R1 := R1 + 1; STC(R5,PRTB1(R1));
             END; R5 := R5 + 1;
          END; R1 := R1 + 1; STC(R0,PRTB1(R1));
       END; L := R1;
    END;

SEGMENT PROCEDURE BUILDMATRIX2(R9);
  BEGIN

 PROCEDURE   FETCH (R14);
  COMMENT FETCH   TAKES THE RELATION BETWEEN C(R1) AND C(R2) FROM
          THE MATRIX AND PUTS IT IN R4.   REGISTERS R1 - R5  ARE
          USED AND DESTROYED.  R1 AND R2 ARE CLEARED;
  BEGIN
    R1 := R1 SHLL 6;     SRDL(R2,4);
    R2 := R2 SHLL 2 + R1;   R3 := R3 SHRL 28 SHLL 1;
    R5 := MATRIX(R2);    SLDL(R4,B3);
    R4 := 0;    R1 := R4;   R2 := R4;
    SLDL(R4,2);   COMMENT  BITPAIR IS NOW IN R4;
  END;

  R9SAVE := R9;  MVI(0,CMAP(0));
  R8 := 1;  COMMENT COLUMN COUNT;
  FOR R6 := 1 STEP 1 UNTIL  M  DO
  BEGIN  R7 := R6-1;  T := R7;
    FOR R9 := 0 STEP 1 UNTIL T DO
    BEGIN
      FOR R7 := 1 STEP 1 UNTIL  M  DO
      BEGIN
        R1 := R7;  R2 := R6;  FETCH;  R0 := R4;  R1 := R7;  R2 := R9;
        FETCH;  IF R0 ~= R4 THEN GOTO L2;
      END;  COMMENT ELEMENT COMPARED;
      GOTO L3;
L2: END; COMMENT ROW COMPARED;
    R8 := R8+1;  COMMENT STEP COLUMN COUNT;
L3: STC(R9,CMAP(R6));
  END;
  MVC(131,BUFFER,BLANKS);  CVD(R8,NUMWORK);  MVC(7,BUFFER,PATTERN);
  ED(7,BUFFER,NUMWORK(4));  MVC(12,BUFFER(9),"BYTES PER ROW");
  R0 := @BUFFER;  WRITE;    R0 := 0;  RMAP(0) := R0;
  COMMENT  BUILD NEW MATRIX;
  R2 := 0; R8 := R8 - 1;  COMMENT NUMBERING STARTS FROM 0;
  FOR R1 := 0 STEP 1 UNTIL R8 DO STC(R0,MATRIX2(R1));
  FOR R6 := 2 STEP 2 UNTIL M2 DO
  BEGIN  R1 := R6 SHLL 5; R1 := @MATRIX(R1);  R3 := R1 - 64;
    FOR R7 := @MATRIX STEP 64 UNTIL R3 DO
    BEGIN  CLC(63,B1,B7);  IF = THEN GOTO L; END;
    COMMENT  NEW ROW;
    R8 := R8 + 1;  STC(R0,MATRIX2(R8));   RMAP(R6) := R8;
    FOR R9 := 1 STEP 1 UNTIL M DO
    BEGIN  IC(R2,CMAP(R9));
      IF R9 = R2 THEN
      BEGIN  R1 := R6 SHRL 1; FETCH; R8 := R8 + 1;  STC(R4,MATRIX2(R8));
      END;
    END;
    GOTO EXIT;
L:  R1 := @MATRIX;  R7 := R7 - R1 SHRL 5;  R7 := RMAP(R7);
    RMAP(R6) := R7;
EXIT:
  END;
  R7 := 0;  R8 := R8 + 1;
  MVC(131,BUFFER,BLANKS);  CVD(R8,NUMWORK);  MVC(7,BUFFER,PATTERN);
  ED(7,BUFFER,NUMWORK(4));  MVC(15,BUFFER(9),"BYTES IN MATRIX2");
  R0 := @BUFFER; WRITE;  R8 := R8 - 1; L := R8; R6 := 0;
  FOR R9 := 1 STEP 1 UNTIL  M  DO
  BEGIN  IC(R6,CMAP(R9));
    IF R9 = R6 THEN
    BEGIN  R7 := R7+1;  STC(R7,CMAP(R9));
    END ELSE
    BEGIN  IC(R6,CMAP(R6));  STC(R6,CMAP(R9));
    END;
  END;
  R9 := R9SAVE;
END ;

  R1 := M SHLL 1;  M2 := R1;
  IF FUNCTIONFLAG THEN
  BEGIN  COMMENT PRODUCE TABLES IN PL360 FORMAT;
    FOR R9 := 0 STEP 2 UNTIL M2 DO
    BEGIN R1 := R9 SHRL 1; R0 := F(R9); IF R0>255 THEN ERROREXIT;
      STC(R0,F1(R1));  R0 := G(R9); IF R0>255 THEN ERROREXIT;
      STC(R0,G1(R1));
    END;
    FUNCTIONMTBPRTB1;    R0 := 7; PINIT := R0;
    R0 := @F1; MVC(5,NAME,"F     "); NUM := 1+M; LENGTH1;
    R0 := @G1; MVC(5,NAME,"G     "); NUM := 1+M; LENGTH1;
    R0 := @MTB; MVC(5,NAME,"MTB   "); LENGTH2;
    R0 := @PRTB1; MVC(5,NAME,"PRTB  "); NUM := 1+L; LENGTH1;
  END ELSE
  BEGIN  COMMENT PRODUCE TABLES IN ALGOL PASS 2 FORMAT;
    R0 := IPNMAX;  IF R0 > 255 THEN ERROREXIT;
    MATRIXMTBPRTB1;      R0 := 3; PINIT := R0;
    R0 := @MTB; MVC(5,NAME,"MTB   "); LENGTH2;
    R0 := @PRTB1; MVC(5,NAME,"PRTB  "); LENGTH1;
    MVC(131,BUFFER,BLANKS); R0 := 1 + L;
    CVD(R0,NUMWORK); MVC(7,BUFFER,PATTERN);
    ED(7,BUFFER,NUMWORK(4)); MVC(12,BUFFER(9),"BYTES IN PRTB");
    R0 := @BUFFER; WRITE; BUILDMATRIX2;
    NUM := @B8(1);  R0 := @MATRIX2;  MVC(5,NAME,"MATRIX"); LENGTH1;
    R8 := M; L := R8;  R0 := @RMAP;  MVC(5,NAME,"RMAP  "); LENGTH2;
    R0 := @CMAP;  MVC(5,NAME,"CMAP  "); LENGTH1;
  END;
END;

EXIT:  RETCODE := RETCODE OR ERRFLAG;
 IF ~EOF THEN
 BEGIN  R1 := 49; MCOUNT := R1;  MVI(0,CHANGE); MVI(0,ERRFLAG);
    MVI(0,SYMPUNCHFLAG); MVI(0,MATRIXFLAG); MVI(0,TABLEFLAG);
    MVI(0,READFLAG); MVI(0,EOF);  MVI(0,RIGHTFLAG);
    MVI(0,LEFTFLAG); MVI(0,EOPROD);  R1 := 0; MSTART := R1;
    MVI(0,CHECKFLAG);  MVI(0,SYMBOLFLAG);  MVI(0,FUNCTIONFLAG);
    PAGE;  GOTO LOOP;
 END;
 BEGIN  EXTERNAL PROCEDURE SYSTERM (R14);  NULL;
    R1 := @@SYSTERM;  IF R1 ~= 0 THEN SYSTERM(R1);
 END;  R1--R1;  IC(R1,RETCODE);
 R14 := B13(4);  B14(16) := R1;
 END.
