         ICTL    1,71,18
         SPACE
***********************************************************************
*                  SYSTEM LINKAGE ROUTINES                            *
*                 PL360 COMPILER  TO  OS/360                          *
*                  STANFORD UNIVERSITY                                *
*                       MAY 1971                                      *
***********************************************************************
         MACRO
         IEFJFCBN
         DS    0F
INFMJFCB EQU   *
JFCBDSNM DS    CL44 -    DATA SET NAME
JFCBELNM DS    CL8 -     ELEMENT NAME OR GENERATION NUMBER OR TYPE
JFCBTSDM DS    B -       JOB MANAGEMENT/DATA MANAGEMENT INTERFACE
JFCNWRIT EQU   X'08' -   DO NOT WRITE BACK THE JFCB DURING OPEN
JFCBDSCB DS    CL3 -     TTR OF FORMAT 1 DSCB FOR DATA SET
JFCFCBID DS    CL4 -     FORMS CONTROL BUFFER IMAGE IDENTIFICATION
         DS    CL6 -     RESERVED
JFCBLTYP DS    B -       LABEL TYPE
JFCBUFOF DS    FL1 -     BUFFER OFFSET
JFCBFLSQ DS    H -       SPACER
JFCBVLSQ DS    H -       VOLUME SEQUENCE NUMBER
JFCBOPS1 DS    BL5 -     OPEN ROUTINE INTERNAL SWITCHES
JFCBFLG1 DS    B -       FLAG BYTE
JFCBFLG2 DS    B -       FLAG BYTE OF OPEN SWITCHES
JFCBOPS2 DS    B -       OPEN ROUTINE INTERNAL SWITCHES
JFCBCRDT DS    CL3 -     DATA SET CREATION DATE (YDD)
JFCBXPDT DS    CL3 -     DATA SET EXPIRATION DATE (YDD)
JFCBIND1 DS    B -       INDICATOR BYTE 1
JFCPDS   EQU   X'01' -   DATA SET IS MEMBER OF A PARTITION
JFCBIND2 DS    B -       INDICATOR BYTE 2
JFCBUFRQ DS    XL1 -     NUMBER OF BUFFERS REQUIRED
JFCBFTEK DS    B -       BUFFERING TECHNIQUE / FOR GAM THIS FIELD
JFCBUFL  DS    H -       BUFFER LENGTH
JFCEROPT DS    B -       ERROR OPTION SWITCH
JFCPRTSP DS    B -       NORMAL PRINTER SPACING
JFCDEN   DS    B -       TAPE DENSITY - MAGNETIC TAPES
JFCLIMCT DS    CL3 -     SEARCH LIMIT (BDAM)
JFCDSORG DS    BL2 -     DATA SET ORGANIZATION BEING USED
JFCRECFM DS    B -       RECORD FORMAT
JFCOPTCD DS    B -       OPTION CODES
JFCBLKSI DS    H -       MAXIMUM BLOCK SIZE
JFCLRECL DS    H -       LOGICAL RECORD LENGTH
JFCNCP   DS    XL1 -     NUMBER OF CHANNEL PROGRAMS
JFCPCI   DS    B -       PCI FLAG BYTE
JFCUCSID DS    CL4 -     NAME OF THE UCS IMAGE TO BE LOADED
JFCUCSOP DS    B -       OPERATION OF THE UCS IMAGE TO BE LOADED
JFCCPRI  DS    B -       PRIORITY BETWEEN SEND AND RECEIVE
JFCSOWA  DS    H -       LENGTH, IN BYTES, OF THE USER PROVIDED
JFCBNTCS DS    XL1 -     NUMBER OF OVERFLOW TRACKS
JFCBNVOL DS    XL1 -     NUMBER OF VOLUME SERIAL NUMBERS
JFCBVOLS DS    CL30 -    THE FIRST FIVE VOLUME SERIAL NUMBERS
JFCBEXTL DS    XL1 -     LENGTH OF BLOCK OF EXTRA VOLUME SERIAL
JFCBEXAD DS    CL3 -     RELATIVE TRACK ADDRESS (TTR) OF FIRST JFCB
JFCBPQTY DS    CL3 -     PRIMARY QUANTITY OF DIRECT ACCESS
JFCBCTRI DS    B -       SPACE PARAMETERS
JFCBSQTY DS    CL3 -     SECONDARY QUANTITY OF DIRECT ACCESS
JFCFLGS1 DS    B -       FLAG BYTE (ICB488)
JFCBDQTY DS    CL3 -     QUANTITY OF DIRECT ACCESS STORAGE REQUIRED
JFCBSPNM DS    AL3 -     MAIN STORAGE ADDRESS OF THE JFCB
JFCBABST DS    H -       RELATIVE ADDRESS OF FIRST TRACK
JFCBSBNM DS    AL3 -     MAIN STORAGE ADDRESS OF THE JFCB
JFCBDRLH DS    CL3 -     AVERAGE DATA BLOCK LENGTH
JFCBVLCT DS    XL1 -     VOLUME COUNT
JFCBSPTN DS    XL1 -     NUMBER OF TRACKS PER CYLINDER TO BE USED
         MEND
         MACRO
&EP      ENTER   &RST
         ENTRY   &EP
         USING   &EP,15
         AIF     ('&RST' EQ '').M
&EP      STM     12,7,SAVE             SAVE LINKAGE AND WORK REGISTERS
         AGO     .N
.M       ANOP
&EP      STM     12,2,SAVE             SAVE LINKAGE AND WORK REGISTERS
.N       L       12,=A($PLCOMP)        ESTABLISH STANDARD ADDRESSING
         DROP    15
         USING   $PLCOMP,12
         MEND
         SPACE
         MACRO
&LABEL   EXIT    &RST
         AIF     ('&RST' EQ '').M
&LABEL   LM      12,7,SAVE             RESTORE REGISTERS
         AGO     .N
.M       ANOP
&LABEL   LM      12,2,SAVE             RESTORE REGISTERS
.N       BR      14
         DROP    12
         MEND
         SPACE
         LCLC    &TYPE
&TYPE    SETC    'SLAC'
* THE ABOVE SYMBOL MAY BE SET TO:
* 'STANDARD' FOR NON-WYLBUR EDIT FORMAT SYSTEMS
* 'SLAC'     FOR SLAC EDIT FORMAT SYSTEMS
* 'ANYTHING' FOR CAMPUS EDIT FORMAT SYSTEMS
         SPACE
$PLCOMP  CSECT
LINEREC  EQU     133                   SYSOUT LINE LENGTH
LINESMAX EQU     60                    SYSOUT LINES/PAGE
COREMAX  EQU     1024*1024             MAXIMUM FREE STORAGE REQUEST
         AIF     ('&TYPE' NE 'SLAC').T1
COREMIN  EQU     64*1024               MINIMUM FREE STORAGE REQUEST
SYSFREE  EQU     36*1024               SYSTEM FREE STORAGE
         AGO     .T2
.T1      ANOP
COREMIN  EQU     40*1024               MINIMUM FREE STORAGE REQUEST
SYSFREE  EQU     16*1024               SYSTEM FREE STORAGE
.T2      ANOP
         SPACE   2
*   GLOBAL PROCEDURE SYSINIT(R14);
*        (R1)  = OS PARAMETER LIST POINTER
*        (R13) = SAVE AREA ADDRESS
*        (R14) = RETURN ADDRESS
*        COMPILATION ID ADDRESS => R1
*        START OF FREE STORAGE => R3
*        END OF FREE STORAGE   => R4
SYSINIT  ENTER
         MVI     LISTSW,X'FF'          SET DEFAULT OPTIONS -.
         MVI     LOADSW,X'FF'             'LIST,LOAD,NODECK'
         MVI     DECKSW,0
         L       1,0(,1)               RECOVER OS PARAMETER LIST ADDR
         LA      2,2(,1)               POINT R2 TO END OF LIST
         AH      2,0(,1)
         LA      1,2(,1)               SPACE PAST LENGTH FIELD
LOOP1    LR      3,1
LOOP2    CR      3,2                   TEST FOR END OF LIST -
         BE      PARM                     USE AS DELIMITER
         CLI     0(3),C','             TEST FOR DELIMITER
         BE      PARM
         LA      3,1(,3)               CONTINUE SEARCH
         B       LOOP2
PARM     MVI     SWITCH,X'FF'
         LA      4,6(,1)               TEST FOR PARAM OF LENGTH 6
         CR      4,3
         BNE     PARM1
         CLC     0(2,1),=C'NO'         TEST FOR NEGATION
         BNE     NEXT
         MVI     SWITCH,0              RESET SWITCH
         LA      1,2(,1)               STEP POINTER
PARM1    LA      4,4(,1)               TEST FOR PARAM OF LENGTH 4
         CR      4,3
         BNE     NEXT                  OTHERWISE, IGNORE
T1       CLC     0(4,1),=C'LIST'       DECODE PARAMETER
         BNE     T2                       AND SET SWITCH
         MVC     LISTSW(1),SWITCH
T2       CLC     0(4,1),=C'LOAD'
         BNE     T3
         MVC     LOADSW(1),SWITCH
T3       CLC     0(4,1),=C'DECK'
         BNE     NEXT
         MVC     DECKSW(1),SWITCH
NEXT     LA      1,1(,3)               STEP TO NEXT LIST ELEMENT
         CR      1,2                   EXIT IF LIST EXHAUSTED
         BL      LOOP1
         SPACE
         MVI     SWITCH,C' '           RESET SWITCH
         LA      1,DMGLIST             POINT TO INITIAL DATA MGMT LIST
S1       CLI     LISTSW,X'FF'          ADD APPROPRIATE ITEMS TO LIST
         BNE     S2
         L       0,LISTPARM
         BAL     2,ADDIO
S2       CLI     LOADSW,X'FF'
         BNE     S3
         L       0,LOADPARM
         BAL     2,ADDIO
S3       CLI     DECKSW,X'FF'
         BNE     S4
         L       0,DECKPARM
         BAL     2,ADDIO
S4       LA      2,SYSIN
         USING   DCBDS,2
         ST      2,INPUT
         MVI     EOF,0                 RESET READER SWITCHES
         MVC     EOF+1(11),EOF
         LA      1,DMGLIST
         OPEN    ,MF=(E,(1))           OPEN REQUIRED DATA SETS
         DROP    2
         SPACE
         GETMAIN VU,LA=ASKLIST,A=GOTLIST  OBTAIN ALL FREE STORAGE
         LM      3,4,GOTLIST
         AR      3,4
         S       3,=A(SYSFREE)
         ST      3,ASKLIST
         MVC     ASKLIST+4(4),=A(SYSFREE)
         FREEMAIN V,A=ASKLIST          RELEASE BLOCK FOR SYSTEM
         L       3,GOTLIST             ADJUST POINTERS
         S       4,=A(SYSFREE)
         ST      4,GOTLIST+4           SAVE FOR FREEMAIN
         AR      4,3
         MVI     COMPID,C' '           BLANK ID
         MVC     COMPID+1(15),COMPID
         TIME    DEC                   GET TIME AND DATE
         SRL     0,12                  UNPACK TIME
         ST      0,WORK
         OI      WORK+3,X'0F'          SET ZONE
         UNPK    COMPID+12(4),WORK(4)
         ST      1,WORK                UNPACK DATE
         UNPK    COMPID+16(5),WORK+1(3) GET YYDDD FOR IDR DATA
         CP      WORK+2(2),=P'59'
         BNH     S6
         TM      WORK+1,1
         BNZ     S5
         TM      WORK+1,X'12'
         BNM     S6
S5       AP      WORK+2(2),=P'1'
S6       LA      15,JAN
         LA      14,12
         ZAP     MONTH(4),=P'0'
S7       AP      MONTH(4),=P'100000'
         CP      WORK+2(2),0(2,15)
         BNH     S8
         SP      WORK+2(2),0(2,15)
         LA      15,2(,15)
         BCT     14,S7
S8       L       1,WORK
         LR      14,1
         N       1,XF1
         SRL     1,8
         O       1,MONTH
         N       14,XF2
         SLL     14,12
         OR      1,14
         ST      1,WORK
         UNPK    COMPID+2(7),WORK(4)
         MVC     COMPID(2),COMPID+2
         MVI     COMPID+2,C'/'
         MVC     COMPID+3(2),COMPID+4
         MVI     COMPID+5,C'/'
         MVI     COMPID+8,C' '
         MVI     COMPID+9,C'@'
         MVC     COMPID+11(2),COMPID+12
         MVI     COMPID+13,C':'
         SPIE    PCEXIT,(12)           TRAP FLOATING POINT OVERFLOW
         ST      1,PICA                SAVE OLD PICA ADDRESS
         LA      1,COMPID
         LM      12,0,SAVE
         LA      15,255(0)             SPECIFY O/S SYSTEM
         BR      14
         SPACE
ADDIO    NI      0(1),X'7F'            CLEAR LIST END BIT
         LA      1,4(,1)               INCREMENT LIST LENGTH
         ST      0,0(,1)               ADD ELEMENT (END BIT ON)
         BR      2
         DROP    12
         SPACE   2
*   GLOBAL PROCEDURE SYSTERM(R14);
*        (R13) = SAVE AREA ADDRESS
*        (R14) = RETURN ADDRESS
SYSTERM  ENTER
         FREEMAIN V,A=GOTLIST          RELEASE FREE STORAGE AREA
         L       1,PICA                GET OLD PICA ADDRESS
         SPIE    MF=(E,(1))            RESTORE PREVIOUS PICA
         LA      1,DMGLIST
         CLOSE   ,MF=(E,(1))           CLOSE DATA SETS USED
         LA      2,DMGLIST             POINT AT DCB ADDRESSES
TL1      L       1,0(,2)               GET A DCB ADDRESS
         TM      23(1),1               ARE THERE BUFFERS?
         BO      TL2                   JUMP IF NONE EXIST
         FREEPOOL (1)                  RELEASE THE BUFFERS
TL2      TM      0(2),X'80'            IS THIS THE LAST ONE?
         BO      TL3                   JUMP IF SO
         LA      2,4(,2)               POINT TO NEXT ONE
         B       TL1                   AND GO LOOP
TL3      SR      15,15
         IC      15,LOADSW
         LM      0,2,SAVE+16
         LM      12,14,SAVE
         BR      14
         DROP    12
         SPACE   2
*   GLOBAL PROCEDURE COPY(R14);
*        (R0)  = NAME ADDRESS
*        (R13) = SAVE AREA ADDRESS
*        (R14) = RETURN ADDRESS
COPY     ENTER
         CLI     SWITCH,C' '
         BNE     COPOUTX
         MVC     NEWIN(96),UNIT1
         LA      2,NEWIN
         USING   DCBDS,2
         MVI     EOF,0
         MVC     EOF+1(11),EOF
         ST      2,INPUT
         MVI     SWITCH,C':'
         LR      1,0
         SPACE
*        SCAN FOR A MEMBER NAME, IF ANY.
         SPACE
         MVI     DD,C' '               BLANK THE DDNAME
         MVC     DD+1(15),DD           AND MEMBER NAME FIELDS.
         LA      14,DD                 POINT AT DDNAME.
         BAL     15,SCAN               GO SCAN THE DDNAME.
         CLI     0(1),C'('             THIS IS WHAT TO LOOK FOR.
         SPACE
         LA      14,MEM                POINT AT THE MEMBER NAME.
         LA      1,1(,1)               BUMP PAST LEFT PAREN.
         BAL     15,SCAN               GO SCAN THE MEMBER.
         CLI     0(1),C')'             HERE IS WHAT TO LOOK FOR.
         SPACE
*        COME HERE WITH DDNAME AND MEMBER NAME FOUND.
         SPACE
         MVC     DDNAME(8,2),DD        MOVE IN THE DDNAME.
         RDJFCB  ((2))                 READ THE JFCB.
         MVC     JFCBELNM(8),MEM       PLUG THE MEMBER NAME.
         OI      JFCBIND1,JFCPDS       INDICATE PDS MEMBER.
         OI      JFCBTSDM,JFCNWRIT     DON'T WRITE JFCB BACK.
         OPEN    ((2),(INPUT)),TYPE=J  OPEN THE DATA SET.
         B       COPOUT                EXIT STAGE RIGHT.
         SPACE
*        THE LITTLE SCAN ROUTINE
         SPACE
SCAN     LA      0,8                   NUMBER OF CHARS IN NAME.
         SPACE
SCANLOOP EX      0,0(,15)              EXECUTE SUBJECT INSTRUCTION.
         BE      4(,15)                RETURN IF SUBJECT FOUND.
         CLI     0(1),C' '             CHECK BLANK TERMINATION
         BE      SCANBLNK              ASSUME DD ONLY ON BLANK
         MVC     0(1,14),0(1)          MOVE ONE CHARACTER.
         LA      14,1(,14)             BUMP OUTPUT REG BY 1.
         LA      1,1(,1)               BUMP INPUT REG BY 1.
         BCT     0,SCANLOOP            PUSH ON TO NEXT CHAR.
         SPACE
*        COME HERE IF WE SCANNED EIGHT CHARACTERS.
         SPACE
         EX      0,0(,15)              DID WE HIT THE END?
         BE      4(,15)                RETURN NORMALLY IF SO.
         SPACE
*        HERE IF NO MEMBER FOUND FOR VANILLA OS OPEN.
         SPACE
SCANBLNK MVC     DDNAME(8,2),DD        MOVE IN DDNAME.
         OPEN    ((2),(INPUT))
COPOUT   TM      OFLGS(2),X'10'
         BO      COPOUTX
         LA      1,SYSIN
         ST      1,INPUT
         MVI     SWITCH,C' '
         DROP    2
COPOUTX  EXIT
         SPACE   2
*   GLOBAL PROCEDURE READ(R14);
*        (R0)  = BUFFER ADDRESS
*        (R13) = SAVE AREA ADDRESS
*        (R14) = RETURN ADDRESS
         AIF     ('&TYPE' NE 'STANDARD').T3
READ     ENTER
         AGO     .T4
.T3      ANOP
READ     ENTER   *
.T4      ANOP
         L       2,INPUT
         USING   DCBDS,2
         AIF     ('&TYPE' NE 'STANDARD').T5
READA    DS      0H
         AGO     .T6
.T5      ANOP
READA    L       3,NXTLINE
         C       3,ENDLINE
         BL      LOC3
.T6      ANOP
READ0    GET     (2)                   GET NEXT CARD
         CLI     REREAD,X'FF'          TEST FOR CONCATENATION
         BNE     READ1                 NO - READ SUCCESSFUL
         MVI     REREAD,0              RESET FLAG
         B       READ0                 AND REISSUE GET
         AIF     ('&TYPE' NE 'STANDARD').T7
READ1    DS      0H
         AGO     .T10
.T7      ANOP
READ1    LR      3,1
         AH      1,LRECL(,2)
         ST      3,NXTLINE
         ST      1,ENDLINE
         CLI     CARD,X'FF'
         BE      CARDIN
         MVC     WORK(4),0(3)
         TM      RECFM(2),X'C0'
         BO      LOC2         JUMP IF RECFM=U
* ASSUME FIXED FORMAT IMAGES
         MVI     CARD,X'FF'
         B       CARDIN
LOC2     LR      1,3
         AH      1,WORK
         ST      1,ENDLINE
         LA      3,2(,3)
LOC3     CLI     CARD,X'FF'
         BE      CARDIN
         MVI     IMAGE,C' '
         MVC     IMAGE+1(235),IMAGE
         MVC     WORK(4),0(3)
         AIF     ('&TYPE' NE 'SLAC').T8
         L       1,WORK
         AGO     .T9
.T8      ANOP
         LA      1,1000
         MH      1,WORK
         AH      1,WORK+2
.T9      ANOP
         CVD     1,CONWORK
         MVC     IMAGE+236,=X'202021204B202020'
         ED      IMAGE+235(9),CONWORK+4
         LA      5,IMAGE+243
LOC4     CLI     0(5),C'0'
         BNE     LOC5
         MVI     0(5),C' '
         BCT     5,LOC4
LOC5     SR      5,5
         IC      5,4(,3)
         SR      1,1
         LA      3,5(,3)
         LA      6,IMAGE
         LA      7,236(,6)
         MVC     72(8,6),236(6)
LOC6     LTR     5,5
         BNH     LOC8
         IC      1,0(,3)
         BCTR    5,0
         LA      3,1(,3)
         LA      4,15
         NR      4,1
         SRL     1,4
         LA      6,0(1,6)
         LTR     4,4
         BNH     LOC7
         SR      5,4
         BCTR    4,0
         EX      4,MOVCD
         LA      6,1(4,6)
         LA      3,1(4,3)
LOC7     CR      6,7
         BNH     LOC6
         CLI     SWITCH,C':'
         BE      ENDCOPY
         B       ENDRDR
LOC8     LA      1,IMAGE
         B       BOTH
MOVCD    MVC     0(0,6),0(3)
CARDIN   LR      1,3
         LA      3,80(,3)
BOTH     ST      3,NXTLINE
.T10     ANOP
         L       15,SAVE+16
         MVC     0(80,15),0(1)
         CLI     79(15),C' '           CHECK FOR TRAILING BLANK
         BNE     READX                 JUMP IF NOT BLANK
         MVC     79(1,15),SWITCH       ELSE REPLACE BY SWITCH
READX    CLI     EOF,0                 SET CONDITION CODE
         AIF     ('&TYPE' NE 'STANDARD').T11
         EXIT
         AGO     .T12
.T11     ANOP
         EXIT    *
.T12     ANOP
         SPACE
*                  EOD EXIT ROUTINE                                   *
         USING   $PLCOMP,12
ENDRDR   MVI     EOF,X'FF'             SYSIN END OF DS EXIT
         B       READX
         SPACE
*  COPY PROCESS END-OF-FILE
ENDCOPY  L       2,INPUT
         CLOSE   ((2))
         FREEPOOL (2)
         LA      2,SYSIN
         ST      2,INPUT
         MVI     SWITCH,C' '
         B       READA
         SPACE
*                  DCB EXIT ROUTINE                                   *
         SPACE
         DS      0F                    ALIGN ON FULLWORD BDY
ADCBEXIT DC      X'05',AL3(DCBEXIT)    DCB EXIT CODE AND ADDRESS
         DC      X'87',AL3(INFMJFCB)   JFCB POINTER.
         USING   DCBEXIT,15
DCBEXIT  OI      SYSIN+OFLGS,X'08'     SET UNLIKE ATTRIBUTES BIT
         CLI     RDRSTAT,0             TEST FOR PREVIOUS ENTRY
         BNE     SETRETRY              YES - DATA SETS CONCATENATED
         MVI     RDRSTAT,X'FF'         NO - INDICATE ENTRY AND
         BR      14
SETRETRY MVI     REREAD,X'FF'          INDICATE GET MUST BE REISSUED
         MVI     CARD,0
         BR      14
         DROP    15
         DROP    2
         SPACE
*                  PROGRAM CHECK EXIT STUFF
         SPACE
PICA     DS      A                     SAVE AREA FOR PICA ADDRESS
         SPACE
PCEXIT   MVI     16(1),X'00'           FUDGE THINGS SO THAT R15 WILL
         BR      14                    HAVE ITS HIGH BYTE ZERO; RETURN
         SPACE   2
         DS      0F
BLKLST   DC      X'85',AL3(BLKXIT)
         USING   BLKXIT,15
BLKXIT   SR      2,2
         CH      2,62(1)  TEST IF BLKSIZE HAS BEEN SPECIFIED
         BNE     BLKXIT1  IF YES, THEN GET OUT
         LH      2,82(1)   IF NO, SET IT EQUAL TO LRECL
         STH     2,62(1)
BLKXIT1  BR      14
         DROP    15
         SPACE
*   GLOBAL PROCEDURE WRITE(R14);
*        (R0)  = BUFFER ADDRESS
*        (R13) = SAVE AREA ADDRESS
*        (R14) = RETURN ADDRESS
WRITE    ENTER
         CLI     LISTSW,X'FF'          TEST FOR LIST OPTION
         BNE     WRITE1
         PUT     SYSOUT,(0)
WRITE1   EXIT
         SPACE   2
*   GLOBAL PROCEDURE PUNCH(R14);
*        (R0)  = BUFFER ADDRESS
*        (R13) = SAVE AREA ADDRESS
*        (R14) = RETURN ADDRESS
PUNCH    ENTER
         LR      2,0
         CLI     LOADSW,X'FF'          TEST FOR LOAD OPTION
         BNE     PUNCH1
         PUT     SYSGO,(0)             WRITE SYSGO RECORD
PUNCH1   CLI     DECKSW,X'FF'          TEST FOR DECK OPTION
         BNE     PUNCH2
         LR      0,2
         PUT     SYSPUNCH,(0)          PUNCH RECORD
PUNCH2   EXIT
         SPACE   2
DMGLIST  DS      0F                    DATA MGMT (OPEN/CLOSE) LIST
         OPEN    (SYSIN,(INPUT,DISP)),MF=L
         DS      3F                    REMAINDER OF LIST CONSTRUCTED
         SPACE
LISTPARM OPEN    (SYSOUT,(OUTPUT,DISP)),MF=L
LOADPARM OPEN    (SYSGO,(OUTPUT,REREAD)),MF=L
DECKPARM OPEN    (SYSPUNCH,(OUTPUT,LEAVE)),MF=L
         SPACE
SYSIN    DCB     DSORG=PS,MACRF=GL,DDNAME=SYSIN,                       X
                 EROPT=ABE,EODAD=ENDRDR,EXLST=ADCBEXIT
         DC      4F'0'             SWITCHES AND STUFF
SYSOUT   DCB     DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,          X
                 LRECL=LINEREC,EROPT=ABE,EXLST=BLKLST
SYSPUNCH DCB     DSORG=PS,MACRF=PM,DDNAME=SYSPUNCH,RECFM=FB,           X
                 LRECL=80,EROPT=ABE,EXLST=BLKLST
SYSGO    DCB     DSORG=PS,MACRF=PM,DDNAME=SYSGO,RECFM=FB,              X
                 LRECL=80,EROPT=ABE,EXLST=BLKLST
UNIT1    DCB     DSORG=PS,MACRF=GL,DDNAME=UNIT1,                       X
                 EROPT=ABE,EODAD=ENDCOPY,EXLST=ADCBEXIT
ASKLIST  DC      A(COREMIN,COREMAX)    STORAGE REQUEST BOUNDS
GOTLIST  DS      2F
SAVE     DS      12F                   SAVE AREA
WORK     DS      F
XF1      DC      X'00FF0000'
XF2      DC      X'00000FF0'
MONTH    DS      F
JAN      DC      P'31,29,31,30,31,30,31,31,30,31,30,31'
COMPID   DS      CL16,CL5              COMPILATION ID (TIME AND DATE)
INPUT    DS     F
LISTSW   DS      X                     LISTING
LOADSW   DS      X                     OBJECT MODULE (SYSGO)
DECKSW   DS      X                     OBJECT MODULE (SYSPUNCH)
SWITCH   DS      X
IMAGE    DS      34D
CONWORK  DS      D
NEWIN    DS      27F
DD       DS      CL8                   DDNAME.
MEM      DS      CL8                   MEMBER (CONTIGUOUS WITH DD).
         IEFJFCBN ,                    JFCB FORMAT.
         DCBD
DCBDS    DSECT
         DS      24F
EOF      DS      X
RDRSTAT  DS      X
REREAD   DS      X
CARD     DS      X
NXTLINE  DS      F
ENDLINE  DS      F
$PLCOMP  CSECT
OFLGS    EQU     DCBOFLGS-IHADCB       UNLIKE-ATTRIBUTES BIT IN DCB
DDNAME   EQU     DCBDDNAM-IHADCB
LRECL    EQU     82
RECFM    EQU     36
         END
