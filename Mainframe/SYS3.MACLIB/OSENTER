         MACRO                                                          00010000
&NFS     OSENTER  &BASE=12,&BASE2=,&BASE3=,&BASE4=,                    $00020000
               &SAVE=*,&REGS=(YES,R),&F=,                              $00030000
               &USING=,&SECTYPE=CSECT,&GETMAIN=,&PARMREG=,&LPARM=,     $00040000
               &SP=1,&ID=*,&EXIT=,&ADDRREG=,&LENREG=,&ENV=CALL,        $00050000
               &RC=,&RCLOC=,&T=T,&PL=,&LOAD=,&SYMREG=,&DSECT=,         $00060000
               &TSFAKE=,&PARSE=,&MACRO=,&PRINT=,&DATE=,&TIME=,         $00070000
               &IKJRLSA=,&DELETE=*,&MODE=,&AMODE=,&RMODE=,&GETMLOC=     00080013
         AGO   .SKIPCMT                 SKIP AROUND COMMENTS FOR MLOGIC 00090000
.*.                                                                     00100000
.*********************************************************************. 00110000
.*                                                                   *. 00120000
.*  OSENTER -- 29May88 -- LDW                                        *. 00130013
.*                                                                   *. 00140000
.*-------------------------------------------------------------------*. 00150000
.*                                                                   *. 00160000
.*  THIS MACRO WILL GENERATE THE HOUSEKEEPING CODE NEEDED FOR        *. 00170000
.*  STANDARD OS LINKAGE CONVENTIONS (FOR ENTRY AND EXIT)             *. 00180000
.*  THE GENERATED CODE WILL OPTIONALLY BE RE-ENTRANT                 *. 00190000
.*                                                                   *. 00200000
.*  Updates:                                                         *. 00210013
.*    10Oct96   LDW  Support PARMREG=(Rx,dsect) and LPARM=(Rx,dsect) *. 00220014
.*                      to automatically do USNGX                    *. 00230014
.*    29May88   LDW  Fix bug:  don't MNOTE for ENV=(CALL,SIM) with   *. 00240013
.*                      no GETMAIN=                                  *. 00250013
.*                   Add GETMLOC= for LOC= operand of GETMAIN=       *. 00260013
.*    26May88   LDW  Fix bug in ZERO code                            *. 00270012
.*    15May88   LDW  Fix bug in ENV= consistency check               *. 00280011
.*    12MAY88   LDW  ADD 'ZERO' AS THIRD OPERAND OF GETMAIN=         *. 00290010
.*    21FEB88   LDW  CHANGE GETMAIN/FREEMAIN FROM R TO RU FOR MVS/XA *. 00300009
.*                   ADD AMODE= AND RMODE= KEYWORDS                  *. 00310009
.*    01-07-85  EMS  FIX DELETE=* DEFAULT FOR LOAD=                  *. 00320008
.*    01-02-85  EMS  ADD DELETE=,MODE= KEYWORDS                      *. 00330008
.*    09-06-84  EMS  FIX BUG WHEN CODING 'PL=,LOAD=DATETIME'         *. 00340008
.*    06-24-84  LDW  FIX BUG WHEN CODING 'SAVE=,EXIT=LEAVE'          *. 00350007
.*    11-09-83  LDW  MAKE REGS=(NO,R) WORK CORRECTLY                 *. 00360006
.*    04-30-82  LDW  FIX PREVIOUS FIX                                *. 00370005
.*    04-25-82  LDW  FIX FOR "SAVE=" NULL OPERAND -> NO SAVEAREA     *. 00380004
.*    10-19-81  EMS  FIX FOR ASMH "L'" PROBLEM                       *. 00390003
.*    12-04-80  LDW  CHANGE NAME FROM "ENTR" TO "OSENTER"            *. 00400000
.*    11-13-80  LDW  FIX 10-23-80 FIX; FIX NON-RENT TEST             *. 00410000
.*    10-23-80  LDW  FIX 10-08-80 FIX                                *. 00420000
.*    10-08-80  LDW  FIX FOR ENV=(CP,SIMULATE) WITH NO PL=           *. 00430000
.*    07-07-80  LDW  MOVE USINGS TO CORRECT PROBLEMS IN EXIT CODE    *. 00440000
.*    05-14-80  LDW  REPLACE TSFAKE=YES WITH ENV=SIMULATE            *. 00450000
.*    05-13-80  LDW  ADD IKJRLSA KEYWORD; FIX BUGS IN ENV=CP CODE    *. 00460000
.*    09-27-79  LDW  FIX BUG IN TSO-CP SIMULATION CODE               *. 00470000
.*    02-21-79  LDW  ADD DATE= AND TIME= OPERANDS                    *. 00480000
.*    01-12-79  LDW  FIX BUG; ADD MVS CODE FOR LOAD=                 *. 00490000
.*    12-29-78  LDW  ADD BASE4=; FIX LENGTH OF GETMAIN IF MACRO=YES; *. 00500000
.*                   CHECK FOR RC=(R1) AND DYNAMIC AREA (GETMAIN=);  *. 00510000
.*                   ADD PRINT=; FIX FOR BATCH CALL OF ENV=CP PGMCK  *. 00520000
.*                                                                   *. 00530000
.*-------------------------------------------------------------------*. 00540000
.*                                                                   *. 00550000
.*  OPERANDS AVAILABLE ARE:                                          *. 00560000
.*                                                                   *. 00570000
.*                                                                   *. 00580000
.*  BASE=    -- DEFAULT:  BASE=12                                    *. 00590000
.*              THE BASE REGISTER TO BE USED                         *. 00600000
.*                                                                   *. 00610000
.*                                                                   *. 00620000
.*  BASE2=   -- DEFAULT:  (NONE)                                     *. 00630000
.*              A SECOND BASE REGISTER                               *. 00640000
.*                                                                   *. 00650000
.*                                                                   *. 00660000
.*  BASE3=   -- DEFAULT:  (NONE)                                     *. 00670000
.*              A THIRD BASE REGISTER (ONLY VALID IF BASE2= IS CODED)*. 00680000
.*                                                                   *. 00690000
.*  BASE4=   -- DEFAULT:  (NONE)                                     *. 00700000
.*              A FOURTH BASE REGISTER (MUST HAVE BASE2= AND BASE3=) *. 00710000
.*                                                                   *. 00720000
.*                                                                   *. 00730000
.*  SAVE=    -- DEFAULT:  SAVE=*                                     *. 00740000
.*              NAME OF A SAVE AREA TO BE USED.                      *. 00750000
.*              IF SAVE=* IS CODED, AN INLINE SAVE AREA WILL BE      *. 00760000
.*              GENERATED, WITH A UNIQUE NAME.  SAVE=* IS IGNORED    *. 00770000
.*              IF GETMAIN= IS CODED.  ANY OTHER VALUE OF SAVE=      *. 00780000
.*              WILL CAUSE AN ERROR IF GETMAIN= IS ALSO USED.        *. 00790000
.*                                                                   *. 00800000
.*                                                                   *. 00810000
.*  GETMAIN= -- Default:  (none)                                     *. 00820010
.*              GETMAIN=length, or                                   *. 00830010
.*              GETMAIN=(length,dsectname).                          *. 00840010
.*              GETMAIN=(length,dsectname,ZERO).                     *. 00850010
.*              This operand causes a GETMAIN for "length" bytes to  *. 00860010
.*              be generated.  The first 18 words will be reserved   *. 00870010
.*              for the save area.  The address of the area obtained *. 00880010
.*              is placed in R13, and if "dsectname" is coded, a     *. 00890010
.*              USING is done.  If the word "ZERO" is coded as the   *. 00900010
.*              third operand, then the work area will be zeroed     *. 00910010
.*              before it is used.                                   *. 00920010
.*              If MACRO=YES is coded, the default for GETMAIN= is   *. 00930010
.*              GETMAIN=(TSDSECTL,TSDSECT) and the EQU for TSDSECTL  *. 00940010
.*              will be generated by OSENTER.                        *. 00950010
.*                                                                   *. 00960013
.*                                                                   *. 00970013
.*  GETMLOC= -- Default:  (none)                                     *. 00980013
.*              GETMLOC=(ANY,ANY), etc                               *. 00990013
.*              This operand becomes the LOC= operand of GETMAIN.    *. 01000013
.*                                                                   *. 01010000
.*                                                                   *. 01020000
.*  SP=      -- DEFAULT:  SP=1                                       *. 01030000
.*              THE SUBPOOL FOR THE WORKAREA OBTAINED BY GETMAIN=    *. 01040000
.*                                                                   *. 01050000
.*                                                                   *. 01060000
.*  REGS=    -- DEFAULT:  REGS=(YES,R)                               *. 01070000
.*              THE FIRST OPERAND (YES/NO) INDICATES WHETHER THE     *. 01080000
.*              REGEQU MACRO WILL BE USED TO GENERATE EQU'S FOR      *. 01090000
.*              SYMBOLIC REGISTERS.  THE SECOND OPERAND IS THE       *. 01100000
.*              PREFIX TO BE USED.                                   *. 01110000
.*              NOTE:  REGS=(YES,Q) IS THE SAME AS REGS=(,Q)         *. 01120000
.*                                                                   *. 01130000
.*                                                                   *. 01140000
.*  F=       -- DEFAULT:  (NONE)                                     *. 01150000
.*              THE PREFIX TO BE USED FOR SYMBOLIC FLOATING POINT    *. 01160000
.*              REGISTER NAMES.                                      *. 01170000
.*                                                                   *. 01180000
.*                                                                   *. 01190000
.*  SECTYPE= -- DEFAULT:  SECTYPE=CSECT                              *. 01200000
.*              THE SECTION TYPE TO BE GENERATED.                    *. 01210000
.*              POSSIBLE VALUES:  CSECT/DSECT/ENTRY/NONE             *. 01220000
.*                                                                   *. 01230000
.*                                                                   *. 01240000
.*  USING=   -- DEFAULT:  (NONE)                                     *. 01250000
.*              A USING WILL BE DONE FOR EACH PAIR OF OPERANDS.      *. 01260000
.*              CODED AS FOLLOWS:                                    *. 01270000
.*              USING=(DSECT1,REG1,DSECT2,REG2,...)                  *. 01280000
.*                                                                   *. 01290000
.*                                                                   *. 01300000
.*  EXIT=    -- DEFAULT:  (NONE)                                     *. 01310000
.*              THE NAME OF AN EXIT ROUTINE TO BE BRANCHED TO THAT   *. 01320000
.*              WILL FREE THE WORKAREA (IF ONE WAS OBTAINED BY       *. 01330000
.*              GETMAIN=), DECHAIN SAVE AREAS, SET THE RETURN CODE,  *. 01340000
.*              AND RETURN TO CALLER.                                *. 01350000
.*                                                                   *. 01360000
.*                                                                   *. 01370000
.*  RC=      -- DEFAULT:  RC=(15)                                    *. 01380000
.*              THE RETURN CODE TO BE PASSED BACK TO THE CALLER.     *. 01390000
.*              THIS OPERAND IS IGNORED IF EXIT= IS NOT CODED.       *. 01400000
.*              RC= CAN BE CODED AS RC=(REG) OR RC=EXPRESSION.       *. 01410000
.*              THIS OPERAND IS MUTUALLY EXCLUSIVE WITH THE RCLOC=   *. 01420000
.*              OPERAND.                                             *. 01430000
.*                                                                   *. 01440000
.*                                                                   *. 01450000
.*  RCLOC=   -- DEFAULT:  (NONE)                                     *. 01460000
.*              THE STORAGE LOCATION FROM WHICH THE RETURN CODE WILL *. 01470000
.*              BE OBTAINED.  MUST HAVE FULLWORD OR HALFWORD TYPE    *. 01480000
.*              ATTRIBUTE.  THIS OPERAND IS MUTUALLY EXCLUSIVE       *. 01490000
.*              WITH THE RC= OPERNAND.                               *. 01500000
.*                                                                   *. 01510000
.*                                                                   *. 01520000
.*  T=       -- DEFAULT:  T=T                                        *. 01530000
.*              IGNORED IF EXIT= NOT CODED.  SPECIFIES THAT THE OLD  *. 01540000
.*              SAVE AREA WILL BE FLAGGED BY A X'FF' AT OFFSET 12    *. 01550000
.*              TO INDICATE THAT IT IS INACTIVE.  NOTE:  "T=" SHOULD *. 01560000
.*              NOT BE CODED FOR EXIT ROUTINES, SUCH AS STAE ROUTINES*. 01570000
.*                                                                   *. 01580000
.*                                                                   *. 01590000
.*  ID=      -- DEFAULT:  ID=CSECT NAME                              *. 01600000
.*              AN ID TO PUT IN CHARACTER FORM NEAR THE BEGINNING    *. 01610000
.*              OF THE CSECT, TO AID IN DUMP READING.                *. 01620000
.*                                                                   *. 01630000
.*                                                                   *. 01640000
.*  ENV=     -- DEFAULT:  ENV=CALL                                   *. 01650000
.*              THE ENVIRONMENT THAT THE PROGRAM WILL OR SHOULD BE   *. 01660000
.*              RUNNING UNDER.  VALID OPERANDS (MORE THAN ONE CAN    *. 01670000
.*              BE CODED, IN PARENS):                                *. 01680000
.*              CALL -- BATCH EXEC PGM=, OR TSO CALL, OR LINK MACRO  *. 01690000
.*              CP -- TSO COMMAND PROCESSOR                          *. 01700000
.*              TSOCP -- ALIAS FOR CP                                *. 01710000
.*              TSO -- MAY BE RUN ON TSO                             *. 01720000
.*              SIMULATE -- PROGRAM CAN BE INVOKED VIA CALL OR AS A  *. 01730000
.*                     COMMAND PROCESSOR (CP) (SEE BELOW)            *. 01740000
.*              SIM -- ALIAS FOR SIMULATE                            *. 01750000
.*              MVT -- PROGRAM WILL BE RUN UNDER MVT.                *. 01760000
.*              MVS -- PROGRAM WILL BE RUN UNDER MVS.  (OS/VS2 R3)   *. 01770000
.*              PLI -- PROGRAM WILL BE CALLED BY A PLIX PROGRAM.     *. 01780000
.*              PLIX -- ALIAS FOR PLI                                *. 01790000
.*                                                                   *. 01800000
.*              NOTE:  CALL IS MUTUALLY EXCLUSIVE WITH CP/TSOCP.  IF *. 01810000
.*              THE PROGRAM MAY BE RUN EITHER THRU CALL OR AS A CP,  *. 01820000
.*              SPECIFY ENV=TSO OR ENV=CP (ENV=CP IMPLIES ENV=TSO)   *. 01830000
.*                                                                   *. 01840000
.*              IF ENV=SIMULATE IS CODED, AND THE PROGRAM IS CALLED  *. 01850000
.*              VIA "CALL", THEN A FAKE CPPL, PSCB, CBUF, UPT, AND   *. 01860000
.*              ECT WILL BE BUILT, BASED ON THE INFO IN THE PARM     *. 01870000
.*              FIELD.  IF ENV=CALL IS CODED (OR DEFAULTED), A FAKE  *. 01880000
.*              PARM PTR WORD AND LENGTH WILL BE BUILT BASED ON THE  *. 01890000
.*              INFO IN THE CBUF.  THE NECESSARY AREA WILL BE        *. 01900000
.*              GENERATED AND NAMED EITHER IN THE WORK AREA (IF      *. 01910000
.*              ANY), OR INLINE.                                     *. 01920000
.*                                                                   *. 01930000
.*                                                                   *. 01940000
.*  PARMREG= -- DEFAULT:  (NONE)                                     *. 01950000
.*              THE REGISTER TO SAVE THE PARM POINTER PASSED IN R1   *. 01960000
.*              ("LR  PARMREG,R1")                                   *. 01970000
.*              PARMREG=(Rx,dsect) then generates:                   *. 01980014
.*              USNGX dsect,Rx                                       *. 01990014
.*                                                                   *. 02000000
.*                                                                   *. 02010000
.*  LPARM=   -- DEFAULT:  (NONE)                                     *. 02020000
.*              THE REGISTER INTO WHICH THE PARM ADDR WILL BE LOADED *. 02030000
.*              ( "L  LPARM,0(,R1)" )                                *. 02040000
.*              LPARM=(Rx,dsect) then generates:                     *. 02050014
.*              USNGX dsect,Rx                                       *. 02060014
.*                                                                   *. 02070000
.*                                                                   *. 02080000
.*  ADDRREG= -- DEFAULT:  (NONE)                                     *. 02090000
.*              THE REGISTER TO CONTAIN THE ADDRESS OF THE ACTUAL    *. 02100000
.*              TEXT OF THE PARM.                                    *. 02110000
.*              NOTE:  ADDRREG= AND LENREG= ARE AN OPERAND PAIR --   *. 02120000
.*              IF ONE IS CODED, THE OTHER MUST ALSO BE CODED.       *. 02130000
.*                                                                   *. 02140000
.*                                                                   *. 02150000
.*  LENREG=  -- DEFAULT:  (NONE)                                     *. 02160000
.*              THE REGISTER TO CONTAIN THE LENGTH OF THE PARM TEXT. *. 02170000
.*              SEE NOTE FOR ADDRREG=                                *. 02180000
.*                                                                   *. 02190000
.*                                                                   *. 02200000
.*  LOAD=    -- DEFAULT:  (NONE)                                     *. 02210000
.*              A LIST OF MODULES TO BE LOADED.  THE ADDRESS OF      *. 02220000
.*              EACH MODULE WILL BE SAVED IN A WORD WITH THE NAME    *. 02230000
.*              OF THE MODULE.                                       *. 02240000
.*                                                                   *. 02250000
.*                                                                   *. 02260000
.*  DELETE=  -- DEFAULT:  (NONE)                                     *. 02270008
.*              A LIST OF MODULES TO BE DELETED.  DELETE=* WILL      *. 02280008
.*              DELETE ALL MODULES LOADED VIA LOAD=.  INCLUDING      *. 02290008
.*              AN * IN THE LIST OF MODULES TO BE DELETED WILL       *. 02300008
.*              DELETE ALL LOADED MODULES IN ADDITION TO ENTRIES     *. 02310008
.*              SPECIFIED.                                           *. 02320008
.*                                                                   *. 02330008
.*                                                                   *. 02340008
.*  PL=      -- DEFAULT:  (NONE)                                     *. 02350000
.*              A LIST OF PARAMETER LISTS TO BE GENERATED AND        *. 02360000
.*              INITIALIZED.  THE FOLLOWING PARM LISTS ARE           *. 02370000
.*              SUPPORTED:  CSCAN, PARSE, DAIR, IO, MESSAGE.         *. 02380000
.*                                                                   *. 02390000
.*                                                                   *. 02400000
.*  MACRO=   -- DEFAULT:  MACRO=NO                                   *. 02410000
.*              IF 'YES' IS CODED, A 'TSWORK' MACRO WILL BE ISSUED   *. 02420000
.*              TO DEFINE MORE STORAGE IN THE WORK AREA.  (TSWORK    *. 02430000
.*              MACRO IS DEFINED BY THE USER.)                       *. 02440000
.*                                                                   *. 02450000
.*                                                                   *. 02460000
.*  PARSE=   -- DEFAULT:  (NONE)                                     *. 02470000
.*              FORMAT:  PARSE=PCLNAME OR PARSE=(PCLNAME,ERRADDR)    *. 02480000
.*              WILL USE THE TSPARSE MACRO TO PARSE THE COMMAND LINE *. 02490000
.*              (POINTED TO BY CPPLCBUF).  PCLNAME IS THE NAME OF    *. 02500000
.*              THE PCL CSECT.  IF ERRADDR IS GIVEN, GENERATES ERROR *. 02510000
.*              ANALYSIS ROUTINE ROUTINE WITH TSPARERR MACRO.        *. 02520000
.*                                                                   *. 02530000
.*                                                                   *. 02540000
.*  IKJRLSA= -- DEFAULT:  IKJRLSA=YES IF PARSE= CODED, =NO OTHERWISE *. 02550000
.*              IKJRLSA=YES SPECIFIES THAT THE EXIT CODE SHOULD DO   *. 02560000
.*              AN IKJRLSA TO RELEASE PARSE'S WORK AREA.  THIS       *. 02570000
.*              OPERAND IS IGNORED IF EXIT= IS NOT CODED.            *. 02580000
.*                                                                   *. 02590000
.*                                                                   *. 02600000
.*  PRINT=   -- DEFAULT:  (NONE)                                     *. 02610000
.*              PRINT=NOGEN SPECIFIES THAT THE DSECTS SHOULD NOT BE  *. 02620000
.*              PRINTED                                              *. 02630000
.*                                                                   *. 02640000
.*                                                                   *. 02650000
.*  DATE=    -- DEFAULT:  (DATE OF ASSEMBLY)                         *. 02660000
.*              SPECIFIES ASSEMBLY DATE (SHOULD ONLY BE USED WHEN    *. 02670000
.*              COMPARING AGAINST AN OLD LOAD MODULE)                *. 02680000
.*                                                                   *. 02690000
.*                                                                   *. 02700000
.*  TIME=    -- DEFAULT:  (TIME OF ASSEMBLY)                         *. 02710000
.*              SPECIFIES ASSEMBLY DATE (SHOULD ONLY BE USED WHEN    *. 02720000
.*              COMPARING AGAINST AN OLD LOAD MODULE)                *. 02730000
.*                                                                   *. 02740000
.*                                                                   *. 02750000
.*  MODE=    -- DEFAULT:  (NONE)                                     *. 02760008
.*              SPECIFIES WHAT MODE COMMAND WAS INVOKED WITH.        *. 02770008
.*              CONTAINS 2 TO 4 OPERANDS :                           *. 02780008
.*                  1)   FLAG BYTE                                   *. 02790008
.*                  2)   BATCH MODE EQUATE                           *. 02800008
.*                  3)   TSO CALL MODE EQUATE                        *. 02810008
.*                  4)   TSO CP MODE EQUATE                          *. 02820008
.*              BYTE IS SET VIA AN MVI INDICATING APPROPRIATE MODE.  *. 02830008
.*                                                                   *. 02840008
.*                                                                   *. 02850008
.*********************************************************************. 02860000
.*.                                                                     02870000
.*                                                                      02880000
.*                                                                      02890000
.*  IHB&SYSNDX LETTERS USED:  ABC EF    KL   PQ STUV X Z                02900000
.*                   UNUSED:     D  GHIJ  MNO  R    W Y 0123456789$#@   02910000
.*                                                                      02920000
.SKIPCMT ANOP                                                           02930000
         GBLB  &GDAIRM,&GPARSEM         TO AVOID DUPLICATES             02940000
         GBLB  &GDAIR,&GPARSE           DAIR OR PARSE LOADED            02950000
         LCLC  &ZBASE,&ZSAVE,&Q,&NAME,&RCRC,&LR,&AR,&LQ                 02960000
         LCLC  &GET1,&GET2,&PARNAME                                     02970013
         LCLC  &IHBNX,&BLANK1,&BLANK2                                   02980000
         LCLC  &R0,&R1,&R2,&R3,&R12,&R13,&R14,&R15                      02990000
         LCLA  &L,&X,&Y                                                 03000008
         LCLB  &ENVTSO,&ENVCALL,&ENVCP,&ENVPLI,&ENVMVT,&ENVMVS,&ENVSIM  03010000
         LCLB  &FKCALL,&FKCP,&MVSCVT,&ASMERR                            03020000
         LCLB  &CSPL,&PARS,&DAIR,&IO,&MSG                               03030000
         LCLB  &MODEBIT                                                 03040008
&IHBNX   SETC  'IHB&SYSNDX'                                             03050000
&BLANK1  SETC  '        '                                               03060000
&BLANK2  SETC  '        '                                               03070000
&PARNAME SETC  ''                                                       03080000
&LQ      SETC  'L'''                    STUPID ASSEMBLER                03090000
         AIF   ('&PRINT' NE 'NOGEN').PRINTOK                            03100000
         AIF   ('&PRINT' NE '').PRINTOK                                 03110000
         MNOTE 4,'WHAT DOES PRINT=&PRINT MEAN???'                       03120000
.*                                                                      03130000
.*                                                                      03140000
.*                                                                      03150000
.PRINTOK AIF   ('&SYMREG' EQ '').NOSYMRG                                03160000
         MNOTE 0,'SYMREG= IS UNSUPPORTED -- USE REGS='                  03170000
.NOSYMRG AIF   ('&DSECT' EQ '').NOD$ECT                                 03180000
         MNOTE 4,'DSECT= IS UNSUPPORTED'                                03190000
.NOD$ECT ANOP                                                           03200000
.*-----------------------------------*.                                 03210000
.*  ENVIRONMENT                      *.                                 03220000
.*-----------------------------------*.                                 03230000
&X       SETA  0                                                        03240000
.ENVLOOP AIF   (N'&ENV EQ &X).ENVDONE                                   03250000
&X       SETA  &X+1                                                     03260000
         AIF   ('&ENV(&X)' EQ 'TSO'     ).ENVTSO                        03270000
         AIF   ('&ENV(&X)' EQ 'CALL'    ).ENVCALL                       03280000
         AIF   ('&ENV(&X)' EQ 'CP'      ).ENVCP                         03290000
         AIF   ('&ENV(&X)' EQ 'TSOCP'   ).ENVCP                         03300000
         AIF   ('&ENV(&X)' EQ 'SIM'     ).ENVSIM                        03310000
         AIF   ('&ENV(&X)' EQ 'SIMULATE').ENVSIM                        03320000
         AIF   ('&ENV(&X)' EQ 'MVS'     ).ENVMVS                        03330000
         AIF   ('&ENV(&X)' EQ 'MVT'     ).ENVMVT                        03340000
.**      AIF   ('&ENV(&X)' EQ 'PLI'     ).ENVPLI                        03350000
.**      AIF   ('&ENV(&X)' EQ 'PLIX'    ).ENVPLI                        03360000
         MNOTE 4,'ENV=&ENV(&X) IS INVALID -- IGNORED'                   03370000
         AGO   .ENVLOOP                                                 03380000
.ENVTSO  ANOP                                                           03390000
&ENVTSO  SETB  1                                                        03400000
         AGO   .ENVLOOP                                                 03410000
.ENVCALL ANOP                                                           03420000
&ENVCALL SETB  1                                                        03430000
         AGO   .ENVLOOP                                                 03440000
.ENVCP   ANOP                                                           03450000
&ENVCP   SETB  1                                                        03460000
&ENVTSO  SETB  1                        ENV=CP IMPLIES ENV=TSO          03470000
         AGO   .ENVLOOP                                                 03480000
.ENVSIM  ANOP                                                           03490000
&ENVSIM  SETB  1                                                        03500000
         AGO   .ENVLOOP                                                 03510000
.ENVMVS  ANOP                                                           03520000
&ENVMVS  SETB  1                                                        03530000
         AGO   .ENVLOOP                                                 03540000
.ENVMVT  ANOP                                                           03550000
&ENVMVT  SETB  1                                                        03560000
         AGO   .ENVLOOP                                                 03570000
.ENVPLI  ANOP                                                           03580000
&ENVPLI  SETB  1                                                        03590000
         AIF   ('&BASE' NE '12' AND '&BASE' NE 'R12').ENVLOOP           03600000
         MNOTE 4,'WARNING:  BASE=&BASE IS NOT COMPATIBLE WITH ENV=PLIX' 03610000
         AGO   .ENVLOOP                                                 03620000
.ENVDONE AIF   (NOT &ENVCALL OR NOT &ENVCP).ENVOK1                      03630000
        MNOTE 4,'ENV=(CALL,CP) MAY NOT BOTH BE GIVEN.  "CALL" IGNORED.' 03640000
&ENVCALL SETB  0                        IGNORE IT                       03650000
.ENVOK1  AIF   (NOT &ENVMVT OR NOT &ENVMVS).ENVOK2                      03660000
         MNOTE 4,'MAKE UP YOUR MIND:  ENV=MVT OR ENV=MVS, BUT NOT BOTH.$03670000
                 MVT ASSUMED.'                                          03680000
&ENVMVS  SETB  0                        IGNORE IT                       03690000
.*NVOK2  AIF   (NOT &ENVCP).ENVOK5                                      03700011
.ENVOK2  AIF   (NOT &ENVCP).ENVOK3                                      03710011
         AIF   (&ENVCP AND '&PARMREG' NE '').ENVOK3                     03720000
         MNOTE 4,'PARMREG= REQUIRED FOR ENV=CP'                         03730000
&ASMERR  SETB  1                        ASSEMBLY ERRORS WILL RESULT     03740000
.ENVOK3  AIF   ('&TSFAKE' EQ '').ENVOK4                                 03750000
         MNOTE 4,'TSFAKE= DISCONTINUED.  ENV=SIMULATE USED INSTEAD.  CH$03760000
               ANGE YOUR SOURCE'                                        03770000
&ENVSIM  SETB  1                        SET IT                          03780000
.ENVOK4  AIF   (N'&GETMAIN EQ 2).ENVOK99                                03790000
         AIF   (N'&GETMAIN EQ 3).ENVOK99                                03800010
         AIF   ('&MACRO' EQ 'YES').ENVOK99                              03810000
         AIF   (NOT &ENVSIM).ENVOK5                                     03820000
         AIF   (NOT &ENVCP ).ENVOK5                                     03830013
         MNOTE 4,'ENV=SIM(ULATE) WITH ENV=CP REQUIRES GETMAIN=(LENGTH,D$03840000
               SECT) (OR MACRO=YES)'                                    03850000
&ASMERR  SETB  1                        ASSEMBLY ERRORS WILL RESULT     03860000
.ENVOK5  AIF   ('&PL' EQ '').ENVOK99                                    03870000
         MNOTE 4,'PL=&PL WITH ENV=CP REQUIRES GETMAIN=(LENGTH,DSECT) (O$03880000
               R MACRO=YES)'                                            03890000
&ASMERR  SETB  1                        ASSEMBLY ERRORS WILL RESULT     03900000
.ENVOK99 AIF   (NOT &ASMERR).ENVOK      SKIP IF NO ASSEMBLY ERRORS      03910000
         MNOTE 0,'<<< ASSEMBLY ERRORS WILL RESULT >>>'                  03920000
.*-----------------------------------*.                                 03930000
.*  ENV=SIMULATE                     *.                                 03940000
.*-----------------------------------*.                                 03950000
.ENVOK   AIF   (NOT &ENVSIM).NOFAKE                                     03960000
.FAKENO  AIF   ('&PARMREG' NE '').OKFAKE0                               03970000
         MNOTE 4,'*** PARMREG= MUST BE GIVEN IF ENV=SIMULATE IS GIVEN. $03980000
                ENV=SIMULATE IGNORED.'                                  03990000
         AGO   .NOFAKE                                                  04000000
.OKFAKE0 AIF   (NOT &ENVCALL).NOFKCAL                                   04010000
&FKCALL  SETB  1                                                        04020000
         AGO   .NOFAKE                                                  04030000
.NOFKCAL AIF   (NOT &ENVCP).NOFKCP                                      04040000
&FKCP    SETB  1                                                        04050000
         AGO   .NOFAKE                                                  04060000
.NOFKCP  MNOTE 2,'WHAT TO SIMULATE?????'                                04070000
.NOFAKE  ANOP                                                           04080000
         AIF   (T'&MODE EQ 'O').NOMODE                                  04090008
         AIF   ((N'&MODE GE 2) OR (N'&MODE LE 4)).MODEOK                04100008
         MNOTE 0,'INVALID SPECIFICATION OF &&MODE OPERAND'              04110008
         AGO   .NOMODE                                                  04120008
.MODEOK  ANOP  ,                                                        04130008
&MODEBIT SETB  1                        MODE IS OK                      04140008
.NOMODE  ANOP  ,                                                        04150008
.*-----------------------------------*.                                 04160000
.*  SAVE/GETMAIN                     *.                                 04170000
.*-----------------------------------*.                                 04180000
&ZSAVE   SETC  '&SAVE'                  INIT DEFAULT                    04190000
&GET1    SETC  '&GETMAIN(1)'                                            04200000
&GET2    SETC  '&GETMAIN(2)'                                            04210000
         AIF   ('&MACRO' NE 'YES').OKGET2                               04220000
         AIF   ('&GET1' NE '').OKGET1                                   04230000
&GET1    SETC  'TSDSECTL'               SET DEFAULT                     04240000
.OKGET1  AIF   ('&GET2' NE '').OKGET2                                   04250000
&GET2    SETC  'TSDSECT'                SET DEFAULT                     04260000
.OKGET2  AIF   ('&MACRO' EQ 'YES' OR '&GET1' NE '').GMOK1               04270000
         AIF   ('&GETMAIN' EQ '').KEEPSAV                               04280000
         MNOTE 8,'GETMAIN= CODED INCORRECTLY.  MACRO TERMINATED'        04290000
         MEXIT                                                          04300000
.KEEPSAV AIF   ('&ZSAVE' EQ '').CHKBASE SAVE AREA NOT USED              04310000
         MNOTE *,'<<< GENERATED CODE WILL NOT BE RE-ENTRANT >>>'        04320000
         AGO   .CHKBASE                                                 04330000
.GMOK1   ANOP                                                           04340000
&ZSAVE   SETC  ''                       NO SAVE AREA                    04350000
.*-----------------------------------*.                                 04360000
.*  BASES                            *.                                 04370000
.*-----------------------------------*.                                 04380000
.CHKBASE AIF   ('&BASE4' EQ '').NOBASE4                                 04390000
         AIF   ('&BASE3' NE '').BASE3                                   04400000
         MNOTE 8,'*** BASE4 IGNORED, INVALID WITHOUT BASE3= ***'        04410000
.NOBASE4 AIF   ('&BASE3' EQ '').OKBASES                                 04420000
.BASE3   AIF   ('&BASE2' NE '').OKBASES                                 04430000
         MNOTE 8,'*** BASE3 IGNORED, INVALID WITHOUT BASE2= ***'        04440000
.OKBASES AIF   (('&GETMAIN' EQ '') AND ('&MACRO' NE 'YES')).OK1         04450000
         AIF   ('&SAVE'   EQ '*').OK1                                   04460000
         AIF   ('&SAVE'    EQ '').OK1                                   04470000
         MNOTE 12,'*** SAVE= MUTUALLY EXCLUSIVE WITH GETMAIN= AND/OR MA$04480000
               CRO=YES.  MACRO TERMINATED ***'                          04490000
         MEXIT                                                          04500000
.OK1     AIF   ('&NFS' NE '').GOTNAME                                   04510000
         MNOTE 12,'*** CSECT NAME OMITTED ***'                          04520000
.*-----------------------------------*.                                 04530000
.*  SECTYPE=                         *.                                 04540000
.*-----------------------------------*.                                 04550000
.GOTNAME AIF   ('&SECTYPE' NE 'CSECT').NOCSECT                          04560000
.DOCSECT ANOP                                                           04570000
&NFS     CSECT                          OSENTER -- 29May88 -- LDW       04580013
         AGO   .SECDONE                                                 04590000
.NOCSECT AIF   ('&SECTYPE' NE 'DSECT').NODSECT                          04600000
&NFS     DSECT                          OSENTER -- 29May88 -- LDW       04610013
         AGO   .SECDONE                                                 04620000
.NODSECT AIF   ('&SECTYPE' EQ 'NONE').SECNONE                           04630000
         AIF   ('&SECTYPE' EQ 'ENTRY').ENTRY                            04640000
       MNOTE 8,'*** SECTYPE=&SECTYPE IS INVALID, SECTYPE=CSECT ASSUMED' 04650000
         AGO   .DOCSECT                                                 04660000
.ENTRY   ENTRY &NFS                                                     04670000
.SECNONE ANOP                                                           04680000
*  DEFINE NAME                                                          04690000
&NFS     DC    0D'0'                    OSENTER -- 29May88 -- LDW       04700013
.*-----------------------------------*.                                 04710009
.*  AMODE=/RMODE=                    *.                                 04720009
.*-----------------------------------*.                                 04730009
.SECDONE AIF   ('&AMODE' EQ '').NOAMODE                                 04740009
&NFS     AMODE &AMODE                                                   04750009
.NOAMODE AIF   ('&RMODE' EQ '').NORMODE                                 04760009
&NFS     RMODE &RMODE                                                   04770009
.NORMODE ANOP                                                           04780009
.*-----------------------------------*.                                 04790000
.*  REGS=                            *.                                 04800000
.*-----------------------------------*.                                 04810000
&Q       SETC  '&REGS(2)'                                               04820006
         AIF   ('&REGS(1)' EQ '' AND '&REGS(2)' NE '').DOREGS           04830006
         AIF   ('&REGS(1)' EQ 'NO').NOREGS                              04840000
         AIF   ('&REGS(2)' NE '').DOREGS                                04850000
&Q       SETC  'R'                                                      04860000
.DOREGS  ANOP                                                           04870000
*=====================================================================* 04880000
*        REGISTER EQUATES                                             * 04890000
         REGEQU  PREFIX=&Q,FR=&F                                        04900000
         SPACE 1                                                        04910000
.NOREGS  ANOP                                                           04920000
&L       SETA  K'&Q                                                     04930006
&R0      SETC  '&Q'.'0'                                                 04940000
&R1      SETC  '&Q'.'1'                                                 04950000
&R2      SETC  '&Q'.'2'                                                 04960000
&R3      SETC  '&Q'.'3'                                                 04970000
&R12     SETC  '&Q'.'12'                                                04980000
&R13     SETC  '&Q'.'13'                                                04990000
&R14     SETC  '&Q'.'14'                                                05000000
&R15     SETC  '&Q'.'15'                                                05010000
&L       SETA  K'&REGS(2)                                               05020000
.*-----------------------------------*.                                 05030000
.*  MISC WORKAREA GOODIES            *.                                 05040000
.*-----------------------------------*.                                 05050000
.*%%%%%% AIF   (&ENVCP AND '&PL' NE '').NOGM2   WILL BE GENERATED LATER 05060000
         AIF   (&ENVCP).NOGM2           WILL BE GENERATED LATER         05070000
         AIF   ('&GET2' EQ '').NOGM2    DSECT NAME OMITTED              05080000
&GET2    DSECT                                                          05090000
         DS    18F                      SAVE AREA                       05100000
.* IF ENV=SIMULATE AND ENV=CP THEN GENERATE THE SIMULATION AREA HERE.   05110000
         AIF   (NOT (&ENVSIM AND &ENVCP)).NOSIM1                        05120000
&IHBNX.F DS    A,2H,CL100               AREA FOR FAKE PARM FIELD        05130000
.NOSIM1  AIF   (NOT &ENVCP).NO$CPPL                                     05140000
         AIF   ('&PL' EQ '').NOTSECB                                    05150000
TSECB    DS    F                                                        05160000
.NOTSECB SPACE 1                                                        05170000
*        TSCPPL                                                         05180000
         TSCPPL                                                         05190000
.*-----------------------------------*.                                 05200000
.*  LOAD=                            *.                                 05210000
.*-----------------------------------*.                                 05220000
.NO$CPPL AIF   ('&LOAD' EQ '').NOLOAD1                                  05230000
&X       SETA  0                                                        05240000
.LOADLP1 ANOP                                                           05250000
&X       SETA  &X+1                                                     05260000
&LOAD(&X) DS   A                                                        05270000
         AIF   (&X LT N'&LOAD).LOADLP1                                  05280000
.*-----------------------------------*.                                 05290000
.*  BASE=                            *.                                 05300000
.*-----------------------------------*.                                 05310000
.NOLOAD1 SPACE 3                                                        05320000
&NFS     CSECT                          RESUME                          05330000
.NOGM2   ANOP                                                           05340006
&ZBASE   SETC  '&BASE'                                                  05350006
         AIF   (&L EQ 0).BASEOK                                         05360006
         AIF   ('&BASE'(1,&L) EQ '&Q').BASEOK                           05370006
         AIF   (T'&BASE NE 'N').BASEOK                                  05380006
&ZBASE   SETC  '&Q&BASE'                                                05390000
.BASEOK  USING *,&R15                   TEMPORARY BASE                  05400006
         B     &IHBNX.B                 AROUND GORF                     05410000
         DROP  &R15                     DROP TEMP BASE                  05420000
.*-----------------------------------*.                                 05430000
.* SET UP BASE REGISTERS FOR EXIT    *.                                 05440000
.*-----------------------------------*.                                 05450000
         USNGX &NFS,&ZBASE                                              05460000
         AIF   ('&BASE2' EQ '').BASEFIX                                 05470000
         USNGX &NFS+4096,&BASE2                                         05480000
         AIF   ('&BASE3' EQ '').BASEFIX                                 05490000
         USNGX &NFS+8192,&BASE3                                         05500000
         AIF   ('&BASE4' EQ '').BASEFIX                                 05510000
         USNGX &NFS+12288,&BASE4                                        05520000
.BASEFIX ANOP                                                           05530000
.*-----------------------------------*.                                 05540000
.* GENERATE USINGS, IF GIVEN         *.                                 05550000
.*-----------------------------------*.                                 05560000
         AIF   (N'&USING LT 1).NOUSING                                  05570000
&X       SETA  1                                                        05580000
.USINGLP USNGX &USING(&X),&USING(&X+1)                                  05590000
&X       SETA  &X+2                                                     05600000
         AIF   (&X LT N'&USING).USINGLP                                 05610000
.NOUSING ANOP                                                           05620000
.*-----------------------------------*.                                 05630000
.*  ID                               *.                                 05640000
.*-----------------------------------*.                                 05650000
         AIF   ('&ID(1)' EQ '*').IDSTAR                                 05660000
         AIF   ('&ID(1)' EQ '' ).IDSTAR                                 05670000
         AIF   ('&ID' EQ '*NONE*').DONEID                               05680000
         ID    &ID(1),&ID(2),DATE=&DATE,TIME=&TIME                      05690000
         AGO   .DONEID                                                  05700000
.IDSTAR  ID    &NFS,&ID(2),DATE=&DATE,TIME=&TIME                        05710000
.*-----------------------------------*.                                 05720000
.*  BASE2, BASE3, BASE4              *.                                 05730000
.*-----------------------------------*.                                 05740000
.DONEID  AIF   ('&BASE2' EQ '').NOBASE2                                 05750000
&IHBNX.A DC    A(&NFS+4096)             SECOND BASE REGISTER            05760000
         AIF   ('&BASE3' EQ '').NOBASE2                                 05770000
&IHBNX.Z DC    A(&NFS+8192)             LET'S NOT GET CARRIED AWAY...   05780000
         AIF   ('&BASE4' EQ '').NOBASE2                                 05790000
&IHBNX.Q DC    A(&NFS+12288)            BUT THIS IS GETTING RIDICULOUS  05800000
.NOBASE2 AIF   (('&ZSAVE' NE '*') OR ('&GET1' NE '')).NOSVSTR NO INL SA 05810000
.*OBASE2 AIF   ('&ZSAVE' NE '*').NOSVSTR NO INLINE SAVE AREA            05820000
&IHBNX.S DC    18F'0'                   SAVE AREA                       05830000
&ZSAVE   SETC  '&IHBNX.S'                                               05840000
.NOSVSTR AIF   (NOT &ENVSIM OR &ENVCP OR '&GET2' NE '').NOFKY2          05850000
&IHBNX.F DC    A(0),2H'0',CL100' '      AREA FOR PHONY PARM FIELD       05860000
.*-----------------------------------*.                                 05870000
.*  GETMAIN=                         *.                                 05880000
.*-----------------------------------*.                                 05890000
.NOFKY2  AIF   ('&GET1&GET2' EQ '').NOSPLEN  NO SP & LENGTH             05900000
         AIF   ('&BASE2' NE '').BASE2L                                  05910000
.*       DC    0A(0)                    ALIGNMENT                       05920009
.BASE2L  ANOP                           DON'T NEED ALIGNMENT            05930000
.*HBNX.L DC    AL1(&SP),AL3(&GET1)      GETMAIN SP AND LENGTH           05940009
&IHBNX.L DC    A(&GET1)                 GETMAIN LENGTH                  05950009
.NOSPLEN AIF   ('&EXIT' EQ '').NOEXIT                                   05960000
.*-----------------------------------*.                                 05970000
.*  EXIT= AND RC=                    *.                                 05980000
.*-----------------------------------*.                                 05990000
         SPACE 2                                                        06000000
*=====================================================================* 06010000
&RCRC    SETC  '&RC(1)'                                                 06020000
         AIF   ('&RC' NE '').OKRC1                                      06030000
&RCRC    SETC  '&R15'                                                   06040000
.OKRC1   AIF   ('&RCLOC' EQ '').OKRC3                                   06050000
         AIF   ('&RC'    EQ '').OKRC2                                   06060000
         MNOTE 0,'*** RC= AND RCLOC= MUTUALLY EXCLUSIVE -- RC= IGNORED' 06070000
.OKRC2   ANOP                                                           06080000
&RCRC    SETC  '&RCLOC'                                                 06090000
.OKRC3   ANOP                                                           06100000
&X       SETA  8-K'&RCRC                NUMBER OF BLANKS NEEDED         06110000
         AIF   (&X GT 0).OKRCL                                          06120000
&BLANK1  SETC  ''                                                       06130000
         AGO   .CHAR8RC                                                 06140000
.OKRCL   ANOP                                                           06150000
&BLANK1  SETC  '&BLANK1'(1,&X)                                          06160000
.CHAR8RC ANOP                                                           06170000
&X       SETA  8-K'&EXIT(1)             NUMBER OF BLANKS NEEDED         06180000
         AIF   (&X GT 0).OKEXITL                                        06190000
&BLANK2  SETC  ''                                                       06200000
         AGO   .CHAR8EX                                                 06210000
.OKEXITL ANOP                                                           06220000
&BLANK2  SETC  '&BLANK2'(1,&X)                                          06230000
.CHAR8EX AIF   ('&RC' EQ '').MREGRC                                     06240000
         AIF   ('&RC'(1,1) EQ '(').MREGRC                               06250000
         MNOTE *,'   BRANCH TO "&EXIT" TO EXIT WITH RETURN CODE=&RCRC  X06260000
                 &BLANK1   &BLANK2    *'                                06270000
         AGO   .MRCCONT                                                 06280000
.MREGRC  MNOTE *,'   BRANCH TO "&EXIT" TO EXIT WITH RETURN CODE IN &RCR$06290000
               C &BLANK1   &BLANK2    *'                                06300000
.MRCCONT ANOP                                                           06310000
*=====================================================================* 06320000
&NAME    SETC  '&EXIT'                                                  06330000
         AIF   ('&GET2' EQ '').NOXITUS  SKIP IF NO DSECT NAME SUPPLIED  06340000
         USING &GET2,&R13                                               06350000
.NOXITUS AIF   ('&IKJRLSA' EQ 'NO').NO$RLSA    SKIP IF HE SAID NO       06360000
         AIF   ('&PARSE' EQ '').RLSA$2  CHECK FOR USER SPECIFIED AREA   06370000
         AIF   ('&IKJRLSA' EQ ''   ).RLSA$1  CONTINUE IF NAME OK        06380000
         AIF   ('&IKJRLSA' EQ 'YES').RLSA$1  CONTINUE IF NAME OK        06390000
         MNOTE 8,'IKJRLSA=&IKJRLSA CANNOT BE SPECIFIED WITH PARSE=&PARS$06400000
               E (CODE IKJRLSA=YES/NO OR OMIT IKJRLSA=)'                06410000
.RLSA$1  ANOP                                                           06420000
*        IKJRLSA  TSPARANS              FREE PARSE'S WORK AREAS         06430000
&NAME    IKJRLSA  TSPARANS                                              06440000
         AGO   .RLSA$3                  CONTINUE                        06450000
.RLSA$2  AIF   ('&IKJRLSA' EQ '').NO$RLSA                               06460000
*        IKJRLSA  &IKJRLSA              FREE PARSE'S WORK AREAS         06470000
&NAME    IKJRLSA  &IKJRLSA                                              06480000
.RLSA$3  SPACE 2                                                        06490000
&NAME    SETC  ''                                                       06500000
.NO$RLSA ANOP  ,                                                        06510008
         AIF   ('&DELETE' EQ '').NODEL    SKIP DELETE SECTION           06520008
&X       SETA  1                        INIT TO FIRST ENTRY             06530008
.DEL$LP  AIF   ('&DELETE(&X)' EQ '').NODEL  DONE HERE                   06540008
         AIF   ('&DELETE(&X)' EQ '*').NODELLD   REGULAR                 06550008
         AIF   (NOT &ENVMVS).YESDEL1                                    06560008
&NAME    OSENT01  &DELETE(&X),IKJPTGT,464,DELETE                        06570008
&NAME    OSENT01  &DELETE(&X),IKJPUTL,444,DELETE                        06580008
&NAME    OSENT01  &DELETE(&X),IKJGETL,348,DELETE                        06590008
&NAME    OSENT01  &DELETE(&X),IKJPARS,524,DELETE                        06600008
&NAME    OSENT01  &DELETE(&X),IKJDAIR,732,DELETE                        06610008
&NAME    OSENT01  &DELETE(&X),IKJSTCK,472,DELETE                        06620008
&NAME    OSENT01  &DELETE(&X),IKJSCAN,480,DELETE                        06630008
&NAME    OSENT01  &DELETE(&X),IKJEHCIR,740,DELETE                       06640008
&NAME    OSENT01  &DELETE(&X),IKJEHDEF,736,DELETE                       06650008
&NAME    OSENT01  &DELETE(&X),IKJEFF02,976,DELETE                       06660008
.*****  DO ALL OF THESE HAVE THE SAME X'80' = LOADED DEFINITION????     06670008
         AIF   (NOT &MVSCVT).YESDEL1    IT WAS NOT ONE OF THE ABOVE     06680008
&NAME    SETC  ''                       IT WAS                          06690008
         AGO   .YESDEL3                                                 06700008
.YESDEL1 ANOP  ,                                                        06710008
&NAME    OC    &DELETE(&X),&DELETE(&X)  IS IT HERE?                     06720008
&NAME    SETC  ''                                                       06730008
         BZ    *+10                     NO, SKIP DELETE                 06740008
.YESDEL3 ANOP  ,                                                        06750008
&MVSCVT  SETB  0                        RESET FOR LOAD SECTION          06760008
         MNOTE *,'       DELETE  EPLOC==CL8''&DELETE(&X)'''             06770008
         DELETE  EPLOC==CL8'&DELETE(&X)'                                06780008
         AGO   .DEL$END                 LOOP AGAIN                      06790008
.NODELLD ANOP                                                           06800008
&Y       SETA  1                        INIT FOR FIRST ENTRY            06810008
.DEL$LLP AIF   ('&LOAD(&Y)' EQ '').DEL$END   DONE HERE                  06820008
         AIF   (NOT &ENVMVS).YESDEL2                                    06830008
&NAME    OSENT01  &LOAD(&X),IKJPTGT,464,DELETE                          06840008
&NAME    OSENT01  &LOAD(&X),IKJPUTL,444,DELETE                          06850008
&NAME    OSENT01  &LOAD(&X),IKJGETL,348,DELETE                          06860008
&NAME    OSENT01  &LOAD(&X),IKJPARS,524,DELETE                          06870008
&NAME    OSENT01  &LOAD(&X),IKJDAIR,732,DELETE                          06880008
&NAME    OSENT01  &LOAD(&X),IKJSTCK,472,DELETE                          06890008
&NAME    OSENT01  &LOAD(&X),IKJSCAN,480,DELETE                          06900008
&NAME    OSENT01  &LOAD(&X),IKJEHCIR,740,DELETE                         06910008
&NAME    OSENT01  &LOAD(&X),IKJEHDEF,736,DELETE                         06920008
&NAME    OSENT01  &LOAD(&X),IKJEFF02,976,DELETE                         06930008
.*****  DO ALL OF THESE HAVE THE SAME X'80' = LOADED DEFINITION????     06940008
         AIF   (NOT &MVSCVT).YESDEL2    IT WAS NOT ONE OF THE ABOVE     06950008
&NAME    SETC  ''                       IT WAS                          06960008
         AGO   .YESDEL4                                                 06970008
.YESDEL2 ANOP  ,                                                        06980008
&NAME    OC    &LOAD(&Y),&LOAD(&Y)      IS IT HERE?                     06990008
&NAME    SETC  ''                                                       07000008
         BZ    *+10                     NO, SKIP DELETE                 07010008
.YESDEL4 ANOP  ,                                                        07020008
&MVSCVT  SETB  0                        RESET FOR LOAD SECTION          07030008
         MNOTE *,'       DELETE  EPLOC==CL8''&LOAD(&Y)'''               07040008
         DELETE  EPLOC==CL8'&LOAD(&Y)'                                  07050008
&Y       SETA  &Y+1                     INCR IT                         07060008
         AGO   .DEL$LLP                 LOOP IT AGAIN                   07070008
.DEL$END ANOP  ,                                                        07080008
&X       SETA  &X+1                     NEXT DELETE                     07090008
         AGO   .DEL$LP                  LOOP AGAIN                      07100008
.NODEL   ANOP  ,                                                        07110008
         AIF   ('&RCRC' NE '0').RCNOT0                                  07120008
&NAME    XR    &R15,&R15                SET RETURN CODE ZERO            07130000
&NAME    SETC  ''                                                       07140000
         AGO   .HAVERC                                                  07150000
.RCNOT0  AIF   ('&RCLOC' EQ '').NORCLOC RCLOC NOT GIVEN                 07160000
         AIF   (T'&RCLOC EQ 'F').RCLOCF                                 07170000
         AIF   (T'&RCLOC EQ 'H').RCLOCH                                 07180000
         MNOTE 0,'*** UNKNOWN TYPE FOR RCLOC=&RCLOC -- "F" ASSUMED'     07190000
.RCLOCF  ANOP                                                           07200000
&NAME    L     &R15,&RCLOC              LOAD RETURN CODE                07210000
         AGO   .RCCOM                   GO TO COMMON                    07220000
.RCLOCH  ANOP                                                           07230000
&NAME    LH    &R15,&RCLOC              LOAD RETURN CODE                07240000
         AGO   .RCCOM                   GO TO COMMON                    07250000
.NORCLOC AIF   ('&RC' EQ '').HAVERC     RC IS IN A REG                  07260000
         AIF   ('&RC'(1,1) EQ '(').HAVERC   DITTO                       07270000
&NAME    LA    &R15,&RCRC               LOAD RETURN CODE                07280000
.RCCOM   ANOP                           COMMON POINT                    07290000
&NAME    SETC  ''                                                       07300000
.HAVERC  AIF   ('&GET1' EQ '').NOWORK1  NO DSA TO FREE                  07310000
&NAME    LR    &R1,&R13                 COPY DSA PTR                    07320000
&NAME    SETC  ''                                                       07330000
.NOWORK1 AIF   ('&GET2' EQ '').NOWORK2                                  07340000
         DROP  &R13                                                     07350000
.NOWORK2 AIF   ('&SAVE' EQ '').NODECHN  SKIP IF NO SAVE AREA TO DECHAIN 07360005
&NAME    L     &R13,4(,&R13)            DECHAIN SAVE AREAS              07370000
&NAME    SETC  ''                                                       07380000
.NODECHN AIF   ('&RC' EQ '').WORKE                                      07390004
         AIF   ('&RC'(1,1) NE '(').NOWORKE                              07400000
.WORKE   AIF   ('&RCLOC' NE '').NOWORKE STORE R15                       07410000
         AIF   ('&GET1' EQ '').RCNOT1   RC=(1) IS OK IF NO DYNAMIC AREA 07420000
         AIF   (('&RCRC' NE '&R1') AND ('&RCRC' NE '1')).RCNOT1         07430000
         MNOTE 4,'YOU TURKEY.  RC=(R1) DOESN''T WORK RIGHT IF YOU HAVE $07440000
               A DYNAMIC AREA'                                          07450000
         MNOTE 0,'... I HOPE YOU INSTALLED ZAP...'                      07460000
.RCNOT1  ANOP                                                           07470007
&NAME    ST    &RCRC,16(,&R13)          SET RETURN CODE                 07480007
&NAME    SETC  ''                                                       07490007
         AGO   .WASRGRC                                                 07500000
.NOWORKE ANOP                                                           07510007
&NAME    ST    &R15,16(,&R13)           SET RETURN CODE                 07520007
&NAME    SETC  ''                                                       07530007
.WASRGRC ANOP  ,                                                        07540008
         AIF   ('&GET1' EQ '').NOWRKE2  NO DSA TO FREE                  07550008
         L     R0,&IHBNX.L              GET LENGTH TO FREEMAIN          07560009
        MNOTE '         FREEMAIN  RU,A=(1),LV=(0),SP=&SP  FREE THE DSA' 07570009
         FREEMAIN  RU,A=(1),LV=(0),SP=&SP                               07580009
.NOWRKE2 LM    &R14,&R12,12(&R13)       RESTORE CALLERS REGS            07590000
         AIF   ('&T' NE 'T').BR14                                       07600000
         MVI   12(&R13),X'FF'           FLAG SAVEAREA AS INACTIVE       07610000
.BR14    BR    &R14                     RETURN TO CALLER                07620000
.NOEXIT  SPACE 3                                                        07630000
*=====================================================================* 07640000
*    ENTRY CODE                                                       * 07650000
*=====================================================================* 07660000
&IHBNX.B STM   &R14,&R12,12(&R13)       SAVE CALLER'S REGS              07670000
.*-----------------------------------*.                                 07680000
.* SET UP BASE REGISTERS             *.                                 07690000
.*-----------------------------------*.                                 07700000
         LR    &ZBASE,&R15              LOAD BASE REGISTER              07710000
         AIF   ('&BASE2' EQ '').BASEFIN                                 07720000
         L     &BASE2,&IHBNX.A          LOAD SECOND BASE REGISTER       07730000
.*       USNGX &NFS+4096,&BASE2                                         07740000
         AIF   ('&BASE3' EQ '').BASEFIN                                 07750000
         L     &BASE3,&IHBNX.Z          LOAD BASE3 FOR MLE,BMD,VIC      07760000
.*       USNGX &NFS+8192,&BASE3                                         07770000
         AIF   ('&BASE4' EQ '').BASEFIN                                 07780000
         L     &BASE4,&IHBNX.Q          WHAT'S GOING ON HERE???         07790000
.*       USNGX &NFS+12288,&BASE4                                        07800000
.BASEFIN ANOP                                                           07810000
.*-----------------------------------*.                                 07820000
.* FUTZ WITH THE PARM                *.                                 07830000
.*-----------------------------------*.                                 07840000
&AR      SETC  '&R14'                   SET DEFAULT FOR LENREG=         07850000
&LR      SETC  '&R15'                   SET DEFAULT FOR ADDRREG=        07860000
         AIF   (('&ADDRREG' EQ '') AND ('&LENREG' EQ '')).NO$AR         07870000
         AIF   (('&ADDRREG' NE '') AND ('&LENREG' NE '')).ARLR          07880000
         MNOTE 8,'ADDRREG= AND LENREG= MUST BOTH BE GIVEN'              07890000
.ARLR    ANOP                                                           07900000
&AR      SETC  '&ADDRREG'                                               07910000
&LR      SETC  '&LENREG'                                                07920000
.NO$AR   AIF   ('&PARMREG' EQ '').NOPARMR                               07930000
         LR    &PARMREG(1),&R1          SAVE PARM POINTER               07940014
         AIF   (N'&PARMREG LT 2).NOPARMR                                07950014
         USNGX &PARMREG(2),&PARMREG(1)                                  07960014
.NOPARMR AIF   ('&LPARM' EQ '').NOLPARM                                 07970000
&NAME    L     &LPARM(1),0(,&R1)        PICK UP PARM POINTER            07980014
&NAME    SETC  ''                                                       07990000
         AIF   (N'&LPARM LT 2).NOLPRM2                                  08000014
         USNGX &LPARM(2),&LPARM(1)                                      08010014
.NOLPRM2 AIF   (&ENVTSO).NOLPARM                                        08020014
         AIF   ('&ADDRREG' EQ '').NOLPARM                               08030000
         LH    &LR,0(,&LPARM(1))        GET PARM LENGTH                 08040014
         LA    &AR,2(,&LPARM(1))        POINT PAST LENGTH               08050014
.*-----------------------------------*.                                 08060000
.* GET A SAVE AREA,                  *.                                 08070000
.* EITHER STATIC OR DYNAMIC          *.                                 08080000
.*-----------------------------------*.                                 08090000
.NOLPARM AIF   ('&GET1' EQ '').STATIC                                   08100000
&NAME    L     R0,&IHBNX.L              GET LENGTH TO FREEMAIN          08110009
&NAME    SETC  ''                                                       08120009
         AIF   ('&GETMLOC' NE '').USELOC                                08130013
         MNOTE '         GETMAIN  RU,LV=(0),SP=&SP'                     08140013
         GETMAIN  RU,LV=(0),SP=&SP                                      08150013
         AGO   .NOLOC                                                   08160013
.USELOC  MNOTE '         GETMAIN  RU,LV=(0),SP=&SP,LOC=(&GETMLOC(1),&GE$08170013
               TMLOC(2))'                                               08180013
         GETMAIN  RU,LV=(0),SP=&SP,LOC=(&GETMLOC(1),&GETMLOC(2))        08190013
*                                                                       08200010
.NOLOC   AIF   ('&GETMAIN(3)' NE 'ZERO').USE1                           08210013
         XC    0(18*4,R1),0(R1)         clear save area in dyn area     08220010
.USE1    ST    &R1,8(,&R13)             FORW CHAIN SAVE AREAS           08230000
         ST    &R13,4(,&R1)             BACK CHAIN SAVE AREAS           08240000
         LR    &R13,&R1                 GET NEW SAVE AREA ADDR          08250000
         AIF   ('&GETMAIN(3)' NE 'ZERO').NOZERO2                        08260010
         LA    R14,18*4(,R1)            -> start of area to zero        08270012
         L     R15,&IHBNX.L             get length of dynamic area      08280012
         LA    R1,18*4                  amount already zeroed           08290012
         SR    R15,R1                   remaining length to clear       08300012
         BNP   *+8    >=====+           skip if nothing left            08310012
         SR    R1,R1        |           set source length = 0           08320012
         MVCL  R14,R0       V           clear dynamic area              08330010
.NOZERO2 AIF   ('&GET2' EQ '').CONT3                                    08340010
         USNGX &GET2,&R13                                               08350000
         AGO   .CONT3                                                   08360000
.*-----------------------------------*.                                 08370000
.* CHAIN SAVE AREAS                  *.                                 08380000
.*-----------------------------------*.                                 08390000
.STATIC  AIF   ('&SAVE' EQ '').CONT3    NO SAVE AREA TO BE USED AT ALL  08400005
         AIF   ('&PARMREG(1)' NE '&R15').NOT15                          08410014
&NAME    LA    &R1,&ZSAVE               GET SAVE AREA ADDR              08420000
&NAME    SETC  ''                                                       08430000
         AGO   .USE1                                                    08440000
.NOT15   LA    &R15,&ZSAVE              GET SAVE AREA ADDR              08450000
         ST    &R15,8(,&R13)            FORW CHAIN SAVE AREAS           08460000
         ST    &R13,4(,&R15)            BACK CHAIN SAVE AREAS           08470000
         LR    &R13,&R15                GET NEW SAVE AREA ADDR          08480000
.CONT3   AIF   ('&RCLOC' EQ '').CONT3B                                  08490000
         XC    &RCLOC,&RCLOC            INIT RCLOC TO ZERO              08500000
.CONT3B  SPACE 3                                                        08510000
         AIF   (NOT &ENVCP).NMVCPPL                                     08520000
         MVC   CPPL(CPPLL),0(&PARMREG(1)) COPY CPPL TO SAFE PLACE       08530014
.NMVCPPL AIF   (&FKCALL OR &FKCP).FAKE$A                                08540000
         AIF   ('&ADDRREG' EQ '').LOAD                                  08550000
         AIF   (&ENVTSO).FAKE$A                                         08560000
         L     &AR,0(,&PARMREG(1))      POINT TO PARM (LENGTH)          08570014
         LH    &LR,0(,&AR)              GET PARM LENGTH                 08580000
         LA    &AR,2(,&AR)              POINT PAST LENGTH               08590000
         AGO   .INUSE                                                   08600000
.FAKE$A  SPACE 2                                                        08610000
*  DETERMINE WHETHER WE HAVE BEEN CALLED AS A TSO CP OR THRU CALL       08620000
         SPACE 1                                                        08630000
         AIF   (NOT &MODEBIT).NOMOD01                                   08640008
         MVI   &MODE(1),0               CLEAR FLAG                      08650008
.NOMOD01 ANOP  ,                                                        08660008
         L     &R1,16                   -> CVT                          08670000
         L     &R1,0(,&R1)              -> DISPATCH                     08680000
         L     &R1,4(,&R1)              -> TCB                          08690000
         L     &R1,180(,&R1)            -> JSCB                         08700000
         L     &R1,264(,&R1)            -> PSCB                         08710000
         LA    &R0,0(,&R1)              CLEAR HIGH BYTE                 08720000
         LTR   &R0,&R0                  ANY PSCB?                       08730000
         BZ    &IHBNX.E                 NO - JUMP AROUND NEXT CHECK     08740000
         L     &R1,8(,&PARMREG(1))      POSSIBLE PSCB PTR               08750014
         LA    &R1,0(,&R1)              CLEAR HIGH BYTE                 08760000
         TM    0(&PARMREG(1)),X'80'     ONLY 1 PARM?                    08770014
         BO    &IHBNX.E                 YES - // EXEC OR TSO CALL       08780000
         AIF   (NOT &MODEBIT).NOMOD02                                   08790008
         AIF   (N'&MODE NE 4).NOMOD02   IF NOT FOR CP, IGNORE           08800008
         MVI   &MODE(1),&MODE(4)        ASSUME CP                       08810008
.NOMOD02 ANOP  ,                                                        08820008
         CR    &R0,&R1                  THIRD PARM -> PSCB?             08830000
         AIF   (('&ADDRREG' NE '') OR (&FKCALL)).SETCPR                 08840000
         BE    &IHBNX.C                 YES - WERE CALLED AS A TSO CP   08850000
         AGO   .CONT5                   SKIP AROUND                     08860000
.SETCPR  BNE   &IHBNX.E                 NO - NOT TSO CP                 08870000
         SPACE 2                                                        08880000
*  HAVE BEEN CALLED AS A CP                                             08890000
         SPACE 1                                                        08900000
         AIF   ('&ADDRREG' EQ '').NO$AR2                                08910000
         L     &R1,0(,&PARMREG(1))      CBUF PTR                        08920014
         LH    &LR,0(,&R1)              LENGTH OF CBUF                  08930000
         LH    &AR,2(,&R1)              OFFSET TO FIRST NON-BLANK       08940000
         LA    &LR,0(&LR,&R1)           POINT PAST CBUF                 08950000
         LA    &AR,4(&AR,&R1)           POINT TO FIRST NON-BLANK        08960000
         SR    &LR,&AR                  LENGTH OF PARMS                 08970000
.NO$AR2  AIF   (&FKCALL).CONT4                                          08980000
         B     &IHBNX.C                 CONTINUE                        08990000
         AGO   .CONT5                                                   09000000
.*                                                                      09010000
.CONT4   AIF   (NOT &FKCALL).NOFAKE1                                    09020000
.*-----------------------------------*.                                 09030000
.*  FAKE A CALL                      *.                                 09040000
.*-----------------------------------*.                                 09050000
         STH   &LR,&IHBNX.F+4           SET FAKED LENGTH OF PARM        09060000
         LTR   &R1,&LR                  COPY LENGTH                     09070000
         CH    &R1,=H'100'              PARM TOO BIG?                   09080000
         BNH   *+8                      NO - OK                         09090000
         LA    &R1,=H'100'              TOO BIG - USE TRUNCATE AT MAX   09100000
         LTR   &R1,&R1                  TEST PARM LENGTH                09110000
         BNP   *+16                     SKIP IF NO PARM       >=====+   09120000
         BCTR  &R1,0                    -1 FOR EXECUTE              |   09130000
         EX    &R1,*+4                  MOVE THE PARM TO WORKAREA   |   09140000
         MVC   &IHBNX.F+6(0),0(&AR)     << EXECUTED >>              |   09150000
         LA    &R1,&IHBNX.F+4           GET FAKE PARM ADDR    <=====+   09160000
         ST    &R1,&IHBNX.F             STORE IT                        09170000
         LA    &PARMREG(1),&IHBNX.F     GET ADDR OF FAKED PARM          09180014
         MVI   &IHBNX.F,X'80'           SET END OF LIST BIT             09190000
         B     &IHBNX.C                 CONTINUE                        09200000
         AGO   .CONT5                                                   09210000
.NOFAKE1 AIF   (NOT &FKCP).LOAD                                         09220000
.CONT5   SPACE 2                                                        09230000
*  HAVE BEEN CALLED FROM BATCH, OR TSO CALL                             09240000
         SPACE 1                                                        09250000
&IHBNX.E L     &AR,0(,&PARMREG(1))      POINT TO PARM LENGTH            09260014
         LH    &LR,0(,&AR)              GET LENGTH OF PARM              09270000
         LA    &AR,2(,&AR)              POINT PAST LENGTH               09280000
         AIF   (NOT &FKCP).NOFAKE2                                      09290000
*  CPPL=ADDR(CBUF,UPT,PSCB,ECT)                                         09300000
         LA    &R1,&IHBNX.F             GET ADDR OF FAKE CBUF           09310000
         ST    &R1,CPPLCBUF             SET INTO CPPL                   09320000
         AIF   (NOT &MODEBIT).NOMOD03                                   09330008
         AIF   (N'&MODE LT 3).NOMOD03   IF NOT FOR CP, IGNORE           09340008
         MVI   &MODE(1),&MODE(3)        ASSUME TSO CALL                 09350008
.NOMOD03 ANOP  ,                                                        09360008
         LTR   &R1,&R0                  COPY PSCB ADDR                  09370000
         BNZ   &IHBNX.T                 CONTINUE IF IT EXISTS           09380000
         SPACE 2                                                        09390000
*  THE ENVIRONMENT AT THIS POINT IS BATCH (NOT TMP IN BACKGROUND)       09400000
         AIF   (NOT &MODEBIT).NOMOD04                                   09410008
         MVI   &MODE(1),&MODE(2)        MUST BE BATCH                   09420008
.NOMOD04 ANOP  ,                                                        09430008
         XC    &IHBNX.F(256),&IHBNX.F   CLEAR FIRST PART OF PHONY AREA  09440000
         XC    &IHBNX.F+256(&IHBNX.K-256),&IHBNX.F+256   AND THE REST   09450000
         LA    &R0,&IHBNX.P             -> PHONY PSCB                   09460000
         ST    &R0,CPPLPSCB             SET INTO FAKE CPPL              09470000
         LA    &R0,&IHBNX.U             -> PHONY UPT                    09480000
         ST    &R0,&IHBNX.P+52          SET INTO FAKE PSCB              09490000
.*10-81  MVI   &IHBNX.P+57,L'&IHBNX.U   SET LEN OF UPT IN PSCB          09500003
         MVI   &IHBNX.P+57,&LQ&IHBNX.U  SET LEN OF UPT IN PSCB          09510003
         OI    &IHBNX.U+12,X'40'        SET FLAG: NO PROMPTING          09520000
         LA    &R1,&IHBNX.V             -> PHONY ECT                    09530000
         B     &IHBNX.X                                                 09540000
         SPACE 2                                                        09550000
&IHBNX.T ST    &R0,CPPLPSCB             SET INTO FAKE CPPL              09560000
         MVC   CPPLUPT(4),52(&R1)       MOVE UPT ADDR INTO CPPL         09570000
         L     &R1,48(,&R1)             PSCB.RLGB                       09580000
         L     &R1,256(,&R1)            RLGB.ECT                        09590000
&IHBNX.X ST    &R1,CPPLECT              SET ECT ADDR IN CPPL            09600000
         SPACE 1                                                        09610000
*  CBUF=Y(CBUF_LEN,OFFSET_TO_NONBLANK),C'CMDNAME',C' ',C'OPERANDS'      09620000
         MVC   &IHBNX.F+4(8),12(&R1)    MOVE CMD NAME TO CBUF           09630000
         MVI   &IHBNX.F+4+8,C' '        PUT IN DELIMETER                09640000
         NI    28(&R1),X'7F'            TURN OFF "NO OPERANDS" BIT      09650000
         LTR   &LR,&LR                  ANY OPERANDS?                   09660000
         BP    *+8                      YES - SKIP                      09670000
         OI    28(&R1),X'80'            SET "NO OPERANDS" BIT IN ECT    09680000
         SPACE 1                                                        09690000
         LA    &R1,8+1                  OFFSET TO FIRST NON-BLANK       09700000
         STH   &R1,&IHBNX.F+2           SET IN FAKE CBUF                09710000
         LA    &R0,8+1+4(,&LR)          GET LENGTH OF CBUF              09720000
         STH   &R0,&IHBNX.F             SET INTO FAKE CBUF              09730000
         LTR   &R1,&LR                  ANY OPERANDS?                   09740000
         BNP   *+16                     NO - SKIP             >=====+   09750000
         BCTR  &R1,0                    -1 FOR EXECUTE              |   09760000
         MVC   &IHBNX.F+4+8+1(0),0(&AR) << EXECUTED >>              |   09770000
         EX    &R1,*-6                  MOVE THE PARM TO FAKE CBUF  |   09780000
         LA    &PARMREG(1),CPPL         POINT TO CPPL         <=====+   09790014
.NOFAKE2 SPACE 2                                                        09800000
&NAME    SETC  '&IHBNX.C'                                               09810000
.*-----------------------------------*.                                 09820000
.*  LOAD=                            *.                                 09830000
.*-----------------------------------*.                                 09840000
.LOAD    AIF   ('&LOAD' EQ '').NOLOAD                                   09850000
&X       SETA  1                                                        09860000
.LOAD$LP AIF   ('&LOAD(&X)' EQ '').NOLOAD                               09870000
         AIF   (NOT &ENVMVS).YESLOAD                                    09880000
&NAME    OSENT01  &LOAD(&X),IKJPTGT,464                                 09890000
&NAME    OSENT01  &LOAD(&X),IKJPUTL,444                                 09900000
&NAME    OSENT01  &LOAD(&X),IKJGETL,348                                 09910000
&NAME    OSENT01  &LOAD(&X),IKJPARS,524                                 09920000
&NAME    OSENT01  &LOAD(&X),IKJDAIR,732                                 09930000
&NAME    OSENT01  &LOAD(&X),IKJSTCK,472                                 09940000
&NAME    OSENT01  &LOAD(&X),IKJSCAN,480                                 09950000
&NAME    OSENT01  &LOAD(&X),IKJEHCIR,740                                09960000
&NAME    OSENT01  &LOAD(&X),IKJEHDEF,736                                09970000
&NAME    OSENT01  &LOAD(&X),IKJEFF02,976                            SDM 09980000
.*****  DO ALL OF THESE HAVE THE SAME X'80' = LOADED DEFINITION????     09990000
         AIF   (NOT &MVSCVT).YESLOAD    IT WAS NOT ONE OF THE ABOVE     10000000
&NAME    SETC  ''                       IT WAS                          10010000
.YESLOAD MNOTE *,'       LOAD  EPLOC==CL8''&LOAD(&X)'''                 10020000
&NAME    LOAD  EPLOC==CL8'&LOAD(&X)'                                    10030000
&NAME    SETC  ''                                                       10040000
.ADDRSAV ST    &R0,&LOAD(&X)                                            10050000
.SKIPASV SPACE 1                                                        10060000
         AIF   ('&LOAD(&X)' NE 'IKJDAIR').NO$DAIR                       10070000
&GDAIR   SETB  1                        DAIR LOADED                     10080000
         AGO   .LOADNXT                                                 10090000
.NO$DAIR AIF   ('&LOAD(&X)' NE 'IKJPARS').NO$PARS                       10100000
&GPARSE  SETB  1                        PARSE WAS LOADED                10110000
&PARNAME SETC  'IKJPARS'                                                10120000
.NO$PARS ANOP                                                           10130000
.LOADNXT ANOP                                                           10140000
&X       SETA  &X+1                                                     10150000
         AGO   .LOAD$LP                                                 10160000
.*-----------------------------------*.                                 10170000
.*  PL=                              *.                                 10180000
.*-----------------------------------*.                                 10190000
.NOLOAD  AIF   ('&PL' EQ '').NO$PL$1                                    10200000
&X       SETA  1                                                        10210000
.PLLOOP  AIF   ('&PL(&X)' NE 'CSCAN').PL2                               10220000
&CSPL    SETB  1                                                        10230000
         AGO   .PLNEXT                                                  10240000
.PL2     AIF   ('&PL(&X)' NE 'PARSE').PL3                               10250000
&PARS    SETB  1                                                        10260000
         AGO   .PLNEXT                                                  10270000
.PL3     AIF   ('&PL(&X)' NE 'DAIR').PL4                                10280000
&DAIR    SETB  1                                                        10290000
         AGO   .PLNEXT                                                  10300000
.PL4     AIF   ('&PL(&X)' NE 'IO').PL5                                  10310000
&IO      SETB  1                                                        10320000
         AGO   .PLNEXT                                                  10330000
.PL5     AIF   ('&PL(&X)' NE 'MESSAGE').PL6                             10340000
&MSG     SETB  1                                                        10350000
         AGO   .PLNEXT                                                  10360000
.PL6     MNOTE 4,'PL=&PL(&X) UNKNOWN -- IGNORED'                        10370000
.PLNEXT  ANOP                                                           10380000
&X       SETA  &X+1                                                     10390000
         AIF   (&X LE N'&PL).PLLOOP                                     10400000
.*                                                                      10410000
.*                                                                      10420000
.NO$PL$1 AIF   ('&PARSE(2)' EQ '').PLNOTM                               10430000
&MSG     SETB  1                                                        10440000
.PLNOTM  AIF   (NOT (&CSPL OR &PARS OR &DAIR OR &IO OR &MSG)).NOSETPL   10450000
&NAME    L     &R1,CPPLUPT              GET UPT PTR                     10460000
&NAME    SETC  ''                                                       10470000
         L     &R2,CPPLECT              GET ECT PTR                     10480000
         LA    &R3,TSECB                GET ECB PTR                     10490000
         SR    &R0,&R0                  GET A 0                         10500000
         ST    &R0,TSECB                CLEAR ECB                       10510000
.*                                                                      10520000
         AIF   (NOT &CSPL).NOSETC                                       10530000
         SPACE 1                                                        10540000
         STM   &R1,&R3,CSPL             INITIALIZE CSPL (UPT, ECT, ECB) 10550000
         ST    &R0,CSFLG                ZERO CSFLG                      10560000
         LA    &R0,CSFLG                                                10570000
         ST    &R0,CSPLFLG                                              10580000
         LA    &R0,CSOA                                                 10590000
         ST    &R0,CSPLOA                                               10600000
.*                                                                      10610000
.NOSETC  AIF   (NOT &PARS).NOSETP                                       10620000
         STM   &R1,&R3,PPL              INITIALIZE PPL (UPT, ECT, ECB)  10630000
         LA    &R0,TSPARANS             PTR TO PARSE ANSWER PLACE       10640000
         ST    &R0,PPLANS                                               10650000
         ST    &R13,PPLUWA              PARSE USER WORK AREA PTR        10660000
         XC    TSPARANS(4),TSPARANS     AVOID DUPLICATE IKJRLSA         10670000
.*                                                                      10680000
.NOSETP  AIF   (NOT &DAIR).NOSETD                                       10690000
         STM   &R1,&R3,DAPL             INITIALIZE DMPL (UPT, ECT, ECB) 10700000
         MVC   DAPLPSCB(4),CPPLPSCB                                     10710000
.*                                                                      10720000
.NOSETD  AIF   (NOT &IO).NOSETI                                         10730000
         STM   &R1,&R3,IOPL             INITIALIZE IOPL (UPT, ECT, ECB) 10740000
.*                                                                      10750000
.NOSETI  AIF   (NOT &MSG).NOSETM                                        10760000
         ST    &R3,MPLECB               INIT MPL ECB PTR                10770000
         LA    &R0,CPPL                                                 10780000
         ST    &R0,MPLCPPL                                              10790000
         LA    &R0,MPLCSECT             PTR TO MSG CSECT                10800000
         ST    &R0,MPLCSECP                                             10810000
         XC    MPLSW(MPLZL),MPLSW       INITIALIZE REMAINING MPL TO 0   10820000
.NOSETM  ANOP                                                           10830000
.NOSETPL AIF   ('&PARSE(1)' EQ '').NOPARSE                              10840000
         SPACE 2                                                        10850000
*********************************************************************** 10860000
*                                                                     * 10870000
*  PARSE THE COMMAND LINE                                             * 10880000
*                                                                     * 10890000
*********************************************************************** 10900000
         SPACE 2                                                        10910000
         MNOTE *,'       TSPARSE CBUF=(CPPLCBUF,I),PCL=(=V(&PARSE(1)),I$10920000
               ),'                                                      10930000
         MNOTE *,'               SYNAD=&PARSE(2),ENTRY=&PARNAME'        10940000
         TSPARSE  CBUF=(CPPLCBUF,I),PCL=(=V(&PARSE(1)),I),             $10950000
               SYNAD=&PARSE(2),ENTRY=&PARNAME                           10960000
&NAME    SETC  ''                                                       10970000
         SPACE 5                                                        10980000
         AIF   ('&PARSE(2)' EQ '').NOPARSE   NO ERROR ANALYSIS ROUTINE  10990000
&NAME    SETC  '&IHBNX.P'                                               11000000
         SPACE 2                                                        11010000
         B     &NAME                    SKIP AROUND PARSE ERR ANALYSIS  11020000
         SPACE 6                                                        11030000
*********************************************************************** 11040000
*                                                                     * 11050000
*  PARSE ERROR ANALYSIS SUBROUTINE                                    * 11060000
*                                                                     * 11070000
*********************************************************************** 11080000
         TSPARERR                                                       11090000
         SPACE 6                                                        11100000
.NOPARSE AIF   ('&NAME' EQ '').NONAME                                   11110000
&NAME    DS    0H                                                       11120000
.NONAME  ANOP                                                           11130000
.INUSE   INUSE                                                          11140000
         SPACE 2                                                        11150000
         AIF   ('&PL' EQ '' AND NOT &ENVCP).MEND                        11160000
         AIF   ('&GET2' NE '' OR '&MACRO' EQ 'YES').PLOK1               11170000
         MNOTE 8,'*** PL= INVALID WITHOUT SECOND OPERAND OF GETMAIN='   11180000
         MEXIT                                                          11190000
.PLOK1   EJECT                                                          11200000
&GET2    DSECT                                                          11210000
         DS    18F                      SAVE AREA                       11220000
         AIF   ('&PL' EQ '').NO$PL$2                                    11230000
TSECB    DS    F                        ECB FOR TSO SERVICES            11240000
.NO$PL$2 SPACE 2                                                        11250000
*        TSCPPL                                                         11260000
         TSCPPL                                                         11270000
         AIF   (NOT &ENVSIM).NOFAKED                                    11280000
&IHBNX.F DS    2H,CL256                 AREA FOR FAKE CBUF              11290000
&IHBNX.P DS    XL72                     AREA FOR PHONY PSCB             11300000
&IHBNX.V DS    XL40                     AREA FOR PHONY ECT              11310000
&IHBNX.U DS    XL24                     AREA FOR PHONY UPT              11320000
&IHBNX.K EQU   *-&IHBNX.F               LENGTH OF PHONY BLOCKS TO CLEAR 11330000
.NOFAKED AIF   ('&PL' EQ '').NO$PL$3                                    11340000
         AIF   ('&PRINT' NE 'NOGEN').YESGEN1                            11350000
         PRINT NOGEN                    SUPPRESS THE DSECTS             11360000
.YESGEN1 AIF   (NOT &CSPL).NOTCSPL                                      11370000
         SPACE 2                                                        11380000
         MNOTE *,'       TSCSPL'                                        11390000
         TSCSPL                                                         11400000
.NOTCSPL AIF   (NOT &PARS).NOTPARS                                      11410000
         SPACE 2                                                        11420000
         MNOTE *,'       TSPPL'                                         11430000
         TSPPL                                                          11440000
.NOTPARS AIF   (NOT &DAIR).NOTDAIR                                      11450000
         SPACE 2                                                        11460000
         MNOTE *,'       TSDAPL'                                        11470000
         TSDAPL                                                         11480000
DAPBAREA DS    22F                      AREA FOR DAIR PARAMETER BLOCK   11490000
         SPACE 2                                                        11500000
         MNOTE *,'       TSDMPL'                                        11510000
         TSDMPL                                                         11520000
.NOTDAIR AIF   (NOT &IO).NOTIO                                          11530000
         SPACE 2                                                        11540000
         MNOTE *,'       TSIOPL'                                        11550000
         TSIOPL                                                         11560000
.NOTIO   AIF   (NOT &MSG).NOTMSG                                        11570000
         SPACE 2                                                        11580000
         MNOTE *,'       TSMPL'                                         11590000
         TSMPL                                                          11600000
.NOTMSG  AIF   ('&PRINT' NE 'NOGEN').NOTMSGX                            11610000
         PRINT GEN                                                      11620000
.NO$PL$3 ANOP  ,                                                        11630008
.NOTMSGX AIF   ('&LOAD' EQ '').NOLOAD2                                  11640000
         SPACE 2                                                        11650000
&X       SETA  1                                                        11660000
.NXTLOAD AIF   (&X GT N'&LOAD).NOLOAD2                                  11670000
&LOAD(&X) DS   A                                                        11680000
&X       SETA  &X+1                                                     11690000
         AGO   .NXTLOAD                                                 11700000
.NOLOAD2 SPACE 2                                                        11710000
         AIF   ('&MACRO' NE 'YES').NOMACRO                              11720000
         SPACE 3                                                        11730000
*********************************************************************** 11740000
*                                                                     * 11750000
*  DYNAMIC STORAGE DEFINED BY USER TSWORK MACRO                       * 11760000
*                                                                     * 11770000
*********************************************************************** 11780000
         SPACE 1                                                        11790000
         TSWORK                                                         11800000
         SPACE 2                                                        11810000
&GET1    EQU   *-&GET2                  LNTH OF DYNAMIC AREA TO GETMAIN 11820000
         SPACE 2                                                        11830000
.NOMACRO AIF   (NOT &DAIR).NODAPBS                                      11840000
         AIF   (&GDAIRM).NODAPBS                                        11850000
&GDAIRM  SETB  1                                                        11860000
         AIF   ('&PRINT' NE 'NOGEN').GEN4                               11870000
         PRINT NOGEN                    SAVE SOME PAPER                 11880000
.GEN4    EJECT                                                          11890000
         MNOTE *,'       IKJDAP08'                                      11900000
         IKJDAP08                                                       11910000
DAPB08L  EQU   *-DAPB08                                                 11920000
         SPACE 5                                                        11930000
         MNOTE *,'       IKJDAP18'                                      11940000
         IKJDAP18                                                       11950000
DAPB18L  EQU   *-DAPB18                                                 11960000
         SPACE 5                                                        11970000
         MNOTE *,'       IKJDAP1C'                                      11980000
         IKJDAP1C                                                       11990000
DAPB1CL  EQU   *-DAPB1C                                                 12000000
         SPACE 5                                                        12010000
         MNOTE *,'       IKJDAP30'                                      12020000
         IKJDAP30                                                       12030000
DAPB30L  EQU   *-DAPB30                                                 12040000
         AIF   ('&PRINT' NE 'NOGEN').NODAPBS                            12050000
         PRINT GEN                      RESTORE                         12060000
         SPACE 10                                                       12070000
.NODAPBS ANOP                                                           12080000
&NFS     CSECT                                                          12090000
         SPACE 3                                                        12100000
.MEND    MEND                                                           12110000
