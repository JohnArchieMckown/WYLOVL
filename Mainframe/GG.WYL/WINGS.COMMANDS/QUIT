;
;  Wings - OSFILE terminate sub-task nicely
;
xproc () begin

   declare number  x.pathno
   declare string  open_str
   declare string  open_opt
   declare string  msg, rc, ses_lib
   declare string  token, value

   on error cmd 'pcall err_routine'
   on attn  cmd 'pcall err_routine'

   if (vartype('ses.wings_library') eq 'UNDEFINED') \
      ses.wings_library = ''

   if (ses.wings_library eq '') \
       ses.wings_library = 'wyl.gg.wyl.wings.commands'

   msg = 'yourtag=&(fpath) noheader wait=5'
   syscall path_open(x.pathno, msg, rc)
   if (rc ne 'OK') begin
      syscall path_close(x.pathno)
      if (rc eq 'TIMEOUT') begin
         comm The WINGS file server is not available at this time
      end
      else begin
         comm Path error on open = &(rc)
      end
      xreturn
   end

   syscall path_control(x.pathno, 'wait=20', msg, rc)
   if (rc ne 'OK') begin
      if (rc ne 'INVALID OPTION') begin
         comm path_control=&(rc)
      end
   end

   open_str = sub('OSFILE_TERM:',1,16)
   open_opt = ''
   msg = open_str || open_opt

   syscall path_write(x.pathno, ' ', msg, rc)
   if (rc ne 'OK') begin
      syscall path_close(x.pathno)
      comm Path write error - &(rc)
      xreturn
   end

   syscall path_read(x.pathno, ' ', msg, rc)
   if (rc ne 'OK') begin
      syscall path_close(x.pathno)
      comm path read error = &(rc)
      xreturn
   end

   msg = substr(msg,17)
   comm &(msg)
   syscall path_close(x.pathno)

end



;
;  Version error cleanup routine
;
proc err_routine() begin
   syscall path_close(x.pathno)
   xreturn
end
