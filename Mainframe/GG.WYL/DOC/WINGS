WINGS notes                                      mcl 1998/02/09

Several notes on WINGS may be found in WYL.GA.MCL.WINGS.LIB:

  CATDOC   description of catalog/uncatalog/recatalog functions
  PARMDOC  complete list of WINGS parameters and functions
  PROTOCOL diagram/specs of WYLBUR/WINGS client/server protocols
  SHOSPEC  information on FILESHOW (SHO CAT, SHO DSN) output
           (also in this library)

Additional documentation is in WYL.GG.WYL.WINGS.DOC.

Various xproc used to test WINGS features and debug, etc., are in
WYL.GG.WYL.WINGS.COMMANDS, and non-production versions of these, plus
some others, are in WYL.GA.MCL.WINGS.COMMANDS.

Production source/maclib are WYL.GG.WYL.WINGS.SOURCE and .MACLIB;
development versions are WYL.GA.MCL.WINGS.ASM and .MACLIB.
--------------------------------------------------------------------
[61383] FRI 11/03/00 09:33 FROM M.Lawrence "Mark C. Lawrence":
        [edited]

To shut down Wings cleanly, issue

'P WINGS0' command,

WINGS should terminate cleanly after all outstanding
I/Os has finished.   Then restart WINGS0.


REPLY ON 11/03/00 09:23 FROM M.Lawrence "Mark C. Lawrence": Re: WINGS0 ENQ
hang info

That's the correct procedure -- stop it, then restart.  This will
not interrupt any user work that is in progress.

If it won't shut down cleanly in a few minutes, then you may need to
cancel it.

--------------------------------------------------------------------
WINGS catalog services --                        rev 1998/02/09 mcl

XCALL WYL.GG.PUB.WINGS.COMMANDS#CATALOG/ options

Options required are NAME (always), CATLG=NO for uncatalog, VOLUME for
catalog.  UNIT required if volume is not online.  FILESEQ may be included for
tape files.  Note that WINGS keywords may not be abbreviated except as shown.

Detailed parameter specs:

CATLG={YES | NO | CAT | RECAT | UNCAT}

   type of action to perform; default is CAT.  CAT and YES mean the
   same thing, UNCAT and NO mean the same thing.

NAME=<DATA SET NAME>

   qualified or unqualified; see NTYPE below.  WYL.GG.UUU names will
   always be recognized as qualified, as will names beginning $.

   NTYPE={WYLBUR,TSO,EXACT)

   type of name:  WYLBUR, TSO, or fully-qualified.  WYLBUR is
   default

   ACCOUNT=account

   of user owning the file; used to construct dsname if
   NTYPE=WYLBUR.

VOLUME=VOLSER | VOL=VOLSER

   volume for the catalog entry.

UNIT={DISK|3380|3390|TAPE|T6250|T3420|3420|T3480|3480|T3490E|3490E}

   specifies the unit type for the catalog entry.  May be omitted when the
   specified volume is an online disk.

FILESEQ=<nnnn>

   the file sequence number of a data set that is to be cataloged on a tape
   volume.
--------------------------------------------------------------------
WINGS:  summary of commands and options

         this is WYL.GA.MCL.WINGS.LIB(PARMDOC) and also
                 WYL.GG.WYL.WINGS.DOC(PARMDOC)

revision history:
1998/01/14     mcl  add RECAT option of FILE_CATLG
1996/10/08     mcl  add FILE_CATLG options, VTYPE; delete VOVERIDE
1996/09/27     mcl  add UNIT_INFO
1996/09/20     mcl  remove CATLG=RECAT, add NTYPE=BOTH, update TEMP
1995/08/22     mcl  fix a typo; document REQTYPE options
1995/04/03     mcl  VTOC_SHOW rewrite, now option of FILESHOW
1995/01/10     mcl  REPORT, VOLUME options
1995/01/05     mcl  FILESHOW EXCLUDE, THROUGH options
1995/01/04     mcl  update FILESHOW
1994/11/29     mcl  FORMAT=MEMBER in SHOW_DIR
1994/11/21     mcl  ERASE option on SCRATCH
1994/11/16     mcl  Correct RECFM options
1994/11/15     mcl  Revised ALOCUNIT, added DIRBLKS, DIRMEMS
1994/10/28     mcl  extracted from WINGS.ASM(OSFILE)

WINGS - Major commands

         FILE_ALLOCATE
         FILE_CATLG
         FILE_CLOSE
         FILE_EOF
         FILE_LSPACE
         FILE_OPEN
         FILE_RENAME
         FILE_SCRATCH
         FILE_SHOW
         FILE_WRITE
         RACF_REFRESH
         SHOW_DIR
         SHOW_VERSION
         UNIT_INFO

Note that one WYLBUR command may use several of these, e.g. a USE command
would do a FILE_OPEN, read some data, then do FILE_CLOSE.  See the separate
note on the WINGS protocols.


Following are the options processed by FILE_OPEN; these are also processed for
SHOW_DIR, FILE_ALLOCATE, and FILE_SHOW, (though some options are irrelevant to
some commands).  Note that commands may not be abbreviated, except where shown
explicitly.

*  ACCOUNT=account

of user requesting the service.  Always supplied by WYLBUR.  Needed for access
verification.

*  ALOCUNIT= TRK|CYL|KB|MB

for ALLOCATE command, the space quantity unit:  Tracks, Cylinders, Kbytes,
or Mbytes.

*  BLKSIZE=<VALUE>

for FILE_WRITE and ALLOCATE commands.

*  BYTECNT=byte count

for FILE_WRITE command, estimated file size in bytes; used to calculate space.

*  CATLG={YES | NO | CAT | RECAT | UNCAT}

for FILE_WRITE, ALLOCATE, and FILE_CATLG commands; default is CAT.  CAT and
YES mean the same thing; NO and UNCAT mean the same thing.

*  CHANGFMT={YES | NO}

for FILE_WRITE replace function, OK to change RECFM/LRECL?

*  CNAME=<DATA SET NAME>

The fully qualified name of "*".

*  DATACLAS=<CLASS>

for allocate and save, a data class for SMS (not in use)

*  DIRBLKS=<VALUE>

for allocate, the number of directory BLOCKS to allocate.

*  DIRMEMS=<VALUE>

for allocate, the number of directory MEMBERS to allocate.  This is converted
to blocks at the rate of 3 members per block.

*  DIRQTY=<VALUE>

for allocate, the number of directory blocks to allocate.  Replaced by the
DIRBLKS/DIRMEMS options.

*  EXPAND={YES | NO}

for library save, OK to get secondary allocation? (default=no).  Not yet used
by WYLBUR.

*  GROUP=group

used in dsname resolution; may be discontinued.

*  LINECNT=LINE COUNT

for save commands, number of lines to be written.

*  LRECL=<VALUE>

for save and allocate commands

*  MGMTCLAS=<CLASS>

for save and allocate commands, SMS management class (not yet used)

*  NAME=<DATA SET NAME>

for read, write, allocate, scratch, show dir:  the filename.

*  NTYPE={WYLBUR,TSO,EXACT,BOTH}

type of name:  WYLBUR, TSO, or fully-qualified.  For FILESHOW, affects all
dsn-type qualifiers (FROM, EXCLUDE, TO, THROUGH, LIKE), and defines the
high-level qualifier to be used (WYL.gg.uuu. or gg$uuu.) when LIKE is omitted.
BOTH is default for (and only valid with) FILESHOW; WYLBUR is default for all
other commands.

*  PASSCHK={YES | NO}

YES means that client has asked for and verified password of account that owns
the data.  used to allow access when requesting user has only read access.

*  PATHBUFL=value

Specifies the length of the client's path buffer (default is 16384) for data
seg'd to the path by WINGS.  Generally relevant only for READ requests.

*  PRIQTY=<VALUE>

for allocate, the primary allocation value

*  RECFM={F|FA|V|VA|EDIT}

for save or allocate, the record format.  Blocked records are always assumed,
thus RECFM=F really means RECFM=FB.

*  REQTYPE={READ|WRITE|APPEND|REPLACE|VERIFY|UPDATE}

type of OPEN request:

   READ, WRITE are normal use/save processing.

   APPEND is for sequential file only, and is not yet implemented.

   REPLACE is the same as WRITE but permits replacing an existing
   dataset or member.

   VERIFY does open for READ without transferring any data back to the
   client; it is used to verify usability of a file.  It can also test
   whether the caller has WRITE access to the file (see VTYPE below).

   UPDATE (not yet implemented) is used to read and then write a file.
   The file remains open after reading until the write is completed or
   the client requests a close.

*  SECQTY=<VALUE>

for allocate or save, the secondary allocation quantity.

*  SETGROUP=GROUP

*  SETLIB=<default lib>

*  SETUSER=USER

used in name resolution; may be discontinued.

*  SHARE={YES | NO}

for save, SHARE=YES opens file DISP=SHR so allows update while some other task
has file enqueued (like old NOENQ option)

*  STORCLAS=<CLASS>

for save or allocate, the SMS storage class for the file.

*  TEMP={YES | NO}

for WRITE or ALLOCATE, requests data set be saved as temporary.  Ignored for
READ.  For FILESHOW by catalog, displays only files cataloged on the defined
temporary volume(s).  For FILESHOW by volume, causes defined TEMP volumes to
be searched.

*  TITLE=<Libary member title string>

*  USER=user

used in dsname resolution, may be discontinued.

*  VOLUME=VOLSER
*  VOL=VOLSER

specifies volume for commands that use it.  For WRITE, ALLOCATE, or READ of an
uncataloged file, defines a volume to use.  For FILESHOW (from catalog),
limits display to files that are cataloged on (or a portion of which are on)
the specified volume; may be a partial volume name e.g. VOL=PUB.  For FILESHOW
from VTOC, the name of the volume to be searched.  For UNIT_INFO, the volume
serial of the unit to be displayed.  For FILE_CATLG, the volume for the
catalog entry.

*  VTYPE={READ|WRITE}

for REQTYPE=VERIFY, the type of access to verify.  VTYPE=READ (the default)
checks for READ access and opens the file for input to verify usability.
VTYPE=WRITE checks for WRITE access (and still opens the file for input).

*  WHOLEPDS={YES | NO}  (option on SCRATCH)

for scratch of entire library.



*  Table for FILE_SCRATCH special options

*  ERASE={YES|NO}

to erase the data when scratching a file (sequential or whole pds)

*  RETAIN={YES|NO}

to retain RACF profile of scratched file; default is no

*  OVRD={YES|NO}

to override expiration date when scratching file



*  Options table for SHOW DIRECTORY options

*  FROM=<Member Name>

*  LIKE=<Member Name>

*  TO  =<Member Name>

*  FORMAT={MEMBER|TERSE|HEX|ALL|OLD}

format in which directory info is returned.  options may be abbreviated to 3
characters.  MEMBER returns only member names; TERSE also shows the titles of
WYLBUR-format entries.  HEX shows the "user data" field of each entry in
hex-dump format.  ALL shows create date, last update date/time, last update
user ID, and title; for ISPF directory entries, the version/mod level, size,
initial size, and change count are shown in place of the title.
OLD mimics the old "show dir all" format, showing time and date last changed,
userid, and title.


*  Options table for FILE_SHOW

*  LIKE=<Dataset name stem>

*  {FROM|EXCLUDE}=<Dataset name stem>

*  {TO|THROUGH}=<Dataset name stem>

LIKE, FROM, EXCLUDE, TO, and THROUGH limit the range of names reported.
Default is all files stored under the caller's account.  The NTYPE option is
honored, that is, NTYPE=TSO with no other option will find datasets qualified
by GG$UUU instead of WYL.GG.UUU.  The LIKE string, when qualified, may not
exceed 40 characters for CATTYPE=VTOC.

*   REPORT={DSN|VOL|DSCB}
*  CATREPT={DSN|VOL|DSCB}

indicates the level of information returned.  DSN returns only the names; VOL
returns unit/volume info as well; DSCB returns info from DSCBs as in SHOW DSN
ALL.  For VTOC_SHOW, DSN and VOL do the same thing since unit and volume info
is always known in VTOC_SHOW.

*  CATTYPE={DISK|TAPE|DATA|GDG|ALL|VTOC}

For FILE_SHOW, the type of catalog entries to be returned:  disk files, tape
files, all dataset entries (disk+tape), GDG (and other non-dataset) info, or
all of the above.  CATTYPE=VTOC does a "show VTOC" instead of "show catalog",
searching the VTOC of a specified volume.

*  ONLY={YES | NO}

If YES, return info only about the file specified by LIKE.  Implies
REPORT=DSCB and CATTYPE=DATA.  If VOLUME is specified and the file is not
cataloged, the specified volume will be searched.

*NOTE:  When searching a VTOC, it is possible to include "wildcard" characters
in the LIKE string according to the following rules.  If the string contains
one of these characters, it can be up to 44 characters long rather than 40 as
is normally the case.  The characters are:

         *     a single * represents a single qualifier, or zero or more
               unspecified characters within a qualifier, e.g.
               WYL.GG.UUU.*.LOAD or WYL.GG.UUU.*LIB

         **    two ** represent zero or more qualifiers, e.g. SYS2.** would
               find a dataset called "SYS2" or any dataset called SYS2.xxxx
               where xxxx is any character string.

         %     represents a single unspecified character. e.g. SYS%.** would
               find all SYS datasets.

*  Options for FILE_CATLG:

FILE_CATLG requires a data set name (NAME and any related options).  The
default operation is CAT; to uncatalog or recatalog, specify CATLG=UNCAT or
CATLG=RECAT respectively.  For CAT or RECAT, the VOLUME parameter is also
required, and, if the specified volume is not online, the UNIT parameter:

*  UNIT={DISK|3380|3390|TAPE|T6250|T3420|3420|T3480|3480|T3490E|3490E}

specifies the unit type for the catalog entry.  Ignored when the specified
volume is an online disk.  For a tape dataset, you can also specify:

*  FILESEQ=<nnnn>

the file sequence number of a data set that is to be cataloged on tape.


*  Options for UNIT_INFO:

*  VOLUME=volser|UNIT=uuuu
*  FORMAT={STD|HEX|RAW}

VOLUME or UNIT indicates the device whose UCB information is to be displayed,
either the volume serial or the 3 or 4-digit unit address.  One (and only one)
of these options must be specfied.  FORMAT indicates the desired report
format:  STD (the default) is a brief formatted display of the basic UCB
information; HEX is a hexadecimal dump of the UCB base segment and common
segment; RAW is an unformatted (binary) copy of the base segment, common
segment, and, (if present) DASD extension.
--------------------------------------------------------------------
wings protocol                                  rev. 1998/02/09 mcl

All communication is via SUZAN path; pathname is set by the init file
used to start WINGS.  Currently, path name is WINGSV00 for production
WINGS on SYSA and SYSB, TESTWING for test WINGS on any system.

READ FILE:
----------
WYLBUR (client)                    WINGS (server)

FILE_OPEN:      NAME=xx REQTYPE=READ ...     >

         <  FILE_OPEN:      NAME=WYL.GG.UUU.MMM(XXX)
         <  FILE_READ:      <data>
             ..
             ..
         <  FILE_READ:      <data>
         <  FILE_EOF:

FILE_EOF:          >
FILE_CLOSE:        >

         <  FILE_CLOSE:


WRITE/REPLACE/APPEND FILE:
--------------------------
WYLBUR (client)                          WINGS (server)

FILE_OPEN:      NAME=xx REQTYPE=WRITE/REPLACE ..  >

         <  FILE_OPEN:      NAME=WYL.GG.UUU.MMM(XXX) [CATALOG] [VOLUME=vvv]

FILE_WRITE:     <data>    >
             ..
             ..
FILE_WRITE:     <data>    >
FILE_EOF:                 >

         <  FILE_EOF:    MSG= ...

FILE_CLOSE:               >

         <  FILE_CLOSE:


ALLOCATE FILE:
--------------
WYLBUR (client)                          WINGS (server)

FILE_ALLOCATE:  NAME=xx PRIQTY=...           >

         <  FILE_ALLOCATED: NAME=WYL.GG.UUU.MMM [CATALOG] [VOLUME=vvv]


UPDATE FILE:   [not yet implemented]
----------
WYLBUR (client)                    WINGS (server)

FILE_OPEN:      NAME=xx REQTYPE=UPDATE ...   >

         <  FILE_OPEN:      NAME=WYL.GG.UUU.MMM
         <  FILE_READ:      <data>
             ..
             ..
         <  FILE_READ:      <data>
         <  FILE_EOF:

FILE_REWIND:       >               NOTE:  If client sends
                                   FILE_CLOSE here, close is
                                   done just as for normal READ
         <  FILE_OPEN:

FILE_WRITE:     <data>    >
             ..
             ..
FILE_WRITE:     <data>    >
FILE_EOF:                 >

         <  FILE_EOF:    MSG= ...

FILE_CLOSE:               >

         <  FILE_CLOSE:


OPEN OPTIONS, OTHER PACKET OPTIONS
----------------------------------

All options are sent in the form of KEYWORD=VALUE.  The keywords are fixed
(not abbreviated) in upper case.  The values are blank delimited and may be
quoted with single or double quotes.  Unrecognized keyword/value pairs in
general are ignored.

The WYLBUR client may send any of numerous options on the FILE_OPEN command;
see PARMDOC for the complete list of these options.

The client expects a NAME= return on FILE_OPEN: from wings that includes a
fully qualified name of a file.  (this is later sent as the CNAME= parm on
subsequent accesses as is appropriate)  The client will also accept MSG= on
FILE_EOF:  The client will (generally) print any returned message.  WYLBUR
expects a "xxxx saved" type message on a successful FILE_EOF on a
WRITE/REPLACE ..  type operation.  Similarly see the note on ERRORS below.

ERRORS
------

Errors detected from WINGS are sent to WYLBUR client as shown in this example.

       <  FILE_ERROR:    ERRID=EXISTS  ERRMSG='file XXXX already exists. '

If there is additional information available, then the ERRMSG text ends with a
+ and there follows an ERRDATA item, as in the following:

       <  FILE_ERROR:    ERRID=EXISTS  ERRMSG='XXXX: file exists.+'
                         ERRDATA='Dataset XXXX already exists on PUB201'

The path is closed immediately after the FILE_ERROR: packet is sent or
received.  If the client detects an error, the client  will close the path
without notification (in the middle of whatever).


FILE DATA
---------
Data is many lines concatenated:

   <4 bytes len=M+12>< 8 char bytes line no>< M bytes text>
   <4 bytes len=N+12>< 8 char bytes line no>< N bytes text>
    ...
   <4 bytes len=Z+12>< 8 char bytes line no>< Z bytes text>

--------------------------------------------------------------------
options:  unn land chars=tn15
FILESHOW report format                                     rev. 1999/08/25

this is member SHOSPEC of WYL.GA.MCL.WINGS.LIB and also WYL.GG.WYL.WINGS.DOC
an 80-column version is saved in SYS3.SYSTEM.DOCLIB

This document describes the format of the report produced by the WINGS
FILESHOW command.  The definitive description of this area is in the data area
mapped by member DSNINFO of WINGS.MACLIB.  Below is a record layout, with
some examples following.

....v....1....v....2....v....3....v....4....v....5....v....6....v....7....v....8....v....9....v....A....v....B....v....C....v....D....v....E....v....F....v....G....v....H....v....I....v....J....v....K....
c ddddddddddddddddddddddddddddddddddddddddddddvvvvvv tffffccc uuuuuuuu dddddddddd uuuuu.uu aaaaa xxx ooo rrrrr lllll bbbbb kkk yyyy/mm/dd yyyy/mm/dd C uuuuuuuu aaaaaaaa yyyy/mm/dd
A WYL.GA.MCL.DATA.CTO.BADDIR                  SYS205 D    001 3010200F 3390       00003.24 00029 001 PO  FB    00080 03120 000 1994/03/01 1994/08/15 N 00000018 000001650000/00/00
A WYL.GA.MCL.DATA.FULLTAPE                    AS3205 T0001002 32008003 3420-6250
+ WYL.GA.MCL.DATA.FULLTAPE                    AS3206 T0001    32008003 3420-6250
A WYL.GA.MCL.WINGS.TESTINIT                   RLGPAK D    001 3010200E 3380      M
B WYL.GA.MCL.TESTDATA.GDG                                 002
A WYL.GA.MCL.TESTDATA.GDG.G0001V00            STR008 D    001 3010200F 3390       00000.11 00002 001 PS  U     27998 27998 000 1996/08/05 1996/11/15 N 00000006 00000114 0000/00/00 GENERAL STANDARD

  Columns     Description
  -------     -----------

    1/1      Catalog entry type:
                A - Non-VSAM data set
                B - Generation Data Group base
                C - VSAM cluster entry
                D - VSAM data set
                G - Alternate index
                I - VSAM index
                M - Master catalog
                P - System paging space
                R - Path entry
                U - User catalog
                V - VSAM volume entry
                X - Alias name
                + - second or subsequent volume entry for this dataset   (1)
                0 - no catalog entry, dsn and volume were supplied       (5)
    3/46     Fully qualified data set name (dataset entry), GDG name
             (GDG base)
   47/52     Volume serial (dataset entry)
   54/54     Device type:  (dataset entry)
                D - Disk
                T - Tape
   55/58     File sequence number (tapes only)          (2)
   59/61     Number of volumes (dataset entry),         (3)
             number of existing generations (GDG base)
   63/70     UCBTYPE info from catalog
   72/81     Device description
   82/82     error code or blank.  Blank=normal case.  Other codes are:
               A = dataset migrated ("Archived") by HSM
               M = volume not Mounted
               D = DSCB not on volume
               X = unknown rcode from OBTAIN; the return code is displayed
                   in the "tracks allocated" field.
               Z = unknown code from SUPERLOCATE [catalog lookup]; the
                   return code is displayed in the "tracks allocated" field.
               If any error, DSCB information (cols. 83/168) fields are blank.

For tape files, the remaining columns are currently blank.  For disk files,
the following are filled in (see note 4).  For non-dataset entries, these
fields may have other information displayed in future implementations.

   83/90     Number of tracks used as decimal number nnnnn.nn
   92/96     Number of tracks allocated
   98/100    Number of extents
  102/104    Data set organization (DSORG)
  106/110    Record format (RECFM)
  112/116    Record length (LRECL)
  118/122    Block size (BLKSIZE)
  124/126    Key length (KEYLEN)
  128/137    Creation date, yyyy/mm/dd
  139/148    Last reference date, yyyy/mm/dd
  150/150    changed since last backup? Y/N
  152/159    Kbytes used
  161/168    Kbytes allocated
  170/179    Expiration date, yyyy/mm/dd
  181/188    Storage Class (SMS)
  189/196    Management Class (SMS)
  197/204    Data Class (SMS)
  205/235    Reserved for future use

For multi-volume datasets on either disk or tape, there will be an entry for
each volume, in volume sequence order.  The first entry will by type "A" and
will show the volume count; the second and subsequent entries will show entry
type of + and will include all relevant information.  Entries will be
presented in order by volume sequence number.

Code that processes these reports should not depend on the contents of any
fields not specifically defined.  While columns omitted above are normally
blank, programs should not depend on this, as information could be added in
these "blank" fields.  Likewise, fields shown as omitted for certain entry
types may have information in future implementations.

Notes:
(1) this is a change from the previous SHOW CAT INT, which only listed the
    first volume.
(2) This is a slight change from previous SHOW CAT INT:  this field was three
    digits, and is now extended on the left to four.  There was an error in
    the HELP SHOW CAT text, this field was described as the volume sequence
    number.
(3) previously this was reported only for tape.
(4) This field and those following (through "changed") are similar to the old
    SHO DSN INT format, with the following changes:
         a. the fields start in a different location
         b. space used reported to .01 track, SHO DSN used integer value
         c. SHO DSN used mm/dd/yy format for dates.
(5) If a specific dsname is supplied (SHOW DSN ONLY=dsname) and a volume is
    also supplied, the specified data set is reported on even if not
    cataloged.  If CATTYPE=VTOC is specified (as in SHOW DSNAMES ON <volume>),
    no catalog lookup is attempted.  In such cases the catalog entry type is
    "0", the UCBTYPE information is that of the actual volume, and no SMS
    information (storage class, etc.) is listed.
--------------------------------------------------------------------
revised 1998/02/18 MCL
What follows are some minimal documentation on the
WINGS MONITOR/DEBUGGER commands.  Remember some is
better than none.  - SCH

To use debug/monitor commands:
  > define db as 'xcall wyl.gg.wyl.wings.commands#db /'

Command summary:

    Debug commands:
       OPEN <pathname> - open path to specified debugger,
                         see below
       DEBUG <task-name>  - become debugger
       SI  show info    SD   show debug    QUIT debugging
       SC  show core    SA   show address  SP  show psw
       DC  disassemble  SG   show GPR      SS  show symbols
       PC  patch core   PG   patch GPR     PIA patch IA
       GO  resume       GOTO resume @loc   ST  set trap
       S9  show SVC99 info
       STS show traps   CT   clear trap    CTS clear all traps
       MONITOR <command> - pass command to monitor

    Monitor commands:
       DEFINE <task-name> MODULE <module-name> ...
       START <task-name> | ALL
       similarly STOP, CANCEL, SUSPEND, RESUME, STATUS
       MONITOR SC <task-name> <address>
       similarly SA (show address), DC (disassemble core), PC

    Note: To issue debug commands, you must become the debugger.
       (Only one debugger/debuggee subtask pair is allowed.)
       Monitor commands are valid at all times.  DEBUG, SI,
       SD, QUIT commands are valid at all times.


DB HELP will show all commands.  DB MONITOR HELP will show the
monitor commands in more detail.  Note that all commands must be
prefaced with 'DB ' as it is the DB exec file that passes the
commands to the wings debugger via a suzan path connection.

The command 'DB WAIT' is not shown but is used to wait for
asynchronous output from the debugger.  It is used to wait for a trap
to be hit.  'DB GO' does an automatic wait so there is no need to do
a wait before each expected trap.

Note that most of the debug commands are similar to the ORVYL
debugging commands described in the ORVYL REFERENCE MANUAL.  Look
there for syntax details.

DB OPEN <pathname> provides a way to connect to a specific WINGS when
multiple WINGS jobs are running.  Each WINGS job includes a monitor
task with a unique path name; see the relevant MONINIT file for the
name.  At present, each production WINGS has a monitor task with name
WDEBUGn.  So to debug a WINGS2 subtask, you could DB OPEN WDEBUG2.
(Init files are in SYS2.WINGS.PARMS and are MONINITn for job WINGSn)

This is also useful when debugging a test WINGS so your FPATH can be
to a production WINGS -- helps avoid sawing off the limb you're
sitting on.

A sample session:
   > ;
   > define db as 'xcall wyl.gg.wyl.wings.commands#db / '
   > db si
   No debugging session active.
   -----
   WINGS01  waiting   GG.SCH  REQs=3 BSENT=44274 BRECV=495
   WINGS02  waiting   .  REQs=0 BSENT=0 BRECV=0
   WINGS03  inactive          REQs=0 BSENT=0 BRECV=0
   WINGS04  inactive          REQs=0 BSENT=0 BRECV=0
   WINGS05  inactive          REQs=0 BSENT=0 BRECV=0
   DEBUG01  waiting   GG.SCH  REQs=0 BSENT=2382 BRECV=309
   DEBUG02  busy      GG.SCH  REQs=0 BSENT=33 BRECV=18
   DEBUG03  waiting   .  REQs=0 BSENT=0 BRECV=0
   > db debug wings01
   DEBUG02 (GG.SCH) is debugging WINGS01
   > db ss
   00006000 GVT
   0002E000 TVT
   00036A00 OSFSCB
   0003B000 OSFILE
   0004AB20 UTILS
   0004D288 SCANNER
   0004DE10 PATH
   0004E658 DUMPER
   0004F3F0 DBESPIE
   0004FB08 MVSUTILS
   0AD01B84 UPATH
   0AD01DFC DYNAMBF
   > db st osfile+0bcb0
   Trap 1 set at (90DF) instruction.
   > db sts
        1  OSFILE+0BCB0  (90DF)
   > db wait
   Trap hit at OSFILE+0BCB0
   > db sg 10 0
    R10 = 800460E4 OSFILE+0B0E4  R11 = 0002E000 TVT
    R12 = 00006000 GVT           R13 = 0005D0A8
    R14 = 800466FA OSFILE+0B6FA  R15 = 00000000
     R0 = FFFFFFEC                R1 = 0AD2500C
   > db sc @11+010 010
   0002E010  00000002 E6C9D5C7 E2F0F140 D6E2C6C9 |....WINGS01 OSFI|
   > db go
   *** <--- break hit
   EXEC break at line 107 of EXEC: WYL.GG.WYL.WINGS.COMMANDS#DB
   > db quit
   All traps cleared.
   >


More command examples:
DB ST @14                            set trap at address in R14
DB PG 11 @4+10                       patch R11 with 10(R4)
DB SC OSFILE+0100 0200               show core at loc for 0200 bytes
DB MONITOR DC DEBUG01 DBMAIN+0C42 16 disassemble core (monitor ver)
DB SD                                show debugger/debuggee status
DB SG 0 15                           show all registers
DB DC *                              disassemble core at curr addr
DB GOTO *+8                          resume execution at curr addr+8
DB GOTO @7+0AB8                      resume execution at R7+0AB8


More info:
Sometimes if the path to the debugger will get trashed.
This happens for example if WINGS is cancelled.  Just retype
'DB SI' a couple of times. If the response is out of sync
type 'DB WAIT'  that will get any output queued by the path.
'DB CLOSE' will close the path to the debugger. (it does not
pass a command to the debugger).  Also 'SHOW WPATH' will show
if any paths are open to the debugger.

Good Luck -- CHoyt
--------------------------------------------------------------------
UNITINFO (formatted) layout                      1996/09/27

1-4      unit address, hex digits
5        blank
6        status A=allocated O=online F=offline
7        blank
8-10     additional status info
11       blank
12-15    unit type, e.g. DISK
16       blank
17-22    volser (tape or disk)
23       blank
24-56    description, varies with device type ---

 DISK devices --
24-31    model number e.g. 3390-3
32       blank
33-38    number of cylinders on volume
39-44    blank
45-47    usage PRI/PUB/STO/SMS
48       blank
49-56    misc. notes

 Printers --
24-43    model
44       blank
45-48    UCS setting
49       blank
50-53    FCB setting

Following are some examples of formatted output:

....v....1....v....2....v....3....v....4....v....5....
044C A     DISK SYSA01 3390-2     2227      PRI Shared
042D A     DISK STR001 3390-3     3340      SMS Shared
0BD4 A     DISK PUB001 3390-2     2227      STO Shared
0A40 O     TAPE S26139 3480
000F O     U.R.        3211 Printer              1106
0802 O     U.R.        3211 Printer         TN   6

UNITINFO HEX format

1-8      UCB address, 8 hex digits
9        blank
10-116   base segment of UCB (12 words) as 12 groups of 8 hex digits,
         groups separated by blanks.

UNITINFO RAW format (values shown are displacements, not columns)

0-3      UCB address
4-51     base segment
52-83    common extension
84-131   DASD class extension (disk devices)
84-123   UCS extension (printer devices)
