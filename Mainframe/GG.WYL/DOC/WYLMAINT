SYS3.SYSTEM.DOCLIB#WYLMAINT                  Last updated 10/25/01
                                                   Susan Plass

                     WYLBUR Maintenance process

Note: In 1996, only TESTWYL had mixed C and assembler modules;
      WYLBUR did not. Thus TESTWYL could not be migrated
      to WYLBUR and the WYLCC and WYLLINK procedures have not
      been modified for this.  Mike then backed out the C modules
      from TESTWYL, leaving the C version on Lindy.  I don't
      currently know where they live.

1)  Add the following define commands to your #logon exec:

    def  WYLASM   as  "xcall wyl.gs.wyl.lib#wylasm /" rep
    def  WYLBACK  as  "xcall wyl.gs.wyl.lib#wylback /" rep
    def  WYLCC    as  "xcall wyl.gs.wyl.lib#wylcc  /" rep
    def  WYLINST  as  "xcall wyl.gs.wyl.lib#wylinst /" rep
    def  WYLLINK  as  "xcall wyl.gs.wyl.lib#wyllink /" rep
    def  WYLUPD   as  "xcall wyl.gs.wyl.lib#wylupd /" rep

2)  Create user WYLBUR as follows and test:

    For WYLBUR modules still in assembler language:

    a)  Use source module from WYL.GS.WYL.TESTWYL.SOURCE#name if
        there, or WYL.GS.WYL.WYLBUR.SOURCE#name if none in TESTWYL.

    b)  Edit the module and save it as WYL.gg.uuu.WYLname.

    c)  Assemble the module for testing using the command:

                      WYLASM uuuWYL name DECK

    For WYLBUR modules in C:

    a)  Use source module from WYL.GS.WYL.TESTWYL.C#name if
        there, or WYL.GS.WYL.WYLBUR.C#name if none in TESTWYL.

        If you are modifying any #include files, get them from
        WYL.GS.WYL.TESTWYL.C.INCLUDE or WYL.GS.WYL.WYLBUR.C.INCLUDE.

        Save the modules into your own WYLBUR include library
        which must be called WYL.gg.uuu.WYLBUR.C.INCLUDE.
        (Use the same LRECL, BLKSIZE, etc for all your WYLBUR
         C datasets as the corresponding TESTWYL/WYLBUR C
         datasets).

    b)  Edit the module and save it in your library called
        WYL.gg.uuu.WYLBUR.C#name. You should also have a
        library called WYL.gg.uuu.WYLBUR.C.OBJ for object
        modules.

    c)  Compile the module for testing using the command:

                      WYLCC uuuWYL name DECK

    d)  Repeat for each source module to be changed.
<.page>
    e)  Link the object decks created with the TESTWYL load module
        into a user load library named WYL.gg.uuu.LINKLIB using
        the command:

                           WYLLINK uuuWYL

    f)  Start uuuWYL and test.

3)  Create a TESTWYL containing the changes and test:

    a)  Transfer the edited source into WYL.GS.WYL.TESTWYL.SOURCE
        (and/or WYL.GS.WYL.TESTWYL.C) using the command:

                           WYLUPD TESTWYL

        Warning: This procedure will only update the C or assembler
        source files. If you have any #includes or private
        WYLBUR.MACLIB macros that are to update TESTWYL.C.INCLUDE
        or TESTWYL.MACLIB, you'll have to copy these over by hand
        for now into the respective libraries.

    b)  Assemble/compile the module(s) for testing using the
        command:

                         WYLASM TESTWYL name DECK
                              or
                         WYLCC TESTWYL name DECK

        (depending on whether or not the module is a C module
         or an assembler module).

    c)  Repeat for each source module to be changed.

    d)  Link the object decks created with the WYLBUR load module
        into the TESTWYL test library WYL.GS.WYL.TESTWYL.TEST.LOAD
        using the command:

                          WYLLINK TESTWYL

    e)  Test that load module from the test library, eg.

                   S SLPWYL,WYL=TESTWYL,VER=TEST

    f)  Install the test module into the production TESTWYL library
        WYL.GS.WYL.TESTWYL.SYSA.LINKLIB using the comand:

                          WYLINST TESTWYL

    g)  Schedule a reload of TESTWYL to install this.  The exec
        WYL.GS.WYL.LIB#TOTEST is useful to notify TESTWYL users
        that you are reloading.

<.page>
4)  Migrate the changes to the Lindy copy and use rcs to keep track
    of those changes:

    In the MVS/wylbur directory you'll see a directory
    called RCS and a directory called maclib. In the maclib
    directory is a directory called RCS.

    An RCS directory contains files used in building any
    version of a particular source file. (RCS stands for
    Revision Control System - you can issue the "man rcs"
    command on lindy for more information). If you look
    in the MVS/wylbur/RCS directory, you'll see all the
    wylbur source files (the names are in lower case followed
    by '.asm,v'). DO NOT DIRECTLY TOUCH this directory. It
    is manipulated via RCS commands. From RCS commands you
    can find out the various changes that have been made to
    a module, and you can reconstruct a complete copy of any
    modules source as of a given revision level if you wish.

    Here's how I use RCS with WYLBUR:

    a)  When you're ready to do a WYLUPD WYLBUR to migrate
        the current TESTWYL into WYLBUR, first FTP each
        source file in WYL.GS.WYL.TESTWYL.SOURCE to
        your MVS/wylbur directory.

        For example, let's say TESTWYL has a new MAIL module.

        Do this:

             USE WYL.GS.WYL.TESTWYL.SOURCE#MAIL

             SAVE "MVS/wylbur/MAIL" on lindy net

        Repeat for each module in TESTWYL.SOURCE.

    b)  If you have defined new macros that will be moved
        from TESTWYL.MACLIB to WYLBUR.MACLIB, save a copy of
        each new macro in the MVS/wylbur/maclib directory
        as follows:

             USE WYL.GS.WYL.TESTWYL.MACLIB#MYMAC

             SAVE "MVS/wylbur/maclib/MYMAC" on lindy net

    c)  Logon to your lindy account if you haven't done so
        already.

    d)  Change your working directory to MVS/wylbur like so:

           cd MVS/wylbur
<.page>
    e)  For each module in the MVS/wylbur directory, you need
        to checkout the current copy in the repository, rename
        the new module to the checked-out copy and store it
        back into the repository with a message describing the
        change.

        Using the MAIL module above as an example, you would
        do the following:

        a) co -l mail.asm

           This command ("checkout locked") checks out
           the current copy of the mail.asm file that will
           be updated by the new MAIL module. It will create
           a mail.asm file in the MVS/wylbur directory. This
           mail.asm is a copy of the current WYLBUR MAIL
           module found in WYL.GS.WYL.WYLBUR.SOURCE (which of
           course will be changed when you migrate TESTWYL
           to WYLBUR).

        b) mv MAIL mail.asm

           This command overwrites the checked-out mail.asm
           module with the new MAIL module. The resulting
           module is still called mail.asm

        c) ci mail.asm

           This command ("checkin") updates the RCS repository
           with the new MAIL module. When you issue this command,
           it will prompt you to type in an informative message
           which will go into the log for the module that
           describes in general terms what are the changes for
           this version of the module. You can type in as many
           lines of description as you want. You end the description
           by typing a '.' character by itself on a new line (the
           prompt actually tells you this).

        That's it - you've updated the MAIL module in the RCS
        repository. Repeat the above steps for any other TESTWYL
        modules you've downloaded.

    f)  Do the same for any new macros as follows (using MYMAC above
        as an example:

        a) cd maclib (changes into the MVS/wylbur/maclib directory
                      assuming you're already in the MVS/wylbur
                      directory)

        b) co -l mymac.mac   (note that macros use '.mac' instead
                              of '.asm')

        c) mv MYMAC mymac.mac

        d) ci mymac.mac

<.page>
    g)  If you want to see the log of changes that have been made to
        any WYLBUR module or macro, you can do the following:

        1)  Make sure you're in the MVS/wylbur or MVS/wylbur/maclib
            directory depending on whether you're looking for
            information about a source module or a macro.

        2)  Issue the command: rlog <name> where <name> is
            <module>.asm for a source module or <macro>.mac for a
            macro.

            For example: rlog mail.asm   to see all changes logged
            for the MAIL module

                      or

            rlog mymac.mac  to see all changes logged for the MYMAC
            macro.


    That pretty much covers it. For more information, you should
    read a book on RCS or look on the web for an introduction to
    what RCS is and how it can be used. One good starting point I
    found by searching for "Using RCS" on google seems to be:

         http://www.nmt.edu/tcc/help/tool/rcs/rcs.html


5)  Create a WYLBUR containing the changes and test:

    a)  Transfer the edited source into WYL.GS.WYL.WYLBUR.SOURCE
        member (name) using the command:

                           WYLUPD WYLBUR

    b)  Assemble all WYLBUR source for testing using the command:

                       WYLASM WYLBUR ALL DECK

    c)  Link the object decks created into a WYLBUR load module in
        the WYLBUR test library WYL.GS.WYL.WYLBUR.TEST.LOAD using
        the command:

                           WYLLINK WYLBUR

    e)  Test that load module from the test library, eg.

                   S SLPWYL,WYL=WYLBUR,VER=TEST

    f)  Install the test module into the production WYLBUR library
        WYL.GS.WYL.WYLBUR.SYSA.LINKLIB using the command:

                           WYLINST WYLBUR

    g)  Schedule a reload of WYLBUR to install this.

<.page>
6)  Backup all WYLBUR source, object, and load libraries at a stable
    level and cleanup for next iteration:

    a)  Run backup job using the extended exec WYL.GS.WYL.LIB#WYLBACK;
        verify that tapes were correctly created.

    b)  Run cleanup job to prep for next version.


7)  Migrate SYSA WYLBUR to SYSB:

    a)  Copy SYSA WYLBUR to SYSB TESTWYL using the job in
        WYL.GS.WYL.LIB#RLGTEST.

        When you're ready to put the SYSB TESTWYL into
        production as WYLBUR on SYSB:

    b)  Copy SYSB TESTWYL to SYSB WYLBUR using the job in
        WYL.GS.WYL.LIB#RLGINST. RUN THIS JOB SYSAFF=SYSB!

    c)  For MILTEN, there is no test step -- just use the job
        WYL.GS.MIL.LIB#RLGINST to copy directly from SYSA production
        to SYSB production.



--------------------------------------------------------------------

MILTEN maintenance is performed as above using the WYLBUR exec
files.  The account used to for data sets and the module prefixes
are, however, MIL in place of WYL.

--------------------------------------------------------------------

The WYLBUR volume list module is compiled by using the source job
stream from WYL.GS.WYL.LIB#WVOLSYSA or from WYL.GS.WYL.LIB#WVOLSYSB.
Edit the job stream and replace it, then run.  It will replace the
existing copy in WYL.GS.WYL.SYSA.LINKLIB on SYSA, or in
WYL.GS.WYL.RLG.LINKLIB(WVOLRLG) on SYSB.

--------------------------------------------------------------------
