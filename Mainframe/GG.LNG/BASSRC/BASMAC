./ ADD NAME=AREA
*2/10/73
*        DEFINITION OF USER AREA:
*
ABEG     DS    0F
         DC    CL4'AREA'
*
********************************* NUMBER OF BYTES IN ENTIRE USER AREA:
*                                 -----------------------------------
AREAMAX  EQU   131072                                      (12/4/72/RB)
*
********************************* TABLES CREATED AT COMPILE TIME:
*                                 ------------------------------
ADATAMAX EQU   16000             16000 BYTES FOR CONSTANTS (12/4/72/RB)
*                                 (NUMBERS,STRINGS,AND DATA)
ACODEMAX EQU   6*3000             3000 PSEUDO-CODES        (12/4/72/RB)
AXXXXMAX EQU   3*ACODEMAX         FIGURE 3 TO 1 RATIO       (2/5/71/DG)
ALINEMAX EQU   4*1000             1000 STATEMENTS          (12/4/72/RB)
ACPTRMAX EQU   ALINEMAX           ALWAYS 1 TO 1 RATIO       (2/5/71/DG)
AFORCMAX EQU   4*300              150  FOR-NEXT PAIRS      (12/4/72/RB)
ASTRGMAX EQU   16384              4 PAGES FOR STRINGS       (1/9/72/RB)
AGARBMAX EQU   4096               1 PAGE FOR GARBAGE COL.   (1/9/72/RB)
*
********************************* TABLES CREATED AT RUN TIME:
*                                 --------------------------
AFORRMAX EQU   20*14              14   NESTED FORS         (12/4/72/RB)
ATEMPMAX EQU   4*100              100  TEMPS FOR ARITHMETIC
ARETMAX  EQU   2*20               20   NESTED GOSUBS       (12/4/72/RB)
*
********************************* WORK SPACE:
*                                 ----------
AWORKMAX EQU   300                WORK SPACE
*                                 (USED BY EXPR AND
*                                  MAT ROUTINES AND
*                                  ARITHMETIC FUNCTIONS).
*
AINTMAX  EQU   80                 ARITHMETIC FUNCTION
*                                 ROUTINES USE THIS SPACE
*                                 AND THE INTERRUPT HANDLER
*                                 MAKES INQUIRIES OF IT.
*
APBUFMAX EQU   620                PRINT ROUTINE BUFFER    (2/10/73/RB)
*
ACODEMA6 EQU ACODEMAX/6                            **CUNY CHANGE***
ALINEMA4 EQU ALINEMAX/4                            **CUNY CHANGE***
AFORCMA4 EQU AFORCMAX/4                            **CUNY CHANGE***
AXXXXM18 EQU AXXXXMAX/18                           **CUNY CHANGE***
AFORRM20 EQU AFORRMAX/20                           **CUNY CHANGE***
ATEMPMA4 EQU ATEMPMAX/4                            **CUNY CHANGE***
ARETMAX2 EQU ARETMAX/2                             **CUNY CHANGE***
********************************* SAVE AREAS:
*                                 ----------
*              NORMAL OS ENTRY CONVENTIONS WILL BE OBSERVED
*              FOR SAVING AND RESTORING REGISTERS.
*              HOWEVER, IF A PROGRAM REQUIRES A SAVE AREA
*              IT WILL BUMP THE CURRENT REGISTER 13 BY 72
*              TO ESTABLISH A NEW ONE.  WHEN THE PROGRAM IS
*              COMPLETED, REGISTER 13 MUST BE DECREMENTED BY
*              72.
*              IT WILL BE THE CONTROL PROGRAM'S RESPONSIBILITY
*              TO:
*                      LA     13,ASAVE
*              AND,
*                      LA     USER,AREA        (USER = REG 11)
*              FOR EACH PROGRAM IT CALLS.
*
ASAVE    DS    (10*18)F           MAXIMUM OF 10 SAVE AREAS.
*
********************************* POINTERS TO TABLES:
*                                 ------------------
         DS    0F                                         (2/10/73/RB)
ASTRGBEG DC    AL4(ASTRG-ABEG)                            (2/10/73/RB)
ASTR1PTR DC    F'0'                                       (2/10/73/RB)
ASTR2PTR DC    AL4(ASTRGMAX)                              (2/10/73/RB)
ASTRGSIZ DC    AL4(ASTRGMAX)                              (2/10/73/RB)
         DS    0F                                         (2/10/73/RB)
AGARBBEG DC    AL4(AGARB-ABEG)                            (2/10/73/RB)
AGARBPTR DC    F'0'                                       (2/10/73/RB)
AGARBSIZ DC    AL4(AGARBMAX)                              (2/10/73/RB)
         DS    0F
ADATABEG DC    AL4(ADATA-ABEG)
ADATAPTR DC    F'0'                          POINTER TO NEXT ENTRY
ADATASIZ DC    AL4(ADATAMAX)
ADATALST DC    F'0'                          FOR TRANS
ADATARUN DC    F'0'                          FOR EXEC
ACONSBEG DC    AL4(ADATA-ABEG+ADATAMAX-4)
ACONSPTR DC    AL4(ADATAMAX-44)              POINTER TO LAST ENTRY
         DS    0F
ACODEBEG DC    AL4(ACODE-ABEG)
ACODEPTR DC    F'0'                          POINTER TO NEXT ENTRY
ACODESIZ DC    AL4(ACODEMAX)
         DS    0F
ALINEBEG DC    AL4(ALINE-ABEG)
ALINEPTR DC    F'0'                          POINTER TO NEXT ENTRY
ALINESIZ DC    AL4(ALINEMAX)
         DS    0F
AFORCBEG DC    AL4(AFORC-ABEG)
AFORCPTR DC    F'0'                          POINTER TO NEXT ENTRY
AFORCSIZ DC    AL4(AFORCMAX)
         DS    0F
AFORRBEG DC    AL4(AFORR-ABEG)
AFORRPTR DC    F'-12'                        POINTER TO LAST ENTRY
AFORRSIZ DC    AL4(AFORRMAX)
AFORRORG DC    A(*-*)   EXEC INSERTS FORR'S BEGINNING ADDR.(3/01/71/DG)
AFORREND DC    A(*-*)   EXEC INSERTS FORR'S ENDING ADDRESS (3/01/71/DG)
         DS    0F
ATEMPBEG DC    AL4(ATEMP-ABEG)
ATEMPPTR DC    F'0'                          POINTER TO NEXT ENTRY
ATEMPSIZ DC    AL4(ATEMPMAX)
ATEMPORG DC    A(*-*)   EXEC INSERTS TEMP'S BEGINNING ADDR.(2/10/71/DG)
ATEMPEND DC    A(*-*)   EXEC INSERTS TEMP'S ENDING ADDRESS (2/10/71/DG)
ADEFNPTR DC    F'0'                          LAST EVAL FN
         DS    0F
ARETBEG  DC    AL4(ARET-ABEG)
ARETPTR  DC    F'-2'                         POINTER TO LAST ENTRY
ARETSIZ  DC    AL4(ARETMAX)
         DS    0F
AFNC     EQU   *
AWORKBEG DC    AL4(AWORK-ABEG)
AWORKSIZ DC    AL4(AWORKMAX)
         DS    0F
AINT     DC    AL4(AINTWORK-ABEG)
AINTSIZ  DC    AL4(AINTMAX)
         DS    0F
APBUF    DC    AL4(APBUFFER-ABEG)
APBUFSIZ DC    AL4(APBUFMAX)
         DS    0F
ARRAYBEG DC    AL4(AEND-ABEG)
ARRAYPTR DC    F'0'
ARRAYSIZ DC    AL4(ARRAYMAX)                 USED FOR ARRAY ALLOCATION
AFCB     DS    F                  ADR. OF FCB TABLE       (11/22/69/RF)
APGMAX   DS    F               NO. OF POSSIBLE KEEP PAGES (11/22/69/RF)
APGCUR   DS    F                NO. OF CURRENT KEEP PAGES (11/22/69/RF)
PWORKA   DS    F           ADR. OF PLOT ROUTINE WORK AREA (01/21/70/RF)
SCOPEID  DS    F             LOCATION OF SCOPE IDENTIFIER (01/21/70/RF)
*
AREAEND  DC    AL4(AREAMAX)
*
*
*********************************  USED BY EXECUTOR:
*
AEXWORK  DS    F                             FLOAT TO FIX CONVERSION
ARGSAVE  DS    4F
ARG1     DS    F
ARG2     DS    F
ARG3     DS    F
ARG4     DS    F
ARG5     DS    F
ARG6     DS    F
*
********************************* FLAGS:
*
AFLAGS   DC    X'00'
AMATFLAG EQU   X'80'                         FOR MATS
ASYNTAX  EQU   X'40'                         ATTENTION BIT
ATFLESWI EQU   X'04'              (RB 12/4/72)
ASMLBSWI EQU   X'08'              USED BY 'SMLB' IN EXEC   (2/16/71/DG)
*
*
********************************* FIXED TABLES:
*                                 ------------
         DS    0D
ATOZ     DC    26X'00000000000000008000000000000000'
*                                 SEE 'ATOZDSCT' FOR DESCRIPTION
         DS    0D
ATOZSTRG DC    26X'0000000080000000'
*                                 SEE 'ASTGDSCT' FOR DESCRIPTION
*
ATOZFCT  DC    26F'0'             FIRST HALFWORD - STATEMENT #
*                                 SECOND HALFWORD- INDEX TO CODE
*
A0TOZ9   DS   0F                  VALUES OF A0-Z9:
*                                 ---------------
         DC    41X'80000000'        A0-E0=0
         DC      E'2.718282'        E1   =2.7182813
         DC   109X'80000000'        E2-P0=0
         DC      E'3.141593'        P1   =3.14159265
         DC   108X'80000000'        P2-Z9=0
         DS    0F                                           (2/5/71/DG)
ACPTRBEG DC    AL4(ACPTR-ABEG)                              (2/5/71/DG)
ACPTRSVR DS    F  SAVE AREA WHILE STATEMENT IS INTERPRETED (3/01/71/DG)
ACPTRSIZ DC    AL4(ACPTRMAX)                                (2/5/71/DG)
         DS    0F                                           (2/5/71/DG)
AXXXXBEG DC    AL4(AXXXX-ABEG)                              (2/5/71/DG)
AXXXXPTR DC    F'0'                          POINTER TO NEXT(2/5/71/DG)
AXXXXSIZ DC    AL4(AXXXXMAX)                                (2/5/71/DG)
AXXXXSVR DS    F  SAVE AREA WHILE STATEMENT IS INTERPRETED (3/01/71/DG)
         DC    CL4'CPTR'                                    (2/5/71/DG)
ACPTR    DS    0F                                           (2/5/71/DG)
*
***********************************************************************
*
*              THE ABOVE (UP TO 'ACPTR') MUST BE DIRECTLY ADDRESSABLE
*              (I.E. MUST BE WITHIN X'FFF' BYTES).
*              THE FOLLOWING IS ADDRESSED VIA THE
*              DISPLACEMENTS ABOVE AND REGISTER 11.
*
********************************* COMPILE-TIME TABLES:
*                                 -------------------
         DS    (ACPTRMAX)X'00'                              (2/5/71/DG)
         DC    CL4'DATA'
ADATA    DS    0F
         DS    (ADATAMAX-44)X'00'
         DC    E'10',E'9',E'8',E'7',E'6',E'5',E'4',E'3',E'2',E'1',E'0'
*
         DC    CL4'CODE'
ACODE    DS    0F
         DS    (ACODEMAX)X'00'
*
         DC    CL4'LINE'
ALINE    DS    0F
         DS    (ALINEMAX)X'00'
*
         DC    CL4'FORC'
AFORC    DS    0F
         DS    (AFORCMAX)X'00'
*
********************************* RUN-TIME TABLES:
*
         DC    CL4'XXXX'                                    (2/5/71/DG)
AXXXX    DS    0F                                           (2/5/71/DG)
         DS    (AXXXXMAX)X'00'                              (2/5/71/DG)
         DC    CL4'FORR'
AFORR    DS    0F
         DS    (AFORRMAX)X'00'
         DC    CL4'TEMP'
ATEMP    DS    0F
         DS    (ATEMPMAX)X'00'
         DC    CL4'RET'
ARET     DS    0F
         DS    (ARETMAX)X'00'
*
********************************* WORK SPACE:
*
AWORK    DS    0F
         DS    (AWORKMAX)X'FF'
AINTWORK DS    0F
         DS    (AINTMAX)X'00'
APBUFFER DS    0D
         DS    (APBUFMAX)X'00'               INITIALIZED IN 'LODR'
*
******************************** ARRAYS A-Z AND A$-Z$:
*
AEND     DS    0F
*
CODE     EQU   AXXXX              (RB 12/4/72)
ACODEORG EQU   AXXXXSVR+4         (RB 12/4/72)
ARRAYMAX EQU   AREAMAX-AEND+ABEG  NUMBER OF BYTES THAT LOADER
*                                 CAN USE FOR ALLOCATION OF
*                                 A-Z AND A$-Z$.
*
AMXWRDS  EQU   ARRAYMAX/4
         DS    0F
         DS    (AMXWRDS)X'80000000'
*                                                         (11/22/69/RF)
**************************   FCB TABLE                    (11/22/69/RF)
*                                                         (11/22/69/RF)
AFCBT    DS    16F'0'                                     (11/22/69/RF)
         DS    1728X'00'                                  (11/22/69/RF)
         DC    CL4'STRG'                                  (2/10/73/RB)
ASTRG    DS    0F                                         (2/10/73/RB)
         DS    (ASTRGMAX)X'00'                            (2/10/73/RB)
         DC    CL4'GARB'                                  (2/10/73/RB)
AGARB    DS    0F                                         (2/10/73/RB)
         DS    (AGARBMAX)X'00'                            (2/10/73/RB)
*
********************************* DSECT FOR A - Z
ATOZDSCT DSECT
*
ARRAYDIM DS    H                  DIM STATEMENT NUMBER OF A-Z
ARRAYIDX DS    H                  INDEX OF ARRAY A-Z IN USER AREA
ARRAYLFT DS    F                  LEFT DIMENSION OF ARRAY A-Z
*                                 (IF A-Z IS USED UNSCRIPTED,
*                                 ARRAYLFT = 0, AND
*                                 ARRAYRGT = VALUE OF VARIABLE)
ARRAYRGT DS    F                  RIGHT DIMENSION OF ARRAY A-Z.
ATOZALOC DS    F                  THE HIGH-ORDER BYTE IS SET TO 1 OR 2
*                                 BY ROUTINE 'EXPR' WHEN ARRAYS A-Z ARE
*                                 SUBJECTS OF THE EVAL OR MATDEF OPS.
*                                 THE LOW ORDER 3 BYTES WILL BE SET UP
*                                 BY THE LOADER TO BE THE NUMBER OF
*                                 WORDS ALLOCATED FOR EACH ARRAY.
*
********************************* DSECT FOR A$ - Z$
ASTGDSCT DSECT
*
ASTRGDIM DS    H                  DIM STATEMENT NUMBER OF A$-Z$
ASTRGIDX DS    H                  INDEX OF ARRAY A$-Z$ IN USER AREA
ASTRGLFT DS    F                  DIMENSION OF STRING A$-Z$
*
********************************* DSECT FOR ATOZFCT
ADEFDSCT DSECT
*
ADEFNO   DS    H                  DIM STATEMENT NO. OF DEF FNX
ADEFIDX  DS    H                  INDEX IN CODE OF DEF FNX
*
FCB      DSECT
FCBOID   DS    F                  ORVYL FILE IDENTIFIER   (11/22/69/RF)
FCBLPP   DS    F       LOGICAL RECORDS PER PHYSICAL PAGE  (11/22/69/RF)
FCBUFN   DS    F               USER FILE REFERENCE NUMBER (11/22/69/RF)
FCBLRL   DS    F               LOGICAL RECORD LENGTH      (11/22/69/RF)
FCBFNL   DS    F                  FILE NAME LENGTH        (11/22/69/RF)
FCBFNM   DS    44C                FILE NAME               (11/22/69/RF)
FCBAOB   DS    F                  ADR. OF FILE BUFFER     (11/22/69/RF)
FCBPHR   DS    F RECORD NO. OF PHYSICAL RECORD LOGICALLY IN BUFFER .RF)
FCBLNR   DS    F                  LENGTH OF FCBPHR        (11/22/69/RF)
FCBRLN   DS    F             READS LOGICAL RECORD NUMBER  (11/22/69/RF)
FCBRLA   DS    F             READS LOGICAL RECORD ADR.    (11/22/69/RF)
FCBREI   DS    F             READS ELEMENT INDEX          (11/22/69/RF)
FCBWLN   DS    F             WRITES LOGICAL RECORD NUMBER (11/22/69/RF)
FCBWLA   DS    F             WRITES LOGICAL RECORD ADR.   (11/22/69/RF)
FCBWEI   DS    F             WRITES ELEMENT INDEX         (11/22/69/RF)
FCBIFCB  DS    F             INDEX IN FCB TABLE           (11/22/69/RF)
FCBFLG   DS    X             FCB FLAGS                    (11/22/69/RF)
FCBDUM   DS    3X            (UNUSED)                     (11/22/69/RF)
***********************************************************************
./ ADD NAME=CWORK
* 9/11/68
***********************************************************************
*                                                                     *
*                      CONTROL PROGRAM WORK AREA                      *
*                                                                     *
***********************************************************************
*
         DS    0D
*
*********************MAIN CONTROL WORD*********************************
*
SW0      DC    X'00'              NO GO SWITCH
SW1      DC    X'00'              OUTPUT FILE SWITCH
SW2      DC    X'00'              INPUT FILE SWITCH
ERRORR   DC    X'00'              FOR POSTING OF WHO CALLED
*
*******************FOR CONVERSION OF STATEMENT NUMBER******************
*
UPAREA   DC    1F'0'              FOR UNPACKED STATEMENT NUMBER
PAREA    DC    1D'0'              FOR PACKED STATEMENT NUMBER
*
*********************SYSIN BUFFER**************************************
*
CCIN     DC    X'40'              CARRIAGE CONTROL FOR RAW OUTPUT
         DC    10X'40'            PADDING TO PUT RAW UPSTREAM 10
LINEIN   DC    80X'40'            USUALLY INPUT BUFFER
STOPCHAR DC    X'40'              TERMINAL BLANK TO STOP FORCED SCANS
         DC    39X'40'            TO MAKE LRECL=131
LINEPTR  DC    1F'0'              POINTER IN LINE FOR PROCESSING LINE
*
********************SYSOUT BUFFER FOR ERROR MESSAGES*******************
*
ERRMESS  DC    C' '               CARRIAGE CONTROL
         DC    C'LINE'
ERRLN    DC    C'  XXXX'          PLACE LINE NUMBER HERE
         DC    C'  '
ERRNO    DC    C'  YYYY)'         PLACE ERROR NUMBER HERE
         DC    C' '
ERRMS    DC    110C' '            PLACE ERROR MESSAGE HERE
*
********************SYSOUT BUFFER**************************************
*
CCOUT    DC    C' '               CARRIAGE CONTROL
SYSOUT   DC    130C' '            PLACE THE OUTPUT HERE
*
********************PRESSED BUFFER*************************************
*
         DS    0F
LINENO   DC    1H'0'              LEFT HALF OF STATEMENT NUMBER
         DC    1H'0'              RIGHT HALF OF STATEMENT NO. (UNUSED)
LINEPRES DC    80X'00'            PRESSED LINE
*
********************'INPUT' PRESSED BUFFER CONTROL BLOCK************
*
INPUTPTR DC    F'0'               ADDR OF NEXT ITEM IN BUFFER
INPUTCTR DC    F'0'               CHARACTERS REMAINING IN BUFFER
INPUTLNE DC    F'-1'              BASIC SOURCE LINE ASSOCIATED
INPUTREQ DC    F'0'               LINE NUMBER INPUT STATEMENT REQUEST
*
*********************'INPUT' PRESSED BUFFER*************************
*
INPUTP   DC    131C' '            VPRESS PROCESS TO THIS BUFFER
*
*********************ARGUMENT LIST FOR VPRESS***********************
*
VPRESSAG EQU   *
VPRESSLN DC    F'0'               LENGTH OF THING TO BE PRESSED
VPRESSSR DC    F'0'               ADDR OF SOURCE TO VPRESS
VPRESSOT DC    F'0'               ADDR OF OUTPUT FROM VPRESS
*
**********PAGE CONTROL COUNTERS FOR PUTLINE*************************
*
LINECT   DC    1F'0'              CURRENT LINE COUNT
PAGECT   DC    1F'0'              CURRENT PAGE COUNT
SPARE1   DC    1F'0'              RESERVED FOR FUTURE USE
SPARE2   DC    1F'0'              RESERVED FOR FUTURE USE
*
***************************INLINE BUFFER****************************
*
         CNOP  2,4                ALIGN TO HALFWORD
INFIXLEN DC    1H'0'              NUMBER OF BYTES IN INFIX AREA
INFIXNO  DC    1H'0'              BINARY BASIC STATEMENT NUMBER
INFIXTP  DC    1H'0'              TYPE OF BASIC STATEMENT
INFIX    DC    70H'0'             HALF WORD FORMAT OF BASIC STATEMENT
INFIXCON DC    80F'0'             CONSTANTS LINKED TO PLACE IN INFIX
*
**********INPUT WORK AREA TO COPY STRINGS INTO**********************
*
WRKSTG   DC    16C' '
*
*******************ARGUMENT POINT FOR CALL TO INLINE*******************
*
INLINARG DS    0D
INLDIN   DC    A(LINENO)          ADDRESS OF INPUT TO INLINE
INLDOUT  DC    A(INFIXNO)         ADDRESS OF INLINE OUTPUT
NUMNUM   EQU   *                  FOR CONTROL PROGRAM
INLDCN   DC    F'11'              NUMBER OF CONSTANTS
NUMSTR   EQU   *                  FOR CONTROL PROGRAM
INLDSCN  DC    F'0'               NUMBER OF STRINGS
*
***********************************************************************
*                                                                     *
*                         INLINE WORK AREA                            *
*                                                                     *
***********************************************************************
*
***********************************************************************
************** NOTE:  THOSE VARIABLES WHICH ARE DEFINED BY A  *********
************** "DC" INSTRUCTION MUST BE INITIALIZED AS INDIC- *********
************** ATED IN THE DEFINITION.  THOSE DEFINED IN "DS" *********
************** INSTRUCTIONS NEED NOT BE INITIALIZED.          *********
***********************************************************************
*
INLSEQTB DS    0D             SEQUENCE DECISION TABLE EXPRESSION HANDLR
         DC    X'0000000100010101'
         DC    X'0000000100010101'
         DC    X'0000000100010101'
         DC    X'0001010100010101'
         DC    X'0100010001000000'
         DC    X'0100010001000000'
         DC    X'0100010101000001'
         DC    20F'0'         REST OF TABLE
*
INLSPAC  DC    F'0'           WORK AREA FOR BYTE TRANSLATION
INLTEMP1 DC    F'0'           WORK AREA FOR NUMBER CONVERSION
CONWORKA DS    0D             WORK AREA FOR CONVERT ROUTINE
CONNUMBR DS    F              WORK AREA FOR NUMBER CONVERSION
CONEXPON DS    F              WORK AREA FOR EXPONENT CONVERSION
CONTEMP  DS    D              GENERAL PURPOSE WORK AREA
CONSWTCH DS    X              GENERAL PURPOSE UTILITY SWITCH
CONSSW   DS    X              USED BY CONVERTM TO INDICATE THE NUMBER
*                             WAS PRECEDED BY A MINUS SIGN
CONUTSW1 DS    X              RESERVED FOR FUTURE USE
CONUTSW2 DS    X              RESERVED FOR FUTURE USE
INLFTSW  DS    X              "FIRST TIME" SWITCH FOR INTEGER HANDLER
INLSTRDM DS    X              STRING ARRAY SWITCH: SET TO X'FF' FOR
*                             INTEGER HANDLER BY CALLER IF STRING ARRAY
*                             --OTHERWISE SET TO X'00'
INLSWTCH DS    X              ACTION SWITCH FOR INTEGER HANDLER
INLSWUT2 DS    X              FIRST 4 BITS USED TO IDENTIFY DATA STMTS
*                             FOR STRING SCANNER
INLSWCHS DS    0F             NOTE: THE FOLLOWING 4 SWITCHES MUST COME
*                             RIGHT AFTER 'INLSWCHS' FOR INITIALIZATION
*                             PURPOSES
INLSWUTL DS    X              GENERAL PURPOSE UTILITY SWITCH
INLSW    DS    X              "STATEMENT TYPE" SWITCH
INLSTRSW DS    X              SWITCH USED BY STRING CONSTANT SCANNER:
*                             SET TO X'80' IF STRING > 15 CHARS (IN
*                             'PRINT' STMTS ONLY)
INLXINSW DS    X              ACTION SWITCH FOR EXPRESSION HANDLER
*
INLEQCNT DS    F              USED BY LET AND STRING LET HANDLERS
INLCNSV  DS    H              USED TO SAVE COUNT OF ITEMS IN CONSTANT
INLSCNSV DS    H              TABLE SO THAT 'INLCNNM' & 'INLSCNNM' CAN
*                             BE RESTORED IF SYNTAX ERROR IS FOUND
*
INLAINFX DS    A              CONTAINS PTR TO OUTPUT BUFFER
INLCNPTR DS    F              POINTS TO NEXT AVAILABLE SPACE IN INFIX
*                             CONSTANT AREA (INITIALIZED TO POINT TO
*                             ALPHA+INLCNDIS IF INFIX STARTS AT ALPHA)
INLSTSAV DS    9F             REGISTER SAVE AREA FOR STRING SCANNER
INLXSTKB DS    A             STACK BEGINNING
INLXSTAK DS    40X           PARENS STACK
INLXPRIC DS    F             PRIMARY COUNT
INLXLPCT DS    F             LEFT PAREN COUNT (INCLUDES ONLY THOSE LEFT
*                            PARENS NOT ENCLOSED BY OTHER PARENTHESES)
INLXSAVL DS    3F            SAVE AREA USED BY EXPRESSION HANDLER
INLSAVB1 DS    F             USED TO SAVE A(INLHERE)
INLWORKB DS    F              WORK AREA FOR INTEGER HANDLER
         DS    5F            RESERVED FOR FUTURE USE
***********************************************************************
./ ADD NAME=FEXIT
         MACRO
&NAME    FEXIT &CODE,&NO
         LCLA  &A
&NAME    L     13,4(13)
         AIF   (T'&CODE EQ 'O').SK1
         AIF   ('&CODE' EQ 'Y').SK2
         L     11,64(13)
         USING AREA,11
.SK2     SR    1,1
         L     2,AINT
         ST    1,0(2,11)
.SK1     LM    14,12,12(13)
         AIF   (T'&NO EQ 'O').SK3
&A       SETA  &NO-4000
         LA    1,4000
         LA    1,&A.(1)
         BR    14
         MEXIT
.SK3     B     4(14)
         MEND
./ ADD NAME=FSTART
         MACRO
&NAME    FSTART &DNAM,&REG,&LAB
&NAME    BALR  15,0
         USING *,15
         SAVE  (14,12),,*
         LA    2,72(13)
         ST    13,4(2)
         ST    2,8(13)
         LR    13,2
         USING AREA,11
         AIF   (T'&LAB EQ 'O').SK1
         LA    2,&LAB
         L     3,AINT
         ST    2,0(3,11)
.SK1     AIF   (T'&REG EQ 'O').SK2
         LR    &REG,11
         A     &REG,AFNC
         USING &DNAM,&REG
         MEXIT
.SK2     A     11,AFNC
         USING &DNAM,11
         MEND
./ ADD NAME=SCAN
         MACRO
&L       SCAN  &PRT
&L       SYSLR 1,&PRT
         XCALL SCAN
         MEND
./ ADD NAME=SCINIT
         MACRO
&L       SCINIT &LOC,&LEN
&L       SYSLR  1,&LOC,NULL=
         SYSLR  0,&LEN,NULL=
         XCALL SCINIT
         MEND
./ ADD NAME=SCKW
         MACRO
&L       SCKW  &KW,&RT,&P
         LCLA  &X
&L       DS    0F
         AIF   ('&KW' EQ '').LAST
         AIF   ('&P' EQ '').NP
&X       SETA  1
.NP      AIF   ('&RT' EQ '').Z
         DC    AL1(&X),AL3(&RT)
         AGO   .KW
.Z       DC    AL1(&X),AL3(0)
.KW      DC    CL8'&KW'
         MEXIT
.LAST    AIF   ('&RT' EQ '').NR
         DC    AL1(255),AL3(&RT)
         MEXIT
.NR      ANOP
         DC    AL1(255),AL3(0)
         MEND
./ ADD NAME=SYSLR
         MACRO
&L       SYSLR &R,&P,&TYPE=,&SELECT=,&NULL=0,&ERR=,&OP=LA
         LCLA  &X,&Y,&PT,&KC(8)
         LCLB  &LCR
         LCLC  &C(8),&LABEL,&OPC
         AIF   ('&TYPE' EQ '').GO
&LCR     SETB  1
         AIF   ('&SELECT' EQ '').GO
&X       SETA  1
.LUP     AIF   (&X GT N'&TYPE).LUPEND
&Y       SETA  1
.LUPTOO  AIF   (&Y GT N'&SELECT).LUPGO
         AIF   ('&TYPE(&X)' EQ '&SELECT(&Y)').GO
&Y       SETA  &Y+1
         AGO   .LUPTOO
.LUPGO   ANOP
&X       SETA  &X+1
         AGO   .LUP
.LUPEND  ANOP
&LCR     SETB  0
.GO      ANOP
         AIF   ('&P' NE '').NBL
         AIF   ('&ERR' EQ '').NERR
         MNOTE 12,&ERR
.NERR    AIF   ('&NULL' EQ '').LBL
         AIF   ('&NULL' EQ '0').SR
&L       &OP   &R,&NULL
         AGO   .COM
.LBL     ANOP
         AIF   ('&L' EQ '').END
&L       DS    0H
         MEXIT
.NBL     AIF   ('&P'(1,1) EQ '(').REG
         AIF   ('&P' EQ '0').SR
&LABEL   SETC  '&L'
         AIF   (K'&P LT 2).EXPR
         AIF   ('&P'(1,2) EQ 'L:').L
         AIF   (K'&P LT 3).EXPR
         AIF   ('&P'(1,3) EQ 'LA:').LA
         AIF   ('&P'(1,3) EQ 'LH:').LA
         AIF   ('&P'(1,3) NE 'IC:').EXPR
&L       SR    &R,&R
&LABEL   SETC  ''
.LA      ANOP
&PT      SETA  2
         AGO   .DO
.L       ANOP
&PT      SETA  1
.DO      ANOP
&X       SETA  1
.LOOP    AIF   (K'&P LE &X*8).BIT
&KC(&X)  SETA  8
&C(&X)   SETC  '&P'((&X-1)*8+1,8)
&X       SETA  &X+1
         AGO   .LOOP
.BIT     ANOP
&KC(&X)  SETA  K'&P-(&X-1)*8
&C(&X)   SETC  '&P'((&X-1)*8+1,&KC(&X))
./ ADD NAME=SYSLR
&C(1)    SETC  '&C(1)'(&PT+2,&KC(1)-&PT-1)
&OPC     SETC  '&P'(1,&PT)
&LABEL   &OPC  &R,&C(1)&C(2)&C(3)&C(4)&C(5)&C(6)&C(7)&C(8)
         AGO   .COM
.EXPR    ANOP
&L       &OP   &R,&P
.COM     AIF   ('&TYPE' EQ '').END
         LCR   &R,&R
         MEXIT
.SR      ANOP
&L       SR    &R,&R
         MEXIT
.REG     AIF   ('&TYPE' NE '').LCR
         AIF   ('(&R)' EQ '&P').LBL
&L       LR    &R,&P
         MEXIT
.LCR     ANOP
&L       LCR   &R,&P
.END     MEND
./ ADD NAME=TANDB
         MACRO
&MACRO01 TANDB &WHAT,&WHO,&WHERE
         AIF   ('&WHERE' NE '').SECND
&MACRO01 B&WHAT *+16
         LA    R2,&WHO.(R0,R0)
         SLL   R2,2(R0)
         BAL   R3,PANICON
         ORG   PANICON+&WHO.*4
         B     ERX&WHO
         ORG   ,
         AGO   .END
.SECND   ANOP
&MACRO01 B&WHAT *+20
         LA    R2,&WHO.(R0,R0)
         SLL   R2,2(R0)
         BAL   R3,PANICON
         BAL   R3,&WHERE
         ORG   PANICON+&WHO.*4
         B     ERX&WHO
         ORG   ,
.END     MEND
./ ADD NAME=TWORK
* 10/14/68 INCORPORATES BLOCK TRANSFERS FROM WYLBUR WORKING DATA SET
***********************************************************************
*                                                                     *
*                      CONTROL PROGRAM WORK AREA                      *
* #  INITILIZED IN CONTROL AT START OF SESSION                        *
* ## INITILIZED IN INITIAL AT START OF SESSION AND ON A CLEAR PROGRAM *
* ###INITILIZED IN INITIAL AT START OF SESSION, AND ON COMMAND        *
***********************************************************************
*
         DS    0D
TWORKADR DS    1F                 STARTING ADDR OF TWORK              #
*      ***NOTE***  TWORKADR MUST BE FIRST WORD OF TWORK DSECT
*                  SO THAT LOAD TEXT VERSION CAN WORK
*
*********************MAIN CONTROL WORD*********************************
*
SW0      DS    X'00'              NO GO SWITCH                       #
SW1      DS    X'00'              USER HIT ATTENTION SWITCH          #
SW2      DS    X'00'              WORK LOAD SWITCH (BLOCKING)
SW3      DS    X'00'              LODER2 CALL INHIBIT SWITCH         #
SW4      DS    X'00'              WHERE AM I LEVEL 1                 #
SW5      DS    X'00'              WHERE AM I LEVEL 2                 #
SW6      DS    X'00'              WHERE AM I LEVEL 3                 #
SW7      DS    X'00'              WHERE AM I LEVEL 4                 #
SW8      DS    X'00'
SW9      DS    X'00'
SW10     DS    X'00'
SW11     DS    X'00'
*
******************CLOCK************************************************
*
REALTIME DS    F'0'               ELAPSED TERMINAL TIME
ELAPTIME DS    F'0'               TOTAL ELAPSED CPU TIME
BREKTIME DS    F'0'               USERS TIMER INTERUPT INTERVAL
LASTTIME DS    F'0'               LAST RUN TIME ELAPSED
         DS    F'0'               ELAPSED TIME AT START
LINESTAK DS    H'0'               SAVE AREA FOR LINE NUMBER ON DO
         DS    H'0'               (UNUSED)
*
************************WORK AREA FOR SCAN*****************************
*
         DS    0D
CLBSCAN  DS    CL8
         DS    F
         DS    F
         DS    F
         DS    F
*
*****************CORE CONTROL TABLE************************************
*
TWORKSIZ DS    F'4096'            SIZE OF CONTROL PROGRAM WORK AREA   #
UAREASIZ DS    F'131072'          SIZE OF COMPILER WORK AREA          #
UFILESIZ DS    F'0'               SIZE OF FILE ROUTINE WORK AREA      #
UAREAADR DS    1F                 STARTING ADDR OF AREA               #
UFILEADR DS    1F                 STARTING ADDR OF FWORK              #
*
****************** USER OPTION SWITCHES AND COUNTERS*******************
*
         DS    0F
OVERSCNT DS    H'0'               NUMBER OF OVERFLOWS SO FAR        ##
OVERUCNT DS    H'0'               NUMBER OF OVERFLOWS BEFORE NO MSG###
OVERSTOP DS    H'0'               NUMBER OF OVERFLOWS BEFORE BREAK ###
UNDRSCNT DS    H'0'               NUMBER OF UNDERFLS SO FAR         ##
UNDRUCNT DS    H'0'               NUMBER OF UNDERFLS BEFORE NO MSG ###
UNDRSTOP DS    H'0'               NUMBER OF UNDERFLS BEFORE BREAK  ###
DIVDSCNT DS    H'0'               NUMBER OF DIV BY 0 SO FAR         ##
DIVDUCNT DS    H'0'               NUMBER OF DIV BY 0 BEFORE NO MSG ###
DIVDSTOP DS    H'0'               NUMBER OF DIV BY 0 BEFORE BREAK  ###
RETYPESW DS    X'00'              0 = NORETYPE (DEFAULT) 1 = TYPE  ###
*
*******************FOR CONVERSION OF STATEMENT NUMBER******************
*
UPAREA   DS    1F'0'              FOR UNPACKED STATEMENT NUMBER
PAREA    DS    1D'0'              FOR PACKED STATEMENT NUMBER
*
**********TERMINAL READ INPUT BUFFER USED BY 'INPUT'*******************
*
LINEIN   DS    134C' '            INPUT BUFFER
*
********************OUTPUT BUFFER FOR ERROR MESSAGES*******************
*
ERRMESS  DS    C' '               CARRIAGE CONTROL  (NOT USED)
         DC    C'LINE'
ERRLN    DC    C'  XXXX'          PLACE LINE NUMBER HERE
         DC    C'  '
ERRNO    DC    C'  YYYY)'         PLACE ERROR NUMBER HERE
         DC    C' '
ERRMS    DS    110C' '            PLACE ERROR MESSAGE HERE
*
********************OUTPUT BUFFER USED BY PUTIT************************
*
SYSOUT   DS    130C' '            PLACE THE OUTPUT HERE
*
*********************'INPUT' PRESD BUFFER***************************
*
INPUTP   DS    134C' '            VPRESS PROCESS TO THIS BUFFER
*
******************LINE FETCH CONTROL FOR READ MODE=EDIT****************
*   STM  R14,R1,PRESTNUM ON RETURN FROM WAIT TI
PRESTNUM DS    F       REG 14     USUALLY NUMBER OF LINES IN BLOCK
PRESTCOD DS    F       REG 15     RETURN CODE FROM READ EDIT
PRESTTI  DS    F       REG  0     SHOULD BE THE SAME AS TI
PRESTLNG DS    F       REG  1     USUALLY NUMBER OF BYTES IN BLOCK
*
**********************PREST BUFFER*************************************
*
         DS    0F
PREST1ST DS    1H                 LEFT HALF OF STATEMENT NUMBER
PREST2ND DS    1H                 RIGHT HALF OF STATEMENT NUMBER
PRESTBUF DS    160C               PRESSED LINE
*
**********************PRESD BUFFER*************************************
*
         DS    0F
PRESD1ST DS    1H                 LEFT HALF OF STATEMENT NUMBER
PRESD2ND DS    1H                 RIGHT HALF OF STATEMENT NUMBER
PRESDBUF DS    133C               PRESSED LINE
         DS    1C                 FOR FORCED TRAILING BLANK
PRESDLNG DS    H                  LENGTH OF PRESD LINE
*
********************EXPANDED BUFFER************************************
*
         DS    0F
EXPANNUM DS    8C                 FOR LINE NUMBER  XXXX.XXX
         DC    C'  '              BLANK SPACE
EXPANBUF DS    133C               EXPANDED LINE
         DS    1C                 FOR FORCED TRAILING BLANK
EXPANLNG DS    H                  LENGTH OF EXPANBUF
*
********************'INPUT' PRESSED BUFFER CONTROL BLOCK************
*
INPUTPTR DC    F'0'               ADDR OF NEXT ITEM IN BUFFER
INPUTCTR DC    F'0'               CHARACTERS REMAINING IN BUFFER
INPUTLNE DC    F'-1'              BASIC SOURCE LINE ASSOCIATED
INPUTREQ DC    F'0'               LINE NUMBER INPUT STATEMENT REQUEST
*
************WORK AREA FOR INPUT TO PUT STRINGS INTO*****************
*
WRKSTG   DC    133C' '                                    (2/10/73/RB)
*
*************ARGURMENT LIST OF VPRESS AND VEXPAN********************
*
ARGLIST  EQU   *
ARG01    DS    1F           LENGTH OF THING TO BE PRESSED (VPRESS ONLY)
ARG02    DS    1F                 ADDR OF SOURCE
ARG03    DS    1F                 ADDR OF OUTPUT
*
***************************INLINE BUFFER****************************
*
         CNOP  2,4                ALIGN TO HALFWORD
INFIXLEN DC    1H'0'              NUMBER OF BYTES IN INFIX AREA
INFIXNO  DC    1H'0'              BINARY BASIC STATEMENT NUMBER
INFIXTP  DC    1H'0'              TYPE OF BASIC STATEMENT
INFIX    DC    132H'0'            HALF WORD FORMAT OF BASIC STATEMENT
INFIXCON DC    155F'0'            CONSTANTS LINKED TO PLACE IN INFIX
*
******************TERMINAL IDENTIFICATION******************************
*
TI       DS    F                  TERMINAL IDENTIFICATION             #
*
*
*****************LAST LINE EXECUTOR EXECUTED***************************
*
LASTLINE DS    H                  LAST LINE EXECUTED
LINEREQS DS    H                  LINE THE USER WANTS TO START AT
*
****************TABLE OVERFLOW LOOP CONTROL****************************
*
LNELOOP  DC    H'0'
TYPLOOP  DC    H'0'
*
*****************INTERRUPT SAVE AREA***********************************
*
         DS    0D
SAVEIT   EQU   *
TIMERPSW EQU   *                  TIMER INTERRUPT SAVE AREA
CAUSE    DS    X'0000'            INTERRUPTION CODE
STATUS   DS    X'00'              BITS 0-1  INSTRUCTION LENGTH
*                                      2-3  CONDITION CODE
*                                       4   1= FIXED-POINT OVERFLOW
*                                       5   1= DECIMAL OVERFLOW ENABLED
*                                       6   1= EXPONENT UNDERFLOW
*                                       7   1= EXPONENT UNDERFLOW
SYSTEM   DS    X'00'              BITS  0   1= TIMER EXIT ENABLED
*                                       1   1= ATTENTION EXIT ENABLED
*                                       2   1= WAIT EXIT ENABLED
*                                       3   1= SVC EXIT ENABLED
*                                      4-7  NOT USED
ADDRESS  DS    F                  INSTRUCTION ADDRESS
GPR0     DS    F                  GENERAL PURPOSE REGISTER 0
GPR1     DS    F                  GENERAL PURPOSE REGISTER 1
GPR2     DS    F                  GENERAL PURPOSE REGISTER 2
GPR3     DS    F                  GENERAL PURPOSE REGISTER 3
GPR4     DS    F                  GENERAL PURPOSE REGISTER 4
GPR5     DS    F                  GENERAL PURPOSE REGISTER 5
GPR6     DS    F                  GENERAL PURPOSE REGISTER 6
GPR7     DS    F                  GENERAL PURPOSE REGISTER 7
GPR8     DS    F                  GENERAL PURPOSE REGISTER 8
GPR9     DS    F                  GENERAL PURPOSE REGISTER 9
GPR10    DS    F                  GENERAL PURPOSE REGISTER 10
GPR11    DS    F                  GENERAL PURPOSE REGISTER 11
GPR12    DS    F                  GENERAL PURPOSE REGISTER 12
GPR13    DS    F                  GENERAL PURPOSE REGISTER 13
GPR14    DS    F                  GENERAL PURPOSE REGISTER 14
GPR15    DS    F                  GENERAL PURPOSE REGISTER 15
FPR0     DS    D                  FLOATING POINT REGISTER 0
FPR2     DS    D                  FLOATING POINT REGISTER 2
FPR4     DS    D                  FLOATING POINT REGISTER 4
FPR6     DS    D                  FLOATING POINT REGISTER 6
SVCPSW   DS    13D                SVC INTERRUPT SAVE AREA
PANICPSW DS    13D                PANIC INTERRUPT SAVE AREA
ATTNPSW  DS    13D                ATTENTION INTERRUPT SAVE AREA
WAITPSW  DS    13D                WAIT INTERRUPT SAVE AREA
*
******************"BIGBUF" INPUT BUFFER FOR READ EDIT******************
*
BIGBUFP  DS    F                  CURRENT BUFFER POINTER
BIGBUFC  DS    F                  LINE NUMBER CURRENTLY BEING PROCESSED
BIGBUFL  DS    F                  LAST LINE NUMBER PROCESSED
WORKLOAD DS    F                  NUMBER OF LINES TO BE PROCESSED
BIGBUF   DS    1024C              1024 CHARACTER BUFFER
*
*******************ARGUMENT POINT FOR CALL TO INLINE*******************
*
INLINARG DS    0D
INLDIN   DS    1F                 ADDRESS OF INPUT TO INLINE
INLDOUT  DS    1F                 ADDRESS OF INLINE OUTPUT
NUMNUM   EQU   *                  FOR CONTROL PROGRAM
INLDCN   DC    F'11'              NUMBER OF CONSTANTS
NUMSTR   EQU   *                  FOR CONTROL PROGRAM
INLDSCN  DC    F'0'               NUMBER OF STRINGS
*
***********************************************************************
*                                                                     *
*                         INLINE WORK AREA                            *
*                                                                     *
***********************************************************************
*
***********************************************************************
************** NOTE:  THOSE VARIABLES WHICH ARE DEFINED BY A  *********
************** "DC" INSTRUCTION MUST BE INITIALIZED AS INDIC- *********
************** ATED IN THE DEFINITION.  THOSE DEFINED IN "DS" *********
************** INSTRUCTIONS NEED NOT BE INITIALIZED.          *********
***********************************************************************
*
INLSEQTB DS    0D             SEQUENCE DECISION TABLE EXPRESSION HANDLR
         DC    X'0000000100010101'
         DC    X'0000000100010101'
         DC    X'0000000100010101'
         DC    X'0001010100010101'
         DC    X'0100010001000000'
         DC    X'0100010001000000'
         DC    X'0100010101000001'
         DC    20F'0'         REST OF TABLE
*
INLSPAC  DC    F'0'           WORK AREA FOR BYTE TRANSLATION
INLTEMP1 DC    F'0'           WORK AREA FOR NUMBER CONVERSION
CONWORKA DS    0D             WORK AREA FOR CONVERT ROUTINE
CONNUMBR DS    F              WORK AREA FOR NUMBER CONVERSION
CONEXPON DS    F              WORK AREA FOR EXPONENT CONVERSION
CONTEMP  DS    D              GENERAL PURPOSE WORK AREA
CONSWTCH DS    X              GENERAL PURPOSE UTILITY SWITCH
CONSSW   DS    X              USED BY CONVERTM TO INDICATE THE NUMBER
*                             WAS PRECEDED BY A MINUS SIGN
CONUTSW1 DS    X              RESERVED FOR FUTURE USE
CONUTSW2 DS    X              RESERVED FOR FUTURE USE
INLFTSW  DS    X              "FIRST TIME" SWITCH FOR INTEGER HANDLER
INLSTRDM DS    X              STRING ARRAY SWITCH: SET TO X'FF' FOR
*                             INTEGER HANDLER BY CALLER IF STRING ARRAY
*                             --OTHERWISE SET TO X'00'
INLSWTCH DS    X              ACTION SWITCH FOR INTEGER HANDLER
INLSWUT2 DS    X              FIRST 4 BITS USED TO IDENTIFY DATA STMTS
*                             FOR STRING SCANNER
INLSWCHS DS    0F             NOTE: THE FOLLOWING 4 SWITCHES MUST COME
*                             RIGHT AFTER 'INLSWCHS' FOR INITIALIZATION
*                             PURPOSES
INLSWUTL DS    X              GENERAL PURPOSE UTILITY SWITCH
INLSW    DS    X              "STATEMENT TYPE" SWITCH
INLSTRSW DS    X              SWITCH USED BY STRING CONSTANT SCANNER:
*                             SET TO X'80' IF STRING > 15 CHARS (IN
*                             'PRINT' STMTS ONLY)
INLXINSW DS    X              ACTION SWITCH FOR EXPRESSION HANDLER
*
INLEQCNT DS    F              USED BY LET AND STRING LET HANDLERS
INLCNSV  DS    H              USED TO SAVE COUNT OF ITEMS IN CONSTANT
INLSCNSV DS    H              TABLE SO THAT 'INLCNNM' & 'INLSCNNM' CAN
*                             BE RESTORED IF SYNTAX ERROR IS FOUND
*
INLAINFX DS    A              CONTAINS PTR TO OUTPUT BUFFER
INLCNPTR DS    F              POINTS TO NEXT AVAILABLE SPACE IN INFIX
*                             CONSTANT AREA (INITIALIZED TO POINT TO
*                             ALPHA+INLCNDIS IF INFIX STARTS AT ALPHA)
INLSTSAV DS    9F             REGISTER SAVE AREA FOR STRING SCANNER
INLXSTKB DS    A             STACK BEGINNING
INLXSTAK DS    40X           PARENS STACK
INLXPRIC DS    F             PRIMARY COUNT
INLXLPCT DS    F             LEFT PAREN COUNT (INCLUDES ONLY THOSE LEFT
*                            PARENS NOT ENCLOSED BY OTHER PARENTHESES)
INLXSAVL DS    3F            SAVE AREA USED BY EXPRESSION HANDLER
INLSAVB1 DS    F             USED TO SAVE A(INLHERE)
INLWORKB DS    F              WORK AREA FOR INTEGER HANDLER
         DS    5F            RESERVED FOR FUTURE USE
***********************************************************************
./ ADD NAME=XAVE
         MACRO
&MACRO02 XAVE  &NAME
&MACRO02 BC    15,14(0,15)
         DC    AL1(8)
         DC    CL8'&NAME.'
         STM   14,12,12(13)
         BALR  12,0
         USING *,12
         LR    3,13
         LA    13,72(0,13)
         ST    13,8(0,3)
         ST    3,4(0,13)
         MEND
./ ADD NAME=XCALL
         MACRO
&L       XCALL &R
&L       L     14,=V(&R)
         BALR  14,14
         MEND
./ ADD NAME=XENTER
         MACRO
&L       XENTER &R,&S,&SZ
         AIF   ('&L' EQ '').NEP
         ENTRY &L
.NEP     ANOP
&L       ST    14,72(0,13)
         STM   &R,&S,76(13)
         LA    8,72(0,13)
         AIF   ('&SZ' EQ '').NWA
         AIF   ('&SZ' EQ '*').MIN
         LA    13,((&SZ+3)/4*4)+72(,13)
         AGO   .NWA
.MIN     ANOP
         LA    13,((&S+2-(&R))*4)+72(,13)
.NWA     BALR  7,0
         USING *,7
         MEND
./ ADD NAME=XEXIT
         MACRO
&L       XEXIT &R,&S,&LTR
&L       LR    13,8
         SL    13,=A(72)
         LM    &R,&S,76(13)
         L     14,72(0,13)
         AIF   ('&LTR' EQ '').NLTR
         LTR   15,15
.NLTR    BR    14
         MEND
