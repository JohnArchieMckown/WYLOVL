VPRE     TITLE   'VPRESS ROUTINE'
VPRESS   CSECT
***********************************************************************
*                                                                     *
*                 WYLBUR/BASIC VPRESS PROGRAM                         *
*                       BATCH VERSION                                 *
*                                                                     *
***********************************************************************
*
*REGISTER USAGE
*
R0       EQU   0                  PARAMETER REGISTER FOR RETURN
R1       EQU   1                  ADDR OF ARGUMENT LIST ON ENTRY
R2       EQU   2                  LENGTH OF SOURCE FROM ARG LIST
R3       EQU   3                  ADDR OF SOURCE STRING FROM ARG LIST
R4       EQU   4                  ADDR OF OUTPUT STRING FROM ARG LIST
R5       EQU   5                  NUMBER OF CHARACTERS IN OUTPUT STRING
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10                 BASE FOR 'CONTROL' WORK AREA
R11      EQU   11                 BASE OF USER AREA
R12      EQU   12                 BASE FOR VPRESS
R13      EQU   13                 POINTER TO SAVE AREA
R14      EQU   14
R15      EQU   15
*
BASER    EQU   12                 BASE FOR VPRESS
*
*OS ENTRY LINKAGE (TYPE 3: DEPENDENT)
*
         SAVE  (14,12),,*
         BALR  BASER,0            ESTABLISH ADDRESSABILITY FOR
         USING *,BASER             CALLED
         LR    3,13               COPY CALLERS SAVE AREA ADDRESS
         LA    13,72(0,13)        LOAD ADDRESS OF CALLEDS SAVE AREA
         ST    13,8(0,3)          PUT CALLEDS SAVE AREA ADDRESS
*                                  IN CALLERS SAVE AREA
         ST    3,4(0,13)          PUT CALLERS SAVE AREA ADDRESS
*                                  IN CALLEDS SAVE AREA
         B     GO                 BRANCH AROUND ADDRESS CONSTANTS
*
*ADDRESS CONSTANTS FOR EXTERNAL CONTROL SECTIONS (V TYPE IF ANY)
*
*
*SET UP FOR CONTROL PROGRAMS WORK AREA
*
GO       EQU   *
*        USING CWORK,10           TELL ASSEMBLER ABOUT CWORK
*        USING AREA,11            TELL ASSEMBLER ABOUT AREA
*
*
*
*
*
*
***********************************************************************
*                                                                     *
*                 THE CODE GOES HERE                                  *
*                                                                     *
***********************************************************************
*
***********************************************************************
*VARIABLE DATA PRESS                                                  *
*                                                                     *
*  CALL    R1 ADDRESS OF 3 WORK ARGUMENT LIST                         *
*                                                                     *
*             WORD 1 = LENGTH OF AREA TO BE PRESSED                   *
*                  2 = ADDR OF SOURCE STRING TO BE PRESSED            *
*                  3 = ADDR OF OUTPUT STRING FROM THIS ROUTINE        *
*                                                                     *
*  RETURN  R0 LENGTH OF PRESSED OUTPUT STRING (IF POSITIVE)           *
*             (-1 IF BAD CHARACTER STRING WAS FOUND)                  *
*                                                                     *
***********************************************************************
*
************************SET UP ENTRY ARGUMENTS*************************
*
         L     R2,0(R0,R1)        LENGTH OF TO BE PRESSED SOURCE
         L     R3,4(R0,R1)        ADDR OF SOURCE
         L     R4,8(R0,R1)        ADDR OF OUTPUT
         SR    R5,R5              TO HOLD OUTPUT LENGTH DURING WORK
*
**************************NORMAL MOVE LOOP*****************************
*
LOOK     CLI   0(R3),X'40'        LOOK FOR A BLANK
         BE    ABLK               GO ATTEMPT SKIP OF BLANK
         CLI   0(R3),X'7D'        LOOK FOR A SINGLE QUOTE
         BE    SQ                 GO PROCESS SINGLE QUOTE STRING
         CLI   0(R3),X'7F'        LOOK FOR A DOUBLE QUOTE
         BE    DQ                 GO PROCESS DOUBLE QUOTE STRING
LOOK1    MVC   0(1,R4),0(R3)      MOVE CHAR TO NEW BUFFER
         LA    R5,1(R0,R5)        KICK UP NEW BUFFER COUNT
         LA    R4,1(R0,R4)        KICK UP NEW BUFFER
ABLK     LA    R3,1(R0,R3)        KICK UP OLD BUFFER
         BCT   R2,LOOK            IF NOT DONE GO ON LOOKING
         LR    R0,R5              PUT LENGTH IN RETURN REGISTER
         B     RETURN             GO BACK TO CALLER
*
************************SINGLE QUOTE SCAN******************************
*
SQ       MVC   0(1,R4),0(R3)      MOVE CHAR TO NEW BUFFER
         LA    R5,1(R0,R5)        KICK UP NEW BUFFER COUNT
         LA    R4,1(R0,R4)        KICK UP NEW BUFFER
         LA    R3,1(R0,R3)        KICK UP OLD BUFFER
         BCT   R2,SQ2             IF NOT DONE GO ON LOOKING
SQ1      LA    R0,1(R0,R0)        SET UP ERROR RETURN BAD STRING
         LCR   R0,R0              MAKE IT AN ERROR RETURN
         B     RETURN             GO BACK TO CALLER
SQ2      CLI   0(R3),X'7D'        LOOKING FOR ANOTHER SINGLE QUOTE
         BNE   SQ                 LOOP BACK IF NOT CLOSE OF STRING
         CL    R2,=F'2'           MAY WE LOOK AHEAD
         BL    LOOK1              IF NOT WE HAVE END OF STRING
         CLI   1(R3),X'7D'        DO WE HAVE TWO IN A ROW
         BNE   LOOK1              IF NOT WE HAVE END OF A STRING
         MVC   0(2,R4),0(R3)      MOVE THE DOUBLE SINGLE
         LA    R5,2(R0,R5)        KICK UP NEW BUFFER COUNT
         LA    R4,2(R0,R4)        KICK UP NEW BUFFER
         LA    R3,2(R0,R3)        KICK UP THE OLD BUFFER
         BCTR  R2,R0              TAKE AWAY FOR THE FIRST DOUBLE SINGLE
         BCT   R2,SQ2             BRANCH NOT DONE LOOKING FOR TERMINAL
         B     SQ1                STRING ERROR - ENDED ON DOUBLE QUOTE
*
************************DOUBLE QUOTE SCAN******************************
*
DQ       MVC   0(1,R4),0(R3)      MOVE CHAR TO NEW BUFFER
         LA    R5,1(R0,R5)        KICK UP NEW BUFFER COUNT
         LA    R4,1(R0,R4)        KICK UP NEW BUFFER
         LA    R3,1(R0,R3)        KICK UP OLD BUFFER
         BCT   R2,DQ2             IF NOT DONE GO ON LOOKING
DQ1      LA    R0,1(R0,R0)        SET UP ERROR RETURN BAD STRING
         LCR   R0,R0              MAKE IT AN ERROR RETURN
         B     RETURN             GO BACK TO CALLER
DQ2      CLI   0(R3),X'7F'        LOOKING FOR ANOTHER DOUBLE QUOTE
         BNE   DQ                 LOOP BACK IF NOT CLOSE OF STRING
         CL    R2,=F'2'           MAY WE LOOK AHEAD
         BL    LOOK1              IF NOT WE HAVE END OF STRING
         CLI   1(R3),X'7F'        DO WE HAVE TWO IN A ROW
         BNE   LOOK1              IF NOT WE HAVE END OF A STRING
         MVC   0(2,R4),0(R3)      MOVE THE DOUBLE DOUBLE
         LA    R5,2(R0,R5)        KICK UP NEW BUFFER COUNT
         LA    R4,2(R0,R4)        KICK UP NEW BUFFER
         LA    R3,2(R0,R3)        KICK UP THE OLD BUFFER
         BCTR  R2,R0              TAKE AWAY FOR THE FIRST DOUBLE DOUBLE
         BCT   R2,DQ2             BRANCH NOT DONE LOOKING FOR TERMINAL
         B     DQ1                STRING ERROR - ENDED ON DOUBLE QUOTE
*RETURN TO CALLER
*
RETURN   L     13,4(0,13)         PUT ADDR OF CALLERS SAVE AREA BACK
         LM    14,15,12(13)       RESTORE CALLERS REGISTERS
         LM    1,12,24(13)         EXECPT REGISTER 0
         BCR   15,14              RETURN TO CALLER
*
*
         END
