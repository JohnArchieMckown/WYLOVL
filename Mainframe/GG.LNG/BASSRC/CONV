CONV      TITLE 'CONVERT ROUTINE'
**********************************************************************
*ROUTINE  CONVERT
*   PURPOSE:    TO CONVERT A NUMBER FROM EBCDIC TO FLOATING POINT
*               (SINGLE PRECISION)
*
*     INPUT:
*               A POINTER TO THE FIRST CHARACTER OF THE EBCDIC NUMBER
*                         ON REGISTER 1
*               A POINTER TO A WORK AREA AT LEAST 20 BYTES LONG
*                         ON REGISTER 9:  THIS WORK AREA MUST BE
*                         ALIGNED ON A DOUBLE WORD BOUNDARY
*
*
*     OUTPUT:
*               THE FLOATING POINT EQUIVALENT OF THE NUMBER IN THE
*               FL. PT. REGISTER, CONFR0 (R0)
*
*               A POINTER TO THE FIRST CHARACTER AFTER THE INPUT NUMBER
*
*     ENTRY POINTS:
*               'CONVERT' SCANS THE NUMBER PROPER AND DOES NOT ACCEPT
*               A LEADING SIGN.  THIS ENTRY IS USED TO EVALUATE NUMBERS
*               IN AN ARITHMETIC EXPRESSION.
*
*               'CONVERTM' CHECKS FOR A LEADING SIGN BEFORE SCANNING
*               THE NUMBER.  THIS ENTRY IS USED IN SCANNING NUMBERS IN
*               A LIST, SUCH AS IN A 'DATA' STMT.
*
*
*     THE INPUT NUMBER MUST CONFORM TO THE FOLLOWING FORMAT:
*     ************FORMAL DEFINITION*****************************
*
*     <SIGNED NUMBER> := <SIGN> <NUMBER>     (ENTRY 'CONVERTM' ONLY)
*     <NUMBER> := <INTEGER> | <FRACTION> | <DECIMAL NUMBER> |
*                 <NUMBER><EXPONENT>
*     <INTEGER> := <DIGIT> | <INTEGER><DIGIT>
*     <FRACTION> := .<DIGIT> | <FRACTION><DIGIT>
*     <DECIMAL NUMBER> := <INTEGER>. | <INTEGER>.<INTEGER>
*     <EXPONENT> := E<SIGN><DIGIT> | E<SIGN><DIGIT><DIGIT>
*     <SIGN> := <NULL> | - | +
*     <DIGIT> := 0|1|2|3|4|5|6|7|8|9
*
*
*     ***********************************************************
*
*     IN ADDITION, IT MUST CONTAIN NO IMBEDDED BLANKS (BLANKS TERMINATE
*     THE NUMBER SCAN) AND IT MUST LIE WITHIN THE RANGE WHICH CAN BE
*     EXPRESSED AS A SINGLE PRECISION FLOATING POINT NUMBER.
*
*     ***********************************************************
*
*   CALLING SEQUENCE:
*            (L     13,SAVE AREA OF CALLING PROG)
*             L     1,ADDRESS OF FIRST CHARACTER OF NUMBER
*             L     15,=V(CONVERT)  OR  =V(CONVERTM)
*             L     9,ADDR OF WORKAREA
*             BALR  14,15
*             B     ERROR     ERROR RETURN
*             STE   CONFR0,RESULT  RESULT RETURNED IN FL. PT. R0
*
*     RETURNS:   NORMAL RETURN IS MADE TO THE RETURN ADDR + 4
*
*                AN ERROR RETURN IS MADE TO THE RETURN ADDRESS IF THE
*                INPUT NUMBER DOES NOT CONFORM TO THE ABOVE SPECIFI-
*                CATIONS
*
*             CONVERT IS RE-ENTRANT
*
*     METHOD:
*               THE NUMBER IS SCANNED LEFT TO RIGHT, ITS BINARY
*               EQUIVALENT BEING ACCUMULATED IN A GENERAL REGISTER
*               DIGIT BY DIGIT BY SUCCESSIVE MULTIPLICATIONS BY 10
*               AND ADDITIONS.  (FOR EXAMPLE, 345=((3*10+4)*10+5)
*               THE NUMBER OF DIGITS TO THE RIGHT OF THE DEC. PT.
*               (IF ANY) IS SAVED.
*
*               THE NUMBER IS FLOATED AND IS MULTIPLIED OR DIVIDED
*               BY A POWER OF TEN IF THE APPROPRIATE POWER IS NONZERO.
*               (THE APPROPRIATE POWER IS COMPUTED FROM THE NO. OF
*               DIGITS TO THE RIGHT OF THE DEC. PT. AND THE VALUE IN
*               THE EXPONENT FIELD, IF ONE EXISTS.)
*
*               THE NO. OF DIGITS TAKEN AS SIGNIFICANT IS "CONSIGDG".
*               NOTE:  'CONSIGDG' MUST BE LESS THAN OR EQUAL TO 9
*               SINCE 10-DIGIT INTEGERS GREATER THAN 4,294,967,295
*               CANNOT BE CONTAINED IN A 32-BIT GENERAL REGISTER.
*               CURRENTLY "CONSIGDG" = 9.  NUMBERS LONGER THAN "CON-
*               SIGDG" DIGITS ARE PADDED WITH TRAILING ZEROES.  LEADING
*               ZEROES (PRECEDING THE DEC. PT.) ARE IGNORED.
*
*****STILL TO BE DECIDED -- WHERE SHOULD THE SCAN REG POINT TO ON ERROR
*****RETURN (IF ANYWHERE)
*
*     TABLES/WORK AREAS:
*
*
*           'CONETABX'  - POWERS OF 10 FROM 0 TO 9 IN SINGLE PRECISION
*                       FLOATING POINT
*           'CONETABT'  - TENS' POWERS OF 10 FROM 10 TO 70 IN DOUBLE
*                       PRECISION FLOATING POINT
*
***********************************************************************
CONVERT  CSECT
         ENTRY CONVERTM
         BC    R15,4(R15)     THIS INSTRUCTION PROVIDES A GAP BETWEEN
*        THE 2 ENTRY POINTS, 'CONVERT' AND 'CONVERTM', SO THAT THE
*        CONTENTS OF R15 UPON ENTRY CAN BE EXAMINED TO DETERMINE WHICH
*        WAS TAKEN
         SPACE
CONVERTM STM   R14,R8,12(R13)  SAVE CALLER'S REGISTERS
         LA    R4,72(R13)     SET UP PTR TO CONVERT ROUTINE'S SAVE AREA
         ST    R13,4(R4)      SAVE PTR TO CALLER'S SAVE AREA
         ST    R4,8(R13)      SAVE PTR TO CONVERT'S SAVE AREA
         LR    R13,R4         SET R13 TO POINT TO CONVERT'S SAVE AREA
         BALR  CONRBASE,0
         USING *,CONRBASE        ESTABLISH ADDRESSABILITY
         USING CONWORKA,RWORK ESTABLISH WORK AREA ADDRESSABILITY
         MVI   CONSSW,X'00'      INITIALIZE "LEADING SIGN" SWITCH
         L     R4,CONACONM    THROUGH WHICH ENTRY DID CALLER COME?
         SLL   R15,8          ZERO HIGH ORDER BYTE OF R15
         SRL   R15,8          FOR COMPARISON
         CR    R15,R4         CONVERT OR CONVERTM?
         BL    CONINIT        IF CONVERT, BYPASS CHECK FOR LEADING SIGN
         SPACE
         CLI   0(RP),C'-'     IS NUMBER NEGATIVE?
         BNE   CONPLCHK       IF NOT, BRANCH
         MVI   CONSSW,X'FF'      IF SO, SET SWITCH
         B     CONSKIP        AND GO SKIP OVER SIGN
CONPLCHK CLI   0(RP),C'+'     LEADING '+' SIGN?
         BNE   CONINIT        NO, BRANCH
CONSKIP  LA    RP,1(RP)       SKIP OVER LEADING SIGN
         SPACE
CONINIT  SR    RO,RO   INITIALIZE WORK REG
         ST    RO,CONNUMBR  AND WORK AREAS
         ST    RO,CONEXPON
         ST    RO,CONTEMP
         SR    CONDECCT,CONDECCT
         MVI   CONSWTCH,CONOFF  INITIALIZE SWITCH
         LA    CONMAXDG,CONSIGDG  SET DIGIT COUNTER
         LA    RLINK,CONSCANA   SET RETURN ADDR FOR MULTADD ROUTINE
         SPACE 2
CONNMSCN CLI   0(RP),C'1'     IS CHARACTER A DIGIT BETWEEN
         BL    CONZERTT       1 AND 9 INCLUSIVE?
         CLI   0(RP),C'9'
         BH    CONZERTT
         OI    CONSWTCH,CONDIGSW  YES, SET DIGIT SWITCH
         TM    CONSWTCH,CONDECSW    HAS DEC PT BEEN ENCOUNTERED?
         BO    CONLONG2          BRANCH IF SO
         SPACE
CONLONG1 TM    CONSWTCH,CONLONGN   NO DEC. PT. SEEN YET--LONG NUMBER?
         BZ    CONMULAD          NO. BRANCH
         BCTR  CONDECCT,0          YES, DECREMENT 'CONDECCT' THEREBY
*                                CAUSING RESULT TO BE MULTIPLIED BY
*                                TEN LATER
         B     CONBCTR
         SPACE
CONLONG2 TM    CONSWTCH,CONLONGN   DEC. PT. SEEN; LONG NUMBER?
         BO    CONBCTR           YES. BRANCH
         A     CONDECCT,CONONE     NO; INCREMENT 'CONDECCT' THEREBY
*                                CAUSING RESULT TO BE DIVIDED BY TEN
*                                LATER
         SPACE
         SPACE
CONMULAD M     RE,CONTEN         N*10
         MVN   CONTEMP+3(1),0(RP)   PICK OFF LOW ORDER 4 BITS OF EBCDIC
*                                CHARACTER
         A     RO,CONTEMP        N*10 + NEW DIGIT
CONBCTR  BCTR  CONMAXDG,RLINK
         SPACE 2
         TM    CONSWTCH,CONEXPSW  SCANNING AN EXPONENT?
         BO    CONBADNU         IF SO, ERROR (TOO MANY DIGITS IN EXP.)
         TM    CONSWTCH,CONLONGN   GUARD AGAINST NUMBER WITH MORE THAN
*                                'CONSIGDG' + 'CONMAXCH' DIGITS IN IT
         BO    CONBADNU          "LONG NUMBER" SWITCH ALREADY ON--ERROR
         SPACE
         LA    CONMAXDG,CONMAXCH RESET LOOP LIMIT SO CAN SCAN TO END
*                              OF NUMBER
         OI    CONSWTCH,CONLONGN SET "LONG NUMBER" INDICATOR
         SPACE
CONSCANA LA    RP,1(RP)     ADVANCE TO NEXT CHARACTER
         B     CONNMSCN      AND CONTINUE SCAN
         SPACE 1
CONZERTT CLI   0(RP),C'0'     IS CHAR A ZERO?
         BNE   CONDECTT       BRANCH IF NOT
         OI    CONSWTCH,CONZERSW   SET ZERO ENCOUNTERED
         TM    CONSWTCH,CONDECSW   HAS DECPT BEEN SEEN?
         BO    CONLONG2       BRANCH IF YES  (TREAT ZEROES AFTER
*                             DEC. PT. JUST LIKE ANY OTHER DIGIT)
         TM    CONSWTCH,CONDIGSW  IS DIGIT SW ON?
         BO    CONLONG1     YES; THIS IS A SIGNIFICANT ZERO--GO ADD IT
*                           IN
         B     CONSCANA  NO; IGNORE LEADING ZEROES
        SPACE 2
CONDECTT CLI   0(RP),C'.'   IS CHAR A DEC PT?
         BNE   CONSWTST     BRANCH IF NOT
         TM    CONSWTCH,CONDECSW  GUARD AGAINST MULTIPLE DEC PTS
         BO    CONBADNU        REJECT NO. IF 2 DEC PTS
         OI    CONSWTCH,CONDECSW  SET DEC PT ENCOUNTERED
         B     CONSCANA         AND CONTINUE SCAN
       SPACE 2
CONSWTST TM    CONSWTCH,CONDECZE  IS EITHER DIGSW OR ZEROSW ON?
         BZ    CONBADNU        IF NOT, BRANCH--NO NUMBER FOUND
         ST    RO,CONNUMBR     SAVE NUMBER PART
         CLI   0(RP),C'E'      IS THERE AN EXPONENT?
         BNE   CONCOMPU        GO COMPUTE NUMBER IF NOT
         OI    CONSWTCH,CONEXPSW SET EXPONENT ENCOUNTERED
         NI    CONSWTCH,CONDIGOF   TURN OFF DIGIT SWITCH
         NI    CONSWTCH,CONLNOFF   TURN OFF "LONG NUMBER" SWITCH
         SR    RO,RO           PREPARE TO SCAN EXPONENT
         LA    CONMAXDG,3        GUARD AGAINST OVER 2 DIGITS IN EXPON
         LA    RP,1(RP)        BUMP SCAN POINTER
         CLI   0(RP),C'-'      IS EXPONENT NEGATIVE?
         BNE   CONPOSCH
         OI    CONSWTCH,CONNEGXP SET NEG EXPONENT
CONADVAN LA    RP,1(RP)        GO TO NEXT CHARACTER
CONDIGCO CLI   0(RP),C'0'      IS CHAR A DIGIT BETWEEN 0 AND 9 INCL?
         BL    CONENOTD
         CLI   0(RP),C'9'
         BH    CONENOTD
         OI    CONSWTCH,CONDIGSW YES, SET DIGIT ENCOUNTERED
         LA    RLINK,CONADVAN
         B     CONMULAD
         SPACE
CONPOSCH CLI   0(RP),C'+'        PLUS SIGN THERE?
         BE    CONADVAN
         B     CONDIGCO
      SPACE 2
CONENOTD TM    CONSWTCH,CONDIGSW GUARD AGAINST NO DIGITS IN EXPONENT
         BZ    CONBADNU
        SPACE 3
         TM    CONSWTCH,CONNEGXP  WAS EXPONENT NEGATIVE?
         BZ    CONSETXP       NO
         LNR   RO,RO            YES,SET SIGN
CONSETXP ST    RO,CONEXPON     SAVE EXPONENT
         L     RO,CONNUMBR     RESTORE NUMBER TO RO
        SPACE 3
CONCOMPU LTR   RO,RO           TEST NUMBER:  IS IT ZERO?
         BC    7,CONFLOAT      BRANCH IF NOT
         SER   CONFR0,CONFR0         IF SO, SET RESULT REG TO ZERO
         B     CONRET          AND RETURN--DON'T GIVE A MINUS FL. PT.
*                              ZERO EVEN IF USER INPUTS "-0.0"
         SPACE 1
CONFLOAT SDR   CONFR0,CONFR0
         STD   CONFR0,CONTEMP     ZERO OUT WORK AREA
         MVI   CONTEMP,X'4E'   COMPUTE FLOATING CONSTANT--0.0 * 16 **14
         LE    CONFR0,CONTEMP     PUT IT ON REG
         ST    RO,CONTEMP+4       PUT N IN FRACTION PART, RT. ADJUSTED
         AD    CONFR0,CONTEMP     FLOAT N
         L     RO,CONEXPON     INPUT EXPONENT
         SR    RO,CONDECCT       MINUS DECIMAL COUNT
         BZ    CONOKRET        IF RESULT IS ZERO, FINISHED--RETURN
         BP    CONEXPCO        BRANCH IF POSITIVE
         OI    CONSWTCH,CONNEGSC NEGATIVE, SET SWITCH
         LPR    RO,RO          FORCE EXPONENT POSITIVE
CONEXPCO CH    RO,CONEXPMX     IS EXPONENT VALID?
         BNH   CONGTEXP          YES
         TM    CONSWTCH,CONNEGSC CHECK SIGN OF EXPONENT
         BO    CONSCLMX        BRANCH IF NEGATIVE
*                         NUMBER TOO LARGE, ERROR
       SPACE 2
CONBADNU EQU   *
         L     R13,4(R13)       OBTAIN PTR TO CALLER'S SAVE AREA
         LM    R14,R8,12(R13)   RESTORE CALLER'S REGS
         BR    R14              RETURN TO CALLER
         SPACE 2
CONNOSCL SDR   CONFR0,CONFR0         SET RESULT = 0
         B     CONRET          AND RETURN
CONSCLMX SH    RO,CONDEC19     REDUCE EXPONENT BY 19 ----WHY?---
         CH    RO,CONEXPMX
         BH    CONNOSCL        BRANCH IF STILL TOO HIGH
         DD    CONFR0,CONTEN19    SCALE NUMBER DOWN
CONGTEXP SR    RE,RE
         D     RE,CONTEN    SEPARATE TENS AND UNITS DIGITS
         SLDA  RE,2            MULTIPLY UNITS BY 4
         SLA   RO,1            AND TENS BY 8 FOR TABLE INDEXING
         SDR   CONFR2,CONFR2
         LR    CONDECCT,RE     USE CONDECCT AS INDEX REG
         LE    CONFR2,CONETABX(CONDECCT)  PICK UP 10**UNITS
         LTR   RO,RO
         BZ    CONSCALR
         MD    CONFR2,CONETABT(RO)  MULTIPLY BY 10 ** TENS
CONSCALR TM    CONSWTCH,CONNEGSC CHECK SIGN OF EXPONENT
         BZ    CONSCLUP
         DDR   CONFR0,CONFR2         NEGATIVE, SCALE DOWN
         B     CONOKRET
CONSCLUP MDR   CONFR0,CONFR2         POSITIVE, SCALE UP
*                 RESULT IS RETURNED TO CALLER ON CONFR0
         SPACE 2
CONOKRET TM    CONSSW,X'FF'      SHOULD NUMBER BE NEGATIVE?
*                             (THIS TEST WILL ALWAYS FAIL IF CONVERT
*                             ENTRY USED.)
         BZ    CONRET         NO, BRANCH
         LNER  CONFR0,CONFR0        YES SET NUMBER NEGATIVE
         SPACE
CONRET   L     R13,4(R13)      OBTAIN PTR TO CALLER'S SAVE AREA
         LM    R14,R0,12(R13)  RESTORE ALL REGS EXCEPT R1,
         LM    R2,R8,28(R13)   SCAN PTR
         B     4(R14)          AND RETURN TO CALLER
         SPACE 2
         TITLE 'CONSTANTS AND TABLES'
*
* TABLE OF POWERS OF TEN IN HEXADECIMAL FLOATING POINT
*
CONETABX DS    0F
         DC    X'41100000'           10**0
         DC    X'41A00000'           10**1
         DC    X'42640000'           10**2
         DC    X'433E8000'           10**3
         DC    X'44271000'           10**4
         DC    X'45186A00'           10**5
         DC    X'45F42400'           10**6
         DC    X'46989680'           10**7
         DC    X'475F5E10'           10**8
         DC    X'483B9ACA'           10**9
CONETABT DS    0D
CONTEN19 DC    X'508AC7230489E800'   FILL--10**19
         DC    X'492540BE40000000'   10**10
         DC    X'5156BC75E2D63100'   10**20
         DC    X'59C9F2C9CD04674F'   10**30
         DC    X'621D6329F1C35CA5'   10**40
         DC    X'6A446C3B15F99267'   10**50
         DC    X'729F4F2726179A23'   10**60
         DC    X'7B172EBAD6DDC73C'   10**70
CONTEN   DC    F'10'
CONONE   DC    F'1'           USED TO GENERATE ROUNDING CONSTANT &
*                             ALSO AS INCREMENT FOR CONDECCT
CONEXPMX DC    H'75'        MAXIMUM EXPONENT
CONDEC19 DC    H'19'
CONACONM DC    A(CONVERTM)     ADDRESS OF ENTRY PT 2
        SPACE 3
RE       EQU   6     EVEN/ ODD WORK REG PAIR
CONRBASE EQU   8               CONVERT ROUTINE'S BASE REGISTER
RO       EQU   7
R0       EQU   0
R2       EQU   2
R4       EQU   4
R8       EQU   8
R13      EQU   13
RP       EQU   1     SCAN POINTER
RWORK    EQU   9      POINTER TO WORK/SAVE AREA
R14      EQU   14     RETURN REG
R15      EQU   15
RLINK    EQU   14     INTERNAL LINK REG
CONMAXDG EQU   3     COUNTER USED TO GUARD AGAINST TOO MANY DIGITS
CONDECCT   EQU   4     USED TO COUNT NO. OF DIGITS TO RIGHT OF DEC. PT.
CONFR0   EQU   0     FLOATING POINT REG 0
CONFR2   EQU   2     FLOATING POINT REG 2
*
*********SWITCH CODES***********
CONOFF   EQU   X'00'     INITIALIZED CONDITION
CONDIGSW EQU   X'80'     DIGIT ENCOUNTERED
CONDECSW EQU   X'40'     DECIMAL POINT ENCOUNTERED
CONEXPSW EQU   X'20'     EXPONENT ENCOUNTERED
CONNEGXP EQU   X'10'     EXPONENT IS NEGATIVE
CONDIGOF EQU   X'7F'     TURN OFF DIGIT SWITCH
CONNEGSC EQU   X'08'     INTERMEDIATE EXPONENT IS NEG
CONZERSW EQU   X'04'     ZERO ENCOUNTERED IN NUMBER PART
CONLONGN EQU   X'02'     SET WHEN NUMBER CONTAINS MORE THAN 'CONSIGDG'
*                        DIGITS
CONLNOFF EQU    X'FD'            TURN OFF "LONG NUMBER" SWITCH
CONDECZE EQU   X'84'     USED TO TEST FOR DIGIT OR ZERO ENCOUNTERED
*******************************************************************
CONSIGDG    EQU   9         MAXIMUM NO. OF DIGITS TAKEN AS SIGNIFICANT
*                        (NOT INCLUDING MEANINGLESS LEADING ZEROES,
*                        AS IN 001234)
INLINLEN EQU   72        MAXIMUM LENGTH OF INPUT LINE
CONMAXCH EQU   INLINLEN-CONSIGDG-3  USED AS LOOP LIMIT IF NUMBER LENGTH
*                        EXCEEDS 'CONSIGDG' DIGITS
CONWORKS DSECT
         COPY  CWORK
         END
