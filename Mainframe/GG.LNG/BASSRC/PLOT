PLOT     TITLE ' PLOT ROUTINES - PAT,PDT,PSX,PSY,PCH,PLT '
PLOT     CSECT
*
*   MODIFIED ON 6/25/70 TO HANDLE ANY ONE OF 8 SCOPES.  (BEEBE)
*
         ENTRY PAT,PDT,PSX,PSY,PCH,PLT
R0       EQU   0   USED BY ORVYL
R1       EQU   1   USED BY ORVYL, AND IS ARG POINTER
R2       EQU   2   (INTERMEDIATE CALCS)
R3       EQU   3   (INTERMEDIATE CALCS)
R4       EQU   4   (INTERMEDIATE CALCS)
R5       EQU   5   (INTERMEDIATE CALCS)
R6       EQU   6   (INTERMEDIATE CALCS)
R7       EQU   7   LOCAL RETURN REGISTER
R8       EQU   8   LOCAL RETURN REGISTER
R9       EQU   9   BASE REG FOR OUTPUT BUFFERS (VARIES)
R10      EQU   10  BASE REG FOR DSECT (DC'S & OUTPUT BUFFER)
R11      EQU   11  BASE REG FOR "AREA", THE SYSTEM DSECT
R12      EQU   12  BASE REG FOR THIS CSECT
R13      EQU   13  SAVE AREA POINTER
R14      EQU   14  USED BY ORVYL
R15      EQU   15  USED BY ORVYL
FR0      EQU   0   RETURN VALUE REGISTER (&INTERMEDIATE CALCS)
FR2      EQU   2   (INTERMEDIATE CALCS)
FR4      EQU   4   (INTERMEDIATE CALCS)
FR6      EQU   6   (INTERMEDIATE CALCS)
*
         USING *,R15              ********************************
PAT      STM   R14,R12,12(R13)    *
         LA    R3,0               *
         B     MERGE              *
         USING *,R15              *
PDT      STM   R14,R12,12(R13)    *
         LA    R3,4               *
         B     MERGE              *
         USING *,R15              *
PSX      STM   R14,R12,12(R13)    *
         LA    R3,8               *  ESTABLISH ADDRESSABILITY,
         B     MERGE              *  AND SET UP COMPUTED GO TO
         USING *,R15              *   (ON R3)
PSY      STM   R14,R12,12(R13)    *
         LA    R3,12              *
         B     MERGE              *
         USING *,R15              *
PCH      STM   R14,R12,12(R13)    *
         LA    R3,16              *
         B     MERGE              *
         USING *,R15              *
PLT      STM   R14,R12,12(R13)    *
         LA    R3,20              *
MERGE    BALR  R12,0              *
         USING *,R12              ********************************
         EJECT
*
*  THESE INSTRUCTIONS CAN NOT BE USED WHEN TESTING UNDER FORTRAN.
*  FORTRAN DOES NOT SUPPLY STACKED SAVE AREAS.
*  BE SURE TO TAKE OUT THE STARS WHEN SWITCHING TO BASIC.
         LA    R2,72(R13)
         ST    R13,4(R2)
         ST    R2,8(R13)
         LR    R13,R2
*************************************************************
         USING AREA,R11  BASIC PASSES R11 ALREADY LOADED.
         L     R10,PWORKA  PWORKA IS AN ADCON THAT IS INSIDE AREA.
         USING PBUFS,R10   PWORKA POINTS TO PBUFS.
*************************************************************
*
         LA    R9,BUFF1           ADDR OF OUTPUT BUFFER TO R9
         USING BUFF1,R9           R9 PTS TO 1ST BUFFER
         L     R9,BUFAD1   POINTS TO A BUFFER (VARIES)
         LTR   R3,R3              IF THIS PLOT ENTRY, GO THERE
         BZ    PATENT             IMMEDIATELY.
*
         L     R2,SCOPEID         NOT ATTACH ENTRY.
         LTR   R2,R2              SCOPE MUST BE ATTACHED, OR ERROR
         BNZ   MERGE2
         L    R1,PLTERN01         ERR MSG NO. 1
         B     PLOTEY             GO TO ERROR EXIT
*
**********SCOPE IS ATTACHED. EXEC  COMPUTED GO TO (R3)***************
*
MERGE2   B     *(R3)
         B     PDTENT
         B     PSXENT
         B     PSYENT
         B     PCHENT
         B     PLTENT
         TITLE 'ATTACH THE SCOPE'
PATENT   EQU   *              CODE MODIFIED TO WRITE GRAPHICS TO SAME
*                             TERMINAL ORVYL IS ACCEPTING INPUT FROM.
*                             (ASSUMED TO BE A TEKTRONIX TERMINAL.)
         L     R3,0(R1)           TERMINAL ID (TI)
         ST    R3,SCOPEID         STORE TI IN SCOPEID.
         B     PATENT2            RESTORE PBUFS    *****  PRS  11/5/75
*
******* FIND THE SCOPE NAME FROM THE TABLE OF NAMES***************
*
*
*  R1 POINTS TO THE SCOPE NUMBER. IT IS FLOATING POINT
*  GO TO FIXER AND HAVE IT FIXED
         SDR   FR0,FR0           CLEAR THE F-REG
         LE    FR0,0(R1)         FLOATING PT NUMBER
         BAL   R8,FIXER          GO FIX IT
*
*     R3 NOW CONTAINS THE INTEGER NUMBER THAT WAS IN FR0.
         SLL   R3,1  TIMES 2 (FOR SUBSCRIPT USE)
         S     R3,=F'2'    (I*2)-2 = OFFSET IN TABLE
         LA    R1,TEKNAME  ADDR OF FRONT OF TABLE
         AR    R1,R3   R1 POINTS TO SCOPE NAME IN TABLE
         LA    R15,2  LEN OF NAME IS 2
         ATTACH 5,(R1),(R15),0   ATTACH THE SCOPE
         BZ    PATENT1            IF GOOD, GO TO WAIT.
*
***** R15 CONTAINS THE RETURN CODE, USE IT TO BRANCH FOR ERR MSG.
         ST    R15,ATTRET  WE'VE BEEN HAVING TROUBLE. SAVE THE RTN CODE
*
         A     R15,=F'12'         BUMP R15 TO GET + CONTENTS
         LTR   R15,R15   IF R15 IS STILL (-) SOMETHING'S WRONG
         BM    PER8      GO ISSUE ERROR MSG #8000
         C     R15,=F'20'  IF R15 IS TOO HIGH, ISSUE  MSG# 8000
         BH    PER8
         B     *+4(R15)           COMPUTED GO TO
         B     PER2
         B     PER3
         B     PER4
         B     PATENT1    RETURN WAS ZERO (GOOD ATTACH)
         B     PER6
         B     PER7
PER2     L     R1,PLTERN02  MSG NO. 2 INTO R1
         B     PEROUT
PER3     L     R1,PLTERN03
         B     PEROUT
PER4     L     R1,PLTERN04
         B     PEROUT
PER5     L     R1,PLTERN05
         B     PEROUT
PER6     L     R1,PLTERN06
         B     PEROUT
PER7     L     R1,PLTERN07
         B     PEROUT
PER8     L     R1,PLTERN08
         B     PEROUT
PEROUT   XC    SCOPEID(4),SCOPEID  TELL BASIC "NO SCOPE"
         B     PLOTEY             GO TO ERROR RETURN
*
********   ATTACH WAS STARTED OK. SEE IF WAIT COMPLAINS.*******
*
PATENT1  EQU   *
         ST    R0,SCOPEID         TELL BASIC ID OF SCOPE
         WAIT  (R0)               WAIT FOR COMPLETION OF ATTACH
         BZ    PATENT2            GOOD WAIT. GO CLEAR PBUFS.
*
*   SCOPE NOT AVAILABLE.
         L     R1,PLTERN05        LOAD ERROR MSG NO. 5
         B     PLOTEY
*
*  EITHER GOOD ATTACH, OR ANOTHER ATTACH OF A GOOD SCOPE.
*  INITIALIZE PBUFS.
PATENT2  EQU   *
         MVC   PBUFS(255),RESTOR  INITIALIZE THE WORKAREA.
         MVC   PBUFS+255(255),RESTOR+255
         MVC   PBUFS+510(RESTEND-RESTOR-510),RESTOR+510
         SDR   FR0,FR0           WE HAVE SCOPE, RETURN
         MVC   XYFLAG(1),NO       ASSUME CURSOR IS OUTSIDE.
*
*
         DROP  R9                 ##
         LA    R9,BUFF1           GET ADDR OF FIRST BUFFER
         ST    R9,BUFAD1          STORE FOR FUTURE CALLS
         LA    R9,1024(0,R9)      ADDR OF SECOND BUFFER
         ST    R9,BUFAD2          STORE 2ND BUFFER ADR FOR FUTURE
         USING BUFF1,R9           ##
*
* *****  CODE INSERTED TO PUT TEKTRONIX TERMINAL IN GRAPH MODE.
*        WILL WORK PROPERLY WITH MODELS 4012, 4013, 4014 AND 4015.
         MVC   0(2,R9),=X'001D'   INSERT GO-INTO-GRAPH-MODE CHAR IN
*                                 BUFFER PADDED WITH NUL TO HALF-WORD
         LA    R3,2
         ST   R3,NBYTES           # OF BYTES IN CURRENT PLOT BUFFER
* *****                              PRS   11/6/75
*
*
         B     PLOTEX
         TITLE 'DETACH THE SCOPE'
PDTENT   EQU   *
*        DETACH SCOPEID       SCOPE, DETACH IT
*        WAIT  SCOPEID
         XC    SCOPEID(4),SCOPEID  TELL BASIC SCOPE IS GONE
         SDR   FR0,FR0        ZERO IS RETURN CODE
         B     PLOTEX
         TITLE 'ESTABLISH X (OR Y) FOR LATER PLOTTING'
PSXENT   EQU   *
         LE    FR0,0(R1)   RETURN VALUE TO FR0
         STE   FR0,X      NEXTX SAVED
         B     PLOTEX      RETURN
         SPACE 5
PSYENT   EQU   *
*        ESTABLISH  Y FOR LATER PLOTTING
         LE    FR0,0(R1)   RETURN VALUE TO FR0
         STE   FR0,Y      NEXTY SAVED
         B     PLOTEX      RETURN
         TITLE  'DRAW A CHARACTER'
PCHENT   EQU   *
*  THERE ARE TWO TABLES ASSOCIATED WITH THE CHARACTERS.
*  ONE IS A TABLE OF ADCONS. EACH ADCON POINTS TO
*  A DC FOR A CHARACTER.
*
*  THE OTHER IS A TABLE OF DC'S. THE DC'S ARE NOT ALL THE
*  SAME LENGTH.   THE FIRST BYTE IN EACH DC CONTAINS THE
*  NUMBER OF BYTES IN THE DC (NOT COUNTING THE LENGTH BYTE).
*
         SDR   FR0,FR0            ZERO FR0
         LE    FR0,0(R1)          ARG INTO FR0
         BAL   R8,FIXER           FIX THE ARG.
*
*
      BCTR    R3,0                (ARG-1)
*
*  MAKE SURE THAT THE NUMBER FITS WITHIN THE SIZE OF THE
*  CHARACTER TABLE.  (64)
         N     R3,MASK
*
         SLL   R3,2               (ARG-1)*4
         L     R6,ADCONS(R3)       ARG'TH ADCON INTO R6
         LA    R6,PBUFS(R6)  ADD R10 TO R6 (POINTS TO BUFFERS)
         SR    R5,R5              ZERO R5
         IC    R5,0(R6)           LENGTH BYTE INTO R5
*
*  SAVE THE LENGTH BYTE SO WE CAN RESTORE IT AFTER DRAWING
*  THE CHARACTER.
         ST    R5,CTSAVE
*
*  SAVE THE ORIGINAL X,Y POSITION
         L     R2,X
         ST    R2,OLDX
         L     R2,Y
         ST    R2,OLDY
*
*  SET XYFLAG TO "NO".  THIS WILL CAUSE THE PEN
*  TO BE LIFTED TO GO TO THE FIRST COORDINATE.
*
         MVC   XYFLAG(1),NO
*
*  SET THE LENGTH BYTE IN THE DC TO "FF".
*  THIS WILL TRICK THE COMPUTER INTO THINKING THAT
*  IT JUST PASSED "FF" IN THE DC.
*  THEN IT WILL GO TO THE FIRST COORDINATE WITH THE PEN UP.
         IC    R2,=X'FF'
         STC   R2,0(R6)
*
*  SAVE THE ADCON CONTENTS
         ST    R6,ADSAVE
*
*  IF THE LENGTH FOR THIS CHARACTER IS ZERO, THEN
         EJECT
*  JUST BUMP X AND RETURN
         LTR   R5,R5
         BZ    ESN1050
*
         B     ESN1200
*
*      TOP OF THE LOOP FOR THE CHARACTER
*  SET XYFLAG TO "NO".  THIS WILL CAUSE THE PEN
*  TO BE LIFTED TO GO TO THE NEXT COORDINATE.
*
ESN900   MVC   XYFLAG(1),NO
*
ESN1000  BCT   R5,ESN1200         IF MORE BYTES, GO TO 1200
*
*  NO MORE BYTES, BUMP X, RESTORE THINGS, AND RETURN
ESN1050  LE    FR0,OLDX
         AE    FR0,TWELVE
         L     R2,OLDX
         ST    R2,X
         L     R2,OLDY
         ST    R2,Y
         L     R3,ADSAVE
         L     R2,CTSAVE
         STC   R2,0(R3)
         B     PLOTEX             RETURN
*
*  MORE BYTES, DRAW CHARACTER.
ESN1200  EQU   *
*  CURRENT X, Y GO INTO XAPP, YAPP.
         L     R2,X
         ST    R2,XAPP
         L     R2,Y
         ST    R2,YAPP
*
*  CALC NEW X (GET LEFT HEX DIGIT FROM BYTE)
         MVZ   XLOCAL+3(1),1(R6)    XLOCAL HAS MASK
         LE    FR2,XLOCAL         XLOCAL&X INTO FR2
         SE    FR2,FFOUR           (XLOCAL-4.)
         AE    FR2,OLDX           OLDX + (XLOCAL-4.)
         STE   FR2,X              X=OLDX+(XLOCAL-4.)
*
*  CALC NEW Y (GET RIGHT HEX DIGIT FROM BYTE)
         MVN   YLOCAL+3(1),1(R6)    YLOCAL ALREADY HAS MASK
         LE    FR2,YLOCAL         YLOCAL TO FR2
         SE    FR2,SIX            (YLOCAL-6.)
         AE    FR2,OLDY           OLDY+(YLOCAL-6.)
         STE   FR2,Y              Y=OLDY+(YLOCAL-6.)
*
*
         EJECT
*  IF THE PAST BYTE SAYS "FF", THEN DON'T DRAW A LINE.
*  THIS PUSHES THE CURRENT X,Y INTO OLDX, OLDY.
         CLI   0(R6),X'FF'
*  BUMP R6, SO IT POINTS TO THE NEXT BYTE.
         LA    R6,1(R6)
         BE    ESN900
*  IF THE CURRENT BYTE SAYS "FF", THEN DON'T DRAW A LINE.
         CLI   0(R6),X'FF'
         BE    ESN900
*
*  SAVE THE COUNTING & POINTING REGS FOR A CALL TO DRAW A LINE
         STM   R5,R6,CHSAVE
         BAL   R7,ESN5          CALL ESN5
*
*  AFTER RETURN, RESTORE THE REGS, AND GO TO ESN1000
         LM    R5,R6,CHSAVE
*
       B       ESN1000
*
         TITLE ' PLT FUNCTION (HAS 4 ENTRIES)'
PLTENT   EQU   *
*
*  AS LONG AS WE ONLY HAVE ONE SCOPE, THIS IS THE
*  ONLY ENTRY WHERE WE NEED THE INPUT ARGUMENT AS
*  AN INTEGER. (EXCEPT FOR DRAW A CHARACTER)
*   LATER, WHEN WE HAVE MORE SCOPES, WE WILL NEED IT IN
*   ATTACH, AND DETACH ALSO.
         SDR   FR0,FR0            ZERO FR0
         LE    FR0,0(R1)          ARG INTO FR0
         BAL   R8,FIXER           FIX THE ARG.
*
*  ***   ERROR MSG WHEN ARG TO PLT IS OUT OF RANGE.   PRS  11/7/75
*
         C     R3,=F'3'
         BH    OOPS
         C     R3,=F'0'
         BNL   ARGOK
OOPS     L     R1,PLTERN09       ARG IS OUT OF RANGE
         B     PLOTEY            TAKE ERROR EXIT
*
*  R3 CONTAINS THE INTEGER ARG. MULTIPLY BY 4
ARGOK    SLL   R3,2           FOR COMPUTED GO TO
         B     *+4(R3)
         B     PLOTUP              ARG WAS 0
         B     PLOTDOWN           ARG WAS 1
         B     PLTERASE           ARG WAS 2
         B     PLTEMPTY           ARG WAS 3
         TITLE  ' ERASE THE SCREEN'
PLTERASE EQU   *
*
*        WAIT  SCOPEID
         LE    FR0,0(R1)      PUT INPUT ARG INTO FR0
         LA    R15,4                  ERASE THE
         WRITE SCOPEID,ERASEC,(15)    SCOPE
         LA    R0,3                GET THE TIME
         LA    R1,0                    OF
         SENSE (R0),(R1)              DAY (1/38400 SEC)
         A     R1,=F'19200'        ADD 1/2 SECOND
         ST    R1,ERASET           SAVE IN ERASET.
TIMER    LA    R0,3                NO, ERASE HAS BEEN DONE.
         LA    R1,0
         SENSE (R0),(R1)           GET THE TIME
         C     R1,ERASET           WRITE TIME YET?
         BL    TIMER               NOT TIME YET. READ CLOCK AGAIN.
         WAIT  SCOPEID
         B     PLOTEX              RETURN
         TITLE 'MOVE W/ PEN UP. TO X,Y '
PLOTUP   EQU   *
         BAL   R7,PLTUP
         B     PLOTEX
*
*   NO BUFFER ENTRIES ARE NEED UNTIL SOME PLOTTING IS ACTUALLY
*   DONE. JUST RESCUE THE CURRENT X,Y SO THEY AREN'T LOST.
PLTUP    LE    FR0,X
         STE   FR0,XAPP
         LE    FR0,Y
         STE   FR0,YAPP
*  SET THE XYFLAG TO "NO". THEN, WHEN WE MOVE WITH THE PEN DOWN,
*  WE WILL MOVE TO XAPP,YAPP WITH THE PEN UP FIRST. THIS IS
*  INEFFECIENT, BUT SAVES TIME IF MORE THAN 1 CALL IS MADE WITH
*  THE PEN UP.
         MVC   XYFLAG(1),NO
         BR    R7       RETURN
         TITLE  'DRAW A LINE TO X,Y'
PLOTDOWN EQU   *
*
         BAL   R7,ESN5
         B     PLOTEX
*
*
*
*   SEE IF THE CURSOR IS ALREADY INSIDE (SAVES TIME)
ESN5     L     R6,NBYTES          R6 HOLDS NBYTES (IN BUFFER)
         CLC   XYFLAG(1),YES      IF(XYFLAG.EQ. YES) GO TO 200
         BE    ESN200
*
*   CURSOR IS OUT OF BOUNDS. MOVE IT TO THE EDGE OF THE
*   OBJECT S PACE.
ESN10    LE    FR0,YMIN
         CE    FR0,YAPP      10  IF(YAPP.GE.YMIN)GO TO 40
         BL    ESN40
*
*   YAPP IS NEG. IF Y IS +, MOVE YAPP TO YMIN.
ESN20    CE    FR0,Y         20  IF(Y,LT.YMIN) GO TO PLTUP
         BH    PLTUP
*
*   RESET YAPP TO YMIN, THEN CALCULATE X-INTERSECTION.
ESN30    EQU   *
         CLC   YAPP(4),Y
         BE    ESN68             IF(YAPP.EQ. Y) GO TO 68
         BAL   R8,XF
         AE    FR0,XAPP          XAPP = XF(YMIN) + XAPP
         STE   FR0,XAPP
         LE    FR0,YMIN
         STE   FR0,YAPP           YAPP=YMIN
         B     ESN70             GO TO 70
*
*   YAPP IS .GE. YMIN, SEE IF IT IS > YMAX
ESN40    LE    FR0,YMAX      40  IF(YAPP.LE.YMAX)GO TO 70
         CE    FR0,YAPP
         BH    ESN70
*   YAPP > YMAX. IF(Y < YMAX) RESET YAPP TO YMAX
*   AND CALCULATE X-INTERSECTION.
ESN50    CE    FR0,Y       50  IF(Y.GT.YMAX) GO TO PLTUP
         BNH   PLTUP
*
*   RESET YAPP TO YMAX, THEN CALC X-INTERSECTION.
ESN60    EQU   *
         CLC   YAPP(4),Y
         BE    ESN68           IF(YAPP.EQ.Y) GO TO 68
         BAL   R8,XF
         AE    FR0,XAPP        XAPP = XF(YMAX) + XAPP
         STE   FR0,XAPP
         LE    FR0,YMAX
         STE   FR0,YAPP           YAPP=YMAX
         B     ESN70           GO TO 70
*
*   CALCULATION OF X-INTERSECTION NOT NEEDED BECAUSE
*   YAPP IS NOW THE SAME AS Y.
ESN68    STE   FR2,XAPP        XAPP=X
*
*
*    THE CURSOR IS NOW WITHIN THE Y-BOUNDS.
*
*   IF XAPP IS < XMIN, RESET XAPP TO XMIN
*
ESN70    LE    FR0,XMIN
         CE    FR0,XAPP     70  IF(XAPP.GE.XMIN) GO TO 100
         BL    ESN100
*
*   XAPP IS < XMIN.MOVE OVER TO BORDER
         CE    FR0,X           IF(X.LT.XMIN) GO TO PLTUP
         BNL   PLTUP
ESN90    EQU   *
         CLC   XAPP(4),X
         BE    ESN128           IF(XAPP .EQ. X) GO TO 128
         BAL   R8,YF
         AE    FR0,YAPP         YAPP = YF(XMIN) + YAPP
         STE   FR0,YAPP
         LE    FR0,XMIN
         STE   FR0,XAPP           XAPP=XMIN
         B     ESN130           GO TO 130
*
*    XAPP IS < XMIN. IF > XMAX, MOVE OVER TO BORDER.
ESN100   LE    FR0,XMAX
         CE    FR0,XAPP     100  IF(XAPP.LE.XMAX) GO TO 130
         BH       ESN130
*
*  XAPP IS HIGH. IF X IS ALSO HIGH, FORGET IT.
ESN110   CE    FR0,X
         BNH   PLTUP      110  IF(X.GT.XMAX) GO TO PLTUP
ESN120   EQU   *
         CLC   XAPP(4),X
         BE    ESN128          IF(XAPP .EQ. X) GO TO 128
         BAL   R8,YF
         AE    FR0,YAPP        YAPP = YF(XMAX) + YAPP
         STE   FR0,YAPP
         LE    FR0,XMAX
         STE   FR0,XAPP           XAPP=XMAX
         B     ESN130          GO TO 130
*
*   CALCULATION OF Y-INTERSECTION IS NOT NECESSARY BECAUSE
*   XAPP IS NOW THE SAME AS X.
ESN128   STE   FR4,YAPP        YAPP = Y
ESN130   EQU   *
*   IF THE CURSOR NEVER REACHED THE OBJECT SPACE, DON'T TRY TO PLOT
         LE    FR2,YAPP           YAPP TO FR2
         CE    FR2,YMAX
         BH    PLTUP              IF(YAPP .GT. YMAX) GO TO PLTUP
         CE    FR2,YMIN
         BL    PLTUP              IF(YAPP.LT. YMIN) GO TO PLTUP
*
*
*   PUT  XAPP & YAPP INTO THE OUTPUT BUFFER.(FIX EACH ONE FIRST
*   AND  ADD PENUP FLAGS ON EACH ONE.)
         LE    FR2,XAPP        XAPP INTO FR2
         LE    FR4,YAPP        YAPP INTO FR4
         AW    FR2,FLOAT       XAPP INTO LOW-ORDER HALF OF FR2
         AW    FR4,FLOAT       YAPP INTO LOW-ORDER HALF OF FR4
         STD   FR2,ARGIN       INTEGER X TO CORE
         L     R3,ARGIN+4      X TO R3
         SLL   R3,16           X TO UPPER HALF OF R3
         STD   FR4,ARGIN       INTEGER Y TO CORE
         ST    R3,S00          SAVE X-IN-HIGH-HALF
         L     R3,ARGIN+4      Y INTO LOW PART OF R3
         O     R3,S00            X ONTO HIGH PART OF R3
         O     R3,UPXY         UPXY MASK OVER NUMBERS
         L     R6,NBYTES       GET BUFFER OFFSET
*  STORE R3 INTO THE OUTPUT BUFFER. SOMETIMES, THE CONTENTS OF
*  R3 GO ONTO A HALFWORD BOUNDRY.
         STH   R3,BUFF1+2(R6)
         SRL   R3,16
         STH   R3,BUFF1(R6)
*
         L     R5,BUFSIZE      BUMP POINTER. GO TO 140 IF THE
         L     R4,FOUR         BUFFER IS NOT FULL YET
         BXLE  R6,R4,ESN140
*
*   BUFFER IS FULL. EMPTY IT AND CONTINUE
         ST    R6,NBYTES
         BAL   R8,EMPTIER
         LA    R6,2    BUFF INITIALLY CONTAINS 2 BYTES
ESN140   EQU   *
         ST    R6,NBYTES
ESN141   MVC   XYFLAG(1),YES  PEN IS INSIDE BORDERS.
*
*   NOW  THAT THE OLD X,Y IS INSIDE THE BORDERS, WE MUST SEE IF
*   THE  NEW X,Y IS ALSO  INSIDE.
ESN200   LE    FR0,YMIN
         CE    FR0,Y           200  IF(Y.GE.YMIN) GO TO 220
         BL    ESN220
ESN210   LE    FR2,YAPP
         CE    FR2,Y           210  IF(Y.EQ.YAPP)GO TO 211
         BE    ESN211
         BAL   R8,XF
         AE    FR0,XAPP          X =XF(YMIN) + XAPP
         STE   FR0,X
         B     ESN212               GO TO 212
ESN211   STE   FR2,X           211  X=XAPP
ESN212   LE    FR0,YMIN
         STE   FR0,Y           212  Y=YMIN
         B     ESN240               GO TO 240
*
*
ESN220   LE    FR0,YMAX
         CE    FR0,Y           220  IF(Y.LE.YMAX)GO TO 250
         BH    ESN250
*
ESN230   LE    FR2,YAPP
         CE    FR2,Y
         BE    ESN231         230  IF(Y.EQ.YAPP)GO TO 231
         BAL   R8,XF
         AE    FR0,XAPP            X = XF(YMAX) + XAPP
         STE   FR0,X
         B     ESN232              GO TO 232
*
*   NO NEED TO CALCULATE THE X-INTERSECTION. WE ARE ALREADY THERE
ESN231   LE    FR0,XAPP
         STE   FR0,X          231  X= XAPP
ESN232   LE    FR0,YMAX
         STE   FR0,Y          232  Y = YMAX
*
*   WE HAVE GONE OUTSIDE THE Y-BORDERS. LOWER THE FLAG.
*
ESN240   MVC   XYFLAG(1),NO       240  XYFLAG=NO
*
*   BOTH ENDS OF THE LINE HAVE BEEN ADJUSTED TO FALL WITHIN THE
*   Y-BOUNDS OF THE SCOPE.
ESN250   LE    FR0,XMIN
         CE    FR0,X          250  IF(X.GE.XMIN)GO TO 270
         BL    ESN270
         LE    FR2,XAPP
         CE    FR2,X               IF(X.EQ.XAPP)GO TO 251
         BE    ESN251
         BAL   R8,YF
         AE    FR0,YAPP            Y = YF(XMIN) + YAPP
         STE   FR0,Y
         B     ESN252              GO TO 252
*
*   DONT CALCULATE Y, WE ARE AT YAPP
ESN251   LE    FR0,YAPP
         STE   FR0,Y          251  Y=YAPP
ESN252   LE    FR0,XMIN
         STE   FR0,X          252  X=XMIN
         B     ESN290              GO TO 290
ESN270   LE    FR0,XMAX
         CE    FR0,X          270  IF(X.LE.XMAX)GO TO 300
         BH    ESN300
ESN280   LE    FR2,XAPP
         CE    FR2,X          280  IF(X.EQ.XAPP)GO TO 281
         BE    ESN281
         BAL   R8,YF
         AE    FR0,YAPP            Y = YF(XMAX) + YAPP
         STE   FR0,Y
         B     ESN282              GO TO 282
*
*   DONT CALCULATE Y. Y IS AT YAPP
ESN281   LE    FR0,YAPP
         STE   FR0,Y          281  Y= YAPP
ESN282   LE    FR0,XMAX           282  X=XMAX
         STE   FR0,X
*
*   WE HAVE GONE OUTSIDE. LOWER THE FLAG
ESN290   MVC   XYFLAG(1),NO       290  XYFLAG=NO
*
         EJECT
ESN300   EQU   *
*    BOTH ENDS OF THE LINE ARE INSIDE THE BORDERS.
*    PEN IS AT XAPP,YAPP.
*    DESTINATION IS X,Y.
*
*    CALCULATE DX,DY
         LE    FR0,X
         SE    FR0,XAPP            DX =X-XAPP
         AW    FR0,FLOAT          TRUNCATE DX
         AD    FR0,FLOAT
         STE   FR0,DX
*
         LE    FR2,Y
         SE    FR2,YAPP            DY =Y-YAPP
         AW    FR2,FLOAT          TRUNCATE DY
         AD    FR2,FLOAT
         STE   FR2,DY
*
*   GET THE INTEGER VALUE OF DX,DY
ESN310   BAL   R8,FIXER       310  IDX = DX
         LPR   R3,R3
         ST    R3,IIX              IIX =IABS(IDX)
*                                             '
*    GET THE TRUNCATED VALUES OF XAPP,YAPP
         LE    FR0,XAPP
         STE   FR0,XL1            SAVE OLD X
         AW    FR0,FLOAT
         AD    FR0,FLOAT
         STE   FR0,XCI
*
         LE    FR0,YAPP
         STE   FR0,YL1            SAVE OLD Y
         AW    FR0,FLOAT
         AD    FR0,FLOAT
         STE   FR0,YCI
*
ESN320   LER   FR0,FR2
         BAL   R8,FIXER       320  IDY=DY
         LPR   R3,R3
         ST    R3,IIY              IIY= IABS(IDY)
*
*
         L     R3,IIX         330  IXY = MAX0(IIX,IIY)
         L     R4,IIY
         CR    R3,R4
         BH    ESN330
         LR    R3,R4
ESN330   ST    R3,IXY
*
         C     R3,MAXL             IF(IXY.LE.MAXL)GO TO 520
         BNH   ESN520
*
         SR    R2,R2               NSTEPS= IXY/MAXL
         D     R2,MAXL
         ST    R3,NSTEPS
ESN340   ST    R3,ARGIN            (NSTEPS+1.)
         BAL   R8,FLOATER
         AE    FR0,ONE
         LE    FR2,DX         340  XL= DX/(NSTEPS+1.)
         DER   FR2,FR0
         STE   FR2,XL
*
         LE    FR2,DY              YL = DY/(NSTEPS+1.)
         DER   FR2,FR0
         STE   FR2,YL
*
*   USE R9 AS A DO-LOOP COUNTER
ESN350    L    R3,NSTEPS      350  NSTEPS=NSTEPS+10
         A     R3,TEN
*
ESN351   ST    R3,LOOPSV          SAVE THE LOOP CONTENTS
         L     R4,MAXL        351  IF(IIX.LE.MAXL
         C     R4,IIX                    .AND.
         BNH   ESN360                 IIY.LE.MAXL)GO TO 520
         C     R4,IIY
         BNH   ESN360
         B     ESN520
*
*   NEXT REAL  X.Y POSITION
ESN360   LE    FR4,XAPP       360  XAPP+XL
         AE    FR4,XL
         STE   FR4,XAPP
*
         LE    FR2,YAPP
         AE    FR2,YL              YAPP=YAPP+YL
         STE   FR2,YAPP
*
*   TRY TO REACH THE NEXT REAL X,Y POSITION BY TAKING AN
*   INTEGER STEP FROM THE OLD INTEGER PEN POSITION.
*   CALCULATE THE INTEGER STEP REQUIRED (X)
ESN370   LE    FR0,XAPP
         SE   FR0,XCI
         BAL   R8,FIXER    370  IXL= IABS( XAPP - XCI)
         L     R2,ARGIN+4
         LPR   R2,R2
         ST    R2,IXL
* CALCULATE THE INTEGER PEN POSITION (X)
         AD    FR0,FLOAT          NORMALIZE FR0 BEFORE ADDING
         AE    FR0,XCI
         STE   FR0,XCI    XCI = XCI+IXL
*
*   CALCULATE THE INTEGER STEP REQUIRED (Y)
         LE    FR0,YAPP
         SE   FR0,YCI
         BAL   R8,FIXER          IYL= IABS( YAPP -YCI)
         L     R2,ARGIN+4
         LPR   R2,R2
         ST    R2,IYL
*
*  CALCULATE THE INTEGER PEN POSITION (Y)
         AD    FR0,FLOAT          NORMALIZE FR0 BEFORE ADDING
         AE    FR0,YCI           YCI= YCI +IYL
         STE   FR0,YCI
*
*  WE ARE CLOSER TO THE TARGET. REDUCE THE SIZE OF THE REMAINING
*  SPACE
ESN390   L     R2,IIX
         S     R2,IXL         390  IIX = IIX-IXL
         ST    R2,IIX
*
         L     R2,IIY
         S     R2,IYL              IIY = IIY -IYL
         ST    R2,IIY
*
*   NOW PUT THIS STEP INTO THE BUFFER.  PACK THE WORD AS FOLLOWS:
*
*              BIT       CONTENTS                 |--SCHEMATIC---|
*
*              0,1       FLAG FOR SCOPE           XX00............
*              2,3       ALWAYS ZERO              ..00............
*              4         SIGN FOR DX              ..00X...........
*              5-9       MAGNITUDE OF X-STEP      ..00.XXXXX......
*
*              10        SIGN FOR Y               ..00......X.....
*              11-15     MAGNITUDE OF Y-STEP      ..00.......XXXXX
*
*
ESN400   L     R2,IXL
         LE    FR0,DX
         LTER  FR0,FR0
         BNM    ESN410
         O     R2,SIGN      NEGATIVE STEPS. APPEND SIGN TO BUFF1.
ESN410   SLL   R2,6        (IXL * 64)
*
         A     R2,IYL
         LE    FR0,DY
         LTER  FR0,FR0
         BNM    ESN420      (IXL*64) + IYL
         O     R2,SIGN      APPEND SIGN IF NEEDED
ESN420   O     R2,DXDY        APPEND THE DXDY FLAG
         L     R6,NBYTES
         STH   R2,BUFF1(R6)   DX,DY INTO BUFFER
         L     R5,BUFSIZE     BUMP THE POINTER (NBYTES)
         LA    R4,2           GO TO 510 IF THE BUFFER IS NOT
         BXLE  R6,R4,ESN510   FULL YET
*
         ST    R6,NBYTES      BUFFER IS FULL.
         BAL   R8,EMPTIER     EMPTY IT.
         LA    R6,2    BUFF INITIALLY CONTAINS 2 BYTES
*    END OF DO-LOOP
ESN510   EQU   *
         ST    R6,NBYTES
         L     R3,LOOPSV          LOOP CONTENTS BACK INTO R3
ESN511   BCT   R3,ESN351     MORE STEPS YET? (YES,GO TO 351)
*
*   HERE FOR SHORT STROKE, OR FOR REMAINDER FROM THE ABOVE LOOP.
ESN520   L     R2,IIX         IIX TO R2
         LE    FR0,DX         . IF DX IS NEG, APPEND SIGN
         LTER  FR0,FR0        . IN BIT 4
         BNM    ESN540         .
         O     R2,SIGN        .
ESN540   SLL   R2,6
         A     R2,IIY          (IIX * 64) + IIY
         LE    FR0,DY
         LTER  FR0,FR0
         BNM    ESN550
         O     R2,SIGN         APPEND SIGN OF IY
ESN550   O     R2,DXDY         APPEND THE DXDY FLAG.
         L     R6,NBYTES
         STH   R2,BUFF1(R6)
         L     R5,BUFSIZE
         LA    R4,2            GO TO 600 IF THE BUFFER IS
         BXLE  R6,R4,ESN600    NOT FULL YET
*   BUFFER IS FULL, GO EMPTY IT
         ST    R6,NBYTES
         BAL   R8,EMPTIER
         LA    R6,2    BUFF INITIALLY CONTAINS 2 BYTES
*
*
*   THE  CURSOR IS NOW AT THE END OF THE LINE
ESN600   LE    FR0,XL1            600  XAPP =XL1+DX
         AE    FR0,DX
         STE   FR0,XAPP
         LE    FR0,YL1                 YAPP = YL1+DY
         AE    FR0,DY
         STE   FR0,YAPP
         ST    R6,NBYTES
         BR    R7                 RETURN
         TITLE ' EMPTY THE BUFFER'
PLTEMPTY EQU   *
         L     R3,NBYTES           PUT NBYTES INTO FR0
         ST    R3,ARGIN             ( AFTER FLOATING)
         BAL   R8,FLOATER
         C     R3,=F'2'           IF THE BUFFER IS ALREADY EMPTY,
         BE    PLOTEX             FORGET IT.
*
         BAL   R8,EMPTIER         GO TO EMPTY THE BUFFER
         B     PLOTEX              RETURN
EMPTIER  EQU   *
*
*    THIS SECTION OF CODE MOVED TO PLT ERASE SECTION.
*
*
*
*
*
*
*        WAIT  SCOPEID                   WAIT FOR COMPLETION
         L     R15,NBYTES
*
*  ***   CODE TO  RETURN TO ALPHA MODE INSERTED.   PRS  11/7/75
         LH    R3,=X'1F00'          GO-INTO-ALPHA-MODE CHAR
         STH   R3,BUFF1(R15)
         LA    R15,2(R15)           UPDATE BYTE COUNT IN PLOT BUFF
         LA    R3,2                 INITIALIZE NBYTES TO ONE (GRAPH
         ST    R3,NBYTES          MODE CHAR TO BE INSERTED IN BUFF)
         WRITE SCOPEID,BUFF1,(15)       EMPTY THE BUFFR
         WAIT  SCOPEID
         L     R9,BUFAD2          SWITCH BUFFER POINTERS
         MVC   BUFAD2(4),BUFAD1
         ST    R9,BUFAD1
         MVC   0(2,R9),=X'001D'  INSERT GO-INTO-GRAPH-MODE CHAR IN    F
*                        PLOT BUFF, PADDING WITH NUL TO HALF WORD
*        GOOD FOR MODELS 4012, 4013, 4014 AND 4015.   PRS  11/6/75
*
         BR     R8                 RETURN
         TITLE 'FUNCTION XF'
*        CALCULATES THE INTERSECTION BETWEEN A LINE
*         X,Y - XAPP, YAPP;  AND THE HORIZONTAL BORDER
*         HERE, WE ARE CALCULATING X. ( Y IS KNOWN )
*         FR0 CONTAINS THE Y
*         R8  IS THE RETURN ADDRESS
XF       SE    FR0,YAPP              FORTRAN STATEMENT FUNCTION:
         STE   FR0,S00   XF(LIMIT) = (LIMIT-YAPP)/(Y-YAPP) * (X-XAPP)
         LE    FR0,Y
         SE    FR0,YAPP               ASSEMBLER CALL:
         STE   FR0,S01
         LE    FR0,S00               LE  FR0,LIMIT
         DE    FR0,S01               BAL R8,XF
         STE   FR0,S00               STE FR0,RESULT
         LE    FR0,X
         SE    FR0,XAPP
         ME    FR0,S00
         BR    R8
         TITLE ' FUNCTION YF '
*
*       CALCULATE THE INTERSECTION BETWEEN A LINE
*        X,Y - XAPP,YAPP; AND THE VERTICAL BORDER
*        HERE WE ARE CALCULATING Y. ( X IS KNOWN )
*        FR0 CONTAINS THE X
*
YF       SE    FR0,XAPP      (LIMIT-YAPP)
         STE   FR0,S00
         LE    FR0,X
         SE    FR0,XAPP      (X-APP)
         STE   FR0,S01
         LE    FR0,S00
         DE    FR0,S01        (LIMIT-YAPP)/(X-XAPP)
         STE   FR0,S00
         LE    FR0,Y
         SE    FR0,YAPP       (Y-YAPP)
         ME    FR0,S00        (Y-YAPP)*(LIMIT-YAPP)/(X-XAPP)
         BR    R8
         TITLE 'CONVERT ARGIN TO FLOATING IN FR0'
FLOATER  EQU   *
         L     R3,ARGIN       INTEGER INTO R3
         SDR   FR0,FR0        ZERO FR0
         STE   FR0,TEMPL+4      ZERO TO TEMPL+4
         LD    FR0,FLOAT      MASK INTO FR0
         LTR   R3,R3          SEE IF INTEGER IS NEGATIVE
         BM    NEGFL
         ST    R3,TEMPL+4     INTEGER INTO LOW-ORDER PART OF TEMPL
         AD    FR0,TEMPL      FLOAT-ADD TEMPL TO MASK
         BR    R8             RETURN ( ARG IS IN FR0)
NEGFL    LPR   R3,R3          STRIP SIGN FROM INTEGER
         ST    R3,TEMPL+4     INTEGER INTO LOW-ORDER PART OF TEMPL
         SD    FR0,TEMPL      FLOAT-SUB TEMPL FROM MASK
         BR    R8             RETURN ( ARG IS IN FR0 )
         TITLE 'CONVERT FR0 TO INTEGER INTO ARGIN'
*
*   PUT FR0 (AFTER FIXING) INTO ARGIN+4
*   R8 IS RETURN REGISTER.  R3 IS CLOBBERED
FIXER    EQU   *
         AW    FR0,FLOAT
         STD   FR0,ARGIN
         L     R3,ARGIN+4
         LTDR  FR0,FR0
         BP    FIXER1
         LNR   R3,R3
FIXER1   ST    R3,ARGIN+4
         BR    R8
         TITLE 'GOOD RETURN TO BASIC'
PLOTEX   EQU   *
         L     R13,4(R13)   BACK UP TO OLD SAVE AREA
         LM    R14,R12,12(R13)
         B     4(R14)             GOOD RETURN TO BASIC
         TITLE 'ERROR RETURN TO BASIC'
PLOTEY   EQU   *
         L     R13,4(R13)   BACK UP TO OLD SAVE AREA
         LM    R14,R0,12(R13)    DO NOT RESTORE R1
         LM    R2,R12,28(R13)    (IT HOLDS THE ERR MGS NO)
         BR    R14                ERROR RETURN TO BASIC
         TITLE 'UNCHANGEABLE CONSTANTS'
         DS    0D
FLOAT    DC    X'4E00000000000000' MASK FOR FIX/FLOAT
MAXL     DC    F'31'          MAXIMUM STEP SIZE FOR SCOPE
SIGN     DC    X'00000020'    SIGN MASK FOR OUTPUT BUFFER
DXDY     DC    X'0000C000'    DXDY MASK FOR OUTPUT BUFFER
XMIN     DC    F'0'           LOW-LIMIT FOR SCOPE
XMAX     DC    E'1023.'       HIGH X-LIMIT FOR SCOPE
YMIN     DC    F'0'           LOW Y-LIMIT FOR SCOPE
YMAX     DC    E'767.'        HIGH Y-LIMIT FOR SCOPE
UPXY     DC    X'40008000'    MASK TO MOVE W/ PEN UP
FOUR     DC    F'4'
BUFSIZE  DC    F'1018'        MAXIMUM SIZE OF OUTPUT BUFFER
*                             BUFSIZE CHANGED TO ALLOW HALF WORD
*                             FOR GRAPH-TO-ALPHA CHAR.  PRS  11/7/75
ERASEC   DC    X'270C0000'    WRITE-BUFFER FOR ERASE
ONE      DC    E'1.'          USED IN STEP SIZE CALCS
TEN      DC    F'10'          USED IN STEPPER DO LOOP
FFOUR    DC    E'4.'          FOR CHARACTERS, OFFSET FROM CENTROID
SIX      DC    E'6.'          FOR CHARACTERS, OFFSET FROM CENTROID
TWELVE   DC    E'12.'         CHARACTER SPACING
MASK     DC    X'0000003F'   MASK FOR CARDINAL CHARACTER NUMBER
TEKNAME DC     C'D0D1D2D3D4D5D6D7'  2-DIGIT NAMES FOR 8 SCOPES
YES      DC    X'1'           LOGICAL YES (USED FOR SWITCHES)
NO       DC    X'0'           LOGICAL NO (USED FOR SWITCHES)
         TITLE  'PLOT ERROR MAEEAGES'
PLTERN01  DC F'8001' SCOPE OPERATION ATTEMPTED. NO SCOPE ATTACHED.
PLTERN02  DC F'8002' SCOPE ATTACH ABORTED.  NO SPACE FOR INT. ROUTINE.
PLTERN03  DC F'8003' SCOPE ATTACH ABORTED. ILLEGAL DEVICE NAME.
PLTERN04  DC F'8004' SCOPE ATTACH ABORTED. TOO MANY DEVICES.
PLTERN05  DC F'8005' SCOPE ATTACH ABORTED. SCOPE NOT AVAILABLE.
PLTERN06  DC F'8006' SCOPE ATTACH ABORTED. ATTACH ALREADY STARTED.
PLTERN07  DC F'8007' SCOPE ATTACH ABORTED. SCOPE ALREADY ATTACHED.
PLTERN08  DC F'8000' BAD RTN CODE FROM ATTACH
PLTERN09  DC F'8008' INVALID ARGUMENT PASSED TO FUNCTION PLT.
         LTORG
         TITLE ' ADCONS FOR THE CHARACTER TABLE'
         DS    0D                 FOR ALIGNMENT ONLY
ADCONS   EQU   *
         DC    A(CH01-PBUFS)
         DC    A(CH02-PBUFS)
         DC    A(CH03-PBUFS)
         DC    A(CH04-PBUFS)
         DC    A(CH05-PBUFS)
         DC    A(CH06-PBUFS)
         DC    A(CH07-PBUFS)
         DC    A(CH08-PBUFS)
         DC    A(CH09-PBUFS)
         DC    A(CH10-PBUFS)
         DC    A(CH11-PBUFS)
         DC    A(CH12-PBUFS)
         DC    A(CH13-PBUFS)
         DC    A(CH14-PBUFS)
         DC    A(CH15-PBUFS)
         DC    A(CH16-PBUFS)
         DC    A(CH17-PBUFS)
         DC    A(CH18-PBUFS)
         DC    A(CH19-PBUFS)
         DC    A(CH20-PBUFS)
         DC    A(CH21-PBUFS)
         DC    A(CH22-PBUFS)
         DC    A(CH23-PBUFS)
         DC    A(CH24-PBUFS)
         DC    A(CH25-PBUFS)
         DC    A(CH26-PBUFS)
         DC    A(CH27-PBUFS)
         DC    A(CH28-PBUFS)
         DC    A(CH29-PBUFS)
         DC    A(CH30-PBUFS)
         DC    A(CH31-PBUFS)
         DC    A(CH32-PBUFS)
         DC    A(CH33-PBUFS)
         DC    A(CH34-PBUFS)
         DC    A(CH35-PBUFS)
         DC    A(CH36-PBUFS)
         DC    A(CH37-PBUFS)
         DC    A(CH38-PBUFS)
         DC    A(CH39-PBUFS)
         DC    A(CH40-PBUFS)
         DC    A(CH41-PBUFS)
         DC    A(CH42-PBUFS)
         DC    A(CH43-PBUFS)
         DC    A(CH44-PBUFS)
         DC    A(CH45-PBUFS)
         DC    A(CH46-PBUFS)
         DC    A(CH47-PBUFS)
         DC    A(CH48-PBUFS)
         DC    A(CH49-PBUFS)
         DC    A(CH50-PBUFS)
         DC    A(CH51-PBUFS)
         DC    A(CH52-PBUFS)
         DC    A(CH53-PBUFS)
         DC    A(CH54-PBUFS)
         DC    A(CH55-PBUFS)
         DC    A(CH56-PBUFS)
         DC    A(CH57-PBUFS)
         DC    A(CH58-PBUFS)
         DC    A(CH59-PBUFS)
         DC    A(CH60-PBUFS)
         DC    A(CH61-PBUFS)
         DC    A(CH62-PBUFS)
         DC    A(CH63-PBUFS)
         DC    A(CH64-PBUFS)
         TITLE 'RESTORING CONSTANTS'
RESTOR   DS    0D
RARGIN   DC    D'0'      INTEGER VERSION OF ARG
RTEMPL   DC    X'4E00000000000000'  MASK FOR FLOATER
RDX      DC    F'0'           (X-XAPP) STEP SIZE TO BE TAKEN
RDY      DC    F'0'           (Y-YAPP) STEP SIZE TO BE TAKEN
RIIX     DC    F'0'           INTEGER X STEP SIZE
RIIY     DC    F'0'           Y INTEGER STEP SIZE
RIXY     DC    F'0'
RXCI     DC    F'0'           TRUNCATED REAL X CURSOR POSITION
RYCI     DC    F'0'           TRUNCATED REAL Y CURSOR POSITION
RS00     DC    F'0'           TEMP
RS01     DC    F'0'           TEMP
RXYFLAG  DC    X'0'           (YES)PEN IS IN, (NO)PEN IS OUTSIDE
RERASEF  DC    X'1'           ERASE FLAG
RX       DC    F'0'           X ENDING END OF LINE
RY       DC    F'0'           Y ENDING END OF LINE
RXAPP    DC    F'0'           X STARTING END OF LINE
RYAPP    DC    F'0'           Y STARTING END OF LINE
RBUFFLAG DC    F'1'               FLAG SHOWS WHICH BUFFER IS IN USE
RBUFAD1  DC    A(BUFF1-PBUFS)    POINTS TO A BUFFER (VARIES)
RBUFAD2  DC    A(BUFF2-PBUFS)   POINTS TO THE OTHER BUFFER (VARIES)
RERASET  DC    F'0'           TIME OF NEXT WRITE.
RADSAVE  DC    F'0'               SAVE ADDR OF CHR STRING
RCHSAVE  DC    2F'0'              SAVE AREA FOR CHARACTER ROUTINE
RCTSAVE  DC    F'0'               SAVE LENGTH OF CHR STRING
RIXL     DC    F'0'
RIYL     DC    F'0'
RNBYTES  DC    F'0'               COUNT OF BYTES IN BUFFER
RNSTEPS  DC    F'0'               HOW MANY STEPS WE NEED FOR DX,DY
RLOOPSV  DC    F'0'               SAVE LOOP INFO AT ESN351 & ESN511
ROLDX    DC    F'0'           X SAVE AREA FOR CHARACTERS
ROLDY    DC    F'0'           Y SAVE AREA FOR CHARACTERS
RXL      DC    F'0'
RXLOCAL  DC    X'45000000'   MASK FOR BUILDING LOCAL X
RXL1     DC    F'0'               OLD X SAVE AREA
RYL      DC    F'0'
RYLOCAL  DC    X'46000000'  MASK FOR BUILDING LOCAL Y
RYL1     DC    F'0'               OLD Y SAVE AREA
RATTRET    DC   F'0'  HOLDS RTN CODE FROM ATTACH (FOR DEBUGGING)
RCH01    DC    X'00'              BLANK
RCH02    DC X'09000C2E6E8C86068680'                   "A"
RCH03    DC X'0C000E6E8C8A68086886826000'             "B"
RCH04    DC X'088C6E2E0C02206082'                     "C"
RCH05    DC X'07000E6E8C826000'                       "D"
RCH06    DC X'078E0E0868080080'                       "E"
RCH07    DC X'068E0E08680800'                         "F"
RCH08    DC X'0A8C6E2E0C022060828666'                 "G"
RCH09    DC X'06000E08888E80'                         "H"
RCH10    DC X'062060404E2E6E'                         "I"
RCH11    DC X'0C404E4C2C0A042262848A6C4C'             PHI
RCH12    DC X'054626244446'                           "."
RCH13    DC X'038A0682'                               "<"
RCH14    DC X'044E2C2240'                             "("
RCH15    DC X'05424A460686'                           "+"
RCH16    DC X'024E40'                                 OR
RCH17    DC X'0A802A2C4E6C0604224284'                 "&"
RCH18    DC X'058E82602002'                           "J"
RCH19    DC X'06000E068E4A80'                         "K"
RCH20    DC X'030E0080'                               "L"
RCH21    DC X'05000E488E80'                           "M"
RCH22    DC X'04000E808E'                             "N"
RCH23    DC X'0B4A8E8C6E2E0C022060828C'               "O"
RCH24    DC X'07000E6E8C8A6808'                       "P"
RCH25    DC X'0B8C6E2E0C022060828C8044'               "Q"
RCH26    DC X'0A000E6E8C8A6806688680'                 "R"
RCH27    DC X'074E44FF20426020'                       EXCL. PT.
RCH28    DC X'0D6C4C4E404C2C0A286886846202'           "$"
RCH29    DC X'08028A460A82460686'                     "*"
RCH30    DC X'044E6C6240'                             ")"
RCH31    DC X'0C204244242242FF484A2A2848'             ";"
RCH32    DC X'03068684'                               "~"
RCH33    DC X'020686'                                 "-"
RCH34    DC X'02008E'                                 "/"
RCH35    DC X'0C022060828668280A0C2E6E8C'             "S"
RCH36    DC X'04404E0E8E'                             "T"
RCH37    DC X'060E022060828E'                         "U"
RCH38    DC X'030E408E'                               "V"
RCH39    DC X'050E0046808E'                           "W"
RCH40    DC X'05008EFF0E80'                           "X"
RCH41    DC X'0540480E488E'                           "Y"
RCH42    DC X'072868FF0E8E0080'                       "Z"
RCH43    DC X'08464A0A02828A4A46'                     SQUARE
RCH44    DC X'06204244242242'                         ","
RCH45    DC X'0E008EFF2C2E0E0C2CFF6080826260'         "%"
RCH46    DC X'020080'                                 UNDERLINE
RCH47    DC X'0302860A'                               ">"
RCH48    DC X'0D0C2E6E8C8A684844FF42206042'           "?"
RCH49    DC X'098C6E2E0C022060828C'                   "0"
RCH50    DC X'052C4E402060'                           "1"
RCH51    DC X'0A0C2E6E8C8A6826040080'                 "2"
RCH52    DC X'0D0C2E6E8C8A6828688682602002'           "3"
RCH53    DC X'04606E0484'                             "4"
RCH54    DC X'09022060828668080E8E'                   "5"
RCH55    DC X'0C06286886826020020C2E6E8C'             "6"
RCH56    DC X'050E8E8C4240'                           "7"
RCH57    DC X'10688A8C6E2E0C0A286886826020020628'     "8"
RCH58    DC X'0C022060828C6E2E0C08266688'             "9"
RCH59    DC X'0B2242442422FF484A2A2848'               ":"
RCH60    DC X'0B048464626A688808282A22'               "#"
RCH61    DC X'0C4264664828060422828A6C2C'             "@"
RCH62    DC X'046A6E4E6A'                             "'"
RCH63    DC X'050686FF0A8A'                           "="
RCH64    DC X'096A6E4E6AFF2A2E0E2A'                   (")
RESTEND   DS    0F   POINTS TO LAST BYTE OF RESTORE AREA
         TITLE  'AREA IS THE SYSTEM DSECT'
AREA     DSECT
         COPY  AREA
         TITLE ' CHANGEABLE CONSTANTS'
PBUFS    DSECT
ARGIN    DS    D'0'      INTEGER VERSION OF ARG
TEMPL    DS    X'4E00000000000000'  MASK FOR FLOATER
DX       DS    F'0'           (X-XAPP) STEP SIZE TO BE TAKEN
DY       DS    F'0'           (Y-YAPP) STEP SIZE TO BE TAKEN
IIX      DS    F'0'           INTEGER X STEP SIZE
IIY      DS    F'0'           Y INTEGER STEP SIZE
IXY      DS    F'0'
XCI      DS    F'0'           TRUNCATED REAL X CURSOR POSITION
YCI      DS    F'0'           TRUNCATED REAL Y CURSOR POSITION
S00      DS    F'0'           TEMP
S01      DS    F'0'           TEMP
XYFLAG   DS    X'0'           (YES)PEN IS IN, (NO)PEN IS OUTSIDE
ERASEF   DS    X'1'           ERASE FLAG
X        DS    F'0'           X ENDING END OF LINE
Y        DS    F'0'           Y ENDING END OF LINE
XAPP     DS    F'0'           X STARTING END OF LINE
YAPP     DS    F'0'           Y STARTING END OF LINE
BUFFLAG  DS    F'1'               FLAG SHOWS WHICH BUFFER IS IN USE
BUFAD1   DS    A(BUFF1)           POINTS TO A BUFFER (VARIES)
BUFAD2   DS    A(BUFF2)           POINTS TO THE OTHER BUFFER (VARIES)
ERASET   DS    F'0'           TIME OF NEXT WRITE.
ADSAVE   DS    F'0'               SAVE ADDR OF CHR STRING
CHSAVE   DS    2F'0'              SAVE AREA FOR CHARACTER ROUTINE
CTSAVE   DS    F'0'               SAVE LENGTH OF CHR STRING
IXL      DS    F'0'
IYL      DS    F'0'
NBYTES   DS    F'0'               COUNT OF BYTES IN BUFFER
NSTEPS   DS    F'0'               HOW MANY STEPS WE NEED FOR DX,DY
LOOPSV   DS    F'0'               SAVE LOOP INFO AT ESN351 & ESN511
OLDX     DS    F'0'           X SAVE AREA FOR CHARACTERS
OLDY     DS    F'0'           Y SAVE AREA FOR CHARACTERS
XL       DS    F'0'
XLOCAL   DS    X'45000000'   MASK FOR BUILDING LOCAL X
XL1      DS    F'0'               OLD X SAVE AREA
YL       DS    F'0'
YLOCAL   DS    X'46000000'  MASK FOR BUILDING LOCAL Y
YL1      DS    F'0'               OLD Y SAVE AREA
ATTRET    DS   F'0'  HOLDS RTN CODE FROM ATTACH (FOR DEBUGGING)
CH01     DS    X'00'              BLANK
CH02     DS X'09000C2E6E8C86068680'                   "A"
CH03     DS X'0C000E6E8C8A68086886826000'             "B"
CH04     DS X'088C6E2E0C02206082'                     "C"
CH05     DS X'07000E6E8C826000'                       "D"
CH06     DS X'078E0E0868080080'                       "E"
CH07     DS X'068E0E08680800'                         "F"
CH08     DS X'0A8C6E2E0C022060828666'                 "G"
CH09     DS X'06000E08888E80'                         "H"
CH10     DS X'062060404E2E6E'                         "I"
CH11     DS X'0C404E4C2C0A042262848A6C4C'             PHI
CH12     DS X'054626244446'                           "."
CH13     DS X'038A0682'                               "<"
CH14     DS X'044E2C2240'                             "("
CH15     DS X'05424A460686'                           "+"
CH16     DS X'024E40'                                 OR
CH17     DS X'0A802A2C4E6C0604224284'                 "&"
CH18     DS X'058E82602002'                           "J"
CH19     DS X'06000E068E4A80'                         "K"
CH20     DS X'030E0080'                               "L"
CH21     DS X'05000E488E80'                           "M"
CH22     DS X'04000E808E'                             "N"
CH23     DS X'0B4A8E8C6E2E0C022060828C'               "O"
CH24     DS X'07000E6E8C8A6808'                       "P"
CH25     DS X'0B8C6E2E0C022060828C8044'               "Q"
CH26     DS X'0A000E6E8C8A6806688680'                 "R"
CH27     DS X'074E44FF20426020'                       EXCL. PT.
CH28     DS X'0D6C4C4E404C2C0A286886846202'           "$"
CH29     DS X'08028A460A82460686'                     "*"
CH30     DS X'044E6C6240'                             ")"
CH31     DS X'0C204244242242FF484A2A2848'             ";"
CH32     DS X'03068684'                               "~"
CH33     DS X'020686'                                 "-"
CH34     DS X'02008E'                                 "/"
CH35     DS X'0C022060828668280A0C2E6E8C'             "S"
CH36     DS X'04404E0E8E'                             "T"
CH37     DS X'060E022060828E'                         "U"
CH38     DS X'030E408E'                               "V"
CH39     DS X'050E0046808E'                           "W"
CH40     DS X'05008EFF0E80'                           "X"
CH41     DS X'0540480E488E'                           "Y"
CH42     DS X'072868FF0E8E0080'                       "Z"
CH43     DS X'08464A0A02828A4A46'                     SQUARE
CH44     DS X'06204244242242'                         ","
CH45     DS X'0E008EFF2C2E0E0C2CFF6080826260'         "%"
CH46     DS X'020080'                                 UNDERLINE
CH47     DS X'0302860A'                               ">"
CH48     DS X'0D0C2E6E8C8A684844FF42206042'           "?"
CH49     DS X'098C6E2E0C022060828C'                   "0"
CH50     DS X'052C4E402060'                           "1"
CH51     DS X'0A0C2E6E8C8A6826040080'                 "2"
CH52     DS X'0D0C2E6E8C8A6828688682602002'           "3"
CH53     DS X'04606E0484'                             "4"
CH54     DS X'09022060828668080E8E'                   "5"
CH55     DS X'0C06286886826020020C2E6E8C'             "6"
CH56     DS X'050E8E8C4240'                           "7"
CH57     DS X'10688A8C6E2E0C0A286886826020020628'     "8"
CH58     DS X'0C022060828C6E2E0C08266688'             "9"
CH59     DS X'0B2242442422FF484A2A2848'               ":"
CH60     DS X'0B048464626A688808282A22'               "#"
CH61     DS X'0C4264664828060422828A6C2C'             "@"
CH62     DS X'046A6E4E6A'                             "'"
CH63     DS X'050686FF0A8A'                           "="
CH64     DS X'096A6E4E6AFF2A2E0E2A'                   (")
BUFF1    DS    256F'0'           OUTPUT BUFFER NUMBER 1
BUFF2    DS    256F'0'           OUTPUT BUFFER NUMBER 2
         END
