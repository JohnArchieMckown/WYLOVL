STNG     TITLE 'STRING ROUTINES - DAT,CLK,LEN,CAT,LST,RST,NDX,GCOL'
STNG     CSECT
         ENTRY DAT,CLK,LEN,CAT,LST,RST,NDX,NCH,CHN,TAB,GCOL
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10                 BASE FOR LOCAL WORKSPACE
R11      EQU   11                 BASE FOR USER AREA
R12      EQU   12                 CSECT ACTUAL BASE
R13      EQU   13                 SAVE AREA CHAIN POINTER
R14      EQU   14
R15      EQU   15
F0       EQU   0
F2       EQU   2
F4       EQU   4
F6       EQU   6
*
         USING *,R15
DAT      STM   R14,R12,12(R13)
         LA    R14,ADAT
         B     MERGE
         USING *,R15
CLK      STM   R14,R12,12(R13)
         LA    R14,ACLK
         B     MERGE
         USING *,R15
LEN      STM   R14,R12,12(R13)
         LA    R14,ALEN
         B     MERGE
         USING *,R15
CAT      STM   R14,R12,12(R13)
         LA    R14,ACAT
         B     MERGE
         USING *,R15
LST      STM   R14,R12,12(R13)
         LA    R14,ALST
         B     MERGE
         USING *,R15
RST      STM   R14,R12,12(R13)
         LA    R14,ARST
         B     MERGE
         USING *,R15
NDX      STM   R14,R12,12(R13)
         LA    R14,ANDX
         B     MERGE
         USING *,R15
NCH      STM   R14,R12,12(R13)
         LA    R14,ANCH
         B     MERGE
         USING *,R15
CHN      STM   R14,R12,12(R13)
         LA    R14,ACHN
         B     MERGE
         USING *,R15
TAB      STM   R14,R12,12(R13)
         LA    R14,ATAB
         B     MERGE
         USING *,R15
GCOL     STM   R14,R12,12(R13)
         LA    R14,AGCOL
         B     MERGE
*
*
MERGE    BALR  R12,0
         USING *,R12
         LA    R2,72(R13)
         ST    R13,4(R2)
         ST    R2,8(R13)
         LR    R13,R2
*
*
         USING AREA,R11
         LR    R10,R11
         A     R10,AFNC
         LA    R10,7(R10)         BESURE OF DOUBLE WD BOUNDARY
         SRL   R10,3
         SLL   R10,3
         USING ASTNGL,R10
         SR    R0,R0              PUT A ZERO  IN R0
         LR    R3,R1              SAVE INCASE THIS IS GCOL
         SR    R1,R1              INIT. SOME REGS.
         SR    R2,R2
         LA    R5,1
         STE   F0,TEMP1           INITIALIZE TEMP WORDS
         ST    R0,TEMP1+4
         STE   F2,TEMP2
         ST    R0,TEMP2+4
*
         LA    R14,0(R14)         WIPE HI-BYTE
         BR    R14                GO TO APPROPRIATE ROUTINE
*
ADAT     EQU   *
         BCR   0,0                TO KEEP ADAT AND ACLK DIFF. ADDRESSES
*
ACLK     EQU   *
         LA    R3,8
         LR    R6,R3              GET NEW STRING SPACE
         L     R7,ASTR1PTR
         AR    R6,R7
         C     R6,ASTR2PTR
         BNH   CLK1
         L     R15,ADGCOL
         LR    R1,R3              AMOUNT OF SPACE NEEDED
         BALR  R14,R15
         B     STNGFUL
         B     ACLK
CLK1     ST    R6,ASTR1PTR
         A     R7,ASTRGBEG
         AR    R7,R11
         ST    R7,TEMP1           ADDR. OF NEW STRING
         STC   R3,TEMP1           LENGTH OF NEW STRING
         LE    F0,TEMP1           NOW HAVE RESULT PTR. SET
         LR    R3,R14
         SENSE 3
         C     R3,AACLK
         BE    CLKCHK
         MVC   0(8,R7),DATMSK     MOVE IN DATE MASK
         SLL   R15,4              CONVERT DATA TO CHARACTER STRING
         ST    R15,TEMP1+4
         UNPK  TEMP2(8),TEMP1
         OI    TEMP2+7,X'F0'
         MVC   0(2,R7),TEMP2+4
         MVC   3(2,R7),TEMP2+6
         MVC   6(2,R7),TEMP2+2
         B     STEXIT
CLKCHK   MVC   0(8,R7),CLKMSK     MOVE IN CLOCK MASK
         SRL   R1,1               CONVERT TIME TO CHAR STRING
         SR    R0,R0
         D     R0,CLKCNV
         SR    R0,R0
         D     R0,SIXTY
         LR    R3,R0
         SR    R0,R0
         D     R0,SIXTY
         CVD   R3,TEMP1
         UNPK  TEMP2(8),TEMP1
         OI    TEMP2+7,X'F0'
         MVC   6(2,R7),TEMP2+6
         CVD   R0,TEMP1
         UNPK  TEMP2(8),TEMP1
         OI    TEMP2+7,X'F0'
         MVC   3(2,R7),TEMP2+6
         CVD   R1,TEMP1
         UNPK  TEMP2(8),TEMP1
         OI    TEMP2+7,X'F0'
         MVC   0(2,R7),TEMP2+6
         B     STEXIT
*
ALEN     EQU   *
         L     R1,ADJUS           STRING LENGTH WILL GO IN R1
         IC    R1,TEMP1           PICK UP LENGTH BYTE
         ST    R1,TEMP1
         LE    F0,TEMP1
         AE    F0,NORML           NORMALIZE NUMBER
         B     STEXIT           DONE
*
ACAT     EQU   *
         IC    R1,TEMP1           LENGTH OF ARG1
         IC    R2,TEMP2           LENGTH OF ARG2
         L     R8,TEMP1           ADDR. OF STRING 1
         L     R9,TEMP2           ADDR. OF STRING 2
         LTR   R1,R1              IS FIRST STRING NULL
         BNZ   CATG1              NO, CHECK SECOND STNG.
         LER   F0,F2               ELSE RETURN SECOND STRING
         B     STEXIT
CATMVC1  MVC   0(0,R7),0(R8)      FOR EXECUTE
CATMVC2  MVC   0(0,R7),0(R9)      FOR EXECUTE
CATG1    LTR   R2,R2              IS SECOND STRING NULL
         BZ    STEXIT             YES, RETURN FIRST STRING
         LR    R3,R1              COMPUTE LENGTH OF NEW STRING
         AR    R3,R2
         LTR   R3,R3              WERE BOTH STRINGS NULL
         BNH   STEXIT             YES, RETURN NULL FIRST STRING
CATG2    LR    R6,R3              GET NEW STRING SPACE
         L     R7,ASTR1PTR
         AR    R6,R7
         C     R6,ASTR2PTR
         BNH   CATG3
         L     R15,ADGCOL
         LR    R6,R1
         LR    R1,R3
         BALR  R14,R15
         B     STNGFUL
         LR    R1,R6
         B     CATG2
CATG3    ST    R6,ASTR1PTR
         A     R7,ASTRGBEG
         AR    R7,R11
         ST    R7,TEMP1           ADDR. OF NEW STRING
         STC   R3,TEMP1           LENGTH OF NEW STRING
         LE    F0,TEMP1           NOW HAVE RESULT PTR. SET
         LA    R8,0(,R8)          WIPE HI BYTE
         LA    R9,0(,R9)          WIPE HI BYTE
         BCTR  R1,0               MINUS 1 FOR EXECUTE
         BCTR  R2,0               MINUS 1 FOR EXECUTE
         EX    R1,CATMVC1         MOVE FIRST PART OF STRING
         LA    R7,1(R1,R7)        BUMP TO WHERE SECOND PART GOES
         EX    R2,CATMVC2         MOVE SECOND PART OF STRING
         B     STEXIT
*
ARST     EQU   *
         BCR   0,0                TO KEEP ALST AND ARST DIFF. ADDRESSES
*
ALST     EQU   *
         IC    R1,TEMP1           GET CURRENT LEN OF ARG STRING
*                                 CONVERT SECOND ARG TO INTEGER
         LD    F2,TEMP2
         AW    F2,UNORM
         STD   F2,TEMP2
         L     R2,TEMP2+4         REQUIRED LST VALUE
         CR    R2,R1              LARGER THAN STRINGS LENGTH
         BNL   STEXIT             YES, DONT CHANGE LEN
         LTR   R2,R2              MUST BE POSITIVE, ELSE STORE NULL
         BNL   LRSTSTOR           POSITIVE SO GO STORE NEW LEN
         SR    R2,R2              ELSE SET TO STORE NULL
LRSTSTOR C     R14,AALST          IS IT ALST OR ARST
         BE    LSTSTOR            IF ALST JUST STORE NEW LENGTH
         L     R3,TEMP1           ELSE CHANGE STARTING POINT FOR STNG.
         LA    R3,0(R3,R1)        I.E. POINT TO START OF LAST 'N'
         SR    R3,R2                   CHARACTERS
         ST    R3,TEMP1
LSTSTOR  STC   R2,TEMP1
         LE    F0,TEMP1           GOT RESULT
         B     STEXIT
*
ANDX     EQU   *
         IC    R1,TEMP1           GET ARG1 LEN
         IC    R2,TEMP2           GET ARG2 LEN
         L     R3,TEMP1
         L     R4,TEMP2
         LA    R3,0(R3)           GET ARG1 PTR
         LA    R4,0(R4)           GET ARG2 PTR
         LR    R6,R3              TO COMPUTE INDEX LATER
         LA    R1,1(R1)           COMPUTE NUMBER OF COMPARES TO DO
         SR    R1,R2
         LTR   R1,R1              CHECK IF POS. NO. OF COMPARES
         BNH   NDXSTZ             NO, STORE ZERO AS RESULT
         BCTR  R2,0               MINUS ONE FOR CLC
         LTR   R2,R2
         BM    NDXSTZ             IF ZERO LEN THEN STORE ZERO
NDXTST   EX    R2,NDXCLC          COMAPRE STRINGS
         BE    NDXFND             GOT IT, GO FORM INDEX
         AR    R3,R5              BUMP TO DO NEXT COMPARE
         BCT   R1,NDXTST          BACK IF MORE TESTS
NDXSTZ   LE    F0,NORML           NO MATCH, STORE ZERO LEN
         B     STEXIT             DONE
NDXCLC   CLC   0(0,R3),0(R4)      USED IN EX TO COMAPRE STRINGS
NDXFND   SR    R3,R6              COMPUTE INDEX
         AR    R3,R5
         STC   R3,TEMP1           CONVERT TO FLOATING POINT
         L     R1,ADJUS
         IC    R1,TEMP1
         ST    R1,TEMP1
         LE    F0,TEMP1
         AE    F0,NORML
         B     STEXIT
ANCH     EQU   *
         LD    F0,TEMP1           CONVERT NUMBER TO INTEGER
         AW    F0,UNORM
         STD   F0,TEMP1
         L     R1,TEMP1+4         R1=INTEGER ARG FOR NCH
         CR    R1,R0              IS NUMBER LESS THAN ZERO
         BL    NCHNULL            YES, GO STORE NULL STRING AS RESULT
         C     R1,TWO55           IS IT GREATER THAN MAX (255)
         BH    NCHNULL            YES, GO STORE NULL STRING AS RESULT
NCH1     LR    R6,R5              GET SPACE FOR ONE CHARACTER STRING
         L     R7,ASTR1PTR
         AR    R6,R7
         C     R6,ASTR2PTR
         BNH   NCH2
         L     R15,ADGCOL
         LR    R1,R5
         BALR  R14,R15
         B     STNGFUL
         B     NCH1
NCH2     ST    R6,ASTR1PTR
         A     R7,ASTRGBEG
         AR    R7,R11
         ST    R7,TEMP1           LOC OF STRING
         STC   R5,TEMP1           LEN OF STRING (=1)
         LE    F0,TEMP1           RESULT POINTER NOW IN F0
         STC   R1,0(R7)           STORE RESULT CHARACTER IN STRING
         B     STEXIT             DONE
NCHNULL  SER   F0,F0              STORE ZERO LENGTH STRING  AS RESULT
         B     STEXIT
*
ACHN     EQU   *
         CLI   TEMP1,X'00'        CHECK IF ARG IS NULL STRING
         BE    CHNGRET            YES, RETURN -1 AS RESULT
         L     R8,TEMP1           GET STRING ADDR.
         LA    R8,0(R8)           WIPE OUT LEN
         L     R1,ADJUS           SET TO CONVERT CHAR TO FLT. PT.
         IC    R1,0(R8)           PICK UP CHAR
         ST    R1,TEMP1           STORE UN NORMALIZED FLT. PT. NUM
         LE    F0,TEMP1           PICK UP IN FLT. PT. REG.
         AE    F0,NORML           NORMALIZE IT
         B     STEXIT
CHNGRET  LE    F0,MINU1
         B     STEXIT
*
ATAB     EQU   *
         LD    F0,TEMP1           CONVERT ARG TO INTEGER
         AW    F0,UNORM
         STD   F0,TEMP1
         L     R3,TEMP1+4         INTEGER ARG NOW IN R3
         CR    R3,R0              MUST BE GREATER THAN ZERO
         BNH   NCHNULL            ELSE STORE NULL STRING RESULT
         C     R3,TWO55           ALSO MUST BE LESS THAN 256
         BH    NCHNULL            ELSE STORE NULL STRING RESULT
         L     R8,APBUF           FIND WHERE I/O BUFFER CURRENTLY
         LA    R8,0(R8,R11)        POINTING.
         L     R8,0(R8)
         CR    R3,R8              MUST BE INFRONT OF COLUMN REQUESTED
         BNH   NCHNULL            IF NOT RETURN NULL STRING
         SR    R3,R8              COMPUTE NUMBER OF BLANKS NEEDED
TAB1     LR    R6,R3              GET SPACE FOR BLANKS STRING
         L     R7,ASTR1PTR
         AR    R6,R7
         C     R6,ASTR2PTR
         BNH   TAB2
         L     R15,ADGCOL
         LR    R1,R3
         BALR  R14,R15
         B     STNGFUL
         B     TAB1
TAB2     ST    R6,ASTR1PTR
         A     R7,ASTRGBEG
         AR    R7,R11
         ST    R7,TEMP1           STORE ADDR
         STC   R3,TEMP1           STORE LEN
         LE    F0,TEMP1           PUT RESULT PTR. IN F0
         MVI   0(R7),C' '         PUT IN FIRST BLANK
         BCTR  R3,0               DECR. ONE FOR FIRST CHAR STORED
         BCTR  R3,0               MINUS 1 FOR EXECUTE
         LTR   R3,R3              ANY MORE TO STORE
         BM    STEXIT             NO, THEN DONE
         EX    R3,TABMVC          MOVE IN REST OF BLANKS
         B     STEXIT
TABMVC   MVC   1(0,R7),0(R7)
*
*
AGCOL    EQU   *
***********************************
*
* ===> PHASE I -- FIND ALL VALID POINTERS
*
************************************
*
         USING ASTGDSCT,R1     STRING ARRAY POINTER DSECT
         ST    R3,TEMP1           SAVE AMT OF SPACE THAT MUST BE COL.
         LA    R1,ATOZSTRG        START OF STRING POITER SPACE
         LA    R2,8               INCR. THROUGH STRING PTRS.
         LA    R3,200(,R1)        LAST STRING ENTRY TO CHECK
         L     R4,ARRAYBEG        SEE WHERE ACTUAL POINTERS BEGIN
         LA    R4,0(R4,R11)
         L     R5,ASTRGBEG        START OF RANGE POINTERS MUST BE IN
         LA    R5,0(R5,R11)
         LR    R6,R5
         A     R6,ASTR1PTR        END OF RANGE POINTERS MUST BE IN
         L     R14,AGARBBEG       START OF GARB TABLE
         LA    R14,0(R14,R11)
         L     R15,AGARBSIZ       END OF GARB TABLE
         AR    R15,R14
         LA    R0,4               USING IN BUMPING POINTERS
GCOL1    LR    R7,R4
         AH    R7,ASTRGIDX        POINTING NOW TO STRING POINTER
         L     R8,ASTRGLFT        XNUMBER OF ITEMS (IF ARRAY)
         C     R8,MZERO           IS IT DIMD
         BNE   GCOL2              YES, HOLD IT
         LA    R8,1               NO, ONLY LOOK AT 1 PTR
GCOL2    CLI   0(R7),X'00'        IS STRING LENGTH ZERO
         BE    GCOL3              YES, SKIP THIS POINTER
         L     R9,0(R7)           GET STRING POINTER
         LA    R9,0(,R9)          WIPE OUT LENGTH
         CR    R9,R5              IS IT IN RANGE
         BL    GCOL3              BRANCH IF NOT
         CR    R9,R6
         BNL   GCOL3
         ST    R7,0(R14)          SAVE THIS POINTER IN GARB TABLE
         AR    R14,R0             POINT TO NEXT GARB TABLE ENTRY
         CR    R14,R15            ROOM FOR MORE POINTERS
         BH    STNGFUL            NO,QUIT
GCOL3    AR    R7,R0              MOVE TO NEXT PTR. IF AN ARRAY
         BCT   R8,GCOL2           BACK FOR MORE IF ARRAY
         BXLE  R1,R2,GCOL1        BACK FOR MORE POINTERS
**********************************
*
* ===>  PHASE II -- SORT THE POINTERS
*
***********************************
*
         LR    R15,R14            WHERE GARB TABLE ENDS
         ST    R15,AGARBPTR
         L     R14,AGARBBEG
         LA    R14,0(R14,R11)     WHERE GARB TABLE STARTS
         LR    R7,R15
         SR    R7,R0              BACK UP ONE TO CHECK END
GCOL4    LR    R4,R14             PICK UP POINTER
         CR    R4,R7              DONE ?
         BE    GCOL9              YES, GO TO NEXT PART
         LR    R1,R14             GET POINTER
         L     R2,0(R1)           GET INDEX TO STRING
         L     R3,0(R2)           GET ADDRESS OF STRING
         LA    R3,0(R3)           WIPE OUT LENGTH
GCOL5    AR    R4,R0              CHECK AGAINST NEXT STRING
         CR    R4,R15             DONE
         BNL   GCOL8
         L     R5,0(R4)
         L     R6,0(R5)
         LA    R6,0(R6)
         CR    R3,R6              IN ORDER
         BL    GCOL5              YES, GO TO NEXT ONE
         BE    GCOL7              GO CHECK LENGTH FOR EQUAL ALSO
GCOL6    LR    R1,R4              HOLD ON TO SMALLER ONE
         LR    R2,R5
         LR    R3,R6
         B     GCOL5              BACK FOR MORE
GCOL7    CLC   0(1,R2),0(R5)      COMPARE LENGTHS
         BNH   GCOL5              SMALLER, GO TO NEXT ONE
         B     GCOL6              ELSE, SWITH POINTERS
GCOL8    LR    R4,R14             REPLACE WITH SMALLEST ITEM
         L     R5,0(R4)
         ST    R2,0(R4)           SWITH ITEMS
         ST    R5,0(R1)
         AR    R14,R0             BUMP TO NEXT SEARCH
         B     GCOL4
GCOL9    EQU   *
**********************************
*
* ===>  PHASE III -- COMPRESS THE STRINGS
*
***********************************
*
         L     R14,ASTRGBEG
         LA    R14,0(R14,R11)     WHERE STRINGS BEGIN
         L     R15,ASTR1PTR
         AR    R15,R14            WHERE STRINGS END
         L     R1,AGARBBEG
         LA    R1,0(R1,R11)       WHERE STRING PTR. INDEX BEGIN
         L     R2,AGARBPTR        WHERE STRING PTR. INDEX END
         LR    R3,R14             R3 PTS. WHERE STRINGS WILL BE MOVED
         SR    R5,R5              INITIALIZATION
         LR    R6,R5
GCOL10   L     R8,0(R1)           GET POINTER
         IC    R5,0(R8)           GET LENGTH
         L     R4,0(R8)           ACTUAL STRING POINTER
         LA    R4,0(R4)           WIPE OUT LEN
         CR    R4,R6              IS THERE OVERLAP
         BNL   GCOL20             NO, BRANCH
         SR    R6,R4              BACK UP R3
         SR    R3,R6
GCOL20   ST    R3,0(R8)           RESET POINTER
         STC   R5,0(R8)           AND LENGTH
         BCTR  R5,0               MINUS 1 FOR EXECUTE
         CR    R3,R4              ARE WE MOVEING TO SELF
         BE    GCOL30             IF SO DONT DO MVC
         EX    R5,GCOLMVC         MOVE STRING
GCOL30   LA    R6,1(R4,R5)        SEE WHERE ORIG. STRING ENDS
         AR    R1,R0              BUMP TO NEXT POINTER
         LA    R3,1(R3,R5)        MOVE TO WHERE NEXT STRING GOES
         CR    R1,R2              ARE WE DONE
         BL    GCOL10             NO, BACK FOR MORE
         LR    R2,R3
         SR    R3,R14             NEW STRING END POINTER
         ST    R3,ASTR1PTR        SAVE IT
         SR    R15,R2             SEE HOW MUCH COLLECTED
         C     R15,TEMP1          WAS IT ENOUGH
         BNL   STEXIT             YES, OK. RETURN
         B     STNGFUL            ELSE, ERROR EXIT
GCOLMVC  MVC   0(0,R3),0(R4)
*
STEXIT   EQU   *
         L     R13,4(R13)
         LM    R14,R12,12(R13)
         B     4(R14)             GOOD RETURN TO BASIC
*
STNGFUL  LA    R1,1
         L     R13,4(R13)
         LM    R14,R0,12(R13)
         LM    R2,R12,28(R13)
         BR    R14                ERROR RETURN TO BASIC
*
         DS    0D
UNORM    DC    X'4E00000000000000'
MZERO    DC    X'80000000'
ADJUS    DC    X'46000000'
NORML    DC    E'0'
MINU1    DC    E'-1.0'
TWO55    DC    F'255'
TWO54    DC    F'254'
CLKCNV   DC    A(38400/2)
SIXTY    DC    F'60'
AALST    DC    A(ALST)
AACLK    DC    A(ACLK)
ADGCOL   DC    A(GCOL)
DATMSK   DC    C'MM/DD/YY'
CLKMSK   DC    C'HH:MM:SS'
ASTNGL   DSECT
TEMP1    DS    1D
TEMP2    DS    1D
AREA     DSECT
        COPY  AREA
         END
