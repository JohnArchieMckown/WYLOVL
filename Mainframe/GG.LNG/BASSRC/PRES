PRES     TITLE 'PRESSIT'
PRESSIT  CSECT
***********************************************************************
*                                                                     *
*                 WYLBUR/BASIC PRESSIT PROGRAM                        *
*                       BATCH VERSION                                 *
*                                                                     *
***********************************************************************
*
*REGISTER USAGE
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10                 BASE FOR 'CONTROL' WORK AREA
R11      EQU   11                 BASE OF USER AREA
R12      EQU   12                 BASE FOR PRESSIT
R13      EQU   13                 POINTER TO SAVE AREA
R14      EQU   14
R15      EQU   15
*
BASER    EQU   12                 BASE FOR PRESSIT
*
*OS ENTRY LINKAGE (TYPE 3: DEPENDENT)
*
         SAVE  (14,12),,*
         BALR  BASER,0            ESTABLISH ADDRESSABILITY FOR
         USING *,BASER             CALLED
         LR    3,13               COPY CALLERS SAVE AREA ADDRESS
         LA    13,72(0,13)        LOAD ADDRESS OF CALLEDS SAVE AREA
         ST    13,8(0,3)          PUT CALLEDS SAVE AREA ADDRESS
*                                  IN CALLERS SAVE AREA
         ST    3,4(0,13)          PUT CALLERS SAVE AREA ADDRESS
*                                  IN CALLEDS SAVE AREA
         B     GO                 BRANCH AROUND ADDRESS CONSTANTS
*
*ADDRESS CONSTANTS FOR EXTERNAL CONTROL SECTIONS (V TYPE IF ANY)
*
*
*SET UP FOR CONTROL PROGRAMS WORK AREA
*
GO       EQU   *
         USING CWORK,10           TELL ASSEMBLER ABOUT CWORK
         USING AREA,11            TELL ASSEMBLER ABOUT AREA
*
*
*
*
*
*
***********************************************************************
*                                                                     *
*                 THE CODE GOES HERE                                  *
*                                                                     *
***********************************************************************
*
*SET UP REGISTERS TO COLLECT STATEMENT NUMBER
         SR    R0,R0              TO ASSEBLE LINE NUM IN
         LA    R1,LINEIN          ADDR OF LINE IN CWORK
         SR    R3,R3              COUNT OF NUMBER OF CHAR ASSEMBLED
         LA    R4,LINEIN+70       ADDR OF LAST CHAR IN BUFFER
         MVC   LINEIN+71(9),EOBSENT   EOB SENTINEL AND BLANKS
*COLLECT THE STATEMENT NUMBER
LL1      CLI   0(R1),X'F0'        CHECK FOR DIGIT
         BL    LL3                *
         CLI   0(R1),X'F9'        *
         BH    LL3                *
         IC    R0,0(R0,R1)        STICK 1ST CHAR IN WORK REG
         LA    R3,1(R0,R3)        KICK NUMBER OF CHAR COLLECTED
         LA    R1,1(R0,R1)        KICK UP THE BUFFER
         CR    R1,R4              CHECK FOR LAST CHAR PROCESSED
         BNH   LL2                IF NOT GO ON
CONVERT  XC    PAREA(8),PAREA     CLEAR THE PACKED AREA
         ST    R0,UPAREA          STORE UNPACKED NUM IN UNPACKED AREA
         PACK  PAREA+5(3),UPAREA(4)  CONVERT NUM TO PACKED FORM
         CVB   R0,PAREA           CONVERT NUM TO BINARY FORM IN REG 0
         STH   R0,LINENO          PUT STATEMENT NUMBER IN PRESSD BUFFER
         LTR   R0,R0              TEST FOR LOW RANGE
         BH    LL5                IF NOT LOW GO ON
         B     LL4                GO SAY NO STATEMENT NUMBER
LL2      CLI   0(R1),X'F0'        CHECK FOR DIGIT
         BL    CONVERT            *
         CLI   0(R1),X'F9'        *
         BH    CONVERT            *
         SLL   R0,8(R0)           SHIFT WORK REG LEFT 1 CHAR SPACE
         IC    R0,0(R0,R1)        STUFF NEXT CHAR IN WORK REG
         LA    R3,1(R0,R3)        KICK NUMBER OF CHAR COLLECTED
         LA    R1,1(R0,R1)        KICK UP THE BUFFER
         CH    R3,=H'4'           SEE IF WE ARE FULL
         BE    CONVERT            IF WE ARE WE ARE DONE WITH NUM
         CR    R1,R4              HAS LAST CHAR BEEN PROCESSED
         BNH   LL2                IF NOT TRY FOR ANOTHER ONE
         B     CONVERT            IF SO GO MAKE NUM BINARY
LL3      CLI   0(R1),X'40'        DID WE HAVE A BLANK
         BNE   LL4                IF NOT GO MAKE AN ERROR
         LA    R1,1(R0,R1)        KICK UP THE BUFFER
         CR    R1,R4              PROCESSED LAST CHAR ?
         BNH   LL1                GO BACK AND TRY TO FIND FIRST CHAR
LL4      LA    R0,1(R0,R0)        SET ERROR RETURN - NO STATEMENT NUM
         B     RETURN
 SPACE
*SET UP TO SCAN OUT NON-BLANKS TO LINEPRES
LL5      LA    R5,LINEPRES        ADDR OF PRESSED SOURCE LINE
         MVI   LINEPRES,X'40'     SET FOR MVC
         MVC   LINEPRES+1(79),LINEPRES   CLEAR THE BUFFER
         SR    R2,R2
*
         TRT   0(256,R1),TRTNB    SEARCH FOR FIRST NON-BLANK
         CLC   0(3,R1),=C'REM'
         BNE   LL6+6(R2)          BRANCH IF NOT A REMARKS STATEMENT
*
         MVC   0(3,R5),0(R1)      MOVE IN THE 'REM'
         B     NORMRET            IGNORE REST OF LINE
 SPACE
*DO THE SCAN
*
LL6      TRT   0(256,R1),TRTNB    SEARCH FOR NON-BLANK
         B     *(R2)              BRANCH ON FUNCTION
*
         B     NORMRET            END-OF-BUFFER  OR  CENT-MARK
*
         B     BEGQ               QUOTE
*
         LR    R6,R1           R6 <= A(NON-BLANK)
         TRT   0(256,R1),TRTB     SEARCH FOR END OF NON-BLANK BYTES
         B     *(R2)              BRANCH ON FUNCTION
*
         B     MVCNR              END-OF-BUFFER  OR  CENT-MARK
*
         NOP   0                  QUOTE
*
*        ***                      BLANK
*
MVSTRNG  LR    R7,R1           R7 <= A(BYTE FOLLOWING STRING TO MOVE)
         SR    R7,R6              <= NUMBER OF BYTES TO BE MOVED
         EX    R7,MVC             MOVE SOURCE FIELD TO TARGET AREA
         AR    R5,R7           R5 <= A(NEXT UNUSED FIELD IN TARGET)
         MVI   0(R5),C' '         CLEAN UP THE EXTRA BYTE MOVED IN
*
         B     *(R2)              BRANCH ON TYPE OF STRING JUST MOVED
         B     LL6                QUOTE STRING WAS MOVED
         B     BEGQ               STRING PRECEDING QUOTE WAS MOVED
         B     LL6                STRING PRECEDING BLANK WAS MOVED
 SPACE
BEGQ     LR    R6,R1           R6 <= A(QUOTE)
BUMPR1   LA    R1,1(,R1)       R1 <= A(NEXT BYTE IN CHAR. STRING)
         TRT   0(256,R1),TRTB     SEARCH FOR MATCHING QUOTE
         B     *(R2)              BRANCH ON FUNCTION
*
         B     Q4                 END-OF-BUFFER  OR  CENT-MARK
*
         B     Q8                 QUOTE
*
         B     BUMPR1             BLANK
*
Q8       CLC   0(1,R6),0(R1)
         BNE   BUMPR1             BRANCH IF DIFFERENT TYPE OF QUOTE
*
         LA    R1,1(,R1)       R1 <= A(QUOTE) + 1
         CLC   0(,R6),0(R1)       CHECK FOR TWO IN A ROW
         BE    BUMPR1             IGNORE PAIRED QUOTES
*
         LA    R2,4               RETURN TO LL6 AFTER STRING IS MOVED
         B     MVSTRNG
 SPACE
Q4       CLI   0(R1),0
         BNE   BUMPR1             BRANCH IF NOT END-OF-BUFFER
*
*        A BEGINNING QUOTE WAS SEEN AND THE END-OF-BUFFER REACHED
*        BEFORE A MATCHING QUOTE WAS FOUND.  THERE IS NO PROVISION
*        FOR RETURNING AN ERROR CODE AT THIS TIME.
*
         MVI   LINEIN+71,C' '     LETS NOT MOVE A ZERO IN
*
MVCNR    SR    R4,R6           R4 <= NUMBER OF NON-BLANK BYTES
         EX    R4,MVC             MOVE SOURCE FIELD TO TARGET AREA
*
NORMRET  SR    R0,R0              SET NORMAL RETURN CODE
*
*RETURN TO CALLER
*
RETURN   MVI   LINEIN+71,C' '     LEAVE IT CLEAN
         L     13,4(0,13)         PUT ADDR OF CALLERS SAVE AREA BACK
         LM    14,15,12(13)       RESTORE CALLERS REGISTERS
         LM    1,12,24(13)         EXECPT REGISTER 0
         BCR   15,14              RETURN TO CALLER
 SPACE 2
MVC      MVC   0(,R5),0(R6)
EOBSENT  DC    X'00',CL8' '
         LTORG
 SPACE
         DS   0D
TRTNB    DC    AL1(4),255AL1(12)
 SPACE
TRTB     DC    AL1(4),255AL1(0)
 SPACE
         ORG   TRTNB+C''''
         DC    AL1(8)
         ORG   TRTNB+C'"'
         DC    AL1(8)
         ORG   TRTNB+C' '
         DC    AL1(0)
         ORG   TRTNB+C'^'
         DC    AL1(4)             A '^' CHARACTER ACTS AS THE END-OF-
*                                 BUFFER WHEN NOT IN A CHARACTER STRING
 SPACE
         ORG   TRTB+C''''
         DC    AL1(8)
         ORG   TRTB+C'"'
         DC    AL1(8)
         ORG   TRTB+C' '
         DC    AL1(12)
         ORG   TRTB+C'^'
         DC    AL1(4)             A '^' CHARACTER ACTS AS THE END-OF-
*                                 BUFFER WHEN NOT IN A CHARACTER STRING
*                                 AND AS JUST ANOTHER CHARACTER WHEN
*                                 PART OF A CHARACTER STRING.
         ORG   TRTB+256
 SPACE
         EJECT
CWORK    DSECT
         COPY CWORK
         EJECT
AREA     DSECT
         COPY AREA
         END
/*
