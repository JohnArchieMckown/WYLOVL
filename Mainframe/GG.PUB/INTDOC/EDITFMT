<.b+>January 1986

ITS Systems Group
Technical Note 1


WYLBUR Edit Format<.b->



<.u+>Modifications<.u->


<.u+>Date<.u->               <.u+>Author<.u->          <.u+>Description<.u->
25-March-1973      John Ehrman     Original publication,
                                   SLAC Computing Services,
                                   Technical Note 75

15-March-1976      John Ehrman     Revision 1

13-January-1986    Jim Nisbet      Document extended edit format.




This document describes the internal format used by WYLBUR for its
data sets.  The document was originally written by John Ehrman of
the SLAC Computation Center in March 1973.

In January 1986 WYLBUR edit format was extended.  This document
describes the extended WYLBUR edit format.
<.page>

1. <.u+>Overview<.u->

The WYLBUR text editor stores its data in a compressed format known
as Edit format.  A data set in Edit format consists of a number of
records having the form:

<-------------------------- Edit Block --------------------------->

*-----------------------------------------------------------------*
|     |             |             |             |                 |
| LEN | Line Record | Line Record | Line Record | etc...          |
|     |             |             |             |                 |
*-----------------------------------------------------------------*

The two-byte quantity "LEN" is the length of the Edit block,
including the length LEN itself; it is usually referred to as the
<.u+>block length<.u->.  The high-order bit of LEN indicates that the
following block is in extended Edit format (see below).

Programs that read Edit format should accept any blocksize up to
32760, the maximum allowable by current access methods.  When
WYLBUR saves an extended edit format  file, it will use one of the
following BLKSIZEs:

   <.u+>BLKSIZE             Device         Records per track<.u->

   BLKSIZE=23476       3380 disk         2
   BLKSIZE=19069       3350 disk         1
   BLKSIZE=13030       3330 disk         1

Each Edit block contains one or more <.u+>Line Records<.u->.  Line
Records may have one of two formats:  old Edit format or extended
Edit Line Record format.

The first five bits of the Line Record are flags, defined as
follows:

     x'80'  - the line text is not pressed
     x'40'  - the line is marked (a WYLBUR editing proof mark)
     x'20'  - extended line record format (see Extended Line Record
              section)
     x'10'  - halfword count field (count field is two bytes long)
     x'08'  - reserved

The remaining three bits are either part of the Flag byte in
extended format or part of the four-byte line number field in
non-extended format.

If the halfword count field bit is set, then the Count field in the
Line Record will be two bytes.  All programs should accept both
halfword and byte count specifications.  If the value is larger than
your program can tolerate, it should truncate it.  WYLBUR can
currently only handle line lengths of up to 235 characters, but it
will accept a halfword count and truncate the data to 235 characters
if necessary.

It is anticipated that in the future WYLBUR may handle longer lines
and use the halfword count fields.
Your
program should accept the indication that the count field is a
halfword even if your program cannot accept lines of over 255
characters.
<.page>

2. <.u+>Extended Line Record Format<.u->

If the extended format bit is on, the WYLBUR Line Record is defined
as follows:

 <--------------------------- Line Record ------------------------>
  *---------------------------------------------/
  | Flags (1) | Initials (3) | Clock (4) | ... /
  *-------------------------------------------/

  /--*------------------------------------------------------------
 /.. | Set Number (2) | Line-number (4) | Count(1)/(2) | Line Data
/ ---*------------------------------------------------------------

<.u+>Field<.u->       <.u+>Length<.u->   <.u+>Description<.u->

Flags       1 byte   the high-order five bits are the flags
                     defined above. The remaining 3 bits are reserved
                     and should be set to zero. The x'20' bit will
                     be on, indicating extended format.

Initials    3 bytes  the initials of the user who last modified this
                     line.  Most programs should ignore this
                     information.

Clock       4 bytes  the time of day when the record was last
                     modified (the high-order 32-bits of the
                     System/370 TOD clock).  Most programs should
                     ignore this information.

Set Number  2 bytes  active file information used for saving multiple
                     active files in one physical file.  Any line
                     records with a non-zero set number should
                     be skipped.  Programs creating extended
                     Edit format files should make this field
                     binary zeros.

Line Number 4 bytes  a four-byte line number as a binary
                     integer (in thousandths). WYLBUR accepts
                     binary values between 0 and 999999.999.
                     (Note that this is one digit more than
                     non-extended format allows.)

Count       1 byte   The Count byte or halfword contains (in binary)
            2 bytes  the number of bytes of Line Data that follow
                     the Count field.  Count is a halfword if the
                     halfword count specification bit is set (the
                     fourth bit of the Line Record, as described above.)
<.page>

3. <.u+>Line Record Format<.u->

If the extended format bit is not on (the third bit of the line
record), the Line Record is defined as follows:

<----------------------- Line Record ----------------------------->

*-----------------------------*
|       |             |       |
|5-bits |3 bit, 3 byte| Count |
|  of   | Line Number | 1 or 2|  <------------ Line Data --------------->
| flags |             | Bytes |
*-----------------------------*

The five high-order bits are the flags described earlier. The
remaining three bits and 3 bytes are the Line Number in binary, that
has a maximum value of 99999.999.  The Count field
contains the number of bytes of Line Data that follow (it does not
include itself).  The Count field is a halfword if the halfword
count bit is turned on (the fourth bit in the flag area).


4. <.u+>Line Data<.u->

The Line Data itself is defined in the same way in extended and
non-extended Line Records.

If the line is pressed (the high-order bit of the flag region is
off), then the Line Data consists of a mixture of <.u+>Control Bytes<.u->
and <.u+>Text Segments<.u->.

<--------------- Line Data -------------------->
*----------------------------------------------*
|     |         |     |     |     |            |
|Cntrl|  Text   |Cntrl|Cntrl|Cntrl|  Text      |
|Byte | Segment |Byte |Byte |Byte | Segment    |
|     |         |     |     |     |            |
*----------------------------------------------*

A Control Byte contains two four-bit fields, as follows:


<-Control Byte-->
*---------------*
|       |       |
|   B   |   T   |
|       |       |
*---------------*

B is the binary count of the number of leading blanks to be inserted
before the following text, if any.  The blank count may take any
value from 0 to 15.  T is the number of text characters in the Text
Segment following this control byte.  If there are no characters in
the text segment, the value of T will be zero.  The Text Segment
length T may take any value from 0 to 15.  The Text Segment follows
the B blanks that were inserted (or skipped, if you are writing Edit
format instead of reading it.) A null line will have a zero Count
field and Line Data never ends with a Control Byte.
<.page>

To illustrate, suppose the following Line Data appeared in a
Line Record (all values are in hex):

         01D983C2C1D334F1F46BE7               (sample Line Data)

The first Control Byte indicates 0 blanks to be inserted, followed
by a Text Segment 1 byte long.  The text segment is D9, the EBCDIC
representation of the letter R.  The next Control Byte indicates
that 8 blanks are to be skipped, followed by a Text Segment of 3
characters.  This text segment is C2D1D3, the EBCDIC representation
of the letters BAL.  This is followed by 3 blanks and a Text Segment
of 4 characters, which are the last non-blank characters in the
line.  The uncompressed line image which corresponds to this Line
Data is:

R        BAL   14,X

Since these are eleven bytes in the Line Data, the Count field would
contain 0B.

Line Numbers consist of an integer part and a fractional part.
Because the fractional part always consists of exactly three digits,
Line Numbers are represented as four-byte binary integers whose
value is 1000*(Line Number).  Thus the Line Number 1.500 would be
represented as the binary integer having value 1500.


<.u+>Historical Note<.u->:  In the original (Campus 360/67) version of WYLBUR
the internal representation of a Line Number was different.  Instead
of a 4-byte binary value, the old version saved a 2-byte integer
part and a 2-byte fractional part.  For example, with the line
number 1.500 the integer part is 1 and the fractional part is 500.
As far as we know this form is no longer used in any of the versions
of WYLBUR and has not been used since 1975.  It is therefore
considered obsolete.


