August 1986                                      ITS Systems Group
Created 08/21/86 by JDN/AHJ                      Technical Note
(Internal Document)



        <.b+>Communicating Between Interactive Sessions<.b->


[At the time of this writing this support is still considered
experimental and therefore subject to change without notice.]

The SYSCALL command is used in extended EXECs to call system
procedures.  The PATH procedures documented here provide a
mechanism for communicating among terminal sessions.  Among other
things, these procedures facilitate using a virtual terminal
(BATWYL) session as a "server session" from which other sessions can
retrieve information.  This is an advanced use of extended EXECs.

The terminology used here is the same as that used to describe how
the Suzan inter-address space communication SVC operates.

path        a "path" is established between two sessions to allow
            communications.  This path be specifically opened by
            each session before any communications can take place.

"mytag"     a 1-8 character name that names the owner's half of the
            communications path, used when opening the path.

"yourtag"   a 1-8 character name that names the other (target) half
            of the communications path, used when opening the path.

pathno      a number associated with the path.  Each path is
            assigned a number when it is first opened.  This number
            must be used with all subsequent calls to identify the
            path.  The function calls are listed below.

return      each path call returns a return code.  If the call
code (rc)   executes successfully, the return code is set to 'OK'.
            A list of return codes is included at the end of this
            document.

The operations you can perform on a path are PATH_OPEN,
PATH_CLOSE, PATH_READ, and PATH_WRITE, PATH_CONTROL, and
PATH_STATUS.


<.page>
<.b+>SYSCALL PATH_OPEN (pathno, option-string, rc)<.b->

Opens a path with another terminal session.  A path must be opened
by both of its users before it can be used.

pathno   a variable into which the path number will be put upon
         completion of the open.  The variable must be declared as a
         number before the PATH_OPEN call can be made.  You can use
         this variable to specify the path number on subsequent
         calls to this path.

option-string
         a string, enclosed in quotes, specifying any or all of the
         following options:

         MYTAG=mytag     specifies the owner's tag name.  Defaults
                         to the owner's account.
         YOURTAG=yourtag specifies the target session's tag name.
         WAIT            wait until the partner opens the other side
                         of the path.

         Either MYTAG or YOURTAG must be specified before you open
         the path.  Opening a path with only MYTAG indicates that
         your program will communicate with any other program.

rc       a variable into which the return code will be put on
         completion of the OPEN.  A return code of "OK" means that
         the path was successfully opened.  This variable must be
         declared as a string before the PATH_OPEN call can be made.



<.b+>SYSCALL PATH_READ (pathno, option-string, read-string, rc)<.b->

Reads (receives) information from the path.

pathno   specifies the path-number of an open path.  (This can be
         the variable used in PATH_OPEN.)

option-string
         a string, enclosed in quotes, in which you can specify the
         WAIT option, which waits until there is data to be read.

read-string
         a string variable into which a line of text will be
         returned.

rc       the variable into which the return code is put.
         'OK' indicates a successful completion


<.page>
<.b+>SYSCALL PATH_WRITE (pathno, option-string, write-string, rc)<.b->

Writes (sends) information to the path.

pathno   the path number of an open path.

option-string
         a string, enclosed in quotes, in which you can specify the
         WAIT option, which waits until the partner on the path is
         able to receive data.

write-string
         a string or string variable containing the string to be
         sent over the path.

rc       the variable into which the return code is put.
         A value of 'OK' indicates successful completion.



<.b+>SYSCALL PATH_CLOSE (pathno, option-string, rc)<.b->

Closes the path.

pathno   the path number of an open path.

option-string
         there are no options on the PATH_CLOSE call, so this should
         be a null string ('').

rc       a variable into which the return code is put.
         A value of 'OK' indicates a successful completion.


<.page>
<.b+>SYSCALL PATH_CONTROL (pathno, option-string, rc)<.b->

Obtains account information about the partner on the path.

pathno   the path number of an open path

option-string

rc       a variable into which the return code is put.



<.b+>SYSCALL PATH_STATUS (pathno, option-string, rc)<.b->

Obtains information about the status of the path.

pathno   the path number of an open path

option-string

rc       a variable into which the return code is put .


<.page>
<.b+>Return codes from SYSCALL Procedures<.b->

The SYSCALL PATH macros return the following return codes:

    'OK'                call completed successfully

    'MSG BUFFER FULL'   the message buffer is full -- you must
                        wait until your partner has READ some
                        messages before you can send more.

    'NO PARTNER'        your partner has not opened the path.

    'TOO BIG'           the text you are trying to send is too big
                        for the buffer.

    'NOT OPEN'          the specified path is not open.

    'BAD PATH NUMBER'   the specified number is not a valid path
                        number.

    'NO DATA'           there is no data to be read.

    'PATH CLOSED'       the specified path has been closed.

    'INVALID OPTION'    the order of the parameters on the SYSCALL
                        are incorrect, or the specified option is
                        not valid on that procedure.

    'NOT IMPLEMENTED'   option not implemented.

    'ERROR' or 'BAD SUZAN ...'
                        these error messages indicate an internal
                        error in the procedure and should never
                        appear.

<.b+>Sample SYSCALL procedures in an EXEC File<.b->

    . . .
    declare num pathno
    declare string rc readst writest
    writest = 'Text to send to server'
    syscall path_open (pathno,'MYTAG=tag1,YOURTAG=tag2,WAIT', rc)
    if (rc NE 'OK') pcall openerr
    syscall path_write (pathno,'WAIT',writest,rc)
    if (rc NE 'OK') pcall writerr
    syscall path_read (pathno, 'WAIT', readst, rc)
    if (rc NE 'OK') pcall readerr
    syscall path_close (pathno, '', rc)
    if (rc NE 'OK') pcall closerr
    . . .

For an example of a client server program and a requesting
(client) program, see the files WYL.GG.JDN.LIB#SERVER and
WYL.GG.JDN.LIB#PSERVER.

