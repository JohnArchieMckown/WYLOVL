;
;  Wings - ALLOCATE command
;
xproc () begin

   declare number  x.pathno
   declare string  open_str
   declare string  open_opt
   declare string  wing_path
   declare string  msg xmsg pmsg
   declare string  rc cr
   declare boolean debug
   cr = SHEX('0D')                   ;  CR CHARACTER


;***debug:  set true
debug=false

;***debug:  comment out two following
   on error cmd 'pcall err_routine'
   on attn  cmd 'pcall err_routine'

   wing_path = fpath

   if (vartype('ses.wings_library') eq 'UNDEFINED') \
      ses.wings_library = ''

   if (ses.wings_library eq '') \
      ses.wings_library = 'wyl.gg.wyl.wings.commands'

   msg = 'yourtag=&(wing_path) noheader'
   syscall path_open(x.pathno, msg, rc)
   if (rc ne 'OK') begin
      syscall path_close(x.pathno)
      comm Path error on open = &(rc)
      xreturn
   end

   open_str = sub('FILE_ALLOCATE:',1,16)
   open_opt = parm_string
   msg = open_str || open_opt

   if (user ne sub(acct,1,3)) begin
      open_str = open_str || ' setuser=' || '&(user)'
   end

   if (group ne sub(acct,4,2)) begin
      open_str = Open_str || ' setgroup=' || '&(group)'
   end

if (debug) wri '<='||msg

   syscall path_write(x.pathno, ' ', msg, rc)
   if (rc ne 'OK') begin
      syscall path_close(x.pathno)
      comm Path write error - &(rc)
      xreturn
   end

   done = false
   while (not done) begin
      syscall path_read(x.pathno, ' ', msg, rc)
if (debug) begin
   wri '=>' nonl
   putend &(sub(msg,1,200))
   lis las unn mix
   del las nolis
   if (size(msg) gt 200) begin ; long
      putend &(sub(msg,201))
      wri '=>' nonl
      lis las unn mix
      del las nolis
      end                      ;  (long)
   wri 'RC='||RC
   end                             ; (debug)

      if (rc ne 'OK') begin
         syscall path_close(x.pathno)
         comm path read error = &(rc)
         xreturn
      end
      done = (left(msg,16) ne 'DEBUG:')
      if (not done) begin
         write msg
      end
   end

   if (sub(msg,1,16) eq sub('FILE_ALLOCATED:',1,16)) begin  ; normal
      pmsg=''                                    ; nothing to add
      end                                        ;   (normal)
      else begin                                 ; abnormal
      pmsg=sub(msg,1,16)                         ; save prefix
      end                                        ;   (abnormal)
   msg=sub(msg,17)                               ; strip prefix either way
   if (pmsg ne '') wri pmsg nonl                 ; abnormal end, say so
   if (sub(msg,1,4) eq 'MSG=') begin           ; expected format
      msg=sub(msg,5)
      xmsg=scan_skip(msg)                        ; extended data if any
      msg=scan_token(msg)                        ; basic message text
      msg=strip(msg,'B',"'")                     ; strip extra quotes
      xmsg=strip(xmsg,'B',"'")
      if (scan_token(xmsg) eq 'ERRDATA') begin   ; extended info
         xmsg=scan_skip(xmsg)
         xmsg=strip(xmsg,'L','=')                ; had ='....'
         xmsg=strip(xmsg,'B',"'")                ; now xmsg is just the info
         end                                     ; (extended info)
      xmsg=strip(xmsg)
      wri msg
      if (xmsg ne '') begin                      ; have extended info
         if(yesno('display extended info? ') eq 'YES') begin
            if(index(xmsg,cr) eq 0) wri xmsg
            else begin                           ;  multi-line
               while(index(xmsg,cr) ne 0) begin  ;  loop on lines
                  wri sub(xmsg,1,index(xmsg,cr)-1)  ; first piece
                  xmsg=sub(xmsg,index(xmsg,cr)+1)   ; next piece
                  end                            ;  (loop on lines)
               end                               ;  (multi-line)
            end                                  ;  (display extended info)
         end                                     ;  (have extended info)
      end                                        ;  (expected format)
   else wri msg                                  ;  not expected format

   syscall path_close(x.pathno)

end

proc err_routine() begin

   syscall path_close(x.pathno)
   xreturn

end
