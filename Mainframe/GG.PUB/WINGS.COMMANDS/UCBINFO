;
;  Wings - Return UCB information.  Like UNITINFO but this is a function
;  mcl 1997/08/08
;
;  xcall ucbinfo(volser,info)
;  xcall ucbinfo(unit,info)
;
;  volser      6-character volume serial
;  unit        3 or 4-character unit address
;  info        the result string:
;
; WINGS UNITINFO record:
;
;  ....v....1....v....2....v....3....v....4....v....5....v....6
;  0420 A     DISK STR200 3390-3     3340      SMS Shared
;  unit stat  devt volser devtype    cyls      use misc.
;  0802 O     U.R.        3211 Printer         PN   LC06
;
;  stat is unit status, as in console D U command, i.e., O online,
;  F offline, A allocated, etc.

xproc (parm,result) begin

   declare number  x.pathno
   declare string  open_str
   declare string  open_opt
   declare string  msg  helpdsn uparm
   declare string  rc
   declare boolean dump
   declare num lparm

   on error cmd 'pcall err_routine'
   on attn  cmd 'pcall err_routine'

lparm=size(parm)
uparm=upp(strip(parm))

if (lparm eq 3 or lparm eq 4) begin              ;  unit address
   if (verify(uparm,'0123456789ABCDEF') ne 0) begin ; invalid digit
      wri 'Invalid unit address '||uparm
      xreturn
      end                                        ;  (invalid)

   uparm='UNIT='||uparm
   end                                           ;  (unit address)

if (lparm eq 6) begin                            ;  volser
   uparm='VOLUME='||uparm
   end

if (lparm lt 3 or lparm eq 5 or lparm gt 6) begin  ; invalid length
   wri 'Invalid option '||uparm
   wri 'Specify unit address or volume serial.'
   xreturn
   end
   msg = 'yourtag=&(fpath) noheader wait=5'
   syscall path_open(x.pathno, msg, rc)
   if (rc ne 'OK') begin
      syscall path_close(x.pathno)
      if  (rc eq 'TIMEOUT') begin
         comm Path did not open, check FPATH value'
      end
      else begin
         comm Path error on open = &(rc)
      end
      xreturn
   end

   open_str = sub('UNIT_INFO:',1,16)
   msg = open_str || uparm

   syscall path_write(x.pathno, ' ', msg, rc)
   if (rc ne 'OK') begin
      syscall path_close(x.pathno)
      comm Path write error - &(rc)
      xreturn
   end

   pcall getdata(msg)
   if (sub(msg,1,16) eq sub('DATA:',1,16)) begin
      result = substr(msg,17)
      xreturn(result)
   end                             ;   (data)

   else begin  ; error
   wri &(msg)
   result='ERROR'
   xreturn(result)
   end         ;  (error)

   syscall path_close(x.pathno)

end

proc getdata(msg) begin
   declare string rc
   syscall path_read(x.pathno, ' ', msg, rc)
   if (rc ne 'OK') begin
      syscall path_close(x.pathno)
      comm path read error = &(rc)
      xreturn
   end
   return (msg)
end

proc err_routine() begin

   syscall path_close(x.pathno)
   xreturn

end
