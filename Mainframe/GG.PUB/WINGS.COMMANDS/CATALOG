;
;  Wings - Catalog command
;
xproc () begin

   declare number  x.pathno
   declare string  open_str
   declare string  open_opt
   declare string  msg, rc, ses_lib
   declare string  token, value
   declare boolean loop_flag

   on error cmd 'pcall err_routine'
   on attn  cmd 'pcall err_routine'

   if (vartype('ses.wings_library') eq 'UNDEFINED') \
      ses.wings_library = ''

   if (ses.wings_library eq '') \
      ses.wings_library = 'wyl.gg.wyl.wings.commands'

   msg = 'yourtag=&(fpath) noheader wait=5'
   syscall path_open(x.pathno, msg, rc)
   if (rc ne 'OK') begin
      syscall path_close(x.pathno)
      if (rc eq 'TIMEOUT') begin
         comm The WINGS file server is not available at this time
      end
      else begin
         comm Path error on open = &(rc)
      end
      xreturn
   end

   syscall path_control(x.pathno, 'wait=20', msg, rc)
   if (rc ne 'OK') begin
      if (rc ne 'INVALID OPTION') begin
         comm path_control=&(rc)
      end
   end

   open_str = sub('FILE_CATLG:',1,16)
   open_opt = parm_string
   msg = open_str || open_opt

;;WRI '<='||msg
   syscall path_write(x.pathno, ' ', msg, rc)
   if (rc ne 'OK') begin
      syscall path_close(x.pathno)
      comm Path write error - &(rc)
      xreturn
   end

   loop_flag = true
   while (loop_flag) begin
      syscall path_read(x.pathno, ' ', msg, rc)
;;WRI '['||RC||'] =>'||msg
      if (rc ne 'OK') begin
         syscall path_close(x.pathno)
         comm path read error = &(rc)
         xreturn
      end
      if (sub(msg,1,16) eq sub('FILE_CATLG:',1,16)) begin
         loop_flag = false
         msg = substr(msg,17)
         wri msg
      end
      else begin
         if (sub(msg,1,16) eq sub('FILE_ERROR:',1,16)) begin
            loop_flag = false
            msg = substr(msg,17)
            token = ''
            value = ''
            xcall &(ses.wings_library)#keyword (msg, token, value, rc)
            comm errid=&(value)
            token = ''
            value = ''
            xcall &(ses.wings_library)#keyword (msg, token, value, rc)
            comm errmsg=&(value)
         end
         elseif (sub(msg,1,16) eq sub('DATA:',1,16)) begin
            msg = substr(msg,17)
            comm &(msg)
         end
         else begin
            msg = substr(msg,17)
            token = ''
            value = ''
            xcall &(ses.wings_library)#keyword (msg, token, value, rc)
            comm &(value)
         end
      end
   end

   syscall path_close(x.pathno)

end



;
;  Version error cleanup routine
;
proc err_routine() begin
   syscall path_close(x.pathno)
   xreturn
end
