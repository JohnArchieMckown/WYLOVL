VSD      TITLE 'ORVYL''S SHOW AND DUMP COMMANDS'
********************************************************************
*                                                                  *
*       ORVYL/370  RELEASE III - CLASS I - STANFORD PROPRIETARY    *
*                                                                  *
********************************************************************
         SPACE 5
* MODIFICATIONS
*
         EJECT
         HIBAL
*
VSD      CSECT
         IDENT 07
         SPACE 4
         COPY  ORVDEFN
&MODULE  SETC  'VSD'
         SPACE 3
         REGS  ,,SR,TR,QR,RR,BRR,BR,WAR,RAR,CLWR,LCBR
         EJECT
         MACRO
&L       BTD   &LOC,&LEN,&WORD,&SW,&COMMAS=NO
         LCLC  &CM
         AIF   ('&COMMAS' NE 'YES').NOCM
&CM      SETC  'C'
.NOCM    ANOP
&L       SYSLR 15,&WORD,OP=L
         SYSLR 0,&LEN,TYPE=&SW
         SYSLR 1,&LOC
         XCALL BTD&CM
         MEND
*
         MACRO
&L       BTX   &LOC,&LEN,&WORD
&L       SYSLR 15,&WORD,OP=L
         SYSLR 0,&LEN
         SYSLR 1,&LOC
         XCALL BTX
         MEND
*
         MACRO
&L       SYSONLY ,
&L       LCALL SYSTEST
         MEND
*
         MACRO
&L       PRVBLOCK ,
&L       LCALL PRVPTEST
         MEND
*
         MACRO
&L       EVAL  &DUMMY
&L       LCALL EVAL
         MEND
*
         MACRO
&L       SEGDC &LEN,&WORD,&SW
&L       SYSLR 15,&WORD,OP=L
         SYSLR 0,&LEN,TYPE=&SW
         LCALL SEGDC
         MEND
*
         MACRO
&L       SEGHX &LEN,&WORD
&L       SYSLR 15,&WORD,OP=L
         SYSLR 0,&LEN
         LCALL SEGHX
         MEND
*
         MACRO
&L       SEGLC &WORD
&L       SYSLR 15,&WORD,OP=L
         LCALL SEGLC
         MEND
         EJECT
         EJECT
         COPY  SCP
         EJECT
         COPY  CLW
         EJECT
         COPY  CSD
         EJECT
LNKPAGE  RECORD BEGIN
         COPY  LCB
         END   ,
         EJECT
*  WORK AREA
*
WA       DSECT
         VSA   SR,R11
WARAR    DS    F                       SAVED RETURN
WARR     DS    F                       SAVE LOCAL RETURN
WAFL     FLAG  ,                       SHO FLAGS
         FLAG  (WAFLSYS,X'01')
* - SHO CORE FLAGS
         FLAG  (WAFLMCH,X'80')
         FLAG  (WAFLREP,X'40')         SHOW CORE REPEAT
         FLAG  (WAFLMFND,X'20')        MATCH FOUND AT LEAST ONCE
         FLAG  (WAFLNOA,X'10')         NOADDRESS
         FLAG  (WAFLNOH,X'08')         NOHEX
         FLAG  (WAFLNOT,X'04')         NOTEXT
* - SHO MAP FLAGS
         FLAG  (WAFLUND,X'40')         SHO MAP UNDEFINED
         FLAG  (WAFLCOM,X'20')         SHO MAP COMMON
         FLAG  (WAFLCSE,X'10')         SHO MAP CSECT
         FLAG  (WAFLENT,X'08')         SHO MAP ENTRY
         FLAG  (WAFLDUM,X'04')         SHO MAP DUMMY
* - SHO FORMATTED PSW FLAG
         FLAG  (WAFLFMT,X'80')         FORMATED
*
WAMCHSZ  DS    X                       MATCH SIZE
*
WAKIFL   DS    X                       ACCOUNT PRIVILEGE FLAGS
         KWREC FLAGS
         EJECT
WASCADDR DS    A                       SHO CORE ADDRESS
WASCEND  DS    F
WASCLEN  DS    A                       SHO CORE LENGTH
WAMCHLEN DS    A                       SAVE DURING MATCH SEARCH
         DS    0D
AREA     DS    XL32
AREA2    EQU   AREA+(L'AREA/2)
MATAREA  DS    XL16
*
         ORG   AREA
WAPER    DS    0F                      PER CONTROL INFO
WAPERCD  DS    X
         DS    X
WAPERMSK DS    H
WAPERSTR DS    A                       START ADDRES
WAPEREND DS    A                       END ADDRESS
         ORG   AREA
WACPUT   DS    F
WASVCT   DS    F
WAIOT    DS    F
WAVMC    DS    F
WAORVST  DS    F
WAORVNOW DS    F
WAORVCPU DS    F                       ORVYL CPU TIME CONSUMED
WAPGEXCP DS    F
WAFLEXCP DS    F
         ORG
         ORG   AREA                    FILE COUNTERS
WAIXRWCT DS    F                       IXR WRITE COUNT
WAIXRRCT DS    F                        "  READ    "
WAFUWCT  DS    F                       USER DATA WRITE COUNT
WAFURCT  DS    F                         "   "   READ    "
         ORG   WASCADDR
WASPBADD DS    A                       POINTER (REAL) TO SPBS
WASCBLEN DS    A                       LENGTH OF FULL SCB
         ORG   ,
WASIZE   EQU   *-WA
         EJECT
*NOGEN
VSD     CSECT
*
*
         USING CLW,CLWR                ##
         USING WA,WAR                  ##
*  SHOW COMMAND
*
SHOW     VENTER SR,R11,WASIZE
BASE2    EQU   *+4094
         LA    BRR,BASE2
         USING BASE2,BRR               ##
         CLEAR (WAFL,4)
         CLPSERV PRIVTST               GET UPDATED PRIVS
         L     SR,CLWSCP               SCP POINTER
         USING SCP,SR
         IF    ('TM  SCPPRIV,KWRIFSPR',O),'SET  WAFLSYS'
         MVC   WAKIFL,SCPPRIV          SAVE PRIVS
         DROP  SR
         BAS   BR,SHOWSCAN
         USING BASE,BR                 ## BASE IS EXIT
BASE     EQU   *
*  EXIT
         CLEAR R15                     SET OK RETURN
SHRET    CLEAR CLWFOSC
         VEXIT SR,R11,LTR
*
SCRET    LPR   R0,R0
         BZ    MISSING
ILLSTR   SEG   (1),(0)
         SEG   ': Invalid string'
         B     ERROR
*
REQABORT SEG   'Request aborted'
         B     ERROR
*
PRVPTEST IF    ^CLWPFPRV,@RAR           PRIVATE PROGRAM?
         IF    CLWSSP,@RAR              SPECIAL GUY?
         SEG   'Private program loaded, command blocked'
         B     ERROR
         EJECT
GTEST    LABEL ,
         IF    (CLWGROUP,EQ,'G'),RAR   INTERNAL ACCOUNT
OPRTEST  TM    WAKIFL,KWRIFOPR         OPERATOR PRIVILEGED?
         BOR   RAR                     OK IF SO
*
SYSTEST  IF    WAFLSYS,RAR
         IF    CLWSSP,RAR
PRIVCMD  LABEL ,
         LA    SR,CLWKWKW+7            LAST BYTE OF KEYWORD
         LA    TR,L'CLWKWKW            LENGTH OF KEYWORD
PRIVLOOK LABEL ,
         CLI   @SR,C' '                STILL BLANK
         BNE   PRIVGOT                 NOPE -- REPORT INVALID
         DECR  SR                      BACK OFF ADDRESS
         BCT   TR,PRIVLOOK             KEEP LOOKING FOR LAST CHAR
PRIVGOT  LABEL ,
         LA    R1,CLWKWKW              ADDRESS OF KEYWORD
         LR    R0,TR                   ACTUAL LENGTH
         B     UNREC                   TELL THE BAD NEWS
*
ILLVAL   SEG   'Invalid value'
         B     ERROR
*
ILLINE   SEG   'Invalid line'
         B     ERROR
*
MISSING  SEG   'Missing operand'
         B     ERROR
*
*  UNRECOGNIZED NAME
*
UNREC    DS    0H
         SEG   (1),(0)
         SEG   ': Invalid'
         B     ERROR
ERRORMSG SEG   (1),(0)                 SEG MESSAGE
ERROR    DS    0H                      BE GRAMATICAL
         VCALL TYPEIT
         BR    BR                      EXIT
*
WYLMIL   DS    0H
         LA    R15,4                   SEND CODE
         B     SHRET                   SEND 'SHOW' ON TO MILTEN
*
MSGEXIT  SEG   (1),(0)
WRITEXIT VWRITE
         BR    BR
*
SEG      VPUSH RAR,,*
         VSEG  (1),(0)
         VPOP  RAR,,*
         BR    RAR
         EJECT
*
SEGBLNK  VPUSH RAR,,*
         SEG   ' '
         VPOP  RAR,,*
         BR    RAR
*
EVAL     VSAVE WAR,RAR,*
         VCALL EVAL
         VREST WAR,RAR                 RETURN IS IN RAR
         BM    ERROR
         BR    RAR
*
MSG      VPUSH RAR,,*                  SEG, WRITE, AND RETURN
         SEG   (1),(0)
         B     WRIT1
*
WRITE    VPUSH RAR,,*                  SAVE RETURN
WRIT1    VWRITE ,
         BNZR  BR                      ATTN OR ERROR
         VPOP RAR,,*
         BR    RAR                     NO ERROR
*
SEGDC    VPUSH RAR,14,*
         BTD   CLWTEMP,(0),(15)
         VSEG  (1),(0)
         VPOP  RAR,14,*
         BR    RAR
         EJECT
*
SEGLC    LA     R0,8
*
SEGHX    VPUSH RAR,14,*
         BTX   CLWTEMP,(0),(15)
         VSEG  (1),(0)
         VPOP  RAR,14,*
         BR    RAR
*
SEGSECS  L     R15,=V(SEGSECS)         TIME IN R1
         BR    R15                     RETURN IN RAR
         EJECT
* SCAN SHOW OPTION
*
SHOWSCAN SCAN KWSHOW,CLWKWCB
         B     SCRET
*  SHOW OPTION TABLE
*
KWSHOW   DS    0H
         SCKW  LIN,MILWYL              LINE V. LINK
         SCKW  CORE,SHCORE,A
         SCKW  OSCORE,SHOSC,A
         SCKW  GPRS,SHGPRS,A
         SCKW  FPRS,SHFPRS,A
         SCKW  PSW,SHPSW
         SCKW  SAVEGPRS,SHSGPRS
         SCKW  SAVEGPR,SHSGPRS
         SCKW  SG,SHSGPRS
         SCKW  SAVEPSW,SHSPSW
         SCKW  SP,SHSPSW
         SCKW  CLPGPRS,SHCLGPRS
         SCKW  CLPGPR,SHCLGPRS
         SCKW  CG,SHCLGPRS
         SCKW  CLPPSW,SHCLPSW
         SCKW  CP,SHCLPSW
         SCKW  ADDRESS,SHADDR,A
         SCKW  OSADDR,SHOSCAD,A
         SCKW  REGION,SHREGN,A
         SCKW  MAP,SHMAP
         SCKW  ALL,SHALL
         SCKW  A,SHADDR
         SCKW  C,SHCORE
         SCKW  G,SHGPRS
         SCKW  F,SHFPRS
         SCKW  P,SHPSW
         SCKW  TIMER,SHTIMER
         SCKW  TRAPS,SHTRAPS
         SCKW  TS,SHTRAPS
         SCKW  EVENTS,SHEVENT,A
         SCKW  MONITOR,SHMONIT,A
*GEN
         VGPTAB SHKWRT
         VFSHTAB SHKWRT
         VPMTAB SHKWRT
         VSSVTAB SHKWRT
         VSSWTAB SHKWRT
*NOGEN
         SCKW  ZOT,SHOZOT
         SCKW  FMSK,SHFILEMA,A
         SCKW  CT,SHCT
         SCKW  SCP,SHSCP
*
*  THIS SCKW GOES OFF TO VFST IN TEST CLP FOR SEVERAL COMMANDS
*  IF THIS IS PRODUCTION CLP, THE ADCON IS RESOLVED IN VCLP WITH
*  A NULL KEYWORD TABLE
*
         SCKW  ,MILWYL
         EJECT
*  SEND INVALID SHOW COMMAND TO MILTEN
*
MILWYL   DS    0H
         LA    R15,4                   SEND CODE
         CLEAR CLWMDUMP                CLEAR DUMP FLAG
         B     SHRET                   SEND ON TO MILTEN
         EJECT
*
*        SHOW TIMER INTERVAL
*
*  FOR EXAMPLE:
*  ORVYL TIMER INTERVAL = 1.00 SECONDS.  CPU USAGE LIMIT = 10.00  ...
*
SHTIMER  DS    0H                 SHOW TIMER INTERVAL.
         LH    TR,CLWTIVAL        GET CURRENT INTERVAL
         LTR   TR,TR
         IF    Z,BEGIN
         SEG   'No Orvyl timer interval set.  '
         END
         ELSE BEGIN
         SEG   'Orvyl timer interval = '
         CLEAR SR
         LH    TR,CLWTIVAL        GET CURRENT INTERVAL
         D     SR,=F'10'
         SEGDC 4,(TR)
         SEG   '.'
         SEGDC 1,(SR)
         SEG   '0 seconds.  '
         END
         LH    TR,CLWTMAX         GET CPU USAGE LIMIT
         LTR   TR,TR
         IF    NZ,BEGIN
         SEG   'CPU usage limit = '
         CLEAR SR
         LH    TR,CLWTMAX
         D     SR,=F'10'
         SEGDC 4,(TR)
         SEG   '.'
         SEGDC 1,(SR)
         SEG   '0 seconds.'
         END
         LCALL WRITE
         BR    BR                 DONE
         EJECT
*   SHOW ALL PROGRAM STATUS
*
SHALL    DS    0H
         PRVBLOCK
         BAS   RR,SHPDO                SHO PSW
         LCALL WRITE
         CLEAR SR
         LA    TR,15
         BAS   RR,SHGDO
         LCALL WRITE
         BAS   RR,SHSPDO
         LCALL WRITE
         CLEAR SR
         LA    TR,15
         BAS   RR,SHSGDO
         LCALL WRITE
         CLEAR SR
         LA    TR,6
         BAS   RR,SHFDO
         LCALL WRITE
         BAS   RR,SHSTDO
         IF    (CLWPFSUP+CLWPFPL,NO),'BR BR' GOT A PROGRAM LOADING?
         LCALL WRITE
         L     LCBR,CLWLNKP
         USING LCB,LCBR                 ##
         LM    SR,TR,LCBCORE            PROGRAM START,LEN
         BAS   RR,SHCDO
         IF    ^CLWPFPIC,DOMAP          WORK AREA SET UP, SKIP
         LCALL WRITE
         SENSE 2                       WORK AREA LIMITS
         LR    SR,R1                   START
         LR    TR,R15                  LEN
DOMAP    BAS   RR,SHCDO
         LCALL WRITE
         BAS   RR,SHMDO
         LCALL WRITE
         BAS   RR,SHTDO
         BR    BR
         EJECT
*  SHOW PSW
*
SHPSW    LR    RR,BR
*
SHPDO    PRVBLOCK
         LA    QR,CLWSBPSW
SHPDO1   SCAN  KWTBL,CLWKWCB
         SEG   'PSW = '
         SEGHX 8,@QR
         LCALL SEGBLNK                 INSERT A BLANK
         SEGHX 8,@QR+4
         LCALL SEGBLNK                 INSERT A BLANK
         L     R1,@QR+4
         IF    CLWFM31,'N R1,=X"0FFFFFFF"'
         ELSE  'LA R1,@R1'             ELIMINATE SIGN BIT
         VCALL VSEGLOC
*         VSEGLOC (1),MODE=COND
         LCALL WRITE
         IF    WAFLFMT,BEGIN          FORMAT OPTION?
         SEG   'Int Code='
         SEGDC 0,LH:@QR                SEG INTERRUPT CODE
         SEG   ', IL='
         LC    SR,@QR+2                INSTR LEN, CC & PROG MASK
         SRDL  SR,6                    ISOLATE INSTRUCTION LEN
         LA    R1,ILTBL(SR)            CONVERT TO CHAR
         SEG   (1),1
         SEG   ', CC='
         CLEAR SR
         SLDL  SR,2                    ISOLATE CC
         SLL   SR,2                    MULT BY 4
         LA    R1,CCTBL(SR)            CONVERT TO STRING
         SEG   (1),3
         SEG   ', PM='
         CLEAR SR
         SLDL  SR,4                    ISOLATE PROG MASK
         L     R1,=C'FDES'             MASK BIT MEANINGS
         EX    SR,SHPSTCM              SAVE RELEVENT CHARACTERS
         L     R1,=C'....'             PRESET DEFAULTS
         EX    SR,SHPICM               CREATE STRING (SR = MASK)
         ST    R1,CLWTEMP              STORE FOR SEG
         SEG   CLWTEMP,4
         LC    SR,@QR+3                ISOLATE EXITS
         SRL   SR,4
         LA    TR,X'F'
         XR    SR,TR                   COMPLEMENT EXIT BITS
         IF    NZ,BEGIN               NO LITERAL IF ALL EXITS ON
         SEG   ', Disabled exit='
         L     R1,=C'TAWP'             MASK BIT MEANINGS
         EX    SR,SHPSTCM              SAVE RELEVENT CHARACTERS
         L     R1,=C'....'             PRESET DEFAULTS
         EX    SR,SHPICM               CREATE STRING (SR = MASK)
         ST    R1,CLWTEMP              STORE FOR SEG
         SEG   CLWTEMP,4
         END   ,
         LCALL WRITE
         END   ,
         BR    RR
*
KWTBL    SCKW  FORMAT,FMTRTN,A
         SCKW  ,UNREC
FMTRTN   DS    0H
         SET   WAFLFMT
         SCRTN (15)
ILTBL    DC    C'0246'
CCTBL    DC    C'E-Z L-M H-P O-O '
SHPSTCM  STCM  R1,0,CLWTEMP            SAVE RELEVENT CHARS
SHPICM   ICM   R1,0,CLWTEMP            PICK UP RELEVENT CHARS
         EJECT
*  SHOW SAVE PSW
*
SHSPSW   LR    RR,BR
*
SHSPDO   DS    0H
         PRVBLOCK
         SEG   'Save '
         L     QR,CLWSCP               GET THE SCP ADDRESS
         WITH  (SCP,QR),'LA QR,SCPXPSW'
         B     SHPDO1
         SPACE 3
*  SHOW CLP PSW
*
SHCLPSW  LR    RR,BR
*
SHCLPDO  SEG   'CLP '
         L     QR,CLWSCP               GET SCP ADDRESS
         WITH  (SCP,QR),'LA QR,SCPCLPSW'
         B     SHPDO1
         EJECT
*  SHOW GPRS
*
SHGPRS   DS    0H
         PRVBLOCK
         CLEAR SR
         LA    TR,15
         EVAL                          GET 1ST REG
         BZ    SHGBOTH                 BR IF NULL
         LR    SR,R0
         CL    SR,=A(16)
         BNL   ILLGPR
         LR    TR,SR
         EVAL                          2ND REG
         BZ    SHGBOTH
         LR    TR,R0
         CL    R0,=A(16)
         BNL   ILLGPR
SHGBOTH  LR    RR,BR
*
SHGDO    SEG   'GPR '
         SEGDC 2,(SR)
         SEG   ' = '
         LR    R15,SR
         SLL   R15,2
         L     QR,CLWSBGPR(15)         GET REG VALUE
         SEGHX 8,(QR)                  E
         LCALL SEGBLNK                 INSERT A BLANK
         VSEGLOC 0(QR),MODE=COND
         LCALL WRITE
         IF    (SR,EQ,TR),RR
         LA    SR,@SR+1
         IF    (SR,GE,16),'CLEAR SR'
         B     SHGDO
*
ILLGPR   SEG   'Invalid GPR'
         B     ERROR
         EJECT
*  SHOW SAVE GPRS
*
SHSGPRS  DS    0H
         PRVBLOCK
         CLEAR SR                      SET DEFAULT VALUES
         LA    TR,15
         EVAL                          FIRST REG.
         BZ    SHSGBOTH
         CL    R0,=F'16'
         BNL   ILLGPR
         LR    SR,R0
         LR    TR,R0
         EVAL                          SECOND REG.
         BZ    SHSGBOTH
         CL    R0,=F'16'
         BNL   ILLGPR
         LR    TR,R0
SHSGBOTH LR    RR,BR
*
SHSGDO   SEG   'Save GPR '
         SEGDC 2,(SR)
         SEG   ' = '
         LR    R15,SR
         SLL   R15,2
         L     QR,CLWSCP               GET THE SCP ADDRESS
         WITH  (SCP,QR),'L QR,SCPXGPRS(R15)'
         SEGHX 8,(QR)
         LCALL SEGBLNK                 INSERT A BLANK
         VSEGLOC 0(QR),MODE=COND
         LCALL WRITE
         IF    (SR,EQ,TR),RR
         LA    SR,@SR+1
         IF    (SR,GE,16),'CLEAR SR'
         B     SHSGDO
         EJECT
*  SHOW CLP GPRS
*
SHCLGPRS CLEAR SR                      SET DEFAULT VALUES
         LA    TR,15
         EVAL                          FIRST REG.
         BZ    SHCLGBTH
         CL    R0,=F'16'
         BNL   ILLGPR
         LR    SR,R0
         LR    TR,R0
         EVAL                          SECOND REG.
         BZ    SHCLGBTH
         CL    R0,=F'16'
         BNL   ILLGPR
         LR    TR,R0
SHCLGBTH LR    RR,BR
*
SHCLGDO  SEG   'CLP GPR '
         SEGDC 2,(SR)
         SEG   ' = '
         LR    R15,SR
         SLL   R15,2
         L     R1,CLWSCP
         WITH  (SCP,R1),'L R1,SCPCLPGP(R15)'
         SEGHX 8,(R1)
         LCALL WRITE
         IF    (SR,EQ,TR),RR
         LA    SR,@SR+1
         IF    (SR,GE,16),'CLEAR SR'
         B     SHCLGDO
         EJECT
*  SHOW FPRS
*
SHFPRS   LABEL ,
         PRVBLOCK
         CLEAR SR
         LA    TR,6
         EVAL                          GET 1ST REG
         IF    NZ,BEGIN
         LR    SR,R0
         LR    TR,R0
         IF    (R0,GT,6),ILLFPR
         IF    ('N  R0,=A(1)',NZ),ILLFPR
         EVAL
         IF    Z,EXIT
         LR    TR,R0
         IF    (R0,GT,6),ILLFPR
         IF    ('N  R0,=A(1)',NZ),ILLFPR
         END   ,
         LR    RR,BR
*
SHFDO    SEG   'FPR  '
         SEGHX 1,(SR)
         SEG   ' = '
         LR    R15,SR
         SLL   R15,4                   SHIFT INTO PROPER REG POS
         EX    R15,'STD 0,AREA'        STORE THE REGISTER
         SEGHX 8,AREA
         LCALL SEGBLNK                 INSERT A BLANK
         SEGHX 8,AREA+4
         LCALL WRITE
         IF    (SR,EQ,TR),RR
         LA    SR,@SR+2
         IF    (SR,GT,6),'CLEAR SR'
         B     SHFDO
*
ILLFPR   SEG   'Invalid FPR'
         B     ERROR
         EJECT
*
* SHOW ORVYL COMMUNICATION TABLE CONTENTS
*
SHCT     DS    0H
         SYSONLY ,
         EVAL
         BP    SHCT1                   OFFSET?
         CLEAR R0
SHCT1    LTR   SR,R0
         BMR   BR
         CLPSERV LOCCT                 SENSE CT ADDRESS
         AR    SR,R1
         LA    TR,256                  LENGTH OF THE CT
         AR    TR,R15                  END OF THE CT
         EVAL                          USER LENGTH?
         IF    NZER,BEGIN
         AR    R0,SR                   COMPUTE END ADDRESS
         CR    R0,TR                   OK?
         IF    NPOS,'LR  TR,R0'
         END   ,
         LR    R0,SR
         LR    R1,TR
         SET   WAFLNOT                 TEXT IS USELESS
         B     SHCB                     DO CORE DISPLAY
         SPACE 2
*
*  SHOW SESSION CONTROL PAGE
*
SHSCP    DS    0H
         SYSONLY ,
         EVAL
         IF    NP,'CLEAR  R0'
         LTR   SR,R0
         BMR   BR
         A     SR,CLWSCP               GET OFFSET INTO SCP
         L     TR,CLWSCP
         AL    TR,=A(L'SCP)            DEFAULT LENGTH
         EVAL                          USER LENGTH?
         IF    NZER,BEGIN
         AR    R0,SR                   COMPUTE END ADDRESS
         CR    R0,TR                   OK?
         IF    NH,'LR  TR,R0'
         END   ,
         LR    R0,SR
         LR    R1,TR
         B     SHCB                     DO CORE DISPLAY
         EJECT
*  SHOW CORE
*
SHCORE   DS    0H
         PRVBLOCK
         B     SHCORE1
SHCB     ST    R0,WASCADDR             SHO CONTROL BLOCK
         ST    R1,WASCLEN
         B     SHCORE2
*
SHOSC    SET   CLWFOSC
SHCORE1  DS    0H
         EVAL                          GET ADDR
         BZ    SHSTAT                  BR IF NULL
         IF    CLWFOSC,BEGIN
         N     R0,=XL4'7FFFFFFF'
         END   ,
         ELSE  BEGIN
         N     R0,=XL4'1FFFFFFF'
         IF    ^CLWSSP,BEGIN
         N     R0,=XL4'00FFFFFF'
         END   ,
         END   ,
         ST    R0,WASCADDR             SET ADDR
         MVC   WASCLEN,=A(256)         DEFAULT LENGTH
         MVC   WAMCHLEN,=X'01000000'   MATCH MAX
SCSCANON SCAN  SCTBL,CLWKWCB           SCAN SHOW CORE OPTIONS
         BM    ILLSTR
SHCORE2  IF    ^CLWFOSC,SHCNPRIV       PRIVILEGED CORE?
         BAS   RAR,GTEST               CHECK HIM OUT
SHCNPRIV L     R1,WASCADDR
         LA    R15,1                   TEST LENGTH
         LA    R0,AREA
         VCALL READCORE
         CL    R15,=F'12'              OK?
         BE    ILLADDR                 BR IF NOT
*
SHCDO    IF    WAFLMCH,'L  R1,WAMCHLEN'   MATCHING
         ELSE  BEGIN
         L     R1,WASCLEN
         IF    (R1,NM),'CLEAR  WAFLREP'
         END   ,
         IF    (R1,M),'LCR  R1,R1'    TEST END ADDRESS (NEG=>LENGTH)
*
SHCDO3   AL    R1,WASCADDR             NOW AN END ADDRESS
         ST    R1,WASCEND
SHCDO1   L     R1,WASCADDR             PAST END?
         C     R1,WASCEND
         IF    NL,BEGIN               NO
         IF    ^WAFLREP,'BR BR'        REPEAT?
         IF    WAFLMCH,'BR BR'
         SET   WAFLMCH
         B     SHCDO
         END   ,
         N     R1,=XL4'7FFFFFF0'       TO 16 BYTE BOUNDARY
         LA    R15,16
         LA    R0,AREA
         VCALL READCORE
         B     *+4(R15)                BR ON CODE
         B     SHCKEEP
         B     SHCKEEP
         B     SHCNONE
         B     SHCEXIT
*
*  PROCESS KEPT CORE
*
SHCKEEP  DS    0H
         L     TR,WASCADDR             REQUESTED ADDRESS TO SHOW
         IF    WAFLMCH,SHCMCH          SEARCH FOR MATCH
         LR    QR,R1                   SAVE ADDR OF CORE FETCHED
         CLR   TR,R1                   SAME AS REQUESTED ADDR?
         BNE   SHCKNS                  NOT SAME
         CLC   AREA(12),AREA+4         ALL WORDS SAME?
         BE    SHCKS                   BR IF SO
SHCKNS   DS    0H
         IF    ^WAFLNOA,BEGIN          ADDRESS
         SEGLC (TR)
         SEG   '  '
         END   ,
         IF    ^WAFLNOH,BEGIN          NOHEX
         BTX   CLWTEMP,8,AREA          DATA
         BTX   CLWTEMP+8,(0),AREA+4
         BTX   CLWTEMP+16,(0),AREA+8
         BTX   CLWTEMP+24,(0),AREA+12
         END   ,
         TR    AREA(16),BCDTBL         TRANSLATE FOR BCD
         SR    TR,QR                   REQUEST ADDR-FETCH ADDRESS
         BZ    SHCNB                   FETCH=REQUEST: NO BLANKING
         MVI   CLWTEMP,C' '            BUT BLANK
         MVI   AREA,C'.'               UNWANTED INFO
         BCT   TR,SHCBL2               JUMP IF BLANKING >1
         B     SHCBL1                  BLANK ONLY 1
SHCBL2   DEX   TR,'MVC  AREA+1(0),AREA'
         LA    TR,@TR+2(TR)
SHCBL1   EX    TR,'MVC  CLWTEMP+1(0),CLWTEMP'
SHCNB    IF    ^WAFLNOH,BEGIN          NOHEX
         SEG   CLWTEMP,8               PUT DATA IN BUFFER
         LCALL SEGBLNK                 INSERT A BLANK
         SEG   CLWTEMP+8,8
         LCALL SEGBLNK                 INSERT A BLANK
         SEG   CLWTEMP+16,8
         LCALL SEGBLNK                 INSERT A BLANK
         SEG   CLWTEMP+24,8
         END   ,
         IF    ^WAFLNOT,BEGIN          NOTEXT
         SEG   ' |'
         SEG   AREA,16
         SEG   '|'
         END   ,
         LCALL WRITE
         AL    QR,=A(16)               NEXT ADDRESS
         ST    QR,WASCADDR
         B     SHCDO1
*
*  SEARCH FOR EQUAL WORDS
*        - 1=TR=FETCH=REQUEST
*
SHCKS    LA    R15,16
         AR    R1,R15                  NEXT CHUNK
         CL    R1,WASCEND
         BNL   SHCKS1
         LA    R0,AREA2
         L     R14,CLWSCP
         WITH  (SCP,R14),BEGIN
         IF    SCBCFCLA,REQABORT       ATTN
         END   ,
         VCALL READCORE
         CL    R15,=F'4'
         BH    SHCKS1
         CLC   AREA(16),AREA2          EQUAL?
         BE    SHCKS                   BR IF SO
SHCKS1   ST    R1,WASCADDR
         SR    R1,TR                   EQUAL WORDS LENGTH
         CL    R1,=F'16'
         BNH   SHCKNS
*
         LR    SR,R1                   SAVE COUNT
         SEGLC (TR)                    LOCATION
         SEG   '   '
         SEGHX 6,(SR)
         SEG   ' Bytes all contain '
         SEGHX 8,AREA
         TR    AREA(4),BCDTBL
         SEG   '  |'
         SEG   AREA,4
         SEG   '|'
         LCALL WRITE
         B     SHCDO1
*
*  SEARCH FOR MATCH
*        - 1=FETCH
*        - TR=REQUEST
*
SHCMCH   LR    R15,TR
         L     SR,WASCEND
         SR    SR,TR                   LENGTH
         SR    R15,R1                  OFFSET INTO FIRST CHUNK
         LA    R15,AREA2(R15)
         MVC   AREA2(16),AREA
         LA    QR,AREA2+16
         LC    R14,WAMCHSZ             MATCH LENGTH - 1
         SR    QR,R14                  MATCH SCAN STOPPER
         B     SHCMCH2                 JUMP INTO SEARCH
*
SHCMCH1  IC    R14,WAMCHSZ
         EX    R14,'CLC  @R15(*-*),MATAREA'
         BE    SHCMCH3
         LA    R15,@R15+1
         BCT   SR,SHCMCH2
         B     SHCEXIT
SHCMCH2  CR    R15,QR                  TIME FOR NEXT BUFFER?
         BL    SHCMCH1
         MVC   AREA(16),AREA2
         LA    R15,16                  FETCH LENGTH
         AR    R1,R15                  NEXT ADDRESS
         LA    R0,AREA2
         L     R14,CLWSCP
         WITH  (SCP,R14),BEGIN
         IF    SCBCFCLA,SRCHABRT       ATTN
         END   ,
         VCALL READCORE
         CL    R15,=F'4'
         BH    SHCMCH4
         LR    R15,QR                  COPY STOPPER
         S     R15,=A(16)              COMPARE START
         B     SHCMCH1
         SPACE
* MATCH FOUND
SHCMCH3  DS    0H
         CLEAR WAFLMFND                INDICATE MATCH FOUND
         CLEAR WAFLMCH                 DO NORMAL SHOW FROM MATCH
         LA    R0,AREA2
         SR    R1,R0
         AR    R1,R15                  ADDRESS OF BYTE MATCHING
SHCMCH3A ST    R1,WASCADDR
         B     SHCDO
*
SHCMCH4  CL    R1,WASCEND
         BL    SHCMCH3A
         B     SHCEXIT
*
*  PROCESS CORE NOT KEPT
*
SHCNONE  N     R1,=X'7FFFF000'
*
SHCNGO   AL    R1,=A(4096)
         CL    R1,WASCEND
         BNL   SHCND0
         L     R15,CLWSCP
         WITH  (SCP,R15),BEGIN
         IF    SCBCFCLA,SRCHABRT       ATTN
         END   ,
         CLEAR R15
         VCALL READCORE
         B     *+4(R15)
         B     SHCND
         B     SHCND
         B     SHCNGO
         B     SHCND
         SPACE
SHCND0   L     R1,WASCEND
SHCND    L     SR,WASCADDR
         ST    R1,WASCADDR
         IF    WAFLMCH,SHCDO1          TRYING TO MATCH
         LR    R15,SR                  SAVE START
         SR    R1,SR                   LENGTH NOT KEPT
         LR    SR,R1
         SEGLC (15)                    START ADDRESS
         SEG   '   '
         SEGHX 6,(SR)                  LENGTH
         SEG   ' Bytes not defined'
         LCALL WRITE
         B     SHCDO1
*
SRCHABRT DS    0H                      SEARCH WAS ABORTED BY ATTN
         LR    TR,R1                   SAVE LAST ADDRESS
         SEG   'Search aborted at '    TELL USER
         SEGLC (TR)                      WHERE
         B     ERROR
*
ILLADDR  SEG   'Invalid address'
         B     ERROR
*
SCTBL    SCKW  MATCH,SCMATCH,A
         SCKW  TO,SCTO
         SCKW  REPEAT,SCREP,A
         SCKW  NOADDRES,SCNOA,A
         SCKW  NOHEX,SCNOH,A
         SCKW  NOTEXT,SCNOT,A
         SCKW  ,SCLEN
*
SCMATCH  LA    R0,16
         LA    R1,MATAREA
         VCALL EVHEX
         BNZ   ERROR                   PRINT ERROR MESSAGE
         SET   WAFLMCH+WAFLMFND        SET 'MATCH'
         DECR  R0                      FIX LENGTH FOR EX
         STC   R0,WAMCHSZ              MATCH LENGTH
         B     SCSCANON
*
SCTO     EVAL                          GET END ADDRESS
         BZ    MISSING
         LR    SR,R0
         B     SCLEN1
*
SCREP    SET   WAFLREP                 SET REPEAT INDICATOR
         LA    R1,16
         LCR   R1,R1
         ST    R1,WASCLEN
         B     SCSCANON
*
SCNOA    SET   WAFLNOA                 SET NO ADDRESS
         SCRTN (15)
*
SCNOH    SET   WAFLNOH                 NOHEX
         SCRTN (15)
*
SCNOT    SET   WAFLNOT                 NOTEXT
         SCRTN (15)
*
SCLEN    STM   R0,R1,AREA+8
         SCTELL (15)                   OBTAIN CURRENT SCAN
         STM   R0,R1,AREA
         LM    R0,R1,AREA+8
         SCINIT (1),(0),(15)           SET TO SCAN LENGTH
         EVAL
         LR    SR,R0
         LA    SR,@SR
         LCR   SR,SR                     NEGATIVE FOR LENGTH
         LM    R0,R1,AREA
         SCINIT (1),(0),CLWKWCB
SCLEN1   IF    WAFLMCH,BEGIN          AFTER MATCH
         ST    SR,WAMCHLEN
         END   ELSE,BEGIN
         ST    SR,WASCLEN
         END   ,
         B     SCSCANON
*
SHCEXIT  IF    ^WAFLMFND,'BR BR'        STILL LOOKING FOR MATCH?
         SEG   'No match found'
         B     WRITEXIT
         EJECT
*  SHOW SUMMARY OF CORE STATUS
*
SHSTAT   LR    RR,BR
*
SHSTDO   DS    0H
         IF    CLWFOSC,MISSING         SPECIAL CORE?
         ST    RR,WARR
         IF    (CLWPFPL+CLWPFPIC,Z),NOPROG  ANY PROGRAM?
         L     LCBR,CLWLNKP
         USING LCB,LCBR                ##
         SEG   'Program area: '
         SEGHX 6,L:LCBCLEN
         SEG   ' Bytes reserved '
         LCALL WRITE
         SEG   'Status:'
         LCALL WRITE
         SEG   '  '
         SEGHX 8,L:LCBCORE             START ADDRESS
         SEG   '  '
         SEGHX 6,L:LCBCLEN
         SEG   ' Bytes defined'
         LCALL WRITE                   SHOW STATUS
         IF    ^CLWPFPIC,SHSTEND        PROGRAM NOT EXECUTING
         LCALL WRITE
         SEG   'Work area: '
         SENSE 1                       GET WORK AREA NUMBERS
         SR    R1,R15                  AMOUNT OF WORK SPACE RESERVED
         LR    SR,R1                   SAVE AMOUNT
         SEGHX 6,(SR)
         SEG   ' Bytes reserved '
         LCALL WRITE
         SENSE 2                       GET START OF WORK
         LR    SR,R15                  LENGTH OF THE WORK
         LCALL SHSEG
         SENSE 1
         BNP   SHSTEND
         SEGHX 6,(15)
         SEG   ' Bytes left to reserve'
         LCALL WRITE
SHSTEND  L     RR,WARR
         BR    RR
         EJECT
SHSEG    LTR   SR,SR                   CHECK LENGTH
         BZR   RAR                     NOTHING TO REPORT
         LR    TR,R1                   SAVE START ADDRESS
         ST    RAR,WARAR               SAVE RETURN
         SEG   'Status:'
         LCALL WRITE
         SRA   SR,12                   NUMBER OF RESERVED PAGES
*
         ST    TR,WASCADDR             START OF STRING
         SENSE 0,(TR)                  FIRST PAGE TO SENSE
         DECR  SR                      DEFINED
         LR    RR,R15                  SAVE STATUS CODE
*                                      (0=DEF, 4=RES, 8=NEITHER)
SHSLP1   SEG   '  '
         SEGHX 8,(TR)                  START ADDRESS
         SEG   '  '
*
SHSLP2   A     TR,=A(4096)
         SENSE 0,(TR)
         DECR  SR
         IF    ((R15,EQ,RR),AND,(SR,NM)),SHSLP2  IF SAME KEEP ON
*
         LR    QR,R15                  SAVE NEXT STATUS
         LR    R15,R1                  LAST PAGE TESTED
         S     R15,WASCADDR            LENGTH OF COMMON PAGES
         ST    R1,WASCADDR             START OF NEXT STRING
         SEGHX 6,(15)                  PUT IN LENGTH
         B     *+4(RR)                 JUMP ON STATUS CODE
         B     SHSEGDF                 DEFINED
         B     SHSEGRS                 RESERVED
*                                      NOT RESERVED
         SEG   ' Bytes not reserved'
         B     SHSEG9
SHSEGDF  SEG   ' Bytes defined'
         B     SHSEG9
SHSEGRS  SEG   ' Bytes reserved, not defined'
SHSEG9   LCALL WRITE
         LR    RR,QR
         IF    (SR,NM),SHSLP1          END OF REGION?
         L     RAR,WARAR
         BR    RAR
*
NOPROG   SEG   'No program in core'
         LCALL WRITE
         BR    RR                      EXIT
         EJECT
*  SHOW REGION
*
SHREGN   DS    0H
         SEG   ' Program region: '
         L     SR,CLWSCP
         WITH  (SCP,SR),BEGIN
         LH    TR,SCPRESRV             RESERVE PAGE COUNT
         AH    TR,SCPUNRSV             PLUS UNRESRRVED
         END   ,
         LR    R15,TR
         IF    CLWPFPL+CLWPFPIC,BEGIN PROGRAM LOADED
         L     LCBR,CLWLNKP
         USING  LCB,LCBR               ##
         L     SR,LCBCLEN              USER PROGRAM LEN
         SRL   SR,12                   PAGES
         IF    CLWPFPIC,'AR  R15,SR'   PLUS OTHERS
         LCALL SHPGF
         SEG   ' Program area: '
         LR    R15,SR
         IF    CLWPFPIC,BEGIN          PROGRAM ENTERED?
         LCALL SHPGF                   YES - SHOW WORK REGION
         SEG   '    Work area: '
         LR    R15,TR
         END   ,
         END   ,
         LCALL SHPGF
         BR    BR
         SPACE 3
*
SHPGF    LR    RR,RAR
         LR    QR,R15                  SAVE FRAME COUNT
         SLL   R15,2                   A PAGE FRAME IS 4K
         SEGDC 0,(R15)                 NOTE SIZE IN K
         SEG   'K'
         LCALL WRITE
         BR    RR
         EJECT
*  SHOW ADDRESS
*
SHOSCAD  SET   CLWFOSC
         LCALL OPRTEST                 OPERATOR OR SYSTEM PRIVS
SHADDR   DS    0H
*        PRVBLOCK ,
         EVAL                          GET VALUE
         LR    SR,R0
         SEGDC 0,(SR)                  CONVERT TO DECIMAL
         SEG   '   0'
         BTX   CLWTEMP,8,(SR)
ZSUP     CLI   @R1,C'0'
         IF    EQ,BEGIN
         LA    R1,@R1+1
         BCT   R0,ZSUP
         END   ,
         SEG   (1),(0)
         LCALL SEGBLNK                 INSERT A BLANK
*        LR    R1,SR
*        VCALL VSEGLOC
         VSEGLOC 0(SR),MODE=COND
         B     WRITEXIT
         EJECT
*  SHOW MAP
*
SHMAP    DS    0H
         LR    RR,BR
         PRVBLOCK
*
SHMDO    IF    ^CLWPFSUP,NOPROG         LOADER NOT SET UP
         L     LCBR,CLWLNKP
         USING LCB,LCBR                ##
         VCALL LDSET                   SET UP SEARCH FOR UNDEFINEDS
         SCAN  SHMPTBL,CLWKWCB         GET OPTIONS
         BM    ILLSTR
         IF    (WAFLUND+WAFLCOM+WAFLCSE+WAFLENT+WAFLDUM,NZ),SHM1
         SET   WAFLUND+WAFLCOM+WAFLCSE+WAFLENT+WAFLDUM ALL
SHM1     DS    0H
         SEG   'Symbol    Addr/Type  Length'
         LCALL WRITE
SHMLOOP  VCALL LDNEXT                  GET NEXT SYMBOL
         BZR   RR                      NO MORE
         LR    TR,R1                   SAVE ADDR
         LR    QR,R0                   AND LENGTH
         USING CSDNAME,15              ##
         LC    SR,CSDTYP
         DROP  R15                     ##
         LR    R1,R15                  CSDNAME
         LA    R0,8                    CSDNAME LENGTH
         AR    SR,SR
         AR    SR,SR
         B     *+4(SR)
         B     SHMCSE                  CSECTS
         B     SHMLOOP                 LD
         B     SHMUND                  UNDEFINED
         B     SHMENT                  ENTRY
         B     SHMPRI                  PRIVATE
         B     SHMCOM                  COMMON
         B     SHMDUM                  DUMMY
         B     SHMLOOP                 NULL
         B     SHMLOOP                 ??
         B     SHMLOOP                 ??
         B     SHMUND                  UNDEFINED (WEAK)
         SPACE
SHMCSE   IF    ^WAFLCSE,SHMLOOP         NOT SHOW CSECTS
         SEG   (1),(0)                 CSDNAME
SHMNL    SEG   '   '                   SEG NAME AND LENGTH
         SEGHX 8,(TR)                  ADDR
         SEG   '  '
SHML     SEGHX 6,(QR)
SHMWRIT  LCALL WRITE
         B     SHMLOOP
*
SHMUND   IF    ^WAFLUND,SHMLOOP
         SEG   (1),(0)                 CSDNAME
         SEG   ' Undefined'
         B     SHMWRIT
*
SHMENT   IF    ^WAFLENT,SHMLOOP
         SEG   (1),(0)
         SEG   '   '
         SEGHX 8,(TR)
         SEG   '  Entry'
         B     SHMWRIT
*
SHMPRI   IF    ^WAFLCSE,SHMLOOP
         SEG   '$PRIVATE'
         B     SHMNL
*
SHMCOM   IF    ^WAFLCOM,SHMLOOP
         SEG   (1),(0)
         SEG   '   Common  '
         B     SHML
*
SHMDUM   IF    ^WAFLDUM,SHMLOOP
         CLC   @R1(8),=X'FFFFFFFFFFFFFFFF' CXD?
         BE    SHMLOOP                 IGNORE
         SEG   (1),(0)
         SEG   '    Dummy  '
         B     SHML
         SPACE
* SHO MAP SCAN TABLE
*
SHMPTBL  SCKW  CSECTS,SHMKCSE,A
         SCKW  UNDEFINE,SHMKUND,A
         SCKW  EXTRNS,SHMKUND,A
         SCKW  EXTERNAL,SHMKUND,A
         SCKW  ENTRY,SHMKENT,A
         SCKW  ENTRIES,SHMKENT,A
         SCKW  COMMONS,SHMKCOM,A
         SCKW  DUMMYS,SHMKDUM,A
         SCKW  AFTER,SHMKAFT,(A,P)
         SCKW  FROM,SHMKFRO,(A,P)
         SCKW  ,UNREC
         EJECT
* SHO MAP KEYWORDS
*
SHMKCSE  SET   WAFLCSE
         SCRTN (15)
*
SHMKUND  SET   WAFLUND
         SCRTN (15)
*
SHMKENT  SET   WAFLENT
         SCRTN (15)
*
SHMKCOM  SET   WAFLCOM
         SCRTN (15)
*
SHMKDUM  SET   WAFLDUM
         SCRTN (15)
*
SHMKAFT  CH    R0,=Y(8)                CHECK LENGTH
         BH    UNREC
SHMFAFT1 VSAVE WAR,1,*
         LA    R1,CLWKWKW              POINT TO NAME
         VCALL LDFIND
         VREST WAR,1
         SCRTN (15)
*
SHMKFRO  CH    R0,=Y(8)
         BH    UNREC
         LC    SR,CLWKWKW+7            BACK UP NAME
         DECR  SR
         STC   SR,CLWKWKW+7
         B     SHMFAFT1
         EJECT
*  SHOW TRAPS
*
SHTRAPS  DS    0H
         PRVBLOCK
         LR    RR,BR
*
SHTDO    DS    0H
         CLEAR R1                      SWITCH (NON-ZERO IF SEG  CALLED)
         CLEAR QR                      TRAP INDEX
         LA    SR,CLWTRAPS
         LA    TR,CLWNTRAP
SHTLOOP  LA    QR,@QR+1
         CLC   @SR(3),=X'000000'      TRAP SET?
         BE    SHTNX                   BR IF NOT
         SEGDC 1,(QR)
         LCALL SEGBLNK
         MVI   AREA,0
         MVC   AREA+1(5),@SR
         VSEGLOC L:AREA                ADDRESS
         LCALL SEGBLNK
         SEGHX 4,LH:AREA+4             INSTRUCTION IMAGE
         LCALL WRITE
SHTNX    LA    SR,@SR+5
         BCT   TR,SHTLOOP
         LTR   R1,R1
         BNZR  RR
*
SHTNT    SEG   'No traps set'
         LCALL WRITE
         BR    RR
         EJECT
* SHOW EVENT
*
SHEVENT  DS    0H
         PRVBLOCK
         SENSE 21,WAPER
         TM    WAPERCD,B'11110000'     ANY EVENTS?
         BZ    NOEVENTS
         SEG   'Events set by '
         SETMSG 'Command Processor'
         LTR   R15,R15
         IF    NZER,BEGIN             SET BY CLP
         SETMSG 'program'
         END   ,
         SEG   (1),(0)
         LA    R1,=X'7A15'             COLON,<CR>
         SEG   (1),2
         TM    WAPERCD,PEFETCH         FETCH?
         IF    ON,BEGIN
         SEG   'Fetch, '
         END   ,
         TM    WAPERCD,PESTORE         STORE?
         IF    ON,BEGIN               YES
         SEG   'Store, '
         END   ,
         TM    WAPERCD,PEFETCH+PESTORE RANGE MEANINGFUL?
         IF    NZ,BEGIN               RYES
         SEG   'Range=('
         L     R1,WAPERSTR             START ADDRESS
         VCALL VSEGLOC                 PUT IN PRETTY FORM
         C     R1,WAPEREND             SAME AS END?
         IF    NE,BEGIN
         SEG   ','
         L     R1,WAPEREND
         VCALL VSEGLOC
         END   ,
         SEG   '), '
         END   ,
         TM    WAPERCD,PEBRANCH
         IF    ON,BEGIN
         SEG   'Branch, '
         END   ,
         TM    WAPERCD,PEREG           REGISTERS?
         IF    ON,BEGIN
         SEG   'Register='
         L     SR,WAPER                REGISTER MASKS
         N     SR,=X'0000FFFF'
         CLEAR TR                      REG 0 COMES  FIRST
         SLL   SR,15                   NEX SHIFT MAY OVERFLOW
         SETMSG '('
SHEVN2   DS    0H
         SLA   SR,1
         IF    NZER,BEGIN
         BNO   SHEVN3
         SEG   (1),(0)
         SEGDC 0,(TR)
         SETMSG ','
SHEVN3   DS    0H
         LA    TR,@TR+1
         B     SHEVN2
*
         END   ,
         SEG   ')  '
         END   ,
         LH    R1,CLWOBUF
         DECR  R1
         DECR  R1
         STH   R1,CLWOBUF              REMOVE ', '
         B     WRITEXIT
         SPACE
NOEVENTS SEG   'No events set'
         B     WRITEXIT
         SPACE
PEFETCH  EQU   B'01000000'
PESTORE  EQU   B'00100000'
PEBRANCH EQU   B'10000000'
PEREG    EQU   B'00010000'
         EJECT
*  SHOW MONITOR
*
SHMONIT  DS    0H
         PRVBLOCK
         SENSE 22,CLWTEMP
         LT    SR,CLWTEMP              ANYTHING SET?
         BZ    NOMONIT
         SEG   'Monitoring set by '
         SETMSG 'Command Processor'
         LTR   R15,R15                 SET BY CLP?
         IF    NZER,BEGIN             NO
         SETMSG 'program'
         END   ,
         SEG   (1),(0)
         SEG   ': Classes='
         CLEAR TR                      CLASS 0 FIRST
         SLL   SR,15                   TO TEST FOR OVERFLOW
         SETMSG '('                    PRESET CHARACTER
SHMON2   DS    0H
         SLA   SR,1                    TEST NEXT CLASS
         IF    NZER,BEGIN
         BNO   SHMON3                  NOT ON
         SEG   (1),(0)
         SEGDC 0,(TR)                  WRITE CLASS
         SETMSG ','
SHMON3   DS    0H
         LA    TR,@TR+1                NEXT CLASS
         B     SHMON2                  LOOP
         END   ,
         SEG   ')'
         B     WRITEXIT
         SPACE 2
NOMONIT  SEG   'Monitoring not set'
         B     WRITEXIT
         EJECT
*  SHOW ZOT CHARACTER (VALUE TO INITIALIZE CORE TO)
*
SHOZOT   DS    0H
         PRVBLOCK
         SENSE 24                      GET ZOT BYTE
         LR    SR,R15                  SAVE IT
         SEGHX 2,(SR)                  SEG IT HEX
         SEG   '  '''
         SEG   BCDTBL(SR),1            SEG IT BCD
         SEG   ''''
         B     WRITEXIT
         EJECT
*
* PROGRAM SHOW OPTIONS
*
*GEN
         VPMTAB SHTAB,15
*NOGEN
         VCALL PROGRAMS
         BNZ   MILWYL                  PASS ON TO OTHERS
         BR    BR
         SPACE 6
*
* ORVYL SYSTEM SHOW OPTIONS
*
*GEN
         VSSVTAB SHTAB,15
*NOGEN
         VCALL CLPSYSTM
         BNZ   MILWYL                  PASS ON TO OTHERS
         BR    BR
*GEN
         VSSWTAB SHTAB,15
*NOGEN
         VCALL CLPSYST2
         BNZ   MILWYL                  PASS ON TO OTHERS
         BR    BR
         EJECT
*
* FILE SHOW OPTIONS
*
*GEN
         VGPTAB SHTAB,15
*NOGEN
         VCALL FILES
         BNZ   MILWYL                  PASS ON TO OTHERS
         BR    BR
         SPACE 6
*GEN
         VFSHTAB SHTAB,15
*NOGEN
         VCALL FILESHOW
         BNZ   MILWYL                  PASS ON TO OTHERS
         BR    BR
         EJECT
*  CONSTANTS
*
MICPERTU EQU   X'01A0AB'               MICROSECONDS PER TU
MICPERCS DC    A(MICPERTU*384)             "        PER CSEC
         EJECT
*  BCD CONVERSION TABLE
*
         ENTRY BCDTBL
BCDTBL   DC    256C'.'
         ORG   BCDTBL+C'A'
         DC    C'ABCDEFGHI'
         ORG   BCDTBL+C'J'
         DC    C'JKLMNOPQR'
         ORG   BCDTBL+C'S'
         DC    C'STUVWXYZ'
         ORG   BCDTBL+X'81'
         DC    X'818283848586878889'
         ORG   BCDTBL+X'91'
         DC    X'919293949596979899'
         ORG   BCDTBL+X'A2'
         DC    X'A2A3A4A5A6A7A8A9'
         ORG   BCDTBL+C'0'
         DC    C'0123456789'
         ORG   BCDTBL+C' '
         DC    C' '
         ORG   BCDTBL+C'<'
         DC    C'<(+|&&'
         ORG   BCDTBL+C'!'
         DC    C'!$*);^-/'
         ORG   BCDTBL+C','
         DC    C',%_>?'
         ORG   BCDTBL+C':'
         DC    C':#@''="'
         ORG
         EJECT
         SPACE 5
         GENMSGS
         DROP  WAR,BR,BRR              ##
         END   .
