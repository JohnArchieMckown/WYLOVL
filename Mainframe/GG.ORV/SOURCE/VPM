VPM      TITLE 'ORVYL''S PROGRAM MANAGER'
********************************************************************
*                                                                  *
*       ORVYL/370  RELEASE III - CLASS I - STANFORD PROPRIETARY    *
*                                                                  *
********************************************************************
         SPACE 2
         HIBAL ,
         SPACE 2
* MODIFICATIONS
*
         EJECT ,
VPM      CSECT ,
         IDENT 00
         SPACE 2
         COPY  ORVDEFN
&MODULE  SETC  'VPM'
         SPACE 3
         REGS  ,,SR,TR,QR,FSUBR,BRR,BR,WAR,RAR,CLWR,LCBR,GPWR
         EJECT ,
         MACRO
&L       BTX   &LOC,&LEN,&WORD
&L       SYSLR 15,&WORD,OP=L
         SYSLR 0,&LEN
         SYSLR 1,&LOC
         XCALL BTX
         MEND
*
         MACRO ,
&LABEL   LSCAN &GETADC,&SAME       SO WE CAN PUT SCKWS AT END
&LABEL   L     R1,=A(&GETADC)
         SCAN  (1),&SAME
         MEND
         EJECT ,
*GEN
         COPY  WYLMDWD
         EJECT ,
         COPY  SCP
         EJECT ,
         COPY  CLW
         EJECT ,
         COPY  CSD
         EJECT ,
         COPY  GPW
         EJECT ,
         COPY  PRGCAT
         SPACE 3
         COPY  DENTRY
         SPACE 3
         COPY  DIRB
         EJECT ,
         COPY  SPB
         EJECT
LNKPAGE  RECORD BEGIN
LNKPSTRT DS    0D
         COPY  LCB  FULLST=YES,DSECT=NO
         EJECT ,
LNKANAM  DS    CL8                     ALIAS NAME
LNKEP    DS    CL8                     NAME OF SPECIFIED ENTRY POINT
LNKCOML  DS    H                       LENGTH OF CURRENT COMMAND
LNKCOMAR DS    CL3                     -> ARROW PRECEDING COMMAND PRINT
LNKCOM   DS    CL133                   CURRENT CONTROL STATEMENT
*
LNKLMN   DS    CL8                     LOAD MODULE NAME
LNKFN    DS    CL44                    FILE NAME
LNKENQ   EQU   LNKLMN,*-LNKLMN,C'X'    ENQUEUE ID
*
LNKFL    FLAG  ,                       LINK FLAG
         FLAG  (LNKFTYPD,X'20')        CURRENT STATEMENT HAS BEEN TYPED
         FLAG  (LNKFSPNQ,X'10')        SPBID IS ENQUEUED
         FLAG  (LNKFEOM,X'08')         END OF MODULE REACHED
         FLAG  (LNKFREDO,X'04')        RE-PROCESS LAST COMMAND
         FLAG  (LNKFERR,X'02')         ERROR IN LINK
         FLAG  (LNKFFREE,X'01')        FREE LINK CONTROL PAGE?
*
LNKPFL   FLAG  ,                       'PARM' FLAG
         FLAG  (LNKPFLWN,X'80')        'WARN' OPTION - PRINT ERR
         FLAG  (LNKPFLET,X'40')        'LET' OPTION
         FLAG  (LNKPFCAL,X'20')        'CALL' OPTION
         FLAG  (LNKPFLST,X'10')        'LIST' OPTION
         FLAG  (LNKPFMAP,X'08')        'MAP' OPTION
         FLAG  (LNKPFREN,X'04')        REENTRANT - SHARABLE
         FLAG  (LNKPFPRT,X'02')        PROTECTED PROGRAM
         FLAG  (LNKPFPRV,X'01')        PRIVATE PROGRAM
*
LNKPFL2  FLAG  ,                       'PARM2' FLAG
         FLAG  (LNKPFM31,X'80')        'M31' OPTION - START 31 BIT
*
LNKZPTRS DS    2A                      POINTERS TO ZAP CSECT
LNKZBASE DS    A                       ZAP BASE VALUE
LNKCLW   DS    A                       ADDRESS OF CLW
*
*
* CURRENT LINK STACK ENTRY
*
LSESTART DS    0F
LNKPFFL  DS    X                       GPW PROCESSING FLAGS
LNKFID   DS    X                       GPW FILE ID
LNKSFL   FLAG  ,                       STACK ENTRY FLAGS
         FLAG  LNKSFTER                RETURN TO TERMINAL
         FLAG  LNKSFED                 EDIT/CARD SWITCH
         FLAG  LNKSFRRB                RE-READ BUFFER
*
LNKUSER  DS    CL(L'UUU)               USER FOR INCLUDES
LNKGRP   DS    CL(L'GG)                GROUP FOR INCLUDES
LNKACCT  EQU   LNKUSER,*-LNKUSER,C'X'
*
LNKBN    DS    A                       FILE BLOCK NUMBER
LNKLN    DS    A                       LINE NUMBER
LNKBO    DS    H                       BLOCK OFFSET
LNKBL    DS    H                       BLOCK LENGTH
LNKLMLBN DS    A                       LST BLOCK OF LIB MEMBER
LNKUINFO DS    A                       USER INFO FIELD
LSE      EQU   LSESTART,*-LSESTART,C'X'
*
* LINK STACK
*
LNKSTACK DS    14XL(L'LSE)             LINK STACK
LNKSTKP  DS    A                       STACK POINTER
*
* SYSLMOD AND SYSLIB NAMES
*
LNKSYSMD DS    CL(L'GPWFCB)            LENGTH, NAME, ATTACH ID
LNKSYSLB DS    8CL(L'GPWFCB)
LNKSYSCT DS    H                       NUMBER OF SYSLIBS
*
*  CALLING COMMAND AND PARM
*
LNKCLCMD DS    0F,CL135                   PROGRAM CALLING COMMAND
LNKCLPRM DS    0F,CL135                PROGRAM CALLING PARM
         DS    0D
LNKTST   EQU   *                       TEST FOR PAGE OVERFLOW
         ORG   LNKPSTRT+4096           FILL OUT TO PGE BNDRY
         DC    0Y(*-LNKTST)            TEST FOR OVERFLOW
         END   ,
         EJECT ,
WAPM     DSECT
         VSA   SR,R11                  SAVE AREA
WAR15    DS    3F                      SAVE FOR R15,R0,R1
WAFL     FLAG  ,
         FLAG  WAFLACT                 'ACTIVE'
         FLAG  WAFLEXIT                'EXIT' ON LINK
         FLAG  WAFLFILE
         FLAG  WAFLLDFL                LOAD FILE PRIME
         FLAG  WAFLENT
         FLAG  WAFLLST
         FLAG  WAFLPUB                 SEARCH PUBLIC LIBRARY
         FLAG  WAFLNOSH                NO SHARE ON CALL
*
WAFLG    FLAG  ,
         FLAG  WAFLGPAU                PAUSE
         FLAG  WAFLGERA                MEMBER REPLACED, NO SAVED
         FLAG  WAFLGDSZ                DEFAULT MAP SIZE SUPPLIED
         FLAG  WAFLNXMB                PROCESS MULT MEMBERS
         FLAG  WAFLGLKF                PROCESS 'LINK FROM' FILE
         FLAG  WAFLGSPI                SPIRES PROCESSOR
         FLAG  WAFLGSPL                SHARED PROGRAM LOAD
*
WAGOFL   FLAG  ,                       GO OPTIONS FLAG
         FLAG  WAGONOL                 NOLIST OPTION
         FLAG  WAGOTO                  TO <ADDR> OPTION
         FLAG  WAGOTR                  TRAP <ADDR> OPTION
         FLAG  WAUTOSLB                SYSLIB BEING PROCESSED
         FLAG  WAUTOUXS                UNDEFINEDS EXIST
         FLAG  WAUTOFTM                PRIME SYSLIB FLAG
         FLAG  WAUTOPXT                PRINT EXTERNALS
         FLAG  WAUTOFMB                START SCAN AT LAST MEMBER
         FLAG  (WAUTOXPS,WAGOTR)       EXTRA PASS THRU SYSLIB
WAGOTOAD DS    A                       GO TO ADDRESS
WAGOTRAP DS    A                       GO TRAP ADDRESS
WAGOEVCT DS    A                       GO EVENT COUNT
WAPARMP  DS    2A                      PARM POINTERS
WAMBLLN  DS    A                       MEMBER LIST LENGTH
WAMBLNX  DS    A                       NEXT MEMBER LIST ADDRESS
WALNKPFL DS    X                       COPY IN NEW PARMS
WALNKPF2 DS    X                       COPY IN NEW PARMS
WALCBXFL DS    X                       COPY IN NEW PARMS
WAFNOFLG FLAG  ,                       'NO' PARM SWITCHES
         FLAG  WAFNOVRD                OVERRIDE FLAG
         FLAG  WAFNOWN                 NOWARN ON LINK OR CALL
         FLAG  WAFNOSN                 NOOSNT ON LINK
         FLAG  WAFNCAL                 'NOCALL' ON LINK OR CALL
WALCMPLN DS    F                       HOLD PARM MAP SIZE
WASLBNX  DS    H                       CURRENT SYSLIB COUNTER
WAPMEND  DS    0F
WACMDL   DS    H                       COMMAND LENGTH
WACMD    DS    CL133                   COMMAND
WAMBERS  DS    CL133                   INCLUDE MEMBER LIST
*
         ORG   WAGOTOAD
         SMFDATA ID=SMFI
SMFILEN  EQU   *-SMFICCPU
         ORG   ,
WAPMSIZ  EQU   *-WAPM
         SPACE 2
*
WAPLC    DSECT
         VSA   R0,R10                  SAVE AREA
WADEVFL  DS    X
WADEVPR  DS    X
WADEVNM  DS    44X
WADEVINF EQU   WADEVFL,*-WADEVFL,C'X'
WAPLCSZ  EQU   *-WAPLC
         EJECT ,
*NOGEN
VPM      CSECT
         USING CLW,CLWR                ##
         USING WAPM,WAR                ##
         USING GPW,GPWR                ##
PROGRAMS VENTER SR,R11,WAPMSIZ
         LA    BRR,4094(,BR)
         USING *-4+4094,BRR            ##
         STM   R15,R1,WAR15            SAVE ENTRY INFO
         CLEAR (WAFL,WAPMEND-WAFL)     CLEAR WORK AREA
         MVC   WACMDL,CLWIBUFN         SAVE COMMAND LENGTH
         MVC   WACMD(CLWIBUFL),CLWIBUF  AND COMMAND
         L     LCBR,CLWLNKP
         IF    CLWPFSUP,LSUP           LINK SET UP
         GETCLW L'LNKPAGE-1,L'LNKPAGE-1 GET A PAGE FOR LINK
         BZ    PMSETUP                 CORE OBTAINED
         VSEG  'Not enough memory for Link'
         VCALL TYPEIT
         VEXIT SR,R11
*
PMSETUP  ST    R1,CLWLNKP              LINK PAGE POINTER
         SET   CLWPFSUP                MARK SETUP
         LR    LCBR,R1
         USING LNKPAGE,LCBR            ##
         VCALL CLRLP                   CLEAR LINK PAGE
         EJECT ,
* LINK PAGE IS SET UP. PERFORM FILE CONTROL SETUP.
* MAIN BASE REGISTER POINTS TO EXIT ROUTINE.
*
LSUP     LABEL ,
         LM    BRR,BR,=A(BASE+4096,BASE)
         USING BASE,BR,BRR             ##
         STM   BRR,WAR,CLWQRET         SET QUICK RETURN REGISTERS
         FSCALL FILSETUP
         B     SETUPRTN
BASE     EQU   *
* EXIT BRANCH TABLE
         B     PMEXIT                  LEAVE PROGRAM MANAGER
         B     TYPERR
*
*
* EXIT FROM PROGRAM MANAGER. (BRANCH TO BASE REGISTER)
PMEXIT   LABEL ,
         LCALL AMODE24                 RETURN TO 24 BIT MODE
         L     LCBR,CLWLNKP            ENSURE VALID ADDRESS
         LCALL CLRSTACK                DETACH ALL FILES
         IF    (LNKFFREE+LNKFSPNQ,Z),PMEX1   DO CLEANUP?
         VCALL CLEANUP                 GET RID OF IT
         FREECLW (LCBR),L'LNKPAGE-1    FREE CORE
         CLEAR CLWPFSUP                CLEAR SETUP FLAG
PMEX1    LR    R15,SR                  RETURN CODE
         LR    R0,TR
         VEXIT SR,R11,LTR
*
TYPERR   LABEL ,
         LCALL AMODE24                 RETURN TO 24 BIT MODE
         L     LCBR,CLWLNKP            ENSURE VALID ADDRESS
         IF    LNKFTYPD,TYP2           ALREADY TYPED
         IF    LNKSFTER,TYP2           FROM TERMINAL
         VCALL PLCOFERR                WRITE CARD ID MESSAGE
TYP2     VCALL TYPEIT                  WRITE ERROR MESSAGE
         LCALL CLRSTACK                CLEAR STACK
         B     FILEXIT
         EJECT ,
* LINK PAGE AND FILE CONTROL IS SET. BRANCH ON ENTRY CODE TO PROCESS.
*
SETUPRTN LABEL ,                      SAVE KEY LEN
         LM    R15,R1,WAR15
*GEN
         VPMTAB PMTAB,15               BRANCH TABLE
*NOGEN
         TITLE 'ORVYL''S PROGRAM MANAGER - LINK'
*
* LINK COMMAND
*
LINK     LABEL ,
         SET   GPWOSFOK                SET OS/FILE POSSIBLE
         TM    CLWKFL,CLWKFMP          MANDATORY PROGRAM?
         BO    CHEAP                   NOT ALLOWED
         CLI   GPWFID,0                FILE ID CHECK
         BNE   ILLSTR                  ERROR
LINK1    SET   WAFNOVRD                OVERRIDE PARM
         LSCAN KWLINK,CLWKWCB          SCAN PAST LINK
         BNZ   ILLSTR                  ERROR
         IF    (WAFLACT+WAFLFILE,Z),MISSING  SOURCE SPECIFIED?
         LCALL CLRLINK                 CLEAR PROGRAM IF NECESSARY
         OC    LCBXFL,WALCBXFL         ADD IN NEW IDR FLAGS
         OC    LNKPFL,WALNKPFL         ADD IN NEW LINK PROGRAM FLG
         OC    LNKPFL2,WALNKPF2        ADD IN NEW LINK PROGRAM FLG
         CLEAR WAFNOVRD
         IF    (LCBMPLEN,ZERO),BEGIN
         MVC   LCBMPLEN,WALCMPLN
         IF    (LCBMPLEN,ZERO),BEGIN
         L     R15,CLWSCP              GET THE SCP ADDRESS
         WITH  (SCP,R15),'MVC  LCBMPLEN,SCPUMAP'    DEFAULT MAP
         SET   WAFLGDSZ                SUPPLIED
         END  ,
         END   ,
         B     PRIME
         EJECT ,
* KEYWORD ROUTINES
*
SETACT   LABEL ,
         IF    WAFLFILE+WAFLACT,UNREC  CONFLICT?
         SET   WAFLACT                 SET ACTIVE FILE
         SCRTN (15)
*
SETFIL   BZ    MISSING                 NO PARM
         IF    WAFLACT+WAFLFILE,UNREC  CONFLICT?
         SET   WAFLFILE
         IF    (' FSCALL GETMEMBR',NZER),' FSCALL GETNAME'
         SET   WAFLGLKF                LINK COMMAND INPUT
         B     LINK1
*
SETEXIT  SET   WAFLEXIT
         SCRTN (15)
*
SETLIST  SET   WAFLLST                 LIST
         SCRTN (15)
*
SETENTER SET   WAFLENT                 ENTER AFTER LINK
         SCRTN (15)
*
SETPAU   SET   WAFLGPAU                SET PAUSE
         SCRTN (15)
*
SETNOSHA SET   WAFLNOSH                SET NOSHARE
         SCRTN (R15)
*
CALLPAR1 CLI   @R1,C'"'
         BE    CALLPARM
         CLI   @R1,C''''
         BE    CALLPARM
         CLI   @R1,C'('
         BNE   UNREC
CALLPARM OC    WAPARMP(8),WAPARMP      CHECK FOR PREVIOUS PARM
         BNZ   DUPPARM
         STM   R0,R1,WAPARMP
         SCRTN (15)
*
DUPPARM  SEG   'Duplicate parm field'
         B     ERROR
*
         EJECT ,
* STACK PREVIOUS LINK CONTROL SOURCE AND OPEN NEW SOURCE
*
PRIME    LABEL ,
         LA    SR,LNKSTKP              POINTER IS AT END OF STACK
         C     SR,LNKSTKP
         BE    LSTKOFLO                OVERFLOW
         SET   LNKSFRRB                RE-READ BUFFER WHEN POPPED
         MVC   GPWSACCT,LNKACCT        FROM LAST INCLUDE
         L     SR,LNKSTKP              LINK STACK POINTER
         MVC   @SR(L'LSE),LSE          PUSH
         IF    WAUTOSLB,NXTMEMB        AUTOCALL PRIME
         IF    WAFLFILE,FILE           PRIME FILE
         SPACE 2
* ACTIVE FILE PRIME
*
ACTIVE   LABEL ,
         CLEAR WAFLACT
         FSCALL SETPREST               TELL WYLBUR
         MVC   GPWFWDS,LNKLN           SET LINE NUMBER
         MVC   GPWLREC(2),=AL2(0)      LRECL
         MVC   GPWRBL(2),=AL2(2048)    BUFF LEN
         MVC   GPWOPT(4),=AL2(3,0)
         FSCALL READWDS
         BNZ   VOID                    VOID RANGE
         CLEAR LSE                     ZERO NEW STACK ENTRY
         SET   LNKSFED                 BUFF IN EDIT FORMAT
         STH   R1,LNKBL                 BUFFER LENGTH
         MVI   LNKFID,1                WYLBUR ID
         MVC   LNKACCT,GPWSACCT
         B     PRIMED                  PROCESS COMMANDS
         EJECT ,
* FILE PRIME OF SEQUENTIAL SOURCE (SEQUENTIAL OR PDS MEMBER)
*
FILE     LABEL ,
         CLEAR WAFLFILE
         FSCALL ASMBLNAM               PUT NAME TOGETHER
         FSCALL ATTOLD                 ATTACH FILE
         CLEAR GPWFILN,GPWFNL          DON'T LEAVE RESIDUAL AROUND
         IF    (GPWFNIXR,AND,^GPWFHYBR),NOTIXR
         FSCALL CHKSPIRE               AVOID SPIRES FILES
         IF    GPWUILIB,BEGIN         LIBRARY
         IF    (WAFLGLKF,AND,GPWUILDF),NOTLKLD
         IF    ((GPWLMNL,EQ,0),AND,^GPWLNXTM),MEMNTSPC  NO MEM SPECFD
         FSCALL GETMEM                 INITIALIZE MEMBER FOR READ
         IF    M,MEMNFND
         END   ,
         ELSE  BEGIN                   ELSE NOT A LIBRARY
         IF    (GPWLMNL,NE,0),NOTLIB
         IF    (GPWLLIST,OR,GPWLNXTM),NOTLIB
         CLEAR GPWFNSKP                CLEAR SKIP MODE
         END   ,
*  IF THE INPUT SOURCE IS NOT A LOADFILE THEN ALLOW ONLY
*  CARD OR EDIT FORMAT.
         IF    GPWUILDF,BEGIN
         IF    (GPWLLIST,OR,GPWLNXTM),NOTLKMB
         B     PRIMEDF
         END   ,
         CLEAR WAFLGLKF
*
NXTMEMB  LABEL ,                      ACCESS NEXT LIBRARY MEMBER
         FSCALL READ                   GET A RECORD
         BNZ   EMPTY
         LR    SR,R1                    BLOCK LEN
         UNPRS LNKCOM,L:GPWDATAD  CHECK FIRST LINE FOR LEGAL EDIT
         BNZ   CARDCHK
         L     R1,GPWDATAD             RUN THROUGH FIRST BUFFER
         LR    R15,SR                  LENGTH OF BLOCK
         LA    TR,5
EDITCHK  LC    QR,@R1+4                TEST EDIT CONSISTENCY
         AR    QR,TR
         AR    R1,QR
         SR    R15,QR
         BP    EDITCHK
         BM    CARDCHK
         CLEAR LSE                     ZERO NEW STACK ENTRY
         SET   LNKSFED                 ASSUME EDIT
         B     PRIMEDF                 FILE PRIMED
*
CARDCHK  CLEAR R0                      TEST CARD CONSISTENCY
         SET   GPWGPFLR                FOR USE BY ERROR MSG ROUTINE
         LR    R1,SR                    BLOCK LENGTH
         D     R0,=A(80)               IS BLOCKSIZE MULTIPLE OF 80?
         LTR   R0,R0                   TEST REMAINDER
         BNZ   BADFORM                 OKAY
         CLEAR LSE                     ZERO NEW STACK ENTRY
         B     PRIMEDF                 FILE PRIMED
         SPACE 2
*
NOTLKLD  SEG   'Cannot link from a loadfile'
         B     ERROR
*
NOTLKMB  SEG   'Cannot include multiple programs'
         B     ERROR
         EJECT ,
* PERFORM LAST MINUTE PRIMING DETAILS.
*
PRIMEDF  LABEL ,
         CLEAR GPWFATT                 NOT UNDER VGP CONTROL
         MVC   LNKPFFL(2),GPWPFFL      PROCESSING AND FILE ID
         MVC   LNKBN,GPWBN             SAVE BLOCK #
         MVC   LNKLMLBN,GPWLMLBN       SAVE LAST BLOCK NUMBER
         MVC   LNKUINFO,GPWUINFO       SAVE FORMAT DESCRIPTOR
         MVI   GPWFID,0
         STH   SR,LNKBL
         MVC   LNKUSER,GPWUSER
         MVC   LNKGRP,GPWGRP
         IF    WAFLNXMB,BEGIN         IF MULTIPLE MEMBER
         CLEAR    WAFLNXMB             BYPASS STACK PUSH
         B     LINKGO
         END   ,
PRIMED   L     SR,LNKSTKP              LINK STACK POINTER
         LA    SR,@SR+L'LSE            PUSH
         ST    SR,LNKSTKP              NEW STACK TOP
*
* LOADFILE INPUT IS NOT REALLY STACKED IN THE SENSE THAT WE
*   PUSH THE PREVIOUS STATE, BUT WE DON'T EXPECT LOADFILE INPUT
*   TO GET STACKED FOR ANOTHER INPUT SOURCE
*
* THEREFORE IF WE ARE INPUTTING FROM A LOADFILE WE DO IT BELOW
*   AND GET IT OVER WITH
*
         IF    GPWUILDF,BEGIN
         MVC   GPWPFFL(2),LNKPFFL      VERSION OF GETLINE REFRESH
         LCALL DOLOAD
         FSCALL DETACH
         VCALL POPLNKST
         END   ,
         EJECT ,
* CHECK FOR PARM BEFORE INITIALIZING LOADER
*
LINKGO   VCALL GETLINE
         BM    INCLNEXT                INCLUDE NEXT MEMBER
         BNZ   LINKEOF
         CLI   LNKCOM,X'02'            OBJECT CARD?
         BE    NOPARM                  CAN'T BE A PARM
         SCINIT (1),(0),CLWKWCB
         LSCAN PARMCHK,CLWKWCB
         BNZ   ILLSTR
NOPARM   SET   LNKFREDO
*?       LCALL LOADING
         B     NEXT
         EJECT ,
*
* PROCESS LINK
*
NEXT     LABEL ,
NEXT2    LABEL ,
         SET   LNKFFREE                IN CASE OF CONTROL ERROR
         VCALL CHKATTN
         IF    NZ,REQABORT             ATTENTION
         SET   LNKFTYPD                NO LINE TO TYPE IF ERROR
         VCALL GETLINE                 REMOVE LINE FROM BUFFER
         BM    INCLNEXT                INCLUDE NEXT MEMBER
         BNZ   LINKEOF                 RETURN TO COMMANDS
         SPACE ,
* PROCESS ENTIRE OBJECT MODULE
*
         LCALL LOADING                 INITIALIZE, IF NECESSARY
         CLI   LNKCOM,X'02'             IS  LINE AN OBJECT CARD?
         BNE   CONTROL                 CONTROL STATEMENT
OBJLOOP  MVC   LCBCI(80),LNKCOM        MOVE CARD TO LCB
         LCALL AMODE31
         VCALL LDGO                    LOAD IT
* NOTE: LOADER RETURNS TO RAR+4 IF LAST CARD WAS AN 'END' CARD
         SPACE ,
         BZ    OBJNEXT                 NEXT CARD UNLESS ERROR
* END CARD PROCESSING
         BNZ   ERROR                   ERROR  ON EITHER RETURN
         LCALL AMODE24
         CLEAR (LNKZPTRS,8)            CLEAR ZAPNAME
         IF    (^LNKPFLST,AND,^WAFLLST),NEXT2  NO LIST PARM
         SEG   'END...'
         VWRITE LCBCI+53,80-53         USER DATA
         BZ    NEXT
         B     REQABORT
OBJNEXT  LABEL ,                      MUST COMPLETE OBJECT DECK
         LCALL AMODE24
         VCALL GETLINE
         BNZ   OBJINCOM
         CLI   LNKCOM,X'02'            OBJECT CARD?
         BE    OBJLOOP                 YES
OBJINCOM SEG   'Object deck is incomplete'
         B     ERROR
         EJECT ,
* PROCESS CONTROL STATEMENT
CONTROL  SCINIT LNKCOM,LH:LNKCOML,CLWKWCB
         IF    WAUTOSLB,INVSYSL
         IF    (GPWLLIST,OR,GPWLNXTM),INCLNEST
         IF    (^LNKPFLST,AND,^WAFLLST),CONTROL1       LIST?
         MVC   LNKCOMAR(3),=C'-> '     PRINT ARROW BEFORE COMMAND
         LR    R15,R0                  LENGTH
         LA    R15,@R15+3
         SET   LNKFTYPD                USER HAS SEEN STATEMENT
         WRITE LA:1,LNKCOMAR,(15)
         WAIT  (0)
         BNZ   FILEXIT                 ATTN
CONTROL1 LABEL ,
*
         LSCAN COMMTBL,CLWKWCB         SCAN THE COMMAND
         BNZ   ILLSTR
         B     NEXT                    NULL LINE
*
INCLNEST SEG   'Control statement invalid in multiple include'
         B     ERROR
*
INVSYSL  SEG   'Control statement invalid in SYSLIB'
         B     ERROR
         EJECT ,
*
* CONTROL COMMAND IS TO BE IGNORED
*
IGNORE   LABEL ,
         SEG   (1),(0)
         SEG   ': Not supported'
         B     ERROR
         EJECT ,
*
* MODULE ALIAS
*
ALIAS    LABEL ,
         LCALL GETSYMB                 SCAN OUT EXTERNAL NAME
         BZ    NEXT
         LCALL CKALIAS                 MAKE SURE UNIQUE NAME
         MVC   LCBCI(8),@R1
         VCALL LDALIAS                 GIVE TO LOADER (R1=A(NAME))
         BZ    ALIAS                   SCAN MORE
         B     ERROR
         SPACE 3
CKALIAS  LABEL ,
         L     SR,LCBALIH              START AT ALIAS HEAD
CKALIASL LTR   SR,SR                   END OF LIST?
         BZR   RAR                     OK
         USING CSD,SR                  ##
         CLC   @R1(8),CSDNAME          NAMES MATCH?
         BE    DUPNAME                 YES, BAD NEWS
         L     SR,CSDLINK              TRY NEXT
         B     CKALIASL
         SPACE 1
DUPNAME  SEG   (1),(0)                 WRITE NAME
         SEG   ': Name used more than once'
         B     ERROR
         EJECT ,
*
* MODULE EXTERNAL SYMBOL CHANGE
*
CHANGE   LABEL ,
         LCALL GETSYMB                 SCAN OUT EXTERNAL SYMBOL
         BZ    NEXT                    ALL DONE
         MVC   LCBCI(8),@R1            SAVE NAME
         LCALL GETPSYM                 GET LEVEL-1 SYMBOL
         BZ    MISSING                 REQUIRED ITEM
         MVC   LCBCI+8(8),@R1
         VCALL LDCHANGE                GIVE TO LOADER
         BZ    CHANGE                  SCAN FOR MORE
         B     ERROR                   DONE
         EJECT ,
*
* COMMENT TO TERMINAL
*
COMMENT  SCTELL CLWKWCB
         VWRITE (1),(0)
         B     NEXT
         EJECT ,
*
* ENTRY DEFINITION
*
ENTRY    LABEL ,
         LCALL GETSYMB
         BZ    MISSING
         CLI   LNKEP,0                 ENTRY DEFINED YET?
         BNE   DBLEP                   CANT HAVE TWO
         MVC   LNKEP(8),@R1
         B     NEXT
*
DBLEP    SEG   'Only one entry statement allowed'
         B     ERROR
         SPACE 2
* SHOW CURRENT ENTRY POINT
*
SHENTRY  LCALL LOADINGQ                LOADING?
         SEG   'Entry: '
         CLI   LNKEP,0                 DEFINED BY USER?
         BE    SHEN2
         SEG   LNKEP,8
         VCALL LDFIND                  LOOK UP NAME
         BZ    SHEN6                   UNDEFINED
         LTR   R1,R1                   DEFINED
         BM    SHEN6                   NO
         B     SHEN3
*
SHEN2    LT    R1,LCBEP                DEFINED IN OBJECT?
         BM    SHEN6                   NO
SHEN3    BTX   CLWTEMP,7,(1)
         MVI   CLWTEMP,C' '
         VWRITE (1),(0)
         B     FILEXIT
*
SHEN6    VWRITE 'UNDEFINED'
         B     FILEXIT
         SPACE 2
* SET ENTRY
*
SETENTRY LCALL LOADINGQ
         CLEAR LNKEP                   ZERO PREVIOUS
         LCALL GETSYMB                 GET A SYMBOL
         BZ    MISSING
         MVC   LNKEP(8),@R1
         B     FILEXIT
         EJECT ,
*
* EXPAND CSECT LENGTH
*
*        - VALID ONLY IF CSECTNAME IS LAST ALLOCATED AT THIS POINT.
*
EXPAND   LABEL ,
         LCALL GETSYMB
         BZ    MISSING
         VCALL LDFIND                  TO NAME FINDER
         BZ    NOTDEF                  MUST BE DEFINED ALREADY
         LTR   R1,R1
         BM    NOTDEF
         LR    SR,R15                  SAVE CSD POINTER
         USING CSDNAME,SR              ##
         IF    ^CSDFDEF,NOTDEF          REFERENCED BUT NOT DEFINED
         SL    R1,LCBCORE              RELATIVE ADDRESS IN TEXT
         ALR   R1,0                    GET SD END
         C     R1,LCBLC                LATEST LOCATION COUNTER
         BNE   NOTLSTSD                NOT LAST SECTION (CAN'T EXPAND)
         LCALL GETPVAL                 GET PARENTHESIZED LENGTH
         LR    R1,R15                  AVE EXPAND LENGTH
         AL    R15,LCBLC               NEW LC
         C     R15,LCBCLEN
         BH    EXLERR
         ST    R15,LCBLC
         AL    R1,CSDLNG
         ST    R1,CSDLNG               UPDATE CSD
         B     NEXT                    ONLY ONE SYMBOL ALLOWED
*
EXLERR   SEG   'Attempt to expand beyond maximum program length'
         B     ERROR
*
NOTLSTSD SEG   'Program section not latest - not expandable'
         B     ERROR
*
NOTDEF   SEG   'Program section not defined'
         B     ERROR
         DROP  SR                      ##
         EJECT ,
*
* INCLUDE PROCESSOR
*
INCLUDE  LABEL ,
         FSCALL FNINIT                 INITIALIZE FILE AREA
         SET   GPWOSFOK                SET OS/FILE POSSIBLE
         MVI   GPWLMNL,0               CLEAR LIB NAME
         SET  GPWLLIST                 ALLOW MEMBER LIST
         IF    ('FSCALL GETMEMBR',NZ),'FSCALL GETNAME'
* NOTE - GPWLLIST WILL BE CLEARED BY GETMEMBR UNLESS A MEMBER
*        LIST IS PRESENT.  WE WILL KEEP THIS FLAG SET UNTIL THE
*        LIST HAS BEEN PROCESSED.
         IF    GPWLLIST,BEGIN          SAVE LIST
         LM    R1,R2,GPWLMFBN          LIST POINTERS
         ST    R1,WAMBLLN              SAVE LENGTH
         LA    R3,WAMBERS
         ST    R3,WAMBLNX              NEW ADDRESS
         DEX   R1,'MVC  @R3(0),@R2'
         END   ,
         LSCAN KWINCLUD,CLWKWCB        ANYTHING FOLLOWING?
         BNZ   ILLSTR
*
         SET   WAFLFILE
         B     PRIME                   CHECK OUT FILE
*
* INCLUDE ALL MEMBERS FROM LIBRARY
INCLPDS  IF    (GPWLMNL,NE,0),INCLOPER CONFLICTING OPTION
         SET   GPWLNXTM            ACCESS MEMBERS SEQUENTIALLY
         MVC   GPWNXTAD(4),=F'0'       START AT START OF LIB
         SCRTN (15)
*
INCLOPER SEG   'Conflict in include member option'
         B     ERROR
         EJECT ,
*
* INCLUDE NEXT MEMBER FROM ATTACHED LIBRARY
*
INCLNEXT LABEL ,
         IF    WAUTOSLB,XTRSCAN1       FOR AUTOCALL
         IF    GPWLLIST,BEGIN                     MEMBER LIST
         LM    R0,R1,WAMBLLN           LEN / ADDRESS
         FSCALL SCNMLIST               SCAN FOR NEXT
         MVC   WAMBLLN(8),GPWLMFBN     NEW LIST POINTERS
         LTR   0,0                     ANYTHING LEFT?
         BNP   INCLDONE                NO, FINISH UP
         CH    0,=Y(8)                 TOO LONG?
         BH    INVALMEM                YES
         STC   0,GPWLMNL               SAVE MEMBER NAME LENGTH
         LR    SR,0                    PUT LENGTH WHERE USEABLE
         MVC   GPWLMN,=CL8' '          BLANK IT OUT
         DEX   SR,'OC  GPWLMN(0),@R1'  MOVE IT IN
         END   ,
*
*   SET UP NEXT MEMBER FOR READ
         SET   GPWLGOTD                GOT DIRECTORY
         FSCALL GETMEM                 SET UP FOR READ  (W/GPWLNXTM)
         IF    M,INCLDON
         SET   WAFLNXMB
         B     NXTMEMB                 PROCESS NEXT MEMBER
*
INCLDON  IF    (GPWLMNL,NE,0),MEMNFND
INCLDONE LABEL ,                       MULTIPLE INCLUDE IS DONE
         CLEAR GPWLGOTD                CLEAR GOTTEN DIRECTORY
         FSCALL DETACH
         VCALL POPLNKST
         B     NEXT
         EJECT ,
*
* LIBRARY DEFINITION
*
SYSLIB   LABEL ,
LIBRARY  LABEL ,
         SET   GPWOSFOK                SET OS/FILE POSSIBLE
         FSCALL FNINIT                 INITIALIZE FILENAME AREA
         FSCALL GETNAME                SCAN FOR SYSLIB NAME
         LSCAN LDFTBL,CLWKWCB
         BNZ   ILLSTR
         FSCALL ASMBLNAM               PUT SYSLIB NAME TOGETHER
         LH    R2,LNKSYSCT             NUMBER OF SYSLIBS
         IF    (R2,GT,8),SYSLMXR       TOO MANY
         LA    R1,1(R2)                BUMP COUNT
         STH   R1,LNKSYSCT             AND SAVE
         MH    R2,=AL2(L'GPWFCB)
         LA    R2,LNKSYSLB(R2)
         MVC   @R2(L'GPWFCB),GPWFILE   SAVE NAME
         B     NEXT
*
SYSLMXR  SEG   'Too many system libraries specified'
         B     ERROR
         EJECT ,
*
* PROCESSES NOT YET HANDLED
*
SHLINK   LABEL ,
UNLOAD   LABEL ,
RELOAD   LABEL ,
         B     NOTYET                  *****LOAD FILE DEPENDENT*****
         EJECT ,
* LOADFILE - (SYSLMOD) FILE FOR MODULE OUTPUT
*
LOADFILE LABEL ,
         FSCALL FNINIT                 PREPARE NAME SCAN
         FSCALL GETNAME
         LSCAN LDFTBL,CLWKWCB
         BNZ   ILLSTR
         FSCALL ASMBLNAM
         MVC   LNKSYSMD(L'GPWFCB),GPWFILE  SAVE FCB FOR LATER
         B     NEXT
         EJECT ,
*
*  CHECK IF WE ARE TO INCLUDE MISSING UNDEFINED CSECTS
*
XTRESOLV LABEL ,
         VPUSH RAR,,*
         LH    R1,LNKSYSCT             NUMBER OF SYSLIBS
         IF    (R1,EQ,0),XTRSCXT       NO SYSLIB
XTRSCANM CLEAR WASLBNX                 READY FOR FIRST SYSLIB
*
XTRSCAN0 LABEL ,                       READY SCAN FOR UNDEF EXTERN
         CLEAR WAUTOSLB+WAUTOPXT+WAUTOFMB NO SYSLIB ATTACHED
XTRSCAN1 VCALL LDSET                   RESTART SCAN
         CLEAR WAUTOUXS                NO UNDEFINEDS
XTRSCAN2 LA    R2,2          'ESDTER'  EXTERN IDENTIFIER
XTRSCAN3 VCALL LDNEXT                  GET NEXT
         IF    (R15,NZER),BEGIN        EXTRACT ENTRY TYPE
         USING CSDNAME,R15             ##
         LC    R0,CSDTYP
         IF    (R0,NE,R2),XTRSCAN3
         IF    WAUTOFMB,BEGIN          SCAN FOR REST
         L     R14,WAMBLNX             LAST LOADED
         USING DENTRY,R14              ##
         IF    (CSDNAME,LT,DNAME),BEGIN
         SET   WAUTOUXS                UNDEFINED EXISTS
         B     XTRSCAN3
         END   ,
         DROP  R14                     ##
         CLEAR WAUTOFMB
         END   ,
         DROP  R15                     ##
         IF    WAUTOPXT,BEGIN          PRINT EXTERNALS
         VCALL CHKATTN
         IF    NZ,XTRSCAT             IF ATTENTION
         SEG   (R15),8                 PUT NAME IN BUFFER
         SEG   ' '
         DECR  R4
         IF    (R4,EQ,0),BEGIN         PRINT LINE
         LA    R4,7
         VWRITE ,
         END   ,
         B     XTRSCAN3
         END   ,
         END   ,
         ELSE  BEGIN                   NONE LEFT
         IF    WAUTOPXT,BEGIN          FINISHED PRINT
         IF    (R4,LT,7),' VWRITE ,'   OUTPUT LAST
         B     XTRSCXT
         END   ,
         IF    WAUTOSLB,BEGIN          SYSLIB ATTACHED
         FSCALL DETACH                 DETACH IT
         IF ^WAUTOFTM,'VCALL POPLNKST'
         END   ,
         IF    ^WAUTOUXS,XTRSCXT       NO UNDEFINED
         B     XTRSCAN0                UNDEFINEDS STILL EXIST
         END   ,
         MVC   GPWLMN,@R15             SAVE FOR DIRECTORY SCAN
         IF    ^WAUTOSLB,BEGIN        NO SYSLIB ATTACHED
         LH    R2,WASLBNX              NEXT SYSLIB COUNTER
         LH    R1,LNKSYSCT             NUMBER OF SYSLIBS
         IF    (R2,GE,R1),BEGIN        NO MORE SYSLIBS
         IF    ^WAUTOXPS,BEGIN         ONE MORE PASS
         SET   WAUTOXPS
         B     XTRSCANM
         END   ,
         SET   WAUTOPXT                PRINT EXTERNALS
         IF    ^LNKPFLWN,XTRSCXT       NOWARN
         VWRITE 'THE FOLLOWING SYMBOLS ARE UNDEFINED:'
         LA    R4,7
         B     XTRSCAN1                GET NEXT UNDEFIMED
         END   ,
*
*  ATTACH NEXT SYSLIB AND SCAN DIRECTORY FOR EXTERNAL
*
           LA  R1,1(R2)              BUMP SYSLIB COUNT
           STH R1,WASLBNX
           MH  R2,=AL2(L'GPWFCB)
           LA  R2,LNKSYSLB(R2)       LOC OF SYSLIB NAME
           MVC GPWFCB,@R2
           MVC GPWLMN,@R15           RESTORE VALUE AGAIN
         FSCALL ATTOLD                 ATTACH SYSLIB
         IF    (GPWFNIXR,AND,^GPWFHYBR),NOTIXR
         FSCALL CHKSPIRE               AVOID SPIRES FILES
           SET WAUTOSLB+WAUTOFTM     SET SYSLIB ATTACHED
*$         FSCALL GETDIR         ONLY GET DIR THE FIRST TIME
         END   ,
         MVI   GPWLMNL,8
         SPACE
         FSCALL GETMEM                 READY PDS MEMBER FOR INPUT
         IF    NEG,BEGIN              NOT FOUND
         SET   WAUTOUXS                UNDEFINED STILL EXISTS
         B     XTRSCAN2                GET NEXT UNDEFINED
         END   ,
*
*  SYMBOL FOUND IN DIRECTORY - INCLUDE THE MEMBER
*
         CLEAR WAUTOXPS               RESOLVED MAY HAVE UNRESOLVEDS
*                                      TAKE ANOTHER PASS THRU SYSLIBS
         ST    R14,WAMBLNX             LAST MEMBER LOADED
         IF    ^WAUTOFTM,BEGIN         ALREADY PRIMED
           SET WAFLNXMB              MULTIPLE MEMBER
           B   NXTMEMB
         END   ,
         SET   WAUTOFMB                MEMBER TO LOAD
         CLEAR WAUTOFTM                CLEAR FIRST TIME
         B     PRIME
*
*  FINISHED WITH ALL UNDEFINEDS
*
XTRSCAT  L     R1,CLWSCP
         WITH  (SCP,R1),BEGIN
         CLEAR SCBCFCLA                CLEAR ATTN
         END   ,
XTRSCXT  LABEL ,
         VPOP  RAR,,*
         BR    RAR
         EJECT ,
*
* NAME: END OF LOAD MODULE INDICATOR
*
* NOTE: IF LOADFILE HAS BEEN NOT BEEN DEFINED THEN 'PROGLIB' IS THE
*        DEFAULT LOADFILE.
*
NAME     LABEL ,
         LCALL LOADINGQ                ANYTHING SUBSTANTIAL LOADED?
         LCALL GETSYMB                 MUST BE 8-CHAR SYMBOL
         BZ    MISSING                 NO MODULE NAME
         LCALL CKALIAS                 MAKE SURE NAME IS UNIQUE
         CLEAR GPWLMSPC                CLEAR ANY PREVIOUS PGM NAME
         CLEAR GPWFERS                 CLEAR ANY PREVIOUS ERASE
         STC   R0,GPWLMNL              STORE LENGTH OF NAME
         MVC   GPWLMN,@R1             MEMBER NAME
*
         CLI   LNKSYSMD+GPWFNL-GPWFILE,0     SYSLMOD NAMED?
         IF    E,BEGIN                 IF NOT --
         FSCALL FNINIT
         SETMSG 'PROGLIB'              DEFAULT NAME
         FSCALL GOTNAME                PROCESS AS SCANNED NAME
         FSCALL ASMBLNAM
         END   ,
         ELSE  BEGIN                   MOV SYSLMOD
         MVC   GPWFCB(3),LNKSYSMD
         MVC   GPWFILN(L'GPWFN),LNKSYSMD+GPWFILN-GPWFILE
         END   ,
         CLEAR WAFLGERA                NO REPLACE
         SCAN  0,CLWKWCB               ANY FOLLOWING TOKEN?
         BM    ILLSTR
         IF    NZER,BEGIN
         CLC   @R1(3),=C'(R)'          REPLACE?
         BNE   UNREC                   NO
         CH    R0,=Y(3)
         BNE   UNREC
         SET   WAFLGERA                OK TO REPLACE MEMBER
         END   ,
*
         IF    LNKPFCAL,BEGIN        AUTOCALL
           MVC LNKSYSMD,GPWFCB       SAVE SYSLIB
           LCALL XTRESOLV              PULL IN UNDEFINEDS
           MVC GPWFCB,LNKSYSMD       RESET NAME
         END   ,
         SET   GPWFANW                 ATTACH NEW IF NECESSARY
         FSCALL ATTOLDE                OLD IS PREFERABLE
         IF    GPWFNEW,BEGIN                      NEW
           SET GPWUILIB+GPWUILDF     LIBRARY-LOADFILE
           SET GPWLNEWD               CREATE DIRECTORY PAGE
           SET GPWFFMT
           FSCALL SETUINFO
         END   ,
         ELSE  BEGIN
         IF    ^GPWUILDF,NOTLDF
         IF    (GPWFNIXR,AND,^GPWFHYBR),NOTIXR
         FSCALL CHKSPIRE               AVOID SPIRES FILES
         END   ,
         SPACE ,
*
*   CHECK TO SEE IF MEMBER EXISTS
*        FSCALL CHECKMEM
*   IF IT EXISTS, AND IF OK TO ERASE, THEN ERASE MEMBER
*
         L     TR,LCBALIH              START FOR ALIAS CHAIN
         CLEAR (GPWLMFBN,L'GPWLMFBN+L'GPWLMBCT+L'GPWLMLBN)
         MVC   CLWTEMP,GPWLMN          SAVE PROGRAM NAME
*
         FSCALL CHECKMEM               DOES MEMBER EXIST ??
         IF    M,' CLEAR WAFLGERA '    NO, MEMBER NOT ERASED
         ELSE  BEGIN                   YES, ERASE MEMBER IF OK
         IF    ^WAFLGERA,BEGIN
         FSCALL ASKMBERS               ASK OK TO ERASE
         IF    ^GPWFERS,REQABORT
         END
         SET   WAFLGERA                ERASE
         END
         SET   GPWLREP                 WE WILL REPLACE ON EOFMEM
*$  NOTE  FOR ORVYL FILES WE NOW DO NOT ERASE OLD ALIAS
*$    ALSO ALIAS THAT ARE ALIAS FOR OTHER PROGRAMS ARE NOT REPLACED
*$  NOTE FOR OS FILES ALL ALIAS ARE REPLACED, ALIAS SMALIAS
         SET   GPWLGOTD
         SPACE ,
         FSCALL PUTMEM                 INITIALIZE MEMBER FOR OUTPUT
         LCALL AMODE31
         VCALL LDMOINIT                INITIALIZE FOR OUTPUT
         BNZ   ERROR                   ERROR
         LCALL AMODE24
         IF    LNKPFPRV,BEGIN         IF PRIVATE
         LA    R15,1                   SET CLPONLY
         FSCALL SETLDF                  ACCESS TO FILE
         END   ,
         IF    (' CLI LNKEP,0',NE),BEGIN    ENTRY ON CONTROL?
         LA    R1,LNKEP                POINT TO NAME
         VCALL LDFIND                  ASK LOADER TO FIND NAME
         BZ    UNDEFENT                NO
         LTR   R1,R1
         BM    UNDEFENT
         USING CSDNAME,R15             ##
*         L     R1,CSDADDR
         L3    R1,CSDADDR+1
         DROP R15                      ##
*         LA    R1,@R1
         ST    R1,LCBEP                ENTRY POINT
         END   ,
         MVC   LCBMOMTB,=Y(4096)       MAX TEXT BLOCK
LDFLOOP  L     R1,GPWBUFA
         LH    R0,GPWBLKSZ
         IF    GPWFVOSF,' LH R0,OSFBLKSZ'
         LCALL AMODE31
         VCALL LDMOGO                  GET A BLOCK OF OUTPUT
         BZ    LDFDATA                 NORMAL RETURN FOR OUTPUT
* RETURN +4 FOR END OF OUTPUT
         BNZ   ERROR                   ERROR
         SPACE ,
* INSERT NAME IN DIRECTORY.
*
         CLEAR (GPWLMF1,2)             CLEAR FLAGS
         IF    LNKPFREN,' OI  GPWLMF1,DFL1SHR'   REENTRANT
         IF    LNKPFPRT,' OI  GPWLMF1,DFL1REF'   PROTECTED
         IF    LNKPFPRV,' OI  GPWLMF1,DFL1PRV'   PRIVATE
         IF    LNKPFM31,' OI  GPWLMF1,DFL1M31'   31 BIT MODE
         IF    LCBFPAG,'  OI  GPWLMF1,DFL1PAG'   PAGE BOUNDARY
         FSCALL EOFMEM                 EOF PROCESSING ON PDS MEMBER
         MVC   LNKANAM,GPWLMN          SAVE MEMBER NAME
         LT    SR,LCBALIH              ANY ALIASES?
         BZ    LDFLOO5                 NO MORE
LDFLOO4  LABEL ,
         USING CSD,SR                  ##
         MVC   GPWLMN2(8),CSDNAME      NAME TO INSERT
         SET   GPWLGOTD
         SET   GPWLREP                 OS ONLY, REP ALIAS IF NEEDED
         FSCALL ADDALIAS               GO ADD ALIAS
         LT    SR,CSDLINK              POINT TO NEXT
         BNZ   LDFLOO4                 IF ANY, GO BACK
LDFLOO5  LABEL ,
         DROP  SR                      ##
         VCALL CLEANUP                 DISCARD PROGRAM
         IF    GPWFQIET,LDFQIET
         FSCALL SEGMEMB                MEMBER NAME
         IF    WAFLGERA,BEGIN
         SEG   'replaced in '
         END   ,
         ELSE  BEGIN
         SEG   'saved in '
         END   ,
         FSCALL SEGNAME                WRITE LIB NAME
         VWRITE ,
LDFQIET  LABEL ,
         MVC   GPWNXTAD(4),=F'0'       GET FIRST ALIAS
         SET   GPWLGOTD
         FSCALL NXTALIAS
         BM    NAMEDONE                DONE IF NONE
         USING DENTRY,R14              ##
         MVC   CLWTEMP,DNAME           SAVE AWAY ALIAS NAME
         DROP  R14                     ##
         VPUSH RAR,R1,*                SAVE REGS
         VWRITE 'WITH ALIASES:'
         LA    R14,CLWTEMP             FIRST ONE IS IN CLWTEMP
LDFLOO2  LABEL ,
         USING DENTRY,R14              ##
         VWRITE DNAME,8                WRITE NAME
         DROP  R14                     ##
         VPOP  RAR,R1,*                RESTORE REGS
         FSCALL NXTALIAS               GET NEXT ALIAS
         VPUSH RAR,R1,*                SAVE REGS FOR RE-ENTRY
         BZ    LDFLOO2                 GO WRITE ALIAS
*
NAMEDONE FSCALL DETACH                 DETACH LOADFILE
         SET   LNKSFRRB                BUFFER CLOBBERED BY UNLOAD
         B     NEXT
         SPACE ,
LDFDATA  LABEL ,
         LCALL AMODE24
         LR    R15,R0                  TEXT LENGTH
         FSCALL WRITEGO
         FSCALL FORCE
         B     LDFLOOP
         EJECT ,
*
* PAGE : MODULES TO BE PLACED ON A PAGE BOUNDARY
*
PAGE     LABEL ,
         LCALL GETSYMB                 PARSE CSECT NAME
         BZ    PAGE10                  NONAME: PAGE NEXT CSECT
PAGE0    MVC   LCBCI(8),@R1
         VCALL LDPAGE                  GIVE NAME TO LOADER
         BNZ   ERROR                   ERROR
         LCALL GETSYMB                 MORE SYMBOLS?
         BNZ   PAGE0                   PROCESS
         B     NEXT                    NEXT PLEASE
*
PAGE10   MVC   LCBCI(8),=CL8' '        CLEAR NAME
         VCALL LDPAGE                  PASS TO LOADER
         B     NEXT
         EJECT ,
*
* PARM : PARM MUST PRECEDE ALL OTHER INPUT
*
PARM     LABEL ,
         IF    CLWPFPL,PARMERR         PARM MUST BE FIRST THING
         LSCAN PRMCRDKW,CLWKWCB
         BNZ   ILLSTR
         IF    WAFNOWN,'CLEAR   LNKPFLWN'  'NOWARN' OVERRIDE
         IF    WAFNCAL,'CLEAR   LNKPFCAL'   'NOCALL'OVERRIDE
         B     NEXT
*
PARMERR  LABEL ,
         SEG   'Parm found while loading program'
         B     ERROR
*
PARMLET  SET   LNKPFLET
         B     PARMWARN
*
PARMCALL IF    ^WAFNCAL,BEGIN       SET CALL OPTION
           SET LNKPFCAL
         SET WALNKPFL.LNKPFCAL
         END   ,
         SCRTN (15)
*
PARMNCAL CLEAR LNKPFCAL
         CLEAR WALNKPFL.LNKPFCAL
         IF    WAFNOVRD,'SET   WAFNCAL'
         SCRTN (15)
*
PARMWARN IF    ^WAFNOWN,BEGIN         PRINT ERROR MESSAGES
           SET LNKPFLWN
         SET   WALNKPFL.LNKPFLWN
         END   ,
         SCRTN (15)
*
PARMNOWN LABEL ,
         CLEAR LNKPFLWN            DON'T PRINT ERROR MESSAGES
         CLEAR WALNKPFL.LNKPFLWN
         IF    WAFNOVRD,'SET   WAFNOWN'
         SCRTN (15)
*
PARMSIZE LR    TR,R1
         AR    TR,0
         DECR  TR                      POINT TO LAST CHAR
         LA    SR,1
         CLI   @TR,C'K'
         BNE   PARMNOK
         LA    SR,1024
         DECR  R0                      REMOVE 'K'
PARMNOK  VPUSH R14,R15,*               SAVE SCAN REGS
         XCALL DTB                     DECIMAL TO BINARY
         BNZ   UNREC                   BAD CHARACTER
         LR    TR,R15                  MOVE RESULT
         MR    SR,SR                   TR <- SR TIMES TR (TRICKY)
         L     R15,CLWSCP              GET THE SCP ADDRESS
         WITH  (SCP,R15),'CEIL  TR,SCPUMAP'   LARGEST MAP SIZE
         ST    TR,WALCMPLN
         IF    (WAFLGDSZ,OR,(LCBMPLEN,ZERO)),' ST TR,LCBMPLEN'
         VPOP  R14,R15,*
         SCRTN (15)
*
PARMLIST SET   LNKPFLST
         SET   WALNKPFL.LNKPFLST
         SCRTN (15)
*
PARMMAP  SET   LNKPFMAP
         SET   WALNKPFL.LNKPFMAP
         SCRTN (15)
*
PARMOSNT SET   LCBXFOSN                OS ENTRY CONVENTIONS
         SET   WALCBXFL.LCBXFOSN
         SCRTN (15)
*
PARMNOSN CLEAR LCBXFOSN            NO  OS ENTRY CONVENTIONS
         CLEAR WALCBXFL.LCBXFOSN
         SCRTN (15)
*
PARMFORT SET   LCBXFFRT                FORTRAN PROGRAM
         SET   WALCBXFL.LCBXFFRT
         SCRTN (15)
*
PARMURAM SET   LCBXFURM                USE URAM
         SET   WALCBXFL.LCBXFURM
         SCRTN (15)
*
PARMREFR SET   LNKPFPRT                REFRESHABLE - PROTECTED
         SET   WALNKPFL.LNKPFPRT
         SCRTN (15)
*
PARMRENT SET   LNKPFREN                RENTRENT - SHARABLE
         SET   WALNKPFL.LNKPFREN
         SCRTN (15)
*
PARMPRIV SET   LNKPFPRV                PRIVATE PROGRAM
         SET   WALNKPFL.LNKPFPRV
         SCRTN (15)
*
PARMM31  SET   LNKPFM31                START IN 31 BIT MODE
         SET   WALNKPF2.LNKPFM31
         SCRTN (15)
*
PARMNOGO LABEL ,
         SEG   'Parm statement must precede other statements'
         B     ERROR
         EJECT ,
* REPLACE CSECT
*
REPLACE  LABEL ,
         LCALL GETSYMB                 SCAN OUT EXTERNAL SYMBOL
         BZ    NEXT                    ALL DONE
         MVC   LCBCI(8),@R1            SAVE NAME
         MVC   LCBCI+8(8),=CL8' '      ASSUME NO LEVEL-1 SYMBOL
         LCALL GETPSYM                 GET LEVEL-1 SYMBOL
         BZ    REPNDEL                 REPLACE/NOT DELETE
         MVC   LCBCI+8(8),@R1          SET REPLACED NAME
REPNDEL  VCALL LDREPDEL                GIVE TO LOADER
         BZ    REPLACE                 SCAN FOR MORE
         B     ERROR
         EJECT ,
* SUPERZAP REPLACEMENTS
*
* ZAPNAME <CSECT-NAME>
*     - SPECIFIES NAME OF CSECT TO BE ZAPPED.
*
* ZAPBASE <HEX-STRING>
*     - SPECIFIES OFFSET SUBTRACTED FROM VER AND REP OFFSETS
*
* ZAPVER <OFFSET> <HEX-STRING>
*     - VERIFIES OLD DATA
*
* ZAPREP <OFFSET> <HEX-STRING>
*     - NEW DATA
*
ZAPNAME  LCALL LOADINGQ
         LCALL GETSYMB                 CSECTNAME
         BZ    MISSING                 NO CSECT NAME
         VCALL LDFIND
         BZ    ZPUNDEF                 NAME NOT DEFINED
         LTR   R1,R1
         BM    ZPUNDEF
         LTR   R0,R0                   DES NAME HAVE LENGTH?
         BZ    ZPUNDEF                 NO
         CLEAR SR                      ZERO ZAP BASE
         STM   R0,SR,LNKZPTRS          LEN, LOC AND BASE OF CSECT
         B     NEXT
*
ZAPBASE  LT    TR,LNKZPTRS             CSECT DEFINED?
         BZ    ZPNONAM                 NO
         SCAN  0,CLWKWCB               GET HEX STRING
         BM    ILLSTR
         BZ    MISSING
         XCALL XTB                     CONVERT DISPLACEMENT
         LTR   R0,R0                   OK?
         BNZ   ZPILLOFF                NO, BAD OFFSET
         ST    R15,LNKZBASE            SAVE FOR LATER
         B     NEXT
*
ZAPVER   LA    SR,DOZAPVER             VERIFY SWITCH
         B     ZAPCOM
*
ZAPREP   LA    SR,DOZAPREP             REPLACE SWITCH
*
ZAPCOM   LM    TR,QR,LNKZPTRS          LEN,LOC OF CSECT
         LTR   TR,TR                   DEFINED?
         BZ    ZPNONAM
         SCAN  0,CLWKWCB               NEXT TOKEN
         BM    ILLSTR
         BZ    MISSING
         XCALL XTB                     CONVERT OFFSET
         LTR   R0,R0                   CONVERT OK?
         BNZ   ZPILLOFF                NO
         S     R15,LNKZBASE            SUBTRACT BASE
         CLR   R15,TR                  IS OFFSET OK?
         BNL   ZPILLOFF                NO
         ALR   QR,R15                  START OF VER/REP
         SLR   TR,R15                  SPACE FOR VER/REP IN CSECT
         LA    R0,32                   MAX VER/REP LENGTH
         VPUSH ,,32,PTR=R1             USE STACK FOR TEXT
         VCALL EVHEX
         BM    ERROR                   ERROR MESSAGE IN BUFFER
         CLR   R0,TR                   FIT IN CSECT?
         BH    ZPILLOFF                NO
         LR    TR,R0
         DECR  TR                      LENGTH FOR MVC/CLC
         BR    SR                      DO VER OR REP
*
DOZAPVER EX    TR,'CLC  @QR(0),@R1'    COMPARE TEXT
         BE    DOZAPRE1                VER OK
         SEG   'ZAP verify error'
         B     ERROR
*
DOZAPREP EX    TR,'MVC  @QR(0),@R1'    MOVE TEXT
DOZAPRE1 LABEL ,
         VPOP  PTR=R1
         SCAN  0,CLWKWCB               ANYTHING LEFT OVER?
         BM    ILLSTR
         BZ    NEXT
         SEG   (1),(0)
         SEG   ':Not processed'
         B     ERROR
*
ZPUNDEF  SEG   'Name not a defined csect'
         B     ERROR
*
ZPNONAM  SEG   'Missing ZAPNAME statement'
         B     ERROR
*
ZPILLOFF SEG   'Invalid offset specified'
         B     ERROR
         EJECT ,
* LINK END OF FILE. ENTER?
*
LINKEOF  IF    WAFLENT,ENTER           ENTER
         IF    CLWPFPL,'CLEAR  LNKFFREE'  IF PROG, DON'T CLEAN UP
         B     FILEXIT
         TITLE 'ORVYL''S PROGRAM MANAGER - CALL'
* CALL COMMAND
*
*                    USER UUU/GROUP GG
*        CALL <NAME> LIBRARY <FILENAME> CLEAR PAUSE <PARM>
*                         PUBLIC
*
CALL     LABEL ,
         SET   GPWOSFOK                SET OS/FILE POSSIBLE
         LCALL GETSYMB                 PROGRAM NAME
         BZ    MISSING                 NO PROGRAM NAME
         SET   WAFLPUB                 SEARCH BOTH LIBRARIES
         MVC   GPWLMN,@R1
         TM    CLWKFL,CLWKFMP          MANDATORY PROGRAM?
         BZ    CALLOK                  NO
         CLC   CLWKPROG,GPWLMN         MATCH?
         BNE   CHEAP                   NO
         BAS   R14,CALLPUB             FORCE PUBLIC
CALLOK   LSCAN KWCALL,CLWKWCB          SCAN REST OF COMMAND
         BNZ   ILLSTR
         LCALL CLRCALL                 NEED CLEAN SLATE
         MVC   LCBXFL,WALCBXFL     MOVE IN SPECIFIED PARAMETERS
         MVC   LNKPFL,WALNKPFL
         MVC   LNKPFL2,WALNKPF2
         IF    (LCBMPLEN,ZERO),BEGIN
         MVC   LCBMPLEN,WALCMPLN
         IF    (LCBMPLEN,ZERO),BEGIN
         L     R15,CLWSCP              GET THE SCP ADDRESS
         WITH  (SCP,R15),'MVC  LCBMPLEN,SCPUMAP'    DEFAULT MAP
         SET   WAFLGDSZ                SUPPLIED
         END   ,
         END   ,
         SPACE 2
* FILE DIRECTORY SEARCH. SEARCH THE USERS DEFAULT LIBRARY AND
* THE PUBLIC LIBRARY UNLESS A PARTICULAR LIBRARY WAS SPECIFIED
* IN THE CALL COMMAND.
*
         CLI   GPWUSER,C' '
         IF    EQ,BEGIN
         CLI   GPWGRP,C' '             IF USER,GROUP OR FILE NAME
         IF    EQ,BEGIN                IS SPECIFIED, THEN
         CLI   GPWFNL,0
         BE    CALLOK2
         END   ,
         END   ,
         CLEAR WAFLPUB                 DON'T SEARCH PUBLIC.
         CLI   GPWFNL,0                USE DEFAULT NAME?
         BNE   CALLOK3                 NO
         IF    GPWFPUB,PUBPROG         PUBLIC SPECIFIED?
CALLOK2  LABEL ,
         SETMSG 'PROGLIB'              DEFAULT NAME
         FSCALL GOTNAME
CALLOK3  LABEL ,
         FSCALL ASMBLNAM               PUT NAME TOGETHER
         SPACE ,
* ATTACH FILE AND SEARCH DIRECTORY
CALATCH  LABEL ,
         SET   GPWFNOE                 NO ERROR IF FILE NOT THERE
         FSCALL ATTOLD                 ATTACH THE FILE
         LTR   R15,R15                 CHECK RETURN
         BNZ   TRYPUB                  NO SUCH FILE
         IF    (GPWFNIXR,AND,^GPWFHYBR),NOTIXR
         FSCALL CHKSPIRE               AVOID SPIRES FILES
         FSCALL GETMEM                    INITIALIZE MEMBER FOR READ
         IF    GPWALIAS,' MVC LNKANAM(4),GPWLMN2'
* PROGRAM FOUND. LOAD IT.
         IF    (R15,Z),CALLLOAD        LOAD PROGRAM FOR CALL
         SPACE ,
TRYPUBDT FSCALL DETACH                 DETACH PREVIOUS FILE
TRYPUB   IF    ^WAFLPUB,PROGNF         TRY PUBLIC FILE?
         CLEAR WAFLPUB                 JUST ONE PEEK
PUBPROG  LABEL ,
         IF    GPWFVOSF,PROGNF         NO PUB FOR OS FILE
         FSCALL GETCAT                 ENQ ON PROGRAM CATALOG
         LR    QR,R1                   MOVE CAT POINTER
         USING PRGCAT,QR               ##
         LM    SR,TR,PCATPTR           SET UP CAT POINTERS
SRCHCAT  CR    SR,TR                   ALL DONE?
         BNL   CATNF                   YES, PROG NOT FOUND
         UNPRS GPWHXBUF,@SR            UNPRESS LINE
         BNZ   PCATERR                 ERROR IN CATALOG
         LR    SR,R1                   UPDATE POINTER
         SCINIT GPWHXBUF,(0),CLWKWCB   SET UP TO SCAN
         SCAN  ,CLWKWCB                GET PROGRAM NAME
         CLC   CLWKWKW,GPWLMN          MATCH?
         BNE   SRCHCAT                 NO, TRY NEXT
         FSCALL FNINIT                 INITIALIZE FILE NAME
         FSCALL GETNAME                GET FILE NAME
         LSCAN CATSCKWS,CLWKWCB        SCAN FOR ALTERNATE NAME
         BNZ   PCATERR                 CATALOG ERROR
         FSCALL ASMBLNAM               PUT NAME TOGETHER
         FSCALL RELCAT                 RELEASE CATALOG
         B     CALATCH                 GO GET PROGRAM
         DROP  QR                      ##
         SPACE 2
CATNF    FSCALL RELCAT                 RELEASE CATALOG
         B     PROGNF                  PROGRAM WASN'T THERE
         SPACE 3
CATNAME  MVC   GPWLMN,CLWKWKW          MOVE IN NAME
         STC   R0,GPWLMNL               AND LENGTH
CATNOPRT LABEL ,                       IGNORE NOPRINT
CATCOMM  SCRTN (R15)                   RETURN TO SCAN
         SPACE 2
CATSPIRE SET   WAFLGSPI                NOTE SPIRES PROCESSOR
         SCRTN (R15)
         SPACE 2
CATSPL   SET   WAFLGSPL                SET SHARED PGM LOAD
         SCRTN (R15)
         SPACE 2
* SPECIAL KEYWORD ROUTINE FOR PUBLIC PROGRAM CALLING
CALLPUB  SET   GPWFPUB                 SET PUBLIC SPECIFIED
         L     R1,=V(SETPUB)
         BR    R1                      GO HANDLE NORMALLY
         EJECT ,
* LOAD A PROGRAM (SHAREABLE OR OTHERWISE) FOR THE CALL COMMAND
*
CALLLOAD LABEL ,
         IF    ('TM GPWLMF1,DFL1PRV',O),BEGIN  PROTECTED MEMBER?
         FSCALL SENLDF                 IN A PROTECTED LOADFILE?
         IF    (R15,NZ),'SET CLWPFPRV' LET'S REMEMBER THAT.
         END   ,
*        IF    ('TM GPWLMF1,DFL1PRV',O),'SET  CLWPFPRV' PROTECT MEMORY
         IF    WAFLNOSH,CALLDOLD       NOSHARE SPECIFIED
         TM    GPWLMF1,DFL1SHR         SHAREABLE PROGRAM?
         BZ    CALLDOLD                NO, DO THE LOADING
         SPACE ,
         MVI   LNKANAM,0               IGNORE ALIAS NAME
         MVC   LNKLMN,GPWLMN           MODULE NAME
         MVC   LNKFN,GPWFFN            SOURCE FILENAME
         SETMSG 'SPB LOADING STUFF'
         FSCALL ENQ
         SET   LNKFSPNQ                NOTE ENQUEUE
         CLPSERV ATTSPB,LNKLMN,LNKFN   GET AN SPB
         IF    (R15,NZ),CALLLO8        NONE AVAILABLE
         ST    R1,CLWSPB               SPB ADDRESS (MVS)
         LR    SR,R1
         USING SPB,SR                  ##
         SET   CLWPFSHR                SHARED PROGRAM LOAD
         CLEAR R1
         LCALL AMODE31
         IF    SPBFLOAD,'LA R1,1'      LOAD THE SHARED PROGRAM
         LCALL AMODE24
         IF    (R1,NZ),CALLDOLD
         SPACE ,
* SHARED PROGRAM ALREADY LOADED.
         SET   CLWPFPIC
         FSCALL DEQ                    DEQUEUE
         CLEAR LNKFSPNQ                RESET ENQUEUE MARKER
         MVC   LCBMPLEN,=A(4096)       ONE PAGE MAP PLEASE
         LCALL LOADSHRD                INIT MAP FOR SHARED PROG
         LCALL AMODE31
         LH    R1,SPBRESRV             CORE RESERVED FOR SHARED PROG
         SLL   R1,12                   IN BYTES
         L     R0,SPBORGIN             SHARED PROGRAM ORIGIN
         STM   R0,R1,LCBCORE           PROGRAM CORE POINTERS
*
         MVC   CLWSBPSW+4(4),SPBEP     ENTRY POINT
         LCALL AMODE24
         FSCALL DETACH                 DON'T NEED FILE NOW
         B     ENTSHRD                 GO ENTER PROGRAM
         DROP  SR
         SPACE ,
CALLLO8  LABEL ,                       NO SHARED PROGRAM BLOCKS LE
         FSCALL DEQ                    DEQUEUE SPBID
         CLEAR LNKFSPNQ                RESET ENQUEUE MARKER
* LOAD NEW SHARED PROGRAM.
* OR LOAD UNSHARED PROGRAM (ALL THE SAME TO ME.)
*
CALLDOLD LABEL ,
         TM    GPWLMF1,DFL1REF         REFRESHABLE (PROTECTED)?
         IF    ON,' SET  LNKPFPRT'     SET PROTECTED PROGRAM
         TM    GPWLMF1,DFL1M31         31 BIT MODE?
         IF    ON,' SET  LNKPFM31'     SET
         LCALL DOLOAD                  POINTERS IN GPWLMN
         FSCALL DETACH                 RELEASE FILE
         CLI   LNKANAM,0               ALIAS NAME?
         BE    ENTER                   NO; USE NORMAL ENTRY
         LA    R1,LNKANAM              LOOK UP NAME
         VCALL LDFIND
         BZ    ENTER                   NOT DEFINED
         LTR   R1,R1                   IS ADDRESS DEFINED?
         BM    ENTER                   NO
         MVC   LNKEP,LNKANAM
         B     ENTER                   PERFORM FIXUP
* LOAD A LOAD MODULE
*
*        - DIRECTORY ENTRY IS IN GPWLMN
*
DOLOAD   VPUSH SR,RAR,*
         LCALL LOADING
         MVC   GPWBN,GPWLMFBN          FIRST BLOCK NUMBER
         VCALL LDMIINIT                INITIALIZE MODULE INPUT
         BNZ   ERROR                   ERROR
         CLEAR LNKFEOM
         SPACE ,
         LCALL AMODE31
DLDLOOP  CLC   GPWBN,GPWLMLBN          PAST LAST BLOCK?
         BH    BADLDF                  DAMAGE
         FSCALL READ                   GET A BLOCK
         LR    R0,R1                   READ LENGTH
         L     R1,GPWBUFA
DLDGO    VCALL LDMIGO                  GIVE TO LOADER
         BZ    DLDREC                  PROCESS NEXT RECORD
         BZ    DLDTEXT                 READ IN TEXT
         BZ    DLDEXIT                 LAST RECORD
         BZ    DLDTXEOM                TEXT BLOCK IS LAST RECORD
         BNZ   ERROR                   LAST RECORD PROCESSED
DLDEXIT  LABEL ,
         LCALL AMODE24
         VPOP  SR,RAR,*                RESTORE WORK REGS
         BR    RAR
DLDREC   LTR   R0,R0                   ANY RECORD REMAINING
         BNZ   DLDGO
         B     DLDLOOP
*
DLDTXEOM SET   LNKFEOM                 END OF MODULE FLAGG
DLDTEXT  LABEL ,
         LR    SR,R1                   SAVE TEXT ADDRESS
         LR    TR,R0                   AND LENGTH
DLDTEXT1 LR    R1,SR                   TEXT ADDRESS
         LR    QR,TR                   REMAINING LENGTH
         CEIL  QR,=A(4096)
         SR    TR,QR                   LENGTH AFTER READ
         LA    SR,@SR(QR)              NEXT TEXT ADDRESS
         LR    R15,QR                  PASS LENGTH TO READ ROUTINE
         CLC   GPWBN,GPWLMLBN          PAST END OF MEMBER?
         BH    BADLDF
         FSCALL READGO                 READ PROGRAM TEXT
         BNZ   BADLDF                  MISSING RECORD
         CR    R1,QR                   COUNT COMPARE
         BNE   BADLDF                  SHORT RECORD
         LTR   TR,TR                   ANY LENGTH LEFT?
         BNZ   DLDTEXT1                YES
         IF    LNKFEOM,DLDEXIT         EOM
         B     DLDLOOP
         TITLE 'ORVYL''S PROGRAM MANAGER - ENTER'
*
* ENTER: BEGIN PROGRAM EXECUTION
*
ENTER    LABEL ,
         LCALL LOADINGQ
         LSCAN KWENTER,CLWKWCB
         BNZ   ILLSTR
         IF    LNKPFCAL,'LCALL XTRESOLV'  PROCESS UNDEFINEDS
         LCALL AMODE31
         MVC   LCBRF,LCBCORE           RELOCATE TO CURRENT LOCATION.
         VCALL LDFIX
         BNZ   ERROR                   ERROR
         LCALL AMODE24
*         L     R1,LCBEP                DEFAULT ENTRY FROM OBJECT
*         AL    R1,LCBCORE
         L     R1,LCBCORE
         LT    R15,LCBEP
         IF    P,'ALR R1,R15'          ENTRY POINT OTHER THAN START
         IF    ('CLI LNKEP,0',NE),BEGIN    ENTRY ON CONTROL?
         LA    R1,LNKEP                POINT TO NAME
         VCALL LDFIND                  ASK LOADER TO FIND NAME
         BZ    UNDEFENT                NO
         IF    (R1,M),UNDEFENT
         END   ,
         ST    R1,CLWSBPSW+4           SET ENTRY ADDRESS
         L     R1,LCBLC                AMOUNT OF CORE USED
         LA    R1,@R1+X'FFF'           ROUND UP TO PAGES
         N     R1,=X'7FFFF000'
         L     R15,LCBCLEN             ORIGINAL ALLOTMENT
         ST    R1,LCBCLEN
         IF    ^CLWPFSHR,BEGIN
         IF    ('SR  R15,R1',Z),EXIT   NOTHING TO FREE
         AL    R1,LCBCORE              FIRST ADDRESS TO FREE
         VSET  15,(1),(15)             FREE UNUSED CORE
         END   ,
*
         IF    LNKPFPRT,BEGIN          PROTECTED?
         VSET  19,L:LCBCORE,L:LCBLC    PROTECT THE PAGES
         END   ,
         IF    LNKPFM31,BEGIN
         OI    CLWSBPSW+4,X'80'        Set to 31 bit mode
         SET   CLWFM31                 Indicate in work area
         END   ,
         ELSE  'CLEAR CLWFM31'
         EJECT
* IF SHAREABLE PROGRAM JUST ENTERED, PERFORM SPB UPDATE.
         IF    CLWPFSHR,BEGIN         SHARED PROGRAM LOADED?
         L     SR,CLWSPB               SPB POINTER
         WITH  (SPB,SR)
         LCALL AMODE31
         L     R1,LCBCLEN              LENGTH OF PROGRAM
*        ST    R1,SPBSIZE               TO SPB
         SRL   R1,12                   TO PAGES
         STH   R1,SPBRESRV             RESERVE REQUIREMENT FOR SPB
         IF    LNKPFM31,'SET SPBFM31'  Make sure it is set in SPB
         IF    SPBFM31,BEGIN
         OI    CLWSBPSW+4,X'80'        Set to 31 bit mode
         SET   CLWFM31                 Indicate in work area
         END   ,
         ELSE  'CLEAR CLWFM31'
         MVC   SPBEP,CLWSBPSW+4        ENTRY POINT
         LCALL AMODE24
         CLPSERV ADJSPB                FIX UP THE SPB
         FSCALL DEQ                    RELEASE ENQUEUE
         CLEAR LNKFSPNQ                RESET ENQUEUE MARKER
         END   ,
         CLEAR CLWPFPL                 CLEAR LOADING FLAG
         SET   CLWPFPIC                PROGRAM EXECUTING
         L     R15,LCBMAP              POINT TO MAP START
         A     R15,LCBMPLEN            END OF MAP
         L     R1,LCBCSDLC             END OF USED MAP
         LA    R1,@R1+X'FFF'           ROUND UP
         N     R1,=X'7FFFF000'          TO A PAGE
         SR    R15,R1                  GET LENGTH TO FREE
         IF    POS,BEGIN              SKIP FREE IF NOTHING
         LR    R0,R1                   COMPUTE NEW
         S     R0,LCBMAP               MAP AREA LENGTH
         ST    R0,LCBMPLEN             FOR LATER
         FREECLW (1),(15)              FREE UNNEEDED AREA
         END   ,
         EJECT ,
* COMMON PROCESSING FOR ENTERING SHARED,NONSHARED PROGRAMS
ENTSHRD  LABEL ,                       ENTER SHARED PROGRAM
*
* FIGURE OUT WHERE THE WORK AREA BEGINS
*
         IF    CLWPFSHR,BEGIN          SHARED PROGRAM
         L     R1,CLWUPST              USER PROGRAM LOC IS
         ST    R1,CLWUWST               START OF THE WORK AREA
         END   ELSE,BEGIN              NON-SHARED PROGRAM
         L     R1,LCBCLEN              GET CORE LENGTH USED
         AL    R1,LCBCORE              ADD TO THE START OF IT
         ST    R1,CLWUWST              SAVE THE STARTING LOCATION
         END   ,
*
* UPDATE THE SCP CORE ALLOCATION CONTROL WORDS
*
         L     R15,CLWSCP
         WITH  (SCP,R15),BEGIN
         MVC   CLWUPRSV(4),SCPRESRV    SAVE RESERVE/UNRESERVE COUNTS
         MVC   SCPRRSEG,CLWUWST        NEW ALLOCATION AREA
         CLEAR SCPRESRV                OUR RESERVED COUNT NOW ZERO
*         L     R1,CLWUPST
*         A     R1,CLWUPML              END OF ADDRESS SPACE
*         S     R1,CLWUWST              NUMBER OF BYTES
*         SRL   R1,12                   NUMBER OF PAGES
*         STMIN R1,SCPUNRSV             ADJUST NUMBER OF PAGES
         END   ,
         LCALL PARMFIX                 GO GET ENTER COMMAND PARM
         SENSE 25                      GET A BIT MORE
         ST    R14,CLWPELT             SAVE ELAPSED TIME
         ST    R15,CLWPCVM              AND VM CHARGES
         ST    R0,CLWPIOS              I/O COUNTS
         ST    R1,CLWPCUSE             SAVE CPU TIME
         MVC   LNKCLCMD+2(L'WACMD),WACMD  PUT COMMAND WHERE SENSE
         LH    R0,WACMDL               CAN GET IT
         LH    R1,LNKCLPRM             PARM
         IF    ^CLWFTYPD,BEGIN        IT WAS NOT TYPED
         LCR   R0,R0
         LCR   R1,R1
         END   ,
         STH   R0,LNKCLCMD             CALL COMMAND
         STH   R1,LNKCLPRM
         LA    R0,LNKCLCMD
         L     R15,CLWSCP
         WITH  (SCP,R15),BEGIN
         ST    R0,SCPCMDP              STORE POINTER
         LA    R1,LNKCLPRM             PARM ADDR
         ST    R1,SCPPARMP
         MVC   CLWPROGN,GPWLMN         SET PROGRAM NAME
         LD    0,=D'0'                 CLEAR FPRS
         LDR   2,0
         LDR   4,0
         LDR   6,0
         CLEAR (CLWSBGPR,64)           CLEAR GPRS
         OI    CLWSBPSW+3,X'F0'        DEFAULT MASK
         END   ,
         CLI   CLWPROGN,0
         IF    E,'MVC  CLWPROGN,=C"HOMEBREW"'
         VSET  24,CLWPROGN,8           SET PROGRAM NAME
         IF    ^LCBXFOSN,ENTSHROK       OS TYPE ENTRY?
         SENSE 2                       SENSE ADDRESS SPACE LIMITS
         LA    R1,@R1(15)              END ADDRESS
         LH    R15,=Y(4096)            REQUEST A PAGE
         SR    R1,R15                  MAKE IT THE LAST
         VSET  16,(1),(15)
         BNZ   NOCORE                  INSUFFICIENT MEMORY
         ST    R1,CLWSBGPR+R14*4       RETURN ADDRESS
         MVC   @R1(4),EXITSVC
         LA    R1,@R1+2                PARM ADDRESS
         LH    SR,LNKCLPRM             ANY PARM?
         LPR   SR,SR
         IF    NZER,BEGIN
         STH   SR,@R1                PARM LENGTH
         LR    R14,SR
         DEX   R14,'MVC  @R1+2(*-*),LNKCLPRM+2'
         END   ,
         LA    SR,@SR+5(R1)            BUMP 2 PLUS 3 FOR ROUNDING TO
         N     SR,=X'00FFFFFC'         FULL WORD BOUNDARY
         ST    R1,@SR                  PARM ADDRESS LIST
         MVI   @SR,X'80'               END OF PARM LIST BIT
         ST    SR,CLWSBGPR+R1*4        PARM POINTER
         LA    R1,@SR+4                SAVE AREA
         ST    R1,CLWSBGPR+R13*4
         CLEAR (@R1,72)
         MVC   CLWSBGPR+R15*4+1(3),CLWSBPSW+5 START ADDRESS
ENTSHROK LABEL ,
         CLEAR LNKFFREE                PROGRAM ENTERED OK.
         SET   CLWPFRUN                SET TO CONTINUE PROGRAM
         IF    ^WAFLGPAU,FILEXIT       PAUSE AFTER RELOCATION?
         SET   CLWPFPAU                PAUSE
         B     FILEXIT                 RETURN TO ENTER PROGRAM
         SPACE ,
EXITSVC  XIT   ,                       RETURN FOR OS LINKAGE
         DC    H'0'                    DEFUALT 'PARM'
         SPACE ,
UNDEFENT SEG   LNKEP,8
         SEG   ': Entry undefined'
         B     ERROR
         TITLE 'ORVYL''S PROGRAM MANAGER - GO && ATTN'
*
*
*  ATTN : ENTER MASTER TERMINAL ATTENTION ROUTINE
*
ATTN     LABEL ,
         LCALL EXECQ
         L     R1,CLWSCP
         WITH  (SCP,R1),BEGIN
         SET   SCBCFAX                 ATTENTION AT SBRET
         END   ,
         B     GOSCAN
*
*  GO COMMAND
*
GO       LABEL ,
         LCALL EXECQ
GOSCAN   LSCAN KWGO,CLWKWCB            SCAN EVENTS, ETC.
         BNZ   ILLSTR
         IF    WAGOTR,BEGIN           IF TRAP WAS GIVEN,
         MVC   CLWTTRAP(3),WAGOTRAP+1  SAVE ADDRESS
         L     R1,WAGOTRAP             LOC. TO READ
         LA    R0,CLWTTRAP+3           PLACE TO PUT IT
         LA    R15,2                   GET TWO BYTES
         VCALL READCORE                WHAT WILL IT BE?
*
         B     *+4(R15)
         B     GTILL
         B     GTOK
         B     GTNONE
         B     GTILL
*
GTOK     LABEL ,
         CLI   CLWTTRAP+3,X'0A'        CAN'T TRAP AN SVC
         BE    GTSVC
         LA    R0,CLWPSVC              GET TRAP SVC NUMBER
         L     R1,WAGOTRAP             GET ADDRESS BACK
         LA    R15,2                   TWO BYTES
         VCALL RITECORE                STICK IT IN
         END   ,
         MVC   CLWEVCNT,WAGOEVCT       SET EVENT COUNT
         IF    WAGONOL,'SET CLWMNOL'    SET NOLIST, IF SPECIFIED
         IF    WAGOTO,BEGIN           IF 'TO' SPECIFIED,
         L     R0,WAGOTOAD             SET ADDRESS
         ST    R0,CLWSBPSW+4            IN RETURN PSW
         END   ,
         SET   CLWPFRUN                SET TO CONTINUE PROGRAM
         B     FILEXIT                 RETURN TO ENTER PROGRAM
*
GOEVENT  L     R1,CLWKWVAL
         DECR  R1
         ST    R1,WAGOEVCT             SAVE EVENT COUNT
         SCRTN (15)
*
GOCON    MVC   WAGOEVCT,=X'7FFFFFFF'   NOT QUITE INFINITY
         SCRTN (15)                    BUT CLOSE ENOUGH
*
GONOL    SET   WAGONOL                 SET NOLIST FLAG
         SCRTN (15)                    ALL DONE WITH THAT ONE!!
*
GOTO     LABEL ,
         IF    CLWPFPRV,GOPRIV         CAN'T TELL PRIV WHERE TO GO
         VCALL EVAL                    GET LOCATION TO GO TO
         BM    ERROR                   NG
         BZ    MISSING                 GOT TO GO SOMEPLACE
         ST    R0,WAGOTOAD             SAVE GO TO ADDRESS
         SET   WAGOTO                  SET 'TO' FOUND
         B     GOSCAN                  TRY AGAIN
*
GOTRAP   LABEL ,
         IF    CLWPFPRV,GOPRIV         CAN'T TRAP PRIV PROG
         VCALL EVAL                    GET LOC. FOR TRAP
         BM    ERROR                   SCREWY EXPRESSION
         BZ    MISSING
         N     R0,=X'0FFFFFFF'
         IF    ^CLWSSP,'N  R0,=X"00FFFFFF"'
         LTR   R0,R0                   CAN'T TRAP THERE
         BZ    GTILL
         ST    R0,WAGOTRAP             SAVE TRAP ADDRESS
*         CLI   WAGOTRAP,0              TOO BIG?
*         BNE   GTILL                   YEP
         TM    WAGOTRAP,X'F0'          TOO BIG?
         BNZ   GTILL                   YEP
         TM    WAGOTRAP+3,1            HAS TO BE EVEN
         BO    GTODD
         SET   WAGOTR                  INDICATE TRAP SPECIFIED
         B     GOSCAN                  CONTINUE SCANNING
*
GTILL    SEG   'Invalid address'
         B     GTERROR
GTODD    SEG   'Odd address'
         B     GTERROR
GTNONE   SEG   'Memory not defined'
         B     GTERROR
GTSVC    SEG   'SVC may not be trapped'
         B     GTERROR
GTERROR  CLEAR CLWTTRAP                CLEAR TEMP. TRAP SLOT
         CLEAR CLWEVCNT
         B     ERROR
GOPRIV   LABEL ,
         SEG   'Private program loaded, GO option invalid'
         B     ERROR
         TITLE 'ORVYL''S PROGRAM MANAGER - EXIT'
*  CLEAN UP USER CORE
*              -CALLED FOR LOGON, LOGOFF, CLEAR CORE, AND THE
*               EXIT SVC
*
*              - HALTS ANY OUTSTANDING I/O AND DETACHES FILES
*              - DISCARDS ALL USER CORE
*              - RESETS ALL FLAGS, PSWS, REGISTERS, FPRS
EXIT     LABEL ,
         CLEAR CLWFM31                 CLEAR MODE 31
         SET   LNKFFREE                FREE CORE
         B     FILEXIT
         EJECT ,
         DROP  FSUBR                   ##
* CLEAR LINK STACK AND DETACH LINK FILES
*
CLRSTACK VSAVE SR,RAR,*
CLRSTK1  IF    LNKSFTER,CLRSTK5        STACK BOTTOM?
         CLI   LNKFID,1                ANY FILE TO DETACH?
         BNH   CLRSTK3
         DETACH IC:LNKFID
         WAIT  (0)
CLRSTK3  MVI   LNKFID,0
         L     TR,LNKSTKP
         S     TR,=A(L'LSE)
         MVC   LSE,@TR
         ST    TR,LNKSTKP
         B     CLRSTK1
*
CLRSTK5  VEXIT SR,RAR
         TITLE 'ORVYL''S PROGRAM MANAGER - PAUSE'
*    PAUSE: SIMULATE PAUSE SVC FROM COMMAND
*
PAUSE    LABEL ,
         LCALL EXECQ                   MUST HAVE PROGRAM
         SET   CLWPFPAU                SET PAUSE BIT
         NI    CLWSBPSW+2,X'3F'        SET ILC TO 0
         B     FILEXIT                 ALL DONE
         TITLE 'ORVYL''S PROGRAM MANAGER - SCAN AND MSG ROUTINES'
         EJECT ,
* SCAN FOR VALID EXTERNAL SYMBOL
*        - ERROR IF TOO LONG OR INVALID CHARS FOUND
*        - RETURN CODE INDICATES LENGTH
*
GETSYMB  VPUSH SR,RAR,*
         SCAN  0,CLWKWCB               GET NEXT TOKEN
         BZ    SYMEXIT
         BM    ILLSYMB
         CH    R0,=Y(8)
         BH    ILLSYMB
         B     CHKSYMB
         SPACE 2
* SCAN FOR PARENTHESIZED EXTERNAL SYMBOL
*        - RESET SCAN IF XEXT TOKEN NOT IN PARENS
*        - RETURN SYMBOL OR END OF SCAN INDICATION
*
GETPSYM  VPUSH SR,RAR,*
         SCTELL CLWKWCB                GET CURRENT POINTERS
         LR    SR,R0                   SAVE LEN
         LR    TR,R1                   AND LOC
         SCAN  0,CLWKWCB               GET TOKEN
         BM    ILLSYMB
         BZ    SYMEXIT                 NOT THERE
         CLI   @R1,C'('                LEFT PAREN?
         BNE   NOPAREN
         LA    R1,@R1+1
         DECR  R0
         DECR  R0                      DELETE PAREN LENGTH
         CH    R0,=Y(8)
         BH    ILLSYMB
         EJECT ,
CHKSYMB  LR    SR,R1
         LR    TR,R0
CHKS1    CLI   @SR,C'A'
         BNL   CHKSOK
         CLI   @SR,C'@'                AT SIGN
         BE    CHKSOK
         CLI   @SR,C'#'
         BE    CHKSOK
         CLI   @SR,C'$'
         BNE   ILLSYMB
CHKSOK   LA    SR,@SR+1
         BCT   TR,CHKS1
         MVC   CLWTEMP(8),@R1          PASS NACK SYM IN TEMP
         LA    R1,CLWTEMP
         LR    SR,R1
         AR    SR,0                    END OF SYM
         MVC   @SR(8),=CL8' '          PUT BLANKS AT END
SYMEXIT  VPOP  SR,RAR,*
         LTR   R0,R0
         BR    RAR
*
ILLSYMB  SEG   (1),(0)
         SEG   ': Invalid symbol'
         B     ERROR
*
NOPAREN  SCINIT (TR),(SR),CLWKWCB
         CLEAR R0
         B     SYMEXIT
         EJECT ,
* SCAN FOR PARENTHESIZED INTEGER VALUE (EXPAND STATEMENTS)
*        - ERROR UNLESS FOUND
*        - ERROR IF ANYTHING FOLLOWS
*
GETPVAL  VPUSH SR,RAR,*
         SCAN  0,CLWKWCB               GET NEXT TOKEN
         BZ    BADPV                   MISSING OPERAND
         CLI   @R1,C'('                MUST BE PAREN STRING
         BNE   BADPV                   MISSING
         LA    SR,@R1+1                POINTER TO NUMBER
         LR    TR,R0
         DECR  TR
         DECR  TR                      STRIP OFF PAREN COUNT
         SCAN  0,CLWKWCB               ANYTHING LEFT IN COMMAND?
         BNZ   BADPV
         SCINIT (SR),(TR),CLWKWCB       RESET TO SCAN BETWEEN PARENS
         LSCAN PVTBL,CLWKWCB           SCAN POS INTEGER
BADPV    SEG   'Missing or invalid parenthesized value'
         B     ERROR
*
GOTPV    L     R15,CLWKWVAL            GET VALUE
         VPOP  SR,RAR,*                 RETURN VAL IN 15
         BR    RAR
         EJECT ,
* REQUIRE CLEARED CORE FOR NEXT OPERATION
*
CLRLINK  IF    CLWPFPIC,CLRCALL1       PROGRAM ENTERED
         IF    ^WAFLEXIT,RAR           OPTIONAL EXIT REQUESTED?
         B     CLRCORE
*
CLRCALL  IF    (CLWPFPL+CLWPFPIC,Z),RAR      FULL CLEAR REQUIRED
CLRCALL1 LABEL ,
         IF    WAFLEXIT,CLRCORE        EXIT REQUESTED
         VPUSH RAR,,*                  SAVE RETURN
         SEG   'OK to clear program'      ASK FIRST
         VREAD ,                       GET THE ANSWER
         BNZ   REQABORT                HIT ATTN
         SCINIT (1),(0),CLWKWCB        SET UP TO SCAN RESPONSE
         LSCAN YESOKTBL,CLWKWCB        CHECK IT OUT
         B     REQABORT                INVALID REPLY
*
CLRCORE  VPUSH RAR,,*
CLRCOR1  VCALL CLEANUP                 TIDY THINGS UP
         VPOP  RAR,,*                  RESTORE RETURN
         L     R15,=V(CLRLP)
         BR    R15                     REINITIALIZE LINK PAGE
*                                      WILL RETURN TO CALLER
         EJECT ,
* INITIALIZE LOADER IF NOT ALREADY AND MARK LOADING FLAG
*
LOADING  LABEL ,
         IF    LNKFERR,LDBLOCK         BLOCKED?
         IF    CLWPFPL,PARMFIX         LOADING?
         IF    CLWPFPIC,RUNNING        EXECUTING?
         SET   CLWPFPL                 SET PROGRAM LOADING.
         VPUSH RAR,,*
         GETCLW L:LCBMPLEN,L:LCBMPLEN  REQUEST MAP CORE
         BNZ   NOCORE                  SORRY
         ST    R1,LCBMAP               STARTING ADDRESS
         VCALL LDINIT
         BNZ   ERROR                   ERROR
         VPOP  RAR,,*
         IF    ^CLWPFSHR,BEGIN         NOT A SHARED PROGRAM
         L     R1,=A(8192+4096)        GET AT LEAST THREE PAGES
         VSET  14,(1),0                GET ALL CORE FOR LOAD
         BNZ   NOCORE                  NO PROGRAM CORE
         ST    R1,LCBCORE
         S     R0,=A(8192)             GIVE BACK 8K
         ST    R0,LCBCLEN
         AR    R1,0                    END OF CORE TO KEEP
         L     R15,=A(8192)
         VSET  15,(1),(15)
         END   ELSE,BEGIN
         VPUSH RAR,,*
         LCALL AMODE31
         L     R1,CLWSPB               SPB POINTER
         WITH  (SPB,R1)
         L     R15,SPBORGIN            LOADING POINT
         ST    R15,LCBCORE             FOR LOADER
         L     R15,SPBSIZE             LENGTH OF AREA
         ST    R15,LCBCLEN              ALSO FOR LOADER
         LCALL AMODE24
         VPOP  RAR,,*
         END   ,
         B     PARMFIX
         SPACE ,
* SPECIAL CALL TO PREPARE DUMMY MAP FOR SHARED PROGRAM
*
LOADSHRD VPUSH RAR,,*
         GETCLW L:LCBMPLEN,L:LCBMPLEN  REQUEST MAP CORE
         BNZ   NOCORE                  SORRY
         ST    R1,LCBMAP               STARTING ADDRESS
         VCALL LDINIT
         BNZ   ERROR                   ERROR
         VPOP  RAR,,*
         B     PARMFIX
         SPACE 3
* TEST FOR PROGRAM LOADED
*
LOADINGQ IF    LNKFERR,LDBLOCK         BLOCKED?
         IF    CLWPFPL,BEGIN          LOADING?
           OC  LCBLC,LCBLC           ANY TEXT LOADED?
           BNZ PARMFIX               YES
         END   ,
         IF    CLWPFPIC,RUNNING
NOPROG   SEG   'No program loaded'
         B     ERROR
*
LDBLOCK  SEG   'Loader blocked by errors'
         B     ERROR
*
RUNNING  SEG   'Program in execution'
         B     ERROR
* IS PROGRAM EXECUTING?
*
EXECQ    IF    CLWPFPIC,RAR
         IF    ^CLWPFPL,NOPROG         HOW ABOUT LOADED?
         SEG   'Program not entered'
         B     ERROR
         EJECT ,
* PROGRAM ENTRY COMMAND RECEIVED. IS THERE A PARM?
*
PARMFIX  LABEL ,
         LM    R0,R1,WAPARMP           GET PARM POINTERS
         LTR   R0,R0                   ANY?
         BZR   RAR                     NONE
         CLI   @R1,C''''               QUOTED STRING?
         BE    QUOTPARM                YES
         CLI   @R1,C'"'
         BE    QUOTPARM                YES
         CLI   @R1,C'('                PAREN STRING?
         BNE   PARMOV                  SIMPLE PARM
         LA    R1,@R1+1                PARENED PARM
         DECR  R0
         DECR  R0                      REMOVE PARENS
         B     PARMOV                  PUT IT AWAY
*
QUOTPARM LABEL ,
         MVC   LNKCLCMD(133),@R1       MOVE TO TEMP
         LA    R1,LNKCLCMD
         XCALL DQSCAN                  REMOVE QUOTES
PARMOV   MVC   LNKCLPRM+2(133),@R1
         STH   R0,LNKCLPRM             LENGTH
         CLEAR WAPARMP                 RESET PARM POINTER
         BR    RAR
         EJECT ,
NOTYET   SEG   (1),(0)                 PRINT KEYWORD
         SEG   ': Function not available'
         B     ERROR                   RETURN
         EJECT ,
* FATAL ERROR MESSAGES
*
LSTKOFLO SEG   'Include stack overflow'
         B     ERROR
*
BADLDF   FSCALL SEGNAME
         SEG   'has been damaged'
         B     ERROR
*
NOTLDF   FSCALL SEGNAME
         SEG   'is not a loadfile'
         B     ERROR
*
NOTIXR   FSCALL SEGNAME
         SEG   'is a non-ixr file'
         B     ERROR
*
PROGNF   SEG   'Program not found'
         B     ERROR
         SPACE 2
*
EMPTY    FSCALL SEGNAME
         SEG   'has no contents'
         B     ERROR
*
CHEAP    SEG   'Program usage restricted to '
         SEG   CLWKPROG,8
         B     ERROR
         EJECT ,
         DROP  BR,BRR,FSUBR,WAR        ##
         EJECT ,
         SPACE 3
         EJECT ,
         USING BASE,BR,BRR             ##
SCRET    LPR   0,0
         BZ    MISSING
*
ILLSTR   SEG   (1),(0)
         SEG   ': Invalid string'
         B     4(,BR)                  ERROR RETURN
*
MISSING  SEG   'Operand missing'
         B     4(,BR)                  ERROR RETURN
*
UNREC    SEG   (1),(0)
         SEG   ': Invalid'
         B     4(,BR)                  ERROR RETURN
FILEXIT  LABEL ,
         FSCALL FILEXIT                DOES NOT RETURN HERE
*  SET MESSAGE, CLEAN UP AND LEAVE
*
MSGEXIT  LABEL ,
         SEG   (1),(0)
WRITEXIT LABEL ,                       :::
         VWRITE ,                      SEND MESSAGE
         B     FILEXIT                 RETURN
QIETEXIT LABEL ,                       :::
         IF    ^GPWFQIET,WRITEXIT
         CLEAR (CLWOBUF,4)             QUIET!!
         B     FILEXIT
*
REQABORT SEG   'Request aborted'
         B     4(,BR)
VFMSG    SEG   'in ORVYL File System'
         B     QIETEXIT
         SPACE ,
ERROR    LABEL ,
         B     4(,BR)
         SPACE ,
VOID     LABEL ,
         SEG   'Void range'
         B     4(,BR)
NOCORE   SEG   'Insufficient user memory to process command'
         B     4(,BR)
         SPACE ,
PCATERR  LABEL ,
         SEG   'Program catalog error'
         B     4(,BR)
         SPACE ,
MEMNTSPC LABEL ,
         SEG   'Member not specified'
         B     4(,BR)
         SPACE ,
MEMNFND  FSCALL SEGMEMB                MEMBER NAME
         SEG   'not in '
         FSCALL SEGNAME
         B     4(,BR)
INVALMEM SEG   'Invalid member name specified'
         B     4(,BR)
NOTLIB   LABEL ,
         FSCALL SEGNAME
         SEG   'is not a library'
         B     4(,BR)
         SPACE ,
*
BADFORM  SEG   'File not '
         IF    ^GPWGPFV,BADEDIT        FILE VARIABLE FORMAT?
         SEG   'variable'
         B     BADFCOM
BADEDIT  SEG   'edit'
         SET   GPWGPFLR                EDIT OR CARD?
         BZ    BADFCOM
         SEG   ' or card'
BADFCOM  LABEL ,
         SEG   ' format'
         B     4(,BR)
         EJECT
*box
*
*  AMODE31 -- Routine to switch to 31-bit addressing mode.
*
AMODE31  LABEL ,
         LA    R15,A31GO
         O     R15,=A(X'80000000')  31 bit mode wanted
         BSM   0,R15
A31GO    LABEL ,
         BR    RAR
*box
*
*  AMODE24 -- Routine to switch back to 24-bit addressing mode.
*
AMODE24  LABEL ,
         LA    R15,A24GO
         BSM   0,R15                Return to 24 bit mode
A24GO    LABEL ,
         BR    RAR
*
*  SPACE-SAVING SEG  ROUTINE
*
*
SEG      VPUSH RAR,,*
         VSEG  (1),(0)
         VPOP  RAR,,*
         BR    RAR
         FSCALL GOSUB
         GENMSGS ,
         EJECT ,
*  SCAN TABLES
*
* LINK COMMAND KEYWORD TABLE AND KEYWORD ROUTINES
*
         SPACE ,
         EXTRN KWFNOPT
         EXTRN QUIET
         EXTRN GOTNKWR
         EXTRN OSOPTS                  OS/FILE KEYWORD OPTIONS
         SPACE ,
KWLINK   SCKW  ACTIVE,SETACT,A
         SCKW  FILE,SETFIL,A
         SCKW  FROM,SETFIL,A          USE FILE
         SCKW  LIST,SETLIST,A
         SCKW  QUIET,QUIET,A
         SCKW  ENTER,SETENTER,A
         SCKW  CLR,SETEXIT
         SCKW  CLEAR,SETEXIT,A
         SCKW  EXIT,SETEXIT,A
         SCKW  ,PARMKW,PUSH
         SCKW  ,OSOPTS,PUSH
         SCKW  ,KWFNOPT,PUSH
*
* KEYWORD OPTIONS FOR ENTRY ON LINK, CALL, ENTER
*
ENTRYOPT SCKW  PAUSE,SETPAU,A
         SCKW  PARM,CALLPARM,(A,P)
         SCKW  ,CALLPAR1               PAREN OR QUOTED PARM?
*
PARMCHK  SCKW  PARM,PARM
         SCKW  ,                       ANYTHING ELSE RETURNS
*
COMMTBL  SCKW  ALIAS,ALIAS
         SCKW  CHANGE,CHANGE
         SCKW  COMMENT,COMMENT
         SCKW  ENTRY,ENTRY
         SCKW  EXPAND,EXPAND
         SCKW  HIARCHY,IGNORE
         SCKW  IDENTIFY,IGNORE
         SCKW  INCLUDE,INCLUDE
         SCKW  INSERT,IGNORE
         SCKW  LIBRARY,LIBRARY
         SCKW  LOADFILE,LOADFILE
         SCKW  NAME,NAME
         SCKW  ORDER,IGNORE
         SCKW  OVERLAY,IGNORE
         SCKW  PAGE,PAGE
         SCKW  PARM,PARMERR
         SCKW  REPLACE,REPLACE
         SCKW  SETSSI,IGNORE
         SCKW  SYSLIB,SYSLIB
         SCKW  SYSLMOD,LOADFILE
         SCKW  ZAPNAME,ZAPNAME
         SCKW  ZAPVER,ZAPVER
         SCKW  ZAPREP,ZAPREP
         SCKW  ZAPBASE,ZAPBASE
         SCKW  ,UNREC
*
* INCLUDE / LOADFILE  SCAN TABLE
*
KWINCLUD SCKW  ALL,INCLPDS
         SCKW  LIBRARY,INCLPDS,A
         SCKW  PDS,INCLPDS
         SCKW  ,OSOPTS,PUSH
LDFTBL   SCKW  ,KWFNOPT,PUSH
         SCKW  ,UNREC
*
*  PARM SCAN TABLE
*
PARMKW   SCKW  LET,PARMLET
         SCKW  NCALL,PARMNCAL,A
         SCKW  NOCALL,PARMNCAL,A
         SCKW  CALL,PARMCALL
         SCKW  AUTOCALL,PARMCALL,A
         SCKW  NOAUTOCA,PARMNCAL,A
         SCKW  SIZE,PARMSIZE,P
         SCKW  LIST,PARMLIST
         SCKW  MAP,PARMMAP
         SCKW  OSNT,PARMOSNT
         SCKW  OSENTRY,PARMOSNT,A
         SCKW  NOOSNT,PARMNOSN,A
         SCKW  NOOSENTR,PARMNOSN,A
         SCKW  REFR,PARMREFR
         SCKW  FORTRAN,PARMFORT,A
         SCKW  URAM,PARMURAM
         SCKW  RENT,PARMRENT
         SCKW  SHRD,PARMRENT
         SCKW  PROT,PARMREFR
         SCKW  PRIV,PARMPRIV
         SCKW  WARN,PARMWARN
         SCKW  NOWARN,PARMNOWN
         SCKW  MODE31,PARMM31
         SCKW  ,,POP
*
PRMCRDKW SCKW  ,PARMKW,PUSH
         SCKW  ,UNREC
*
CATSCKWS SCKW  NAME,CATNAME,(A,P)
         SCKW  COMMENT,CATCOMM,(A,P)
         SCKW  NOPRINT,CATNOPRT,A
         SCKW  SPIRES,CATSPIRE,A
         SCKW  SPL,CATSPL
         SCKW  ,KWFNOPT,PUSH
         SCKW  ,PCATERR
*
* CALL KEYWORD TABLE
*
KWCALL   SCKW  PUBLIC,CALLPUB,A
         SCKW  ,KWFNOPT,PUSH FILE NAME OPTIONS
         SCKW  CLEAR,SETEXIT,A
         SCKW  CLR,SETEXIT
         SCKW  EXIT,SETEXIT
         SCKW  NOSHARE,SETNOSHA,A
         SCKW  LIBRARY,GOTNKWR,(P,A)
         SCKW  ,ENTRYOPT,PUSH          ENTRY OPTIONS
*
KWENTER  SCKW  ,GOOPTS,PUSH
         SCKW  ,ENTRYOPT,PUSH
*
GOOPTS   SCKW  EVENTS,GOEVENT,(P,PI,A),X'FFFFFF'
         SCKW  TO,GOTO
         SCKW  TRAP,GOTRAP,A
         SCKW  NOLIST,GONOL,A
         SCKW  CONTINUE,GOCON,A
         SCKW  ,,POP
*
KWGO     SCKW  ,GOOPTS,PUSH
         SCKW  ,UNREC
*
PVTBL    SCKW  ,GOTPV,PI
         SCKW  ,BADPV
*
YESOKTBL SCKW  YES,CLRCOR1
         SCKW  OK,CLRCOR1
         SCKW  CLEAR,CLRCOR1,A
         SCKW  CLR,CLRCOR1
         SCKW  Y,CLRCOR1
         SCKW  ,REQABORT
         LTORG ,                   ##
         EJECT ,
* LOADERS ERROR MESSAGE ROUTINE
*
LDMSG    VENTER SR,R14,*
         L     BRR,=A(BASE+4096)
         USING BASE+4096,BRR          ##
         VPUSH RAR,,*                 Save caller addressing mode
         LCALL AMODE24                Set to 24 bit mode
         L     R10,LNKCLW
         USING CLW,CLWR                ##
         IF    (^LNKPFLET,OR,(R15,GT,4)),BEGIN
         SET   LNKFERR                 BLOCK FURTHER PROCESSING
         IF    (R15,GT,LCBMXC),' ST R15,LCBMXC '
         VSEG  (1),(0)
         SR    R0,R0                   DON'T PRINT AGAIN
         END   ,
         ELSE  ' SR R15,R15 '          CLEAR RETURN CODE
         IF    (^LNKPFLET,OR,LNKPFLWN),BEGIN  CHANGE FOR
         VSEG  (1),(0)                 NOLET, NOWARN
         IF    (R15,ZERO),BEGIN        FORCE OUT MSG NOW
         VCALL PLCOFERR      IDENTIFY CARD CAUSING ERROR
         VCALL TYPEIT                  SO TYPE THE ERROR
         END ,
         END   ,
         LR    SR,R15                  Save return code
         VPOP  RAR,,*                  Get caller addressing mode
         IF    (RAR,M),'LCALL AMODE31'
         LR    R15,SR                  Restore return code
         VEXIT SR,R14,*                RETURN CODE IN 15
         EJECT ,
*  FORMAT AN IDENTIFICATION OF THE CARD THAT CAUSED THE LOADER
*    ERROR INTO LNKCOMAR.
*
PLCOFERR VENTER R0,R10,WAPLCSZ
         USING WAPLC,WAR
         USING CLW,CLWR                ##
         MVC   LNKCOMAR(3),=C'-> '     PRINT ARROW BEFORE COMMAND
         LH    TR,LNKCOML              LINK COMMAND LENGTH
         CLI   LNKCOM,X'02'            OBJECT CARD?
         BNE   TYP0
         MVC   LNKCOM(3),LNKCOM+1      MOVE ESD,TXT...
         MVC   LNKCOM+3(3),=C'...'     SEPARATOR
         MVC   LNKCOM+6(8),LNKCOM+72   SEQUENCE FIELD
         LA    TR,3+3+8
TYP0     IF    (TR,GT,67),'LA TR,67'   LEAVE ENOUGH ROOM FOR MESSAGE
         LA    SR,LNKCOM(TR)
         MVC   @SR(L'LINMSG),LINMSG
         L     R15,LNKLN               LINE NUMBER
         LA    R0,3                    MASK
         LA    R1,@SR+L'LINMSG         TARGET
         XCALL BTR                     CONVERT
         AR    R1,R0                   LAST POSITION
TYPLOOP  DECR  R1                      LAST POSTION
         CLI   0(R1),C'0'              ZERO?
         BNE   TYPNUM                  OK TO SEND IF NOT
         DECR  R0                      MINUS ONE
         B     TYPLOOP                 KEEP GOING
TYPNUM   AR    SR,R0                   LENGTH DESIRED
         AR    TR,R0
         MVC   @SR+L'LINMSG(L'LINMSGI),LINMSGI
         CLI   LNKFID,1                ACTIVE FILE?
         BNE   TYPFILE                 NO ITS A FILE
         MVC   @SR+L'LINMSG+L'LINMSGI(11),=C'Active file'
         LA    TR,11+@TR
         B     PLCEXIT
TYPFILE  CLPSERV DEVINFO,WADEVINF,L'WADEVINF,LC:LNKFID
         LA    SR,@SR+L'LINMSG+L'LINMSGI
         MVC   @SR(44),WADEVNM         MOVE IN NAME
         LA    R0,44                   TOTAL SIZE
         LA    R1,@SR+44               LAST POSITION
TYPFLOOP CLI   @R1,C' '                BLANK?
         BNE   TYPFLEN                 DONE IF NOT
         DECR  R1                      DECREMENT POSTION
         BCT   R0,TYPFLOOP              AND LENGTH
TYPFLEN  AR    TR,R0                   TOTAL LENGTH (SORT OF)
PLCEXIT  LABEL ,
         WRITE LA:1,LNKCOMAR,L'LINMSG+L'LINMSGI+3(TR)
         WAIT  (0)
         VEXIT R0,R10                  ##
*
LINMSG   DC    C' - line '
LINMSGI  DC    C' in '
         SPACE 5
         DROP  BR                      ##
         DROP  LCBR                    ##
         TITLE 'ORVYL''S PROGRAM CLEANUP ROUTINE'
         USING BASE+4096,R6        ##  ##
         USING WAPM,R8             ##  ##
         USING CLW,CLWR                ##
         USING LNKPAGE,R11         ##  ##
         USING GPW,R12             ##  ##
*
* CLEAN UP LINK PROCESS AND USER CORE
*
CLEANUP  VENTER SR,RAR,*
*  IF PROGRAM WAS LOADED, CHECK FOR POSSIBLE PROGLOOKING
         IF    CLWPFPL+CLWPFPIC,'VCALL STOPMON'
*
* IF PROGRAM HAS BEEN ENTERED DETACH ALL FILES AND RESET ALL
* PROGRAM CONTROLLABLE FUNCTIONS.
*
         LA    R1,4                    Do only if user attached
         VCALL CLRIDTS
*
*  PROGRAM HAS BEEN ENTERED
*
         IF    ^CLWPFPIC,CLRPCORE      PROGRAM ENTERED?
*
*  CLEAR ENQUEUE
*
         VCALL CLRENQS
*
*  RESET ALL PROGRAM CONTROLLABLE FUNCTIONS.
*
         VSET  3                       CLEAR TIMER
         VSET  5
         VSET  6                       CLEAR SVC
         VSET  7                       CLEAR PANIC
         VSET  150                     CLEAR PSUEDO USER IF SET
         MVI   CLWDSP,15               PROIRITY
         CLEAR CLWFCMD
         MVI   CLWPFS,0                CLEAR WAIT PARMS
         L     R1,CLWSCP
         WITH  (SCP,R1),BEGIN
         CLEAR SCBCFNMA                RESET MULT ATTN SUPPRESS
         CLEAR SCPKLUDG   **KLUDGE**   *** RESET RESERVE COUNT ***
         CLEAR (CLWSBPSW,72)
         CLEAR (SCPXPSW,72)
         CLEAR R0
         ST    R0,SCPPXA
         ST    R0,CLWWLMOD             CLEAR USER WYLBUR MODE
         ST    R0,CLWMLMOD             CLEAR MILTEN MODE WORD
         ST    R0,SCPCMDP              CLEAR COMMAND POINTER
         ST    R0,SCPPARMP             AND PARM POINTER
         END   ,
         MVI   CLWWLMOD,C'-'           BUT RESET WYLBUR PROMPT
         FSCALL RESETWMW               RESET MODE WORD
         LD    0,=D'0'
         LDR   2,0
         LDR   4,0
         LDR   6,0
         EJECT ,
*
*  FREE ALL WORK CORE
*
         BEGIN
         L     R15,CLWSCP              SCP POINTER
         WITH  (SCP,R15)
         IF    (^CLWPFSHR,AND,(SCPRRSEG,EQ,CLWUPST)),EXIT
         DROP  SCP
         SENSE 1                       GET RESERVED COUNT
         SR    R1,R15                  RESERVED=TITAL-UNRESERVED
         BZ    CLRWC2                  NO CORE RESERVED
         LR    SR,R1
         SRL   SR,12                   # PAGES TO FREE
*
         L     TR,CLWUWST              START OF WORK AREA
         L     QR,CLWUPST
         A     QR,CLWUPML              END OF ADDRESS SPACE
CLRWC    SENSE 0,(TR)
         B     *+4(R15)
         B     CLRWC0                  DEFINED
         B     CLRWC1                  RESERVED BUT NOT DEFINED
         AH    TR,=Y(4096)             NEXT PAGE
         B     CLRWC
*
CLRWC0   VSET  20,(1),X'FFF'           INSURE UNPROTECTED PAGE
CLRWC1   VSET  15,(1),X'FFF'           RELEASE PAGE
         AH    TR,=Y(4096)
         BCT   SR,CLRWC
CLRWC2   LABEL ,                       WORK CORE RELEASED
         L     R15,CLWSCP
         WITH  (SCP,R15),BEGIN
         MVC   SCPRESRV,CLWUPRSV
         MVC   SCPRRSEG,CLWUPST
         END   ,
         END   ,
*
         SENSE 25                      GET STATS
         S     R1,CLWPCUSE             CPU TIME
         ST    R1,SMFICCPU
         S     R0,CLWPIOS              I/O COUNT
         ST    R0,SMFICIO
         S     R15,CLWPCVM             VM CHARGES
         ST    R15,SMFICVM
         S     R14,CLWPELT
         SRDL  R14,32                  SHIFT UP
         D     R14,=A(384)             TO .01 SECONDS
         ST    R15,SMFICELT
         MVC   SMFIPROG,CLWPROGN       PROGRAM NAME
         CLPSERV PUTSMF,SMFICCPU,SMFILEN,SMFISTAT
         VSET  24,CLPPNAM,L'CLPPNAM    REPLACE CLP'S NAME
*
CLRPCORE IF    (CLWPFPL+CLWPFPIC,Z),CUEXIT   LOADING OR EXECUTING?
         CLEAR CLWEVCNT
         CLEAR (CLWEVHST,64)
         VCALL CLEANTRP                CLEAR ALL TRAPS
         VSET  17,0                    UNCONDITIONAL EVENT CLEAR
         VSET  18,0                    UNCONDITIONAL MONITOR CLEAR
         CLPSERV CLRSSYM               Clear all symbol references
         IF    ^CLWPFSHR,BEGIN          CLEARING SHARED PROGRAM?
         L     R15,CLWSCP              GET SCP POINTER
         WITH  (SCP,R15),'LTH R15,SCPRESRV'      CORE ALLOCATED
         IF    NZ,BEGIN
         VSET  20,L:LCBCORE,L:LCBCLEN  UNPROTECT TO PAGES
         VSET  15,L:LCBCORE,L:LCBCLEN  DISCARD PROGRAM CORE
         END   ,
         END   ELSE,BEGIN
         IF    CLWPFPL,BEGIN
         B   DETSPB                    FREE UP SPB
         END   ,
         IF    ^LNKFSPNQ,BEGIN         ENQUEUE SPB
         VSET  22                      CLEAR ANY USER ENQUEUE
         SETMSG 'SPB LOADING STUFF'
         VSET  21,(1),(0)              DO ENQUEUE
         SET   LNKFSPNQ                WE NOW HOLD THE LOCK
         END   ,
DETSPB   CLPSERV DETSPB                DETACH FROM SPB
         END   ,
         CLEAR LNKFSPNQ
         VSET  22                      DEQUEUE
         CLEAR LCBCORE
         CLEAR CLWPFPL+CLWPFPIC+CLWPFPRV+CLWPFSHR
         LT    R15,LCBMPLEN            ANY MAP (NOT IF SHARED)
         IF    NZER,BEGIN             YES
         LT    R1,LCBMAP               MAP ALLOCATED
         IF    NZ,BEGIN                YES
         FREECLW (1),(15)              DISCARD MAP
         CLEAR LCBMAP
         END  ,
         END   ,
         SET   LNKFFREE                FREE LINK PAGE ON EXIT
         CLEAR (LNKANAM,L'LNKANAM+L'LNKEP)         MISCELLANEOUS
         CLEAR (LNKZPTRS,8+L'LNKZBASE)                   FIELDS
CUEXIT   VEXIT SR,RAR
         EJECT ,
* ROUTINE TO CLEAR LINK PAGE
*        - THIS ROUTINE HAS NO BASE REGISTER
*        - ASSUMES THAT LCBR => LINK PAGE
*
         ENTRY CLRLP
CLRLP    VPUSH SR,TR,*                 SAVE WORK REGISTERS
         LR    R0,LCBR
         LA    R1,L'LNKPAGE-1
         SR    TR,TR
         MVCL  R0,SR
         BASR  TR,0
         USING *,TR                    FOR LITERAL ADDRESSING
         SET   LNKFTYPD+LNKFFREE        ALLOW PARM CARD
         LA    SR,LNKSTACK
         ST    SR,LNKSTKP              SET UP FIRST STACK ENTRY
         MVI   LNKFID,1                TERMINAL IS STACK BOTTOM
         SET   LNKSFTER
         MVC   LNKUSER,CLWUSER
         MVC   LNKGRP,CLWGROUP
         ST    CLWR,LNKCLW
         VPOP  SR,TR,*                 RESTORE
         BR    RAR                     RETURN
         DROP  TR                      ##
         EJECT ,
*
* FETCH NEXT LINE
*
         ENTRY GETLINE
GETLINE  VPUSH BR,RAR,*                SAVE BASE AND RETURN
         BASE  BR                      NEW ADDRESSABILITY
         IF    LNKFREDO,GLGOT          RE-DO LAST STATEMENT?
         IF    LNKSFRRB,GLREFRSH       RE-READ BUFFER?
GL1      LH    SR,LNKBO                BUFFER OFFSET
         CH    SR,LNKBL                BUFFER LENGTH
         BNL   GLFNEW
*
         L     TR,GPWDATAD             BUFFER START
         IF    LNKSFED,GLEDIT          EDIT?
         ALR   TR,SR                   POINT TO TEXT
         MVC   LNKCOM(80),@TR          MOVE IN LINE
         LA    TR,80                   LENGTH
         LA    R1,LNKCOM+79            LAST CHAR
GL3      CLI   @R1,C' '                TRAILING BLANK?
         BNE   GL4
         DECR  R1
         BCT   TR,GL3
GL4      STH   TR,LNKCOML
         LA    SR,@SR+80
         STH   SR,LNKBO                OFFSET OF NEXT LINE
         LA    SR,1000                 UP LINE NUMBER FOR DIAGNOSTICS
         A     SR,LNKLN
         ST    SR,LNKLN
*
         B     GLGOT
*
GLEDIT   UNPRS LNKCOM,@TR(SR)
         BNZ   BADFORM
         STH   R0,LNKCOML              LENGTH
         SR    R1,TR                   NEW BUFFER OFFSET
         CH    R1,LNKBL                GOOD COMPARE WITH BUFF END?
         BH    BADFORM                 NO
         STH   R1,LNKBO                NEW LINE OFFSET
         ST    R14,LNKLN               SAVE LINE NUMBER
GLGOT    CLEAR R15                     SET CC
         CLEAR LNKFREDO+LNKFTYPD
         LA    R1,LNKCOM
         LH    R0,LNKCOML              STATEMENT ADDRESS AND LENGTH
         B     GLEXIT
*
GLFNEW   CLI   LNKFID,1                IF ACTIVE FILE THEN READ FROM
         BE    GETAFBUF                CURRENT LINE NUMBER
         CLEAR LNKBO
GLFREF   MVC   GPWPFFL(2),LNKPFFL      SET PROCESSING AND FILE ID
         MVC   GPWBN,LNKBN             BLOCK NUMBER
         CLEAR GPWFNSKP                CLEAR SKIP MODE
         IF    GPWUILIB,'SET GPWFNSKP'
         FSCALL READ                   GET ANOTHER BLOCK
         MVC   LNKBN,GPWBN             SAVE BLOCK #
         BNZ   GLFEOF                  END OF FILE
         STH   R1,LNKBL                BLOCK LENGTH
         B     GL1
*
GLREFRSH CLEAR LNKSFRRB
         CLI   LNKFID,1
         BE    GETAFBUF                TERMINAL OR WYLBUR
         DECR  R0,LNKBN                BACK UP TO PREVIOUS
         FSCALL BSPACE                 YEAH
         B     GLFREF                  GET THE FILE BLOCK
GETAFBUF IF    LNKSFTER,GLGONE         RETURN TO TERMINAL?
         INCR  SR,LNKLN                GET NEXT LINE NUMBER
         ST    SR,GPWFWDS              FIRST LINE NUMBER
         MVC   GPWLREC(2),=AL2(0)      LRECL
         MVC   GPWRBL(2),=AL2(2048)    BUFF LEN
         MVC   GPWOPT(4),=AL2(3,0)
         FSCALL READWDS
         BNZ   GLEOF                   END OF ACTIVE FILE
         STH   R1,LNKBL
         CLEAR LNKBO
         B     GL1
*
GLFEOF   LABEL ,            END OF FIL E - CHECK MULTIPLE
         IF    WAUTOSLB,AUTOMEMS       OR
         IF    GPWLLIST,AUTOMEMS       OR
         IF    GPWLNXTM,BEGIN AUTOMEMS
AUTOMEMS   DS  0H                    AUTOCALL MEMBERS
           LA  R15,4                 SIGNIFY RETURN FOR
           LCR R15,R15               MULTIPLE MEMBERS
           B   GLEXIT                DON'T POP STACK
         END   ,
         CLEAR GPWLGOTD
         FSCALL DETACH                 DETACH AFTER END OF FILE
GLEOF    LABEL ,                       END OF FILE: POP STACK
         LCALL POPLNKST
         CLI   LNKFID,0                ANY ID?
         BE    GLEOF                   NO: SKIP ENTRY
         B     GLREFRSH                REFRESH BUFFER
*
GLGONE   LA    R15,4                   RETURN CODE
GLEXIT   VPOP  BR,RAR,*
         LTR   R15,R15                 SET CC
         BR    RAR
         EJECT ,
         ENTRY POPLNKST
POPLNKST LABEL ,
         VPUSH BR,RAR,*
         BASE  BR                      NEW ADDRESSABILITY
         CLEAR LNKCOML                 NO 'LAST' COMMAND
         L     SR,LNKSTKP              GET POINTER
         SL    SR,=A(L'LSE)
         ST    SR,LNKSTKP
         MVC   LSE,@SR                 GET STACK TOP
         MVC   GPWPFFL(2),LNKPFFL      RESET PROCESSING AND FILEID
         MVC   GPWSACCT,LNKACCT
         MVC   GPWBN,LNKBN
         MVC   GPWUINFO,LNKUINFO
         MVC   GPWLMLBN,LNKLMLBN
         VPOP  BR,RAR,*
         BR    RAR
         EJECT
*
CLPPNAM  DC    C'  CLP'
         LTORG
         SPACE ,
         END   .
