VSSW     TITLE 'ORVYL''S INTERNAL SET, SHOW AND DUMP COMMANDS'
********************************************************************
*                                                                  *
*      ORVYL/370  RELEASE III - CLASS I - STANFORD PROPRIETARY     *
*                                                                  *
********************************************************************
         SPACE 3
         HIBAL ASSOC=YES
*
VSSW     CSECT
         IDENT 07
         SPACE 2
         COPY  ORVDEFN
&MODULE  SETC  'VSSW'
         SPACE 3
         REGS  ,,SR,TR,QR,RR,BRR,BR,WAR,RAR,CLWR,LCBR,CTR
         COPY  PZERO
         USING PZERO,R0
         EJECT
*
         MACRO
&L       BTD   &LOC,&LEN,&WORD,&SW,&COMMAS=NO
         LCLC  &CM
         AIF   ('&COMMAS' NE 'YES').NOCM
&CM      SETC  'C'
.NOCM    ANOP
&L       SYSLR 15,&WORD,OP=L
         SYSLR 0,&LEN,TYPE=&SW
         SYSLR 1,&LOC
         XCALL BTDU&CM
         MEND
*
         MACRO
&L       BTX   &LOC,&LEN,&WORD
&L       SYSLR 15,&WORD,OP=L
         SYSLR 0,&LEN
         SYSLR 1,&LOC
         XCALL BTX
         MEND
*
         MACRO
&L       SYSONLY ,
&L       LCALL SYSTEST
         MEND
*
         MACRO
&L       PRVBLOCK ,
&L       LCALL PRVPTEST
         MEND
*
         MACRO
&L       EVAL  &DUMMY
&L       LCALL EVAL
         MEND
*
         MACRO
&L       SEGDC &LEN,&WORD,&SW
&L       SYSLR 15,&WORD,OP=L
         SYSLR 0,&LEN,TYPE=&SW
         LCALL SEGDC
         MEND
*
         MACRO
&L       SEGHX &LEN,&WORD
&L       SYSLR 15,&WORD,OP=L
         SYSLR 0,&LEN
         LCALL SEGHX
         MEND
         EJECT
*GEN
         COPY  SCP
         EJECT
         COPY  CLW
*-
*-       Orvyl 5 control blocks needed for internal display
*-         commands only.
*-
         COPY  SLISTMAC
         COPY  MAT
         COPY  ASB
         COPY  AIB
         COPY  PAGCB
         COPY  FILECB
         COPY  FSB
         COPY  CACHCB
         COPY  CACHCBH
         COPY  QLISTMAC
         COPY  GRCOPY
         COPY  ATFB
         EJECT
*-
*-       WORK AREA
*-
WA       DSECT
         VSA   SR,RAR
*
WAFL     FLAG  ,                       MISC FLAGS
         FLAG  WAFLSYS                 SYSTEM PRIVS
         FLAG  WAFLINS                 INSIDER
         KWREC FLAGS
*
AREA     DS    0D
WAORVST  DS    2A
WACPUT   DS    2A
WADSPT   DS    2A
WAIOT    DS    2A
WAORVCPU DS    2A                      ORVYL CPU TIME CONSUMED
*
         ORG   AREA
WAUNEXT  DS    A                       NEXT ASB IN CHAIN
WAUIOS   DS    A                       USER I/O COUNT
WAUCPU   DS    2A                      USER CPU TIME
WAUID    DS    CL8                     USER ID
WAUPGNM  DS    CL8                     PROGRAM NAME
WAUTID   DS    A                       TERMINAL ID
WAUAREA  EQU   WAUNEXT,*-WAUNEXT,C'X'
*
         ORG   AREA
WAVISTRT EQU   *                   Start of SHOW VINFO wa
WAVIDISK DS    D
WAVICACH DS    D
WAVIWA   EQU   WAVISTRT,*-WAVISTRT,C'X'
*
         ORG   AREA
WAVBSTRT EQU   *                   Start of SHOW VBLOCKS wa
WAVBTEMP DS    XL64                Temporary work area
WAVBAVA  DS    F
WAVBTOT  DS    F
WAVBTIO  DS    D
WAVBCAC  DS    D
WAVBFL1  FLAG
         FLAG  WAVBFBTF            - BTF format
         FLAG  WAVBFDFF            - DFF format
WAVBFSID DS    X
WAVBWA   EQU   WAVBSTRT,*-WAVBSTRT,C'X'
*
         ORG   AREA
WAVFSTRT EQU   *                   Start of SHOW VFILES wa
WAVFL1   FLAG
         FLAG  WAVFRESV            - Exclusive and reserved only
         FLAG  WAVFNODI            - Don't display files
         FLAG  WAVFCNTS            - Display counts
         FLAG  WAVFFID             - Display for this file system
WAVFL2   FLAG  ,
         FLAG  WAVFRES             - Process reserve queue
         FLAG  WAVFADDR            - Display ATFB address
         FLAG  WAVFSHOR            - Display only one instance
WAVFLLEN DS    H                   LIKE text length
WAVFLIKE DS    CL40                LIKE match text
WAVFLNO  DS    F                   Milten lineno to match (0=all)
WAVFIFID DS    F                   Input FID
*
WAVFNFSB DS    A                   Next file system ptr
WAVFAHFB DS    A                   Current hash table ptr
WAVFAHFN DS    F                   Hash queue number
WAVFAHSV DS    CL(L'AHFBL)         Saved hash queue ptrs
WAVFGRSV DS    CL(L'GRIHL)         Saved GRES queue ptrs
WAVFNAME DS    2A                  File name and length save
WAVFUSER DS    CL3                 This user only
WAVFDFID DS    X                   Display file id
WAVFWA   EQU   WAVFSTRT,*-WAVFSTRT,C'X'
*
         ORG   AREA
WACACHE  DS    A                       Set Vcache work area
*
         ORG   ,
WASIZE   EQU   *-WA
*
*
SETON    EQU   0
SETOFF   EQU   4
SETPATH  EQU   0
SETJES   EQU   4
SETOSF   EQU   8
SETNET   EQU   12
         EJECT
*NOGEN
VSSW     CSECT
*
*
         USING CLW,CLWR                ##
         USING WA,WAR                  ##
*  SYSTEM COMMANDS
*
CLPSYST2 VENTER SR,RAR,WASIZE
BASE2    EQU   *+4094
         LA    BRR,BASE2
         USING BASE2,BRR               ##
         CLEAR (WAFL,4)
         LR    TR,R15                  SAVE ENTRY CODE
         CLPSERV PRIVTST               UPDATE PRIVS
         L     SR,CLWSCP               SCP POINTER
         USING SCP,SR
         IF    ('TM  SCPPRIV,KWRIFSPR',O),'SET  WAFLSYS'
         DROP  SCP
         CLPSERV LOCCT                 SENSE CT ADDRESS
         LR    CTR,R1
         BAS   BR,CMDTABLE
         USING BASE,BR                 ## BASE IS EXIT
BASE     EQU   *
*  EXIT
         BC    0,0                     NOP for FSCALL erorr rets
         BC    0,0                     NOP for FSCALL erorr rets
         SR    R15,R15                 SET OK RETURN
*
SHRET    LR    SR,R15
         LCALL AMODE24             Force return to 24 bit mode
         LR    R15,SR
*
         CLEAR CLWFOSC
         VEXIT SR,RAR,LTR
*
SCRET    LPR   R0,R0
         BZ    MISSING
ILLSTR   SEG   (1),(0)
         SEG   ': Invalid string'
         B     ERROR
*
REQABORT SEG   'Request aborted'
         B     ERROR
*
PRVPTEST IF    ^CLWPFPRV,RAR            PRIVATE PROGRAM?
         SEG   'Private program loaded, command blocked'
         B     ERROR
*
SYSTEST  IF    WAFLSYS,RAR
PRIVCMD  LABEL ,
         LA    SR,CLWKWKW+7            LAST BYTE OF KEYWORD
         LA    TR,L'CLWKWKW            LENGTH OF KEYWORD
PRIVLOOK LABEL ,
         CLI   @SR,C' '                STILL BLANK
         BNE   PRIVGOT                 NOPE -- REPORT INVALID
         DECR  SR                      BACK OFF ADDRESS
         BCT   TR,PRIVLOOK             KEEP LOOKING FOR LAST CHAR
PRIVGOT  LABEL ,
         LA    R1,CLWKWKW              ADDRESS OF KEYWORD
         LR    R0,TR                   ACTUAL LENGTH
         B     UNREC                   TELL THE BAD NEWS
         SPACE ,
*
ILLVAL   SEG   'Invalid value'
         B     ERROR
*
ILLADDR  SEG   'Invalid address'
         B     ERROR
*
ILLINE   SEG   'Invalid line'
         B     ERROR
*
MISSING  SEG   'Missing operand'
         B     ERROR
*
*  UNRECOGNIZED NAME
*
UNREC    LABEL ,
         SEG   (1),(0)
         SEG   ': Invalid'
         B     ERROR
ERRORMSG SEG   (1),(0)                 SEG MESSAGE
ERROR    LABEL ,                       BE GRAMATICAL
         VCALL TYPEIT
         BR    BR                      EXIT
*
WYLMIL   LABEL ,
         LA    R15,4                   SEND CODE
         B     SHRET                   SEND 'SHOW' ON TO MILTEN
*
MSGEXIT  SEG   (1),(0)
WRITEXIT VWRITE
         BR    BR
*
SEG      VPUSH RAR,,*
         VSEG  (1),(0)
         VPOP  RAR,,*
         BR    RAR
*box
*
*  PRCT -- Local routine to do percentage.
*    On entry:  Seg's R0/R1 as a percentage.
*
PRCT0    LABEL ,
         MVI   CLWTEMP,0
         B     PRCT9
PRCT4    LABEL ,                   Double math
         WHILE (R0,NZ),BEGIN    Seg's R14/R0 percent
         SRDL  R0,1
         SRDL  R14,1
         END   ,
         LR    R0,R15
         MVI   CLWTEMP,4
PRCT9    VSAVE WAR,RAR,*
         CLEAR R14,R15
         IF    (R1,NZ),BEGIN
         LR    R15,R0
         IF    (R1,NEG),BEGIN
         SRL   R15,1
         SRL   R1,1
         END   ,
         M     R14,=A(100)
         DR    R14,R1
         SRL   R1,1
         IF    (R14,GE,R1),'INCR R15'
         END
         LC    R14,CLWTEMP
         SEGDC (R14),(R15)
         SEG   '%'
         VREST WAR,RAR
         BR    RAR
*box
*
*  FRTOMEG -- Display number in R15 which is in 4K frames as
*    megabytes.
*
FRTOMEG  VSAVE WAR,RAR,*
         SRL   R15,8               Convert frames to megabytes
         SEGDC 0,(R15)             Megs
         SEG   'M'
         VREST WAR,RAR
         BR    RAR
*
EVAL     VSAVE WAR,RAR,*
         VCALL EVAL
         VREST WAR,RAR                 RETURN IS IN RAR
         BM    ERROR
         BR    RAR
*
MSG      VPUSH RAR,,*                  SEG, WRITE, AND RETURN
         SEG   (1),(0)
         B     WRIT1
*
WRITE    VPUSH RAR,,*                  SAVE RETURN
WRIT1    VWRITE ,
         BNZR  BR                      ATTN OR ERROR
         VPOP RAR,,*
         BR    RAR                     NO ERROR
*
SGOSD    VPUSH RAR,,*
         MVCOS CLWTEMP(4),@R14
         BTD   CLWTEMP+4,0,CLWTEMP
         SEG   (1),(0)
         VPOP  RAR,,*
         BR    RAR
*
SEGDC    VPUSH RAR,14,*
         BTD   CLWTEMP,(0),(15)
         VSEG  (1),(0)
         VPOP  RAR,14,*
         BR    RAR
*
SEGHX    VPUSH RAR,14,*
         BTX   CLWTEMP,(0),(15)
         VSEG  (1),(0)
         VPOP  RAR,14,*
         BR    RAR
*
SEGSECS  L     R15,=V(SEGSECS)         TIME IN R1
         BR    R15                     RETURN IN RAR
*box
*
*  AMODE31 -- Routine to switch to 31-bit addressing mode.
*
AMODE31  LA    R15,A31GO
         O     R15,=A(X'80000000')  31 bit mode wanted
         BSM   0,R15
*
A31GO    BR    RAR                 Return
*box
*
*  AMODE24 -- Routine to switch back to 24-bit addressing mode.
*
AMODE24  LA    R15,A24GO
         BSM   0,R15               Return to 24 bit mode
*
A24GO    BR    RAR                 Return
         EJECT
*-
*-       SYSTEM COMMAND VECTOR TABLE
*-
CMDTABLE LABEL
         VSSWTAB  SYTAB,TR
         TITLE 'SHOW VINFO Command'
*box
*
*        SHOW VINFO -- Display Orvyl information.
*
SHVINFO  VCALL SEGSYSN                 GET SUBSYSTEM NAME
         CLPSERV ORVTIME,WAORVST,5*8
         SEG   ' Started at '
         LM    R0,R1,WAORVST           START TIME
         ADL   R0,PZTZOFF
         LA    R15,CLWTEMP             ANSWER AREA
         XCALL FMTCLCK
         SEG   (R1),(R0)
         LCALL WRITE
*
         SYSCTL R2,TYPE=CPUINFO    Get CPU info from host
         SEG   'Number of CPUs = '
         SEGDC 0,(R2)              Display number of CPUs
         LCALL WRITE
*
         LCALL AMODE31             ********
         L     R4,MATPTR           MAT ptr from low memory
         WITH  (MAT,R4),BEGIN
         L     R3,MATPAGCB
         WITH  (PAGCB,R3),BEGIN
         IF    (PAGCB,EQ,'PAGCB'),BEGIN  Valid control block...
         SEG   'Current real memory = '
         L     R15,PAGFIXCNT       Real frame count
         LCALL FRTOMEG             Display in megabytes
         SEG   ' ('
         L     R15,PAGMINFR        Minimum allowed
         LCALL FRTOMEG
         SEG   ' min, '
         L     R15,PAGMAXFR        Maximum allowed
         LCALL FRTOMEG
         SEG   ' max)'
         LCALL WRITE
         END
         END
*
         SEG   'User memory origin = '
         CLPSERV VREGION           Get region parameters
         SRL   R1,20               Convert origin to number of meg
         SEGDC 0,(R1)
         SEG   'M'
         LCALL WRITE
*
         SEGDC 0,L:MATNCLPE
         SEG   ' CLP errors'
         LCALL WRITE
         END
         LCALL AMODE24             ********
*
         LCALL WRITE
         STCK  CLWTEMP                get the moment
         L     R3,CLWTEMP             to the second
         SEG   'Total Orvyl run time = '
         LR    R0,R3                  get current time
         SL    R0,WAORVST             calc elapsed to the second
         LA    R15,CLWTEMP            answer area
         CLEAR R1
         XCALL FMTELAPS               format elapsed time
         SEG   (R1),(R0)              add to line
         LCALL WRITE
         SEG   '      Total CPU time = '
         LM    R0,R1,WAORVCPU          NUMBER OF SECONDS
         LA    R15,CLWTEMP
         XCALL FMTELAPS                CONVERT
         SEG   (R1),(R0)                ADD TO LINE
         LCALL WRITE
*
         SEG   '    Charged CPU time = '
         LM    R0,R1,WACPUT            USER EXECUTION
         LA    R15,CLWTEMP
         XCALL FMTELAPS                CONVERT
         SEG   (R1),(R0)                ADD TO LINE
         LCALL WRITE
*
         SEG   '   Dispatch CPU time = '
         LM    R0,R1,WADSPT            DISPATCHER
         LA    R15,CLWTEMP
         XCALL FMTELAPS                CONVERT
         SEG   (R1),(R0)                ADD TO LINE
         LCALL WRITE
*
         SEG   'I/O service CPU time = '
         LM    R0,R1,WAIOT             I/O SERVICE
         LA    R15,CLWTEMP
         XCALL FMTELAPS                CONVERT
         SEG   (R1),(R0)                ADD TO LINE
         LCALL WRITE
         LCALL WRITE
*-
*-       Display counters from FILECB (see FILESERV).
*-
         LCALL AMODE31             ********
         L     R4,MATPTR           MAT ptr from low memory
         WITH  (MAT,R4),'L R4,MATFILCB'
         WITH  (FILECB,R4),BEGIN
         IF    (FILECB,NE,'FILECB'),BEGIN
         SEG   '(File system control block ID error)'
         LCALL WRITE
         END   ,
*
         ELSE  BEGIN               Good FILECB...
         SEG   'File system I/O summary:'
         LCALL WRITE
*
         SEG   '  Bitmap: '
         LM    R0,R1,TTBITCCT
         ACALL SEGDBL
         SEG   ' cache reads'
         LM    R0,R1,TTBITRCT
         LM    R14,R15,TTBITCCT
         ADLR  R0,R14
         LCALL PRCT4
         SEG   ','
         LM    R0,R1,TTBITRCT
         ACALL SEGDBL
         SEG   ' disk reads,'
         LM    R0,R1,TTBITWCT
         ACALL SEGDBL
         SEG   ' writes'
         LCALL WRITE
*
         SEG   '  Catalog:'
         CLEAR R0,R1,WAVICACH
         L     R14,FILEFFSB
         WHILE (R14,NZ),BEGIN
         WITH  (FSB,R14),BEGIN
* The catalog package does some buffering of records. Fold these
* read counts into the 'read from cache' counts to get a more
* accurate picture of what is occuring.
         MVC   WAVICACH+4(4),FSBCTCRD
         ADL   R0,WAVICACH
         L     R14,FSBCHAIN
         END   ,
         END   ,
         ADL   R0,TTCATCCT
         STM   R0,R1,WAVICACH      Save 'total' cat cache reads
         ACALL SEGDBL
         SEG   ' cache reads'
         LM    R14,R15,WAVICACH
         LM    R0,R1,TTCATRCT
         ADLR  R0,R14
         LCALL PRCT4
         SEG   ','
         LM    R0,R1,TTCATRCT
         ACALL SEGDBL
         SEG   ' disk reads,'
         LM    R0,R1,TTCATWCT
         ACALL SEGDBL
         SEG   ' writes'
         LCALL WRITE
*
         SEG   '  IXR:    '
         LM    R0,R1,TTIXRCCT
         ACALL SEGDBL
         SEG   ' cache reads'
         LM    R0,R1,TTIXRRCT
         LM    R14,R15,TTIXRCCT
         ADLR  R0,R14
         LCALL PRCT4
         SEG   ','
         LM    R0,R1,TTIXRRCT
         ACALL SEGDBL
         SEG   ' disk reads,'
         LM    R0,R1,TTIXRWCT
         ACALL SEGDBL
         SEG   ' writes'
         LCALL WRITE
*
         SEG   '  Data:   '
         LM    R0,R1,TTUSECCT
         ACALL SEGDBL
         SEG   ' cache reads'
         LM    R0,R1,TTUSERCT
         LM    R14,R15,TTUSECCT
         ADLR  R0,R14
         LCALL PRCT4
         SEG   ','
         LM    R0,R1,TTUSERCT
         ACALL SEGDBL
         SEG   ' disk reads,'
         LM    R0,R1,TTUSEWCT
         ACALL SEGDBL
         SEG   ' writes'       LEFT OFF HERE
         LCALL WRITE
         SEG   '  Total:  '
         LM    R0,R1,TTBITCCT
         ADL   R0,WAVICACH
         ADL   R0,TTIXRCCT
         ADL   R0,TTUSECCT
         STM   R0,R1,WAVICACH      Save total cache reads
         ACALL SEGDBL
         SEG   ' cache reads'
         LM    R0,R1,TTBITRCT
         ADL   R0,TTCATRCT
         ADL   R0,TTIXRRCT
         ADL   R0,TTUSERCT
         STM   R0,R1,WAVIDISK      Save total disk reads
         ADL   R0,WAVICACH         Calc total reads
         LM    R14,R15,WAVICACH
         LCALL PRCT4
         SEG   ','
         LM    R0,R1,WAVIDISK
         ACALL SEGDBL
         SEG   ' disk reads,'
         LM    R0,R1,TTBITWCT
         ADL   R0,TTCATWCT
         ADL   R0,TTIXRWCT
         ADL   R0,TTUSEWCT
         ACALL SEGDBL
         SEG   ' writes'
         LCALL WRITE
         LCALL WRITE
*-
*-       Display attached file summary
*-
* Note:  If seven users have FILEA attached then
*        individual files would be one and total
*        user files would be seven.
*
         SEG   'Individual files attached: '
         SEGDC 10,L:TTFILATT
         SEG   '  high-water: '
         SEGDC 10,L:TTFILATM
         LCALL WRITE
         SEG   'Total user files attached: '
         SEGDC 10,L:TTFILAUS
         SEG   '  high-water: '
         SEGDC 10,L:TTFILAUM
         LCALL WRITE
         SEG   'Total temp files attached: '
         SEGDC 10,L:TTFILATP
         SEG   '  high-water: '
         SEGDC 10,L:TTFILAPM
         LCALL WRITE
         SEG   'Total temp blocks in use:  '
         SEGDC 10,L:TTFILTBK
         SEG   '  high-water: '
         SEGDC 10,L:TTFILTBM
         LCALL WRITE
         IF    ('LT R3,FILTEMPF',NZ),BEGIN
         LCALL WRITE
         SEG   'Designated file system for temporary files: '
         WITH  (FSB,R3),BEGIN
         SEG   FSBNAME,L'FSBNAME
         END   ,
         LCALL WRITE
         END   ,
         LCALL WRITE
*-
*-       Display counters from CITs (see FILCACHE).
*-
         IF    FILBFHCA,BEGIN      Hiperspace cache
         SEG   'File system cache summary (hiperspace):'
         LCALL WRITE
         SEG   '  System cache: '
         L     R3,FILE2KCS         Cache block pointer
         BAL   R2,DOCITH           Caching is defined...
         SEG   '  Data cache: '
         L     R3,FILE2KCH         Cache block pointer
         BAL   R2,DOCITH           Caching is defined...
         END   ,                   Hiperspace cache
         ELSE  BEGIN               Regular cache
         SEG   'File system cache summary:'
         LCALL WRITE
         SEG   '  2K System cache: '
         L     R3,FILE2KCS         2K Cache block pointer
         BAL   R2,DOCIT            Caching is defined...
*
         SEG   '  2K Data cache: '
         L     R3,FILE2KCH         2K Cache block pointer
         BAL   R2,DOCIT            Caching is defined...
*
         SEG   '  4K System cache: '
         L     R3,FILE4KCS         4K Cache block pointer
         BAL   R2,DOCIT            Caching is defined...
*
         SEG   '  4K Data cache: '
         L     R3,FILE4KCH         4K Cache block pointer
         BAL   R2,DOCIT            Caching is defined...
         END   ,                   Regular cache
         END   ,                   Good FILECB...
*
         LCALL AMODE24             ********
*
         LCALL WRITE
*
         BR    BR
         EJECT
*
SEGDBL   VPUSH RAR,14,*
         IF    (R0,NZ),BEGIN
         D     R0,=A(1000000000)
         ST    R0,CLWTEMP+16
         BTD   CLWTEMP,2,(R1)
         L     R1,CLWTEMP+16
         BTD   CLWTEMP+2,9,(R1)
         OC    CLWTEMP+2(8),=C'00000000'
         END   ,
         ELSE  BEGIN
         BTD   CLWTEMP,11,(R1)
         END   ,
         SEG   CLWTEMP,11
         VPOP  RAR,14,*
         BR    RAR
         EJECT
DOCIT    LABEL ,
         IF    (R3,Z),BEGIN        No caching...
         SEG   ' No cache is defined.'
         LCALL WRITE
         END   ,
*
         ELSE  BEGIN
         WITH  (CIT,R3)
         IF    (CIT,NE,'CIT'),BEGIN
         SEG   ' (CIT control block ID error)'
         LCALL WRITE
         END
*
         ELSE  BEGIN               Display CIT info...
         SEGDC 0,L:CITDCUR
         SEG   ' cache buffers '
         IF    CITFDISABLED,'SEG " (disabled)"'
         IF    CITFVERIFY,'SEG " (data verification)"'
         LCALL WRITE
*
         SEG   '            '
         SEGDC 0,L:CIT#RD
         SEG   ' lookups ('
         SEGDC 0,L:CIT#RDF
         SEG   ' in cache, '
         L     R0,CIT#RDF
         L     R1,CIT#RD
         ACALL PRCT0
         SEG   '), '
         SEGDC 0,L:CIT#WR
         SEG   ' updates'
         LCALL WRITE
         END   ,
         END   ,
         BR    R2
         EJECT
DOCITH   LABEL ,                   Hiperspace cache
         IF    (R3,Z),BEGIN        No caching...
         SEG   ' No cache is defined.'
         LCALL WRITE
         END   ,
*
         ELSE  BEGIN
         WITH  (CITH,R3)
         IF    (CITHBID,NE,'CITH'),BEGIN
         SEG   ' (CITH control block ID error)'
         LCALL WRITE
         END
*
         ELSE  BEGIN               Display CITH info...
         SEGDC 0,L:CITHNBUF
         SEG   ' cache buffers'
         LCALL WRITE
*
         SEG   '    '
         SEGDC 0,L:CITH#RD
         SEG   ' reads ('
         SEGDC 0,L:CITH#RDF
         SEG   ' in cache, '
         L     R0,CITH#RDF
         L     R1,CITH#RD
         ACALL PRCT0
         SEG   '), '
         SEGDC 0,L:CITH#WR
         SEG   ' writes'
         LCALL WRITE
         SEG   '    '
         SEGDC 0,L:CITH#RDS
         SEG   ' cache buffers stolen ('
         L     R0,CITH#RDS
         L     R1,CITH#RD
         SL    R1,CITH#RDF   Calc count not found
         ACALL PRCT0
         SEG   '), Avg IO microseconds, reads '
         IF    (CITH#RDF,NZ),BEGIN
         L     R14,CITH#RDF
         LM    R0,R1,CITH#RDT      Total TOD units
         IF    (R14,M),BEGIN
         SRL   R14,1
         SRDL  R0,1
         END   ,
         DR    R0,R14              Per read found
         SRL   R1,12               convert to mili seconds
         END   ,
         ELSE  'CLEAR R1'
         SEGDC 0,(R1)
         SEG   ', writes '
         IF    (CITH#WR,NZ),BEGIN
         L     R14,CITH#WR
         LM    R0,R1,CITH#WRT      Total TOD units
         IF    (R14,M),BEGIN
         SRL   R14,1
         SRDL  R0,1
         END   ,
         DR    R0,R14              Per write
         SRL   R1,12               convert to milliseconds
         END   ,
         ELSE  'CLEAR R1'
         SEGDC 0,(R1)
         LCALL WRITE
         END   ,
         END   ,
         BR    R2
         TITLE 'SHOW VBLOCKS Command'
*box
*
*        SHOW VBLOCKS
*
SHVBLOCK LABEL ,                       SHOW VBLOCKS COMMAND ENTRY
         CLEAR WAVBWA              Initialize work area
*
         SCAN  SHVBPRT,CLWKWCB     SHOW VBLOCKS options
         BNZ   SCRET               Trouble, scram
*-
*-       Add BTF start of table line.
*-
         IF    WAVBFBTF,BEGIN      BTF...
         SEG   '100|Orvyl file systems;'
         LCALL WRITE
*
         SEG   '101|fsid|fsname|blocks_available'
         SEG   '|blocks_total|ios|cache_reads;'
         LCALL WRITE
*
         SEG   '102|NUMBER|STRING|NUMBER'
         SEG   '|NUMBER|NUMBER|NUMBER;'
         LCALL WRITE
         END
*
         CLEAR SR                      INDICATE FIRST FILE SYSTEM
*-
*-       Go through each file system and display block information.
*-
         LOOP  BEGIN
         SENSE 151,WAVBTEMP,36,(SR)    FILE SYSTEM STATUS
         LTR   TR,R15                  SAVE RETURN CODE
         IF    NEG,BEGIN           All done...
         IF    WAVBFBTF,BEGIN      Add BTF end of table...
         SEG   '109|End of table;'
         LCALL WRITE
         END
         ELSEIF WAVBFDFF,BEGIN
         SEG   '   Total:  '
         SEGDC 9,WAVBAVA
         SEG   ' blks avail'
         SEGDC 9,WAVBTOT
         SEG   ' total   '
         LM    R0,R1,WAVBTIO
         ACALL SEGDBL
         SEG   ' IOs'
         LM    R14,R15,WAVBCAC
         LM    R0,R1,WAVBTIO
         ADLR  R0,R14
         LCALL PRCT4
         SEG   ' reduced'
         LCALL WRITE
         END   ,
         B     SHVEXIT             Scram
         END
*-
*-       BTF format.
*-
         IF    WAVBFBTF,BEGIN      BTF...
         SEG   '|'
         SEGDC 0,(SR)              fsno
*
         SEG   '|'
         SETMSG WAVBTEMP,8
         XCALL RTRIM
         SEG   (R1),(R0)           fsname
*
         IF    (TR,NZ),BEGIN       Bad return code...
         SEG   '-1|-1|0|0;'        blocks_avail, total, ios, cards
         B     DOBLKWR
         END
*
         SEG   '|'
         SEGDC 0,L:WAVBTEMP+8      blocks_available
*
         SEG   '|'
         SEGDC 0,L:WAVBTEMP+12     blocks_total
*
         SEG   '|'
         SEGDC 0,L:WAVBTEMP+20     ios
*
         SEG   '|'
         SEGDC 0,L:WAVBTEMP+28     cache_reads
         SEG   ';'
         B     DOBLKWR
         END
*-
*-       Regular format.
*-
         IF    WAVBFDFF,BEGIN      DFF ...
         LC    QR,WAVBFSID
         SEGHX 2,(QR)
         SEG   ' '
         INCR  QR
         STC   QR,WAVBFSID
         END   ,

         LA    QR,8                Trim trailing blanks
         LOOP  BEGIN               |
         LA    R15,WAVBTEMP-1(QR)  |
         CLI   @R15,C' '           |
         IF    NE,EXIT             |
         DECR  QR                  |
         END   ,                   |
         SEG   WAVBTEMP,(QR)       File system name
         SEG   ':'
*
         LA    R0,8
         SR    R0,QR
         SEG   =CL8' ',(R0)        Add padding blanks for formatting
*
         IF    WAVBFDFF,DOBLKOK    DFF ...
*
         B     *+4(TR)                 INDEX INTO VECTOR TABLE
         B     DOBLKOK               0 FILE SYSTEM AVAILABLE
         B     DOBLKNA               4 FILE SYSTEM UNAVAILABLE
*                                    8 FILE MAINTENANCE IN PROGRESS
         SEG   'File system maintenance in progress'
         B     DOBLKWR                 SKIP TO WRITE EXIT
*
DOBLKNA  SEG   'File system unavailable'
         B     DOBLKWR
*
DOBLKOK  SEGDC 8,WAVBTEMP+8
         IF    WAVBFDFF,BEGIN      DFF ...
         L     R14,WAVBTEMP+8
         AL    R14,WAVBAVA
         ST    R14,WAVBAVA
         L     R14,WAVBTEMP+12
         AL    R14,WAVBTOT
         ST    R14,WAVBTOT
         CLEAR R14
         L     R15,WAVBTEMP+20
         ADL   R14,WAVBTIO
         STM   R14,R15,WAVBTIO
         LM    R14,R15,WAVBTEMP+24
         ADL   R14,WAVBCAC
         STM   R14,R15,WAVBCAC
         SEG   ' blks avail'
         END   ,
         ELSE  BEGIN
         SEG   ' blocks available'
         END   ,
         SEGDC 9,WAVBTEMP+12
         SEG   ' total '
         IF    (WAVBTEMP+32,NE,=F'0'),BEGIN  4K
         SEG   '4K'
         END   ,
         ELSE  BEGIN
         SEG   '2K'
         END   ,
         SEGDC 11,WAVBTEMP+20
         SEG   ' IOs'
*
         IF    (WAVBTEMP+16,NE,=F'0'),BEGIN  Cached...
         LM    R14,R15,WAVBTEMP+24  Number of cache reads
         CLEAR R0
         L     R1,WAVBTEMP+20      Total no. of disk I/O's
         ADLR  R0,R14              Calc cache + disk
         LCALL PRCT4
         SEG   ' reduced'
         END
*
DOBLKWR  LCALL WRITE                   REPORT ON FILE STATUS
         INCR  SR                      AND DO NEXT
         END
*
SHVEXIT  LABEL
         BR    BR                      RETURN COMPLETE
*-
*-       SHOW VBLOCKS Options.
*-
SHVBPRT  SCKW  BTF,SETVBBTF
         SCKW  DFF,SETVBDFF
         SCKW  PJG,SETVBDFF
         SCKW  ,UNREC
*
SETVBBTF SET   WAVBFBTF
         SCRTN (15)
*
SETVBDFF SET   WAVBFDFF
         SCRTN (15)
         TITLE 'SHOW  VFILES Command'
*box
*
*        SHOW VFILES
*
*           Displays the state of internal queue control blocks
*           maintained by RESMAN.
*
SHVFILES LABEL
         CLEAR WAVFWA              Initialize our work area
*-
*-       Scan SHOW VFILES options.
*-
         SCAN  SHVFPRT,CLWKWCB     SHOW VFILES options
         BNZ   SCRET               Trouble, scram
*
         LCALL AMODE31             ********
*
*-
*-       Title line.
*-
         LCALL WRITE
         SEG   'Attached files'
         IF    (WAVFLLEN,NZ),BEGIN
         SEG   ' like ORV.'
         SEG   WAVFLIKE,LH:WAVFLLEN
         END
         IF    (WAVFLNO,NZ),'SEG " for line "; SEGDC 0,L:WAVFLNO'
         SEG   ':'
         LCALL WRITE
         WITH  (FSB,R4),BEGIN      FSB addressability
         L     R3,MATPTR
         WITH  (MAT,R3),'L R3,MATFILCB'
         WITH  (FILECB,R3),BEGIN   FILECB addressability
         IF    (WAVFNODI,OR,WAVFCNTS),BEGIN Display counts
* Note:  If seven users have FILEA attached then files attched
*        would be one and total attaches would be seven.
         LCALL WRITE
         SEG   'Total Orvyl file attached counts'
         LCALL WRITE
         SEG   'Files attached: '
         SEGDC 10,L:TTFILATT
         SEG   ', high-water: '
         SEGDC 10,L:TTFILATM
         LCALL WRITE
         SEG   'Total attaches: '
         SEGDC 10,L:TTFILAUS
         SEG   ', high-water: '
         SEGDC 10,L:TTFILAUM
         LCALL WRITE
         SEG   'Tempf attached: '
         SEGDC 10,L:TTFILATP
         SEG   ', high-water: '
         SEGDC 10,L:TTFILAPM
         LCALL WRITE
         END   ,                   Display counts
         L     R4,FILEFFSB         Get first FSB pointer
         IF    WAVFFID,BEGIN       Only display one file system
         IF    (WAVFIFID,GE,FILEFSBC),BEGIN
         SETMSG 'Invalid file system id'
         B     MSGEXIT
         END   ,
         WHILE (FSBID,NE,WAVFIFID+3),'L R4,FSBCHAIN' Point to file sys
         END   ,                   Only display one file system
         END   ,                   FILECB addressability

         WHILE (R4,NZ),BEGIN       Main loop
         MVC   WAVFNFSB,FSBCHAIN   Set next FSB pointer
         MVC   WAVFAHFB,FSBAHFB    Set current hash table ptr
         MVC   WAVFDFID,FSBID      Set file id for display
         CLEAR WAVFAHFN
         LCALL WRITE
         SEG   'File System ID: '
         SEGDC 0,LC:FSBID
         SEG   ', Name: '
         SEG   FSBNAME,L'FSBNAME
         IF    (WAVFNODI,OR,WAVFCNTS),BEGIN Display counts
         LCALL WRITE
         SEG   'Files attached: '
         SEGDC 10,L:CTFILATT
         SEG   ', high-water: '
         SEGDC 10,L:CTFILATM
         LCALL WRITE
         SEG   'Total attaches: '
         SEGDC 10,L:CTFILAUS
         SEG   ', high-water: '
         SEGDC 10,L:CTFILAUM
         LCALL WRITE
         SEG   'Tempf attached: '
         SEGDC 10,L:CTFILATP
         SEG   ', high-water: '
         SEGDC 10,L:CTFILAPM
         LCALL WRITE
         END   ,                   Display counts
         LCALL WRITE
         L     R4,WAVFNFSB         Point to next FSB
         IF    WAVFNODI,NEXT       No display, take it from the top
         LOOP  BEGIN               All hash queues
         L     R4,WAVFAHFN         Get slot number
         MH    R4,=Y(L'AHFBL)      Calc displacement
         A     R4,WAVFAHFB         Point to it
         LCALL SHVFATFB            Process files attached here
         INCR  R15,WAVFAHFN        Check the next slot
         UNTIL (WAVFAHFN,GE,=A(AHFBCNT)),END  All hash queues
         IF    WAVFFID,EXIT        Display only one file system
         L     R4,WAVFNFSB         Point to next FSB
         END   ,                   Main loop
         END   ,                   FSB addressability
         LCALL AMODE24
         SETMSG 'End of VFILES Display'
         B     MSGEXIT

*  SHVFATFB - Local routine to chase the hash queue
*
*    On entry:
*      R4 - AHFBL ptr
*
SHVFATFB VPUSH RAR,,*
         VPUSH R0,R5,*
         WITH  (AHFB,R4),BEGIN     AHFB addressability
SHVFATF2 IF    (AHFBLCNT,Z),SHVFATFX No files attached here
         MVC   WAVFAHSV,AHFBL      Save start of queue
         LA    R5,AHFBL            Point to the queue
         WITH  (ATFB,R5),BEGIN     ATFB addressability
SHVFATF4 LOOP  BEGIN               Forever
         CLC   AHFBL,WAVFAHSV      Queue head the same?
         IF    NE,BEGIN            Must start over
         LA    R2,1                Reason code
         LCALL SHVFRTRY            Give message
         B     SHVFATF2            Start the queue again
         END   ,                   Must start over
         L     R5,ATFBFP           Point to next attach block
         LA    R15,AHFBL
         IF    (R5,EQ,R15),EXIT    End of the queue
         LH    R15,WAVFLLEN
         IF    (R15,NZ),BEGIN      Like option
         DEX   R15,'CLC WAVFLIKE(1),ATFBNAME'
         IF    NE,SHVFATF4         Not this one
         END   ,                   Like option
         LA    R1,ATFBNAME         Point to file name
*
* The reserve resource is used for two situations:
*
*  o During IO, it is obtained share for reads and exclusive
*    for writes. Since the system is obtaining the resource,
*    there will be no excessive delays and so not of interest
*    for this display.
*
*  o It is obtained exclusive for the RESERVE SVC. Here there
*    may be delays as the RELEASE is controled by a user program.
*
*  Therefore we will only display the reserve queue when it has
*  been obtained by the RESERVE SVC.
*
         IF    ATFBFRES,BEGIN      Reserve queue
         L     R3,ATFBRGRI
         SET   WAVFRES
         LCALL SHVFGRES            Process these guys
         CLEAR WAVFRES
         END   ,
         L     R3,ATFBAGRI
         LCALL SHVFGRES            Process these guys
         END   ,                   Forever
         END   ,                   ATFB addressability
         END   ,                   AHFB addressability
SHVFATFX LABEL ,
         VPOP  R0,R5,*
         VPOP  RAR,,*
         BR    RAR

* SHVFGRES - Local routine to chase the resource queue
*
*   On entry:
*     R6 - File name ptr
*     R3 - GRITEM pointer
*
SHVFGRES VPUSH RAR,,*
         VPUSH R0,R5,*
         LR    R2,R1
         LA    R0,L'ATFBNAME-1
         LOOP  BEGIN
         INCR  R2
         IF    ('CLI 0(R2),C" "',EQ),EXIT
         UNTIL (BCT,R0),END
         SR    R2,R1               Calc length
         LR    R0,R2
         STM   R0,R1,WAVFNAME      Save SEG parms
         WITH  (GRITEM,R3),BEGIN   GRITEM addressability
SHVFGRE2 MVC   WAVFGRSV,GRIHL      Save start of queue
         LA    R4,GRIHL            Point to the start
         WITH  (GRHITM,R4),BEGIN   GRHITM addressability
SHVFGRE4 LOOP  BEGIN               Forever
         L     R4,GRHFP            Point to next GR hold item
         IF    (GRIBID,NE,=CL4'GRES'),EXIT Things change
         IF    (GRHBID,NE,=CL4'GRH'),EXIT Things change
         IF    (WAVFGRSV,NE,GRIHL),BEGIN
         LA    R2,2                Reason code
         LCALL SHVFRTRY            Give message
         B     SHVFGRE2            Start the queue again
         END   ,
         LA    R15,GRIHL
         IF    (R4,EQ,R15),EXIT    End of the queue
         IF    WAVFRESV,BEGIN      Only reserved and exclusive
         IF    (^GRHXEXCL,AND,GRHXHOLD),'EXIT SHVFGRE4'
         IF    (GRIHLCNT,EQ,=F'1'),'EXIT SHVFGRE4' none waiting
         END   ,                   Only reserved and exclusive
         IF    WAVFSHOR,BEGIN      Short display
         SEG   'Users'
         SEGDC 5,L:GRIHLCNT
         END   ,
         ELSE  BEGIN
         L     R1,GRHASB           Address space ptr
         LCALL WRUINFO             Format information
         IF    NZ,'NEXT SHVFGRE4'  Skip it
         IF    (WAVFGRSV,NE,GRIHL),BEGIN
         LA    R2,3                Reason code
         LCALL SHVFRTRY            Give message
         B     SHVFGRE2            Start the queue again
         END   ,
         END   ,
         SEG   ' Fid '
         SEGDC 2,LC:WAVFDFID       File system id
         SEG   ' File ORV.'
         LM    R0,R1,WAVFNAME
         SEG   (R1),(R0)           File name
         IF    GRHXHOLD,BEGIN      Holding the resource
         IF    GRHXEXCL,BEGIN      Exclusive hold
         IF    WAVFRES,BEGIN
         SEG   ' (reserved)'
         END   ,
         ELSE  BEGIN
         SEG   ' (attached exclusive)'
         END   ,
         END   ,                   Exclusive hold
         ELSE  BEGIN
         SEG   ' (attached share)'
         END   ,
         END   ,                   Holding the resource
         ELSE  BEGIN               Waiting for the resource
         SEG   ' (*** waiting '
         IF    WAVFRES,BEGIN       Waiting for reserve
         SEG   'reserve)'
         END   ,                   Waiting for reserve
         ELSE  BEGIN               Waiting for attach
         IF    GRHXEXCL,BEGIN
         SEG   'exclusive '
         END   ,
         ELSE  BEGIN
         SEG   'share '
         END   ,
         SEG   'attach)'
         END   ,                   Waiting for attach
         END   ,                   Waiting for the resource
         IF    WAVFADDR,BEGIN      Show ATFB address
         SEG   ' '
         SEGHX 8,(R5)
         END   ,
         LCALL WRITE
         IF    WAVFSHOR,EXIT       Short display
         END   ,                   Forever
         END   ,                   GRITEM addressability
SHVFGREX LABEL ,
         VPOP  R0,R5,*
         VPOP  RAR,,*
         BR    RAR

SHVFRTRY VPUSH RAR,14,*
         SEG   '(Queue changed; backing up a bit, reason code '
         SEGDC 0,(R2)
         SEG   ').'
         LCALL WRITE
         VPOP  RAR,14,*
         BR    RAR

*-
SHVFPRT  SCKW  NODISP,SHVKNODI,A
         SCKW  RESERVED,SHVKRESV
         SCKW  COUNTS,SHVKCNTS,A
         SCKW  LIKE,SHVKLIKE,(A,P)
         SCKW  ADDR,SHVKADDR,(A,P)
         SCKW  USER,SHVKUSER,(A,P)
         SCKW  FID,SHVKFID,(I,P)
         SCKW  SHORT,SHVKSHOR,A
         SCKW  ?,SHVFHELP,A
         SCKW  ,SHVKLNO,I
         SCKW  ,UNREC

*-
SHVFHELP LABEL ,
         LCALL WRITE
         SEG   'SHOW VFILES <parameters> '
         LCALL WRITE
         SEG   ' where parameters can be any combination'
         SEG   ' of the following:'
         ACALL WRITE
         SEG   'o NODISP   - Counts only (no display)'
         LCALL WRITE
         SEG   'o RESERVED - Only files that are reserved and have '
         SEG   'users waiting for reserve'
         LCALL WRITE
         SEG   'o COUNTS   - Include counts'
         ACALL WRITE
         SEG   'o LIKE fn  - Only file names that match fn'
         LCALL WRITE
         SEG   'o ADDR     - Display ATFB address'
         LCALL WRITE
         SEG   'o USER uuu - Only attached by user uuu'
         LCALL WRITE
         SEG   'o lineno   - Only attached by user on this line'
         LCALL WRITE
         SEG   'o FID nn   - Only for file system with id nn'
         ACALL WRITE
         SEG   'o SHORT    - Show each file once with a count of '
         SEG   'users attached'
         ACALL WRITE
         BR    BR                  Done
*-
SHVKCNTS SET   WAVFCNTS
         SCRTN (15)
*-
SHVKSHOR SET   WAVFSHOR
         SCRTN (15)
*-
SHVKRESV SET   WAVFRESV
         SCRTN (15)
*-
SHVKNODI SET   WAVFNODI
         SCRTN (15)
*
SHVKADDR SET   WAVFADDR            Display ATFB address
         SCRTN (15)
*
SHVKLIKE VPUSH RAR,,*
         VPUSH R2,R4,*
         IF    (@R1,NE,'ORV.'),BEGIN
         SEG   (R1),(R0)
         SETMSG ': expecting full filename (e.g., ORV.GG.UUU.FILE).'
         B     MSGEXIT
         END
         LA    R1,@R1+4            Skip past ORV.
         SH    R0,=H'4'            Keep length accurate
*
         LR    R2,R0
         CEIL  R2,L'WAVFLIKE
         STH   R2,WAVFLLEN         Save length
         MOVE  R2,WAVFLIKE,@R1     Save match text
         VPOP  R2,R4,*
         VPOP  RAR,,*
         SCRTN (15)
*
SHVKUSER LABEL ,
         IF    (R0,NE,=F'3'),BEGIN
         SEG   (R1),(R0)
         SETMSG ': expecting a user ID (e.g., PJG).'
         B     MSGEXIT
         END
         MVC   WAVFUSER,@R1
         SCRTN (15)
*
SHVKLNO  MVC   WAVFLNO,CLWKWVAL    Save MILTEN line-number
         SCRTN (15)
*
SHVKFID  SET   WAVFFID             Display only this file system
         MVC   WAVFIFID,CLWKWVAL
         SCRTN (15)
         EJECT
*box
*
*  WRUINFO -- Local routine to seg user information, given a
*    pointer to the ASB.
*
*    On entry:
*      R1 - ASB ptr
*
WRUINFO  VPUSH RAR,,*
         VPUSH R2,R5,*
         LTR   R5,R1               Copy ASB ptr
         BZ    WRUERR              No accounting info, scram
         WITH  ((AIB,R4),(ASB,R5)),BEGIN
         IF    (ASBID,NE,'ASB'),WRUERR  Trouble, scram
         LT    R4,ASBAIB           Accounting information
         BZ    WRUERR              No accounting info, scram
         IF    (AIB,NE,'AIB'),WRUERR  Trouble, scram

         IF    (WAVFLNO,NZ),BEGIN  Only match this line-number...
         CLC   WAVFLNO,AIBTID
         IF    NE,WRUERR           Skip it
         END   ,                   Only match this line-number...
         IF    (WAVFUSER,NZ),BEGIN Only match this user...
         CLC   WAVFUSER,AIBUSER
         IF    NE,WRUERR           Skip it
         END   ,                   Only match this user...

         SEG   'Ln'
         SEGDC 5,L:AIBTID          Milten line number
         SEG   ' '
         SEG   AIBUSER+3,2         gg
         SEG   '.'                   .
         SEG   AIBUSER,3              uuu
         END
         CLEAR R15
         B     WRUEXIT
*
WRUERR   LABEL ,
         IF    ((WAVFLNO,Z),AND,(WAVFUSER,Z)),BEGIN
         SEG   'Ln ???? ??.???'    Something is screwed up
         CLEAR R15
         END   ,
         ELSE  'LA R15,1'
*
WRUEXIT  VPOP  R2,R5,*
         VPOP  RAR,,*
         LTR   R15,R15
         BR    RAR
         TITLE 'SHOW VCACHE Command'
*box
*
*        SHOW VCACHE
*
SHVCACHE LABEL
         SEG   'Caching stuff disabled for now'
         LCALL WRITE
         BR    BR                  Return
         LCALL AMODE31             ********
*
         L     R5,MATPTR           MAT ptr from low memory
         WITH  (MAT,R5),'L R5,MATFILCB'
         WITH  (FILECB,R5),'L  R5,FILE2KCH'     Cache block pointer
         SEG   '2K '
         BAL   R4,DOSVCA
*
         L     R5,MATPTR           MAT ptr from low memory
         WITH  (MAT,R5),'L R5,MATFILCB'
         WITH  (FILECB,R5),'L  R5,FILE4KCH'     Cache block pointer
         LCALL WRITE
         SEG   '4K '
         BAL   R4,DOSVCA
*
         LCALL AMODE24             ********
*
         BR    BR                  Return
*
*   Format Cache information
*
DOSVCA   LABEL ,
         SEG   'File caching information:'
         LCALL WRITE
         LCALL WRITE
*
         IF    (R5,Z),BEGIN        No CIT...
         SETMSG ' File caching not defined.'
         B     MSGEXIT             Done
         END   ,
*
         USING CIT,R5
         SEG   'CIT at 0x'
         SEGHX 0,(R5)
         LCALL WRITE
         LCALL WRITE
*
         TM    CITFDISABLED,L'CITFDISABLED
         IF    NZ,'SEG "Disabled"'
         ELSE  'SEG "Enabled"'
         LCALL WRITE
*
         TM    CITFVERIFY,L'CITFVERIFY
         IF    NZ,'SEG "Data checksum mode"'
         ELSE  'SEG "Standard (no checksum) mode"'
         LCALL WRITE
*
         SEG   'Lock word '
         SEGHX 8,L:CITLOCK
         LCALL WRITE
*
         SEGDC 0,L:CIT#RD
         SEG   ' reads ('
         SEGDC 0,L:CIT#RDF
         SEG   ' found), '
         SEGDC 0,L:CIT#WR
         SEG   ' writes'
         LCALL WRITE
*
         SEG   'Block size = '
         SEGDC 0,L:CITDLEN
         LCALL WRITE
*
         SEGDC 0,L:CITDCUR
         SEG   '/'
         SEGDC 0,L:CITDMAX
         SEG   ' buffers'
         LCALL WRITE
*
         SEGDC 0,L:CITNHASH
         SEG   ' hashed queue heads'
         LCALL WRITE
         LCALL WRITE
*
         SEG   'Master LRU  CAB @ 0x'
         SEGHX 0,LA:CITLRUQ
         LCALL WRITE
*
         LA    R2,CITLRUQ
         LR    R3,R2
         LOOP  BEGIN
         WITH  (CAB,R3)
         L     R3,CABQF
         IF    (R3,EQ,R2),EXIT
         SEG   '  ='
         SEGHX 8,(R3)
*
         SETMSG '  ???'
         IF    (CABHDR+3,EQ,X'FF'),'SETMSG " MSTR"'
         IF    (CABHDR+3,EQ,X'80'),'SETMSG "  CAT"'
         IF    (CABHDR+3,EQ,X'40'),'SETMSG " BITM"'
         IF    (CABHDR+3,EQ,X'08'),'SETMSG "  IXR"'
         IF    (CABHDR+3,EQ,X'04'),'SETMSG " SIXR"'
         IF    (CABHDR+3,EQ,X'02'),'SETMSG " MIXR"'
         IF    (CABHDR+3,EQ,X'01'),'SETMSG " USER"'
         SEG   (R1),(R0)
*
         STCK  @R13
         L     R15,@R13
         SL    R15,CABCLCK
         IF    (CABCLCK,Z),'LH R15,=H"-1"'
         SEGDC 6,(R15)
         SEG   ' secs'
*
         SEGDC 6,L:CABNRDS
         SEG   ' hits'
         SEGDC 5,L:CABNWRS
         SEG   ' upds'
*
         SEG   '  key='
         SEGHX 2,L:CABKEY
         SEG   ' '
         SEGHX 8,L:CABKEY+4
         SEG   ': buf='
         SEGHX 8,L:CABBUFP
         LCALL WRITE
         END
*
         LCALL WRITE
*
         SEG   'Master free CAB @ 0x'
         SEGHX 8,LA:CITFREEQ
         LCALL WRITE
*
         LA    R2,CITFREEQ
         LR    R3,R2
         LOOP  BEGIN
         WITH  (CAB,R3)
         L     R3,CABQF
         IF    (R3,EQ,R2),EXIT
         SEG   '  ='
         SEGHX 8,(R3)
         SEG   ': buf='
         SEGHX 8,L:CABBUFP
         LCALL WRITE
         END
*
         LCALL WRITE
         LCALL WRITE
*
         SEG   'Hashed queue ('
         SEGDC 0,L:CITNHASH
         SEG   ' queues):'
         LCALL WRITE
*
         CLEAR R2
         L     R3,CITNHASH
         LA    R5,CITHASHQ
         DROP  CIT
*
         WHILE (R3,POS),BEGIN
         LT    R15,@R5(R2)
         IF    NZ,BEGIN
         SEG   '  +'
         LR    R15,R2
         SRL   R15,2
         SEGDC 6,(R15)
         SEG   ': '
         CLEAR R15
         L     R1,@R5(R2)
         WHILE (R1,NZ),BEGIN
         WITH  (CAB,R1)
         L     R1,CABLINK
         LA    R15,@R15+1
         IF    (R15,GT,=F'9999'),EXIT  (Safety check)
         END
         SEGDC 0,(R15)
         SEG   ' entries'
         LCALL WRITE
         END
*
         LA    R2,@R2+4
         DECR  R3
         END
         BR    R4
         EJECT
*
*  SETVCACH -- SET VCACHE commands (priv'd).
*
SETVCACH SYSONLY ,                 Privileged
*
*  Set default cache
*
         SEG   'Caching stuff disabled for now'
         LCALL WRITE
         BR    BR

         LCALL AMODE31             ********
         BEGIN
         L     R15,MATPTR           MAT ptr from low memory
         WITH  (MAT,R15),'L R15,MATFILCB'
         WITH  (FILECB,R15)
         L     R2,FILE2KCH               2K Cache block
         IF    (R2,Z),'L  R2,FILE4KCH'   4K Cache block
         END   ,
         LCALL AMODE24             ********
*
         IF    (R2,Z),BEGIN
         SETMSG 'No File Cache defined'
         B     ERRORMSG
         END   ,
         ST    R2,WACACHE
*
         SCAN  VCPRT,CLWKWCB       Handle sub-options
         SETMSG 'Missing option.'
         B     MISSING
*-
*-       SET VCACHE options.
*-
VCPRT    SCKW  ON,SETVCON
         SCKW  OFF,SETVCOFF
         SCKW  PURGE,SETVCPUR,A
         SCKW  VERIFY,SETVCVER,A
         SCKW  NOVERIFY,SETVCNOV,A
         SCKW  2K,SETVC2K
         SCKW  4K,SETVC4K
         SCKW  ,SETVCNO,I
         SCKW  ,UNREC
*
*   Set 2K cache
*
SETVC2K  LABEL ,
         LR    R0,R15
         LCALL AMODE31             ********
         L     R1,MATPTR           MAT ptr from low memory
         WITH  (MAT,R1),'L R1,MATFILCB'
         WITH  (FILECB,R1),'L  R2,FILE2KCH'   Cache block
         LCALL AMODE24             ********
*
         IF    (R2,Z),BEGIN
         SETMSG 'No 2K File Cache defined'
         B     ERRORMSG
         END   ,
         ST    R2,WACACHE
         SCRTN (0)
*
*   Set 4K cache
*
SETVC4K  LABEL ,
         LR    R0,R15
         LCALL AMODE31             ********
         L     R1,MATPTR           MAT ptr from low memory
         WITH  (MAT,R1),'L R1,MATFILCB'
         WITH  (FILECB,R1),'L  R2,FILE4KCH'   Cache block
         LCALL AMODE24             ********
*
         IF    (R2,Z),BEGIN
         SETMSG 'No 4K File Cache defined'
         B     ERRORMSG
         END   ,
         ST    R2,WACACHE
         SCRTN (0)
*
*   Enable caching
*
SETVCON  CLPSERV CACTRL,LA:2,,L:WACACHE
         BR    BR
*
*   Disable caching
*
SETVCOFF CLPSERV CACTRL,LA:3,,L:WACACHE
         BR    BR
*
*   Purge cache
*
SETVCPUR CLPSERV CACTRL,LA:4,,L:WACACHE
         BR    BR
*
*   Turn data verify on
*
SETVCVER CLPSERV CACTRL,LA:5,LA:1,L:WACACHE
         BR    BR
*
*   Turn data verify off
*
SETVCNOV CLPSERV CACTRL,LA:5,LA:0,L:WACACHE
         BR    BR
*
*   Set num of buffers
*
SETVCNO  CLPSERV CACTRL,LA:1,L:CLWKWVAL,L:WACACHE
         BR    BR
         SPACE ,
SETMANY  LABEL ,
         SEG   'Too many devices attached'
         B     ERROR
         SPACE ,
SETALDY  LABEL ,
         SEG   'File system already in requested mode'
         B     ERROR
         SPACE ,
SETIOE   LABEL ,
         SEG   'I/O error'
         B     ERROR
SETMOK   LABEL ,
         SEG   'Requested file mode set'
         B     WRITEXIT
         SPACE ,
SETMSTIL LABEL ,
         SEG   'File maintenance still in progress'
         B     ERROR
         SPACE ,
SETNOFS  LABEL ,
         SEG   'File system not found'
         B     ERROR
*
SETINVA  LABEL ,
         SEG   'You can''t do that'
         B     ERROR
         SPACE ,
SETMLS   LABEL ,
         SEG   'You lose some...'
         B     ERROR
         SPACE ,
SETINVC  LABEL ,
         SEG   'This will never happen'
         B     ERROR
         SPACE ,
SETMRG   LABEL ,
         SEG   'Richard goofed'
         B     ERROR
*
SETMWS   LABEL ,
         SEG   'You win some...'
         B     ERROR
         EJECT
*  CONSTANTS
*
         GENMSGS
         DROP  ,
         EJECT
*
*  PUT SUBSYSTEM NAME INTO OUTPUT BUFFER
*
SEGSYSN  VENTER R2,R11,*
         USING CLW,CLWR                ##
         SENSE 28,CLWTEMP,8            GET NAME
         LA    R0,8
         LA    R15,CLWTEMP+7           END OF NAME
         WHILE ('CLI  @R15,C" "',EQ),BEGIN
         DECR  R0                      STRIP BLANKS
         DECR  R15
         END   ,
         VSEG  CLWTEMP,(R0)            SEG IT
         VSEG  ': '
         VEXIT R2,R11,*                AND SPLIT
         SPACE 2
         DROP  CLWR                    ##
*
         LTORG
         END   .
