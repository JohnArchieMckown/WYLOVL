         PRINT OFF                                                              
*  These macros are designed to make optimum use of certain work                
*  registers and the parameters given to do a specific task.                    
*  The SETA values &WREG#(0..n) represent modifiable work registers             
*  for scratch.  The SETA values &UREG#(0..n) specify which register            
*  is actually being used for register n of the algorithm.                      
*  The idea is that if a parameter is already in a register, to use             
*  that register, unless the parameter will be modified, and then               
*  we must load the parameter into a work register.  After that                 
*  decision is made, we can use the &UREG# register for further work.           
         MACRO                                                                  
&L      $RL    &NUM,&PARM,&MOD=NO,&OP=                                          
.*    This macro sets &UREG#(&NUM) to the value of the register that            
.*  contains the operand.                                                       
.*    If the operand is in a register, and will not be modified, then           
.*  that register is used.  Otherwise the operand must be loaded                
.*  into a work register.                                                       
         GBLA  &$REG#,&UREG#(0),&WREG#(0)                                       
         GBLC  &PTYPE                                                           
         LCLC  &POP                                                             
&POP     SETC  '&OP'                                                            
         AIF   ('&POP' NE '').SPEC                                              
&POP     SETC  'L'                                                              
.SPEC    ANOP                                                                   
&L       DS    0H                                                               
        $LKPARM &PARM,DEFOP=&POP                                                
         AIF   ('&MOD' NE 'NO').MOD                                             
         AIF   ('&PTYPE' NE 'REG').NOTREG                                       
&UREG#(&NUM) SETA &$REG#                                                        
         MEXIT                                                                  
.MOD     ANOP                                                                   
.NOTREG  ANOP                                                                   
&UREG#(&NUM) SETA &WREG#(&NUM)                                                  
.*       MNOTE *,'PARM=&PARM  OP=&POP'                                          
         AIF   ('&PTYPE' NE 'REG').NMREG                                        
         LR    &UREG#(&NUM),&$REG#                                              
         MEXIT                                                                  
.NMREG   ANOP                                                                   
        $L     &UREG#(&NUM),&PARM,OP=&POP                                       
         MEND                                                                   
         SPACE 2                                                                
         PRINT ON                                                               
*********************************************************************           
*   Add elements to a list                                                      
*                                                                               
*   Input                                                                       
*                                                                               
* &L  LADD     &HEAD,&FIRST,&FLAST,&FCOUNT,&WR=,&WR2=RAR,&WR3=EPAR              
*     &HEAD    is a pointer the head of the list (defop = LA)                   
*     &FIRST   first element to be added to the list                            
*     &FLAST   last element to be added (if not specified, assuming             
*              only one)                                                        
*     &FCOUNT  count of elements being added (shouldn't be specified            
*              for only one add)                                                
*     &WR                                                                       
*     &WR2     Registers for scratch                                            
*     &WR3                                                                      
*                                                                               
*   Output                                                                      
*                                                                               
*     No parameter registers are modified                                       
*                                                                               
*********************************************************************           
         PRINT OFF                                                              
         MACRO                                                                  
&L       LADD  &HEAD,&FIRST,&FLAST,&FCOUNT,&WR=,&WR2=RAR,&WR3=EPAR              
         GBLA  &$REG#,&UREG#(0),&WREG#(0)                                       
         GBLB  &$OK                                                             
         GBLC  &PTYPE                                                           
         LCLA  &R,&P                                                            
         LCLC  &LAST,&COUNT                                                     
         LCLC  &PARM(4),&REGS(3)                                                
&LAST    SETC  '&FLAST'                                                         
&COUNT   SETC  '&FCOUNT'                                                        
.*                                                                              
.*    Check for consistant parameters for list add.                             
.*    If there is a last element being added, there must be a count             
.*  and if there isn't a last element, there shouldn't be a count.              
.*                                                                              
         AIF   ('&WR' NE '').WRSPEC                                             
         MNOTE 8,'Work register (WR=) must be specified'                        
         MEXIT                                                                  
.WRSPEC  ANOP                                                                   
         AIF   ('&FLAST' NE '').LASTOK                                          
         AIF   ('&FCOUNT' EQ '').CNTOK                                          
         MNOTE 8,'Count shouldn''t be specified for single add'                 
         MEXIT                                                                  
.CNTOK   ANOP                                                                   
&LAST    SETC  '&FIRST'                                                         
&COUNT   SETC  'LA:1'                                                           
         AGO   .FPARM                                                           
.LASTOK  ANOP                                                                   
         AIF   ('&FCOUNT' NE '').FPARM                                          
         MNOTE 8,'Count must be specified for multiple adds'                    
         MEXIT                                                                  
.FPARM   ANOP                                                                   
.*                                                                              
.*  Set up work register values                                                 
.*                                                                              
&R       SETA  3                                                                
&REGS(1) SETC  '&WR','&WR2','&WR3'                                              
.WRLOOP  ANOP                                                                   
        $RGLKUP &REGS(&R)                                                       
         AIF   (&$OK).NOWRERR                                                   
         MNOTE 8,'&REGS(&R) is not a valid HIBAL register'                      
         MEXIT                                                                  
.NOWRERR ANOP                                                                   
         AIF   (&$REG# NE 0).WROK                                               
         MNOTE 8,'Register 0 is not a valid work register'                      
         MEXIT                                                                  
.WROK    ANOP                                                                   
&WREG#(&R) SETA &$REG#                                                          
&R       SETA  &R-1                                                             
         AIF   (&R GE 1).WRLOOP                                                 
.*                                                                              
.*  Check that no parameters use one of the work registers                      
.*                                                                              
&PARM(1) SETC '&HEAD','&FIRST','&LAST','&COUNT'                                 
&P       SETA  4                                                                
.PLOOP   ANOP                                                                   
        $LKPARM &PARM(&P)                                                       
         AIF   ('&PTYPE' NE 'REG').NXTPARM                                      
&R       SETA  3                                                                
.RLOOP   ANOP                                                                   
         AIF   (&$REG# NE &WREG#(&R)).NXTREG                                    
         MNOTE 8,'&PARM(&P) is the same as work register #&R'                   
         MEXIT                                                                  
.NXTREG  ANOP                                                                   
&R       SETA  &R-1                                                             
         AIF   (&R GE 1).RLOOP                                                  
.NXTPARM ANOP                                                                   
&P       SETA  &P-1                                                             
         AIF   (&P GE 1).PLOOP                                                  
&L       DS    0H                                                               
.*                                                                              
.*  Now do work of adding to list                                               
.*                                                                              
        $RL    1,&HEAD,OP=LA                    Get header                      
.*  Update                                                                      
        $RL    2,&COUNT,MOD=YES                 Update count                    
         AL    &UREG#(2),LHCNT-LHEAD(,&UREG#(1))                                
         ST    &UREG#(2),LHCNT-LHEAD(,&UREG#(1))                                
        $RL    2,LHBP-LHEAD(,&UREG#(1))         Old last element                
        $RL    3,&LAST                          New last element                
         ST    &UREG#(3),LHBP-LHEAD(,&UREG#(1)) Point head back @ new           
.*  New last points fwd to header                                               
         ST    &UREG#(1),LFP-LELEM(,&UREG#(3))                                  
        $RL    3,&FIRST                1st of new added                         
.*  1st new points back to old last                                             
         ST    &UREG#(2),LBP-LELEM(,&UREG#(3))                                  
.*  Old last points forward to new 1st                                          
         ST    &UREG#(3),LFP-LELEM(,&UREG#(2))                                  
         LSTCHK (&UREG#(1))                                                     
         MEND                                                                   
         PRINT ON                                                               
         SPACE 4                                                                
*********************************************************************           
*   Remove elements from a list                                                 
*                                                                               
*   Input                                                                       
*                                                                               
* &L  LREM     &HEAD,&FFIRST,&FCOUNT,&LAST=,&WR=,&WR2=RAR,&WR3=EPAR             
*                                                                               
*     &HEAD    is a pointer the head of the list (defop = LA)                   
*     &FFIRST  first element to be removed from the list (if not                
*              specified then take the first on the list)                       
*     &LAST    last element removed (must be specified for multiple             
*              removes, must not be specified for single remove)                
*     &FCOUNT  count of elements to be removed (shouldn't be                    
*              specified for single remove)                                     
*     &WR                                                                       
*     &WR2     Registers for scratch                                            
*     &WR3                                                                      
*                                                                               
*   Output                                                                      
*                                                                               
*     RVR      contains the address of the first element on the list            
*     No parameter registers are modified                                       
*                                                                               
*********************************************************************           
         PRINT OFF                                                              
         MACRO                                                                  
&L       LREM  &HEAD,&FFIRST,&FCOUNT,&LAST=,&WR=,&WR2=RAR,&WR3=EPAR             
         GBLA  &$REG#,&UREG#(0),&WREG#(0)                                       
         GBLB  &$OK                                                             
         GBLC  &PTYPE                                                           
         LCLA  &R,&P                                                            
         LCLC  &FIRST,&FLAST,&COUNT                                             
         LCLC  &PARM(4),&REGS(3)                                                
&FIRST   SETC  '&FFIRST'                                                        
&FLAST   SETC  '&LAST'                                                          
&COUNT   SETC  '&FCOUNT'                                                        
.*                                                                              
.*    Check for consistant operands for list remove                             
.*    There must be a LAST parameter for removing multiple elements             
.*  but if only one element is being removed, then the LAST                     
.*  parameter can't be specified (RVR points to the removed element)            
         AIF   ('&WR' NE '').WRSPEC                                             
         MNOTE 8,'Work register (WR=) must be specified'                        
         MEXIT                                                                  
.WRSPEC  ANOP                                                                   
         AIF   ('&FCOUNT' EQ '').NOFCNT,('&FCOUNT' EQ 'LA:1').NOFCNT            
         AIF   ('&FLAST' NE '').LTHERE                                          
         MNOTE 8,'LAST must be present for multiple removes'                    
         MEXIT                                                                  
.LTHERE  AGO   .FPARM                                                           
.NOFCNT  ANOP                                                                   
         AIF   ('&FLAST' EQ '').LNTHERE                                         
         MNOTE 8,'LAST can''t be there if COUNT isn''t there'                   
         MEXIT                                                                  
.LNTHERE ANOP                                                                   
&COUNT   SETC  ''                                                               
.FPARM   ANOP                                                                   
.*                                                                              
.*  Set up work register values                                                 
.*                                                                              
&R       SETA  3                                                                
&REGS(1) SETC  '&WR','&WR2','&WR3'                                              
.WRLOOP  ANOP                                                                   
        $RGLKUP &REGS(&R)                                                       
         AIF   (&$OK).NOWRERR                                                   
         MNOTE 8,'&REGS(&R) is not a valid HIBAL register'                      
         MEXIT                                                                  
.NOWRERR ANOP                                                                   
         AIF   (&$REG# NE 0).WROK                                               
         MNOTE 8,'Register 0 is not a valid work register'                      
         MEXIT                                                                  
.WROK    ANOP                                                                   
&WREG#(&R) SETA &$REG#                                                          
&R       SETA  &R-1                                                             
         AIF   (&R GE 1).WRLOOP                                                 
.*                                                                              
.*  Check that no parameters use one of the work registers                      
.*                                                                              
&PARM(1) SETC '&HEAD','&FIRST','&FLAST','&COUNT'                                
&P       SETA  4                                                                
.PLOOP   ANOP                                                                   
         AIF   ('&PARM(&P)' EQ '').NXTPARM                                      
        $LKPARM &PARM(&P)                                                       
         AIF   ('&PTYPE' NE 'REG').NXTPARM                                      
&R       SETA  3                                                                
.RLOOP   ANOP                                                                   
         AIF   (&$REG# NE &WREG#(&R)).NXTREG                                    
         MNOTE 8,'&PARM(&P) is the same as work register #&R'                   
         MEXIT                                                                  
.NXTREG  ANOP                                                                   
&R       SETA  &R-1                                                             
         AIF   (&R GE 1).RLOOP                                                  
.NXTPARM ANOP                                                                   
&P       SETA  &P-1                                                             
         AIF   (&P GE 1).PLOOP                                                  
&L       DS    0H                                                               
.*                                                                              
.*  Now do work of removing from list                                           
.*                                                                              
         LSTCHK &HEAD                                                           
        $RL    2,&HEAD,OP=LA           List head addr                           
.*       WITH  (LHEAD,W2)                                                       
         BEGIN ,                                                                
*JOIN                                                                           
         CLEAR (RVR)                   Preset as not enough avail               
.*        Check for count                                                       
        $RL    3,LHCNT-LHEAD(,&UREG#(2)),MOD=YES                                
         AIF   ('&COUNT' EQ '').NOCNT1                                          
&UREG#(1) SETA &WREG#(1)                        Set work register               
        $LKPARM &COUNT                                                          
         AIF   ('&PTYPE' EQ 'REG').CNT1REG                                      
        $L     &UREG#(1),&COUNT                 | number desired                
*JOIN                                                                           
         LTR   &UREG#(1),&UREG#(1)                                              
         AGO   .CNT1NRG                                                         
.CNT1REG ANOP  ,                                                                
         LTR   &UREG#(1),&$REG#                                                 
.CNT1NRG ANOP                                                                   
         IF    NPOS,EXIT                        | must be positive              
         AGO   .CNT1                                                            
.NOCNT1  ANOP                                                                   
        $RL    1,LA:1,MOD=YES                                                   
.CNT1    ANOP  ,                                                                
*JOIN                                                                           
         SR    &UREG#(3),&UREG#(1)                                              
         IF    NEG,EXIT                         | not enough                    
         ST    &UREG#(3),LHCNT-LHEAD(,&UREG#(2))                                
         AIF   ('&FIRST' EQ '').NO1ST                                           
        $RL    3,&FIRST,MOD=YES                 First to remove                 
         AGO   .NO1STX                                                          
.NO1ST   ANOP                                                                   
        $RL    3,LHFP-LHEAD(,&UREG#(2)),MOD=YES | default to list 1st           
.NO1STX  ANOP                                                                   
         LR    RVR,&UREG#(3)                    | save pointer                  
         AIF   ('&FIRST' EQ '').NO1ST2                                          
.*  For a remove from the front of a list, &UREG#(2) already has prev           
        $RL    2,LBP-LELEM(,&UREG#(3))          Old back pointer                
.NO1ST2  ANOP                                                                   
         AIF   ('&COUNT' EQ '').NOCNT2                                          
.*  Only removing 1 element                                                     
         LOOP  BEGIN                            Get all elements                
.NOCNT2  ANOP                                                                   
.*       WITH  (LELEM,W3)                                                       
         L     &UREG#(3),LFP-LELEM(,&UREG#(3))  next element                    
         AIF   ('&COUNT' EQ '').NOCNT3                                          
         UNTIL (BCT,R&UREG#(1)),END             OF Get all elements             
.NOCNT3  ANOP                                                                   
.*       WITH  (LELEM,W3),BEGIN        One past the last being rem              
         AIF   ('&FLAST' EQ '').NOLAST                                          
.*  Save the last element pointer                                               
        $LKPARM &FLAST                                                          
         AIF   ('&PTYPE' EQ 'REG').LREG                                         
         PMOV  &FLAST,LBP-LELEM(&UREG#(3))                                      
         AGO   .NOLAST                                                          
.LREG    ANOP                                                                   
         L     &$REG#,LBP-LELEM(,&UREG#(3))                                     
.NOLAST  ANOP  ,                                                                
         ST    &UREG#(2),LBP-LELEM(,&UREG#(3))  Point back past rem             
.*       END   ,                       OF One past the last being rem           
         ST    &UREG#(3),LFP-LELEM(,&UREG#(2))  Point fwd around rem            
         END   ,                                                                
         MEND                                                                   
         PRINT ON                                                               
         SPACE 4                                                                
*********************************************************************           
*   Remove all elements from a list                                             
*                                                                               
*   Input                                                                       
*                                                                               
* &L  LREMALL  &HEAD,&COUNT=,&LAST=,&WR=                                        
*                                                                               
*     &HEAD    is a pointer the head of the list (defop = LA)                   
*     &LAST    returns last element removed (must be specified)                 
*     &COUNT   returns count of elements in list                                
*                                                                               
*     &WR      Register for scratch                                             
*                                                                               
*   Output                                                                      
*                                                                               
*     RVR      contains the address of the first element on the list            
*                                                                               
*     No parameter registers are modified                                       
*                                                                               
*********************************************************************           
         PRINT OFF                                                              
         MACRO                                                                  
&L       LREMALL &HEAD,&COUNT=,&LAST=,&WR=                                      
         GBLA  &$REG#,&UREG#(0),&WREG#(0)                                       
         GBLB  &$OK                                                             
         GBLC  &PTYPE                                                           
         LCLA  &R,&P                                                            
         LCLC  &FIRST,&FLAST,&FCOUNT                                            
         LCLC  &PARM(4),&REGS(3)                                                
&FLAST   SETC  '&LAST'                                                          
&FCOUNT  SETC  '&COUNT'                                                         
.*                                                                              
.*    Check for consistant operands for list remove                             
         AIF   ('&WR' NE '').WRSPEC                                             
         MNOTE 8,'Work register (WR=) must be specified'                        
         MEXIT                                                                  
.WRSPEC  ANOP                                                                   
.*                                                                              
.*    There must be a LAST parameter                                            
         AIF   ('&FLAST' NE '').LTHERE                                          
         MNOTE 8,'LAST must be present for multiple removes'                    
         MEXIT                                                                  
.LTHERE  ANOP  ,                                                                
.*                                                                              
.*  Set up work register values                                                 
.*                                                                              
&R       SETA  1                                                                
&REGS(1) SETC  '&WR'                                                            
.WRLOOP  ANOP                                                                   
        $RGLKUP &REGS(&R)                                                       
         AIF   (&$OK).NOWRERR                                                   
         MNOTE 8,'&REGS(&R) is not a valid HIBAL register'                      
         MEXIT                                                                  
.NOWRERR ANOP                                                                   
         AIF   (&$REG# NE 0).WROK                                               
         MNOTE 8,'Register 0 is not a valid work register'                      
         MEXIT                                                                  
.WROK    ANOP                                                                   
&WREG#(&R) SETA &$REG#                                                          
&R       SETA  &R-1                                                             
         AIF   (&R GE 1).WRLOOP                                                 
.*                                                                              
.*  Check that no parameters use one of the work registers                      
.*                                                                              
&PARM(1) SETC '&HEAD','&FCOUNT','&FLAST'                                        
&P       SETA  3                                                                
.PLOOP   ANOP                                                                   
         AIF   ('&PARM(&P)' EQ '').NXTPARM                                      
        $LKPARM &PARM(&P)                                                       
         AIF   ('&PTYPE' NE 'REG').NXTPARM                                      
&R       SETA  1                                                                
.RLOOP   ANOP                                                                   
         AIF   (&$REG# NE &WREG#(&R)).NXTREG                                    
         MNOTE 8,'&PARM(&P) is the same as work register #&R'                   
         MEXIT                                                                  
.NXTREG  ANOP                                                                   
&R       SETA  &R-1                                                             
         AIF   (&R GE 1).RLOOP                                                  
.NXTPARM ANOP                                                                   
&P       SETA  &P-1                                                             
         AIF   (&P GE 1).PLOOP                                                  
&L       DS    0H                                                               
.*                                                                              
.*  Now do work of removing from list                                           
.*                                                                              
         LSTCHK &HEAD                                                           
         PMOV  &FCOUNT,&HEAD+(LHCNT-LHEAD),SLEN=L'LHCNT Count of list           
         CLEAR (RVR)                                                            
         AIF   ('&FCOUNT'(1,1) NE '(').NOREGC                                   
&FCOUNT  SETC  '&FCOUNT'(2,K'&FCOUNT-2)                                         
.NOREGC  ANOP  ,                                                                
         IF    (&FCOUNT,NZ),BEGIN                                               
         ST    RVR,&HEAD+(LHCNT-LHEAD)                  Clear count             
         PMOV  (RVR),&HEAD+(LHFP-LHEAD),SLEN=L'LHFP     First in list           
         PMOV  &FLAST,&HEAD+(LHBP-LHEAD),SLEN=L'LHBP    Last in list            
.*                                                                              
.*  Set list as empty                                                           
.*                                                                              
        $RL    1,&HEAD,OP=LA                                                    
         ST    &UREG#(1),LHFP-LHEAD(,&UREG#(1))                                 
         ST    &UREG#(1),LHBP-LHEAD(,&UREG#(1))                                 
         END   ,                                                                
         MEND  ,                                                                
         PRINT ON                                                               
         EJECT                                                                  
*********************************************************************           
*   Move an element to the end of a list                                        
*                                                                               
*   Input                                                                       
*                                                                               
* &L  LLRU     &HEAD,&ELEM,&WR=,&WR2=RAR,&WR3=EPAR                              
*                                                                               
*     &HEAD    is a pointer the head of the list (defop = LA)                   
*     &ELEM    element to be put at the end of the list                         
*     &WR                                                                       
*     &WR2     Registers for scratch                                            
*     &WR3                                                                      
*                                                                               
*   Output                                                                      
*                                                                               
*     No parameter registers are modified                                       
*                                                                               
*********************************************************************           
         PRINT OFF                                                              
         MACRO                                                                  
&L       LLRU  &HEAD,&ELEM,&WR=,&WR2=RAR,&WR3=EPAR                              
         GBLA  &$REG#,&UREG#(0),&WREG#(0)                                       
         GBLB  &$OK                                                             
         GBLC  &PTYPE                                                           
         LCLA  &R,&P                                                            
         LCLC  &PARM(2),&REGS(3)                                                
.*                                                                              
.*    Check for consistant operands for list Least-Recently-Used                
.*    There must be an ELEM parameter and a &HEAD parameter                     
         AIF   ('&WR' NE '').WRSPEC                                             
         MNOTE 8,'Work register (WR=) must be specified'                        
         MEXIT                                                                  
.WRSPEC  ANOP                                                                   
         AIF   (('&ELEM' NE '') AND ('&HEAD' NE '')).POK                        
         MNOTE 8,'HEAD and ELEM parameters must be present'                     
         MEXIT                                                                  
.POK     ANOP                                                                   
.*                                                                              
.*  Set up work register values                                                 
.*                                                                              
&R       SETA  3                                                                
&REGS(1) SETC  '&WR','&WR2','&WR3'                                              
.WRLOOP  ANOP                                                                   
        $RGLKUP &REGS(&R)                                                       
         AIF   (&$OK).NOWRERR                                                   
         MNOTE 8,'&REGS(&R) is not a valid HIBAL register'                      
         MEXIT                                                                  
.NOWRERR ANOP                                                                   
         AIF   (&$REG# NE 0).WROK                                               
         MNOTE 8,'Register 0 is not a valid work register'                      
         MEXIT                                                                  
.WROK    ANOP                                                                   
&WREG#(&R) SETA &$REG#                                                          
&R       SETA  &R-1                                                             
         AIF   (&R GE 1).WRLOOP                                                 
.*                                                                              
.*  Check that no parameters use one of the work registers                      
.*                                                                              
&PARM(1) SETC '&HEAD','&ELEM'                                                   
&P       SETA  2                                                                
.PLOOP   ANOP                                                                   
         AIF   ('&PARM(&P)' EQ '').NXTPARM                                      
        $LKPARM &PARM(&P)                                                       
         AIF   ('&PTYPE' NE 'REG').NXTPARM                                      
&R       SETA  3                                                                
.RLOOP   ANOP                                                                   
         AIF   (&$REG# NE &WREG#(&R)).NXTREG                                    
         MNOTE 8,'&PARM(&P) is the same as work register #&R'                   
         MEXIT                                                                  
.NXTREG  ANOP                                                                   
&R       SETA  &R-1                                                             
         AIF   (&R GE 1).RLOOP                                                  
.NXTPARM ANOP                                                                   
&P       SETA  &P-1                                                             
         AIF   (&P GE 1).PLOOP                                                  
&L       DS    0H                                                               
.*                                                                              
.*  Now do work putting element at end of list                                  
.*                                                                              
        $RL    1,&ELEM                 Element address                          
.*       WITH  (LELEM,1),BEGIN                                                  
        $RL    2,LBP-LELEM(,&UREG#(1)) Back pointer                             
        $RL    3,LFP-LELEM(,&UREG#(1)) Fwd pointer                              
.*       END   ,                                                                
         ST    &UREG#(3),LFP-LELEM(,&UREG#(2))  Point fwd around                
         ST    &UREG#(2),LBP-LELEM(,&UREG#(3))  Point back around               
        $RL    2,&HEAD,OP=LA                    Head of list                    
.*       WITH  (HEAD,2),BEGIN                                                   
        $RL    3,LHBP-LHEAD(,&UREG#(2))         Old end of list                 
         ST    &UREG#(1),LHBP-LHEAD(,&UREG#(2)) Put at end                      
.*       END   ,                                                                
         ST    &UREG#(1),LFP-LELEM(,&UREG#(3))  Old end => new end              
.*       WITH  (LELEM,1),BEGIN                                                  
         AIF   (&UREG#(2) EQ &UREG#(3)-1).DOSTM                                 
         ST    &UREG#(2),LFP-LELEM(,&UREG#(1))  Point fwd to head               
         ST    &UREG#(3),LBP-LELEM(,&UREG#(1))  Point back at old end           
         AGO   .NOSTM                                                           
.DOSTM   ANOP                                                                   
         STM   &UREG#(2),&UREG#(3),LFP-LELEM(&UREG#(1))                         
.NOSTM   ANOP                                                                   
.*       END   ,                                                                
         MEND  ,                                                                
         PRINT ON                                                               
         SPACE                                                                  
         MACRO                                                                  
         LSTCHK &HEAD                                                           
         MEXIT                                                                  
         PSET  @LSTCHK,CLEAR=NO                                                 
        $LA    EPAR,&HEAD                                                       
         ST    EPAR,@LCHEAD                                                     
         ACALL LSTCHK                                                           
         MEND                                                                   
