MISC     TITLE 'MILTEN''s Miscellaneous Utility Routines'                       
*******************************************************************             
*                                                                 *             
*     MILTEN/370 - Release VI - Class I - Stanford Proprietary    *             
*                                                                 *             
*******************************************************************             
         HIBAL                                                                  
*                                                                               
         SYSDEFN                                                                
         GBLC  &ZONE,&ALTZONE      Time zones                                   
*                                                                               
         PUSH  DSECTS                                                           
CVDSECT  DSECT                                                                  
         COPY  CV                                                               
*                                                                               
         CVT   DSECT=YES                                                        
         POP   DSECTS                                                           
*                                                                               
MILMISC  CSECT                                                                  
         REGS  ,,(FSR,SR),TR,RR,NR,PR,,BR,,,,(SCANCBR,LSR),SPR,RAR              
CVR      REG   R12                                                              
         SPACE 2                                                                
MISC     IDENT 4072                10:31:57 03/12/04  (SLP)                     
*                                                                               
         USING DEC,R6                                                           
         TITLE 'DSECTS'                                                         
*                                                                               
* Work area used for date and time routines                                     
*                                                                               
STCKCVWA RECORD BEGIN                                                           
STCKCVCK DS    XL8                 Clock value to be converted                  
STCKCVVL DS    CL16                Converted output value                       
STCKEDIT DS    XL32                EDIT Work area                               
         END                                                                    
*                                                                               
*  Work area used by conversion routines                                        
*                                                                               
WA       RECORD BEGIN                                                           
         DS    F                   Double word insurance                        
DW       DS    2F                  Double word                                  
HEXW     DS    F                                                                
HEXS     DS    CL16                                                             
*                                                                               
         ORG   HEXW                Work area for FMTXDATE                       
SAVEDAY  DS    F                   Save area for day-of-week                    
SAVEDATE DS    F                   Save area for day-of-month                   
         ORG   ,                                                                
*                                                                               
REDITWA  DS    CL17                                                             
         END                                                                    
         SPACE 2                                                                
DEC      RECORD 'DS D'                                                          
         TITLE 'Conversion Routines'                                            
*  decimal to binary conversion                                                 
*                                                                               
DTB      XPROC                                                                  
         CLEAR R15                 Clear result                                 
DTBL     LTR   R0,R0               Done?                                        
         BNP   DTBX                                                             
         CLI   @R1,C'0'            Digit?                                       
         BL    DTBX                Br if too low                                
         CLI   @R1,C'9'                                                         
         BH    DTBX                Br if too high                               
         LC    R2,@R1                                                           
         SL    R2,=A(C'0')                                                      
         MH    R15,=H'10'          Build result                                 
         ALR   R15,R2                                                           
         LA    R1,@R1+1                                                         
         DECR  R0                                                               
         B     DTBL                                                             
DTBX     PEND  *                                                                
         EJECT                                                                  
*  hexadecimal to binary conversion                                             
*                                                                               
XTB      XPROC                                                                  
         CLEAR R15                                                              
XTBL     LTR   R0,R0               Done?                                        
         BNP   XTBX                Br if so                                     
         LC    R2,@R1              Pick up digit                                
         CLI   @R1,C'A'                                                         
         BL    XTBN                                                             
         CLI   @R1,C'F'                                                         
         BH    XTBN                                                             
         SL    R2,=A(C'A'-10)                                                   
         B     XTBB                                                             
*                                                                               
XTBN     CLI   @R1,C'0'                                                         
         BL    XTBX                                                             
         CLI   @R1,C'9'                                                         
         BH    XTBX                                                             
         SL    R2,=A(C'0')                                                      
XTBB     SLL   R15,4               Add new digit in                             
         OR    R15,R2                                                           
         LA    R1,@R1+1            Next digit                                   
         DECR  R0                                                               
         B     XTBL                                                             
*                                                                               
XTBX     PEND  *                                                                
         EJECT                                                                  
*  binary to decimal conversion                                                 
*                                                                               
BTD      XPROC WA                                                               
         LA    R6,DW               Get a double word                            
         N     R6,=XL4'FFFFF8'                                                  
         CVD   R15,DEC             Convert number to packed                     
         MVC   HEXS(16),ED15       Edit mask                                    
         LR    R4,1                Save result loc.                             
         LA    R1,HEXS+15                                                       
         EDMK  HEXS(16),DEC                                                     
         LTR   R15,R15             Negative?                                    
         BNM   *+10                Br if not                                    
         DECR  R1                  Put in a sign                                
         MVI   @R1,C'-'                                                         
         LA    R3,HEXS+16          Compute actual length                        
         SR    R3,R1                                                            
         LR    R1,R4               Restore result pointer                       
         LTR   R0,R0               Field size given?                            
         BP    *+8                 Br if so                                     
         LCR   R0,R0                                                            
         AR    R0,R3               Compute field size                           
         LR    R3,R0               Field length                                 
         LA    R2,HEXS+16          Compute starting addr                        
         SR    R2,R3                                                            
         DEX   R3,BTDMV            Move to result loc.                          
         PEND  *                                                                
*                                                                               
BTDMV    MVC   @R1(0),@R2                                                       
*                                                                               
ED15     DC    C' ',13X'20',X'2120'                                             
         EJECT                                                                  
*  binary to hexadecimal conversion                                             
*                                                                               
BTX      XPROC WA                                                               
         ST    R15,HEXW            Word to be converted                         
         UNPK  HEXS(9),HEXW(5)     To zoned format                              
         TR    HEXS(8),HEXTBL-C'0' To hex format                                
         LTR   R3,R0               Length                                       
         BZ    BTX0                Zero means calculate it                      
         LA    R2,HEXS+8           Compute addr to move from                    
         SR    R2,R3                                                            
         DECR  R3                                                               
BTXC     EX    R3,HEXMV            Move to users area                           
         EXIT                                                                   
*                                                                               
BTX0     LA    R2,HEXS-1                                                        
         LA    R3,7                                                             
BTXCHK0  LA    R2,@R2+1            Bump                                         
         CLI   @R2,C'0'            Start of non-zero stuff?                     
         BNE   BTXX                No, branch                                   
         BCT   R3,BTXCHK0          Loop if not last dig                         
         LA    R2,@R2+1            Point to last digit                          
BTXX     LA    R0,@R3+1            Get real length in r0                        
*              now return with r3 having the length in ex form                  
         B     BTXC                                                             
*                                                                               
         PEND  *                                                                
*                                                                               
HEXMV    MVC   @R1(0),@R2                                                       
         EJECT                                                                  
*  binary to real conversion                                                    
*                                                                               
BTR      XPROC WA                                                               
*** r15 has value, r1 has output addr, r0 = length*256+no of digits             
         LA    R6,DW               Set up                                       
         N     R6,=F'-8'           Double word                                  
         LR    R5,R1               Save output pointer                          
         CVD   R15,DEC                                                          
         LA    R2,X'07'            Get number                                   
         NR    R2,R0               ...of digits                                 
         LA    R3,BTREDMSK(R2)     Get start of mask to use                     
         LA    R1,REDITWA+15       Default starting point                       
         SR    R1,R2               Minus offset                                 
         MVC   REDITWA,@R3         Get mask                                     
         MVI   REDITWA,C' '        First byte is pad char                       
         EDMK  REDITWA,DEC         Edit number                                  
         IF    (R15,NEG),'DECR R1; MVI @R1,C"-"'                                
         SRA   R0,8                Get number of digits to produce              
         IF    Z,BEGIN             If 0, use as much as necessary               
         LA    R0,REDITWA+L'REDITWA  r1 points to start,                        
         SR    R0,R1               Get length in r0                             
         END                                                                    
         ELSE  BEGIN                                                            
         LA    R1,REDITWA+L'REDITWA  r0 has length,                             
         SR    R1,R0               Get start in r1                              
         END                                                                    
         LR    R2,R0               Length in r2 for execute                     
         DEX   R2,'MVC @R5(0),@R1' Move to output area                          
         LR    R1,R5               Set r1 to point to output                    
         PEND                                                                   
*                                                                               
         DROP  DEC                                                              
         EJECT                                                                  
*box                                                                            
*                                                                               
*  LOCALTOD -- Routine to obtain the local time and date in                     
*              STCK format.                                                     
*                                                                               
*    On entry:                                                                  
*      No entry parameters                                                      
*                                                                               
*    On exit:                                                                   
*      R0,R1 contain the local time in STCK format.                             
*                                                                               
*    Notes: This code comes from a message on dejanews posted                   
*           by William H. Blair for IBM-MAIN list.                              
*                                                                               
*           Assuming the TOD clock is set to International Atomic               
*           Time (TAI), then:                                                   
*               UTC        = TOD - CVTLSO                                       
*                    and                                                        
*               Local time = UTC + CVTLDTO                                      
*                                                                               
*           If the TOD clock is set to UTC ("GMT"), then CVTLSO                 
*           will be (or should be) zero.  CVTLDTO is a TOD                      
*           clock-format (64 bit) "time zone offset" value                      
*           (don't use the old CVTTZ field, which is just                       
*           the high-order word of the CVTLDTO field).                          
*                                                                               
LOCALTOD XPROC                                                                  
         STCK  @R13                                                             
         LM    R0,R1,@R13                                                       
         L     R2,CVTPTR                                                        
         WITH  (CVT,R2),'L R2,CVTEXT2'                                          
         WITH  (CVTXTNT2,R2),BEGIN                                              
         SDL   R0,CVTLSO                                                        
         ADL   R0,CVTLDTO                                                       
         END                                                                    
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FMTCLCK -- Routine to format time/date from TOD clock.                       
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*      R15   - return area (30 bytes)                                           
*                                                                               
*    On exit:                                                                   
*      R1,R0 - text loc, len    returns: hh:mm:ss mm/dd/yyyy (yyyy.ddd)         
*                                                                               
FMTCLCK  XPROC                                                                  
         LR    R6,R15                                                           
         MVC   @R6(30),BLANKS                                                   
*                                                                               
         LR    R4,R0                                                            
         LR    R5,R1                                                            
         LCALL FMTTIME             hh:mm:ss.hh                                  
         MVC   8(3,R6),BLANKS      Don't want hundredths                        
*                                                                               
         LR    R0,R4                                                            
         LR    R1,R5                                                            
         LA    R15,@R6+9                                                        
         LCALL FMTDATE             Mm/dd/yyyy                                   
*                                                                               
         MVI   @R6+20,C'('                                                      
         LR    R0,R4                                                            
         LR    R1,R5                                                            
         LA    R15,@R6+21                                                       
         LCALL FMTJUL              yyyy.ddd                                     
         MVI   @R6+29,C')'                                                      
*                                                                               
         SETMSG @R6,30                                                          
*                                                                               
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FMTRCLCK -- Routine to format time/conditional-date from TOD                 
*    clock.                                                                     
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*      R2-R3 - 64 bit comparison clock                                          
*      R15   - return area (16 bytes)                                           
*                                                                               
*    On exit:                                                                   
*      R1,R0 - text loc,len    returns: hh:mm -or- hh:mm mm/dd/yyyy             
*                                                                               
FMTRCLCK XPROC                                                                  
         LR    R6,R15                                                           
         MVC   @R6(16),BLANKS                                                   
*                                                                               
         LR    R4,R0                                                            
         LR    R5,R1                                                            
         PUSH  11,PTR=R15                                                       
         LCALL FMTTIME                                                          
         MVC   @R6(5),@R1          "hh:mm"                                      
*                                                                               
         LR    R15,R1                                                           
         LR    R0,R4                                                            
         LR    R1,R5                                                            
         LCALL FMTDATE                                                          
         MVC   @R6+6(10),@R1        "mm/dd/yyyy"                                
         POP   11                                                               
*                                                                               
         LR    R0,R4                                                            
         LA    R1,R5                                                            
         LCALL TIMEDATE            Get date in R1                               
         LR    R5,R1                                                            
*                                                                               
         LR    R0,R2                                                            
         LR    R1,R3                                                            
         LCALL TIMEDATE            Get "comparison" date in R1                  
*                                                                               
         IF    (R1,EQ,R5),'SETMSG @R6,5'  same day                              
         ELSE  'SETMSG @R6,16'                                                  
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FMTTIME -- Routine to format time from TOD clock.                            
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*      R15   - return area (11 bytes)                                           
*                                                                               
*    On exit:                                                                   
*      R1,R0 - text loc, len    returns: hh:mm:ss.hh                            
*                                                                               
FMTTIME  XPROC STCKCVWA                                                         
         STM   R0,R1,STCKCVCK      Save the clock value                         
*                                                                               
         LR    R6,R15                                                           
         MVC   @R6(11),BLANKS                                                   
         STCKCONV STCKVAL=STCKCVCK,CONVVAL=STCKCVVL,DATETYPE=MMDDYYYY           
*                                                                               
         IF    (R15,Z),BEGIN                                                    
         MVC   STCKEDIT(12),=X'F021207A20207A20204B2020'  HH:MM:SS.HH           
         ED    STCKEDIT(12),STCKCVVL                                            
         MVC   0(11,R6),STCKEDIT+1                                              
         END                                                                    
*                                                                               
         SETMSG @R6,11                                                          
*                                                                               
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FMTDATE -- Routine to format date from TOD clock.                            
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*      R15   - return area (10 bytes)                                           
*                                                                               
*    On exit:                                                                   
*      R1,R0 - text loc,len    returns: mm/dd/yyyy                              
*                                                                               
FMTDATE  PROC  STCKCVWA                                                         
         STM   R0,R1,STCKCVCK      Save the clock value                         
*                                                                               
         LR    R6,R15                                                           
         MVC   @R6(10),BLANKS                                                   
*                                                                               
         STCKCONV STCKVAL=STCKCVCK,CONVVAL=STCKCVVL,DATETYPE=MMDDYYYY           
*                                                                               
         IF    (R15,Z),BEGIN                                                    
         MVC   STCKEDIT(11),=X'F021206120206120202020'  MM/DD/YYYY              
         ED    STCKEDIT(11),STCKCVVL+8                                          
         MVC   @R6(10),STCKEDIT+1                                               
         END                                                                    
*                                                                               
         SETMSG @R6,10                                                          
*                                                                               
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FMTJUL -- routine to format julian date from TOD clock.                      
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*      R15   - return area (8 bytes)                                            
*                                                                               
*    On exit:                                                                   
*      R1,R0 - text loc,len    returns: yyyy.ddd                                
*                                                                               
FMTJUL   PROC  STCKCVWA                                                         
         LR    R6,R15                                                           
         MVC   0(8,R6),BLANKS                                                   
*                                                                               
         STCKCONV STCKVAL=STCKCVCK,CONVVAL=STCKCVVL                             
         IF    (R15,Z),BEGIN                                                    
         MVC   STCKEDIT(10),=X'F020212020204B202020'                            
         ED    STCKEDIT(10),STCKCVVL+8                                          
         MVC   0(8,R6),STCKEDIT+2                                               
         END                                                                    
*                                                                               
         SETMSG @R6,8                                                           
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TIMEDATE -- Routine to calculate time/date from TOD clock.                   
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*                                                                               
*    On exit:                                                                   
*      R0 - time (in .01 sec's past midnight)                                   
*      R1 - date (in "0yyyyddd" format)                                         
*                                                                               
TIMEDATE XPROC STCKCVWA                                                         
         STM   R0,R1,STCKCVCK      Save the clock value                         
*                                                                               
         STCKCONV STCKVAL=STCKCVCK,CONVVAL=STCKCVVL,TIMETYPE=BIN                
*                                                                               
         IF    (R15,Z),BEGIN                                                    
         L     R0,STCKCVVL         Get time                                     
         L     R1,STCKCVVL+8        and date                                    
         END                                                                    
*                                                                               
         ELSE  BEGIN                                                            
         CLEAR R0,R1                                                            
         END                                                                    
         PEND                                                                   
         EJECT                                                                  
BTREDMSK DC    0CL24' ',14X'20',X'2120',C'.',7X'20'                             
HEXTBL   DC    C'0123456789ABCDEF'                                              
*                                                                               
         QLTORG                                                                 
         TITLE 'Routine To Dequote A String'                                    
*box                                                                            
*                                                                               
*  DEQUOTE/DEQSTR -- Routine to dequote string.                                 
*                                                                               
*   On entry:                                                                   
*     R1,R0 - string loc,len                                                    
*     R15   - output string loc (only for "DEQSTR" entry)                       
*                                                                               
*   On exit, CC:                                                                
*     NEG   - not a string (r1,r0 - same as on entry)                           
*     Z,POS - string dequoted (r1,r0 - loc,len of dequoted string)              
*                                                                               
         ENTRY DEQUOTE                                                          
DEQUOTE  LA    R15,@R1+1           De-quote string in place                     
*                                                                               
DEQSTR   XPROC                                                                  
         IF    (R0,LT,2),DQBAD     Bad string                                   
         IF    ((@R1,NE,''''),AND,(@R1,NE,'"')),DQBAD                           
*                                                                               
         DECR  R0                  Strip off outer quotes                       
         DECR  R0                                                               
         LR    R4,R1               Remember kind of quote                       
         LA    R6,@R1+1            Inp ptr                                      
         LR    R1,R15                                                           
         LR    R5,R0                                                            
         WHILE (R5,POS),BEGIN                                                   
         MVC   @R15(0),@R6                                                      
         IF    ('CLC @R15(1),@R4',EQ),'LA R6,@R6+1; DECR R5; DECR R0'           
         LA    R15,@R15+1                                                       
         LA    R6,@R6+1                                                         
         DECR  R5                                                               
         END                                                                    
         LTR   R0,R0               Set cc                                       
         EXIT                                                                   
*                                                                               
DQBAD    LNR   R4,BR               Set cc=neg                                   
         PEND  *                                                                
         TITLE 'Routine to Convert Hex Digits to String'                        
*box                                                                            
*                                                                               
*  HEXCONV/HEXSTR -- Routine to convert hex digits to binary.                   
*                                                                               
*    On entry:                                                                  
*      R1,R0 - string loc,len                                                   
*      R15   - output string loc (only for "HEXSTR" entry)                      
*                                                                               
*    On exit, CC:                                                               
*      neg   - bad hex string (R1,R0 - as on entry)                             
*      z,pos - hex string converted. CC set by string len.                      
*                (R1,R0 - string loc, len)                                      
*                                                                               
HEXWA    RECORD BEGIN                                                           
HEXPTRS  DS    2A                  Saved ptrs                                   
HEXWORK  DS    D                   Working area                                 
         END                                                                    
*-                                                                              
HEXSTR   XPROC HEXWA                                                            
         IF    ((@R1,EQ,''''),OR,(@R1,EQ,'"')),BEGIN  string quotes...          
         LA    R1,@R1+1                                                         
         SH    R0,=Y(2)                                                         
         END                                                                    
*                                                                               
         STM   R0,R1,HEXPTRS       Ptrs restored if bad hex                     
*                                                                               
         LR    R6,R15              Output string ptr                            
         CLEAR R5                  Output string len                            
         CLEAR R4,R3               Ic regs                                      
*                                                                               
         WHILE (R0,POS),BEGIN                                                   
         ST    R0,HEXWORK                                                       
         IF    HEXWORK+3.1,BEGIN   Odd no. of digits...                         
         MVI   HEXWORK,C'0'                                                     
         MVC   HEXWORK+1(1),@R1                                                 
         LA    R1,@R1+1                                                         
         DECR  R0                                                               
         END                                                                    
         ELSE  BEGIN               Even no. of digits...                        
         MVC   HEXWORK(2),@R1                                                   
         LA    R1,@R1+2            Kick ptr                                     
         SH    R0,=Y(2)            & remaining len                              
         END                                                                    
         OC    HEXWORK(2),=C'  '   Upper case                                   
*-                                                                              
*-       First digit.                                                           
*-                                                                              
         IF    (HEXWORK,LT,'A'),HEXBAD                                          
         IC    R3,HEXWORK          Get char                                     
         LA    R2,C'A'-10          Assume alpha adjustment                      
         IF    (HEXWORK,GT,'F'),BEGIN                                           
         IF    ((HEXWORK,LT,'0'),OR,(HEXWORK,GT,'9')),HEXBAD                    
         LA    R2,C'0'             Numeric adjustment                           
         END                                                                    
         SR    R3,R2               Binary                                       
*-                                                                              
*-       Second digit.                                                          
*-                                                                              
         IF    (HEXWORK+1,LT,'A'),HEXBAD                                        
         IC    R4,HEXWORK+1         Get char                                    
         LA    R2,C'A'-10          Assume alpha adjustment                      
         IF    (HEXWORK+1,GT,'F'),BEGIN                                         
         IF    ((HEXWORK+1,LT,'0'),OR,(HEXWORK+1,GT,'9')),HEXBAD                
         LA    R2,C'0'             Numeric adjustment                           
         END                                                                    
         SR    R4,R2               Binary                                       
*                                                                               
         SLL   R3,4                Move high byte over                          
         AR    R3,R4               Form byte                                    
         STC   R3,@R6(R5)                                                       
         LA    R5,@R5+1                                                         
         END                                                                    
         LR    R1,R6               Loc                                          
         LR    R0,R5               Len                                          
         LR    R15,R0              Set rc                                       
         EXIT                                                                   
*                                                                               
HEXBAD   LM    R0,R1,HEXPTRS       Restore orig ptrs                            
         LH    R15,=H'-1'          Set cc=neg                                   
         PEND                                                                   
         TITLE 'Token scanners'                                                 
*box                                                                            
*                                                                               
*   SCANTOK -- Routine to scan off the next token; bypassing                    
*     all the scanner's complicated rules and upper casing.                     
*                                                                               
*     On exit, R15 (and cc):                                                    
*       R15   - 0: token returned; 4: no more text                              
*       R1,R0 - token loc, len                                                  
*       (scan loc, len updated)                                                 
*                                                                               
*       CVTOKLOC - string addr                                                  
*       CVTOKLEN - string length                                                
*       CVTOKEN  - 16 byte isolated token                                       
*       CVTOKUPP - 16 byte capitalized token                                    
*                                                                               
SCANTOK  XPROC (R2,LSR)                                                         
         WITH  CV                  Entry assumption                             
*                                                                               
         MVC   CVTOKEN,CVBLANKS                                                 
         MVC   CVTOKUPP,CVBLANKS                                                
*                                                                               
         LH    R2,CVTOKLEN                                                      
         L     R3,CVTOKLOC         Get remaining len and addr                   
*-                                                                              
*-       Skip leading separators.                                               
*-                                                                              
         WHILE ((R2,POS),AND,                                          *        
               ((@R3,EQ,' '),OR,(@R3,EQ,','),OR,(@R3,EQ,'='))),BEGIN            
         INCR R3                                                                
         DECR R2                                                                
         END                                                                    
*-                                                                              
*-       Scan off the next token.                                               
*-                                                                              
         IF    (R2,POS),BEGIN      We have some text...                         
*-                                                                              
*-       Find ending separator.                                                 
*-                                                                              
         LR    R1,R3               Save start of token ptr                      
*                                                                               
         WHILE ((R2,POS),AND,                                          *        
               (@R3,NE,' '),AND,                                       *        
               (@R3,NE,'='),AND,                                       *        
               (@R3,NE,',')),BEGIN                                              
         INCR R3                                                                
         DECR R2                                                                
         END                                                                    
*                                                                               
         LR    R0,R3               Compute                                      
         SR    R0,R1                 token length                               
*                                                                               
         STH   R2,CVTOKLEN                                                      
         ST    R3,CVTOKLOC         Update scanner info                          
*                                                                               
         LR    R2,R0                                                            
         CEIL  R2,L'CVTOKEN                                                     
         MOVE  R2,CVTOKEN,@R1      Save token                                   
*                                                                               
         MVC   CVTOKUPP,CVTOKEN    Copy it                                      
         L     R15,CVUPPTBL                                                     
         TR    CVTOKUPP,@R15       Capitalized token                            
*                                                                               
         CLEAR R15                 Set A-ok RC                                  
         END                                                                    
*-                                                                              
*-       No more text to scan.                                                  
*-                                                                              
         ELSE  BEGIN               No more text...                              
         CLEAR R0,R1               Null token                                   
         LA    R15,4               Set RC                                       
         END                                                                    
*                                                                               
         PEND                                                                   
         EJECT                                                                  
         TITLE 'SEG Routines'                                                   
SEGCB    RECORD 'SEGCB'                                                         
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  SEGINIT/SEGINITR --                                                          
*    Routine to initialize the SEGCB control block.                             
*                                                                               
*    On entry:                                                                  
*      R1,R0 - location & length of seg buffer                                  
*      R15   - SEGCB ptr                                                        
*                                                                               
*  NOTE (01/23/91):                                                             
*  SEGINIT ROUTINE CHANGED TO SEGINITR (INIT ROUTINE) AND                       
*  SEGINITB (INIT BUFFER).  THIS WAS DONE TO ELIMINATE THE                      
*  PASSING THE ROUTINE AS AN INLINE 'DC A(ROUTINE)'.                            
*  SEGINITR SHOULD BE CALLED FIRST. IT CLEARS THE SEGCB.                        
*                                                                               
*                                                                               
SEGINIT  XPROC                                                                  
         WITH  (SEGCB,R15),BEGIN                                                
         CLEAR SEGCB               Init                                         
         ST    R0,SEGCBMAXF        Save max seg buffer length                   
         ST    R1,SEGCBLOC         ... and location                             
         END                                                                    
         PEND                                                                   
*                                                                               
*                                                                               
SEGINITR XPROC                                                                  
         WITH  (SEGCB,R15),BEGIN                                                
         ST    R0,SEGCBRTN         Save processing routine addr                 
         END                                                                    
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGB -- Routine to add segment to buffer followed by a blank.                
*    (Same entry conventions as "SEG" routine below.)                           
*                                                                               
SEGB     XPROC                                                                  
         LR    R6,R15              Save segcb ptr                               
         LCALL SEG                                                              
         SEG   ' ',,(R6)                                                        
         PEND                                                                   
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  SEGTB -- Routine to add "trimmed" segment to buffer followed by              
*    a blank.  (Same entry conventions as "SEG" routine below.)                 
*                                                                               
SEGTB    XPROC                                                                  
         LR    R6,R15              Save segcb ptr                               
         LCALL SEGT                                                             
         SEG   ' ',,(R6)                                                        
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGCR -- Routine to add segment to buffer followed by a carriage             
*    return.  (Same entry conventions as "SEG" routine below.)                  
*                                                                               
SEGCR    XPROC                                                                  
         LR    R6,R15              Save segcb ptr                               
         LCALL SEG                                                              
*                                                                               
         WITH  (SEGCB,R6),BEGIN                                                 
         SET   SEGCBCR             Set function code for exit routine           
         L     R1,SEGCBLOC         Location of buffer                           
         L     R0,SEGCBLENF        Length                                       
         LR    R15,R6              Segcb ptr                                    
         IF    ('LT RAR,SEGCBRTN',NZ),BEGIN                                     
         BASR  RAR,RAR             Go off to exit routine                       
         END                                                                    
*                                                                               
         ELSE  BEGIN                                                            
         SEG   X'15',,(R6)         Followed by a cr                             
         CLEAR R15                                                              
         END                                                                    
*                                                                               
         MVC   SEGCBMRKF,SEGCBLENF  Segmark                                     
*                                                                               
         SET   SEGCBSPP            Set function code for exit routine           
         LR    R15,R6                                                           
         CLEAR R0                  Pre-set good rc                              
         IF    ('LT RAR,SEGCBRTN',NZ),'BASR RAR,RAR'  User exit                 
         END                                                                    
*                                                                               
         LTR   R15,R0              Set rc                                       
         PEND                                                                   
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  SEGCCR -- Routine to add segment to buffer followed by a                     
*    conditional carriage return.  (Same entry conventions                      
*    as "SEG" routine below.)                                                   
*                                                                               
SEGCCR   XPROC                                                                  
         LR    R6,R15              Save segcb ptr                               
         WITH  (SEGCB,R6)                                                       
         LCALL SEG                                                              
         IF    ((SEGCBLENF,NZ),AND,(SEGCBLENF,NE,SEGCBMRKF)),BEGIN              
         SEGCR ,,(R6)              Followed by a CR                             
         END                                                                    
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGWR -- Routine to add (final) segment to buffer and write                  
*    contents.  (Same entry conventions as "SEG" routine below.)                
*                                                                               
SEGWR    XPROC                                                                  
         LR    R6,R15              Save segcb ptr                               
         LCALL SEG                                                              
         WITH  (SEGCB,R6)                                                       
         SET   SEGCBWR             Set function code for exit routine           
         L     R1,SEGCBLOC         Start of buffer                              
         L     R0,SEGCBLENF        Length                                       
         LR    R15,R6              Segcb ptr                                    
         IF    ('LT RAR,SEGCBRTN',NZ),BEGIN                                     
         BASR  RAR,RAR             Go off to exit routine                       
         MVC   SEGCBLENF,=F'0'     Reset buffer (don't change cc)               
         MVC   SEGCBMRKF,=F'0'     Reset mark too                               
         END                                                                    
         ELSE  'CLEAR R15'         Set dummy rc                                 
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEG/SEGT -- Routine to add segment to buffer.  "SEGT" entry will             
*    trim trailing blanks.                                                      
*                                                                               
*     On entry:                                                                 
*       R1,R0 - location & length of segment                                    
*       R15 - SEGCB ptr                                                         
*                                                                               
*     On exit, R15 (and CC):                                                    
*        -4 - overflow occured                                                  
*         0 - normal                                                            
*                                                                               
SEGT     XPROC (R0,LSR)                                                         
         LR    R6,R15                                                           
         WITH  (SEGCB,R6)                                                       
         IF    (R0,POS),BEGIN      Something to seg...                          
         LA    R1,@R1              Clear high byte                              
         LR    R2,R1                                                            
         AR    R2,R0                                                            
         DECR  R2                  Addr of last char                            
         WHILE ((R2,GE,R1),AND,(@R2,EQ,' ')),'DECR R2'                          
         SR    R2,R1                                                            
         LA    R0,@R2+1            Trimmed string len                           
         END                                                                    
         B     SEGCOM                                                           
         PEND  ,                   (Dummy)                                      
         SPACE 2                                                                
SEG      XPROC (R0,LSR)                                                         
         LR    R6,R15                                                           
         WITH  (SEGCB,R6)                                                       
*                                                                               
SEGCOM   BASE                                                                   
         SET   SEGCBSEG            Set function code for exit routine           
         IF    ('LT RAR,SEGCBRTN',NZ),'BASR RAR,RAR'                            
*                                                                               
         CLEAR R5                  Set ok rc                                    
         IF    (R0,^POS),SEGEXIT   Skip if nothing to seg                       
         CEIL  R0,SEGCBMAXF        Max allowed                                  
         LR    R2,R1                                                            
         LR    R3,R0                                                            
*                                                                               
SEGRETRY CLEAR R5                  Init return code                             
         A     R0,SEGCBLENF        Calc new total length                        
         IF    (R0,GT,SEGCBMAXF),BEGIN  Overflow...                             
         SET   SEGCBOVF            Set function code for exit routine           
         L     R1,SEGCBLOC         Start of buffer                              
         LT    R0,SEGCBMRKF        Last marked position                         
         IF    NP,'L R0,SEGCBLENF'  Use cur len if no mark                      
         LR    R15,R6              Segcb ptr                                    
         IF    ('LT RAR,SEGCBRTN',NZ),'BASR RAR,RAR'  user exit                 
         IF    (R0,NEG),BEGIN      Exit processed something...                  
         CLEAR SEGCBMRKF           Clear mark                                   
         LCR   R0,R0               Amount processed                             
         L     R1,SEGCBLENF                                                     
         L     R14,SEGCBLOC                                                     
         IF    ('LT R15,SEGCBINDF',NZ),BEGIN  Indent...                         
         IF    (R15,LGE,SEGCBMAXF),EXIT                                         
         L     R1,=A(X'40000000')                                               
         MVCL  R14,R0              Pad with blanks                              
         L     R1,SEGCBLENF                                                     
         L     R15,SEGCBINDF                                                    
         END                                                                    
         SR    R1,R0               New buffer len                               
         AR    R15,R1              Including indentation                        
         ST    R15,SEGCBLENF                                                    
         IF    (R1,^POS),'LA R0,@R3(R15); B SEGDO'  add new segment             
         LR    R15,R1                                                           
         A     R0,SEGCBLOC                                                      
         MVCL  R14,R0              Move remaining text over                     
         LR    R0,R3               New segment len                              
         B     SEGRETRY            Try again                                    
         END                                                                    
         LR    R0,R3                                                            
         A     R0,SEGCBLENF        Re-calc total len                            
         IF    ('S R0,SEGCBMAXF',NP),SEGDO  It's ok now                         
         LH    R5,=H'-4'           Set return code                              
         SR    R3,R0               Only seg as much as will fit                 
         BNP   SEGEXIT             Nothing will fit                             
         L     R0,SEGCBMAXF        New buffer len                               
         END                                                                    
SEGDO    L     R15,SEGCBLENF                                                    
         ST    R0,SEGCBLENF        Update length                                
         L     R0,SEGCBLOC                                                      
         AR    R0,R15              Insertion point                              
         LR    R1,R3               Len                                          
         MVCL  R0,R2               Move in segment                              
SEGEXIT  SET   SEGCBSPP            Set function code for exit routine           
         LR    R15,R6              Segcb ptr                                    
         LTR   R0,R5               Put rc in r0 for exit routine                
         IF    ('LT RAR,SEGCBRTN',NZ),'BASR RAR,RAR'  user exit                 
         DROP  SEGCB                                                            
         PEND  'LTR R15,R0'                                                     
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGCOL -- Routine to extend seg buffer to absolute column.                   
*                                                                               
*    On entry:                                                                  
*      R0  - column number                                                      
*      R15 - SEGCB ptr                                                          
*                                                                               
SEGCOL   XPROC                                                                  
         LR    R6,R15                                                           
         WITH  (SEGCB,R6)                                                       
         DECR  R0                  Make rel to zero                             
         IF    (R0,GT,SEGCBMAXF),'L R0,SEGCBMAXF'                               
         S     R0,SEGCBLENF        No. of blanks                                
         IF    ^POS,'LA R0,1'      At least one blank                           
         SEGBLANK (R0)             Add the blanks                               
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGBLANK -- Routine to add blanks to the seg buffer.                         
*                                                                               
*    On entry:                                                                  
*      R0  - no. of blanks to add                                               
*      R15 - SEGCB ptr                                                          
*                                                                               
SEGBLANK XPROC                                                                  
         LR    R6,R15                                                           
         WITH  (SEGCB,R6)                                                       
         LR    R5,R0                                                            
         WHILE (R5,GT,L'BLANKS),BEGIN                                           
         SEG   BLANKS,,(R6)                                                     
         SH    R5,=AL2(L'BLANKS)                                                
         END                                                                    
         SEG   BLANKS,(R5),(R6)                                                 
         PEND                                                                   
*                                                                               
BLANKS   DC    CL256' '                                                         
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGCLR -- Routine to reset seg buffer.                                       
*                                                                               
*    On entry:                                                                  
*      R15 - SEGCB ptr                                                          
*                                                                               
SEGCLR   XPROC                                                                  
         LR    R6,R15                                                           
         WITH  (SEGCB,R6)                                                       
         SET   SEGCBCLR            Set function code for exit routine           
         IF    ('LT RAR,SEGCBRTN',NZ),'BASR RAR,RAR'  user exit                 
         CLEAR SEGCBLENF,SEGCBMRKF                                              
         PEND                                                                   
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  SEGMARK -- Routine to mark current location in seg buffer.                   
*                                                                               
*    On entry:                                                                  
*      r15 - segcb ptr                                                          
*                                                                               
         ENTRY SEGMARK                                                          
SEGMARK  WITH  (SEGCB,R15),'MVC SEGCBMRKF,SEGCBLENF'                            
         BR    RAR                                                              
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGDC -- Routine to add number in decimal to seg buffer.                     
*                                                                               
*    On entry:                                                                  
*    R1 - number; R0 - length                                                   
*    R15 - SEGCB ptr                                                            
*                                                                               
SEGDC    XPROC                                                                  
         LR    R6,R15              Save segcb ptr                               
         PUSH  20,PTR=R2                                                        
         LR    R15,R1                                                           
         BTD   (R2),(R0),(R15)     Convert to printable format                  
         SEG   (R1),(R0),(R6)                                                   
         POP   20                                                               
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGHX -- Routine to add number in hex to seg buffer.                         
*                                                                               
*    On entry:                                                                  
*    R1 - number; R0 - length                                                   
*    R15 - SEGCB ptr                                                            
*                                                                               
SEGHX    XPROC                                                                  
         LR    R6,R15              Save segcb ptr                               
         PUSH  20,PTR=R2                                                        
         LR    R15,R1                                                           
         BTX   (R2),(R0),(R15)     Convert to printable format                  
         SEG   (R1),(R0),(R6)                                                   
         POP   20                                                               
         PEND                                                                   
         SPACE 2                                                                
*                                                                               
         QLTORG                                                                 
         TITLE 'Scanner DSECTS'                                                 
SA       RECORD BEGIN                                                           
WORD     DS    2F                                                               
SV15     DS    F                                                                
CPSAVE   DS    2F                                                               
TEMPD    DS    3F                      dword work area                          
PCNT     DS    H                                                                
FL       DS    X                                                                
*                                                                               
FSQS     EQU   X'80'                   single quoted string                     
FDQS     EQU   X'40'                   double quoted string                     
FPS      EQU   X'20'                   parened string                           
FISOL    EQU   X'01'                   string isolation                         
         DS    0F                                                               
*                                                                               
WAPC     DS    F                   Current "wap" offset                         
WAP      DS    XL(10*4)            Push stack                                   
         END                                                                    
         SPACE 2                                                                
FTBLE    EQU   X'F8'                   last/pop/push                            
FLAST    EQU   X'FF'                   end                                      
FPARM    EQU   X'80'                   parm                                     
FLINNO   EQU   X'60'                   line no. conv                            
FINTEG   EQU   X'40'                   integer 0 or gtr                         
FINTEGP  EQU   X'20'                   integer gtr 0                            
FCMSET   EQU   X'10'                   set 3 command chars                      
FLIMIT   EQU   X'10'                   limit                                    
FABBREV  EQU   X'08'                   abbreviation                             
         SPACE 2                                                                
LS       EQU   4+(LSR-FSR+1)*4+(L'SA+3)/4*4+4                                   
         EJECT                                                                  
SCANCB   RECORD BEGIN                                                           
         SCANCB PFX=                                                            
         END                                                                    
         TITLE 'Scanner'                                                        
         USING SCANCB,R15                                                       
* initialize                                                                    
*                                                                               
         ENTRY SCINIT                                                           
SCINIT   LA    R1,@R1                                                           
         STM   R0,R1,LEN               save loc and length                      
         CLEAR CLT                     reset scan type                          
         BR    RAR                                                              
         EJECT                                                                  
*  tell location and length                                                     
*                                                                               
*    - scan type is 0, 1, or 2                                                  
         ENTRY SCTELL                                                           
SCTELL   L     R1,CLT                  scan type                                
         SRL   R1,2                    shift down                               
         ST    R1,VAL                  return in scancb                         
         LM    R0,R1,LEN                                                        
         BR    RAR                                                              
         EJECT                                                                  
*  set scan type                                                                
*                                                                               
*    - scan type is 0, 1, or 2                                                  
         ENTRY SCTYPE                                                           
SCTYPE   SLL   R1,2                    shift new scan type                      
         ST    R1,@SPR             Save in stack                                
         L     R1,CLT                                                           
         SRL   R1,2                                                             
         MVC   CLT,@SPR            Set new scan type                            
         BR    RAR                                                              
*                                                                               
         DROP  SCANCB                                                           
         EJECT                                                                  
SCAN     XPROC SA                                                               
         BASE                                                                   
BASE     LR    SCANCBR,R15             set scan work area address               
         WITH  SCANCB                                                           
         ST    RAR,RA                  return addr                              
         ST    R1,PRT                  routing table                            
         SR    RR,RR                                                            
SCANCN   LM    NR,PR,LEN               pick up loc and len                      
         MVI   FL,0                    clear flags                              
         CLC   CLT,=A(4)               string isolation?                        
         BNE   SCANON                  no                                       
         MVI   FL,FISOL                                                         
SCANON   LA    R1,@PR(NR)                                                       
         LTR   NR,NR                   any left?                                
         BNP   DONE                    br if not                                
         SR    2,2                     clear trt regs                           
         L     R15,CLT                                                          
         L     R15,CLTS(R15)                                                    
         BCTR  NR,0                                                             
         EX    NR,TRT                                                           
         B     *+4(2)                  br on delim code                         
         B     EOS                     0  end of string                         
         B     BLKCOM                  4  blank-comma                           
         B     SQUOTE                  8  single quote                          
         B     DQUOTE                  12 double quote                          
         B     LPAR                    16 left paren                            
         B     RPAR                    20 right paren                           
         B     SLASH                    24 slash                                
         B     SEMI                    28 semi-colon                            
TRT      TRT   @PR(*-*),@R15           scan                                     
         EJECT                                                                  
*-                                                                              
*-       process end of string                                                  
*-                                                                              
EOS      TM    FL,FSQS+FDQS+FPS        string?                                  
         BZ    TOKEN                   br if not                                
ILLSTR   SR    NR,NR                   update ptr                               
         LR    PR,R1                                                            
         LR    R0,R1                   compute string ptr                       
         L     R1,LOC                                                           
         SR    R0,R1                                                            
         LCR   R0,R0                   indicate illegal string                  
         B     RTN                 Return                                       
*                                                                               
* process blanks                                                                
*                                                                               
BLKCOM   TM    FL,FSQS+FDQS+FPS        string being collected?                  
         BNZ   GOSTRING                br if so                                 
         C     R1,LOC                  blank at start of string?                
         BNE   TOKEN                   no                                       
         LA    PR,@R1+1                skip over                                
         STM   NR,PR,LEN               start over                               
         B     SCANON                                                           
*                                                                               
* process semi-colon                                                            
*                                                                               
SEMI     TM    FL,FSQS+FDQS+FPS        string being collected?                  
         BNZ   GOSTRING                br if so                                 
         LR    NR,R1                                                            
         S     NR,LOC                  truncate rest of scan                    
         ST    NR,LEN                                                           
         B     TOKEN                                                            
         EJECT                                                                  
*  process slash                                                                
*                                                                               
SLASH    TM    FL,FSQS+FDQS+FPS         string being collected?                 
         BNZ   GOSTRING                 br if so                                
         C     R1,LOC                   compute token size                      
         BNE   TOKEN                    token won't be "/"                      
         LA    R1,@R1+1                 length "/" token                        
         B     TOKEN                    process                                 
*-                                                                              
*-       process single quote                                                   
*-                                                                              
SQUOTE   TM    FL,FDQS+FPS             "string"?                                
         BNZ   GOSTRING                br if so                                 
         TM    FL,FSQS                 old string?                              
         BO    CSQ                     br if so                                 
         C     R1,LOC                  compute token size                       
         BNE   TOKEN                  br if previous token                      
         OI    FL,FSQS                 set string scan                          
         B     GOSTRING                                                         
*                                                                               
CSQ      AR    NR,PR                   bump ptr                                 
         SR    NR,R1                                                            
         LA    R1,@R1+1                point past quote                         
         LR    PR,R1                                                            
         BNP   TOKEN                   br if end                                
         CLI   @PR,C''''               quote?                                   
         BE    MVS                                                              
ISOLAT   TM    FL,FISOL                string isolating?                        
         BZ    TOKEN                   end of string                            
         NI    FL,255-FSQS-FDQS-FPS    end of string                            
         B     SCANON                  keep going                               
MVS      BCTR  NR,0                    eliminate 2nd quote                      
         LA    PR,@PR+1                                                         
         B     SCANON                                                           
         EJECT                                                                  
*  process double quote                                                         
*                                                                               
DQUOTE   TM    FL,FSQS+FPS             'string'?                                
         BNZ   GOSTRING                br if so                                 
         TM    FL,FDQS                 old string?                              
         BO    CDQ                     br if so                                 
         C     R1,LOC                  passed over token?                       
         BNE   TOKEN                                                            
         OI    FL,FDQS                 set string scan                          
         B     GOSTRING                                                         
*                                                                               
CDQ      AR    NR,PR                   update ptr                               
         SR    NR,R1                                                            
         LA    R1,@R1+1                point past quote                         
         LR    PR,R1                                                            
         BNP   TOKEN                   br if end                                
         CLI   @PR,C'"'                quote?                                   
         BE    MVS                     br if so                                 
         B     ISOLAT                  make isolation check                     
*-                                                                              
*-       process left paren                                                     
*-                                                                              
LPAR     TM    FL,FSQS+FDQS            quoted string?                           
         BNZ   GOSTRING                br if so                                 
         TM    FL,FPS                  paren string?                            
         BO    INP                     br if so                                 
         C     R1,LOC                  previous token?                          
         BE    LPAR1ST                 no                                       
         TM    FL,FISOL                isolating string?                        
         BZ    TOKEN                   no                                       
*                                                                               
LPAR1ST  OI    FL,FPS                  set paren scan                           
         LA    SR,1                                                             
         STH   SR,PCNT                                                          
         B     GOSTRING                                                         
*                                                                               
INP      LH    SR,PCNT                 paren count                              
         LA    SR,@SR+1                                                         
         STH   SR,PCNT                                                          
         B     GOSTRING                                                         
         EJECT                                                                  
*  process right paren                                                          
*                                                                               
RPAR     TM    FL,FSQS+FDQS            quoted string?                           
         BNZ   GOSTRING                br if so                                 
         TM    FL,FPS                  paren string?                            
         BZ    ILLPS                   br if not                                
         LH    SR,PCNT                 decr count                               
         BCTR  SR,0                                                             
         STH   SR,PCNT                                                          
         LTR   SR,SR                                                            
         BNZ   GOSTRING                                                         
         AR    NR,PR                   update ptr                               
         SR    NR,R1                                                            
         LA    R1,@R1+1                point past quote                         
         LR    PR,R1                                                            
         B     ISOLAT                  all parens matched                       
GOSTRING SR    NR,R1                   update string ptrs                       
         AR    NR,PR                                                            
         LA    PR,@R1+1                                                         
         B     SCANON                                                           
*                                                                               
ILLPS    L     R0,LOC                  compute -length                          
         SR    R0,R1                                                            
         L     R1,LOC                  loc of token                             
         AR    NR,R0                   decr length                              
         LA    PR,@R1+1                                                         
         SR    PR,R0                   bump ptr                                 
         B     RTN                                                              
         EJECT                                                                  
*  process a token                                                              
*                                                                               
TOKEN    LM    NR,PR,LEN               old loc and length                       
         ST    R1,LOC                  next noken                               
         SR    R1,PR                   length                                   
         BZ    DONE                                                             
         SR    NR,R1                   reduce remaining length                  
         ST    NR,LEN                                                           
         LR    R0,R1                   token length                             
         LR    R1,PR                   token start                              
         LR    R15,R0                                                           
         MVI   KW,C' '                 clear kw area                            
         MVC   KW+1(7),KW                                                       
         CLEAR WAPC                Clear push/pop stack                         
         TM    FL,FSQS+FDQS+FPS+FISOL  quote or paren string?                   
         BNZ   PRKW                    br if quote or paren string              
         LR    SR,R0                   count                                    
         LR    TR,R1                   ptr                                      
MRECH    OI    @TR,X'40'               capital bit                              
         LA    TR,@TR+1                move ptr                                 
         BCT   SR,MRECH                more?                                    
         IF    (R15,LGT,8),'LA R15,8'  Match the first 8 chars                  
         DEX   R15,'MVC KW(0),@R1'     Move kw                                  
PRKW     LTR   RR,RR                   routine?                                 
         BNZ   SETSR                   br if so                                 
         L     SR,PRT                  routing table                            
         LTR   SR,SR                                                            
         BNZ   KWSRCH                  br if one                                
         L     RR,RA                                                            
         B     GORTN                                                            
*                                                                               
KWNEX    LA    SR,@SR+5(TR)            try next                                 
KWSRCH   TM    @SR,FTBLE               table end/push/pop?                      
         BO    KWFND                   br if so                                 
         IC    TR,@SR                  extract (len-1)                          
         N     TR,=X'00000007'                                                  
         TM    FL,FSQS+FDQS+FPS        quote or paren string?                   
         BNZ   NXTRY                   br if quote or paren string              
         LTR   TR,TR                   test token len                           
         BNZ   COMPOK                  user kw exists                           
         CLI   @SR+4,C' '              blank?                                   
         BE    KWFND                   yes                                      
COMPOK   CR    TR,R15                  len ok?                                  
         BNE   QABBRV                  abbrev?                                  
         EX    TR,'CLC KW(0),@SR+4'  compare keywords                           
         BE    KWFND                   br if found                              
QABBRV   TM    @SR,FABBREV             try abbreviation?                        
         BZ    NXTRY                   no                                       
         CH    R0,=Y(3)                3-chars?                                 
         BL    NXTRY                   must be at least 3                       
         EX    R15,'CLC KW(0),@SR+4'  equal to given length?                    
         BE    KWFND                   br if found                              
NXTRY    TM    @SR,FLIMIT              limit?                                   
         BZ    KWNEX                   no                                       
         TM    @SR,FINTEG+FINTEGP      integer?                                 
         BNM   KWNEX                   no                                       
         LA    SR,@SR+9(TR)            try next                                 
         B     KWSRCH                                                           
         EJECT                                                                  
KWFND    NI    FL,255-FSQS-FDQS-FPS    reset string scan                        
         MVC   TEMPD(4),@SR            to temp bound                            
         L3    RR,TEMPD+1              routine                                  
         TM    @SR,FTBLE               end/push/pop?                            
         BO    TSTLAST                 br if so                                 
         TM    @SR,FPARM               parm?                                    
         BZ    GORTN                   br if not                                
         STM   SR,TR,WORD              save sr/tr values                        
         B     SCANCN                  find parm                                
*                                                                               
TSTLAST  TM    @SR,255-FTBLE           is it last                               
         BO    GORTN                   all on, yes                              
         BM    GOPOP                   mixed, go pop up one level               
*                                                                               
* push down current scan table pointer                                          
*                                                                               
         LA    SR,@SR+4                set for next after pop                   
         LA    RR,@RR                  form address and check                   
         LTR   RR,RR                   br if address                            
         BZ    KWSRCH                  br if no table to push to                
GOPUSH1  L     R14,WAPC                                                         
         ST    SR,WAPC(R14)                                                     
         LA    R14,@R14+4                                                       
         IF    (R14,GT,L'WAP),'DC H"0"'  too deep                               
         ST    R14,WAPC                                                         
         LR    SR,RR               Set new prt addr                             
         B     KWSRCH              Go search this table                         
*                                                                               
* pop current scan table pointer                                                
*                                                                               
GOPOP    L     R14,WAPC                                                         
         SH    R14,=Y(4)                                                        
         BM    NXTRY1              Ignore if at top level                       
         ST    R14,WAPC                                                         
         L     SR,WAP(R14)         Old prt                                      
         B     KWSRCH              Continue                                     
*                                                                               
NXTRY1   LA    SR,@SR+1                step past ignored pop                    
         B     KWSRCH                  continue in same table                   
         EJECT                                                                  
SETSR    LM    SR,TR,WORD              reset sr/tr values                       
GORTN    LA    RR,@RR                  clear hi bit                             
         LTR   R14,RR                  test ep                                  
         BZ    SCANCN                  br if none                               
         STM   R0,R1,CPSAVE            save ptrs                                
         ST    R15,SV15                save 15                                  
         LTR   SR,SR                   routing table?                           
         BZ    NTCMV                   no                                       
         CLI   @SR,FLAST               end?                                     
         BE    NTCMV                   br if so                                 
         TM    @SR,FLINNO              integer or line no conv?                 
         BO    LINNOCV                 line no. conv                            
         BM    INTGRCV                 integer conv                             
NTCMV    LA    R15,KW                  kw ptr                                   
NOTKWPS  ST    R15,VAL                 save value                               
         LR    R15,SCANCBR             restore r15                              
         LR    R14,RR              Set ep                                       
         MVI   PRT,X'FF'           Set old prt                                  
         LA    SPR,LS(,SPR)        Unstack                                      
         ST    SPR,@NSP-@SPR(,SPR)                                              
         LM    FSR,LSR,@NSP-@SPR-4-(LSR-FSR+1)*4(SPR)                           
         LTR   R0,R0               Set cc                                       
         BASR  RAR,RAR             User routine  ***********                    
*  return to rar to continue scan                                               
*  return to @rar+4 to continue scan with new kwrt                              
         MVI   PRT-SCANCB(R15),0   Set to use old kwrt                          
         MVC   @NSP-@SPR-4(4,SPR),RA-SCANCB(R15)  return addr                   
         STM   FSR,LSR,@NSP-@SPR-4-(LSR-FSR+1)*4(SPR)                           
         BASE                                                                   
         SH    SPR,=Y(LS)          Stack                                        
         ST3   SPR,@NSP-@SPR+1+LS(SPR)                                          
         ST    SPR,@NSP-@SPR(,SPR)                                              
         BASE  BASE                Common base                                  
         LR    SCANCBR,R15         Scan table ptr                               
         SR    RR,RR                   no routine                               
         TM    PRT,X'FF'               use old prt?                             
         BZ    SCANCN                  yes                                      
         ST    R1,PRT                  new prt specified                        
         B     SCANCN                  continue scan                            
         EJECT                                                                  
* decimal to binary conv rtn for scan                                           
*                                                                               
INTGRCV  BAL   R14,DOINT               go do cv                                 
         TM    @SR,FINTEGP             pos int?                                 
         BZ    ANYI                    no                                       
         LTR   R0,R0                   test integ                               
         BNP   BOO                     ng                                       
ANYI     TM    @SR,FLIMIT              limit?                                   
         BZ    NTRSET                  no                                       
         ST    R0,TEMPD                for clc                                  
         LA    PR,@SR+5(TR)            pt at limit                              
         CLC   TEMPD(4),@PR            check limit                              
         BNH   NTRSET                  ok                                       
         B     BOO                     ng                                       
         EJECT                                                                  
LINNOCV  CL    R0,=A(9)                max len is 8                             
         BH    BOO                     too big                                  
         SR    R15,R15                 zero counter                             
         LR    PR,R1                   ptr                                      
CHKMR    CLI   @PR,C'.'                period?                                  
         BE    HVPRD                   yes                                      
         LA    R15,@R15+1              kick counter                             
         LA    PR,@PR+1                kick ptr                                 
         BCT   R0,CHKMR                more?                                    
         B     WHOL                    integer line no                          
*                                                                               
HVPRD    BCT   R0,CHKFR                fraction?                                
WHOL     LTR   R0,R15                  integ count                              
         BNP   BOO                     "." not legal                            
         SR    R15,R15                 zero fraction                            
WHOLDO   CL    R0,=A(5)                4 is max                                 
         BH    BOO                                                              
         BAL   R14,DOINT               conv                                     
         MH    R0,=H'1000'             set integer value                        
         AR    R0,R15                  add fraction                             
NTRSET   LR    R15,R0                  set return value into r15                
         LM    R0,R1,CPSAVE            reset ptrs                               
         B     NOTKWPS                 ready to return                          
*                                                                               
CHKFR    CL    R0,=A(4)                3 is max                                 
         BNL   BOO                     ng                                       
         MVC   TEMPD+1(2),=C'00'       put zeros                                
         LR    R14,R0                  count                                    
         BCTR  R14,0                   for ex                                   
         EX    R14,MVFR                mvc   temp(0),1(pr)                      
         LA    R0,3                    cv count                                 
         LA    R1,TEMPD                 ptr                                     
         BAL   R14,DOINT               cv                                       
         LTR   NR,R15                  any integ count?                         
         BNP   NTRSET                  fin                                      
         LR    R15,R0                  save frac                                
         LR    R0,NR                   integ count                              
         L     R1,CPSAVE+4             reset start ptr                          
         B     WHOLDO                  integer line no                          
*                                                                               
MVFR     MVC   TEMPD(0),@PR+1                                                   
         EJECT                                                                  
DOINT    LTR   R0,R0                   any string to convert?                   
         BZ    NTRSET                  caller can tell from cc                  
         CL    R0,=A(8)                max len is 7                             
         BNL   BOO                     ng                                       
         LR    NR,R0                   count                                    
         LR    PR,R1                   ptr                                      
CHNEXT   CLI   @R1,C'0'                too small?                               
         BL    BOO                     yes                                      
         CLI   @R1,C'9'                too big?                                 
         BH    BOO                     yes                                      
         LA    R1,@R1+1                next                                     
         BCT   R0,CHNEXT               more?                                    
         LA    R1,TEMPD+7              get a doubleword                         
         N     R1,=F'-8'               round up                                 
         BCTR  NR,0                    reduce for ex of pack                    
         EX    NR,CHPACK               pack                                     
         CVB   R0,@R1                  to doubleword temp                       
         BR    R14                     return                                   
*                                                                               
CHPACK   PACK  @R1(8),@PR(*-*)         pack number                              
         EJECT                                                                  
BOO      SR    RR,RR                    unset routine                           
         LM    NR,PR,LEN                set loc and len                         
         LM    R0,R1,CPSAVE             ptrs                                    
         TM    @SR,FPARM                parm?                                   
         L     R15,SV15                set 15                                   
         BZ    NXTRY                    no                                      
         LCR   R0,R0                    neg                                     
         SR    NR,NR                    fin line                                
         B     RTN                                                              
         EJECT                                                                  
*  terminal processing                                                          
*                                                                               
DONE     TM    FL,FSQS+FDQS+FPS        collecting string?                       
         BNZ   ILLSTR                  error if so                              
         SR    R0,R0                   zot loc and len                          
         SR    R1,R1                                                            
         MVI   KW,C' '                 clear kw                                 
         MVC   KW+1(7),KW                                                       
         TM    FL,FISOL                isolating string?                        
         BZ    DON1                                                             
         LM    R0,R1,LEN               use last pointers                        
DON1     LTR   RR,RR                   parm missing?                            
         BNZ   SETSR               Br if so                                     
RTN      STM   NR,PR,LEN               save string ptr                          
         L     R14,RA                  return addr                              
         LA    R15,KW                                                           
         ST    R15,VAL                 save return value                        
         LR    R15,SCANCBR             restore r15                              
         PEND  R0                                                               
         EJECT                                                                  
*-                                                                              
*-       Scan class tables.                                                     
*-                                                                              
CLTS     DC    A(CLT0,CLT1,CLT2,CLT3)                                           
*-                                                                              
*-       0: normal scan table.                                                  
*-                                                                              
CLT0     DC    256AL1(4)                                                        
         ORG   CLT0+X'81'                                                       
         DC    9X'00'                                                           
         ORG   CLT0+X'91'                                                       
         DC    9X'00'                                                           
         ORG   CLT0+X'A2'                                                       
         DC    8X'00'                                                           
         ORG   CLT0+C'A'                                                        
         DC    9X'00'                                                           
         ORG   CLT0+C'J'                                                        
         DC    9X'00'                                                           
         ORG   CLT0+C'S'                                                        
         DC    8X'00'                                                           
         ORG   CLT0+C'0'                                                        
         DC    10X'00'                                                          
         ORG   CLT0+C'.'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'$'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'@'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'#'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'&&'                                                       
         DC    X'00'                                                            
         ORG   CLT0+C'_'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'+'                                                        
         DC    AL1(24)                                                          
         ORG   CLT0+C'-'                                                        
         DC    AL1(24)                                                          
         ORG   CLT0+C'|'                                                        
         DC    AL1(24)                                                          
         ORG   CLT0+C'/'                                                        
         DC    AL1(24)                                                          
         ORG   CLT0+C'^'                                                        
         DC    AL1(24)                                                          
         ORG   CLT0+C''               cent sign or carat                       
         DC    X'00'                                                            
         ORG   CLT0+C'!'               exclamation point                        
         DC    X'00'                                                            
         ORG   CLT0+C'<'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'>'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'['                                                        
         DC    X'00'                                                            
         ORG   CLT0+C']'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'{'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'}'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'\'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'`'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C':'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'%'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'?'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C'*'                                                        
         DC    X'00'                                                            
         ORG   CLT0+C' '               a space                                  
         DC    AL1(4)                   is                                      
         ORG   CLT0+C','                 a comma                                
         DC    AL1(4)                     is                                    
         ORG   CLT0+C'='                   an equals                            
         DC    AL1(4)                       sign                                
         ORG   CLT0+C''''                                                       
         DC    AL1(8)                                                           
         ORG   CLT0+C'"'                                                        
         DC    AL1(12)                                                          
         ORG   CLT0+C'('                                                        
         DC    AL1(16)                                                          
         ORG   CLT0+C')'                                                        
         DC    AL1(20)                                                          
         ORG   CLT0+C';'                                                        
         DC    AL1(28)                                                          
         ORG                                                                    
*-                                                                              
*-       scan table for isolating string (bounded by blank or comma)            
*-                                                                              
CLT1     DC    256AL1(0)                                                        
         ORG   CLT1+C' '                                                        
         DC    AL1(4)                                                           
         ORG   CLT1+C','                                                        
         DC    AL1(4)                                                           
         ORG   CLT1+C'='                                                        
         DC    AL1(4)                                                           
         ORG   CLT1+C''''                                                       
         DC    AL1(8)                                                           
         ORG   CLT1+C'"'                                                        
         DC    AL1(12)                                                          
         ORG   CLT1+C'('                                                        
         DC    AL1(16)                                                          
         ORG   CLT1+C')'                                                        
         DC    AL1(20)                                                          
         ORG   CLT1+C';'                                                        
         DC    AL1(28)                                                          
         ORG                                                                    
*-                                                                              
*-       2: table for scanning expressions                                      
*-                                                                              
CLT2     DC    256AL1(24)                                                       
         ORG   CLT2+X'81'                                                       
         DC    9X'00'                                                           
         ORG   CLT2+X'91'                                                       
         DC    9X'00'                                                           
         ORG   CLT2+X'A2'                                                       
         DC    8X'00'                                                           
         ORG   CLT2+C'A'                                                        
         DC    9X'00'                                                           
         ORG   CLT2+C'J'                                                        
         DC    9X'00'                                                           
         ORG   CLT2+C'S'                                                        
         DC    8X'00'                                                           
         ORG   CLT2+C'0'                                                        
         DC    10X'00'                                                          
         ORG   CLT2+C'.'                                                        
         DC    X'00'                                                            
         ORG   CLT2+C'$'                                                        
         DC    X'00'                                                            
         ORG   CLT2+C'@'                                                        
         DC    X'00'                                                            
         ORG   CLT2+C'#'                                                        
         DC    X'00'                                                            
         ORG   CLT2+C'_'                                                        
         DC    X'00'                                                            
         ORG   CLT2+C''''                                                       
         DC    AL1(8)                                                           
         ORG   CLT2+C'"'                                                        
         DC    AL1(12)                                                          
         ORG   CLT2+C';'                                                        
         DC    AL1(28)                                                          
         ORG                                                                    
*-                                                                              
*-       3: Same as "normal" except -, /, etc. are regular chars.               
*-                                                                              
CLT3     DC    256AL1(4)                                                        
         ORG   CLT3+X'81'                                                       
         DC    9X'00'                                                           
         ORG   CLT3+X'91'                                                       
         DC    9X'00'                                                           
         ORG   CLT3+X'A2'                                                       
         DC    8X'00'                                                           
         ORG   CLT3+C'A'                                                        
         DC    9X'00'                                                           
         ORG   CLT3+C'J'                                                        
         DC    9X'00'                                                           
         ORG   CLT3+C'S'                                                        
         DC    8X'00'                                                           
         ORG   CLT3+C'0'                                                        
         DC    10X'00'                                                          
         ORG   CLT3+C'.'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'$'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'@'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'#'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'&&'                                                       
         DC    X'00'                                                            
         ORG   CLT3+C'_'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'+'                                                        
         DC    AL1(0)                                                           
         ORG   CLT3+C'-'                                                        
         DC    AL1(0)                                                           
         ORG   CLT3+C'|'                                                        
         DC    AL1(0)                                                           
         ORG   CLT3+C'/'                                                        
         DC    AL1(0)                                                           
         ORG   CLT3+C'^'                                                        
         DC    AL1(0)                                                           
         ORG   CLT3+C''               cent sign or carat                       
         DC    X'00'                                                            
         ORG   CLT3+C'!'               exclamation point                        
         DC    X'00'                                                            
         ORG   CLT3+C'<'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'>'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'['                                                        
         DC    X'00'                                                            
         ORG   CLT3+C']'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'{'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'}'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'\'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'`'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C':'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'%'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'?'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C'*'                                                        
         DC    X'00'                                                            
         ORG   CLT3+C' '               a space                                  
         DC    AL1(4)                   is                                      
         ORG   CLT3+C','                 a comma                                
         DC    AL1(4)                     is                                    
         ORG   CLT3+C'='                   an equals                            
         DC    AL1(4)                       sign                                
         ORG   CLT3+C''''                                                       
         DC    AL1(8)                                                           
         ORG   CLT3+C'"'                                                        
         DC    AL1(12)                                                          
         ORG   CLT3+C'('                                                        
         DC    AL1(16)                                                          
         ORG   CLT3+C')'                                                        
         DC    AL1(20)                                                          
         ORG   CLT3+C';'                                                        
         DC    AL1(28)                                                          
         ORG                                                                    
         TITLE 'Trim Leading and Trailing Blanks'                               
*box                                                                            
*                                                                               
*  RTRIM -- Trim right-side (trailing) blanks.                                  
*                                                                               
*    On entry:                                                                  
*      R1,R0 - string loc, len                                                  
*                                                                               
RTRIM    XPROC (R2,LSR)                                                         
         LR    R6,R1                                                            
         AR    R6,R0                                                            
         DECR  R6                                                               
         WHILE ((R0,POS),AND,(@R6,EQ,' ')),'DECR R6; DECR R0'                   
         PEND                                                                   
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  LRTRIM -- Trim left and right-side (leading/trailing) blanks.                
*                                                                               
*    On entry:                                                                  
*      R1,R0 - string loc, len                                                  
*                                                                               
LRTRIM   XPROC (R2,LSR)                                                         
         WHILE ((R0,POS),AND,(@R1,EQ,' ')),'LA R1,@R1+1; DECR R0'               
*                                                                               
         LR    R6,R1                                                            
         AR    R6,R0                                                            
         DECR  R6                                                               
         WHILE ((R0,POS),AND,(@R6,EQ,' ')),'DECR R6; DECR R0'                   
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TOEBCDIC -- Routine to translate ASCII text to EBCDIC.                       
*                                                                               
*    On entry:                                                                  
*      R1,R0 - text loc, len                                                    
*                                                                               
*    On exit:                                                                   
*      R1,R0 - translated text loc, len                                         
*              (the text is translated in place)                                
*                                                                               
TOEBCDIC XPROC (R0,LSR)                                                         
         L     R2,=V(EBCTBL)       EBCDIC translate table                       
*                                                                               
         WHILE (R0,POS),BEGIN      Translate text...                            
         LR    R15,R0                                                           
         CEIL  R15,256                                                          
         DEX   R15,'TR @R1(0),@R2' To EBCDIC                                    
*                                                                               
         LA    R1,@R1+256                                                       
         SH    R0,=H'256'                                                       
         END                                                                    
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TOEBC7 -- Routine to translate ASCII-7 text to EBCDIC.                       
*                                                                               
*    On entry:                                                                  
*      R1,R0 - text loc, len                                                    
*                                                                               
*    On exit:                                                                   
*      R1,R0 - translated text loc, len                                         
*              (the text is translated in place)                                
*                                                                               
TOEBC7   XPROC (R0,LSR)                                                         
         L     R2,=V(EBCTBL7)      EBCDIC translate table                       
*                                                                               
         WHILE (R0,POS),BEGIN      Translate text...                            
         LR    R15,R0                                                           
         CEIL  R15,256                                                          
         DEX   R15,'TR @R1(0),@R2' To EBCDIC                                    
*                                                                               
         LA    R1,@R1+256                                                       
         SH    R0,=H'256'                                                       
         END                                                                    
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TOASCII -- Routine to translate EBCDIC text to ASCII.                        
*                                                                               
*    On entry:                                                                  
*      R1,R0 - text loc, len                                                    
*                                                                               
*    On exit:                                                                   
*      R1,R0 - translated text loc, len                                         
*              (the text is translated in place)                                
*                                                                               
TOASCII  XPROC (R0,LSR)                                                         
         L     R2,=V(ASCTBL)       ASCII translate table                        
*                                                                               
         WHILE (R0,POS),BEGIN      Translate text...                            
         LR    R15,R0                                                           
         CEIL  R15,256                                                          
         DEX   R15,'TR @R1(0),@R2' To ASCII                                     
*                                                                               
         LA    R1,@R1+256                                                       
         SH    R0,=H'256'                                                       
         END                                                                    
         PEND                                                                   
*                                                                               
         QLTORG                                                                 
         END   .                                                                
