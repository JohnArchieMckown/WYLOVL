SIFT     TITLE 'MILTEN''s Subsystem Interface'                                  
*******************************************************************             
*                                                                 *             
*     MILTEN/370 - Release VI - Class I - Stanford Proprietary    *             
*                                                                 *             
*******************************************************************             
         HIBAL                                                                  
*                                                                               
         SYSDEFN                                                                
*                                                                               
MILSIFT  CSECT                                                                  
SIFT     IDENT 2047                10:16:24 02/16/02  (SLP)                     
         REGS  ,,FSR,,,,,,BR,SCBR,PDBR,(SUBR,LSR),CVR,SPR,RAR                   
*                                                                               
         PUSH  DSECTS                                                           
         TITLE 'DSECTS'                                                         
         CVT   DSECT=YES                                                        
         EJECT                                                                  
USERCVT  RECORD 'USERCVT'                                                       
         EJECT                                                                  
CVDSECT  DSECT                                                                  
         COPY  CV                                                               
         EJECT                                                                  
         RECORD 'MIB'                                                           
         EJECT                                                                  
FEB      RECORD BEGIN                                                           
         COPY  FEB                                                              
         END                                                                    
         EJECT                                                                  
         COPY  FDB                                                              
         EJECT                                                                  
PIB      RECORD BEGIN                                                           
         COPY  PIB                                                              
         END                                                                    
         EJECT                                                                  
SCB      RECORD BEGIN                                                           
         COPY  SCB                                                              
         END                                                                    
         EJECT                                                                  
SIN      RECORD BEGIN                                                           
         COPY  SIN                                                              
         END                                                                    
         EJECT                                                                  
PDB      RECORD 'PDB'                                                           
         EJECT                                                                  
PATHD    RECORD BEGIN                                                           
         PATH  VERSION=2                                                        
         END                                                                    
         EJECT                                                                  
SEGCB    RECORD 'SEGCB'                                                         
*                                                                               
         POP   DSECTS                                                           
         EJECT                                                                  
         COPY  SUB                                                              
         EJECT                                                                  
         COPY  XLE                                                              
         EJECT                                                                  
         COPY  SSB                                                              
         EJECT                                                                  
         COPY  FSB                                                              
         EJECT                                                                  
         COPY  PSB                                                              
         EJECT                                                                  
         COPY  DEVTRC                                                           
         EJECT                                                                  
         COPY  STRC                                                             
         EJECT                                                                  
         COPY  SUBPOOLS                                                         
         EJECT                                                                  
*box                                                                            
*                                                                               
*  Session information block                                                    
*                                                                               
         RECORD 'SIB'                                                           
         TITLE 'Subsystem Interface'                                            
*box                                                                            
*                                                                               
*  SUBFIN -- Routine to finish initializing the subsystem interface.            
*    (Note this includes creating MORT and waiting for it to                    
*    initialize.)                                                               
*                                                                               
SUBFIN   XPROC                                                                  
         ACALL SUBOPEN             Create a subsystem path                      
*-                                                                              
*-       Start our local subsystem (mort).                                      
*-                                                                              
         L     R1,=V(MORT)         Entry point                                  
         IDENTIFY EP=MORT,ENTRY=(1)                                             
         ATTACH EP=MORT,DPMOD=+1,ETXR=MORTFAIL,SHSPL=MORTSPL                    
         ST    R1,CVMRTTCB                                                      
*-                                                                              
*-       Wait for mort to initialize.                                           
*-                                                                              
         WHILE (CVMRTSUB,Z),BEGIN                                               
         WAIT  ECB=CVECB                                                        
         CLEAR CVECB                                                            
         ACALL SUBDO               Process post if from subsys                  
         END                                                                    
         MVI   CVECB,X'40'         Maybe other work to do                       
         PEND                                                                   
*                                                                               
* List of all subpools that MILTEN must share with MORT                         
*                                                                               
MORTSPL  DC    AL1(MORTSPLL)        Number of entries                           
MORTSPLS DC    AL1(WTOQSUBP)        Subpool for WTOQ elements                   
         DC    AL1(IOHQSUBP)        Subpool for IOHQ elements                   
         DC    AL1(SCBSUBPL)        Subpool for SCBs                            
         DC    AL1(TRCSUBPL)        Subpool for TRC entries                     
         DC    AL1(TQESUBPL)        Timer queue subpool                         
         DC    AL1(FEBSUBPL)        FEB (non-page fixed)                        
         DC    AL1(PIBSUBPL)        PIB (non-page fixed)                        
         DC    AL1(SUBSUBPL)        Subsystem blocks                            
         DC    AL1(STRCSUBP)        Session trace buffers                       
         DC    AL1(QPDBSUBP)        Queued PDBs                                 
         DC    AL1(SPDBSUBP)        Saved PDBs                                  
         DC    AL1(PRMTSUBP)        Saved prompts                               
         DC    AL1(RTXTSUBP)        Saved read text                             
         DC    AL1(SQPDSUBP)        Queued PDBs on subsystem                    
         DC    AL1(CONSQPDB)        Queued CONS PDBs                            
         DC    AL1(PATSUBP)         Port address tables                         
         DC    AL1(TRCHSUBP)        Device trace table hdrs                     
         DC    AL1(ITBLSUBP)        Input xlate table                           
         DC    AL1(MCOMSUBP)        MCOM command buffers                        
         DC    AL1(STMPSUBP)        MCOM temp trace buffer                      
         DC    AL1(EIBSUBP)         ELF EIB                                     
         DC    AL1(AMYQSUBP)        Amelia queue ELF                            
         DC    AL1(SOCKSUBP)        ELF SOCK control block                      
         DC    AL1(SMSGSUBP)        Saved socket msg (ELF)                      
         DC    AL1(PWRTSUBP)        ELF Path write subpool                      
         DC    AL1(TELISUBP)        Telnet input data buffer                    
         DC    AL1(EPIBSUBP)        ELF PIB input buffer                        
         DC    AL1(VPATSUBP)        VIRT PAT                                    
         DC    AL1(VBUFSUBP)        SDD VTAM buffer                             
         DC    AL1(VRUSUBP)         SDD RU                                      
         DC    AL1(VDPBSUBP)        VTAM dummy PIB                              
         DC    AL1(VPPSUBP)         VTAM PIB parms                              
         DC    AL1(VISTSUBP)        VTAM FEB IRB stack                          
         DC    AL1(VACBSUBP)        VTAM ACB subpool                            
         DC    AL1(VRPLSUBP)        VTAM RPL subpool                            
         DC    AL1(VSRRSUBP)        VSRR VBUF                                   
         DC    AL1(VNIBSUBP)        VSRR NIB                                    
         DC    AL1(VBNDSUBP)        BIND area VSRR                              
         DC    AL1(VDVCSUBP)        DVCHAR subpool VSRR                         
         DC    AL1(VRBFSUBP)        Reply buffer                                
         DC    AL1(V3BFSUBP)        D3767 VBUF                                  
         DC    AL1(RSYNSUBP)        RSYN RPL data                               
         DC    AL1(RESPSUBP)        RESP RPL subpool                            
         DC    AL1(REXPSUBP)        Expdited flow subpool                       
MORTSPLL EQU   *-MORTSPLS                                                       
         SPACE 2                                                                
*-                                                                              
*-       Entered asynchronously if the mort subtask abends.                     
*-                                                                              
MORTFAIL WITH  (MORTFAIL,R15),'ABEND 3,DUMP'                                    
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SUBDIE -- Entered at termination to shutdown the subsystem                   
*    interface.                                                                 
*                                                                               
SUBDIE   XPROC                                                                  
*                                                                               
         LA    SUBR,CVSUBQH-(SUBLINK-SUB)  Dummy first link                     
         LOOP  BEGIN                                                            
         WITH  SUB                                                              
         WHILE ('LT SUBR,SUBLINK',NZ)                                           
         FAIL  (SUB,NE,'SUB'),'Bad SUB ptr'                                     
         IF    (SUBSCLCK,NZ),BEGIN  Active subsystem...                         
         IF    (SUBR,EQ,CVMRTSUB),EXIT  Don't kill mort                         
         IF    SUBSFLAG.SUBPFCLS,EXIT                                           
         L     PDBR,CVPDBP                                                      
         WITH  PDB                                                              
         CLEAR PDBHDR                                                           
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         MVI   PDBCMD,FMILSTOP     Shutdown request                             
         LA    R15,PDB                                                          
         ACALL PATHSEND            Tell subsystem to go                         
         END                                                                    
         END                                                                    
*                                                                               
         STIMER WAIT,BINTVL==A(50)  1/2 second for safety                       
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SUBOPEN -- Routine to create and open a subsystem path.                      
*                                                                               
*    On exit:                                                                   
*      R1 - new SUB ptr                                                         
*                                                                               
SUBOPEN  PROC                                                                   
         LA    R0,L'SUB                                                         
         LA    R1,SUBSUBPL                                                      
         LR    R2,RAR                                                           
         VCALL NGETCORE                                                         
         LR    SUBR,R1                                                          
         WITH  SUB                                                              
         CLEAR SUB                                                              
         MVC   SUB(4),=CL4'SUB'                                                 
         INCR  R15,CVSUBID                                                      
         STH   R15,SUBID           Save SUB identifier                          
         MVC   SUBPATH,MODLPATH                                                 
         IF    CVFTEST,'MVI SUBPPASS,C"T"'                                      
         LA    R1,CVECB                                                         
         ST    R1,SUBPECB          Save ecb ptr                                 
         LA    R1,SUBSFLAG                                                      
         ST    R1,SUBPECBF         Save flag ptr                                
         LA    R1,SUBPATH                                                       
         ST    R1,CVWORK                                                        
         OI    CVWORK,X'80'                                                     
         SCOM  OPEN,CVWORK         Open                                         
         FAIL  (R15,NZ),'Subsystem open path error'                             
*                                                                               
         L     R15,CVSUBQT                                                      
         WITH  (SUB,R15),'ST SUBR,SUBLINK; ST SUBR,CVSUBQT'  Link up            
*                                                                               
         LR    R1,SUBR                                                          
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SUBCLS -- Routine to close and free subsystem path.                          
*                                                                               
*    On entry:                                                                  
*      R1 - SUB ptr                                                             
*                                                                               
SUBCLS   PROC                                                                   
         LR    SUBR,R1                                                          
         WITH  SUB                                                              
*                                                                               
         FAIL  (SUB,NE,'SUB'),'Bad SUB control block'                           
*                                                                               
         FAIL  (SUBR,EQ,CVMRTSUB),'MILTEN/MORT problem'                         
*                                                                               
         IF    (SUBR,EQ,CVCURSUB),'CLEAR CVCURSUB'  Reset current               
*                                                                               
         SCOM  CLOSE,0,SUBPMGC     Close path                                   
         IF    (R15,EQ,4),BEGIN                                                 
         WTO   'SCOM close error (invalid function) - ignored.'                 
         CLEAR R15                 This must be a bug in Suzan                  
         END                                                                    
         FAIL  (R15,NZ),'SUB path error'                                        
*-                                                                              
*-       The default subsystem (WYLBUR) is terminating.                         
*-                                                                              
         IF    (SUBNAME,EQ,CVDEFSYS),BEGIN  Defsys closing...                   
         CLEAR CVFDFSYS,CVDEFSUB   No default system any more                   
*-                                                                              
*-       Terminate ORVYL if WYLBUR goes down.                                   
*-                                                                              
         LA    R2,CVSUBQH-(SUBLINK-SUB)  Dummy first link                       
         LOOP  BEGIN                                                            
         WITH  (SUB,R2)                                                         
         WHILE ('LT R2,SUBLINK',NZ)                                             
         IF    (SUBNAME,EQ,'ORVYL'),BEGIN                                       
         SET   SUBSFLAG.SUBPFCLS,MODE=LOCKED,REF=SUB                            
         END                                                                    
         END                                                                    
         END                                                                    
*-                                                                              
*-       Close virtual terminal paths if ORVYL goes down.                       
*-                                                                              
         IF    (SUBNAME,EQ,'ORVYL'),BEGIN  ORVYL closing...                     
         LA    R7,CVFEBQH-(FEBLINK-FEB)  Dummy first link                       
         WITH  (FEB,R7)                                                         
         WHILE ('LT R7,FEBLINK',NZ),BEGIN  Go through FEBs...                   
         IF    (FEBTYPE,EQ,FEBTVIRT),BEGIN  Virtual...                          
         LA    R1,FEB                                                           
         VCALL VIRTXCLS            Special virtual terminal close               
         END                                                                    
         END                                                                    
         END                                                                    
*                                                                               
*                                                                               
         LA    SCBR,CVSCBQH-(SCBLINK-SCB)  Dummy first entry                    
         LOOP  BEGIN                                                            
         WITH  SCB                                                              
         WHILE ('LT SCBR,SCBLINK',NZ)                                           
*                                                                               
         IF    (SUBR,EQ,SCBSUBP),BEGIN  current subsys...                       
         MVC   SCBSUBP,=F'-1'      Flag as dead                                 
         IF    (^SCBTFSYN,AND,^SCBTFAIO),BEGIN  No I/O, send to mort...         
         SET   SCBTFSYN            (For SUBSEND validity check)                 
         L     PDBR,CVPDBP                                                      
         WITH  PDB                                                              
         CLEAR PDBHDR                                                           
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         L     R2,CVMRTSUB                                                      
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBENTER                                                         
         END                                                                    
         ELSEIF (SCBCMD,EQ,TMILREAD),BEGIN  Read outstanding...                 
         L     PDBR,CVPDBP                                                      
         WITH  PDB                                                              
         CLEAR PDBHDR                                                           
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         MVI   PDBCMD,TMILBRK      Break read                                   
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL FEDO                                                             
         FAIL  NZ,'Subsystem interface error'                                   
         END                                                                    
         END                                                                    
*                                                                               
         IF    (SUBR,EQ,SCBDSUBP),'CLEAR SCBDSUBP'                              
*                                                                               
         LA    R2,SCBSUBL                                                       
         LA    R3,SCBSUBE                                                       
         WHILE (R2,LT,R3),BEGIN    Check for subsys in list...                  
         IF    ('C SUBR,@R2',EQ),'CLEAR (@R2,4); B SUBDN'                       
         LA    R2,@R2+4                                                         
         END                                                                    
SUBDN    DECR  R15,SUBCUR          One less session now                         
         END                                                                    
*                                                                               
         LA    R15,CVSUBQH-(SUBLINK-SUB)  Dummy first entry                     
         LOOP  BEGIN                                                            
         WITH  (SUB,R15)                                                        
         LR    R7,R15              Save prev ptr                                
         WHILE ('LT R15,SUBLINK',NZ)                                            
         IF    (R15,EQ,SUBR),SUBDQ                                              
         END                                                                    
         FAIL  'Bad SUB queue'                                                  
*                                                                               
SUBDQ    MVC   SUBLINK-SUB(4,R7),SUBLINK  Dequeue                               
         IF    (SUBLINK,Z),'ST R7,CVSUBQT'  Keep tail accurate                  
         MVC   SUBLINK,=F'-1'      Safety                                       
*                                                                               
         WHILE ('LT R1,SUBPDBQH',NZ),BEGIN  Free pending PDB's...               
         MVC   SUBPDBQH,@R1        De-queue                                     
         VCALL FREECORE            ...and free                                  
         END                                                                    
*                                                                               
         MVC   SUB(4),=C'OSUB'                                                  
         LA    R1,SUB                                                           
         VCALL FREECORE                                                         
*                                                                               
         CLEAR R15                                                              
         PEND                                                                   
*                                                                               
         QLTORG                                                                 
         SPACE 2                                                                
*push,gen                                                                       
MODLPATH PATH  PFX=MODL,MYTAG=MILTEN,PASS=PSUB,BUFSIZE=CVSUZLEN,       *        
               ECB=*-*,FLAG=*-*,VERSION=2                                       
*pop                                                                            
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SUBDO -- Routine to handle requests from subsystems.                         
*    (Called from the dispatcher.)                                              
*                                                                               
SUBDO    XPROC                                                                  
SUBTOP   LA    SUBR,CVSUBQH-(SUBLINK-SUB)  Dummy first entry                    
*                                                                               
SUBLOOP  LOOP  BEGIN                                                            
         WITH  SUB                                                              
         WHILE ('LT SUBR,SUBLINK',NZ)                                           
         TM    SUBSFLAG,SUBPFOPN+SUBPFNI+SUBPFFQE+SUBPFCLS  chk bits            
         IF    Z,NEXT              Nothing new                                  
*-                                                                              
*-       Process opening subsystem path.                                        
*-                                                                              
         IF    SUBSFLAG.SUBPFOPN,BEGIN  Path opened...                          
         CLEAR SUBSFLAG.SUBPFOPN,MODE=LOCKED,REF=SUB                            
*                                                                               
         ACALL SUBOPEN             Get a spare                                  
         END                                                                    
*-                                                                              
*-       Process closing subsystem path.                                        
*-                                                                              
         IF    SUBSFLAG.SUBPFCLS,BEGIN  Path closing...                         
         LR    R1,SUBR                                                          
         ACALL SUBCLS              Finish closing                               
         B     SUBTOP              Recheck subsystems from the top              
         END                                                                    
*-                                                                              
*-       Send pending subsystem requests if full queue has emptied.             
*-                                                                              
         IF    SUBSFLAG.SUBPFFQE,BEGIN  Full queue emptied...                   
         CLEAR SUBSFLAG.SUBPFFQE,MODE=LOCKED,REF=SUB                            
*                                                                               
         WHILE ('LT R7,SUBPDBQH',NZ),BEGIN  Pending PDB's...                    
         MVC   SUBPDBQH,@R7        De-queue entry                               
         MVC   @R7(4),=F'-1'       (safety)                                     
         LA    R15,@R7+4           PDB (xact)                                   
         ACALL PATHSEND            Try to send it (again)                       
         LR    R2,R15              Save rc                                      
         LR    R1,R7                                                            
         VCALL FREECORE            Release PDB                                  
         IF    (R2,POS),EXIT       Entry was re-queued, scram                   
         END                                                                    
         END                                                                    
*-                                                                              
*-       Process new subsystem requests.                                        
*-                                                                              
         IF    (CVRCLOC,Z),NEXT,SUBLOOP  Ignore new if lowcore                  
*                                                                               
         IF    SUBSFLAG.SUBPFNI,BEGIN  Process new info...                      
         ACALL PROCSUB             Process subsystem requests                   
         BNZ   SUBTOP              Recheck subsystems from the top              
         END                                                                    
         END                                                                    
         PEND                                                                   
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*  PROCSUB -- Local routine to get PDB from subsystem and process it.           
*                                                                               
*    On exit, R15 (and CC):                                                     
*      0 - ok                                                                   
*      4 - subsystem error (path closed)                                        
*                                                                               
PROCSUB  PROC                                                                   
         WITH  SUB                 (Entry assumption)                           
         ST    SUBR,CVCURSUB                                                    
PSUBLOOP CLEAR SUBSFLAG.SUBPFNI,MODE=LOCKED,REF=SUB                             
*                                                                               
         L     PDBR,CVPDBP                                                      
         WITH  PDB                                                              
*-                                                                              
*-       Very temporary code.  1/24/92   !!!                                    
*-                                                                              
         MVC   CVNIZSAV,PDBHDR     Save off old contents                        
*-                                                                              
*-       End of very temporary code.  !!!                                       
*-                                                                              
         CLEAR PDBHDR                                                           
         LA    R15,4(0,PDBR)                                                    
         ST    R15,@R13                                                         
         SET   @R13.X'80'                                                       
         MVC   @R13+4(4),=A(CVBUFLEN-4)                                         
         SCOM  GET,(R13),SUBPMGC   Read PDB                                     
         IF    (R15,NZ),BEGIN      Bad return code...                           
         FAIL  ((R15,LE,PATHRPMW),OR,(R15,GT,PATHRNOP)),               X        
               'Subsystem path error'                                           
         LCALL PROCCLS                                                          
         B     PSUBERR                                                          
         END                                                                    
         LTR   R1,R1                                                            
         BZ    PSUBNORM            Nothing                                      
         LA    R1,4(,R1)           Add in for RDW length                        
         STH   R1,PDBLENG          Make up length                               
         CLEAR (PDBHDR+2,2)        Reset rdw flags                              
*                                                                               
         SET   SUBSFLAG.SUBPFNI,MODE=LOCKED,REF=SUB                             
         INCR  R15,SUBNIO          Kick subsys I/O count                        
         EJECT                                                                  
         IF    (SUBNAME,Z),BEGIN   Expecting init...                            
         IF    (PDBCMD,LT,TMILINIT),'LCALL PROCCLSZ; B PSUBERR'                 
         IF    (PDBCMD,GT,TMILMW),'LCALL PROCCLSZ; B PSUBERR'                   
         IF    (PDBCMD,EQ,TMILINIT),BEGIN  Init subsys...                       
         LA    R4,CVSUBQH-(SUBLINK-SUB)  Dummy first entry                      
         WITH  (SUB,R4),BEGIN                                                   
         WHILE ('LT R4,SUBLINK',NZ),BEGIN                                       
         IF    (PDBSYSNM,EQ,SUBNAME),BEGIN  Name in use...                      
         LCALL PROCCLSZ                                                         
         B     PSUBERR                                                          
         END                                                                    
         END                                                                    
         END                                                                    
*                                                                               
         MVC   SUBNAME,PDBSYSNM    Subsys name                                  
         MVC   SUBJOBNM,SUBNAME    Fake jobname                                 
         SET   SUBFPRIV            Assume priv'd                                
*                                                                               
         PUSH  8+20+64,PTR=R7      Arglist + info + haspserv info               
         CLEAR (@R7,8+20+64)                                                    
         LA    R15,@R7+8                                                        
         ST    R15,@R7                                                          
         OI    @R7,X'80'                                                        
         MVC   @R7+4(4),=F'20'                                                  
         SCOM  INFO,(R7),SUBPMGC   Sense partner info                           
         IF    (R15,Z),BEGIN                                                    
         MVC   SUBASCBP,@R7+8                                                   
         HASPSERV JOBNAME,@R7+28,ASCB=SUBASCBP                                  
         IF    (R15,NZ),EXIT                                                    
         MVC   SUBJOBNM,@R7+28     Save jobname                                 
*                                                                               
         CLEAR SUBFPRIV            Not priv'd                                   
         IF    PDBCMDFL.INITFPRV,BEGIN  Subsys wants to be priv'd...            
         HASPSERV JOBACCT,@R7+28,ASCB=SUBASCBP  Get job acct/privs              
         IF    (R15,Z),BEGIN       Haspserv worked...                           
         IF    @R7+28+7.SIBFSPR+SIBFOPR,EXIT  Job is priv'd, scram              
         POP   8+20+64                                                          
         LCALL PROCCLSZ            Can't do it                                  
         B     PSUBERR                                                          
         END                                                                    
         SET   SUBFPRIV            Indicate priv'd                              
         END                                                                    
         END                                                                    
         POP   8+20+64                                                          
*                                                                               
         VCALL LOCALTOD            Clock at start                               
         STM   R0,R1,SUBSCLCK                                                   
*                                                                               
         MVC   PDBLENG,=AL2(L'PDBHDR+8)                                         
         CLEAR PDBOPT                                                           
         MVC   PDBSINP,CVSITP      Return SIT ptr (in CSA)                      
         MVC   PDBTEXT(8),CVMJOBNM  Milten's jobname                            
         MVC   PDBRC,=AL2(8)                                                    
         MVC   PDBOUTCT,=AL2(8+6)                                               
         LA    R15,PDB                                                          
         ACALL PATHSEND            Acknowledge                                  
         CLEAR PDBHDR                                                           
*                                                                               
         IF    (SUBNAME,EQ,'MILTEN'),'ST SUBR,CVMRTSUB'  Mort                   
*                                                                               
         IF    (SUBNAME,EQ,CVDEFSYS),BEGIN  Default system...                   
         ST    SUBR,CVDEFSUB       Save SUB ptr                                 
         SET   CVFDFSYS            Default subsys available                     
         POST  CVMRTECB            Post mort                                    
         END                                                                    
         END                                                                    
         B     PSUBLOOP                                                         
         END                                                                    
         EJECT                                                                  
*-                                                                              
*-       Get SCB pointer from line-oriented PDB, and make sure this             
*-         subsystem is in control of the line specified.                       
*-                                                                              
         LH    R15,PDBLIN#         Session no.                                  
         IF    (R15,LGE,CVMAXSES),'LCALL PROCCLSZ; B PSUBERR'                   
         SLL   R15,2               SAT offset                                   
         L     R4,CVSATP                                                        
         LT    R1,@R4(R15)         SCB ptr                                      
         IF    ^POS,'LCALL PROCCLSZ; B PSUBERR'                                 
         WITH  (SCB,R1),BEGIN                                                   
         IF    (SUBR,NE,SCBSUBP),BEGIN  Not in subsys...                        
         LCALL PROCCLSZ            Close path                                   
         B     PSUBERR                                                          
         END                                                                    
         END                                                                    
         LA    R15,PDB                                                          
         LCALL PROCPDB             Process line-oriented PDB                    
         BZ    PSUBLOOP            Get next request if ok                       
*                                                                               
PSUBERR  LA    R15,4               Subsystem error return code                  
         B     PSUBEXIT                                                         
*                                                                               
PSUBNORM CLEAR R15                 Good return code                             
PSUBEXIT CLEAR CVCURSUB                                                         
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  PROCPDB -- Routine to process PDB from subsystem or send it                  
*    to the front-end routine if it's device dependent.                         
*                                                                               
*    On entry:                                                                  
*      R1 - SCB ptr                                                             
*      R15- PDB ptr                                                             
*                                                                               
*    On exit, R15 (and cc):                                                     
*      0 - ok                                                                   
*      4 - PDB error (path closed)                                              
*                                                                               
PROCPDB  PROC                                                                   
         LR    SCBR,R1                                                          
         WITH  SCB                                                              
         LR    PDBR,R15                                                         
         WITH  PDB                                                              
*                                                                               
         CLEAR CVCURSUB                                                         
         ST    SCBR,CVCURSCB                                                    
*                                                                               
         CLEAR SCBTFSIO+SCBTFQIO   Initialize flags                             
*                                                                               
         IF    ((PDBCMD,LT,TMILEOS),OR,(PDBCMD,GT,TMILBRK)),BEGIN               
         LCALL PROCCLSZ            Close path                                   
         B     PPDBERR                                                          
         END                                                                    
*                                                                               
         WITH  SCB                                                              
         L     SUBR,SCBSUBP        SUB ptr                                      
         WITH  SUB                                                              
*-                                                                              
*-       Before doing anything else, fix up ORVYL PDBMOD flags.                 
*-                                                                              
         IF    ((SUBNAME,EQ,'ORVYL'),OR,                               *        
               (SUBNAME,EQ,'TESTORV')),BEGIN  ORVYL...                          
         IF    ((PDBCMD,EQ,TMILWRIT),OR,(PDBCMD,EQ,TMILREAD)),BEGIN             
*                                                                               
         IF    PDBMODC.MODCDSPL,BEGIN  ORVYL display mode...                    
         SET   PDBMODB.MODBUFMT    Unformatted                                  
         END                                                                    
         END                                                                    
         END                                                                    
*-                                                                              
*-   Check for SYSMODE prefix and also check for system I/O request.            
*-                                                                              
         IF    ((PDBCMD,EQ,TMILWRIT),OR,(PDBCMD,EQ,TMILREAD)),BEGIN             
         ACALL SYSMODE             Process any @@SYSMODE prefix                 
*                                                                               
         ACALL SYSCHECK            Check to see if it is system I/O             
*-                                                                              
*-       Check for quiet I/O.                                                   
*-                                                                              
         IF    SCBFQUIET,BEGIN     We are in quiet mode...                      
         IF    PDBMODB.MODBFOR,EXIT  Force I/O even in quiet mode               
         SET   SCBTFQIO            Do "quiet I/O"                               
         END                                                                    
*-                                                                              
*-       Update display and clean modes.                                        
*-                                                                              
         IF    (SCBTFSIO+SCBTFQIO,Z),BEGIN  Regular I/O...                      
         CLEAR SCBTFDISP+SCBTFTRAN                                              
         IF    PDBMODC.MODCDSPL,'SET SCBTFDISP'  Display mode                   
         IF    PDBMODD.MODDTRAN,'SET SCBTFTRAN'  Transparent I/O                
*                                                                               
         CLEAR SCBFCLN             Assume noclean                               
         IF    PDBMODA.MODACL,'SET SCBFCLN'  Clean listing                      
         END                                                                    
         END                                                                    
         EJECT                                                                  
*-                                                                              
*-       Start any new asynchronous I/O now if possible.                        
*-                                                                              
         LA    R1,SCB                                                           
         ACALL DOAIO               Start any new asynchronous I/O               
*-                                                                              
*-       If asynchronous I/O is in progress then queue the new I/O.             
*-                                                                              
         IF    SCBTFAIO,BEGIN      Async I/O in progress...                     
         IF    (PDBCMD,EQ,TMILBRK),PPDBNORM  Ignore break here                  
         IF    SCBTFIO,'LCALL PROCCLS; B PPDBERR'  Sync error                   
         IF    (SCBSPDBP,NZ),'LCALL PROCCLS; B PPDBERR'                         
         CLEAR SCBTFSIO+SCBTFQIO   Reset flags we might have set                
         CLEAR SCBTFDISP+SCBTFTRAN   Ditto                                      
         LH    R0,PDBLENG                                                       
         LA    R1,SPDBSUBP                                                      
         LA    R2,*+4                                                           
         VCALL NGETCORE                                                         
         ST    R1,SCBSPDBP                                                      
         MOVEL (R1),PDB,LH:PDBLENG  Save PDB                                    
         B     PPDBNORM                                                         
         END                                                                    
*                                                                               
         IF    (PDBCMD,NE,TMILBRK),BEGIN  New sync operation...                 
         IF    SCBTFSYN,'LCALL PROCCLSZ; B PPDBERR'  Already sync               
         SET   SCBTFSYN                                                         
         END                                                                    
*-                                                                              
*-       Save resource usage information if this is the production              
*-         ORVYL.                                                               
*-                                                                              
         IF    (SUBNAME,EQ,'ORVYL'),BEGIN  Production ORVYL only...             
         MVC   SCBVINFO,PDBVINFO   Save ORVYL resource info                     
         END                                                                    
*-                                                                              
*-       Do PDB conversions for ORVYL here.                                     
*-                                                                              
         IF    ((SUBNAME,EQ,'ORVYL'),OR,                               *        
               (SUBNAME,EQ,'TESTORV')),BEGIN  ORVYL special cases...            
*                                                                               
         IF    ((PDBCMD,NE,TMILWRIT),AND,(PDBCMD,NE,TMILREAD)),EXIT             
*                                                                               
         LH    R2,PDBWC                                                         
         IF    (R2,GE,L'MODPFX+4),BEGIN                                         
         CLC   PDBTEXT(L'MODPFX),MODPFX  Special MILMOD prefix?                 
         IF    NE,EXIT             No, scram                                    
         MVC   PDBMOD,PDBTEXT+L'MODPFX  Move in mode flags                      
         SH    R2,=AL2(L'MODPFX+4)                                              
         STH   R2,PDBWC            New write text count                         
         MOVEL PDBTEXT,PDBTEXT+L'MODPFX+4,(R2)  move text over                  
         END                                                                    
*                                                                               
         IF    PDBMODC.MODCDSPL,BEGIN  Display mode...                          
         LT    R3,SCBPIBP                                                       
         IF    NZ,BEGIN                                                         
         WITH  (PIB,R3),'L R3,PIBFEBP'                                          
         WITH  (FEB,R3)                                                         
         IF    ^FEBFRLIN,EXIT      Skip special RLIN defaults                   
         SET   PDBMODD.MODDTRAN+MODDNMOD  Transparent                           
         IF    (PDBCMD,NE,FMILREAD),EXIT                                        
         LH    R2,PDBOUTCT                                                      
         FLOOR R2,0                                                             
         CEIL  R2,4000                                                          
         MOVEL L:CVWKBUFP,PDBWC,(R2)                                            
         MOVEL PDBTEXT,L:CVWKBUFP,(R2)  Adjust                                  
         CLEAR (PDBWC,6)                                                        
         STH   R2,PDBWC                                                         
         LH    R15,PDBLENG                                                      
         LA    R15,@R15+6          (We've expanded the PDB, remember)           
         STH   R15,PDBLENG                                                      
         END                                                                    
         LH    R15,PDBWC                                                        
         AH    R15,PDBPC                                                        
         STH   R15,PDBWC                                                        
         CLEAR PDBPC,PDBRC,PDBOUTCT                                             
         END                                                                    
         END                                                                    
         EJECT                                                                  
*-                                                                              
*-       Fix up PDBMOD flags for synchronous PDB requests.                      
*-                                                                              
         IF    (PDBCMD,NE,TMILBRK),BEGIN  Save PDB info...                      
         IF    (PDBMODB.MODBUPPR+MODBUPLO,Z),BEGIN  Use def case...             
         SET   PDBMODB.MODBUPPR                                                 
         IF    SCBFUPL,'SET PDBMODB.MODBUPLO'                                   
         END                                                                    
         IF    (PDBMODB.MODBUPPR+MODBUPLO,ONES),BEGIN  Tidy up...               
         CLEAR PDBMODB.MODBUPPR                                                 
         END                                                                    
*                                                                               
         IF    ^PDBMODB.MODBSLOL,BEGIN                                          
         IF    ^SCBFFAST,'SET PDBMODB.MODBSLOL'  Slow                           
         END                                                                    
*                                                                               
         IF    ^PDBMODD.MODDXON,BEGIN                                           
         IF    SCBFXON,'SET PDBMODD.MODDXON'     Xon                            
         END                                                                    
*                                                                               
         IF    PDBMODD.MODDTRAN,'SET PDBMODD.MODDNMOD'  Transparent             
*                                                                               
         IF    ^PDBMODD.MODDNFLT,BEGIN                                          
         IF    ^SCBFFILT,'SET PDBMODD.MODDNFLT'  No ctrl char filter            
         END                                                                    
*                                                                               
         MVC   SCBCMD,PDBCMD       Save command code                            
         MVC   SCBMOD,PDBMOD       Save mode flags                              
         END                                                                    
*-                                                                              
*-       Special handling of BREAK (halt I/O) request.                          
*-                                                                              
         IF    (PDBCMD,EQ,TMILBRK),BEGIN  Halt request...                       
         SET   SCBTFHIO            Halt initiated by us                         
         END                                                                    
*-                                                                              
*-       TXCTL: Transfer control to a different subsystem.                      
*-                                                                              
         IF    (PDBCMD,EQ,TMILXCTL),BEGIN  Change subsys...                     
PROCXCTL MVI   PDBCMD,TMILXCTL                                                  
         IF    SCBFLGF+SCBFSOF,BEGIN  Refuse TXCTL...                           
         MVC   PDBSYSNM,=8X'FF'    Indicate not cool                            
         SET   PDBMODA.MODAFMIL                                                 
         LR    R2,SUBR             Return to sender                             
         B     PROCX                                                            
         END                                                                    
*-                                                                              
*-       A subsystem name of "#DEFAULT" means go to the user's                  
*-         default subsystem (usually CVDEFSYS).                                
*-                                                                              
         IF    (PDBSYSNM,EQ,'#DEFAULT'),BEGIN  User's default...                
         MVC   PDBSYSNM,CVDEFSYS   Assume default name                          
*                                                                               
         LT    R15,SCBDSUBP        User's default subsystem                     
         IF    NZ,BEGIN            He has one...                                
         WITH  (SUB,R15),'MVC PDBSYSNM,SUBNAME'                                 
         END                                                                    
         END                                                                    
*-                                                                              
*-       Reject any attempt to transfer control to MILTEN.                      
*-                                                                              
         IF    (PDBSYSNM,EQ,'MILTEN  '),BEGIN  Compatability...                 
         MVC   PDBSYSNM,=8X'FF'    Indicate not cool                            
         SET   PDBMODA.MODAFMIL                                                 
         LR    R2,SUBR             Return to sender                             
         B     PROCX                                                            
         END                                                                    
*                                                                               
         LA    R2,CVSUBQH-(SUBLINK-SUB)  Dummy first link                       
         LOOP  BEGIN                                                            
         WITH  (SUB,R2)                                                         
         WHILE ('LT R2,SUBLINK',NZ)                                             
         IF    (PDBSYSNM,EQ,SUBNAME),BEGIN                                      
         IF    (SUBSCLCK,Z),PROCNX  Can't xctl yet                              
         IF    PDBMODA.MODAFMIL,'MVC PDBSYSNM,=CL8"MILTEN"'                     
         B     PROCX                                                            
         END                                                                    
         END                                                                    
PROCNX   CLEAR PDBSYSNM            Indicate not found                           
         SET   PDBMODA.MODAFMIL                                                 
         LR    R2,SUBR             Return to sender                             
*                                                                               
PROCX    LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBENTER            Transfer control                             
         B     PPDBNORM                                                         
         END                                                                    
*-                                                                              
*-       Terminal I/O request.                                                  
*-                                                                              
         IF    ((PDBCMD,EQ,TMILWRIT),OR,(PDBCMD,EQ,MILAWR),OR,         *        
               (PDBCMD,EQ,TMILREAD)),BEGIN  Count the I/O...                    
         IF    SCBTFSIO,EXIT       Don't count system I/O                       
         LH    R15,PDBLENG                                                      
         SH    R15,=AL2(L'PDBHDR)  Data length                                  
         IF    ^POS,'LA R15,1'                                                  
         LA    R15,@R15+255                                                     
         SRL   R15,8               No. of 256 byte blocks                       
         A     R15,SCBNIO                                                       
         ST    R15,SCBNIO          New I/O count                                
*                                                                               
         VCALL SINEUPD             Update SIN I/O count too                     
         END                                                                    
*                                                                               
         IF    ((PDBCMD,EQ,TMILWRIT),OR,(PDBCMD,EQ,TMILXCTL)),BEGIN             
         CLEAR SCBFWARN,SCBTMINC   Reset inactivity timeout                     
         END                                                                    
*                                                                               
         IF    ((PDBWC,Z),AND,(PDBPC,Z)),BEGIN  Zero len write...               
         IF    ((PDBCMD,NE,TMILWRIT),AND,(PDBCMD,NE,MILAWR)),EXIT               
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         CLEAR PDBOPT                                                           
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBSEND             Acknowledge immediately                      
         B     PPDBNORM                                                         
         END                                                                    
*                                                                               
         IF    (PDBCMD,EQ,MILAWR),BEGIN                                         
         L     R15,PDBAWID         Async write session id                       
         ACALL FINDSID                                                          
         IF    Z,BEGIN             Found session...                             
         LA    R15,PDB                                                          
         ACALL ASYNWRIT            Queue asynchronous write                     
         END                                                                    
         CLEAR PDBOPT                                                           
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         IF    (R15,NZ),'SET PDBCPLB.CPLBILT'                                   
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBSEND                                                          
         B     PPDBNORM                                                         
         END                                                                    
*-                                                                              
*-       Do system I/O.                                                         
*-                                                                              
         IF    SCBTFSIO,BEGIN      System I/O...                                
         ACALL SYSDO               Do system I/O                                
         B     PPDBNORM            All done, scram                              
         END                                                                    
*-                                                                              
*-       Trace real and quiet terminal I/O's.                                   
*-                                                                              
         IF    SCBFTRC,BEGIN       Tracing is active...                         
         IF    ((PDBCMD,EQ,TMILREAD),OR,(PDBCMD,EQ,TMILWRIT)),BEGIN             
         LA    R15,=CL(L'STRCTYPE)'Read'                                        
         IF    (PDBCMD,EQ,TMILWRIT),'LA R15,=CL(L"STRCTYPE)"Write"'             
*                                                                               
         IF    SCBFQUIET,BEGIN     We are in quiet mode...                      
         IF    PDBMODB.MODBFOR,EXIT  Forced I/O, scram                          
         LA    R15,=CL(L'STRCTYPE)'Quiet read'                                  
         IF    (PDBCMD,EQ,TMILWRIT),BEGIN                                       
         LA    R15,=CL(L'STRCTYPE)'Quiet write'                                 
         END                                                                    
         END                                                                    
         SETMSG PDBTEXT,LH:PDBWC    Write text                                  
         AH    R0,PDBPC            Include prompt text too                      
         ACALL SESSTRC             Trace terminal I/O                           
         END                                                                    
         END                                                                    
*-                                                                              
*-       Do quiet I/O.                                                          
*-                                                                              
         IF    SCBTFQIO,BEGIN      Quiet I/O...                                 
         ACALL QUIETDO             Do quiet I/O                                 
         B     PPDBNORM            All done, scram                              
         END                                                                    
*-                                                                              
*-       Do real I/O (send it to the front-end).                                
*-                                                                              
         IF    ((PDBCMD,EQ,TMILWRIT),OR,(PDBCMD,EQ,TMILREAD),OR,       *        
               (PDBCMD,EQ,TMILBRK)),BEGIN  FE stuff...                          
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL FEDO                                                             
         IF    NZ,'LCALL PROCCLS; B PPDBERR'                                    
         B     PPDBNORM                                                         
         END                                                                    
*                                                                               
         IF    (PDBCMD,EQ,MILCNTL),'LCALL CNTL; B PPDBNORM'                     
*-                                                                              
*-       Subsys-off (request for all other subsystem to logoff).                
*-                                                                              
         IF    (PDBCMD,EQ,MILSOF),BEGIN  Subsys off...                          
         IF    SCBFSOF,BEGIN       Already doing a subsys off...                
         LR    R2,SUBR             Treat as nop; and return                     
         B     PROCRET                                                          
         END                                                                    
*                                                                               
         SET   SCBFSOF             Subsys off now in progress                   
         ST    SUBR,SCBDSUBP       We are the default subsystem                 
*                                                                               
         LCALL SUBOFF              Tell next subsystem to go away               
         BNZ   PPDBNORM            Other subsys now in control                  
*                                                                               
         CLEAR SCBFSOF             Subsys off is finished                       
         LR    R2,SUBR             Return to same subsystem                     
         B     PROCRET             Return                                       
         END                                                                    
*-                                                                              
*-       End of session.                                                        
*-                                                                              
         IF    (PDBCMD,EQ,TMILEOS),BEGIN  Logoff...                             
         CLEAR R4                                                               
         LA    R2,SCBSUBL                                                       
         LA    R3,SCBSUBE                                                       
         WHILE (R2,LT,R3),BEGIN                                                 
         L     R1,@R2                                                           
         IF    (SUBR,EQ,R1),'CLEAR R1; ST R1,@R2'  Reset                        
         IF    ((R1,NZ),AND,(R4,Z)),'LR R4,R1'                                  
         LA    R2,@R2+4                                                         
         END                                                                    
*                                                                               
         DECR  R15,SUBCUR          One less session now                         
*                                                                               
         IF    SCBFSOF,BEGIN       Subsys off in progress...                    
         LCALL SUBOFF              Zot next subsystem                           
         BNZ   PPDBNORM            Another subsys is now in control             
*                                                                               
         CLEAR SCBFSOF             All user subsystems gone now                 
         L     R2,SCBDSUBP         Return to default subsystem                  
         B     PROCRET                                                          
         END                                                                    
*                                                                               
         IF    PDBCMDFL.EOSALL,'SET SCBFLGF'  Logoff terminal                   
         IF    PDBCMDFL.EOSXCTL,PROCXCTL  Transfer control                      
*                                                                               
         IF    (R4,NZ),BEGIN       Usersys(s) still connected...                
         SET   SCBFLGF             Logging off                                  
         LR    R2,R4               First usersys                                
         B     PROCRET             Tell it end of session                       
         END                                                                    
*                                                                               
         CLEAR R4                                                               
         IF    ((SCBACCT,NZ),AND,^SCBSFPS),'LA R4,1'  Flag                      
*                                                                               
         LA    R1,SCB                                                           
         VCALL DECRSES             Decr user count                              
*                                                                               
         CLEAR (PDBWC,6)                                                        
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL FEDO                Send eos to fe                               
         IF    NZ,'LCALL PROCCLS; B PPDBERR'                                    
*                                                                               
         IF    (R4,NZ),'VCALL STOPCHK'  (May shutdown milten)                   
         B     PPDBNORM                                                         
*                                                                               
PROCRET  MVC   CVWORK,=CL8'MILTEN'                                              
         CLEAR PDBHDR                                                           
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         MVC   PDBSYSNM,CVWORK                                                  
         SET   PDBMODA.MODAFMIL                                                 
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBENTER                                                         
         B     PPDBNORM                                                         
         END                                                                    
*                                                                               
         IF    ((PDBCMD,EQ,TMILWTO),OR,(PDBCMD,EQ,TMILACCT),           *        
               OR,(PDBCMD,EQ,TMILNOP)),BEGIN                                    
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         CLEAR PDBOPT                                                           
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBSEND             Acknowledge immediately                      
         B     PPDBNORM                                                         
         END                                                                    
*                                                                               
         LC    R15,PDBCMD          Unknown command code                         
         LCALL PROCCLS                                                          
*                                                                               
PPDBERR  LA    R15,4               Set error return code                        
         B     PPDBEXIT                                                         
*                                                                               
PPDBNORM CLEAR R15                 Set good return code                         
PPDBEXIT CLEAR CVCURSCB                                                         
         PEND                                                                   
*                                                                               
MODPFXX  DC    X'EE',C'MILMOD:'                                                 
MODPFX   EQU   MODPFXX,*-MODPFXX,C'X'                                           
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SYSMODE -- Local routine to process a PDB terminal read/write                
*    with a prefix of "@@SYSMODE:ffff:".  This routine moves the                
*    PDBMOD flags from the "ffff", and then removes the special                 
*    prefix.                                                                    
*                                                                               
*                                                                               
SYSMODE  PROC                                                                   
         WITH  SCB,PDB             (Entry assumptions)                          
*                                                                               
         IF    (PDBTEXT,NE,'@@SYSMODE:'),EXIT                                   
*                                                                               
         LH    R2,PDBWC                                                         
         AH    R2,PDBPC                                                         
         SH    R2,=H'15'                                                        
         IF    NEG,EXIT            Bad format, scram                            
         IF    (PDBTEXT+14,NE,':'),EXIT                                         
*                                                                               
         MVC   PDBMOD,PDBTEXT+10   Set new mode flags                           
*                                                                               
         MOVEL PDBTEXT,PDBTEXT+15,(R2)  Move text over                          
*                                                                               
         LH    R2,PDBWC                                                         
         SH    R2,=H'15'           Reduce data length                           
         IF    ^NEG,'STH R2,PDBWC'                                              
         ELSE  BEGIN               Reduce prompt count...                       
         AH    R2,PDBPC            (This reduces prompt count)                  
         IF    NEG,'CLEAR R2'      (Shouldn't happen)                           
         STH   R2,PDBPC                                                         
         END                                                                    
*                                                                               
         CLEAR R15                 (Neatness)                                   
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SYSCHECK -- Local routine to check to see if this is System                  
*    I/O.  If it is then the PDB mode flag is set.                              
*                                                                               
SYSCHECK PROC                                                                   
         WITH  SCB,PDB             (Entry assumptions)                          
*-                                                                              
*-       Set "system I/O" PDB flag if it's an @@SYS read/write.                 
*-                                                                              
         CLEAR SCBTFSIO            Assume it's not for us                       
         LH    R2,PDBWC                                                         
         AH    R2,PDBPC                                                         
         IF    (R2,GE,L'SYSPFX),BEGIN  It might have the prefix...              
         IF    (SYSPFX,NE,PDBTEXT),EXIT  Not system I/O                         
         SET   SCBTFSIO            It's system I/O                              
         END                                                                    
*                                                                               
         CLEAR R15                 (Neatness)                                   
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SYSDO -- Local routine to process system I/O.  System I/O is                 
*    a terminal read or write that begins with @@SYS.                           
*                                                                               
SYSDO    PROC                                                                   
         WITH  SCB,PDB             (Entry assumptions)                          
*                                                                               
         FAIL  ^SCBTFSIO,'System terminal I/O problem #1'                       
         FAIL  (SYSPFX,NE,PDBTEXT),'System terminal I/O prob #2'                
*                                                                               
         LH    R2,PDBWC                                                         
         AH    R2,PDBPC                                                         
         SH    R2,=AL2(L'SYSPFX)   Length of text past prefix                   
*                                                                               
         IF    (R2,GE,5),BEGIN                                                  
*                                                                               
         IF    (PDBCMD,EQ,TMILREAD),BEGIN  Allow a few more...                  
*-                                                                              
*-       Set maximum "input count" (the amount of data that can be              
*-         returned) accurately.                                                
*-                                                                              
         LH    R15,PDBINCT         Max amount of input allowed                  
         IF    (R15,NP),'LA R15,168'  (Compatability)                           
         LTH   R2,SCBINMX          Global max allowed                           
         IF    (NP,OR,(R2,GT,4096)),'LH R2,=H"4096"'  Universal max             
         CEIL  R15,R2              Not too much                                 
         STH   R15,PDBINCT                                                      
         STH   R15,SCBINCT                                                      
*                                                                               
         SET   PDBMODD.MODDNMOD    Don't translate our response                 
*                                                                               
         IF    (PDBTEXT+L'SYSPFX,EQ,'TERM?'),SYSTERM                            
         IF    (PDBTEXT+L'SYSPFX,EQ,'ACCT?'),SYSACCT                            
         IF    (PDBTEXT+L'SYSPFX,EQ,'EXPR?'),SYSEXPR                            
         END                                                                    
         END                                                                    
*-                                                                              
*-       Return attn for unrecognized system I/O requests.                      
*-                                                                              
SYSBAD   MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         CLEAR PDBOPT                                                           
         SET   PDBCPLA.CPLAATTN                                                 
*                                                                               
SYSSEND  LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBSEND             Send response to subsystem                   
         CLEAR R15                 (Neatness)                                   
         EXIT                                                                   
         EJECT                                                                  
SYSTWA   RECORD BEGIN                                                           
SYSTTYPE DS    CL8                 Terminal type                                
SYSTID   DS    CL8                 Terminal id                                  
SYSTFLG  FLAG                                                                   
         FLAG  SYSFMOD             - Supported by model terminal                
SYSTFLG2 FLAG                                                                   
SYSTWID  DS    H                   Actual terminal width                        
SYSTHEI  DS    H                   Actual terminal height                       
SYSTWIDP DS    H                   User's width                                 
SYSTHEIP DS    H                   User's height (page/pause)                   
         DS    XL6                 Reserved                                     
         END                                                                    
         SPACE 2                                                                
**                                                                              
**  @@SYSTERM?  (Returns terminal information)                                  
**                                                                              
         SPACE 2                                                                
SYSTERM  MVC   PDBLENG,=AL2(L'PDBHDR+L'SYSTWA)                                  
         CLEAR PDBOPT                                                           
*                                                                               
         LA    R7,PDBTEXT                                                       
         WITH  (SYSTWA,R7),BEGIN                                                
         CLEAR SYSTWA                                                           
         MVC   SYSTTYPE,SCBTTYPE                                                
         MVC   SYSTID,SCBTID                                                    
         IF    SCBFMOD,'SET SYSFMOD'                                            
         MVC   SYSTWID,SCBWID                                                   
         MVC   SYSTHEI,SCBHEI                                                   
         MVC   SYSTWIDP,SCBWID     (Temporary)                                  
         MVC   SYSTHEIP,SCBHEIP                                                 
         END                                                                    
         B     SYSSEND                                                          
         EJECT                                                                  
SYSAWA   RECORD BEGIN                                                           
SYSAACCT DS    CL8                 Account (gg.uuu format)                      
SYSAACT2 DS    CL8                 Saved account (gg.uuu format)                
SYSAPROJ DS    CL8                 Project id                                   
         DS    CL8                 Reserved                                     
SYSANAME DS    CL20                Name or Lname                                
SYSALNAM DS    CL20                Name                                         
SYSALINE DS    CL20                Line text                                    
SYSANO   DS    H                   MILTEN session number                        
SYSAANO  DS    H                   User number (for "gg.uuu#nnn")               
         DS    CL36                Reserved                                     
         END                                                                    
         SPACE 2                                                                
**                                                                              
**  @@SYSACCT?  (Returns account information)                                   
**                                                                              
         SPACE 2                                                                
SYSACCT  MVC   PDBLENG,=AL2(L'PDBHDR+L'SYSAWA)                                  
         CLEAR PDBOPT                                                           
         LA    R7,PDBTEXT                                                       
         WITH  (SYSAWA,R7),BEGIN                                                
         CLEAR SYSAWA                                                           
         MVC   SYSAACCT,CVBLANKS                                                
         MVC   SYSAACCT(2),SCBGRP                                               
         MVI   SYSAACCT+2,C'.'                                                  
         MVC   SYSAACCT+3(3),SCBUSER                                            
         MVC   SYSAACT2,CVBLANKS                                                
         MVC   SYSANAME,SCBNAME                                                 
         MVC   SYSALNAM,SCBNAME                                                 
         MVC   SYSALINE,SCBNAME                                                 
         MVC   SYSANO,SCBNO                                                     
         MVC   SYSAANO,SCBANO                                                   
         END                                                                    
         B     SYSSEND                                                          
         EJECT                                                                  
**                                                                              
**  @@SYSEXPR?  (Returns the result of a WYLBUR expression)                     
**                                                                              
         SPACE 2                                                                
SYSEXPR  LH    R15,PDBWC                                                        
         AH    R15,PDBPC           Text length                                  
         CLEAR PDBOPT                                                           
         STH   R15,PDBWC           Save total text length                       
         LA    R0,@R15+6                                                        
         STH   R0,PDBOUTCT         Also save length here                        
         LA    R15,L'PDBHDR+@R15                                                
         STH   R15,PDBLENG                                                      
         MVI   PDBORV,PDBVRCTL     Set "read control" (see &WYL.ORV)            
         L     R2,SCBDSUBP         Default subsystem (WYLBUR)                   
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBENTER            Send expression to WYLBUR                    
*                                                                               
         CLEAR R15                 (Neatness)                                   
         EXIT                                                                   
         PEND                                                                   
*                                                                               
SYSPFX   DC    C'@@SYS'                                                         
         EJECT                                                                  
*box                                                                            
*                                                                               
*  QUIETIO -- Local routine to process quiet I/O.  A quiet terminal             
*    write is simply thrown away.  A quiet terminal read is                     
*    returned with the logoff flag.                                             
*                                                                               
*    It might be nice someday to keep a trace buffer with the                   
*    text from the last 50 or so quiet I/Os.  It would help in                  
*    debugging servers.                                                         
*                                                                               
QUIETDO  PROC                                                                   
         WITH  SCB,PDB             (Entry assumptions)                          
*                                                                               
         FAIL  ^SCBTFQIO,'Quiet terminal I/O problem'                           
*-                                                                              
*-       Return attn for unrecognized system I/O requests.                      
*-                                                                              
         IF    ((PDBCMD,EQ,TMILWRIT),OR,(PDBCMD,EQ,TMILREAD)),BEGIN             
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         CLEAR PDBOPT                                                           
         IF    (PDBCMD,EQ,TMILREAD),'SET PDBCPLB.CPLBLGF'  Logoff               
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBSEND             Send response to subsystem                   
         END                                                                    
         CLEAR R15                 (Neatness)                                   
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SUBOFF -- Local routine to re-enter a user subsystem so it can               
*    logoff.                                                                    
*                                                                               
*      On exit, R15 (and CC):                                                   
*        0 - no user subsystems found                                           
*        4 - entered usersys                                                    
*                                                                               
SUBOFF   PROC                                                                   
         WITH  SCB,PDB,SUB         (Entry assumptions)                          
*                                                                               
         LA    R3,SCBSUBL                                                       
         LA    R4,SCBSUBE                                                       
         WHILE (R3,LT,R4),BEGIN    Find subsys in list...                       
         LT    R2,@R3                                                           
         IF    NZ,BEGIN            Can we subsys-off this system?               
         IF    (R2,EQ,SCBSUBP),EXIT  Not us                                     
         IF    (R2,EQ,SCBDSUBP),EXIT  Not the default system either             
         CLEAR PDBHDR                                                           
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         SET   PDBCPLB.CPLBLGF     Logoff (won't be latched)                    
         MVC   PDBSYSNM,=CL8'MILTEN'                                            
         SET   PDBMODA.MODAFMIL                                                 
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBENTER            Re-enter to signoff                          
         LA    R15,4                                                            
         EXIT  SUBOFF                                                           
         END                                                                    
*                                                                               
         LA    R3,@R3+4                                                         
         END                                                                    
         CLEAR R15                 Set rc                                       
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  PROCCLS/PROCCLSZ -- Local routine to close subsystem path.                   
*                                                                               
PROCCLSZ CLEAR R15                                                              
PROCCLS  PROC                                                                   
         WITH  SUB,PDB             (Entry assumptions)                          
         QSNAP 'Subsystem path error:',MODE=WTO                                 
         IF    (R15,NZ),'QSNAP (R15)'                                           
         QSNAP PDBHDR,L'PDBHDR+16                                               
         QSNAP SUB                                                              
         S     RAR,=A(MILSIFT)                                                  
         LA    RAR,@RAR                                                         
         QSNAP (RAR)               Module offset                                
*                                                                               
         LA    R1,SUB                                                           
         ACALL SUBCLS              Close subsystem                              
         CLEAR SUBR,CVCURSUB                                                    
         PEND                                                                   
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*  CNTL -- Local routine to process "control" PDB.                              
*                                                                               
CNTL     PROC                                                                   
         WITH  SCB,PDB,SUB         (Entry assumptions)                          
*                                                                               
         LC    R15,PDBCMDFL        Control no.                                  
         CLEAR PDBCMDFL,PDBCRET,PDBCMOD                                         
*                                                                               
         IF    (R15,GE,100),BEGIN  Priv'd control...                            
         IF    ^SUBFPRIV,CNTLPRV   Can't do it if not priv'd                    
         IF    (R15,GT,CTLPMAX),'LA R15,100'                                    
         SH    R15,=H'100'                                                      
         SLL   R15,2                                                            
         L     RAR,CNTLPTBL(R15)   Processing routine                           
         BALR  RAR,RAR                                                          
         B     CNTLDONE                                                         
         END                                                                    
*                                                                               
         IF    (R15,GT,CTLMAX),'CLEAR R15'                                      
         SLL   R15,2                                                            
         L     RAR,CNTLTBL(R15)    Processing routine                           
         BALR  RAR,RAR                                                          
         B     CNTLDONE                                                         
         EJECT                                                                  
CNTLTBL  DC    A(CNTL0)                                                         
         DC    A(CNTL1)            1:  sense session info                       
         DC    A(CNTL2)            2:  set   session info                       
         DC    A(CNTL3)            3:  sense port info                          
         DC    A(CNTL4)            4:  sense front-end info                     
         DC    A(CNTL5)            5:  sense device dependent info              
         DC    A(CNTL6)            6:  sense subsystem info                     
         DC    A(CNTL7)            7:  sense accounting info                    
         DC    A(CNTL8)            8:  sense milten info                        
         DC    A(CNTL9)            9:  sense symbol type                        
         DC    A(CNTL10)           10: sense MILTEN device trace                
CNTLTMX  EQU   (*-CNTLTBL-4)/4,,C'N'                                            
*                                                                               
         DS    0S(CTLMAX-CNTLTMX,CNTLTMX-CTLMAX)                                
         SPACE 2                                                                
CNTLPTBL DC    A(CNTL0)                                                         
         DC    A(CNTL101)          101: set session                             
         DC    A(CNTL102)          102: set session options                     
         DC    A(CNTL103)          103: kill session                            
         DC    A(CNTL104)          104: set port info                           
         DC    A(CNTL105)          105: set front-end info                      
         DC    A(CNTL106)          106: set device dependent info               
         DC    A(CNTL107)          107: set accounting info                     
         DC    A(CNTL108)          108: milten shutdown                         
CNTLPTMX EQU   (*-CNTLPTBL-4)/4+100,,C'N'                                       
*                                                                               
         DS    0S(CTLPMAX-CNTLPTMX,CNTLPTMX-CTLPMAX)                            
         SPACE 2                                                                
*-                                                                              
*-       Front-end control vector table                                         
*-                                                                              
FCNTLTBL DC    A(0)                                                             
         DC    V(CONSCNTL)         FEBTCONS                                     
*         DC    V(ASYNCNTL)         FEBTASYN                                    
         DC    A(0)                                                             
*         DC    V(PDPCNTL)          FEBTPDP                                     
         DC    A(0)                                                             
*         DC    V(VTAMCNTL)         FEBTVTAM                                    
         DC    A(0)                                                             
         DC    V(VIRTCNTL)         FEBTVIRT                                     
*         DC    V(NSCCNTL)          FEBTNSC                                     
         DC    A(0)                                                             
         DC    V(ELFCNTL)          FEBTELF                                      
*         DC    V(ALFCNTL)          FEBTALF                                     
         DC    A(0)                                                             
*         DC    V(ECUCNTL)          FEBTECU                                     
         DC    A(0)                                                             
FCNTLMAX EQU   (*-FCNTLTBL-4)/4,,C'N'                                           
         DS    0S(FCNTLMAX-FEBTMAX,FEBTMAX-FCNTLMAX)                            
         EJECT                                                                  
*****  CONTROL 0:    bad control number                                         
         SPACE                                                                  
CNTL0    MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         MVI   PDBCRET,PDBCRBAD    Sorry, wrong number                          
         B     CNTLDONE                                                         
         SPACE 2                                                                
***                                                                             
***                                                                             
CNTLPRV  MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         MVI   PDBCRET,PDBCRPRV    Privileged                                   
         B     CNTLDONE                                                         
*                                                                               
CNTLBF   MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         MVI   PDBCRET,PDBCRBF     Bad format                                   
         B     CNTLDONE                                                         
*                                                                               
CNTLRC0  CLEAR R15                                                              
         B     CNTLRC                                                           
*                                                                               
CNTLRC4  LA    R15,4                                                            
         B     CNTLRC                                                           
*                                                                               
CNTLRC8  LA    R15,8                                                            
         B     CNTLRC                                                           
*                                                                               
CNTLRC12 LA    R15,12                                                           
         B     CNTLRC                                                           
*                                                                               
CNTLRC   MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         STC   R15,PDBCMOD          control return code                         
         B     CNTLDONE                                                         
*                                                                               
CNTLDONE LH    R15,PDBLENG                                                      
         SH    R15,=AL2(L'PDBHDR)                                               
         STH   R15,PDBWC                                                        
         CLEAR PDBPC,PDBRC                                                      
*                                                                               
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBSEND             Send response                                
         EXIT                                                                   
         EJECT                                                                  
*****  CONTROL 1:    sense session info                                         
         SPACE                                                                  
CNTL1    LTH   R5,PDBWC                                                         
         IF    Z,'LR R7,SCBR; B CNTL1MAT'  RETURN USER'S sib                    
         IF    (R5,LT,4),CNTLBF    Must have id                                 
*                                                                               
         DROP  SCB                                                              
         USING SCB,R7                                                           
*                                                                               
         L     R6,PDBTEXT          Current session id                           
         LR    R0,R5                                                            
         SH    R0,=AL2(6+12)       Length of range text                         
         LA    R1,PDBTEXT+6+12                                                  
*                                                                               
         IF    ((R0,EQ,1),AND,(@R1,EQ,'*')),BEGIN                               
         LR    R7,SCBR                                                          
         IF    (R6,GE,SCBID),CNTLRC4  all done                                  
         B     CNTL1MAT                                                         
         END                                                                    
*                                                                               
         DTB   (R1),(R0)           Convert to binary (if number)                
         IF    Z,BEGIN             Session number...                            
         IF    ((R5,EQ,3+6+12),AND,(PDBTEXT+6+12,EQ,'0')),EXIT                  
CNTL1NUM IF    (R15,LGE,CVMAXSES),EXIT                                          
         SLL   R15,2                                                            
         A     R15,CVSATP                                                       
         LT    R7,@R15                                                          
         IF    Z,CNTLRC4           No session                                   
         IF    (R6,NZ),CNTLRC4     All done                                     
         B     CNTL1MAT                                                         
         END                                                                    
*                                                                               
         LA    R1,PDBTEXT(R5)                                                   
         LA    R15,64                                                           
         SR    R15,R5                                                           
         IF    POS,'MOVE R15,@R1,CVBLANKS'  pad with blanks                     
*                                                                               
         IF    (R6,Z),'L R7,CVSCBQH; B CNTL1F'  start at the top                
*                                                                               
         IF    (R5,GE,6),BEGIN     Session no. present...                       
         LH    R15,PDBTEXT+4                                                    
         IF    (R15,LGE,CVMAXSES),EXIT  ignore it                               
         SLL   R15,2                                                            
         A     R15,CVSATP                                                       
         LT    R7,@R15                                                          
         IF    Z,EXIT              No session                                   
         IF    (R6,NE,SCBID),EXIT  doesn't match, do search                     
         L     R7,SCBLINK          Next session                                 
         B     CNTL1F              SCB found -- no search needed                
         END                                                                    
*                                                                               
         LA    R7,CVSCBQH-(SCBLINK-SCB)  Dummy first link                       
         WHILE (('LT R7,SCBLINK',NZ),AND,(R6,GE,SCBID)),''                      
*                                                                               
CNTL1F   LA    R6,PDBTEXT+6+12                                                  
         SH    R5,=AL2(6+12)       Account for id,no,prefix                     
         BNP   CNTL1MAT            No range text, everything matches            
         WHILE (R7,NZ),BEGIN                                                    
         IF    (@R6,EQ,'OPERATOR'),BEGIN                                        
         IF    ^SCBSFOP,CNTL1N     Skip non-operator                            
         B     CNTL1MAT                                                         
         END                                                                    
*                                                                               
         IF    (@R6,EQ,SCBTID),CNTL1MAT                                         
*                                                                               
         IF    ^PDBTEXT+6.X'40',BEGIN  all not specified...                     
         IF    SCBSFPS,CNTL1CH     Skip pseudo session                          
         IF    (SCBACCT,Z),CNTL1CH  skip zero session (logging on)              
         END                                                                    
*                                                                               
         IF    PDBTEXT+6.X'80',CNTL1Q   quoted text                             
*                                                                               
         IF    (R5,GE,6),BEGIN     Gg.uuu or uuu$gg...                          
         CLEAR (@R13,5)                                                         
         IF    (@R6+2,EQ,'.'),BEGIN  gg.uuu...                                  
         MVC   @R13(2),@R6                                                      
         MVC   @R13+2(3),@R6+3                                                  
         END                                                                    
         IF    (@R6+3,EQ,'$'),BEGIN  uuu$gg...                                  
         MVC   @R13(2),@R6+4                                                    
         MVC   @R13+2(3),@R6                                                    
         END                                                                    
         IF    (@R13,EQ,X'00'),EXIT                                             
         IF    ((R5,GT,6),AND,(@R6+6,NE,'#')),EXIT                              
         IF    ((SCBGRP,NE,@R13),OR,(SCBUSER,NE,@R13+2)),CNTL1N                 
         IF    (R5,EQ,6),CNTL1MAT                                               
         LR    R0,R5                                                            
         SH    R0,=H'7'                                                         
         DTB   @R6+7,(R0)                                                       
         IF    NZ,CNTLRC12         Bad digits                                   
         IF    (R15,Z),CNTL1MAT    Zero matches everything                      
         IF    ('C2 R15,SCBANO',NE),CNTL1N                                      
         B     CNTL1MAT                                                         
         END                                                                    
*                                                                               
         IF    (@R6,EQ,'&&'),BEGIN                                              
         IF    (R5,NE,4),CNTLRC12                                               
         IF    (@R6+1,NE,SCBUSER),CNTL1N                                        
         B     CNTL1MAT                                                         
         END                                                                    
*                                                                               
         IF    (@R6,EQ,'@'),BEGIN                                               
         IF    (R5,GT,3),CNTLRC12                                               
         IF    ('CLC SCBGRP(1),@R6+1',NE),CNTL1N                                
         IF    (R5,EQ,2),CNTL1MAT  @g                                           
         IF    (SCBGRP,NE,@R6+1),CNTL1N                                         
         B     CNTL1MAT                                                         
         END                                                                    
*                                                                               
         IF    ((R5,EQ,4),AND,(@R6,EQ,'KEPT')),BEGIN                            
         IF    SCBFKEPT,CNTL1MAT                                                
         END                                                                    
*                                                                               
         IF    (R5,EQ,3),BEGIN                                                  
         IF    (@R6,EQ,'ALL'),CNTL1MAT                                          
         IF    (@R6,EQ,SCBUSER),CNTL1MAT                                        
*                                                                               
         LT    R15,SCBPIBP                                                      
         IF    NZ,BEGIN                                                         
         WITH  (PIB,R15)                                                        
         IF    (@R6,EQ,PIBNAME),CNTL1MAT                                        
         END                                                                    
         END                                                                    
*                                                                               
CNTL1CH  IF    (SCBTCONS,AND,(@R6,EQ,SCBNAME)),CNTL1MAT                         
*                                                                               
         LT    R3,SCBPIBP                                                       
         IF    NZ,BEGIN            PIB ptr...                                   
*-                                                                              
*-       The following code tries to be extra careful about                     
*-         recovering from a bad SCBPIBP ptr.                                   
*-                                                                              
         ST    R7,CVCURFRSCB       Save current SCB ptr                         
         WITH  (PIB,R3)                                                         
         FAIL  (PIB,NE,'PIB'),'PIB validity error #1'                           
         FAIL  (R7,NE,PIBSCBP),'PIB validity error #2'                          
         L     R4,PIBFEBP                                                       
         WITH  (FEB,R4)                                                         
         FAIL  (FEB,NE,'FEB'),'FEB validity error'                              
         OC    FEBNAME,FEBNAME     Trigger any error now                        
         CLEAR CVCURFRSCB          Reset failsoft info                          
*                                                                               
         SETMSG (R6),(R5)                                                       
         CLEAR R15                                                              
         WHILE ((R0,POS),AND,(@R1,NE,'-')),BEGIN                                
         LA    R15,@R15+1                                                       
         LA    R1,@R1+1                                                         
         DECR  R0                                                               
         END                                                                    
         IF    (R15,POS),BEGIN     Try to match fe name...                      
         CEIL  R15,8                                                            
         MVC   CVWORK,CVBLANKS                                                  
         MOVE  R15,CVWORK,@R6      Fe name                                      
         IF    (FEBNAME,NE,CVWORK),CNTL1N  doesn't match                        
         END                                                                    
*                                                                               
         LA    R1,@R1+1            Past "-"                                     
         DECR  R0                                                               
         IF    (R0,NP),CNTL1MAT    Already matched                              
         CEIL  R0,8                                                             
         LR    R15,R0                                                           
         MVC   CVWORK,CVBLANKS                                                  
         MOVE  R15,CVWORK,@R1      Device name                                  
         EX    R15,'CLC PIBNAME(0),CVWORK'  match?                              
         BE    CNTL1MAT            Yes                                          
         END                                                                    
         B     CNTL1N                                                           
*                                                                               
CNTL1Q   MVC   @R13(L'SCBNAME),SCBNAME                                          
         OC    @R13(L'SCBNAME),CVBLANKS                                         
         IF    ('LTR R15,R5',^POS),BEGIN  null string...                        
         IF    ('CLC @R13(L"SCBNAME),CVBLANKS',EQ),CNTL1MAT                     
         B     CNTL1N                                                           
         END                                                                    
         CEIL  R15,L'SCBNAME                                                    
         DECR  R15                 Ex form                                      
         OC    @R6(64),CVBLANKS    Caps                                         
         LR    R1,R13                                                           
         LA    R4,@R1+L'SCBNAME                                                 
         LOOP  BEGIN                                                            
         EX    R15,'CLC @R6(0),@R1' Match?                                      
         BE    CNTL1MAT            Yes                                          
         LA    R1,@R1+1                                                         
         UNTIL (R1,GE,R4),END                                                   
*                                                                               
CNTL1N   L     R7,SCBLINK          Next session                                 
         END                                                                    
         B     CNTLRC4             All done                                     
*                                                                               
CNTL1MAT LA    R1,SCB                                                           
         LA    R15,PDBTEXT         Put sib here                                 
         ACALL FMTSIB                                                           
         LA    R15,L'PDBHDR+@R15                                                
         STH   R15,PDBLENG                                                      
         B     CNTLDONE                                                         
*                                                                               
         DROP  SCB                                                              
         USING SCB                                                              
         EJECT                                                                  
*****  CONTROL 2:    set session info                                           
         SPACE 2                                                                
CNTL2    LH    R15,PDBWC                                                        
         IF    ((R15,LT,2),OR,(R15,GT,L'SCBOPT)),CNTLBF                         
         L2    R2,PDBTEXT          New SIBUC                                    
         DECR  R2                                                               
         L2    R1,SCBUC                                                         
         IF    (R2,NE,R1),BEGIN  Update counts disagree...                      
         LA    R1,SCB                                                           
         LA    R15,PDBTEXT         Put SIB here                                 
         ACALL FMTSIB                                                           
         LA    R15,L'PDBHDR+@R15                                                
         STH   R15,PDBLENG                                                      
         MVI   PDBCMOD,4                                                        
         B     CNTLDONE            Return SIB with bad rc                       
         END                                                                    
*                                                                               
         MOVE  R15,SCBOPT,PDBTEXT  Set SIB options                              
         LA    R1,SCB                                                           
         ACALL UPDSCB              Check SCB updates                            
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         B     CNTLDONE                                                         
         EJECT                                                                  
*****  CONTROL 3:    sense port info                                            
         SPACE 2                                                                
CNTL3    LTH   R4,PDBWC                                                         
         IF    Z,BEGIN             Our port...                                  
         L     R6,SCBPIBP          Our PIB                                      
         WITH  (PIB,R6),'L R7,PIBFEBP'  our FEB                                 
         B     CNTL3MAT                                                         
         END                                                                    
*                                                                               
         IF    (R4,LT,4),CNTLBF    Must have fe/port ids                        
*                                                                               
         LA    R5,PDBTEXT+4+12     Range text                                   
         SH    R4,=AL2(4+12)                                                    
         IF    ((R4,EQ,1),AND,(@R5,EQ,'*')),BEGIN  our port...                  
         L     R6,SCBPIBP          Our PIB                                      
         WITH  (PIB,R6)                                                         
         L     R7,PIBFEBP          Our FEB                                      
         WITH  (FEB,R7)                                                         
         LH    R15,PIBNO                                                        
         IF    ('OC PDBTEXT(4),PDBTEXT',NZ),CNTLRC4  have FEBid..done           
         B     CNTL3MAT                                                         
         END                                                                    
*                                                                               
         LH    R15,PDBTEXT         Front-end id to match                        
         LA    R7,CVFEBQH-(FEBLINK-FEB)  Dummy first link                       
         USING FEB,R7                                                           
         WHILE ('LT R7,FEBLINK',NZ),BEGIN                                       
         IF    (R15,LLE,FEBID),CNTL3FE                                          
         END                                                                    
         B     CNTLRC4             No match, all done                           
         EJECT                                                                  
CNTL3FE  LH    R15,PDBTEXT+2       Current port id                              
         IF    (FEBID,EQ,PDBTEXT),'LA R15,@R15+1'  next port                    
         ELSE  'CLEAR R15'         New fe, start at port zero                   
CNTL3P   IF    (R15,GE,FEBPMAX),BEGIN                                           
CNTL3NF  LT    R7,FEBLINK          Next front-end                               
         BZ    CNTLRC4             None, all done                               
         CLEAR R15                 Start at port zero                           
         END                                                                    
         LR    R1,R15                                                           
         SLL   R1,2                Port no. times four                          
         LT    R6,FEBPATP                                                       
         BZ    CNTL3NF             No ports, go on to next fe                   
         LT    R6,@R6(R1)          PIB ptr                                      
         IF    Z,BEGIN                                                          
         LA    R15,@R15+1          Next port                                    
         B     CNTL3P                                                           
         END                                                                    
         USING PIB,R6                                                           
*                                                                               
         LA    R5,PDBTEXT+4+12                                                  
         LH    R4,PDBWC                                                         
         SH    R4,=AL2(4+12)                                                    
         BNP   CNTL3MAT                                                         
*                                                                               
         IF    (^PDBTEXT+4.X'40',AND,PIBFPS),CNTL3NP  skip pseudo port          
*                                                                               
         IF    (R4,EQ,3),BEGIN                                                  
         IF    (@R5,EQ,'ALL'),CNTL3MAT                                          
         IF    (@R5,EQ,'0'),CNTL3DEV  unit addr                                 
         IF    (@R5,EQ,'6'),CNTL3DEV  unit addr                                 
         IF    (@R5,EQ,'C'),CNTL3DEV  unit addr                                 
         END                                                                    
*                                                                               
         CLEAR R15                                                              
         WHILE ((R4,POS),AND,(@R5,NE,'-')),BEGIN                                
         LA    R15,@R15+1                                                       
         LA    R5,@R5+1                                                         
         DECR  R4                                                               
         END                                                                    
         IF    (R15,POS),BEGIN     Try to match fe name...                      
         CEIL  R15,8                                                            
         MVC   CVWORK,CVBLANKS                                                  
         MOVE  R15,CVWORK,PDBTEXT+4+12  fe name                                 
         IF    (FEBNAME,NE,CVWORK),CNTL3NF  doesn't match                       
         END                                                                    
*                                                                               
         LA    R5,@R5+1            Past "-"                                     
         DECR  R4                                                               
CNTL3DEV IF    (R4,NP),CNTL3MAT    Already matched                              
         CEIL  R4,8                                                             
         MVC   CVWORK,CVBLANKS                                                  
         MOVE  R4,CVWORK,@R5       Device name                                  
         IF    PDBTEXT+4.X'80','LA R4,8-1'  quoted                              
         EX    R4,'CLC PIBNAME(0),CVWORK'  match?                               
         BE    CNTL3MAT            Yes                                          
*                                                                               
CNTL3NP  LH    R15,PIBNO                                                        
         LA    R15,@R15+1          Next port                                    
         B     CNTL3P                                                           
         EJECT                                                                  
CNTL3MAT LA    R5,PDBTEXT                                                       
         WITH  (PSB,R5),BEGIN                                                   
         CLEAR PSB                                                              
         MVC   PSBTTYPE,FEBTYPE    Save front-end type                          
         MVC   PSBFEID,FEBID       FEB id                                       
         MVC   PSBPNO,PIBNO        PIB no                                       
         ST    R6,PSBPIBP          Address of PIB                               
         MVC   PSBFENM,FEBNAME                                                  
         MVC   PSBBASIC,PIBBASIC   PIB info                                     
         END                                                                    
         LA    R15,L'PDBHDR+L'PSB                                               
         STH   R15,PDBLENG                                                      
         B     CNTLDONE                                                         
*                                                                               
         DROP  PIB,FEB                                                          
         EJECT                                                                  
*****  CONTROL 4:    sense front-end info                                       
         SPACE 2                                                                
CNTL4    LTH   R0,PDBWC                                                         
         IF    Z,BEGIN             Our front-end...                             
         L     R15,SCBPIBP                                                      
         WITH  (PIB,R15),'L R7,PIBFEBP'                                         
         B     CNTL4MAT                                                         
         END                                                                    
*                                                                               
         IF    (R0,LT,2),CNTLBF    Must have fe-id                              
*                                                                               
         LA    R6,PDBTEXT+2+12     Range text                                   
         LR    R5,R0                                                            
         SH    R5,=AL2(2+12)                                                    
*                                                                               
         IF    ((R5,EQ,1),AND,(@R6,EQ,'*')),BEGIN  our front-end...             
         L     R15,SCBPIBP                                                      
         WITH  (PIB,R15),'L R7,PIBFEBP'                                         
         WITH  (FEB,R7)                                                         
         L2    R15,FEBID                                                        
         CLM   R15,B'0011',PDBTEXT                                              
         IF    LLE,CNTLRC4         all done                                     
         B     CNTL4MAT                                                         
         END                                                                    
*                                                                               
         L2    R15,PDBTEXT         Front-end id to match                        
         LA    R7,CVFEBQH-(FEBLINK-FEB)  Dummy first link                       
         USING FEB,R7                                                           
         WHILE ('LT R7,FEBLINK',NZ),BEGIN                                       
         IF    (R15,LLT,FEBID),CNTL4FE                                          
         END                                                                    
         B     CNTLRC4             No match, all done                           
         EJECT                                                                  
CNTL4NF  LT    R7,FEBLINK          Next front-end, if any                       
         BZ    CNTLRC4             No, all done                                 
*                                                                               
CNTL4FE  IF    ((FEBTYPE,EQ,FEBTVIRT),AND,(FEBINFO,Z)),CNTL4NF  ignore          
*                                                                               
         IF    (R5,NP),CNTL4MAT    No range text, matched                       
*                                                                               
         IF    (^PDBTEXT+2.X'40',AND,FEBFPS),CNTL4NF  skip pseudo fe            
*                                                                               
         IF    ((R5,EQ,3),AND,(@R6,EQ,'ALL')),CNTL4MAT                          
*                                                                               
         LR    R15,R5                                                           
         CEIL  R15,8                                                            
         MVC   CVWORK,CVBLANKS                                                  
         MOVE  R15,CVWORK,@R6      Front-end name                               
         IF    PDBTEXT+2.X'80','LA R5,8-1'  quoted                              
         EX    R15,'CLC CVWORK(0),FEBNAME'  match?                              
         BNE   CNTL4NF             No                                           
*                                                                               
CNTL4MAT LA    R6,PDBTEXT                                                       
         WITH  (FSB,R6),BEGIN                                                   
         CLEAR FSB                                                              
         MVC   FSBID,FEBID         FEB id                                       
         MVC   FSBTYPE,FEBTYPE     Save front-end type                          
         ST    R7,FSBFEBP                                                       
         MVC   FSBBASIC,FEBBASIC                                                
         END                                                                    
         LA    R15,L'PDBHDR+L'FSB                                               
         STH   R15,PDBLENG                                                      
         B     CNTLDONE                                                         
*                                                                               
         DROP  FEB                                                              
*                                                                               
         DS    0S(L'FSBBASIC-L'FEBBASIC,L'FEBBASIC-L'FSBBASIC)                  
         EJECT                                                                  
*****  CONTROL 5:    sense device dependent info                                
         SPACE 2                                                                
CNTL5    IF    (PDBWC,LT,L'FDBT),CNTLBF                                         
         LA    R7,PDBTEXT                                                       
         WITH  (FDB,R7),BEGIN                                                   
         LC    R0,FDBTDNO                                                       
         IF    (R0,GE,100),CNTLBF                                               
         LA    R1,CVFEBQH-(FEBLINK-FEB)  Dummy first link                       
         LOOP  BEGIN                                                            
         WITH  (FEB,R1)                                                         
         WHILE ('LT R1,FEBLINK',NZ)                                             
         LC    RAR,FEBTYPE                                                      
         IF    (FEBID,EQ,FDBTFE),CNTL5MAT                                       
         END                                                                    
         B     CNTLRC4             Front-end not found                          
*                                                                               
CNTL5MAT LA    R15,PDB                                                          
         IF    (RAR,GT,FEBTMAX),'CLEAR RAR'                                     
         SLL   RAR,2                                                            
         LT    RAR,FCNTLTBL(RAR)                                                
         BZ    CNTLRC8                                                          
         BALR  RAR,RAR                                                          
         BNZ   CNTLRC                                                           
         B     CNTLDONE                                                         
         END                                                                    
         EJECT                                                                  
*****  CONTROL 6:    sense subsystem info                                       
         SPACE 2                                                                
CNTL6    IF    (PDBWC,NE,2),CNTLBF  must have hw id                             
         LH    R7,PDBTEXT          Current subsys id                            
         LA    R6,CVSUBQH-(SUBLINK-SUB)  Dummy first link                       
         LOOP  BEGIN                                                            
         WITH  (SUB,R6)                                                         
         WHILE ('LT R6,SUBLINK',NZ)                                             
         IF    (SUBNAME,Z),NEXT                                                 
         IF    (SUBNAME,EQ,'MILTEN  '),NEXT                                     
         IF    (R7,LT,SUBID),BEGIN  matched...                                  
         LA    R5,PDBTEXT                                                       
         WITH  (SSB,R5)                                                         
         CLEAR SSB                                                              
         MVC   SSBID,SUBID         Subsystem id                                 
         MVC   SSBBASIC,SUBBASIC   Info                                         
         LA    R15,L'PDBHDR+L'SSB                                               
         STH   R15,PDBLENG                                                      
         B     CNTLDONE                                                         
         END                                                                    
         END                                                                    
         B     CNTLRC4             All done                                     
*                                                                               
         DS    0S(L'SSBBASIC-L'SUBBASIC,L'SUBBASIC-L'SSBBASIC)                  
         EJECT                                                                  
*****  CONTROL 7:    sense accounting info                                      
         SPACE 2                                                                
CNTL7    IF    (PDBWC,NZ),CNTLBF   No parms                                     
         MVC   PDBTEXT(L'SCBCHG),SCBCHG  accounting info                        
         MVC   PDBLENG,=AL2(L'PDBHDR+L'SCBCHG)                                  
         B     CNTLDONE                                                         
         EJECT                                                                  
*****  CONTROL 8:    sense MILTEN info                                          
         SPACE 2                                                                
CNTL8    IF    (PDBWC,NZ),CNTLBF   No parms                                     
         LA    R7,PDBTEXT                                                       
         WITH  (MIB,R7),BEGIN                                                   
         MVC   MIB,CVM             Milten info                                  
         END                                                                    
         MVC   PDBLENG,=AL2(L'PDBHDR+L'MIB)                                     
         B     CNTLDONE                                                         
         EJECT                                                                  
*****  CONTROL 9:    sense symbol type                                          
         SPACE 2                                                                
CNTL9    LH    R15,PDBWC                                                        
         IF    ((R15,NP),OR,(R15,GT,8)),CNTLRC0                                 
         MVC   CVWORK,CVBLANKS                                                  
         MOVE  R15,CVWORK,PDBTEXT                                               
         IF    (CVWORK,EQ,'ALL '),CNTLRC4                                       
*                                                                               
         LA    R7,CVFEBQH-(FEBLINK-FEB)  Dummy first link                       
         LOOP  BEGIN                                                            
         WITH  (FEB,R7)                                                         
         WHILE ('LT R7,FEBLINK',NZ)                                             
         IF    (FEBNAME,EQ,CVWORK),CNTLRC4  symbol is a front-end name          
         END                                                                    
         B     CNTLRC0                                                          
         EJECT                                                                  
*****  CONTROL 10:   sense MILTEN device trace                                  
         SPACE 2                                                                
CNTL10   LH    R15,PDBWC                                                        
         IF    (R15,NE,4),CNTLBF   Bad parms                                    
         L     R15,PDBTEXT         Get channel-unit address                     
         IF    (R15,LGT,X'FFF'),CNTLBF  Bad parms                               
*-                                                                              
*-       No trace table for this device.                                        
*-                                                                              
         CLEAR (PDBTEXT,4)         Assume no trace table info                   
         MVC   PDBLENG,=AL2(L'PDBHDR+4)                                         
         LT    R6,CVDEVTRC         Device trace table ptrs                      
         BZ    CNTLRC0             No trace table                               
         SLL   R15,2               Times 4 for offset                           
         AR    R6,R15                                                           
         LT    R6,@R6              Get this device's trace tbl index            
         BZ    CNTLRC0             No trace table for this device               
*-                                                                              
*-       Return trace table entries.                                            
*-                                                                              
         LA    R2,PDBTEXT+4                                                     
         LM    R3,R5,@R6+4         R3=next, R4=first, R5=end                    
         LOOP  BEGIN                                                            
         S     R3,@R6              Back up                                      
         IF    (R3,LT,R4),'LR R3,R5; S R3,@R6'  last                            
         MVC   @R2(L'DTRC),@R3     Copy trace entry                             
         LA    R2,@R2+L'DTRC       Next entry                                   
         UNTIL ('C R3,@R6+4',EQ)                                                
         END                                                                    
*                                                                               
         MVC   PDBTEXT(2),=AL2(DTRC#)  no. of entries                           
         MVC   PDBTEXT+2(2),=AL2(L'DTRC)  size of an entry                      
         MVC   PDBLENG,=AL2(L'PDBHDR+4+DTRC#*L'DTRC)                            
         CLEAR PDBCRET,PDBCMOD     Good return code                             
         B     CNTLDONE            All done                                     
         EJECT                                                                  
*****  CONTROL 101:  set session                                                
         SPACE 2                                                                
CNTL101  IF    (PDBWC,NE,L'SCBSESS),CNTLBF                                      
*                                                                               
         VCALL LOCALTOD            Save logon time                              
         STM   R0,R1,SCBLCLCK                                                   
         CLEAR SCBCHG              Reset previous accounting info               
         MVC   SCBACLCK,SCBLCLCK   Set accounting start time                    
         MVC   SCBDSUBP,SCBSUBP    Set default subsystem                        
*                                                                               
         CLEAR SCBFWARN,SCBFKL+SCBFTO+SCBFMT  reset misc                        
*                                                                               
         LA    R7,PDBTEXT                                                       
         WITH  (SIBSESS,R7),BEGIN                                               
         IF    SIBSFPS,'SET SCBSFPS'  flag as pseudo session now                
*                                                                               
         IF    ((SCBACCT,Z),AND,(SIBACCT,NZ)),BEGIN  logon complete...          
         LA    R1,SCB                                                           
         VCALL INCRSES             Count the active user                        
         END                                                                    
*                                                                               
         IF    ((SCBACCT,NZ),AND,(SIBACCT,Z)),BEGIN  eos/logon...               
         CLEAR SCBSTAG             Clear old session tag                        
         CLEAR SCBVINFO            Clear ORVYL accounting info                  
         CLEAR SCBFNMSG+SCBFNCOM+SCBFNBRK+SCBFNTIM+SCBFCLN  reset               
         CLEAR SCBFBACK+SCBFFAST+SCBFPSP,SCBFERA                                
         SET   SCBFUPL                                                          
         CLEAR SCBTABS,SCBHEIP                                                  
*                                                                               
         LA    R1,SCB                                                           
         VCALL DECRSES             Decr user count                              
         END                                                                    
*                                                                               
         MVC   SCBSESS,SIBSESS     Set account, etc.                            
         END                                                                    
*                                                                               
         LA    R1,SCB                                                           
         ACALL UPDSCB              Check SCB updates                            
*                                                                               
         MVC   SCBMXREM,=H'-1'     Assume no max session len                    
*-                                                                              
*-       Get new session id and put SCB at start of queue.                      
*-                                                                              
         LA    R15,1                                                            
         A     R15,CVSCBID                                                      
         ST    R15,SCBID           New session number                           
         ST    R15,CVSCBID                                                      
*                                                                               
         LA    R15,CVSCBQH-(SCBLINK-SCB)  Dummy first entry                     
         LOOP  BEGIN                                                            
         WITH  (SCB,R15)                                                        
         LR    R2,R15              Save prev ptr                                
         WHILE ('LT R15,SCBLINK',NZ)                                            
         IF    (SCBR,EQ,R15),CNTL101Q                                           
         END                                                                    
         FAIL  'Bad SCB queue'                                                  
*                                                                               
CNTL101Q MVC   SCBLINK-SCB(4,R2),SCBLINK  dequeue                               
*                                                                               
         MVC   SCBLINK,CVSCBQH     Re-queue                                     
         ST    SCBR,CVSCBQH        New queue head                               
*                                                                               
         LA    R1,SCB                                                           
         LA    R15,PDBTEXT         Put sib here                                 
         ACALL FMTSIB                                                           
         AH    R15,=AL2(L'PDBHDR)                                               
         STH   R15,PDBLENG                                                      
         B     CNTLDONE                                                         
         EJECT                                                                  
*****  CONTROL 102:  set session options                                        
         SPACE 2                                                                
CNTL102  IF    (PDBWC,NE,6+2+L'SCBSESS),CNTLBF                                  
         LH    R15,PDBTEXT+4       Session no.                                  
         IF    (R15,LGE,CVMAXSES),CNTLBF  wrong no.                             
         SLL   R15,2                                                            
         A     R15,CVSATP                                                       
         LT    R7,@R15             Get SCB ptr                                  
         BZ    CNTLRC8             No session                                   
         WITH  (SCB,R7),BEGIN                                                   
         IF    ('LT R15,PDBTEXT',NZ),BEGIN  verify session id...                
         IF    (R15,NE,SCBID),CNTLRC8  not the correct session                  
         END                                                                    
*                                                                               
         L2    R2,PDBTEXT+6        New SIBUC                                    
         DECR  R2                                                               
         L2    R1,SCBUC                                                         
         IF    (R2,NE,R1),BEGIN   Update counts disagree...                     
         LA    R1,SCB                                                           
         LA    R15,PDBTEXT         Put SIB here                                 
         ACALL FMTSIB                                                           
         LA    R15,L'PDBHDR+@R15                                                
         STH   R15,PDBLENG                                                      
         MVI   PDBCMOD,4                                                        
         B     CNTLDONE            Return SIB with bad rc                       
         END                                                                    
*                                                                               
         MVC   SCBUC,PDBTEXT+6     New update count                             
         MVC   SCBSESS,PDBTEXT+6+2  Update options                              
*                                                                               
         LA    R1,SCB                                                           
         ACALL UPDSCB                                                           
         END                                                                    
*                                                                               
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         B     CNTLDONE                                                         
         EJECT                                                                  
*****  CONTROL 103:  kill session                                               
         SPACE 2                                                                
CNTL103  IF    (PDBWC,NE,6),CNTLBF                                              
         LH    R15,PDBTEXT+4       Session no                                   
         IF    (R15,LGE,CVMAXSES),CNTLBF  wrong no.                             
         SLL   R15,2                                                            
         A     R15,CVSATP                                                       
         LT    R7,@R15             Get SCB ptr                                  
         BZ    CNTLRC8             No session                                   
         WITH  (SCB,R7),BEGIN                                                   
         IF    ('LT R15,PDBTEXT',NZ),BEGIN  verify session id...                
         IF    (R15,NE,SCBID),CNTLRC8  not the correct session                  
         END                                                                    
*                                                                               
         SET   SCBFKL              Set reason why                               
         INCR  R15,SCBUC           Kick update count                            
*                                                                               
         LA    R1,SCB                                                           
         ACALL KILLSESS            Force logoff                                 
         END                                                                    
         B     CNTLDONE                                                         
         EJECT                                                                  
*****  CONTROL 104:  set port info                                              
         SPACE 2                                                                
CNTL104  LTH   R0,PDBWC                                                         
         IF    Z,BEGIN             Our port...                                  
         L     R6,SCBPIBP          Our PIB                                      
         WITH  (PIB,R6),'L R7,PIBFEBP'  our FEB                                 
         B     CNTL104M                                                         
         END                                                                    
*                                                                               
         IF    (R0,LT,6),CNTLBF    Must have header                             
*                                                                               
         L2    R15,PDBTEXT         Front-end id to match                        
         LA    R7,CVFEBQH-(FEBLINK-FEB)  Dummy first link                       
         USING FEB,R7                                                           
         WHILE ('LT R7,FEBLINK',NZ),BEGIN                                       
         IF    (R15,LLE,FEBID),EXIT  we got it now                              
         END                                                                    
         IF    ((R7,Z),OR,(R15,NE,FEBID)),CNTLRC8  not found                    
*                                                                               
         L2    R15,PDBTEXT+2       Port id to match                             
         IF    (R15,LGE,FEBPMAX),CNTLRC8  not found                             
         SLL   R15,2                                                            
         L     R6,FEBPATP                                                       
         LT    R6,@R6(R15)         PIB ptr                                      
         BZ    CNTLRC8             Not found                                    
         USING PIB,R6                                                           
*                                                                               
CNTL104M L2    R15,PDBTEXT+4       New PIBUC                                    
         DECR  R15                                                              
         IF    (R15,NE,PIBUC),BEGIN  update counts don't agree...               
         MVC   PDBLENG,=AL2(L'PDBHDR+L'PIBBASIC)                                
         MVC   PDBTEXT(L'PIBBASIC),PIBBASIC                                     
         MVI   PDBCMOD,4                                                        
         B     CNTLDONE            can't update, retry                          
         END                                                                    
         LH    R15,PDBWC                                                        
         SH    R15,=H'4'                                                        
         CEIL  R15,L'PIBBASIC                                                   
         MOVE  R15,PIBBASIC,PDBTEXT+4  update PIB                               
         INCR  R15,PIBUC           Kick update count                            
         B     CNTLDONE                                                         
*                                                                               
         DROP  PIB,FEB                                                          
         EJECT                                                                  
*****  CONTROL 105:  set front-end info                                         
         SPACE 2                                                                
CNTL105  LTH   R0,PDBWC                                                         
         IF    Z,BEGIN             Our FEB...                                   
         L     R15,SCBPIBP                                                      
         WITH  (PIB,R15),'L R7,PIBFEBP'                                         
         B     CNTL105M                                                         
         END                                                                    
*                                                                               
         IF    (R0,LT,4),CNTLBF    Must have header                             
*                                                                               
         L2    R15,PDBTEXT         Front-end id to match                        
         LA    R7,CVFEBQH-(FEBLINK-FEB)  Dummy first link                       
         USING FEB,R7                                                           
         WHILE ('LT R7,FEBLINK',NZ),BEGIN                                       
         IF    (R15,LLE,FEBID),EXIT  we got it now                              
         END                                                                    
         IF    ((R7,Z),OR,(R15,NE,FEBID)),CNTLRC8  not found                    
*                                                                               
CNTL105M L2    R15,PDBTEXT+2       New FEBUC                                    
         DECR  R15                                                              
         IF    (R15,NE,FEBUC),BEGIN  update counts don't agree...               
         MVC   PDBLENG,=AL2(L'PDBHDR+L'FEBBASIC)                                
         MVC   PDBTEXT(L'FEBBASIC),FEBBASIC                                     
         MVI   PDBCMOD,4                                                        
         B     CNTLDONE            can't update, retry                          
         END                                                                    
         LH    R15,PDBWC                                                        
         SH    R15,=H'2'                                                        
         CEIL  R15,L'FEBBASIC                                                   
         MOVE  R15,FEBBASIC,PDBTEXT+2  update FEB                               
         INCR  R15,FEBUC           Kick update count                            
         B     CNTLDONE                                                         
*                                                                               
         DROP  FEB                                                              
         EJECT                                                                  
*****  CONTROL 106:  set device dependent info                                  
         SPACE 2                                                                
CNTL106  IF    (PDBWC,LT,L'FDBT),CNTLBF                                         
         LA    R7,PDBTEXT                                                       
         WITH  (FDBT,R7),BEGIN                                                  
         LC    R0,FDBTDNO                                                       
         IF    (R0,LT,100),CNTLBF                                               
         LA    R1,CVFEBQH-(FEBLINK-FEB)  Dummy first link                       
         LOOP  BEGIN                                                            
         WITH  (FEB,R1)                                                         
         WHILE ('LT R1,FEBLINK',NZ)                                             
         LC    RAR,FEBTYPE                                                      
         IF    (FEBID,EQ,FDBTFE),CNTL106M                                       
         END                                                                    
         B     CNTLRC4             Front-end not found                          
*                                                                               
CNTL106M LA    R15,PDB                                                          
         IF    (RAR,GT,FEBTMAX),'CLEAR RAR'                                     
         SLL   RAR,2                                                            
         LT    RAR,FCNTLTBL(RAR)                                                
         BZ    CNTLRC8             No routine                                   
         BALR  RAR,RAR                                                          
         BNZ   CNTLRC                                                           
         B     CNTLDONE                                                         
         END                                                                    
         EJECT                                                                  
*****  CONTROL 107:  set accounting info                                        
         SPACE 2                                                                
CNTL107  IF    (PDBWC,NZ),CNTLBF   No parms                                     
         CLEAR SCBCHG              Reset accounting info                        
         VCALL LOCALTOD            Clock at start                               
         STM   R0,R1,SCBACLCK      Update accounting start clock                
         B     CNTLRC0                                                          
         EJECT                                                                  
*****  CONTROL 108:  MILTEN shutdown                                            
         SPACE 2                                                                
CNTL108  IF    (PDBWC,NZ),CNTLBF                                                
         CLEAR R0                  Normal shutdown                              
         VCALL SHUTDOWN                                                         
         DC    H'0'                (no return)                                  
         SPACE 2                                                                
         PEND                                                                   
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*  UPDSCB -- Routine to check updates to SCB.                                   
*                                                                               
*    On entry:                                                                  
*      R1 - SCB ptr                                                             
*                                                                               
UPDSCB   PROC                                                                   
         LR    SCBR,R1                                                          
         WITH  SCB                                                              
         FAIL  (SCB,NE,'SCB'),'Bad SCB ptr'                                     
*                                                                               
         IF    ((SCBACCT,NZ),AND,(SCBSTAG,Z)),'VCALL MAKESTAG'                  
         VCALL SINEUPD             Keep SIN in CSA up to date                   
*                                                                               
         LT    R7,SCBPIBP                                                       
         IF    NZ,BEGIN            We are still connected...                    
         WITH  (PIB,R7)                                                         
*                                                                               
         L     R15,PIBFEBP                                                      
         WITH  (FEB,R15),'LC RAR,FEBTYPE'                                       
         IF    (RAR,GT,FEBTMAX),'CLEAR RAR'                                     
         SLL   RAR,2                                                            
         LA    R1,SCB                                                           
         LT    RAR,UPDTBL(RAR)     Front-end SCB update routine                 
         IF    NZ,'BALR RAR,RAR'                                                
*                                                                               
         CLEAR R2                  Assume no timeout                            
         IF    (^SCBTCONS,AND,^SCBTVIRT),BEGIN                                  
         IF    SCBFNTM,EXIT        No timeouts, scram                           
*                                                                               
         IF    SCBFNTIM,BEGIN      Notime...                                    
         IF    ^PIBFRLIN,BEGIN     Only non-rlin gets exemption...              
         IF    (PIBFDIR,OR,PIBFLEAS),EXIT  exempt                               
         END                                                                    
*                                                                               
         LA    R2,40               40 min timeout                               
         IF    CVFRLG,'LA R2,120'  120 mins on RLG machine                      
         SET   SCBFTDAY            ..only during day block                      
         END                                                                    
*                                                                               
         ELSE  BEGIN               Timeout...                                   
         CLEAR SCBFTDAY                                                         
         LA    R2,10               10 min timeout                               
         IF    CVFRLG,'LA R2,40'   40 mins on RLG machine                       
         IF    (SCBACCT,Z),BEGIN   Not logged on...                             
         LA    R2,5                5 mins                                       
         IF    PIBFDIR,'CLEAR R2'                                               
         END                                                                    
         END                                                                    
         END                                                                    
         STH   R2,SCBTMOUT         Save new timeout time                        
         END                                                                    
*-                                                                              
*-       New style maximum allowed idle time.                                   
*-                                                                              
         IF    (SCBACCT,NZ),BEGIN  Check for new style limit...                 
         IF    (SCBIDMAX,EQ,-1),EXIT  Still using old style limit               
         MVC   SCBTMOUT,SCBIDMAX   Set timeout time                             
         CLEAR SCBFTDAY            All time blocks                              
         END                                                                    
*                                                                               
         PEND                                                                   
*-                                                                              
*-       SCB update vector table                                                
*-                                                                              
UPDTBL   DC    A(0)                                                             
         DC    V(CONSUPD)          FEBTCONS                                     
*         DC    V(ASYNUPD)          FEBTASYN                                    
         DC    A(0)                                                             
*         DC    V(PDPUPD)           FEBTPDP                                     
         DC    A(0)                                                             
*         DC    V(VTAMUPD)          FEBTVTAM                                    
         DC    A(0)                                                             
         DC    V(VIRTUPD)          FEBTVIRT                                     
*         DC    V(NSCUPD)           FEBTNSC                                     
         DC    A(0)                                                             
         DC    V(ELFUPD)           FEBTELF                                      
*         DC    V(ALFUPD)           FEBTALF                                     
         DC    A(0)                                                             
*         DC    V(ECUUPD)           FEBTECU                                     
         DC    A(0)                                                             
UPDMAX   EQU   (*-UPDTBL-4)/4,,C'N'                                             
         DS    0S(UPDMAX-FEBTMAX,FEBTMAX-UPDMAX)                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SESTIMER -- Routine to handle session timeouts.  This routine                
*    is entered every minute (from the dispatcher) to process                   
*    session timeouts that may have occurred.                                   
*                                                                               
SESTIMER XPROC                                                                  
*                                                                               
         LA    SCBR,CVSCBQH-(SCBLINK-SCB)  Dummy first link                     
         WITH  SCB                                                              
*                                                                               
SESTLP   WHILE ('LT SCBR,SCBLINK',NZ),BEGIN                                     
         LCALL SESTMOUT            Check timeout for inactivitiy                
         END                                                                    
*                                                                               
         L     R0,=A(SESTIMER)                                                  
         CLEAR R1                  (No timer parm)                              
         L     R15,=A(60*100)      Queue a new timer                            
         VCALL TIMERQ                                                           
         EXIT                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SESTMOUT -- Routine to check for timeout due to inactivity.                  
*                                                                               
SESTMOUT LPROC                                                                  
         INCR  R15,SCBTMINC        One more minute has elapsed                  
*-                                                                              
*-       Check to see if session is exempt from notime limitations.             
*-                                                                              
         IF    (SCBTMOUT,Z),EXIT   No timeout                                   
*                                                                               
         IF    SCBSFPS,EXIT        Don't disturb pseudo session                 
*                                                                               
         IF    SCBFCLN,EXIT        Don't disturb page mode                      
*-                                                                              
*-       Get the current time-block value in R2.                                
*-                                                                              
         LH    R2,=H'-1'           Assume unknown timeblock                     
*                                                                               
         L     R15,CVTPTR                                                       
         WITH  (CVT,R15),'L R15,CVTUSER'                                        
         IF    (R15,NZ),BEGIN      No USERCVT, always check timeout             
         IF    (@R15,NE,'SCIP'),EXIT  Not the SCIP CVT, forget it               
         WITH  (USERCVT,R15)                                                    
         LC    R2,USEBLOCK         Get current timeblock (4=peak)               
         END                                                                    
*-                                                                              
*-       Check to see if timeout has expired.                                   
*-                                                                              
         IF    SCBFTDAY,BEGIN      Only timeout in day block...                 
         IF    ((R2,EQ,0),OR,(R2,EQ,4)),EXIT  Timeout in DAY & PEAK             
         EXIT  SESTMOUT            Non-day time-block, no timeouts              
         END                                                                    
*-                                                                              
*-       If this is peak time, then use the front-end notime limit              
*-         instead of the user's limit.                                         
*-                                                                              
         LH    R5,SCBTMOUT         Get user's limit                             
*                                                                               
         IF    (R2,EQ,4),BEGIN     It's peak time...                            
         LT    R3,SCBPIBP          Our PIB ptr                                  
         IF    Z,EXIT              No PIB, scram                                
         WITH  (PIB,R3),'L R4,PIBFEBP'  Our FEB ptr                             
         IF    (R4,Z),EXIT         Scram if we don't have one                   
         WITH  (FEB,R4)                                                         
*                                                                               
         IF    (FEBTMLIM,NZ),'CEIL R5,FEBTMLIM'  Use front-end limit            
         END                                                                    
*-                                                                              
*-       Check to see if the user has been idle for too long.                   
*-                                                                              
         IF    (SCBTMINC,LE,R5),EXIT,SESTMOUT  He is fine, scram                
*-                                                                              
*-       The user has already been warned, now terminate the session.           
*-                                                                              
         IF    SCBFWARN,BEGIN      Timed out...                                 
         SET   SCBFTO              Set reason why                               
         INCR  R15,SCBUC           Kick update count                            
         LA    R1,SCB                                                           
         ACALL KILLSESS            Terminate session                            
         EXIT  SESTMOUT                                                         
         END                                                                    
*-                                                                              
*-       Give the user a warning message, and restart the idle                  
*-         timeout clock.                                                       
*-                                                                              
         L     PDBR,CVPDBP                                                      
         WITH  PDB                                                              
         CLEAR PDBHDR                                                           
         PUSH  L'SEGCB,PTR=R6                                                   
         WITH  (SEGCB,R6),BEGIN                                                 
         SEGINIT PDBTEXT,128,SEGCB                                              
         SEG   X'2F15'             Bell, nl                                     
         IF    (SCBACCT,Z),BEGIN   Not yet logged on...                         
         SEG   'Enter account to logon, or type ? for information.'             
         END                                                                    
*                                                                               
         ELSE  BEGIN                                                            
         SEGB  'No activity for'                                                
         LH    R15,SCBTMINC                                                     
         DECR  R15                                                              
         SEGDC (R15)                                                            
         SEG   ' minutes.  Respond or be logged off.'                           
         END                                                                    
*                                                                               
         SEG   X'1515'                                                          
*                                                                               
         MVI   PDBCMD,MILAWR       Asynchronous write                           
         L     R15,SEGCBLENF                                                    
         STH   R15,PDBWC                                                        
         LA    R15,L'PDBHDR+@R15                                                
         STH   R15,PDBLENG                                                      
         END                                                                    
         POP   L'SEGCB                                                          
*                                                                               
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL ASYNWRIT            Queue write                                  
*                                                                               
         SET   SCBFWARN            He's been warned                             
*                                                                               
         SH    R5,=AL2(5-1)        Give him 5 more mins                         
         STH   R5,SCBTMINC                                                      
         PEND                                                                   
         EJECT                                                                  
*                                                                               
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  DISCSESS -- Routine to disconnect session from port.  The                    
*    routine will also start session logoff processing.                         
*                                                                               
*    On entry:                                                                  
*      R1 - SCB ptr                                                             
*                                                                               
DISCSESS XPROC                                                                  
         LR    SCBR,R1                                                          
         WITH  SCB                                                              
         FAIL  (SCB,NE,'SCB'),'Bad SCB ptr'                                     
*                                                                               
         SET   SCBFDSC             Set disconnected session                     
*                                                                               
         LT    R2,SCBPIBP                                                       
         IF    NZ,BEGIN                                                         
         WITH  (PIB,R2)                                                         
         FAIL  (PIB,NE,'PIB'),'Bad PIB ptr'                                     
         L     R3,PIBFEBP                                                       
         WITH  (FEB,R3)                                                         
         FAIL  (FEB,NE,'FEB'),'Bad FEB ptr'                                     
         CLEAR PIBSCBP,SCBPIBP     Reset ptrs                                   
         IF    (SCBACCT,NZ),BEGIN  Reduce active counts now...                  
         DECR  R15,PIBSCUR         Decr. active session count now               
         DECR  R15,FEBSCUR         Decr. active session count now               
         END                                                                    
         END                                                                    
*                                                                               
         LA    R1,SCB                                                           
         LCALL KILLSESS                                                         
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  KILLSESS -- Routine to force end of session.                                 
*                                                                               
*    On entry:                                                                  
*      R1 - SCB ptr                                                             
*                                                                               
KILLSESS XPROC                                                                  
         LR    SCBR,R1                                                          
         WITH  SCB                                                              
         L     PDBR,CVPDBP                                                      
         WITH  PDB                                                              
*                                                                               
         FAIL  (SCB,NE,'SCB'),'Bad SCB ptr'                                     
         INCR  R15,SCBUC                                                        
         SET   SCBFLGF             Set logoff pending                           
         CLEAR SCBFNMSG+SCBFNCOM+SCBFNBRK+SCBFCLN                               
         CLEAR SCBHEIP                                                          
*                                                                               
         PUSH  L'PDBHDR,PTR=R7                                                  
         MVC   @R7(L'PDBHDR),PDBHDR  Save header                                
*                                                                               
         CLEAR PDBHDR                                                           
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         IF    SCBFDSC,BEGIN       Disconnected session...                      
         MVI   PDBCMD,FMILASYN                                                  
         IF    SCBTFSYN+SCBTFAIO,BEGIN  We need to complete the I/O...          
         MVC   PDBCMD,SCBCMD       Complete I/O                                 
         IF    (PDBCMD,Z),'MVI PDBCMD,FMILWRIT'  Fake cmd completion            
         END                                                                    
         SET   PDBCPLB.CPLBLGF                                                  
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBSEND                                                          
         B     KILLRES                                                          
         END                                                                    
*                                                                               
         IF    SCBTFSYN,BEGIN      Synchronous command in progress...           
         IF    ^SCBTFIO,EXIT       Let it complete naturally                    
         IF    (SCBCMD,NE,TMILREAD),EXIT  Ditto                                 
         MVI   PDBCMD,TMILBRK      Halt the read                                
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL FEDO                                                             
         END                                                                    
*                                                                               
         ELSE  BEGIN               Send asynchronous logoff...                  
         MVI   PDBCMD,FMILASYN                                                  
         SET   PDBCPLB.CPLBLGF                                                  
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBSEND             Inform subsystem                             
         END                                                                    
*                                                                               
KILLRES  MVC   PDBHDR,@R7          Restore header                               
         POP   L'PDBHDR                                                         
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  ASYNWRIT -- Routine to queue asynchronous write.                             
*                                                                               
*    On entry:                                                                  
*      R1 - SCB ptr                                                             
*      R15- PDB ptr                                                             
*                                                                               
*    On exit, R15 (and CC):                                                     
*      0 - ok                                                                   
*      4 - not sent                                                             
*                                                                               
ASYNWRIT XPROC                                                                  
         LR    SCBR,R1                                                          
         WITH  SCB                                                              
         LR    PDBR,R15                                                         
         WITH  PDB                                                              
*                                                                               
         FAIL  (SCB,NE,'SCB'),'Bad SCB ptr'                                     
*                                                                               
         LA    R15,4               Pre-set return code                          
         IF    SCBFLGF,EXIT        Can't send                                   
         IF    (SCBNMSG,GE,10),EXIT  Too deep, scram                            
*-                                                                              
*-       If this SCB isn't connected to a subsystem, then it's port             
*-         should not receive asynchronous I/O.                                 
*-                                                                              
         IF    (SCBSUBP,Z),EXIT    No subsystem, forget it                      
*                                                                               
         CLEAR PDBLIN#,PDBAWID     (Tidy)                                       
         SET   PDBMODD.MODDNPAU    Don't pause during async write               
*                                                                               
         LA    R0,4                                                             
         AH    R0,PDBLENG          Length including link ptr                    
         LA    R1,QPDBSUBP                                                      
         LR    R2,RAR                                                           
         VCALL NGETCORE                                                         
         LR    R2,R1                                                            
         CLEAR (@R2,4)             Clear link ptr                               
         MOVEL @R2+4,PDB,LH:PDBLENG                                             
*                                                                               
         INCR  R15,SCBNMSG         Kick queue size                              
         L     R15,SCBAWRQT        Old tail                                     
         ST    R2,SCBAWRQT         New tail                                     
         ST    R2,@R15             Link up                                      
*                                                                               
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         LCALL DOAIO               Start asynchronous I/O now                   
*                                                                               
         CLEAR R15                 Aok                                          
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  DOAIO -- Local routine to start asynchronous I/O (if any).                   
*                                                                               
*    On entry:                                                                  
*      R1 - SCB ptr                                                             
*                                                                               
*    On exit, R15 (and CC):                                                     
*     -4 - No I/O to do                                                         
*      0 - Async I/O started                                                    
*      4 - I/O already in progress                                              
*                                                                               
DOAIO    PROC                                                                   
         LR    SCBR,R1                                                          
         WITH  SCB                                                              
         L     PDBR,CVPDBP                                                      
         WITH  PDB                                                              
*-                                                                              
*-   First check to see if there are any asynchronous I/O's waiting.            
*-                                                                              
         IF    (SCBNMSG,Z),'LH R15,=H"-4"; EXIT DOAIO'  Nothing                 
*-                                                                              
*-       Don't do anything if asynchronous I/O already going.                   
*-                                                                              
         IF    SCBTFAIO,'LA R15,4; EXIT DOAIO'                                  
*                                                                               
         IF    SCBFCLN,'LA R15,4; EXIT DOAIO'  Clean                            
*                                                                               
         IF    SCBFNMSG,'LA R15,4; EXIT DOAIO'  Nomsg                           
*-                                                                              
*-       Save the working PDB.                                                  
*-                                                                              
         LH    R6,PDBLENG                                                       
         FLOOR R6,L'PDBHDR                                                      
         LR    R0,R6                                                            
         LA    R1,SPDBSUBP                                                      
         LR    R2,RAR                                                           
         VCALL NGETCORE                                                         
         LR    R7,R1                                                            
         MOVEL @R7,PDB,(R6)        Save PDB                                     
*-                                                                              
*-       Halt the current read so that we can start asynchronous                
*-          I/O.                                                                
*-                                                                              
         IF    SCBTFSYN,BEGIN      Synchronous I/O...                           
         IF    (SCBCMD,EQ,TMILREAD),BEGIN  Read...                              
         IF    SCBFNBRK,EXIT       Can't halt, scram                            
*                                                                               
         IF    (SCBTFDISP+SCBTFTRAN,Z),'SET SCBTFREP'  Re-prompt                
*                                                                               
         CLEAR PDBHDR                                                           
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         MVI   PDBCMD,TMILBRK      Halt read                                    
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL FEDO                                                             
         END                                                                    
*                                                                               
         LA    R15,4               We can't start the async I/O yet             
         B     DOAEXIT                                                          
         END                                                                    
*-                                                                              
*-       Don't start the new asynchronous I/O if we are currently               
*-          doing a display mode read.                                          
*-                                                                              
         IF    SCBTFDISP,'LA R15,4; B DOAEXIT'  Don't start I/O                 
*-                                                                              
*-       Now start the asynchronous I/O.                                        
*-                                                                              
         L     R2,SCBAWRQH         First entry                                  
         MOVEL PDB,@R2+4,LH:@R2+4  Move PDB back                                
         L     R15,@R2                                                          
         ST    R15,SCBAWRQH        New queue head                               
         IF    (R15,Z),'LA R15,SCBAWRQH; ST R15,SCBAWRQT'                       
         DECR  R15,SCBNMSG         Reduce queue count                           
         LR    R1,R2                                                            
         VCALL FREECORE            Release entry                                
*                                                                               
         MVC   SCBCMD,PDBCMD       Save command code                            
         MVC   SCBMOD,PDBMOD       Save mode flags                              
*                                                                               
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL FEDO                                                             
         FAIL  NZ                                                               
*                                                                               
         CLEAR R15                                                              
*-                                                                              
*-       Restore working PDB.                                                   
*-                                                                              
DOAEXIT  LR    R5,R15              Save return code                             
         MOVEL PDB,@R7,(R6)        Restore PDB                                  
         LR    R1,R7                                                            
         VCALL FREECORE            Free up saved PDB copy                       
         LR    R15,R5              Set RC                                       
         PEND                                                                   
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FEDO -- Routine to process and then send PDB to appropriate                  
*    front-end.                                                                 
*                                                                               
*    On entry:                                                                  
*      R1 - SCB ptr                                                             
*      R15- PDB ptr                                                             
*                                                                               
*    On exit, R15 (and CC):                                                     
*      0 - ok                                                                   
*      4 - I/O already in progress                                              
*                                                                               
*    Note:  Some processing is done here to "tidy up" the PDB                   
*      before it is sent to the fe routine.  In particular, the                 
*      misc. data counts are cleaned up here.  When the fe routine              
*      is entered all data counts are zero except:                              
*                                                                               
*      PDBLENG  - length of entire PDB (including itself)                       
*                                                                               
*      PDBOUTCT - actual write data count (data starts at "PDBTEXT")            
*                                                                               
*      PDBINCT  - for the read command, maximum input data count                
*                 allowed.  The response will be truncated to this              
*                 length (by SIFT) before it is sent to the                     
*                 subsystem.                                                    
*                                                                               
FEDO     PROC                                                                   
         LR    SCBR,R1                                                          
         WITH  SCB                                                              
         LR    PDBR,R15                                                         
         WITH  PDB                                                              
         MVC   PDBLIN#,SCBNO       Session number                               
*                                                                               
         IF    (PDBCMD,EQ,TMILBRK),BEGIN  halt I/O...                           
         CLEAR R15                 Preset rc                                    
         IF    ^SCBTFIO,EXIT,FEDO                                               
         IF    SCBTFAIO,EXIT,FEDO                                               
*                                                                               
         IF    SCBTFBRK,EXIT,FEDO  One BREAK already sent, scram                
         SET   SCBTFBRK            We are doing a break now                     
         B     FESEND                                                           
         END                                                                    
*                                                                               
         IF    SCBTFIO+SCBTFAIO,'LA R15,4; EXIT FEDO'                           
*                                                                               
         CLEAR SCBTFBRK            No BREAK pending now                         
         EJECT                                                                  
         IF    (PDBCMD,EQ,MILAWR),'SET SCBTFAIO'  async I/O                     
         ELSE  'SET SCBTFIO'       I/O in progress                              
*                                                                               
         FAIL  (SCBPDBP,NZ)                                                     
         IF    PDBMODB.MODBDWAT,BEGIN  Must keep PDB around...                  
         LH    R0,PDBLENG                                                       
         LA    R1,SPDBSUBP                                                      
         LR    R2,RAR                                                           
         VCALL NGETCORE                                                         
         ST    R1,SCBPDBP                                                       
         MOVEL (R1),PDB,LH:PDBLENG  save PDB                                    
         END                                                                    
*                                                                               
         IF    (PDBCMD,EQ,MILAWR),BEGIN  async write again...                   
         MVI   PDBCMD,TMILWRIT     Looks like a write                           
         MVC   PDBLIN#,SCBNO       ... to our line                              
         END                                                                    
*                                                                               
         LH    R0,PDBWC                                                         
         IF    (R0,LGT,4096),'MVC PDBWC,=H"16"; CLEAR PDBPC,PDBRC'              
         LH    R0,PDBPC                                                         
         IF    (R0,LGT,4096),'MVC PDBPC,=H"16"; CLEAR PDBRC'                    
         LH    R0,PDBRC                                                         
         IF    (R0,LGT,4096),'MVC PDBRC,=H"16"'                                 
*                                                                               
         IF    (PDBCMD,NE,TMILREAD),'CLEAR PDBPC,PDBRC,PDBINCT'                 
         ELSE  BEGIN               Read...                                      
         FAIL  (SCBPRPTR,NZ),'PDB proc error -- prompt text'                    
         IF    (PDBPC,NZ),BEGIN    If there is a prompt, save it...             
         LA    R0,2                                                             
         AH    R0,PDBPC                                                         
         LA    R1,PRMTSUBP                                                      
         LR    R2,RAR                                                           
         VCALL NGETCORE                                                         
         ST    R1,SCBPRPTR         Save ptr                                     
         MVC   @R1(2),PDBPC        Len                                          
         LH    R2,PDBWC                                                         
         MOVEL @R1+2,PDBTEXT(R2),LH:PDBPC  text                                 
         END                                                                    
*                                                                               
         FAIL  (SCBDRPTR,NZ),'PDB proc error -- default read text'              
         IF    (SCBTCONS,OR,SCBTPDP,OR,SCBTVIRT),'CLEAR PDBRC'                  
         IF    (PDBRC,NZ),BEGIN    Default read text...                         
         LA    R0,2                                                             
         AH    R0,PDBRC                                                         
         LA    R1,RTXTSUBP                                                      
         LR    R2,RAR                                                           
         VCALL NGETCORE            Room to save default read text               
         ST    R1,SCBDRPTR                                                      
         MVC   @R1(2),PDBRC                                                     
         LH    R2,PDBWC                                                         
         AH    R2,PDBPC                                                         
         MOVEL @R1+2,PDBTEXT(R2),LH:PDBRC                                       
         END                                                                    
*                                                                               
         LH    R15,PDBINCT         Max amount of input allowed                  
         IF    (R15,NP),'LA R15,168'  (Compatability)                           
         LTH   R2,SCBINMX          Global max allowed                           
         IF    (NP,OR,(R2,GT,4096)),'LH R2,=H"4096"'  Universal max             
         CEIL  R15,R2              Not too much                                 
         STH   R15,PDBINCT                                                      
         STH   R15,SCBINCT                                                      
         END                                                                    
*                                                                               
         LH    R0,PDBWC                                                         
         AH    R0,PDBPC                                                         
         AH    R0,PDBRC            Total output count                           
         LH    R15,PDBLENG                                                      
         SH    R15,=AL2(L'PDBHDR)                                               
         IF    NEG,'CLEAR R15'                                                  
         CEIL  R0,R15                                                           
         IF    (R0,NEG),'CLEAR R0'                                              
         IF    (R0,GT,4096),'LH R0,=H"4096"'  universal max                     
         SETMSG PDBTEXT,(R0)                                                    
         ACALL OUTPROC             Do user translation/scan                     
         IF    NZ,BEGIN            Must pause here...                           
         FAIL  (SCBCPDBP,NZ),'Page/pause PDB problem'                           
         PUSH  (R0,R1)             Save new text ptrs                           
         IF    (R2,NZ),BEGIN       Save remaining text...                       
         LA    R0,L'PDBHDR+@R2                                                  
         LA    R1,SPDBSUBP                                                      
         PUSH  R2                                                               
         LA    R2,*+4                                                           
         VCALL NGETCORE                                                         
         POP   R2                                                               
         ST    R1,SCBCPDBP                                                      
         MVC   @R1(L'PDBHDR),PDBHDR                                             
         WITH  (PDB,R1)                                                         
***      SET   PDBMODD.MODDNXL     don't xl twice                               
         STH   R2,PDBWC                                                         
         LA    R0,L'PDBHDR+@R2                                                  
         STH   R0,PDBLENG                                                       
         MOVEL PDBTEXT,(R3),(R2)   Save text                                    
         END                                                                    
         POP   (R0,R1)                                                          
         SET   SCBTFPP             Page/pause read                              
         MVI   PDBCMD,TMILREAD                                                  
         MVI   SCBCMD,TMILREAD                                                  
         MVC   PDBINCT,=H'256'                                                  
         END                                                                    
         STH   R0,PDBOUTCT                                                      
         AH    R0,=AL2(L'PDBHDR)                                                
         STH   R0,PDBLENG                                                       
         MOVEL PDBTEXT,@R1,LH:PDBOUTCT  move in text                            
*                                                                               
FESEND   IF    (SCBPIBP,Z),BEGIN   Disconnected session...                      
         IF    (PDBCMD,EQ,TMILEOS),BEGIN  end of session...                     
         LA    R1,SCB                                                           
         VCALL FREESCB                                                          
         CLEAR R15,SCBR                                                         
         EXIT  FEDO                                                             
         END                                                                    
*                                                                               
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         CLEAR PDBOPT                                                           
         IF    (SCBTFSYN+SCBTFAIO,Z),'MVI PDBCMD,FMILASYN'                      
         SET   PDBCPLB.CPLBLGF     Respond with logoff                          
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBSEND             Send disconnect response to subsys           
         CLEAR R15                                                              
         EXIT  FEDO                                                             
         END                                                                    
*                                                                               
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         L     R2,SCBPIBP                                                       
         WITH  (PIB,R2),'L R3,PIBFEBP'                                          
         WITH  (FEB,R3),'LC RAR,FEBTYPE'                                        
         IF    (RAR,GT,FEBTMAX),'CLEAR RAR'                                     
         SLL   RAR,2                                                            
         LT    RAR,DOFE(RAR)       Load appropriate routine                     
         FAIL  Z,'No FE routine'                                                
         ST    R3,CVCURFEB         Current front-end                            
         ST    R2,CVCURPIB         Current port                                 
         BALR  RAR,RAR                                                          
         CLEAR CVCUR                                                            
*                                                                               
         CLEAR R15                                                              
         PEND                                                                   
         SPACE 2                                                                
DOFE     DC    A(0)                                                             
         DC    V(CONSDO)           FEBTCONS                                     
*         DC    V(ASYNDO)           FEBTASYN                                    
         DC    A(0)                                                             
*         DC    V(PDPDO)            FEBTPDP                                     
         DC    A(0)                                                             
*         DC    V(VTAMDO)           FEBTVTAM                                    
         DC    A(0)                                                             
         DC    V(VIRTDO)           FEBTVIRT                                     
*         DC    V(NSCDO)            FEBTNSC                                     
         DC    A(0)                                                             
         DC    V(ELFDO)            FEBTELF                                      
*         DC    V(ALFDO)            FEBTALF                                     
         DC    A(0)                                                             
*         DC    V(ECUDO)            FEBTECU                                     
         DC    A(0)                                                             
DOFEMX   EQU   (*-DOFE-4)/4,,C'N'                                               
*                                                                               
         DS    0S(DOFEMX-FEBTMAX,FEBTMAX-DOFEMX)                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SUBSTART -- Routine to start session in default subsystem.                   
*                                                                               
*    On entry:                                                                  
*      R1 - SCB ptr                                                             
*      R15- PDB ptr                                                             
*                                                                               
SUBSTART XPROC                                                                  
         LR    SCBR,R1                                                          
         WITH  SCB                                                              
         LR    PDBR,R15                                                         
         WITH  PDB                                                              
*                                                                               
         LA    R1,SCB                                                           
         ACALL UPDSCB              Check SCB for updates                        
*                                                                               
         LH    R0,PDBLENG                                                       
         SH    R0,=AL2(L'PDBHDR)                                                
         FAIL  NEG,'Bad substart PDB'                                           
         STH   R0,PDBRC            Read count                                   
*                                                                               
         SET   SCBTFSYN            (For SUBSEND validity check)                 
*-                                                                              
*-       Start session in the default subsystem.                                
*-         (WYLBUR, usually, but port information can override.)                
*-                                                                              
         LT    R6,SCBPIBP          Port information                             
         IF    NZ,BEGIN            Should always be present...                  
         WITH  (PIB,R6)                                                         
         IF    (PIBDFSYS,Z),SSTWYL  Universal default subsystem                 
*                                                                               
         LA    R2,CVSUBQH-(SUBLINK-SUB)  Dummy first link                       
         LOOP  BEGIN                                                            
         WITH  (SUB,R2)                                                         
         WHILE ('LT R2,SUBLINK',NZ)                                             
         IF    (SUBNAME,EQ,PIBDFSYS),BEGIN  We want this subsys...              
         IF    (SUBSCLCK,Z),SSTWYL  Subsystem isn't ready yet                   
         B     SSTENTER            Go use this subsystem                        
         END                                                                    
         END                                                                    
         END                                                                    
*                                                                               
SSTWYL   CLEAR R2                  Try default subsys                           
*                                                                               
SSTENTER LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBENTER            Logon session in this subsystem              
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SUBENTER -- Routine to enter subsystem.                                      
*                                                                               
*    On entry:                                                                  
*      R2 - SUB ptr of subsys to enter (or zero for default sys)                
*      R1 - SCB ptr                                                             
*      R15- PDB ptr                                                             
*                                                                               
SUBENTER PROC                                                                   
         LR    SCBR,R1                                                          
         WITH  SCB                                                              
         LR    PDBR,R15                                                         
         WITH  PDB                                                              
*                                                                               
         LTR   SUBR,R2                                                          
         IF    Z,BEGIN                                                          
         LT    SUBR,CVDEFSUB       Default subsys                               
         IF    Z,'L SUBR,CVMRTSUB'  or mort                                     
         END                                                                    
         WITH  SUB                                                              
         FAIL  (SUB,NE,'SUB'),'Bad SUB ptr'                                     
*                                                                               
         MVI   PDBCMD,FMILXCTL     Assume re-entry to subsys                    
         IF    ^PDBMODA.MODAFMIL,'MVC PDBSYSNM,SCBSUB'                          
*-                                                                              
*-       Compatibility code needed for ORVYL.                                   
*-                                                                              
         IF    ((SUBNAME,EQ,'ORVYL'),OR,                               *        
               (SUBNAME,EQ,'TESTORV')),BEGIN                                    
         IF    PDBMODA.MODAFMIL,EXIT                                            
*-                                                                              
*-       This special code converts a response to a "READ CONTROL"              
*-         from WYLBUR into a PDB that looks like a terminal read               
*-         response.  As far as ORVYL is concerned it's a terminal              
*-         read completing.                                                     
*-                                                                              
         CLI   PDBORV,PDBVRCTL     Is it a "read control"?                      
         IF    EQ,BEGIN            Yes...                                       
         LH    R15,PDBWC           Response data length                         
         CLEAR PDBOPT                                                           
         STH   R15,PDBRC           Set it as "read data"                        
         LA    R0,@R15+6                                                        
         STH   R0,PDBOUTCT         Set count here too                           
         LA    R15,L'PDBHDR+@R15                                                
         STH   R15,PDBLENG         Save total PDB length                        
         END                                                                    
         END                                                                    
*                                                                               
         CLEAR PDBMODA.MODAFMIL                                                 
*                                                                               
         ST    SUBR,SCBSUBP        Set current subsys                           
         MVC   SCBSUB,SUBNAME      ... and it's name                            
*                                                                               
         LA    R3,SCBSUBL                                                       
         LA    R4,SCBSUBE                                                       
         CLEAR R15                                                              
         WHILE (R3,LT,R4),BEGIN                                                 
         L     R1,@R3                                                           
         IF    (R1,EQ,SUBR),SUBEN  Subsys is in list                            
         IF    ((R1,Z),AND,(R15,Z)),'LR R15,R3'  save avail slot ptr            
         LA    R3,@R3+4                                                         
         END                                                                    
         FAIL  (R15,Z),'Too many subsystems'                                    
         ST    SUBR,@R15           Save SUB ptr in list                         
         INCR  R15,SUBCUR          Kick current no. of users                    
         IF    (R15,GT,SUBMAX),'STH R15,SUBMAX'  max so far                     
*                                                                               
         MVI   PDBCMD,FMILSOS      Start of session                             
SUBEN    VCALL SINEUPD             Update session information                   
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBSEND                                                          
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SUBSEND -- Routine to process and then send PDB to subsystem.                
*                                                                               
*    On entry:                                                                  
*      R1  - SCB ptr                                                            
*      R15 - PDB ptr                                                            
*                                                                               
SUBSEND  XPROC                                                                  
         LR    SCBR,R1                                                          
         WITH  SCB                                                              
         LR    PDBR,R15                                                         
         WITH  PDB                                                              
*                                                                               
         ST    SCBR,CVCURSCB                                                    
*                                                                               
         FAIL  (SCBTFAIO,AND,SCBTFSYN+SCBTFIO),'Subsys error'                   
*                                                                               
         MVC   PDBLIN#,SCBNO       Session number                               
*                                                                               
         IF    (^SCBFSOF,AND,PDBCPLB.CPLBLGF),'SET SCBFLGF'                     
         IF    SCBFLGF,'SET PDBCPLB.CPLBLGF'  Latch                             
*                                                                               
         MVC   PDBSINP,SCBSINP     Session info ptr (in ECSA)                   
*                                                                               
         MVC   PDBVINFO,SCBVINFO   General ORVYL information                    
         MVC   PDBSUC,SCBUC        SCB update count                             
         MVC   PDBMOD,SCBMOD       Mode flags                                   
*                                                                               
         IF    (PDBCMD,EQ,FMILASYN),SUBSENDD  Send async now                    
*                                                                               
         FAIL  (PDBCMD,Z),'PDBCMD error'                                        
*                                                                               
         CLEAR R7                  Assume sync                                  
         IF    SCBTFAIO,'LA R7,1'  Async write                                  
*                                                                               
         CLEAR SCBTFIO+SCBTFAIO,SCBCMD                                          
*                                                                               
         IF    (R7,Z),BEGIN        Sync I/O...                                  
         IF    ((PDBCMD,NE,FMILREAD),AND,(PDBCMD,NE,FMILWRIT)),EXIT             
         IF    (SCBTFREP,AND,PDBCPLA.CPLABRK),EXIT  Ignore intrnl brk           
         CLEAR SCBFWARN,SCBTMINC   Reset inactivity timeout                     
         END                                                                    
*-                                                                              
*-       Re-do I/O if attn disallowed and attn ending.                          
*-                                                                              
         IF    (PDBMODB.MODBDWAT,AND,PDBCPLA.CPLAATTN),BEGIN  Re-do...          
         IF    PDBCPLA.CPLABRK,EXIT  Computer can break out                     
         IF    (PDBCMD,EQ,FMILREAD),BEGIN  Reset read fields...                 
         CLEAR SCBOCNT             Reset position and depth                     
         IF    ^SCBMODB.MODBNNLA,BEGIN  Account for read-attn chars...          
         LH    R15,SCBOPOS                                                      
         LA    R15,@R15+3          Account for "stars"                          
         STH   R15,SCBOPOS                                                      
         SET   SCBTFPRI                                                         
         END                                                                    
         IF    ('LT R1,SCBCPDBP',NZ),'VCALL FREECORE; CLEAR SCBCPDBP'           
         IF    ('LT R1,SCBDRPTR',NZ),'VCALL FREECORE; CLEAR SCBDRPTR'           
         END                                                                    
         LT    R2,SCBPDBP          Saved PDB                                    
         FAIL  Z,'PDB processing error'                                         
         MOVEL PDB,(R2),LH:@R2                                                  
         LR    R1,R2                                                            
         VCALL FREECORE                                                         
         CLEAR SCBPDBP                                                          
*                                                                               
         MVC   SCBCMD,PDBCMD                                                    
         MVC   SCBMOD,PDBMOD                                                    
*                                                                               
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL FEDO                                                             
         FAIL  NZ,'PDB restart error'                                           
         B     SUBEXIT                                                          
         END                                                                    
*                                                                               
         IF    ('LT R1,SCBPDBP',NZ),'VCALL FREECORE; CLEAR SCBPDBP'             
*-                                                                              
*-       Async write completing.                                                
*-                                                                              
         IF    (R7,NZ),BEGIN       Async write completing...                    
         IF    (SCBNMSG,NZ),SUBEXIT  More async I/O to do                       
*                                                                               
         IF    ('LT R2,SCBSPDBP',NZ),BEGIN  New sync I/O...                     
         MOVEL PDB,(R2),LH:@R2     Sync PDB                                     
         LR    R1,R2                                                            
         VCALL FREECORE                                                         
         CLEAR SCBSPDBP                                                         
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL PROCPDB             Process new PDB                              
         B     SUBEXIT                                                          
         END                                                                    
*                                                                               
         IF    (SCBSUBP,EQ,-1),BEGIN  Subsys has died, scram...                 
         SET   SCBTFSYN            We are sync now (for SUBSEND)                
         L     PDBR,CVPDBP                                                      
         WITH  PDB                                                              
         CLEAR PDBHDR                                                           
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         L     R2,CVMRTSUB                                                      
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBENTER            Transfer to mort                             
         END                                                                    
         B     SUBEXIT                                                          
         END                                                                    
         EJECT                                                                  
         IF    (PDBCMD,EQ,FMILREAD),BEGIN  Read completion...                   
         CLEAR SCBOCNT             Reset position and depth                     
         IF    (PDBCPLA.CPLAATTN,AND,^SCBMODB.MODBNNLA),BEGIN                   
         LH    R15,SCBOPOS                                                      
         LA    R15,@R15+3          Account for "stars"                          
         STH   R15,SCBOPOS                                                      
         END                                                                    
*                                                                               
         IF    (^PDBCPLA.CPLAATTN,OR,^SCBMODB.MODBNNLA),'SET SCBTFPRI'          
*                                                                               
         LH    R0,PDBLENG                                                       
         SH    R0,=AL2(L'PDBHDR)                                                
         FAIL  NEG,'Bad read completion PDB'                                    
         SETMSG PDBTEXT,(R0)                                                    
         ACALL INPROC              Do user translation, etc.                    
*-                                                                              
*-       Truncate read text to the maximum requested.                           
*-                                                                              
         LR    R2,R0               Prompt+Read count                            
         SR    R2,R15              Just the read data count                     
         IF    (R2,GT,SCBINCT),BEGIN  Too much input...                         
         LH    R0,SCBINCT          Maximum input count                          
         AR    R0,R15              ...include prompt length                     
         END                                                                    
*                                                                               
         CLEAR PDBINCT,PDBOUTCT,PDBWC                                           
         STH   R15,PDBPC           Prompt count                                 
         STH   R0,PDBRC            Read count (including prompt)                
         LR    R15,R0                                                           
         LA    R15,@R15+6                                                       
         STH   R15,PDBOUTCT        Outct=rc+6  (same as old milten)             
         LR    R15,R0                                                           
         LA    R15,L'PDBHDR+@R15                                                
         STH   R15,PDBLENG         New total length                             
         MOVEL PDBTEXT,(R1),(R0)                                                
*                                                                               
         IF    SCBTFREP,BEGIN      Re-build read (async msg)...                 
         CLEAR SCBTFREP                                                         
         IF    ^PDBCPLA.CPLABRK,EXIT                                            
         FAIL  (SCBSPDBP,NZ),'Async write PDB error'                            
         FAIL  ^SCBTFSYN,'Sync reprompt PDB error'                              
         CLEAR SCBTFSYN+SCBTFHIO                                                
         CLEAR PDBCPL              Clear completion flags                       
         LH    R15,PDBRC           Prompt+read count                            
         SH    R15,PDBPC                                                        
         STH   R15,PDBRC           Just the read count                          
         MVC   PDBINCT,SCBINCT     The maximum read count                       
         LH    R0,PDBLENG                                                       
         LA    R1,SPDBSUBP                                                      
         LR    R2,RAR                                                           
         VCALL NGETCORE                                                         
         ST    R1,SCBSPDBP                                                      
         MOVEL (R1),PDB,LH:PDBLENG  Save PDB                                    
         B     SUBEXIT                                                          
         END                                                                    
*                                                                               
         IF    SCBTFPP,BEGIN       Page/pause read...                           
         CLEAR SCBTFPP                                                          
         FAIL  (PDBCMD,NE,FMILREAD),'Page/pause PDB error'                      
         MVI   PDBCMD,FMILWRIT     Really it's a write completion               
         IF    SCBFLGF,SUBSENDP    Force completion                             
         LH    R2,PDBRC                                                         
         LR    R15,R2                                                           
         SH    R15,PDBPC           No. of chars read                            
         LA    R2,PDBTEXT-1(R2)    Last char                                    
*                                                                               
         IF    PDBCPLA.CPLAATTN,BEGIN  Ended with attn...                       
         IF    (R15,NP),SUBSENDP   Just attn... send completion                 
         IF    ^SCBMODD.MODDNPT,BEGIN  Page/pause read text allowed...          
         IF    (@R2,EQ,'@'),SUBSENDP  (WYLBUR command retry)                    
         END                                                                    
         CLEAR (PDBWC,6)                                                        
         B     SUBSPPR             Re-do page/pause read                        
         END                                                                    
*                                                                               
         IF    (R15,NP),SUBSC      Just carriage-return, continue               
         WHILE (@R2,EQ,' '),BEGIN                                               
         DECR  R2                                                               
         DECR  R15                                                              
         IF    (R15,NP),SUBSC      All blanks, continue                         
         END                                                                    
*                                                                               
         SET   SCBTFPNL            Must write "nl" before next I/O              
*                                                                               
         IF    ^SCBMODD.MODDNPT,SUBSENDP  send p/p text to subsys               
         CLEAR (PDBWC,6)                                                        
         MVC   PDBWC,=AL2(L'PPNMSG)                                             
         MVC   PDBTEXT(L'PPNMSG),PPNMSG                                         
SUBSPPR  SET   SCBTFPP                                                          
         MVI   SCBCMD,TMILREAD                                                  
         MVI   PDBCMD,TMILREAD                                                  
         MVC   PDBMOD,SCBMOD                                                    
         MVC   PDBINCT,=H'256'                                                  
         LH    R15,PDBWC                                                        
         LA    R15,L'PDBHDR+@R15                                                
         STH   R15,PDBLENG                                                      
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL FEDO                Re-do page/pause read                        
         FAIL  NZ,'Page/pause read PDB error'                                   
         B     SUBEXIT                                                          
*                                                                               
SUBSC    IF    ('LT R2,SCBCPDBP',Z),SUBSENDP                                    
         MOVEL PDB,(R2),LH:@R2     Move in cont PDB                             
         LR    R1,R2                                                            
         CLEAR SCBCPDBP                                                         
         VCALL FREECORE                                                         
*                                                                               
         MVC   SCBCMD,PDBCMD                                                    
         MVC   SCBMOD,PDBMOD                                                    
*                                                                               
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL FEDO                Start continuation I/O                       
         FAIL  NZ,'Continuation PDB error'                                      
         B     SUBEXIT                                                          
         END                                                                    
*                                                                               
         END                                                                    
*-                                                                              
*-       Send PDB (response) back to subsystem.                                 
*-                                                                              
SUBSENDP IF    ('LT R1,SCBCPDBP',NZ),'CLEAR SCBCPDBP; VCALL FREECORE'           
*                                                                               
SUBSENDD LT    SUBR,SCBSUBP                                                     
         IF    POS,BEGIN           Alive and well...                            
*-                                                                              
*-       Synchronous I/O completion.                                            
*-                                                                              
         IF    (PDBCMD,NE,FMILASYN),BEGIN  Sync PDB completing...               
         FAIL  ^SCBTFSYN,'Sync PDB error'                                       
*-                                                                              
*-       If the display mode I/O was interrupted by the user then               
*-         the CPLABRK flag will be set.  If it was interrupted by              
*-         MILTEN (because of an incoming TO message) then it will              
*-         not.                                                                 
*-                                                                              
         IF    SCBTFDISP,BEGIN      Display mode I/O completing...              
         IF    SCBTFHIO,'SET PDBCPLA.CPLABRK'  Force BREAK rc                   
         END                                                                    
*-                                                                              
*-       Trace terminal I/O completion.                                         
*-                                                                              
         IF    SCBFTRC,BEGIN       Tracing is active...                         
         IF    (PDBCMD,EQ,TMILREAD),BEGIN                                       
         LA    R15,=CL(L'STRCTYPE)'Read completion'                             
         SETMSG PDBTEXT,LH:PDBRC    Prompt and read data                        
         AH    R1,PDBPC            Skip past prompt                             
         SH    R0,PDBPC            Only read response text                      
         ACALL SESSTRC             Trace terminal I/O                           
         END                                                                    
         END                                                                    
*                                                                               
         CLEAR SCBTFSYN+SCBTFHIO                                                
         END                                                                    
*                                                                               
         WITH  SUB                                                              
         LA    R15,PDB                                                          
         ACALL PATHSEND            Send PDB to subsys                           
         B     SUBEXIT                                                          
         END                                                                    
*                                                                               
         IF    ((SUBR,Z),AND,CVFDFSYS),BEGIN  Try default subsys...             
         CLEAR PDBHDR                                                           
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         LT    R2,CVDEFSUB                                                      
         IF    Z,EXIT                                                           
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBENTER                                                         
         B     SUBEXIT                                                          
         END                                                                    
*-                                                                              
*-       Subsystem is dead or not present, sent to mort.                        
*-                                                                              
         CLEAR PDBHDR                                                           
         MVC   PDBLENG,=AL2(L'PDBHDR)                                           
         LT    R2,CVMRTSUB                                                      
         FAIL  Z,'MORT subsys error'                                            
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL SUBENTER                                                         
*                                                                               
SUBEXIT  CLEAR PDBHDR                                                           
*                                                                               
         LA    R1,SCB                                                           
         LA    R15,PDB                                                          
         ACALL DOAIO               Start any asynchronous I/O                   
*                                                                               
         CLEAR CVCURSCB                                                         
         PEND                                                                   
*                                                                               
PPNMSGX  DC    C'Input ignored.  Press RETURN to continue'                      
         DC    C' or BREAK to stop.',X'15'                                      
PPNMSG   EQU   PPNMSGX,*-PPNMSGX,C'X'                                           
         EJECT                                                                  
*box                                                                            
*                                                                               
*  PATHSEND -- Routine to send requests across SUZAN path.                      
*                                                                               
*    On entry:                                                                  
*      R15 - xact ptr (starting with RDW)                                       
*                                                                               
*    On exit, R15 (and CC):                                                     
*      -4 - died                                                                
*       0 - sent                                                                
*       4 - queued                                                              
*                                                                               
PATHSEND PROC                                                                   
         WITH  SUB                 (Entry assumption)                           
         FAIL  (SUB,NE,'SUB'),'Bad PATHSEND SUB ptr'                            
*                                                                               
         LR    R7,R15                                                           
         LH    R6,@R7              RDW len                                      
         FAIL  ((R6,NP),OR,(R6,GT,CVBUFLEN)),'Bad PATHSEND PDB'                 
*                                                                               
         CLEAR (@R7+2,2)           Clear RDW flags                              
*                                                                               
         ST    R7,@R13                                                          
         CLEAR (@R13+4,4)                                                       
         SET   @R13.X'80'                                                       
         SCOM  SEND,(R13),SUBPMGC                                               
         IF    (R15,Z),EXIT        A-ok, scram                                  
*                                                                               
         IF    (R15,EQ,PATHRBAF),BEGIN  Overflow...                             
         IF    SUBSFLAG.PATHFCLS,PATHDOWN  Closing, scram                       
         INCR  R15,CVMNFULQ        Count the full queues                        
*-                                                                              
*-    Queue the transaction (will be sent when Suzan queue empties).            
*-                                                                              
         LA    R0,@R6+4            Allow space for link ptr                     
         LA    R1,QPDBSUBP                                                      
         LR    R2,RAR                                                           
         VCALL NGETCORE                                                         
         LR    R2,R1                                                            
         CLEAR (@R2,4)             Zero link ptr                                
         MOVEL @R2+4,(R7),(R6)     Save PDB                                     
         LT    R15,SUBPDBQH        Pending PDB queue                            
         IF    NZ,'ST R15,@R2'     Maintain link                                
         ST    R2,SUBPDBQH         New queue head                               
         LA    R15,4               Rc=4                                         
         EXIT  PATHSEND                                                         
         END                                                                    
*                                                                               
         IF    (R15,EQ,PATHRNOP),PATHDOWN                                       
*                                                                               
         FAIL  'Bad PATHSEND Suzan call'                                        
*                                                                               
PATHDOWN LH    R15,=H'-4'          Rc=-4                                        
         PEND                                                                   
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
INWA     RECORD BEGIN                                                           
INSG     SEGCB                                                                  
         END                                                                    
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  INPROC -- Routine to processs read text.                                     
*                                                                               
*    On entry:                                                                  
*      R1,R0 - text loc, len                                                    
*                                                                               
*    On exit:                                                                   
*      R1,R0 - new text loc, len                                                
*      R15   - prompt len (included in R0 len)                                  
*                                                                               
INPROC   PROC  INWA                                                             
         WITH  SCB                 (Entry assumption)                           
         CLEAR INWA                                                             
         LR    R7,R1                                                            
         LR    R6,R0                                                            
*-                                                                              
*-       Do input user translations.                                            
*-                                                                              
         IF    ^SCBMODD.MODDNMOD,BEGIN  Do user translation...                  
         ACALL FINDXLE             Find user translation table                  
         IF    Z,EXIT              None                                         
         WITH  (XLE,R15),'LA R15,XLEIN'                                         
         LR    R1,R7                                                            
         LR    R0,R6                                                            
         ACALL XLTEXT                                                           
         LR    R7,R1                                                            
         LR    R6,R0                                                            
         END                                                                    
*-                                                                              
*-       Do input upper case conversion.                                        
*-                                                                              
         IF    SCBMODB.MODBUPPR,BEGIN  Upper case only...                       
         IF    SCBMODD.MODDTRAN,EXIT  Skip if transparent mode                  
         IF    SCBMODC.MODCDSPL,EXIT  Skip for display mode                     
*                                                                               
         LR    R1,R7                                                            
         LR    R15,R6                                                           
         WHILE (R15,GT,256),BEGIN                                               
         TR    @R1(256),UPPTBL                                                  
         LA    R1,@R1+256                                                       
         SH    R15,=H'256'                                                      
         END                                                                    
         TDEX  R15,'TR @R1(0),UPPTBL'                                           
         END                                                                    
*                                                                               
         CEIL  R6,SCBINCT          Not too much                                 
*                                                                               
INSCAN   SEGINIT L:CVWKBUFP,LH:=H'4096',INSG                                    
         CLEAR R2                  Prompt len                                   
         IF    ('LT R3,SCBPRPTR',NZ),BEGIN  prompt text...                      
         LH    R2,@R3              Prompt len                                   
         SEG   @R3+2,(R2)                                                       
         LR    R1,R3                                                            
         VCALL FREECORE                                                         
         CLEAR R3,SCBPRPTR                                                      
         END                                                                    
*                                                                               
         IF    ('LT R1,SCBDRPTR',NZ),BEGIN  Free default read text...           
         VCALL FREECORE                                                         
         CLEAR SCBDRPTR                                                         
         END                                                                    
*                                                                               
         SEG   (R7),(R6)           Read text                                    
*                                                                               
         SETMSG L:INSGLOC,L:INSGLENF                                            
         LR    R15,R2                                                           
         PEND                                                                   
*                                                                               
UPPTBL   DC    256AL1(*-UPPTBL)                                                 
         ORG   UPPTBL+C'a'         LOWER CASE                                   
         DC    C'ABCDEFGHI'                                                     
         ORG   UPPTBL+C'j'         LOWER CASE                                   
         DC    C'JKLMNOPQR'                                                     
         ORG   UPPTBL+C's'         LOWER CASE                                   
         DC    C'STUVWXYZ'                                                      
         ORG                                                                    
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*  OUTPROC -- Routine to process write text.                                    
*                                                                               
*    On entry:                                                                  
*      R1,R0 - text loc, len                                                    
*                                                                               
*    On exit:                                                                   
*      R1,R0 - new text loc, len                                                
*      R3,R2 - unprocessed text loc, len (for page/pause)                       
*      R15 (and CC):                                                            
*        0 - ok                                                                 
*        4 - page/pause                                                         
*                                                                               
OUTWA    RECORD BEGIN                                                           
OUTSG    SEGCB                                                                  
         END                                                                    
*-                                                                              
OUTPROC  PROC  (R4,LSR),OUTWA                                                   
         WITH  SCB                 (Entry assumption)                           
         CLEAR OUTWA                                                            
*                                                                               
         LR    R7,R1                                                            
         LR    R6,R0                                                            
*                                                                               
         CLEAR SCBFSETFONT         Assume font not set                          
*                                                                               
         IF    ^SCBMODD.MODDNMOD,BEGIN  Do user translation...                  
         ACALL FINDXLE             Find user translation table                  
         IF    Z,EXIT              None                                         
         WITH  (XLE,R15),'LA R15,XLEOUT'                                        
         LR    R1,R7                                                            
         LR    R0,R6                                                            
         ACALL XLTEXT                                                           
         LR    R7,R1                                                            
         LR    R6,R0                                                            
         END                                                                    
*                                                                               
OUTSCAN  SEGINIT L:CVWKBUFP,LH:=H'4000',OUTSG                                   
*-                                                                              
*-       Don't do any processing of transparent I/O.                            
*-                                                                              
         IF    SCBMODD.MODDTRAN,BEGIN  Transparent...                           
         SEG   (R7),(R6)                                                        
         CLEAR R7,R6                                                            
         B     OUTRC0                                                           
         END                                                                    
*-                                                                              
*-       Limited processing of display mode I/O.                                
*-                                                                              
         IF    SCBMODC.MODCDSPL,BEGIN  Display mode I/O...                      
         IF    SCBMODB.MODBUFMT,BEGIN  No formatting...                         
         SEG   (R7),(R6)                                                        
         CLEAR R7,R6                                                            
         B     OUTRC0                                                           
         END                                                                    
         END                                                                    
*-                                                                              
*-       Process tabs, returns, idles, etc.                                     
*-                                                                              
         IF    SCBTFPNL,BEGIN      NL character pending...                      
         SEG   X'15'               NL                                           
         CLEAR SCBTFPNL                                                         
         SET   SCBTFPRI            CR/LF idles needed                           
         END                                                                    
*                                                                               
         IF    SCBTFPRI,BEGIN      Pending read idles...                        
         LH    R2,SCBOPOS                                                       
         CLEAR SCBTFPRI,SCBOPOS    Reset                                        
         LH    R1,=H'960'          Assume 960 cps (9600 baud)                   
         MH    R2,SCBCRI+2         Nchars*cri(per-char)                         
         LH    R15,SCBCRI          Cri(fixed)                                   
         AR    R2,R15                                                           
         LH    R15,SCBLFI          Lfi(fixed)                                   
         AR    R2,R15                                                           
         MR    R0,R2               R1 = cps*idletime                            
         AL    R1,=F'999'                                                       
         D     R0,=F'1000'         No. of idle chars needed                     
         CEIL  R1,L'IDLES                                                       
         LR    R0,R1                                                            
         SEG   IDLES,(R0)                                                       
         END                                                                    
*                                                                               
OUTLOOP  WHILE (R6,POS),BEGIN                                                   
         LR    R15,R6                                                           
         LTH   R0,SCBWID           Terminal width                               
         IF    POS,BEGIN                                                        
         DECR  R0                  Rel to zero, not one                         
         SH    R0,SCBOPOS          No. of chars until screen end                
         IF    POS,'CEIL R15,R0'                                                
         END                                                                    
         CEIL  R15,256                                                          
         LA    R1,@R7(R15)                                                      
         CLEAR R2                                                               
         DEX   R15,'TRT @R7(0),OUTTBL'                                          
         LR    R0,R1                                                            
         SR    R0,R7                                                            
         FLIP  (R1,R7)                                                          
         SR    R6,R0                                                            
         LR    R3,R0                                                            
         SEG   (R1),(R0)           Text before we stopped                       
         AH    R3,SCBOPOS                                                       
         STH   R3,SCBOPOS                                                       
         IF    (R2,Z),BEGIN        Check for wrap...                            
         IF    SCBMODD.MODDNPAU,EXIT  Can't pause, scram                        
         LTH   R15,SCBWID                                                       
         IF    ^POS,EXIT                                                        
         DECR  R15                 Rel to zero, not one                         
         IF    (R3,LT,R15),EXIT    Not wrapped                                  
         CLEAR SCBOPOS             Back at pos 0                                
         INCR  R15,SCBOCNT         Kick line count                              
         END                                                                    
         ELSE  BEGIN               Process special char...                      
         LR    R1,R7                                                            
         LA    R7,@R7+1                                                         
         DECR  R6                                                               
         SETMSG (R1),1                                                          
         LT    RAR,OUTVECT(R2)     Processing routine                           
         IF    NZ,'BALR RAR,RAR'                                                
         END                                                                    
         END                                                                    
*                                                                               
OUTRC0   CLEAR R15                 Set rc                                       
OUTEXIT  LR    R3,R7               Remaining text loc                           
         LR    R2,R6               ... and length                               
         SETMSG L:OUTSGLOC,L:OUTSGLENF  processed text                          
         EXIT                                                                   
         EJECT                                                                  
**                                                                              
**  TRT table for special output characters.                                    
**                                                                              
         SPACE                                                                  
OUT      TBL   (X'00',X'01',X'02',X'03'),OUTCNTL             control            
         TBL   X'05',OUTHT                                   ht                 
         TBL   (X'07',X'0B',X'0C'),OUTCNTL                   control            
         TBL   X'0D',OUTCR                                   cr                 
         TBL   (X'0E',X'0F',X'10',X'11',X'12',X'13'),OUTCNTL control            
         TBL   X'15',OUTNL                                   nl                 
         TBL   X'16',OUTBS                                   bs                 
         TBL   (X'18',X'19',X'1C',X'1D',X'1E',X'1F'),OUTCNTL control            
         TBL   X'25',OUTLF                                   lf                 
         TBL   (X'26',X'27',X'2D',X'2E',X'2F'),OUTCNTL       control            
         TBL   (X'32',X'37',X'3C',X'3D',X'3F'),OUTCNTL       control            
         TBL   X'40',OUTBL                                   blank              
         TBL   X'4C',OUTFCHK                                 "<"                
         TBL                                                                    
         SPACE 2                                                                
OUTCNTL  SEG   (R1),(R0)                                                        
         B     OUTLOOP                                                          
*-                                                                              
*-       Handle new-line.                                                       
*-                                                                              
OUTNL    SEG   (R1),(R0)                                                        
*                                                                               
         IF    ((SCBCRI,NZ),OR,(SCBLFI,NZ)),BEGIN  Add idles...                 
         LH    R1,=H'960'          Assume 960 cps (9600 baud)                   
         LH    R2,SCBCRI+2         Cri(per-char)                                
         MH    R2,SCBOPOS          Cri(per-char)*nchars                         
         LH    R15,SCBCRI          Cri(fixed)                                   
         AR    R2,R15                                                           
         LH    R15,SCBLFI          Lfi(fixed)                                   
         AR    R2,R15                                                           
         MR    R0,R2               R1=cps*idletime                              
         CLEAR R0                                                               
         AL    R1,=A(999)                                                       
         D     R0,=A(1000)         No. of idle chars needed                     
         CEIL  R1,L'IDLES                                                       
         LR    R0,R1                                                            
         SEG   IDLES,(R0)                                                       
         END                                                                    
*                                                                               
         CLEAR SCBOPOS             Reset to pos 0                               
*                                                                               
         IF    SCBMODD.MODDNPAU,OUTLOOP                                         
         INCR  R15,SCBOCNT         Count the line                               
         IF    ((SCBHEIP,Z),OR,(R15,LT,SCBHEIP)),OUTLOOP  continue              
         LA    R15,4               Indicate pause                               
         B     OUTEXIT                                                          
*-                                                                              
*-       Handle carriage-return (no LF).                                        
*-                                                                              
OUTCR    SEG   (R1),(R0)                                                        
*                                                                               
         IF    (SCBCRI,NZ),BEGIN   Add idles...                                 
         LH    R1,=H'960'          Assume 960 cps (9600 baud)                   
         LH    R2,SCBCRI+2         Cri(per-char)                                
         MH    R2,SCBOPOS          Cri(per-char)*nchars                         
         LH    R15,SCBCRI          Cri(fixed)                                   
         AR    R2,R15                                                           
         MR    R0,R2               R1=cps*idletime                              
         CLEAR R0                                                               
         AL    R1,=A(999)                                                       
         D     R0,=A(1000)         No. of idle chars needed                     
         CEIL  R1,L'IDLES                                                       
         LR    R0,R1                                                            
         SEG   IDLES,(R0)                                                       
         END                                                                    
*                                                                               
         CLEAR SCBOPOS             Reset to pos 0                               
*                                                                               
         B     OUTLOOP                                                          
*-                                                                              
*-       Handle backspace.                                                      
*-                                                                              
OUTBS    SEG   (R1),(R0)                                                        
         DECR  R15,SCBOPOS                                                      
         B     OUTLOOP                                                          
*-                                                                              
*-       Handle horizontal tab.                                                 
*-                                                                              
OUTHT    SEG   (R1),(R0)                                                        
         B     OUTLOOP                                                          
*-                                                                              
*-       Handle line-feed.                                                      
*-                                                                              
OUTLF    SEG   (R1),(R0)                                                        
*                                                                               
         IF    (SCBLFI,NZ),BEGIN   Add idles...                                 
         LH    R1,=H'960'          Assume 960 cps (9600 baud)                   
         LH    R2,SCBLFI           Lfi(fixed)                                   
         MR    R0,R2               R1=idletime*cps                              
         CLEAR R0                                                               
         AL    R1,=A(999)                                                       
         D     R0,=A(1000)         No. of idle chars needed                     
         CEIL  R1,L'IDLES                                                       
         LR    R0,R1                                                            
         SEG   IDLES,(R0)                                                       
         END                                                                    
*                                                                               
         INCR  R15,SCBOCNT         Count the line                               
*                                                                               
         IF    SCBMODD.MODDNPAU,OUTLOOP  Scram if NOPAUSE                       
         IF    (SCBOPOS,NZ),OUTLOOP  Can't pause anyway                         
         IF    ((SCBHEIP,Z),OR,(R15,LT,SCBHEIP)),OUTLOOP  continue              
         LA    R15,4               Pause here                                   
         B     OUTEXIT                                                          
*-                                                                              
*-       Handle blanks.                                                         
*-                                                                              
OUTBL    LR    R15,R6                                                           
         CEIL  R15,256                                                          
         IF    (R15,NP),'SEG (R1),(R0); INCR R15,SCBOPOS; B OUTLOOP'            
         LA    R1,@R7(R15)                                                      
         L     R2,CVBLTBL                                                       
         DEX   R15,'TRT @R7(0),@R2'                                             
         SR    R1,R7               No. of blanks - 1                            
         AR    R7,R1                                                            
         SR    R6,R1                                                            
         LA    R5,@R1+1                                                         
*                                                                               
         IF    SCBMODC.MODCSTOB,BEGIN  Suppress trailing blanks...              
         IF    (R6,^POS),EXIT                                                   
         IF    (@R7,EQ,X'15'),OUTLOOP  ignore trailing blanks                   
         END                                                                    
*                                                                               
         IF    ^SCBMODB.MODBSLOL,BEGIN  Use tabs on output...                   
OUTBLL   IF    (R5,LE,2),EXIT      Don't bother                                 
         LH    R4,SCBOPOS                                                       
         LA    R4,@R4+1            Rel to one                                   
         LA    R1,SCBTABS                                                       
         LA    R0,L'SCBTABS                                                     
         LOOP  BEGIN                                                            
         LC    R3,@R1              Tab stop                                     
         IF    Z,EXIT                                                           
         SR    R3,R4                                                            
         IF    POS,EXIT            Far enough, exit                             
         LA    R1,@R1+1                                                         
         DECR  R0                                                               
         UNTIL (R0,Z),END                                                       
*                                                                               
         IF    (R3,^POS),EXIT                                                   
         IF    (R3,GT,R5),EXIT                                                  
*                                                                               
         IF    (R3,GT,2),BEGIN     Use tab...                                   
         SEG   X'05'               Tab                                          
         IF    (SCBHTI,NE,=F'0'),BEGIN  Add idles...                            
         LH    R1,=H'960'          960 cps (9600 baud)                          
         LH    R15,SCBHTI+2        Hti(per-char)                                
         MR    R14,R3              Hti(per-char)*nchars                         
         LH    R14,SCBHTI          Hti(fixed)                                   
         AR    R15,R14                                                          
         MR    R0,R15              R1 = cps*idletime                            
         CLEAR R0                                                               
         AL    R1,=A(999)                                                       
         D     R0,=A(1000)         No. of idles needed                          
         CEIL  R1,L'IDLES                                                       
         LR    R0,R1                                                            
         SEG   IDLES,(R0)                                                       
         END                                                                    
         END                                                                    
*                                                                               
         ELSE  'SEGBLANK (R3)'                                                  
         LH    R15,SCBOPOS                                                      
         AR    R15,R3                                                           
         STH   R15,SCBOPOS         New cursor position                          
         SR    R5,R3                                                            
         B     OUTBLL                                                           
         END                                                                    
*                                                                               
         SEGBLANK (R5)                                                          
         LH    R15,SCBOPOS                                                      
         AR    R15,R5                                                           
         STH   R15,SCBOPOS         New cursor postion                           
         B     OUTLOOP                                                          
*                                                                               
*                                                                               
OUTFCHK  IF    ^SCBMODB.MODBUFMT,BEGIN  Do formatting...                        
         LR    R5,R7                                                            
         LR    R4,R6                                                            
*                                                                               
         IF    (R4,LT,3),OUTFNO    Too few chars, skip it                       
         IF    ((@R5,NE,'.'),AND,(@R5,NE,':')),OUTFNO  Not ours                 
*                                                                               
         WHILE (R4,POS),BEGIN      Validate characters...                       
         IF    (@R5,EQ,'>'),BEGIN  End of formatting command...                 
         SR    R5,R7                                                            
         SETMSG (R7),(R5)           Formatting command                          
         SEGLD ,                   Pass seg control block ptr                   
         ACALL OUTFORM             Process formatting command                   
*                                                                               
         LA    R5,@R5+1            Skip past cmd (including ">")                
         AR    R7,R5               Kick ptr...                                  
         SR    R6,R5               ...and decr length                           
         B     OUTLOOP             All done, go process more chars              
         END                                                                    
*                                                                               
         LC    R2,@R5              Get char                                     
         LC    R15,OUTFTBL(R2)     Non-zero if invalid character                
         IF    (R15,NZ),OUTFNO     Invalid character, skip it                   
*                                                                               
         LA    R5,@R5+1            Next char                                    
         DECR  R4                                                               
         END                                                                    
         END                                                                    
*                                                                               
OUTFNO   SEG   (R1),(R0)           Seg character                                
         INCR  R15,SCBOPOS         Keep position accurate                       
         B     OUTLOOP                                                          
*                                                                               
         PEND                                                                   
*                                                                               
IDLES    DC    XL256'00'           Nulls                                        
*                                                                               
OUTFTBL  DC    256X'FF'                                                         
         ORG   OUTFTBL+C'a'                                                     
         DC    X'000000000000000000'    a-i                                     
         ORG   OUTFTBL+C'j'                                                     
         DC    X'000000000000000000'        j-r                                 
         ORG   OUTFTBL+C's'                                                     
         DC    X'0000000000000000'               s-z                            
         ORG   OUTFTBL+C'A'                                                     
         DC    X'000000000000000000'    A-I                                     
         ORG   OUTFTBL+C'J'                                                     
         DC    X'000000000000000000'        J-R                                 
         ORG   OUTFTBL+C'S'                                                     
         DC    X'0000000000000000'               S-Z                            
         ORG   OUTFTBL+C'0'                                                     
         DC    X'00000000000000000000'  0-9                                     
         ORG   OUTFTBL+C''                                                     
         DC    X'00000000000000'        .<(+|&                                 
         ORG   OUTFTBL+C'!'                                                     
         DC    X'0000000000000000'      !$*);^-/                                
         ORG   OUTFTBL+C','                                                     
         DC    X'000000FF00'            ,%_>?  (">" is n.g.)                    
         ORG   OUTFTBL+C'`'                                                     
         DC    X'00000000000000'        `:#@'="                                 
         ORG   OUTFTBL+C'\'                                                     
         DC    X'00'                    \                                       
         ORG   OUTFTBL+C'{'                                                     
         DC    X'00'                    {                                       
         ORG   OUTFTBL+C'}'                                                     
         DC    X'00'                    }                                       
         ORG   OUTFTBL+C'['                                                     
         DC    X'00'                    [                                       
         ORG   OUTFTBL+C']'                                                     
         DC    X'00'                    ]                                       
         ORG                                                                    
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
*-                                                                              
*-  Formatting character entry (see FCHAR macro below).                         
*-                                                                              
FCHAR    RECORD BEGIN                                                           
FCHARNEXT DS   A                   Next FCHAR ptr (0=end)                       
FCHARFLG FLAG                                                                   
         FLAG  (FCHARFANY,0,EQ)    - Match either upper or lower                
         FLAG  (FCHARFUPPER,1,EQ)  - Match only if any upper case               
         FLAG  (FCHARFLOWER,2,EQ)  - Match only if all lower case               
FCHARALT DS    C                   Alternate character set char                 
         DS    XL2                 Reserved                                     
FCHARRTN DS    A                   Processing routine addr                      
FCHARLEN DS    X                   Length of sequence                           
FCHARSEQ DS    0C                  Sequence text (variable)                     
FCHARTLEN DS   X                   Length of TEXT sequence                      
FCHARTEXT DS   0C                  TEXT sequence                                
         END                                                                    
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  OUTFORM -- Routine to process formatting command.  This routine              
*    is called by OUTPROC (above) and assumes that a SEG                        
*    buffer is set up.                                                          
*                                                                               
*    On Entry:                                                                  
*       R1,R0 - formatting command location, length                             
*       R15 - output SEGCB ptr                                                  
*                                                                               
OUTFWA   RECORD BEGIN                                                           
OUTFLAG  FLAG                                                                   
         FLAG  OUTFDISPLAYONLY     - Don't do sequence                          
*                                                                               
OUTFPTRS DS    2A                  Original sequence ptrs                       
OUTFSEQ  DS    CL32                Sequence as user typed it                    
OUTFSEQL DS    CL32                Sequence in all lower case                   
OUTFTOK  DS    CL32                Current working sequence                     
         END                                                                    
*-                                                                              
OUTFORM  PROC  OUTFWA                                                           
         WITH  SCB                                                              
         CLEAR OUTFWA                                                           
         STM   R0,R1,OUTFPTRS      Original sequence ptrs                       
*                                                                               
         LR    R7,R15              Copy SEGCB ptr                               
         SEGDEF (R7)                                                            
*-                                                                              
*-       If a sequence begins with "<.." or "<::" then we will                  
*-         display it as "<." or "<:" but not act on the                        
*-         formatting request.                                                  
*-                                                                              
         IF    (R0,GT,2),BEGIN     Long enough to be possible...                
         IF    ((@R1,NE,'..'),AND,(@R1,NE,'::')),EXIT                           
         SET   OUTFDISPLAYONLY     Special "skip" sequence                      
         LA    R1,@R1+1            Skip past first dot                          
         DECR  R0                  Adjust length                                
         END                                                                    
*                                                                               
         CEIL  R0,L'OUTFSEQ        Not too long now                             
         MVC   OUTFSEQ,CVBLANKS                                                 
         LR    R2,R0                                                            
         MOVE  R2,OUTFSEQ,@R1      Save sequence                                
*                                                                               
         MVC   OUTFSEQL,OUTFSEQ    Make copy of sequence                        
         L     R2,CVLOWTBL                                                      
         TR    OUTFSEQL,@R2        Translate to all lower                       
*-                                                                              
*-       Try to match our sequence with an entry in the                         
*-         FCHAR table.                                                         
*-                                                                              
         L     R6,=A(FCHARTBL)     Start of FCHAR table                         
         WITH  (FCHAR,R6)                                                       
         WHILE (R6,NZ),BEGIN       Go through FCHAR table...                    
         LC    R15,FCHARLEN        Get sequence length                          
         CEIL  R15,L'OUTFTOK       Not too long now                             
         MVC   OUTFTOK,CVBLANKS                                                 
         MOVE  R15,OUTFTOK,FCHARSEQ  Copy over sequence                         
         L     R15,CVLOWTBL                                                     
         TR    OUTFTOK,@R15        Convert to lower case                        
*-                                                                              
*-       Cheap debugging facility.                                              
*-                                                                              
         AGO   .NOBUGS                                                          
         SEG   '\TOK='                                                          
         SEGT  OUTFTOK                                                          
         SEG   ', FCHAR='                                                       
         SEGT  OUTFSEQ                                                          
         SEG   ','                                                              
         SEGT  OUTFSEQL                                                         
         SEG   ','                                                              
         SEGHX LC:FCHARFLG,2                                                    
         SEG   '\'                                                              
         SEG   X'15'                                                            
.NOBUGS  ANOP                                                                   
*                                                                               
         IF    FCHARFANY,BEGIN     Case insensitive...                          
         IF    (OUTFTOK,EQ,OUTFSEQL),OUTFMAT  Got it                            
         END                                                                    
*                                                                               
         ELSEIF FCHARFLOWER,BEGIN  All lower case only...                       
         IF    (OUTFTOK,EQ,OUTFSEQ),OUTFMAT  Got it                             
         END                                                                    
*                                                                               
         ELSEIF FCHARFUPPER,BEGIN  Any upper case...                            
         IF    (OUTFTOK,EQ,OUTFSEQL),BEGIN                                      
         IF    (OUTFTOK,NE,OUTFSEQ),OUTFMAT  Some upper--matched                
         END                                                                    
         END                                                                    
*                                                                               
         L     R6,FCHARNEXT        Get next FCHAR entry                         
         END                                                                    
*-                                                                              
*-       No match, display the exact text we were passed.                       
*-                                                                              
         SEG   '<'                                                              
         LM    R0,R1,OUTFPTRS      Original input text                          
         SEG   (R1),(R0)                                                        
         SEG   '>'                                                              
         B     OUTFEXIT            All done                                     
*-                                                                              
*-       We found a matched entry.                                              
*-                                                                              
OUTFMAT  IF    OUTFDISPLAYONLY,BEGIN  Display sequence only...                  
         SEG   '<'                                                              
         LM    R0,R1,OUTFPTRS      Original input text                          
         LA    R1,@R1+1                                                         
         DECR  R0                                                               
         SEG   (R1),(R0)                                                        
         SEG   '>'                                                              
         B     OUTFEXIT            All done                                     
         END                                                                    
*                                                                               
         LT    RAR,FCHARRTN        Get processing routine addr                  
         IF    NZ,'BASR RAR,RAR; B OUTFEXIT'  Do it                             
*-                                                                              
*-       Display special character by switching to the alternate                
*-         character set.                                                       
*-                                                                              
         IF    (FCHARALT,NZ),BEGIN  We have an alternate...                     
         IF    ^SCBFSAMFONT,EXIT   Terminal can't display it, scram             
         IF    ^SCBFSETFONT,BEGIN    Set alternate character set...             
         SEG   $SETFONT            Set our alternate font                       
         SET   SCBFSETFONT         Remember that for a while                    
         END                                                                    
*                                                                               
         SEG   $SI                 Shift-in to alternate charset                
         SEG   FCHARALT            Write the character                          
         SEG   $SO                 Shift-out again                              
         INCR  R15,SCBOPOS         Kick output position                         
         B     OUTFEXIT            All done, scram                              
         END                                                                    
*-                                                                              
*-       Display text form for dumb terminals.                                  
*-                                                                              
         LA    R3,FCHARTLEN                                                     
         LC    R15,FCHARLEN                                                     
         AR    R3,R15              Actual "FCHARTLEN" addr                      
         LC    R2,@R3              Length of text to write                      
         LA    R1,@R3+1            Text data                                    
         SEG   (R1),(R2)                                                        
         AH    R2,SCBOPOS          Keep output position...                      
         STH   R2,SCBOPOS          ...accurate                                  
*                                                                               
OUTFEXIT PEND                                                                   
*                                                                               
$SETFONT DC    X'275DF0'           Set ruling font                              
$SI      DC    X'0E'               Shift into alternate char set                
$SO      DC    X'0F'               Shift out of alternate char set              
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*        Output formatting command routines.                                    
*                                                                               
OUTFBP   PROC                                                                   
         WITH  SCB                                                              
         SET   SCBFBOLD            Bold                                         
         LCALL OUTFCSI                                                          
         PEND                                                                   
*                                                                               
OUTFBM   PROC                                                                   
         WITH  SCB                                                              
         CLEAR SCBFBOLD                                                         
         LCALL OUTFCSI                                                          
         PEND                                                                   
*                                                                               
OUTFIP   PROC                                                                   
         WITH  SCB                                                              
         SET   SCBFINV             Italics (use reverse instead)                
         LCALL OUTFCSI                                                          
         PEND                                                                   
*                                                                               
OUTFIM   PROC                                                                   
         WITH  SCB                                                              
         CLEAR SCBFINV                                                          
         LCALL OUTFCSI                                                          
         PEND                                                                   
*                                                                               
OUTFUP   PROC                                                                   
         WITH  SCB                                                              
         SET   SCBFUND             Underline                                    
         LCALL OUTFCSI                                                          
         PEND                                                                   
*                                                                               
OUTFUM   PROC                                                                   
         WITH  SCB                                                              
         CLEAR SCBFUND                                                          
         LCALL OUTFCSI                                                          
         PEND                                                                   
*                                                                               
OUTFFP   PROC                                                                   
         WITH  SCB                                                              
         SET   SCBFBLNK            Flashing (blinking)                          
         LCALL OUTFCSI                                                          
         PEND                                                                   
*                                                                               
OUTFFM   PROC                                                                   
         WITH  SCB                                                              
         CLEAR SCBFBLNK                                                         
         LCALL OUTFCSI                                                          
         PEND                                                                   
*                                                                               
OUTFRP   PROC                                                                   
         WITH  SCB                                                              
         SET   SCBFINV             Reverse video                                
         LCALL OUTFCSI                                                          
         PEND                                                                   
*                                                                               
OUTFRM   PROC                                                                   
         WITH  SCB                                                              
         CLEAR SCBFINV                                                          
         LCALL OUTFCSI                                                          
         PEND                                                                   
*                                                                               
OUTFNORM PROC                                                                   
         WITH  SCB                                                              
         CLEAR SCBAFLAG                                                         
         LCALL OUTFCSI                                                          
         PEND                                                                   
*                                                                               
OUTFCSI  PROC                                                                   
         WITH  SCB                                                              
         IF    SCBFMOD,BEGIN       Only do if model terminal...                 
         SEG   X'27AD'             CSI                                          
         IF    (SCBAFLAG,NZ),BEGIN  Set special attributes...                   
         SEG   '0'                                                              
         IF    SCBFBOLD,'SEG ";1"'                                              
         IF    SCBFUND,'SEG ";4"'                                               
         IF    SCBFBLNK,'SEG ";5"'                                              
         IF    SCBFINV,'SEG ";7"'                                               
         END                                                                    
         SEG   'm'                 Set graphic rendition                        
         END                                                                    
         PEND                                                                   
*                                                                               
OUTFRED  PROC                                                                   
         WITH  SCB                                                              
         SETMSG '31'                Red                                         
         LCALL OUTFSEG                                                          
         PEND                                                                   
*                                                                               
OUTFGR   PROC                                                                   
         WITH  SCB                                                              
         SETMSG '32'                Green                                       
         LCALL OUTFSEG                                                          
         PEND                                                                   
*                                                                               
OUTFYEL  PROC                                                                   
         WITH  SCB                                                              
         SETMSG '33'                Yellow                                      
         LCALL OUTFSEG                                                          
         PEND                                                                   
*                                                                               
OUTFBLUE PROC                                                                   
         WITH  SCB                                                              
         SETMSG '34'                Blue                                        
         LCALL OUTFSEG                                                          
         PEND                                                                   
*                                                                               
OUTFMAG  PROC                                                                   
         WITH  SCB                                                              
         SETMSG '35'                Magenta                                     
         LCALL OUTFSEG                                                          
         PEND                                                                   
*                                                                               
OUTFCYAN PROC                                                                   
         WITH  SCB                                                              
         SETMSG '36'                Cyan                                        
         LCALL OUTFSEG                                                          
         PEND                                                                   
*                                                                               
OUTFWH   PROC                                                                   
         WITH  SCB                                                              
         SETMSG '37'                White                                       
         LCALL OUTFSEG                                                          
         PEND                                                                   
*                                                                               
OUTFPAGE PROC                                                                   
         WITH  SCB                                                              
         SEG   X'0D'                                                            
         SEG   '-- Page -- '       Indicate page eject                          
         MVC   SCBOPOS,=H'11'      Set cursor position accurately               
         PEND                                                                   
*                                                                               
OUTFFPAG PROC                                                                   
         WITH  SCB                                                              
         SEG   X'0D'                                                            
         SEG   '-- Front page -- '  Indicate full page eject                    
         MVC   SCBOPOS,=H'11'      Set cursor position accurately               
         PEND                                                                   
*                                                                               
OUTFBELL PROC                                                                   
         WITH  SCB                                                              
         SEG   X'2F'               Bell character                               
         PEND                                                                   
*                                                                               
OUTFSEG  PROC                                                                   
         WITH  SCB                                                              
         IF    SCBFMOD,BEGIN       Only do if model terminal...                 
         PUSH  (R0,R1)                                                          
         SEG   X'27AD'             CSI                                          
         POP   (R0,R1)                                                          
         SEG   (R1),(R0)                                                        
         SEG   'm'                 Set graphic rendition                        
         END                                                                    
         PEND                                                                   
*                                                                               
         SEGDEF DUMMY              (Neatness)                                   
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*        The Special Character processing table is defined                      
*          with the FCHAR macro.  The format is:                                
*                                                                               
*              FCHAR  sequence,                                                 
*                       TEXT='plain text string to use',                        
*                       ALT='x'   "x" is the character in the                   
*                                 (Samson) alternate character                  
*                                 set.                                          
*                       CASE={ANY|UPPER|LOWER}                                  
*                                 Specifies that the sequence                   
*                                 must be in upper, lower or                    
*                                 any case.                                     
*                                                                               
         MACRO                                                                  
&L       FCHAR &CHARS,&RTN=0,&TEXT=,&ALT=,&CASE=ANY                             
         GBLA  &FCHARCNT                                                        
         GBLC  &FCHARLAB                                                        
&L       DS    0F                                                               
*                                                                               
         AIF   ('&CHARS' EQ '').ENDTAB                                          
.*                                                                              
&FCHARLAB LABEL                                                                 
&CHLAB   SETC  '$$$FCHAR&FCHARCNT'                                              
.*                                                                              
&FCHARCNT SETA &FCHARCNT+1                                                      
&FCHARLAB SETC '$$$FCHAR&FCHARCNT'                                              
.*                                                                              
         DC    A(&FCHARLAB)        Next FCHAR entry ptr                         
.*                                                                              
         DC    AL1(L'FCHARF&CASE)  Case flag                                    
.*                                                                              
         AIF   ('&ALT' EQ '').ALTNONE                                           
         DC    AL1(C&ALT)          Alternate character                          
         AGO   .ALTCOM                                                          
.ALTNONE DC    AL1(0)              No alternate character                       
.ALTCOM  ANOP                                                                   
.*                                                                              
         DC    AL2(0)              Reserved                                     
.*                                                                              
         DC    A(&RTN)             Processing routine addr                      
.*                                                                              
         DC    AL1(L'&CHLAB.C)                                                  
&CHLAB.C DC    C&CHARS             Character string user types                  
         AIF   ('&TEXT' NE '').GOTTEXT                                          
         DC    AL1(0)              No text we can display                       
         AGO   .TEXTCOM                                                         
.GOTTEXT ANOP                                                                   
         DC    AL1(L'&CHLAB.T)                                                  
&CHLAB.T DC    C&TEXT              Character string we display                  
.TEXTCOM ANOP                                                                   
.*                                                                              
         MEXIT                                                                  
.*                                                                              
.ENDTAB  ANOP                                                                   
&FCHARLAB EQU  0                   End of table                                 
         MEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*        Table of special characters.                                           
*                                                                               
FCHARTBL FCHAR '.b+',RTN=OUTFBP                    Bold on                      
         FCHAR '.b-',RTN=OUTFBM                     " " off                     
         FCHAR '.i+',RTN=OUTFIP                    Italics/Inverse              
         FCHAR '.i-',RTN=OUTFIM                     " " off                     
         FCHAR '.u+',RTN=OUTFUP                    Underline on                 
         FCHAR '.u-',RTN=OUTFUM                     " " off                     
         FCHAR '.f+',RTN=OUTFFP                    Flashing on                  
         FCHAR '.f-',RTN=OUTFFM                     " " off                     
         FCHAR '.r+',RTN=OUTFRP                    Reverse on                   
         FCHAR '.r-',RTN=OUTFRM                     " " off                     
         FCHAR '.page',RTN=OUTFPAGE                New page                     
         FCHAR '.front',RTN=OUTFFPAG               New front page               
         FCHAR '.frontpage',RTN=OUTFFPAG            " "                         
         FCHAR '.normal',RTN=OUTFNORM              Reset bold, etc.             
         FCHAR '.bell',RTN=OUTFBELL                Bell                         
*                                                                               
         FCHAR '.red',RTN=OUTFRED                  Red                          
         FCHAR '.red+',RTN=OUTFRED                 " "                          
         FCHAR '.red-',RTN=OUTFWH                  " "                          
         FCHAR '.green',RTN=OUTFGR                 Green                        
         FCHAR '.green+',RTN=OUTFGR                " "                          
         FCHAR '.green-',RTN=OUTFWH                " "                          
         FCHAR '.yellow ',RTN=OUTFYEL              Yellow                       
         FCHAR '.yellow+',RTN=OUTFYEL              " "                          
         FCHAR '.yellow-',RTN=OUTFWH               " "                          
         FCHAR '.blue',RTN=OUTFBLUE                Blue                         
         FCHAR '.blue+',RTN=OUTFBLUE               " "                          
         FCHAR '.blue-',RTN=OUTFWH                 " "                          
         FCHAR '.magenta',RTN=OUTFMAG             Magenta                       
         FCHAR '.magenta+',RTN=OUTFMAG             " "                          
         FCHAR '.magenta-',RTN=OUTFWH              " "                          
         FCHAR '.cyan',RTN=OUTFCYAN                Cyan                         
         FCHAR '.cyan+',RTN=OUTFCYAN               " "                          
         FCHAR '.cyan-',RTN=OUTFWH                 " "                          
         FCHAR '.white',RTN=OUTFWH                 White                        
         FCHAR '.white+',RTN=OUTFWH                " "                          
         FCHAR '.white-',RTN=OUTFWH                " "                          
*                                                                               
         COPY  FCHARSYM            Common Wylbur/Milten spec. symbols           
*                                                                               
         FCHAR ,                                   *** End of Table ***         
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FINDXLE -- Routine to find the XLE entry for this session.                   
*                                                                               
*    On exit, R15 (and CC):                                                     
*      0  - no XLE                                                              
*      nz - XLE ptr                                                             
*                                                                               
FINDXLE  PROC                                                                   
         WITH  SCB                 (Entry assumption)                           
*                                                                               
         IF    (SCBCHAR,Z),BEGIN  no user translation...                        
         CLEAR SCBXLEP                                                          
         B     FXLEXIT                                                          
         END                                                                    
*                                                                               
         IF    (SCBTVTAM,AND,(SCBCHAR,EQ,'APL')),BEGIN  no APL xl...            
         CLEAR SCBXLEP                                                          
         B     FXLEXIT                                                          
         END                                                                    
*                                                                               
         LT    R7,SCBXLEP                                                       
         IF    (Z,OR,(SCBCHAR,NE,@R7)),BEGIN                                    
         LA    R6,CVXLTBL                                                       
         LA    R7,CVXLTBE                                                       
         WHILE (R6,LT,R7),BEGIN                                                 
         IF    (SCBCHAR,EQ,@R6),BEGIN                                           
         ST    R6,SCBXLEP                                                       
         B     FXLEXIT                                                          
         END                                                                    
         LA    R6,@R6+2            Next xle                                     
         END                                                                    
         CLEAR SCBCHAR,SCBXLEP     Reset (table not found)                      
         END                                                                    
FXLEXIT  LT    R15,SCBXLEP         Xle entry (in cv)                            
         IF    NZ,'L R15,@R15+8'   Xle ptr                                      
         PEND                                                                   
         EJECT                                                                  
XLTWA    RECORD BEGIN                                                           
XLTPTRS  DS    2A                  Text loc, len                                
XLTRC    DS    F                   Return code                                  
         END                                                                    
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  XLTEXT -- Routine to translate text.                                         
*                                                                               
*    On entry:                                                                  
*      R1,R0 - text loc, len                                                    
*      R15 - 512 byte tr/trt table (see "XLE")                                  
*                                                                               
*    On exit:                                                                   
*      R1,R0 - text loc, len (len may have changed)                             
*      R15 (and CC):                                                            
*        0 - ok                                                                 
*        4 - invalid char(s) found                                              
*                                                                               
XLTEXT   PROC  XLTWA                                                            
         CLEAR XLTWA                                                            
         LR    R7,R15              Xle portion                                  
         STM   R0,R1,XLTPTRS       Save text ptrs                               
         IF    (R0,NP),XLTEXIT                                                  
*                                                                               
         LM    R5,R6,XLTPTRS                                                    
XLTRTLP  LR    R15,R5                                                           
         CEIL  R15,256                                                          
         LA    R1,@R6(R15)                                                      
         CLEAR R2                                                               
         DEX   R15,'TRT @R6(0),@R7+256'                                         
         IF    NZ,BEGIN            Found a special char...                      
         IF    (R2,EQ,XLEFINV),BEGIN  invalid char...                           
         MVC   XLTRC,=F'4'         Set return code                              
         LA    R1,@R1+1                                                         
         B     XLTRTN                                                           
         END                                                                    
         IF    (R2,EQ,XLEFIGN),BEGIN  ignore char...                            
         DECR  R5                                                               
         DECR  R15,XLTPTRS         Reduce len                                   
         LR    R2,R1                                                            
         LR    R15,R1                                                           
         SR    R15,R6                                                           
         LR    R3,R5                                                            
         SR    R3,R15              Remaining len                                
         LA    R14,@R1+1                                                        
         LR    R15,R3                                                           
         MVCL  R2,R14              Move text over to delete char                
         B     XLTRTN                                                           
         END                                                                    
         FAIL  'Bad XLE'                                                        
         END                                                                    
XLTRTN   LR    R15,R1                                                           
         SR    R15,R6                                                           
         LR    R6,R1                                                            
         SR    R5,R15                                                           
         BP    XLTRTLP             More to do                                   
*                                                                               
         LM    R5,R6,XLTPTRS       Now translate text...                        
         WHILE (R5,GT,256),BEGIN                                                
         TR    @R6(256),@R7                                                     
         LA    R6,@R6+256                                                       
         SH    R5,=H'256'                                                       
         END                                                                    
         TDEX  R5,'TR @R6(0),@R7'                                               
*                                                                               
XLTEXIT  LM    R0,R1,XLTPTRS                                                    
         L     R15,XLTRC                                                        
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SESSTRC -- Routine to queue a trace buffer to the SCB specified              
*    (if tracing or monitoring has been turned on).                             
*                                                                               
*    On entry:                                                                  
*      @R15 - trace type text                                                   
*      R1,R0 - trace text loc, len                                              
*      PDB - filled in                                                          
*                                                                               
SESSTRC  PROC                                                                   
         WITH  SCB,PDB             Entry assumptions                            
         FAIL  (SCB,NE,'SCB'),'Bad SCB ptr'                                     
         LR    R5,R15              Save prompt ptr                              
*                                                                               
         LR    R4,R1               Text                                         
         LTR   R3,R0                                                            
         IF    NEG,'CLEAR R3'                                                   
         LR    R2,R3                                                            
         CEIL  R2,STRCMXDL         Not too long now                             
*                                                                               
         LA    R0,L'STRCHDR+@R2    Total STRC entry length                      
         LA    R1,STRCSUBP         Subpool                                      
         PUSH  R2                                                               
         LR    R2,RAR                                                           
         VCALL NGETCORE            Get a new trace buffer                       
         POP   R2                                                               
         LR    R6,R1                                                            
         WITH  (STRC,R6)                                                        
         CLEAR STRCHDR                                                          
         MVC   STRC(4),=C'STRC'    Set self-identification                      
         VCALL LOCALTOD            Time stamp                                   
         STM   R0,R1,STRCCLCK                                                   
         INCR  R15,CVSCBUID        Kick unique SCB trace id                     
         ST    R15,STRCUID         Save unique trace id in STRC                 
*-                                                                              
*-       Save trace type.                                                       
*-                                                                              
         MVC   STRCTYPE,@R5        Set trace type                               
*-                                                                              
*-       Save trace data.                                                       
*-                                                                              
         STH   R3,STRCACTLEN       Save actual data length                      
         STH   R2,STRCDLEN         Save data length                             
         MOVEL STRCDATA,(R4),(R2)  Save data                                    
*                                                                               
         IF    PDBMODD.MODDTRAN,'SET STRCFASCII'  Trace data is ASCII           
*-                                                                              
*-       Link this trace entry to the end of the queue.                         
*-                                                                              
         LT    R2,SCBTRCQT         Get last trace entry ptr                     
         IF    Z,BEGIN             Empty trace table...                         
         ST    R6,SCBTRCQH         We are the queue head                        
         ST    R6,SCBTRCQT         And the queue tail                           
         END                                                                    
*                                                                               
         ELSE  BEGIN               Add us to the end...                         
         ST    R6,STRCLINK-STRC(,R2)  Link us to last                           
         ST    R6,SCBTRCQT         We are the new queue tail                    
         END                                                                    
*                                                                               
         INCR  R15,SCBNTRC         Keep count of number of entries              
*-                                                                              
*-       Free oldest entries.                                                   
*-                                                                              
         WHILE (SCBNTRC,GT,=A(STRCMAX#)),BEGIN                                  
         L     R1,SCBTRCQH         Oldest STRC entry                            
         WITH  (STRC,R1)                                                        
         LA    R15,SCB                                                          
         LCALL FREESTRC            Free a trace entry                           
         END                                                                    
*                                                                               
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FREESTRC -- Routine to free a session trace entry.                           
*                                                                               
*    On entry:                                                                  
*      R1  - STRC ptr of entry to free                                          
*                                                                               
*    On exit, R15 (and cc):                                                     
*      0 - no entries left in trace queue                                       
*      nz- there are still entries in the trace queue                           
*                                                                               
FREESTRC PROC                                                                   
         WITH  SCB                 Entry assumption                             
         FAIL  (SCB,NE,'SCB'),'Bad SCB ptr'                                     
*                                                                               
         LR    R6,R1               STRC ptr                                     
         IF    (R6,Z),'CLEAR R15; EXIT FREESTRC'  Nothing left                  
*-                                                                              
*-       Find the previous STRC entry so we can unlink this entry.              
*-                                                                              
         CLEAR R4                  Previous entry ptr                           
*                                                                               
         LA    R3,SCBTRCQH-(STRCLINK-STRC)  Dummy queue head                    
         WITH  (STRC,R3),BEGIN                                                  
         WHILE ('LT R3,STRCLINK',NZ),BEGIN  Go through entries...               
*                                                                               
         IF    (R3,EQ,R6),FSTRCOM  Matched the entry, scram                     
*                                                                               
         LR    R4,R3               Save previous entry ptr                      
         END                                                                    
         END                                                                    
*                                                                               
         FAIL  'Free STRC logic error.'                                         
*-                                                                              
*-       Dequeue our STRC entry.                                                
*-                                                                              
FSTRCOM  IF    (R4,Z),BEGIN        We are removing the 1st entry...             
         MVC   SCBTRCQH,STRCLINK-STRC(R6)  Set new queue head                   
         IF    (SCBTRCQH,Z),'CLEAR SCBTRCQT'  Nothing on queue                  
         END                                                                    
*                                                                               
         ELSE  BEGIN               Dequeue...                                   
         WITH  (STRC,R4)                                                        
         FAIL  (STRC,NE,'STRC'),'Free STRC logic error.'                        
         MVC   STRCLINK,STRCLINK-STRC(R6)  Dequeue our entry                    
         IF    (STRCLINK,Z),'ST R4,SCBTRCQT'  Update queue tail                 
         END                                                                    
*-                                                                              
*-       Free the STRC entry.                                                   
*-                                                                              
         WITH  (STRC,R6),BEGIN                                                  
         FAIL  (STRC,NE,'STRC'),'Free STRC logic error.'                        
         MVC   STRC(4),=C'OTRC'    Neatness                                     
         MVC   STRCLINK,=F'-1'     (Ditto)                                      
*                                                                               
         LA    R1,STRC                                                          
         VCALL FREECORE            Free trace entry                             
*                                                                               
         DECR  R15,SCBNTRC         Decrement number of trace entries            
         END                                                                    
*                                                                               
         LT    R15,SCBTRCQH        Set CC for caller                            
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FINDSID -- Routine to find SCB from session id.                              
*                                                                               
*    On entry:                                                                  
*      R15 - session id                                                         
*                                                                               
*    On exit, R15 (and CC):                                                     
*     -4 - no match                                                             
*      0 - matched SCB with id (R1 - SCB ptr)                                   
*      4 - matched SCB with id gt than parm id (R1 - SCB ptr)                   
*                                                                               
FINDSID  PROC                                                                   
         LA    R1,CVSCBQH-(SCBLINK-SCB)  Dummy first link                       
         WITH  (SCB,R1)                                                         
         WHILE ('LT R1,SCBLINK',NZ),BEGIN                                       
         IF    (R15,LGE,SCBID),BEGIN                                            
         S     R15,SCBID                                                        
         IF    Z,EXIT,FINDSID      Exact match                                  
         LA    R15,4               Id is gt than parm id                        
         EXIT  FINDSID                                                          
         END                                                                    
         END                                                                    
         LH    R15,=H'-4'          No match                                     
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FMTSIB -- Routine to format SIB.                                             
*                                                                               
*    On entry:                                                                  
*      R1 - SCB ptr                                                             
*      R15- addr of SIB area                                                    
*                                                                               
*    On exit:                                                                   
*      R15 - SIB length                                                         
*                                                                               
FMTSIB   PROC                                                                   
         LR    SCBR,R1                                                          
         WITH  SCB                                                              
*                                                                               
         LR    R7,R15                                                           
         WITH  (SIB,R7)                                                         
*                                                                               
         CLEAR SIB                                                              
         MVC   SIBIHDR,SCBIHDR     Id and session number                        
         LT    R4,SCBPIBP                                                       
         IF    NZ,BEGIN                                                         
         WITH  (PIB,R4)                                                         
         MVC   SIBPIB,PIBSIB                                                    
         L     R3,PIBFEBP                                                       
         WITH  (FEB,R3),'MVC SIBFE,FEBNAME'                                     
         END                                                                    
*                                                                               
         MVC   SIB1,SCB1           Sib proper                                   
*                                                                               
         LA    R15,L'SIB                                                        
         IF    (SIBID,EQ,SCBID),EXIT                                            
         IF    SCBFSPR,EXIT                                                     
         LA    R15,L'SIBG          Limited sib                                  
*                                                                               
         PEND                                                                   
*                                                                               
         DS    0S(L'SIBPIB-L'PIBSIB,L'PIBSIB-L'SIBPIB)  bad lengths             
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SESSERR -- Routine to do error recovery.                                     
*                                                                               
*    On entry:                                                                  
*      R1 - SCB ptr                                                             
*                                                                               
*    On exit, R15 (and CC):                                                     
*      0 - attempt retry                                                        
*      4 - shutdown MILTEN                                                      
*                                                                               
SESSERR  XPROC                                                                  
         LR    SCBR,R1                                                          
         WITH  SCB                                                              
*                                                                               
         LA    R1,SCB                                                           
         ACALL DISCSESS            Disconnect session                           
         CLEAR R15                 Attempt retry                                
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SUBERR -- Routine to do error recovery.                                      
*                                                                               
*    On entry:                                                                  
*      R1 - SUB ptr                                                             
*                                                                               
*    On exit, R15 (and CC):                                                     
*      0 - attempt retry                                                        
*      4 - no retry, shutdown MILTEN                                            
*                                                                               
SUBERR   XPROC                                                                  
         LR    SUBR,R1                                                          
         WITH  SUB                                                              
*                                                                               
         WTO   'SUBSYSTEM ERROR.'                                               
*                                                                               
         LA    R15,4               Assume the worst                             
         IF    (SUBR,EQ,CVMRTSUB),EXIT  Mort can't go                           
*-                                                                              
*-       Very temporary addition.                                               
*-                                                                              
         INCR  R15,SUBNFAIL                                                     
         IF    (R15,LE,20),BEGIN                                                
         SET   SUBSFLAG.SUBPFNI,MODE=LOCKED,REF=SUB                             
         END                                                                    
*                                                                               
         ELSE  BEGIN                                                            
         LA    R1,SUB                                                           
         ACALL SUBCLS              Close the subsystem path                     
         END                                                                    
*                                                                               
         CLEAR R15                 Attempt retry                                
         PEND                                                                   
*                                                                               
         QLTORG                                                                 
*                                                                               
         END   .                                                                
