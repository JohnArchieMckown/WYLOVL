MUD      TITLE 'MILTEN''s Dump Formatter'                                       
*******************************************************************             
*                                                                 *             
*     MILTEN/370 - Release VI - Class I - Stanford Proprietary    *             
*                                                                 *             
*******************************************************************             
         HIBAL                                                                  
*                                                                               
         SYSDEFN                                                                
*                                                                               
MILMUD   CSECT                                                                  
MUD      IDENT 2047                10:16:24 02/16/02  (SLP)                     
         REGS  ,,FSR,,,,,,BR,BRR,BRRR,(SEGCBR,LSR),CVR,SPR,RAR                  
*                                                                               
         MACRO                                                                  
&L       SEGLOC &ADDR,&LEN,&SEGCB                                               
&L      $L     R1,&ADDR,ERR='LOCATION MISSING'                                  
        $LA    R0,&LEN                                                          
         SEGLD &SEGCB                                                           
         LCALL SEGLOC                                                           
         MEND                                                                   
*                                                                               
         MACRO                                                                  
&L       SEGPSW &ADDR,&LEN,&SEGCB                                               
&L      $L     R1,&ADDR,ERR='LOCATION MISSING'                                  
        $LA    R0,&LEN                                                          
         SEGLD &SEGCB                                                           
         LCALL SEGPSW                                                           
         MEND                                                                   
*                                                                               
         PUSH  DSECTS                                                           
         EJECT                                                                  
         MACRO                                                                  
&L       SYMBOLS &CSECT=YES                                                     
         LCLA  &PN,&PL,&FLG                                                     
         LCLB  &FCSE                                                            
         LCLC  &VCON,&NAME,&LEN                                                 
         AIF   ('&L' EQ '').NOLBL                                               
&L       DS    0F                                                               
.NOLBL   ANOP                                                                   
&FCSE    SETB  ('&CSECT' EQ 'YES')                                              
&FLG     SETA  &FCSE*X'80'                                                      
&PN      SETA  0                                                                
.NXTCS   AIF   (&PN GE N'&SYSLIST).EXIT                                         
&PN      SETA  &PN+1                                                            
&LEN     SETC  '30*1024'                                                        
&VCON    SETC  '&SYSLIST(&PN)'                                                  
&NAME    SETC  '&VCON'                                                          
         AIF   (N'&SYSLIST(&PN) LE 1).NOTFANC                                   
         AIF   (N'&SYSLIST(&PN) EQ 2).FANCY                                     
         AIF   (N'&SYSLIST(&PN) EQ 3).LENF                                      
         MNOTE 4,'&SYSLIST(&PN) - IGNORED, ONLY TWO ARGS ALLOWED'               
         AGO   .NXTCS                                                           
.LENF    AIF   ('&SYSLIST(&PN,3)' EQ '').FANCY                                  
&LEN     SETC  '&SYSLIST(&PN,3)'                                                
.FANCY   ANOP                                                                   
&VCON    SETC  '&SYSLIST(&PN,1)'                                                
&NAME    SETC  '&VCON'                                                          
         AIF   ('&SYSLIST(&PN,2)' EQ '').SKPN                                   
&NAME    SETC  '&SYSLIST(&PN,2)'                                                
.SKPN    ANOP                                                                   
&PL      SETA  K'&NAME                                                          
         AGO   .GEN                                                             
.NOTFANC ANOP                                                                   
&PL      SETA  K'&SYSLIST(&PN)                                                  
.GEN     AIF   (&PL EQ 0).NXTCS                                                 
         DC    AL1(&FLG,0),AL2(&LEN),V(&VCON),CL8'&NAME'                        
         AGO   .NXTCS                                                           
.EXIT    MEND                                                                   
         TITLE 'DSECTS'                                                         
         DCBD  DEVD=DA,DSORG=PS                                                 
DCB      EQU   IHADCB,,C'X'                                                     
         EJECT                                                                  
         CVT   DSECT=YES                                                        
         EJECT                                                                  
USERCVT  RECORD 'USERCVT'                                                       
         EJECT                                                                  
PATHD    RECORD 'PATH'                                                          
         EJECT                                                                  
         IKJTCB                                                                 
         EJECT                                                                  
RB       EQU   RBSECT                                                           
         IKJRB                                                                  
         EJECT                                                                  
CDE      EQU   CDENTRY                                                          
         IHACDE                                                                 
         EJECT                                                                  
         IHASRB                                                                 
         EJECT                                                                  
         IECDIOSB                                                               
IOSBSIZE EQU   IOSEND-IOSB                                                      
         EJECT                                                                  
         IEFZB4D0 ,                Dynalloc (svc99) mapping                     
         IEFZB4D2 ,                Dynalloc (svc99) mapping                     
         EJECT                                                                  
         IHASDWA                                                                
         EJECT                                                                  
         IHAEPIE                                                                
         EJECT                                                                  
         POP   PRINT                                                            
*                                                                               
CVDSECT  DSECT                                                                  
         COPY  CV                                                               
         EJECT                                                                  
         COPY  TQE                                                              
         EJECT                                                                  
         COPY  SUB                                                              
         EJECT                                                                  
FEB      RECORD BEGIN                                                           
         COPY  FEB                                                              
         END                                                                    
         EJECT                                                                  
PIB      RECORD BEGIN                                                           
         COPY  PIB                                                              
         END                                                                    
         EJECT                                                                  
SCB      RECORD BEGIN                                                           
         COPY  SCB                                                              
         END                                                                    
         EJECT                                                                  
SEGCB    RECORD 'SEGCB'                                                         
*                                                                               
SEGCC    EQU   SEGCBUSR+3,1,C'C'   New cc char to use                           
         EJECT                                                                  
         COPY  STKRCD                                                           
         EJECT                                                                  
SYMBOL   RECORD BEGIN              Map of symbol entry                          
SYMFLGS  FLAG  ,                   Flags                                        
         FLAG  (SYMFEND,X'FF',EQ)  - End of table                               
         FLAG  SYMFCSCT            - Symbol is csect                            
         DS    X                   Reserved                                     
SYMLEN   DS    H                   Length of section                            
SYMLOC   DS    A                   Symbol address                               
SYMNAME  DS    CL8                 Symbol name                                  
*                                                                               
SYMNEXT  EQU   *                                                                
         END                                                                    
         SPACE 2                                                                
LOC      RECORD BEGIN                                                           
LOCADDR  DS    F                   Address                                      
LOCCSECT DS    CL8                 Name of closest csect (or blanks)            
LOCSYM   DS    CL8                 Name of closest non-csect                    
LOCCSOFS DS    H                   Offset from csect                            
LOCSYOFS DS    H                   Offset from symbol                           
         END                                                                    
         TITLE 'Initialization'                                                 
MILMUD   CSECT                                                                  
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  MUDINIT -- Routine to initialize dump formatting information and             
*    set ESTAE exit.  Called from initialization in MAIN.                       
*                                                                               
MUDINIT  XPROC                                                                  
*-                                                                              
*-  If no SYSPRINT ddcard exists then we will dynamically allocate              
*-  a SYSPRINT ddcard with SYSOUT=$ and FREE=CLOSE to spinoff                   
*-  failsoft dumps.                                                             
*-                                                                              
         DEVTYPE =CL8'SYSPRINT',@R13,DEVTAB  does ddcard exist?                 
         IF    (R15,NZ),'SET CVFSPIN'  nope, set for spinoff                    
*-                                                                              
*-       Set ESTAE exit to recover from errors and do dump                      
*-         formatting.                                                          
*-                                                                              
         IF    ^CVFNSTAE,BEGIN                                                  
         ESTAE ESTAE,PURGE=NONE,ASYNCH=YES,TERM=YES                             
         END                                                                    
*-                                                                              
*-       Set up the symbol table so we have ascending addresses.                
*-                                                                              
         LT    R6,=A(SYMBOLS)      Addr of symbol table                         
         IF    Z,EXIT                                                           
         LOOP  BEGIN                                                            
         CLEAR R4                  Flag: data is sorted                         
         LR    R5,R6               Copy symbol table ptr                        
         WITH  (SYMBOL,R5)                                                      
         LOOP  BEGIN                                                            
         IF    (SYMLOC,GT,.SYMNEXT+(SYMLOC-SYMBOL)),BEGIN                       
         FLIP  (SYMBOL,SYMNEXT)    Interchange table entries                    
         LA    R4,1                Set data not yet sorted                      
         END                                                                    
         LA    R5,SYMNEXT          Next entry                                   
         UNTIL SYMFEND,END                                                      
         UNTIL (R4,Z),END                                                       
         PEND                                                                   
*                                                                               
         QLTORG                                                                 
         TITLE 'ESTAE Exit'                                                     
*box                                                                            
*                                                                               
*  ESTAE exit                                                                   
*                                                                               
ESTAE    WITH  (ESTAE,R15),BEGIN                                                
         IF    (R0,EQ,12),'CLEAR R15; BR R14'  no core, keep abending           
         END                                                                    
*                                                                               
         BASE                                                                   
         L     CVR,=V(CV)                                                       
         LR    R6,R1               SDWA ptr                                     
         USING SDWA,R6                                                          
         ST    R14,SAVERA          Save return addr                             
*                                                                               
         STKINIT STAESTK           STAE stack                                   
*                                                                               
         SET   CVFABEND            Abending                                     
*                                                                               
         TTIMER CANCEL                                                          
*                                                                               
         MODESET KEY=NZERO,MODE=SUP                                             
*                                                                               
         IF    ^SDWACMPF.SDWAREQ,BEGIN  No dump requested...                    
         L     R15,SDWAABCC        Abend completion code                        
         N     R15,=A(X'FFF000')   Only keep sys comp code                      
         IF    (R15,EQ,=A(X'122000')),EXIT  Abend with dump anyway              
         B     STAETERM            No dump needed -- terminate                  
         END                                                                    
*                                                                               
         MODESET MODE=PROB         *********                                    
         LA    R1,SDWA                                                          
         ACALL FMTDUMP             Formatted dump                               
         MODESET MODE=SUP          ********                                     
*                                                                               
         IF    SDWAERRD.SDWACLUP,STAETERM  Can't retry                          
         IF    CVFNORET,STAETERM   No retries                                   
*                                                                               
         IF    ('LT R1,CVCURFRSCB',NZ),BEGIN  Cleanup bad SCBPIBP...            
         WITH  (SCB,R1)                                                         
         IF    (SCB,NE,'SCB'),EXIT  Bad SCB ptr, scram                          
         CLEAR SCBPIBP             Reset PIB ptr                                
         CLEAR CVCURFRSCB          Reset                                        
         B     STAEOK              It's OK                                      
         END                                                                    
*                                                                               
         IF    ('LT R1,CVCURCMD',NZ),BEGIN  Try session recovery...             
         VCALL MCOMFAIL            Try command processor recovery               
         BZ    STAEOK              It's OK                                      
         END                                                                    
*                                                                               
         IF    ('LT R1,CVCURSCB',NZ),BEGIN  Try session recovery...             
         WITH  (SCB,R1)                                                         
         IF    (SCB,NE,'SCB'),EXIT                                              
         CLEAR CVCURSCB                                                         
         VCALL SESSERR             Attempt to recover                           
         BZ    STAEOK              It's OK mom                                  
         END                                                                    
*                                                                               
         IF    ('LT R10,CVCURSUB',NZ),BEGIN  Try subsys recovery...             
         WITH  (SUB,R10)                                                        
         IF    (SUB,NE,'SUB'),EXIT                                              
         CLEAR CVCURSUB                                                         
         LA    R1,SUB                                                           
         VCALL SUBERR                                                           
         BZ    STAEOK              It's OK                                      
         END                                                                    
*                                                                               
         IF    ('LT R10,CVCURFEB',NZ),BEGIN  try fe recovery...                 
         WITH  (FEB,R10)                                                        
         IF    (FEB,NE,'FEB'),EXIT                                              
         CLEAR CVCURFEB                                                         
         LA    R1,FEB                                                           
         LC    RAR,FEBTYPE                                                      
         IF    (RAR,GT,FEBTMAX),'CLEAR RAR'                                     
         SLL   RAR,2                                                            
         LT    RAR,ERRFE(RAR)      Appropriate routine                          
         IF    Z,EXIT                                                           
         BALR  RAR,RAR                                                          
         BZ    STAEOK                                                           
         END                                                                    
         B     STAETERM            Shutdown MILTEN                              
*                                                                               
STAEOK   MODESET KEY=ZERO          ********                                     
         IF    CVFDUMP,BEGIN       We want a DUMP...                            
         LA    R1,SDWA             Needed for SETRP                             
         SETRP RC=4,RETADDR=STAERTRY,FRESDWA=YES,DUMP=YES                       
         END                                                                    
*                                                                               
         ELSE  BEGIN               No SYSUDUMP needed...                        
         LA    R1,SDWA             Needed for SETRP                             
         SETRP RC=4,RETADDR=STAERTRY,FRESDWA=YES,DUMP=NO                        
         END                                                                    
         MODESET KEY=NZERO         ********                                     
         L     R14,SAVERA                                                       
         BR    R14                                                              
*                                                                               
         DROP  SDWA,BR                                                          
         EJECT                                                                  
*box                                                                            
*                                                                               
*  STAETERM -- ESTAE termination.  Entered to shutdown MILTEN by                
*    telling MVS to continue abending.                                          
*                                                                               
STAETERM BASE                                                                   
         L     CVR,=V(CV)                                                       
*                                                                               
         STKINIT L:CVSTKP,4096     Stack                                        
*                                                                               
         MODESET MODE=SUP          Return to sup. state                         
         VCALL KEYNZERO            Our key (just in case)                       
*                                                                               
         CLEAR R0                                                               
         ACALL SHUTDOWN            Normal termination, sort of                  
         DC    H'0'                (no return)                                  
*                                                                               
         DROP  BR                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*  STAERTRY -- ESTAE retry routine.  Entered after the ESTAE                    
*    exit routine has taken a dump and has decided to recover.                  
*                                                                               
STAERTRY BASE                                                                   
         L     CVR,=V(CV)                                                       
*                                                                               
         STKINIT L:CVSTKP,4096     Stack                                        
*                                                                               
         CLEAR CVFABEND            Reset abending bit                           
         IF    (CVRETCOD,LT,4),'MVC CVRETCOD,=F"4"'  Set rc                     
         INCR  R0,CVMNFAIL         Count the failsoft                           
         CLEAR CVCUR                                                            
*                                                                               
         MODESET MODE=SUP          Return to sup. state                         
         VCALL KEYNZERO            Our key (just in case)                       
*                                                                               
         VCALL DOM                 Delete action messages                       
         SEGCLR CVWSG                                                           
         SEGWR 'Failsoft recovery successful.'                                  
*                                                                               
         CLEAR CVFTIMER            Tell dispatcher to set timer                 
         MVI   CVECB,X'40'                                                      
         VCALL DISPATCH            Come on, big fella (h.b.--1942)              
         DC    H'0'                (no return)                                  
*                                                                               
         DROP  BR                                                               
         TITLE 'Shutdown'                                                       
*box                                                                            
*                                                                               
*  SHUTDOWN -- MILTEN termination routine.                                      
*                                                                               
*    On entry:                                                                  
*      R0 - 0: normal, 4: error                                                 
*                                                                               
         ENTRY SHUTDOWN                                                         
SHUTDOWN BASE                                                                   
         LR    R7,R0               Save parm                                    
         STKINIT L:CVSTKP,4096     Stack                                        
*                                                                               
         IF    ^CVFTEST,BEGIN      Production version...                        
         L     R6,CVTPTR                                                        
         WITH  (CVT,R6)                                                         
         LT    R5,CVTUSER          Scip cvt ptr                                 
         IF    Z,EXIT              None, scram                                  
         WITH  (USERCVT,R5)                                                     
         IF    (USERCVT,NE,'SCIP'),EXIT  not ours, scram                        
         MODESET KEY=ZERO          ********                                     
         CLEAR USEHSPFL.HSPFMIL    MILTEN is down                               
         IF    (CVMJOBNM,EQ,USEMILNM),'CLEAR USEMILNM'  Zero milname            
         CLEAR USEMILCT            No sessions active now                       
         CLEAR USEMASCB,USEMGINP,USEMSITP,USEMNSIN  Reset                       
         MODESET KEY=NZERO         ********                                     
         END                                                                    
*                                                                               
         VCALL SINTFREE            Free the CSA session info                    
*                                                                               
         VCALL SUBDIE              Shutdown subsystems                          
*                                                                               
         LA    R10,CVFEBQH-(FEBLINK-FEB)  dummy first link                      
         LOOP  BEGIN                                                            
         WITH  (FEB,R10)                                                        
         WHILE ('LT R10,FEBLINK',NZ)                                            
         LR    R0,R7               Parm                                         
         LA    R1,FEB                                                           
         LC    RAR,FEBTYPE                                                      
         IF    (RAR,GT,FEBTMAX),'CLEAR RAR'                                     
         SLL   RAR,2                                                            
         LT    RAR,DIEFE(RAR)      Appropriate routine                          
         IF    NZ,'BALR RAR,RAR'                                                
         END                                                                    
*                                                                               
         SET   CVFSTOP             no new I/O's allowed now                     
*                                                                               
         IF    CVFABEND,BEGIN      Abending...                                  
         L     R14,SAVERA          ESTAE return addr                            
         BR    R14                 Continue abending                            
         END                                                                    
*                                                                               
         SEGCLR CVWSG              Init WTO seg buffer                          
         SETMSG 'Ending normally.'                                              
         IF    (R7,NZ),'SETMSG "Abending!"'                                     
         SEGWR (R1),(R0)                                                        
*                                                                               
         IF    (CVMRTTCB,NZ),'DETACH CVMRTTCB; CLEAR CVMRTTCB'                  
         IF    (CVWTOTCB,NZ),'DETACH CVWTOTCB; CLEAR CVWTOTCB'                  
*                                                                               
         IF    (R7,NZ),'ABEND 1,DUMP'  out with a bang                          
         L     R15,CVRETCOD        Return code                                  
         L     R14,CVOSRA                                                       
         BR    RAR                                                              
*                                                                               
         DROP  BR                                                               
*                                                                               
SAVERA   DS    A                   Saved return address                         
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
ERRFE    DC    A(0)                                                             
         DC    A(0)                FEBTCONS                                     
         DC    A(0)                                                             
         DC    A(0)                                                             
         DC    A(0)                                                             
         DC    V(VIRTERR)          FEBTVIRT                                     
         DC    A(0)                                                             
         DC    V(ELFERR)           FEBTELF                                      
         DC    A(0)                                                             
         DC    A(0)                                                             
ERRFEMX  EQU   (*-ERRFE-4)/4,,C'N'                                              
         DS    0S(ERRFEMX-FEBTMAX,FEBTMAX-ERRFEMX)                              
         SPACE 2                                                                
DIEFE    DC    A(0)                                                             
         DC    V(CONSDIE)          FEBTCONS                                     
         DC    A(0)                                                             
         DC    A(0)                                                             
         DC    A(0)                                                             
         DC    V(VIRTDIE)          FEBTVIRT                                     
         DC    A(0)                                                             
         DC    V(ELFDIE)           FEBTELF                                      
         DC    A(0)                                                             
         DC    A(0)                                                             
DIEFEMX  EQU   (*-DIEFE-4)/4,,C'N'                                              
         DS    0S(DIEFEMX-FEBTMAX,FEBTMAX-DIEFEMX)                              
         TITLE 'Dump Formatter'                                                 
FMTWA    RECORD BEGIN                                                           
FMTSDWA  DS    A                   SDWA ptr                                     
         END                                                                    
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  FMTDUMP -- Routine to format a failsoft dump.                                
*                                                                               
*    On entry:                                                                  
*      R1 - SDWA ptr                                                            
*                                                                               
FMTDUMP  PROC  FMTWA                                                            
         B     FMTBASE                                                          
*                                                                               
         QLTORG                                                                 
*                                                                               
FMTBASE  LABEL                                                                  
         LA    BRR,FMTBASE+4000                                                 
         WITH  (FMTBASE+4000,BRR)                                               
         LA    BRRR,FMTBASE+8000                                                
         WITH  (FMTBASE+8000,BRRR)                                              
*                                                                               
         LR    R6,R1               SDWA ptr                                     
         WITH  (SDWA,R6),BEGIN                                                  
         ST    R6,FMTSDWA          Save SDWA ptr                                
*                                                                               
         L     SEGCBR,=A(PRTSG)                                                 
         USING SEGCB                                                            
         SEGDEF (SEGCBR)                                                        
         MVC   SEGCBMAXF,=F'79'    Good for CRTs                                
*                                                                               
         ACALL FREESYSP            Free any previous SYSPRINT                   
         ACALL ALLOSYSP            Allocate a new SYSPRINT                      
         L     R2,=A(SYSPRINT)                                                  
         WITH  (DCB,R2),BEGIN                                                   
         MVC   DCBLRECL,=H'137'    Set for max.                                 
         OPEN  (SYSPRINT,(OUTPUT))                                              
         IF    ^DCBOFLGS.DCBOFOPN,EXIT,FMTDUMP                                  
         END                                                                    
*                                                                               
         MVI   SEGCC,C'1'                                                       
         SEGB  'Dump of'                                                        
         SEGTB CVMJOBNM                                                         
         VCALL LOCALTOD                                                         
         PUSH  30,PTR=R15                                                       
         VCALL FMTCLCK             Current time & date                          
         SEGWR (R1),(R0)                                                        
         POP   30                                                               
*                                                                               
         MVI   SEGCC,C'0'                                                       
         IF    (CVMVERS,NZ),'SEGT CVMVERS'                                      
         SEGWR                                                                  
         MVI   SEGCC,C'0'                                                       
*                                                                               
         QSNAP 'Milten failure buffer:',MODE=WTO !!!                            
         QSNAP CVNIZSAV,40         !!!                                          
         SEGWR 'Milten failure buffer:'  !!!                                    
         SEGCORE CVNIZSAV,40  !!!!                                              
         MVI   SEGCC,C'0'  !!!!                                                 
*                                                                               
         PUSH  SEGCBR                                                           
         LA    SEGCBR,CVWSG        WTO seg buffer                               
         MVC   CVWSGUSR,=X'80000000'  action message                            
         L     R2,SDWANXT1                                                      
         LA    R2,0(,R2)                                                        
         LC    R0,SDWAILC1                                                      
         SR    R2,R0                                                            
         L     R1,SDWAABCC                                                      
         LR    R15,R2                                                           
         ACALL DISPINST            Display code/instruction                     
         SEGWR                                                                  
         POP   SEGCBR                                                           
*                                                                               
         L     R1,SDWAABCC                                                      
         LR    R15,R2                                                           
         ACALL DISPINST            Display code/instruction                     
*                                                                               
         VCALL LOCALTOD            Clock at failsoft                            
         ST    R0,CVMFCLCK                                                      
         MVC   CVMFINFO,CVBLANKS                                                
         L     R1,SEGCBLOC                                                      
         L     R15,SEGCBLENF                                                    
         CEIL  R15,L'CVMFINFO                                                   
         MOVE  R15,CVMFINFO,@R1    Save failsoft msg                            
*                                                                               
         SEGWR                                                                  
         SEGWR 'Registers:'                                                     
         SEG   CVBLANKS,8                                                       
         LH    R0,=H'-1'           Print all regs                               
         LA    R1,SDWAGRSV         R0-R15 regs                                  
         LCALL DISPREGS                                                         
*                                                                               
         SEGWR                                                                  
         MVI   SEGCC,C'0'                                                       
         IF    (SDWANXT1,NE,SDWANXT2),BEGIN                                     
         SEG   'LAST RB PSW AT '                                                
         L     R15,SDWANXT2                                                     
         LA    R15,0(,R15)         RB PSW interrupt address                     
         LC    R0,SDWAILC2                                                      
         SR    R15,R0                                                           
         ACALL DISPPSW                                                          
         SEGWR                                                                  
         SEG   'RB REGS:  '                                                     
         LH    R0,=H'-1'                                                        
         LA    R1,SDWASRSV                                                      
         LCALL DISPREGS                                                         
         END                                                                    
         END                                                                    
*                                                                               
         MVI   SEGCC,C'0'                                                       
         SEGWR 'Active RB''s:'                                                  
         L     R5,CVTPTR                                                        
         WITH  (CVT,R5),'L R5,CVTTCBP; L R5,4(,R5)'                             
         USING TCB,R5              Our TCB                                      
         L     R4,TCBRBP           First RB                                     
         WITH  (RB,R4),'L R4,RBLINK'  skip over stae RB                         
         WHILE (R4,NE,R5),BEGIN                                                 
         WITH  (RB,R4)                                                          
         SEGHX (R4),8                                                           
         SEGB                                                                   
         SETMSG 'PRB '                                                          
         IF    RBSTAB1.RBFTIRB,'SETMSG "IRB "'                                  
         IF    RBSTAB1.RBFTSVRB,'SETMSG "SVRB"'                                 
         SEG   (R1),(R0)                                                        
         SEG   ' PSW-IA AT '                                                    
         SEGLOC RBOPSW+4                                                        
         SEG   ', '                                                             
         IF    RBSTAB1.RBFTSVRB,BEGIN  get svc no...                            
         SEG   'SVC '                                                           
         L     R15,RBLINK          Previous RB                                  
         SH    R15,=H'2'           RB prefix                                    
         SEGDC LH:@R15             Rbintcod is the svc no                       
         SEG   ', '                                                             
         END                                                                    
         IF    (RBSTAB1.RBFTSVRB,OR,^RBSTAB1.RBFTIRB),BEGIN                     
         IF    ('L3 R2,RBCDE1',Z),EXIT                                          
         WITH  (CDE,R2)                                                         
         IF    (CDNAME,EQ,=XL8'00'),EXIT  no cdename                            
         SEGT  CDNAME                                                           
         SEG   ', ENTRY AT '                                                    
         SEGLOC L3:CDENTPT+1       Entry point                                  
         END                                                                    
         SEGWR                                                                  
         SEG   '       Regs:  '                                                 
         LH    R0,=H'-1'           Register print mask--all regs                
         LA    R1,RBGRS0           R0-r15                                       
         LCALL DISPREGS                                                         
         SEGWR                                                                  
         L     R4,RBLINK           Next RB down                                 
         LA    R4,0(,R4)           Drop high byte                               
         END                                                                    
         DROP  TCB                                                              
*                                                                               
         MVI   SEGCC,C'0'                                                       
         IF    (CVRCLOC,Z),BEGIN                                                
         SEGWR '****  No Reserve Core -- Low In Memory  ****'                   
         MVI   SEGCC,C'0'                                                       
         END                                                                    
*                                                                               
         SEGDC LH:CVMNFAIL                                                      
         SEGB  ' FAILSOFTS,'                                                    
         MVI   SEGCC,C'-'                                                       
*                                                                               
         SEG   'Stack'                                                          
         SETMSG L:CVSTKP,LH:=H'4096'                                            
         ACALL DISPSTK                                                          
*                                                                               
         IF    (CVCUR,NZ),BEGIN    Current stuff...                             
         MVI   SEGCC,C'-'                                                       
         IF    ('LT R6,CVCURFEB',NZ),BEGIN  Current front-end...                
         WITH  (FEB,R6)                                                         
         SEGHX (R6),8                                                           
         IF    (FEB,NE,'FEB'),'SEG "  **INVALID**"'                             
         SEGB  '  Current Front-end:'                                           
         SEGTB FEBNAME                                                          
         SEGWR                                                                  
         MVI   SEGCC,C'0'                                                       
         END                                                                    
         IF    ('LT R6,CVCURPIB',NZ),BEGIN                                      
         WITH  (PIB,R6)                                                         
         SEGHX (R6),8                                                           
         IF    (PIB,NE,'PIB'),'SEG "  **INVALID**"'                             
         SEGB  '  Current port:'                                                
         SEGTB PIBNAME                                                          
         SEG   '('                                                              
         SEGDC LH:PIBNO                                                         
         SEGB  ')'                                                              
         IF    ('LT R2,PIBSCBP',NZ),'SEGB "SESSION:"; SEGHX (R2),6'             
         SEGWR                                                                  
         MVI   SEGCC,C'0'                                                       
         END                                                                    
         IF    ('LT R6,CVCURSCB',NZ),BEGIN                                      
         WITH  (SCB,R6)                                                         
         SEGHX (R6),8                                                           
         IF    (SCB,NE,'SCB'),'SEG "  **INVALID**"'                             
         SEG   '  CURRENT SESSION:'                                             
         IF    (SCBACCT,Z),'SEGB "------"'                                      
         ELSE  BEGIN                                                            
         SEG   SCBGRP                                                           
         SEG   '.'                                                              
         SEG   SCBUSER                                                          
         IF    (SCBANO,NZ),'SEG "#"; SEGDC L2:SCBANO'                           
         IF    (SCBNAME,NZ),'SEG X"407F"; SEGT SCBNAME; SEG X"7F"'              
         SEGB                                                                   
         END                                                                    
         SEGDC LH:SCBNO                                                         
         SEGB  ' NUMBER,'                                                       
         SEGDC L:SCBID                                                          
         SEGB  ' ID'                                                            
         SEGWR                                                                  
         MVI   SEGCC,C'0'                                                       
         END                                                                    
         IF    ('LT R6,CVCURSUB',NZ),BEGIN                                      
         WITH  (SUB,R6)                                                         
         SEGHX (R6),8                                                           
         IF    (SUB,NE,'SUB'),'SEG "  **INVALID**"'                             
         SEGB  'CURRENT SUBSYSTEM:'                                             
         SEGTB SUBNAME                                                          
         IF    (SUBSFLAG,NZ),BEGIN                                              
         SEGB  'POST:'                                                          
         IF    SUBSFLAG.PATHFOPN,'SEGB "OPENED"'                                
         IF    SUBSFLAG.PATHFNI,'SEGB "NEW-INFO"'                               
         IF    SUBSFLAG.PATHFCLS,'SEGB "CLOSING"'                               
         END                                                                    
         END                                                                    
         END                                                                    
         EJECT                                                                  
         MVI   SEGCC,C'-'                                                       
         SEGB  'Started at'                                                     
         VCALL LOCALTOD            Get current local time                       
         LR    R2,R0                                                            
         L     R0,CVMCLCK                                                       
         CLEAR R1,R3                                                            
         PUSH  30,PTR=R15                                                       
         VCALL FMTRCLCK            "hh:mm" or "hh:mm mm/dd/yy"                  
         SEGWR (R1),(R0)                                                        
         POP   30                                                               
*                                                                               
         SEGDC LH:CVMCRSES                                                      
         SEG   ' users logged on'                                               
         IF    (CVMMXSES,GT,CVMCRSES),BEGIN                                     
         SEG   ' ('                                                             
         SEGDC LH:CVMMXSES                                                      
         SEGB  ' MAX AT'                                                        
         L     R0,CVMCKSES                                                      
         CLEAR R1,R2,R3            Compare to current date                      
         PUSH  30,PTR=R15                                                       
         VCALL FMTRCLCK            "hh:mm" or "hh:mm mm/dd/yy"                  
         SEG   (R1),(R0)                                                        
         POP   30                                                               
         SEG   ')'                                                              
         END                                                                    
         SEGB  ','                                                              
         SEGDC LH:CVMCRVIR                                                      
         SEGB  ' VIRTUAL JOBS,'                                                 
         SEGDC L:CVMTLSES                                                       
         SEGB  ' TOTAL'                                                         
         IF    CVMFSTOP,'SEG " (STOPPING)"'                                     
         SEGWR                                                                  
*                                                                               
         SEGDC L:CVMNIO                                                         
         SEGB  ' I/O''S'                                                        
         EJECT                                                                  
*-                                                                              
*-       Display memory usage.                                                  
*-                                                                              
         MVI   SEGCC,C'1'                                                       
         LA    R15,SEGCB                                                        
         VCALL COREFMT,*                                                        
         SPACE 2                                                                
*-                                                                              
*-       Display symbol table.                                                  
*-                                                                              
         MVI   SEGCC,C'1'                                                       
         SEGWR 'Symbol Table:'                                                  
*                                                                               
         MVI   SEGCC,C'0'                                                       
         L     R6,=A(SYMBOLS)      Start of symbol table                        
         LOOP  BEGIN                                                            
         WITH  (SYMBOL,R6)                                                      
         UNTIL SYMFEND                                                          
         SEGHX L:SYMLOC,8                                                       
         SEG   CVBLANKS,2                                                       
         SEGT  SYMNAME                                                          
         IF    SYMFCSCT,BEGIN      Csects have idents...                        
         SEGCOL 14                                                              
         IF    ('LT R15,SYMLOC',Z),EXIT                                         
         IF    ((SYMNAME,EQ,'MAIN'),AND,(@R15,EQ,'CV')),'LA R15,@R15+4'         
         IF    ((@R15,LT,X'13'),OR,(@R15,GT,X'18')),EXIT  bad len byte          
         IF    (@R15+1.X'C0',^ONES),EXIT  not alpha                             
         SEGT  @R15+1,LC:@R15                                                   
         END                                                                    
         SEGWR                                                                  
         LA    R6,SYMNEXT                                                       
         END                                                                    
         EJECT                                                                  
         MVI   SEGCC,C'1'                                                       
         SEG   'SUBSYSTEMS ('                                                   
         SEGT  CVDEFSYS                                                         
         IF    (CVDEFSUB,NZ),'SEG "/"; SEGHX L:CVDEFSUB,6'                      
         SEGWR ' default):'                                                     
*                                                                               
         LA    R6,CVSUBQH-(SUBLINK-SUB)                                         
         USING SUB,R6                                                           
         WHILE ('LT R6,SUBLINK',NZ),BEGIN                                       
         IF    (SUBNAME,Z),NEXT                                                 
         MVI   SEGCC,C'0'                                                       
         SEGHX (R6),8                                                           
         SEG   CVBLANKS,2                                                       
         SEGTB SUBNAME                                                          
         IF    (SUB,NE,'SUB'),'SEGB "**INVALID**"'                              
         IF    (SUBSFLAG,NZ),BEGIN                                              
         SEGB  'POST:'                                                          
         IF    SUBSFLAG.PATHFOPN,'SEGB "OPENED"'                                
         IF    SUBSFLAG.PATHFNI,'SEGB "NEW-INFO"'                               
         IF    SUBSFLAG.PATHFCLS,'SEGB "CLOSING"'                               
         END                                                                    
         SEGWR                                                                  
         SEGCORE SUB                                                            
         END                                                                    
         DROP  SUB                                                              
*                                                                               
         LA    R6,CVFEBQH-(FEBLINK-FEB)                                         
         LOOP  BEGIN                                                            
         WITH  (FEB,R6)                                                         
         WHILE ('LT R6,FEBLINK',NZ)                                             
         MVI   SEGCC,C'1'                                                       
         LA    R1,FEB                                                           
         LA    R15,SEGCB                                                        
         LC    RAR,FEBTYPE                                                      
         IF    (RAR,GT,FEBTMAX),'CLEAR RAR'                                     
         SLL   RAR,2                                                            
         LT    RAR,FMTFE(RAR)      Appropriate routine                          
         IF    NZ,'BALR RAR,RAR'                                                
         ELSE  BEGIN                                                            
         SEGHX (R6),8                                                           
         SEG   CVBLANKS,2                                                       
         SEGTB FEBNAME                                                          
         SEG   'TYPE='                                                          
         SEGHX IC:FEBTYPE,2                                                     
         SEGWR                                                                  
         END                                                                    
         END                                                                    
*                                                                               
         MVI   SEGCC,C'1'                                                       
         SEGWR 'Sessions:'                                                      
         MVI   SEGCC,C'0'                                                       
         LA    R6,CVSCBQH-(SCBLINK-SCB)                                         
         USING SCB,R6                                                           
         WHILE ('LT R6,SCBLINK',NZ),BEGIN                                       
         SEGHX (R6),8                                                           
         SEG   CVBLANKS,2                                                       
         IF    (SCBACCT,Z),'SEGB "------"'                                      
         ELSE  BEGIN                                                            
         SEG   SCBGRP                                                           
         SEG   '.'                                                              
         SEG   SCBUSER                                                          
         IF    (SCBANO,NZ),'SEG "#"; SEGDC L2:SCBANO'                           
         IF    (SCBNAME,NZ),'SEG X"407F"; SEGT SCBNAME; SEG X"7F"'              
         SEGB                                                                   
         END                                                                    
         IF    (SCB,NE,'SCB'),'SEGB "**INVALID**"'                              
         SEGWR                                                                  
         END                                                                    
         DROP  SCB                                                              
         EJECT                                                                  
*                                                                               
*  format out ECB list...                                                       
         MVI   SEGCC,C'1'                                                       
         SEGHX LA:CVECBLIS,8                                                    
         SEGWR '  ECB list...'                                                  
*                                                                               
         LA    R3,CVECBLIS-4                                                    
         LOOP  BEGIN                                                            
         LA    R3,@R3+4            First/next ecb                               
         L     R2,@R3              Ecb ptr                                      
         SEGHX (R2),8                                                           
         SEG   '  --> ECB='                                                     
         SEGHX L:@R2,8                                                          
         SEGWR                                                                  
         UNTIL @R3.X'80',END                                                    
         EJECT                                                                  
         IF    (CVTQEQH,NZ),BEGIN  Timer queue...                               
         MVI   SEGCC,C'1'                                                       
         SEGWR 'Timer Queue:'                                                   
         MVI   SEGCC,C'0'                                                       
*                                                                               
         LA    R6,CVTQEQH-(TQELINK-TQE)  dummy first entry                      
         LOOP  BEGIN                                                            
         WITH  (TQE,R6)                                                         
         WHILE ('LT R6,TQELINK',NZ)                                             
         SEGHX (R6),8                                                           
         SEG   CVBLANKS,2                                                       
         LM    R0,R1,TQECLCK       Expiration clock                             
         PUSH  11,PTR=R15                                                       
         VCALL FMTTIME                                                          
         SEGB  (R1),(R0)           Hh:mm:ss.hh                                  
         POP   11                                                               
         SEG   'ROUTINE='                                                       
         SEGLOC L:TQERTN                                                        
         SEG   ', PARM='                                                        
         SEGLOC L:TQEPARM                                                       
         L     R1,TQEPARM                                                       
         IF    @R1.X'40','SEG "/"; SEGT L:TQEPARM,4'                            
         SEGB                                                                   
         IF    (TQE,NE,'TQE'),'SEGB "**INVALID**"'                              
         SEGWR                                                                  
         END                                                                    
         END                                                                    
         EJECT                                                                  
         IF    (CVWTONO,NZ),BEGIN  WTO queue...                                 
         MVI   SEGCC,C'1'                                                       
         SEG   'WTO queue ('                                                    
         SEGDC L:CVWTONO                                                        
         SEGWR ' entries):'                                                     
         MVI   SEGCC,C'0'                                                       
         LA    R6,CVWTOQH                                                       
         WHILE ('LT R6,@R6',NZ),BEGIN                                           
         SEG   CVBLANKS,2                                                       
         LH    R0,@R6+8                                                         
         SH    R0,=H'4'                                                         
         SEGWR @R6+12,(R0)                                                      
         END                                                                    
         END                                                                    
         EJECT                                                                  
*  Dump remaining stuff (unformatted), just in case it's needed...              
*                                                                               
         MVC   SEGCBMAXF,=A(L'PRTSGBUF)                                         
*                                                                               
         MVI   SEGCC,C'1'                                                       
         SEGWR 'SDWA:'                                                          
         MVI   SEGCC,C'0'                                                       
         SEGCORE L:FMTSDWA,SDWALEN,,NOADDR                                      
*                                                                               
         MVI   SEGCC,C'1'                                                       
         SEGWR 'CV:'                                                            
         MVI   SEGCC,C'0'                                                       
         SEGCORE CV,,,NOADDR                                                    
*                                                                               
         MVI   SEGCC,C'1'                                                       
         SEGWR 'PDB Buffer:'                                                    
         SEGCORE L:CVPDBP,LH:=AL2(CVBUFLEN),,NOADDR                             
*                                                                               
         MVI   SEGCC,C'1'                                                       
         SEGWR 'Work Buffer:'                                                   
         SEGCORE L:CVWKBUFP,LH:=AL2(CVBUFLEN),,NOADDR                           
*                                                                               
         MVI   SEGCC,C'1'                                                       
         SEGWR 'Dump Of Sessions:'                                              
         LA    R6,CVSCBQH-(SCBLINK-SCB)  dummy first entry                      
         LOOP  BEGIN                                                            
         WITH  (SCB,R6)                                                         
         WHILE ('LT R6,SCBLINK',NZ)                                             
         MVI   SEGCC,C'0'                                                       
         SEGCORE SCB,,,NOADDR                                                   
         END                                                                    
*                                                                               
         MVI   SEGCC,C'1'                                                       
         SEGWR 'Dump of Stack:'                                                 
         SEGCORE L:CVSTKP,LH:=H'4096'                                           
*                                                                               
         MVI   SEGCC,C'-'                                                       
         SEGWR 'Ciao!'                                                          
*                                                                               
         L     R2,=A(SYSPRINT)                                                  
         IF    @R2+(DCBOFLGS-DCB).DCBOFOPN,BEGIN  if open...                    
         CLOSE (SYSPRINT)                                                       
         FREEPOOL (R2)                                                          
         END                                                                    
         ACALL FREESYSP            Free SYSPRINT now                            
         PEND                                                                   
*                                                                               
FMTFE    DC    A(0)                                                             
         DC    V(CONSFMT)          FEBTCONS                                     
*         DC    V(ASYNFMT)          FEBTASYN                                    
         DC    A(0)                                                             
*         DC    V(PDPFMT)           FEBTPDP                                     
         DC    A(0)                                                             
*         DC    V(VTAMFMT)          FEBTVTAM                                    
         DC    A(0)                                                             
         DC    V(VIRTFMT)          FEBTVIRT                                     
*         DC    V(NSCFMT)           FEBTNSC                                     
         DC    A(0)                                                             
         DC    V(ELFFMT)           FEBTELF                                      
*         DC    V(ALFFMT)           FEBTALF                                     
         DC    A(0)                                                             
*         DC    V(ECUFMT)           FEBTECU                                     
         DC    A(0)                                                             
FMTFEMX  EQU   (*-FMTFE-4)/4,,C'N'                                              
         DS    0S(FMTFEMX-FEBTMAX,FEBTMAX-FMTFEMX)                              
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*  ABENDCD -- Routine to format abend code in R15 (in xxsssuuu fmt).            
*                                                                               
ABENDCD  PROC                                                                   
         LR    R7,R15                                                           
         LR    R6,R15                                                           
         N     R6,=A(X'FFF000')    Isolate system code                          
         IF    NZ,BEGIN            System completion code...                    
         SEG   'S'                                                              
         SRL   R6,12               Move over                                    
         SEGHX (R6),3              Abend code - shhh                            
         END                                                                    
         ELSE  BEGIN               otherwise, it's user completion...           
         SEG   'U'                                                              
         N     R7,=A(X'FFF')       Only keep user code                          
         SEGDC (R7)                Abend code - udddd                           
         END                                                                    
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  DISPINST -- Routine to seg PSW addr and abend code.                          
*                                                                               
*    On entry:                                                                  
*      R1 - abend code                                                          
*      R15- PSW addr  (already adjusted for ILC)                                
*                                                                               
DISPINST PROC                                                                   
         LR    R7,R15                                                           
         LR    R6,R1                                                            
*                                                                               
         ESPIE SET,DINSERR,(4,5)   Addressing exceptions                        
         LR    R5,R1               Save token                                   
*                                                                               
         CLC   @R7(2),@R7          May cause an interrupt                       
*                                                                               
         IF    (@R7,EQ,X'FEDC'),BEGIN  fail pseudo-instruction...               
         SEG   'FAIL'                                                           
         END                                                                    
         ELSE  BEGIN               If abend, give code...                       
DINSRES  SEGB  'ABEND'                                                          
         LR    R15,R6                                                           
         ACALL ABENDCD                                                          
         END                                                                    
*                                                                               
         SEGB  ' AT'                                                            
         LR    R15,R7                                                           
         ACALL DISPPSW             (fail text will get written)                 
         ESPIE RESET,(5)           Restore old ESPIE                            
         PEND                                                                   
*                                                                               
DINSERR  WITH  (*,R15),BEGIN       ESPIE exit...                                
         WITH  (EPIE,R1)                                                        
         MVC   EPIEADD1,=AL3(DINSRES)  Retry routine                            
         BR    R14                                                              
         END                                                                    
         EJECT                                                                  
*box                                                                            
*                                                                               
*  DISPPSW -- Routine to seg PSW addr and the instruction it                    
*    points to.                                                                 
*                                                                               
*      On entry:                                                                
*        R15 - PSW addr (lready adjusted for ILC)                               
*                                                                               
DISPPSW  PROC                                                                   
         LR    R7,R15                                                           
         SEGLOC (R7)                                                            
*                                                                               
         ESPIE SET,DPSWERR,(4,5)   Addressing exceptions                        
         LR    R6,R1               Save token                                   
*                                                                               
         CLEAR R5                                                               
         CLC   @R7(6),@R7          May cause an interrupt                       
         LR    R5,R7                                                            
         IF    (@R7,EQ,X'FEDC'),BEGIN  fail pseudo-instruction...               
         LC    R15,@R7+2           Text len                                     
         CMPR  R15,@R7+3,@R7+3     May cause interrupt                          
         LA    R5,@R7+2                                                         
         LCR   R5,R5                                                            
         END                                                                    
*                                                                               
DPSWEXIT ESPIE RESET,(6)           Restore old ESPIE                            
         IF    (R5,NZ),BEGIN       Additional info...                           
         SEGB                                                                   
*                                                                               
         LA    R15,CVWSG                                                        
         IF    (SEGCBR,NE,R15),'SEGB "--"'  non-WTO style                       
         ELSE  BEGIN               WTO style...                                 
         L     R4,CVWSGUSR         Save WTO options                             
         SEGWR                                                                  
         ST    R4,CVWSGUSR         Restore WTO options                          
         IF    (R5,POS),'LA R7,SOFTERR-2; LCR R5,R7'  give msg                  
         END                                                                    
*                                                                               
         IF    (R5,POS),BEGIN      Display instruction...                       
         SEGHX LH:@R5,4                                                         
         SEGB                                                                   
         SEGHX LH:@R5+2,4                                                       
         SEGB                                                                   
         SEGHX LH:@R5+4,4                                                       
         END                                                                    
         ELSE  BEGIN               Fail text...                                 
         SETMSG @R7+3,LC:@R7+2                                                  
         IF    (R0,Z),'SETMSG "FAIL"'                                           
         SEG   (R1),(R0)                                                        
         END                                                                    
         END                                                                    
         PEND                                                                   
*                                                                               
DPSWERR  WITH  (*,R15),BEGIN       ESPIE exit...                                
         WITH  (EPIE,R1)                                                        
         MVC   EPIEADD1,=AL3(DPSWEXIT)  Retry routine                           
         BR    R14                                                              
         END                                                                    
*                                                                               
SOFTERR  DC    AL1(L'SOFTMSG)                                                   
SOFTMSG  DC    C'SOFTWARE ERROR'                                                
         EJECT                                                                  
DSTKWA   RECORD BEGIN                                                           
DSTKFRST DS    A                   First NSP ptr                                
DSTKLAST DS    A                   Last entry processed                         
DSTKLOW  DS    A                   Lowest point in stack                        
DSTKPICA DS    A                   Saved previous PICA addr                     
DSTKREGS DS    16A                 Register area (for DISPREGS)                 
         END                                                                    
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  DISPSTK -- Routine to format and display stack.                              
*                                                                               
*    On entry:                                                                  
*      R1,R0 - stack area start, len                                            
*                                                                               
DISPSTK  PROC  DSTKWA                                                           
         CLEAR DSTKWA                                                           
         LA    R1,@R1                                                           
         ST    R1,DSTKLOW                                                       
         AR    R1,R0                                                            
         SH    R1,=AL2(L'STK)      First (oldest) entry                         
         ST    R1,DSTKFRST                                                      
*                                                                               
         MVI   SEGCC,C'-'                                                       
         SEGWR ':'                                                              
*                                                                               
         ESPIE SET,DSTKERR,(4,5)       Addressing exceptions                    
         ST    R1,DSTKPICA                                                      
*                                                                               
         L     R7,DSTKFRST                                                      
         LOOP  BEGIN                                                            
         WITH  (STK,R7)                                                         
         L     R6,STKNSP                                                        
         N     R6,=A(X'FFFFFC')                                                 
         WHILE (R6,NE,R7)                                                       
         IF    ((R6,GT,R7),OR,(R6,LT,DSTKLOW)),DSTKBAD                          
         LR    R7,R6                                                            
         END                                                                    
DSTKSET  ST    R7,DSTKLAST         Save last stack entry                        
*                                                                               
         L     R1,DSTKPICA                                                      
         ESPIE RESET,(1)                                                        
*                                                                               
         IF    (DSTKFRST,EQ,DSTKLAST),BEGIN                                     
         MVI   SEGCC,C'0'                                                       
         SEGWR 'Empty Stack'                                                    
         EXIT  DISPSTK                                                          
         END                                                                    
*                                                                               
DSTKLP   L     R7,DSTKFRST                                                      
         IF    (R7,EQ,DSTKLAST),EXIT                                            
         LOOP  BEGIN                                                            
         WITH  (STK,R7)                                                         
         L     R6,STKNSP                                                        
         N     R6,=A(X'FFFFFC')                                                 
         WHILE (R6,NE,DSTKLAST)                                                 
         LR    R7,R6                                                            
         END                                                                    
         ST    R7,DSTKLAST                                                      
*                                                                               
         SR    R7,R6                                                            
         SH    R7,=H'4'            WA LENGTH (W/O L'NSP)                        
         WITH  (STK,R6),'LC R5,STKRS; LA R6,STKWA'                              
         MVI   SEGCC,C'0'                                                       
         SEGHX (R6)                                                             
         SEG   CVBLANKS,2                                                       
         IF    (R5,Z),BEGIN        Push entry...                                
         SEG   'PUSH:  LENGTH='                                                 
         SEGDC (R7)                                                             
         IF    (R7,GT,9),'SEG " (0"; SEGHX (R7); SEG ")"'                       
         SEGWR                                                                  
         SEGCORE (R6),(R7)                                                      
         B     DSTKLP                                                           
         END                                                                    
*                                                                               
         SEG   'PROC:  RETURN='                                                 
         SH    R7,=H'4'                                                         
         LA    R3,@R6(R7)                                                       
         SEGLOC L:@R3                                                           
         SEGWR                                                                  
         LR    R4,R5                                                            
         SRL   R4,4                R4 = first saved reg                         
         N     R5,=A(X'F')         R5 = last saved reg                          
         LA    R15,@R5+1                                                        
         SR    R15,R4                                                           
         IF    ^POS,BEGIN          High-reg,low-reg...                          
         LA    R15,16+@R5+1                                                     
         SR    R15,R4                                                           
         END                                                                    
         SLL   R15,2               No. of bytes needed for regs                 
         SR    R3,R15              Registers start here                         
         SR    R7,R15              Length of extra wa                           
         SEGB  '  REGS:'                                                        
         LA    R1,DSTKREGS                                                      
         CLEAR R0                  Register print mask                          
         SLL   R4,2                                                             
         SLL   R5,2                                                             
         IF    (R4,LT,R5),BEGIN                                                 
         LOOP  BEGIN                                                            
         LA    R15,@R1(R4)                                                      
         MVC   @R15(4),@R3                                                      
         LA    R3,@R3+4                                                         
         O     R0,DSTKMASK(R4)                                                  
         LA    R4,@R4+4                                                         
         UNTIL (R4,GT,R5),END                                                   
         END                                                                    
         ELSE  BEGIN                                                            
         LA    R2,15*4                                                          
         LOOP  BEGIN                                                            
         LA    R15,@R1(R4)                                                      
         MVC   @R15(4),@R3                                                      
         LA    R3,@R3+4                                                         
         O     R0,DSTKMASK(R4)                                                  
         LA    R4,@R4+4                                                         
         UNTIL (R4,GT,R2),END                                                   
         CLEAR R2                                                               
         LOOP  BEGIN                                                            
         LA    R15,@R1(R2)                                                      
         MVC   @R15(4),@R3                                                      
         LA    R3,@R3+4                                                         
         O     R0,DSTKMASK(R2)                                                  
         LA    R2,@R2+4                                                         
         UNTIL (R2,GT,R5),END                                                   
         END                                                                    
         LCALL DISPREGS                                                         
         IF    (R7,POS),BEGIN                                                   
         SEGWR '  WA:'                                                          
         SEGCORE (R6),(R7)                                                      
         END                                                                    
         B     DSTKLP                                                           
*                                                                               
DSTKBAD  MVI   SEGCC,C'0'                                                       
         SEGB  'STACK ERROR AT'                                                 
         SEGHX (R7)                                                             
         SEGB  ', NEXT ENTRY WOULD BE'                                          
         SEGHX (R6)                                                             
         SEGWR                                                                  
         B     DSTKSET                                                          
*                                                                               
         PEND                                                                   
*                                                                               
DSTKERR  WITH  (*,R15),BEGIN       ESPIE exit...                                
         WITH  (EPIE,R1)                                                        
         MVC   EPIEADD1,=AL3(DSTKBAD)  Retry routine                            
         BR    R14                                                              
         END                                                                    
*                                                                               
DSTKMASK DC    A(X'8000',X'4000',X'2000',X'1000')                               
         DC    A(X'0800',X'0400',X'0200',X'0100')                               
         DC    A(X'0080',X'0040',X'0020',X'0010')                               
         DC    A(X'0008',X'0004',X'0002',X'0001')                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*  DISPREGS -- Routine to seg saved GPRs.                                       
*                                                                               
*    On entry:                                                                  
*      R0 - register print mask (low 16 bits)                                   
*      R1 - addr of R0-R15 save area                                            
*                                                                               
DISPREGS PROC                                                                   
         L     R7,SEGCBINDF        Previous indent count                        
         MVC   SEGCBINDF,SEGCBLENF  Indent at this length                       
         LR    R3,R0               Print mask                                   
         SLL   R3,16               Move it to upper 16 bits                     
         LR    R4,R1               Regs addr                                    
         CLEAR R5                  Reg no                                       
         CLEAR R0                  (for first seg in loop)                      
         WHILE (R3,NZ),BEGIN       Do while still regs to print                 
         CLEAR R2                                                               
         SLDL  R2,1                Move a bit into r2                           
         IF    (R2,NZ),BEGIN       Print this reg...                            
         SEG   (R1),(R0)                                                        
         SEGMARK                                                                
         SEG   'R'                                                              
         SEGDC (R5)                                                             
         SEG   '='                                                              
         SEGLOC @R4                                                             
         SETMSG ', '                                                            
         END                                                                    
         LA    R5,@R5+1                                                         
         LA    R4,@R4+4                                                         
         END                                                                    
         SEGWR                                                                  
         ST    R7,SEGCBINDF        Restore indent count                         
         PEND                                                                   
         QLTORG ,                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGCORE -- Internal routine to seg memory contents in dump format.           
*                                                                               
*    On entry:                                                                  
*      R1 - starting memory address                                             
*      R0 - len (complimented if "address" form not wanted)                     
*      R15- SEGCB ptr                                                           
*                                                                               
SEGCORE  XPROC                                                                  
         LR    SEGCBR,R15                                                       
         SEGDEF (SEGCBR)                                                        
*                                                                               
         LR    R6,R1               Starting addr                                
         LR    R5,R0               Len                                          
         ESPIE SET,BADCORE,(4,5)       Addressing exceptions                    
         PUSH  R1                  Save old pica addr                           
         LPR   R4,R5                                                            
         WHILE (R4,POS),BEGIN                                                   
         SEGWR                                                                  
         LA    R15,@R6             Get core addr                                
         SEGHX (R15),8             Starting addr                                
         N     R6,=F'-4'           Align to word                                
         LR    R3,R6               Save ptr for later                           
         IF    (R5,NEG),BEGIN                                                   
         SEG   CVBLANKS,2                                                       
         LA    R2,8                8 words                                      
         IF    (SEGCBMAXF,LE,80),'LA R2,4'  Half size                           
         LOOP  BEGIN                                                            
         SEGHX L:@R6,8                                                          
         SEGB                                                                   
         LA    R6,@R6+4                                                         
         IF    ('SH R4,=H"4"',^POS),EXIT                                        
         DECR  R2                                                               
         UNTIL (R2,Z),END                                                       
         LA    R0,8+(8*9)+1                                                     
         IF    (SEGCBMAXF,LE,80),'LA R0,8+(4*9)+1'  Half size                   
         SEGCOL (R0)                                                            
         SEG   '*'                                                              
         IF    (SEGCBMAXF,LE,80),BEGIN                                          
         CLC   @R3(16),@R3         Force any interrupt                          
         SEG   (R3),16                                                          
         END                                                                    
         ELSE  BEGIN                                                            
         CLC   @R3(32),@R3         Force any interrupt                          
         SEG   (R3),32                                                          
         END                                                                    
         SEG   '*'                                                              
         END                                                                    
*                                                                               
         ELSE  BEGIN                                                            
         LA    R7,8+4*22                                                        
         IF    (SEGCBMAXF,LE,80),'LA R7,8+2*22'                                 
         LA    R2,8                Column                                       
         LOOP  BEGIN                                                            
         SEGCOL (R2)                                                            
         SEGLOC L:@R6,8            Display hex & addr                           
         SEGMARK                                                                
         LA    R2,@R2+22           Next column                                  
         LA    R6,@R6+4            Next word                                    
         IF    ('SH R4,=H"4"',^POS),EXIT  all done                              
         UNTIL (R2,GE,R7),END                                                   
         SEGCOL @R7+2                                                           
         SEGMARK                                                                
         SEG   '*'                                                              
         IF    (SEGCBMAXF,LE,80),BEGIN                                          
         CLC   @R3(8),@R3          Force any interrupt                          
         SEG   (R3),8                                                           
         END                                                                    
         ELSE  BEGIN                                                            
         CLC   @R3(16),@R3         Force any interrupt                          
         SEG   (R3),16                                                          
         END                                                                    
         SEG   '*'                                                              
         END                                                                    
         END                                                                    
         B     SEGCDONE                                                         
BADCRS   SEGWR ,                   Spie recovery reentry                        
         SEG   'BAD ADDRESS'                                                    
SEGCDONE SEGWR                                                                  
         POP   R1                  Restore pica                                 
         ESPIE RESET,(1)           Restore old ESPIE                            
         PEND                                                                   
*                                                                               
BADCORE  WITH  (*,R15),BEGIN       ESPIE exit...                                
         WITH  (EPIE,R1)                                                        
         MVC   EPIEADD1,=AL3(BADCRS)  Retry routine                             
         BR    R14                                                              
         END                                                                    
         EJECT                                                                  
*box                                                                            
*                                                                               
*   SEGLOC - Routine to seg hex address in R1 and                               
*            csect+offset if the address is in MILTEN.                          
*                                                                               
*   SEGPSW - Enter here if R1 has the right half of a PSW                       
*       (So we can subtract the ILC).                                           
*                                                                               
SEGPSW   XPROC                                                                  
         LR    SEGCBR,R15                                                       
         LR    R15,R1                                                           
         CLEAR R14                                                              
         SLDL  R14,2               Get ILC in low two bits                      
         AR    R14,R14             Times two                                    
         SRL   R15,2               Put r15 back to normal                       
         SR    R15,R14             Subtract ILC                                 
         LA    R1,@R15             Drop high byte                               
         LR    R15,SEGCBR                                                       
         LCALL SEGLOC                                                           
         PEND                                                                   
         SPACE 2                                                                
SEGLOC   XPROC LOC                                                              
         LR    SEGCBR,R15                                                       
         SEGDEF (SEGCBR)                                                        
*                                                                               
         LR    R5,R0               Addr len (for seghx)                         
         ST    R1,LOCADDR          Save addr for findloc                        
         LA    R1,LOC              Set param reg                                
         LCALL FINDLOC                                                          
         SEGHX LOCADDR,(R5)                                                     
         IF    (LOCSYM,NE,CVBLANKS),BEGIN                                       
         SEG   ' ('                                                             
         SEGT  LOCSYM                                                           
         IF    (LOCSYOFS,NZ),'SEG "+0"; SEGHX LH:LOCSYOFS'                      
         SEG   ')'                                                              
         END                                                                    
         ELSEIF (LOCCSECT,NE,CVBLANKS),BEGIN                                    
         SEG   ' ('                                                             
         SEGT  LOCCSECT                                                         
         IF    (LOCCSOFS,NZ),'SEG "+0"; SEGHX LH:LOCCSOFS'                      
         SEG   ')'                                                              
         END                                                                    
         PEND                                                                   
*                                                                               
         DROP  SEGCB                                                            
         EJECT                                                                  
*box                                                                            
*                                                                               
*  ADDRSYM -- Routine to return the address of the symbol specified             
*    or -1 if the symbol is unrecognized.                                       
*                                                                               
*    On entry:                                                                  
*      R1 - symbol name ptr                                                     
*      R0 - symbol len                                                          
*                                                                               
*    On exit, R15 (and cc):                                                     
*      -1  - unknown symbol                                                     
*      pos - symbol's address                                                   
*                                                                               
ADDRSYM  XPROC                                                                  
         CLEAR R15                 Assume no match                              
         IF    ((R0,^POS),OR,(R0,GT,8)),EXIT                                    
         PUSH  8,PTR=R6                                                         
         MVC   @R6(8),CVBLANKS                                                  
         LR    R15,R0                                                           
         DEX   R15,'MVC @R6(0),@R1'                                             
         L     R15,=A(SYMBOLS)     Start of symbol table                        
         WITH  (SYMBOL,R15)                                                     
         UNTIL SYMFEND,BEGIN                                                    
         IF    (SYMNAME,EQ,@R6),EXIT  Found it                                  
         LA    R15,SYMNEXT                                                      
         END                                                                    
*                                                                               
         IF    SYMFEND,'LH R15,=H"-1"'  No match                                
         ELSE  'L R15,SYMLOC'      Get symbol address                           
*                                                                               
         POP   8                                                                
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FINDLOC -- Routine to find the closest symbol table offsets                  
*             for a given address.  On entry, R1 points to a                    
*             parameter area with "locaddr" filled in (see                      
*             "LOC" dsect).                                                     
*                                                                               
FINDLOC  PROC                                                                   
         LR    R6,R1               Copy param reg                               
         WITH  (LOC,R6)                                                         
         MVC   LOCCSECT,CVBLANKS   Init fields                                  
         MVC   LOCSYM,CVBLANKS                                                  
         CLEAR R0,LOCSYOFS,LOCCSOFS                                             
         LT    R5,=A(SYMBOLS)      Addr of symbol table                         
         IF    Z,EXIT              No table                                     
*-                                                                              
*-       The symbol table has been sorted by symbol addr.                       
*-                                                                              
         WITH  (SYMBOL,R5)                                                      
         L     R4,LOCADDR          Get comparison addr                          
         LA    R4,@R4              Drop high byte                               
*                                                                               
         CLEAR R2,R3               Old symbol ptr, old csect ptr                
         WHILE (^SYMFEND,AND,(R4,GE,SYMLOC)),BEGIN                              
         IF    SYMFCSCT,'LR R3,R5'                                              
         ELSE  'LR R2,R5'                                                       
         LA    R5,SYMNEXT                                                       
         END                                                                    
*                                                                               
         IF    ('LTR R5,R2',NZ),BEGIN                                           
         IF    ((R3,Z),OR,(R2,LE,R3)),BEGIN  only give symbol if it's           
*                                  closer than the csect                        
         LR    R15,R4                                                           
         SL    R15,SYMLOC          Offset from symbol                           
         LA    R15,@R15            Drop high byte                               
         IF    (R15,LE,SYMLEN),BEGIN                                            
         STH   R15,LOCSYOFS                                                     
         MVC   LOCSYM,SYMNAME                                                   
         END                                                                    
         END                                                                    
*                                                                               
         IF    ('LTR R5,R3',NZ),BEGIN                                           
         SL    R4,SYMLOC           Offset from csect                            
         LA    R4,@R4                                                           
         IF    (R4,LE,SYMLEN),BEGIN                                             
         STH   R4,LOCCSOFS                                                      
         MVC   LOCCSECT,SYMNAME                                                 
         END                                                                    
         END                                                                    
         END                                                                    
         PEND                                                                   
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*  PRTSEG -- SEG routine to write line to SYSPRINT.                             
*                                                                               
*    On entry:                                                                  
*                                                                               
*      R15 - SEGCB ptr                                                          
*                                                                               
PRTSEG   PROC                                                                   
         LR    R6,R15                                                           
         WITH  (SEGCB,R6)                                                       
*                                                                               
         IF    (SEGCBWR,OR,SEGCBOVF),BEGIN  segwr or overflow entry...          
         LR    R5,R1                                                            
         LR    R4,R0                                                            
*                                                                               
         L     R3,=A(SYSPRINT)     SYSPRINT DCB                                 
         IF    @R3+(DCBOFLGS-DCB).DCBOFOPN,BEGIN  it's open...                  
         LR    R2,R4                                                            
         LA    R2,4+1+@R2          l'rdw + cc char + text                       
         STH   R2,@R3+(DCBLRECL-DCB)                                            
         PUT   (R3)                Get buffer space                             
         IF    ^@R3+(DCBOFLGS-DCB).DCBOFOPN,EXIT  DCB abend, scram              
         STH   R2,@R1              Rdw len                                      
         CLEAR (@R1+2,2)           Rdw flags                                    
         MVI   @R1+4,C' '          Cc char                                      
         IF    (SEGCC,NZ),'MVC @R1+4(1),SEGCC'                                  
         IF    (R4,POS),BEGIN                                                   
         LR    R15,R4                                                           
         MOVE  R15,@R1+5,@R5                                                    
         EX    R15,'TR @R1+5(0),SEGTRTBL'                                       
         END                                                                    
         END                                                                    
*                                                                               
         CLEAR SEGCC               Reset                                        
         LCR   R0,R4               Amnt we reduced bfr--for segcbovf            
         END                                                                    
         PEND                                                                   
*                                                                               
         QLTORG                                                                 
*                                                                               
**  translate table to convert funny chars to dots.                             
SEGTRTBL DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'                              
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'                              
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'                              
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'                              
         DC    X'404B4B4B4B4B4B4B4B4B4A4B4C4D4E4F'                              
         DC    X'504B4B4B4B4B4B4B4B4B5A5B5C5D5E4B'                              
         DC    X'60614B4B4B4B4B4B4B4B4B6B6C6D6E6F'                              
         DC    X'4B4B4B4B4B4B4B4B4B4B7A7B7C7D7E7F'                              
         DC    X'4B8182838485868788894B4B4B4B4B4B'                              
         DC    X'4B9192939495969798994B4B4B4B4B4B'                              
         DC    X'4B4BA2A3A4A5A6A7A8A94B4B4B4B4B4B'                              
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'                              
         DC    X'4BC1C2C3C4C5C6C7C8C94B4B4B4B4B4B'                              
         DC    X'4BD1D2D3D4D5D6D7D8D94B4B4B4B4B4B'                              
         DC    X'4B4BE2E3E4E5E6E7E8E94B4B4B4B4B4B'                              
         DC    X'F0F1F2F3F4F5F6F7F8F94B4B4B4B4B4B'                              
         EJECT                                                                  
*box                                                                            
*                                                                               
*  ALLOSYSP -- Allocate a SYSPRINT ddcard.                                      
*                                                                               
ALLOSYSP PROC                                                                   
         LA    R1,BALLOC                                                        
         DYNALLOC ,                Allocate SYSPRINT                            
         PEND                                                                   
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  FREESYSP -- De-allocate SYSPRINT ddcard (so it can be fetched                
*    or printed).                                                               
*                                                                               
FREESYSP PROC                                                                   
         LA    R1,BDEALLOC                                                      
         DYNALLOC ,                De-allocate SYSPRINT                         
         PEND                                                                   
         SPACE 2                                                                
*  Dynamic allocation/de-allocation parameter list...                           
BALLOC   DS    0F                                                               
         DC    X'80',AL3(BALRB)    Alloc request block ptr                      
BALRB    DC    AL1(20)                                                          
BALVERB  DC    AL1(S99VRBAL)       Allocation                                   
         DC    AL1(S99NOMNT)                                                    
         DC    AL1(0)                                                           
         DS    0F                                                               
BALERROR DC    H'0'                                                             
BALINFO  DC    H'0'                                                             
         DC    A(BALTXTP)                                                       
         DC    A(0)                                                             
         DC    A(0)                                                             
BALTXTP  DC    A(BDLTXTDD)                                                      
         DC    A(BALTXTF)                                                       
         DC    X'80',AL3(BALTXTS)                                               
BALTXTS  DC    AL2(DALSYSOU,0)     SYSOUT=$                                     
BALTXTF  DC    AL2(DALSFMNO,1,4),C'DUMP'  FORMS=DUMP                            
*                                                                               
BDEALLOC DS    0F                                                               
         DC    X'80',AL3(BDLRB)    De-alloc request block ptr                   
BDLRB    DC    AL1(20)                                                          
         DC    AL1(S99VRBUN)       SYSPRINT de-allocation                       
         DC    AL1(S99NOMNT)                                                    
         DC    AL1(0)                                                           
         DS    0F                                                               
BDLERROR DC    H'0'                                                             
BDLINFO  DC    H'0'                                                             
         DC    A(BDLTXTP)                                                       
         DC    A(0)                                                             
         DC    A(0)                                                             
BDLTXTP  DC    X'80',AL3(BDLTXTDD)                                              
BDLTXTDD DC    AL2(DALDDNAM,1,8),CL8'SYSPRINT'                                  
*                                                                               
         QLTORG                                                                 
         PUSH  NOGEN                                                            
PRTSG    SEGCB PRTSGBUF,,RTN=PRTSEG                                             
PRTSGBUF DS    CL132                                                            
*                                                                               
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PL,                      *        
               RECFM=VBA,LRECL=137,BLKSIZE=6233,EXLST=PRTEXLST                  
         POP   PRINT                                                            
*                                                                               
PRTEXLST DC    0A(0),X'91',AL3(PRTABEND)  DCB abend exit                        
*                                                                               
PRTABEND WITH  (*,R15),BEGIN                                                    
         MVI   @R1+3,4             Tell os to ignore the abend                  
         BR    R14                 Return                                       
         END                                                                    
*                                                                               
         DS    0F                                                               
STAESTK  DS    XL4096                                                           
*                                                                               
SYMBOLS  SYMBOLS (CV,,L'CV),CSECT=NO                                            
         SYMBOLS (MILMAIN,MAIN),(MILMALT,MALT),(MILMUD,MUD)                     
         SYMBOLS (MILMISC,MISC),(MILSIFT,SIFT),(MILMSVC,MSVC)                   
         SYMBOLS (MILMORT,MORT),(MILCONS,CONS)                                  
         SYMBOLS (MILVIRT,VIRT)                                                 
         SYMBOLS (MILELF,ELF)                                                   
         SYMBOLS (MILMCOM,MCOM)                                                 
         DC    (L'SYMBOL)X'FF'     End of symbol table                          
*                                                                               
         END   .                                                                
