CR       TITLE 'WYLBUR''s Conversion Routines'                                  
*******************************************************************             
*                                                                 *             
*     WYLBUR/370 - Release VI - Class I - Stanford Proprietary    *             
*                                                                 *             
*******************************************************************             
         HIBAL                                                                  
*                                                                               
         SYSDEFN                                                                
         GBLC  &ZONE,&ALTZONE      Time zones                                   
*                                                                               
         PUSH  DSECTS                                                           
         CVT   DSECT=YES                                                        
         POP   DSECTS                                                           
*                                                                               
WYLCR    CSECT                                                                  
         REGS  FSR,,,,,,,BR,(WAR,LSR),PAR,PBR,CPR,CVR,SPR,RAR                   
         SPACE 2                                                                
CR       IDENT 2193                15:11:42 07/12/02  (SLP)                     
*                                                                               
         USING DEC,R6                                                           
         TITLE 'Conversion Routines - Data Areas'                               
*                                                                               
*  CAUTION: WE DO NOT DEFINE CV OR CP IN THIS MODULE.                           
*  (PS. I DO NOT KNOW IF THIS IS A REQUIREMENT OR WHAT ?? -SCH)                 
*                                                                               
*  THEREFORE ALL XPROCS, PROCS MUST HAVE TRACE=NO                               
*                                                                               
*                                                                               
* Work area used for date and time routines                                     
*                                                                               
STCKCVWA RECORD BEGIN                                                           
STCKCVCK DS    XL8                 Clock value to be converted                  
STCKCVVL DS    CL16                Converted output value                       
STCKEDIT DS    XL32                EDIT Work area                               
         END                                                                    
*                                                                               
*  work area                                                                    
*                                                                               
WA       RECORD BEGIN                                                           
         XSA   R2,R8                                                            
         DS    F                   Insurance                                    
DW       DS    2F                  Double word                                  
HEXW     DS    F                                                                
HEXS     DS    CL16                                                             
*                                                                               
*                                  Work area for FMTXDATE                       
SAVEDAY  DS    F                   Save area for day-of-week                    
SAVEDATE DS    F                   Save area for day-of-month                   
*                                                                               
REDITWA  DS    CL17                                                             
         DS    CL3                                                              
         END                                                                    
*                                                                               
*                                                                               
DEC      RECORD BEGIN                                                           
         DS    D                                                                
         END                                                                    
         TITLE 'WYLBUR''s Conversion Routines'                                  
WYLCR    CSECT                                                                  
*                                                                               
*                                                                               
*  decimal to binary conversion                                                 
*                                                                               
*  on entry:                                                                    
*    r1,r0 - loc len of input string (number)                                   
*                                                                               
*  on exit:                                                                     
*    if CC=0, all ok; if CC=NZ, string is non-numeric                           
*    r15 - value                                                                
*                                                                               
* NOTE:                                                                         
* CC is set is nonstandard way.  value should be returned                       
* in R0 and CC in R15 or some such.  Oh well, ce la vie.                        
*                                                                               
*                                                                               
DTB      XPROC TRACE=NO                                                         
         CLEAR R15                 Clear result                                 
DTBL     LTR   R0,R0               Done?                                        
         BNP   DTBX                                                             
         CLI   @R1,C'0'            Digit?                                       
         BL    DTBX                Br if too low                                
         CLI   @R1,C'9'                                                         
         BH    DTBX                Br if too high                               
         LC    R2,@R1                                                           
         SL    R2,=A(C'0')                                                      
         MH    R15,=H'10'          Build result                                 
         ALR   R15,R2                                                           
         LA    R1,@R1+1                                                         
         DECR  R0                                                               
         B     DTBL                                                             
DTBX     LABEL ,                                                                
         PRETURN (R0,R1)                                                        
         PEND  *                   ** don't set cc !                            
         EJECT                                                                  
*                                                                               
*                                                                               
*  hexadecimal to binary conversion                                             
*                                                                               
*  on entry:                                                                    
*    r1,r0 - loc len of input string (number)                                   
*                                                                               
*  on exit:                                                                     
*    if CC=0,all ok; if CC=NZ, string is non-numeric                            
*    r15 - value                                                                
*                                                                               
* NOTE:                                                                         
* CC is set is nonstandard way.  value should be returned                       
* in R0 and CC in R15 or some such.  Oh well, ce la vie.                        
*                                                                               
*                                                                               
XTB      XPROC TRACE=NO                                                         
         CLEAR R15                                                              
XTBL     LTR   R0,R0               Done?                                        
         BNP   XTBX                Br if so                                     
         LC    R2,@R1              Pick up digit                                
         CLI   @R1,C'A'                                                         
         BL    XTBN                                                             
         CLI   @R1,C'F'                                                         
         BH    XTBN                                                             
         SL    R2,=A(C'A'-10)                                                   
         B     XTBB                                                             
*                                                                               
XTBN     CLI   @R1,C'0'                                                         
         BL    XTBX                                                             
         CLI   @R1,C'9'                                                         
         BH    XTBX                                                             
         SL    R2,=A(C'0')                                                      
XTBB     SLL   R15,4               Add new digit in                             
         OR    R15,R2                                                           
         LA    R1,@R1+1            Next digit                                   
         DECR  R0                                                               
         B     XTBL                                                             
*                                                                               
XTBX     LABEL ,                                                                
         PRETURN (R0,R1)                                                        
         PEND  *                   ** don't set cc !                            
         EJECT                                                                  
*                                                                               
*  binary to decimal conversion                                                 
*                                                                               
*  on entry:                                                                    
*    r15 - value                                                                
*                                                                               
*  on exit:                                                                     
*    r1,r0 - loc len of result                                                  
*                                                                               
*                                                                               
BTD      XPROC WA,TRACE=NO                                                      
         LA    R6,DW               Get a double word                            
         N     R6,=XL4'FFFFF8'                                                  
         CVD   R15,DEC             Convert number to packed                     
         MVC   HEXS(16),ED15       Edit mask                                    
         LR    R4,1                Save result loc.                             
         LA    R1,HEXS+15                                                       
         EDMK  HEXS(16),DEC                                                     
         LTR   R15,R15             Negative?                                    
         BNM   *+10                Br if not                                    
         DECR  R1                  Put in a sign                                
         MVI   @R1,C'-'                                                         
         LA    R3,HEXS+16          Compute actual length                        
         SR    R3,R1                                                            
         LR    R1,R4               Restore result pointer                       
         LTR   R0,R0               Field size given?                            
         BP    *+8                 Br if so                                     
         LCR   R0,R0                                                            
         AR    R0,R3               Compute field size                           
         LR    R3,R0               Field length                                 
         LA    R2,HEXS+16          Compute starting addr                        
         SR    R2,R3                                                            
         DEX   R3,' MVC @R1(0),@R2 '  Move to result loc.                       
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
*                                                                               
ED15     DC    C' ',13X'20',X'2120'                                             
         EJECT                                                                  
*                                                                               
*                                                                               
*  BTDZEROS - BTD with LEADING ZEROS                                            
*                                                                               
*  on entry:                                                                    
*    r1,r0 - loc, len of result                                                 
*    r15 - value                                                                
*                                                                               
*  note:                                                                        
*  r0 must be > 0                                                               
*  r15 must be >= 0                                                             
*                                                                               
*                                                                               
BTDZEROS XPROC WA,TRACE=NO                                                      
         LA    R6,DW               Get a double word                            
         N     R6,=XL4'FFFFF8'                                                  
         CVD   R15,DEC             Convert number to packed                     
         MVC   HEXS(16),EDZ15      Edit mask                                    
         LR    R4,R1               Save result loc.                             
         LA    R1,HEXS+15                                                       
         EDMK  HEXS(16),DEC                                                     
         LA    R3,HEXS+16          Compute actual length                        
         SR    R3,R1                                                            
         LR    R1,R4               Restore result pointer                       
         LR    R3,R0               Field length                                 
         LA    R2,HEXS+16          Compute starting addr                        
         SR    R2,R3                                                            
         DEX   R3,' MVC @R1(0),@R2 '  Move to result loc.                       
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
*                                                                               
EDZ15    DC    C' ',X'21',14X'20'                                               
         EJECT                                                                  
*  binary to hexadecimal conversion                                             
*                                                                               
BTX      XPROC WA,TRACE=NO                                                      
         ST    R15,HEXW            Word to be converted                         
         UNPK  HEXS(9),HEXW(5)     To zoned format                              
         TR    HEXS(8),HEXTBL-C'0' To hex format                                
         LTR   R3,R0               Length                                       
         IF    Z,BEGIN             Zero means calculate it                      
BTX0     LA    R2,HEXS-1                                                        
         LA    R3,7                                                             
BTXCHK0  LA    R2,@R2+1            Bump                                         
         CLI   @R2,C'0'            Start of non-zero stuff?                     
         BNE   BTXX                No, branch                                   
         BCT   R3,BTXCHK0          Loop if not last dig                         
         LA    R2,@R2+1            Point to last digit                          
BTXX     LA    R0,@R3+1            Get real length in R0                        
*              now return with r3 having the length in ex form                  
         B     BTXC                                                             
         END                                                                    
         LA    R2,HEXS+8           Compute addr to move from                    
         SR    R2,R3                                                            
         DECR  R3                                                               
BTXC     EX    R3,' MVC @R1(0),@R2 '  Move to users area                        
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
*                                                                               
         EJECT                                                                  
*  binary to real conversion                                                    
*                                                                               
BTR      XPROC WA,TRACE=NO                                                      
*** R15 has value, R1 has output addr, R0 = length*256+no of digits             
         LA    R6,DW               Set up                                       
         N     R6,=F'-8'           Double word                                  
         LR    R5,R1               Save output pointer                          
         CVD   R15,DEC                                                          
         LA    R2,X'07'            Get number                                   
         NR    R2,R0               ...of digits                                 
         LA    R3,BTREDMSK(R2)     Get start of mask to use                     
         LA    R1,REDITWA+15       Default starting point                       
         SR    R1,R2               Minus offset                                 
         MVC   REDITWA,@R3         Get mask                                     
         MVI   REDITWA,C' '        First byte is pad char                       
         EDMK  REDITWA,DEC         Edit number                                  
         IF    (R15,NEG),'DECR R1; MVI @R1,C"-"'                                
         SRA   R0,8                Get number of digits to produce              
         IF    Z,BEGIN             If 0, use as much as necessary               
         LA    R0,REDITWA+L'REDITWA  R1 points to start,                        
         SR    R0,R1               Get length in R0                             
         END                                                                    
         ELSE  BEGIN                                                            
         LA    R1,REDITWA+L'REDITWA  R0 has length,                             
         SR    R1,R0               Get start in R1                              
         END                                                                    
         LR    R2,R0               Length in r2 for execute                     
         DEX   R2,'MVC @R5(0),@R1'    Move to output area                       
         LR    R1,R5               Set R1 to point to output                    
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         SPACE 2                                                                
BTREDMSK DC    0CL24' ',14X'20',X'2120',C'.',7X'20'                             
*                                                                               
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*  LOCALTOD -- Routine to obtain the local time and date in                     
*              STCK format.                                                     
*                                                                               
*    On entry:                                                                  
*      No entry parameters                                                      
*                                                                               
*    On exit:                                                                   
*      R0,R1 contain the local time in STCK format.                             
*                                                                               
*    Notes: This code comes from a message on dejanews posted                   
*           by William H. Blair for IBM-MAIN list.                              
*                                                                               
*           Assuming the TOD clock is set to International Atomic               
*           Time (TAI), then:                                                   
*               UTC        = TOD - CVTLSO                                       
*                    and                                                        
*               Local time = UTC + CVTLDTO                                      
*                                                                               
*           If the TOD clock is set to UTC ("GMT"), then CVTLSO                 
*           will be (or should be) zero.  CVTLDTO is a TOD                      
*           clock-format (64 bit) "time zone offset" value                      
*           (don't use the old CVTTZ field, which is just                       
*           the high-order word of the CVTLDTO field).                          
*                                                                               
LOCALTOD XPROC TRACE=NO                                                         
         STCK  @R13                                                             
         LM    R0,R1,@R13                                                       
         L     R2,CVTPTR                                                        
         WITH  (CVT,R2),'L R2,CVTEXT2'                                          
         WITH  (CVTXTNT2,R2),BEGIN                                              
         SDL   R0,CVTLSO                                                        
         ADL   R0,CVTLDTO                                                       
         END                                                                    
         PRETURN (R0,R1)                                                        
         PEND  *                   Leave R15 alone                              
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FMTXDATE -- Routine to format Arpa-style time/date from TOD                  
*    clock.                                                                     
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*      R15   - return area (32 bytes)                                           
*                                                                               
*    On exit:                                                                   
*      R1,R0 - text loc, len                                                    
*              returns: DAY, dd MON yyyy hh:mm:ss ZON                           
*                                                                               
FMTXDATE XPROC WA,TRACE=NO                                                      
         XPUSH ,,20                Lengthen work area                           
         LR    R6,R15                                                           
         MVI   0(R6),C' '          Blank the output area                        
         MVC   1(31,R6),0(R6)                                                   
*                                                                               
         LR    R4,R0                                                            
         LR    R5,R1                                                            
*-                                                                              
*-       Format day of the week.                                                
*-                                                                              
         ACALL FMTDAY              Get day of the week                          
         ST    R15,SAVEDAY         Save day number                              
         MVC   @R6(3),@R1          Move in first three chars                    
         NI    @R6+1,255-C' '      (Lower case)                                 
         NI    @R6+2,255-C' '      (Lower case)                                 
*                                                                               
         MVI   @R6+3,C','                                                       
*-                                                                              
*-       Format date.                                                           
*-                                                                              
         LR    R0,R4                                                            
         LR    R1,R5                                                            
         LA    R15,HEXS            Point to 10 byte area                        
         ACALL FMTDATE             mm/dd/yyyy                                   
         MVC   @R6+5(2),@R1+3      "dd"                                         
         IF    (@R6+5,EQ,'0'),'MVI @R6+5,C" "'  Blank leading zero              
*                                                                               
         MVC   @R6+12(4),@R1+6     "yyyy"                                       
*                                                                               
         LR    R2,R1                                                            
         DTB   @R2+3,2             Day-of-month                                 
         ST    R15,SAVEDATE                                                     
         DTB   @R2,2               Month                                        
         IF    ((R15,LT,0),OR,(R15,GT,12)),'CLEAR R15'  Bad month               
         LR    R3,R15              Save for later                               
         MH    R15,=H'3'                                                        
         LA    R1,FMTXMON(R15)     Month string                                 
         MVC   @R6+8(3),@R1                                                     
*-                                                                              
*-       Format time of day.                                                    
*-                                                                              
         LR    R0,R4                                                            
         LR    R1,R5                                                            
         LA    R15,@R6+17                                                       
         ACALL FMTTIME             hh:mm:ss                                     
*-                                                                              
*-       Format time zone.                                                      
*-                                                                              
         MVC   @R6+25(4),=C' &ZONE'  Set time zone                              
         IF    ((R3,GE,4),AND,(R3,LE,10)),BEGIN                                 
         MVC   @R6+25(4),=C' &ALTZONE'  Assume daylight savings                 
*-                                                                              
*-       Now handle special cases for April and October                         
*-                                                                              
         IF    ((R3,EQ,4),OR,(R3,EQ,10)),BEGIN                                  
         L     R1,SAVEDATE         Get binary day-of-month                      
         L     R2,SAVEDAY          Get binary day-of-week                       
         LA    R0,30               Assume April                                 
         IF    (R3,EQ,10),'LA R0,31'                                            
         SR    R0,R1               Days in month - day of month                 
         AR    R0,R2               ... + day of week                            
         IF    (((R0,GT,30),AND,(R3,EQ,4)),OR,                         C        
               ((R0,LE,7),AND,(R3,EQ,10))),BEGIN                                
         MVC   @R6+25(4),=C' &ZONE'  Re-do assumption                           
         END                                                                    
         END                                                                    
         END                                                                    
*                                                                               
         SETMSG @R6,29              Formatted date                              
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
*                                                                               
FMTXMON  DC    C'???JanFebMarAprMayJunJulAugSepOctNovDec'                       
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FMTCLCK -- Routine to format time/date from TOD clock.                       
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*      R15   - return area (30 bytes)                                           
*                                                                               
*    On exit:                                                                   
*      R1,R0 - text loc, len    returns: hh:mm:ss mm/dd/yyyy (yyyy.ddd)         
*                                                                               
FMTCLCK  XPROC WA,TRACE=NO                                                      
         LR    R6,R15                                                           
         MVC   @R6(30),BLANKS                                                   
*                                                                               
         LR    R4,R0                                                            
         LR    R5,R1                                                            
         LCALL FMTTIME             hh:mm:ss.hh                                  
         MVC   8(3,R6),BLANKS      Don't want hundredths                        
*                                                                               
         LR    R0,R4                                                            
         LR    R1,R5                                                            
         LA    R15,@R6+9                                                        
         ACALL FMTDATE             mm/dd/yyyy                                   
*                                                                               
         MVI   @R6+20,C'('                                                      
         LR    R0,R4                                                            
         LR    R1,R5                                                            
         LA    R15,@R6+21                                                       
         LCALL FMTJUL              yyyy.ddd                                     
         MVI   @R6+29,C')'                                                      
*                                                                               
         SETMSG @R6,30                                                          
*                                                                               
         PRETURN (R0,R1)                                                        
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FMTRCLCK -- Routine to format time/conditional-date from TOD                 
*    clock.                                                                     
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*      R2-R3 - 64 bit comparison clock                                          
*      R15   - return area (16 bytes)                                           
*                                                                               
*    On exit:                                                                   
*      R1,R0 - text loc,len    returns: hh:mm -or- hh:mm mm/dd/yyyy             
*                                                                               
FMTRCLCK XPROC WA,TRACE=NO                                                      
         LR    R6,R15                                                           
         MVC   @R6(16),BLANKS                                                   
*                                                                               
         LR    R4,R0                                                            
         LR    R5,R1                                                            
         PUSH  11,PTR=R15                                                       
         ACALL FMTTIME                                                          
         MVC   @R6(5),@R1          "hh:mm"                                      
*                                                                               
         LR    R15,R1                                                           
         LR    R0,R4                                                            
         LR    R1,R5                                                            
         ACALL FMTDATE                                                          
         MVC   @R6+6(10),@R1        "mm/dd/yyyy"                                
         POP   11                                                               
*                                                                               
         LR    R0,R4                                                            
         LA    R1,R5                                                            
         ACALL TIMEDATE            Get date in R1                               
         LR    R5,R1                                                            
*                                                                               
         LR    R0,R2                                                            
         LR    R1,R3                                                            
         ACALL TIMEDATE            Get "comparison" date in R1                  
*                                                                               
         IF    (R1,EQ,R5),'SETMSG @R6,5'  same day                              
         ELSE  'SETMSG @R6,16'                                                  
         PRETURN (R0,R1)                                                        
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FMTTIME -- Routine to format time from TOD clock.                            
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*      R15   - return area (11 bytes)                                           
*                                                                               
*    On exit:                                                                   
*      R1,R0 - text loc, len    returns: hh:mm:ss.hh                            
*                                                                               
FMTTIME  XPROC STCKCVWA,TRACE=NO                                                
         STM   R0,R1,STCKCVCK      Save the clock value                         
*                                                                               
         LR    R6,R15                                                           
         MVC   @R6(11),BLANKS                                                   
         STCKCONV STCKVAL=STCKCVCK,CONVVAL=STCKCVVL,DATETYPE=MMDDYYYY           
*                                                                               
         IF    (R15,Z),BEGIN                                                    
         MVC   STCKEDIT(12),=X'F021207A20207A20204B2020'  HH:MM:SS.HH           
         ED    STCKEDIT(12),STCKCVVL                                            
         MVC   0(11,R6),STCKEDIT+1                                              
         END                                                                    
*                                                                               
         SETMSG @R6,11                                                          
*                                                                               
         PRETURN (R0,R1)                                                        
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FMTDATE -- Routine to format date from TOD clock.                            
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*      R15   - return area (10 bytes)                                           
*                                                                               
*    On exit:                                                                   
*      R1,R0 - text loc,len    returns: mm/dd/yyyy                              
*                                                                               
FMTDATE  XPROC STCKCVWA,TRACE=NO                                                
         STM   R0,R1,STCKCVCK      Save the clock value                         
*                                                                               
         LR    R6,R15                                                           
         MVC   @R6(10),BLANKS                                                   
*                                                                               
         STCKCONV STCKVAL=STCKCVCK,CONVVAL=STCKCVVL,DATETYPE=MMDDYYYY           
*                                                                               
         IF    (R15,Z),BEGIN                                                    
         MVC   STCKEDIT(11),=X'F021206120206120202020'  MM/DD/YYYY              
         ED    STCKEDIT(11),STCKCVVL+8                                          
         MVC   @R6(10),STCKEDIT+1                                               
         END                                                                    
*                                                                               
         SETMSG @R6,10                                                          
*                                                                               
         PRETURN (R0,R1)                                                        
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FMTDAY -- Routine to format the day of the week from TOD clock.              
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*                                                                               
*    On exit:                                                                   
*      R15 - day number (1=Sunday, 2=Monday, etc.)                              
*      R1,R0 - day text loc, len ("Sunday", "Monday", etc.)                     
*                                                                               
FMTDAY   XPROC TRACE=NO                                                         
         SRDL  R0,12+6             .000001*64 of a sec                          
         D     R0,=A(1000000/64*60*60*24)  One day                              
         LA    R3,@R1+1            No. of days since 1900                       
*                                                                               
         CLEAR R2                                                               
         D     R2,=F'7'            Get day of the week in R15                   
*                                                                               
         LR    R1,R2               Day number 0 to 6                            
         IF     (R1,EQ,0),'LA R1,DAYSUN'                                        
         ELSEIF (R1,EQ,1),'LA R1,DAYMON'                                        
         ELSEIF (R1,EQ,2),'LA R1,DAYTUE'                                        
         ELSEIF (R1,EQ,3),'LA R1,DAYWED'                                        
         ELSEIF (R1,EQ,4),'LA R1,DAYTHU'                                        
         ELSEIF (R1,EQ,5),'LA R1,DAYFRI'                                        
         ELSEIF (R1,EQ,6),'LA R1,DAYSAT'                                        
*                                                                               
         LC    R0,@R1              Get string length                            
         LA    R1,@R1+1                                                         
         LA    R15,@R2+1           Return day number (1..7)                     
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
*                                                                               
DAYTBL   DC    A(DAYSUN,DAYMON,DAYTUE,DAYWED,DAYTHU,DAYFRI,DAYSAT)              
DAYSUN   DC    AL1(6),CL9'Sunday'                                               
DAYMON   DC    AL1(6),CL9'Monday'                                               
DAYTUE   DC    AL1(7),CL9'Tuesday'                                              
DAYWED   DC    AL1(9),CL9'Wednesday'                                            
DAYTHU   DC    AL1(8),CL9'Thursday'                                             
DAYFRI   DC    AL1(6),CL9'Friday'                                               
DAYSAT   DC    AL1(8),CL9'Saturday'                                             
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FMTJUL -- routine to format julian date from TOD clock.                      
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*      R15   - return area (8 bytes)                                            
*                                                                               
*    On exit:                                                                   
*      R1,R0 - text loc,len    returns: yyyy.ddd                                
*                                                                               
FMTJUL   PROC  STCKCVWA,TRACE=NO                                                
         LR    R6,R15                                                           
         MVC   0(8,R6),BLANKS                                                   
*                                                                               
         STCKCONV STCKVAL=STCKCVCK,CONVVAL=STCKCVVL                             
         IF    (R15,Z),BEGIN                                                    
         MVC   STCKEDIT(10),=X'F020212020204B202020'                            
         ED    STCKEDIT(10),STCKCVVL+8                                          
         MVC   0(8,R6),STCKEDIT+2                                               
         END                                                                    
*                                                                               
         SETMSG @R6,8                                                           
         PRETURN (R0,R1)                                                        
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TIMEDATE -- Routine to calculate time/date from TOD clock.                   
*                                                                               
*    On entry:                                                                  
*      R0-R1 - 64 bit clock                                                     
*                                                                               
*    On exit:                                                                   
*      R0 - time (in .01 sec's past midnight)                                   
*      R1 - date (in "0CYYDDDF" format)                                         
*                                                                               
TIMEDATE XPROC STCKCVWA,TRACE=NO                                                
         STM   R0,R1,STCKCVCK      Save the clock value                         
*                                                                               
         STCKCONV STCKVAL=STCKCVCK,CONVVAL=STCKCVVL,TIMETYPE=BIN                
*                                                                               
         IF    (R15,Z),BEGIN                                                    
         L     R0,STCKCVVL         Get time                                     
         L     R1,STCKCVVL+8        and date                                    
         SLL   R1,4                Make room for sign digit                     
         ST    R1,STCKCVVL+8                                                    
         OI    STCKCVVL+11,X'0F'   Add correct sign digit                       
*                                                                               
* Check for century and create 0C portion of date                               
*                                                                               
         IF    ('CLI STCKCVVL+8,X"19"',EQ),BEGIN  1900...                       
         MVI   STCKCVVL+8,X'00'                                                 
         END                                                                    
         ELSE  BEGIN                                                            
         MVI   STCKCVVL+8,X'01'                                                 
         END                                                                    
         L     R1,STCKCVVL+8       Get correct format date                      
         END                                                                    
*                                                                               
         ELSE  BEGIN                                                            
         CLEAR R0,R1                                                            
         END                                                                    
         PRETURN (R0,R1)                                                        
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  DATE -- Routine to convert packed decimal julian date (as                    
*    returned by 'TIME BIN') to 'mm/dd/yyyy' format.                            
*                                                                               
*      On entry:                                                                
*        R0 - packed julian date (0CYYDDDF)                                     
*        R1 - 10 byte return area (for 'MM/DD/YYYY')                            
*                                                                               
*      On exit:                                                                 
*        R1,R0 - return area loc,len                                            
*                                                                               
DATE     XPROC WA,TRACE=NO                                                      
         LR    R6,R1               Save return area ptr                         
         CLEAR HEXS                                                             
         MVI   HEXS+1,X'01'                                                     
         ST    R0,HEXS+8                                                        
         CONVTOD  CONVVAL=HEXS,TODVAL=DW,TIMETYPE=DEC,DATETYPE=YYDDD            
         IF    (R15,Z),BEGIN                                                    
         LM    R0,R1,DW                                                         
         END                                                                    
         ELSE  BEGIN                                                            
         CLEAR R0,R1                                                            
         END                                                                    
         LR    R15,R6                                                           
         ACALL FMTDATE                                                          
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
*                                                                               
         EJECT                                                                  
* constants                                                                     
*                                                                               
DATA1    DC    64F'0'              NOT USED, BUT NEEDED FOR $PCODE              
DATEVAL  DC    X'00000000000000000000010101010101'                              
HEXTBL   DC    C'0123456789ABCDEF'                                              
*                                                                               
         QLTORG                                                                 
         TITLE 'Routine to Dequote a String'                                    
*box                                                                            
*                                                                               
*  DEQUOTE/DEQSTR -- Routine to dequote string.                                 
*   On entry:                                                                   
*     R1,R0 - string loc,len                                                    
*     R15   - output string loc (only for DEQSTR entry)                         
*                                                                               
*   On exit:                                                                    
*     R15=NZ, not a string (R1,R0 - same as on entry)                           
*     R15=0,POS string dequoted (R1,R0 - loc,len of dequoted string)            
*        r15 is string length (ie. R15=0 is null string)                        
*                                                                               
*   NOTE:                                                                       
*   jan/91, r15 now set as cc, formerly cc was set from R0                      
*   formerly returned as junk (ie, r15=r1+r0)                                   
*                                                                               
DEQUOTE  XPROC TRACE=NO                                                         
         LA    R15,@R1+1           De-quote string in place                     
         ACALL DEQSTR                                                           
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
*                                                                               
DEQSTR   XPROC TRACE=NO                                                         
         IF    (R0,LT,2),DQBAD     Bad string                                   
*                                                                               
         IF    ((@R1,NE,''''),AND,(@R1,NE,'"')),DQBAD  Start quote              
*                                                                               
         LR    R2,R1                                                            
         AR    R2,R0                                                            
         DECR  R2                                                               
         IF    ('CLC @R2(1),@R1',NE),DQBAD  End not properly quoted             
*                                                                               
         DECR  R0                  Strip off outer quotes                       
         DECR  R0                                                               
         LR    R4,R1               Remember kind of quote                       
         LA    R6,@R1+1            Inp ptr                                      
         LR    R1,R15                                                           
         LR    R5,R0                                                            
         WHILE (R5,POS),BEGIN      Move string a char at a time...              
         MVC   @R15(1),@R6                                                      
         IF    ('CLC @R15(1),@R4',EQ),BEGIN  Check for two quotes...            
         IF    ((R5,POS),AND,('CLC @R6(1),@R6+1',EQ)),BEGIN                     
         LA    R6,@R6+1            Skip second quote                            
         DECR  R5                                                               
         DECR  R0                                                               
         END                                                                    
         END                                                                    
*                                                                               
         LA    R15,@R15+1                                                       
         LA    R6,@R6+1                                                         
         DECR  R5                                                               
         END                                                                    
         LR    R15,R0                                                           
         B     DQEXIT                                                           
*                                                                               
DQBAD    LABEL ,                                                                
         L     R15,=F'-4'                                                       
         B     DQEXIT                                                           
*                                                                               
DQEXIT   LABEL ,                                                                
         PRETURN (R0,R1)                                                        
         PEND                                                                   
         TITLE 'WYLBUR''s SEG Routines'                                         
SEGCB    RECORD 'SEGCB'                                                         
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  SEGINITR/SEGINITB --                                                         
*    Routine to initialize the SEGCB control block.                             
*                                                                               
*    On entry:                                                                  
*      R1,R0 - location & length of seg buffer                                  
*      R15   - SEGCB ptr                                                        
*      @RAR  - adcon of processing routine                                      
*                                                                               
*  NOTE (01/23/91):                                                             
*  SEGINIT ROUTINE CHANGED TO SEGINIT AND                                       
*  SEGINITR.  THIS WAS DONE TO ELIMINATE THE                                    
*  PASSING THE ROUTINE AS AN INLINE 'DC A(ROUTINE)'.                            
*  SEGINITR SHOULD BE CALLED FIRST. IT CLEARS THE SEGCB.                        
*                                                                               
*                                                                               
SEGINIT  XPROC TRACE=NO                                                         
         WITH  (SEGCB,R15),BEGIN                                                
         CLEAR SEGCB               Init                                         
         ST    R0,SEGCBMAXF        Save max seg buffer length                   
         ST    R1,SEGCBLOC         ... and location                             
         END                                                                    
         PEND                                                                   
*                                                                               
*                                                                               
SEGINITR XPROC TRACE=NO                                                         
         WITH  (SEGCB,R15),BEGIN                                                
         ST    R0,SEGCBRTN         Save processing routine addr                 
         ST    R1,SEGCBERR         Save error recovery routine addr             
         END                                                                    
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGB -- Routine to add segment to buffer followed by a blank.                
*    (Same entry conventions as "SEG" routine below.)                           
*                                                                               
SEGB     XPROC TRACE=NO                                                         
         LR    R6,R15              Segcb ptr                                    
         ACALL SEG                                                              
         SEG   ' ',,(R6)                                                        
         PEND  ,                                                                
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  SEGTB -- Routine to add "trimmed" segment to buffer followed by              
*    a blank.  (Same entry conventions as "SEG" routine below.)                 
*                                                                               
SEGTB    XPROC TRACE=NO                                                         
         LR    R6,R15              Segcb ptr                                    
         ACALL SEGT                                                             
         SEG   ' ',,(R6)                                                        
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGCR -- Routine to add segment to buffer followed by a carriage             
*    return.  (Same entry conventions as "SEG" routine below.)                  
*                                                                               
SEGCR    XPROC TRACE=NO                                                         
         LR    R6,R15              Segcb ptr                                    
         ACALL SEG                                                              
*                                                                               
         WITH  (SEGCB,R6),BEGIN                                                 
         SET   SEGCBCR             Set function code for exit routine           
         L     R1,SEGCBLOC         Location of buffer                           
         L     R0,SEGCBLENF        Length                                       
         LR    R15,R6              Segcb ptr                                    
         COMMENT                   If user seg routine, call it                 
         IF    (SEGCBRTN,NE,0),BEGIN                                            
         LA    R14,SEGCBRTN                                                     
         CALLRTNP @R14                                                          
         END                                                                    
         ELSE  BEGIN                                                            
         SEG   X'15',,(R6)         Followed by a cr                             
         CLEAR R15                                                              
         END                                                                    
*                                                                               
         MVC   SEGCBMRKF,SEGCBLENF  Segmark                                     
*                                                                               
         SET   SEGCBSPP            Set function code for exit routine           
         LR    R15,R6                                                           
         CLEAR R0                  Pre-set good rc                              
         COMMENT                   If user seg routine, call it                 
         IF    (SEGCBRTN,NE,0),' LA  R14,SEGCBRTN; CALLRTNP @R14 '              
         END                                                                    
*                                                                               
         LTR   R15,R0              Set rc                                       
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGWR -- Routine to add (final) segment to buffer and write                  
*    contents.  (Same entry conventions as "SEG" routine below.)                
*                                                                               
SEGWR    XPROC TRACE=NO                                                         
         LR    R6,R15              Segcb ptr                                    
         ACALL SEG                                                              
         WITH  (SEGCB,R6),BEGIN                                                 
         SET   SEGCBWR             Set function code for exit routine           
         L     R1,SEGCBLOC         Start of buffer                              
         L     R0,SEGCBLENF        Length                                       
         LR    R15,R6              Segcb ptr                                    
         IF    (SEGCBRTN,NE,0),BEGIN  If user seg routine,                      
         LA    R14,SEGCBRTN                                                     
         CALLRTNP @R14              Go off to exit routine                      
         MVC   SEGCBLENF,=F'0'     Reset buffer (don't change cc)               
         MVC   SEGCBMRKF,=F'0'     Reset mark too                               
         END                                                                    
         ELSE  'CLEAR R15'         Set dummy rc                                 
         END                                                                    
*                                                                               
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEG/SEGT -- Routine to add segment to buffer.  SEGT entry will               
*    trim trailing blanks.                                                      
*                                                                               
*      On entry:                                                                
*        R1,R0 - location & length of segment                                   
*        R15 - SEGCB ptr                                                        
*                                                                               
*      On exit, R15 (and CC):                                                   
*        -4 - overflow occured                                                  
*         0 - normal                                                            
*                                                                               
SEGT     XPROC TRACE=NO                                                         
         LR    R6,R15                                                           
         USING SEGCB,R6                                                         
         IF    (R0,POS),BEGIN      Something to seg...                          
         LA    R1,@R1              Clear high byte                              
         LR    R2,R1                                                            
         AR    R2,R0                                                            
         DECR  R2                  Addr of last char                            
         WHILE ((R2,GE,R1),AND,(@R2,EQ,' ')),'DECR R2'                          
         SR    R2,R1                                                            
         LA    R0,@R2+1            Trimmed string len                           
         END                                                                    
         LR    R15,R6                                                           
         ACALL SEG                                                              
         PEND  ,                                                                
*                                                                               
SEG      XPROC TRACE=NO                                                         
         LR    R6,R15                                                           
*                                                                               
         SET   SEGCBSEG            Set function code for exit routine           
         COMMENT                   If user seg routine, call it                 
         IF    (SEGCBRTN,NE,0),' LA  R14,SEGCBRTN; CALLRTNP @R14 '              
*                                                                               
         CLEAR R5                  Set ok rc                                    
         IF    (R0,^POS),SEGEXIT   Skip if nothing to seg                       
         CEIL  R0,SEGCBMAXF        Max allowed                                  
         LR    R2,R1                                                            
         LR    R3,R0                                                            
*                                                                               
SEGRETRY CLEAR R5                  Init return code                             
         A     R0,SEGCBLENF        Calc new total length                        
         IF    (R0,GT,SEGCBMAXF),BEGIN  Overflow...                             
         SET   SEGCBOVF            Set function code for exit routine           
         L     R1,SEGCBLOC         Start of buffer                              
         LT    R0,SEGCBMRKF        Last marked position                         
         IF    NP,'L R0,SEGCBLENF' Use cur len if no mark                       
         LR    R15,R6              Segcb ptr                                    
         COMMENT                   If user seg routine, call it                 
         IF    (SEGCBRTN,NE,0),' LA  R14,SEGCBRTN; CALLRTNP @R14 '              
         IF    (R0,NEG),BEGIN      Exit processed something...                  
         CLEAR SEGCBMRKF           Clear mark                                   
         LCR   R0,R0               Amount processed                             
         L     R1,SEGCBLENF                                                     
         L     R14,SEGCBLOC                                                     
         IF    ('LT R15,SEGCBINDF',NZ),BEGIN  Indent...                         
         IF    (R15,LGE,SEGCBMAXF),EXIT                                         
         L     R1,=A(X'40000000')                                               
         MVCL  R14,R0              Pad with blanks                              
         L     R1,SEGCBLENF                                                     
         L     R15,SEGCBINDF                                                    
         END                                                                    
         SR    R1,R0               New buffer len                               
         AR    R15,R1              Including indentation                        
         ST    R15,SEGCBLENF                                                    
         IF    (R1,^POS),'LA R0,@R3(R15); B SEGDO'  add new segment             
         LR    R15,R1                                                           
         A     R0,SEGCBLOC                                                      
         MVCL  R14,R0              Move remaining text over                     
         LR    R0,R3               New segment len                              
         B     SEGRETRY            Try again                                    
         END                                                                    
         LR    R0,R3                                                            
         A     R0,SEGCBLENF        Re-calc total len                            
         IF    (R0,LE,SEGCBMAXF),SEGDO  It's ok now                             
         LH    R5,=H'-4'           Set return code                              
         S     R0,SEGCBMAXF        No. of chars that won't fit                  
         SR    R3,R0               Only seg as much as will fit                 
         BNP   SEGEXIT             Nothing will fit                             
         L     R0,SEGCBMAXF        New buffer len                               
         END                                                                    
SEGDO    L     R15,SEGCBLENF                                                    
         ST    R0,SEGCBLENF        Update length                                
         L     R0,SEGCBLOC                                                      
         AR    R0,R15              Insertion point                              
         LR    R1,R3               Len                                          
         MVCL  R0,R2               Move in segment                              
SEGEXIT  SET   SEGCBSPP            Set function code for exit routine           
         LR    R15,R6              Segcb ptr                                    
         LTR   R0,R5               Put rc in R0 for exit routine                
         COMMENT                   If user seg routine, call it                 
         IF    (SEGCBRTN,NE,0),' LA  R14,SEGCBRTN; CALLRTNP @R14 '              
         DROP  SEGCB                                                            
         LTR   R15,R0                                                           
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGCOL -- Routine to extend seg buffer to absolute column.                   
*                                                                               
*    On entry:                                                                  
*      R0  - column number                                                      
*      R15 - SEGCB ptr                                                          
*                                                                               
SEGCOL   XPROC TRACE=NO                                                         
         LR    R6,R15                                                           
         WITH  (SEGCB,R6),BEGIN                                                 
         DECR  R0                  Make rel to zero                             
         IF    (R0,GT,SEGCBMAXF),'L R0,SEGCBMAXF'                               
         L     R15,SEGCBLENF                                                    
         S     R15,SEGCBMRKF       Length from previous mark                    
         IF    ('SR R0,R15',POS),BEGIN                                          
         CEIL  R0,L'BLANKS                                                      
         SEG   BLANKS,(R0),(R6)                                                 
         END                                                                    
         ELSE  'SEG "  ",,(R6)'                                                 
         END                                                                    
         PEND                                                                   
*box                                                                            
*                                                                               
*  SEGBLANK -- Routine to add blanks to the seg buffer.                         
*                                                                               
*    On entry:                                                                  
*      R0  - no. of blanks to add                                               
*      R15 - SEGCB ptr                                                          
*                                                                               
SEGBLANK XPROC TRACE=NO                                                         
         LR    R6,R15                                                           
         WITH  (SEGCB,R6)                                                       
         LR    R5,R0                                                            
         WHILE (R5,GT,L'BLANKS),BEGIN                                           
         SEG   BLANKS,,(R6)                                                     
         SH    R5,=AL2(L'BLANKS)                                                
         END                                                                    
         SEG   BLANKS,(R5),(R6)                                                 
         PEND                                                                   
*                                                                               
BLANKS   DC    CL256' '                                                         
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGCLR -- Routine to reset seg buffer.                                       
*                                                                               
*    On entry:                                                                  
*      R15 - SEGCB ptr                                                          
*                                                                               
SEGCLR   XPROC TRACE=NO                                                         
         LR    R6,R15                                                           
         WITH  (SEGCB,R6),BEGIN                                                 
         SET   SEGCBCLR            Set function code for exit routine           
         COMMENT                   If user seg routine, call it                 
         IF    (SEGCBRTN,NE,0),' LA  R14,SEGCBRTN; CALLRTNP @R14 '              
         CLEAR SEGCBLENF,SEGCBMRKF                                              
         END                                                                    
         PEND                                                                   
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  SEGMARK -- Routine to mark current location in seg buffer.                   
*                                                                               
*    On entry:                                                                  
*      R15 - SEGCB ptr                                                          
*                                                                               
SEGMARK  XPROC TRACE=NO                                                         
         WITH  (SEGCB,R15),'MVC SEGCBMRKF,SEGCBLENF'                            
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGDC -- Routine to add number in decimal to seg buffer.                     
*                                                                               
*    On entry:                                                                  
*      R1 - number; R0 - length                                                 
*      R15 - SEGCB ptr                                                          
*                                                                               
SEGDC    XPROC TRACE=NO                                                         
         LR    R6,R15              Save segcb ptr                               
         XPUSH ,,20,PTR=R2                                                      
         LR    R15,R1                                                           
         BTD   (R2),(R0),(R15)     Convert to printable format                  
         SEG   (R1),(R0),(R6)                                                   
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*  SEGHX -- Routine to add number in hex to seg buffer.                         
*                                                                               
*    On entry:                                                                  
*      R1 - number; R0 - length                                                 
*      R15 - SEGCB ptr                                                          
*                                                                               
SEGHX    XPROC TRACE=NO                                                         
         LR    R6,R15              Save segcb ptr                               
         XPUSH ,,20,PTR=R2                                                      
         LR    R15,R1                                                           
         BTX   (R2),(R0),(R15)     Convert to printable format                  
         SEG   (R1),(R0),(R6)                                                   
         PEND  ,                                                                
         SPACE 2                                                                
*                                                                               
         QLTORG                                                                 
         END   .                                                                
