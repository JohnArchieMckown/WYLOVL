TERM     TITLE 'WYLBUR''s Terminal Routines'                                    
*******************************************************************             
*                                                                 *             
*     WYLBUR/370 - Release VI - Class I - Stanford Proprietary    *             
*                                                                 *             
*******************************************************************             
         HIBAL                                                                  
*                                                                               
WYLTERM  CSECT                                                                  
TERM     IDENT 2193                15:11:57 07/12/02  (SLP)                     
*                                                                               
         REGS  FSR,,,,,JCBR,,BR,(WAR,LSR),PAR,PBR,CPR,CVR,SPR,RAR               
*                                                                               
         SYSDEFN                                                                
*                                                                               
         PUSH  DSECTS                                                           
         COPY  CONTROL             Copy CV/CP                                   
*                                                                               
         TITLE 'DSECTS'                                                         
         RECORD 'KWRRSC'                                                        
         EJECT                                                                  
PATHD    RECORD BEGIN                                                           
         PATH  VERSION=2                                                        
         END                                                                    
         EJECT                                                                  
         COPY  RSCGROUP                                                         
         EJECT                                                                  
RDWD     RECORD 'RDW'                                                           
         EJECT                                                                  
PDB      RECORD BEGIN                                                           
         PDB                                                                    
         END                                                                    
         EJECT                                                                  
JCB      RECORD BEGIN                                                           
         COPY  JCB                                                              
         END                                                                    
CELLBLOK RECORD BEGIN                                                           
         CELLBLOK DSECT=YES                                                     
         END                                                                    
*                                                                               
         POP   DSECTS                                                           
SEGCB    RECORD 'SEGCB'                                                         
         EJECT                                                                  
WYLTERM  CSECT                                                                  
***                                                                             
***  MILTEN Information.                                                        
***                                                                             
MILINFO  DS    0D                                                               
         PDB   TYPE=FORMAT,PFX=MQR                                              
*                                                                               
MILPATH  PATH  VERSION=2,MYTAG=WYLBUR,YOURTAG=MILTEN,BUFSIZE=*-*,      *        
               ECB=*-*,FLAG=MILSFLAG,PFX=MILP                                   
*                                                                               
MILFLAG  DC    X'00'               WYLBUR's copy of path post flags             
MILSFLAG DC    X'00'               SUZAN's copy of path post flags              
MILZFLAG DC    X'00'               Zero constant to zero post flags             
         DC    X'00'               Extra byte to round out zero byte            
*                                                                               
MILPTRS  DS    2A                  Retreive/free Suzan ptrs                     
*                                                                               
* Terminal seg buffer quantum                                                   
*                                                                               
TSEGBQNT EQU   2048                TSEG buffer allocation quantum               
*                                                                               
         EJECT                                                                  
         AIF   (&$PCODE).NOINIT    *** PCODE                                    
TINITWA  RECORD BEGIN                                                           
TINPDB   DS    XL(L'PDBHDR)        PDB work area                                
*                                                                               
TINSENDX DS    D                   Suzan send loc, len                          
         END                                                                    
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  TSEGPLIN -- Routine to initialize the TSEG buffer pool.                      
*              Called by the INIT module.                                       
*                                                                               
TSEGPLIN XPROC                                                                  
*                                                                               
*  Initialize the terminal seg buffer pool                                      
*                                                                               
         L     R1,=A(CPSEGMX#)     Max buffer size (bytes)                      
         CLEAR R0                                                               
         LA    R2,TSEGBQNT         Allocation mult (bytes)                      
         DR    R0,R2               Number of cell blocks needed                 
         IF    (R0,NZ),'LA R1,1(,R1)'                                           
         LR    R3,R1               Save for loop                                
         M     R0,=A(L'CELLBLOK)                                                
         GETMAIN RU,LV=(1),LOC=ANY Get cell blocks                              
         ST    R1,CVTSEGPL         Save it                                      
         WHILE (R3,GT,0),BEGIN                                                  
         WITH  (CELLBLOK,R1)                                                    
         MVC   CELLBLOK,MODLCELL                                                
         ST    R2,CELSIZE                                                       
         LA    R2,TSEGBQNT(,R2)                                                 
         BCTR  R3,0                                                             
         LA    R1,L'CELLBLOK(,R1)                                               
         END                                                                    
         PEND                                                                   
MODLCELL CELLBLOK SIZE=1                                                        
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TERMINIT -- Routine to initialize the path to MILTEN.                        
*      Called by the INIT module.                                               
*                                                                               
TERMINIT XPROC TINITWA                                                          
*                                                                               
         L     R6,=A(MILINFO)      Resource entry                               
         WITH  (MILINFO,R6)                                                     
*-                                                                              
*-       Setup Suzan path to MILTEN.                                            
*-                                                                              
         LA    R3,MILPATH          Suzan path                                   
         WITH  (PATHD,R3),BEGIN                                                 
         LA    R15,CVECB                                                        
         ST    R15,PATHECB         Save ECB ptr                                 
         MVC   PATHMY,=CL8'SUBSYS'                                              
         MVC   PATHPASS,=CL4'PSUB'                                              
         IF    CVFTMIL,'MVI PATHPASS,C"T"'                                      
         MVC   PATHYOU,=CL8'MILTEN'                                             
         MVC   PATHBUF,CVMBUFF     Set MILTEN buffer size                       
         END                                                                    
*-                                                                              
*-       Open Suzan path.                                                       
*-                                                                              
         ST    R3,@R13             A(MILPATH)                                   
         SET   @R13.X'80'          End of Suzan parm list                       
         SCOM  OPEN,(R13)          Open path                                    
         FAIL  (R15,NZ),MILPBAD,'MILTEN Path init error.'                       
         IF    ^MILSFLAG.PATHFOPN,BEGIN  Path not yet open...                   
         XWTO  'Waiting for MILTEN.'                                            
         END                                                                    
         WAIT  ECB=CVECB                                                        
         CLEAR CVECB               Clear ECB                                    
         CLEAR MILSFLAG.PATHFOPN   Turn off path open flag                      
*-                                                                              
*-       Send subsystem initialization call.                                    
*-                                                                              
         LA    R5,TINPDB                                                        
         WITH  (PDB,R5),BEGIN                                                   
         CLEAR PDBHDR                                                           
         MVI   PDBCMD,TMILINIT     Set to init call                             
         MVI   PDBCMDFL,INITFPRV   Priv'd subsystem                             
         MVC   PDBSYSNM,CVWYLSSN   Set subsystem name                           
         MVC   PDBLENG,=AL2(L'PDBHDR)  Set PDB length                           
         END                                                                    
*                                                                               
         CLEAR TINSENDX            Suzan loc,len parm list                      
         ST    R5,TINSENDX         Transaction loc                              
         SET   TINSENDX.X'80'      Last parameter                               
         SCOM  SEND,TINSENDX,MILPMGC  Announce ourselves                        
         FAIL  (R15,NZ),MILTBAD,'MILTEN is not active.'                         
         PEND                                                                   
         QLTORG                                                                 
         EJECT                                                                  
         TITLE 'WYLBUR''s Terminal Routines'                                    
*box                                                                            
*                                                                               
*  TSEG -- Routine to do TSEG with no special options.  Right now               
*    all this routine does is load the default CPSEG SEGCB pointer              
*    and then call the general seg routine.  A special optimized                
*    seg routine could be added here.  (See seg routines in                     
*    &WYL.CR.)                                                                  
*                                                                               
*    On entry:                                                                  
*      R1,R0 - text loc, len                                                    
*                                                                               
*    On exit:                                                                   
*      same as general seg routine                                              
*                                                                               
         ENTRY TSEG                                                             
*-                                                                              
*-      Standard PROC/PEND entry/exit macros are not used to try and            
*-       reduce the number of instructions needed for this preamble             
*-       caller code.  It could be changed; it's not a big deal.                
*-                                                                              
TSEG     ST    RAR,@R13            Save return addr                             
         LA    R13,@R13+4          Kick stack                                   
*                                                                               
         BASR  R15,0                                                            
         WITH  (*,R15),'L RAR,TSEGX'                                            
         LA    R15,CPSEG           Default SEGCB ptr                            
         BASR  RAR,RAR             Call general seg routine                     
*                                                                               
         DECR  R13                 (No addressability)                          
         DECR  R13                 (No changing the cond code)                  
         DECR  R13                                                              
         DECR  R13                                                              
         L     RAR,@R13            Original return addr                         
         BR    RAR                                                              
*                                                                               
TSEGX    DC    V(SEG)              General seg routine                          
.NOINIT  ANOP  .                   *** PCODE                                    
         EJECT                                                                  
TWA      RECORD BEGIN                                                           
         XSA   R2,R8                                                            
*                                                                               
TWALFLAG FLAG                                                                   
         FLAG  TWAFQUI             - QUIET was in effect                        
*                                                                               
TWATMOUT DS    F                   Timeout value                                
TWAINIT  EQU   TWALFLAG,*-TWALFLAG,C'X'                                         
*                                                                               
TWAPDB   DS    0F                                                               
         PDB   PFX=TWA,TYPE=FORMAT                                              
         END                                                                    
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TERMSEG -- Routine to do the processing of TSEG/TWRITE.  It is               
*    entered as a SEG exit routine, with the SEGCB containing                   
*    a flag indicating what kind of action is desired.                          
*                                                                               
*    On entry:                                                                  
*      R15 - SEGCB ptr                                                          
*                                                                               
*    On exit:                                                                   
*      R0 - complemented; amount of text processed (for OVF)                    
*                                                                               
TERMSEG  XPROC TWA                                                              
         WITH  (SEGCB,R15),BEGIN                                                
         IF    SEGCBSEG,'EXIT TERMSEG'  Quickly, scram                          
         END                                                                    
*                                                                               
         LA    R5,TWA                                                           
         USING TWA,R5                                                           
         LR    R6,R15                                                           
         USING SEGCB,R6                                                         
*-                                                                              
*-       Seg post-processing.                                                   
*-                                                                              
         IF    SEGCBSPP,BEGIN      Post-processing...                           
         L     JCBR,CVCURJCB       Our JCB                                      
         WITH  JCB,BEGIN                                                        
         CLEAR R0                  Return code goes in R0                       
         IF    JCBFATTN,'LA R0,1'  Break return code                            
         IF    JCBAFALO,'LH R0,=H"-4"'  logging off                             
         END                                                                    
         B     TSEXIT                                                           
         END                                                                    
*-                                                                              
*-       SEGCR                                                                  
*-                                                                              
         IF    SEGCBCR,BEGIN       Add CR to buffer...                          
*                                                                               
         IF    (CPFWTO,OR,CVFINIT),BEGIN  WTO text now...                       
         IF    CPFDUMP,EXIT        Don't do it if DUMP                          
*                                                                               
         L     R4,SEGCBLENF        Buffer length                                
         ACALL TERMWTO             WTO text                                     
         CLEAR CPSEGLENF,CPSEGMRKF Text has been processed                      
         B     TSEXIT                                                           
         END                                                                    
*                                                                               
         SEG   X'15',,SEGCB        Add CR                                       
         B     TSEXIT                                                           
         END                                                                    
*-                                                                              
*-       SEGWR (or overflow)                                                    
*-                                                                              
         IF    (SEGCBWR,OR,SEGCBOVF),BEGIN  Segwr...                            
*                                                                               
         IF    CPFIATTN,BEGIN      Intermediate attn...                         
         CLEAR CPSEGLENF,CPSEGMRKF  Ignore text                                 
         IF    SEGCBWR,'CLEAR CPFIATTN'                                         
         END                                                                    
*                                                                               
         IF    SEGCBWR,BEGIN       Add a final CR...                            
         IF    (SEGCBLENF,Z),'CLEAR R4,R3; B TWRDONE'  Nothing                  
         IF    (CPFWTO,OR,CVFINIT),EXIT  No CR if WTO mode                      
         IF    (SEGCBLENF,EQ,SEGCBMRKF),EXIT  Just marked, forget it            
         IF    (^CPFDISP,AND,^CPFNONL),'SEG X"15",,SEGCB'                       
         END                                                                    
*                                                                               
         L     R3,SEGCBLENF        Buffer length (for later)                    
         LR    R4,R3                                                            
*                                                                               
         IF    SEGCBOVF,BEGIN      Back up if overflow...                       
         LT    R15,SEGCBMRKF       Length at last mark                          
         IF    POS,'LR R4,R15; ST R4,SEGCBLENF'  Last marked spot               
         END                                                                    
*                                                                               
         IF    (R3,NZ),BEGIN       Something to write...                        
         IF    CPFDUMP,'ACALL TWSTOW'  Write text to ACTIVE file                
         ELSEIF CPFQUIET,'CLEAR R15'   Don't do anything                        
         ELSEIF (CPFWTO,OR,CVFINIT),'ACALL TERMWTO'  WTO text                   
         ELSEIF (CPFXDUMP,AND,CPFEXEC),' ACALL TXDUMP '                         
         ELSEIF CPFXQT,' CLEAR R15 '                                            
         ELSEIF (CPFWTO,OR,CVFINIT),'ACALL TERMWTO'  WTO text                   
         ELSE  'ACALL TERMWR'      Write text to the terminal                   
         END                                                                    
*                                                                               
TWRDONE  TSTAT                                                                  
*                                                                               
         ST    R3,SEGCBLENF        Restore length                               
         LCR   R0,R4               Amount of text processed                     
         B     TSEXIT                                                           
         END                                                                    
*                                                                               
TSEXIT   LABEL ,                                                                
         PRETURN (R0)                                                           
         PEND  ,                                                                
         EJECT                                                                  
         AIF   (&$PCODE).NOTRMWTO  *** PCODE                                    
TWTOWA   RECORD BEGIN                                                           
TWTOPARM DS    X                   MILSERV: Must be zero                        
TWTOACCT DS    CL5                 MILSERV: Account (uuugg)                     
TWTOPFX  EQU   TWTOPARM,*-TWTOPARM,C'X'                                         
TWTOBUF  DS    CL120               Working text buffer                          
         END                                                                    
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  TERMWTO -- Local routine to WTO the current seg buffer.                      
*                                                                               
TERMWTO  PROC  ,                                                                
         CEIL  R4,80                                                            
         XPUSH ,,90,PTR=R1                                                      
         LA    R2,@R4+4                                                         
         STH   R2,@R1              Length                                       
         MVC   @R1+2(2),=X'8000'   MCS header                                   
         L     R3,CPSEGLOC                                                      
         LR    R15,R4                                                           
         MOVE  R15,@R1+4,@R3       WTO text                                     
         LA    R2,@R1(R2)                                                       
         MVC   @R2(4),=X'00004000'  Routcde=2                                   
*         IF    CVFTEST,BEGIN                                                   
         MVC   @R2(4),=X'00000020'  Routcde=11 (wtp)                            
*         END                                                                   
         WTO   MF=(E,(1))                                                       
         XPOP  ,,90                                                             
*-                                                                              
*-       Do MILSERV NOTIFY (for test systems).                                  
*-                                                                              
         IF    (CVNOTIFY,NZ),BEGIN  We have an account to notify...             
         XPUSH ,,L'SEGCB,PTR=R3                                                 
         XPUSH ,,L'TWTOWA,PTR=R2                                                
*                                                                               
         WITH  (TWTOWA,R2)                                                      
         SEGINIT TWTOBUF,,(R3)     Initialize working seg buffer                
         SEG   'From '                                                          
         SEGT  CVWYLSSN            (WYLBUR)                                     
         SEG   ': '                                                             
         SEGT  L:SEGCBLOC,L:SEGCBLENF                                           
*                                                                               
         CLEAR TWTOPARM            Clear MILSERV parm                           
         MVC   TWTOACCT,CVNOTIFY   Set notification account                     
*                                                                               
         LA    R0,L'TWTOPFX        MILSERV prefix                               
         A     R0,SEGCBLENF-SEGCB(R3)  MILSERV parm length                      
         MILSERV TWTOPARM,(R0),LA:2  Send message to the owner                  
*                                                                               
         XPOP  ,,L'TWTOWA                                                       
         XPOP  ,,L'SEGCB                                                        
         END                                                                    
*                                                                               
         PEND                                                                   
.NOTRMWTO ANOP  ,                  *** PCODE                                    
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TERMWR -- Local routine to write the current seg buffer to                   
*    the terminal.                                                              
*                                                                               
TERMWR   PROC  ,                                                                
         IF    (CPVFPAGE,AND,^CPFDISP),BEGIN  Reset page mode...                
         VCALL PAGERES             Switch back to line mode                     
         END                                                                    
         CLEAR CPVFPEND            Don't return to page mode                    
*                                                                               
         SET   CPGFWR                                                           
         CLEAR CPEXCMCT            Zero exec command count                      
         LA    R1,TWAPDB                                                        
         ACALL BUILDPDB            Build PDB header                             
*                                                                               
         MVI   TWACMD,TMILWRIT     Set I/O code                                 
         LA    R1,TWAPDB                                                        
         ACALL TIO                 Send PDB                                     
*-                                                                              
*-    After doing terminal I/O we may not know the current rendition            
*-        because an attention might have stopped the I/O before the            
*-         final SET GRAPHIC RENDITION was sent, so we must clear               
*-         CPREND now.                                                          
*-                                                                              
         IF    TWACPLA.CPLAATTN,'CLEAR CPREND'  Reset current rend              
***                                                                             
***  Process terminal write completion.                                         
***                                                                             
*-                                                                              
*-       This terminal can not handle this request.                             
*-       This usually happens when a display mode request is sent to            
*-          a terminal or front-end which is not capable of handling            
*-          full screen I/O's.                                                  
*-                                                                              
         IF    TWACPLB.CPLBILT,BEGIN  Terminal can't do this...                 
         IF    CPFDISP,BEGIN       Display mode on non-display fe...            
         CLEAR CPFDISP             Reset display mode I/O                       
         CLEAR CPVFPAGE+CPVFPEND   Try not to do this again                     
         TSEG  'This terminal or controller does not support '                  
         TSEG  'full screen requests.'                                          
         END                                                                    
*                                                                               
         B     CVABORT             Scram                                        
         END                                                                    
*                                                                               
         IF    (SEGCBOVF,AND,TWACPLA.CPLAATTN),'SET CPFIATTN'                   
*                                                                               
         IF    ('LT R15,CPSEGLENF',POS),BEGIN  Maybe a new cmd...               
         IF    CPFEXEC,BEGIN                                                    
         IF    ((CPEXATTN,Z),AND,(CPEXABRT,Z)),EXIT                             
         SET   CPFABORT            Always ABORT                                 
         B     PUNTCMD             Skip command processing                      
         END                                                                    
         CEIL  R15,L'CPCMD                                                      
         CLEAR CPGFCMDA            Assume line didn't end with attn             
         IF    TWACPLA.CPLAATTN,'SET CPGFCMDA'  Ended with attn                 
         STH   R15,CPCMDLEN                                                     
         L     R1,CPSEGLOC                                                      
         MOVE  R15,CPCMD,@R1       Save new command                             
*                                                                               
         L     R2,CVCURJCB                                                      
         WITH  (JCB,R2),BEGIN                                                   
         IF    JCBFNATN,'SET JCBFPATN'  Set pending attn                        
         ELSE  'SET JCBFATTN'      Regular attn                                 
         END                                                                    
         SET   CPFIATTN            Ignore following writes                      
*                                                                               
         SET   CPFABORT            Abort any exec file                          
         SET   CPGFNCMD            New command is waiting                       
         END                                                                    
PUNTCMD  PEND  ,                                                                
         DROP  SEGCB,TWA                                                        
*                                                                               
         QLTORG                                                                 
*                                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TCURS -- Routine to seg cursor addressing characters.                        
*                                                                               
*    On entry:                                                                  
*      R0 - row                                                                 
*      R1 - column                                                              
*                                                                               
*  Note: Row and columns are relative to one (not zero).                        
*                                                                               
TCURS    XPROC                                                                  
         LTR   R5,R0               Save row...                                  
         IF    NP,'LA R5,1'                                                     
*                                                                               
         LTR   R4,R1               ...and column                                
         IF    NP,'LA R4,1'                                                     
*                                                                               
         TSEG  X'27AD'             CSI (ESC [)                                  
         IF    (R5,NE,1),'TNUM (R5)'  Row (horizontal)                          
         IF    (R4,NE,1),'TSEG ";"; TNUM (R4)'  Column (vertical)               
         TSEG  'f'                 Position cursor verb                         
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TREND -- Routine to set the rendition for text which follows.                
*                                                                               
*    On entry:                                                                  
*      R15 - offset in TTYPE entry for rendition text                           
*                                                                               
TRENDWA  RECORD BEGIN                                                           
TRENDNEW DS    CL(L'CPREND)        New rendition to set                         
         END                                                                    
*-                                                                              
TREND    XPROC TRENDWA                                                          
         MVC   TRENDNEW,CVBLANKS                                                
*                                                                               
         LT    R1,CPTTYPEP         Our TTYPE entry                              
         IF    NZ,BEGIN                                                         
         AR    R1,R15              Ptr to rendition text                        
         MVC   TRENDNEW,@R1                                                     
         END                                                                    
*                                                                               
         IF    (CPREND,NE,TRENDNEW),BEGIN  Changing renditions...               
         TSEG  X'27AD'             CSI sequence                                 
         IF    (TRENDNEW,NZ),'TSEG TRENDNEW,,T'                                 
         TSEG  'm'                 Set graphic rendition                        
*                                                                               
         MVC   CPREND,TRENDNEW     Save new rendition                           
         END                                                                    
*                                                                               
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TREAD -- Routine to do a read from the terminal.                             
*                                                                               
*    On entry:                                                                  
*      R1,R0 - prompt text loc, len                                             
*      CPSEG - contains prompt text                                             
*      R15 - timeout value in .01 seconds (0=no timeout)                        
*                                                                               
*    On exit:                                                                   
*      R1,R0 - input text (in the CPSEG buffer)                                 
*      R15 (and cc) - return code:                                              
*                       0 = ok                                                  
*                      -4 = logging off                                         
*                     pos = ended by PFn                                        
*                     101 = ended by reverse break                              
*                                                                               
TREADQ   XPROC ,                   READ WITH PROMPT QUESTION MARK               
         LA    R2,1                TREADQ                                       
         ACALL TREADCOM                                                         
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
*                                                                               
*                                                                               
*                                                                               
TREAD    XPROC ,                                                                
         CLEAR R2                  TREAD                                        
         ACALL TREADCOM                                                         
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
*                                                                               
* COMMON TREAD CODE                                                             
*                                                                               
*                                                                               
TREADCOM PROC  TWA                                                              
*                                                                               
         CLEAR TWAINIT                                                          
         ST    R15,TWATMOUT        Save timeout value                           
         IF    CPFQUIET,'SET TWAFQUI; CLEAR CPFQUIET'                           
         TSEG  (R1),(R0)           Prompt text                                  
*                                                                               
         COMMENT                   IF TREADQ, APPEND '?'                        
         IF    (R2,EQ,1),BEGIN                                                  
         TSEG  '? '                Append "? " text                             
         END                                                                    
*                                                                               
         CLEAR CPEXCMCT            Zero exec command count                      
*-                                                                              
*-       A write attention has occurred, report that.                           
*-                                                                              
         IF    CPFIATTN,BEGIN      Intermediate attn...                         
         CLEAR CPFIATTN                                                         
         TCLEAR                                                                 
         LA    R15,1               Break return code                            
         B     TRDEXIT                                                          
         END                                                                    
*                                                                               
         IF    (CPVFPAGE,AND,^CPFDISP),BEGIN  Reset page mode...                
         VCALL PAGERES             Switch back to line mode                     
         SET   CPVFPEND            Return to page mode later                    
         END                                                                    
*-                                                                              
*-       Save the prompt text in case we have to re-prompt.                     
*-                                                                              
         L     R5,CPSEGLENF                                                     
         S     R5,CPSEGMRKF                                                     
         IF    NP,'L R5,CPSEGLENF'                                              
         CEIL  R5,255                                                           
*                                                                               
         XPUSH ,,(R5),PTR=R6       Room for last line (the prompt)              
         LR    R15,R5                                                           
         L     R1,CPSEGLOC                                                      
         A     R1,CPSEGLENF                                                     
         SR    R1,R15                                                           
         MOVE  R15,@R6,@R1         Save prompt text                             
*                                                                               
TRDDO    L     R15,CVCURJCB                                                     
         WITH  (JCB,R15),'CLEAR JCBFATTN'                                       
         CLEAR CPFIATTN                                                         
*-                                                                              
*-       Don't do terminal read if user is already logging off.                 
*-                                                                              
         IF    ('TSTAT',NEG),TRDLGF  logging off                                
*-                                                                              
*-       If we are in initialization (running the pseudo-user), then            
*-         return ATTN to the terminal read request.                            
*-                                                                              
         IF    CVFINIT,BEGIN       In initialization...                         
         TSEG  '<ATTN>'                                                         
         TWRITE                                                                 
*                                                                               
         TCLEAR ,                  Nothing in the seg buffer                    
         LA    R15,1               Read ended by BREAK (faked)                  
         B     TRDEXIT                                                          
         END                                                                    
*-                                                                              
*-       Send the terminal read request to MILTEN.                              
*-                                                                              
         LA    R1,TWAPDB                                                        
         ACALL BUILDPDB                                                         
*                                                                               
         MVI   TWACMD,TMILREAD                                                  
         IF    (^CPFDISP,AND,^CPFTRAN),'MVC TWAINCT,=H"256"'                    
         IF    (CPTRMIN,NZ),'MVC TWAINCT,CPTRMIN'  Set input length             
         L     R2,CPSEGLENF                                                     
         L     R15,CPSEGMRKF                                                    
         SR    R2,R15                                                           
         STH   R15,TWAWC           Set write count                              
         STH   R2,TWAPC            Set prompt count                             
*                                                                               
         AIF   (&$PCODE).NEWREAD   *** PCODE                                    
         L     R2,CVCURJCB                                                      
         WITH  (JCB,R2),BEGIN                                                   
*-                                                                              
*-   Put user paths on active queue if they can interrupt a terminal            
*-         read.                                                                
*-                                                                              
         IF    CPFTINT,BEGIN       Terminal read is interruptible...            
         VCALL PATHQ               Put paths on active queue                    
         IF    NZ,BEGIN            Path already posted...                       
         TCLEAR                                                                 
         LA    R15,101             Reverse break return code                    
         B     TRDEXIT                                                          
         END                                                                    
*                                                                               
         VCALL NPATQ               Ditto for net paths                          
         IF    NZ,BEGIN            Path already posted...                       
         VCALL PATHDEQ             Dequeue user paths                           
         TCLEAR                                                                 
         LA    R15,101             Reverse break return code                    
         B     TRDEXIT                                                          
         END                                                                    
*                                                                               
         SET   JCBFTINT            Doing interruptible read now                 
         END                                                                    
*-                                                                              
*-       Set up a timer if there is a timeout value.                            
*-                                                                              
         FAIL  (JCBTIMID,NZ),TRDERR,'Read timer logic error.'                   
*                                                                               
         LT    R15,TWATMOUT        Timeout value in .01 secs                    
         IF    POS,BEGIN           We have a timeout...                         
         SET   JCBFTBRK            Send TBREAK when timeout occurs              
         L     R0,=A(WAITEXIT)     Exit routine                                 
         LA    R1,JCB              JCB is the param for exit routine            
         ACALL TIMERQ              Queue the timer                              
         ST    R15,JCBTIMID        Save our timer ID                            
         END                                                                    
*-                                                                              
*-       Send terminal read PDB to Milten.                                      
*-                                                                              
         LA    R1,TWAPDB                                                        
         ACALL TIO                 Send PDB                                     
*-                                                                              
*-       Cleanup timeout timer.                                                 
*-                                                                              
         CLEAR JCBFTBRK            Reset timer means tbreak flag                
         LT    R15,JCBTIMID        Do we have a timeout timer?                  
         IF    NZ,BEGIN            Yes, dequeue it...                           
         CLEAR JCBTIMID            Clear timer ID                               
         VCALL TIMERDQ             Dequeue timer                                
         END                                                                    
*-                                                                              
*-       Cleanup after interruptible read completion.                           
*-                                                                              
         IF    CPFTINT,BEGIN       Dequeue paths...                             
         CLEAR JCBFTINT            Not doing interruptible read                 
         VCALL PATHDEQ             Dequeue paths from disp queue                
         VCALL NPATDEQ             Dequeue net paths too                        
         END                                                                    
         END                                                                    
         AGO   .ENDREAD            *** PCODE                                    
.NEWREAD ANOP                      *** PCODE                                    
*        Send terminal read PDB to Milten.                                      
         LA    R1,TWAPDB                                                        
         ACALL TIO                 Send PDB                                     
.ENDREAD ANOP ,                    *** PCODE                                    
*-                                                                              
*-    After doing terminal I/O we may not know the current rendition            
*-        because an attention might have stopped the I/O before the            
*-         final SET GRAPHIC RENDITION was sent, so we must clear               
*-         CPREND now.                                                          
*-                                                                              
         IF    TWACPLA.CPLAATTN,'CLEAR CPREND'  Reset current rend              
***                                                                             
***  Process terminal read completion.                                          
***                                                                             
         IF    ('LTH R2,TWAPC',NZ),BEGIN  MILTEN returns the prompt...          
         L     R15,CPSEGLENF                                                    
         SR    R15,R2              Amount of actual read text                   
         ST    R15,CPSEGLENF                                                    
         L     R3,CPSEGLOC                                                      
         MOVEL (R3),@R3(R2),(R15)  Remove the prompt                            
         END                                                                    
*-                                                                              
*-       Read ended with logging off status.                                    
*-                                                                              
         IF    TWACPLB.CPLBLGF,BEGIN  logging off...                            
TRDLGF   CLEAR CPSEGLENF           No input text                                
         LH    R15,=H'-8'                                                       
         B     TRDEXIT                                                          
         END                                                                    
*-                                                                              
*-       Read ended because front-end can not do it.                            
*-       This usually happens when a display mode request is sent to            
*-          a terminal or front-end which is not capable of handling            
*-          full screen I/O's.                                                  
*-                                                                              
         IF    TWACPLB.CPLBILT,BEGIN  Terminal can't do this...                 
         IF    CPFDISP,BEGIN       Display mode on non-display fe...            
         CLEAR CPFDISP             Reset display mode I/O                       
         CLEAR CPVFPAGE+CPVFPEND   Try not to do this again                     
         TSEG  'This terminal or controller does not support '                  
         TSEG  'full screen requests.'                                          
         END                                                                    
*                                                                               
         B     CVABORT             Scram                                        
         END                                                                    
*-                                                                              
*-       Read ended with reverse break.                                         
*-                                                                              
         IF    TWACPLA.CPLABRK,BEGIN  Ended by reverse break...                 
         LA    R15,101             Ended with break from system                 
         B     TRDEXIT             Scram                                        
         END                                                                    
*                                                                               
         IF    CPFTRAN,BEGIN       Transparent read completion...               
         CLEAR R15                 Normal completion                            
         IF    TWACPLA.CPLAATTN,'LA R15,1'  Attn                                
         B     TRDEXIT                                                          
         END                                                                    
*                                                                               
         IF    TWACPLA.CPLAIOE,BEGIN  I/O error...                              
         TCLEAR                                                                 
         TSEG  'Transmission error.  '                                          
         SETMSG 'Re-enter.'                                                     
         IF    (CPSACCT,Z),BEGIN                                                
         SETMSG 'Expecting terminal parity setting of even.'                    
         END                                                                    
         B     TRDLOOP                                                          
         END                                                                    
*                                                                               
         IF    TWACPLA.CPLAUST,BEGIN  unset tabs...                             
         TCLEAR                                                                 
         SETMSG 'Tabs are not set.  Re-enter.'                                  
TRDLOOP  TSEG  (R1),(R0),CR                                                     
         TSEG  (R6),(R5)           Original prompt line                         
         B     TRDDO                                                            
         END                                                                    
*                                                                               
         IF    TWACPLA.CPLAATTN,BEGIN  Break/attn...                            
         IF    (CPSEGLENF,Z),'LA R15,1; B TRDEXIT'                              
         IF    CPFDISP,'LA R15,1; B TRDEXIT'                                    
         IF    CPFNSTAR,'LA R15,1; B TRDEXIT'                                   
*                                                                               
         L     R15,CVCURJCB                                                     
         WITH  (JCB,R15),'CLEAR JCBFATTN+JCBFPATN'                              
*                                                                               
         L     R15,CPSEGLENF                                                    
         DECR  R15                                                              
         L     R1,CPSEGLOC                                                      
         LA    R1,@R1(R15)                                                      
         IF    (@R1,EQ,'?'),BEGIN  ?break...                                    
         IF    (R15,NZ),EXIT                                                    
         ST    R15,CPSEGLENF                                                    
         LA    R15,2               Equivalent to PF2                            
         B     TRDEXIT                                                          
         END                                                                    
*                                                                               
         IF    (@R1,EQ,'@'),BEGIN  @break...                                    
         ST    R15,CPSEGLENF                                                    
         LA    R15,3               Equivalent to PF3                            
         B     TRDEXIT                                                          
         END                                                                    
*                                                                               
         TCLEAR                                                                 
         TSEG  (R6),(R5)           Re-prompt                                    
         B     TRDDO                                                            
         END                                                                    
*                                                                               
         CLEAR R15                                                              
TRDEXIT  SETMSG L:CPSEGLOC,L:CPSEGLENF                                          
*                                                                               
         XPUSH R15,R1                                                           
         TCLEAR                                                                 
         IF    TWAFQUI,'SET CPFQUIET'  Restore QUIET setting                    
         XPOP  R15,R1                                                           
*                                                                               
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TIDLEWR -- Routine to do a TWRITE if there has been more than                
*    a little bit of elapsed time since the last terminal I/O.                  
*                                                                               
*    This is used for commands like LIST that want to build large               
*    write buffers, but also want partial buffers to be written                 
*    if more than a little time has gone by.                                    
*                                                                               
TIDLEWR  XPROC                                                                  
         CLEAR R15                 Preset good return code                      
*                                                                               
         IF    (CPSEGLENF,NZ),BEGIN  Only if stuff to write...                  
         STCK  @R13                Current TOD                                  
         L     R2,@R13             Pick up time                                 
         SL    R2,CPTIOCLK         Number of seconds since last I/O             
         IF    (R2,LE,TSECS),EXIT  Not enough time, forget it                   
         INCR  R15,CVNTIDLE        Count TIDLE writes                           
         TWRITE                                                                 
         END                                                                    
         PEND                                                                   
*                                                                               
TSECS    DC    F'10'               Over 10 seconds is too long                  
         AIF   (&$PCODE).NOTMISC   *** PCODE                                    
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TASWRITE -- Routine to send asynchronous write to another                    
*    session.                                                                   
*                                                                               
*    On entry:                                                                  
*      R1 - session id                                                          
*                                                                               
*    On exit, R15 (and CC):                                                     
*      -4 - invalid session no.                                                 
*       0 - ok                                                                  
*       4 - can't write                                                         
*                                                                               
TASWRITE XPROC TWA                                                              
         LR    R2,R1                                                            
*                                                                               
         TCCR                                                                   
*                                                                               
         LA    R1,TWAPDB                                                        
         ACALL BUILDPDB            Build PDB header                             
*                                                                               
         MVI   TWACMD,MILAWR       Async write                                  
         ST    R2,TWAAWID          Save session id                              
*                                                                               
         SET   TWAMODB.MODBDWAT    Disable write attns                          
         SET   TWAMODC.MODCSTOB                                                 
*                                                                               
         LA    R1,TWAPDB                                                        
         ACALL TIO                 Send PDB                                     
*                                                                               
         TCLEAR                                                                 
         CLEAR R15                 Rc                                           
         IF    TWACPLB.CPLBILT,'LA R15,4'                                       
TASWEXIT PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TCNTL -- Routine to send "control" PDB to MILTEN.                            
*    The parameters for the control are already in PDBTEXT.                     
*                                                                               
*    On entry:                                                                  
*      R0 - control number                                                      
*                                                                               
*    On exit:                                                                   
*      R1,R0 - response loc,len                                                 
*      R15 (and CC):                                                            
*        neg - serious error (PDBCRET complimented)                             
*          0 - ok                                                               
*        pos - depends on control (PDBCMOD)                                     
*                                                                               
TCNTL    XPROC TWA                                                              
         LR    R2,R0                                                            
*                                                                               
         LA    R1,TWAPDB                                                        
         ACALL BUILDPDB            Build PDB header                             
*                                                                               
         MVI   TWACMD,MILCNTL      Control                                      
         STC   R2,TWACMDFL         Control number                               
*                                                                               
         LA    R1,TWAPDB                                                        
         ACALL TIO                 Send PDB                                     
*                                                                               
         SETMSG L:CPSEGLOC,L:CPSEGLENF                                          
         LC    R15,TWACRET                                                      
         LCR   R15,R15                                                          
         IF    (R15,Z),'LC R15,TWACMOD'                                         
*                                                                               
         XPUSH R15,R1                                                           
         TCLEAR                                                                 
         XPOP  R15,R1                                                           
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TXCTL -- Transfer control to another subsystem.                              
*                                                                               
*    On entry:                                                                  
*      R1 - 8 char subsystem name                                               
*      R15- 8 char information area (ORVYL only)                                
*                                                                               
*    On exit, R15 (and cc):                                                     
*      0 - subsystem returned control (normal);                                 
*            R1,R0 = loc, len of return info from other subsystem               
*     -4 - subsystem not active                                                 
*                                                                               
*                                                                               
TXCTL    XPROC TWA                                                              
*                                                                               
         IF    (R1,NZ),'MVC CPSYS,@R1'  Save new subsystem name                 
         LR    R5,R15              Save information area ptr                    
*                                                                               
         LA    R1,TWAPDB                                                        
         ACALL BUILDPDB            Build PDB header                             
*                                                                               
         MVI   TWACMD,TMILXCTL     Set code to xctl                             
         MVC   TWASYSNM,CPSYS      Set system to get control                    
*-                                                                              
*-       Transferring control to Orvyl is a little special.                     
*-                                                                              
         IF    (CPSYS,EQ,CPORVYL),BEGIN  Going to ORVYL...                      
         IF    (CVFINIT,OR,(CPSACCT,Z),OR,(CPSYS,Z)),BEGIN  No way              
         CLEAR CPSYS               No subsystem                                 
         CLEAR CPORV               Reset ORVYL info                             
         TCLEAR                                                                 
         LH    R15,=H'-4'          Subsystem isn't active                       
         B     TXEXIT                                                           
         END                                                                    
*                                                                               
         IF    (R5,NZ),'MVC TWAORV,@R5'  Set ORVYL info                         
         END                                                                    
*-                                                                              
*-       Now go send Milten the transfer subsystem request.                     
*-                                                                              
         LA    R1,TWAPDB                                                        
         ACALL TIO                 Send PDB                                     
*                                                                               
         CLEAR R15                 Assume A-ok                                  
         IF    (TWASYSNM,NE,CPSYS),BEGIN  Subsystem not active...               
         IF    (CPSYS,EQ,CPORVYL),'CLEAR CPORV'  Reset ORVYL info               
         CLEAR CPSYS               No subsystem                                 
         LH    R15,=H'-4'          Subsystem isn't active                       
         END                                                                    
*                                                                               
         IF    (CPSYS,EQ,CPORVYL),'MVC CPORVINF,TWAORV'  ORVYL info             
*                                                                               
TXEXIT   SETMSG L:CPSEGLOC,L:CPSEGLENF                                          
         PRETURN (R0,R1)           Return parameter information                 
         LR    R2,R15                                                           
         TCLEAR                                                                 
         LR    R15,R2              RC                                           
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TWTO -- Routine to WTO the terminal seg buffer.                              
*                                                                               
*    On entry:                                                                  
*      R1,R0 - message loc, len                                                 
*                                                                               
*TWTO     XPROC                                                                 
*         SET   CPFWTO                                                          
*         IF    (CPSEGLENF,Z),BEGIN  Add jobname prefix...                      
*         XPUSH R0,R1                                                           
*         TSEG  '*** '                                                          
*         TSEG  CVWYLSSN,,TB                                                    
*         TSEG  '*** '                                                          
*         XPOP  R0,R1                                                           
*         END                                                                   
*         TSEG  (R1),(R0),WR        WTO (see TERMSEG)                           
*         CLEAR CPFWTO                                                          
*         PEND  ,                                                               
         EJECT                                                                  
TNOTWA   RECORD BEGIN                                                           
         XSA   R2,R8                                                            
*                                                                               
TNOTX    SEGCB                                                                  
*                                                                               
TNOTPARM DS    X                   MILSERV: must be zero                        
TNOTACC  DS    CL5                 MILSERV: account (uuugg)                     
TNOTPFX  EQU   TNOTPARM,*-TNOTPARM,C'X'                                         
TNOTMSG  DS    CL100               MILSERV: message text                        
*                                                                               
TNOTINIT EQU   TNOTX,*-TNOTX,C'X'                                               
         END                                                                    
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  TNOTIFY -- Routine to send a notify message to the WYLBUR job's              
*    owner (for test systems).                                                  
*                                                                               
*    On entry:                                                                  
*      R1,R0 - msg loc, len                                                     
*                                                                               
*TNOTIFY  XPROC TNOTWA                                                          
*         CLEAR TNOTINIT                                                        
**                                                                              
*         IF    (CVNOTIFY,NZ),BEGIN  We have a notify account...                
*         XPUSH R0,R1               Save msg ptrs                               
**                                                                              
*         MVC   TNOTACC,CVNOTIFY    Set account                                 
*         SEGINIT TNOTMSG,,TNOTX                                                
*         SEG   'From '                                                         
*         SEGT  CVWYLSSN            Subsystem name                              
*         SEG   ': '                                                            
*         XPOP  R0,R1                                                           
*         SEG   (R1),(R0)           Message text                                
**                                                                              
*         LA    R0,L'TNOTPFX        MILSERV prefix                              
*         A     R0,TNOTXLENF        Add in message length                       
**                                                                              
*         MILSERV TNOTPARM,(R0),LA:2  Send message to the owner                 
*         END                                                                   
**                                                                              
*         PEND  ,                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TBREAK -- Routine to halt terminal I/O.                                      
*                                                                               
*    Note that this routine is called by the dispatcher to halt                 
*    a user's current terminal I/O; this routine can not assume                 
*    addressability to the user's CP.                                           
*                                                                               
*    On entry:                                                                  
*      R0 - session number                                                      
*                                                                               
TBREAK   XPROC TWA                                                              
         LR    R6,CPR              Save CPR register                            
         CLEAR CPR                 No CP addressibility (neatness)              
*-                                                                              
*-       We can not call "BUILDPDB" to make the standard PDB header             
*-       because we don't have CP addressibility.  All we need to do            
*-       is clear out the PDBHDR anyway.                                        
*-                                                                              
         CLEAR TWAHDR              Initialize PDB header                        
         MVI   TWACMD,TMILBRK      Halt I/O                                     
         STH   R0,TWALIN#          Set session number                           
*                                                                               
         LA    R1,TWAPDB                                                        
         ACALL SENDPDB             Send PDB to MILTEN                           
*                                                                               
         LR    CPR,R6              Restore CPR                                  
*                                                                               
         CLEAR R15                 A-ok                                         
         PEND                                                                   
.NOTMISC ANOP  ,                   *** PCODE                                    
* NOTE: TPUSH,TPOP NOW ARE MACROS ONLY, ROUTINES AIF'D OUT.                     
         AIF   ('ALWAYS' EQ 'ALWAYS').NOTPUSH   *** PCODE LIKE                  
*  TPUSH, TPOP -- do this with macros                                           
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  TPUSH - Push TSEG buffer, buffer pointers                                    
*                                                                               
*  Note: New TSEG buffer is 1024 bytes long.                                    
*  Warning:  TPUSH, TPOP use the same stack as everybody and                    
*        thus must be discipined in that the pushes and pops                    
*        must be interleaved correctly with XPUSHes and XPOPs.                  
*  Warning:  while TPUSH, TPOP use the standard XENTRY                          
*        convention.  They do *NOT* use the standard XEXIT                      
*        convention and are tricky in this regard. Be careful!                  
*                                                                               
*                                                                               
NBWA     RECORD BEGIN              New buffer work area                         
         XSA   R0,R8                                                            
NBSEG    SEGCB ,                   Old buffer seg control block                 
         DS    0F                                                               
NBBUF    DS    XL1024              New buffer text                              
         END                                                                    
*                                                                               
*                                                                               
TPUSH    XENTER  R0,R8,L'NBWA     Standard entry conventions                    
         USING NBWA,WAR                                                         
         XPUSH R15                 We preserve all registers                    
*                                                                               
         COMMENT                   Push current seg buffer info                 
         MVC   NBSEG,CPSEG                                                      
*                                                                               
         COMMENT                   Initialize new seg buffer info               
         LA    R1,NBBUF            New text buffer: loc, len                    
         LA    R0,L'NBBUF                                                       
         SEGINIT (R1),(R0),CPSEG                                                
         MVC   CPSEGRTN,NBSEGRTN   Use same seg routine                         
*                                                                               
         XPOP  R15                                                              
*                                                                               
*        XEXIT R0,R8          Special XEXIT coded                               
         L     RAR,0(WAR)          DOES NOT POP R13 STACK !                     
         LM    R0,R8,4(WAR)                                                     
         LTR   R15,R15                                                          
         BR    RAR                                                              
         DROP  BR                                                               
         DROP  WAR                                                              
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  TPOP - pop TSEG buffer, TSEG buffer pointers                                 
*                                                                               
*  On Entry:                                                                    
*       WE HAVE TW0 ENTRY POINTS: TPOPKEEP AND TPOPJUNK                         
*                                                                               
*  Warning:  TPUSH, TPOP use the same stack as everybody and                    
*        thus must be discipined in that the pushes and pops                    
*        must be interleaved correctly with XPUSHes and XPOPs.                  
*  Warning:  while TPUSH, TPOP use the standard XENTRY                          
*        convention.  They do *NOT* use the standard XEXIT                      
*        convention and are tricky in this regard. Be careful!                  
*                                                                               
*                                                                               
*  TPOPKEEP                                                                     
*                                                                               
TPOPKEEP XENTER R0,R8                                                           
         USING NBWA,R6                                                          
         XPUSH R15                 We preserve all registers                    
*                                                                               
         COMMENT                   Point to TPUSHED work area.                  
         COMMENT                   See TPUSH code above.                        
         LR    R6,WAR                                                           
         S     R6,=A(L'NBWA)                                                    
*                                                                               
         TWRITE                    Write current                                
         MVC   CPSEG,NBSEG         Restore old                                  
*                                                                               
         XPOP  R15                                                              
*                                                                               
*        XEXIT R0,R8               Special XEXIT coded                          
         LR    R13,WAR             We super pop R13                             
         S     R13,=A(L'NBWA)      GET START OF TPUSHED AREA !                  
         L     RAR,L'NBWA(R13)                                                  
         LM    R0,R8,L'NBWA+4(R13)                                              
         LTR   R15,R15                                                          
         BR    RAR                                                              
         DROP  BR                                                               
         DROP  R6                                                               
*-                                                                              
*-       TPOPJUNK                                                               
*-                                                                              
TPOPJUNK XENTER R0,R8                                                           
         USING NBWA,R6                                                          
         XPUSH R15                 We preserve all registers                    
*                                                                               
         COMMENT                   Point to TPUSHED work area.                  
         COMMENT                   See TPUSH code above.                        
         LR    R6,WAR                                                           
         S     R6,=A(L'NBWA)                                                    
*                                                                               
         COMMENT                   Ignore current                               
         MVC   CPSEG,NBSEG         Restore old                                  
*                                                                               
         XPOP  R15                                                              
*                                                                               
*        XEXIT R0,R8               Special XEXIT coded                          
         LR    R13,WAR             We super pop R13                             
         S     R13,=A(L'NBWA)      GET START OF TPUSHED AREA !                  
         L     RAR,L'NBWA(R13)                                                  
         LM    R0,R8,L'NBWA+4(R13)                                              
         LTR   R15,R15                                                          
         BR    RAR                                                              
         DROP  BR                                                               
         DROP  R6                                                               
.NOTPUSH ANOP  ,                   *** PCODE LIKE                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TSTAT -- Routine to return terminal status information.                      
*                                                                               
*    On exit, R15 (and cc):                                                     
*      0 - ok                                                                   
*     -4 - logging off                                                          
*      1 - break typed                                                          
*                                                                               
TSTAT    XPROC                                                                  
         L     JCBR,CVCURJCB       Our JCB                                      
         WITH  JCB,BEGIN                                                        
         CLEAR R15                 Assume ok                                    
         IF    JCBFATTN,'LA R15,1'  Break return code                           
         IF    JCBAFALO,'LH R15,=H"-4"'  logging off                            
         END                                                                    
         PEND                                                                   
         AIF   (&$PCODE).NOTSUB    *** PCODE                                    
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TSUBOFF -- Routine to force logoff of all other subsystems.                  
*                                                                               
TSUBOFF  XPROC TWA                                                              
*                                                                               
         LOOP  BEGIN                                                            
         LA    R1,TWAPDB                                                        
         ACALL BUILDPDB            Build PDB header                             
         MVI   TWACMD,MILSOF       Subsys off code                              
*                                                                               
         LA    R1,TWAPDB                                                        
         ACALL TIO                 Send PDB                                     
         UNTIL (TWASYSNM,EQ,'MILTEN  ')                                         
         END                                                                    
*-                                                                              
*-       Clear any saved ORVYL state information.                               
*-                                                                              
         CLEAR CPORV                                                            
*                                                                               
         TCLEAR                                                                 
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TLOGOFF -- Routine to send end-of-session notification                       
*    to MILTEN.                                                                 
*                                                                               
TLOGOFF  XPROC TWA                                                              
*                                                                               
         TCLEAR                                                                 
*                                                                               
         LA    R1,TWAPDB                                                        
         ACALL BUILDPDB            Build PDB header                             
         MVI   TWACMD,TMILEOS      End of session                               
         MVI   TWACMDFL,EOSALL     Logoff terminal                              
*-                                                                              
*-       Logoff and transfer control to a new subsystem.                        
*-                                                                              
         IF    (CPLGFSYS,NZ),BEGIN  Xctl to new subsys...                       
         MVI   TWACMDFL,EOSXCTL                                                 
         MVC   TWASYSNM,CPLGFSYS   New subsys name                              
         END                                                                    
*                                                                               
         LA    R1,TWAPDB                                                        
         ACALL TIO                 Send PDB                                     
*                                                                               
         TCLEAR                                                                 
         PEND  ,                                                                
.NOTSUB  ANOP  ,                   *** PCODE                                    
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
TWSWA    RECORD BEGIN                                                           
TWSLINE  DS    CL(&PRESSZ)                                                      
         END                                                                    
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  TWSTOW -- Take contents of PDB and put in active file.                       
*                                                                               
TWSTOW   PROC  TWSWA                                                            
         CLEAR CPFDUMP             Turn off stow flag in here                   
*                                                                               
         IF    CPFCLEAR+CPFKEEP,'VCALL CLRTEXT'                                 
*                                                                               
         SET   CPLFLG4.CPFSTINS    Stow flags                                   
*                                                                               
         IF    CPDMPLST.X'80',BEGIN  If no collect line then                    
         VCALL ENDLNO              Get END line-number                          
         IF    NEG,BEGIN           No room...                                   
         L     R2,CPSEGLOC                                                      
         L     R3,CPSEGLENF                                                     
         B     TWSHUGE             Go give err msg                              
         END                                                                    
         ST    R0,CPDMPLST         Save collect lineno                          
         MVC   CPDMPDLT,CPDELTA    ...and delta                                 
         MVI   CPLFLG5,CPFNLST     Set default nolist                           
         MVC   CPDMPMAX,=F'100000000'  Set max line                             
         END                                                                    
         LA    R1,CPDMPLST         Point at line number                         
         VCALL LOCATE              Go find it                                   
         IF    CPDRPT.CPFMTCH,TWSTYPE                                           
         IF    (CPDRPT.CPFNTYT+CPFHIGH,NZ),BEGIN                                
         MVC   CPDMPMAX,=F'100000000'                                           
         END   ELSE,BEGIN                                                       
         MVC   CPDMPMAX,CPLCNO     Use hi line as stopper                       
         END                                                                    
         L     R2,CPSEGLOC         Point at the line(s)                         
         IF    ('LT R3,CPSEGLENF',NP),BEGIN                                     
         MVI   @R2,C' '            Set a blank                                  
         LA    R3,1                Set length                                   
         END                                                                    
         WHILE (R3,P),BEGIN        Do all text                                  
         LR    R4,R2               Save start pointer                           
         WHILE ((@R2,NE,X'15'),AND,(R3,P)),'LA R2,@R2+1; DECR R3'               
         LR    R5,R2               Get end point for count                      
         IF    ('SR R5,R4',P),BEGIN  get length                                 
         CEIL  R5,&LINESZ          Not too much                                 
         DEX   R5,'MVC TWSLINE(0),@R4'  move in text                            
         END   ELSE,BEGIN          Create a blank line                          
         MVI   TWSLINE,C' '        Insert a blank                               
         CLEAR R5                  Make it a one                                
         END                                                                    
         LA    R0,@R5+1            Bump back to original                        
         LA    R1,TWSLINE          Point at unpress text                        
         L     R15,CPDMPLST        Get the line number                          
         VCALL PRESS               Press the line                               
         VCALL STOW                Go put in file                               
         BNZ   TWSATTN             Br if no success                             
         SET   CPLSTOWD            (flag for last line msg)                     
         LM    R0,R1,CPDMPLST      Get pointers                                 
         ST    R0,CPACLNO          Update current line ptr                      
         VCALL ADDER               Go get next line number                      
         ST    R0,CPDMPLST         Save it                                      
         IF    (@R2,EQ,X'15'),'LA R2,@R2+1; DECR R3'                            
         IF    ((R0,M),AND,(R3,P)),TWSHUGE  br if no fit                        
         IF    ((R0,GE,CPDMPMAX),AND,(R3,P)),TWSLOST                            
         END                                                                    
         SET   CPFDUMP             Restore stow flag                            
         CLEAR CPLFLG5.CPFNLST     Restore stow flags                           
         CLEAR R15                 Clear flag                                   
         EXIT  TWSTOW                                                           
*                                                                               
TWSHUGE  TCLEAR                                                                 
         TSEG  (R2),(R3),CR                                                     
         TSEG  'Above lost -- line &MAXLNO exceeded.',,WR                       
         B     TWSATTN                                                          
*                                                                               
TWSLOST  TCLEAR                                                                 
         TSEG  (R2),(R3),CR                                                     
         TSEG  'Above lost -- no replace or interleave.',,WR                    
         B     TWSATTN                                                          
*                                                                               
TWSTYPE  TWRITE                                                                 
         TSEG  'Above lost -- line',,B                                          
         L     R0,CPDMPLST                                                      
         VCALL CVEXNO                                                           
         TSEG  (R1),(R0)                                                        
         TSEG  ' already in file.',,WR                                          
TWSATTN  LA    R15,4               Set attn return                              
         WITH  JCB,'L JCBR,CVCURJCB; SET JCBFATTN'                              
*                                                                               
*                                                                               
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*        TXDUMP -                                                               
*                                                                               
*  EXEC DUMP MODE ON, WRITE STUFF IN TSEG BUFFER TO ACTIVE                      
*  FILE INSTEAD OF TO THE TERMINAL.                                             
*                                                                               
*  NOTE: TO CHECK FOR REPLACE OR INTERLEAVING OF LINES,, WE                     
*  GET THE NEXT LINE IN THE RANGE AFTER THE LAST LINE WRITTEN.                  
*  IF THE NEXT LINE TO WRITE WILL NOT FIT IN BEFOR THE NEXT                     
*  WRITTEN LINE, WE HAVE THE INTERL  VE/REPLACE ERROR.                          
*                                                                               
*  NOTE2: WE MUST ALSO SAVE SOME STUFF (CPLCNO) WHEN CALLING                    
*  GTFRSTLN ROUTINE,,, THIS IS BECAUSE DUMP MAY OCCUR IN THE                    
*  MIDDLE OF OTHER COMMANDS THAT ARE MANIPULATING THE ACTIVE                    
*  FILE.  TO THE BEST OF MY KNOWLEDGE, PUT AND GET CAN BE                       
*  CALLED (INTERLEAVED) IN ANY ORDER WITHOUT ANY SIDE AFFECTS                   
*  THIS IS NOT TRUE OF SOME OF THE CP FLAGS, CP WORDS SET UP                    
*  BY GETLINE CALLS.                                                            
*                                                                               
TXDWA    RECORD BEGIN                                                           
TXDMAX   DS    F                                                                
TXDLCNO  DS    F                                                                
         END                                                                    
*                                                                               
*        TXDUMP -                                                               
*                                                                               
*                                                                               
TXDUMP   PROC  TXDWA                                                            
*                                                                               
* Turn off CPFXDUMP (there's a similar reset done in TWSTOW)                    
* in case of an 'out of pages' (either for the user or WYLBUR                   
* as a whole) occurs. This would send WYLBUR into a loop, writing               
* messages destined for the terminal which we would try storing in              
* the ACTIVE file which would result in messages being issued...                
*                                                                               
* This isn't really the best way to fix all this. The command                   
* processing (and all commands) need to be reworked to direct their             
* output to a SEG buffer which by default is the terminal but could             
* be redirected (by DUMP, for example or the COLLECT options).                  
*                                                                               
         CLEAR CPFXDUMP                                                         
         COMMENT                   CHECK XDUMP INFO                             
         IF    ((CPXDPACT,EQ,0),OR,(CPXDPDLT,EQ,0)),TXDNOINF                    
*                                                                               
         COMMENT                   GET NEXT LINE IN RANGE                       
         L     R0,CPXDPLN                                                       
         IF    (R0,NL),BEGIN       IF THERE IS A DUMPED LAST LINE               
         IF    (R0,GT,CVMAXLNO),TXDHUGE                                         
         L     R1,CPXDPACT                                                      
         MVC   TXDLCNO,CPLCNO        ...  (DON'T CLOBBER CPLCNO)                
         VCALL GTNEXTLN            FIND NEXT LINE IN RANGE, IF ANY              
         MVC   CPLCNO,TXDLCNO                                                   
         ST    R0,TXDMAX           SAVE NEXT LINE IN RANGE                      
         IF    (R15,NZ),BEGIN                                                   
         MVC   TXDMAX,CVHILNO                                                   
         END                                                                    
         END                                                                    
*                                                                               
         COMMENT                   IF NO DUMPED LINES, GET 1ST LINE             
         COMMENT                   IN RANGE                                     
         ELSE  BEGIN                                                            
         L     R0,CPXDPNLN                                                      
         IF    ((R0,NEG),OR,(R0,GT,CVMAXLNO)),TXDHUGE                           
         L     R1,CPXDPACT                                                      
         MVC   TXDLCNO,CPLCNO        ...  (DON'T CLOBBER CPLCNO)                
         VCALL GTFRSTLN            FIND NEXT LINE IN RANGE, IF ANY              
         MVC   CPLCNO,TXDLCNO                                                   
         ST    R0,TXDMAX           SAVE NEXT LINE IN RANGE                      
         IF    (R15,NZ),BEGIN                                                   
         MVC   TXDMAX,CVHILNO                                                   
         END                                                                    
         END                                                                    
*                                                                               
         COMMENT                   CHECK TO BE SURE NEXT DUMP LINE              
         COMMENT                   FITS                                         
         L     R2,CPXDPNLN                                                      
         IF    ((R2,NEG),OR,(R2,GT,CVMAXLNO)),TXDHUGE                           
         IF    (R2,GE,TXDMAX),TXDNOREP                                          
*                                                                               
         COMMENT                   DUMP ALL LINES IN BUFFER                     
         L     R4,CPSEGLOC         R4 - INDEX INTO BUFFER                       
         L     R5,CPSEGLENF        R5 - LENGTH LEFT IN BUFFER                   
         IF    (R5,NP),BEGIN                                                    
         LA    R4,=C'    '                                                      
         LA    R5,1                                                             
         END                                                                    
         WHILE (R5,P),BEGIN        LOOP                                         
         LR    R1,R4               GET LINE LOC,LEN IN R1,R0                    
         WHILE ((@R4,NE,X'15'),AND,(R5,P)),BEGIN                                
         INCR  R4                                                               
         DECR  R5                                                               
         END                                                                    
         LR    R0,R4                                                            
         SR    R0,R1               R1,R0 - LINE LOC, LEN                        
         L     R2,CPXDPNLN         CHECK LINE NUMBER                            
         IF    ((R2,NEG),OR,(R2,GT,CVMAXLNO)),TXDHUGE                           
         IF    (R2,GE,TXDMAX),TXDNOREP                                          
         LA    R2,CPXDPNLN                                                      
         L     R3,CPXDPACT                                                      
         VCALL INSLINE             INSERT LINE                                  
         BNZ   TXDBOMB                                                          
*        VCALL ADDER               POOR MANS LINE INCR BELOW                    
         L     R2,CPXDPNLN                                                      
         ST    R2,CPXDPLN          SAVE LAST LINE DUMPED AND                    
         A     R2,CPXDPDLT         INCREMENT NEXT LINE TO DUMP                  
         ST    R2,CPXDPNLN                                                      
         IF    ((@R4,EQ,X'15'),AND,(R5,P)),BEGIN  SKIP <CR>                     
         INCR  R4                                                               
         DECR  R5                                                               
         END                                                                    
         END                                                                    
*                                                                               
         SET   CPFXDUMP            Safe to turn it back on now                  
         CLEAR R15                                                              
         EXIT  TXDUMP                                                           
*                                                                               
TXDHUGE  CLEAR CPFXDUMP                                                         
         TCLEAR                                                                 
         ERROR 'Unable to dump text; line &MAXLNO exceeded. ',,        X        
               BADXDUMP                                                         
*                                                                               
TXDNOREP CLEAR CPFXDUMP                                                         
         TCLEAR                                                                 
         TSEG  'Unable to dump text at line '                                   
         L     R0,CPXDPNLN                                                      
         VCALL CVEXNO                                                           
         TSEG  (R1),(R0)                                                        
         ERROR '; can''t replace or interleave lines.',,BADXDUMP                
*                                                                               
TXDNOINF CLEAR CPFXDUMP                                                         
         TCLEAR                                                                 
         ERROR 'Unable to dump text; invalid dump info.',,BADXDUMP              
*                                                                               
TXDBOMB  CLEAR CPFXDUMP                                                         
         TCLEAR                                                                 
         ERROR 'Unable to dump text; invalid dump options.',,BADXDUMP           
*                                                                               
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*        INITXDMP -- INIT EXEC DUMP INFO TO ZERO                                
*                                                                               
*                                                                               
INITXDMP XPROC                                                                  
         CLEAR CPFXDUMP                                                         
         MVC   CPXDPLN,=F'-1000'   -1.000                                       
         CLEAR CPXDPNLN                                                         
         CLEAR CPXDPACT                                                         
         CLEAR CPXDPDLT                                                         
         PEND                                                                   
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*  BUILDPDB -- Local routine to build a PDB header from the                     
*    information in the SEG buffer.                                             
*                                                                               
*    On entry:                                                                  
*      R1 - PDB header area (to be filled in)                                   
*                                                                               
*    On exit:                                                                   
*      R1 - PDB header area filled in                                           
*                                                                               
BUILDPDB PROC  TRACE=NO                                                         
         LR    R6,R1                                                            
         USING PDB,R6                                                           
         CLEAR PDBHDR                                                           
         L     R5,CVCURJCB                                                      
         USING JCB,R5                                                           
         MVC   PDBLIN#,JCBSEQ      Set line number                              
*                                                                               
         MVC   PDBINCT,CPSEGMAXF+2  Set maximum response length                 
         IF    ((CPSEGLOC,Z),OR,(CPSEGLOC,EQ,CPSEGBP)),BEGIN                    
         MVC   PDBINCT,=AL2(CPSEGMX#) Set maximum response length               
         END                                                                    
*                                                                               
         L     R15,CPSEGLENF                                                    
         STH   R15,PDBWC           Write data count                             
         LA    R15,@R15+6                                                       
         STH   R15,PDBOUTCT        Set data count                               
*                                                                               
         IF    ^CPFNOUTTRIM,BEGIN  Trim trailing blanks...                      
         IF    CPFNONL,EXIT        Always skip if NONL                          
         SET   PDBMODC.MODCSTOB    Suppress trailing blanks                     
         END                                                                    
*                                                                               
         IF    CPFDISP,BEGIN       Display mode...                              
         SET   PDBMODC.MODCDSPL+MODCSTIB                                        
         SET   PDBMODB.MODBSLOL                                                 
         SET   PDBMODD.MODDNPAU                                                 
         END                                                                    
*                                                                               
         IF    JCBAFALO,'SET PDBMODD.MODDNPAU'   Don't pause                    
         IF    CPFNECHO,'SET PDBMODC.MODCNECH'   Noecho                         
         IF    CPFTRAN,'SET PDBMODD.MODDTRAN+MODDNMOD'  Transparent             
         IF    CPFRUND,'SET PDBMODD.MODDRUND'    Count rundown I/O              
         IF    CPFBUFIO,'SET PDBMODA.MODABUF'    Buffered I/O                   
         IF    CPFNMOD,'SET PDBMODD.MODDNMOD'    Nomodel                        
         IF    CPFNTYPE,'SET PDBMODD.MODDNTYP'   Notypeahead                    
         IF    CPFUFMT,'SET PDBMODB.MODBUFMT'    Unformatted                    
         IF    CPFFORCE,'SET PDBMODB.MODBFOR'    Force                          
         IF    CPFSLOW,'SET PDBMODB.MODBSLOL'    Slow list                      
         IF    CPFNPAU,'SET PDBMODD.MODDNPAU'    Don't pause                    
         IF    CPFNPT,'SET PDBMODD.MODDNPT'      Don't allow P/P text           
         IF    CPFCLEAN,'SET PDBMODA.MODACL'     Set clean                      
         IF    CPFNSTAR,'SET PDBMODB.MODBNNLA'   No stars on read               
         IF    CPFDATTN,'SET PDBMODA.MODADRAT'   Disallow read attns            
         IF    CPFNLF,'SET PDBMODB.MODBNLF'      No LF on read CR               
         IF    CPFNOCURS,'SET PDBMODC.MODCNCRS'  No move inp cursor             
         IF    CPFCASE,BEGIN                                                    
         IF    CPFUPPER,'SET PDBMODB.MODBUPPR'                                  
         ELSE  'SET PDBMODB.MODBUPLO'                                           
         END                                                                    
*                                                                               
         LA    R1,PDB                                                           
         PEND                                                                   
         DROP  JCB,PDB                                                          
         AIF   (&$PCODE).NOMISC2   *** PCODE                                    
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TIO -- Routine to send a PDB to MILTEN and (if it's a                        
*    synchronous PDB) wait for the completion.                                  
*                                                                               
*    On entry:                                                                  
*      R1 - PDB header ptr                                                      
*      CPSEG - contains PDBTEXT data (if any)                                   
*                                                                               
*                                                                               
TIO      PROC  TRACE=NO                                                         
         LR    R6,R1                                                            
         USING PDB,R6                                                           
         L     JCBR,CVCURJCB       Get current JCB                              
         USING JCB                                                              
*                                                                               
         LA    R1,PDB                                                           
         ACALL SENDPDB             Go do the terminal I/O                       
*                                                                               
         IF    (PDBCMD,NE,TMILEOS),BEGIN  Not end of session...                 
         PAUSE JCBWFT              Wait for terminal                            
         L     R4,JCBPDBXL         Save xact ptr (for free later)               
*                                                                               
         SETMSG PDBHDR+4,L'PDBHDR-4                                             
         ACALL MOVEX               Move in PDBHDR                               
*                                                                               
         L     R0,JCBPDBXL+4                                                    
*-                                                                              
*-       If the response is being moved into the default seg buffer,            
*-         then it can be expanded if necessary.                                
*-                                                                              
         IF    (CPSEGBP,EQ,CPSEGLOC),BEGIN  Default buffer...                   
         IF    (R0,GT,CPSEGBSZ),'ACALL TSEGBUF'  Expand seg buffer              
         CEIL  R0,CPSEGBSZ         Not too much                                 
         END                                                                    
*                                                                               
         ELSE  'CEIL R0,CPSEGMAXF'  Not too much                                
*                                                                               
         ST    R0,CPSEGLENF        Save accurate length                         
         SETMSG L:CPSEGLOC,(R0)     Put data here                               
         ACALL MOVEX               Move data into SEG buffer                    
*                                                                               
         LR    R1,R4               Xact ptr                                     
         ACALL FREELOC             Go free up                                   
         FAIL  NZ,MIL2,'MILTEN/WYLBUR interface error.'                         
*                                                                               
         IF    PDBCPLA.CPLAATTN,BEGIN  Set ATTN flag...                         
         IF    JCBFNATN,'SET JCBFPATN'                                          
         ELSE  'SET JCBFATTN'                                                   
         END                                                                    
*                                                                               
         IF    PDBCPLB.CPLBLGF,'SET JCBAFALO'  Logoff                           
*                                                                               
         IF    (CPSUC,NE,PDBSUC),BEGIN                                          
         SET   JCBBFSIB            SIB has changed (COMM will update)           
         END                                                                    
*                                                                               
         MVC   CPSVINFO,PDBVINFO   Keep ORVYL charging info current             
*                                                                               
         MVC   CPTIOCLK,CPCLCK     Save time of last terminal I/O               
         END                                                                    
*                                                                               
         PEND  ,                                                                
         DROP  JCB,PDB                                                          
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TSGBUFGT -- Routine to get a new TSEG buffer                                 
*                                                                               
*    On entry:                                                                  
*      R0 - new seg buffer size                                                 
*                                                                               
*    On exit:                                                                   
*      R0 - Length of buffer obtained                                           
*      R1 - Address of buffer obtained                                          
*                                                                               
*    Note: This is a routine used only by GETCP (in the                         
*          SIGN module) and TSEGBUF below. It gets                              
*          the requested buffer from a cell pool.                               
*                                                                               
TSGBUFGT XPROC                                                                  
         A     R0,=A(TSEGBQNT-1)                                                
         N     R0,=A(-TSEGBQNT)    Quantize to 2K blocks                        
         IF    (R0,GT,=A(CPSEGMX#)),'L R0,=A(CPSEGMX#)'  Max allowed            
*                                                                               
*  Using the size, calculate the address of the appropriate                     
*  cell pool allocation block.                                                  
*                                                                               
         LR    R15,R0                                                           
         CLEAR R14                                                              
         D     R14,=A(TSEGBQNT)                                                 
         BCTR  R15,0               Array index relative to 0                    
         M     R14,=A(L'CELLBLOK)  Convert index to offset                      
         A     R15,CVTSEGPL                                                     
         VCALL GETPOOL             Allocate the buffer                          
*                                                                               
         L     R15,CVCPMEM         Update statistics                            
         AR    R15,R0              New total memory used                        
         ST    R15,CVCPMEM         Save new total                               
*                                                                               
         PRETURN (R0,R1)           Return address and length                    
         PEND                                                                   
         QLTORG ,                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TSGBUFRE -- Routine to free a TSEG buffer                                    
*                                                                               
*    On entry:                                                                  
*      R0 - TSEG buffer size                                                    
*      R1 - TSEG buffer address                                                 
*                                                                               
*    Note: This is a routine used only by GETCP (in the                         
*          SIGN module) and TSEGBUF below. It gets                              
*          the requested buffer from a cell pool.                               
*                                                                               
TSGBUFRE XPROC                                                                  
*                                                                               
*  Using the size, calculate the address of the appropriate                     
*  cell pool allocation block.                                                  
*                                                                               
         LR    R15,R0                                                           
         LR    R3,R0               Save here for later                          
         CLEAR R14                                                              
         D     R14,=A(TSEGBQNT)                                                 
         BCTR  R15,0               Array index relative to 0                    
         M     R14,=A(L'CELLBLOK)  Convert index to offset                      
         A     R15,CVTSEGPL                                                     
         VCALL FREEPOOL            Release the buffer                           
*                                                                               
         L     R15,CVCPMEM                                                      
         SR    R15,R3              Deduct seg buffer space                      
         ST    R15,CVCPMEM         Save new total                               
*                                                                               
         PEND                                                                   
         QLTORG ,                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TSEGBUF -- Routine to expand the size of the seg buffer.                     
*                                                                               
*    On entry:                                                                  
*      R0 - new seg buffer size                                                 
*                                                                               
TSEGBUF  XPROC                                                                  
         LR    R2,R0               Save requested buffer size                   
         IF    (R2,GT,CPSEGMAXF),BEGIN  Need a bigger buffer...                 
*-                                                                              
*-       We can only free and re-allocate the default terminal                  
*-         seg buffer pointed to by CPSEGBP.  If another buffer is              
*-         being used then don't do anything.                                   
*-                                                                              
         IF    ((CPSEGLOC,NZ),AND,(CPSEGBP,NE,CPSEGLOC)),EXIT                   
*-                                                                              
*-       Free the old seg buffer.                                               
*-                                                                              
         LT    R1,CPSEGBP                                                       
         IF    NZ,BEGIN                                                         
         LH    R0,CPSEGBSZ                                                      
         ACALL TSGBUFRE            Free old buffer                              
         CLEAR CPSEGBP,CPSEGBSZ    Tidy                                         
         CLEAR CPSEGLOC,CPSEGLENF  (Zot current seg buffer length)              
         END                                                                    
*-                                                                              
*-       Get a new buffer.                                                      
*-                                                                              
         LR    R0,R2               Get size back                                
         ACALL TSGBUFGT            Get a bigger buffer                          
         ST    R1,CPSEGBP          Save default buffer ptr                      
         STH   R0,CPSEGBSZ         Buffer size                                  
         ST    R1,CPSEGLOC         Ditto                                        
         ST    R0,CPSEGMAXF                                                     
         END                                                                    
*                                                                               
         CLEAR R15                 RC                                           
         PEND                                                                   
         QLTORG ,                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*  INITUSER -- This is the first entry from the dispatcher for a                
*    user who has logged on.  This routine saves the relevant                   
*    information from the logon PDB from MILTEN and then frees                  
*    that transaction and goes to the main signon code in the                   
*    COMM module.                                                               
*                                                                               
INITUSER GENTER ,                                                               
* WE DO NOT HAVE STACK ADDRESSIBILITY YET !! NO XPROC ALLOWED                   
         L     JCBR,CVCURJCB                                                    
         USING JCB                                                              
*-                                                                              
*-       Reset JCB fields left over from the previous session.                  
*-                                                                              
         CLEAR JCBWCPU             Used for SHOW WJCB                           
         IF    ((JCBUCEQH,NZ),OR,(JCBUCEP,NZ)),'VCALL FREEBILL'                 
*                                                                               
         VCALL INITCMD             Initialize                                   
*                                                                               
         IF    CVFPUSR,'VCALL INITPUSR'  Pseudo-user initialization             
*                                                                               
         XPUSH ,,L'TWA,PTR=WAR                                                  
         USING TWA,WAR                                                          
*                                                                               
         L     R4,JCBPDBXL         Save xact loc (for free later)               
         SETMSG TWAHDR+4,L'TWAHDR-4                                             
         ACALL MOVEX               Get the PDB header                           
         SETMSG L:CPSEGLOC,L:CPSEGMAXF                                          
         ACALL MOVEX               Get the PDB text                             
*                                                                               
         LR    R1,R4                                                            
         ACALL FREELOC             Free the logon PDB                           
*                                                                               
         MVC   JCBSINP,TWASINP     Save our SIN ptr                             
         MVC   CPSYS,TWASYSNM      Save originating subsystem name              
         LH    R0,TWAWC            Write count                                  
         AH    R0,TWARC            ...plus read count                           
         SETMSG L:CPSEGLOC,(R0)     Initial command text                        
*                                                                               
         XPOP  ,,L'TWA                                                          
         XPUSH R0,R1                                                            
         TCLEAR                                                                 
         XPOP  R0,R1                                                            
*                                                                               
         VCALL SIGNON              Start signon sequence (in SIGN)              
         BOMB                      No return (honest)                           
*                                                                               
         DROP  JCB,TWA                                                          
         EJECT                                                                  
SPDBWA   RECORD BEGIN                                                           
SPDBLOC1 DS    A                   Buffer location (part 1)                     
SPDBLEN1 DS    F                   Buffer length   (part 1)                     
SPDBLOC2 DS    A                   Buffer location (part 2)                     
SPDBLEN2 DS    F                   Buffer length   (part 2)                     
         END                                                                    
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  SENDPDB -- Local routine to send a PDB to MILTEN.  The routine               
*    sends the local copy of the PDBHDR combined with text                      
*    from the SEG buffer as the PDBTEXT.                                        
*                                                                               
*    On entry:                                                                  
*      R1 - PDB (header) ptr                                                    
*                                                                               
SENDPDB  PROC  SPDBWA,TRACE=NO                                                  
         CLEAR SPDBWA                                                           
*                                                                               
         L     R6,=A(MILINFO)                                                   
         WITH  (MILINFO,R6)                                                     
*                                                                               
         LR    R5,R1                                                            
         WITH  (PDB,R5)                                                         
*                                                                               
         LA    R15,PDB+4           Skip past RDW                                
         ST    R15,SPDBLOC1        Save buffer ptr                              
         MVC   SPDBLEN1,=A(L'PDBHDR-4)  Buffer length                           
*                                                                               
         LA    R3,SPDBLOC1         Preset end of parm list                      
         LH    R2,PDBOUTCT                                                      
         SH    R2,=H'6'            Actual data count                            
         IF    POS,BEGIN           We have some data...                         
         MVC   SPDBLOC2,CPSEGLOC   Buffer ptr (part 2)                          
         ST    R2,SPDBLEN2         Buffer length (part 2)                       
         LA    R3,SPDBLOC2         End of parm list                             
         END                                                                    
         SET   @R3.X'80'           End of suzan parm list                       
*-                                                                              
*-       Send PDB to MILTEN.                                                    
*-                                                                              
         SCOM  SEND,SPDBLOC1,MILPMGC  Send transaction                          
         IF    (R15,NZ),BEGIN      Trouble...                                   
         FAIL  (R15,NE,PATHRBAF),MIL3,'MILTEN interface error.'                 
*-                                                                              
*-       MILTEN's Suzan buffer is full so we queue it ourselves.                
*-                                                                              
         L     R4,SPDBLEN1         PDB header                                   
         A     R4,SPDBLEN2         Plus PDB data                                
*                                                                               
         LA    R0,8                Space for link ptr...                        
         AR    R0,R4               ...plus PDB                                  
         VCALL GETCORE             Get space to queue it                        
         LR    R2,R1                                                            
*                                                                               
         CLEAR (@R2,4)             Zero our link ptr                            
         ST    R4,@R2+4            Total PDB length                             
         MOVEL @R2+8,L:SPDBLOC1,L:SPDBLEN1  Save PDB header                     
         LA    R3,@R2+8                                                         
         A     R3,SPDBLEN1                                                      
         MOVEL @R3,L:SPDBLOC2,L:SPDBLEN2  Save PDB data                         
*                                                                               
         L     R3,CVPPDBQT         Previous queue tail                          
         L     R15,@R3             Expecting zero                               
         FAIL  (R15,NZ),SPDBERR,'MILTEN interface error.'                       
         ST    R2,@R3              Link us to previous tail                     
         ST    R2,CVPPDBQT         New queue tail                               
         END                                                                    
*                                                                               
         CLEAR R15                 (Tidy)                                       
         PEND                                                                   
         EJECT                                                                  
SPENDWA  RECORD BEGIN                                                           
SPENDLOC DS    A                   Pending PDB location                         
SPENDLEN DS    A                   Pending PDB length                           
         END                                                                    
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  SENDQPDB -- Local routine to send any pending PDBs to MILTEN.                
*    PDBs are put on our pending queue when MILTEN's Suzan buffer               
*    is full (this is a rare situation).                                        
*                                                                               
SENDQPDB PROC SPENDWA                                                           
         L     R6,=A(MILINFO)                                                   
         WITH  (MILINFO,R6)                                                     
*-                                                                              
*-       Go through and send all PDBs on our queue.                             
*-                                                                              
         WHILE ('LT R5,CVPPDBQH',NZ),BEGIN  Take first entry...                 
         SETMSG @R5+8,L:@R5+4       PDB location and length                     
         ST    R1,SPENDLOC                                                      
         ST    R0,SPENDLEN                                                      
         SET   SPENDLOC.X'80'      Set bit for Suzan SVC                        
*-                                                                              
*-       Try to send the pending PDB.                                           
*-                                                                              
         SCOM  SEND,SPENDLOC,MILPMGC                                            
         IF    (R15,NZ),EXIT       Trouble, forget it                           
*-                                                                              
*-       Dequeue and free the sucessfully sent PDB.                             
*-                                                                              
         MVC   CVPPDBQH,@R5        Take entry off queue                         
         LR    R1,R5                                                            
         VCALL FREECORE                                                         
         IF    (CVPPDBQH,Z),BEGIN  Fix up queue tail...                         
         LA    R1,CVPPDBQH         Dummy first entry addr                       
         ST    R1,CVPPDBQT         Fix up tail                                  
         END                                                                    
         END                                                                    
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*  MOVEX -- Local routine to move transaction to buffer area.                   
*                                                                               
*    On entry:                                                                  
*      R1,R0 - location & length of TO buffer                                   
*                                                                               
MOVEX    PROC  TRACE=NO                                                         
         WITH  JCB                 (Entry assumption)                           
*                                                                               
         L     R3,JCBPDBXL+4                                                    
         IF    (R0,Z),'LR R0,R3'   Zero means everything                        
         CEIL  R0,R3               Not too much                                 
         L     R2,JCBPDBXL         Addr in Suzan buffer                         
         LR    R15,R3                                                           
         CEIL  R15,R0              Don't move too much                          
         LR    R14,R1                                                           
         MVCL  R14,R2              Move first part                              
*                                                                               
         STM   R2,R3,JCBPDBXL      Save updated loc,len ptrs                    
         PEND                                                                   
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*  MILPOST -- Routine to process posts from MILTEN.  This                       
*    routine is entered by the dispatcher.                                      
*                                                                               
MILPOST  XPROC                                                                  
         L     R6,=A(MILINFO)      Get MILINFO ptr                              
         USING MILINFO,R6                                                       
         MVC   MILFLAG(2),MILSFLAG  Save and clear status                       
*-                                                                              
*-       Check to see if the MILTEN path has closed.                            
*-                                                                              
         IF    MILFLAG.PATHFCLS,BEGIN  Path closed...                           
         CLEAR R15                 Rc=0                                         
         VCALL SHUTDOWN            Terminate normally                           
         END                                                                    
*-                                                                              
*-       Process new information from MILTEN.                                   
*-                                                                              
         IF    MILFLAG.PATHFNI,BEGIN  New info...                               
MILQLOOP SCOM  LOCATE,MILPTRS,MILPMGC    Do read locate                         
         FAIL  (R15,NZ),MIL5,'WYLBUR/MILTEN interface error.'                   
         L     R1,MILPTRS          Transaction loc                              
         L     R0,MILPTRS+4        Transaction length                           
         IF    (R0,NP),MILFQCHK    Nothing left, scram                          
*                                                                               
         CLEAR MQRHDR                                                           
         LR    R15,R0              Total tranaction length                      
         CEIL  R15,L'MQRHDR-4      Not more than the header                     
         MOVE  R15,MQRHDR+4,@R1    Save PDB header                              
*                                                                               
         CLI   MQRCMD,FMILWRIT     Response to a write?                         
         BE    DOSOME              Br if so                                     
         CLI   MQRCMD,FMILREAD     Response to a read?                          
         BE    DOSOME              Br if so                                     
         CLI   MQRCMD,FMILXCTL     Response to xctl?                            
         BE    DOSOME              Br if so                                     
         IF    (MQRCMD,EQ,MILAWR),DOSOME  Async write completion                
         IF    (MQRCMD,EQ,MILCNTL),DOSOME  Response to control                  
         IF    (MQRCMD,EQ,MILSOF),DOSOME   Response to subsys/off               
         IF    (MQRCMD,EQ,FMILSOS),STARTSES  Logon request                      
         CLI   MQRCMD,FMILASYN     Asynchronous post?                           
         BE    ASYNCH              Br if so                                     
         CLI   MQRCMD,FMILSTOP     Stop request?                                
         BE    CLEANUP             Br if so                                     
         CLI   MQRCMD,FMILDUMP     Dump request?                                
         BE    DUMP                Br if so                                     
         CLI   MQRCMD,FMILERR      MILTEN junk last request?                    
         BE    DUMP                Br if so                                     
         CLI   MQRCMD,FMILINIT     Response to our init call?                   
         BE    INIT                Br if so                                     
*                                                                               
         KAPUT PDBERR,'MILTEN/WYLBUR PDB command error.'                        
         END                                                                    
*-                                                                              
*-       Previous full queue has room.                                          
*-                                                                              
MILFQCHK IF    (CVPPDBQH,NZ),'ACALL SENDQPDB'  Send pending PDBs                
*                                                                               
         B     MILXEXIT                                                         
         EJECT                                                                  
         USING JCB                                                              
*-                                                                              
*-       Process signon requests here.                                          
*-                                                                              
STARTSES ACALL SETJCB              Go find JCB address                          
         MVC   JCBPDBXL,MILPTRS    Save PDB loc, len ptrs                       
*                                                                               
         IF    ^JCBWFSO,BEGIN      Not a real signon (???)...                   
         CLEAR JCBWFT              No longer waiting for terminal               
         ACALL QSETUP              Go see if can be setup                       
         B     MILQLOOP            Go process next                              
         END                                                                    
*                                                                               
         CLEAR JCBWFSO             No longer waiting for signon                 
         CLEAR JCBFBILLED          Reset previous billed flag                   
         CLEAR JCBFCNT             Reset failsoft counter                       
         ACALL QSETUP              Go put on setup queue                        
         B     MILQLOOP            Go get next                                  
         EJECT                                                                  
*-                                                                              
*-       Response to initialization call.                                       
*-                                                                              
INIT     L     R5,CVLJCB           Point at last JCB                            
         MVC   JCBPDBXL,MILPTRS    Save PDB loc, len ptrs                       
*                                                                               
         L     R1,JCBPDBXL                                                      
         WITH  (PDBDATA,R1),BEGIN                                               
         MVC   CVSITP,PDBSINP      Save SIT ptr (in CSA)                        
         END                                                                    
*                                                                               
         L     R1,JCBPDBXL                                                      
         ACALL FREELOC             Go free the PDB                              
         B     MILQLOOP            Go back for more                             
*-                                                                              
*-       An asynchronous post has been sent by MILTEN for this line.            
*-                                                                              
*-       The post code can be the result of an idle attention on the            
*-       line which in reflected in the completion flag byte in the             
*-       PDB.  It can also be the result of an operator kill of a               
*-       line.                                                                  
*-                                                                              
ASYNCH   ACALL SETJCB                                                           
         ACALL QSETUP              Go attempt to set it up                      
         L     R5,CVLJCB           Get "last" JCB to free PDB                   
         MVC   JCBPDBXL,MILPTRS    Save PDB loc, len ptrs                       
         L     R1,JCBPDBXL                                                      
         ACALL FREELOC                                                          
         BZ    MILQLOOP                                                         
         KAPUT MIL6,'WYLBUR/MILTEN interface error'                             
*-                                                                              
*-       We received a response to a terminal read or write.                    
*-                                                                              
DOSOME   ACALL SETJCB              Go find JCB                                  
         MVC   JCBPDBXL,MILPTRS    Save PDB loc, len ptrs                       
         CLEAR JCBWFT  no longer waiting for terminal                           
         ACALL QSETUP              Go see if can go yet                         
         B     MILQLOOP                                                         
*-                                                                              
*-       A request by MILTEN to shutdown has been received.                     
*-                                                                              
CLEANUP  CLEAR R15                 Return code                                  
         VCALL SHUTDOWN            Terminate normally                           
*-                                                                              
*-       A request to terminate with a dump has been received.                  
*-                                                                              
DUMP     KAPUT MCANCEL                                                          
*                                                                               
MILXEXIT PEND                                                                   
         EJECT                                                                  
*-                                                                              
*-                                                                              
*-       Find JCB address and setup terminal I/O status.                        
*-                                                                              
*-                                                                              
*-                                                                              
SETJCB   PROC  ,                                                                
         LH    R5,MQRLIN#          Get JCB line number                          
         MH    R5,=AL2(L'JCB)      Get offset into table                        
         AL    R5,CVFJCB           Point at entry                               
         FAIL  (R5,GE,CVLJCB),MAXUSERS,'Too many users.'                        
*-                                                                              
*-       Asychronous logoff happened.                                           
*-                                                                              
         IF    MQRCPLB.CPLBLGF,BEGIN  Logoff...                                 
         SET   JCBFPATN,JCBFATTN,JCBAFALO  Set attn and auto logoff             
         END                                                                    
*-                                                                              
*-       Asychronous ("Idle") attention happened.                               
*-                                                                              
         IF    MQRCPLB.CPLBIA,BEGIN  Idle attn set...                           
         IF    JCBFNATN,'SET JCBFPATN'                                          
         ELSE  'SET JCBFATTN'      Set appropriate ATTN flag                    
         END                                                                    
*-                                                                              
*-       Release resource wait if either idle attn or logoff.                   
*-                                                                              
         IF    MQRCPLB.CPLBIA+CPLBLGF,BEGIN  Idle attn/logoff...                
         IF    JCBFARB+JCBAPDSP,EXIT  Can't release JCB, scram                  
*                                                                               
         CLEAR JCBWFRSC            Clear any resource wait                      
         CLEAR JCBWWFL             Reset any weak wait flags                    
         SET   JCBFATTNFREE        Remember ATTN freed us                       
         END                                                                    
*                                                                               
         PRETURN (R5)                                                           
         PEND                                                                   
         DROP  JCB                                                              
         EJECT                                                                  
*box                                                                            
*                                                                               
*  FREELOC -- Routine to free a located PDB in Suzan buffer.                    
*                                                                               
*    On entry:                                                                  
*      R1 - transaction ptr (as returned by LOCATE)                             
*                                                                               
FREELOC  PROC  TRACE=NO                                                         
         L     R6,=A(MILINFO)                                                   
         WITH  (MILINFO,R6)                                                     
         SCOM  FREE,(R1),MILPMGC   Free previous transaction                    
         FAIL  (R15,NZ),MIL9,'MILTEN interface error.'                          
         PEND                                                                   
         EJECT                                                                  
*-                                                                              
*-      Routine to check for dispatchability and put the user on the            
*-         setup queue if dispatchable.                                         
*-                                                                              
QSETUP   XENTER R7,R8                                                           
*-                                                                              
*-       Cancel any pending timer.                                              
*-                                                                              
         USING JCB                                                              
         IF    ('LT R15,JCBTIMID',NZ),BEGIN  A timer is going...                
         ACALL TIMERDQ             Purge timer                                  
         BNZ   QSETEXIT            Timer has fired, scram                       
*                                                                               
         CLEAR JCBTIMID            Reset timer id                               
         MVC   JCBTIMQL,=F'-1'     Reser timer queue link ptr                   
*                                                                               
         CLEAR JCBWFTM             No longer waiting for timer                  
         END                                                                    
*-                                                                              
*-       Add the user to the setup queue.                                       
*-                                                                              
         IF    (('LTH R0,JCBWFL',Z),AND,^JCBAPDSP),BEGIN                        
         IF    ('LT R0,JCBQF',NZ),'DQJCB JCB'  Dequeue if queued                
         SETUP JCB                 Setup the JCB                                
         END                                                                    
QSETEXIT XEXIT R7,R8                                                            
         DROP  JCB,BR                                                           
*                                                                               
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*  WAITER -- Routine to wait a fixed amount of elapsed time.                    
*                                                                               
*    On entry:                                                                  
*      R15 - no. of seconds to wait in .01 second units                         
*            (complimented if the wait is interruptable by                      
*            path posts)                                                        
*                                                                               
*    On exit, R15 (and cc):                                                     
*      0 - ok                                                                   
*      4 - attn or logoff                                                       
*                                                                               
WAITER   XPROC                                                                  
         L     JCBR,CVCURJCB                                                    
         USING JCB                                                              
         FAIL  (JCBTIMID,NZ),TIMERQ,'Timer queue logic error'                   
*                                                                               
         LR    R4,R15              Save interruptible flag                      
         LPR   R15,R15             Force pos value                              
         BZ    WAITDONE            Zero, return w/o waiting                     
*                                                                               
         LA    R0,WAITEXIT         Post routine                                 
         LA    R1,JCB              Post routine's parm                          
         ACALL TIMERQ              Queue the event                              
         ST    R15,JCBTIMID        Save our timer id                            
*-                                                                              
*-       Wait for timer to fire.                                                
*-                                                                              
         IF    (R4,NEG),BEGIN                                                   
         VCALL PATHQ               Put paths that can interrupt on Q            
         IF    NZ,BEGIN            Already posted...                            
         L     R15,JCBTIMID        Our timed id                                 
         ACALL TIMERDQ             Dequeue timer just queued                    
         CLEAR JCBTIMID            Clear timer id                               
         B     WAITDONE            Scram                                        
         END                                                                    
*                                                                               
         VCALL NPATQ               Ditto for net paths                          
         IF    NZ,BEGIN            Already posted...                            
         L     R15,JCBTIMID        Our timed id                                 
         ACALL TIMERDQ             Dequeue timer just queued                    
         CLEAR JCBTIMID            Clear timer id                               
         VCALL PATHDEQ             Dequeue user paths                           
         B     WAITDONE            Scram                                        
         END                                                                    
*                                                                               
         SET   JCBFWINT            Interruptible                                
         END                                                                    
*                                                                               
         PAUSE JCBWFTM             Wait for timer                               
*                                                                               
         IF    (R4,NEG),BEGIN      Must de-queue interruptibles...              
         VCALL PATHDEQ             De-queue interruptible paths                 
         VCALL NPATDEQ             Ditto for net paths                          
         CLEAR JCBFWINT            Reset                                        
         END                                                                    
*-                                                                              
*-       Timer has fired, return to user.                                       
*-                                                                              
WAITDONE CLEAR R15                 Assume A-ok                                  
         IF    JCBFATTN,'LA R15,4'  Attn                                        
         PEND  ,                                                                
         DROP  JCB                                                              
         EJECT                                                                  
*box                                                                            
*                                                                               
*  WAITEXIT -- WAITER's timer exit routine.  This routine is                    
*    entered when the wait time interval has expired.                           
*                                                                               
*    On entry:                                                                  
*      R1 - JCB ptr                                                             
*                                                                               
*    Note:  This routine is entered under the TIMER subtask.                    
*           No CP or user stack addressability can be assumed!                  
*                                                                               
         DROP  CP                  (Keeps us honest)                            
*                                                                               
WAITEXIT PROC  TRACE=NO                                                         
         LR    R2,R1                                                            
         WITH  (JCB,R2),BEGIN                                                   
         SET   CVLOCK1.CVL1TQJ,MODE=LOCKED,REF=CV   Lock to run q               
WAITPLP  DS    0H                                                               
         L     R15,CVTIMRQ         Current timer post run queue                 
         ST    R15,JCBTIMQL        Link up posted queue                         
         CS    R15,R2,CVTIMRQ      Add us to head of posted queue               
         BNZ   WAITPLP             Something changed, try it again              
         END                                                                    
         CLEAR CVLOCK1.CVL1TQJ,MODE=LOCKED,REF=CV   Unlock when done            
*-                                                                              
*-       Post the mother task.                                                  
*-                                                                              
         LA    R1,CVECB                                                         
         POST  (1)                 Post main ECB                                
         PEND  ,                                                                
         DROP  BR                                                               
*                                                                               
         USING CP                  (Re-establish CP addressability)             
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TIMRINIT -- Routine to start up real-time timer task.                        
*    Called from the INIT module.                                               
*                                                                               
*    Note:  Since WYLBUR is link-edited with an addressing mode                 
*           of 24 the TIMER subtask must manually switch to                     
*           31 bit mode to insure that its exit routines are                    
*           scheduled in 31 bit mode.                                           
*                                                                               
TIMRINIT XPROC                                                                  
         IDENTIFY EP=TIMER,ENTRY=TIMER                                          
         ATTACH EP=TIMER,ECB=TIMRECB                                            
         ST    R1,TIMRTCB          Save TIMER task TCB addr                     
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TIMRSTOP -- Routine to terminate real-time timer task.                       
*    Called from the FAIL module.                                               
*                                                                               
TIMRSTOP XPROC                                                                  
         IF    (TIMRTCB,NZ),BEGIN                                               
         DETACH TIMRTCB            Terminate subtask                            
         WAIT  ECB=TIMRECB         Wait for completion                          
         CLEAR TIMRTCB,TIMRECB                                                  
         END                                                                    
         PEND  ,                                                                
*                                                                               
TIMRTCB  DC    F'0'                                                             
TIMRECB  DC    F'0'                                                             
         EJECT                                                                  
TQE      RECORD BEGIN                                                           
         DS    CL4'TQE'                                                         
TQELINK  DS    A                   Next TQE ptr (or zero)                       
TQEID    DS    F                   This TQE's identification number             
TQECLCK  DS    XL8                 Expiration TOD clock                         
TQERTN   DS    A                   Exit routine addr                            
TQEPARM  DS    A                   Exit routine parm                            
         END                                                                    
         SPACE 2                                                                
TIMRQWA  RECORD BEGIN                                                           
         XSA   R2,R8                                                            
*                                                                               
TIMRQVAL DS    2A                  Saved exit routine, parm                     
         END                                                                    
         SPACE 2                                                                
*box                                                                            
*                                                                               
*  TIMERQ -- Routine to queue timer entry.                                      
*                                                                               
*    On entry:                                                                  
*      R15- timer interval in .01 sec                                           
*      R0 - exit routine addr                                                   
*      R1 - parm ptr                                                            
*                                                                               
*    On exit:                                                                   
*      R15- timer id for dequeue                                                
*                                                                               
TIMERQ   XPROC TIMRQWA                                                          
*                                                                               
         LR    R3,R15                                                           
         FLOOR R3,0                                                             
         STM   R0,R1,TIMRQVAL      Save exit routine, parm ptrs                 
*                                                                               
         GETMAIN R,LV=L'TQE        Get storage for a TQE                        
         LR    R6,R1                                                            
         USING TQE,R6                                                           
*                                                                               
         CLEAR TQE                                                              
         MVC   TQE(4),=CL4'TQE'                                                 
         M     R2,=F'40960000'     Convert to tod clock units                   
         STCK  @R13                                                             
         ADL   R2,@R13                                                          
         STM   R2,R3,TQECLCK       Tod clock at expiration                      
         MVC   TQERTN(8),TIMRQVAL  Exit routine addr, parm ptr                  
*-                                                                              
*-       Generate a timer id (used in TIMERDQ).                                 
*-                                                                              
         LOOP  BEGIN                                                            
         L     R0,CVTQEID          Last timer id                                
         LA    R15,1                                                            
         AR    R15,R0              Increment id number                          
         ST    R15,TQEID           Save id in our TQE                           
         CS    R0,R15,CVTQEID                                                   
         UNTIL Z                                                                
         END                                                                    
*-                                                                              
*-       Add our TQE (in sorted order) to the queue.                            
*-                                                                              
         SET   CVLOCK1.CVL1TQ,MODE=LOCKED,REF=CV   Lock to run q                
         LOOP  BEGIN                                                            
         LA    R15,CVTQEQH-(TQELINK-TQE)  Dummy first entry                     
         LR    R2,R15                                                           
*                                                                               
         LOOP  BEGIN                                                            
         LR    R5,R15              Save prev ptr                                
         WITH  (TQE,R15)                                                        
         WHILE ('LT R15,TQELINK',NZ)                                            
         CLC   TQECLCK,TQECLCK-TQE(R6)  Add entry before this one?              
         IF    GT,EXIT             Yes                                          
         END                                                                    
*                                                                               
         MVC   TQELINK,TQELINK-TQE(R5)  Our link ptr                            
         CS    R15,R6,TQELINK-TQE(R5)  Add us to the TQE queue                  
         UNTIL Z                                                                
         END                                                                    
         CLEAR CVLOCK1.CVL1TQ,MODE=LOCKED,REF=CV   Unlock when done             
*-                                                                              
*-       Post timer subtask if this is the smallest interval.                   
*-                                                                              
         IF    (R5,EQ,R2),BEGIN    Set a new timer...                           
         POST  TSUBECB             Subtask actually sets the timer              
         END                                                                    
*                                                                               
         L     R15,CVTQEID         Return the timer id                          
         PEND  ,                                                                
         DROP  TQE                                                              
         EJECT                                                                  
*box                                                                            
*                                                                               
*  TIMERDQ -- Routine to dequeue a timer entry.                                 
*                                                                               
*    On entry:                                                                  
*      R15 - timer id                                                           
*                                                                               
*    On exit, R15 (and cc):                                                     
*      0 - entry has been dequeued                                              
*      nz- no such entry                                                        
*                                                                               
         DROP  CP                  (No CP addressability)                       
*                                                                               
TIMERDQ  XPROC TRACE=NO                                                         
*-                                                                              
*-       Find our TQE.                                                          
*-                                                                              
         LR    R2,R15              Save timer id                                
         SET   CVLOCK1.CVL1TQ,MODE=LOCKED,REF=CV   Lock to run q                
         LOOP  BEGIN                                                            
         LA    R6,CVTQEQH-(TQELINK-TQE)  Dummy first queue entry                
         USING TQE,R6                                                           
*                                                                               
         LOOP  BEGIN               Find TQE in queue...                         
         LR    R5,R6               Save previous ptr                            
         IF    ('LT R6,TQELINK',Z),TDQEXIT                                      
         UNTIL (TQEID,EQ,R2)       Found our TQE, scram                         
         END                                                                    
*                                                                               
         L     R2,TQELINK          Our forward ptr                              
         CS    R6,R2,TQELINK-TQE(R5)  Unlink our entry                          
         UNTIL Z                                                                
         END                                                                    
         CLEAR CVLOCK1.CVL1TQ,MODE=LOCKED,REF=CV   Unlock when done             
*-                                                                              
*-       Release our TQE.                                                       
*-                                                                              
         MVC   TQE(4),=C'OTQE'                                                  
         MVC   TQELINK,=F'-1'      Safety                                       
         CLEAR TQEID                                                            
         SETMSG TQE                                                             
         FREEMAIN R,A=(1),LV=(0)   Release entry                                
*-                                                                              
*-   We don't need to recalculate the STIMER interval here.  Even if            
*-       the event we are removing is the first in the queue (and               
*-    therefore the shortest amount of time), the current timer will            
*-   fire and the subtask will determine that there is no work to do            
*-    and then recalculate the time until the new first event.  (Why            
*-  didn't I think about that when doing these routines for MILTEN!)            
*-                                                                              
         CLEAR R15                 Return A-ok                                  
TDQEXIT  PEND  ,                                                                
         DROP  TQE,BR                                                           
*                                                                               
         USING CP                  (CP addressability restored)                 
         EJECT                                                                  
***                                                                             
***  Real-Time Timing Subtask.                                                  
***                                                                             
***  The mother task maintains a linked list of timer events                    
***  (sorted with the shortest interval first).                                 
***                                                                             
***  This subtask is responsible for calling the timer event's                  
***  exit routine when it's time has come.  Note that the exit                  
***  routine is run under the subtask, and no CP or user stack                  
***  addressability can be assumed.                                             
***                                                                             
***  The subtask can be posted because an event is ready or                     
***  because a new event was added by the mother task.  The                     
***  subtask doesn't care why it was posted, it simply processes                
***  ready events (if any) and then calculates the amount of time               
***  to sleep until the first event happens.                                    
***                                                                             
         DROP  CP                  No user addressability                       
*                                                                               
TIMER    BASE                                                                   
         L     CVR,=V(CV)                                                       
         CLEAR CPR                 Safety                                       
         VCALL AMODE31             **** Set default 31-bit mode ****            
         LA    R13,TSUBSTK         Timer task...                                
         LR    R8,R13              ...stack                                     
*                                                                               
         CHAP  +1                  We should be above main task                 
*-                                                                              
*-       Main subtask loop.                                                     
*-                                                                              
TSUBLOOP LOOP  BEGIN               A subtask's work is never done...            
         CLEAR TSUBECB             Reset ecb                                    
         STCK  TSUBCLCK            Current clock                                
         CLEAR R2                                                               
         LA    R3,2*100            Default timer is 2 seconds                   
*-                                                                              
*-       Process all ready events.                                              
*-                                                                              
         L     R6,CVTQEQH          First entry                                  
TSUBQLP  IF    (R6,NZ),BEGIN       Process timer entry...                       
         WITH  (TQE,R6)                                                         
         L     R15,TQEID           This TQE's timer id                          
         LM    R2,R3,TQECLCK       Time when event happens                      
         SDL   R2,TSUBCLCK         Amount of time until event happens           
         D     R2,=F'40960000'     Convert to .01 seconds                       
         IF    (R2,NZ),'INCR R3'   To next .01 second                           
*                                                                               
         IF    (R3,NP),BEGIN       Event is complete...                         
         LM    R2,R3,TQERTN        Get information from TQE                     
         ACALL TIMERDQ             Take TQE off queue (frees TQE)               
         LR    R1,R3               Parm ptr                                     
         BASR  RAR,R2              Go to exit routine                           
         B     TSUBLOOP                                                         
         END                                                                    
         END                                                                    
*-                                                                              
*-       Set a timer for the shortest interval (or 2 seconds).                  
*-                                                                              
         ST    R3,TSUBWORK         Interval to wait                             
*                                                                               
         L     R0,=A(TSUBEXIT)                                                  
         STIMER REAL,(0),BINTVL=TSUBWORK  Set interval timer                    
*-                                                                              
*-       Post mother task at least once every 2 seconds.                        
*-                                                                              
         L     R15,TSUBCLCK                                                     
         SL    R15,CVDSPCLK                                                     
         IF    (R15,GE,2),BEGIN    Better post mother...                        
         LA    R1,CVECB                                                         
         POST  (1)                 Post main ECB                                
         END                                                                    
*                                                                               
* Wait for something to happen.                                                 
*                                                                               
         WAIT  ECB=TSUBECB         Wait for event/mother's post                 
         END                                                                    
*                                                                               
         DROP  BR                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*  STIMER exit routine (Called from OS and runs as an IRB).                     
*    Post subtask and return.                                                   
*                                                                               
TSUBEXIT WITH  (TSUBEXIT,R15),BEGIN                                             
         STM   R0,R15,@R13         Save regs                                    
         POST  TSUBECB             Post subtask                                 
         LM    R0,R15,@R13                                                      
         BR    R14                 Return to OS                                 
         END                                                                    
*                                                                               
         QLTORG                                                                 
*                                                                               
* Subtask work cells.                                                           
*                                                                               
TSUBCLCK DS    D                   Current clock                                
TSUBWORK DS    F                                                                
TSUBECB  DS    F                                                                
*                                                                               
TSUBSTK  DS    XL512               Timer subtask's stack area                   
*                                                                               
.NOMISC2 ANOP  ,                   *** PCODE                                    
         AIF   (NOT &$PCODE).NONEWTIO                                           
*                                                                               
*  ELF TIO                                                                      
*                                                                               
TIO      PROC  ,                                                                
         VCALL ELFTIO                                                           
         PEND  ,                                                                
.NONEWTIO ANOP                                                                  
         EJECT                                                                  
*                                                                               
         QLTORG                                                                 
*                                                                               
         VLTORG                                                                 
         END   .                                                                
