CRYPT    TITLE 'WYLBUR Encrypt/Decrypt Routines.'                               
*******************************************************************             
*                                                                 *             
*     WYLBUR/370 - Release VI - Class I - Stanford Proprietary    *             
*                                                                 *             
*******************************************************************             
         HIBAL                                                                  
*                                                                               
         EJECT                                                                  
WYLCRYPT CSECT                                                                  
         REGS  FSR,,,,,,,BR,(WAR,LSR),PAR,PBR,CPR,CVR,SPR,RAR                   
*                                                                               
CRYP     IDENT 0060                17:06:12 03/01/90 (SCH)                      
*                                                                               
         SYSDEFN ,                 Define installation values                   
*                                                                               
         PUSH  DSECTS                                                           
         TITLE 'DSECTS'                                                         
         COPY  CONTROL             Copy CV/CP                                   
         POP   DSECTS                                                           
WYLCRYPT CSECT                                                                  
         DC    C'MAXED TO THE MAX !!'                                           
*                                                                               
         EJECT                                                                  
*                                                                               
*        COPY DSECTS TO HERE                                                    
*                                                                               
         COPY  SCRYPTWA                                                         
         COPY  FCRYPTWA                                                         
         EJECT                                                                  
*                                                                               
*  CODE GOES HERE                                                               
*                                                                               
         EJECT                                                                  
*                                                                               
*                                                                               
*  ENCRYPT AND DECRYPT ROUTINES                                                 
*                                                                               
*  THESE ROUTINES ARE ADAPTED FROM C LANGUAGE VERSIONS.                         
*  THE C LANGUAGE VERSIONS ARE LISTED IN FULL.  THE ASSEMBLER                   
*  VERSIONS DUPLICATE THE C VERSION ALGORITHMS.                                 
*                                                                               
*  SEE EUROCRYPT '87 FOR FEAL BLOCK ALGORITHMS.                                 
*                                                                               
*                                                                               
*                                                                               
         EJECT                                                                  
*                                                                               
*  C VERSION OF SIMPLE ALGORITHIMS.                                             
*  ASSEMBLER VERSIONS FOLLOW.                                                   
*                                                                               
*                                                                               
*                                                                               
*#include <memory.h>                                                            
*#include <ctype.h>                                                             
*                                                                               
*void simple_stream_e();                                                        
*void simple_stream_d();                                                        
*void feal_stream_e();                                                          
*void feal_stream_d();                                                          
*static void feal_block_e();                                                    
*static void feal_block_d();                                                    
*                                                                               
*/*                                                                             
* *  simple algorithm                                                           
* *                                                                             
* */                                                                            
*                                                                               
*void                                                                           
*simple_stream_e(loc,len)                                                       
*  unsigned char * loc;                                                         
*  int len;                                                                     
*{                                                                              
*                                                                               
*  static unsigned char rand32[32];                                             
*  static int xn;                                                               
*  static int xnm3;                                                             
*  static int xnm31;                                                            
*  static int init_flag = 1;                                                    
*                                                                               
*  unsigned char *bufend;                                                       
*  unsigned char temp;                                                          
*                                                                               
*  bufend = loc+len;                                                            
*                                                                               
*  if (init_flag) {                                                             
*    init_flag = 0;                                                             
*    xn = 31;  xnm3 = 28; xnm31 = 0;                                            
*    strncpy(rand32,"4y3*#@zalw4=]a9aas#189&z>_two?ap",32);                     
*  }                                                                            
*                                                                               
*  while (loc < bufend) {                                                       
*    temp = *loc;                                                               
*    rand32[xn] = rand32[xnm3] + rand32[xnm31];                                 
*    *loc = rand32[xn];                                                        
*    rand32[xnm3] = temp;                                                      
*    xn = (xn+1) & 0x1f;                                                        
*    xnm3 = (xnm3+1) & 0x1f;                                                    
*    xnm31 = (xnm31+1) & 0x1f;                                                  
*    loc++;                                                                     
*  }                                                                            
*}                                                                              
*                                                                               
*                                                                               
*void                                                                           
*simple_stream_d(loc,len)                                                       
*  unsigned char * loc;                                                         
*  int len;                                                                     
*{                                                                              
*                                                                               
*  static unsigned char rand32[32];                                             
*  static int xn;                                                               
*  static int xnm3;                                                             
*  static int xnm31;                                                            
*  static int init_flag = 1;                                                    
*                                                                               
*  unsigned char *bufend;                                                       
*  unsigned char temp;                                                          
*                                                                               
*  bufend = loc+len;                                                            
*                                                                               
*  if (init_flag) {                                                             
*    init_flag = 0;                                                             
*    xn = 31;  xnm3 = 28; xnm31 = 0;                                            
*    strncpy(rand32,"4y3*#@zalw4=]a9aas#189&z>_two?ap",32);                     
*  }                                                                            
*                                                                               
*  while (loc < bufend) {                                                       
*    rand32[xn] = rand32[xnm3] + rand32[xnm31];                                 
*    *loc = rand32[xn];                                                        
*    rand32[xnm3] = *loc;                                                      
*    xn = (xn+1) & 0x1f;                                                        
*    xnm3 = (xnm3+1) & 0x1f;                                                    
*    xnm31 = (xnm31+1) & 0x1f;                                                  
*    loc++;                                                                     
*  }                                                                            
*}                                                                              
         EJECT                                                                  
*                                                                               
*  SIMPLE ENCRYPT/DECRYPT ROUTINES                                              
*                                                                               
*  SETSCKEY:                                                                    
*        @R1 - 32 BYTE KEY                                                      
*        @R2 - SCRYPTWA                                                         
*                                                                               
*  NOTES:                                                                       
*  KEY, SIMPLE ENCRYPTION WORK ARE MUST BE INITIALIZED BEFORE                   
*  CALLING SENCRYPT/SDECRYPT.                                                   
*                                                                               
*  CAUTION*** SEPARATE WORK AREAS MUST BE USED FOR THE OUTPUT                   
*  (ENCRYPTED) STREAM AND THE INPUT (DECRYPTED) STREAM.                         
*                                                                               
*  ALGORITHM CLOSELY FOLLOWS C-LANGUAGE ALGORITHM FOUND IN COMMENTS.            
*                                                                               
SETSCKEY XPROC                                                                  
         USING SCRYPTWA,R2                                                      
         MVC   SCKEY,@R1                                                        
         LA    R1,31                                                            
         ST    R1,SCXN                                                          
         LA    R1,31-3                                                          
         ST    R1,SCXNM3                                                        
         LA    R1,31-31                                                         
         ST    R1,SCXNM31                                                       
         PEND                                                                   
         DROP  R2                                                               
         EJECT                                                                  
*                                                                               
*  SIMPLE ENCRYPT ROUTINE                                                       
*                                                                               
*  SENCRYPT:                                                                    
*        R1,R0 - LOC LENGTH OF BUFFER TO ENCRYPT (IN PLACE)                     
*        @R2 - SCRYPTWA                                                         
*                                                                               
*  NOTES:                                                                       
*  KEY, SIMPLE ENCRYPTION WORK ARE MUST BE INITIALIZED BEFORE                   
*  CALLING SENCRYPT/SDECRYPT.                                                   
*                                                                               
*  CAUTION*** SEPARATE WORK AREAS MUST BE USED FOR THE OUTPUT                   
*  (ENCRYPTED) STREAM AND THE INPUT (DECRYPTED) STREAM.                         
*                                                                               
*  ALGORITHM CLOSELY FOLLOWS C-LANGUAGE ALGORITHM FOUND IN COMMENTS.            
*                                                                               
SENCRYPT XPROC                                                                  
         USING SCRYPTWA,R2                                                      
*                                                                               
         COMMENT                   INITIALIZE                                   
         AR    R0,R1                                                            
         L     R3,SCXN                                                          
         L     R4,SCXNM3                                                        
         L     R5,SCXNM31                                                       
         CLEAR R6                                                               
         CLEAR R14                                                              
         CLEAR R15                                                              
*                                                                               
         COMMENT                   LOOP ENCODING                                
         WHILE (R1,LT,R0),BEGIN                                                 
         IC    R14,SCKEY(R4)                                                    
         IC    R15,SCKEY(R5)                                                    
         AR    R15,R14                                                          
         STC   R15,SCKEY(R3)                                                    
         IC    R6,@R1                                                           
         XR    R15,R6                                                           
         STC   R15,@R1                                                          
         IC    R15,SCKEY(R4)                                                    
         XR    R15,R6                                                           
         STC   R15,SCKEY(R4)                                                    
         INCR  R3                                                               
         INCR  R4                                                               
         INCR  R5                                                               
         N     R3,=X'0000001F'                                                  
         N     R4,=X'0000001F'                                                  
         N     R5,=X'0000001F'                                                  
         INCR  R1                                                               
         END                                                                    
*                                                                               
         ST    R3,SCXN                                                          
         ST    R4,SCXNM3                                                        
         ST    R5,SCXNM31                                                       
*                                                                               
         PEND                                                                   
         DROP  R2                                                               
         EJECT                                                                  
*                                                                               
*  SIMPLE DECRYPT ROUTINE                                                       
*                                                                               
*  SDECRYPT:                                                                    
*        R1,R0 - LOC LENGTH OF BUFFER TO DECRYPT (IN PLACE)                     
*        @R2 - SCRYPTWA                                                         
*                                                                               
*  NOTES:                                                                       
*  KEY, SIMPLE ENCRYPTION WORK ARE MUST BE INITIALIZED BEFORE                   
*  CALLING SENCRYPT/SDECRYPT.                                                   
*                                                                               
*  CAUTION*** SEPARATE WORK AREAS MUST BE USED FOR THE OUTPUT                   
*  (ENCRYPTED) STREAM AND THE INPUT (DECRYPTED) STREAM.                         
*                                                                               
*  ALGORITHM CLOSELY FOLLOWS C-LANGUAGE ALGORITHM FOUND IN COMMENTS.            
*                                                                               
SDECRYPT XPROC                                                                  
         USING SCRYPTWA,R2                                                      
*                                                                               
         COMMENT                   INITIALIZE                                   
         AR    R0,R1                                                            
         L     R3,SCXN                                                          
         L     R4,SCXNM3                                                        
         L     R5,SCXNM31                                                       
         CLEAR R6                                                               
         CLEAR R14                                                              
         CLEAR R15                                                              
*                                                                               
         COMMENT                   LOOP ENCODING                                
         WHILE (R1,LT,R0),BEGIN                                                 
         IC    R14,SCKEY(R4)                                                    
         IC    R15,SCKEY(R5)                                                    
         AR    R15,R14                                                          
         STC   R15,SCKEY(R3)                                                    
         IC    R6,@R1                                                           
         XR    R15,R6                                                           
         STC   R15,@R1                                                          
         LR    R6,R15                                                           
         IC    R15,SCKEY(R4)                                                    
         XR    R15,R6                                                           
         STC   R15,SCKEY(R4)                                                    
         INCR  R3                                                               
         INCR  R4                                                               
         INCR  R5                                                               
         N     R3,=X'0000001F'                                                  
         N     R4,=X'0000001F'                                                  
         N     R5,=X'0000001F'                                                  
         INCR  R1                                                               
         END                                                                    
*                                                                               
         ST    R3,SCXN                                                          
         ST    R4,SCXNM3                                                        
         ST    R5,SCXNM31                                                       
*                                                                               
         PEND                                                                   
         DROP  R2                                                               
         QLTORG                                                                 
         EJECT                                                                  
*                                                                               
*  C VERSION OF FEAL STREAM ALGORITHMS.                                         
*  ASSEMBLER VERSIONS FOLLOW.                                                   
*                                                                               
*/*                                                                             
* *  feal stream algorithm                                                      
* *                                                                             
* */                                                                            
*void                                                                           
*feal_stream_e(loc,len)                                                         
*  unsigned char * loc;                                                         
*  int len;                                                                     
*{                                                                              
*  static char key[8];                                                          
*  static char text[8];                                                         
*  static char cipher[8];                                                       
*  static int i = 0;                                                            
*  static int init_flag = 1;                                                    
*                                                                               
*  unsigned char *textend;                                                      
*  textend = loc+len;                                                           
*                                                                               
*  if (init_flag) {                                                             
*    memcpy(key,"342ksesg",8);                                                  
*    memcpy(text,"ked8;:as",8);                                                 
*    memcpy(cipher,"qnb4#.2d",8);                                               
*    init_flag = 0;                                                             
*  }                                                                            
*                                                                               
*  while (loc < textend) {                                                      
*    if (i == 8) {                                                              
*      memcpy(text,cipher,8);                                                   
*      feal_block_e(key,text,cipher);                                           
*      i = 0;                                                                   
*    }                                                                          
*    key[i] = *loc;                                                            
*    *loc = cipher[i];                                                         
*    i++;                                                                       
*    loc++;                                                                     
*  }                                                                            
*}                                                                              
*                                                                               
*/*                                                                             
* *  feal stream algorithm                                                      
* *                                                                             
* */                                                                            
*void                                                                           
*feal_stream_d(loc,len)                                                         
*  unsigned char * loc;                                                         
*  int len;                                                                     
*{                                                                              
*  static char key[8];                                                          
*  static char text[8];                                                         
*  static char cipher[8];                                                       
*  static int i = 0;                                                            
*  static int init_flag = 1;                                                    
*                                                                               
*  unsigned char *textend;                                                      
*  textend = loc+len;                                                           
*                                                                               
*  if (init_flag) {                                                             
*    memcpy(key,"342ksesg",8);                                                  
*    memcpy(text,"ked8;:as",8);                                                 
*    memcpy(cipher,"qnb4#.2d",8);                                               
*    init_flag = 0;                                                             
*  }                                                                            
*                                                                               
*  while (loc < textend) {                                                      
*    if (i == 8) {                                                              
*      memcpy(text,cipher,8);                                                   
*      feal_block_e(key,text,cipher);                                           
*      i = 0;                                                                   
*    }                                                                          
*    *loc = cipher[i];                                                         
*    key[i] = *loc;                                                            
*    i++;                                                                       
*    loc++;                                                                     
*  }                                                                            
*}                                                                              
*                                                                               
         EJECT                                                                  
*                                                                               
*  FEAL ENCRYPT/DECRYPT ROUTINES                                                
*                                                                               
*  SETFCKEY:                                                                    
*        @R1 - 24 BYTE KEY  (KEY,TEXT,CIPHER)                                   
*        @R2 - FCRYPTWA                                                         
*                                                                               
*  NOTES:                                                                       
*  FEAL ENCRYPTION WORK AREA MUST BE INITIALIZED BEFORE                         
*  CALLING FENCRYPT/FDECRYPT.                                                   
*                                                                               
*  CAUTION*** SEPARATE WORK AREAS MUST BE USED FOR THE OUTPUT                   
*  (ENCRYPTED) STREAM AND THE INPUT (DECRYPTED) STREAM.                         
*                                                                               
*  ALGORITHM CLOSELY FOLLOWS C-LANGUAGE ALGORITHM FOUND IN COMMENTS.            
*                                                                               
SETFCKEY XPROC                                                                  
         USING FCRYPTWA,R2                                                      
         MVC   FCKEY(L'FCKEY+L'FCTEXT+L'FCCIPHER),@R1                           
         CLEAR R0                                                               
         ST    R0,FCINDEX                                                       
         PEND                                                                   
         DROP  R2                                                               
         EJECT                                                                  
*                                                                               
*  FEAL STREAM ENCRYPT ROUTINES                                                 
*                                                                               
*  FENCRYPT:                                                                    
*        R1,R0 - LOC LENGTH OF BUFFER TO ENCRYPT (IN PLACE)                     
*        @R2 - FCRYPTWA                                                         
*                                                                               
*  NOTES:                                                                       
*  FEAL ENCRYPTION WORK AREA MUST BE INITIALIZED BEFORE                         
*  CALLING FENCRYPT/FDECRYPT.                                                   
*                                                                               
*  CAUTION*** SEPARATE WORK AREAS MUST BE USED FOR THE OUTPUT                   
*  (ENCRYPTED) STREAM AND THE INPUT (DECRYPTED) STREAM.                         
*                                                                               
*  ALGORITHM CLOSELY FOLLOWS C-LANGUAGE ALGORITHM FOUND IN COMMENTS.            
*                                                                               
FENCRYPT XPROC                                                                  
         USING FCRYPTWA,R2                                                      
         AR    R0,R1                                                            
         CLEAR R6                                                               
         CLEAR R15                                                              
*                                                                               
         COMMENT                   LOOP ENCRYPTING                              
         L     R3,FCINDEX                                                       
         WHILE (R1,LT,R0),BEGIN                                                 
         IF    (R3,EQ,8),BEGIN                                                  
         MVC   FCTEXT,FCCIPHER                                                  
         XPUSH R0,R2                                                            
         LA    R0,FCKEY                                                         
         LA    R1,FCTEXT                                                        
         LA    R2,FCCIPHER                                                      
         ACALL FEALBLKE                                                         
         XPOP  R0,R2                                                            
         CLEAR R3                                                               
         END                                                                    
         IC    R6,@R1                                                           
         IC    R15,FCKEY(R3)                                                    
         XR    R15,R6                                                           
         STC   R15,FCKEY(R3)                                                    
         IC    R15,FCCIPHER(R3)                                                 
         XR    R15,R6                                                           
         STC   R15,@R1                                                          
         INCR  R3                                                               
         INCR  R1                                                               
         END                                                                    
         ST    R3,FCINDEX                                                       
         PEND                                                                   
         DROP  R2                                                               
         EJECT                                                                  
*                                                                               
*  FEAL STREAM DECRYPT ROUTINES                                                 
*                                                                               
*  FDECRYPT:                                                                    
*        R1,R0 - LOC LENGTH OF BUFFER TO DECRYPT (IN PLACE)                     
*        @R2 - FCRYPTWA                                                         
*                                                                               
*  NOTES:                                                                       
*  FEAL ENCRYPTION WORK AREA MUST BE INITIALIZED BEFORE                         
*  CALLING FENCRYPT/FDECRYPT.                                                   
*                                                                               
*  CAUTION*** SEPARATE WORK AREAS MUST BE USED FOR THE OUTPUT                   
*  (ENCRYPTED) STREAM AND THE INPUT (DECRYPTED) STREAM.                         
*                                                                               
*  ALGORITHM CLOSELY FOLLOWS C-LANGUAGE ALGORITHM FOUND IN COMMENTS.            
*                                                                               
FDECRYPT XPROC                                                                  
         USING FCRYPTWA,R2                                                      
         AR    R0,R1                                                            
         CLEAR R6                                                               
         CLEAR R15                                                              
*                                                                               
         COMMENT                   LOOP DECRYPTING                              
         L     R3,FCINDEX                                                       
         WHILE (R1,LT,R0),BEGIN                                                 
         IF    (R3,EQ,8),BEGIN                                                  
         MVC   FCTEXT,FCCIPHER                                                  
         XPUSH R0,R2                                                            
         LA    R0,FCKEY                                                         
         LA    R1,FCTEXT                                                        
         LA    R2,FCCIPHER                                                      
         ACALL FEALBLKE                                                         
         XPOP  R0,R2                                                            
         CLEAR R3                                                               
         END                                                                    
         IC    R6,@R1                                                           
         IC    R15,FCCIPHER(R3)                                                 
         XR    R15,R6                                                           
         STC   R15,@R1                                                          
         LR    R6,R15                                                           
         IC    R15,FCKEY(R3)                                                    
         XR    R15,R6                                                           
         STC   R15,FCKEY(R3)                                                    
         INCR  R3                                                               
         INCR  R1                                                               
         END                                                                    
         ST    R3,FCINDEX                                                       
         PEND                                                                   
         DROP  R2                                                               
         QLTORG                                                                 
         EJECT                                                                  
*                                                                               
*/*                                                                             
* * feal algorithm                                                              
* *                                                                             
* */                                                                            
*                                                                               
*#define f(a0,a1,a2,a3,b0,b1,f0,f1,f2,f3)  \                                    
*  { \                                                                          
*    f1 = (a1)  (b0)  (a0);  \                                                
*    f2 = (a2)  (b1)  (a3);  \                                                
*    s1( f1, f2, f1 );  \                                                       
*    s0( f2, f1, f2 );  \                                                       
*    s0( (a0), f1, f0 );   \                                                    
*    s1( (a3), f2, f3 );  \                                                     
*  }                                                                            
*                                                                               
*                                                                               
*#define fk(a0,a1,a2,a3,b0,b1,b2,b3,fk0,fk1,fk2,fk3) \                          
*  { \                                                                          
*    fk1 = (a0)  (a1); \                                                       
*    fk2 = (a2)  (a3); \                                                       
*    s1( fk1, fk2  (b0), fk1 ); \                                              
*    s0( fk2, fk1  (b1), fk2 ); \                                              
*    s0( (a0),  fk1  (b2), fk0 ); \                                            
*    s1( (a3),  fk2  (b3), fk3 ); \                                            
*  }                                                                            
*                                                                               
*                                                                               
*#define s0(a0,b0,f0) \                                                         
*  { \                                                                          
*    f0 = (a0) + (b0); \                                                        
*    rot2( f0 ); \                                                              
*  }                                                                            
*                                                                               
*                                                                               
*#define s1(a0,b0,f0) \                                                         
*  { \                                                                          
*    f0 = (a0) + (b0) + 1; \                                                    
*    rot2( f0 ); \                                                              
*  }                                                                            
*                                                                               
*#define rot2(f0) \                                                             
*  { \                                                                          
*    f0 = (f0 << 2) | ((f0 >> 6) & 0x03); \                                     
*  }                                                                            
*                                                                               
         EJECT                                                                  
*                                                                               
*  FEAL BLOCK MACROS AND WORK AREA                                              
*                                                                               
*  FROM C-CODE;   SEE COMMENTS ON PREVIOUS PAGE, ETC.                           
*                                                                               
         SPACE 1                                                                
*                                                                               
*  F                                                                            
*                                                                               
         MACRO                                                                  
         F     &A0,&A1,&A2,&A3,&B0,&B1,&F0,&F1,&F2,&F3                          
         XXXOR &F1,&A1,&B0,&A0                                                  
         XXXOR &F2,&A2,&B1,&A3                                                  
         S1    &F1,&F2,&F1                                                      
         S0    &F2,&F1,&F2                                                      
         S0    &A0,&F1,&F0                                                      
         S1    &A3,&F2,&F3                                                      
         MEND                                                                   
*                                                                               
*  FK                                                                           
*                                                                               
         MACRO                                                                  
         FK    &A0,&A1,&A2,&A3,                                        X        
               &B0,&B0X,&B1,&B1X,&B2,&B2X,&B3,&B3X,                    X        
               &FK0,&FK1,&FK2,&FK3                                              
         XOR   &FK1,&A0,&A1                                                     
         XOR   &FK2,&A2,&A3                                                     
         XXXOR TEMP,&FK2,&B0,&B0X                                               
         S1    &FK1,TEMP,&FK1                                                   
         XXXOR TEMP,&FK1,&B1,&B1X                                               
         S0    &FK2,TEMP,&FK2                                                   
         XXXOR TEMP,&FK1,&B2,&B2X                                               
         S0    &A0,TEMP,&FK0                                                    
         XXXOR TEMP,&FK2,&B3,&B3X                                               
         S1    &A3,TEMP,&FK3                                                    
         MEND                                                                   
*                                                                               
*  S0                                                                           
*                                                                               
         MACRO                                                                  
         S0    &A0,&B0,&F0                                                      
         CLEAR R0                                                               
         CLEAR R1                                                               
         CLEAR R2                                                               
         IC    R0,&A0                                                           
         IC    R1,&B0                                                           
         LA    R2,X'FF'                                                         
         AR    R0,R1                                                            
         NR    R0,R2                                                            
         LR    R1,R0                                                            
         SLL   R0,2                                                             
         SRL   R1,6                                                             
         OR    R0,R1                                                            
         NR    R0,R2                                                            
         STC   R0,&F0                                                           
         MEND                                                                   
*                                                                               
*  S1                                                                           
*                                                                               
         MACRO                                                                  
         S1    &A0,&B0,&F0                                                      
         CLEAR R0                                                               
         CLEAR R1                                                               
         CLEAR R2                                                               
         IC    R0,&A0                                                           
         IC    R1,&B0                                                           
         LA    R2,X'FF'                                                         
         AR    R0,R1                                                            
         A     R0,=F'1'                                                         
         NR    R0,R2                                                            
         LR    R1,R0                                                            
         SLL   R0,2                                                             
         SRL   R1,6                                                             
         OR    R0,R1                                                            
         NR    R0,R2                                                            
         STC   R0,&F0                                                           
         MEND                                                                   
*                                                                               
*  LOADC                                                                        
*                                                                               
         MACRO                                                                  
         LOADC &A0,&B0                                                          
         MVC   &A0.(1),&B0                                                      
         MEND                                                                   
*                                                                               
*  LOADX                                                                        
*                                                                               
         MACRO                                                                  
         LOADX &A0,&B0                                                          
         XC    &A0.(1),&B0                                                      
         MEND                                                                   
*                                                                               
*  XOR                                                                          
*                                                                               
         MACRO                                                                  
         XOR   &F0,&A0,&B0                                                      
         MVC   &F0.(1),&A0                                                      
         XC    &F0.(1),&B0                                                      
         MEND                                                                   
*                                                                               
*  XXXOR                                                                        
*                                                                               
         MACRO                                                                  
         XXXOR &F0,&A0,&B0,&C0                                                  
         MVC   &F0.(1),&A0                                                      
         XC    &F0.(1),&B0                                                      
         XC    &F0.(1),&C0                                                      
         MEND                                                                   
*                                                                               
*  CHARS                                                                        
*                                                                               
         MACRO                                                                  
         CHARS &P1,&P2,&P3,&P4,&P5,&P6,&P7,&P8,&P9                              
         AIF   ('&P1' EQ '').CDONE                                              
&P1      DS    CL1                                                              
         AIF   ('&P2' EQ '').CDONE                                              
&P2      DS    CL1                                                              
         AIF   ('&P3' EQ '').CDONE                                              
&P3      DS    CL1                                                              
         AIF   ('&P4' EQ '').CDONE                                              
&P4      DS    CL1                                                              
         AIF   ('&P5' EQ '').CDONE                                              
&P5      DS    CL1                                                              
         AIF   ('&P6' EQ '').CDONE                                              
&P6      DS    CL1                                                              
         AIF   ('&P7' EQ '').CDONE                                              
&P7      DS    CL1                                                              
         AIF   ('&P8' EQ '').CDONE                                              
&P8      DS    CL1                                                              
         AIF   ('&P9' EQ '').CDONE                                              
&P9      DS    CL1                                                              
.CDONE   ANOP                                                                   
         MEND                                                                   
*                                                                               
*                                                                               
*  FEALBWA  - FEAL BLOCK ENCODE/DECODE WORK AREA                                
*                                                                               
*                                                                               
*                                                                               
FEALBWA  RECORD BEGIN                                                           
KEY      DS    CL8                                                              
TEXT     DS    CL8                                                              
CIPHER   DS    CL8                                                              
         CHARS P0,P1,P2,P3,P4,P5,P6,P7                                          
         CHARS KEYB0,KEYB1,KEYB2,KEYB3,KEYB4,KEYB5,KEYB6,KEYB7                  
         CHARS C0,C1,C2,C3,C4,C5,C6,C7                                          
         CHARS K0B0,K0B1,K1B0,K1B1,K2B0,K2B1,K3B0,K3B1                          
         CHARS K4B0,K4B1,K5B0,K5B1,K6B0,K6B1,K7B0,K7B1                          
         CHARS K8B0,K8B1,K9B0,K9B1,KAB0,KAB1,KBB0,KBB1                          
         CHARS KCB0,KCB1,KDB0,KDB1,KEB0,KEB1,KFB0,KFB1                          
         CHARS F0B0,F0B1,F0B2,F0B3,F1B0,F1B1,F1B2,F1B3                          
         CHARS F2B0,F2B1,F2B2,F2B3,F3B0,F3B1,F3B2,F3B3                          
         CHARS F4B0,F4B1,F4B2,F4B3,F5B0,F5B1,F5B2,F5B3                          
         CHARS F6B0,F6B1,F6B2,F6B3,F7B0,F7B1,F7B2,F7B3                          
         CHARS ZERO,TEMP                                                        
         END                                                                    
         EJECT                                                                  
*                                                                               
*   FEALBLKE - FEAL BLOCK ENCODE                                                
*                                                                               
*   AS CONVERTED FROM C-CODE                                                    
*                                                                               
*   ON ENTRY:                                                                   
*        @R0 - KEY (8 CHAR)                                                     
*        @R1 - TEXT (8 CHAR)                                                    
*        @R2 - CIPHER (8 CHAR)   (RETURNED)                                     
*                                                                               
*                                                                               
*                                                                               
*                                                                               
*/*                                                                             
* *  implementation of feal algorithm                                           
* *                                                                             
* *  see advances in cryptology - eurocrypt '87                                 
* *                                                                             
* */                                                                            
*static void                                                                    
*feal_block_e(key,text,cipher)                                                  
*  unsigned char key[8];                                                        
*  unsigned char text[8];                                                       
*  unsigned char cipher[8];                                                     
*                                                                               
*{                                                                              
*  /*  pn - plaintext, keybn - key, cn - ciphertext      */                     
*  /*  knbn - expanded key, fnbn - temp output from f block */                  
*                                                                               
*  unsigned char p0,p1,p2,p3,p4,p5,p6,p7;                                       
*  unsigned char keyb0,keyb1,keyb2,keyb3,keyb4,keyb5,keyb6,keyb7;               
*  unsigned char c0,c1,c2,c3,c4,c5,c6,c7;                                       
*  unsigned char k0b0,k0b1,k1b0,k1b1,k2b0,k2b1,k3b0,k3b1;                       
*  unsigned char k4b0,k4b1,k5b0,k5b1,k6b0,k6b1,k7b0,k7b1;                       
*  unsigned char k8b0,k8b1,k9b0,k9b1,kab0,kab1,kbb0,kbb1;                       
*  unsigned char kcb0,kcb1,kdb0,kdb1,keb0,keb1,kfb0,kfb1;                       
*  unsigned char f0b0,f0b1,f0b2,f0b3,f1b0,f1b1,f1b2,f1b3;                       
*  unsigned char f2b0,f2b1,f2b2,f2b3,f3b0,f3b1,f3b2,f3b3;                       
*  unsigned char f4b0,f4b1,f4b2,f4b3,f5b0,f5b1,f5b2,f5b3;                       
*  unsigned char f6b0,f6b1,f6b2,f6b3,f7b0,f7b1,f7b2,f7b3;                       
*                                                                               
FEALBLKE XPROC FEALBWA                                                          
*                                                                               
         LA    R6,FEALBLKE+2048                                                 
         USING FEALBLKE+2048,R6                                                 
*                                                                               
         CLEAR FEALBWA                                                          
         LR    R3,R0                                                            
         MVC   KEY,@R3                                                          
         MVC   TEXT,@R1                                                         
         XPUSH R2                  SAVE CIPHER RETURN ADDRESS                   
*                                                                               
         CLEAR R0                                                               
         CLEAR R1                                                               
         CLEAR R2                                                               
         CLEAR R3                                                               
         CLEAR R4                                                               
         CLEAR R5                                                               
*                                                                               
*  /* init variables */                                                         
*  p0 = text[0]; p1 = text[1]; p2 = text[2]; p3 = text[3];                      
*  p4 = text[4]; p5 = text[5]; p6 = text[6]; p7 = text[7];                      
*  keyb0 = key[0]; keyb1 = key[1]; keyb2 = key[2]; keyb3 = key[3];              
*  keyb4 = key[4]; keyb5 = key[5]; keyb6 = key[6]; keyb7 = key[7];              
*                                                                               
         LOADC P0,TEXT+0                                                        
         LOADC P1,TEXT+1                                                        
         LOADC P2,TEXT+2                                                        
         LOADC P3,TEXT+3                                                        
         LOADC P4,TEXT+4                                                        
         LOADC P5,TEXT+5                                                        
         LOADC P6,TEXT+6                                                        
         LOADC P7,TEXT+7                                                        
         LOADC KEYB0,KEY+0                                                      
         LOADC KEYB1,KEY+1                                                      
         LOADC KEYB2,KEY+2                                                      
         LOADC KEYB3,KEY+3                                                      
         LOADC KEYB4,KEY+4                                                      
         LOADC KEYB5,KEY+5                                                      
         LOADC KEYB6,KEY+6                                                      
         LOADC KEYB7,KEY+7                                                      
*                                                                               
*  /* expand key */                                                             
*                                                                               
*  /* expand key ( keyb0, ... keyb7, k0b1,k0b2, .....kfb0,kfb1)  */             
*                                                                               
*  /* fk0 */                                                                    
*  fk(keyb0,keyb1,keyb2,keyb3,                                                  
*     keyb4,keyb5,keyb6,keyb7,                                                  
*     k0b0,k0b1,k1b0,k1b1);                                                     
*                                                                               
         FK    KEYB0,KEYB1,KEYB2,KEYB3,                                X        
               KEYB4,ZERO,KEYB5,ZERO,KEYB6,ZERO,KEYB7,ZERO,            X        
               K0B0,K0B1,K1B0,K1B1                                              
*                                                                               
*  /* fk1 */                                                                    
*  fk(keyb4,keyb5,keyb6,keyb7,                                                  
*     k0b0keyb0,k0b1keyb1,k1b0keyb2,k1b1keyb3,                              
*     k2b0,k2b1,k3b0,k3b1);                                                     
*                                                                               
         FK    KEYB4,KEYB5,KEYB6,KEYB7,                                X        
               K0B0,KEYB0,K0B1,KEYB1,K1B0,KEYB2,K1B1,KEYB3,            X        
               K2B0,K2B1,K3B0,K3B1                                              
*                                                                               
*  /* fk2 */                                                                    
*  fk(k0b0,k0b1,k1b0,k1b1,                                                      
*     k2b0keyb4,k2b1keyb5,k3b0keyb6,k3b1keyb7,                              
*     k4b0,k4b1,k5b0,k5b1);                                                     
*                                                                               
         FK    K0B0,K0B1,K1B0,K1B1,                                    X        
               K2B0,KEYB4,K2B1,KEYB5,K3B0,KEYB6,K3B1,KEYB7,            X        
               K4B0,K4B1,K5B0,K5B1                                              
*                                                                               
*  /* fk3 */                                                                    
*  fk(k2b0,k2b1,k3b0,k3b1,                                                      
*     k4b0k0b0,k4b1k0b1,k5b0k1b0,k5b1k1b1,                                  
*     k6b0,k6b1,k7b0,k7b1);                                                     
*                                                                               
         FK    K2B0,K2B1,K3B0,K3B1,                                    X        
               K4B0,K0B0,K4B1,K0B1,K5B0,K1B0,K5B1,K1B1,                X        
               K6B0,K6B1,K7B0,K7B1                                              
*                                                                               
*  /* fk4 */                                                                    
*  fk(k4b0,k4b1,k5b0,k5b1,                                                      
*     k6b0k2b0,k6b1k2b1,k7b0k3b0,k7b1k3b1,                                  
*     k8b0,k8b1,k9b0,k9b1);                                                     
*                                                                               
         FK    K4B0,K4B1,K5B0,K5B1,                                    X        
               K6B0,K2B0,K6B1,K2B1,K7B0,K3B0,K7B1,K3B1,                X        
               K8B0,K8B1,K9B0,K9B1                                              
*                                                                               
*  /* fk5 */                                                                    
*  fk(k6b0,k6b1,k7b0,k7b1,                                                      
*     k8b0k4b0,k8b1k4b1,k9b0k5b0,k9b1k5b1,                                  
*     kab0,kab1,kbb0,kbb1);                                                     
*                                                                               
         FK    K6B0,K6B1,K7B0,K7B1,                                    X        
               K8B0,K4B0,K8B1,K4B1,K9B0,K5B0,K9B1,K5B1,                X        
               KAB0,KAB1,KBB0,KBB1                                              
*                                                                               
*  /* fk6 */                                                                    
*  fk(k8b0,k8b1,k9b0,k9b1,                                                      
*     kab0k6b0,kab1k6b1,kbb0k7b0,kbb1k7b1,                                  
*     kcb0,kcb1,kdb0,kdb1);                                                     
*                                                                               
         FK    K8B0,K8B1,K9B0,K9B1,                                    X        
               KAB0,K6B0,KAB1,K6B1,KBB0,K7B0,KBB1,K7B1,                X        
               KCB0,KCB1,KDB0,KDB1                                              
*                                                                               
*  /* fk7 */                                                                    
*  fk(kab0,kab1,kbb0,kbb1,                                                      
*     kcb0k8b0,kcb1k8b1,kdb0k9b0,kdb1k9b1,                                  
*     keb0,keb1,kfb0,kfb1);                                                     
*                                                                               
         FK    KAB0,KAB1,KBB0,KBB1,                                    X        
               KCB0,K8B0,KCB1,K8B1,KDB0,K9B0,KDB1,K9B1,                X        
               KEB0,KEB1,KFB0,KFB1                                              
*                                                                               
*  /* end of expand key */                                                      
*                                                                               
*                                                                               
*  /* encode text */                                                            
*                                                                               
*  /*  encode (p0 ... p7, k0b0,k0b1 ...kfb0,kfb1,  c0 ... c7)  */               
*                                                                               
*  /* enter */                                                                  
*  p0 = k8b0;                                                                  
*  p1 = k8b1;                                                                  
*  p2 = k9b0;                                                                  
*  p3 = k9b1;                                                                  
*  p4 = kab0;                                                                  
*  p5 = kab1;                                                                  
*  p6 = kbb0;                                                                  
*  p7 = kbb1;                                                                  
*  p4 = p0;                                                                    
*  p5 = p1;                                                                    
*  p6 = p2;                                                                    
*  p7 = p3;                                                                    
*                                                                               
         LOADX P0,K8B0                                                          
         LOADX P1,K8B1                                                          
         LOADX P2,K9B0                                                          
         LOADX P3,K9B1                                                          
         LOADX P4,KAB0                                                          
         LOADX P5,KAB1                                                          
         LOADX P6,KBB0                                                          
         LOADX P7,KBB1                                                          
         LOADX P4,P0                                                            
         LOADX P5,P1                                                            
         LOADX P6,P2                                                            
         LOADX P7,P3                                                            
*                                                                               
*  /* f0 */                                                                     
*  f(p4,p5,p6,p7,k0b0,k0b1,f0b0,f0b1,f0b2,f0b3);                                
*  f0b0 = p0;                                                                  
*  f0b1 = p1;                                                                  
*  f0b2 = p2;                                                                  
*  f0b3 = p3;                                                                  
*                                                                               
         F     P4,P5,P6,P7,K0B0,K0B1,F0B0,F0B1,F0B2,F0B3                        
         LOADX F0B0,P0                                                          
         LOADX F0B1,P1                                                          
         LOADX F0B2,P2                                                          
         LOADX F0B3,P3                                                          
*                                                                               
*  /* f1 */                                                                     
*  f(f0b0,f0b1,f0b2,f0b3,k1b0,k1b1,f1b0,f1b1,f1b2,f1b3);                        
*  f1b0 =  p4;                                                                 
*  f1b1 =  p5;                                                                 
*  f1b2 =  p6;                                                                 
*  f1b3 =  p7;                                                                 
*                                                                               
         F     F0B0,F0B1,F0B2,F0B3,K1B0,K1B1,F1B0,F1B1,F1B2,F1B3                
         LOADX F1B0,P4                                                          
         LOADX F1B1,P5                                                          
         LOADX F1B2,P6                                                          
         LOADX F1B3,P7                                                          
*                                                                               
*  /* f2 */                                                                     
*  f(f1b0,f1b1,f1b2,f1b3,k2b0,k2b1,f2b0,f2b1,f2b2,f2b3);                        
*  f2b0 = f0b0;                                                                
*  f2b1 = f0b1;                                                                
*  f2b2 = f0b2;                                                                
*  f2b3 = f0b3;                                                                
*                                                                               
         F     F1B0,F1B1,F1B2,F1B3,K2B0,K2B1,F2B0,F2B1,F2B2,F2B3                
         LOADX F2B0,F0B0                                                        
         LOADX F2B1,F0B1                                                        
         LOADX F2B2,F0B2                                                        
         LOADX F2B3,F0B3                                                        
*                                                                               
*  /* f3 */                                                                     
*  f(f2b0,f2b1,f2b2,f2b3,k3b0,k3b1,f3b0,f3b1,f3b2,f3b3);                        
*  f3b0 = f1b0;                                                                
*  f3b1 = f1b1;                                                                
*  f3b2 = f1b2;                                                                
*  f3b3 = f1b3;                                                                
*                                                                               
         F     F2B0,F2B1,F2B2,F2B3,K3B0,K3B1,F3B0,F3B1,F3B2,F3B3                
         LOADX F3B0,F1B0                                                        
         LOADX F3B1,F1B1                                                        
         LOADX F3B2,F1B2                                                        
         LOADX F3B3,F1B3                                                        
*                                                                               
*  /* f4 */                                                                     
*  f(f3b0,f3b1,f3b2,f3b3,k4b0,k4b1,f4b0,f4b1,f4b2,f4b3);                        
*  f4b0 = f2b0;                                                                
*  f4b1 = f2b1;                                                                
*  f4b2 = f2b2;                                                                
*  f4b3 = f2b3;                                                                
*                                                                               
         F     F3B0,F3B1,F3B2,F3B3,K4B0,K4B1,F4B0,F4B1,F4B2,F4B3                
         LOADX F4B0,F2B0                                                        
         LOADX F4B1,F2B1                                                        
         LOADX F4B2,F2B2                                                        
         LOADX F4B3,F2B3                                                        
*                                                                               
*  /* f5 */                                                                     
*  f(f4b0,f4b1,f4b2,f4b3,k5b0,k5b1,f5b0,f5b1,f5b2,f5b3);                        
*  f5b0 = f3b0;                                                                
*  f5b1 = f3b1;                                                                
*  f5b2 = f3b2;                                                                
*  f5b3 = f3b3;                                                                
*                                                                               
         F     F4B0,F4B1,F4B2,F4B3,K5B0,K5B1,F5B0,F5B1,F5B2,F5B3                
         LOADX F5B0,F3B0                                                        
         LOADX F5B1,F3B1                                                        
         LOADX F5B2,F3B2                                                        
         LOADX F5B3,F3B3                                                        
*                                                                               
*  /* f6 */                                                                     
*  f(f5b0,f5b1,f5b2,f5b3,k6b0,k6b1,f6b0,f6b1,f6b2,f6b3);                        
*  f6b0 = f4b0;                                                                
*  f6b1 = f4b1;                                                                
*  f6b2 = f4b2;                                                                
*  f6b3 = f4b3;                                                                
*                                                                               
         F     F5B0,F5B1,F5B2,F5B3,K6B0,K6B1,F6B0,F6B1,F6B2,F6B3                
         LOADX F6B0,F4B0                                                        
         LOADX F6B1,F4B1                                                        
         LOADX F6B2,F4B2                                                        
         LOADX F6B3,F4B3                                                        
*                                                                               
*  /* f7 */                                                                     
*  f(f6b0,f6b1,f6b2,f6b3,k7b0,k7b1,f7b0,f7b1,f7b2,f7b3);                        
*  f7b0 = f5b0;                                                                
*  f7b1 = f5b1;                                                                
*  f7b2 = f5b2;                                                                
*  f7b3 = f5b3;                                                                
*                                                                               
         F     F6B0,F6B1,F6B2,F6B3,K7B0,K7B1,F7B0,F7B1,F7B2,F7B3                
         LOADX F7B0,F5B0                                                        
         LOADX F7B1,F5B1                                                        
         LOADX F7B2,F5B2                                                        
         LOADX F7B3,F5B3                                                        
*                                                                               
*  /* exit */                                                                   
*  c0 = f7b0  kcb0;                                                            
*  c1 = f7b1  kcb1;                                                            
*  c2 = f7b2  kdb0;                                                            
*  c3 = f7b3  kdb1;                                                            
*  c4 = f7b0  f6b0  keb0;                                                     
*  c5 = f7b1  f6b1  keb1;                                                     
*  c6 = f7b2  f6b2  kfb0;                                                     
*  c7 = f7b3  f6b3  kfb1;                                                     
*                                                                               
         XOR   C0,F7B0,KCB0                                                     
         XOR   C1,F7B1,KCB1                                                     
         XOR   C2,F7B2,KDB0                                                     
         XOR   C3,F7B3,KDB1                                                     
         XXXOR C4,F7B0,F6B0,KEB0                                                
         XXXOR C5,F7B1,F6B1,KEB1                                                
         XXXOR C6,F7B2,F6B2,KFB0                                                
         XXXOR C7,F7B3,F6B3,KFB1                                                
*                                                                               
*  /* encode end */                                                             
*                                                                               
*  /* return cipher text */                                                     
*  cipher[0] = c0;  cipher[1] = c1; cipher[2] = c2; cipher[3] = c3;             
*  cipher[4] = c4;  cipher[5] = c5; cipher[6] = c6; cipher[7] = c7;             
*                                                                               
         LOADC CIPHER+0,C0                                                      
         LOADC CIPHER+1,C1                                                      
         LOADC CIPHER+2,C2                                                      
         LOADC CIPHER+3,C3                                                      
         LOADC CIPHER+4,C4                                                      
         LOADC CIPHER+5,C5                                                      
         LOADC CIPHER+6,C6                                                      
         LOADC CIPHER+7,C7                                                      
*                                                                               
         COMMENT                   ALL DONE                                     
         XPOP  R2                                                               
         MVC   @R2(L'CIPHER),CIPHER                                             
         PEND                                                                   
         DROP  R6                                                               
*}                                                                              
         QLTORG                                                                 
         EJECT                                                                  
*                                                                               
*   FEALBLKD - FEAL BLOCK DECODE                                                
*                                                                               
*   AS CONVERTED FROM C-CODE                                                    
*                                                                               
*   ON ENTRY:                                                                   
*        @R0 - KEY (8 CHAR)                                                     
*        @R1 - TEXT (8 CHAR)                                                    
*        @R2 - CIPHER (8 CHAR)   (RETURNED)                                     
*                                                                               
*                                                                               
*                                                                               
*                                                                               
*/*                                                                             
* *  implementation of feal algorithm                                           
* *                                                                             
* *  see advances in cryptology - eurocrypt '87                                 
* *                                                                             
* */                                                                            
*static void                                                                    
*feal_block_d(key,text,cipher)                                                  
*  unsigned char key[8];                                                        
*  unsigned char text[8];                                                       
*  unsigned char cipher[8];                                                     
*                                                                               
*{                                                                              
*  /*  pn - plaintext, keybn - key, cn - ciphertext      */                     
*  /*  knbn - expanded key, fnbn - temp output from f block */                  
*  unsigned char p0,p1,p2,p3,p4,p5,p6,p7;                                       
*  unsigned char keyb0,keyb1,keyb2,keyb3,keyb4,keyb5,keyb6,keyb7;               
*  unsigned char c0,c1,c2,c3,c4,c5,c6,c7;                                       
*  unsigned char k0b0,k0b1,k1b0,k1b1,k2b0,k2b1,k3b0,k3b1;                       
*  unsigned char k4b0,k4b1,k5b0,k5b1,k6b0,k6b1,k7b0,k7b1;                       
*  unsigned char k8b0,k8b1,k9b0,k9b1,kab0,kab1,kbb0,kbb1;                       
*  unsigned char kcb0,kcb1,kdb0,kdb1,keb0,keb1,kfb0,kfb1;                       
*  unsigned char f0b0,f0b1,f0b2,f0b3,f1b0,f1b1,f1b2,f1b3;                       
*  unsigned char f2b0,f2b1,f2b2,f2b3,f3b0,f3b1,f3b2,f3b3;                       
*  unsigned char f4b0,f4b1,f4b2,f4b3,f5b0,f5b1,f5b2,f5b3;                       
*  unsigned char f6b0,f6b1,f6b2,f6b3,f7b0,f7b1,f7b2,f7b3;                       
*                                                                               
*                                                                               
FEALBLKD XPROC FEALBWA                                                          
*                                                                               
         LA    R6,FEALBLKD+2048                                                 
         USING FEALBLKD+2048,R6                                                 
*                                                                               
         CLEAR FEALBWA                                                          
         LR    R3,R0                                                            
         MVC   KEY,@R3                                                          
         MVC   CIPHER,@R2                                                       
         XPUSH R1                  SAVE CIPHER RETURN ADDRESS                   
*                                                                               
         CLEAR R0                                                               
         CLEAR R1                                                               
         CLEAR R2                                                               
         CLEAR R3                                                               
         CLEAR R4                                                               
         CLEAR R5                                                               
*                                                                               
*  /* init variables */                                                         
*  c0 = cipher[0]; c1 = cipher[1]; c2 = cipher[2]; c3 = cipher[3];              
*  c4 = cipher[4]; c5 = cipher[5]; c6 = cipher[6]; c7 = cipher[7];              
*  keyb0 = key[0]; keyb1 = key[1]; keyb2 = key[2]; keyb3 = key[3];              
*  keyb4 = key[4]; keyb5 = key[5]; keyb6 = key[6]; keyb7 = key[7];              
*                                                                               
         LOADC C0,CIPHER+0                                                      
         LOADC C1,CIPHER+1                                                      
         LOADC C2,CIPHER+2                                                      
         LOADC C3,CIPHER+3                                                      
         LOADC C4,CIPHER+4                                                      
         LOADC C5,CIPHER+5                                                      
         LOADC C6,CIPHER+6                                                      
         LOADC C7,CIPHER+7                                                      
         LOADC KEYB0,KEY+0                                                      
         LOADC KEYB1,KEY+1                                                      
         LOADC KEYB2,KEY+2                                                      
         LOADC KEYB3,KEY+3                                                      
         LOADC KEYB4,KEY+4                                                      
         LOADC KEYB5,KEY+5                                                      
         LOADC KEYB6,KEY+6                                                      
         LOADC KEYB7,KEY+7                                                      
*                                                                               
*  /* expand key */                                                             
*                                                                               
*  /* expand key ( keyb0, ... keyb7, k0b1,k0b2, .....kfb0,kfb1)  */             
*                                                                               
*  /* fk0 */                                                                    
*  fk(keyb0,keyb1,keyb2,keyb3,                                                  
*     keyb4,keyb5,keyb6,keyb7,                                                  
*     k0b0,k0b1,k1b0,k1b1);                                                     
*                                                                               
         FK    KEYB0,KEYB1,KEYB2,KEYB3,                                X        
               KEYB4,ZERO,KEYB5,ZERO,KEYB6,ZERO,KEYB7,ZERO,            X        
               K0B0,K0B1,K1B0,K1B1                                              
*                                                                               
*  /* fk1 */                                                                    
*  fk(keyb4,keyb5,keyb6,keyb7,                                                  
*     k0b0keyb0,k0b1keyb1,k1b0keyb2,k1b1keyb3,                              
*     k2b0,k2b1,k3b0,k3b1);                                                     
*                                                                               
         FK    KEYB4,KEYB5,KEYB6,KEYB7,                                X        
               K0B0,KEYB0,K0B1,KEYB1,K1B0,KEYB2,K1B1,KEYB3,            X        
               K2B0,K2B1,K3B0,K3B1                                              
*                                                                               
*  /* fk2 */                                                                    
*  fk(k0b0,k0b1,k1b0,k1b1,                                                      
*     k2b0keyb4,k2b1keyb5,k3b0keyb6,k3b1keyb7,                              
*     k4b0,k4b1,k5b0,k5b1);                                                     
*                                                                               
         FK    K0B0,K0B1,K1B0,K1B1,                                    X        
               K2B0,KEYB4,K2B1,KEYB5,K3B0,KEYB6,K3B1,KEYB7,            X        
               K4B0,K4B1,K5B0,K5B1                                              
*                                                                               
*  /* fk3 */                                                                    
*  fk(k2b0,k2b1,k3b0,k3b1,                                                      
*     k4b0k0b0,k4b1k0b1,k5b0k1b0,k5b1k1b1,                                  
*     k6b0,k6b1,k7b0,k7b1);                                                     
*                                                                               
         FK    K2B0,K2B1,K3B0,K3B1,                                    X        
               K4B0,K0B0,K4B1,K0B1,K5B0,K1B0,K5B1,K1B1,                X        
               K6B0,K6B1,K7B0,K7B1                                              
*                                                                               
*  /* fk4 */                                                                    
*  fk(k4b0,k4b1,k5b0,k5b1,                                                      
*     k6b0k2b0,k6b1k2b1,k7b0k3b0,k7b1k3b1,                                  
*     k8b0,k8b1,k9b0,k9b1);                                                     
*                                                                               
         FK    K4B0,K4B1,K5B0,K5B1,                                    X        
               K6B0,K2B0,K6B1,K2B1,K7B0,K3B0,K7B1,K3B1,                X        
               K8B0,K8B1,K9B0,K9B1                                              
*                                                                               
*  /* fk5 */                                                                    
*  fk(k6b0,k6b1,k7b0,k7b1,                                                      
*     k8b0k4b0,k8b1k4b1,k9b0k5b0,k9b1k5b1,                                  
*     kab0,kab1,kbb0,kbb1);                                                     
*                                                                               
         FK    K6B0,K6B1,K7B0,K7B1,                                    X        
               K8B0,K4B0,K8B1,K4B1,K9B0,K5B0,K9B1,K5B1,                X        
               KAB0,KAB1,KBB0,KBB1                                              
*                                                                               
*  /* fk6 */                                                                    
*  fk(k8b0,k8b1,k9b0,k9b1,                                                      
*     kab0k6b0,kab1k6b1,kbb0k7b0,kbb1k7b1,                                  
*     kcb0,kcb1,kdb0,kdb1);                                                     
*                                                                               
         FK    K8B0,K8B1,K9B0,K9B1,                                    X        
               KAB0,K6B0,KAB1,K6B1,KBB0,K7B0,KBB1,K7B1,                X        
               KCB0,KCB1,KDB0,KDB1                                              
*                                                                               
*  /* fk7 */                                                                    
*  fk(kab0,kab1,kbb0,kbb1,                                                      
*     kcb0k8b0,kcb1k8b1,kdb0k9b0,kdb1k9b1,                                  
*     keb0,keb1,kfb0,kfb1);                                                     
*                                                                               
         FK    KAB0,KAB1,KBB0,KBB1,                                    X        
               KCB0,K8B0,KCB1,K8B1,KDB0,K9B0,KDB1,K9B1,                X        
               KEB0,KEB1,KFB0,KFB1                                              
*                                                                               
*  /* end of expand key */                                                      
*                                                                               
*                                                                               
*  /* decode text */                                                            
*                                                                               
*  /*  decode (p0 ... p7, k0b0,k0b1 ...kfb0,kfb1,  c0 ... c7)  */               
*                                                                               
*  /* enter */                                                                  
*  c0 = kcb0;                                                                  
*  c1 = kcb1;                                                                  
*  c2 = kdb0;                                                                  
*  c3 = kdb1;                                                                  
*  c4 = keb0;                                                                  
*  c5 = keb1;                                                                  
*  c6 = kfb0;                                                                  
*  c7 = kfb1;                                                                  
*  c4 = c0;                                                                    
*  c5 = c1;                                                                    
*  c6 = c2;                                                                    
*  c7 = c3;                                                                    
*                                                                               
         LOADX C0,KCB0                                                          
         LOADX C1,KCB1                                                          
         LOADX C2,KDB0                                                          
         LOADX C3,KDB1                                                          
         LOADX C4,KEB0                                                          
         LOADX C5,KEB1                                                          
         LOADX C6,KFB0                                                          
         LOADX C7,KFB1                                                          
         LOADX C4,C0                                                            
         LOADX C5,C1                                                            
         LOADX C6,C2                                                            
         LOADX C7,C3                                                            
*                                                                               
*  /* f0 */                                                                     
*  f(c4,c5,c6,c7,k7b0,k7b1,f0b0,f0b1,f0b2,f0b3);                                
*  f0b0 = c0;                                                                  
*  f0b1 = c1;                                                                  
*  f0b2 = c2;                                                                  
*  f0b3 = c3;                                                                  
*                                                                               
         F     C4,C5,C6,C7,K7B0,K7B1,F0B0,F0B1,F0B2,F0B3                        
         LOADX F0B0,C0                                                          
         LOADX F0B1,C1                                                          
         LOADX F0B2,C2                                                          
         LOADX F0B3,C3                                                          
*                                                                               
*  /* f1 */                                                                     
*  f(f0b0,f0b1,f0b2,f0b3,k6b0,k6b1,f1b0,f1b1,f1b2,f1b3);                        
*  f1b0 =  c4;                                                                 
*  f1b1 =  c5;                                                                 
*  f1b2 =  c6;                                                                 
*  f1b3 =  c7;                                                                 
*                                                                               
         F     F0B0,F0B1,F0B2,F0B3,K6B0,K6B1,F1B0,F1B1,F1B2,F1B3                
         LOADX F1B0,C4                                                          
         LOADX F1B1,C5                                                          
         LOADX F1B2,C6                                                          
         LOADX F1B3,C7                                                          
*                                                                               
*  /* f2 */                                                                     
*  f(f1b0,f1b1,f1b2,f1b3,k5b0,k5b1,f2b0,f2b1,f2b2,f2b3);                        
*  f2b0 = f0b0;                                                                
*  f2b1 = f0b1;                                                                
*  f2b2 = f0b2;                                                                
*  f2b3 = f0b3;                                                                
*                                                                               
         F     F1B0,F1B1,F1B2,F1B3,K5B0,K5B1,F2B0,F2B1,F2B2,F2B3                
         LOADX F2B0,F0B0                                                        
         LOADX F2B1,F0B1                                                        
         LOADX F2B2,F0B2                                                        
         LOADX F2B3,F0B3                                                        
*                                                                               
*  /* f3 */                                                                     
*  f(f2b0,f2b1,f2b2,f2b3,k4b0,k4b1,f3b0,f3b1,f3b2,f3b3);                        
*  f3b0 = f1b0;                                                                
*  f3b1 = f1b1;                                                                
*  f3b2 = f1b2;                                                                
*  f3b3 = f1b3;                                                                
*                                                                               
         F     F2B0,F2B1,F2B2,F2B3,K4B0,K4B1,F3B0,F3B1,F3B2,F3B3                
         LOADX F3B0,F1B0                                                        
         LOADX F3B1,F1B1                                                        
         LOADX F3B2,F1B2                                                        
         LOADX F3B3,F1B3                                                        
*                                                                               
*  /* f4 */                                                                     
*  f(f3b0,f3b1,f3b2,f3b3,k3b0,k3b1,f4b0,f4b1,f4b2,f4b3);                        
*  f4b0 = f2b0;                                                                
*  f4b1 = f2b1;                                                                
*  f4b2 = f2b2;                                                                
*  f4b3 = f2b3;                                                                
*                                                                               
         F     F3B0,F3B1,F3B2,F3B3,K3B0,K3B1,F4B0,F4B1,F4B2,F4B3                
         LOADX F4B0,F2B0                                                        
         LOADX F4B1,F2B1                                                        
         LOADX F4B2,F2B2                                                        
         LOADX F4B3,F2B3                                                        
*                                                                               
*  /* f5 */                                                                     
*  f(f4b0,f4b1,f4b2,f4b3,k2b0,k2b1,f5b0,f5b1,f5b2,f5b3);                        
*  f5b0 = f3b0;                                                                
*  f5b1 = f3b1;                                                                
*  f5b2 = f3b2;                                                                
*  f5b3 = f3b3;                                                                
*                                                                               
         F     F4B0,F4B1,F4B2,F4B3,K2B0,K2B1,F5B0,F5B1,F5B2,F5B3                
         LOADX F5B0,F3B0                                                        
         LOADX F5B1,F3B1                                                        
         LOADX F5B2,F3B2                                                        
         LOADX F5B3,F3B3                                                        
*                                                                               
*  /* f6 */                                                                     
*  f(f5b0,f5b1,f5b2,f5b3,k1b0,k1b1,f6b0,f6b1,f6b2,f6b3);                        
*  f6b0 = f4b0;                                                                
*  f6b1 = f4b1;                                                                
*  f6b2 = f4b2;                                                                
*  f6b3 = f4b3;                                                                
*                                                                               
         F     F5B0,F5B1,F5B2,F5B3,K1B0,K1B1,F6B0,F6B1,F6B2,F6B3                
         LOADX F6B0,F4B0                                                        
         LOADX F6B1,F4B1                                                        
         LOADX F6B2,F4B2                                                        
         LOADX F6B3,F4B3                                                        
*                                                                               
*  /* f7 */                                                                     
*  f(f6b0,f6b1,f6b2,f6b3,k0b0,k0b1,f7b0,f7b1,f7b2,f7b3);                        
*  f7b0 = f5b0;                                                                
*  f7b1 = f5b1;                                                                
*  f7b2 = f5b2;                                                                
*  f7b3 = f5b3;                                                                
*                                                                               
         F     F6B0,F6B1,F6B2,F6B3,K0B0,K0B1,F7B0,F7B1,F7B2,F7B3                
         LOADX F7B0,F5B0                                                        
         LOADX F7B1,F5B1                                                        
         LOADX F7B2,F5B2                                                        
         LOADX F7B3,F5B3                                                        
*                                                                               
*  /* exit */                                                                   
*  p0 = f7b0  k8b0;                                                            
*  p1 = f7b1  k8b1;                                                            
*  p2 = f7b2  k9b0;                                                            
*  p3 = f7b3  k9b1;                                                            
*  p4 = f7b0  f6b0  kab0;                                                     
*  p5 = f7b1  f6b1  kab1;                                                     
*  p6 = f7b2  f6b2  kbb0;                                                     
*  p7 = f7b3  f6b3  kbb1;                                                     
*                                                                               
         XOR   P0,F7B0,K8B0                                                     
         XOR   P1,F7B1,K8B1                                                     
         XOR   P2,F7B2,K9B0                                                     
         XOR   P3,F7B3,K9B1                                                     
         XXXOR P4,F7B0,F6B0,KAB0                                                
         XXXOR P5,F7B1,F6B1,KAB1                                                
         XXXOR P6,F7B2,F6B2,KBB0                                                
         XXXOR P7,F7B3,F6B3,KBB1                                                
*                                                                               
*  /* decode end */                                                             
*                                                                               
*  /* return plain text */                                                      
*  text[0] = p0;  text[1] = p1; text[2] = p2; text[3] = p3;                     
*  text[4] = p4;  text[5] = p5; text[6] = p6; text[7] = p7;                     
*                                                                               
         LOADC TEXT+0,P0                                                        
         LOADC TEXT+1,P1                                                        
         LOADC TEXT+2,P2                                                        
         LOADC TEXT+3,P3                                                        
         LOADC TEXT+4,P4                                                        
         LOADC TEXT+5,P5                                                        
         LOADC TEXT+6,P6                                                        
         LOADC TEXT+7,P7                                                        
*                                                                               
         COMMENT                   ALL DONE                                     
         XPOP  R1                                                               
         MVC   @R1(L'TEXT),TEXT                                                 
         PEND                                                                   
         DROP  R6                                                               
*}                                                                              
         QLTORG                                                                 
         EJECT                                                                  
         LTORG                                                                  
         VLTORG                                                                 
         END   .                                                                
