EVAL     TITLE 'WYLBUR''s Expression Evaluator'                                 
*******************************************************************             
*                                                                 *             
*     WYLBUR/370 - Release VI - Class I - Stanford Proprietary    *             
*                                                                 *             
*******************************************************************             
         HIBAL                                                                  
*                                                                               
         EJECT                                                                  
WYLEVAL  CSECT                                                                  
         REGS  FSR,,,,,,,BR,(WAR,LSR),PAR,PBR,CPR,CVR,SPR,RAR                   
*                                                                               
EVAL     IDENT 9204                08:22:11 07/23/99  (MPD)                     
*                                                                               
         SYSDEFN ,                 Define installation values                   
*                                                                               
         PUSH  DSECTS                                                           
         TITLE 'DSECTS'                                                         
         COPY  CONTROL             Copy CV/CP                                   
         TITLE 'DSECTS'                                                         
JCB      RECORD BEGIN                                                           
         COPY  JCB                                                              
         END                                                                    
         POP   DSECTS                                                           
WYLEVAL  CSECT                                                                  
         DC    C'Go for it!!'                                                   
*                                                                               
         EJECT                                                                  
         COPY  VNENTRY                                                          
         COPY  VPARM                                                            
         EJECT                                                                  
         COPY  XSENTRY                                                          
         EJECT                                                                  
*-                                                                              
*-       LOCAL MACROS                                                           
*-                                                                              
         SPACE 2                                                                
*  CHECK FOR OVERFLOW,  F12.9 RIGHT JUSTFIED IN PACKED LEN 16                   
         MACRO                                                                  
         OFLOW &NUM                                                             
         CLC   &NUM.(5),=X'0000000000'                                          
         MEND                                                                   
         SPACE 2                                                                
*  CHECK FOR LONG (>F6.9 ) IN PACKED LEN 16                                     
         MACRO                                                                  
         LONG  &NUM                                                             
         CLC   &NUM.(8),=X'00000000000000000'                                   
         MEND                                                                   
         TITLE 'EVALUATE EXPRESSION'                                            
WYLEVAL  CSECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVALEXPR - EVALUATE EXPRESSION  (CALLED EXTERNALLY)                          
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - EXPRESSION LENGTH                                                  
*       R1 - EXPRESSION LOCATION                                                
*       R2 - RETURN AREA FOR EXPRESSION VALUE, TYPE                             
*            (SEE VNENTRY DSECT.)                                               
*                                                                               
*  ON EXIT:                                                                     
*       R0 - LENGTH OF REMAINING STRING                                         
*       R1 - LOCATION OF REMAINING STRING                                       
*       R2 - EXPRESSION VALUE AND TYPE RETURNED.                                
*            (OTHER FIELDS VALUES UNPREDICTABLE. SEE XSENTRY DSECT.)            
*      R15 - CC=ZERO, ALL OK                                                    
*            CC=MINUS, NULL EXPRESSION                                          
*            CC=PLUS, ERROR, ERROR MSG TSEG'D.                                  
*                                                                               
*  EXPRESSIONS ARE TERMINATED BY:                                               
*       * ANOTHER EXPRESSION                                                    
*       * END OF LINE                                                           
*       * TERMINATION CHARACTERS ';'  ','                                       
*                                                                               
*  DOCUMENTATION ON ALLOWABLE EXPRESSIONS, AND THE MANNER                       
*  IN WHICH THEY ARE EVALUATED MAY BE FOUND IN WYLBUR EXEC                      
*  FILE MANUAL.                                                                 
*                                                                               
*                                                                               
*                                                                               
EVALEXPR XPROC ,                                                                
         XSINIT XSLENGTH           SET UP EXPRESSION STACK (@R6)                
         ACALL  XXXEVAL            CALL EXPRESSION EVALUATOR                    
         COMMENT                                                                
         COMMENT                     XXXEVAL IS INTERNAL ENTRY                  
         COMMENT                     POINT. IT IS CALLED RECURSIVELY            
         COMMENT                     FROM WITHIN THE EVAL MODULE                
         COMMENT                                                                
         LA    R3,L'XSLENTRY                                                    
         LR    R4,R6               MOVE VALUE FROM STACK TO RET AREA            
         LR    R5,R3                                                            
         MVCL  R2,R4                                                            
         XSDONE XSLENGTH           FREE EXPRESSION STACK                        
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVALSTR - EVALUATE STRING EXPRESSION                                         
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - EXPRESSION LENGTH                                                  
*       R1 - EXPRESSION LOCATION                                                
*       R2 - LOCATION OF RETURN AREA                                            
*       R3 - LENGTH OF RETURN AREA                                              
*                                                                               
*  ON EXIT:                                                                     
*       R0 - LENGTH OF REMAINING STRING                                         
*       R1 - LOCATION OF REMAINING STRING                                       
*       R2 - STRING ADDRESS                                                     
*       R3 - STRING LENGTH                                                      
*      R15 - CC=ZERO, ALL OK                                                    
*            CC=MINUS, NULL EXPRESSION                                          
*            CC=PLUS, ERROR, ERROR MSG TSEG'D.                                  
*                                                                               
*  NOTES: IF THE STRING LONGER THAN THE RETURN AREA IT WILL BE                  
*         TRUNCATED WITHOUT SETTING ERROR. ALSO ALL EXPRESSIONS                 
*         CAN BE CONVERTED TO STRING, SO THERE ARE NO ERRORS                    
*         THERE EITHER.                                                         
*                                                                               
EVXWA    RECORD BEGIN                                                           
EVXVAR   DS    XL(L'VPARM)         EXPRESSION VALUE RETURN AREA                 
         END                                                                    
*                                                                               
*                                                                               
EVALSTR  XPROC EVXWA                                                            
         USING XSENTRY,R6                                                       
         LA    R6,EVXVAR                                                        
         LR    R4,R2                                                            
         LR    R5,R3                                                            
*                                                                               
         COMMENT                   EVALUATE EXPRESSION                          
         LA    R2,XSENTRY                                                       
         ACALL EVALEXPR                                                         
         XPUSH R0,R1                                                            
         IF    (R15,Z),BEGIN       GOOD EXPRESSION                              
         LA    R2,XSENTRY                                                       
         ACALL MAKESTR                                                          
         IF    Z,BEGIN                                                          
         CLEAR R15                                                              
         LA    R0,XSSTRLOC                                                      
         LH    R1,XSSTRLEN                                                      
         IF    (R1,GT,R5),'LR R1,R5'                                            
         IF    (R1,LT,R5),'LR R5,R1'                                            
         LR    R2,R4                                                            
         LR    R3,R5                                                            
         MVCL  R2,R0                                                            
         FLIP  (R0,R1)             R1 = loc; R0 = len                           
         LR    R2,R4                                                            
         LR    R3,R5                                                            
         END                                                                    
         ELSE  BEGIN               NOT STRING EXPRESSION                        
         LA    R15,4                                                            
         END                                                                    
         END                                                                    
*                                                                               
         IF    (R15,NZ),BEGIN      IF ERROR...                                  
         CLEAR R3                                                               
         END                                                                    
*                                                                               
         XPOP  R0,R1               Restore remaining string loc, len            
*                                                                               
         LR    R2,R4                                                            
         PRETURN (R0,R3)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVALINT - EVALUATE INTEGER EXPRESSION                                        
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - EXPRESSION LENGTH                                                  
*       R1 - EXPRESSION LOCATION                                                
*                                                                               
*  ON EXIT:                                                                     
*       R0 - LENGTH OF REMAINING STRING                                         
*       R1 - LOCATION OF REMAINING STRING                                       
*       R2 - INTEGER VALUE OF EXPRESSION                                        
*            (ANY FRACTIONAL PART IS TRUNCATED.)                                
*      R15 - CC=ZERO, ALL OK                                                    
*            CC=MINUS, NULL EXPRESSION                                          
*            CC=PLUS, ERROR, ERROR MSG TSEG'D.                                  
*                                                                               
*                                                                               
EVALINT  XPROC EVXWA                                                            
         USING XSENTRY,R6                                                       
         LA    R6,EVXVAR                                                        
*                                                                               
         COMMENT                   EVALUATE EXPRESSION                          
         LA    R2,XSENTRY                                                       
         ACALL EVALEXPR                                                         
         IF    (R15,Z),BEGIN          GOOD EXPRESSION                           
         LA    R2,XSENTRY                                                       
         ACALL MAKEINT                                                          
         IF    Z,BEGIN                                                          
         CLEAR R15                                                              
         L     R2,XSVALUE                                                       
         END                                                                    
         ELSE  BEGIN                  NOT INTEGER EXPRESSION                    
         LA    R15,4                                                            
         END                                                                    
         END                                                                    
         IF    (R15,NZ),BEGIN         IF ERROR                                  
         CLEAR R2                                                               
         END                                                                    
*                                                                               
         PRETURN (R0,R2)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCANEXPR - SCAN (SKIP) EXPRESSION                                            
*                                                                               
*  THIS ROUTINE SCANS AND SKIPS AN EXPRESSION, AN ERROR WILL                    
*  BE RETURNED IF THE EXPRESSION IS INVALID.  (EG. DIVIDE BY                    
*  BY ZERO. UNDECLARED VARIABLE. ETC. ETC.)  THIS ROUTINE IS                    
*  ESSENTIALLY THE SAME AS EVALEXPR, TO WRITE A GENERAL                         
*  EXPRESSION SCANNER IS A LOT OF WORK, SO WE JUST EVALUATE IT.                 
*  THIS HAS ITS PITFALLS (EG. YESNO WILL BE EVALUATED (ASK)                     
*  TWICE IN XCALLS)  ANYWAY FOR NOW THIS WILL HAVE TO DO.                       
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - STRING LENGTH                                                      
*       R1 - STRING LOCATION                                                    
*                                                                               
*  ON EXIT:                                                                     
*       R0 - LENGTH OF REMAINING STRING                                         
*       R1 - LOCATION OF REMAINING STRING                                       
*      R15 - CC=ZERO, ALL OK                                                    
*            CC=MINUS, NULL EXPRESSION                                          
*            CC=PLUS, ERROR, ERROR MSG TSEG'D.                                  
*                                                                               
*  EXPRESSIONS ARE TERMINATED BY:                                               
*       * ANOTHER EXPRESSION                                                    
*       * END OF LINE                                                           
*       * TERMINATION CHARACTERS ';'  ','                                       
*                                                                               
*  DOCUMENTATION ON ALLOWABLE EXPRESSIONS, AND THE MANNER                       
*  IN WHICH THEY ARE EVALUATED MAY BE FOUND IN WYLBUR EXEC                      
*  FILE MANUAL.                                                                 
*                                                                               
*                                                                               
SCANEXPR XPROC ,                                                                
         XSINIT XSLENGTH           SET UP EXPRESSION STACK (@R6)                
         ACALL  XXXEVAL            CALL EXPRESSION EVALUATOR                    
         COMMENT                                                                
         COMMENT                     XXXEVAL IS INTERNAL ENTRY POINT            
         COMMENT                     FOR EXPRESSION EVALUATION IT IS            
         COMMENT                     CALLED RECURSIVELY FROM WITHIN             
         COMMENT                     EVAL MODULE.                               
         COMMENT                                                                
         XSDONE XSLENGTH           FREE EXPRESSION STACK                        
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  XXXEVAL - EVALUATE EXPRESSION                                                
*                                                                               
*  ON ENTRY:                                                                    
*       R1,R0 - EXPRESSION LOC,LEN                                              
*       R6    - EXPRESSION STACK AREA                                           
*                                                                               
*  ON EXIT:                                                                     
*       R1,R0 - LOC, LEN OF REMAINING STRING                                    
*       R6    - EXPRESSION VALUE AND TYPE RETURNED.  SEE XSENTRY                
*               DSECT.  IF NULL EXPRESSION XSNULL FLAG SET.                     
*       R15   - CC=ZERO, ALL OK                                                 
*               CC=MINUS, NULL EXPRESSION                                       
*               CC=PLUS, ERROR, ERROR MSG TSEG'D.                               
*                                                                               
*                                                                               
*  THIS ROUTINE IS CALLED FROM WITHIN THE EVAL MODULE. IT IS                    
*  CALLED RECURSIVELY.  EXTERNAL CALLS TO EVALUATE AN EXPRESSION                
*  SHOULD BE MADE TO EVALEXPR ROUTINE.                                          
*                                                                               
*                                                                               
*                                                                               
EVALWA   RECORD BEGIN ,                                                         
EXPRLEN  DS    F                   LENGTH OF REMAINING EXPRESSION               
EXPRLOC  DS    A                   LOCATION OF REMAINING EXPRESSION             
         END                                                                    
*                                                                               
*                                                                               
XXXEVAL  PROC  EVALWA     EVALUATE EXPRESSION                                   
         USING XSENTRY,R6                                                       
         ST    R0,EXPRLEN                                                       
         ST    R1,EXPRLOC                                                       
         CLEAR XSENTRY                                                          
         SET   XSSTART             MARK START OF EXPRESSION STACK               
         XSPUSH ,,                                                              
         BNZ   EVALDONE                                                         
***                                                                             
         LOOP  BEGIN ,             LOOP SCANNING, EVALUATING EXPR               
         COMMENT                                                                
         L     R0,EXPRLEN              R0 - LEN OF EXPR TO SCAN                 
         L     R1,EXPRLOC              R1 - LOC OF EXPR TO SCAN                 
         COMMENT                       R6 - EXPRESSION STACK PTR                
         COMMENT                                                                
         COMMENT                   SCAN EXPRESSION                              
         XSPOP ,                                                                
         IF    XSVAL,BEGIN                                                      
         XSPUSH NOCHECK               IF VALUE IS LAST THING ON                 
         ACALL SCANOPER                  STACK, SCAN FOR OPERATOR               
         END                                                                    
         ELSE  BEGIN ,                                                          
         XSPUSH NOCHECK               OTHERWISE, SCAN FOR VALUE,                
         ACALL XXXSCAN                   OPERATOR, OR ANYTHING                  
         END                                                                    
         BNZ   EVALDONE                                                         
         ST    R0,EXPRLEN                                                       
         ST    R1,EXPRLOC                                                       
***                                IF OPERATOR SCANNED                          
         IF    XSOPER,BEGIN        IF OPERATOR,,,                               
         SR    R0,R0                                                            
         IC    R0,XSBOPLVL             GET OPERATOR PRECEDENCE                  
         ACALL EVLSTACK                EVALUATE STACK AS WE GO                  
         LR    R2,R1                                                            
         LA    R3,L'XSLENTRY           MOVE OPERATOR JUST SCANNED TO            
         LR    R4,R6                   END OF STACK                             
         LR    R5,R3                                                            
         MVCL  R2,R4                                                            
         LR    R6,R1                   UPDATE STACK POINTER                     
         XSPUSH ,,                     PUSH STACK PAST OPERATOR                 
         BNZ   EVALDONE                                                         
         END                                                                    
***                                IF VALUE SCANNED                             
         ELSEIF XSVAL,BEGIN        IF VALUE,                                    
         XSPUSH ,,                     PUSH IT ONTO STACK                       
         BNZ   EVALDONE                                                         
         END                                                                    
***                                IF EXPRESSION END SCANNED                    
         ELSEIF XSEND,BEGIN        IF EXPRESSION END, ,,,                       
         LA    R0,ENDLVL                                                        
         ACALL EVLSTACK                FINISH EVALUATING STACK                  
         BNZ   EVALDONE                                                         
         LR    R6,R1                   R1 - NEW END OF STACK                    
         CLEAR XSENTRY                 MARK END OF STACK                        
         SET   XSEND                                                            
         XSPUSH ,,                                                              
         BNZ   EVALDONE                                                         
         ACALL EVLEND                  DO END OF EXPR. PROCESSING               
         BNZ   EVALDONE                                                         
         LR    R6,R1                                                            
         CLEAR R15                                                              
         B     EVALDONE                                                         
         END                                                                    
         END   ,                                                                
***                                END OF LOOP                                  
*                                                                               
EVALDONE LABEL ,                                                                
         L     R0,EXPRLEN          RETURN - R0,R1.. LOC LEN REMAINING           
         L     R1,EXPRLOC                                                       
         IF    (R15,NZ),BEGIN      RETURN - R15.. CONDITION CODE                
         LA    R15,4                                                            
         END                                                                    
         ELSEIF XSNULL,BEGIN                                                    
         L     R15,=F'-4'                                                       
         END                                                                    
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*-                                                                              
*-       OPERATOR PRECEDENCE                                                    
*-                                                                              
*-       (UP TO 128 LEVELS ALLOWED)                                             
*-                                                                              
LEVEL0   EQU   0                   LOWEST LEVEL IS                              
LEVEL1   EQU   4                     HIGHEST PRECEDENCE                         
LEVEL2   EQU   8                                                                
LEVEL3   EQU   12                                                               
LEVEL4   EQU   16                                                               
LEVEL5   EQU   20                                                               
LEVEL6   EQU   24                                                               
LEVEL7   EQU   28                                                               
LEVEL8   EQU   32                                                               
*                                                                               
BADLVL   EQU   LEVEL1              ILLEGAL UNARY/BINARY OPERATOR                
POSLVL   EQU   LEVEL1              UNARY +                                      
NEGLVL   EQU   LEVEL1              UNARY -                                      
NOTLVL   EQU   LEVEL1              UNARY NOT (^)                                
MULTLVL  EQU   LEVEL2              *                                            
DIVLVL   EQU   LEVEL2              /                                            
ADDLVL   EQU   LEVEL3              +                                            
SUBTLVL  EQU   LEVEL3              -                                            
CATLVL   EQU   LEVEL4              ||                                           
EQLVL    EQU   LEVEL5              EQ                                           
NELVL    EQU   LEVEL5              NE                                           
LTLVL    EQU   LEVEL5              LT                                           
LELVL    EQU   LEVEL5              LE                                           
GTLVL    EQU   LEVEL5              GT                                           
GELVL    EQU   LEVEL5              GE                                           
ANDLVL   EQU   LEVEL6              AND                                          
ORLVL    EQU   LEVEL6              OR                                           
ENDLVL   EQU   LEVEL8              END OF STATMENT, PROCESS ALL                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLSTACK - EVALUATE EXPRESSION STACK                                         
*                                                                               
*  THIS ROUTINE SHOULD BE CALLED EACH TIME AN OPERATOR IS PLACED                
*  ON THE EXPRESSION STACK.  RETURNED VALUE OF R1 MUST BE USED TO               
*  UPDATE STACK.                                                                
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - OPERATOR PRIORITY                                                  
*       R1 - NOT USED                                                           
*       R6 - OPERATOR STACK, POINTS TO OPERATOR JUST SCANNED                    
*                                                                               
*  ON EXIT:                                                                     
*       R0 - OPERATOR LEVEL (UNCHANGED)                                         
*       R1 - END OF STACK (UPDATED)                                             
*      R15 - CC=ZERO, ALL OK                                                    
*          - CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*  REGISTER USAGE:                                                              
*       R2 - LAST ITEM IN STACK       EG. VALUE                                 
*       R3 - LAST-1 ITEM IN STACK     EG. OPERATOR                              
*       R4 - LAST-2 ITEM IN STACK     EG. VALUE                                 
*                                                                               
*                                                                               
EVLSTACK PROC  ,                                                                
         USING XSENTRY,R6                                                       
         COMMENT                   R0 - OPERATOR PRIORITY                       
         LR    R1,R6               R1 - CURRENT STACK LEVEL                     
         CLEAR R15                 R15 - ASSUME CC=ZERO                         
         COMMENT                                                                
         XSPOP ,,                  POP STACK                                    
         LR    R2,R6                                                            
         IF    XSSTART,BEGIN       IF STACK: START.                             
         B     EVLSDONE                NOOP                                     
         END                                                                    
         IF    XSOPER,BEGIN        IF STACK: OPERATOR, ...                      
         B     EVLSDONE                NOOP                                     
         END                                                                    
         IF    XSVAL,BEGIN         IF STACK: VALUE, ...                         
         COMMENT                                                                
         XSPOP ,,                                                               
         LR    R3,R6                                                            
         IF    XSSTART,BEGIN       IF STACK: VALUE, START.                      
         B     EVLSDONE                NOOP                                     
         END                                                                    
         IF    XSVAL,BEGIN         IF STACK: VALUE, VALUE                       
         COMMENT                       ERR, 2 VALUES IN A ROW                   
         TSEG  'Missing operator in expression. '                               
         LA    R15,4                                                            
         B     EVLSDONE                                                         
         END                                                                    
         IF    XSOPER,BEGIN        IF STACK: VALUE, OPERATOR, ...               
         XSPOP ,,                                                               
         LR    R4,R6                                                            
         IF    XSSTART,BEGIN       IF STACK: VALUE, OPER, START.                
         LR    R6,R3                                                            
         IF    (XSUOPLVL,LE,R0),BEGIN                                           
         LR    R1,R2                                                            
         LA    R14,XSUOPRTN           "ACALL" UNARY OPERATOR ROUTINE            
         CALLRTNP @R14                                                          
         IF    Z,BEGIN                                                          
         LR    R6,R1                                                            
         ACALL EVLSTACK               EVALUATE STACK RECURSIVELY                
         END                                                                    
         END                                                                    
         B     EVLSDONE                                                         
         END                                                                    
         IF    XSOPER,BEGIN        IF STACK: VALUE, OPER, OPER ...              
         LR    R6,R3                                                            
         IF    (XSUOPLVL,LE,R0),BEGIN                                           
         LR    R1,R2                                                            
         LA    R14,XSUOPRTN           "ACALL" UNARY OPERATOR ROUTINE            
         CALLRTNP @R14                                                          
         IF    Z,BEGIN                                                          
         LR    R6,R1                                                            
         ACALL EVLSTACK               EVALUATE STACK RECURSIVELY                
         END                                                                    
         END                                                                    
         B     EVLSDONE                                                         
         END                                                                    
         IF    XSVAL,BEGIN         IF STACK: VALUE, OPER, VALUE, ...            
         LR    R6,R3                                                            
         IF    (XSBOPLVL,LE,R0),BEGIN                                           
         LR    R1,R3                                                            
         LA    R14,XSBOPRTN                                                     
         CALLRTNP @R14                "ACALL" BINARY OPERATOR ROUTINE           
         IF    Z,BEGIN                                                          
         LR    R6,R1                                                            
         ACALL EVLSTACK               EVALUATE STACK RECURSIVELY                
         END                                                                    
         END                                                                    
         B     EVLSDONE                                                         
         END                                                                    
         END                                                                    
         END                                                                    
*                                                                               
EVLSDONE LABEL ,                   RETURN                                       
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLPOS - EVALUATE UNARY PLUS,                                                
*                                                                               
*  ALMOST A NOOP !!  STRINGS MUST BE CHECKED AS VALID NUMBER                    
*  REDUCES STACK HEIGHT BY 1, (R6 NOT UPDATED).                                 
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - VALUE ON STACK                                                     
*       R3 - OPERATOR ON STACK                                                  
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - MUST BE SAME AS ABOVE                                              
*       R1 - MUST BE SAME AS ABOVE                                              
*       R3 - PLACE FOR RESULT                                                   
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLPOS   PROC  ,                                                                
         USING XSENTRY,R2                                                       
         ACALL MAKENUMB                                                         
         IF    Z,BEGIN             IF NUMBER, MOVE LOWER IN STACK               
         MVC   0(L'XSENTRY,R3),0(R2)                                            
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLNEG - EVALUATE UNARY MINUS,                                               
*                                                                               
*  ALMOST A NOOP !!  STRINGS MUST BE CHECKED AS VALID NUMBER                    
*  REDUCES STACK HEIGHT BY 1, (R6 NOT UPDATED).                                 
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - VALUE ON STACK                                                     
*       R3 - OPERATOR ON STACK                                                  
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - MUST BE SAME AS ABOVE                                              
*       R1 - MUST BE SAME AS ABOVE                                              
*       R3 - PLACE FOR RETURNED VALUE                                           
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLNEG   PROC  ,                                                                
         USING XSENTRY,R2                                                       
         ACALL MAKENUMB                                                         
         IF    Z,BEGIN             IF NUMBER, NEGATE IT                         
         LA    R4,PKZERO                                                        
         CP    XSVALUE(NL),0(NL,R4)   COMPARE TO ZERO                           
         IF    LE,BEGIN               NEGATIVE IS POSITIVE                      
         NI    XSVALUE+NL-1,X'F0'                                               
         OI    XSVALUE+NL-1,X'0C'                                               
         END                                                                    
         ELSE  BEGIN ,,               POSITIVE IS NEGATIVE                      
         NI    XSVALUE+NL-1,X'F0'                                               
         OI    XSVALUE+NL-1,X'0D'                                               
         END                                                                    
         MVC   0(L'XSENTRY,R3),0(R2)                                            
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLNOT - EVALUATE UNARY NOT, (BOOLEAN)                                       
*                                                                               
*  ALMOST A NOOP !!  STRINGS MUST BE CHECKED AS VALID NUMBER                    
*  REDUCES STACK HEIGHT BY 1, (R6 NOT UPDATED).                                 
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - VALUE ON STACK                                                     
*       R3 - OPERATOR ON STACK                                                  
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - MUST BE SAME AS ABOVE                                              
*       R1 - MUST BE SAME AS ABOVE                                              
*       R3 - PLACE FOR RETURNED VALUE                                           
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLNOT   PROC  ,                                                                
         USING XSENTRY,R2                                                       
         ACALL MAKEBOOL                                                         
         IF    Z,BEGIN             IF BOOLEAN,  NOT IT                          
         LR    R6,R2                                                            
         LA    R4,PKZERO                                                        
         CP    XSVALUE(NL),0(NL,R4)     COMPARE TO ZERO                         
         IF    EQ,BEGIN               FALSE IS TRUE                             
         MVC   XSVALUE(NL),PKONE                                                
         END                                                                    
         ELSE  BEGIN ,,               TRUE IS FALSE                             
         MVC   XSVALUE(NL),PKZERO                                               
         END                                                                    
         MVC   0(L'XSENTRY,R3),0(R2)                                            
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLADD - ADD TWO NUMBERS                                                     
*                                                                               
*  ADD TWO NUMBERS, STACK HEIGHT IS REDUCED BY 2.                               
*  (R6 NOT UPDATED).                                                            
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR ON STACK                                                  
*       R4 - 1ST VALUE                                                          
*                                                                               
*  ON EXIT:                                                                     
*       R0 - MUST BE SAME AS ABOVE                                              
*       R1 - MUST BE SAME AS ABOVE                                              
*       R4 - PLACE FOR RESULT                                                   
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLWA    RECORD BEGIN ,,                                                        
EVNUMB1  DS    16X                 WORK AREAS                                   
EVNUMB2  DS    16X                                                              
         END                                                                    
*                                                                               
*                                                                               
EVLADD   PROC  EVLWA                                                            
         USING XSENTRY,R2                                                       
         COMMENT                   **** DO NOT DESTROY R0,R1 ***                
         COMMENT                   R4 - 1ST NUMBER                              
         LR    R5,R2               R5 - 2ND NUMBER                              
         COMMENT                                                                
         LR    R2,R4                                                            
         ACALL MAKENUMB                          GET 1ST NUMBER                 
         IF    Z,BEGIN                                                          
         ZAP   EVNUMB1(16),XSVALUE(NL)                                          
         LR    R2,R5                                                            
         ACALL MAKENUMB                          GET 2ND NUMBER                 
         IF    Z,BEGIN                                                          
         ACALL ZAPINT              *** ZAP INTEGER (** OLD N0-N9)               
         ZAP   EVNUMB2(16),XSVALUE(NL)                                          
         AP    EVNUMB1(16),EVNUMB2(16)           ADD                            
         IF    (' OFLOW EVNUMB1',Z),BEGIN        IF ALL OK                      
         LR    R2,R4                                                            
         ZAP   XSVALUE(NL),EVNUMB1(16)              SAVE RESULT                 
         CLEAR R15                                                              
         END                                                                    
         ELSE  BEGIN ,,,                         IF OVERFLOW                    
         ACALL OVERFLOW                                                         
         END                                                                    
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLSUBT - SUBTRACT TWO NUMBERS                                               
*                                                                               
*  SUBTRACT TWO NUMBERS, STACK HEIGHT IS REDUCED BY 2.                          
*  (R6 NOT UPDATED).                                                            
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR ON STACK                                                  
*       R4 - 1ST VALUE                                                          
*                                                                               
*  ON EXIT:                                                                     
*       R0 - MUST BE SAME AS ABOVE                                              
*       R1 - MUST BE SAME AS ABOVE                                              
*       R4 - PLACE FOR RESULT                                                   
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLSUBT  PROC  EVLWA                                                            
         USING XSENTRY,R2                                                       
         COMMENT                   **** DO NOT DESTROY R0,R1 ***                
         COMMENT                   R4 - 1ST NUMBER                              
         LR    R5,R2               R5 - 2ND NUMBER                              
         COMMENT                                                                
         LR    R2,R4                                                            
         ACALL MAKENUMB                          GET 1ST NUMBER                 
         IF    Z,BEGIN                                                          
         ZAP   EVNUMB1(16),XSVALUE(NL)                                          
         LR    R2,R5                                                            
         ACALL MAKENUMB                          GET 2ND NUMBER                 
         IF    Z,BEGIN                                                          
         ACALL ZAPINT              *** ZAP INTEGER (** OLD N0-N9)               
         ZAP   EVNUMB2(16),XSVALUE(NL)                                          
         SP    EVNUMB1(16),EVNUMB2(16)           SUBTRACT                       
         IF    (' OFLOW EVNUMB1',Z),BEGIN        IF ALL OK                      
         LR    R2,R4                                                            
         ZAP   XSVALUE(NL),EVNUMB1(16)              SAVE RESULT                 
         CLEAR R15                                                              
         END                                                                    
         ELSE  BEGIN ,,,                         IF OVERFLOW                    
         ACALL OVERFLOW                                                         
         END                                                                    
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLMULT - MULTIPLY TWO NUMBERS                                               
*                                                                               
*  MULTIPLY TWO NUMBERS, STACK HEIGHT IS REDUCED BY 2.                          
*  (R6 NOT UPDATED).                                                            
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR ON STACK                                                  
*       R4 - 1ST VALUE                                                          
*                                                                               
*  ON EXIT:                                                                     
*       R0 - MUST BE SAME AS ABOVE                                              
*       R1 - MUST BE SAME AS ABOVE                                              
*       R4 - PLACE FOR RESULT                                                   
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLMULT  PROC  EVLWA                                                            
         USING XSENTRY,R2                                                       
         COMMENT                   **** DO NOT DESTROY R0,R1 ***                
         COMMENT                   R4 - 1ST NUMBER                              
         LR    R5,R2               R5 - 2ND NUMBER                              
         COMMENT                                                                
         LR    R2,R4                                                            
         ACALL MAKENUMB                          GET 1ST NUMBER                 
         IF    Z,BEGIN                                                          
         ZAP   EVNUMB1(16),XSVALUE(NL)                                          
         LR    R2,R5                                                            
         ACALL MAKENUMB                          GET 2ND NUMBER                 
         IF    Z,BEGIN                                                          
         ACALL ZAPINT              *** ZAP INTEGER (** OLD N0-N9)               
         ZAP   EVNUMB2(16),XSVALUE(NL)                                          
         IF    ((' LONG EVNUMB1',NZ),OR,(' LONG EVNUMB2',NZ)),BEGIN             
         LA    R0,EVNUMB1                        LONG MULTIPLY                  
         LA    R1,EVNUMB2                                                       
         ACALL LONGMULT                                                         
         END                                                                    
         ELSE  BEGIN ,                                                          
         MP    EVNUMB1(16),EVNUMB2+8(8)          SHORT MULTIPLY                 
         SRP   EVNUMB1(16),64-9,0                RESET DECIMAL PT               
         END                                                                    
         IF    (' OFLOW EVNUMB1',Z),BEGIN        IF ALL OK                      
         LR    R2,R4                                                            
         ZAP   XSVALUE(NL),EVNUMB1(16)              SAVE RESULT                 
         CLEAR R15                                                              
         END                                                                    
         ELSE  BEGIN ,,,                         IF OVERFLOW                    
         ACALL OVERFLOW                                                         
         END                                                                    
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  LONGMULT - MULTIPLY TO LONG NUMBERS                                          
*                                                                               
*  ON ENTRY:                                                                    
*      @R0 - 1ST NUMBER (16 BYTES PACKED)  F12.9                                
*      @R1 - 2ND NUMBER (16 BYTES PACKED)  F12.9                                
*                                                                               
*  ON EXIT:                                                                     
*      @R0 - RESULT   (MAY CONTAIN OVERFLOW)                                    
*                                                                               
*                                                                               
*                                                                               
LMWA     RECORD BEGIN              LONG MULTIPLY                                
LMN1     DS    XL16                1ST NUMBER                                   
LMN2     DS    XL16                2ND NUMBER                                   
LMD1     DS    XL16                PART 1, 2ND NUMBER                           
LMD2     DS    XL16                PART 2, 2ND NUMBER                           
LMD3     DS    XL16                PART 3, 2ND NUMBER                           
LMD4     DS    XL16                PART 4, 2ND NUMBER                           
LMTEMP   DS    XL16                WORK AREA FOR PARTIAL PRODUCTS               
         END                                                                    
*                                                                               
*                                                                               
LONGMULT PROC  LMWA                                                             
         LR    R2,R0               @R2 - 1ST NUMBER                             
         COMMENT ,                 @R1 - 2ND NUMBER                             
         MVC   LMN1(16),0(R2)                                                   
         MVC   LMN2(16),0(R1)                                                   
         MVC   LMD1(16),LMN2       DIVIDE 2ND NUMBER INTO 4 PARTS               
         MVC   LMD2(16),LMN2                                                    
         MVC   LMD3(16),LMN2                                                    
         MVC   LMD4(16),LMN2                                                    
         NC    LMD1(16),=X'0000000000000000000000000000FFFF'                    
         NC    LMD2(16),=X'0000000000000000000000FFFFFF000F'                    
         NC    LMD3(16),=X'0000000000000000FFFFFF000000000F'                    
         NC    LMD4(16),=X'0000000000FFFFFF000000000000000F'                    
*        SRP   LMD1(16),0,0                                                     
         SRP   LMD2(16),64-3,0                                                  
         SRP   LMD3(16),64-9,0                                                  
         SRP   LMD4(16),64-15,0                                                 
         MVC   LMTEMP(16),LMN1     MULTIPLY ALL 4 PARTS                         
         MP    LMTEMP(16),LMD1+12(4)                                            
         MVC   LMD1(16),LMTEMP                                                  
         MVC   LMTEMP(16),LMN1                                                  
         MP    LMTEMP(16),LMD2+12(4)                                            
         MVC   LMD2(16),LMTEMP                                                  
         MVC   LMTEMP(16),LMN1                                                  
         MP    LMTEMP(16),LMD3+12(4)                                            
         MVC   LMD3(16),LMTEMP                                                  
         MVC   LMTEMP(16),LMN1                                                  
         MP    LMTEMP(16),LMD4+12(4)                                            
         MVC   LMD4(16),LMTEMP                                                  
         SRP   LMD1(16),64-9,0     SCALE PARTIAL PRODUCTS                       
         SRP   LMD2(16),64-6,0                                                  
*        SRP   LMD3(16),0,0                                                     
         IF    (' OFLOW LMD4',Z),BEGIN                                          
         SRP   LMD4(16),6,0                                                     
         END                                                                    
         AP    LMD1(16),LMD2(16)   ADD PARTIAL PRODUCTS                         
         AP    LMD1(16),LMD3(16)                                                
         AP    LMD1(16),LMD4(16)                                                
         MVC   0(16,R2),LMD1       STORE RESULT                                 
         CLEAR R15                                                              
         PEND                                                                   
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLDIV - DIVIDE TWO NUMBERS                                                  
*                                                                               
*  SUBTRACT TWO NUMBERS, STACK HEIGHT IS REDUCED BY 2.                          
*  (R6 NOT UPDATED).                                                            
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR ON STACK                                                  
*       R4 - 1ST VALUE                                                          
*                                                                               
*  ON EXIT:                                                                     
*       R0 - MUST BE SAME AS ABOVE                                              
*       R1 - MUST BE SAME AS ABOVE                                              
*       R4 - PLACE FOR RESULT                                                   
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLDIV   PROC  EVLWA                                                            
         USING XSENTRY,R2                                                       
         COMMENT                   **** DO NOT DESTROY R0,R1 ***                
         COMMENT                   R4 - 1ST NUMBER                              
         LR    R5,R2               R5 - 2ND NUMBER                              
         COMMENT                                                                
         LR    R2,R4                                                            
         ACALL MAKENUMB                          GET 1ST NUMBER                 
         BNZ   EVLDDONE                                                         
         ZAP   EVNUMB1(16),XSVALUE(NL)                                          
         LR    R2,R5                                                            
         ACALL MAKENUMB                          GET 2ND NUMBER                 
         BNZ   EVLDDONE                                                         
         ACALL ZAPINT              *** ZAP INTEGER (** OLD N0-N9)               
         ZAP   EVNUMB2(16),XSVALUE(NL)                                          
         CP    XSVALUE(NL),PKZERO(NL)            CHECK ZERO DIVIDE              
         IF    E,BEGIN                                                          
         TSEG  'Divide by zero is illegal.'                                     
         LA    R15,4                                                            
         B     EVLDDONE                                                         
         END                                                                    
         IF    ((' LONG EVNUMB1',NZ),OR,(' LONG EVNUMB2',NZ)),BEGIN             
         LA    R0,EVNUMB1                        LONG DIVISION                  
         LA    R1,EVNUMB2                                                       
         ACALL LONGDIV                                                          
         END                                                                    
         ELSE  BEGIN                             TRY PRELIMINARY                
         DP    EVNUMB1(16),EVNUMB2+8(8)          SHORT DEVIDE                   
         MVC   EVNUMB1+8(8),EVNUMB1                                             
         MVC   EVNUMB1(8),=X'0000000000000000'                                  
         SRP   EVNUMB1(16),9,0                                                  
         CLC   EVNUMB1(8),=X'0000000000000000'                                  
         IF    NE,BEGIN                          IF SHORT DIVIDE NO             
         LR    R2,R4                             GOOD, TRY LONG DIV             
         ZAP   EVNUMB1(16),XSVALUE(NL)                                          
         LA    R0,EVNUMB1                                                       
         LA    R1,EVNUMB2                                                       
         ACALL LONGDIV                                                          
         END                                                                    
         ELSE  BEGIN                             IF SHORT DIVIDE                
         LR    R2,R4                                GOOD, DO IT                 
         ZAP   EVNUMB1(16),XSVALUE(NL)                                          
         SRP   EVNUMB1(16),9,0                      SCALE IT                    
         DP    EVNUMB1(16),EVNUMB2+8(8)             DIVIDE IT                   
         MVC   EVNUMB1+8(8),EVNUMB1                                             
         MVC   EVNUMB1(8),=X'0000000000000000'                                  
         END                                                                    
         END                                                                    
         IF    (' OFLOW EVNUMB1',Z),BEGIN        IF ALL OK,                     
         LR    R2,R4                                SAVE RESULT                 
         ZAP   XSVALUE(NL),EVNUMB1(16)                                          
         CLEAR R15                                                              
         END                                                                    
         ELSE  BEGIN ,,,                         IF OVERFLOW                    
         ACALL OVERFLOW                                                         
         END                                                                    
         ACALL ZAPINT2             *** ZAP INTEGER (** OLD N0-N9)               
*                                                                               
EVLDDONE LABEL ,                                                                
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  LONGDIV - DIVIDE TWO LONG NUMBERS                                            
*                                                                               
*  ON ENTRY:                                                                    
*      @R0 - 1ST NUMBER (16 BYTES PACKED)  F12.9                                
*      @R1 - 2ND NUMBER (16 BYTES PACKED)  F12.9                                
*                                                                               
*  ON EXIT:                                                                     
*      @R0 - RESULT   (MAY CONTAIN OVERFLOW)                                    
*                                                                               
*  ALGORITHM: WE SUBTRACT POWERS OF TEN OF THE DIVISOR,                         
*      THE NUMBER OF SUBTRACTIONS (PROPERLY SCALED) IS                          
*      THE QUOTIENT.  WHATEVER IS LEFT IS THE REMAINDER.                        
*                                                                               
*                                                                               
LDWA     RECORD BEGIN              LONG MULTIPLY                                
LDN1     DS    XL16                1ST NUMBER                                   
LDN2     DS    XL16                2ND NUMBER                                   
LDREM    DS    XL16                WORK REMAINDER                               
LDDVSR   DS    XL16                WORK DIVISOR                                 
LDCNT    DS    XL16                WORK SHIFT COUNT                             
LDACCM   DS    XL16                WORK ACCUMULATOR                             
         END                                                                    
*                                                                               
*                                                                               
LONGDIV  PROC  LDWA                                                             
         LR    R2,R0               @R2 - 1ST NUMBER                             
         COMMENT ,                 @R1 - 2ND NUMBER                             
*        MVC   LMN1(16),0(R2)                                                   
*        MVC   LMN2(16),0(R1)                                                   
         MVC   LDREM(16),0(R2)     INITIALIZE WORK AREAS                        
         SRP   LDREM(16),9,0                                                    
         MVC   LDDVSR(16),0(R1)                                                 
         MVC   LDCNT(16),PK16ZERO                                               
         MVI   LDCNT+15,X'1C'                                                   
         MVC   LDACCM(16),PK16ZERO                                              
         NI    LDREM+15,X'F0'      UNSIGNED LONG DIVIDED                        
         OI    LDREM+15,X'0C'                                                   
         NI    LDDVSR+15,X'F0'                                                  
         OI    LDDVSR+15,X'0C'                                                  
         CLEAR R3                  R3 - ITERATION COUNT                         
         WHILE (' CP LDDVSR(16),LDREM(16)',LT),BEGIN                            
         SRP   LDDVSR(16),1,0                                                   
         SRP   LDCNT(16),1,0                                                    
         LA    R3,1(R3)                                                         
         END                                                                    
         WHILE (R3,NL),BEGIN       LOOP SUBTRACTING FROM REMAINDER              
         WHILE (' CP LDREM(16),LDDVSR(16)',GE),BEGIN                            
         SP    LDREM(16),LDDVSR(16)                                             
         AP    LDACCM(16),LDCNT(16)     KEEP COUNT OF SUBTRACTIONS              
         END                                                                    
         IF    (R3,POS),BEGIN                                                   
         SRP   LDDVSR(16),64-1,0        RESET POWER OF TEN                      
         SRP   LDCNT(16),64-1,0                                                 
         END                                                                    
         DECR  R3                                                               
         END                                                                    
         IC    R3,15(R2)           DO SIGN CALCULATION                          
         IC    R4,15(R1)                                                        
         N     R3,=X'00000001'                                                  
         N     R4,=X'00000001'                                                  
         IF    (R4,NE,R3),BEGIN    IF UNEQUAL SIGNS, RESULT IS NEG              
         NI    LDACCM+15,X'F0'                                                  
         OI    LDACCM+15,X'0D'                                                  
         END                                                                    
         MVC   0(16,R2),LDACCM                                                  
         CLEAR R15                                                              
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLCAT - CONCATENATE TWO STRINGS                                             
*                                                                               
*  CONCATENATE TWO STRINGS, STACK HEIGHT IS REDUCED BY 2.                       
*  (R6 NOT UPDATED).                                                            
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR ON STACK                                                  
*       R4 - 1ST VALUE                                                          
*                                                                               
*  ON EXIT:                                                                     
*       R0 - MUST BE SAME AS ABOVE                                              
*       R1 - MUST BE SAME AS ABOVE                                              
*       R4 - PLACE FOR RESULT                                                   
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLCAT   PROC  ,                                                                
         USING XSENTRY,R2                                                       
         COMMENT                   **** DO NOT DESTROY R0,R1 ***                
         COMMENT                   R4 - 1ST NUMBER                              
         LR    R5,R2               R5 - 2ND NUMBER                              
         COMMENT                                                                
         LR    R2,R4                                                            
         ACALL MAKESTR                           GET 1ST STRING                 
         IF    Z,BEGIN                                                          
         LR    R2,R5                                                            
         ACALL MAKESTR                           GET 2ND STRING                 
         IF    Z,BEGIN                                                          
         LA    R15,XSSTRLOC                          R15 - 2ND LOC              
         LH    R14,XSSTRLEN                          R14 - 2ND LEN              
         LR    R2,R4                                                            
         LA    R1,XSSTRLOC                           R1 - 1ST LOC               
         LH    R0,XSSTRLEN                           R0 - 1ST LEN               
         LR    R3,R0                                                            
         AR    R3,R14                                                           
         IF    (R3,LE,MAXSTRLN),BEGIN      IF NO STRING OVERFLOW                
         STH   R3,XSSTRLEN                                                      
         AR    R1,R0                                                            
         IF    (R14,GT,0),BEGIN                                                 
         DEX   R14,' MVC 0(0,R1),0(R15) '  CONCATENATE                          
         END                                                                    
         CLEAR R15                                                              
         END                                                                    
         IF    (R3,GT,MAXSTRLN),BEGIN      IF STRING OVERFLOW                   
         ACALL STROFLOW                                                         
         END                                                                    
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLEQ - COMPARE IF EQUAL                                                     
*                                                                               
*  COMPARE IF EQUAL. STACK HEIGHT IS REDUCED BY 2.                              
*  (R6 IS NOT UPDATED).                                                         
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR ON STACK                                                  
*       R4 - 1ST VALUE, PLACE FOR RESULT                                        
*                                                                               
*  ON EXIT:                                                                     
*       R4 - RESULT                                                             
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLEQ    PROC  ,                                                                
         USING XSENTRY,R2                                                       
         ACALL EVLCOMPR            COMPARE                                      
         IF    Z,BEGIN                                                          
         IF    (R1,EQ,0),BEGIN                                                  
         LR    R2,R4                                                            
         CLEAR XSENTRY                                                          
         SET   XSVAL                                                            
         SET   XSBOOL                                                           
         MVC   XSVALUE(NL),PKONE   TRUE                                         
         END                                                                    
         IF    (R1,NE,0),BEGIN                                                  
         LR    R2,R4                                                            
         CLEAR XSENTRY                                                          
         SET   XSVAL                                                            
         SET   XSBOOL                                                           
         MVC   XSVALUE(NL),PKZERO  FLASE                                        
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLNE - COMPARE IF NOT EQUAL                                                 
*                                                                               
*  COMPARE IF NOT EQUAL. STACK HEIGHT IS REDUCED BY 2.                          
*  (R6 IS NOT UPDATED).                                                         
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR ON STACK                                                  
*       R4 - 1ST VALUE, PLACE FOR RESULT                                        
*                                                                               
*  ON EXIT:                                                                     
*       R4 - RESULT                                                             
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLNE    PROC  ,                                                                
         USING XSENTRY,R2                                                       
         ACALL EVLCOMPR            COMPARE                                      
         IF    Z,BEGIN                                                          
         IF    (R1,NE,0),BEGIN                                                  
         LR    R2,R4                                                            
         CLEAR XSENTRY                                                          
         SET   XSVAL                                                            
         SET   XSBOOL                                                           
         MVC   XSVALUE(NL),PKONE   TRUE                                         
         END                                                                    
         IF    (R1,EQ,0),BEGIN                                                  
         LR    R2,R4                                                            
         CLEAR XSENTRY                                                          
         SET   XSVAL                                                            
         SET   XSBOOL                                                           
         MVC   XSVALUE(NL),PKZERO  FALSE                                        
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLLT - COMPARE IF LESS THAN                                                 
*                                                                               
*  COMPARE IF LESS. STACK HEIGHT IS REDUCED BY 2.                               
*  (R6 IS NOT UPDATED).                                                         
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR ON STACK                                                  
*       R4 - 1ST VALUE, PLACE FOR RESULT                                        
*                                                                               
*  ON EXIT:                                                                     
*       R4 - RESULT                                                             
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLLT    PROC  ,                                                                
         USING XSENTRY,R2                                                       
         ACALL EVLCOMPR            COMPARE                                      
         IF    Z,BEGIN                                                          
         IF    (R1,LT,0),BEGIN                                                  
         LR    R2,R4                                                            
         CLEAR XSENTRY                                                          
         SET   XSVAL                                                            
         SET   XSBOOL                                                           
         MVC   XSVALUE(NL),PKONE   TRUE                                         
         END                                                                    
         IF    (R1,GE,0),BEGIN                                                  
         LR    R2,R4                                                            
         CLEAR XSENTRY                                                          
         SET   XSVAL                                                            
         SET   XSBOOL                                                           
         MVC   XSVALUE(NL),PKZERO  FALSE                                        
         END                                                                    
         IF    (R0,EQ,1),BEGIN                                                  
         TSEG  'Boolean does not convert to number. '                           
         LA    R15,4                                                            
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLLE - COMPARE IF LESS THAN OR EQUAL                                        
*                                                                               
*  COMPARE IF LESS OR EQUAL. STACK HEIGHT IS REDUCED BY 2.                      
*  (R6 IS NOT UPDATED).                                                         
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR ON STACK                                                  
*       R4 - 1ST VALUE, PLACE FOR RESULT                                        
*                                                                               
*  ON EXIT:                                                                     
*       R4 - RESULT                                                             
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLLE    PROC  ,                                                                
         USING XSENTRY,R2                                                       
         ACALL EVLCOMPR            COMPARE                                      
         IF    Z,BEGIN                                                          
         IF    (R1,LE,0),BEGIN                                                  
         LR    R2,R4                                                            
         CLEAR XSENTRY                                                          
         SET   XSVAL                                                            
         SET   XSBOOL                                                           
         MVC   XSVALUE(NL),PKONE   TRUE                                         
         END                                                                    
         IF    (R1,GT,0),BEGIN                                                  
         LR    R2,R4                                                            
         CLEAR XSENTRY                                                          
         SET   XSVAL                                                            
         SET   XSBOOL                                                           
         MVC   XSVALUE(NL),PKZERO  FALSE                                        
         END                                                                    
         IF    (R0,EQ,1),BEGIN                                                  
         TSEG  'Boolean does not convert to number. '                           
         LA    R15,4                                                            
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLGT - COMPARE IF GREATER THAN                                              
*                                                                               
*  COMPARE IF GREATER. STACK HEIGHT IS REDUCED BY 2.                            
*  (R6 IS NOT UPDATED).                                                         
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR ON STACK                                                  
*       R4 - 1ST VALUE, PLACE FOR RESULT                                        
*                                                                               
*  ON EXIT:                                                                     
*       R4 - RESULT                                                             
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLGT    PROC  ,                                                                
         USING XSENTRY,R2                                                       
         ACALL EVLCOMPR            COMPARE                                      
         IF    Z,BEGIN                                                          
         IF    (R1,GT,0),BEGIN                                                  
         LR    R2,R4                                                            
         CLEAR XSENTRY                                                          
         SET   XSVAL                                                            
         SET   XSBOOL                                                           
         MVC   XSVALUE(NL),PKONE   TRUE                                         
         END                                                                    
         IF    (R1,LE,0),BEGIN                                                  
         LR    R2,R4                                                            
         CLEAR XSENTRY                                                          
         SET   XSVAL                                                            
         SET   XSBOOL                                                           
         MVC   XSVALUE(NL),PKZERO  FALSE                                        
         END                                                                    
         IF    (R0,EQ,1),BEGIN                                                  
         TSEG  'Boolean does not convert to number. '                           
         LA    R15,4                                                            
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLGE - COMPARE IF GREATER OR EQUAL                                          
*                                                                               
*  COMPARE IF GREATER OR EQUAL. STACK HEIGHT IS REDUCED BY 2.                   
*  (R6 IS NOT UPDATED).                                                         
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR ON STACK                                                  
*       R4 - 1ST VALUE, PLACE FOR RESULT                                        
*                                                                               
*  ON EXIT:                                                                     
*       R4 - RESULT                                                             
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLGE    PROC  ,                                                                
         USING XSENTRY,R2                                                       
         ACALL EVLCOMPR            COMPARE                                      
         IF    Z,BEGIN                                                          
         IF    (R1,GE,0),BEGIN                                                  
         LR    R2,R4                                                            
         CLEAR XSENTRY                                                          
         SET   XSVAL                                                            
         SET   XSBOOL                                                           
         MVC   XSVALUE(NL),PKONE   TRUE                                         
         END                                                                    
         IF    (R1,LT,0),BEGIN                                                  
         LR    R2,R4                                                            
         CLEAR XSENTRY                                                          
         SET   XSVAL                                                            
         SET   XSBOOL                                                           
         MVC   XSVALUE(NL),PKZERO  FALSE                                        
         END                                                                    
         IF    (R0,EQ,1),BEGIN                                                  
         TSEG  'Boolean does not convert to number. '                           
         LA    R15,4                                                            
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLOR - BOOLEAN OR                                                           
*                                                                               
*  BOOLEAN OR TWO NUMBERS, STACK HEIGHT IS REDUCED BY 2.                        
*  (R6 NOT UPDATED).                                                            
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR ON STACK                                                  
*       R4 - 1ST VALUE                                                          
*                                                                               
*  ON EXIT:                                                                     
*       R0 - MUST BE SAME AS ABOVE                                              
*       R1 - MUST BE SAME AS ABOVE                                              
*       R4 - PLACE FOR RESULT                                                   
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLOR    PROC  ,                                                                
         USING XSENTRY,R2                                                       
         COMMENT                   **** DO NOT DESTROY R0,R1 ***                
         COMMENT                   R4 - 1ST NUMBER                              
         LR    R5,R2               R5 - 2ND NUMBER                              
         COMMENT                                                                
         LR    R2,R4                                                            
         ACALL MAKEBOOL                          GET 1ST BOOLEAN                
         LA    R4,XSVALUE                                                       
         IF    Z,BEGIN                                                          
         LR    R2,R5                                                            
         ACALL MAKEBOOL                          GET 2ND BOOLEAN                
         LA    R5,XSVALUE                                                       
         IF    Z,BEGIN                                                          
         OC    0(NL,R4),0(R5)                     OR                            
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLAND - BOOLEAN AND                                                         
*                                                                               
*  BOOLEAN ANDTWO NUMBERS, STACK HEIGHT IS REDUCED BY 2.                        
*  (R6 NOT UPDATED).                                                            
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR ON STACK                                                  
*       R4 - 1ST VALUE                                                          
*                                                                               
*  ON EXIT:                                                                     
*       R0 - MUST BE SAME AS ABOVE                                              
*       R1 - MUST BE SAME AS ABOVE                                              
*       R4 - PLACE FOR RESULT                                                   
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLAND   PROC  ,                                                                
         USING XSENTRY,R2                                                       
         COMMENT                   **** DO NOT DESTROY R0,R1 ***                
         COMMENT                   R4 - 1ST NUMBER                              
         LR    R5,R2               R5 - 2ND NUMBER                              
         COMMENT                                                                
         LR    R2,R4                                                            
         ACALL MAKEBOOL                          GET 1ST BOOLEAN                
         LA    R4,XSVALUE                                                       
         IF    Z,BEGIN                                                          
         LR    R2,R5                                                            
         ACALL MAKEBOOL                          GET 2ND BOOLEAN                
         LA    R5,XSVALUE                                                       
         IF    Z,BEGIN                                                          
         NC    0(NL,R4),0(R5)                     AND                           
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLCOMPR - COMPARE TWO VALUES                                                
*                                                                               
*  NUMBERS, BOOLEANS, AND/OR STRINGS MAY BE COMPARED.                           
*                                                                               
*  ON ENTRY:                                                                    
*       R0,R1 - NOT USED                                                        
*       R2 - 2ND VALUE                                                          
*       R3 - OPERATOR                                                           
*       R4 - 1ST VALUE                                                          
*                                                                               
*  ON EXIT:                                                                     
*       R0 - 0 IF NUMBER OR STRING COMPARE, 1 IF BOOLEAN COMPARE                
*       R1 - 0 IF EQ, 1 IF HIGH, -1 IF LOW                                      
*      R15 - CC=ZERO, IF COMPARE OK                                             
*            CC=NZ, IF ERROR... ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
EVLCOMPR PROC  ,                                                                
         USING  XSENTRY,R2                                                      
         COMMENT                   R4 - 1ST VALUE                               
         LR    R5,R2               R5 - 2ND VALUE                               
         COMMENT                                                                
         IF    XSNUMB,BEGIN        IF NUMBER,,                                  
         ACALL EVLCPNUM                                                         
         B     EVLCDONE                                                         
         END                                                                    
         IF    XSBOOL,BEGIN        IF BOOLEAN,,                                 
         ACALL EVLCPBOO                                                         
         B     EVLCDONE                                                         
         END                                                                    
         LR    R2,R4                                                            
         IF    XSNUMB,BEGIN        IF NUMBER,,                                  
         ACALL EVLCPNUM                                                         
         B     EVLCDONE                                                         
         END                                                                    
         IF    XSBOOL,BEGIN        IF BOOLEAN,,                                 
         ACALL EVLCPBOO                                                         
         B     EVLCDONE                                                         
         END                                                                    
         ACALL EVLCPSTR            IF STRING                                    
         B     EVLCDONE                                                         
*                                                                               
EVLCDONE LABEL ,                                                                
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*-                                                                              
*-         R4 - FIRST VALUE,  R5 - 2ND VALUE                                    
*-                                                                              
*-         R0 - 0 IF NUMBER, STRING COMPARE, 1 IF BOOLEAN                       
*-         R1 - 0 IF EQUAL, 1 IF HIGH, -1 IF LOW                                
*-        R15 - CC=ZERO IF OK, CC=NZ IF ERROR                                   
*-                                                                              
EVLCPNUM PROC  ,                   COMPARE NUMBERS                              
         USING XSENTRY,R2                                                       
         LR    R2,R4                                                            
         ACALL MAKENUMB            GET 1ST NUMBER                               
         IF    Z,BEGIN                                                          
         LR    R2,R5                                                            
         ACALL MAKENUMB            GET 2ND NUMBER                               
         LA    R5,XSVALUE              R5 - VALUE OF 2ND NUMBER                 
         IF    Z,BEGIN                                                          
         LR    R2,R4                                                            
         CP    XSVALUE(NL),0(NL,R5)                                             
         IF    E,BEGIN             EQUAL                                        
         LA    R1,0                                                             
         END                                                                    
         IF    H,BEGIN             HIGH                                         
         LA    R1,1                                                             
         END                                                                    
         IF    L,BEGIN             LOW                                          
         L     R1,=F'-1'                                                        
         END                                                                    
         SR    R0,R0                                                            
         CLEAR R15                                                              
         END                                                                    
         END                                                                    
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*-                                                                              
*-         R4 - FIRST VALUE,  R5 - 2ND VALUE                                    
*-                                                                              
*-         R0 - 0 IF NUMBER, STRING COMPARE, 1 IF BOOLEAN                       
*-         R1 - 0 IF EQUAL, 1 IF HIGH, -1 IF LOW                                
*-        R15 - CC=ZERO IF OK, CC=NZ IF ERROR                                   
*-                                                                              
EVLCPBOO PROC  ,                   COMPARE BOOLEANS                             
         USING XSENTRY,R2                                                       
         LR    R2,R4                                                            
         ACALL MAKEBOOL            GET 1ST BOOLEAN                              
         IF    Z,BEGIN                                                          
         LR    R2,R5                                                            
         ACALL MAKEBOOL            GET 2ND BOOLEAN                              
         LA    R5,XSVALUE              R5 - 2ND BOOLEAN VALUE                   
         IF    Z,BEGIN                                                          
         LR    R2,R4                                                            
         CLC   XSVALUE(8),0(R5)    COMPARE                                      
         IF    EQ,BEGIN                                                         
         LA    R1,0                EQUAL                                        
         END                                                                    
         IF    NE,BEGIN                                                         
         LA    R1,1                NOT EQUAL                                    
         END                                                                    
         LA    R0,1                                                             
         CLEAR R15                                                              
         END                                                                    
         END                                                                    
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*-                                                                              
*-         R4 - FIRST VALUE,  R5 - 2ND VALUE                                    
*-                                                                              
*-         R0 - 0 IF NUMBER, STRING COMPARE, 1 IF BOOLEAN                       
*-         R1 - 0 IF EQUAL, 1 IF HIGH, -1 IF LOW                                
*-        R15 - CC=ZERO IF OK, CC=NZ IF ERROR                                   
*-                                                                              
EVLCPSTR PROC  ,                   COMPARE STRINGS                              
         USING XSENTRY,R2                                                       
         LR    R2,R4                                                            
         ACALL MAKESTR             GET 1ST STRING                               
         IF    Z,BEGIN                                                          
         LR    R2,R5                                                            
         ACALL MAKESTR             GET 2ND STRING                               
         IF    Z,BEGIN                                                          
         LR    R2,R4                                                            
         LA    R14,XSSTRLOC        1ST STRING LOC, LEN                          
         LH    R15,XSSTRLEN                                                     
         LR    R2,R5                                                            
         LA    R0,XSSTRLOC         2ND STRING LOC, LEN                          
         LH    R1,XSSTRLEN                                                      
         O     R1,=X'40000000'                                                  
         CLCL  R14,R0              COMPARE                                      
         IF    EQ,BEGIN                                                         
         LA    R1,0                                                             
         END                                                                    
         IF    H,BEGIN                                                          
         LA    R1,1                                                             
         END                                                                    
         IF    L,BEGIN                                                          
         L     R1,=F'-1'                                                        
         END                                                                    
         SR    R0,R0                                                            
         CLEAR R15                                                              
         END                                                                    
         END                                                                    
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  EVLEND - EVALUATE END OF EXPRESSION                                          
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - NOT USED                                                           
*       R1 - NOT USED                                                           
*       R6 - EXPRESSION STACK, POINTS 'EXPR END ENTRY'                          
*                                                                               
*  ON EXIT:                                                                     
*       R1 - NEW STACK POINTER, POINTS TO VALUE OR NULL ENTRY                   
*      R15 - CC=ZERO, EXPRESSION RETURNED A VALUE                               
*            CC=NZ, IF ERROR... ERROR MSG TSEG 'D                               
*                                                                               
*                                                                               
*                                                                               
EVLEND   PROC  ,                                                                
         USING XSENTRY,R6                                                       
         XSPOP ,,                  POP EXPRESSION STACK                         
         IF    XSEND,BEGIN                                                      
         XSPOP ,,                                                               
         IF    XSSTART,BEGIN       IF STACK: END, START.                        
         CLEAR XSENTRY                                                          
         SET   XSNULL                 RETURN NULL                               
         LR    R1,R6                                                            
         CLEAR R15                                                              
         B     EVLEDONE                                                         
         END                                                                    
         IF    XSVAL,BEGIN                                                      
         LR    R2,R6                                                            
         XSPOP ,,                                                               
         IF    XSSTART,BEGIN       IF STACK: END, VAL, START.                   
         LR    R4,R6                                                            
         LA    R5,L'XSLENTRY          MOVE VALUE TO START OF STACK              
         LR    R3,R5                                                            
         MVCL  R4,R2                                                            
         LR    R1,R6                                                            
         CLEAR R15                                                              
         B     EVLEDONE                                                         
         END                                                                    
         END                                                                    
         END                                                                    
         COMMENT                        ALL OTHERS ARE ERRORS                   
         TSEG  'Invalid expression. '   SHOULD NEVER OCCUR                      
         LA    R15,4                                                            
*                                                                               
EVLEDONE LABEL ,                                                                
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  BADUOP - INVALID UNARY OPERATOR                                              
*                                                                               
*  ON ENTRY:                                                                    
*       R6 - STACK ENTRY OF INVALID OPERATOR                                    
*                                                                               
*  ON EXIT:                                                                     
*       R15 - CC=NZ, ERROR IS TSEG 'D                                           
*                                                                               
*  USED AS UNARY ROUTINE FOR OPERATORS THAT ARE INVALID AS                      
*  UNARY OPERATORS.  ROUTINE IS CALLED FROM EVLSTACK.                           
*                                                                               
*                                                                               
*                                                                               
BADUOP   PROC  ,                                                                
         USING XSENTRY,R6                                                       
         TSEG  '"'                                                              
         LA    R15,CPSEG                                                        
         SEGT  XSOPCHAR,4                                                       
         TSEG  '" is not a valid unary operator. '                              
         LA    R15,4                                                            
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  BADBOP - INVALID BINARY OPERATOR                                             
*                                                                               
*  ON ENTRY:                                                                    
*       R6 - STACK ENTRY OF INVALID OPERATOR                                    
*                                                                               
*  ON EXIT:                                                                     
*       R15 - CC=NZ, ERROR IS TSEG 'D                                           
*                                                                               
*  USED AS BINARY ROUTINE FOR OPERATORS THAT ARE INVALID AS                     
*  BINARY OPERATORS.  ROUTINE IS CALLED FROM EVLSTACK.                          
*                                                                               
*                                                                               
*                                                                               
BADBOP   PROC  ,                                                                
         USING XSENTRY,R6                                                       
         TSEG  '"'                                                              
         LA    R15,CPSEG                                                        
         SEGT  XSOPCHAR,4                                                       
         TSEG  '" is not a valid binary operator. '                             
         LA    R15,4                                                            
         PEND  ,                                                                
         EJECT                                                                  
*-                                                                              
*-       NOTE:                                                                  
*-        USER MAY ONLY SPECIFY NUMBERS TO F12.8 ACCURACY.                      
*-        NUMBER IS STORED AS PACKED DECIMAL OF F14.9 ACCURACCY.                
*-        THE HIGHEST 2 DIGITS (F14 AND F13) ARE ALWAYS ZERO.                   
*-        ALL CALCULATIONS ON NUMBERS ARE OF F12.9 ACCURACY.                    
*-        THE ACCURACY OF THE LAST DIGIT (F.9) IS HIDDEN TO USER.               
*-                                                                              
*-                                                                              
         DS    0F                                                               
         ENTRY PKZERO,PKONE                                                     
PKZERO   DC    X'00000000000000000000000C'         F14.9                        
PKONE    DC    X'00000000000001000000000C'         F14.9                        
PK16ZERO DC    X'0000000000000000000000000000000C'                              
PK16ONE  DC    X'0000000000000000000001000000000C' F14.9                        
         EJECT                                                                  
         QLTORG                                                                 
         TITLE 'EXPRESSION SCAN ROUTINES'                                       
*box                                                                            
*                                                                               
*                                                                               
*  XXXSCAN - SCAN EXPRESSION                                                    
*                                                                               
*  THIS ROUTINE SCANS THE NEXT ITEM IN THE EXPRESSION.                          
*  IF THE NEXT ITEM IS A OPERATOR OR A TERM, AN APPROPRIATE                     
*  EXPRESSION STACK ENTRY FOR THE ITEM IS GENERATED AND                         
*  PLACED AT THE EXPRESSION STACK.                                              
*                                                                               
*  THIS ROUTINE RECURSIVELY CALLS XXXEVAL.                                      
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - EXPRESSION STRING LENGTH                                           
*       R1 - EXPRESSION STRING LOCATION                                         
*       R6 - EXPRESSION STACK POINTER                                           
*                                                                               
*  ON EXIT:                                                                     
*       R0 - REMAINING STRING LENGTH                                            
*       R1 - REMAINING STRING ADDRESS                                           
*       R6 - EXPRESSION STACK ENTRY POINTER (NOT CHANGED)                       
*            EXPRESSION ENTRY MAY BE ONE OF THE FOLLOWING:                      
*               A) OPERATOR                                                     
*               B) VALUE OF TERM                                                
*               C) END OF EXPRESSION                                            
*      R15 - CC=ZERO, IF SCAN OK                                                
*            CC=NZ, IF ERROR... ERROR MSG TSEG 'D                               
*                                                                               
*       IF END OF EXPRESSION THEN R0=0 OR R1 POINTS TO ';'                      
*                                                                               
*                                                                               
XXXSCAN  PROC  ,          SCAN EXPRESSION                                       
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY                                                          
         LR    R3,R0               R3 - SCAN STRING LEN                         
         AR    R0,R1               R0 - END OF SCAN STR                         
         SR    R2,R2                                                            
         IF    (R3,POS),BEGIN                                                   
         DEX   R3,' TRT 0(0,R1),SCNTABLE'    SCAN LINE                          
         IF    Z,BEGIN                                                          
         LR    R1,R0                                                            
         SR    R2,R2                                                            
         END                                                                    
         END                                                                    
         SR    R0,R1               R1,R0 - REMAINING STR LOC,LEN                
*  BALR REMOVED BY CH 02/91                                                     
*        L     R14,SCNRTNS(R2)     GET APPROPRIATE SCAN ROUTINE                 
*        BALR  R14,R14             "ACALL" SCAN ROUTINE                         
         IF     (R2,EQ,00),'ACALL SCNBLANK'                                     
         ELSEIF (R2,EQ,04),'ACALL SCNBAD'                                       
         ELSEIF (R2,EQ,08),'ACALL SCNALPHA'                                     
         ELSEIF (R2,EQ,12),'ACALL SCNNUMB'                                      
         ELSEIF (R2,EQ,16),'ACALL SCNDOT'                                       
*        ELSEIF (R2,EQ,20),'ACALL SCNHEX'                                       
         ELSEIF (R2,EQ,24),'ACALL SCNSQ'                                        
         ELSEIF (R2,EQ,28),'ACALL SCNDQ'                                        
         ELSEIF (R2,EQ,32),'ACALL SCNPLUS'                                      
         ELSEIF (R2,EQ,36),'ACALL SCNMINUS'                                     
         ELSEIF (R2,EQ,40),'ACALL SCNMULT'                                      
         ELSEIF (R2,EQ,44),'ACALL SCNDIV'                                       
         ELSEIF (R2,EQ,48),'ACALL SCNCAT'                                       
         ELSEIF (R2,EQ,52),'ACALL SCNTILDA'                                     
         ELSEIF (R2,EQ,56),'ACALL SCNOP'                                        
         ELSEIF (R2,EQ,60),'ACALL SCNCP'                                        
         ELSEIF (R2,EQ,64),'ACALL SCNCOMMA'                                     
         ELSEIF (R2,EQ,68),'ACALL SCNSIMI'                                      
*-                                                                              
*-       ALL SCAN ROUTINES ARE CALLED WITH THE SAME ENTRY/EXIT                  
*-       AS XXXSCAN ROUTINES ABOVE.                                             
*-                                                                              
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*                                                                               
*                                                                               
* EXPRESSION SCAN TRT TABLE                                                     
*                                                                               
*                                                                               
SCNTABLE DS    0F                  SCAN TRT TABLE                               
         DC    256X'00'                                                         
SCNRTNS  DS    0F                                                               
         ORG   SCNTABLE            04 - DEFAULT IS ILLEGAL CHAR                 
         DC    256X'04'                                                         
         ORG   SCNTABLE+C' '       00 - C' ' IS ONLY NON SPECIAL CHAR           
         DC    X'00'                                                            
         ORG   SCNTABLE+C'a'       08 - IS FOR ALL ALPHAS                       
         DC    9X'08'                                                           
         ORG   SCNTABLE+C'j'                                                    
         DC    9X'08'                                                           
         ORG   SCNTABLE+C's'                                                    
         DC    8X'08'                                                           
         ORG   SCNTABLE+C'A'                                                    
         DC    9X'08'                                                           
         ORG   SCNTABLE+C'J'                                                    
         DC    9X'08'                                                           
         ORG   SCNTABLE+C'S'                                                    
         DC    8X'08'                                                           
         ORG   SCNTABLE+C'0'       12 - IS FOR ALL NUMBERS                      
         DC    10X'0C'                                                          
         ORG   SCNTABLE+256                                                     
*-                                                                              
*-       SCAN EQU'S                                                             
*-                                                                              
NULL     EQU   0                                                                
ILLEGAL  EQU   4                                                                
ALPHA    EQU   8                                                                
NUMBER   EQU   12                                                               
* IF TESTING FOR OTHER MUST USE ... IF (RX,GE,OTHER)..                          
OTHER    EQU   16                                                               
*-                                                                              
*-                                                                              
*-       A SIMPLE SCAN CHAR/TABLE/ROUTINES MACRO                                
*-                                                                              
         MACRO                                                                  
         SCNRTN &CHAR,&RTNOFF,&ROUTINE                                          
         ORG   SCNTABLE+&CHAR                                                   
         DC    AL1(&RTNOFF)                                                     
         ORG   SCNRTNS+&RTNOFF                                                  
         DC    A(&ROUTINE)                                                      
         MEND                                                                   
*-                                                                              
*-       SCAN ROUTINES                                                          
*-                                                                              
         SCNRTN C' ',00,SCNBLANK    0 - BLANK                                   
         SCNRTN C'?',04,SCNBAD      4 - ILLEGALS                                
         SCNRTN C'A',08,SCNALPHA    8 - ALPHAS                                  
         SCNRTN C'0',12,SCNNUMB    12 - NUMBERS                                 
         SCNRTN C'.',16,SCNDOT     .                                            
*        SCNRTN C'#',20,SCNHEX     #                                            
         SCNRTN C'''',24,SCNSQ     '    STRINGS                                 
         SCNRTN C'"',28,SCNDQ      "                                            
         SCNRTN C'+',32,SCNPLUS    +    OPERATORS                               
         SCNRTN C'-',36,SCNMINUS   -                                            
         SCNRTN C'*',40,SCNMULT    *    (THIS IS ALSO CURRENT LINE)             
         SCNRTN C'/',44,SCNDIV     /                                            
         SCNRTN C'|',48,SCNCAT     |                                            
         SCNRTN C'^',52,SCNTILDA   ^                                            
         SCNRTN C'(',56,SCNOP      (    PARENTHESIS                             
         SCNRTN C')',60,SCNCP      )                                            
         SCNRTN C',',64,SCNCOMMA   ,    TERMINATORS                             
         SCNRTN C';',68,SCNSIMI    ;                                            
         ORG   SCNRTNS+68+4                                                     
         EJECT                                                                  
*-                                                                              
*-       TRT SCAN TABLES                                                        
*-                                                                              
TRTNAME  DC    256X'04'            TRT SCAN TABLE FOR NAMES                     
         ORG   TRTNAME+C'a'        ALL ALPHAS AND NUMBERS AND "_"               
         DC    9X'00'                  VALID IN NAMES                           
         ORG   TRTNAME+C'j'                                                     
         DC    9X'00'                                                           
         ORG   TRTNAME+C's'                                                     
         DC    8X'00'                                                           
         ORG   TRTNAME+C'A'                                                     
         DC    9X'00'                                                           
         ORG   TRTNAME+C'J'                                                     
         DC    9X'00'                                                           
         ORG   TRTNAME+C'S'                                                     
         DC    8X'00'                                                           
         ORG   TRTNAME+C'0'                                                     
         DC    10X'00'                                                          
         ORG   TRTNAME+C'_'                                                     
         DC    X'00'                                                            
         ORG   TRTNAME+256                                                      
*                                                                               
TRTNUMB  DC    256X'04'            TRT SCAN TABLE FOR NUMBERS                   
         ORG   TRTNUMB+C'0'        0-9 IS VALID                                 
         DC    10X'00'                                                          
         ORG   TRTNUMB+256                                                      
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNTYPE - SCAN A STRING UNTIL NON-BLANK, RETURN CHAR TYPE                    
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - LENGTH OF STRING                                                   
*       R1 - LOCATION OF STRING                                                 
*                                                                               
*  ON EXIT:                                                                     
*       R0 - LENGTH OF REMAINING STRING                                         
*       R1 - LOCATION OF FIRST NON BLANK CHAR                                   
*      R15 - CHARACTER TYPE,                                                    
*            R15=ZERO IF NO NON-BLANK CHARS IN STRING,                          
*            R15=TYPE OF FIRST NON-BLANK CHARACTER IN STRING,                   
*                (MAY BE ALPHA, NUMBER, ILLEGAL, OR OTHER ...IF                 
*                TESTING FOR OTHER MUST USE ... IF (R15,GE,OTHER))              
*                                                                               
*                                                                               
*                                                                               
SCNTYPE  PROC  ,                                                                
         AR    R0,R1               R0 - END OF STRING                           
         COMMENT                   R1 - START OF STRING                         
         SR    R2,R2               R2 - FUNCTION BYTE                           
         LR    R3,R0               R3 - LENGTH OF STRING                        
         SR    R3,R1                                                            
         L     R4,=A(SCNTABLE)     R4 - SCAN TRT TABLE                          
         IF    (R3,POS),BEGIN                                                   
         DEX   R3,' TRT 0(0,R1),0(R4) '  SCAN LINE                              
         IF    Z,BEGIN                                                          
         LR    R1,R0                                                            
         SR    R2,R2                                                            
         END                                                                    
         END                                                                    
         LR    R15,R2              RETURN CHARACTER TYPE                        
         SR    R0,R1               RETURN NEW STRING LOC, LEN                   
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNBLANK - SCANNED END OF LINE                                               
*                                                                               
*  PUT 'END OF EXPRESSION' ENTRY ON STACK @R6                                   
*  R0 IS ZERO.  R1 LEFT AS IS.                                                  
*  RETURN ZERO CC, ROUTINE CALLED BY XXXSCAN                                    
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNBLANK PROC  ,                                                                
         USING XSENTRY,R6                                                       
         SET   XSEND               SCANNED END OF LINE                          
         CLEAR R15                                                              
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNBAD - SCANNED ILLEGAL CHARACTER                                           
*                                                                               
*  TSEG ERROR MESSAGE, RETURN NON-ZERO CC.                                      
*  ROUTINE CALLED BY XXXSCAN                                                    
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNBAD   PROC  ,                                                                
         XPUSH R0,R1                                                            
         TSEG  'Invalid character "'                                            
         XPOP  R0,R1                                                            
         TSEG  (R1),1                                                           
         TSEG  '" in expression. '                                              
         LA    R15,4                                                            
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNALPHA - SCANNED ALPHA CHARACTER                                           
*                                                                               
*  THIS ROUTINE IS A WORK HORSE !!                                              
*  IT HANDLES ALL NAMES IN EXPRESSIONS. CASES HANDLED ARE AS                    
*  FOLLOWS:                                                                     
*       1. WORD OPERATORS (LT, GT, ..)                                          
*       2. RESERVED WORDS                                                       
*       3. VARIABLES (LOCAL/GLOBAL/SYSTEM)                                      
*       4. SYSTEM VARIABLES                                                     
*       5. SYSTEM FUNCTIONS                                                     
*       6. ETC.. ETC..                                                          
*  EACH NAME IS EVALUATED, AND A VALUE IS PLACED ON THE                         
*  EXPRESSION STACK.  THIS ROUTINE ESSENTIALLY JUST FIGURES                     
*  OUT WHAT THE NAME IS (EG. VARIABLE, FUNCTION, ETC ,,,)                       
*  AND THEN CALLS A ROUTINE TO GET THE VALUE OF THE SPECIFIED                   
*  NAME.                                                                        
*                                                                               
*  THIS ROUTINE IS CALLED FROM XXXSCAN, AND CALLS SEVERAL                       
*  ROUTINES.                                                                    
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - LENGTH OF STRING                                                   
*       R1 - LOCATION OF STRING (R1 POINTS TO ALPHA)                            
*       R6 - EXPRESSION STACK POINTER                                           
*                                                                               
*  ON EXIT:                                                                     
*       R0 - LENGTH OF REMAINING STRING                                         
*       R1 - LOCATION OF REMAINING STRING                                       
*       R6 - STACK ENTRY FOR NAME (A VALUE)                                     
*      R15 - CC=ZERO, IF OK                                                     
*            CC=NZ, IF ERROR,,, ERROR MSG TSEG'D                                
*                                                                               
*                                                                               
*                                                                               
SCNAWA   RECORD BEGIN                                                           
SCNAINFO DS    2F                  LEN,LOC OF REMAINING SCAN STRING             
         END                                                                    
*-                                                                              
*-                                                                              
*-                                                                              
SCNALPHA PROC  SCNAWA     SCAN A NAME                                           
         USING VNENTRY,R6                                                       
         LR    R2,R6                                                            
*                                                                               
         COMMENT                   SCAN NAME                                    
         ACALL SCNVNAME                                                         
         STM   R0,R1,SCNAINFO                                                   
         COMMENT                                                                
         IF    (R15,NE,0),BEGIN                                                 
         TSEG  VNNAME,L'VNNAME,T                                                
         TSEG  ': invalid variable name.'                                       
         LA    R15,4                                                            
         B     SCNADONE                                                         
         END                                                                    
*                                                                               
         COMMENT                   SCAN SUBSCRIPTS, IF ANY                      
         LM    R0,R1,SCNAINFO                                                   
         LA    R2,VNENTRY                                                       
         ACALL XVLSUBS                                                          
         BNZ   SCNADONE                                                         
         STM   R0,R1,SCNAINFO                                                   
*                                                                               
         COMMENT                   CHECK FOR/PROCESS RESERVED WORDS             
         IF    ((VNPREFIX,EQ,0),AND,(VNASUB1,EQ,0)),BEGIN                       
         LA    R2,VNENTRY                                                       
         ACALL SCNWOPER            SCAN FOR OPERATORS (EG. LE, EQ..)            
         BZ    SCNADONE                                                         
         CLEAR R15                                                              
         LM    R0,R1,SCNAINFO      SCAN FOR EXCEPTIONS,                         
         LA    R2,VNENTRY           (IE. HEX CONSTANTS, EG.  S'E6C4')           
         ACALL SCNEXCPN                                                         
         COMMENT ,                                                              
         BP    SCNADONE                                                         
         IF    Z,BEGIN                                                          
         STM   R0,R1,SCNAINFO                                                   
         B     GOTXSVAL                                                         
         END                                                                    
         CLEAR R15                                                              
         END                                                                    
*                                                                               
         COMMENT                   CHECK FOR/PROCESS ARRAY ELEMENT              
         IF    (VNASUB1,NE,0),BEGIN                                             
         CLEAR R0                                                               
         LA    R1,VNENTRY                                                       
         LA    R2,VNENTRY                                                       
         VCALL GETARRAY                                                         
         BNZ   SCNADONE                                                         
         B     GOTXSVAL                                                         
         END                                                                    
*                                                                               
         COMMENT ,                 CHECK FOR/PROCESS VARIABLE                   
         COMMENT ,                   (CHECKS LOCAL/GLOBAL/SYS VARS)             
         LA    R1,VNENTRY                                                       
         LA    R2,VNENTRY                                                       
         VCALL GETVAR              GET VARIABLE VALUE                           
         IF    Z,BEGIN             VARIABLE EXISTS !                            
         ACALL ZAPINT3             *** ZAP INTEGER (** OLD N0-N9)               
         IF    ^VNARRAY,BEGIN                                                   
         B     GOTXSVAL                                                         
         END                                                                    
         IF    VNARRAY,BEGIN       IF ARRAY, OH NO !!                           
         LA    R2,VNENTRY                                                       
         VCALL SEGVNAME                                                         
         TSEG  ': missing subscripts. '                                         
         LA    R15,4                                                            
         B     SCNADONE                                                         
         END                                                                    
         END                                                                    
*                                                                               
         COMMENT                   CHECK EXPLICITLY IF SYSTEM VAR               
         COMMENT ,                 (THIS IS A DEFAULT CASE)                     
         LA    R1,VNENTRY                                                       
         LA    R2,VNENTRY                                                       
         VCALL GETSVAR                                                          
         BZ    GOTXSVAL                                                         
*                                                                               
         COMMENT                   IF NOT VARIABLE,                             
         COMMENT                      CHECK IF FUNCTION                         
         IF    (VNPREFIX,NE,0),BEGIN                                            
         ACALL UNDEFD                                                           
         B     SCNADONE            PREFIXES INVALID FOR FUNCTIONS               
         END                                                                    
*                                                                               
         COMMENT                   CHECK IF USER FUNCTION                       
         COMMENT                                                                
         COMMENT ,                 (NOT YET IMPLEMENTED)                        
         COMMENT                                                                
*                                                                               
         COMMENT                   CHECK IF SYSTEM FUNCTION                     
         LA    R1,VNENTRY                                                       
         LA    R2,VNENTRY                                                       
         ACALL GETSYSFN                                                         
         IF    Z,BEGIN                                                          
         LM    R0,R1,SCNAINFO                                                   
         ACALL XVLSYSFN                                                         
         BNZ   SCNADONE                                                         
         STM   R0,R1,SCNAINFO                                                   
         B     GOTXSVAL                                                         
         END                                                                    
*-                                                                              
*-       ANYTHING ELSE IS UNDEFINED !!                                          
*-                                                                              
         ACALL UNDEFD                                                           
         B     SCNADONE                                                         
         SPACE 1                                                                
*-                                                                              
*-       SCANNED A VALUE !                                                      
*-                                                                              
GOTXSVAL LABEL ,                   GOT VALUE, SET STACK FLAGS                   
         CLEAR VNNAME              CLEAR NAME FIELD                             
         WITH  (XSENTRY,R6),BEGIN                                               
         SET   XSVAL               WE PUT A VALUE ON EXPR STACK                 
         END   , WITH (XSENTRY,R6)                                              
         B     SCNADONE                                                         
         SPACE 1                                                                
*-                                                                              
*-       DONE.                                                                  
*-                                                                              
SCNADONE LABEL ,                   DONE, RETURN TO CALLER                       
         LM    R0,R1,SCNAINFO                                                   
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNVNAME - SCAN VARIABLE NAME                                                
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - STRING LENGTH                                                      
*       R1 - STRING START                                                       
*       R2 - VARIABLE NAME (DESCRIPTOR) FIELD.  SEE VNENTRY DSECT.              
*                                                                               
*  ON EXIT:                                                                     
*       R0 - LENGTH OF REMAINING STRING                                         
*       R1 - ADDRESS OF REMAINING STRING                                        
*       R2 - VARIABLE ENTRY AREA, CONTAINING NAME                               
*            IN UPPER CASE LEFT JUSTIFIED WITH BLANKS                           
*      R15 - 0 IF NAME OK,  CC IS SET BASED ON R15                              
*           -4 BLANK STRING (NO NAME)                                           
*            4 IF NAME INVALID, (INVALID NAME @R2)                              
*                                                                               
*                                                                               
*  NOTE: THIS ROUTINE CLEARS ALL VARIABLE NAME (DESCRIPTOR)                     
*        FIELDS.  THEN SETS THE VARIABLE NAME AND PREFIX                        
*        FLAG FIELDS.                                                           
*                                                                               
*                                                                               
*                                                                               
SCNVNAME XPROC ,                                                                
         USING VNENTRY,R6                                                       
         LR    R6,R2                                                            
         CLEAR VNDESC              ZERO OUT VARIABLE ENTRY                      
         MVC   VNNAME(L'VNNAME),CVBLANKS      BLANK OUT NAME                    
*                                                                               
         COMMENT                   SCAN FOR FIRST ALPHA CHAR                    
         ACALL SCNTYPE                                                          
         IF    (R15,Z),BEGIN                                                    
         B     NONAME                                                           
         END                                                                    
         IF    (@R1,EQ,';'),BEGIN                                               
         B     NONAME                                                           
         END                                                                    
         IF    (R15,NE,ALPHA),BEGIN                                             
         MVC   VNNAME(1),0(R1)                                                  
         B     BADNAME                                                          
         END                                                                    
*                                                                               
*                                                                               
         COMMENT                   SCAN FOR NAME                                
         COMMENT                                                                
         LR    R4,R1               R4 - START OF NAME                           
         LR    R3,R0               R3 - LENGTH TO SCAN                          
         SR    R2,R2               R2 - FUNCTION BYTE                           
         COMMENT                   R1 - START OF STRING (NAME)                  
         AR    R0,R1               R0 - END OF STRING                           
         L     R14,=A(TRTNAME)     R14 - NAME TRT SCAN TABLE                    
         COMMENT                                                                
         IF    (R3,POS),BEGIN                                                   
         DEX   R3,' TRT 0(0,R1),0(R14) '   SCAN TO END OF NAME                  
         IF    Z,BEGIN                                                          
         LR    R1,R0                                                            
         SR    R2,R2                                                            
         END                                                                    
         END                                                                    
*                                                                               
         COMMENT                   SAVE VARIABLE NAME IN UPPER CASE             
         COMMENT                                                                
         LR    R3,R1               CALC VARIABLE NAME LENGTH (IN R3)            
         SR    R3,R4                                                            
         C     R3,=AL4(L'VNNAME)                                                
         IF    GT,BEGIN            IF NAME TOO LONG, ...                        
         MVC   VNNAME(L'VNNAME),0(R4)                                           
         L     R2,CVUPPTBL                                                      
         TR    VNNAME(L'VNNAME),0(R2)                                           
         B     BADNAME                                                          
         END                                                                    
         IF    (R3,Z),BEGIN        IF NAME TOO SHORT, ..IMPOSIBLE               
         BOMB                                                                   
         END                                                                    
         COMMENT                   NAME OK, SAVE IT IN UPPER CASE               
         DEX   R3,' MVC VNNAME(0),0(R4) '                                       
         L     R2,CVUPPTBL                                                      
         EX    R3,' TR VNNAME(0),0(R2) '                                        
*                                                                               
         COMMENT                   CHECK IF NAME PREFIX                         
         COMMENT                                                                
         SR    R0,R1               RETURN R1,R0 REMAINING LOC, LEN              
         CLEAR R15                 RETURN R15 CC                                
         IF    ((R0,Z),OR,(@R1,NE,'.')),NAMEDONE     IF NONE, DONE              
*                                                                               
*                                                                               
         COMMENT                   PROCESS NAME PREFIX                          
         LR    R3,R1                                                            
         SR    R3,R4                                                            
         LA    R3,VNNAME(R3)                                                    
         MVI   0(R3),C'.'          STICK '.' AT END OF NAME                     
         LA    R1,1(R1)                                                         
         BCTR  R0,0                SKIP '.'                                     
         LA    R2,VNNAME                                                        
         IF    (@R2,EQ,'X.'),BEGIN                                              
         SET   VNPFX                                                            
         END                                                                    
         IF    (@R2,EQ,'GBL.'),BEGIN                                            
         SET   VNPFGBL                                                          
         END                                                                    
         IF    (@R2,EQ,'SYS.'),BEGIN                                            
         SET   VNPFSYS                                                          
         END                                                                    
         IF    (@R2,EQ,'SES.'),BEGIN                                            
         SET   VNPFSES                                                          
         END                                                                    
         IF    (@R2,EQ,'PUB.'),BEGIN                                            
         SET   VNPFPUB                                                          
         END                                                                    
         IF    (VNPREFIX,EQ,0),BADNAME    IF NO VALID PREXIX --> ERR            
*                                                                               
         COMMENT                   RESCAN VARIABLE NAME                         
         COMMENT                                                                
         LR    R4,R1               R4 - START OF NAME                           
         LR    R3,R0               R3 - LENGTH TO SCAN                          
         SR    R2,R2               R2 - FUNCTION BYTE                           
         COMMENT                   R1 - START OF STRING (NAME)                  
         AR    R0,R1               R0 - END OF STRING                           
         L     R14,=A(TRTNAME)     R14 - NAME TRT SCAN TABLE                    
         COMMENT                                                                
         IF    (R3,NP),BADNAME                                                  
         DEX   R3,' TRT 0(0,R1),0(R14) '   SCAN TO END OF NAME                  
         IF    Z,BEGIN                                                          
         LR    R1,R0                                                            
         SR    R2,R2                                                            
         END                                                                    
*                                                                               
         COMMENT                   SAVE VARIABLE NAME IN UPPER CASE             
         COMMENT                                                                
         LR    R3,R1               CALC VARIABLE NAME LENGTH (IN R3)            
         SR    R3,R4                                                            
         C     R3,=AL4(L'VNNAME)                                                
         IF    GT,BEGIN            IF NAME TOO LONG, ...                        
         MVC   VNNAME(L'VNNAME),0(R4)                                           
         B     BADNAME                                                          
         END                                                                    
         IF    (R3,Z),BEGIN        IF NAME TOO SHORT, BARE PREFIX               
         B     BADNAME                                                          
         END                                                                    
         COMMENT                   NAME OK, SAVE IT IN UPPER CASE               
         MVC   VNNAME,CVBLANKS                                                  
         DEX   R3,' MVC VNNAME(0),0(R4) '                                       
         L     R2,CVUPPTBL                                                      
         EX    R3,' TR VNNAME(0),0(R2) '                                        
         SR    R0,R1               RETURN R1,R0 REMAINING LOC, LEN              
         CLEAR R15                 RETURN R15 CC                                
         B     NAMEDONE                                                         
*                                                                               
* EXITS                                                                         
*                                                                               
NONAME   LABEL ,                                                                
         L     R15,=F'-4'                                                       
         B     NAMEDONE                                                         
*                                                                               
BADNAME  LABEL ,                                                                
         LA    R15,4                                                            
         B     NAMEDONE                                                         
*                                                                               
NAMEDONE LABEL ,                                                                
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNNUMB - SCAN A NUMBER                                                      
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - LENGTH OF STRING                                                   
*       R1 - LOCATION OF STRING (R1 MUST POINT AT NUMERIC)                      
*       R6 - EXPRESSION STACK POINTER                                           
*                                                                               
*  ON EXIT:                                                                     
*       R0 - LENGTH OF REMAINING STRING                                         
*       R1 - LOCATION OF REMAINING STRING                                       
*       R6 - POINTS TO NEW EXPRESSION STACK ENTRY                               
*                                                                               
*  NOTE: USER MAY ONLY SPECIFY NUMBERS TO F12.8 ACCURACY.                       
*  NUMBER IS STORED AS PACKED DECIMAL OF F14.9 ACCURACCY.                       
*                                                                               
*                                                                               
SCNNWA   RECORD BEGIN ,,                                                        
SCNNWORK DS    CL24                WORK AREA                                    
         END                                                                    
*                                                                               
*                                                                               
SCNNUMB  PROC  SCNNWA                                                           
         USING XSENTRY,R6                                                       
         MVC   SCNNWORK(24),=C'000000000000000000000000'                        
         SET   XSVAL                                                            
         SET   XSNUMB                                                           
*-                                                                              
*-       PROCESS WHOLE PART OF NUMBER                                           
*-                                                                              
         LR    R4,R1               R4 - START OF NUMBER                         
         LR    R3,R0               R3 - LENGTH TO SCAN                          
         SR    R2,R2               R2 - FUNCTION BYTE                           
         COMMENT                   R1 - ADDRESS OF STRING TO SCAN               
         AR    R0,R1               R0 - END OF STRING TO SCAN                   
         L     R14,=A(TRTNUMB)     R14 - NUMBER TRT SCAN TABLE                  
         COMMENT                                                                
         IF    (R3,POS),BEGIN                                                   
         DEX   R3,' TRT 0(0,R1),0(R14)  '    SCAN WHOLE PART                    
         IF    Z,BEGIN                                                          
         LR    R1,R0                                                            
         SR    R2,R2                                                            
         END                                                                    
         END                                                                    
         LR    R5,R1               R5 - ADDR OF POSSIBLE DECIMAL PART           
         SR    R1,R4               R1 - LENGTH OF WHOLE PART                    
         IF    (R1,GT,12),BEGIN                                                 
         ACALL OVERFLOW                                                         
         B     SCNNDONE                                                         
         END                                                                    
         LA    R3,14                                                            
         SR    R3,R1                                                            
         LA    R3,SCNNWORK(R3)                                                  
         DEX   R1,' MVC 0(0,R3),0(R4) '     MOVE WHOLE NUMBER PART              
         LR    R1,R5                                                            
         SR    R0,R1               R1,R0 - LOC,LEN OF REMAINDER                 
*-                                                                              
*-       PROCESS FRACTIONAL PART OF NUMBER, IF ANY                              
*-                                                                              
         COMMENT                   R1 - DECIMAL PART, IF ANY                    
         COMMENT                   R0 - LENGTH LEFT TO SCAN                     
         COMMENT                                                                
         ACALL ZAPINT4             ** INTEGER ZAP (** OLD EXEC)                 
         COMMENT                                                                
         IF    ((@R1,EQ,'.'),AND,(R0,POS)),BEGIN   IF FRACTIONAL PART           
         LA    R1,1(R1)            SKIP DECIMAL POINT                           
         BCTR  R0,0                                                             
         LR    R4,R1               R4 - START OF NUMBER                         
         LR    R3,R0               R3 - LENGTH TO SCAN                          
         SR    R2,R2               R2 - FUNCTION BYTE                           
         COMMENT                   R1 - ADDRESS OF STRING TO SCAN               
         AR    R0,R1               R0 - END OF STRING TO SCAN                   
         L     R14,=A(TRTNUMB)     R14 - NUMBER TRT SCAN TABLE                  
         COMMENT                                                                
         IF    (R3,POS),BEGIN                                                   
         DEX   R3,' TRT 0(0,R1),0(R14)  '     SCAN DECIMAL PART                 
         IF    Z,BEGIN                                                          
         LR    R1,R0                                                            
         SR    R2,R2                                                            
         END                                                                    
         END                                                                    
         LR    R5,R1               R5 - END OF NUMBER                           
         SR    R1,R4               R1 - LENGTH OF NUMBER                        
         IF    (R1,GT,8),BEGIN                                                  
         ACALL OVERFLOW                   FRACTIONAL PART TOO BIG !!            
         B     SCNNDONE                                                         
         END                                                                    
         COMMENT                                                                
         IF    (R1,POS),BEGIN                                                   
         DEX   R1,' MVC SCNNWORK+14(0),0(R4) '                                  
         END                                                                    
         LR    R1,R5               R1,R0 - LOC,LEN OF REMAINDER                 
         SR    R0,R1                                                            
         END                                                                    
         XPUSH R0,R1                                                            
         LA    R0,22                                                            
         LA    R1,SCNNWORK         PACK NUMBER INTO XSVALUE                     
         LA    R2,XSVALUE                                                       
         ACALL MAKEHEX                                                          
         MVI   XSVALUE+NL-1,X'0C'  SET CORRECT SIGN                             
         COMMENT ,                 (ALSO 9 OF F14.9 IS ZERO)                    
         XPOP  R0,R1                                                            
         CLEAR R15                                                              
*                                                                               
SCNNDONE LABEL ,                                                                
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNDOT - SCAN A DECIMAL NUMBER                                               
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - LENGTH OF STRING                                                   
*       R1 - LOCATION OF STRING (R1 MUST POINT AT NUMERIC)                      
*       R6 - EXPRESSION STACK POINTER                                           
*                                                                               
*  ON EXIT:                                                                     
*       R0 - LENGTH OF REMAINING STRING                                         
*       R1 - LOCATION OF REMAINING STRING                                       
*       R6 - POINTS TO NEW EXPRESSION STACK ENTRY                               
*                                                                               
*  NOTE: USER MAY ONLY SPECIFY NUMBERS TO F12.8 ACCURACY.                       
*  NUMBER IS STORED AS PACKED DECIMAL OF F14.9 ACCURACCY.                       
*                                                                               
*                                                                               
SCNDOT   PROC  SCNNWA                                                           
         USING XSENTRY,R6                                                       
         IF ((R0,GE,2),AND,(@R1+1,GE,'0'),AND,(@R1+1,LE,'9')),BEGIN             
         MVC   SCNNWORK(24),=C'000000000000000000000000'                        
         SET   XSVAL                                                            
         SET   XSNUMB                                                           
         LA    R1,1(R1)            SKIP '.'                                     
         BCTR  R0,0                                                             
         COMMENT                                                                
         LR    R4,R1               R4 - START OF NUMBER                         
         LR    R3,R0               R3 - LENGTH TO SCAN                          
         SR    R2,R2               R2 - FUNCTION BYTE                           
         COMMENT                   R1 - NUMBER TO SCAN                          
         AR    R0,R1               R0 - END OF EXPRESSION                       
         L     R14,=A(TRTNUMB)     R14 - NUMBER TRT SCAN TABLE                  
         COMMENT                                                                
         IF    (R3,POS),BEGIN                                                   
         DEX   R3,' TRT 0(0,R1),0(R14)  '     SCAN DECIMAL PART                 
         IF    Z,BEGIN                                                          
         LR    R1,R0                                                            
         SR    R2,R2                                                            
         END                                                                    
         END                                                                    
         LR    R5,R1               R5 - END OF NUMBER                           
         SR    R1,R4               R1 - LENGTH OF NUMBER                        
         IF    (R1,GT,8),BEGIN                                                  
         ACALL OVERFLOW                   FRACTIONAL PART TOO BIG !!            
         B     SCNDDONE                                                         
         END                                                                    
         COMMENT                                                                
         IF    (R1,POS),BEGIN                                                   
         DEX   R1,' MVC SCNNWORK+14(0),0(R4) '                                  
         END                                                                    
         COMMENT                                                                
         XPUSH R0,R1                                                            
         LA    R0,22                                                            
         LA    R1,SCNNWORK         PACK NUMBER INTO XSVALUE                     
         LA    R2,XSVALUE                                                       
         ACALL MAKEHEX                                                          
         MVI   XSVALUE+NL-1,X'0C'  SET CORRECT SIGN                             
         COMMENT ,                 (ALSO 9 OF F14.9 IS ZERO)                    
         XPOP  R0,R1                                                            
         COMMENT                                                                
         LR    R1,R5               RETURN R1,R0 - LOC LEN OF STRING             
         SR    R0,R1                                                            
         CLEAR R15                                                              
         END                                                                    
         ELSE  BEGIN                                                            
         ACALL SCNBAD                                                           
         B     SCNDDONE                                                         
         END                                                                    
*                                                                               
SCNDDONE LABEL ,                                                                
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*                                                                               
**                                                                              
**  SCNSQ - SCANNED A SINGLE QUOTE, SCAN A STRING                               
**                                                                              
**  PUT STRING VALUE ON EXPRESSION STACK @R6,                                   
**  UPDATE SCAN LOC, LEN IN R1,R0                                               
**  RETURN ZERO CC, ROUTINE CALLED BY XXXSCAN                                   
**                                                                              
**  DETAILED ENTRY/EXIT CONVENTIONSSAME AS FOR XXXSCAN                          
**                                                                              
SCNSQ    PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT STRING ON STACK                          
         SET   XSVAL                                                            
         SET   XSSTRING                                                         
         LR    R4,R1               R4 - START OF STRING                         
         AR    R0,R1               R0 - END OF EXPRESSION                       
         COMMENT                                                                
         LA    R1,1(R1)            R1 - INPUT SCAN STRING                       
         LA    R3,XSSTRLOC         R3 - OUTPUT STACK STRING                     
         LA    R2,1(R1)                                                         
         WHILE (((@R1,EQ,C''''),AND,(@R2,EQ,C''''),AND,(R2,LT,R0)),    X        
               OR,((@R1,NE,C''''),AND,(R1,LT,R0))),BEGIN                        
         IF    (@R1,NE,C''''),BEGIN PROCESS TEXT                                
         MVC   0(1,R3),0(R1)                                                    
         LA    R1,1(R1)                                                         
         LA    R3,1(R3)                                                         
         END                                                                    
         ELSE  BEGIN ,             PROCESS QUOTE PAIRS                          
         MVC   0(1,R3),0(R1)                                                    
         LA    R1,2(R1)                                                         
         LA    R3,1(R3)                                                         
         END                                                                    
         LA    R2,1(R1)                                                         
         END                                                                    
         IF    (R1,LT,R0),BEGIN                  IF ALL OK                      
         LA    R2,XSSTRLOC                          SAVE STR LEN                
         SR    R3,R2                                UPDATE EXPRESSION           
         STH   R3,XSSTRLEN                          LOC, LEN AND                
         LA    R1,1(R1)                             SET CC                      
         SR    R0,R1                                                            
         CLEAR R15                                                              
         END                                                                    
         ELSE  BEGIN  ,,,                       IF BAD QUOTE                    
         LR    R1,R4                                                            
         ACALL BADQUOTE                                                         
         END                                                                    
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*                                                                               
**                                                                              
**  SCNDQ - SCANNED A DOUBLE QUOTE, SCAN A STRING                               
**                                                                              
**  PUT STRING VALUE ON EXPRESSION STACK @R6,                                   
**  UPDATE SCAN LOC, LEN IN R1,R0                                               
**  RETURN ZERO CC, ROUTINE CALLED BY XXXSCAN                                   
**                                                                              
**  DETAILED ENTRY/EXIT CONVENTIONSSAME AS FOR XXXSCAN                          
**                                                                              
SCNDQ    PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT STRING ON STACK                          
         SET   XSVAL                                                            
         SET   XSSTRING                                                         
         LR    R4,R1               R4 - START OF STRING                         
         AR    R0,R1               R0 - END OF EXPRESSION                       
         COMMENT                                                                
         LA    R1,1(R1)            R1 - INPUT SCAN STRING                       
         LA    R3,XSSTRLOC         R3 - OUTPUT STACK STRING                     
         LA    R2,1(R1)                                                         
         WHILE (((@R1,EQ,C'"'),AND,(@R2,EQ,C'"'),AND,(R2,LT,R0)),      X        
               OR,((@R1,NE,C'"'),AND,(R1,LT,R0))),BEGIN                         
         IF    (@R1,NE,C'"'),BEGIN PROCESS TEXT                                 
         MVC   0(1,R3),0(R1)                                                    
         LA    R1,1(R1)                                                         
         LA    R3,1(R3)                                                         
         END                                                                    
         ELSE  BEGIN ,             PROCESS QUOTE PAIRS                          
         MVC   0(1,R3),0(R1)                                                    
         LA    R1,2(R1)                                                         
         LA    R3,1(R3)                                                         
         END                                                                    
         LA    R2,1(R1)                                                         
         END                                                                    
         IF    (R1,LT,R0),BEGIN                  IF ALL OK                      
         LA    R2,XSSTRLOC                          SAVE STR LEN                
         SR    R3,R2                                UPDATE EXPRESSION           
         STH   R3,XSSTRLEN                          LOC, LEN AND                
         LA    R1,1(R1)                             SET CC                      
         SR    R0,R1                                                            
         CLEAR R15                                                              
         END                                                                    
         ELSE  BEGIN  ,,,                       IF BAD QUOTE                    
         LR    R1,R4                                                            
         ACALL BADQUOTE                                                         
         END                                                                    
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNNOT - SCANNED A 'NOT'                                                     
*                                                                               
*  PUT 'NOT' OPERATOR ON EXPRESSION STACK @R6,                                  
*  SCAN LOC LEN IN R1,R0 ALREADY SET BY CALLER                                  
*  CALLED BY XXXSCAN, ZERO CC RETURNED                                          
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNNOT   PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT OPERATOR ON STACK                        
         SET   XSOPER                                                           
         MVI   XSUOPLVL,NOTLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,EVLNOT                                                   
         MVI   XSBOPLVL,BADLVL                                                  
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,BADBOP                                                   
         MVC   XSOPCHAR(4),=CL4'NOT '                                           
         CLEAR R15                 ZERO CC                                      
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*                                                                               
**                                                                              
**  SCNPLUS - SCANNED A '+'                                                     
**                                                                              
**  PUT '+' OPERATOR ON EXPRESSION STACK @R6,                                   
**  UPDATE SCAN LOC, LEN IN R1,R0                                               
**  RETURN ZERO CC, ROUTINE CALLED BY XXXSCAN                                   
**                                                                              
**  DETAILED ENTRY/EXIT CONVENTIONSSAME AS FOR XXXSCAN                          
**                                                                              
SCNPLUS  PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT OPERATOR ON STACK                        
         SET   XSOPER                                                           
         MVI   XSUOPLVL,POSLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,EVLPOS                                                   
         MVI   XSBOPLVL,ADDLVL                                                  
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,EVLADD                                                   
         MVC   XSOPCHAR(4),=CL4'+   '                                           
         LA    R1,1(R1)            UPDATE POINTERS                              
         BCTR  R0,0                                                             
         CLEAR R15                 ZERO CC                                      
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*                                                                               
**                                                                              
**  SCNMINUS - SCANNED A '-'                                                    
**                                                                              
**  PUT '-' OPERATOR ON EXPRESSION STACK @R6,                                   
**  UPDATE SCAN LOC, LEN IN R1,R0                                               
**  RETURN ZERO CC, ROUTINE CALLED BY XXXSCAN                                   
**                                                                              
**  DETAILED ENTRY/EXIT CONVENTIONSSAME AS FOR XXXSCAN                          
**                                                                              
SCNMINUS PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT OPERATOR ON STACK                        
         SET   XSOPER                                                           
         MVI   XSUOPLVL,NEGLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,EVLNEG                                                   
         MVI   XSBOPLVL,SUBTLVL                                                 
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,EVLSUBT                                                  
         MVC   XSOPCHAR(4),=CL4'-   '                                           
         LA    R1,1(R1)            UPDATE POINTERS                              
         BCTR  R0,0                                                             
         CLEAR R15                 ZERO CC                                      
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNMULT - SCANNED A '*'                                                      
*                                                                               
*  WE HAVE TWO CASES:                                                           
*       1. MULTIPLY OPERATOR                                                    
*       2. CURRENT LINE NUMBER SYMBOL                                           
*                                                                               
*  WE DO THE FOLLOWING:                                                         
*  PUT OPERATOR OR VALUE ON STACK @R6                                           
*  UPDATE SCAN LOC, LEN IN R1,R0                                                
*  SET RETURN CC, ROUTINE CALLED BY XXXSCAN                                     
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONSSAME AS FOR XXXSCAN                           
*                                                                               
*                                                                               
SETMULT  EQU   4                   PUT MULTIPLY OPERATOR ON STACK               
SETCURR  EQU   8                   PUT CURRENT LINE NO ON STACK                 
*                                                                               
*                                                                               
SCNMULT  PROC  ,                                                                
         USING XSENTRY,R6                                                       
         XSPOP ,,                                                               
         IF    XSVAL,'LA R5,SETMULT '                                           
         ELSE  'LA R5,SETCURR '                                                 
         XSPUSH ,,                                                              
*                                                                               
         IF    (R5,EQ,SETMULT),BEGIN    PUT MULT OPERATOR ON STACK              
         CLEAR XSENTRY                                                          
         SET   XSOPER                                                           
         MVI   XSUOPLVL,BADLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,BADUOP                                                   
         MVI   XSBOPLVL,MULTLVL                                                 
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,EVLMULT                                                  
         MVC   XSOPCHAR(4),=CL4'*   '                                           
         CLEAR R15                                                              
         END                                                                    
*                                                                               
         IF    (R5,EQ,SETCURR),BEGIN    PUT CURRNET LINENO ON STACK             
         CLEAR XSENTRY                                                          
         SET   XSVAL                                                            
         SET   XSNUMB                                                           
         MVC   XSVALUE(4),CPACLNO                                               
         LR    R2,R6                                                            
         ACALL MAKELTOD                                                         
         END                                                                    
         LA    R1,1(R1)            UPDATE POINTERS                              
         BCTR  R0,0                                                             
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*                                                                               
**                                                                              
**  SCNDIV - SCANNED A '/'                                                      
**                                                                              
**  PUT '/' OPERATOR ON EXPRESSION STACK @R6,                                   
**  UPDATE SCAN LOC, LEN IN R1,R0                                               
**  RETURN ZERO CC, ROUTINE CALLED BY XXXSCAN                                   
**                                                                              
**  DETAILED ENTRY/EXIT CONVENTIONSSAME AS FOR XXXSCAN                          
**                                                                              
SCNDIV   PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT OPERATOR ON STACK                        
         SET   XSOPER                                                           
         MVI   XSUOPLVL,BADLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,BADUOP                                                   
         MVI   XSBOPLVL,DIVLVL                                                  
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,EVLDIV                                                   
         MVC   XSOPCHAR(4),=CL4'/   '                                           
         LA    R1,1(R1)            UPDATE POINTERS                              
         BCTR  R0,0                                                             
         CLEAR R15                 ZERO CC                                      
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*                                                                               
**                                                                              
**  SCNCAT - SCANNED A '|'                                                      
**                                                                              
**  PUT '||' OPERATOR ON EXPRESSION STACK @R6,                                  
**  UPDATE SCAN LOC, LEN IN R1,R0                                               
**  RETURN ZERO CC, ROUTINE CALLED BY XXXSCAN                                   
**                                                                              
**  DETAILED ENTRY/EXIT CONVENTIONSSAME AS FOR XXXSCAN                          
**                                                                              
SCNCAT   PROC  ,                                                                
         USING XSENTRY,R6                                                       
         IF    ((@R1+1,EQ,'|'),AND,(R0,GE,2)),BEGIN     IF '||'                 
         CLEAR XSENTRY             PUT OPERATOR ON STACK                        
         SET   XSOPER                                                           
         MVI   XSUOPLVL,BADLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,BADUOP                                                   
         MVI   XSBOPLVL,CATLVL                                                  
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,EVLCAT                                                   
         MVC   XSOPCHAR(4),=CL4'||  '                                           
         LA    R1,2(R1)            UPDATE POINTERS                              
         BCTR  R0,0                                                             
         BCTR  R0,0                                                             
         CLEAR R15                 ZERO CC                                      
         END                                                                    
         ELSE  BEGIN                                                            
         ACALL SCNBAD              IF NOT '||', THEN '|' IS INVALID             
         END                                                                    
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNTILDA - SCANNED A '^'                                                     
*                                                                               
*  TREAT A '^' AS 'NOT'.   THAT IS WE BUMB PAST THE '^'                         
*  AND THEN CALL THE SCAN 'NOT' ROUTINE.                                        
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNTILDA PROC  ,                                                                
         USING XSENTRY,R6                                                       
         ACALL SCNNOT                                                           
         LA    R1,1(R1)                                                         
         DECR  R0                                                               
         MVC   XSOPCHAR,=CL4'^   '                                              
         CLEAR R15                                                              
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNEQ - SCANNED A 'EQ'                                                       
*                                                                               
*  PUT 'EQ' OPERATOR ON EXPRESSION STACK @R6,                                   
*  SCAN LOC LEN IN R1,R0 ALREADY SET BY CALLER                                  
*  CALLED BY XXXSCAN, ZERO CC RETURNED                                          
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNEQ    PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT OPERATOR ON STACK                        
         SET   XSOPER                                                           
         MVI   XSUOPLVL,BADLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,BADUOP                                                   
         MVI   XSBOPLVL,EQLVL                                                   
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,EVLEQ                                                    
         MVC   XSOPCHAR(4),=CL4'EQ  '                                           
         CLEAR R15                 ZERO CC                                      
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNNE - SCANNED A 'NE'                                                       
*                                                                               
*  PUT 'NE' OPERATOR ON EXPRESSION STACK @R6,                                   
*  SCAN LOC LEN IN R1,R0 ALREADY SET BY CALLER                                  
*  CALLED BY XXXSCAN, ZERO CC RETURNED                                          
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNNE    PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT OPERATOR ON STACK                        
         SET   XSOPER                                                           
         MVI   XSUOPLVL,BADLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,BADUOP                                                   
         MVI   XSBOPLVL,NELVL                                                   
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,EVLNE                                                    
         MVC   XSOPCHAR(4),=CL4'NE  '                                           
         CLEAR R15                 ZERO CC                                      
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNLT - SCANNED A 'LT'                                                       
*                                                                               
*  PUT 'LT' OPERATOR ON EXPRESSION STACK @R6,                                   
*  SCAN LOC LEN IN R1,R0 ALREADY SET BY CALLER                                  
*  CALLED BY XXXSCAN, ZERO CC RETURNED                                          
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNLT    PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT OPERATOR ON STACK                        
         SET   XSOPER                                                           
         MVI   XSUOPLVL,BADLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,BADUOP                                                   
         MVI   XSBOPLVL,LTLVL                                                   
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,EVLLT                                                    
         MVC   XSOPCHAR(4),=CL4'LT  '                                           
         CLEAR R15                 ZERO CC                                      
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNLE - SCANNED A 'LE'                                                       
*                                                                               
*  PUT 'LE' OPERATOR ON EXPRESSION STACK @R6,                                   
*  SCAN LOC LEN IN R1,R0 ALREADY SET BY CALLER                                  
*  CALLED BY XXXSCAN, ZERO CC RETURNED                                          
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNLE    PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT OPERATOR ON STACK                        
         SET   XSOPER                                                           
         MVI   XSUOPLVL,BADLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,BADUOP                                                   
         MVI   XSBOPLVL,LELVL                                                   
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,EVLLE                                                    
         MVC   XSOPCHAR(4),=CL4'LE  '                                           
         CLEAR R15                 ZERO CC                                      
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNGT - SCANNED A 'GT'                                                       
*                                                                               
*  PUT 'GT' OPERATOR ON EXPRESSION STACK @R6,                                   
*  SCAN LOC LEN IN R1,R0 ALREADY SET BY CALLER                                  
*  CALLED BY XXXSCAN, ZERO CC RETURNED                                          
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNGT    PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT OPERATOR ON STACK                        
         SET   XSOPER                                                           
         MVI   XSUOPLVL,BADLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,BADUOP                                                   
         MVI   XSBOPLVL,GTLVL                                                   
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,EVLGT                                                    
         MVC   XSOPCHAR(4),=CL4'GT  '                                           
         CLEAR R15                 ZERO CC                                      
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNGE - SCANNED A 'GE'                                                       
*                                                                               
*  PUT 'GE' OPERATOR ON EXPRESSION STACK @R6,                                   
*  SCAN LOC LEN IN R1,R0 ALREADY SET BY CALLER                                  
*  CALLED BY XXXSCAN, ZERO CC RETURNED                                          
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNGE    PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT OPERATOR ON STACK                        
         SET   XSOPER                                                           
         MVI   XSUOPLVL,BADLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,BADUOP                                                   
         MVI   XSBOPLVL,GELVL                                                   
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,EVLGE                                                    
         MVC   XSOPCHAR(4),=CL4'GE  '                                           
         CLEAR R15                 ZERO CC                                      
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNOR - SCANNED A 'OR'                                                       
*                                                                               
*  PUT 'OR' OPERATOR ON EXPRESSION STACK @R6,                                   
*  SCAN LOC LEN IN R1,R0 ALREADY SET BY CALLER                                  
*  CALLED BY XXXSCAN, ZERO CC RETURNED                                          
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNOR    PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT OPERATOR ON STACK                        
         SET   XSOPER                                                           
         MVI   XSUOPLVL,BADLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,BADUOP                                                   
         MVI   XSBOPLVL,ORLVL                                                   
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,EVLOR                                                    
         MVC   XSOPCHAR(4),=CL4'OR  '                                           
         CLEAR R15                 ZERO CC                                      
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNAND - SCANNED A 'AND'                                                     
*                                                                               
*  PUT 'AND' OPERATOR ON EXPRESSION STACK @R6,                                  
*  SCAN LOC LEN IN R1,R0 ALREADY SET BY CALLER                                  
*  CALLED BY XXXSCAN, ZERO CC RETURNED                                          
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNAND   PROC  ,                                                                
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY             PUT OPERATOR ON STACK                        
         SET   XSOPER                                                           
         MVI   XSUOPLVL,BADLVL                                                  
         LA    R14,XSUOPRTN                                                     
         SAVERTNP @R14,BADUOP                                                   
         MVI   XSBOPLVL,ANDLVL                                                  
         LA    R14,XSBOPRTN                                                     
         SAVERTNP @R14,EVLAND                                                   
         MVC   XSOPCHAR(4),=CL4'AND '                                           
         CLEAR R15                 ZERO CC                                      
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNOP - SCANNED AN OPEN PARENTHESIS "("                                      
*                                                                               
*  "(" INDICATES THE START OF A NEW EXPRESSION.  WE EVALUATE IT                 
*  BY RECURSIVELY CALLING XXXEVAL .                                             
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R1 - ADDRESS OF "(" IN EXPRESSION                                       
*       R0 - LENGTH OF EXPRESSION REMAINING                                     
*       R6 - EXPRESION STACK                                                    
*                                                                               
*  ON EXIT:                                                                     
*       R0 - LENGTH OF REMAINING EXPRESSION (UPDATED)                           
*       R1 - ADDRESS OF REMAINING EXPRESSION (POINTS PAST ")")                  
*       R6 - VALUE OF PARENTHESIZED EXPRESSION PUT ON STACK                     
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF ERROR... ERROR MSG TSEG 'D                               
*                                                                               
*                                                                               
*                                                                               
*                                                                               
SCNOP    PROC  ,                                                                
         USING XSENTRY,R6                                                       
*$ DELETE NEXT LINE IF NEVER HAPPENS ! ,,, SHOULD NEVER HAPPEN !!!              
         IF    (R0,LE,0),' BOMB '                                               
         LA    R1,1(R1)            BUMP PAST "("                                
         BCTR  R0,0                                                             
*                                                                               
         COMMENT                   EVALUATE PARENTHESIZED EXPRESSION            
         ACALL XXXEVAL                                                          
*                                                                               
         COMMENT                   IF EXEPRESSION OK                            
         IF    Z,BEGIN                                                          
         IF    ((R0,POS),AND,(@R1,EQ,')')),BEGIN                                
         LA    R1,1(R1)                                                         
         BCTR  R0,0                EVALUATED OK, SKIP ")", CC=ZERO              
         CLEAR R15                                                              
         END                                                                    
*                                                                               
         ELSE  BEGIN               IF NO MATCHING ")"                           
         XPUSH R0,R1                                                            
         TSEG  'Expecting ")".  '                                               
         XPOP  R0,R1                                                            
         VCALL CHECKEND                                                         
         IF    Z,BEGIN                                                          
         TSEG  'Unmatched parenthesis in expression. '                          
         END                                                                    
         LA    R15,4                                                            
         END                                                                    
         END                                                                    
*                                                                               
         ELSEIF (R15,NEG),BEGIN    IF NULL EXPRESSION                           
         VCALL CHECKEND                                                         
         IF    Z,BEGIN                                                          
         TSEG  'Missing operand(s) in expression. '                             
         END                                                                    
         LA    R15,4                                                            
         END                                                                    
*                                                                               
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNCP - SCANNED A CLOSE PARENTHESIS ")"                                      
*                                                                               
*  ")" INDICATES THE END OF AN EXPRESSION                                       
*                                                                               
*  PUT 'END OF EXPRESSION' ENTRY ON STACK @R6                                   
*  LEAVE R1 POINTING TO ")"                                                     
*  RETURN ZERO CC, ROUTINE CALLED BY XXXSCAN                                    
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNCP    PROC  ,                                                                
         USING XSENTRY,R6                                                       
         SET   XSEND                                                            
         CLEAR R15                                                              
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNCOMMA - SCANNED A COMMA                                                   
*                                                                               
*  A COMMA INDICATES THE END OF AN EXPRESSION                                   
*                                                                               
*  PUT 'END OF EXPRESSION' ENTRY ON STACK @R6                                   
*  POINT R1 PAST COMMA.                                                         
*  RETURN ZERO CC, ROUTINE CALLED BY XXXSCAN                                    
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNCOMMA PROC  ,                                                                
         USING XSENTRY,R6                                                       
         SET   XSEND                                                            
         CLEAR R15                                                              
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNCP - SCANNED A SIMI-COLON                                                 
*                                                                               
*  A ";" INDICATES THE END OF AN EXPRESSION                                     
*                                                                               
*  PUT 'END OF EXPRESSION' ENTRY ON STACK @R6                                   
*  LEAVE R1 POINTING TO ";"                                                     
*  RETURN ZERO CC, ROUTINE CALLED BY XXXSCAN                                    
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS FOR XXXSCAN                          
*                                                                               
*                                                                               
SCNSIMI  PROC  ,                                                                
         USING XSENTRY,R6                                                       
         SET   XSEND                                                            
         CLEAR R15                                                              
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
         QLTORG                                                                 
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCANOPER - SCAN FOR AN OPERATOR                                              
*                                                                               
*  THIS ROUTINE IS ALMOST IDENTICAL TO XXXSCAN.  IT IS CALLED                   
*  WHENEVER WE HAVE JUST SCANNED A TERM (IE. VALUE).  IF NO                     
*  OPERATOR IS FOUND THEN WE RETURN, AN END OF EXPRESSION AND                   
*  RETURN R1,R0 AS THEY WERE ON ENTRY.                                          
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - EXPRESSION STRING LENGTH                                           
*       R1 - EXPRESSION STRING LOCATION                                         
*       R6 - EXPRESSION STACK POINTER                                           
*                                                                               
*  ON EXIT:                                                                     
*       R0 - REMAINING STRING LENGTH                                            
*       R1 - REMAINING STRING ADDRESS                                           
*       R6 - EXPRESSION STACK ENTRY POINTER (NOT CHANGED)                       
*            EXPRESSION ENTRY MAY BE ONE OF THE FOLLOWING:                      
*               A) OPERATOR                                                     
*               B) END OF EXPRESSION                                            
*      R15 - CC=ZERO, IF OPER FOUND, OR NOT FOUND                               
*            CC=NZ, IF INVALID OPERATOR FOUND,, ERR MSG IS T'SEGD               
*                                                                               
*                                                                               
SCANOPER PROC  ,          SCAN EXPRESSION                                       
         USING XSENTRY,R6                                                       
         CLEAR XSENTRY                                                          
         LR    R3,R0               R3 - SCAN STRING LEN                         
         AR    R0,R1               R0 - END OF SCAN STR                         
         SR    R2,R2                                                            
         IF    (R3,POS),BEGIN                                                   
         DEX   R3,' TRT 0(0,R1),SCNOPTBL'    SCAN LINE                          
         IF    Z,BEGIN                                                          
         LR    R1,R0                                                            
         SR    R2,R2                                                            
         END                                                                    
         END                                                                    
         SR    R0,R1               R1,R0 - REMAINING STR LOC,LEN                
*  BALR REMOVED BY CH 02/91                                                     
*        L     R14,SCNOPRTN(R2)    GET APPROPRIATE SCAN ROUTINE                 
*        BALR  R14,R14             "ACALL" SCAN ROUTINE                         
         IF     (R2,EQ,00),'ACALL SCNBLANK'                                     
         ELSEIF (R2,EQ,04),'ACALL SCNNOOP'                                      
         ELSEIF (R2,EQ,08),'ACALL SCNOWORD'                                     
         ELSEIF (R2,EQ,12),'ACALL SCNPLUS'                                      
         ELSEIF (R2,EQ,16),'ACALL SCNMINUS'                                     
         ELSEIF (R2,EQ,20),'ACALL SCNMULT'                                      
         ELSEIF (R2,EQ,24),'ACALL SCNDIV'                                       
         ELSEIF (R2,EQ,28),'ACALL SCNCAT'                                       
         ELSEIF (R2,EQ,32),'ACALL SCNTILDA'                                     
         ELSEIF (R2,EQ,36),'ACALL SCNCOMMA'                                     
         ELSEIF (R2,EQ,40),'ACALL SCNSIMI'                                      
*-                                                                              
*-       ALL SCAN ROUTINES ARE CALLED WITH THE SAME ENTRY/EXIT                  
*-       AS XXXSCAN ROUTINES ABOVE.                                             
*-                                                                              
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*                                                                               
* OPERATOR SCAN TRT TABLE                                                       
*                                                                               
SCNOPTBL DS    0F                  SCAN TRT TABLE                               
         DC    256X'00'                                                         
SCNOPRTN DS    0F                                                               
         ORG   SCNOPTBL            04 - DEFAULT IS ILLEGAL CHAR                 
         DC    256X'04'                                                         
         ORG   SCNOPTBL+C' '       00 - C' ' IS ONLY NON SPECIAL CHAR           
         DC    X'00'                                                            
         ORG   SCNOPTBL+C'a'       08 - IS FOR ALL ALPHAS                       
         DC    9X'08'                                                           
         ORG   SCNOPTBL+C'j'                                                    
         DC    9X'08'                                                           
         ORG   SCNOPTBL+C's'                                                    
         DC    8X'08'                                                           
         ORG   SCNOPTBL+C'A'                                                    
         DC    9X'08'                                                           
         ORG   SCNOPTBL+C'J'                                                    
         DC    9X'08'                                                           
         ORG   SCNOPTBL+C'S'                                                    
         DC    8X'08'                                                           
         ORG   SCNOPTBL+256                                                     
*-                                                                              
*-       A SIMPLE SCAN CHAR/TABLE/ROUTINES MACRO                                
*-                                                                              
         MACRO                                                                  
         SCNOP &CHAR,&RTNOFF,&ROUTINE                                           
         ORG   SCNOPTBL+&CHAR                                                   
         DC    AL1(&RTNOFF)                                                     
         ORG   SCNOPRTN+&RTNOFF                                                 
         DC    A(&ROUTINE)                                                      
         MEND                                                                   
*-                                                                              
*-       SCAN ROUTINES                                                          
*-                                                                              
         SCNOP  C' ',00,SCNBLANK    0 - BLANK                                   
         SCNOP  C'?',04,SCNNOOP     4 - ILLEGALS, NO OPERATOR FOUND             
         SCNOP  C'A',08,SCNOWORD    8 - ALPHAS                                  
         SCNOP  C'+',12,SCNPLUS     +   OPERATORS                               
         SCNOP  C'-',16,SCNMINUS    -                                           
         SCNOP  C'*',20,SCNMULT     *   (THIS IS ALSO CURRENT LINE)             
         SCNOP  C'/',24,SCNDIV      /                                           
         SCNOP  C'|',28,SCNCAT      |                                           
         SCNOP  C'^',32,SCNTILDA    ^   (USED AS NOT)                           
         SCNOP  C',',36,SCNCOMMA    ,   TERMINATORS                             
         SCNOP  C';',40,SCNSIMI     ;                                           
         ORG   SCNOPRTN+40+4                                                    
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNNOOP - NO OPERATOR SCANNED                                                
*                                                                               
*  ANY THING THAT IS NOT AN OPERATOR, IS RETURNED AS END OF EXPR                
*                                                                               
*  PUT 'END OF EXPRESSION' ENTRY ON STACK                                       
*  LEAVE R1 POINTING TO NON-OPERATOR                                            
*  RETURN ZERO CC,  ROUTINE CALLED BY SCANOPER                                  
*                                                                               
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS SCANOPER                             
*                                                                               
*                                                                               
SCNNOOP  PROC  ,                                                                
         USING XSENTRY,R6                                                       
         SET   XSEND                                                            
         CLEAR R15                                                              
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNOWORD - SCAN WORD,  BUT ONLY ACCEPT OPERATORS                             
*             (EG. NE,OR,AND, ...)                                              
*                                                                               
*  IF AN OPERATOR IS SCANNED, WE CALL THE APPROPRIATE ROUTINE                   
*  TO PUT THE OPERATOR ON THE STACK,,, AND UPDATE THE EXPR                      
*  LOC, LEN POINTERS (R1,R0).                                                   
*                                                                               
*  IF NO OPERATOR IS SCANNED,  WE PUT AN END ON THE STACK AND                   
*  RETURN THE EXPR LOC,LEN POINTERS (R1,R0) UNCHANGED.                          
*                                                                               
*  RETURN ZERO CC,  ROUTINE CALLED BY SCANOPER.                                 
*  DETAILED ENTRY/EXIT CONVENTIONS SAME AS SCANOPER                             
*                                                                               
*                                                                               
SCNWWA   RECORD BEGIN                                                           
SCNWLEN  DS    F                   LENGTH                                       
SCNWLOC  DS    F                   LOCATION                                     
         END                                                                    
*                                                                               
*                                                                               
SCNOWORD PROC  SCNWWA                                                           
         USING XSENTRY,R6                                                       
         ST    R0,SCNWLEN          SAVE LOC, LEN AT ENTRY                       
         ST    R1,SCNWLOC                                                       
         LR    R2,R6                                                            
         ACALL SCNVNAME            SCAN NAME                                    
         IF    NZ,BEGIN                                                         
         CLEAR XSENTRY             IF BAD NAME, RETURN END OF EXPR              
         SET   XSEND                                                            
         L     R0,SCNWLEN                                                       
         L     R1,SCNWLOC                                                       
         END                                                                    
         ELSE  BEGIN ,             IF GOOD NAME                                 
         COMMENT                                                                
         ACALL SCNWOPER            CHECK IF OPER, PROCESS IF SO                 
         IF    NZ,BEGIN                                                         
         CLEAR XSENTRY             IF NOT OPER, RETURN END OF EXPR              
         SET   XSEND                                                            
         L     R0,SCNWLEN                                                       
         L     R1,SCNWLOC                                                       
         END                                                                    
         END                                                                    
         CLEAR R15                                                              
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNWOPER- CHECK FOR 'OPERATOR' WORDS                                         
*                                                                               
*  CHECK FOR OPERATORS LIKE  EQ,, LT,, GT,,   IF FOUND,                         
*  PROCESS THE OPERATOR.  THAT IS, PUT IT ON THE STACK.                         
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VNENTRY, NAME AND PREFIX FIELDS SET                                
*                                                                               
*  ON EXIT:                                                                     
*       RESERVE WORD STACK ENTRY SET, OH YEAH !                                 
*       R15 - CC=ZERO, IF RESERVED WORD FOUND                                   
*             CC=NZ, NOT A RESERVED WORD                                        
*                                                                               
*                                                                               
*                                                                               
SCNWOPER PROC  ,                                                                
         USING VNENTRY,R2                                                       
         IF    (VNPREFIX,NE,0),BEGIN                                            
         LA    R15,4                                                            
         B     SCNWDONE                                                         
         END                                                                    
         CLC   VNNAME(4),=CL4'NOT '                                             
         IF    E,BEGIN                                                          
         ACALL SCNNOT                                                           
         B     SCNWDONE                                                         
         END                                                                    
         CLC   VNNAME(4),=CL4'EQ  '                                             
         IF    E,BEGIN                                                          
         ACALL SCNEQ                                                            
         B     SCNWDONE                                                         
         END                                                                    
         CLC   VNNAME(4),=CL4'NE  '                                             
         IF    E,BEGIN                                                          
         ACALL SCNNE                                                            
         B     SCNWDONE                                                         
         END                                                                    
         CLC   VNNAME(4),=CL4'OR  '                                             
         IF    E,BEGIN                                                          
         ACALL SCNOR                                                            
         B     SCNWDONE                                                         
         END                                                                    
         CLC   VNNAME(4),=CL4'AND '                                             
         IF    E,BEGIN                                                          
         ACALL SCNAND                                                           
         B     SCNWDONE                                                         
         END                                                                    
         CLC   VNNAME(4),=CL4'LT  '                                             
         IF    E,BEGIN                                                          
         ACALL SCNLT                                                            
         B     SCNWDONE                                                         
         END                                                                    
         CLC   VNNAME(4),=CL4'LE  '                                             
         IF    E,BEGIN                                                          
         ACALL SCNLE                                                            
         B     SCNWDONE                                                         
         END                                                                    
         CLC   VNNAME(4),=CL4'GT  '                                             
         IF    E,BEGIN                                                          
         ACALL SCNGT                                                            
         B     SCNWDONE                                                         
         END                                                                    
         CLC   VNNAME(4),=CL4'GE  '                                             
         IF    E,BEGIN                                                          
         ACALL SCNGE                                                            
         B     SCNWDONE                                                         
         END                                                                    
         LA    R15,4               IF NONE OF THE ABOVE, CC=NZ                  
*                                                                               
SCNWDONE LABEL ,                                                                
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SCNEXCPN - PROCESS EXCEPTION, IF ANY                                         
*                                                                               
*  PROCESS HEX STRINGS.   (EG. S'5C40'  N'C2A' OR W'3E8')                       
*  SEE WYLBUR EXEC MANUAL FOR DETAILS.                                          
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - LENGTH OF REMAINING STRING                                         
*       R1 - LOCATION OF REMAINING STRING (AT ' OR " PAST S,N,W)                
*       R2 - STACK ENTRY CONTAINING NAME ONLY                                   
*                                                                               
*  ON EXIT:                                                                     
*    IF EXCEPTION FOUND,                                                        
*       R0 - REMAINING STRING LENGTH                                            
*       R1 - REMAINING STRING LOCATION                                          
*       R2 - STACK ENTRY FOR VALUE                                              
*      R15 - CC=ZERO,  IF S'..', N'..', OR W'..' FOUND                          
*            CC=POS, IF INVALID HEX STRING,, ERROR MSG TSEG'D                   
*    IF EXCEPTION NOT FOUND                                                     
*       R0,R1,@R2 - UNCHANGED                                                   
*       R15 - CC=NEG,  IF NOT S'..' N'..' OR W'..'                              
*                                                                               
*                                                                               
EXCPWA   RECORD BEGIN                                                           
EXCPLOC  DS    F                   STRING LOC AT ENTRY                          
EXCPLEN  DS    F                   STRING LEN AT ENTRY                          
EXCPHEXL DS    F                   TOTAL HEX STRING LEN (INCL. "s)              
EXCPTEMP DS    CL(&LINESZ)                                                      
         END                                                                    
*                                                                               
*                                                                               
SCNEXCPN PROC  EXCPWA                                                           
         USING VNENTRY,R6                                                       
         LR    R6,R2                                                            
         L     R15,=F'-4'          ASSUME NOT FOUND                             
         IF    (R0,POS),BEGIN                                                   
         IF    ((@R1,EQ,''''),OR,(@R1,EQ,'"')),BEGIN                            
         IF    ((VNNAME,EQ,'S '),OR,(VNNAME,EQ,'N '),OR,               *        
               (VNNAME,EQ,'W ')),BEGIN                                          
         COMMENT                   WE HAVE FOUND S'..' ,,, ETC.                 
         ST    R1,EXCPLOC                                                       
         ST    R0,EXCPLEN                                                       
         LR    R4,R1               R4 - START OF STRING                         
         LR    R5,R0               R5 - END OF STRING                           
         AR    R5,R4                                                            
         LA    R4,1(R4)                                                         
         IF    (@R1,EQ,''''),BEGIN                                              
         WHILE ((@R4,NE,''''),AND,(R4,LT,R5)),BEGIN  FIND END QUOTE             
         LA    R4,1(R4)                                                         
         END                                                                    
         END                                                                    
         IF    (@R1,EQ,'"'),BEGIN                                               
         WHILE ((@R4,NE,'"'),AND,(R4,LT,R5)),BEGIN  FIND END QUOTE              
         LA    R4,1(R4)                                                         
         END                                                                    
         END                                                                    
         IF    (R4,EQ,R5),BADEXCPN R4 - END OF HEX (AT ")                       
         LA    R3,1(R1)            R3 - START OF HEX (JUST PAST")               
         SR    R4,R3               R4 - LENGTH OF HEX                           
         IF    (R4,NP),BADEXCPN                                                 
         LA    R3,2(R4)                                                         
         ST    R3,EXCPHEXL                                                      
         LR    R0,R4               R0 - HEX STRING LEN (W/O "s)                 
         LA    R1,1(R1)            R1 - HEX STRING START                        
         LA    R2,EXCPTEMP         R2 - WORK AREA                               
         ACALL MAKEHEX             CONVERT HEX STRING TO HEX                    
         IF    NZ,BADEXCPN                                                      
         COMMENT                   R2,R0 - HEX LOC, LEN                         
         COMMENT                                                                
         IF    (VNNAME,EQ,'S '),BEGIN     IF S'....',                           
         CLEAR VNENTRY                                                          
         SET   VNSTRING                                                         
         STH   R0,VNSTRLEN                                                      
         LR    R3,R0                                                            
         MOVE  R3,VNSTRLOC,EXCPTEMP                                             
         END                                                                    
         ELSEIF (VNNAME,EQ,'N '),BEGIN   IF N'....',                            
         IF    (R0,GT,4),BADEXCPN                                               
         CLEAR VNENTRY                                                          
         SET   VNNUMB                                                           
         L     R1,EXCPTEMP                                                      
         LR    R3,R0                                                            
         WHILE (R3,LT,4),BEGIN               SHIFT INTO 4 BYTE HEX              
         SRL   R1,8                                                             
         LA    R3,1(R3)                                                         
         END                                                                    
         ST    R1,VNVALUE                                                       
         LR    R2,R6                                                            
         ACALL MAKEITOD                      CONVERT TO NUMBER                  
         BNZ   BADEXCPN                                                         
         END                                                                    
         ELSEIF (VNNAME,EQ,'W '),BEGIN   IF W'....',                            
         IF    (R0,GT,4),BADEXCPN                                               
         CLEAR VNENTRY                                                          
         SET   VNNUMB                                                           
         L     R1,EXCPTEMP                                                      
         LR    R3,R0                                                            
         WHILE (R3,LT,4),BEGIN               SHIFT INTO 4 BYTE HEX              
         SRL   R1,8                                                             
         LA    R3,1(R3)                                                         
         END                                                                    
         ST    R1,VNVALUE                                                       
         LR    R2,R6                                                            
         ACALL MAKELTOD                      CONVERT TO NUMBER                  
         BNZ   BADEXCPN                                                         
         END                                                                    
         L     R1,EXCPLOC          UPDATE R1,R0 - LOC LENGTH                    
         L     R0,EXCPLEN                                                       
         L     R2,EXCPHEXL                                                      
         AR    R1,R2                                                            
         SR    R0,R2                                                            
         CLEAR R15                 ZERO CC (WE FOUND S',N',OR W')               
         END                                                                    
         END                                                                    
         END                                                                    
*                                                                               
         B     EXCPDONE                                                         
*                                                                               
BADEXCPN LABEL ,                   INVALID HEX CONSTANT                         
         SCPUSH ,                                                               
         SCINIT L:EXCPLOC,L:EXCPLEN        scan invalid hex string              
         SCAN ,                                                                 
         SCPOP ,                                                                
         TSEG (R1),(R0)                                                         
         TSEG ': invalid hex constant. '                                        
         L     R1,EXCPLOC                                                       
         L     R0,EXCPLEN                                                       
         LA    R15,4                                                            
         B     EXCPDONE                                                         
*                                                                               
EXCPDONE LABEL ,                                                                
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
         QLTORG                                                                 
         TITLE 'SYSTEM FUNCTION EVAUATION ROUTINES'                             
*box                                                                            
*                                                                               
*                                                                               
*  GETSYSFN - GET SYSTEM FUNCTION                                               
*                                                                               
*  ON ENTRY:                                                                    
*      @R1 - VARIABLE PARM AREA.  SEE VNENTRY DSECT                             
*      @R2 - FUNCTION NAME                                                      
*                                                                               
*  ON EXIT:                                                                     
*      @R1 - VARIABLE PARM AREA RETURNED (CONTAINS FUNCTION INFO)               
*      R15 - CC=ZERO, RECORD FOUND                                              
*            CC=NZ, RECORD DOES NOT EXIST                                       
*                                                                               
*                                                                               
GETSYSFN PROC  ,                                                                
         USING VNENTRY,R6                                                       
         LR    R6,R1                                                            
         MVC   VNNAME,0(R2)                                                     
*                                                                               
         COMMENT                   SEARCH FOR SYSTEM FUNCTION RTN               
         LA    R0,VNSYSRTN                                                      
         LR    R1,R2                                                            
         VCALL GTFNRTN                                                          
*                                                                               
         COMMENT                   IF SYSTEM FUNCTION, GET IT                   
         IF    Z,BEGIN                                                          
         CLEAR VNDESC                                                           
         MVC   VNNAME,@R1                                                       
         END                                                                    
*                                                                               
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  XVLSYSFN - EVALUATE SYSTEM FUNCTION                                          
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - LENGTH OF REMAINING EXPRESSION                                     
*       R1 - LOC OF EXPRESSION (IE. ARG LIST) @R1 IS '('                        
*       R6 - EXPRESSION STACK, POINTS TO ENTRY FOR SYSTEM FUNCTION              
*                                                                               
*  ON EXIT:                                                                     
*       R0 - LENGTH OF REMAINING STRING                                         
*       R1 - REMAINING EXPRESSION, (JUST PAST ")")                              
*       R6 - EXPRESSION STACK, POINTS TO VALUE OF FUNCTION                      
*                                                                               
*                                                                               
XVLSYSFN PROC  ,                                                                
         USING VNENTRY,R6                                                       
         LR    R2,R6               R2 - MARK EXPR STACK, FUNCTN ENTRY           
         XSPUSH ,,                 PUSH EXPRESSION STACK                        
         IF    Z,BEGIN                                                          
         ACALL SCNTYPE             SCAN PAST ANY BLANKS PRECEDING '('           
         ACALL XVLARGS             EVALUATE ARGUMENTS                           
         IF    NM,BEGIN            IF ARGS OK, CALL FUNCTION                    
         XPUSH R0,R1                                                            
         LR    R0,R15              R0 - ARG COUNT                               
         LR    R1,R6               R1 - ARGUMENT LIST                           
         LR    R6,R2               R6 - FUNCTION ENTRY/RETURN AREA              
         LA    R14,VNSYSRTN                                                     
         CALLRTNP @R14             "ACALL" FUNCTION                             
         XPOP  R0,R1                                                            
         END                                                                    
         END                                                                    
         IF    (R15,NZ),' LA R15,4 '                                            
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                        G         
*box                                                                  G         
*   XVLGNRC - evaluate a generic array reference (TEST[])             G         
*                                                                     G         
*   ON ENTRY:                                                         G         
*        R0 - LENGTH OF STRING REMAINING                              G         
*        R1 - START OF AN ARGUMENT                                    G         
*        R6 - VNENTRY AREA                                            G         
*                                                                     G         
*   ON EXIT:                                                          G         
*        R0 - LENGTH OF REMAINDER OF STRING                           G         
*        R1 - JUST PAST ']' (OR NOT MOVED AT ALL)                     G         
*       @R6 - VNENTRY FILLED IN                                       G         
*       R15 - 0 FOUND A GENERIC ARRAY, ELSE DIDN'T                    G         
*                                                                     G         
*                                                                     G         
XVLGNRC  PROC  ,                                                                
         LR      R3,R0             Save R0&R1 in case we backtrack    G         
         LR      R4,R1                                                G         
         LR      R2,R6                                                G         
         ACALL   SCNVNAME                                             G         
         IF      NZ,XGBACK         Didn't find a variable name, scram G         
         LR      R5,R1             Save away R1                       G         
         LR      R1,R2             R1 & R2 point at VNENTRY           G         
         VCALL   GETVAR                                               G         
         IF      NZ,XGBACK         Didn't find a variable by that nameG         
         LR      R1,R5             Bring back R1                      G         
*                                                                     G         
         WHILE   ((R0,POS),AND,(@R1,EQ,' ')),'DECR R0;INCR R1'  blanks?         
         IF      ((R0,NP),OR,(@R1,NE,'[')),XGBACK  no '[', scram      G         
         DECR    R0                                                   G         
         INCR    R1                Bump past the '['                  G         
         WHILE   ((R0,POS),AND,(@R1,EQ,' ')),'DECR R0;INCR R1'  blks? G         
         IF      ((R0,NP),OR,(@R1,NE,']')),XGBACK  no ']', scram      G         
         DECR    R0                                                   G         
         INCR    R1                                                   G         
         WHILE   ((R0,POS),AND,(@R1,EQ,' ')),'DECR R0;INCR R1'  blks? G         
*                                                                     G         
         XR      R15,R15           all is cool                        G         
         B       XGXIT                                                G         
*                                                                     G         
XGBACK   L       R15,=F'-4'        all is not cool                    G         
         LR      R0,R3             backtrack to where we started      G         
         LR      R1,R4                                                G         
         PRETURN (R0,R1)                                                        
XGXIT    PEND  ,                                              G                 
         EJECT                                                        G         
*                                                                               
**                                                                              
**  XVLARGS - EVALUATE FUNCTION/PROCEDURE ARGUMENTS                             
**                                                                              
**                                                                              
**  ON ENTRY:                                                                   
**       R0 - LENGTH OF REMAINING EXPRESSION                                    
**       R1 - START OF ARG LIST, (STARTS WITH "(")                              
**       R2 - VARIABLE ENTRY CONTAINING FUNCTION NAME                           
**       R6 - EXPRESSION STACK, ARG STACK                                       
**                                                                              
**  ON EXIT:                                                                    
**       R0 - LENGTH OF REMAINING EXPRESSION                                    
**       R1 - REMAINING EXPRESSION, (JUST PAST ")")                             
**      R15 - IF OK, NUMBER OF ARGS (0-ARGLIMIT)                                
**            IF ERROR CC=NEG, R1,R0 - LOC LEN OF ERR MSG                       
**                                                                              
**                                                                              
**                                                                              
ARGLIMIT EQU   8                   LIMIT OF 8 ARGUMENTS                         
*                                                                               
*                                                                               
XVLARGS  PROC  ,                                                                
         USING XSENTRY,R6                                                       
*                                                                               
         COMMENT                   CHECK, SKIP '('                              
         IF    ((@R1,NE,'('),OR,(R0,NP)),BEGIN                                  
         ACALL NOARGS                                                           
         B     ARGSDONE                                                         
         END                                                                    
         LA    R1,1(R1)                                                         
         BCTR  R0,0                                                             
*                                                                               
         COMMENT                   CHECK FOR (),   EMPTY ARGS                   
         WHILE ((@R1,EQ,' '),AND,(R0,POS)),BEGIN                                
         LA    R1,1(R1)                                                         
         DECR  R0                                                               
         END                                                                    
         IF    ((@R1,EQ,')'),AND,(R0,POS)),BEGIN                                
         LA    R1,1(R1)                                                         
         DECR  R0                                                               
         CLEAR R15                                                              
         B     ARGSDONE                                                         
         END                                                                    
*                                                                               
         SR    R3,R3                                                            
         LOOP  BEGIN,,             LOOP EVALUATING ARGUMENTS                    
         COMMENT                                                                
         ACALL   XVLGNRC           check for an array generic         G         
         IF      NZ,'ACALL XXXEVAL'  then it must be an expression    G         
         COMMENT                                                                
         LA    R3,1(R3)                                                         
         IF    (R3,GT,ARGLIMIT),BEGIN    ERROR: TOO MANY ARGS                   
         ACALL MANYARGS                                                         
         B     ARGSDONE                                                         
         END                                                                    
         IF    (R15,POS),BEGIN           ERROR: BAD ARG EXPRESSION              
         ACALL ARGERROR                                                         
         B     ARGSDONE                                                         
         END                                                                    
         IF    (R15,NEG),BEGIN           ERROR: NULL ARGUMENT                   
         ACALL ARGERROR                                                         
         B     ARGSDONE                                                         
         END                                                                    
         IF    (R0,NP),BEGIN                                                    
         ACALL ARGERROR                 ERROR: PREMATURE END OF ARGS            
         B     ARGSDONE                                                         
         END                                                                    
         IF    (@R1,EQ,';'),BEGIN                                               
         ACALL ARGERROR                 ERROR: PREMATURE END OF ARGS            
         B     ARGSDONE                                                         
         END                                                                    
         IF    (@R1,EQ,')'),BEGIN       END OF LIST: WE ARE DONE                
         LR    R15,R3                                                           
         LA    R1,1(R1)                                                         
         BCTR  R0,0                                                             
         B     ARGSDONE                                                         
         END                                                                    
         COMMENT                         ARG SEPARATOR REQUIRED                 
         COMMENT                            UNLESS OLD EXEC                     
         IF    (^CPFXOLD,AND,(@R1,NE,',')),BEGIN                                
         VCALL CHECKEND                                                         
         TSEG  'Function arguments must be separated by commas. '               
         ACALL ARGERROR                                                         
         B     ARGSDONE                                                         
         END                                                                    
         IF    (@R1,EQ,','),BEGIN                                               
         LA    R1,1(R1)                 IF ARG SEPARATOR, SKIP                  
         DECR  R0                                                               
         END                                                                    
         XSPUSH ,,                 PUT NEXT ARG ON STACK                        
         IF    NZ,BEGIN            IF STACK FULL, RETURN NEG CC                 
         L     R15,=F'-4'                                                       
         B     ARGSDONE                                                         
         END                                                                    
         END   ,,                  LOOP EVALUATING ARGUMENTS                    
*                                                                               
ARGSDONE LABEL ,                                                                
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  XVLSUBS - GET SUBSCRIPTS, IF ANY                                             
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - LENGTH OF STRING                                                   
*       R1 - LOCATION OF STRING (POINTS TO BLANK OR '[')                        
*      @R2 - VARIABLE NAME DESCRIPTOR,  SEE VNENTRY DSECT.                      
*                                                                               
*  ON EXIT:                                                                     
*       R0 - LENGTH OF REMAINING STRING                                         
*       R1 - LOCATION OF REMANING STRING                                        
*      @R2 - VARIABLE NAME DESCRIPTOR W/SUBSCRIPT FIELDS SET                    
*      R15 - CC=ZERO, IF ALL OK                                                 
*            CC=NZ, IF INVALID SUBSCRIPT, ERR MSG IS TSEG'D                     
*                                                                               
*  NOTE: 3 SUBSCRIPTS ARE SET.  NO OTHER FIELDS IN THE VARIABLE                 
*        AREA (SEE VNENTRY DSECT) ARE MODIFIED.   IF A SUBSCRIPT                
*        IS NOT SPECIFIED, IT IS SET TO ZERO.                                   
*                                                                               
*                                                                               
XBWA     RECORD BEGIN                                                           
XBSUB1   DS    H                   ARRAY SUBSCRIPTS                             
XBSUB2   DS    H                                                                
XBSUB3   DS    H                                                                
         END                                                                    
SUBLIMIT EQU   3                   1 DIMESION FOR STARTERS                      
         DS    0S(3-CPSLIMIT)      3 DIMENSIONS MAX !!                          
*                                                                               
*                                                                               
XVLSUBS  PROC  XBWA                                                             
         USING VNENTRY,R6                                                       
         LR    R6,R2                                                            
         CLEAR XBSUB1                                                           
         CLEAR XBSUB2                                                           
         CLEAR XBSUB3                                                           
*                                                                               
         COMMENT                   SKIP BLANKS, SKIP LEADING '['                
         WHILE ((@R1,EQ,' '),AND,(R0,POS)),BEGIN                                
         LA    R1,1(R1)                                                         
         DECR  R0                                                               
         END                                                                    
         IF    ((@R1,NE,'['),OR,(R0,NP)),BEGIN                                  
         CLEAR R15                                                              
         B     SUBSDONE                                                         
         END                                                                    
         LA    R1,1(R1)            SKIP '['                                     
         DECR  R0                                                               
*                                                                               
         COMMENT                   CHECK FOR NULL SUBS (IE. [])                 
         WHILE ((@R1,EQ,' '),AND,(R0,POS)),BEGIN                                
         LA    R1,1(R1)                                                         
         DECR  R0                                                               
         END                                                                    
         IF    ((@R1,EQ,']'),AND,(R0,POS)),BEGIN                                
         VCALL SEGVNAME                                                         
         TSEG  ': missing subscripts. '                                         
         LA    R15,4                                                            
         B     SUBSDONE                                                         
         END                                                                    
*-                                                                              
*-       LOOP EVALUATING SUBSCRIPTS !                                           
*-                                                                              
         COMMENT                   LOOP EVALUATING SUBSCRIPTS                   
         CLEAR R3                                                               
         LA    R4,XBSUB1           R3,R4 - SUBSCRIPT #, INDEX                   
         WHILE (@R1,NE,']'),BEGIN  LOOP UNTIL END OF SUBSCRIPTS                 
         LA    R3,1(R3)                                                         
*                                                                               
         COMMENT                   SPECIAL PROCESSING FOR ']'                   
         WHILE ((@R1,EQ,' '),AND,(R0,POS)),BEGIN                                
         LA    R1,1(R1)                                                         
         DECR  R0                                                               
         END                                                                    
         IF    ((@R1,EQ,']'),AND,(R0,POS)),BEGIN                                
         L     R15,=F'-1'          IF ']', TREAT LIKE NULL EXPR                 
         END                                                                    
*                                                                               
*                                                                               
         IF    ((@R1,NE,']'),OR,(R0,NP)),BEGIN     SPECIAL ']' CHECK            
         COMMENT                                                                
         COMMENT                   EVALUATE INTEGER EXPRESSION                  
         COMMENT                   EVALUATE INTEGER EXPRESSION                  
         COMMENT                                                                
         ACALL XVLINT              *******  !!!!                                
         END                                                                    
*                                                                               
*                                                                               
         COMMENT                   IF GOOD EXPRESSION,,                         
         IF    (R15,Z),BEGIN                                                    
         STH   R2,0(R4)            SAVE SUBSCRIPT                               
         LA    R4,L'XBSUB1(R4)                                                  
         IF    (R2,NP),BEGIN                                                    
         LA    R2,VNENTRY                                                       
         ACALL SMALLSUB                                                         
         B     SUBSDONE                                                         
         END                                                                    
         IF    (R2,GT,32000),BEGIN                                              
         LA    R2,VNENTRY                                                       
         ACALL BIGSUB                                                           
         B     SUBSDONE                                                         
         END                                                                    
         END                                                                    
*                                                                               
         COMMENT                   IF NULL EXPRESSION                           
         ELSEIF (R15,NEG),BEGIN                                                 
         LA    R2,VNENTRY                                                       
         ACALL BADSUB                                                           
         B     SUBSDONE                                                         
         END                                                                    
*                                                                               
         COMMENT                   IF ERROR IN EXPRESSION                       
         ELSEIF (R15,POS),BEGIN                                                 
         LA    R2,VNENTRY                                                       
         ACALL BADSUB                                                           
         B     SUBSDONE                                                         
         END                                                                    
*                                                                               
         COMMENT                   GET SET TO EVALUATE                          
         COMMENT                   NEXT SUBSCRIPT,  R1,R0=LOC,LEN               
         COMMENT                                                                
         IF    (R0,NP),BEGIN           IF NO NEXT,,                             
         LA    R2,VNENTRY                                                       
         TSEG  'Expecting "]". '                                                
         ACALL BADSUB                                                           
         B     SUBSDONE                                                         
         END                                                                    
         IF    (@R1,EQ,';'),BEGIN      IF ';' INVALID                           
         LA    R2,VNENTRY                                                       
         ACALL BADSUB                                                           
         B     SUBSDONE                                                         
         END                                                                    
         IF    (@R1,EQ,')'),BEGIN      IF ')' INVALID                           
         LA    R2,VNENTRY                                                       
         TSEG  ')   -- invalid. '                                               
         ACALL BADSUB                                                           
         B     SUBSDONE                                                         
         END                                                                    
         IF    ((@R1,NE,','),AND,(@R1,NE,']')),BEGIN                            
         VCALL CHECKEND                                                         
         TSEG  'Subscripts must be separated by commas.  '                      
         LA    R2,VNENTRY                                                       
         ACALL BADSUB                                                           
         B     SUBSDONE                                                         
         END                                                                    
         IF    (@R1,EQ,','),BEGIN      IF ',' SKIP                              
         LA    R1,1(R1)                                                         
         DECR  R0                                                               
         IF    ((@R1,EQ,']'),AND,(R0,POS)),BEGIN  IF '... ,]' ERROR             
         LA    R3,1(R3)                                                         
         LA    R2,VNENTRY                                                       
         ACALL BADSUB                                                           
         B     SUBSDONE                                                         
         END                                                                    
         END                                                                    
         IF    ((R3,GE,SUBLIMIT),AND,(@R1,NE,']')),BEGIN                        
         LA    R2,VNENTRY                                                       
         VCALL SEGVNAME                                                         
         TSEG  ': too many subscripts specified for array. '                    
         LA    R15,4                                                            
         B     SUBSDONE                                                         
         END                                                                    
*                                                                               
         COMMENT                   LOOP EVALUATING SUBSCRIPTS,,                 
         END                                                                    
*                                                                               
*                                                                               
         COMMENT                   GOT SUBSCRIPTS                               
         INCR  R1                  SKIP FINAL ']'                               
         DECR  R0                                                               
         MVC   VNASUB1,XBSUB1                                                   
         MVC   VNASUB2,XBSUB2                                                   
         MVC   VNASUB3,XBSUB3                                                   
         CLEAR R15                                                              
*                                                                               
SUBSDONE LABEL ,                                                                
         PRETURN (R0,R1)                                                        
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  XVLINT - EVALUATE INTEGER EXPRESSION                                         
*                                                                               
*  THIS ROUTINE IS CALLED BY XVLSUBS TO EVALUATE SUBSCRIPTS.                    
*                                                                               
*  ON ENTRY:                                                                    
*    R1,R0 - LOC, LENGTH OF STRING CONTAINING EXPRESSION                        
*       R6 - EXPRESSION STACK POINTER                                           
*                                                                               
*  ON EXIT:                                                                     
*    R1,R0 - LOC, LENGTH OF REMAINING STRING                                    
*       R2 - INTEGER VALUE (ANY FRACTIONAL PART TRUNCATED)                      
*      R15 - CC=ZERO, ALL OK                                                    
*            CC=MINUS, NULL EXPRESSION                                          
*            CC=POS, ERROR, ERROR MSG TSEG'D                                    
*                                                                               
*                                                                               
XVLINT   PROC                                                                   
         USING XSENTRY,R6                                                       
         XSPUSH ,,                 PUSH EXPRESSION STACK POINTER (R6)           
         IF    Z,BEGIN                                                          
         ACALL XXXEVAL             RECURSIVELY CALL EVALUATE                    
         IF    Z,BEGIN             IF GOOD EXPRESSION                           
         LA    R2,XSENTRY                                                       
         ACALL MAKEINT                                                          
         IF    Z,BEGIN                                                          
         CLEAR R15                                                              
         L     R2,XSVALUE          R2 = VALUE                                   
         END                                                                    
         ELSE  BEGIN               IF NOT INTEGER EXPRESSION                    
         LA    R15,4                                                            
         END                                                                    
         END                                                                    
         IF    (R15,NZ),BEGIN      IF ERROR                                     
         CLEAR R2                                                               
         END                                                                    
         END                                                                    
         PRETURN (R0,R2)                                                        
         PEND ,                    NOTE: THIS ALSO POPS EXPR STACK              
         DROP  R6                                                               
         EJECT                                                                  
         QLTORG                                                                 
         TITLE 'VARIABLE TYPE CONVERSIONS'                                      
*box                                                                            
*                                                                               
*                                                                               
*  MAKESTR - CONVERT TO STRING                                                  
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VARIABLE ENTRY                                                     
*                                                                               
*  ON EXIT:                                                                     
*       R2 - VARIABLE ENTRY CONVERTED TO STRING FORMAT                          
*      R15 - CC=ZERO, IF CONVERTED OK                                           
*            CC=NZ, IF UNABLE TO CONVERT,,, ERROR IS TSEG'D                     
*                                                                               
*  NOTE: IF CONVERTING NUMBER, THE NUMBER IS STORED AS A 8 BYTE                 
*        PACKED DECIMAL NUMBER, VNNFORMT DESCRIBES HOW NUMBER                   
*        SHOULD BE DISPLAYED.                                                   
*                                                                               
*                                                                               
MAKEWA   RECORD BEGIN ,,                                                        
MAKETEMP DS    XL(L'VPARM)                                                      
         END                                                                    
*                                                                               
*                                                                               
MAKESTR  XPROC MAKEWA                                                           
         USING VNENTRY,R2                                                       
         IF    VNSTRING,BEGIN      IF STRING, NO NEED TO CONVERT,,              
         CLEAR R15                                                              
         END                                                                    
         ELSEIF VNBOOL,BEGIN       IF BOOLEAN, CANNOT CONVERT,,                 
         CLEAR VNBOOL                                                           
         SET   VNSTRING                                                         
         L     R1,=A(PKZERO)                                                    
         CP    VNVALUE(NL),0(NL,R1)                                             
         IF    E,BEGIN                                                          
         MVC   VNSTRLOC(5),=CL5'FALSE'  (Niz)                                   
         MVC   VNSTRLEN(2),=H'5'                                                
         END                                                                    
         ELSE  BEGIN                                                            
         MVC   VNSTRLOC(4),=CL4'TRUE'  (Niz)                                    
         MVC   VNSTRLEN(2),=H'4'                                                
         END                                                                    
         CLEAR R15                                                              
         END                                                                    
         ELSEIF VNNUMB,BEGIN       IF NUMBER, CONVERT TO STRING                 
         XPUSH R2 ,                DO NOT DESTROY R2                            
         LA    R0,11                                                            
         LA    R1,VNVALUE                                                       
         LA    R2,MAKETEMP                                                      
         ACALL MAKECHAR            UNPACK NUMBER                                
         XPOP  R2                                                               
         LA    R0,MAKETEMP+14      R0 - END OF WHOLE PART OF NUMBER             
         LA    R1,MAKETEMP         R1 - START OF NUMBER                         
         LA    R3,MAKETEMP+21      R3 - END OF NUMBER-1                         
         LA    R4,VNSTRLOC         R4 - PLACE FOR FORMATTED NUMBER              
         LA    R5,13                                                            
         WHILE ((@R1,EQ,C'0'),AND,(R5,POS)),BEGIN                               
         LA    R1,1(R1)            SKIP LEADING ZEROS                           
         DECR  R5                                                               
         END                                                                    
         LA    R5,8                                                             
         WHILE ((@R3,EQ,C'0'),AND,(R5,POS)),BEGIN                               
         DECR  R3                  SKIP TRAILING ZEROS                          
         DECR  R5                                                               
         END                                                                    
         TM    VNVALUE+NL-1,X'01'     PROCESS SIGN                              
         IF    O,BEGIN                                                          
         MVI   0(R4),C'-'                                                       
         LA    R4,1(R4)                                                         
         END                                                                    
         WHILE (R1,LT,R0),BEGIN    OUTPUT WHOLE PART                            
         MVC   0(1,R4),0(R1)                                                    
         LA    R1,1(R1)                                                         
         LA    R4,1(R4)                                                         
         END                                                                    
         IF    (R3,GE,R0),BEGIN    IF FRACTIONAL PART                           
         MVI   0(R4),C'.'          DO DECIMAL POINT                             
         LA    R4,1(R4)                                                         
         LR    R1,R0                                                            
         WHILE (R1,LE,R3),BEGIN    DO FRACTIONAL PART                           
         MVC   0(1,R4),0(R1)                                                    
         LA    R1,1(R1)                                                         
         LA    R4,1(R4)                                                         
         END                                                                    
         END                                                                    
         CLEAR VNNUMB                                                           
         ACALL ZAPOFFR2            ** ZAP INTEGER (** OLD N0-N9)                
         SET   VNSTRING                                                         
         LA    R3,VNSTRLOC                                                      
         SR    R4,R3                                                            
         STH   R4,VNSTRLEN                                                      
         CLEAR R15                                                              
         END                                                                    
         ELSEIF (R0,EQ,R0),BEGIN   IF NOT BOOL,NUMB,STR, THEN BOMB              
         BOMB   ,,                 THIS SHOULD NEVER OCCUR                      
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  MAKEBOOL - CONVERT TO BOOLEAN                                                
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VARIABLE ENTRY                                                     
*                                                                               
*  ON EXIT:                                                                     
*       R2 - VARIABLE ENTRY CONVERTED TO NUMBER FORMAT                          
*      R15 - CC=ZERO, IF CONVERTED OK                                           
*            CC=NZ, IF UNABLE TO CONVERT,,, ERROR IS TSEG'D                     
*                                                                               
*                                                                               
MAKEBOOL XPROC MAKEWA                                                           
         USING VNENTRY,R2                                                       
         IF    VNBOOL,BEGIN        IF BOOLEAN, NO NEED TO CONVERT,,             
         CLEAR R15                                                              
         END                                                                    
         ELSEIF VNNUMB,BEGIN       IF NUMBER, CANNOT CONVERT,,                  
         TSEG  'Number does not convert to boolean. '                           
         LA    R15,4                                                            
         END                                                                    
         ELSEIF VNSTRING,BEGIN     IF STRING, CONVERT IF POSSIBLE               
         LA    R1,VNSTRLOC                                                      
         LH    R3,VNSTRLEN         R1,R3 - STRING LOC LENGTH                    
         IF    (R3,EQ,4),BEGIN     IF STRING LEN=4                              
         MVC   MAKETEMP(4),0(R1)   CHECK FOR TRUE                               
         L     R4,CVUPPTBL                                                      
         TR    MAKETEMP(4),0(R4)                                                
         CLC   MAKETEMP(4),=CL4'TRUE'                                           
         IF    E,BEGIN                                                          
         CLEAR VNSTRING                                                         
         SET   VNBOOL                                                           
         L     R4,=A(PKONE)                                                     
         MVC   VNVALUE(NL),0(R4)                                                
         END                                                                    
         END                                                                    
         IF    (R3,EQ,5),BEGIN     IF STRING LEN=5                              
         MVC   MAKETEMP(5),0(R1)   CHECK FOR FALSE                              
         L     R4,CVUPPTBL                                                      
         TR    MAKETEMP(5),0(R4)                                                
         CLC   MAKETEMP(5),=CL5'FALSE'                                          
         IF    E,BEGIN                                                          
         CLEAR VNSTRING                                                         
         SET   VNBOOL                                                           
         L     R4,=A(PKZERO)                                                    
         MVC   VNVALUE(NL),0(R4)                                                
         END                                                                    
         END                                                                    
         IF    VNSTRING,BEGIN                                                   
         TSEG  'String does not convert to boolean. '                           
         LA    R15,4               string does not convert to boolean           
         END                                                                    
         END                                                                    
         ELSEIF (R0,EQ,R0),BEGIN   IF NOT BOOL,NUMB,STR, THEN BOMB              
         BOMB                      THIS SHOULD NEVER OCCUR                      
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  MAKENUMB - CONVERT TO NUMBER                                                 
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VARIABLE ENTRY                                                     
*                                                                               
*  ON EXIT:                                                                     
*       R2 - VARIABLE ENTRY CONVERTED TO NUMBER FORMAT                          
*      R15 - CC=ZERO, IF CONVERTED OK                                           
*            CC=NZ, IF UNABLE TO CONVERT,,, ERROR IS TSEG'D                     
*                                                                               
*                                                                               
MAKENUMB XPROC MAKEWA                                                           
         USING VNENTRY,R2                                                       
         CLEAR MAKETEMP                                                         
         IF    VNNUMB,BEGIN        IF NUMBER, NO NEED TO CONVERT,,              
         CLEAR R15                                                              
         END                                                                    
         ELSEIF VNBOOL,BEGIN       IF BOOLEAN, CANNOT CONVERT,,                 
         TSEG  'Boolean does not convert to number. '                           
         LA    R15,4                                                            
         END                                                                    
         ELSEIF VNSTRING,BEGIN     IF STRING, CONVERT IF POSSIBLE               
         LA    R1,VNSTRLOC                                                      
         LH    R0,VNSTRLEN         R1,R0 - STRING LOC LENGTH                    
         LA    R6,MAKETEMP         R6 - WORK AREA                               
         COMMENT                                                                
         ACALL SCNTYPE             SCAN STRING                                  
         COMMENT                                                                
* number                                                                        
         IF    (R15,EQ,NUMBER),BEGIN          IF NUMBER, DO IT                  
         ACALL SCNNUMB                                                          
         END                                                                    
* blanks or null = 0                                                            
         ELSEIF (R15,EQ,0),BEGIN              IF BLANK STRING,                  
         USING XSENTRY,R6                        TREAT AS ZERO                  
         CLEAR XSENTRY                                                          
         SET   XSNUMB                                                           
         L     R3,=A(PKZERO)                                                    
         MVC   XSVALUE(NL),0(R3)                                                
         CLEAR R15                                                              
         END                                                                    
         ELSEIF (R15,GE,OTHER),BEGIN          IF OTHER NUMBER                   
         COMMENT                                                                
* + number                                                                      
         IF    ((@R1,GE,'+0'),AND,(@R1,LE,'+9'),AND,(R0,GE,2)),BEGIN            
         LA    R1,1(R1)                                                         
         DECR  R0                                                               
         ACALL SCNNUMB                                                          
         END                                                                    
* - number                                                                      
         ELSEIF ((@R1,GE,'-0'),AND,(@R1,LE,'-9'),AND,(R0,GE,2)),BEGIN           
         LA    R1,1(R1)                                                         
         DECR  R0                                                               
         ACALL SCNNUMB                                                          
         USING XSENTRY,R6                                                       
         NI    XSVALUE+NL-1,X'F0'                                               
         OI    XSVALUE+NL-1,X'0D'                                               
         DROP  R6                                                               
         END                                                                    
* .number                                                                       
         ELSEIF ((@R1,GE,'.0'),AND,(@R1,LE,'.9'),AND,(R0,GE,2)),BEGIN           
         ACALL SCNDOT                                                           
         END                                                                    
* + .number                                                                     
         ELSEIF ((@R1,GE,'+.0'),AND,(@R1,LE,'+.9'),                    X        
               AND,(R0,GE,3)),BEGIN                                             
         LA    R1,1(R1)                                                         
         DECR  R0                                                               
         ACALL SCNDOT                                                           
         END                                                                    
* - .number                                                                     
         ELSEIF ((@R1,GE,'-.0'),AND,(@R1,LE,'-.9'),                    X        
               AND,(R0,GE,3)),BEGIN                                             
         LA    R1,1(R1)                                                         
         DECR  R0                                                               
         ACALL SCNDOT                                                           
         USING XSENTRY,R6                                                       
         NI    XSVALUE+NL-1,X'F0'                                               
         OI    XSVALUE+NL-1,X'0D'                                               
         DROP  R6                                                               
         END                                                                    
* all other others, invalid                                                     
         ELSEIF (R0,EQ,R0),BEGIN              IF NONE OF THE ABOVE,             
         TSEG  'String does not convert to number. '                            
         LA    R15,4                                                            
         END                                                                    
         END                                                                    
* and all others, invalid                                                       
         ELSEIF (R0,EQ,R0),BEGIN              IF NONE OF THE ABOVE,             
         TSEG  'String does not convert to number. '                            
         LA    R15,4                                                            
         END                                                                    
* final conversion processing                                                   
         IF    ((R15,Z),AND,(R0,POS)),BEGIN   IF SOMETHING AFTER #,,            
         ACALL SCNTYPE                                                          
         IF    NZ,BEGIN                                                         
         TSEG  'String does not convert to number. '                            
         LA    R15,4                                                            
         END                                                                    
         END                                                                    
         IF    (R15,EQ,0),BEGIN            IF CONVERSION SUCCESSFUL,,           
         USING XSENTRY,R6                    MOVE IT                            
         CLEAR VNSTRING                                                         
         SET   VNNUMB                                                           
         ACALL ZAPOFFR2            ** ZAP INTEGER (**OLD N0-N9)                 
         MVC   VNVALUE(NL),XSVALUE                                              
         DROP  R6                                                               
         END                                                                    
         END                                                                    
         ELSEIF (R0,EQ,R0),BEGIN   IF NOT BOOL,NUMB,STR, THEN BOMB              
         BOMB   ,,                 THIS SHOULD NEVER OCCUR                      
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  MAKEINT - CONVERT TO INTEGER                                                 
*                                                                               
*  *** HEY *** ... ALL NUMBERS ARE STORED IN PACKED DECIMAL FORMAT.             
*  IF YOU CONVERT A NUMBER TO INTEGER FORMAT, YOU ARE RESPONSIBLE               
*  FOR RETURNING IT TO PACKED DECIMAL FORMAT.                                   
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VARIABLE ENTRY                                                     
*                                                                               
*  ON EXIT:                                                                     
*       R2 - VARIABLE ENTRY CONVERTED TO INTEGER FORMAT                         
*      R15 - CC=ZERO, IF CONVERTED OK                                           
*            CC=NZ, IF UNABLE TO CONVERT,,, ERROR IS TSEG'D                     
*                                                                               
*                                                                               
MAKEINT  XPROC MAKEWA                                                           
         USING VNENTRY,R2                                                       
         ACALL MAKENUMB            FIRST CONVERT TO NUMBER                      
         IF    Z,BEGIN                                                          
         SRP   VNVALUE(NL),64-9,0      CHANGE TO F14.0                          
         IF    (' CP VNVALUE,MAXNUMB',H),BEGIN   CHECK FOR OVERFLOW             
         ACALL OVERFLOW                                                         
         END                                                                    
         ELSEIF (' CP VNVALUE,MINNUMB',L),BEGIN  CHECK FOR OVERFLOW             
         ACALL OVERFLOW                                                         
         END                                                                    
         ELSE  BEGIN                                                            
         MVC   MAKETEMP(8),VNVALUE+NL-8                                         
         CVB   R1,MAKETEMP         CONVERT TO BINARY !                          
         ST    R1,VNVALUE                                                       
         MVC   VNVALUE+NL-4(4),=CL4'INT '                                       
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  MAKELNO - CONVERT TO WYLBUR LINE NUMBER                                      
*                                                                               
*  *** HEY *** ... ALL NUMBERS ARE STORED IN PACKED DECIMAL FORMAT.             
*  IF YOU CONVERT A NUMBER INTO A LINE NUMBER, YOU ARE RESPONSIBLE              
*  FOR RETURNING IT TO PACKED DECIMAL FORMAT.                                   
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VARIABLE ENTRY                                                     
*                                                                               
*  ON EXIT:                                                                     
*       R2 - VARIABLE ENTRY CONVERTED TO WYLBUR LINE NUMBER                     
*      R15 - CC=ZERO, IF CONVERTED OK                                           
*            CC=NZ, IF UNABLE TO CONVERT,,, ERROR IS TSEG'D                     
*                                                                               
*                                                                               
MAKELNO  XPROC MAKEWA                                                           
         USING VNENTRY,R2                                                       
         ACALL MAKENUMB            FIRST CONVERT TO NUMBER                      
         IF    Z,BEGIN                                                          
         SRP   VNVALUE(NL),64-6,0        CHANGE TO F14.3                        
         IF    (' CP VNVALUE,MAXNUMB',H),BEGIN   CHECK FOR OVERFLOW             
         ACALL OVERFLOW                                                         
         END                                                                    
         ELSEIF (' CP VNVALUE,MINNUMB',L),BEGIN  CHECK FOR OVERFLOW             
         ACALL OVERFLOW                                                         
         END                                                                    
         ELSE  BEGIN                                                            
         MVC   MAKETEMP(8),VNVALUE+NL-8                                         
         CVB   R1,MAKETEMP         CONVERT TO BINARY !                          
         ST    R1,VNVALUE                                                       
         MVC   VNVALUE+NL-4(4),=CL4'LNO '                                       
         END                                                                    
         END                                                                    
         PEND  ,                                                                
         DROP  R2                                                               
         SPACE 2                                                                
* MAXIMUM, MINIMUM FULLWORD VALUES                                              
MAXNUMB  DC    PL12'+2147483647'                                                
MINNUMB  DC    PL12'-2147483648'                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  MAKEITOD - CONVERT INTEGER TO PACKED DECIMAL                                 
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VARIABLE ENTRY                                                     
*                                                                               
*  ON EXIT:                                                                     
*       R2 - VARIABLE ENTRY CONVERTED TO PACKED DECIMAL                         
*      R15 - CC=ZERO, IF CONVERTED OK                                           
*            CC=NZ, IF UNABLE TO CONVERT,,, ERROR IS TSEG'D                     
*                                                                               
*                                                                               
MAKEITOD XPROC MAKEWA                                                           
         USING VNENTRY,R2                                                       
         L     R1,VNVALUE                                                       
         CVD   R1,MAKETEMP         CONVERT TO PACKED DECIMAL                    
         L     R1,=A(PKZERO)                                                    
         MVC   VNVALUE(NL),0(R1)                                                
         MVC   VNVALUE+NL-8(8),MAKETEMP                                         
         SRP   VNVALUE(NL),9,0     CHANGE TO F14.9                              
         CLEAR R15                                                              
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  MAKELTOD - CONVERT WYLBUR LINE NUMBER TO PACKED DECIMAL                      
*                                                                               
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VARIABLE ENTRY                                                     
*                                                                               
*  ON EXIT:                                                                     
*       R2 - VARIABLE ENTRY CONVERTED TO PACKED DECIMAL                         
*      R15 - CC=ZERO, IF CONVERTED OK                                           
*            CC=NZ, IF UNABLE TO CONVERT,,, ERROR IS TSEG'D                     
*                                                                               
*                                                                               
MAKELTOD XPROC MAKEWA                                                           
         USING VNENTRY,R2                                                       
         L     R1,VNVALUE                                                       
         CVD   R1,MAKETEMP         CONVERT TO PACKED DECIMAL                    
         L     R1,=A(PKZERO)                                                    
         MVC   VNVALUE(NL),0(R1)                                                
         MVC   VNVALUE+NL-8(8),MAKETEMP                                         
         COMMENT                   SCALE DECIMAL POINT                          
         SRP   VNVALUE(NL),6,0     CHANGE TO F14.9                              
         CLEAR R15                                                              
         PEND  ,                                                                
         DROP  R2                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  MAKEHEX  - CONVERT HEX CHARS TO HEX                                          
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - LENGTH OF HEX CHARS TO CONVERT (<512)                              
*       R1 - LOCATION OF HEX CHARS TO CONVERT                                   
*       R2 - PLACE TO PUT HEX (MAY = R1)                                        
*                                                                               
*  ON EXIT:                                                                     
*       R0 - NEW LENGTH (= APROX. 1/2 OF ENTRY VALUE)                           
*       R1 - UNCHANGED                                                          
*       R2 - UNCHANGED                                                          
*      R15 - CC=0, IF OK ;; CC=NZ IF NOT VALID HEX CHARS                        
*                                                                               
MHWA     RECORD BEGIN                                                           
MHTEMP   DS    XL264               TEMP BUFFER - HEX CHARS                      
MHTEMP2  DS    XL264               TEMP BUFFER - HEX NUMBER                     
         END                                                                    
*                                                                               
*                                                                               
MAKEHEX  XPROC MHWA                                                             
         IF    (R0,NEG),' CLEAR R0 '                                            
         IF    (R0,GT,255),' LA R0,255 '                                        
         IF    (R0,POS),BEGIN                                                   
         L     R3,=X'00000001'                                                  
         NR    R3,R0                                                            
         IF    (R3,NZ),BEGIN       IF ODD NUMBER OF HEX CHARS                   
         MVI   MHTEMP,C'0'                                                      
         LR    R3,R0                                                            
         MOVE  R3,MHTEMP+1,@R1                                                  
         A     R0,=F'1'                                                         
         END                                                                    
         ELSE  BEGIN ,             IF EVEN NUMBER OF HEX CHARS                  
         LR    R3,R0                                                            
         MOVE  R3,MHTEMP,@R1                                                    
         END                                                                    
         XPUSH R0,R2                                                            
         LR    R3,R0                                                            
         DECR  R3                                                               
         EX    R3,' TRT MHTEMP(0),TRTCKHEX '                                    
         IF    NZ,BEGIN                       IF INVALID HEX CHARS              
         LA    R15,4                                                            
         END                                                                    
         IF    Z,BEGIN                        IF VALID HEX CHARS,               
         EX    R3,' TR  MHTEMP(0),TRHEXCHR '     WE CONVERT TO HEX              
         LA    R4,MHTEMP2                                                       
         LA    R5,MHTEMP                                                        
         WHILE (R0,POS),BEGIN                                                   
         PACK  0(5,R4),0(9,R5)                                                  
         LA    R4,4(R4)                                                         
         LA    R5,8(R5)                                                         
         S     R0,=F'8'                                                         
         END                                                                    
         CLEAR R15                                                              
         END                                                                    
         XPOP  R0,R2                                                            
         SRL   R0,1                R0 - OUTPUT LENGTH                           
         COMMENT                   R2 - OUTPUT BUFFER                           
         LR    R3,R0               R3 - OUTPUT LENGTH                           
         LA    R4,MHTEMP2          R4 - HEX STRING                              
         LR    R5,R0                                                            
         MVCL  R2,R4               MOVE STRING TO OUTPUT BUFFER                 
         END                                                                    
         PRETURN (R0)                                                           
         PEND  ,                                                                
*                                                                               
TRTCKHEX DC    256X'04'            VALID HEX CHARACTERS                         
         ORG   TRTCKHEX+C'0'                                                    
         DC    10X'00'                                                          
         ORG   TRTCKHEX+C'A'                                                    
         DC    6X'00'                                                           
         ORG   TRTCKHEX+C'a'                                                    
         DC    6X'00'                                                           
         ORG   TRTCKHEX+256                                                     
*                                                                               
TRHEXCHR DC    256X'00'            TRANSLATE HEX CHARS TO HEX NUMBERS           
         ORG   TRHEXCHR+C'0'                                                    
         DC    X'00010203040506070809'                                          
         ORG   TRHEXCHR+C'A'                                                    
         DC    X'0A0B0C0D0E0F'                                                  
         ORG   TRHEXCHR+C'a'                                                    
         DC    X'0A0B0C0D0E0F'                                                  
         ORG   TRHEXCHR+256                                                     
*                                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  MAKECHAR - CONVERT HEX TO HEX STRING                                         
*                                                                               
*  ON ENTRY:                                                                    
*       R0 - LENGTH OF HEX TO CONVERT (<256)                                    
*       R1 - LOCATION OF HEX TO CONVERT                                         
*       R2 - PLACE TO HEX STRING (MAY = R1)                                     
*                                                                               
*  ON EXIT:                                                                     
*       R0 - NEW LENGTH (= 2*R0 AT ENTRY)                                       
*       R1 - UNCHANGED                                                          
*       R2 - UNCHANGED                                                          
*                                                                               
*                                                                               
MCWA     RECORD BEGIN                                                           
MCTEMP   DS    XL512                                                            
         END                                                                    
*                                                                               
*                                                                               
MAKECHAR XPROC MCWA                                                             
         IF    (R0,NEG),' CLEAR R0 '                                            
         IF    (R0,GT,255),' LA R0,255 '                                        
         IF    (R0,POS),BEGIN                                                   
         XPUSH R0,R2                                                            
         LA    R4,MCTEMP                                                        
         LR    R5,R1                                                            
         WHILE (R0,POS),BEGIN                                                   
         UNPK  0(9,R4),0(5,R5)     UNPACK HEX INTO CHARS                        
         NC    0(8,R4),HEXMASK     MASK OUT HIGH ORDER BITS                     
         TR    0(8,R4),HEXCHARS    CONVERT HEX TO HEX CHAR                      
         LA    R4,8(R4)                                                         
         LA    R5,4(R5)                                                         
         S     R0,=F'4'                                                         
         END                                                                    
         XPOP  R0,R2                                                            
         SLL   R0,1                R0 - OUTPUT LENGTH                           
         COMMENT                   R2 - OUTPUT BUFFER                           
         LR    R3,R0               R3 - OUTPUT LENGTH                           
         LA    R4,MCTEMP           R4 - HEX STRING                              
         LR    R5,R0                                                            
         MVCL  R2,R4               MOVE STRING TO OUTPUT BUFFER                 
         END                                                                    
         CLEAR R15                                                              
         PRETURN (R0)                                                           
         PEND  ,                                                                
*                                                                               
HEXCHARS DC    C'0123456789ABCDEF'                                              
HEXMASK  DC    X'0F0F0F0F0F0F0F0F'                                              
*                                                                               
         EJECT                                                                  
         QLTORG                                                                 
         TITLE 'ZAP INTEGER NUMBER ROUTINES'                                    
*                                                                               
**                                                                              
**  ZAP ROUTINES ---     for N0-N9                                              
**                                                                              
**  ZAP FOR OLD STYLE N0-N9.  THESE ZAPS ALLOW FOR INTEGER                      
**  VARIABLES IN EXPRESSIONS AND IN N0 THRU N9...  THESE                        
**  ZAPS ARE APPLIED ONLY IN OLD EXEC MODE.... SEE OLD EXEC                     
**  GUIDE FOR DETAILS...  HURRAH FOR BACKWARDS                                  
**  COMPATABILITY !                                                             
**                                                                              
**  ALL REQUIRED ZAPS ARE FOUND IN VARS, FUNC, AND EVAL MODULES !!              
** ----------------------------------------------------------------             
**                                                                              
**  RULES FOR INTEGER ZAPS:                                                     
**    1. MUST BE IN OLD EXEC MODE                                               
**    2. N0-N9 ARE INTEGERS                                                     
**    3. LITTERALS ARE INTEGERS 2, 8, 12328, ETC.                               
**       (NUMBERS CONTAINING DECIMAL POINT ARE NOT !! EG 4.0 2. )               
**    4. IF 2 INTEGERS ARE + - * OR /, THE RESULT IS AN INTEGER.                
**    5. THE RESULT OF THE INT(..), NCONVERT(..), AND NHEX(..)                  
**       FUNCTIONS ARE INTEGERS.                                                
**    6. IF NONE OF THE ABOVE RULES APPLY, THE NUMBER IS A NUMBER               
**       AND NOT AN INTEGER.  (IE.  123.482 1.000 ETC)                          
**    7. SPECIFICALLY, ALL VARIABLES OTHER THAT N0-9 ARE NUMBERS.               
**    8. AND, ALL FUNCTIONS OTHER THAN (RULE 4) RETURN NUMBERS.                 
**    9. NUMBERS MAY BE INTEGER VALUES, BUT ARE NOT CLOSED UNDER                
**       DIVISION.                                                              
**   10. NOTE: IN NEW EXEC MODE ALL NUMBERS ARE NUMBERS AND !!                  
**             1/3 = 0.3333333                                                  
**   11. OH YEAH !                                                              
**                                                                              
**  ZAPINTR6 - TURN ON INTEGER FLAG, VAR ENTRY @R6                              
ZAPINTR6 XPROC ,        ***  THIS ZAP USED IN FUNC !!                           
         IF    CPFXOLD,BEGIN                                                    
         USING VNENTRY,R6                                                       
         SET   VNINT                                                            
         DROP  R6                                                               
         END                                                                    
         PEND  ,                                                                
         SPACE 2                                                                
**  ZAPOFFR2 - TURN OFF INTEGER FLAG, VAR ENTRY @R2                             
ZAPOFFR2 PROC  ,                                                                
         USING VNENTRY,R2                                                       
         CLEAR VNINT                                                            
         DROP  R2                                                               
         PEND  ,                                                                
         SPACE 2                                                                
**  ZAPOFFR6 - TURN OFF INTEGER FLAG, VAR ENTRY @R6                             
ZAPOFFR6 XPROC ,        *** THIS ZAP USED IN VARS !!                            
         USING VNENTRY,R6                                                       
         CLEAR VNINT                                                            
         DROP  R6                                                               
         PEND  ,                                                                
         SPACE 2                                                                
**  ZAPINT - ON ENTRY: R4,R5 ,,, 1ST, 2ND OPERANDS                              
**           ON EXIT: IF BOTH INTEGERS, 1ST OPERAND SET TO INTEGER              
ZAPINT   PROC  ,                                                                
         IF    CPFXOLD,BEGIN                                                    
         USING VNENTRY,R2                                                       
         LR    R2,R5                                                            
         IF    ^VNINT,BEGIN        A LITTLE REVERSE LOGIC                       
         LR    R2,R4                                                            
         CLEAR VNINT                                                            
         END                                                                    
         DROP  R2                                                               
         END                                                                    
         PEND  ,                                                                
         SPACE 2                                                                
**  ZAPINT2 - IF INTEGER, FORCE TO INTEGER VALUE, CALLED FROM DIVIDE            
**  ZAPINT2 - ON ENTRY: R2 - VARIABLE ENTRY                                     
**            ON EXIT: ENTRY FORCED TO INTEGER                                  
ZAPINT2  PROC  ,                                                                
         IF    CPFXOLD,BEGIN                                                    
         USING VNENTRY,R2                                                       
         IF    VNINT,BEGIN                                                      
         NC    VNVALUE+NL-5(5),=X'000000000F'                                   
         END                                                                    
         DROP  R2                                                               
         END                                                                    
         PEND  ,                                                                
         SPACE 2                                                                
**  ZAPINT3 - FORCE TO INTEGER,,, CALLED FOR VARS N0-N9                         
**       ON ENTRY: R2 - VARIABLE ENTRY                                          
ZAPINT3  PROC  ,                                                                
         IF    CPFXOLD,BEGIN                                                    
         USING VNENTRY,R2                                                       
         IF    (VNNAME,EQ,0),BEGIN                                              
         BOMB                                                                   
         END                                                                    
         COMMENT                   IF N0-N9                                     
         IF    ((VNNAME,EQ,'N'),                                       X        
               AND,(VNNAME+1,GE,'0'),AND,(VNNAME+1,LE,'9'),            X        
               AND,(VNNAME+2,EQ,' '),                                  X        
               AND,(VNPREFIX,EQ,0)),BEGIN                                       
         IF    ^VNNUMB,BEGIN                                                    
         BOMB                                                                   
         END                                                                    
         SET   VNINT                                                            
         NC    VNVALUE+NL-5(5),=X'000000000F'                                   
         END                                                                    
         ELSE  BEGIN                                                            
         CLEAR VNINT                                                            
         END                                                                    
         DROP  R2                                                               
         END                                                                    
         PEND  ,                                                                
         SPACE 2                                                                
**  ZAPINT4 - CHECK IF SCANNED NUMBER IS INTEGER                                
**       ON ENTRY, R1,R0 - POINT TO "." IF NON-INTEGER,                         
**                 R6 - VARIABLE ENTRY                                          
ZAPINT4  PROC  ,                                                                
         IF    CPFXOLD,BEGIN                                                    
         USING VNENTRY,R6                                                       
         IF    ((@R1,EQ,'.'),AND,(R0,POS)),BEGIN                                
         CLEAR VNINT                                                            
         END                                                                    
         ELSE  BEGIN                                                            
         SET   VNINT                                                            
         END                                                                    
         DROP  R6                                                               
         END                                                                    
         PEND  ,                                                                
         TITLE 'ERROR ROUTINES'                                                 
*box                                                                            
*                                                                               
*                                                                               
*  OVERFLOW - ARITHMETIC OVERFLOW                                               
*                                                                               
*  TSEG ERROR MSG AND RETURN CC=NZ                                              
*                                                                               
*                                                                               
OVERFLOW PROC  ,                                                                
         TSEG  'Arithmetic overflow. '                                          
         LA    R15,4                                                            
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  STROFLOW - STRING OVERFLOW                                                   
*                                                                               
*  TSEG ERROR MSG AND RETURN CC=NZ                                              
*                                                                               
*                                                                               
STROFLOW PROC  ,                                                                
         TSEG  'String overflow in expression. '                                
         LA    R15,4                                                            
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  UNDEF - UNDEFINED VARIABLE NAME                                              
*                                                                               
*  ON ENTRY:                                                                    
*       R6 - VARIABLE ENTRY CONTAINING UNDEFINED NAME !!                        
*                                                                               
*                                                                               
*  WE TSEG ERROR MSG AND RETURN CC=NZ                                           
*                                                                               
*                                                                               
UNDEFD   PROC  ,                                                                
         USING VNENTRY,R6                                                       
         TSEG  '"'                                                              
         LA    R2,VNENTRY                                                       
         VCALL SEGVNAME                                                         
         TSEG  '" is undefined in expression. '                                 
         LA    R15,4                                                            
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  BADQUOTE - MISSMATCHED QUOTES                                                
*                                                                               
*  TSEG ERROR MSG AND RETURN CC=NZ                                              
*                                                                               
*                                                                               
BADQUOTE PROC  ,                                                                
         TSEG  'Mismatched quotes in expression. '                              
         LA    R15,4                                                            
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  NOPROCS - NO PROCEDURES ALLOWED IN EXPRESSIONS                               
*                                                                               
*  ON ENTRY:                                                                    
*       R6 - VARIABLE ENTRY CONTAINING PROCEDURE NAME !!                        
*                                                                               
*                                                                               
*  TSEG ERROR MSG AND RETURN CC=NZ                                              
*                                                                               
*                                                                               
NOPROCS  PROC  ,                                                                
         USING VNENTRY,R6                                                       
         TSEG  'Procedure calls ("'                                             
         LA    R2,VNENTRY                                                       
         VCALL SEGVNAME                                                         
         TSEG  '") are not allowed in an expression. '                          
         LA    R15,4                                                            
         PEND  ,                                                                
         DROP  R6                                                               
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  BADARGS - INVALID ARGUMENTS                                                  
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VARIABLE ENTRY FOR FUNCTION NAME !                                 
*  ON EXIT:                                                                     
*       ERROR TSEG'D.                                                           
*       R15 - CC=NEG, R15=-4, DO NOT CHANGE FROM -4.                            
*                                                                               
*  CALLED BY XVLARGS                                                            
*                                                                               
*                                                                               
NOARGS   PROC  ,                                                                
         TSEG  'No arguments specified for "'                                   
         COMMENT @R2 - VAR ENTRY                                                
         VCALL SEGVNAME                                                         
         TSEG  '". '                                                            
         L     R15,=F'-4'                                                       
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  MANYARGS - TOO MANY ARGUMENTS                                                
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VARIABLE ENTRY FOR FUNCTION NAME !                                 
*  ON EXIT:                                                                     
*       ERROR TSEG'D.                                                           
*       R15 - CC=NEG, R15=-4, DO NOT CHANGE FROM -4.                            
*                                                                               
*  CALLED BY XVLARGS                                                            
*                                                                               
*                                                                               
MANYARGS PROC  ,                                                                
         TSEG  'Too many arguments specified for "'                             
         COMMENT @R2 - VAR ENTRY                                                
         VCALL SEGVNAME                                                         
         TSEG  '" .'                                                            
         L     R15,=F'-4'                                                       
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  ARGERROR -  INVALID ARGUMENT                                                 
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VARIABLE ENTRY FOR FUNCTION NAME !                                 
*       R3 - NUMBER OF ARGUMENT                                                 
*  ON EXIT:                                                                     
*       ERROR TSEG'D.                                                           
*       R15 - CC=NEG, R15=-4, DO NOT CHANGE FROM -4.                            
*                                                                               
*  CALLED BY XVLARGS                                                            
*                                                                               
*                                                                               
ARGERROR PROC  ,                                                                
         TCCR                                                                   
         TSEG  'Argument #'                                                     
         TNUM  (R3)                                                             
         TSEG  ' of "'                                                          
         COMMENT @R2 - VAR ENTRY                                                
         VCALL SEGVNAME                                                         
         TSEG  '" is invalid. '                                                 
         L     R15,=F'-4'                                                       
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  BADSUB - TSEG (OUTPUT) BAD SUBSCRIPT MESSAGE                                 
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VARIABLE (ARRAY) NAME.  SEE VNENTRY DSECT.                         
*       R3 - SUBSCRIPT NUMBER (L TO R)                                          
*                                                                               
*  ON EXIT:                                                                     
*       ERROR MESSAGE TSEG'D                                                    
*                                                                               
*                                                                               
*                                                                               
BADSUB   PROC  ,                                                                
         TCCR                                                                   
         TSEG  'Subscript #'                                                    
         TNUM  (R3)                                                             
         TSEG  ' of '                                                           
         VCALL SEGVNAME                                                         
         TSEG  ' is invalid.'                                                   
         CLEAR R15                                                              
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  SMALLSUB - TSEG (OUTPUT) ERROR MESSAGE                                       
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VARIABLE (ARRAY) NAME.  SEE VNENTRY DSECT.                         
*       R3 - SUBSCRIPT NUMBER (L TO R)                                          
*                                                                               
*  ON EXIT:                                                                     
*      ERROR MSG TSEG'S                                                         
*                                                                               
*                                                                               
SMALLSUB PROC  ,                                                                
         TSEG  'Array subscripts must be > 0. '                                 
         ACALL BADSUB                                                           
         PEND  ,                                                                
         EJECT                                                                  
*box                                                                            
*                                                                               
*                                                                               
*  BIGSUB - TSEG (OUTPUT) ERROR MESSAGE                                         
*                                                                               
*  ON ENTRY:                                                                    
*       R2 - VARIABLE (ARRAY) NAME.  SEE VNENTRY DSECT.                         
*       R3 - SUBSCRIPT NUMBER (L TO R)                                          
*                                                                               
*  ON EXIT:                                                                     
*      ERROR MSG TSEG'S                                                         
*                                                                               
*                                                                               
BIGSUB   PROC  ,                                                                
         TSEG  'Subscript too big. '                                            
         ACALL BADSUB                                                           
         PEND  ,                                                                
         EJECT                                                                  
         EJECT                                                                  
         QLTORG                                                                 
         VLTORG                                                                 
         END   .                                                                
