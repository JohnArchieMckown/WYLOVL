;
;;  SHOW LOG -- SHOW LOG command.
;;
;;    This command supports a variety of inquiry commands to
;;    the Wylbur log.
;;
;;
;;  Created, 10/19/89, Niz
;;
;;  Modifications:
;;    10/19/89  Niz     Initial version.
;


xproc () begin
   x.origact = actno
   x.attn = 0                         ; attn counter (see attnexit)

   x.pgm = 'SHOW LOG'                 ; program name
   x.maint = '(netexec-maint)'               ; maintenance people

   x.pno = 0

   on error cmd 'xcall wyl.gs.wyl.net#\
      _error(x.pgm, x.maint, errid, errmsg, errinfo)'
   on attn  cmd 'xcall wyl.gs.wyl.net#\
      _attn(x.pgm, x.maint, x.attn)'

;
;  Process %%%%DUMP prefix (which means it is a "dump log"
;    command).
;
   pstring = parm_string

   if (left(pstring,9) eq '%%%%DUMP ') begin
      pstring = substr(pstring,10)
      col_opts = 'collect'
      try syscall collect_scan(col_opts)
      ; if not ok to clear, cleanup and exit
      if (tryattn or tryerr) begin
         pcall cleanup('error')
      end
   end

;
;  Scan SHOW LOG parameters.
;
   if (pstring eq '') begin
      write 'Missing SHOW LOG options.'
      write ''
      write 'Examples:'
      write '   show log charges"
      write "   show log charges where account = HG.SYS"
      write "   show log charges where sof like 'C%' debug"
      write ''
      write 'Type HELP SHOW LOG for more information.'
      pcall cleanup('error')
   end

   pcall build_sql(pstring)

   if (x.debug) begin
      write 'SQL command:  ' || sql_cmd
   end

;
;  Issue the network request (responses will come back in the
;    current Active file).
;
   tempfile = '/tmp/sql.'||xaccount||'.'||timebin
   open sql temp
   putend use &(ses.sql_db)
   putend go
   putend &(pstring)
   putend go
   quiet save &(tempfile) on lindy guest rep
   on lindy as guest notalk: \
      isql -w 200 -U nizguest -P nizguest < &(tempfile)
   quiet scratch &(tempfile) on lindy guest

   pcall cleanup('')
end



; <.page>
;
;  cleanup -- This routine is always called to return to the
;    user.  It handles restoring the user state.
;

proc cleanup(opt) begin
   pick &(x.origact)
   if (opt eq 'error') \
      opt = "error errmsg=''"
   xreturn &(opt)
end
