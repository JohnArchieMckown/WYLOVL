;
;;  SHOWTEL -- SHOW TELNET command.
;;
;;  This exec shows a user his currently active TELNET sessions.
;;  It is dependent on the ses variable usage of the TELNET exec.
;;
;;  Based on a similar version, 11/06/88 by Lincoln Ong
;;
;;  Session variables used:
;;    ses.telnet_cur        = current telnet session number
;;                              (index for arrays below).
;;    ses.telnet_hosts[]    = remote host name.
;;    ses.telnet_pno[]      = our path number for current connection.
;;    ses.telnet_ano[]      = working active file (used by NET_TALK).
;;    ses.telnet_keepflag[] = keep the log active file (true/false).
;;
;;
;;  Created 4/03/90, Jim Nisbet and Lincoln Ong
;;
;;  Modifications:
;;    4/03/90  Niz    Based on Lincoln's version.
;



xproc () begin
   x.origact = actno
   x.attn = 0           ; attn counter (see attnexit)

   x.pgm = 'SHOW TELNET'          ; program name
   x.maint = '(netexec-maint)'           ; maintenance people

   x.host = ''                    ; current host name
   x.pno = 0                      ; current netpath number
   x.ano = 0                      ; current NET_TALK working actno

   on error cmd 'xcall wyl.gs.wyl.net#\
      _error(x.pgm, x.maint, errid, errmsg, errinfo)'
   on attn  cmd 'xcall wyl.gs.wyl.net#\
      _attn(x.pgm, x.maint, x.attn)'

   set exec over                  ; see Niz for details

   x.maxses = 10        ; constant--max number of telnet sessions

;
;  Process %%%%DUMP prefix (which means it is a "dump telnet"
;    command).
;
   pstring = parm_string

   if (left(pstring,9) eq '%%%%DUMP ') begin  ; allow %%%%DUMP...
      pstring = substr(pstring,10)
      col_opts = 'collect'
      try syscall collect_scan(col_opts)
      ; if not ok to clear, cleanup and exit
      if (tryattn or tryerr) begin
         pcall cleanup('error')
      end
   end

   syscall collect_scan(pstring)   ; allow COLLECT options

;
;  SHOW TELNET options.
;

   opts = strip(pstring)
   if (pstring ne '') begin
      write pstring || ': unrecognized SHOW TELNET option.'
   end

;
;  Check for uninitialized TELNET variables (if TELNET command
;     has never been executed).
;

   if (vartype('ses.telnet_cur') eq 'UNDEFINED') begin
      write 'No telnet sessions active.'
      pcall cleanup('')
   end

   pcall show_sessions

   pcall cleanup('')
end


; <.page>
;
;  show_sessions -- Show all TELNET sessions.
;

proc show_sessions() begin
   found_session = false

   c = 1
   while (c le x.maxses) begin
      if (ses.telnet_pno[c] ne 0) begin
         if (not found_session) begin
            write 'Conn Host'
            found_session = true
         end

         host = ses.telnet_hosts[c]

         if (c eq ses.telnet_cur) marker = '=>'
         else marker = '  '

         write marker || right(c,2) || ' ' || host
      end
      c = c+1
   end

   if (not found_session) begin
      write 'No telnet sessions active.'
   end
end


; <.page>
;
;  cleanup -- This routine is always called to return to the
;    user.  It handles restoring the user state.
;

proc cleanup(opt) begin
   set exec noover

   if (opt eq 'error') \
      opt = "error errmsg=''"
   xreturn &(opt)
end
