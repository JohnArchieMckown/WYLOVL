;WYL.GS.WYL.COMMANDS#TELL
;   created on 10/21/87 by June Genis, DC Systems
;   rewritten on 02/20/88 by Lincoln Ong, DC Operations/OTS
;   updated on 02/01/91  Version 2.01
;This EXEC file implements a pseudo WYLBUR command, TELL.  All options and messages are in
;WYLBUR format.
;
;   TELL {server-name AT node|server-name@node|server-name} message
;
;Revision History:
;   10/21/87 GA.JRG V1.00 Initial release.
;   02/20/88 GG.LSO V2.00 Rewritten.
;   02/26/88              Minor internal changes.
;   02/01/90 GG.LSO V2.01 Miscellaneous cleanup.
;
xproc () begin
   on attn command = 'pcall ATTN_Exit'
   on error command = 'pcall Error_Exit'

   declare string X.ExecDsn            ;EXEC file data set name.
   declare string X.ExecName           ;EXEC file name.
   declare string X.ExecBanner         ;EXEC file banner.
   declare string X.ExecVersion        ;EXEC file version.
   declare string X.Contact            ;Contact person.
   declare string X.DebugAcct          ;Maintenance account.
   declare string X.PCmdName           ;Psuedo command name.
   declare boolean X.Debug             ;Debug mode [not used].

   declare number X.OrigActNum         ;User's original active file number.

   declare string Command              ;Command message.
   declare string UserId               ;BITNET user-id.
   declare string Node                 ;BITNET node-name.
   declare boolean ToCmd               ;Local TO command flag.

   X.ExecDsn = 'WYL.GS.WYL.COMMANDS#TELL'
   X.ExecName = 'TELL'
   X.ExecBanner = 'TELL  Revised 01 February 1991  Version 2.01'
   X.ExecVersion = 'V2.01 02/01/91'
   X.Contact = 'Lincoln Ong, DC Operations/OTS'
   X.DebugAcct = 'GG.LSO'
   X.PCmdName = 'TELL'

   X.OrigActNum = actno

   pcall Parse_Parm(parm_string,ToCmd,UserId,Node,Command)

   if (ToCmd) try to &(UserId) &(Command)
   else try $send &(UserId)@&(Node) &(Command)
end



;<.PAGE>
proc ATTN_Exit() begin
;Process any ATTNs entered during the execution of the EXEC file.
;
   comment ...
   xreturn
end


;<.PAGE>
proc Clean_Up() begin
;Close any Active files and restore user to his original Active file.
;
   if (actno ne X.OrigActNum) begin
      close
      pick &(X.OrigActNum)
   end
end


;<.PAGE>
proc Error_Exit() begin
;Display the error condition and current variable settings when an error condition arises.
;
   declare number SLine                ;Starting line line number for variable list.

   write s'2F'||'An error has occurred in processing the &(PCmdName) command.'
   open ErrorLog title='&(X.ExecName) EXEC file error log' temporary
   putline end &(X.ExecName) EXEC file
   putline end &(X.ExecDsn)
   putline end &(X.ExecVersion)
   putline end
   putline end Debugging information:
   putline end    errmsg = '&(errmsg)'
   putline end    errinfo = '&(errinfo)'
   putline end
   putline end    Variables:
   SLine = end

   dump variables type X               ;Display global variables.
   putline end
   dump variables type error           ;Display variables at time of error.
   change 1 to '   ' in &(SLine)/last nolist

   if (xaccount ne X.DebugAcct) begin
      try mail to &(X.DebugAcct) subject='&(X.ExecName) EXEC file error' quiet
      close
      write s'15'||'The programming staff has been notified about the problem.  Processing terminated.'
      pcall Clean_Up
      xreturn                          ;Exit the EXEC file.
   end
   xpause msg='[DEBUG mode; error condition occurred.  Execution pause.]'
   clear error                         ;Reset error environment.
   on error reenable
   close
end


;<.PAGE>
proc Parse_Parm(Parms,ToFlag,BITNETUserId,BITNETNode,Command) begin
;Parse the options(s).  The full command syntax is:
;   TELL {server-name AT node|server-name@node} message
;
   ToFlag = false
   BITNETUserId = ''
   BITNETNode = ''
   Command = ''

   declare string Token                ;Token from parm parsing.
   declare string TokenType            ;Token type from parm parsing.

   if (strip(Parms) eq '') xreturn error errmsg='Missing &(X.PCmdName) options.'

   if (Parms ne '') begin              ;Parse and get any parameters specified.
      syscall scan(BITNETUserId,Parms,TokenType,' ','@ ')  ;BITNET User-id.
      if (TokenType eq 'NULL') xreturn error errmsg='Missing userid for the TELL command.'

      syscall scan(BITNETNode,Parms,TokenType,'',' ')  ;BITNET Node name.
      cases begin
         case (BITNETNode eq '') xreturn error errmsg='Missing BITNET node for the TELL command.'
         case (substr(BITNETNode,1,1) eq '@') BITNETNode = substr(BITNETNode,2)
         case (upper(BITNETNode) eq 'AT') syscall scan(BITNETNode,Parms,TokenType,'',' ')  ;Skip 'AT' for node name.
         case (true) begin             ;No node specified, so try local host.
            Command = BITNETNode
            BITNETNode = ''
            ToFlag = true
            return (Parms,ToFlag,BITNETUserId,BITNETNode,Command)
         end
      end
      if ((index(BITNETNode,'.') ne 0) or (size(BITNETNode) gt 8)) xreturn error errmsg='&(BITNETNode): invalid BITNET node.'

      Command = Parms                  ;Command message.
   end

   return (ToFlag,BITNETUserId,BITNETNode,Command)
end


