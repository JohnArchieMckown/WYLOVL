;
;;  SHOW GANDALF command.
;;
;;  Created 7/88, Niz
;;
;;  Modifications:
;;     none
;

xproc () begin
;
;  Initialization.
;
   x.origact = actno
   x.origheight = height
   x.attn = 0           ; attn counter (see attnexit)

   x.pgm = 'SHOW GANDALF'          ; our program name
   x.maint = '(gg.jdn gg.sch gg.jws)'  ; maintenance people

   on error cmd 'pcall errorexit'

   x.show_errors = FALSE           ; SHOW GANDALF ERRORS flag
   x.reset_errors = FALSE          ; SHOW GANDALF RESET flag

;
;  Scan command options.
;
   pcall command_options(parm_string)

;
;  Do SHOW GANDALF RESET.
;

   if (x.reset_errors) begin
      try on lindy as guest : cp /dev/null /main/ports/errlog
      if (not tryerr) begin
         open errtemp
         putend [Error log cleared on &(xdate) by &(name) \
            (&(right(account,2)||'.'||left(account,3))).]
         save /main/ports/errlog.reset on lindy guest quiet
      end

      write 'Gandalf error log has been cleared.'
      pcall cleanup('')
   end

;
;  Do SHOW GANDALF ERRORS.
;

   if (x.show_errors) begin
      open errtemp
      try use /main/ports/errlog on lindy guest
      if (lines eq 0) begin
         write 'Gandalf error log is empty.'
         try use /main/ports/errlog.reset on lindy guest
         if (lines ne 0) begin
            write ''
            list unn
         end
      end
      else begin
         lr = ''
         if (last gt 20) lr = 'last-20/last'
         list &(lr) unn mixed
         comm
         write '[Type SHOW GANDALF RESET to clear this log.]'
      end
      close

      pcall cleanup('')
   end

;
;  Do SHOW GANDALF.
;

   if (xdump) begin
      try on lindy as guest notalk : \
         tail -1000 /main/ports/log
   end
   else begin
      try on lindy as guest notalk : ports
      if (tryattn) begin
         write ''
         write '[Stopped at ' || xdate || ']'
      end
   end

   pcall cleanup('')
end



;<.page>
;
;  command_options -- Routine to process local command options.
;

proc command_options(opts) begin
   dcl string token, dummystr

;
;  Process collect options.
;

   try syscall collect_scan(opts)
   if (tryerr or tryattn) begin
      write 'Command stopped.'
      pcall cleanup('')
   end

;
;  Now process our options.
;

   while (opts ne '') begin
      syscall scan_parm(token, opts)
      token = lower(token)

      cases begin
         case (abbrev('errors', token, 3)) begin
            x.show_errors = true
         end

         case (abbrev('reset', token, 3)) begin
            x.reset_errors = true
         end

         case (true) begin
            write token ||': unrecognized SHOW GANDALF option.'
         end
      end
   end
end



;<.page>
;
;  errorexit -- Routine to handle an error in the exec.
;    Right now all we do is log the error information.
;

proc errorexit() begin
   write '----'
   write 'An error occurred in the ' || x.pgm || ' program.'
   write ''
   write 'Debugging information:'
   write '   errmsg: '||errmsg
   write '  errinfo: '||errinfo

   write ''
   write '--> show vars type error'
   try show vars type error

   write ''
   write '--> show vars type x'
   try show vars type error

   write ''
   write '--> show vars type ses'
   try show vars type error

   write ''
   write 'End of diagnostics.'

   pcall cleanup('error')
end



;<.page>
;
;  cleanup -- Routine to do final cleanup and exit.
;

proc cleanup(opt) begin
   pick &(x.origact)
   if (opt eq 'error') \
      opt = "error errmsg=''"
   xreturn &(opt)
end
