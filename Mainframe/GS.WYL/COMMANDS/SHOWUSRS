;
;;  SHOWUSRS -- SHOW USERS command.
;;
;;  Created, 12/04/91, Jim Nisbet
;;
;;  Modifications:
;;     12/27/91  Niz     Add "accounts" format option.
;;     12/04/91  Niz     Initial version.
;;     01/31/92  GG.LSO  Changed proc reformat_display to not split the trailing
;;                       suffix.
;

xproc () begin
   x.origact = actno
   x.attn = 0                      ; attn counter (see attnexit)

   x.pgm = 'SHOW USERS'            ; program name
   x.maint = '(gg.jdn)'            ; maintenance people

   on error cmd 'pcall errorexit'
   on attn  cmd 'pcall attnexit' int

   set exec over                   ; see Niz for details

   x.aformat = FALSE               ; display accounts (not userids)
   if (wylbur eq 'WYLBUR') x.aformat = TRUE  ; temporary ???

   dcl string rc, dummystr

   options = strip(parm_string)

   ;
   ;  Handle processing "collect options".
   ;
   if (substr(options,1,9) eq '%%%%DUMP ') begin  ; DUMP...
      options = 'collect end '||substr(options,10)
   end

   x.old_colopts = ''
   try syscall collect_scan(options, dummystr, x.old_colopts)
   ; if not ok to clear, cleanup and exit
   if (tryattn or tryerr) begin
      try write 'No action taken.'
      pcall cleanup('error')
   end
   x.origact = actno         ; "collect keep" could change actno

   pcall command_options(options)

   ;
   ;  Execute command.
   ;
   open SHOWUSRS title 'SHOW USERS response' temp
   try dump _users &(options)
   if (tryerr) begin
      try delete '>'1 or '0'1 or '1'1 or '<'1 nolist
      if (lines ne 0) try list unn mixed
   end
   else begin
      pcall reformat_display
      if (lines ne 0) try list unn mixed
   end

   ;
   ;  Finish up.
   ;
   close

   pcall cleanup('')
end

; <.page>
;
;  command_options -- Routine to scan the SHOW USERS options.  We
;    return the options string with all the words we did not
;    recognize.
;

proc command_options(options) begin
   newopts = options
   options = ''
   token = ''

   repeat begin
      syscall scan_parm(token, newopts)
      if (token ne '') begin
         upptok = upper(token)
         cases begin
            case (abbrev('ACCOUNTS', upptok, 3) or \
                  abbrev('ACCTS', upptok, 4)) begin
               x.aformat = TRUE
            end

            case (abbrev('USERIDS', upptok, 3)) begin
               x.aformat = FALSE
            end

            case (true) begin
               options = options || ' ' || token
            end
         end
      end
   end
   until (token eq '')

   options = strip(options)
   return (options)
end


; <.page>
;
;  reformat_display -- Routine to reformat the output display.
;

proc reformat_display() begin
   ;
   ;  Get rid of header.
   ;
   try delete '>'1 nolist

   ;
   ;  Preserve trailer.
   ;
   lastline = line(last)
   delete last
   if (left(lastline,1) ne '<') begin
      write 'SHOW USERS interrupted.'
      pcall cleanup('')
   end

   if (lines eq 0) begin
      write 'No users.'
      pcall cleanup('')
   end

   if (x.aformat) \
      pcall fmt_account_list
   else \
      pcall fmt_userid_list

   ;
   ;  Add trailing suffix and do alignment.
   ;
   putend - &(strip(substr(lastline,2)))
   align_len = twidth
   if (align_len lt 40) align_len = 40
   if (align_len gt 230) align_len = 230
   if (xdump) align_len = 80
   change ' ' to '\' in last nolist
   align all len &(align_len-1) even space
   change '\' to ' ' in last nolist
end


; <.page>
;
;  fmt_account_list -- Routine to convert the Active file (in
;    SHOW _USERS format) to a sorted list of accounts.
;

proc fmt_account_list() begin
   ;
   ;  Get rid of everything except the accounts.
   ;
   try quietly change 50/235 to '' nolist
   try quietly change 1/34 to '' nolist

   ;
   ;  Sort the account list.
   ;
   try quietly sort
end


; <.page>
;
;  fmt_userid_list -- Routine to convert the Active file (in
;    SHOW _USERS format) to a sorted list of userids.
;

proc fmt_userid_list() begin
   ;
   ;  Sort the main response.
   ;
   change 35/49 to '' nolist       ; get rid of accounts
   quietly sort uplow delete

   ;
   ;  Get rid of unwanted columns.
   ;
   change 1/34 to '' nolist
end


; <.page>
;
;  cleanup -- This routine is always called to return to the
;    user.  It handles cleanup and restoring the user state.
;

proc cleanup(opt) begin
   if (x.old_colopts ne '') begin
      syscall collect_set_info(&(x.old_colopts))
   end

   pick &(x.origact)

   if (opt eq 'error') \
      opt = "error errmsg=''"
   if (opt eq 'attn') \
      opt = "attn attnid=ATTN"
   xreturn &(opt)
end



;<.page>
;
;  attnexit -- Attention exit routine.
;

proc attnexit() begin
   pcall cleanup('attn')
end



;
;  errorexit -- Routine to handle an error in the exec.
;    We write out some brief diagnostic information to the
;    terminal and then send mail to the maintenance people.
;

proc errorexit() begin
   write ''
   write '-----'
   write 'An error occurred in the ' || x.pgm || ' command.'
   write 'The programming staff will be notified.'
   write ''
   write 'Debugging information:'
   write '   errmsg: '||errmsg
   write '  errinfo: '||errinfo

;  Mail debugging information to maintenance people.

   open errors title '&(x.pgm) dump'
   putend An error occurred in the &(x.pgm) command.
   putend
   putend Debugging information:
   putend
   dump xdate
   dump account
   putend errid = &(errid)
   putend errmsg = &(errmsg)
   putend errinfo = &(errinfo)
   putend
   putend ---
   putend
   putend >>> show vars type ses
   dump vars type ses
   putend
   putend >>> show vars type x
   dump vars type x
   putend
   putend >>> show vars type error  ; local vars at time of error
   dump vars type error
   putend
   putend End of dump.

   if (xaccount eq 'GG.JDN') \
      comment &(s'2f')Look at active file &(actno) for error log.
   else begin
      try quietly mail to &(x.maint) title '&(x.pgm) error'
      close
   end

   pcall cleanup('error')
end
