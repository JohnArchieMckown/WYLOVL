;
;;  SHOWPORT -- SHOW PORT and SHOW PORTS commands.
;;
;;  Created, 8/16/90, Jim Nisbet
;;
;;  Modifications:
;;     8/16/90  Niz     Initial version.
;

xproc () begin
   x.origact = actno
   x.attn = 0                      ; attn counter (see attnexit)

   x.pgm = 'SHOW PORT'             ; program name
   x.maint = '(gg.jdn)'            ; maintenance people

   on error cmd 'pcall errorexit'
   on attn  cmd 'pcall attnexit' int

   dcl string rc

   options = strip(parm_string)

   ;
   ;  Handle processing "collect options".
   ;
   if (substr(options,1,9) eq '%%%%DUMP ') begin  ; DUMP BBOARD...
      options = 'collect end '||substr(options,10)
   end

   try syscall collect_scan(options)
   ; if not ok to clear, cleanup and exit
   if (tryattn or tryerr) begin
      try write 'No action taken.'
      pcall cleanup('error')
   end
   x.origact = actno         ; "collect keep" could change actno

   options = strip(options)

   ;
   ;  Execute command.
   ;
   open SHOWPORT title 'SHOW PORT response' temp
   try dump _ports &(options)

   ;
   ;  Display results.
   ;
   try list unn

   ;
   ;  Finish up.
   ;
   close

   pcall cleanup('')
end



; <.page>
;
;  cleanup -- This routine is always called to return to the
;    user.  It handles cleanup and restoring the user state.
;

proc cleanup(opt) begin
   pick &(x.origact)

   if (opt eq 'error') \
      opt = "error errmsg=''"
   if (opt eq 'attn') \
      opt = "attn attnid=ATTN"
   xreturn &(opt)
end



;<.page>
;
;  attnexit -- Attention exit routine.
;

proc attnexit() begin
   pcall cleanup('attn')
end



;
;  errorexit -- Routine to handle an error in the exec.
;    Right now all we do is log the error information.
;

proc errorexit() begin
   write '----'
   write 'An error occurred in the ' || x.pgm || ' command.'
   write ''
   write 'Debugging information:'
   write '   errmsg: '||errmsg
   write '  errinfo: '||errinfo

   write ''
   write '--> show vars type error'
   try show vars type error

   write ''
   write '--> show vars type x'
   try show vars type error

   write ''
   write '--> show vars type ses'
   try show vars type error

   write ''
   write 'End of diagnostics.'

   pcall cleanup('error')
end
