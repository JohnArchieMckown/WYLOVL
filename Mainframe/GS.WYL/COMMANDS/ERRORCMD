; ====================================================================
; Command ERRORCMD                      (wyl.gs.wyl.commands#errorcmd)
;
; This proc supports the ERRORCMD command in WYLBUR, which is a
; command used to invoke an error condition in an xproc.  The
; syntax matches the error controls available for "xreturn error":
;
;       errorcmd, errid=<error id>, errmsg='<error message>'
;
; The command may be abbreviated to "errcmd".
;
; You would use this command in an xproc when you wished to not only
; signal an error, which XRETURN alone can do, but also invoke the
; xproc's ON ERROR condition which might have other error processing.
;
; Defined 12/20/91 by l.mcrae
;
; Modifications:
;  12/20/91 ltm  Initial version.
; ====================================================================

xproc () begin

   on error, cmd='xreturn error'
   on attn,  cmd='on attn reenable'

   declare  string  input, option, value, xerrid, xerrmsg

   input = parm_string

   while (input ne '') begin

      option = ''
      value = ''

      ;-- get option
      pcall GET_OPTION (option, input)

      ;-- get value
      pcall GET_VALUE (value, input)

      if     (option eq 'ERRID')  xerrid = value
      elseif (option eq 'ERRMSG') xerrmsg = value

   end

   if (xerrid eq '')  xerrid = 'ERROR'
   if (xerrmsg eq '') xerrmsg = 'Error set by ERRORCMD'

   xerrmsg = chstr(xerrmsg,"'","''")

   xreturn error, errid=&(xerrid), errmsg='&(xerrmsg)'

end

; ------------------------------------------------------------------
; proc GET_OPTION -- get command option
; ------------------------------------------------------------------

proc GET_OPTION (option,input) begin

   declare  string  scantype

   syscall scan (option,input,scantype,' ,',' =')

   option = upper(option)

   input = strip(strip(strip(input,'L',' '),'L','='),'L',' ')

   if (option ne 'ERRID' and option ne 'ERRMSG') \
      xreturn error, errid=BADPARM, errmsg="Invalid option: &(chstr(option,'""','""""'))"

   return (option,input)

end

; ------------------------------------------------------------------
; proc GET_VALUE -- get value associated with option
; ------------------------------------------------------------------

proc GET_VALUE (value,input) begin

   if     (substr(input,1,1) eq '"') delim = '"'
   elseif (substr(input,1,1) eq "'") delim = "'"
   else                              delim = ''

   if (delim eq '') begin
      scantype = ''
      syscall scan (value,input,scantype,' =',' ,')
   end

   else begin

      ;-- extract quoted string.  Look for instances of the delimiter
      ;-- character doubled inside the value, reduce then to a single
      ;-- character and continue building up the value.

      input = substr(input,2)

      done = false
      while (done eq false) begin

         ptr = find(input,delim)

         if (ptr eq 0) xreturn error, errid=SYNTAX, errmsg='&(chstr(input,"''","''''")): invalid'

         value = value || substr(input,1,ptr-1)
         input = substr(input,ptr+1)

         if (input eq '') done = true
         else begin
            if (substr(input,1,1) eq delim) begin
               value = value || delim
               input = substr(input,2)
            end
            else done = true
         end

      end

   end

   return (value,input)

end
