;
;;  SHOW USERID command.
;;
;;     Created 6/89, Niz
;;
;;     Modifications:
;;        2/05/92   Niz   Minor reformatting of response message.
;;       12/06/91   Niz   Second generation improvements.
;;        7/30/89   Niz   Better error processing.
;

xproc () begin
;
;  Initialization.
;
   x.origact = actno
   x.attn = 0                      ; attn counter (see attnexit)

   x.pgm = 'SHOW USERID'           ; our program name
   x.maint = '(gg.jdn gg.sch)';    ; maintenance people

   x.id = ''                       ; name of USERID to show

   upd_count = 0                   ; working update count
   data = ''                       ; working data return area
   tok = ''                        ; working current token
   rc = ''                         ; working return code string

   on error cmd 'pcall errorexit'
   on attn  cmd 'pcall attnexit'

;
;  Scan command options.
;
   pcall command_options(parm_string)

;
;  Do SHOW USERID.
;

   if (x.id eq '') begin           ; Show logged on user's id...
      if (userid eq '') begin
         write 'No user-ID has been set.'
         pcall cleanup('')
      end
      iacct = xaccount             ; logged on account
   end
   else begin                      ; Otherwise, show specific id...
      iacct = get_account(x.id)
      if (iacct eq '') begin
         write x.id || ' does not exist.'
         pcall cleanup('')
      end
   end

   ilist = get_userid_list(iacct)
   if (ilist eq '') begin
      write 'No user-ID has been set for account ' || iacct
      pcall cleanup('')
   end

   ilist = translate(ilist, ' ', ';')  ; change ";"s to blanks
   syscall scan_parm(tok, ilist)   ; pick off first token

   acctmsg = 'account ' || iacct

   msg = tok || ' - user-ID'
   if (ilist ne '') begin
      ilist = strip(ilist)
      if (index(ilist,' ') eq 0) \
         msg = msg || ' (alias: ' || ilist || '; ' || acctmsg || ')'
      else \
         msg = msg || ' (aliases: ' || ilist || '; ' || acctmsg || ')'
   end
   else \
      msg = ' (' || acctmsg || ')'

   write msg

   pcall cleanup('')
end



;<.page>
;
;  command_options -- Routine to process local command options.
;

proc command_options(opts) begin
   dcl string token, dummystr

;
;  Process collect options.
;

   try syscall collect_scan(opts)
   if (tryerr or tryattn) begin
      write 'Command stopped.'
      pcall cleanup('')
   end

;
;  The first position operand is the ID name.
;
   syscall scan_parm(token, opts)
   token = upper(token)
   if (token ne '') x.id = token

;
;  Scan for additional options.
;

   while (opts ne '') begin
      syscall scan_parm(token, opts)
      token = lower(token)

      cases begin
         case (true) begin
            write token ||': unrecognized ' || x.pgm || ' option.'
            pcall cleanup('')
         end
      end
   end
end



;<.page>
;
;  attnexit -- Attention exit routine.
;

proc attnexit() begin
   x.attn = x.attn + 1
   write 'BREAK interrupted ' || x.pgm || ' command.'
   pcall cleanup('')
end



;<.page>
;
;  errorexit -- Routine to handle an error in the exec.
;    Right now all we do is log the error information.
;

proc errorexit() begin
   write '----'
   write 'An error occurred in the ' || x.pgm || ' program.'
   write ''
   write 'Debugging information:'
   write '   errmsg: '||errmsg
   write '  errinfo: '||errinfo

   write ''
   write '--> show vars type error'
   try show vars type error

   write ''
   write '--> show vars type x'
   try show vars type error

   write ''
   write '--> show vars type ses'
   try show vars type error

   write ''
   write 'End of diagnostics.'

   pcall cleanup('error')
end



;<.page>
;
;  cleanup -- Routine to do final cleanup and exit.
;

proc cleanup(opt) begin
   pick &(x.origact)
   if (opt eq 'error') \
      opt = "error errmsg=''"
   xreturn &(opt)
end
