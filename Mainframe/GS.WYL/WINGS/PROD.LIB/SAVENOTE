dealing with "othervol" conflicts

general:  SAVE command specifies a volume, and dataset is cataloged on some
          other volume.  REPLACE option was specified.

variants:  dataset may or may not exist on cataloged volume; cataloged volume
          may or may not be online; dataset may or may not exist on specified
          new volume, new volume may or may not be online.

general principles:

*  we do not wish to create any uncataloged datasets (or uncatalog, without
   deleting, existing datasets) except by explicit request.  we might possibly
   wish to make this require a privilege.

*  we do not wish to replace the "wrong" copy of data when (e.g.) a volume is
   mistyped.

*  changes to commands needed to implement these principles should not break
   too many old execfiles, but stuff that specifies volumes and/or ignores use
   of catalog may deserve to be broken.

*  fixups in SMS intended to reduce the impact of the SMS conversion should be
   supported or emulated in WINGS (e.g. conversion of removed volumes to
   system-managed storage)

What it does now -- SAVE <dsn> on <newvol> REPLACE

*  Exists and is cataloged on <oldvol>, does not exist on <newvol>
   - oldvol SMS:  dynamic allocate fails (RC 970C)
   - oldvol non-SMS:  saves on newvol, recatalogs, leaves old ds uncataloged.

*  Exists and is cataloged on <oldvol>, exists on <newvol>
   - replaced on <newvol>

*  Exists and is cataloged on <oldvol>, <newvol> not online
   - fails NOTMNTD

*  Not catlgd, <newvol> not online
   - saved by nonspecific volume request (to SMS on SYSA)
     [note inconsistency with "exists" case]

*  Not catlgd, <newvol> online, may or may not exist on <newvol>
   - saved on newvol, cataloged

Some other situations:

*  SAVE <dsn>,  dataset is cataloged on tape
   - uncatalogs tape dataset, saves as new
